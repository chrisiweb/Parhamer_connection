%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 2.3/FA 2.3 Gesamtdokument.dvi
%%CreationDate: Fri Nov 10 08:41:40 2017
%%Pages: 10
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: LMRoman12-Bold LMRoman12-Regular LMMathItalic12-Regular
%%+ LMMathSymbols10-Regular wasy10 LMRoman10-Regular MSBM10
%%+ LMRoman8-Regular LMMathSymbols8-Regular LMMathItalic8-Regular
%%+ TeX-feymr10
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ "C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 2.3/FA 2.3 Gesamtdokument.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2017.11.10:0941
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: TeX-feymr10
%!PS-AdobeFont-1.0: TeX-feymr10 001.001
%%Title: TeX-feymr10
%%CreationDate: Sat Jan 5 18:49:54 2002
%%Creator: Thomas Schröder
%%DocumentSuppliedResources: font TeX-feymr10
% converted after April 2001
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /TeX-feymr10 def
/FontBBox [-178 -195 823 877 ]readonly def
/PaintType 0 def
/FontInfo 12 dict dup begin
/version (001.001) readonly def
/Notice (converted after April 2001) readonly def
/FullName (TeX feymr10 Regular) readonly def
/FamilyName (TeX feymr10) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/em 1000 def
/ascent 800 def
/descent 200 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 101 /e put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3166449D69AB0542CB99558019EE
97CFE9FA87FAC14B55E860B5663A3D528CD3784FC9647A2EB72CF1AF4E31964A
3073722CB69FA5370CC5D9CDBF105662CA6188C1B3BFA7658F71EA5765A0D152
E60FD5E1DE3B99CE70C03D8CB4F775B5B17CE9573F5046E61444C0DAFD894CFE
E17604820BBE5A8FA11A10565933C0A8320DC5D116C780706E315C54E72426DD
AF1E6786D883AD182ED327CBB03C39C1A2602471C39296B7681215EC4F0E0E0B
264FBAD453DD3B112065828DC04E265255F9FB51F5EEC233C6A752ECA0246E0A
A2BA69049BBF94E6C8F510D29A7735AE4D122DCCA7B22929270D51C3F1E68174
E38AC54D6418690C765264C7897AD12A84B2C5269A6BFBABF05C20A37C94D927
81FD24D7817897529ACEDD9B062949D02FB9B0E1B2D0BF765675BA16EBFC1C7C
DC437BEE4D9FAC437C6B9E5B0C00111499A90E1BD29C52263829FFEF1946619B
1C81623A436D2FBD670D126855C400F38CE0C88122C60EA0D331AA9636B27218
0CC9B0EDE940FFB5EBCF83EDB330F8E83C7166452669E04F2E95A7718ADBDA8F
F99C2DC815F7ED17655111692621430D077DE661F297A8B6A33FECC10B3892A2
4F8E139F3E446CC7D7F5D64E4DBEFDAD72AECAE4D64289A3E2BE0212CF4A91BF
04F60B14E7522795440054CCBC40C49886656B6918198778A498EDBE40AF4536
7F96E77E40A9D65B1D5447D2596B382447AB5549A11BD5B765F9133E1C5C3071
32075009D2AC8147BC53B4C07B14D548E0F914E600CBF320E1639435733D7563
0053CC74AE3E7F5B9741E8CCB3DAFC411B5F846FC583B7771A7088B1C9B9613B
86FBCA1EE9E8263406C1894EE246BE87CDCAD2BA7ACB7030E45B0866062055D9
EBF7F562FAB6190196A7B8AA1B61F407B2BE0F537129E27376C8DDC7C6416358
384B2A676AB3228144586258F2B82A5BD9AE9E5442462DA626088BAB0C29E8A8
0EC75BF6E5E897761B5D095E2A8EDBF2CA742F3BF155B4DF28110FB8B7FB9A6E
9229F9D0B47376BE7AE5CE6A6AD32F50B62023CB32E8E0CBCDE2110AD8251854
5F8934CDC91E522248E019A6DCA06A0C2D005D541C6ADFF72812F474050C709A
5ED08B5F83DA1FD76037AFF77515188E13073B30F9A49A970613659071E0A130
5A4DD21C42ADFC1DF8CEE802CFAB2A75B7460E9F46DAA8CE31D5F287D3163B98
5966C073653074E89114B1B8A097A43E58DC5E49AC1F70F04A922FF9955F9FA7
20A6FCB10A2670BB3F44D959FC897BA487147A0FFDDFD368EB1A41F4CCCB619B
A362730B373EAC754EF5CE2692576DE100E10402670F41FD38F11A1BB43B7F42
B4BD7BB5F4322C4A9D04BBE445358F4B59B1A5C85FAE03B06C950485E5B304E8
BDA4BB926C21E17B3EC2D4DBC9353CFB90DBC6976B566C310DC801A28907CED3
2126B72E26578DF77022D969D09E111BC1C489E88E7B0315E926B0376B085BB5
3CEAF925AEF208D454C49A6B239924FA18001BD1A7D3EA4E7904830A6A948A79
F50CA56EA772D92627A8380A37F3C30845647AB612D5F6B5CB916996A0EE6697
BC62B6266F4314BAAD796EF51EB965F7C30C001F16442E0CB7A6984B78AEFC46
7D6938EFB347E3287600228311BA24326714E77F1932B80334F933C2926274FA
21BAAD0605BBC9A01BDAD6D5ABB885A4E651B8DFAB60487319C1C386CE6A17CF
CE6F1E639526FE52759F1C88A2B52EED4B93C0AEFE101EEEE8C108F389F9D1E3
205904304DCD3F06198594F313F1BFF10CE7F410ABFE3BD5F47CC3D7DB91E197
AE2EFFB9015482D6C79EE33D31EBC91E7797ADADAB7F682F72DFB7B0B0B6AE27
CDA9C0538E1246167FDF86008881E9F917291B498DFD93885C05A1AC6F3A7C11
57128C3D6CA767C80C7AD866074879C24CC063341E85B910ABD13E4BBC7A48B1
53E24D05C43CAC6F3337ED734614EA91EBA620346F23693C7FAA9F488FEEF7DB
E525E547787CCBE1B9824B1CF0B92007A8884194388AE40560BE9D79CD4DE9CB
96359F98E85F2A49F75B7B66C6444DB0ADF62964CF1A47855F8C4688F95EE5A4
50C96A072FB8069A59B20CD2FC703F2F90D3AD1BAA56A93E3D2E2F33C6E2A7AD
258451B1411DD8DBF07CA0246640732F5ABE58B44AC29D9EACBB671334A141D5
FF7CB44C5D629EF4C3E479B76B6A11B47AE63003DE140FB162E88854291E52CD
218D3E70E007E24FEDE321E5814C501169EE40269A4130721A95CB23F48C32AE
DD7B0B4F6320A76DA8A605679B0863982D6B3D4903CD8184B2B829CE9FCBF77D
6CC854455B66AA88CA78910178F748BAD7A4F32521BA7CACB879CFC719BFE2BC
13CF49FDAEE217C53CE31DAB6FDCF81ECAA2E72A2CF15BD84D275BE55251F82D
C8A19F36545C0BDA65AE10E063F5E05A8DB056F7A41D4DB694C98E4246E3B38E
230D155F7ED10F13F00679BCDF5604F46E28FD15B81B55471B8262F8A2F72AF4
E5387E41E401274B350EEFA6C4F03A1E6E4A6B16E528088EA3C7E0299E38DF46
D345559937225879790AF29198B2FDEFE6FC99C66C69959F3FF98F67C07CE90D
F2993F8732E88A77355D4A186BBC8C299C85DB3CFE829BF9F22AA8D3BD63F0D9
CAC57A7CBE25193B289D8A9A614DA9202F69ABA8FFB96F4281592634A7FC4A21
456B69BF77848502657B7B934003418D2BC937720E67D4890E00A199636842D3
DB74B2F004A6E3F3EA6972D62C62E5D4F096AEB2F194E77B656822D9CFF41D2A
7C14F16D7F07E90306AC87B528175244B92D6C10024132A3A1FC2FE78F688904
3568D0BD312C635BF2C024B53B5624F8B17BEEEB424E619CBE804E24E6EE1BE7
3F159A72AB7ACE1C0347278BC542E4525E503DAB0127B4DB6D8538634CC60BB6
7851F14F0753BA3838ABD61E83ECC39C427E62AD4293F672F8E7C2A49B534F60
E877F23EF5EE0E849AEC5F5E12463F6F05D059854D701CE420D546867EE7E6C8
7CD2553F33682A0BF985671C6433700CA8FFB638E7C7BAE78BDFEFAD10DC5846
AFF08F08956041F2912B4D70FD34495C96D3F9B091293B9C738CF5C9563277EC
3C6863C4A69B09E4DDD525D77FD06C322DAE13FCD48A4EA7B1B6C8F0256FC16A
3B47A4BF0DA1C49EF53974B4BF01C9BF194CE7EEC2C3AFA9E4CECD8C4029CC6F
377E4269806EB0FB78AA812F1513C2CEFB8F50CD18615EBAC10976BD12CBC1CE
8CCAD0333D455C3ED1518FD7F80539AE63A5045D34B982ABB471ED8EB18B50D3
1A150C82182B6C31CC9B161A87361A6D96B63CF0D97A286090DA8CB72991B175
EF3D690C64D9CB5EDDFF5B00B7C179825A1794CA054B6F7A8CAF03DFD7E62F10
CE5BB34BB02E50AA4DD4FD704F147DE3DCEBD3B1DEBAF3483E01CA3076EB19A5
FA2A8815CD360568A9A05176CF4111CB27C54BC8B4B991853982BB7307283D8B
93E5A2D6DF853B6E17BEF7C06A182456EB73D4A1B77FD58A853B07B04ACE12EE
D04046A4E977A39963B144EAB63C7D27F2EE65F677B9892C999BC81B3BBDA70B
E7FFF8E673275F9B84D39E641BA990B9AD160BB73CC391B6C36A7C1D68438243
1606D2298D58EA3879D2CAE2D285011E229372F7FA98F55556F0C4007621168A
A3C1F9A9DE81DA70AB287ABC70C4BAE94321D94FAD2DC3754CA39F689C8221E1
6E7E57EA41F552EF612080D82122D5733CC48978F6BC62E40728DCB3134F4536
C33E222D0E79486EBF9A506F92CCE773BBDF3A764B3793E96393DB8EF1FF0FA1
F3801274B7B982FC53258A752D43261486A2A94B321D90C9393EECE5B3CBFAAB
D0BBA6E49ED462B20AFB384AC2D3E290BC8FE7805D5C0B0D37F04586BDC8C812
686C653A47B40A803819C86FB0C8EF10AA1344350972910363FC0E3DB49A5D75
BDBED15C823E1E870E2F0EFB93A856F3A63E28CB7ECBF17E444B271FD92157C5
8727745CE16AA9376735A8B02F2CB426BB91CCC365CEE49AE5C9938B08DB12B1
EEE55B954D3694FA0AEC0836883D86F6EA4E10ACAFB7CE5D16F858F6DFF1246F
B2135837B67DFE58003AF012885480947A19B0F90980366EC245AE6D8D33FD30
E080775680F701952B697FC8FC07A014B78DEC48017E46AD78EF6EE80BF81760
B2ADCBB63D91D25DCFC77F2B8867BC0092BD9DF8EDD0F7DEDF2458F1F938D05D
DD4C3A7D4B3008EE86F787EACD7C687B6BB09D362E814AFBC75209C457A19F37
C9780469DCD173C5E5BB7C88F4A8FF1E664AD95E1F5D005B4F15416A320366E4
41E5CE5C8A53B64D290AC210490EF404D08C7C93531FF8CFB841AFF5A0E5A8DE
1E25EB0D03018A76C701E737D941569CE252FF92E3C0A05798F47B75B501B03C
D92B56739CF0D76A13E06283CB4F55177E3D6B28C265954DE0EC80A4CDFD91AC
A2FEE87917A4C63BCBDB24928F99D4836A62D3793411FFAA4CC7B12C934350E8
0C241E5C83E1BF8BCE56FFB67F9C7970CD00D64E7CF92F0A9CB5E672852960AE
8959AE74D4DE18D69B095F9F83C2D98F5D6D14B13E76E4686B85A3B606479B6D
F3B52D950EBCFE01639F6B0D9C205C947D60F2F0540D0E8B1B78AF3C5376F94E
D5769B92FC21082A872ADC4BE261FE71F0EA2422B17EF9C0338F63F4D4BA4AC9
D6C76169A46B500885E2CFB8671C053163F186C242F539453A72E3CD4F416A30
6C7A154B28FD021A13A11C78D113E65FAE2A6602D55510502603AD648CA7C698
E61A5B8F3689308EF934594FC5EFFDB86BED8324C690350CB92005EA3EBBB9CF
83EF65EA37BB27D684B89F18AB93968DBB6D0BD835EDDBF6F9425AE707A9E732
7418E39DC60A6EB89299E14D62AEA38D7E1ED70829196DB28D4906BF73574AB4
5DCF1FD068BE2B5B597021EC43C0396D5F172A723556BD8937D6800A6CAA33F6
A061415D49DA0ECE5C1959D9AA8513D8E616BEF8C9411F93E9FBCB6D2637AEDB
B0E719D54E5840E6F71109A5BFB26839255C305080216C0FD2477BA7613C8198
8EB16ECFFBB6D745422204786A17705DABE8FC123005E476FECEBE1C3E240E66
9EC0C64922C42D88A87D2D9766DB3E6273110B2F9281D80F004D184E9484EF54
222058917A0DFF5AEDC9213979C8716488573FC308948F839BFADCA37353F9F9
C7FC6FF049F4DD9DBD476228E880E779C7122C3823385F85F86DA752C3E01A8F
8A103A854A8545E4109BE8AD304A60B54F124EF2A6AD3E5E7EBA6AE533E22954
261017699960A1E27D714C2E2D370FB1449ED84B4169EC1057AC8AE70B3962A8
2A16D2F5EC8818734A52C2211FFFB785AC27000B218464AAD820DCAAB31DBD3C
2F0ABE99FB90E8A188E9E95E3320B650E814FA72E425FC6D0B5E245330843CC3
DB6AB767C90E8EDD41E12FA1973E681A7180A3917CACA630FB0BB7A62FAAF292
EE1F836E10730B4797B72E335F6C291A3BFD7F71EE335C3A6233735DB2A379D7
4D1CC655A657023C0B72C819D778F70D9654BDF7C3DD44B733468029F6DBC37E
1D00A80D8D9E7DB37593FE4C2AF5E00949062085BDB51E9448A41DB88FC7401F
725593E1E2281E1F880F829778EEE4197E71F8E59420EAE7964C98BDA67D7224
51A7781696EE91A0E6138EEA37EEA66A29A778841BAED8A196FA2C9DC4DE9BD6
4915CDF114F441422F0FE6F6DFC899C05D171FC0E370C9D27025B9407AFBA04C
19CBF35CBA1E6328BEB3DC8BF3F27EADDDB063543BBE32195A9AB39C791A053B
9D6B918B1E101C98DA8A4EB26FB47BCACE2863C768381DF68C4C8033BB3BBEF5
E93514207A5AA561F78B3F9C70C691B40F4ED7449650276BAF866B77FC16D797
B91398B1797FC8A8CB148D5C234F59A7E4E6F661431598B68DBA780DC8B34A19
AF4EA912CB694B86D5C7672E57EC16F21F87944F7585ACC0847A31E2777D0068
69A9C658B4729A5A2DB08E093EDFF069067F02F93C4495F9F171AB52A1A5BF64
C71D97FA60A71E3E705E51531028D02B1AD3E8E032AC8E599DE4DA19227401AC
F79915BC3230D5D90FA77C29DB133FB7B4ED7B0D7BDD3B018BAB38126626BE19
57BA72362A12E23AB2C4F2C20CE67ADBB39FCC59111A7A0A61ABB82CE1711D0C
193F0D086B49494669F901CA6013B32E0160B72239DB3C2E229535BEF14DD08C
A8E603EF0B6A5D6FD9CE8EB6DEA304E959E394802B82E7C4BC31E75E1CF077A0
6F520EC408B4237E2C5D41DB0B4395D891BCFD008BDE2F5936C9B7D3D7F7F9D9
06FD7B552B784F7814AE16D8351899FC23B6772BB69B5BFB57D118FFFF07511E
8C6E994823E198A79376EF3E24C11B6FA1F6DEA71942741038EB332490625EED
2F92A7EAA26C64B36C180E45C35457FEEF8039855872511C30AE0BD536024FEF
2E0F40D53EB1845EF5EA9E10FD5C63E01D074E58590F0C8112BC26F1969F9C24
6A4027E715AA573228315FBE916274AE6D17F25A21DD9629263D6D83E1C5E6F0
D0A42464C558BDB4FDBF9201F57C808EDE384E12A8235EC30E90CCA8AA3C36CC
C09C6A6D74F9A30B50CF7D4ADDBFC902F6A006AACD90582B29ABAC673E1C6D67
3A70B27EEDD61AD0C422B387CE691F8ED807C137C5841779A540211331282F9C
2997E5A81A6BE710AEC12B347D9238B584F24C63DD4A34D620644424F315D15C
C710ED000B0D28DDB19A4D99AC1E0E5589B7A6F7B2C86F2F7FA4CB217F201436
991656F10224C5AA8341E6658ACFBCD76E73AFAB6E5B0FC14CB8AA60A1E845E7
5AAE0C73DD9F872EE3D28075C27156BB8D803A64E4126866360A54D16EFA11DB
13E7E52C0693982399545875D6ACAEA88BA0A3474783CCEF9A4B65EE64958091
8951AC0C438C2B0413761A253A43579B0B640FDD1497DE8C21A0856E475510E5
142E3842906AA80914CDE9402E4B37D2A6E53BD127D2D3AD5149AEB5ECD8CE0F
A7609D35FB71A5E542B436D5C7D71A4CB29EE71D11E0C2769C4FE6E728D24E56
A0169D3676D3B731B35E37C70B8015A53A9C15AF4F78D0FBDCE03FDD2C3D52C7
5D852346EA02BAE2FD29487245DE75FBAB597E741336005E4A549429A51271D6
5CBCFF634640DB0D056DD5EC6D5A7DB00E37F666CA703105ECCDBC670A47CDB7
48FE6D422825339A8CA5AAB0B1235F8D8BD2F5D6A3515FEFD32540521E20DA01
A0141AA1F8B223BC02156AE4E096FED912A6C33DF4E150052091700123102EAC
E6AE38599BA0A0CB94E1099475C28A540D3EBC4EEB382E906F6B4A1CE6940F16
77D474945B0DFDB54731F85B138577CCA34AD3BF8B7677378DCCF3999EEC8E5B
5BE10FE19D636B006E7D7290A3DDAE1DCFD312C2726B08676AC7B03A9E5BF580
BBD88C779EF23B655F9BBBC31F4D54BCD94E4D1FB85ED55AC4475DE0DF309494
49CF2BC0A9C60D7DE24DA0C0AB8F50953F4DCE4B2FF8E60DFF1EA75F4BAD4B11
3C735758AE622B81CEB5A8F845B2547C6A43812D4ECF9C9E042425176A20004C
2C4A815A38E237DA4ACD903D32B7F9844B2E42AA7F5A5008C4CFBB51F2A20C24
C4EA6D69F6CC5E79CC490EBDB8A9D4AF6103A6CE3906449DCD35B922EFBDE023
3D5ADD67F4F5BCF49D61F67FB313A8E2F92D29A0B15C6792D299B9510A5DFA30
56DF9000191FA35C2999FDD7132B3EB5E95020B032C8EE2BB4543DAAEA0DEC97
3133A99719D7ADBB2678384749B7E1ED994548266CF51E5DA1E7D78283F24197
0EB74E258585FACA9CC47BAFA7AE9E116FC4A042404FDEFC6D20C8510CDE6796
BF13356BC9A3EDF5DF353F6CB8D21EDF5EB9B50AD6BE2804F23B1727C373DC13
E4B7B7F5F1A0333C4BA7842F4E9F3D067DA11B64EC3D1EA2AFD82DAF0087AD2E
0876AFC12C5777A2743F938C01847747CC7525DE041402CBAA4C45F273A75DE8
528FD3BC80427F9E3AA1EAB57E9E2F625484D388DBA06AA511B556E660B7C58C
232E6191D34214218E9C35838F7532579EF7430063A099A176DA59B024B2CE56
FAD58E3E9AB280F49EFE8B13EB67D91B6BF3BBA8BD16CB5EE0B3FB9BEF37503A
F4114D06702D250FD78E921D8ABD0BA3647C711CB3FF3CB1EAB2DD7137A9CA46
4E545382727CD0F1D75102D7BEB5737B3D3009136C2DD9950F1DEC8859F21328
330224F695949BFE58241CABC4D378ED409FBA824D76C2EB94A55575E0B44B99
5F05EC9CCDC503CEA55FA4032192CEB9D7160B024084A468FCE4AB2F876A1B22
2FCE1702E00029F29A50C636A6C59226685F2B7F885CE26FF2D2836BD9C03367
13420C1A8BCFCB324EA9D26744B77B4BD9099611FC2209A53321B737E518950C
751B2F929CFD04EC824A2439E9BE1C56A3A02420C2B86C24BB936C7752DFE88B
A682B788BF0113BC92352E873AFFFC279F2F3ED949F3ECEED537F134E3C8A2C0
13BE80DE36288A86E93DB390E241AC83B926EAE86FFDF45E037CC3794DDFF403
DC64962FAF85B9714D399C221E36A633C0BB26EE127EDE93B54A6C34C1B1F322
7503847E9CA4622FF6CEB1E9828DABB65D66D658349E0404BD3E7871E3952C91
81DA87EC0F40B008BBE4253D7E8E7EF16C916674FCC41131B68BA2A9FDB59917
8206CB366282C90FC91B59C8A0FBBB26408CD0110EA1587A07E4FB09130E5B0B
852C429A88461C2C51F924B919B8C4F98BA8BF058EACE6ED42C208AAC866A1CC
DB9FBF4227F1CCD9FFAF49713AE4B85EC34FFD123CC49EA507D36DD69F0072CF
B01CCFDD0BDEB72A427A0485F0FEC84B315C854A341951CD338D8B4E7A77E3B7
41ADBA8C621DE2AEB91E65A0D3E1BDEBD508A0CB08F4C4E57D8481592C817520
4B6BCB5196CBA074
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFB8DD9B92CCD508A09171BC12C8ACA32FECEB20
7CAA1C2C81ED075E3EA7E712D95FC612CF97F3402658E90924C75CA278243C52
D4E02E8224F197E555143D563819EB1ADD2248C18E02E18FE3DCF624E37ED993
3C7DAB05959E694040B7EF5F92D80AEAC2CF58EC01BD61D7CB962C4EA678C5C0
62593DE423E11AF90918CFC6E1E8F9DA428296FF0C92CA794AFBE2067C46264E
EEB0AB0FBF2EDA1A8420EF654A1D4E0A295D1DFECBE39D9FF712C85C748311C9
CB8695716F72FD4F80E77DFD7E01E9FB8CB1F2B5971940EE4E7B14727B086F27
E43E6E3EA6EF0DE68E17C9C0F050085274ADB56BAAF193211E48D1B82FE44A59
2A9F5FB13EACEB54AA027C1B87380F9EEF9D500DC327702B132335FF288ADF62
578F30CDCCCF826E4C4CB57B5D5B537BD2FF89086BD0C4CAE557ED66306DF3F5
BA9D1007C869E8594D4138161162682A719FFCB1A982A5CE8765E2681E64B8D8
4A7CD7504E58CB81D0EF03A3EEA97D43741F54987AD65FA54A1BD682F7EFED16
D35D034F1AA5CD4EB628353F1FFEBD0CEB905F10C183245F1B733C17D3B854D5
3BA686CF4088BC6C0FADF9A6C05BE3499567E930F710682B8954108AB7B126D8
255F1A0F1BD08158F94077D191F62DD73838E0CDBC99204AA6AD1309BC5668A2
A524C6D1C68B4E416B248A6FE29A67DCF4E1CBFCE603260A277AEB7F75627333
3E84F341637A1BDB292EADD055C97A12CF0B915E39263AA9F03B21C1F45C87C2
CCB12B59066B6DA2CA24E020A0FDDCC0498D74594AE3ACB0EB4CE7727EA32222
07E864C7F39773638E3BD2FDDA11C79177AD0A23CFB7F631E00CC979AD410F81
3119C0543E091E4820C12FE47E3154789E02FE363C319139350F014FE8A785A3
F66FFAB8D8C9E7E26E49BE5FE558491D1A57B150A5B386F7ECCC0EE8E31695A3
36BCC7BB9F7FB26DA3444238CC33E2791CABC1DCD0BFC3372E1DE72D93AFD1C8
E2635A5E428AB33E24E81346D13A9377EBEFC6206D372675CF43235722B50C78
8C4A02867C68BD8E5FE9A45653BBAF2A5DCA560DB5BEE7054FB8B0A13AB598BB
C481A3240450D1453A1CC1054A06B962B7E28A73BE0B2713DFD32DEABA293EEE
AAA8C0409564BB1ECD1249588C18D01D8AD4E0F0032FD811ADF35B869BB210E4
4A57178893AF229268DC5375F01AB676E600823FEC28C30D2208A868EC0D01B1
4845736F9DEE02D06634547729442ECDC50C90989CC881C3D8E85B76FBB10040
F0DADEE5ACBDBB43307A30FDEEE5F77E621B130E4B824CE23100BC08DC65BDA3
46307E3BD497D7F1E2F51B557FEB6AA32E84F5E55E5C12A81B73F370431F3842
A1B0CAFD4ECE7F0DC8E2A6D644CA8735A4E96445BA9CEBB627718F858DC051E4
3963ACD7E7868CAA4488EE815D40E28CA54C83221810546F0009F98531353C9A
8EBFE7DB9C9A120C2A4E2FED0E63F90B8DF65026707BD39B489E54425A5ED877
73C6B3A8ABC8ABB13ECC3B249F1878A8F76D59596C63BCB936321589906AB242
14F3C046A1F210FE287A8192CBA7D2A89BBE7A7B2DB6B1E19224F04262D6403E
3B41787E1449587E28093E66A9837BB94195E3A4A5C17DE6823755F59BB9E3A0
52F69C7808FB657D9270933D8B167D2575CF146336BB1C76735BE5CAAAEDBE98
C69F89E7E71474CFC7515F73F86727442EC24D46F92C99498946CAB6DED8F5DF
0540063DEC2EF3F83AAAA3F4F68A8E892C3D0529A466C6A310A6101223949B01
79CF7DE6B550657C91BF3116EE7F85B0178B3227810D99B48361133B54A6DFDC
872745DD45766283944D7293D6FB1B42BCDDF2F241AB267897BFABA39D0F2725
E0DBA7C8CE305DE7C1B59DC2184872FB99578B809358856E4E99B28E138E2DB5
85CDCCFBF2B46F01012CC94E2FB30C1E4411918E892630F2AD07EFF1919E9BA9
0194E24A69649F0DFD0046D2EED7AF90313E70594EB5C354023BFA07912408F1
72E39AFA29111A71BCFDDA20BCD6006B0309EF09261B7AE1C67BDE0D385104C7
C0730BEF94DF3D9BB2161C7346FAB11805152716480C0984BA13A8433ADBD629
229C446AF84A690F56A09A84EBB1CED5515C36F2798A89689BED966ADC9AC306
D01B6E24DBB2CFFBEF205FC921305B45B1B8FFDE2A09CF6301F485C8B7DC2E56
82DCE3042DC9767C407C0DB4D0FD1A4881A34FA0EEE7810D69F2428045CD609E
23CE37791362950FB435D1899A47E6E69EDB17BC08CA1B092D4F20BE1AA6BC4A
9DEAAB1B74EEB7B908245CDDB7A093C1AA307DECFFE53A1FE54984DB1360E320
862F2CA6E0258507C6D3DC1DB94102FB88F631211557D3A4F79A8E5FDE69B1F8
4E9FB2EDBFB4B8853524F58D4E1EB98EEBEF1B6C2D330B1CFC47ADE896255DE1
FFA8CC1A09D26342E89B9A39149E124C564C5251F613393060892D5A51B78BEB
3E44B78C50316C61B6FE484CE582EB7FBDC53D9427FE267051934E366F7C7B2C
ABD2C65921B5520C6F70C1B6E7AF8E11BA4798C1DD2EB7D4F962028061B71099
8E5EAE433D8A82CFB15547B339AF376E9341FEB9433AF21E8D84C50F75043419
1ECF16684180B65D9CD4C8CDC57A0BBC0598B3AB03652A6AA459894E119B5356
CED765F73F6935478D5133B9E761430A39CAB0DC109B02A80626A9ACD7856ECE
4D6569F5D1D918A30005C31F177816336B74AF8B9931BEC0CAC75380C714BFB1
BC100B05D19D7BCFB18CDAFB0310935E6C7EAC6B9A8134C4E8F4969C9268F7A2
C306146CEC5039310EF1F4ACEA1A40014BA27BD58490D24B7885E4084932266C
621A42B8A3139CE953DFA9687BC439A746147F456517EDB169157DAD9D8AE5D7
EF2661E266C5C812B03E2569E0F138C2D58E38EC9F0B780C298874616D09E399
6CBC81BF2A98EC7A9A573A79CCDB6327D0DD0F821F886FB4496ECCA78FD1A2BB
CBF0CA1255799DF587CE66F042F7A5179B55075FC89BDC3302D01D7138DA0828
4C8C35A8E26752CC2EA8F3AC2AC68E70946C3E8F46B9C2DF790F79269566BF9C
9A6E54EC87BAB7D34EF99AD642B738312FC6F300093EBC7669C934250A5CE240
A1171441D03FD75811F371B3895AA29DDC6A984C0E944711C77542A66680C933
9C7F2D5A30471C6693CEA46EF483D1046E1A9FE6EFFA27CA8C9ACE821AB92B0F
5D9DC9D0A91B93ED65003BD0C4D6608A6236426C7859229DB42614A54EBFB4DC
8097C0D9B0FB95A5A87CC9FD874959462454B5D439C456BB55FB81B09E3FC5B3
26D850A5DED9EC17E11FCFDC544B2885995B5EA543CD7E8E17FCB8B4ED57D7C6
1B0C70972F86F67336647589FB0EA874920BAFB89889071729076D755021533F
B886A9483867A5E3CB8A961CEB372CDE1EA852052312ED4484491532ECA79ABC
3EE60C00312665A8DF22AACCF0CBD84EFD9EC148AF4245BFE780E23BB321DA56
DBB416890407B39D34B68BB61B00B146D2E8F794C1546CEA6E037D7CD767AE50
843AA610583CC318C66E25ACE786FE7B406E5F1F232517AA77DD3875AF98FB1F
E6FDDB6323E23AA93628A6B5887CA2263BF3F5A696EE86831C603B0AB1442AFF
5FA6C191F7A83C324AF0629A269BC5E6602B15D0B8881E6F37D510D53C60AF3F
6159041212131F18BF75E71B5B6E7022B99AA55C94130C7A4AFC72E016B43A65
AA522E7EF3FC6134D5F715878D99130DE16A3ED40825C75260C7BA8A5A084766
1FEE0F6B8798F96EB458F2E1ECB61B6A2C9887A5D0541AC711EC68B79C2CA3C6
175D4A90F08ACA408540796646E0DAC8220792B3FEB61999671C1DFDFA0919F6
35FC2CB139762BA4D20490AAAB168B00EAE492D1EF564F9D4A077B526322E8A4
4E42451F694443F3C4E2FC9541C8344D3575996B2C50A6E3D62384F9ECC1679B
6514C107D7B3A613F7287269594865E9453E9B6EF227867D9CF9549B3B5E2A6A
F748308BAE99AE06106D90DE65FFC15685F8CF6DED13F50F406270CF873290E9
9A3BD506A8578376F788CFB65E372FC69FE9FD47150A0CC019FB7BF22A3B979B
EC26787BAB2D5F893EE00D41CB48E35CE9C08D0BDC30768CCB856C1CD7DE9E9C
0848692C38D1E3016BF4B4E37EE291081DE21AF12C1240C57540E73362D1F9A0
904081FD330AB6BC5E2CECD68B9981B2BEF1AED8D00A3AE7ED338B9853BA0C39
ED94DCCA57EC3011976194F37EE1CF9FFE0A50AF7A135EE1660E4859D8DBC6BB
0C8F3BE25BA41EE9119FE41CF516BD16A11DFD7D48F40E4AC21B925B86F688B4
66DB5A336A8D8DF221243A63369889DAF8A3F4E704112EEA6A7AC505A4349861
7747CDB84BB3B67EB5730FFCB533250CEE38F3588EBFA4D5E8D2744EFE51763A
6BBD41A7AD83B227CDF61BF65CB9568AA9C68C085E87B32EDCAFFCED2FA9A164
2AC819E83AA5F2D8120ECA4EED74ABF85E3E44D28B083F3CEFA57001DE299223
DDBB333D71003681B4A816B0D4CB3E5E666D3DEEB203D4F868729955E3ED89CD
A89A7EB60B9749C1033BF3AF51455B475EC9692E9E99F6A908DA4D5E7C7227C7
6F79C4261DAC82AE92065F2FA5D6CB7C12C6F9B64B028722F227C5C2B8FEE51B
1FEC64FBEF3F66FAAD8EF6D6DD77674A3480CBFA62794496BF3AFAE59FC285EC
1BB6E19BE9B1E902D8F01E5ABE8CB47AA5223CDA4D34EB48C5503AE619A9355D
3649519A90499FC0DD7015B4C4BEC14BE403299463C32D52D9EEC7DEADF359D0
10B9EC7590C31F3D243AB6E8C41BC1DFF133DCA081EB832C4C485AA946B5A584
8C28634C55827DF596F934996E87AE9B53C0B8009CCFE62C17E001C96636AB65
7302F861824DA6959EE5FC07412D006CCFEBD0E08CBA11A0A78C455C560DD52D
1C26B596C4BF214AEE04313469443B176D766529787C698BAEEAF7AAD1263C99
4C82ED77B3191FF2B7FC8BF3AE8B6F5E9C82246C7F9AD24D84FD20533FB7D592
E28A4431E1C30A523DCB49AD1E36C12B31833685258242CB84997044CB1395A0
56C4BBEF4728C176E3F39C3548B5A2BE25266587B52BDA2562AFCC2DD0A8B721
6F71B74689EB186742A76CD75A7F4FC29D179FEC22D258A9F7CF063183A0278A
8DE53E7DE6865D7FD6AF386280FB1E7C70B9E987F29905ECD40E2F90F0BE89FE
B4B84CC0A3F6BE1B968E6F1750A2379DB0EE4D389C4174811E9E24F85A8B77DD
6AE21621F967A20FAFD4D223FF9A05D570F07571F1BF3F29CDF026EB7797E0AF
D080DA0CD80D8DF7EBC89DBD03C02B591D94097D24A28BDC18C55D2EE0E6DB45
B034F1FE61E66051A2DE499A368E7D55BACD328699AA3E465C41C19E81642B77
5408A1249F3175E659640825731A12F98C3C20E8BBBD7456FD4CB9D0E370FC13
F87C4AC4EA7673552C9928D1539E597DF1BB2FFFE276DB12DF81F103DAC3E378
2821C9C59C5F01E1821DEB511632C355DA8AF33E9B52F609B76EBD1D860A54D8
E656ECEA88768396EFEC28298ABA0F25113B884DA2D1596E14FCC7FE2B528806
F4D4A7779F476E455B01C64FB89E724580B4CD7ACB9E6D148A070D57D9F4CFDC
4C1FFEF87FD2B0CA2E1A287BED8B3E1DEA15C5C24ED9F31705A32503BE722598
1770457B8415305125EBA0BC7DB7649E845B1A22564F633E1D3A576A1FAB337C
3EAF5FEE2AA93FD2247029D55D9FA52AAC7E8A9E199346B2D3460E650FE5767B
20B56DA1BEA94A79A113B8383B904D1B2694EAFAF8467A2D59170E71C04BB7F0
D3D40868AFE8EE32B307654346AFFB61238D76C0009D905FDDA547F04F0C596B
99077020341D0C89CE65DD83522D571226623E88BBEA686CCADB88397DB60F50
21CB29F03CA5FFAD39377CA1DE2D3AC84FE96507D123B46608A6BE41828C3BF2
FD6FFD343AC0B6D43601DD700C66785D661A19C6090D596AF515629949549163
4D083B036DDF4CE43930119F7238E314A92695B19D5513557E9E0224FC37B4B2
187C238BB705F2B3FD9F8881CD78FEE63EEB7EFB947F6EF31DCC61CDDFC39A27
7180887E2254B2B54A972B3583047D43D202EC047CC23B80C90684257F52C766
EA1C1B863CD2256C232F8973C6C2ED59D0F7F8387DD8CA44A544BEE210382DB0
321D08CA8143EB97D8A5451711BCF10381381D3FDDBB3CB33249F41F593D8013
072D6BCF9777D2D3E87F6F5E3C48CBE8B8D5373D11EEA2A32700D13B25BC43FC
CBC12AD7B5C185FA27393E94DD3DF00391AF696A2E581AC595954FC01D0902C3
678DF44F20E718545C2F6F7E7EA4526FBC46A3EAAC28B453E93115E5F582102C
A583FE4EA927649EA5181DCDD8E9C0A421C180606587813B4F7C133E259E1651
D1EB4BD5A463DCC84E2ED7D3EAB46E6243AE85844FAA5D766B378FE86691BB12
83618D234ECFE8B485CE299DA4A1EDDF6A0122789BF66501B14680A3B9650D6C
29FCE9BA6357112336162FFCF2F3B4CA7EEA93282C8588C9A3775A2941761F9B
EFC4C4F3F399B9DE9AC0FC2817358F5339306A9F79BF2523B16A083F710C102E
07B67247F896029B671A1993426378241B3230E538EA282B97E922A540F581EC
9293DBB7A4F493722E61DB62F5D214947098A93ED08BCD3BCAAD358E73D608B2
6C706B75DE56D684566DCF0B43A0B0F975DEAE2F7601EB63C39CA0AB811A654B
754C7937F67805072D3DA5C1709C10A8FB61B392213A1665DE12954F43E5359A
69CD68985E449A0FA039B679F5830E4BDCCF9D19173BC1AC61864D273ACE19BD
E36680C8AD10A56C33C4B06DCFF17C02E318717B46B57F996D0B21E89872FD56
4ACB36CBF058A6C765226884AAD6751AA3C570FE0E4F0239E05BF6E98C9AFB9B
997A59EF5F44F78CFF4C853337C6989ACF9F98AD4425A1268D6E761CF9B88320
7F1478ABCD112D3ACD582004A8ED3C608C46496F2E00B0EFE25E629414ECB8A4
1DF748BEF99438A2EF8990A519D704A287889135BA6A1CD9ACF89FABF737E422
04D7CA411E72AA4240AC015EA03F8E9227FAE260AB5109DB147FD7244018F9B4
B87A3F9F7EF784B325D6173595FB81007E5F5103551007B1DF9ED1722EC190DA
2FDCEE9D1F6066E42EE1FE5CD11375B86CDD136F67951EC6044FC5AC0FE18757
EB205AEA34D39A1CA05072343C48231F676FAFE00A584F6BCC0EB1CD348BD4A6
AE9FEE690C5A5AA7C69E764A8CF052438280D0EDCCD617391A2E852ACD221A17
8B013892BC89C4C0E8BF5DBA1C7EEE0BF66C206D543D9F4C412CB12EFFA0BB0C
CBD932A4C517BA7C024CE791E9E85821EC88DE6901D2D369010199BFFB0028A2
8D7CC05BB9FE5B9C8CC071EA7A458EB6620FCBB0A5872C27D7B74DB62ACD93D7
A7C73EECCEC90B036F773A35572FE436EFCFCB52AD578BFE44728714E2A1A313
68CDCB906BD6C4851075D4C709DEEFDA4C340958D49A0C8B4E4459B7C691BF6E
AB9BD62843999D71C5599F89C29824458186DF6558A445B71F640CAC28723484
FF9A156EC1EEFB1B1CE70130750C53471631464ECB612BE19C84213E7FF228B6
9E1D5B79B6A37EEBE2BAD7DDD63A967148637DB317EA3227A49A75B1BA401B7C
66DE659436405B1F8692E1E8CBC91E32B1601A34DBE6CD348E56F59A92AF56CA
A782B3B18F470005EBBB793A0B71577BD408C15C2152DC52D908162BDCEAB5FD
B9516E8F04567E70E8F2AC629B39946A00319A1A6DC3B27ECC2018FD2B609EAD
2728D71DBB170B8DD3EDCA1E3718899444E81EDAD669E0492887D07627393678
94076F16EA2A629E87A1AF908C49FC0FCBC63F7BE238A1456BE3627C2D7F29B4
A50A79A9C3DFF0D57DEDB6F83E59EC7A1AF42EE975797830468685029B252A66
332D75ADAF193E5E9B30FD11F04D70E268F1D4B404F6DDD758D466939A23D7A7
79E813657B78B7EED0FDB5F03D0A62701D18826FEC47F867C4FC966D23A12CD0
1B027617CE70D065293604EBE3F2A343D4F08000C6F3916C654CB5C2B1D6281A
D3B91FAC8450BF5CAC4771C8D10FD1FC68B5B0BD21380C6425FD04BBF54EFDC5
C30EE2B8A10A436108F0D6B87BFF46E7E197D8541D72B9E0A4F91DD1D68FAFF1
AF62A48B92A023EC0FDA8B73C48E508B9BD474843E3A99ED6986DCAC79DB2090
4E41A09DBF43CDF942C8ECAE8311822ACD70AE170C427D588B3D2FEB14CFF0AD
50200A157151F7625E63296E325E2C35273C118A0B30CC1FEFA6199B33F3C117
3535E17C888449E55F06D14E4FB96F0F69193E868789380DC127C1A6CD934BFF
59B4AE356D1DB3175DDC2A6AFD06EEE9950917ABF95A52459709268F2A540255
72FCD9F64D2A2A0347020711801A166170FAAC32275455BD7B6509297915E75F
B8B0A4B09E56B24538CEB6AA2DDDC988D12BD4E15B9E101A5A71706506E71315
B27AA869B9E2AEF564F3204D973FB2230FB689F0DB5E1F8CF1FF405D523BD806
5C51416A0648184969E1B81E56D064B91B61206C2FA90642D9870D6E1DD28E26
476DD71AFA6C492CC4A8FB5076375572C513E842F42BFBD3511F4ADEB1E990D0
7CD32208F8028E596DC52D6B9FEFF8374589940C6CF164F65E0826F40AAA23EC
01EA99F5CCC32D1FA8E11013102604B776D293489BB97B6DF215204753DE7C4A
3FE2B2C5CAC1303000E1FB0088068CC471846DFA4CD1A218A575693021EA28F6
1818E9D6B3230A9128C991195C3B2BE23215B36798781B512779E121066B478D
05D84F164206B35C10F88133EF9C99B76DCB93A22FBA14D54BEE001D6A439BCB
4B3B7895ACB7AF7EC82DC489648143B171CE29CAE9562D45218EF07DC7F74A0D
22F08FDA0DAF6326072445B8EB6B442F7B4AB03A95CE5462FB5E3ABBE1ACEE7E
3F02C7AC1613E545DBF5CC63570FC27293367D03DB34C8C4302985144A0D4917
2E0989427C54D298A39FCDFBCB88AC0EA6AACCAB081537DBE5B26C1EB7A02498
9A6D910914C0224A700E1245ADAD0B4AD69E0183117AD7AB39A00C00933B8D23
BE2AC55FFD8F3E8C1156E9E9885514E2A5093882805A678B1DE0E9B0E275A609
9B5ACE61B6E0B19B92671C4E22CDA2B709523135B7341A006376660DC7C674FE
B4C053C729A879C8E1F7B673B9B2A4778B3F91C02B6F18FD97DC8190DEB838C8
B360EBFF4B1B9738B0780A4612D2A183CB0678BDAF3ADB40C28AACA1C46D23A6
F17A36B7CE630194962E41FEB78E3658C308137E43E9F33825F1111C442A7CF4
84A537DB847182873FD7866F5FF92B2A82E1B2BD40B803A4217788E5D14003C6
71AF4B2C83C76D166BD8DFD5C6668C60E43D71307EEC9D6E9C1B570794D2802E
32C10DCBCCA358C9A301777283C08EE1187BC2DA760514F3096D12ECF20972B5
8E10A8538F7BD8567419942DBE0D1BC7AC4FCF1C07174122E4ADF5B4E3C60F7D
1F33E150C9B1E5C0BB3EE71366876EBCC64A3AB23DD9076F46FC88E18E019B8E
51E7EEA199D39C2CDB4EE2B5344077AFCCCD82CFC289D46552563B36DA5DACA4
7234E388FAC6474970914857919926E5A42548B9D25E61613AFF8C32B8224C48
E5BDC02294CDD1896E3E2D8E6C20B2AC0BC79B34B48930980213FA0E2C36D1BC
7D1578199029B3C52A85E3A069D5265B78DF1E8A68FD3555EF9BA26352397C3D
C55A0FCD95276517788B57C334A399D3FAE75852C3BC7CBDBB5EF23FC98FFDBE
CC7BFF8836C6C6E12C84989D53EB4A5AC25A0858B10DC043CE799861B2D8A268
9D237E5558E7E4CEA9A30BD85817568F763B06F1881AA13B177E2901A0BF326D
23FDCBF55A684A4E824F8D506A27BEB2795772DE4E899B0F39A7F5DD4FAAF068
B80C012A81DE2CD195F0A44AA3747B7A4A3344BA8DDCEFB765BADFD5E6D79257
FAED5A1C5B005504A28405815C5B5497FD0900A840A22B15E6DAC8C7C51774A9
CE343DC452615EF60DDB7E70F095A1D511491BACBB0EC609BE0B28114E5B0AA4
2BB0F38F2251827A42BA7DBD930EA8256B796DF56EEB39D30460335D0C09F3F3
BEB991D943E58CB39C72ED57A336A8EA563D7B55A4F4EC52D7D222DB53543E61
AF31D100DB3EA0C3728F2BD4CF27586E3550F1334652408290E2076FFA59AF34
8528402521EA9578696F57047C7CE41C119A58C91E9E89214A3F6A9AF0268461
4ED9A33A260B21EF5150662BD04C9FE07F40D9B4C2CE12CE8C5A07EEA9557D49
5AD15C29B6A5CCB1A9DAAF125E79D5AD7DAB05959E694040B7FEBBCD1864D183
FFFDF1A28868CB9A2B5DA25B123AFE01CB0D6264972447607E684202E16BAEFB
AC564182787D7EADC4F038188FB3BBDBDDFC37AB515ADDF084844FF1B6F9C6A9
B5A06CC6D3429CB2E286370C3D752C3427ED888A74C7D47BF41FBEC8804A5E35
154D9B94338BC8126131A6A4306EB0CE8E5ED39776CFE6375773C2FB5EF2E2C0
2F432D79029C1D33CC93E882D0BE40F822BA1ECC9339131AD6F60C2D6475E33C
66D956CE9AD3AB8669A69121B16C33CD949DC6E4C614B4BB2C4D2B57D2E4BC00
3F05EA7B0CD2FC041141C380F93D21BCA396FF13CC82CF8F0F4E7F11D05DDD24
B519CEC8A076DB74BE5191EEEF657F57B67B7A30F1999890A7915E3CEE76DF32
04AEC1961F654E12385D1EC21D18351F00237552934829824046E10E39028ACC
CCB0D004672E66127A60C776F97ECFF94C2307EB3C44EC877FCB2237E44DD04F
6367E04C3CBB3400BA3C1943B874CFB57C344109D6F3AB7D037E509C5DA4A954
235A57F0F59F857C8E5041FF7AE67D07BFD4AD7D7C4574F0F0515716390ECE1F
67BC159176BB6F1EB52D699348651F043D48A10F89D062FF7E5E2C57FA9762AB
D83F4858D32AF74CD70FF4423FE21D4D2625E646CE72588478BF941F1F764402
54BB201642206044F4707F3F4239774EC5D2A53796273BB567375F82C2B20D6D
893060B9CB06F8F917B4027D063B7A789EB1E6F3A07B777B22BE5EA7B6D8F166
4A12B765508EE98BF576EF311BDD72638EC88A57C2D8A4BAEECBD9D75C25B1DE
870FB547D657B91139CE999974BFB024F120A3F47243D609E4F31AB7E5EF972F
4B53A797A65989A7AA9AC8B6930AE574DDD32FF4BD7C970F77980C1170D43551
EB9F0C85FA334F1E1229C67D5BBA2593300841AF0F3A67E1E6093BE6DCB400BD
F8C5B29F787CE701707CAD347208550DF890CF5924BC50D349A06AA34FED33BE
B3CDB415F449C9B1F415163843D27A9A6497751A0D375757D95AE364394FC25E
6E0D02C684058B6C937CDE2766785B6939FB1FF0BB2232BA259FC909D6547D75
B147C85088703C68C018951631F2EA80DF2F5DA0317919026F198BDDB71847B7
7FF4BA89C15EF8B5708844F0B691350DC0E4B38E4B5B5868A34E643E6075C0C1
DC4C0EC8DD28775C5765A293D8832550A07BD9D01747028DF1E2065090894BC8
200DEF93B057C7F66A80DFBFB75A27CEE1E7B75A2C332D7F0A2D13ACAB1D2AB8
A5048F1C02CCB3F652A2EDF25D95A9456C7098D09D52ECD0A839641B0CB2CFBE
F104187498B83A1EB5FB5E30304C8728BB0FDE9646FB43EC0BB1B1B13D8AD0FB
57C6EBFE8A07A7593334F5596600AFA61B697507FE0753D2663B1A7BF337DA8B
9939021638949FB0039DA5F622FE26A271890B36BD310D1A184C084913958D22
575E85F8E9852A9157AF1175AB47229D0F348EA969DF366D3E133B6AE6115D45
759B4ED416899EDA3FAD039B3A37809C44B275FF4FB8BE949FCC4B04813776A3
451FE65A47D7D71427E723536914D2D3F4BAB062831E02CF5BB04BE3345D525D
2805AA092D802E4CBD4C8CE92063974B9ADD5F500D162A761DC91B2470E13087
AD73E4BA42888615AD4A73DB8EA36A61BB73ADE94DFF249763950EC9D477E850
76007236EF014B547DB1C647753E6CED53E3678D64DFC815BC25BAA1ABE59A48
F46683AE927088B156A9835873BB6A3319CDD3D3F40DDDB6A941A0CC691A06F5
FCFDA19CBF02B8C539FB20F08257D40F890FC7E35E829920A5B4C20D441996D6
71C582A6F5E57840EBD7706FA94EAE07EEDA4D1042BE0DB0311AAD05E48B2C31
2C52963838B1FE6F1A7578AACCE5E275E11BBA1D0821C1D6EFEA67E216D0BFDF
D8EFF9C41FA280CD6F62F72BACCB1312FAF569047B3FE1143CC1040F97CBD3AE
8040DCDA7AC8B589686F3F263BC002C8884F38F3BB6E09768DA2F34EF7D075BD
8D36F3DE102AF8DC9875C222FBF9C92F296E6A7ADBD6EA7163DD1362A8CE7A17
C1064CB861BFA8630596CC91711D12A4155E5D1DCFDE9F4ECD69FD36DE7F8DCF
DB5ED2526C14D183F2D29DC9AC3DA919BD9FC0C82991584BB7997B693AFECFB5
6A60D19EFED7D65CFF77B7320CCAD9722595E7497392C3C46C5FC40BB415796E
D2ABDCE78D2BDC07CED874A17323647398EE737C7D1ECF0C423A86C57CBAE8F9
F82E65EDBCCB17469C450DBC56EB62E04FEA0A55503F88BFDF011436D9D50889
164140ABE963649785F697D2DF5F0241C05C449D8DE54A3FD79CEB33713CB4B5
6EEB8495CDE61641369CCCEF623D3D9F176F6510B9526E94D4E38E62F8B9B96E
2D26F5BF4124E048782F415DA100ED3759D056E3F40CBD3592336F831A69254A
546B6DA8EECA492D56B2F9F55B3230CC493F5CA6351ECB3F8570D5DE3EC220C7
19B63A925543F01CAAE307ABC484370405639C15783DB864303A5C00DBFF8D70
6CA6E53AB3114BBCE45110E40E9EC21E3A36EA8E3130C5C36BB2496DD5233BA3
01341CF48CAEC796E0CC6F5A17D0A887B5BE606C0A21EFE6853F86AE3B740267
0CAC5ADDE78A45B552D7C6C98468ACA69BDE8559A69AEE3175F2541B3E4A4B17
76A6E5FDEE28D416CD3F0F01017DB6D4137018EEF6C9BF625A1596A7A3BABD65
0DFC26A600CB272F79AE07698A0018620539FAF0F3B989CFDE0D43F5248CD7CA
2780910F95C394109A615D148517971542915D70737B3F22C6A831A9821624A8
6022C5D6CE35E7D5460EF05B1A5136CF2C1DDEB46F72D51F6DD71F93F498F4E7
20FC9819E6C6AE3A34049A994414A8486882520611165AAF3711B005AD3DFBE5
6FD3E443500BA9BFC908A2BAC4B3062E37B68DCA401224AB93C14A4628E76309
EC9D0B81B08747404EED051DAB027B91DC86890FB34B80E5A62A8232106093EA
39091D59EC27F6CC868ABB2CE5B2C145DAE2B6128E6C913C88173350D3531657
B3D50BD845F8ED3FC10FD2C2F18D67BAE0AB0AA17AADDE64DCC9318096FD87B5
398776E6126E017A86A80C9B8B11A0C4F01B34DE02BBF4A5BD6DD4517DDE179C
A649DEDD316A452509D2804B5BE0F6C5C6E9E45F4077E639BFD624575BBD8F1B
A49A25E227C1394F08CC4298C38E32B95D790323B4A5713E69521D8E8AA506F5
AF21BC9EA91B74EC159DA81A275C732DACE2E77B9522FF09F1D5F611E8AC05D2
A5D0599EF54054B02E8A44557DB81EC1A200EC7DE4135733C7EBA836A58B084A
3D3732D66EB3AE461EDB7CC7A45957BC5C6B1992738E783F8C441C04A64A0C41
F8C9F34807DEDDF20BB1BC3140F7B8CFD1429C72E269A2B8FBA0D207B75B0577
4BDF8E20C1425C9328C360FD1FFE12027F79F212F19C2A51649B1E7CF1B65135
F07EAF54D944AAB77B61B0A7EB409399260F525B340DC1C81FED5A23A13FBD66
C14903212E934E5FAF13AC725DE14558805D95FF09C7CF0C7C4FC3D46D10F12F
7D242B1D2696B3210D7958A6DCD6B26496D168ABE0CCCC8EC2079FE9F74D53DA
B010AA035CF061D44C6766BBF044D93283569A723956E8BE316942861CDE21B7
E4F39B4E372C87AD9B9979BC0426DA3CC71CA7D654FC4E9D052B5573FA91A285
9010F2A9FEE4159BE5160EE15917DE8DD30CBAC7E126443381C8DB3FA8EAFE3A
367847CA1EA003CAAC24CE765032708B5E11CEE9B1B243AF5EFE9FF1743C357A
09FA4DDD599A38B3E39072B8A5CCB1A9DAAF125E79D5AD7DAB05959E694040B0
1995A0182BBED304B28C825FBBAAF61C73D2254EFA2DD01EB85FD2AAE351AA5C
1A5EAB8CC3B57C95508948DA0B7EF710769731545B30E4232333D0D851BB55A8
7A5DAE6FBF02D0E32620F3E8A2D06FEF8A8810791D8613ADB7719C161E40A8A8
AD8074AABD6A06EA11E40F1F4F4C6AA71F9FCC2348730C4A5DDF4ECC5218D4C7
264564CD758E0545C941D59CFA44DE81C9562831CD23DEC40E62656574975F24
99F50FA04347CAB53A5AAA7A2C22B67328EBED931F56CDC90C677070565126AD
56CB4E65D9BB17CF09AE6042E58DAF96ECDB80756FC73220A36FA8F9A4B40866
7AC6B70F3C41E627B1DB9876EE658C50AB2BDC699E81A1F0E02D8D3A3C8FAAEC
F7839D20329CBC5CA848EDEC23AEFA3FDB17EE7A70C7AAEEBCCA32CB4A83B882
767D7AB50B2BB294132270228229EEA3F8D8300E7A91319CF38A1BBE0C7FBEA0
56326E41636E17D93850A2FC840A372BA2464D679D68EF064EDC33D02A73272F
FC9F2C1A342CC26D444F54CAFFB3C18BA66F9D093C3BCEA883264251DE616945
97FD026472CBF13D266D59998E39274E7F9DDC8E3DFFF7511A3261532247A857
0D83E7DBA889CAC631360E013D4F720D99CF9C02B4C1C525224F73DEC5D0A233
58A5F1BAB491FB81688BA09F5116131F3FDD00FF97794144F0343368A9170BEC
E87FD510F4D81C140E76FBCC6C6AD664E159FE319894B6CBB34250C0FCB3860E
9ACAEC0BF95204DBF32AFA9DB2C058F7CF89C6EE634E969D614648349BF8090B
0B84D5178971088EFA7599D096FC928471D2FE294C8173E82B508A726F8E0E36
344E84B603738B2776D1C11C1CA08BC250CA8CDD6D40339955325265C0D56878
84A192D357DBC2F6694CBCDE6BBD5918337528F0D0C73A81FC12A743C7142A20
CC75E63F283F1424743DCACC0B4CEDDF122A4AA12500EF66C5F23DD00C6C48AE
F676230A41BA29DF7C09713347182327965F9752C64E9D400BB556C2DD51FE28
3B59D8B97288C1771381D3DAF5B148F098CEE2A1576AA2076C16E1C212D19475
0A8A223D02F28A0B8845A0995ED074E3357797A5728B46BACA35D941E9307561
A0CD87A059EFD7C89DD3F0B328490C546A2BD7B5C158C66DCA5062E39BB855E9
BD68C4C0728A5B37F88F7B480E1A1999D0EB4CF1F136C8C443D98A6A159358C7
A5B25E241CEA8860B13FEFEEA3132FFA2D59089F700B3B3780C8A421A1F6F838
A8DE13C337900462F952EABBDC2EB1F90AA5252C572AAAB15FEF7E934F5D0498
C4BE4D042DB8EB89576F497EB09A9630A006FF0908EA1795C412FF9071E551FC
4F6A4CDF352FDFD48E76C5737253FB5D2AE5F2FF9931FDA9F1FA542076F28B47
B045B7B7F73CA69D25D01C140E76FBCC6C6AD664E159FE319894B6CBB3425E08
CFA16FBABDBA9EBDF4DE3A734D55417D4499D22B8140DA29C26DE2508F959496
34071E3405B3E415E947C2F695DE7334E31E8BAEF4799FF68EDBBA8148EA7FE7
FDEB29D97E62720614F7C2864E75927DE4EF96AEFE8503AC8F72831C12A52AAE
64EB28B620A5EB34CC8E514A11D2993A2B670C19B19D222051E7E89D6F7CBAAF
CFE6131664CB5483D7F51523208644416D6FA5F5C34F34EDD5665002FE74B02B
3D0C6B9B201C3AC5CD3117B291040922404A3CEFB3AD50732A73133F621717A7
71A7A619EC940199D8F17D48B862BA6A61B8A95F4B8EC9D803D5CA79C71CC1D3
103066F6DE77BD7D99E0ABA1EBF44D7FD1E7C6A18218DF587BD534F0297E3615
F4E68DB6BD2AE1ABAED3D3D8FE7A74E85A68531FFB57B3DF725DA366B9BB7DC4
9648D46F2741B3A91D9032F24ED8F7853E88748F3DA314C3781B6AD8A675B398
5D96DD31C832B48076A73495FC23F52CCEAF5249F76BED95E5B204745C71E406
6E603D91023125015202C1C08F03BE8678A22E2DCA32F3CEFFD7558991E2863E
3559AB0B98251F9119B7B3CD10C14CA858E82DA3519174D386845193EBE4AE0F
76F6BDE58F5A87FEBA30C9F69F91F3313696F1B71E644AC2F2BF094E8EB21476
A72B6124E24D2AFEB2FD437C062ACB173FB909F1F17FE0D882FBBEEA52ED0990
578C24283CA9085F57948854365B07403AAC955CA584ECA05648B33CF9BDE4FC
610FCA4FC9ADB098BC3F1B4162F01EA11F6E08BD2DEA9C62B7E2B7D758309CC8
2CA5E6A81F787776B87059684FE70A0D67D92C6DEF173E0B5523FC09ABF25F89
455E6E32D6DDA5BB840CFE9AAEC1BF7E19AF1EBBD2FE4DC35FA945B109E02BC9
D0CA8F2F54C1BB673933A576C6B0758D49F3155D448D505F73A5206A87FF330A
C3426AD987867C257217C859D48C1603730E36C14F7BC202236296A905230663
9F4672E90E3B9DDF048EE8F98F0A8B4645AC96636979A8D75386EF83D072F320
FD632B028F5043378F2CEE2FD3A5F958A84085FF060BEBA676168ED633145AE0
E97EAABB279579DF6742ADE3C2E2442F285A81A0DE2767675387CA88D3E224C8
307323FE0703A8D69B9C0B4E7B3E0E986592AE731091ECED8B7C706A15EA93F5
FA7800171D760667E1336DDCCF007E7D9ACB7F611965D4FD91DD5FB544D1A7D0
23C4714194896CAB73A2F2ACED52AF9D066794BEAF0EB7F115918EEEA4F41976
945501F32BB383455467D2177779669A7422C2C2489D209D78E0A2FD3FA71C28
EDFC157B163FDA7EBDF5C56C2B03F6BAB0D5AC4D24808941E5C02ED924451396
E267DA4FEF83F58B46A22BC54F9D7BA5E78B19F8D9264ED3E1F628D7837DD60A
A72A8A74DF40CF122BB80A646A7E8C8F0BEA57F2223762D6D83688413A0FA9C4
37E2EF18B5936096AC68505667030CDF349111431956F64295D6C26DA5A183E0
79CAE86824F23F6E40023290848EF811B4AA5D159A2C5B87CFA09CE0CB7B382D
E4B46F8EB3B207344F9CA52989AD8A876F13387C2D4ECAED1DC2C4FA947F9D7F
A8CFD3A13D2D1BA728E0A19FB96F3D215F6C0CF80185A1DA5B2DB352AAC8D929
D0E4934783E30F224E6CD4E1AFA9E60E7D5DF243A1FFB0986BB7FD8728CF47A1
83D6C68DD3D62F25E88429C30C4FBF0BBB413EA850A2EDBFD395F2A6CF1E8450
0A5C5E713CCB30E35D159521D62592627B254FA159335DF85007F27174A5303B
534F3BBA4DD09492576A8AE7707B19D9FBF7A0B1BCEFF5C2FC3FC6CA25DE8607
9D9FEB485611AFE3F1E75D12229EF8516D9F749879287F2FEF82A5D281C2CDF6
A6A089FA6AED4EB389D2C6431082E696F392AD4EC63F668B70DDF92B5E74564E
00F3DF8CFE5C6194B5C563266755B07C1E9658B8DA9F48C8E10FB7F6D5FC7729
277141C1DE33016126C2CAA9ADFC6DB6742962C383B3C8533624EA8841787FEC
863F584F1FFABFAC01BEE9108C28BD3BDCACE2D523AC51DB2BE615EEEF4497E4
5725DEE581FAFD1F33A85B6169D4794B1D739408D98CFB68EB1B58B1722D9984
913CFA67666BB174AF14C0CD8AD15560CE44A39581BD6B555165091C5D410716
6FC9E051D096CC40E931BEB074AA9E32BBFA361593C34E34AE8C3DB6684096A4
CBFE226E7AE728A1B19B88350FF2161F425FC7831B3FF7FF114C014E1DA80022
6FFF4619B54F35AD3A5788C3B5485151F4DEAB7461609D197D99E2FC8EECD980
0F98038B815CAD403B31A99DB7D16927A6BFFC9A832837135F416BD8B6673EC6
3914A0C7C7BB9EBCC3E1AD676EBA753F676CF9C236583C6A8F70802A25ABE9D3
923B3AA98D7E4347531595BAB81A8773C39EDB7223A2DED4EFFB05803616B534
448E3367AB47FDF5B5976BF91C96AB5966DC2C49C8BB396E5A363605FC399EA7
7C850A0B15E19EABE6A826F3B5496635872E0841D3049E76812621DCE205278F
041623E680907A993E9FE0F860F4D5E544C2BB0525A583A918D339C1DFB90CED
5EB0FC05B94A21DC7535C146E8728C97F121DE22257D3E0CEEA4F62187EE0257
4A05E7686DF03F80B23E478C5ABCA26796BB65158CCB84EAA176025BA9473610
A41FA2317A4C2D8A80928EADE1BC40550DBD475801848196FF59D705A0D83F84
F64FD6C25C5BF9CC780D7FBF21BF64B94AE9198A26D4982871D785A4514F18B9
6AB81E8EB671069AC50ABAADD063BF9616F467C816468A1ED9E7FA70F86C8229
4A12D562848F1647DC6B3076ACA28D67FFA235B47D8AB72B7EA8368BF060C36F
4CBFB98B52898AC275FAEF374B0F854801DD36C2E7CD83C0B8B7BD65657DF265
44A96D0EE505BD2EA2010A05161B1196B894B86B8BCB78412682B2DDC22AB444
8797AEF0A784FDCBFFF60EF06219D5D7100CE929B061D5EBA5DF2E1958691A97
CB6D7F352A877F875BE5113B3CC5C384E1FFF89DA03187C5709112938ACF9BB2
E01187FC035CEA0FD5C55028DA923F93BEBF07575429B6988C81065A6869DD7D
A1754B6DA606EB7C2DF1C969B3E4DA617FBEB1868539CACB7987BD979A997165
997EC12D816E8BDCD23FACAFD73CCF0C192EDE3B4418CD44C37C6A53E784CC57
55A1030EE363DBEFEB6D2B29F0A7012D38799B234562BD8DAAA62983E6D52619
0C219BF10D399A00067B8B5B49643510BBC198668A70C6AF7BC2A22A20B59266
BA52EB8C8F4ECCCB38FE00F4BFE7CBA36A793FEC799A948D6CE6FF549C179D31
81EF4C3A8561874572940423E9A3E34136782135A94F41B1E3F135AF77320C9E
19C51CDB28026A4E4AE68BEB36184C18C7E3704CDAD37E0FEA5EEA052A54548A
C32DE8AF27AB9182812F516DAF8BF9F0F7D986B1D435214518FFD39B1742918B
32AE929B96D9BD9060797845C2073564A9ABC729BE68EE00506E55529EF6DA24
C856D91C456E21C3FCBDFC242BA22DE7F3485B361FF22160C2FCEC015C2D7FD8
486C405A26A77DDF63F1ED7C65C9954E91B02C699996D6947840CC115F91F9CB
C391AC7A2FC3CA0A869DE9837D710A56F1A2149B53BEA91A5C184B0EB438314B
F5ADB31C432B7A6B888A059F4E24D6C776EC8E6336AD01C6E7D68400F02E3065
4ADB724DEC03DE12F7FF5B36A6F9F2965961BDB6777E997E6AE9E309B5B11D51
529B35BE297FB1AA5246D6712322CD31ABBB50AC6626C12B50DDD1EAB47746AC
9964061B78081DCD8293F1DEE94E64278303C15DFC37C2C212D975A04EF21CC8
A792EC1AAD2EC143036DD226F5EC552E3A1BB66EBA2F8228603C991BB63E4950
D905D6AFB4390B62A3173B522240F0D3AB769125109E2F821C28ECD4340FEC1F
CDDAD347B2636649262EF80543857B65649F842BB64AA48C82DAA0AE14CFBBAD
5FF382082B46F42D4E1672B2076DD7714172F7898B74756A5A66EF30FB955E04
347E34C0950E250511BF754523EEDB07D78CE919C5A396F798EF22DD3AAE8D18
5322A205CC15503BC31EF6605F4FCBC99AD58058728F21F9318E59D899C05E42
3C089EF4C750437A96608C175D39B0DE80DB56E28E37B8A1E5EA3A48801CC51B
E0EEE50B9C1070D7CBAE9BBA72E82EF9914D3AED6D1A553D9A173EE4742916BE
AE0D21F24A3E4D146DEBD19872781CDC5FD4B7B6E0580904A27FB07FF02D4882
FEEC8C93B2750AFF2D1D0512866382CA36DD61A7A0C4D133884306FB0B3871CA
476BE8D70C2DA36F39574173F3C10850B454B9C6D7F05A1CCE9E325FF3C34F6C
50C8E93436387FC45CAE2594D4F72E5FB7E033402B2679E21A616C88C39A0DBA
4431261733A76CB16082B4DA5855DFAD2420AFD2F37229EEC652612CE1B974CA
7BE24053096A1DC978127DE7E6BE6909BA17189DF98F283DA6EFB0DCABC5AEC8
EE4DBCBE8F6FE5C750A22A085457D328A97C3038AE33E5A119E5C6E328F78707
2CCC9A2FD87287C8720E31005014CFDE3E2029A04B11FDC740F7963E3E020F32
375027D8FE5FE873E98EEF621E059DF969C14E19E1CF89B11876C1DB3A6B32B7
0C9CC4B27DA28E97CCA8A887524B3AB19E3E07BFCD447294B1798BE5C9287E59
9C863F3AF5E53C76CB18062479F3CB1E2BF09DFA6763FB1443D8E00701EE4E7F
304C2B761E378AD97E065B2D8901EC537AF81AD972FDA00C6D2A090D7FB73756
A7645A8134EE9A2BC19C8635B0769DBBC84ED4474C6A051E35ECA99C22F4BBFA
0E2B0BAC8739A0FBDDE41495425F0AA9E0F014464590D69B105AF01329B9FB33
0AB6BC5E2CECD68B9981B2BEF1AED8D00A3AE009DA06AD3FF7D509D9C3917237
D7851BA5A3A45DC1D090A2F8AE43E8A50E71457BBC0A86DD89BA503F51D65FD3
21A650519164085A4CD6FB0154508C744DBC4ED89CF030D82A9047FDC4844145
BD6F6D9BC69AB1DEA7C02BDF3A9F31DB270341AC682F668F9872CC214D7BA311
884EA7F20605A848288B9E1B093F181FFBAF15D50DF45AB5BE76376E94E0AE4F
8A7B6449A558A88D426B6C046E9A088FA5FF9BEE87EB93711F2A49C15DD57EA4
2ECA4E6E8D58B875490641116F61594BDFFEBE4B49A1DE68B5FFB595ABC305D0
5418124E11ABFAF29103ABF419D2F804884579D7F0CC4E77F6BBDC352DDD6E3A
3EE287FF27B773081AD462223E0910BC6092E488A3488D54C024C9D1D083F58E
A58CC26BC8DA4C262467AA66CAC0D20720013D660C428E156AE4BE6B40950D60
CCC8143CCD4A35302FACC3F838C1FCCDC397734E25B9DC2952C9B101276FF63B
66F9370818B6C6F47775CBD59E060316A820A630ACE9DA4311CD83EAF19D803F
A4B566D7ACAA1BB5BB81CDFB6D08C013A81E0206E56D3FF6111A506CA73FF0B1
65D0942CBA1BA6BEF11C302040720718A3BCE57D8D9910828E8891B7F71771D4
317F81E714B08C661F336138E9D9337A5E55301AADC1BA645490594849F0323C
D144A2FA9E02E4D75CCE012A1A70EA8064D3E623356013D2D3880D439704EC4A
AB55135EEC17A19749F298128F43F852E00722DB35B1CEC9ED226397F98EE4E4
87DF3950EDFD6CEA20D0649071442B2916EBCE5F4AAF8C403DB837A6E6EB5B52
549B010FB206FC42AD1B3FFDBBD1A7AAD2312A280F0C0753434F33D438BD8EED
6BE87E144C1BBAA961E2C39A9D214FDBD8A4F43B8C4BBAD84C1E02EE65922C82
D1831EEBC139D8FC38A5D74086A4D31CE5ADDCE021A7C84541082A2FE66D6852
481693F103F8D2AC2EF0B794E992600B2DFA8B5421D6FB58262B627F5F1463AB
FF37AECD69BE9AD7B87EC13DF7B662B58BA899E98988CAFF8DCCEBF494D56769
12D5E868E07916DA868BC64C513BBF688CEEBE4F82E9821D9992874A1585F85A
E177F1CA2958718576759631D8A0E1DB0A96ED834AA6EAAA6AC1C3C44CD71E21
CC2C1E619079CAFBE8ED9C96AD4984EAAB559F0DFC79032569A42DF9823AC072
CCEFB6270BE052F658087D5C67D702AEBF0B8B83AF10B0466985961886FADE46
5E5D59689F092D35CC52737B6412A342CCF58A2AA32DB331522B98CDC9902C7E
0E786698928404163ED36491F24D7C3D634B25C2C8D56A592FD96CD06B3C0895
9B0B8708B2B6CC03D46CC698FB6654DB7995DDF16B0AD6EA4BDB87E110D76E8A
71EBFDFAD85D58F4F20D8814C3C4F34403C404C616BA3859AF8BBA1FFC28AA0B
2660C443D24320003930CD829B3CA38717955DD0CB5C9B7DBCAFD9B53928CB0B
B93468119D10D523F94B442D4305E96E808A96CBC9A34B2E00B1D1E2BE6CBABE
23A220F662247DF70428C1F79C796F2276E65CB9A2FFB4CF40BABF9AFBA92A0C
51AE000C830C633933A576C6B0758D49F3155D448D505F73A52069DC8BB26C49
28CBC3C8D3E114E264BC85D3ED2103D8AECEE37369E505C79C9D23A90FB17FF1
C9476D3540344B0CAFA2313DAE81643E32E096D75A6DAAAAA6CA373D51A37426
2C560FAC2BC019A1711978AEA4FF9F8E856952A525AB5A7C83CE622967C86ED8
157CE246CC8D5C9E796F35D37460CE2099273F1622C089AB3CB216A5C27D61D7
DDC5FBCB5BDED0C269EC967551FAAC019A93A7A1604F9A9995470C2ADA7DC668
57AECBDE1D3BD3710A1EBE7442F04C39EECBBBC90596EFAA889F6602C6EE7568
6089EEB34F4459555FE53578DE1E243BA2E58DAC511D9CB77BCD5D12A93FBB92
703219FB30E09591D8822847C073C74689162EB4A741E46AD71C3E2F92EF983C
0CFF9D4C50CEBE8ED1067CAD94EA0387783E03E76AF474F73EA7ABCDB6178AC4
61616F166953D10731CBE99428301056447C1B293FC082B0DF92B117DF87F39C
5EEA83713652D269B5003906C6ACB110E6AE22C45529B9BDF7FA837E7351FC29
1FBFE2B45523267D32BD48E8F7B3861DE04C17D5F542822AD30AE2B8E9FB2297
62B1BA041D46F678010CE0990F2A98633876C9EEC666E45CED4309907116B370
38C3710D04740DC2D25C12E545681EEE5B8A6A56F71E9C4A05055899D6ABC54B
B7B8EEF7DBE525FCD9EB705848382A85282F79E181EFF14733E3B857A5EC01A5
9CDF16DC6A00064D7077F2DEF495F3DAD5C26B07FF5AEA0E144DCB9D160F1C26
0850F730290FE5BB84B8902C81825FD25359A10F84AD9A18706CC30F6EC6119E
ECA976C5A984CC9A15294FE781EB4D6148E58E0D1101630A5B0B7D02005BB170
E5B47187AB0D8EAF8F5748633262D40087F3EA987CC4CABC9DFB6E98D3FFF922
0FBF207903C4CAC8CA8A1C17A6E3F2CC8B63FEA3E73193C5F514B8F29A7DE95A
0BCECB47BD64F47E5F287393BDE0260407FAF68C8D9CB9CEB47BC8DC7B5B9141
6861A6DA3F5CCD2A1B26325BB60D366F1F70596EE39E400A6F1870D071B67700
9B860E4D935429CC99B6A1051D63F6CD38EB817D3C61A4BBE46CCD92B9302F18
8F971E150EDE645BD451CA7DB3D63508552C9A8411481DCE3841D3CA7285FD4D
18478A6DBD9A59158D1F2F87DC4D5951363F979931F4BC9B5BA66014D214E803
F5CD3D6FCC75A63F17A3CFFBFDE052E2961195F6E68F0D83A62A5197EB748C9B
F0433CE8B6F1A3C9DA8C4CDBD29377F1B90CACAB34794D56B528409B1A8EBDE3
691D3DB7823F2C72C23DDF3CB33EC46935535196CA29FA216E7980665A358233
C202FAB8C09BBC8863D02E7CBBC3F9B1AB0D125837CA2F1F374C819B67C4474A
8723AB673D93DA4704AEA33906AAA5E6EAF582DD36C1D29166CDC5A658EE2DDD
DF061975345BE99A2F7451518F48211A04F42864A28D93604127679072754350
7A36A01100B17076AE6C6FF5F775FC3BC83A9A6DE5C947140AC48B22EFAE3EF8
FE12D52CB7ED0A9E99F717FAA635DAE480F40B36D3154B85F9782AED2D145FF2
515C0D4B2AF2D9C3047E5DDC31CB8BEE4C8E19BA6501B5D4AC153CD1FF098F42
BA7FDB90C16C7BD84593AA2DBC0254FBF5D937372278CD89425AC6A92EA5BCDC
9CE8937288DBC4F96661C812D31312FDBD0E6814F66C67AFB98FBDDDEC71DA87
37A84BAD294030AA8C55F52203B2803D2029D2403889525888EA18CE93A46214
8DDEC4B23A97D080C2641931E59633708BABA1C0C6E448AAF068B80C012A81DE
2CD195F0A44AA3747B7A4F329B76AE8021045DC09C95C9AE4B4EF735A5414D98
5F62EDF76083AA9BC41826C942C841D1E97FCAAF1A9A3746458A3858BB337F0E
6842EC5D9C0D5D2596ACBE7E4ED417F1B50E1A916BF519D9CB0181018FF1A73B
7C1F124EA32E68FB6A91CF63FFD32B56C4B9985F1D7F03B11002CDC2BFA48D28
BB363416C065A47778839544A2E2D274259C5BCE6B0E9B760FAC62828B9B2C3B
AC419B073E6257B2A440F4EE508D19B02F0212351ADEA2BCE9E77D419FEB25E3
E98734A0CA4A814D824EE4CA5383C6EB89DF600A4F67E4873740CBBD72B5D16B
2125A1577850F52425B302659522BF22518338243E2958069A906E35BBC479B9
D9B3D5003D79CDA613B8B4263412C0CF0B614263317954754A34A9A04FE68A43
7B8306B8463247F1E05CEE39A54A04B118AF10776110E318873BED624E3B0180
9CDEADFADFC8BCE85D2A7E4CF939DDC479252D9453D276A36876D66694E3DFCC
DD4A5F9EE70883FDE70495E187BC32FB261682CFE36CAEF0433CFF3E13DF36D7
5ECAB007D3F59EEF1FA42CDCECE27096B8255AA41FC4BDD70097C5D9896F2BFD
0D101F03E134E14130A409334BAF386B92C7CEAB400829E6F649EABAF8BAFA31
DA0FF1C0A82F4086534390215FED63A94EEA0C4887D955B7781672458363E5A5
504D88A31C2EE5CF4421803E88923B75CA858C068ED009D8BE872C4E07B72F3D
A93330C41C4C25DACEB1FEA3B1B0764588EC4A652D1A7F8DD8C008068C8896E3
69A28BB4800C8A74DB71B80A9F2FD466876C947BF14A36F7C6CD3036C8A458B0
206B8ECADB543C3BE9237AB288B5E6B4F9091D3510AA88179260F7A7B64CEA15
5C3941E7C20440AB54DBC904C56F6FBBC63A713B71FFDB12824857DE02F4E242
2976C62CAF5D87C2BA56D970FD1BAFA2CFDE8A20546520EF3367BEBCD4324347
2F109E2F821C28ECD4340FEC1FCDDAD347B263664B9C41F01974BD8E120C8087
675EC96EFDE2CF5F084CE50AF4CDA274EFF21A2BDD528FEF3E6AE7CD6EA69488
65564DEDB2E97541FE068644845F964F7992A0A0FCD1A613E123CB9AD2C26CFB
2671B72D15270CD8CB1D59CA239E94030793B4EC86011CB0106EC22428ADA49C
AFD6199240E1606C7A7611C1CB836D64F1E7B0AFF653300EECF3C081342B8A5B
460CF17342B3EC42F3EBB3440E2E63B1833460339AEFAF4FCC58EA396431BD4F
95BD5F6DA6A73054FACD12B5C689DBE39D73BA8C9C093FF36C008A05F42ACA15
2F1EE78072533F8900CC3A1869BE483058A5790872EFFCE44FC5224F35829B39
86C68827F3A7E6F3CBCA84397F0CABC125351097FD8497D3BB8E9F04521F6934
EABE1062B23A25485048583800F6809EBBEBFEB3069B99F92E8FF119E470A70D
F3EA7E4118FE0FCAEFE9737190310A7A22A46895D1F5B665C1AECA4F3AC8A48C
D1BDB0134E6D6083277D8ACF36FF0BDBE4146ED2D70148DFC0FAAD37018CCA12
9A4897876302C02AD8911E44FB1C2D98511AC43F3A71CB424C72AF75C1818F6A
1B5C2F008EF53B1D72088642CDFBF5CACC3AD41CD762C52C2C80794EA774CAD2
ECA4581BD58ADB6AB154DAE7939DE759707EA00C3BF24A9F25549196089F79E7
494DB79EBE89CFDE0D43F5248CD7CA2780910F95C394109A620FE0744D529624
024E35566FF0EF71D60ABD9581F439C216350B360D86A6335F4E0C6659CB1551
11FF2286AD78C7E7F5D065CF5DF7846EDC43649EA9B498E23B5617895085BC30
646213E8AD59DCE3FFC7FC963342019ACB32882B255DECBF9CA92D5AF89E0EC3
EDDDCC09941308C88E75BF20C63B321F0584F9623A71F05B694C7382FE28619E
37E9038CEFC41BA172055892C47614A9035E7F6EB598B4D253969673DFF8ABCE
FE681765B54067A2E8FB0EEBA683342B306C3691BF4510C724AB326DD8B68A85
0DE3593788833381F20F7E9082A6CE823431E43B9BD3CDA21236070981D64AC4
18C51DFEA19A42AFE6A2318DFC05F881CD7EF4387121F72EEB3A9ABF13F7A9C4
6EF907813BA3C93DD3ADB200C6C26D753631FDC7D428F23BD193FF1D58CDCD36
66FA965489898CE05E121D853D5F5485735CB74358DDF1D26884FC37ABF3B44E
23D0746888F08B90D05C2EEEA217BBF34029D1B5F97FAA5D7F2701FFFC593487
D43D5C9BA5724888757FC19A5CB69A5A2AA3AE147AEBDDBAEC2278DEF6B3A250
ADEE8D19CD37E3D1881861E2B8856ADBDBF5191C5250768C043311EF45E6EF1F
6C389CABC69B231B0331326304958FC7FC91DF6C817009D6612FC6A5157A3123
93D55B5FFA8D940367BE5EA796839AF27291FCD9D5CC4DCC2662FC3DCBAC83BA
6CBED5C40B669F0DCF0C9E01694979DACD3F5A953BD9E918D5E46449525A4F42
F01EAAC0C01CBAA10C0032E8E7384836BDE8A66BD3D8F24BB57C79B09AC4F26D
73AF263680D2143B36A5A696E5671EA82ABEA5D6505375C53C1C54F274A2ABC1
5D8A393A6B1FCF89B8B76CCF922AA3906D0541ECD617BA1E85AEAB0975329109
C6A52C4D512B80752200BAA2223AD4220AA9CDA067967A43B3D1F3FC4F591BFE
0EA1D586364D17D8832E0E2EE836DB259FEC75B3179FBFA7ABA4954CD6E2D956
531EB14667140E5BDC9A304FA60B5C63C789FC0EFC552C5FC511935D0402CEA3
98F99BBC5EB1B94F4954ABAC17E8B0DAFECBFA23611B7B354AE32947BF288B69
05EC04ED310E37BD380A32270F4981DA7363B9DAE0C84509C5E1537974E0CAF7
DAEC080E933815A170918CF298CE66E65983EA230EF2722AF3C11A75F2132298
36CE5483D7F515232086614B3DF72780462330541A3D42FCD7D8269EB1FA40C4
DF75D3DE93797B97DD0E283315FE2109220AE5FAB46931CDEA7E1DAFDBFC032C
CBB03D0964DF8D25F7BDCDE787BA587B324FF5656D24E0DA26CE769F3FF565C7
069CD4D6EB18828F520F3850EDC06E8AE52E61B9BCD8880061E19EB87520299E
851534408F39443AA946A7630D1872B732345EC77FAD42B0D5F7F4E717F7F2F5
74F03B3BD7ADD91079D05B0E7C7BDB432343F0DDFC433D1F9AECDE4D5BF32ECB
811357F69CCACACF897A7A1B155C720BFAD4AF97F5B5F83024E9A3C46A9E901A
63873CCD5C71ABBD985FE68D9DEA3C0DBCF7C332C1413109E975BFFF13EDFF33
A4A64042CF94A74E4BB2655173A1B4FDFE7E3CC7F1E675408DFCC7E67C946531
DFF69669CFD455CCAC0DACBC66F5CB056A88A3E2D04DFBE0E746C1915B6A766A
D8539FDBA5BBE370D4E9AC027A5042D9D52A210969C7C644B644EA7EFCB02B51
2A970E75328A677A7DCEFD8DB83AD6DC4CF005D393672AF65F0D015C86E975DA
67D846C7EE6253DD07517660B50E0F93B42842784C178987C30755D19E677477
2F699B9292E3B21DCDA7C3B010F2CC94B73A3C439A9AD2417F6FFB33B5E88C9E
2ED5FBD147B0AC8253EC5236F629B7793C8FDACE927C8FBE090DFFAEFF608592
0D417921A6D16DA08C3ECC3FCC369824089657FC71A2725F35F75835683515AF
6CD0E731942B25D5FA8C7B8FD1823A21D4ECA36B55B270E20437A18E90172263
AE478988C56FFA843B1EF3AACA3FCEE17C7835239CD828BF57BD9B788235AA08
47B7E9A4E1D5C3FED9F2798B33B86919CCE73F2F56333AD234C8292BE3720F21
CCC225AF017253875DAE598DECD3C4C26E19284730BAEC36E875E80B29351EE9
AADC6D26F1D36091F4846FF348F68CA1DF784D8323A1D2E27D55FC50611BFB24
94E2E8016A1B2AF9030BBB643DD10E8CEC7ACFC9A5F0B9477E6F64C0AA0C5F1E
D2BC24B77548F1EF0781C131611B0EE9A983FADCC302B6E3FDE8F35C6195F252
2AA52EFF3D6DBAB167D3D5F8C9E32673F719095F0F5BFAFEE3CCC1C812E9FAC3
31FD70975E3A0C72D37B4F5229167694E1FC7E62FF0800968648454AEDA43792
3D039CF3315CDAC8483406A1AC1DF70188977249C8008BE9D2F1BA2D3363EDFA
1FFD7BC6553AFE3E7BC6F469541B1A301528C4F0C5008F19618E63B50C60FBA0
8F6D8A6F4DD29D9B14C25FA8C2E8F6CDE3B28720EF13D116B4DACF4E75722C9F
37E4C9B4E010E3CA56EAA8868DBBE3C7C90C93B34EE07C1F1B354CC7B6A68856
A2E0FEA21DFB9A147695843FD9CF8D6BEB3B9A8FDB3333B694B8D1E953CA25CB
103919C95EFB4E1951963FF98ABC1F5233F20E55541282EAEE8B95636805412E
79E49A826C81E247FF696A03E46BC6EC917F5F9D13D9521CEA49EA429A8999CF
8685EEA1537E8E962C4B9506054A5911CEB7B9053BBCAA723296E000463F8247
E55F8E9CAB0E678CD4158248223C1CC6A866AF0BC332EB55D3FED9CEFC4E1F30
1E3B43704BFDB66CCE11234FDDDA3EA1A434F74D26A9E7CF22C48D74DD85E83A
3C976FE83802D4CCD92264A385A98E8C2289567906FE61337CAD44686AFE62D2
A2DA94D379F8F369B94AC15D805A752AC61DF1ECDE0356158E86C15426E4FA49
EB9622E45801FF0A29945D6412C2DC1D4D8A059876405158D9422E934429B55A
E8A2E75320EBE7346738CC89DC5A220E4699C15D3972B2FB09005D4005049C9B
F95FF0FA981A8AF789E1DA1A785E06B5F194CF371C1A07A95681A598232B4F17
C90B1F9BC8769F476E455B01C64FB89E724580B4CD7ACB9E6D1DCCEA09078F78
DACE5A54C0701E385140447CB39903759401C80854CBBC9A49408580D76DF05D
B82EAB42239FE412BDD386CF352020C739C17AC324B0AF84290187537A739BEA
5B0586EDC6ECDCC54AF4207C0817245326322BA569CB7329647749693AE377BD
1D3B98532F4D28EBFA08362E16890D555D0BED4B230F52C74A835C5A785E9623
F0D483091D6F95BE42F087AE3DCE2AE29A4D20FE29087F461FDD8F3E372D4BD2
2E35BFBA358894E70114203E872FF77573129C15910B8C1D8426FD7CDDA6ACA7
B6688FDE4AB1158CB6A520C53B6A94B3667CEF069764F26D77A20B25BE10094D
4C196E26034F2577471728E585636C88CDA67539FC8C6A255773F6E68F8EFD74
1569C68D3456631FCDBBBB7031D5F2337EAB4F70211211D9EA56771C7B51FA8F
32FB10CD06184AE9C9453442F547B9A96FB08FD0F3114A13C2A8CBBE519A8F57
C662584EC4DCC1467C38F6BFDED12EA66033FB688FF4C0E1059A7753771F4B60
9B835A6293782B98DF6D611220097A6F4B878A2B5D561F97176033A7A3ABA468
FA39B09F4ADE8C883DC6C11B83563C6F6C1EC01850336C56A1273625843D955A
35B70900EAD57E09228E923A91B2F777F24F84FF171362B3551FF7356C84CF0F
2434A53A38799B03B8F2098A92C807BEFC56908B359302BDFBCBA4C8611CC383
4B71619EB0636EF92E5D4E51D532F29BCDC1E4922540D9AD3349225E6B8EB758
ECEDE8173B87B4A47FC92387F92A4B74262D7729B2DD4582483971761428790E
9FF5CD382BDC172026981EB07177509C6981F1E2033495F0BE27132FF20D09BE
2843036E872B2A09CFE7856DD6F5B16CA72F10CA6258254297216425EE045BFE
E15CBCC2B4B15DA7F10D8DCF4A96714FB8C4C3B23D9A2C1BB525143CBC8BEF7F
9831A0E0A137ECC98C67B0FD349D596261D204B3F0A740C6AC526177560879A4
776E6AAADE54D57EE9D3AA45052AC1F62B70AB98719E6B75B9C43FBE7FE55885
96220D3EE1B20D7C10A20D83A882953151C1A392B21B419218AA9C72E5A1D214
4854E780E63DA698A6B1DE4E3DDB0C3857BAD9E50DFCD445CD876E9EB1B5C499
297B723AAF14A6871FAB5980A38124040D980C719388E3505B24B0C90B5B6E65
5F40FAC45FD44564FFD1625136B1FB96DB5DF90190C8BB961B806063B73590BB
D07C46910ABA9E6E1D2D71F1DA778985D2801AB8F103203CB2371DCC5ECA1C08
E9A915A91ACDC7DBAA711654405F78C82D5341B9C83A8CA28D7450273C84A18C
53DCEF443BA66E89087CCEF846BF3E7C0D0778DEAA99C0D5D7906360A1225C28
FD2FC83E859D6C0A5B203F430675FF6E44C6613B91C2FEA98440393D39084762
F4386EA8ADB6A30F3C7C2B5608C343921E19590399E9A3471587035623AB8DDE
C1A3964FB58C9230D1CF4861BDB497BCB7BF9B7BB3900FDC4EC3176A12C9B4AD
964550F5FA8374325CDA145D18185694ECFFA4E0106742BB263EB6229A449CEF
A3C0186ACB46292B1A5E24BA708E1CEAB1DE0C8FE861C3B9182E5FF03A015D0A
0349A3C15589F376E215F5462A71E1829E800A6A66D3E71A4C8048C4F7221AEB
6CE138ED1A71B2DCDEE6EE03D86E36B0C821CBE7563BFEE247D6042F599C783B
1EE9D3A29D654BAE0D49A069FEA8283AC2C7643C53E23B284AE85F7A8C1D27B2
99A58D1CC78AB75D63C8632FEC9A4DF2CD673A9AD6B9BA5DEE5779D1D621B007
AFA76B4EB5736DCABBC934C56CCAFF15E8618173B619E0E3BB0EE9BA83D815D6
D2F51E904D3E804BDE64D7D1BB4A94A13E7F3D86E7030BCD0DDEE28D24B3DE26
E88A69C817F4806B51D3C3F077B06331A5B8521361B4D40BB574F5812A0E8369
6B00557A4E6C46C565A12D9B4851A273C8B62F82F71EE2598A1B7CD523348B50
E806025189D204803E54FDA364F5D379F7233A83B639449A8E3EAA6966CE5BA0
CDD2D444C7DE7B45F77BDF4A79F1750BDCA9744AAB1427D923F707F10F868F54
84EAB6609EB79E515B20FB339366EC7C12642E0EF716B1E0B9D74509A29E5E1A
EDFF1E4AD97543205F97A932CDCA1BA39C484DD9501DB013A1DADEE9B276B6E2
8B1DEC690E34B2E0284FFCC8D0488FA4DACBFB92A476756DF54B336E77CC1924
1AD6A6F9C625C656F08B7AA9DDD2EC4DE831A5CFE10E25124F7EEF1345649340
71A67D3E1A49B1E5F7739C194AD49495EF9A6A8D118806F5B985D02BC0CD2679
826ED325935A2142E229963B55946BB44D9D46A2B13F085523CC06F310B724C9
F6FF052212A2DEC5C283C7B6F52E894F9EE32E540027420B06AA4484AAB1E0E6
9C93A7B99CDB399CAADCC309BF295D1BC21F3D88A87AC956E8900465E7CB4E60
986F5F5A6A5D0E9AA11838540A563B73DC5741C6FAC4D53CDBB0AC4EB5865451
FDE2A328BDE02B2669445A677008A45931BF57627E5674773C7A69DCA3C382A8
C6B88BED514046AE493F277252FD204185F6E35E27031EC4C6777EECB367698F
4B82E954BC190FD009BEB9430030CB5F89
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic8-Regular
%!PS-AdobeFont-1.0: LMMathItalic8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathItalic8-Regular known{/LMMathItalic8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic8-Regular)readonly def
/FamilyName(LMMathItalic8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathItalic8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -250 1110 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD112356772A65C14D49D03C7D456E5
1A27C2ED815B30E268B02FB1D2E769067ADAF25F28640307E3A89F0B04F44A1E
1392A44B8AAD82CED1539B6A9CEBF441EB81775C7EE4CC12313F31FE710DD429
4B1955DF2BF7A88E1EC21DA22A63BF63E89C913EC01EE10A0601D6FB239DF59D
2CEE7667F4CC4BAF660B24F635F981638F40E8CCF07F21F5B5FE3B5C115D1000
0E4B2ADAF7B1C53935EB7414421DB49A59F82D98D08351CB0BF0C06DE836CFD5
42D68D51AAD4069871F257AB7733F8EABD731FF9B0E3AD64000BCDBBEBE26F88
C96730B45C14458F42927E24318A97B48235E5FE200DB40706E9B41AF7CA33C5
67BF7766BD396006C5364D1E736B256538E5D163CDA75C4F419620D5BE5DDEB1
F7D7A55B5ACEA2B2EB4B78997398C7D38B3D7B5774D980C087236ACC7346F518
7607A19E85C83E2C6ED4F3FA8C15B65FC3D117BC5E3FFE33A5B7A69F7F7159CA
667D96B5D03E4C5E55FCB1F4E2148B4B8DA87567988F07CA181FA6A3C3C30A33
80AC6F4E92903C47BF489A2376AC02B00B8CD01DE080C96A452D52B4B56F9520
B85062F15C4828813D3694BB4BD3512541C82005C9AA5C065476148A4E47DBD4
580CB1ADD206D19E7D653E2690FD48B252BFECDB2C64C96F7477B2E5EA0593A9
84841E96F931F01B2B61C26E8450D5F2B37B51EC364BC2A1233FD108DFFE0F00
AE57465ADB0191B38D14E89413FCCB77A9FCAE09F59A3F5C352570F7390BE91D
178255E10C02CFB7B679DAF86EB351BDEBB8A7D4DBB9C65715A1355FC8D2C355
BB452D44AFDF7E25676F3FCE3A9E67ABD53AA2095C2217F80B3EF7AFE49961F4
61F60F250ECF1329A62A5D6C3F882A44310C4916ADBC3DA9B6BD436AD86BDB2B
16C0E63EB1257ABFAD25F281D32B547B31CE48D82E48819606699CB2A75A64B5
D1B5FA98029D7CE623B3B8E9274798F32EB5455A608A969848587FB4216C3C35
4877EC108D8DE8FDDF058F61DA3D0EDA68EF579CD4EBFBCF2F88DA535DC05FF1
5EE718E01518738F7E6B887898261117EDC211226EB3AF880E5F0AFAB2498FE1
D79954BD53619CA37601F681AA949D18BE7A0C27B1870062A9EE8AE41F58328A
DB5170FC710F29B4CF6AB780A4E2A1732B3626515EDB3004C44AEAE92C7D6E49
A68F23BC5D249C4A3DF3CF4024628056A672802384A5E5DB25A29C3EF383C619
8BED338F843FA8349F660C272D54592FA44F0E240C9B5E98CA5A520D17707A1D
8A2B2EF5319D0C15DCB8EEA91DF3D3DA82309D7F8B25CDFBC3EC2E69EF61D3FD
A49A37473D1979C3B59B75C3064E8F9239E1DB6D9AA6689BBE293616A6176B8B
D6BC6579118AC1AB3D7E57D9BEB1BC43CE62170BED1F8A94F52E224D8DA5D3D6
210CD5884774FF4164D9053DC6D3E038DABA62F65F21C6BDE2724E3A1829F017
F09C0F7D604CB845DFC73CADD0D0D68492768C7F267969FC05E7F36F0BE52B5E
E1234B72C68FECBCEF732CCFB671ADDB665817F1EE8F088CD54D51DAF6410161
D9F2DB4C809D648A7AC36CAB0C4831489649C57E6D4D8BB6E95F803D6E48BADA
30D5F392C7F673B64A75DB0DEC7E63389ABA9AB423DB3D5487DE475EFE6AC212
A20E02B8EB3B4210935E31EF2281A68E7219D0014B39441A15A60083DFD87388
1BD1AD33F8D77DE13ABC2E867F0E4A37CF6A8A1350AC81CFCB25DCAB3692CDF6
1A383F5EB5E6C419A45C4B8140187CA02DD0285F22266503AA030B33E57653A4
75EA63E6C9AE026C0121550A247A278A50CDB3E938C08C164195D8C6D4E8F66C
528DB5E12FBB370233DC972ECD533C5092650721FB49EEF0F377AA9DDB6B5E2B
F465245881D4BA12517B0CAE24A1A457119C0AA3CC51BDBB33EF995E44B89CEB
08B2139B109F9983386EF892AC614B048BFDF17152AC1D44FEE052E2961195F6
E644BB79723E9292ADA92362B5668377CD7306CEE48ADAB1D9B43FB091FCFD46
89DF8C1F53740294FE9818F6F36C4C3E3FCABF5D45D6AEC4F20841D7B047DF03
06B2A32CD6131D4726D7807B0CB2F05C157E4513126839FD84CD16844AE2626B
2CCC6E3FB2985A0126A9276B81BFB8255F555DD60E8EA07D9745D370225A9E62
685A7166166CBA1F00A313FC870C93698D650CEF972051EDABAD2F8B3922A609
7D63940BC07CBFE950841146153694B1DD9CAF4869AC291EE52381CBDB9CB740
AC5D25ED782DF415F4FD9E14EEBE8976CB5445BCDB09461B6F970221BC3713AE
64CED20C2F6993D94F88B4B51F9B2DF91F833D92283133AF27E77E795CA42008
49CC3209C13E2B23C4055158E486C922541FA6022F46EC8D436DECB5704A9EBA
F9C2E7698C0311BB467942FD209A4031411F3B1589C3B749A2CE0049AF21DD33
F8FB027227258DF0DEBED41F93F498F4E720FC2DEA3DE2E29505C41EE8C4D24F
F7331DCC13E7CF4D626EE780BDD528A7FB4A42E7E834D790E4E7BDC184010D94
3CFC5EB393BABE6A7EE91929580F5429A3F8530CA3E939456FB5EF0CDA9F2825
4BB12C751731AE3F6567CC4CF72E22DB14BCC2C95F14711B7309FD029875781D
156718676D7C7E4254F2BCC01DE023EFEC3EAB42273BC7E4FC3FFCD0CF729961
9118E3ABFF429F468D57D61EA30932E4A59B61701628D66068CE65F4FD2976B4
39856E2DE7F1CC9ED0716E3FBA9C762E34EC3A5EC3535A2C1F23AF03DBEAAE27
5C507946DC9173F85820C3F211662B444F585C6B0E5B2C058292E6A00E41A834
9615F8E8B0426FC01251150C8560A6192C29CB077D5BD575A9F252EA133F1F4C
69E56C98E15328897F471148DE55ECA102F0D1D273DF5F866CA08C829D28E49E
9E851383B0C9ACDD3F025215772E7B8FC7695E075481B9CBD519FDF1775589D1
7DA0DB522E06F3A34F3BF35738A4D5BCD827610BA5FEA9D8E46B9D94515816F3
05001A0BF129AC6B8F885F56750EF0A61FCF73837EE3124D2ED6F0D7DF8FDB7A
AE45F88542B2ADFBF45AF742A8429F6C6A49E8B8BB534C27D2EBE64321F31CF4
470DA41ADFBCB0488A56E85EB6C9D4AB51604EE980DA5A44E85E30E2BDF09357
ED24F6FEED7AAA1A8AEA664F98CD05C8D64755B0601C930190C5D6159257AC5D
78A0DBBFD7144AC01C604EAB9D1B03BCABBC60613CBCD5233F52B64C1003170D
1D0EB62BA4957A87C3B6374A3AE411F1136E14FC1A72443570219935C6E54808
AC8722F6548FBDD53620955E4435394290BCBBC49CB8EE3D6BEA37A0B128E2E6
CE965325AD8DB56ED0FA0D2345CB1A39F89980BF6F2AB33C7770A5D7B2D24E29
CD7CA595223778398929EF9BA94235502C2819D62657AEDA5E35E4244BB01BE6
A5FDDB669B045C0624304A5766D07D0CCB2308E98DCBAE5FD5A2E463FA87FD72
267C812795101F3301EBECB9777782FE2580A276F7EBA080839F63FB73D2C982
CD873724D3D68D3AEAB960995CE86127BC8CAD2E0505D9F6A3A03FA0A03DF2EC
C871817B474504C19B8C99B90E28FBF528E0A828EF39FFA3724F17CA253F73A3
68C6EBF715E0D14672800C542DFE965E912FBEBF29C4398B2ED7701E9D1D9153
4AF0E849A7199A7705632F85DDEB1A445875302114A1AC28EA85032CDFDC01D4
ADE8FB2F2A015C00D5DB93CE19DEB7C6A6F5B31BC3E32AD8021DD12075861134
C5A75326F11324E370CDDBB64590ED255AAAE3BF0EA14C4F6E7FE18C48083933
77918609D79503E39C9471052AA9D5FBCA7CA9CDA9B31C7DDAC9AA0333A7F72D
1C423EA0DA0756999C96B028D9E62D99484A0C7C245CF28B163767C15EEF2A51
10167C51D827B3F56585A74ACC9BA0A62FF5CC1F8456008DE94BF894D6751F74
E4C99EFBCE87816847B04C9F06BC4B0D605570FC0E687F04A36A2FAC86045E53
5D05E2D60A1CF33101500BE3436A53D3C13BDD96978615423212774966457061
646EC75A600AFA44C4753672BDAD560FE38173360CDE4906A2DC6B81DE78B7AC
39A0636E4F62FC9CB832783CC4F1097D476BCF761E505E5FC32659994F96CBD0
7FEEF60A3A2456034E38BDBCC3D9C25F4F7633568468E35A0CA1F3DF9EB69B8D
1A289328CCDF0ED511D545
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols8-Regular
%!PS-AdobeFont-1.0: LMMathSymbols8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathSymbols8-Regular known{/LMMathSymbols8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols8-Regular)readonly def
/FamilyName(LMMathSymbols8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathSymbols8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-30 -955 1185 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F035757560E05960E2C327020FEAE317
24C484AC0CD3C1AB9CF35516622A022D6CB83DEB8126DF04762C901617B35492
98158049D5C65DE86143B7F36D36233A115C36DF60D3C55816B2B0B341102AF0
90D7D4E00A7611262CCD366F870F0EE8175688261513076B608C7E160A9A79BD
2B66E2E2A89CBF6D1703854915ABEAFA09718FE338924B5AF1FBF1209786AEB0
0026C38A2C7E208E6C306BAAF037DFB0F3297EE1ABBA65247CF72D0F78A9BC24
038966CE124B94487282B69D6BC0B5E17441DA55415B5369E451E2B0D705FCAF
3AAC6DBEBB8AB0313C4C201F851DB96CA9EB49357C3C1AB73F0CA2110C994680
5AC8F0D760C03F71C92CEC2E1A3AB84813D389BEFE7E0C28FC76FCA70704BC4D
159EE8B490B95CB09DD01A4122A686AFB8B9C69381C8C303F9A3B695238C3BB4
CB44B3BBE50E2BAE63796BB51D945469BB75C69F7A758180B77CAAD2CFD5951A
23580A3D45083C8368543DD37AB49705B939804C12D4BDFA730845F7E42A6C9A
B3F0A376F44DC297393B85E8A18C45C99260BD499DE599CC0D76EBE4AA7D70AB
348FA87CA9A1000814C4FA99B4EBC35A0298AA29563B030707F3EAD9FFF7BFB8
3B347C4A00BFB392E79B79F413E67A73FBB006EBA896A65CB21BE940A0940640
34E08FF806A114ADD3FD42BB394F76CC77DD869C46DEEE20839C9A2FF73B840B
0ACF238D333719F5947DD4C39B8E3F070EEDDA1A39D526319828FA9F47F03D8A
245D8E215B37959566D26DD98185223E4FEF01676650EB4E26C0A425E6C23C50
4BA94BC88E08614769C017F6D4F14C52D7189D4AF8CDA367D8B04CA8D3F2307C
0A7A179419A80695912F456637F539123745CA8E696E250E0BA6B7C6277394E5
98A8799C29B6272613C152B0CAB05F3C7795791EC9AF2BDD416861A3D13FA858
BCB6ACF5BDE40E5DFBC1A171A7280E8FF4AC0D4C8A2199E9E2BAB5CB9131A76D
EAC166A7C449A549EA5111F1750CA2C6E1EC6F00CB6C62BA52D17FC66E06ACC9
1E6B858F9393AF9AA5E69F799E01D301B647DA57225C2920E3BCEE9D09CA5C60
F22B07F24A26DD8F4D6F9C78BFAA8D12A21531E713B80CD03A5FF4F3BBA2AD82
3BEF7DA8C97C30F1452006AA3B1A168483F6EDC4089ED02E567923AE6DBBCCA4
8C246A080448200C2A29C34AE6255BC79B73AE14B980A7C357681BB0962894CB
DA32FF2B70B21AF4D158E0F74652684A7150D0967F83E13EBBAB33588541AEEC
0DE8C53851845A44FFB46A93CEE3E8A0263882542F7F103D13C367EA8E1ABFAF
6486A9DBF6668550BE7858F5790BC87C66492C0FD34DB08EDF842E1AF58A09B0
85A9B7FA402029FE2439769D67DEBDC8AD8C861E90E5322951A2904FD702766B
36916DBA8F9C96141BBF4788FA435556B2B4E1B37DE4506ACC4224CFC00A8F83
33941A050B51B9508758F4EB2DC074D799F5116296B8822ADD743A043F9A6426
88D10767A9F99A072BD4C88CB579B34687BA4953B96DBA29F33211B12A0215F7
5F2F873E5074A7D593DAD0EDD97270FB9A87BE870321A49958B10E32850F0148
68E0A1D795937E61D4556BCDFB7F4DA63A884F9B4B07801D30B1357C3432D6D4
7B72B7D6040410C194EE5124ADFD7A40914BF569EA1F9CA8C8897E839D262395
5EDB3E97C591A3A5927DAC229EEE864B8C0F79ADBF88C0E6C41CC70D9010F07C
1CF9C05960E34FABB6C5DA4D789E39F35FE01F0B22BD9C63B3098457716D6B22
5EFCD0A960F3A2319252C7A0F73A4770E056209C14D721A714D713D5F2BFAB32
EBF815DDDE792B2556A87C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: MSBM10
%!PS-AdobeFont-1.0: MSBM10 003.002
%%Title: MSBM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSBM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSBM10 known{/MSBM10 findfont dup/UniqueID known{dup
/UniqueID get 5031982 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSBM10 def
/FontBBox {-55 -420 2343 920 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSBM10.) readonly def
/FullName (MSBM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 82 /R put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943E919FB4E3240FEEED78EE63
0677FAF39AB2543D18C08A2B98B97451CD42CB7893DA8601CC0F45A65BEAFC64
EF72554395DA801CF2E9E3B03F65F1BD98F8C5F8EA06D7457842303C1A817E7D
69821807328AF426B9DDBC188A79A66FBB9E6193B4A3EDFE3136C6574B9C4C94
E2CBA4FE7997F949BB2DAC0D329C2AD8E4095BD18A037AC9F77B794FC389E5CD
56CC4C0B74D64FB0D02C92B88942C18B6DA84D4CF482DAF3A01E80BE483AC6ED
AE98F5F3E49BC762EF6BA937D528E751D9588B0A1E82EF0A5998150EC3854472
5A91EB983915BC1D6E2C3E615E0267B39D6937ECE0EC16162FE76676E5B69F3C
BC1AD934BECA284B89F0613B70876247D768BCD246883CFF4D819D6265302730
7E4BE6B2FFE7E91CCB8C6D2AFACDB4C5DB9688153E1D6B2DE136BF7068418A4F
2D1C0CA301B1B97290B46EE14B8286A81E709980F67382A5132F01B2D44DCFF0
9753E776AEAE2141D580E64C82598DAA6DA4057FFA9D02C3B77AE15A50AB457F
3FA5A10A3C986B22F8E154C1E564A55D3BE4487677613DCF793F7E1B57C9A925
BC57746C25FE567719A9EAA9CC44F1D0FF8F92C03132B205F57E3AFE9FB66632
D3FB3EF5BDFB9848030527FE759A5273CB81DBA2719611355F43E34F8FD7D0EC
9BE47685A2D122C9B60198A430C5F5E3F972376F0FF4BA52BAFF64095F7ABCBA
022622692231FF87514FD912B80C07A0EDCEECFA629E2734B5EFE2604E8DCB24
32A4C691DB4CCCF19EF897A9F4EA5B2B5AFCDF87AC06B93669F3007C1295E016
FF0A99324B80E37020B1080E80949525B3278DF111ABEA48E7182B6F4DE2DC90
B8D31A953343D5DB78B1F2CC6CE631EC7E3D0041A823DF2A4702AAC0F0A2F018
E5ADCD42EF2EC8AFF6F4705D30042BE7B6F866C14AEA1CEE04DFF82BF14931B8
D297C38E6DA6E587C23EF0864F69BB0DBC9C1EFBBB97B92BADC336A4AFAC6A91
0A6B158DC42E975CB5D8D2054CEF367FB112456AF50684C41F80B1E7ACAEA853
B843CABA76BDE9582090299F423519EE3AF8F83AE7F7828B314B6E36E9127419
F274E9FBF5622C5E48D7E95664D6C0C1006661038CF2C93BEF1DE34A163A2C86
693A13F4D0F052D2E183F36401F0C29862BC1B36A086524F76C7EE2C6D436A23
7009F146F1756DCADD3F70C51FDCE610E30C0F4AC538A2703423A07976ACA74C
25F4CFD6A92969E206375FB0C672E45948B0E832F2BE688EC22FEEB3E06BBC3A
272F73081A30830AE4214F2F029918FCA40BAEBED6299EDBECA01E08F27E5627
F53BC56F4AE7CE2D6273B27323AB829E2D51672A4990E3AEE84331583A99DA4E
63610AF8F10C50FE6196E3F4C1E4FC9BA6BE0ABDC81A0A7BF6A5792A97BD0A7E
7BBD31C3FDC01D734550843C8D84C6CC0B492CD1A6CCD57428F03A863E959C77
457D401028FD00FFA9BC422FD09D8B8A70446A61CB256A2FA0B59A2646D9C5FE
961894DB8B315C52008B4416AC35439E010BF90E43A05FCB2FBE8E62385E220E
588B7FE5509F1BB71150E159D01D24EE28008D4213227FE9BCAA34364B1039F6
BC142AAB19C8E9B15F0113781DF9C9B3BC145955552A901AEBA588D39D7E87F1
CAF27D315E168807021B0CD1B2CE13B611A7B5FC28DEB4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C071D06D71D60CEEC9FC68AAC0ADD1DD74B262
0156612EB4B21A3F4ABD34403540C124221FB9DA5EC6C7229DA9A1D033AB828E
9D80023B2C8E68FAF7A38C925E0587A1CCE432EBBBA598B201F5AD036BE7C8AD
B8C411BC79646781C4519B89DA648B919EB362176B83298EE2D8B405DC66D81E
C655DFFD1BB283F3C5DEF1495FF97C798C213036AD02BB07FD42EC5932E79727
ACF464295E75CFC635036CF27FFC42DC2919CC167CA4C2E673040B7909AA26E8
123B3D9F176F6510B9526E94D4E38E62F8B9B96E2D2D51BDA2FB7C6992B79CD8
3E40292315B0EFE711C8FCB37968B8AE1BCADE6BD8A3BA1009B34137B90D924F
B2784C9E13F0795427324E80C175BC99140171AA2F40784356690DDB982F55FE
EFFCF946C6DADBC6A907C7DC28850415D9AFC1C8A868801B990CE2D26AE40CB3
4EE0281A60063AA71E48DB8A35E05C2BEA1ED5BEC68717E95B7597AD7CACDA2A
6A4E8808BDF0AFFBA31BE1697149D7BACECF4481DC61CEAB7476A2E00CD8EFF1
37E476FE5A098E607E25ED29F4BF3409309145BD0530C8A76E85F59EB0890ECB
A12DE954F33220ECCE5E9CC4B52E97089790D08FFEEA7D143DCC7C07BB2694CA
6709EE19C11515E6E967043F9162C39D9BEB2767B7B31EA068C594A63173F7F1
67F3D6FE97087D19F73EEE205A47785EF3C453E6F77A08AE9F93F4060DD19EF6
6DA5E780DCCA30F180F8DFB0CEC4602AD1201C63D91450E7B5F44AEF32087A03
0D933A941134E74040E6E7E797E18AF57941DDF7DE2072ADACCD3BF8D4CFF06C
5B946E21D0F5A799CD011CFFE4CF0F571B4377AD4768FBEBDFCF6B49F09839B9
35B1F7AB20DBC872DEDA90B79F113F5A4BE581DB49C5EB8C9033B8050C143424
1EDB333D1DCB862DC543CE420CC26EDF9639E4256570975B25C6C1F06CFDB2FD
9035344017BAA39283C14E3AE66A14DAFFE2CD87485598645C39B92C18AAD014
7814BF27C8FA6DCA0BBA0FFA552B9FFDD54BDD8C7F84484031FFFC0AE8932A64
53D2632D9379F30231361D03BF91F74904C7106B6F8EB6ABBB29858F65E937CD
E31D67C847719779DE0B34CECE88A8F9A12D46B8FCA50DF4433B0B8AED6A63B9
E6512B667AC78A09A780813B1FF02AA967B12AAFAA0AF1B3DA27604A975C2DB6
FC1854457C67C54DC08DB989CA3267B2BE5B8178E6B7889A33771F86276E6DA4
F83033522871198AB3E954EDD88B5059BFBB42AFFC2738CA09B628CC646123FC
9C2BB8B9149CBADE7A7953FB4FBAEB6078B410935DF7D6D5064271899313C4E5
0DA12BF2F08521A17641A2F5541EC8419514939892C0E353FB1785CF9CB67C88
AF752C2A0DAB509A424DDB9649BD8A846E6BD3D374BEB6B9DBD5C10FF56E2000
AE4AA5B339C187F52630B52309834F266D778C720FA9BD9CBC1F322A39EFCAF5
85107BD5A5C188A6409352766D80E77B1270019E0EF57F31E9F13B9483F070F4
86122EE08A4870456161458B6C93A1602A5EE583461ED91A90CA5B743636AED8
1E5142CC0A7DC998CBCF84E39CE3B141286A5994C60855979B402FC1C092EA15
1A6F3762571629775247A6AC65DEFBCA10A51ED614E0C7FBC7335681207464AB
F8C4ED5B883E7A4D01199AFC3C88B0E2AB5FE014A84377451081CA0390DEBA75
7BEA45FA3171095052B839F7A2A9E41737F4A4CD704E8EAFC757116FE3012E01
AEBF584F6B34EB3F9C4B3893DF4E25B71CA17D427219E0E2F3F7ADB530841948
1FC1CD966965C72E9490C31153E2A0DAB73629A1DC0ED7C058AD150C4D5BE6CA
FCC7D71907232339F3FCD771914933CABF613F0F9FA3E206172B0B4ADD1D9744
00A8C2642147D4B652A8F1A7E5BD064E369FC591D4739533513C202E9DA91CDD
1581D1A58898DD6564B1710A88AEF94B888C52681BAEE1E3EFB4DBC694919D4F
41D01894C91D8E03F68DB550934E5D783537D2B57CEFE23ABACEC756F5D1EA5D
A74192035D2304EC4F9083716CA7906B80486BB5C79752270821CB12BE7ED0FB
9FEAA580CA187AA3C9475070809AF6881F745EC71298D454AD31AB998F5821B8
2070122634D5A247EE4D8672339B1D90113137D4FEAF3CF3A2456A8712556956
C5A48721B1B1E140ABFF7793081B2B092724FC0F129DE772236556BEEEBEBFB1
FAB1037FB0997B367483D2C8C0D44E6111CEE2EF443F84FAC7710AD0368D542E
8A629BBC3C6E2D85E984AA01B575B37DD1D9B0D453E3A73EE7A34FEFA5641BDD
67E694671B6250DAFA3D85E0A78E946C78E33A284D4F92B73D7AE87B13F108F2
C4611CD948F30F56B984E409650E9CDFFD63D996E25E5C0E0FFE02BBE2237537
8C945F31C26697A7ED159B529276995292581CB9B29A54F4F4B2D472C74909CC
47C1675DC6FB9A932C0552F8FBE17F4D8771BFC6109E6D709951694157B3CA9B
1F3952D101D6CE60D1A0A97C99EDB3FAD64BBD337BB747424BE88E67FEA44610
51A1F65159650D3A2FA882944E6E8DB113CE928969F6BE3E3B8BFB71302E87A4
5A22ED99B04853D66E5A22B56F79FEFE917A6F436B823B1A2FD914DDADEFB5C5
CA3A43E348D017CE2040752BF94A98902E608264DED8C3241F06469FE18C377E
448EDBB0823526BD66B40F0519F047195405629408224D070207499DF2F43E7D
52E442E3B6E9E3B08F88C9961E81373B96460077464C7DBE6C7C7887BEB3F685
B182706F5DB4C7C4BC2FB81A7D040EC5A04E5C5434D732318AE791EDC71A47F2
AB39A992EE304763BBA1AA81F9D74B24FA7EACEFBCAC72D673540922501841A4
F7EF18CA86AD20AD76325914FC0197DA6D7632947C4AB3AF2133D1A1E2719511
F62BEB9C879E76B74493C7D5EF38E01CC031CB4CE13C2EB6BA2695E1AB97260C
39A7CF8F690145893081D526990E92C1FB18CC4B968D70DFD13C6223FAC9AD31
2E1240ED981AECE8D13DC653D59255F868EF158EDD781E9D02889907B23F00D4
F6A0D9B74E591BADA348B09E22B1A783A8EF2AC87D34B6407522AB33411ECA4F
6C765C85ED1405A5F27B28A16751402AB278A8099E29940E719DE1E109E5BEFC
2A4098E77020110C37A90B5BDBE279918B0B31E08031DB686D518B4CBB8A4D0B
EBF6750A452A7F706EA676E3B3237FC5656B29CD5A3A04F82AC871B526CC28B3
A61D985EEB3610FCAA433B9C6D4683C512F0FDBF3EE6FF552D7BF0BBBBA37050
FCBE3F164189FDC8446ACDE8D0D4050278151B46E56AF826A0C2E9389C2B8BB8
E38579D281D5142944D3322E1C66D456E4C5DD727AA41FA5B369D5E10CD71832
A7DD40DE855B47289C449B6AD8D5F1D557102050EDA5F1641EAAFDDBC082E579
A06D8A3A323458808BAD0F4B8A2BF406DBAC4C5F555EC96E760C8245A1AD9F50
881DB475F892F868823CC55D4859C09148529FBA57A392127B68F5366491D1BB
097D8FF4A71966D42DD988F48C8A1F4DE0449E6AAE79500C42B4EFE4936D0D00
0FB339115493C16412F1D6DCE02BC7B485CC108C6321EBF1C609633933A576C6
B0758D49F3155D448D505F73A5206EC1C8886F5949790A7E4B850B6B8E31EC18
B7321E63AC75B6588774961F6B7D313B850AA4B368E48DAFAA5693CAA236E150
E02FB2831359FDB95792B2E6431DD24BFA8F2B51BC21E2E5AACC0CA211F50A13
075ABCF9F440CA468403D939B91520C652F1196EAF1BC975E26F8057F69CB972
E976F99070AD3FCD958C1EC54B3994EA142AA0615EF7BC00D85F75BF5F32B350
E2CF46BA0E8D0120BDB54910E5C27A27B59664E856EDDE290103A0D490FD76DD
09B152B3AD1C4754696B239D4B13935AC19769600943C7343A5E7A06C9115395
DC2F92EA95E5ECE5A08EDD16DF74B6297EC0220C91F8BB9AFE742FA96456E131
7D41CDCE88A8F9A12D46B8FCA50DF4433B0B8AED6A63BB5FFDFB8D48D04F9849
2972699B5667C0D2D206F4785DE20A854E1D4C655A690689B7B5A19F8162E5D8
454B7A1CE94AF723F47C6B168CB7269CC802B14545C8448B5C260C6AAED5FB23
2390D7239C22534FEE644AE96C5718EFFB9DF1AC47CB3022D3751E6B7123FB71
403E154150FA4A14EE2CDC8F0BD084CAB30272E8F065218BA88536F138B94AFA
D750F6EA9BB43271084CD876A14CEBEB86283BDB500BBC0F9E152C30059054EE
92951E4A202AB409F7D16443DE00ED69C1FA674BA3664F8BD00C08A27F475C00
E6AABE35B01B991AE910B7DC821CFD8A6B5C7F4B116E78065CB219C926D45163
EBF6E81EF0C38076871283D64FA5F2126CCA7E93636A7CCA2158B99A15CD405D
4AD290CD8F7AF8845CF78D4BE9C7F2E4DC00372530C64BBBB785117A8AEEC190
9F49C82BAD55AD174D38A74582CB367BB50ACF8FBB2C8A2EDB17FF267D0F21C3
5BE42CA518272C9F9FB2DF0780C957CF1B9734E9F49C0E6EBDB5D24ED5D673E2
6A25811D4BCA9D693EF8ABE784D2BE46DE1E57E1B738ADF6FD49E6A53BF48C6C
2A73026234D3719C72C2FB8B8274AB54A6853DC6784398A6B994BE424B6E9078
6C303D590747608AF3CDD6A51B5612DD5D49E1153A25EBEAC76FEC601CF4D10F
65DAE3EDBF9A163BEE244542BFD2849D498C239237ECDCB23458C7C3B9395C7F
900C2AC7BDEF8FB9D4574698BC8D4E374B34969A885A0A4AA26F19F8348EC621
89B42297868AD2C3E80D95C41FA4A5AF7A016D3C773E040312AA0240DE24C7F9
D662FC2E59673DEF563AECCABF724C09CEEB5DCA64FC6D24A091A75B5745DFEE
F5C1162900B5F1EF5A7102C27DB1918679E7E354A5DABF897D9C8EF5A14FA8DF
FA3A7B3D47542FFF5987268E60E7FD64B017EC6A8FDB4BA5AB5B5B58046899C9
C5993E7302C870678DEBE8FEF3F2438217BA5121CC668458620DB3D381D56770
19CDD612E5C0A267BE4F707ECE93B3E1E8BE65922315729FA5513AD13B562C5E
E145AB39905815D6C3E8B60AC5C1D4D7731E2A6B122C6F57790C42B0368AD7A4
99EE5F029AA6F8E302F4CD994EC08C00AC6A66C51254F71280CC722402E200EA
D4F6F489DCD61B81CDB85804A5EF00CDB09D9C2EE4F3D571285E319A78F90942
1C31359DDF81F38F6E8615BCD0E6CFFE077688C365888921E45608C868A0F6F9
D726CB2CD81B49A9F47C12FF76284D3B07E2C2E788036B4867F90D40C1E4FF74
60399F1F08F98A05A579D00D1ED5E8A86BE9DC1CEE3FCB03B9A0E4BBB81C849F
AB1A6089E9807455A5DD78B2EC3090E36EDF4D19FA6BBEF386127BBDB53D25E6
8448A975CD56BE0A93070F848850FB9B3B0285C7FADB28A3711C06273B79FBD2
A509FDF7AF81630306D67E0AAD0DAB78243E1B814F745234BA7CD57325B5A34C
C3F984018DC9653649786481788A6F58ADDB87DD0D883AF60455753850A63756
5EBCDE76329F5626E6328EBE3DB5770A4C3E21341C304F38845FE70E091803D9
D14037AC4AA8C4D17EBB62ACEFE5344982E0F489D72EF60183D8F2A79A3AA765
C18E0479B0255870CD61C8CF7AA8DE567D174EC90945404C5B928EAF3E8DDC1E
018442474EC6B0B42DF539EC1557722299347DCFF0347BA4273054B8062D3DF6
FF094944AE472D60DDF6CA62288E4E780F8614C7749C9406325C82715C866134
637DCCE4848D2B051B8E0EC7B88872E9AE68BB5DDC30F4A61119733F6F6DE0BF
4C6437A849A661B6A233B1C24238BB910C11D2A8024C89FB5DC745489AAC2570
4C61242B4B1983A5D0B134C8052495CBAA9D2E2E014641BD58F0EC389FACADA3
08A1723A5C2492BA0615B0222EDD152AD19C307118AC0086653521EA59D676CF
C36AB586FF1FD4C383E2785EAD36F41274FB0BFF9DFEADC612CA44A7392D8E79
1DDE1DE818BBF26CE3BCC2569F5CE6DC91D4F8B7800A05DECB300CD7A8C38D77
4C1DF436013901C9671F77F34A63F361C5579EC5E00C5A8E2FC97874F6459EFC
C1760E9C6C78E60CC0152340DA6F26C67B2E10B620750E2C44E5CB9DCE747E29
6F7E716E6BB12B699A2FCA90DFB3DD730D96D100DC5B1BBB1632D7015235F4D5
1C1C753EEFDD6ADCEB45DF4D00713744039C43B860B5A9C51AF0BEF11CC8E85B
067A402342896C9B3BAAA570C4900E12D720F2812F28626DE3BD3F3426B82718
259AD02CDB518BA4C4AD8F261CFEBF43857EC7A543ABB1E059247E276E206CB0
0BED125C8F78A665901F80068C9B0AED83074C6270B177BAA18F1975F43E9160
8B75D86D9F7C1E986C2DDA71CBF33FACEE675B943764AFE71B5A359C4A092916
3E8EF660794518DA4307AA5B38469000FBF31BAE9CE8703754A099D21B332D3C
A19A842755A79DDC1E281A8C34A969B80EDC946658B7579B5BCF07AC8B45C2A8
3664140E70CA62DCB3153CB4A8E46F12CC16254F52A26FE47FE41504D3E851A0
665AB60BC0CE5C72512D196F8D1BC0B3FC12DA2D13F4B9AEA2D017EE7E574B86
2576F5EA495F51E1B3A86090ECFDB57097EF73BFFD5E41E8AB6BF105F87986D4
95940A8B4A29E4DC974554DF975D026EA92FC09DBD65783663CAFE414B6F8C06
F00A26631D7FCC4527109F177093E7432F5FAA6CA14F1654ACCFEC8FFC127488
F604E972B695E9EF18F331A58BE4704E5130FB4984C3FE2474E6CF0935F90B79
7221D94774689E83E5406F5D9554C1284249C687A6CF5A6B4783F54267C48710
32ED406DE854CD5E243C0BE4656E35FA02FAF5101E1AE6B7CB286C9DB979D763
FEB468FC7AA2DDBE2E708D27D89164B12BD8BDF0418BEDF018EA67683158D1B7
73C6EF553EA897D5F2D53E75902E57D7C4E06D7DC83F1C557ECF5DE83748370B
00EE03A3ADB919976D4DBFF11B246AF9C2FE922A8A6F8CD47656ED2CBC816B17
3B01048BE9D1E4B54ABC0396D5203D088ED7A1FC7CC863AF414AC14AC2D75E5E
EDEB706CFB2AFE24EB580E55BD31B793E4065CE83795F047004ED88F5C38BDA8
7F5FA8880517429B9C4E5FE980448EDF3BD57758FD145E769D4E88BF43D19050
DA58F5EDC7B4AA76BD8CDAF0B8639BD5D2C7552AF5415B7F35B957F02B962930
D3D0C3AABCE7BF840A7A035F2CC57FC978684570CF6C8FDB960B9CC6E9435D65
77D1CFB71D362BAD7280AED8771C6EE2F7E2D86C5661CDBEBB354B84249E93B7
7A0E409B4D5E17600E1E43F5EA1F884939C0AE467119F1E155676D10A8A35955
BADB667DB10180DF404F43A166E2E533F1C050D35CE4AEE92C35EE391398EFCF
E19EDE2E31F837DF86F1800F59C89EF6401112AB73434A3938E1970D8EA3CD40
C7B8FB44205899626FBC269C25478E0A63F78F3460EDD4F64B4D2A5B3E660B64
D293F803C670E243F0B0EB1C548746C08C7F4FAC0D4A7FD8B7369AED2AE9A79C
74C0FF0E0B0C1AD3B59BEF79753FDA3E929B52F207382364B1C62AE8311C4337
297E030CC0CE93ADB4E2FEB60E28FF6D4AF0010D422AFC137F2254FFF6C2929F
CB76A235705EC088049C1F1B0E78FD2D357BBBFB0E12CD481F96252AB7402213
DF9BB4464515CCEA5FE4C0CF761E921D7D2992EB24625547D54E3F2C644ABABB
47914DF3ED2C719753BB1EED9C435F2D571BEBA4F76A0AD5DFDBA6EC952A4F37
948B63263FA4097587802F6C66C3BC6E9DF45A22A24877E4A4499697D46B779C
8609E85E4BCFE84319532B3AC9D62BD413CC127C8DAEBC28D7DE5CB57A30F23A
2859902409CD4FF43EF6A99E9FFA2DB4113C12AB9C616F074276C4840A546A73
0D24D8518117AD200014839545B1078F38D7284FBFC473C510CA28AB90147613
F0EBC94C3EA0001043705336F16E783FDADA674B361F951D5152C0011FE0BEAE
51286E4979DACD3F5A953BD9E918D5E46449525A4A597FF0F091B2B4794752D7
EE5D9B94524DF768ADA1377760AB1ACE2D780F5624CF53DE046A36EFB35B52F0
566623440D7F364C4030648BC39783FD7AE189510DB572D01093BC4C7EE0C09F
389FF828AA7585F9B7FAFA718DAF925AA837B8C0B647161E5C322CA820521400
5D234795C9DC1354D1C0E5ABC997C64F3C84D2C3B7581BC9566EB6D012B6B784
F740B8E0B360808C984DEC73EF57328A2347BC752EB0EFF7BE8B688A3622826E
C83CC42DCA4A26C504AB95C5232A86199FC1295D8BC52BBA9C5089A346CC5760
009233FDE0B38CD4EC1D07A9F817ADBD1AA6D303AAF94D5FA688675B55D40FA4
3C6D97741D9FE4C964FC6D24A091A75B5745DFEEF5C1162900B5F1EF59402CD5
E4D0C3953C9493D87F46CE4E9C7A543364A9B82B34154924F4739C650A8EF8D2
38C73BD6689A0657D8427446E44E2F5C77937234D1D6AFCA63944D3FE5126940
8ADA00FF11BFB205B9A42EC1F50B435E4D44E14E22056FEA071D0061F16D8879
6C4BA0C670D0E715ED9333A0FBBD15F19CBCE5F93259A6C4A8CAD50B9186BF14
62D3AE2AAEA8A45E9A29BBCF83E95F0C65B2D60169538EDFAAB935FE3468186E
CD90E2F15FDBB395191E6C4659910683768F80764D94FE8A746FD06C08F15F97
3A528084C73A3416B7D9498707C04E9115D411FD74AD771B5973E6D0A573A1FD
2E01CB1197990EDF8444CC83F1AF789DCE5C7F64567C9D80D1829D7FE5F45647
ED6B99C6D96B728840A77AAB12DF037473065B62E9F3775CAEDAD9508FA92283
6FAA01D50CBB9B12B543AF2A86A99F4D544B8974F01B52945FC6ABCF3ECD8410
335AE6CAAA4F740EFA8AE1742B115F4FA7FD8E330D0B86B191FF5B038A5D0C32
91053A42460468F6A1700953700663A85229385FB9BC726979DE858914A95826
CB2A8F0F17773C8DC86EDDB610CA36C8A6051774DAD79E4E3DD10CA06A919430
0B6FF769550AD34A047DDF4DCAD48C79C13C76BDB9A98E254804C9126F6A007A
D697659D0F4B9B7BE0BE1E74DE179CA649DEDD316A452509D2804B5BE0F6C5C6
EF94B0FC821BF1E02C91C149EBC163C14366CDBF3C81F57A352355320AB4F3E3
A84E4B60EC6CF57A1A00F90F224190D7BFAFF83C13AF40E46F7154198D7BC2C6
F10586634E82705468F167630971BC01DC641766DC254D9E9B06BD62DEAA105F
CD48375C11A3207B5A381FF8E1C163001513CC382BDC172026981E9CD05FD8DD
83503D108FA0BF72ECFAAADAFEE78E1D8D2B9E94AF57AE0A20570A74D0C84155
353C360C86120BE8A6A2B0C9D6550784FB8929369CA329F6A6D89A7066E845EA
FE223A6D26B84EE6B6ADF0D9950A195F64FD3209C6D47B46B7708F855E501D4F
6F9B939EE1663FD02D1E1D74F22C4DA4143A4D523E32A0A371A51F64CDC4E06F
544F2055F67F0ACD4E9D99C47877168E8977CDA919CA86D82794F04E7E98644D
98246CC6E5F85E045FE750DA4A9B403FD293CC436888B75949007FB2D0557A88
D362014EDFD3445233A03A005D3F670E67B8FE790851B16E71241433FEA5650A
3908D0B0BD195F64242395E6C807B7D00E12CC9CA711980842040899809A443C
00042C681FE3F9BBDDA09127551CC4780E971D3952648BE3ACB42BEC6D5B5DA0
CAF19D34A8BD8E904BBB589CA901E79BBDB311C102F70F1D2FE7EB3609B14BBF
10E66264FD1E6EAE175987CC0DE53E3799F86A71F96165AA3EFB39B7B13C5FCC
011F38E349AF6FB76AC51841B39F02662AF720242D74012508F26C7003A39A3D
65A8CE04E1583229836D0DD8CA390CFD14E80FC0417C7EA00C3BF24A9F25D40F
4D6755FDDF7FC12E90F2281180BDD1263A9AEDB29E4CEDC083E9A8818E4F0C86
5FCD780F40BED45ACF63A6B1CEC1CBCA4B0B8145DD941B8766A1D28C0EBF9178
9E2B42D978A47B6B18BF0134F12CB398D097D7FC83EAF094FB08A17E36051178
8A42A3D87ECC5243915C0BA12EC2F8AD6305A2F219F870D6A1811AD7326AE12B
896F411E09C15B0506D1F805511965AC7FBF7EF0A2AE13FBDCC2812207A6503E
B00435B0B6EF5E5E1F853052970408E1B96714C7B1D4F806F889EBE1F2ADB31C
432B7A6B88F7B26F555A751CBAF82B795CD0F1BCE51275AA635695BD883B2F6B
22C897D136C06546E80EEBD1B06127A7E7797B41DBCCE9E48F09ABAD8E116038
BEB06DC30ED8E89BBDFE4480A36CD4F92F872474D1DF235DE89D464EF44F2C92
97ECBF2840EC61A315630066630D8595A47913D246893E3D1682833519113716
D1DAC8CE1540946D3EA0CEAC72D968371521CEE81C167C0322F52C3B92C29F8F
D050130FF7C7D8E436ECA4E5227FA99FBA99942BD86CE4B46FF5C69BABCA7859
A876DA0B21819E209EFB5641184DAEAFF3FC3E99ECFA3D1376C47B399F2136B6
E9A563BB6CF6EE049BC3790CCB1FFAFF2326B40E27E034DC75E7E797B53DEB54
9C6D3C6DE98769691F9CE7ADA0F5D6C1AB83B98945A1FB9CE7E2D42213218F2A
CBB2F5361C86BECDAEEEC705F1F1DC687857D57A34CABDBE4B0D8667BF0FE54A
8E67BE8E0E51D90F63043196BAA257EDDD055A37FC3D5A6F2AC7D97350CEDE8D
8720A80DB951D1D9FAC8ED3EF4D4B03D5D15AF4C6B62C52FE635D7DBE1DEBA46
03B10AF1715EA3418AA997C16C2988EF7E0148A1DF74DA038B947205ABECE765
A6F5C39C5A27A1661D9C192421E79A5C0E3632C09A62F2A89E84964B2B68602D
92E9EFF00404DD0A2AED5D5C4A91CCC4E24C50984C346A441E0D4C268DD363A3
82E750152A94A0A0DABC97B4B2A944138C5413B08F8B757A68BFC53ADF8F88D7
F4844A8FA4414EF339406E166CD727639D26DD574C550AA3864CAD2FE404C29C
FCB9F734AC514A3B200ED1151418051744E40FB9C87F5F56E3EA0BB5CE010201
005AD0317780B06EF63A07D938C2D114FA43CE0B06A5B8FB130A3936C4504264
CFF299997BDAE4EF14F9E60E487517C8ECCA81ED1DCF6536EA8AEEA67912F19E
B02D56869F7EBC6A93EEBAC763AF4A2556E76F11E21940DED1DD6815946798BA
56470026735A1C33E62D7A8D23C21F63B4642608AD851A31DB1359721319B911
DB91692758F1907EC08F5E8ADB0E9A092174032BB57DF31DAABB7DE1EBAE20A3
8DC804C230E228574DF9E9896FE3FF392A00DEE04E3156C97F8C103897DF3058
6958C707F0205C3F9872476833B252DE228173010F59376FB1AEB72D08E929E1
630A7750DE134C6DA77B5CEBF5D03BBC3C2FAA19D4E7C58231807317CC077DFB
EB40EF57CD4DDFFCE7B9035E2CE43776643E402FCA886F5949790A7E4B850B6B
8E31EC18B7321E63AED47752547DC27269C1904CB0CD0160136BEE30A0B65D10
BF4D7CC2F28CC4EFE8A891B2A31968694C04BAA55BF3CFF37AA1D0570FF3D683
011C315D6B938837DF75D2AEC19BC7C0F4C7A421734301813921B971F6B6E7B4
1F58302FA1254A1FE3C44528AFF1B6638CAF87F553DF1F0A84DC8BBD23B356B7
A1488750A4D98DD7966737111A6B79BEF479A567BAB3764282DA78B388D27A6D
EC10E1B914D4201B9A4B4971ADB498B74F8F86EE5D21DBD34CDD4E03E5A41ADC
0636AFFA3A9031A7D52AD383ADEFECE76669BF76C5EE35D36E883E3362E8151A
38AD6FA6A56560228EF0C0B8703123FB2153DED6B9D4555BE6678F63311F130D
EA693AD05F6FCAAE4BFC1F60C355698E356465F57F984176061723F228A13B73
04F3254E39EC3E810060742A7B748BAD4C7AC5DE779115C57BF3DC3E66A13B29
3409C469920A5E60BE73C36611705DF0DE76780DC2934C4287B17F5613AF6A08
21CF81AA3BD93F1BE08D614D0CAB75DC0396E0802ACCEF1ABA9A1CD9797E0562
5080815C62AA5706D772C8E0F2A3303895C92605AC43CEA7CA7D3C3A6403B9A7
675DC69ED861AA0478A60C98204C5747F1FC0A88D9E1C5058E00713382AA8099
89562C3BE6FA1B3C3155C4C2C9D9B6784C80119CB77D9C30A1FAB83995414E9D
3900926FA8087A61383E01E64D3344B5A6B6E1AF4FB0AB0CE7F517E28F67D1FC
7629636842E7AD3ADC6C73336EEC461C81B8128C629EF0E86EAE03D5EC474E7C
E6AF8E5C9A33F4E490CCF8636921014C5E850C6ACF3DD244C32A9E4618FF40C4
90B27180A053D6567A2F0F53E5FEDB788C961BC74FFAE2E26DC36958C619EE29
BCD29A724AE4024D5B5A6A25612F7378744512C5BB5DB4DE1CA9064368A00D89
E04C07B80303E089204A1ED054FAEB7C41A0858354B42706AECDD9AEA1AABCC7
00A5D6C5B7D1CEBCF30EE34E39143E5676CA9EB5A3147745E7DDE2364F639260
77121FAD39A304CB7BD67738778C600E9F7FFF00B5B895884BFBC020895A26A3
8AE6A350169601AF4CCD120E7C16E6B195372FAE49A9212103B3BC5F55E235A9
0201A826568CF2C21EE1C54D4CE496E97C50334C156FDD2F9219C86854E96B7B
C3A5B87E38409DA085A2924AFA002FA83DD86D63E9FF50B21ACE4ABFBFA159B0
7ED5C93D976CCAD20691B072DA28B696A9284A1DAB3BB85A734B583B3E2E7960
9CAC4A2A0D12DD59CC296BD8D69AE3E4FA2CD789ABE07054E39695AF6B99D5ED
BE2499BF00ECB6C5C0F3CB6F2433FA5BFCB2320F6AD8E6CFB0D2666679C13A65
E1D6872B1873FB09BD48225E110640A81C7C151D784EF671B66930A143948E27
E1F2FA81FE54BE6C57EF8C2B2E460F086265E1AF2573482AFDDA9F1D252FCF3D
CCDCB3A72541318543A028C9C9DCBFE53223D096351D214B3DC904C32A71036D
0A741AC388F04B00DE2653B18C99512BDA16157E02FC97731F1B39A4924822B5
265773A5E86A17A4185EEEC3C4AC7AA8B27CFF05C5E768115C104826CC10BC78
22701F493A3471A97B87D1E05B7A9A4375CEB76B0F1827AD916E268A701EE540
4CF3ADD7D79A33AFD79FA05F287659B8D7B2924AF04D875E139FEBB73B10C153
AA656370D0A0C5489848C5FCEE650ADC55C703E9AB03C4C817DEF45CDE086413
5B202DBF7983071104BEC1B29A1DEA1E99918B82D8BBDB1DCFE65325453720F0
2A01A0A015630066630D8595A47913D246893E3D168283351E1A7D6609D033D8
0A82CC481EAD70AADE0E2676CAC461FE45040B5255F62BD2B6A93C68B79E9026
102990E062B5B058542C45F05748B1A1A133EC7DFFCC255E05EB66D60ABA9EFE
F377E49B7A134356A0994785F9078D1B8B97E8E73F801263DB7DC7EBCDD9B3D8
4D1CD5BE08DB019DB26819ED22A9E83B7C851AAC3FB59E4C7FCDCD4BE50BEC9A
4878ED27E515FED0D26FEEE69602B2BD58D145143D2FC60563D081F110CBB181
C03581AE7F5CFB6E2B1E4009215DEEF49B959AE6CB67471140028BDB77F8E0D4
EE0B2C0AE9D1AF457BA4830AF3BC5AC25B6E250D2CBC6847C10CDE73950A2DBF
81F7C3B10A749A1436FEB673921A195027DB020897E28DA4C2E24AC43738F842
045A04919A108CCF28ADD9B2582CF6C3178700E56D15B63611A51C51B31574B2
FA8A71BA89DC8F6F167C7C0336FFE6DC170CBF5F561E004C322217D2A01680D7
EC23747CA7156E5CE91FBD5F44F0E247D957956045B1613112CCBB7091B33FEE
92536D6EAC29F1F7D265EA9CBFF5415AD85E4004694D39E05F5E2AEE30F76D51
A3CF5FD037153F66F8765090E7AAE59D8053AE0BA8DB3BCB2AC0437FD14A2941
15CB01446379D93A84DA7DDE692830CEEDBB812E26126498DF01A8B4E7DF01CA
E49DE944C25FE5771EAA9AEB426146DBAF38651053E5EAE46AF5F5F19491F679
C2F3F3CC8C5E5189F8C986AB3EE576DA9DF54E80CCF9A71394B4BFA8CED0C416
64DF7B5BBB015C15EA34DB8B90F2ED9FFD88F15A1BAE76C6EEFC79C130434BDB
9F865580E510F180C63CD039D399B1D9C4208BDE9841363695AD2F8B3922A609
7DA81E6A3D4B3F340503E6D9DAF82EBA11D53BEB168DAA474049FA840261F7A8
A976812A938FF436B01AB54EE1CE32BA926E34A8F8C31D8643EF6B051FBBA7EA
E4D5967EC3646F547C1BB5DC530423DD7C44A82B622327EA30ECA42B8CB89314
E8AE0CC7634258E1A49C6B865B75EAA21C02F7007978FF715B59DB48A55F4E05
03D39165A53031425C5E1F37426ADB7B3FFA6D2412BFB5783DB3C0F6D60E34BE
594B65D76CDAE5693B2E8739D9BD57A4D67E09514EB3A1D2DCF490DC1EB5FC03
C43BE397E8115F3A0C322EFE02904D82B3032B82E7C310D4934710441F46312E
AC995D35324DEB1A832126F491688AB4FFC28B25F44AEF8261BB77AFE63D26EF
D97218971819C58624089FE39F416FB3FC681F6312B9BC458258383E94966CDA
9AAB97986B5C9091DCB1F9B280BE8D374A8D48A10B2713DFD32DEABA293EE9A1
77F5C40F7C7768A67B861D5FC2887F1635AACF2785AA6A7EC9D666970F39E1F0
1522BF2FCB6B28C527C32DA580A7A619EA936D0B6239F72579B0E99370DA9C9A
EC6822571F3B782893E1631735FC7FEF8384AEA8C2273268144A010CABC53339
E8CDF172B872311C783A8F2BED76B849B93DD14AC40A4E4226F5ECD3DAEA01CB
2604024F955DC5CE4093E2F1A817C538EA4F64E96C20699C8A54F090F212398D
1FA9D5FF8CBDDFAFCA66543CFB72EEF26CC3F3561B1CA13FDB336BD4F041E9FE
46C75BA73BFF8D88C56FFA843B1EF3AACA3FCEE17C7835239CD82463FB4A243F
8C74C0035ADA5BBCB0E724AFA0F51B8E2EDD6E0ED16D2ACFC90A1ED23A88CF1D
EE3F583DC78DFCE980BD40FB1344156DE7712A41673F44DA2E1E7D41DF6BA988
0AE784071E6B3E2101F0B663DE14DB1ABF8B7951914BF2E9C684E2C80951B24A
AACDF129B2BB843A35322415E37E745F1478DF48659E20919F519EC7B7BED843
F35548CFE3266DB0E088F48DBD44C379EFCF03E929E6C390138AA7A9BE8E9EA7
6D1DED1866D5010782042200B3914DB7477F4ACE3E01C310717FD8D10B05176B
2D990696B3D4677A6D2AED73403C90884F55AF936438B4F0B1E942537CD9A3C0
6DA77812BB4EE9929C9CEE82C265186552E9231CC55FAAC46EDA9984444FC750
9374E11C1651D0A365FAFC66389761F5436DA107749746B5118ED2297F5A7BEA
B0D625692F612266A93EF535C72093AAF178BF91230BFE3F36B8A0F98A0CC800
A501580CAF3478CC65C774E5244912470606D852A39CBBE5E41174596443BF7D
A121B8C73AFB3730AE0710CDBBD49719043C0432C014E7CC244189592FB944D4
03458FF43F071C38FEE3A811F2D67B799250CAF11120873098B5138445288FDB
AA54FF0F25A13DAD43232F7EE4D840B4362172F75AE64ACD2B72602D2A8F76E1
3CA240865F625827B5B14B93CBD317817EDCC1726036E156CDC649D036DA3DFD
DC31F576F64475E62FBF30074B701B39665F4BF41393BBF474A9CFA2EC28FEC1
3422167D2F49D7601A570BEA14B7C813C7EE435E6B39AA70A9F61CCC446F6FD2
D440F8B6F47E9C8E5C2929BDC7EE14F6D868464493DF45E9E560FB40476AD6E7
850D0E405AE6523DC0CBB3604025E1F18331E151718268DE4D626FADFD70DE44
B561BA1BD4626A01C282FEB8B53E2972147D9EBD179E3D9F1452AC0613F8DE36
1C46A55BAE9F54A1BCFE5626C854818C35B88DDEA6D3A49A83886DB260065E42
3B426EFCAD8639CB438AEF68DB0DF2F2FF138364824C7D41C3B93D9A5B6B2091
FB0F74E34F73B119BE0CBCB087ADD6D2804D2B798B301739E51DD451D8071BF1
B58C840313AC91D346479D38E0ECB73664581BA1552F680511B5FE3EA89500B8
23A0FA5A18321056A36750BC67D3CFBBE3A4B914ECDC45179F7225B6871B570E
BE05C9D95D8F947BD7D9F6D539E4754CD2C62F1790F8A442D94ED07F5F983965
896021A6B8466391813B9003AC9B950A22EE900DA9B2A80B9BFC4919F2483E98
68E0D59E613B99092C8C0FCD223E4499C14B7B552BDCEC37E745415462F2538D
A2D71EC332D6C13A8A7B92514B6CD803081AD247BD97FBE97DEC3941BE4A948B
3490EA861BD99423B56C2084510627CA5DA18A0F9447DEAC39141E4A8C8584A3
8E57441EEA00961DD0EDCEE6CE7F6AD035A435017F8EDC6CAB41EA6234C70FF6
EF6CA2A853FE0F76AB1ED5B97A1067B820BDDF5FC2AF9A36305E36C2A2DDC690
256D2085B52886DC399FE1D8CFA559C93999700F1189021D601510F9AC22E36F
01DF05AB58428703B5F8FCF7156859F14E61042D5A147F0A784F0C5A4E1934FB
A251CA55B73D7515D4048EA67AB4E1DD05CDD42DA117D5956FFE7111F53C8D8D
F395CE9A836EFFBC02B41CBE8D589CF50BA27804E8971CA26B393A98569E59FC
7A33A9F31B1198C6D9980B7C21ADAA911578E0CBDBC8FA2043BDEB19CBF070E5
82307367F5F9AC09ACDBCF4AACF533C80A39605C9702070CC252B957DFC1A97D
522C07B0F972DB969DB77637B6E22C2CAFC254B52413A107BF5B596BAF902B8D
63C8A18E045FAB03CDAA01086862BCEF11AF66D26B9A0D11530C6F70C1B6E7AF
8E11BA4798C1DD2EB7D4F9620F1C42678C956D013FB0402EF2F6C3B06EEAFF00
FE2602F07B88E183809095E88840F703E9BF997E8A6666919D00D517CE6D9C2B
C0DE6516B649A4DC292CA2AB1D7823261B7B7EE08A4211AD764B9A8D9CAA0D1D
E3106460BD438275B8B18D8D9B9D2227C7649133EC6A81002AE7A5918BD0EF50
FC3859C0CCD704BF425C64379E8F07D1B21CEAF609047DB5AB1D11EF4A587E56
9A48CB419390489F70CBB069CAE6BC5F117865AF3389F9B24A1D21A9CCBCC365
9E3AC8CA5DF66DDC7933F828D3CF9ABC2827A6200222621DEACC953EB5D4EE5C
195C81DEFFBE1E3A195EBF7787BFAFFD9A066C4CEAE0ED581BC5A9037A4D15F3
200B13F44F655AD6FC40955A3EE68C16EF312027D054C0D88996599333FDAEBA
AB30E04E3C78DAB918F9559C31EBE12912B39338A6BD32CEDD4E8A51C229D309
11AC105F799840538DFC9B186642C1FA978B5AE2733334BB5EC0151CDDBD053D
D22218B8B0B71E60CCC50CDD5C6DE465C7932B3C509D3B02172583CE1449920F
9A073DEE6F9E6A6A1DB9213C2142AEEA0B692ACA1E819ABF89C01007F28C5A80
F4BD3C2C515EB5BE01853F7F1EA8A3815901DA3DF606E424677807FED4146096
85E975670E68DB88850EF4DD9314C0FEA2661CF8688C3D53F22AA0E1A26B1F9A
C6202BEA5AD2C4142CA7D8CB954B8D0C0C2BE2CB8DE317F7C1449E4F6C8AE7D6
7AEE9BE9CD45EA51767A0C5ED8C8CB4191E950DBCCD311A20B14B4177092A52E
3F29539FB7F8E16596FFD4151B332C718B173132660B0ACCF1CA0A25AB10E00E
4D5A8D0C3299FD3777981C789FD4BBE40DF2F03232480D73FE00AF577494DA7A
B6FB78D744C9ABFCD095A12C405F561BD9FBC456DAD7FC9C900C91E6DF15400F
35F789CD093396F0E34A66267EAD315CAA69F4DB314DC26ED5B60252DD152E0A
11AB38A0C98C9BB1216EDA7BC3094324CEA4FD5A9518236B742F3579E050C9FE
A8E1EF4F3252FD330D163CF0F35CAFC0D61E05B8B32000D4F6A0D9B74E591BAD
A348BC61386E71104202FB3F677DC4F398E82228CEB92CE0B5E695D536274984
B73FD1A0039F86E8489003F84951DB86742C3EF61F720CE7F7788599AAF3FF46
CE5AFDA1081D3E544F7F4FE29CE4952D5E50B1AB34F96DB9F031C7920CEC9A16
4C369C237DD28FC4BE2843036E872B2A04C4C2DDD09A780E3211EFB72BC5B2CF
545D57AB4B9C46F8379EDE9399E5B127D646FAB0A8612DCA1CC8DA7A3C5E33BB
337D4E9D38D33E46E3F79F2BC92D811CC6DAB2EA0636869186AA71F0C1ADF3AA
8290123A8B67E6AE0C769A5E8CE27B8C4B6E8B4F056867F1C0B014E2B65B58FF
1D647BA03560E06391BDE9A02514DB9B144641A5B2548D2909144C30A00A6E01
0B4220EBFA66EF79E0BFA03358E9F753AA892BD9A7AD14F509BA49C6320EFB42
1B3B10694FDED4B3EDBE4FE9C3DFFA5E45C08D537491AE24293BE475B6AFA056
DD3F3F525DA26365A2DF7F72CA78CAC785BBDD2D86B42FF91FCE7E06435BB294
0232870251A35518DFB99CA7E44B6E03DABF8ABB73228AB478B849E58ED08010
8F18DB3ECC698AEA11E32B5F743B75E26E66A24209E1E34EAD17A0AC81EA7357
571737966E650CF2D73DBCB019395239FC111EC0ADA17A90C19A43D4206E2B15
F0ADF54FA750FDAF7121246123CFD3141C81FCC5C5305259AEBAF52AA9BCBBA8
C9636E63A0DC0690DCCC7AB8828C02B00920293556311878D421BCC9FFF72437
7740502EC30BB318289197B74B960686FA892002C19B3221F02826617596B585
5B28202F696BF41B341A01D47A5FFCC91ED4B7E13900CB00E970CAAABD5E3101
82F66B217FD6CC9B23CD9DBB08CE4B28C377375572C513E842F42BFBD3511F4A
DEB1E990D07CD4D46A5703E09CDA5B195BF1CC49F81022023B083A73BEB9A932
238BE4D2DBFC52FB6837D0AF6FFC27B43A9CFA3F57E9478D3251ACCC0EA722FC
9DCF37794E7186404D252F9A0289664EA62E732C4BD3A421E8F13A717538E21C
8554823E5377C82C08CED9509AF593CBCB7B0B261E24DFD30C40B6D35742A408
FA77154EB77D6F52481690604E0614F792804C8C32AF13165D47FEF1D6AA9194
0F93EB95905F74956D7C9B33DF636E35011FF6D197C9B8FA15F1F8FAC9AAB396
62E6D137560A8363F8D0B481C71ECCBF5D498496818C244467171449C73BABBA
B53F4CDB1197769BEAF49D19F0841D5E8EC7CCEAA4D28DDB3E14935B8CE43228
548E00800DE1B6C627488ECE138724E2C9BDD46FADABA26B5433D34C2AEB0760
31841EA02BD6006B6DA2CA24E020A0FDDCC0498D74594AE3ACB0EC7104EA49C7
DA55875A3CCD94F522EDFCAE0CBDD9C92A04E49DF56331E837562DDFD2B9A20C
64458327A48F3351EE3B21017973B3B0C45734AF5241C5ADA1387512EFB6528D
36CD1DCE4AB6E7671F4276E6CBC2A4EBA4E6ABD17B534BD65EDDA5B466A2B687
F0998FC59BE4B93F43805FE0EB7A4A5B00AB550C451413A237842D91C888C4F7
6414E6C277543D4AA0D04B945257A16BA754214E9256E95A6B429C3E4C9366A0
32CDDA2F0B0340F42BAC73E5382A5F9CD71974101F6C389CABC69B231B033132
6254BFB119C6057DBFC2B0085C818FDDA774EBDBE7A957E1602DE3DA6F20B595
7F6F748928F9156100AF21730FDF1AE10EF475F585B2E615996C11BDC84BD9EA
252474D8F9450FC341D125DA3A11FF534B375CDE3CA6DD714223D35D69FB6BB5
17B593AE025E7DB76E3B3E083DD36D72F6A3B64826CD95F02199EFFCF454A40A
C29D2907B15F8C6AF233C3C2792A42338D892C8E1C2DAB56438F1FBD0E63A5EC
278081506796D4A5CE91258B1C760B7B254B34AE37084F9F621C590DC9F91688
A7F5806B6D1EC164588C020522D7263EAA89B3ABF870834A682AB8809F82277E
FC2083F279926A360E4B995EDD16A401B12A1C0D488AF24BC0B83C2D2429E576
E97C39D2034E884EB9BF9BFA200E8DDCA68FC9E9478D07F4C6EAF1D37D624314
BA2AD28316C66821F40E54E6F57FE832B12306953241F8F05D06EF7BE0D60FD9
96223903C9A02FB433E08EDE786CFC2B617CFE4D6E5B4077B438642E42F89BD4
36AEC67146942DAFE5DDFAD97B5EE4B04E0B479D31CB771B40D48806F82B4B5A
A65A7A9B6E99FED552EEA2F20D725EB5F1A1B135B5E5097E60AFDF729A535E05
1501D8107244C8E2C33EA2B27F97F5F7C5CD526CED2DF28AF1814B5845898D29
7A6A791205A854F67B54A58AC1D5D57F0DEA2E45DFC9822A4CB5B59E51E6B799
03D29C1C63A7964CE23DD2F5563D5AC32CCA4ECB7E39D3C74723A53E54044AA6
A13F05A35BA44A62A5EDC245455943A3DFE5422C5E45E5D0CD32FF862402772B
16F6E7154C570048AD99925459B26B502DCDFF0B2514EEA06C4D3BE4D8D2EFBB
235EFEFC8FE8B2D6281A9F1C30D13BBBD899E1113DB8E9E10BBE2AAAF759287C
6F4150C4774423E8C99C28166E5FC3BCE52C13E22A5EE09FF45F2D070A7FF539
1AA9BB2001FF87704706D141BC860829C1FC5AB7FD0E50294C91E426F122286E
F473301DA3F5C5D300555AAC9230CEB38F253DB2EAA39E117FFE2DA4B5BE5CFF
577D6C74AE6F4D4B7A8DB95D4EDA28EEB20379720A63410EB5D2002E8CF0F39D
7094BCE56AE1BCE92DAC62D3598383DB8D4DB63469F4F9D4F864F2647FF8CFF8
5EBBB824A30934AAD5CFCB62FF4F466036F3F5111659D786B736DFDB83A3BC01
21D26CA63BF32BF1F74754EECD2BBE87A47BF0515D7D3B663977BDB26DFE4C56
77613BEA94BA003BD1A1872141DE6FF4845014B6379A7F72F1879084AFAF4B3F
3547D36E0DA51E215709FF69322D42C893A30F323D86B14136429634E4766722
F56E044B37BC6D86BA94DFDA70174FD46DA36BEAC07DF24404E050CDB6C3D32D
6F564D07D976715AB3D87BA81F0E2E8EA0BF2233216893874A165F2B6E7741D3
8093834D9D811F3A0088BF4A51CD46FFAC1019EEBEF540640ADF732D0F3522AE
F915CA80D725B3C0CA9868A1B4B066C40F22F2334343E31088B70455187E7D3B
4AF9FE320D0AEA175BE61D1F70DE598FD38A699B6F5D12FA5ADF74710D819985
09EAD1538B030F0A233F36DDC03EF644B5B47DACE807262DE2A2171114A3F53E
9A4C8A796E104EC899AC0F12E393636865CC9C001359DF6DF52D943BC285B007
D1135D873544558F0F8E5884AAF083013AC5189718CA0E705F28AE618979AD6D
FC8C619CE8FE1EEE3B9FE2203DC6C75B24F311C2DB10CADE05ACBC6787BB5EA4
65FF0CFACD9BD4952B1BF319283A82E3B86F6FA538D46C3153553EBCBC846F54
76BE47AD79B88BD1B66C5C3736A07B54B45D90397C528785F331E02AA401E30A
909608E8C4C56CA2EA0227E9CF217F7B9B18573B6CBD958A80FA14221F9AC801
9C02439875EF9252089FEAD3867827760F7091469819011F0D8CD5BB65171F3A
F111E2722605554A46271D347D34E388FAC6474970914857919926E5A42548B9
D6947B9DDF1521604BE019A51F8FEAA74DD627CF29E7A7B831DA95F37929EE55
B032A5FBFE5991BAC2556AE99E8E6EBE5FCE6EDADB8A3512329E3473F6983DF6
D128238448E490FA6577D5C87A08B6F333E1C2EEABC20A070B16517E9CCA690F
A83F7A9EB23119348D2C82A64066B7D5FC1BC8E178BCCA13CF4B051873F5F594
C2B31CC6F28BE81E6F8A564E5588C1B3C26A19F6D5C847C84253F2BA71A443AC
ADEE13915C5CA44FF41CCC2BB9ABB47FDE6E5DEAE9A270823267DCAF70D85D56
D17D89DCCBAB7A072F2FAAA02E4DA5335ECFFCAD74D10C98256868B4640BB5EB
9820A92F8C86B98A36AB956ECE9F5C56207134A77B3595FB04365CD4B4A5FF21
6BD8534C4ED6F449EA18F91495B2061F5F4BE3B7C96614710AE128438AFFB0DA
3B12ED78B7415374AD07575B2A05E4D3E10656D67C80E571122518F8DEE14A3B
B7EA013687ED3699AC7410FADA85257EB6A2C747CF7113878FC1B09472961378
81A09F34C3BD62E7C817927188ADF629BD83579B2C564CC5455223EED0991381
BBF102A5FFE96F8C6321EBF1C106D0DF5B7963E6EC917BC6FE271EE6C23FBF53
2ADEE6A97DD142F7D6039F6115845E21FB2D04A6E73B21EF6C45A11F980F96B2
0047C27BCC7AE4EED9C98A5C5AB82C733A7BA0BCF7739D813518451BBF41F9D9
F03F14667266F4313B22F08E3A8EF4616E1DEC7474C77A194EB2B6B93DE74DCE
B453B81ECB10C374FF4838B81829312A1F361B1721FAE4B1884FC4CBC15DE7E7
64671E5A5F3E4C498F5BF6FC74B2621802B29CA16DBAD0A2BF9A151AF7944D4F
17D6CBB30775DC75B1276EABA9C364A37169F4D6A8A3FA69E0FD82A04759D416
1521BF6739131AAC97C6853B6818DD0CDAAAD67F1C43F8454EA7BABEA8C3C7C0
21CFA4F3D09D178C737025193E2ABFC8962C812053AC9804C898AEE1CA2D6ED5
112A7E67D718A1691F6A9C14D72CD8AEFDD97BD87B20D735CE102C0F60A9D44B
FF14AF8686C54268E19962B62E2588EB6581FD0F073897FA49BF0BBB413EA850
A2EDBFD395F2A6CF1E84500A5FE0DD7105FB8A840D893F79F3230443D11313D6
EBB9369563DA22017B7DAC52EDDEC46158F508D7AB7F99ADD591D74570264C50
98160CC644902847637FBD2E1DA05DDF0EBFE7C4F91333D6CD3899778644A336
17B7649224EC694524503DB75CFA310263EDD27D32D83A216241DE6177BEF5FA
A263C6B723AE4E5B34B405A0A13E318FE50488A28ED7C459E375FDB205B8CE97
B2E416A8809BC44C7C32CB44B0934372C0717C1A9A37719070DB1E340FB83606
C1E03028539338323F06B3AF9DDF627537F713FBE0610D8A1D644FBF257E8C92
5FF8F244F361E78960E765F8D8ECCBD1FA9E023AF7227342283FB0D175888DB7
D4D3B801F1D8C20804D0BD5A355BD413124FA95DC8FE9E2ACF4EB2C17357D4E1
15CF13487F83C49AD96E12EB7586C7F617FB824FC072B203F4F59BE1AD936670
1F2583D92E7074356E75788B2AC966CF6AF6E8408A0C0C8092C88042C30A58B2
473A333E603F36F68AEFEF88DFA0604C5BF95DBE48FE4DA1BB5D3B1B4DA14545
68CE42BD30E6CAEAEE832EAA7D5B6BB5D9D2D263B0C712FEBFDC91055C9EEFC1
BEDE9E9906F6A6A27D431B5958314A5B7FA41132C9B8909578414D8DA21FA3AE
B4AFA2DE7E820EFEE246506B981C4C25D9FB5C08D065EB272EEEAB9EF15EF483
2B592CBC9809C6CFD90AFB12DB06411FBD3D4A4E33DC86FE535B622BE278FD6D
3860CBEDDC58F13AD1A0A2A6935CE12185CB355AAED83ED30E2ED1D233080C8D
C7A4E23C0F133241F066096999887AD4D12DDB9B00B8F6C133C983A7ECD803D1
2B728D604E2276DA78789470992AAAF45866D8D63736A1E7496C76AE7950F6A7
9C0C1170D43551EB9F0C85FA334F1E1229C67D5BBE7B55C4BA6A3205AC2EC474
398195C8B4556A8BBB048645920EC84462A1C4A7008885277DF6688E3873FBC7
A23B9720A901AD98606C248E4453D8EBADC19FEC33DD69ADF9BB7D563DE61A20
F562A533EAE00D0061D269A3CE4CC9C2B2F371B1559D8BEB245FFAA7955250F0
8E8F5F5040277F5C32166AB539082917BFF7EF652D589681C2346AFF7DC04EF4
0B1690BA902B26EF0FEEA4D008B69B21EBC9B79A044D0074F36E773AE887DDE8
05528C272894E50B5916E65AB744B6FD259CC8D48D85F6692F098CAA6094308D
C00DE7254DC9D6511D316FDFE7C4E523A5753A0458269D67C83EA6B9F5351815
E66185FEEF6C77E104BC068A00B757D6F9DCA2AE54088311ED782D682DCFCA1D
C0B686ACA441E316ED0CB3CCB6ECBBD05FB82050C8538380292E97BE26B58198
799A1D91F52BBF703A92F4778AFDC33C0B57B8121AD86C5620623B98752E1F56
FE42DFE14CB390C69AAF35C89B103DF5666EE9AE00CAE70CB44DC84256134A55
480B519A066B8716B4C88A445F9B599829376AB867F43B2F6320B331A6EA21B5
1B00653FCED702FA11B262ECE3D4DB52F38098A03B11EEF24925246D8BE271D6
5F3C028D630522F6FCA9A69984912BF5BB02ECCC44A5DE3F200072E6CE16B421
FE7096806CA960ADE0663431603335A8DD49D99E769BD73852FD9B23AF2E0879
C58516AC14F250F1A329FAB54F5315390B4B9EEC298FF23590730BEC61ED49BD
EF56662CC92B9B1531279F61DA43B1A2A5CF91105E58DF43B5D0036385739DE0
18177CDBDC528E02E2DB1D249256E80136FC36AE508B99B7CF3B97EE41468389
7A495F88565BA6C75C0AE7972C57A0BAA11AEEF6BC819027F403EBA7BAC4F8E2
B0B9FB06E184655B54E82FA19C6ECB9CF4F23E0494C3D498A7D3A42D0D06F379
237462636934DDF133B73D96E4A38C1576C9EE90FE9E0A9F5EC4928A31B8138E
0BA66535CE0BD22F0A312EFECCADDC8A013BEBF5849C20F6CF7E88A660686049
CE34E3D38D861DBF4B44A91DA0F946A77B1CEA2158DF6A4079D92B507EDDEDED
0D2276654682C61FCB9E7659E2B0A319D5E77A57BA9C9F190A23282E63CE45DF
7361876A760A4D5A7D58A46956A3A6A0486DF5FD63771F4A7654C8FDC3A533E4
4F41CC279F29D5BE130095D47619537388DFAED18DBB716F822B8074F0A80A2E
23211930F1C5D7F231365BE2C51E738AB576DC7ED250F98A9D54B9F2AF8132B8
E428CCFDA42635E08E449796673B540B41789B3DDD14A4167F184EBD03DE5881
2E489159ACCA2F8A11C5210AABCB55D2B9BE0986770FA787F267499DA09EB723
9641CFED8CA46B469E591AC1624923AE6DB8994DD4DB0D452EE6690A8CA2A75B
551ED33D19A1FBA979FF7BAB06B1AB21AC05103DBBB80E51BFC1904957E07C9D
70BC63616D3087C78682E2C9059DB1F04895DF000C2F81D492A9799B23B51C81
7731D7A36B38DE952F20E91B9F1FFF741056B0E064DA75C296A11ADF59C4919F
63C78F9B7C2FA998F5BEF9D1202EE155D8A4D4B9C26C903940F755381ACF661C
D4F14151CCA6B1E339DE260B1BBF233238D5111403754425B0E6E27D58BDBDF0
2AA83FC9C8C5076876ABF67E693DFAA3D467865B963C6CB6C2BAC0238F0A2AB3
DA276EB4FBEBF2CC7849276A1AAA5F1598EC7A9A573A79CCD5B6605B9711CF60
A04277EE7E0EB69D76392B84CF4115991A994238F3B603EA8489EF99E770EED7
8A968F1DC2D3FD1771072FF46EC2F7A7F271B49E919F88E75810608576B14415
1AC74059F3693891C175C8515E9FB2A5300397C551826A537FBE9B5F897B957C
DB27ABA4802F0E34E4EF041492ADB51EC95DF8E053F2DBB854C4BF36A564E8BF
9B7735371FE5A2F54624315981DB9E59213A11EA6D3F9D917B293DDCAEE45B17
1F5125E4C1B5EF7BF16528A90DE4DAEE9941D44D8D1E3A19399F13B93D9B53EA
F99A172E7C399C813547B1174FD1466D192A347B642D9FCC4741595796DF2CC2
7F95B1392326CFE1BDF905CBB70C2513F3E8A5A080D9ECE69F8E6598B835A0B9
38809753D88C3FF60A8C9D26CE00F152DEC98F89AF22A7CA1B93BF524CA5AF7D
1406F8A10CE2D1A392ECE3E3A5B5A4B80569D5BE04886842418EC67CF5DE99E9
A5C3D76B9E30D973C1E738DBC89B272A45E4A55AD2EAD722B31CC09EA4E22AFD
C4B35E149F7EB05AC2BCFE82D329D501153B18CB7C8DA45DD0F6707DC77BE488
A36A54D9DCEBE33F11D28E9670AE565FF9CA7C5AD3F494E59E191BF9A32E6E37
2DDBEE44AA952CA42668A93FC84298A55AFD3992503255CB46F8BFDF529A8153
C8A96379C955E7D0B8300605B9B8E5F686536D2C586421D462D8286E27002918
17C9199521DA6B008853A9233AB0689882BAE8EEFDFB3DE18403A6E9FF8767A3
C6F9DFB52CACE234A8AB7380993FECCDEDF261F9F4E5DF33D55934F6849598A8
62D08D531F526EE267EFED77AEC294C1580C3DD5D7DB9D579E0ABC08466DD6A2
8B95A611970044F0D6FFF7DA46A02F868921AF5438A780AA5094B9437176290E
D452EF15237FAE74B8D924E48E8EEA7BAB1F7EF9D23EC194EF733ED13919BA71
9C14D80A9BBE54DCCC08131990C9BFC196EF729BB5BF404B88E88E169AA5732C
D5420120EDA5F729B45BE307232F92731C10C3330672C95847725DABB0F94ABD
D9C681FE691EF3090EA8853E8A16000F39653238844F5D1F36E250DCCF75A58E
95F774F78CE855A8A32224F0C87186BD352E33A39C6E994BD8680985B40867FB
DFCFD3062E20E83FA69D9B4BA8A2016A92FF876C7FC5A1A8A411A597335E6BCB
62888AC8539B392BA14426D57006CDADE0409B1A248B52378E7ECCE82275C63A
8642C108D34C4CED6F7DBE80F25D75116BBDADE0CD58E8A717B266D35EEA7CE9
A86DF45930BE230E0C7EA558F50893E391398AB4EC04059368E01F0739ABE8F0
A30771EC0FEFE058B9944292ADF21511621F53D5456CA3997D0EDBD2BA7C8586
E942973B8ADC21BA304AB67C4785A7529ECEB3758E9DFD534CAC1AAF06A06E4D
412AC9740478F55C4D6DA862B50F90997989CE492D8845A2632AB6CFFF3022D1
FFC91F6F2C6B28808CEB9BD6E1B92835A599C58E9CB8EAE9A2064A6CD3A2BD1F
6014845AD9C5FA4A4247E469A15621739B6E1DB9F5128898748D5BA572D3FE12
89FBB4C85DDF72F5F6B01E30B2D9F129364FC2FD02F3F6970F6306B22213A308
C0C5BC567DEA4F5E9C816B706FD5796FC302D71E0211D42BA31EC40962365DC3
211967EEE2D1AC50EAB6A0858F98FA55863F42637E97F8985B6823BC95500AA1
711E0010118D3D4B9F546EC95BD8940EF1700A543708FD91D7ADE548F68AED89
F020568B818F514EA832662C580500C0575C9456AF6D69E941C9AD6125A56234
A96C6AD33F56C836B19D06A50091FEAF534CA528E5D88EFD8566893F56B2126B
F9B647BD0B993D5A426CCAA11CD55B67739B2771C6FA3A6ABE01F6B601D390E2
DC1104F91B54A06D57CA5ACB6815083489A14C8EAE44E172D358E005C55B6413
A69F71812C84055F651E11ECF25ADCFCD2CA43728C23891B3366152E7DA26D67
9ED4D87F89B2D3FF1A88AEC678B0EEA856CB690E4D9D6B4452C138A84B53712B
D7B6334E91E3DFC435B3374F45AF41AA09126CC46D6C604DF7E636F8B7401874
41B0D4749EDBFB35844F8CF727A38D8D2F11F69334F5BF921A7F042B0FD7B2E7
501F4929E800331DB317E25DFBD96403FB363F9CC07D0BE4C0F40C2709AFFC7A
33A9F31B1198C6D49268AB1E859F477973507027EE3270D95EC7BB9535B92C38
9EAC1935F8964877EA22D9E5D4256F3134B7F3A88A012D14EF1B8897DF2D4419
35A0C19E7D67C5807A4AAAB12466D474BBF5C4ECDE16AF0798D746221311D99F
7D0BF4133031D964DA80934BF959E970D45A7C8D3E256E388E9D13824FEE3345
1E83D800226155BC9D1A36F8429D7F1B2D22E3BD0A364F4AC9FE64C0836B09C6
744C11F79C6202E3372A2A58AAEA294648DB1347F42BAC7DD6C1F6C18B52DF7F
950CE1BDB15548CAD879752198F95C7F9A722117650C8F7ED57684A4CDF5D554
B1CB65A68E5255384A2C0EF7347C378B111AD792A90E38E1552763236557952E
53E9B9A49E49DF90A6AAE92EB1B2F3AB6D0404B5D4D40F80BCE763C27BB9B68F
8E8367991AA02FC9F9A45B3241BD9CC3EB1E8FEA788DB1C7EA3D873ED2ABBEBD
C37B3AFBB141634F0D84EB6821FC9B0C4B5EBAE3A5268BE5BB7602483A341A59
A1B95EA285C94FA8AD9F5823EA9497425941EC3A8C8B68673C2D1A2560CC92EE
9AFA29111A71BCFDDA20BCD6006B0309EF09261541158731A458EFDACBAA4839
7E97284B8A8C849D61CA1425765FA72E4176D1B9FE2AC37C8C0EC10FB99F32B4
AA99BE004C358FE71DD4239B8B1730244930052FCEE651C6A3A61C59E99D1B38
E65A28397F992408E3E8BC9A6736426C7859229DB42614A54EBFB4DC8097C0D9
B0F256630ED0ECBE9814BD19184B2C0F3B04B2D3ADE235821A784F22D35FB29B
08D5DE5830116064AD2EB0444194910446E4ADC661988A87F9A145C0A1EA53EB
5BAED6EFE5D929F582261D5EC4C6853F4410036DBB0570754DE8DA84348D2B1D
7674EB4AC4D983D762C563FFEAC27684B47D66DF1E02BF6E5037835363F06919
C447E40712BE8F81C67E8A16C560DBC074D05FA70840DA7FB81FB90A7CF5CF40
11000CA5542A08A0F20C570021CDB7C17293E6FB0B4C94CF8ECA32605DE7EFE0
584901EBAED4C8F5FCDE9F4E99FE38C168884355F9706AA705B36CD681F2C389
2F84ABB1C3FF845F4C4AA9343CBD4D7638FD6162295C7951690E26B983D61545
4CE25D66A8F150E6D2F1A265B49C1C5D9DBCD8BE04516A78B16D909468A13222
51B4C2F00B189BE27CD71CDF37A9AAEA4CC8EC3D2E5F3B2F55483835CCE59914
27B90C8CD0DAFAD0958C9C7A6A06602E80A3AE2449BA93D71BD82A12210C3084
C72E163F4ED442171AB36B5764F06EF4CF492E674B2237E6D232D25E41869E20
B580FD915B7E92F43633A853EEB93341B071C21F657AC08A0A85C7A5A426C5B3
8D4166028BE04BD1B2CD1894F9BEC1EC8B9693C41FB0A8AD528A7E5AEB994FE5
04A6B520B729C772E269ADC25181A42E65C3E1CFEC51A3D5D22F7D00B71F0113
B396D05D279B5A072102B7BF9C94CBE024BCE761B8B1E427F90B1C96B0B70CD8
21F598CE0A147CCCD9320D4CC1CDF50D3E9219F908054D638834F7C765F1B312
FF716E244C98CFA381A3A50BB937D3A60FCA2FF107CC1213DBFAD7043913B954
82033A27518E721EFA4326913B3972E0226869496C7C903453298F500E46BE9C
36A075CB2621BDD4CBCAD770BA2185CC2BB8DE8483A70423A0A080931B425226
BC949C320B476DD0AB7E6504867171949216E819A68C6C181FCBFE2BF364BE31
9AFE1E3594369163E8B9C2F2F23C0F2BF3992B4C132AF1FC9023A6D71AE29A65
09F8563E0AFDCB9362
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: wasy10
%!PS-AdobeFont-1.0: wasy10 001.000
%%CreationDate: Sun Mar 22 11:13:35 1998
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.002) readonly def
/Copyright (Metafont original (c) 1992 Ronald Waldi, Metafont curve conversion by Metafog (c) 1995 Richard Kinch.) readonly def
/Notice (Copyright 1998 Taco Hoekwater) readonly def
/FullName (wasy10) readonly def
/FamilyName (wasy10) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /wasy10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 52 /XBox put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox {-23 -1667 1720 881} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB02CB1AAE
36F1D7B67C605A37687A9C3F7067F07673039D1E3E1F5D9B09E6A389A55EBF12
06E72531469F768EDBC4DCCA572BD608C4BA8F7EC3E5BC61C6D949C94A843E69
0622F0AAEBF5CB25A2395DFF6342106C198751CF0B33691FC18800254AC54C04
02494A0E3670008E8BA57A3CD823BF47494F2EF9244421A8A0AED84D153D7201
BB12EE9478DF00CA573F64C2474817FF401EE94BACCA8AFC16E776665C3E1E31
89AEEC906A2B9F8974BEA7160C33F0AE7FB04B2666A5B16659D6DF66A688D80A
B531D9F866F21F15D55C6FE75A8787091359698E434EF9C129EED0427EB96787
B3F25C530E3664725C63D4C5DFF9D05CD13619FC41A001275A78C58F85FC7C4A
911CC31CB426231473202A698E5715B032D2206BB361EFCBFE3E32BC0C8D9BC1
353AAEC62EE632FC8FFFDCF6E7D928F562F689406CA00C11C7EAA723B62FFD2F
5F6343AF494085662CE2CE880B04F5589396EAAA8823DBCDE56D868B9E66BB8F
10EA91AF37D76A1BF27E69C2A2ED1D8B25434C0F205313ECB8A6E039093FFB32
983346BEC569B175529DAAD1FFEC1A9302918FC947C390A86C061AE0F6522D79
2D4FE06AE4FABA59F225D7ECE2EECD4BA1359DB18F8957F551C5D6F037F18545
CC6D03EB2DCCCFA294492ED72A737588457E5B18FA4CA0F6D6D8963CA35DFEDF
31A684FC0388D416D7BF6CD9837AD8692F284F24B80CF9F24DB10DAD0C4198BC
2D2A52D9F75CF6C52C7AE0D8D4598DB750E9CC97D0FD31EE8C598A2FF3745694
29DA808141AF4D8F8AA36D7DDCC3457D5E082B2BDF7EE060296721D44B092E70
3607B2335488925E41B22D659C8F0FFEE19A7C19547A147DB851262E47E9C4FB
0A8364BCBC1C77E29A1183EF185EF35B9A5B13170730ED52D5C52CCB460E7D37
F4F37F772794BEA0DA201C99C52F8AC2E4CE7FF33F6ACB796E55BA2372E3B035
52C4F57AB5C0BF828DC7E5A8F8F00ACE0120B99667816FAF5D736BCEBF7D45A5
79C9B5EAA32C9B672D764D2F51B2393ADC71A36AC0D5CA76F3F571D50CB4C1D7
CA77149B8F0C98198919DC43890A7D49B0A6C7268E399C6C68B6ACC0D1E9F5B2
931BAF9EEEA6ED985835323E85D72C6A607A99212BA2DDD24D57809EDE36890C
F8121121306593CBADA65AD9EDED7740C9A2F402E3908B54CB4AED249AE575AF
E64C76BA802490ABB489275E5A3F2B926955B0D961A0B9B3AE205C074AA695C8
68FC2F6997531FC328B8FC65BB06C17B212C8C06D5127A14D7989D24912D1CA2
1FF37457E65829B6E1C65A09C1A101047DF20ABCD57E067A7298091C88C4B587
84409C67D00F7D95FFA0D125FB938B5762D912E1C0E116AA0593B1231FDF3BB1
498BA3D20DF13C7EC6D40091B789C9FB7CC872BB73E6B9D4ED8A555CA31581CA
0F057B10C7A8CE1D7CDD4FE2D5332FC533158B8CE6CD3E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE505B8A69335E25F98573BFAC64A02542D3B835ABC68EE4F
0A1436DD48E963348F6F5650666F6BFF72D385A5FB67448213B032991B4970C5
79925CEFA92DDED5BE33EEE8275EEE83829329E11E4EB1E2E16669B21C3D36F1
FCA9535233B0BB982F75ACF33109F8AE7ADE4954D0B1E1802008B39E90FD6AD3
2DFBD4E8C89A9FA5772BD7C4CEA7C8F8272B4C34FD26058AA9E35E6DE5D8F2B1
B78BB131F06294B45300705B786BC0D0653933C657D716DCDE61AEAC6DBB9F5F
26C309EC6AA6E4BDF86680F4004C27DB20FEF95B0BE467B5B7F436B45DA8033A
3F755FBB8515426BB432CB6210B93F60C98D1DBC60E48CCFD9E1AC3BDDF3FB69
A81F2D36111B48751416C9EB562F65C3DB7A4AB69D26B5BF8D90B5758CD7435C
20A34F783A4273244DA0E4AB11C078B07BF2786AA78EC0527660082810DD4D12
583633A6CDA00B353267B2BE5B8178E6B7889A33771F86276E6F0FC729A9B845
FA4DB9CDCACCD1804B9444C284E42F73764E076EEE81285FBB3CCD86DBC5251D
2D38483567AD80CF22E61904C92A4FCD68F8C5389BC7B4DDB26033F03C778A1A
810DCD869D660DC33865B7E7C25820CBE0AC3DBD4F5A7BDBDA43B38A384C2DBF
592B0E0A571D8192A287F5074A8C012E6AD53C85A735816E815777D18C511AE5
913FD38C2705B78CD907457A5F085EF70FB8DAD2E73F158978ABC35805453F84
CC5EEC991A5CDC8C33DADDDF82939669A03C2A9AFA9544CC0C8E8B145BCD2D46
280FDDDFC1EE81028E13027F26BABF3AE38AF0FE01279F319172E380341CAAC7
984BF444AC5EABFAB89FBF8430C4611B33767D29F06AE02C06A97C3D5DBF67E4
84DCBC5B8D181BA465EBF86C3D7D138B055A428C37CBCCF98EE1D718F90E93CB
3C94F88A97391159BAD4859E93FF6606D8638B9BFFB686D38755E81022E93EA1
5B1E6A04AD728B8F79CAB93ABE0574741187B5232CAC56996E25BBD22AC89BE5
E9B32C980C4A2C304804EA5302AB9B8DCA59FE6A6101DE43689A7FECA219B8E8
B941BD463F90CC05E4AE5B431DC1906D518C7E0A8ED017AB69A6E25B87D4ABD7
9BEBCA44A15C17611213265FA53DFD55E8BEDD03B82AEE0E0947FD31FB3124CD
7E4335D5446AED656992C19B1ED6463C41363C82BD015D3F00644D679B9F1737
51F97E4A3BEB9FC064236B91AF718D8BDE7A8C12C6C681AFF32F6AEDCDF5D6DA
38E8BAC66DF8A95CE6F87C87D8F7DC8022381A120C3810B10C4CBFC038EF9616
A0122E9BCFB21F8DD3D93D9BEDDF522078FD18822E018CA5914D17AB36549ABA
24719ABD86EC73EDACD8859F4FF37FBAB4F152BEA7F1570E25CF256C69EC23F1
A4B769D2A0808708743E72D77EA65CA3B55AE72FEFA92DA8B15DABEA14AD8CA2
518CF4BC640CA3AF44EAAC3063B01A4BDDA27F4BDBA2AE3B78E1EF3651C6F6B7
83E42F99F258D84F1AA241478C468ADF204140B92B9B68F1576B185D9914A70D
CB5CE50CE4C21954EE119ECF7C85AECB31BF4BA8C3246757B10617F4AE586568
22D17D39B62830602DD891C98F29D5EFF1949455439FEDF36662571FD7EFA7E7
034C0BE89BF47C7D1DDDAF1A90967346BF5E2EACD32B401937B3E3CE22513197
48B1C4DDD4ADAAA2A71DEAE4DEE5642C8991
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4850EDCB990134F321F1FD6696F64BA101037918C9
F3EB2C616987CEAA46F6C052EB3FF6F2FB9A6F974915B82B6608CD85F75F0664
5644A5E3888713099F73E90FBC9681A6432D6944A68175A656D126AB96DEEC97
7DFB9A5ECCECE68B7C706A15EA93F5FA7800171D760667E1336DDDED349310D0
BB68B865F3E43C4275DFD82036752613F3FC722D561C0B5BA22C873A42C13AFF
73B7A9B8096208922179B7EDF55236F13203049ED2D3A304BEF0120285E9FBC3
921898A37465752B57535DF5054235CB5A713FDF779C161E40A8A8AD8074AABD
6A06EA11E40F1F4F4090C99D86095BE64A36FA8733362A8D4A2273879968020D
41EAA7F6C1A9B682B344B7DC94AAEDADFD1BD39385A57F9383AA235717AF84AF
BF5D808D32071618FA11E2F7907B9626CA16609BFEE67DB56CFE2E2B90BED39B
54D866320877A767FE000D8A3386EB1AEB2D99809C71C946EB77ED556CD01675
A5D45FC8BD04EAF80C756386291444CFC1D7F12BB4B1304696B2080A14F56ED1
959BD60C7F7F5BFAF8497205D4BD589967F17FBA10C2EF19C1679C5AACA4F9EE
B15E13977CA81B5026C7E1EF4FDDFF62E82B16CBE3D401AAFA4D973976EF232F
76C9D0C0793684D68FE95129C326682238CE9807B35B2C2C0C32F4122724C159
AA1C41DD94D0808809572A0A32125FA4D78B525B256291CA389F839797A13591
6197A48D453611484DA293AAA6B62F5ECBC9D32FD482C74A5387629E03895C5B
946117AA34217BC77B1E075A4BB99145EA55CFD1D12CB1D2E72636AE538232C1
3966FC6E07843E4FC7A8FB27BFB4FF67CD278CA322575D7590D77B4E03E63F7A
848E639AEA6DDEF55107E8C5B9DFFAA47CB3CB5A614B77D0112527C9AD97FDAE
5BC457971A70DB3421293E16959B64702BA858C1217A8B3B836A947462E0B59B
37C8CBC667F0052E653D33F067997638BDCAED6DF3A8F1793F71E79A58BEF6EC
47F700C376341D757B09A3E31F6ABE9EB9021C1A6E311CBAB6DBBC8AECB140BD
DCACE9B1E80979B7487BA2CB786018E20A5E0355AA33D6FCEF382799F62A9A8F
F8262E8DE16E9245C61CF3FFE09AACEF315932D79117A513F6863D275B80A249
01CC70FA943FF9A9F5E8D5716835F17CE3FCD6FC5EF10AC25471C19ED3B2D164
93293F09EA311F49295310B0C1AF942753C52402014764CE7026803F091EBA60
AD877E9208260AE6AF24100E2B365BF89C5B679378A7F6A67087C57B5519A988
04735147BE66CDFF2481FE35DBEE9CAC7E77D79BA760EF4C53A3C983853DE8C5
FD3F25925955F36A3BFF3454FF7B226C0F001FCBC5484DCFA46DD8D89C69C886
AA0247C5EE233C9D7DCFAAEA1E34B8938673AA6D760A80C38EFAE41268C528B8
5A14387C3E29D017EC16BE7E6918E11E7AAE31ACB6E85DE4B2B15B93B7BACB79
AC25F37A4E4D1B370E59C78DC9EB4AE83D1CB6E4DF546FBC914A6FF52591CCD3
C464AA14A393F61610D617E196C9252A013C9532C303C68553C91CE83431F239
BE883C519B643E9EAE5142F698F4B47ACE43BFE59E3AA4C8B47CA18016F95C6A
212208CDE1635F4E5271224CC19B6D47261CEBA3DB1E042443B665E915991D93
2209B3F4C86C9763861923B2F335DE040A8C24E73A0DC3FFAD5A6A9249A29AE0
C70F71EA41B0A4A505263D6A6C70BA63EB2814D31DDE792AAD7AEB4FA346EC85
0781604DBDF2EB65869969F265341938B2C7D6B979342D93A9F5A23A3CE8A015
130A0FB817DE38359C63DB215965E218E892C350FCADB5F66EB82D0813EF551E
F65992B2E24B4FC8353951C0A335B53F68A8F8286A94521BEE28D7319ABCDFA4
A21B5DE536B34845B32A34ED5CA1F3D3EE2B04DC4CBE12FC99DA94FB2648B842
54D4FB6729B1CB7E86DB55FF4216E2F57A08E04B44BB36F27129E5E93EDC061D
348F162C03BEDCDF0521B9F31D29543DE2AD436B75778C0489533F3FD5742FC8
AAAA8A72683C54B45F81F355D9D19496D0F80470D6B289B760B6851EA1A9D31C
01577A0026C7929C87160EE0D8EBC305A07052BD82AF003A0EEBF1D6FF38B526
E2EA0A91866201E08792F03323228B622E30142E47BC752EB0EFF7BE8B688A36
22826EC83CC42DCE8356DB43399E6A6918A887A64B2EEE98060E47C0F4276DEC
FDCA976E967EED2CE2C439693E2FD2F2C26823FBE781CE97DF06830FC498BDB0
73AD2CA5EC36B4892379B00A5C8564FC9A915C85B66EEE33EA460AF6141D60E3
76B4E430431F049992647E2B744E48AFD33CF5041056A43F90D0E6A47C2521C1
058E8C66894928964B332A89C5DA71AFBF455E5A68FDD4DF74A8F1572F8168DD
E778337122FBBD1485F73B4EEC2651C3465557A320A0932B65C1FF77F68B89E2
BE7D6D975EEC017C4CC66C88F5BF25B0D84AF0E70ED77B0B380397149845CE59
EEEF6DDDC9E7C6127A68489B4B19F3D15F6C72AB8DD43CA69CE0AE0177D2B999
3DB6EDD24B6A4FBFAF7245D800115B62C9BD6E97A52671CF3F69A78D19654F75
3822663BE5461EE982F36B0027977D6B3738BA7EBE8FFE3928E471DD9502DF1F
41F853B486CBF6A62EC2D4975CE0BAE9D76A833969FB573201280B149CA91AD5
F57D3A240F66B12B30C0B8C3C25DE1E16BDBF5FFF3CD111CA5FCCCDC96631D0A
2B46A37E422D648CF65D7C1392E322DAD8CD3CB42B3FA767FC185F653F299CF0
85F2C3AD7BDE7C44FD3DA32993CCB41A92B29BEB26E60B05B105EBEB7A7476D8
31D2C0383F39344255823DB7D1D12E2435634CF69890D14A1FF76CD20F731C4D
09ED15BFCB1DC5530257DEDE728A19496AAF9D8BBCFB2DDF39DA7261CD6B1DE1
94DB09EA1744A0B6E3A9A1704083D27D5690B18843ECD420763B9E7F42912756
39C6DE6964F3607C90166D11C291D467B35592E73C61A2DC1F13CD09369054DC
5695355C6FE73DCD523582A4973275B64B3D8058783639676B4F8B47476E4098
ED693455F82F098F49FF487626BD1A4D4B3B7961171D67F8F6B26EBA8AB37B5C
35D075C41218D0E9CAFBC8078A26AB4F29F821A015135CD43127434DAB18D387
013C388D3840182F35ECB411DD16BAB8CB1DC80EE2D09164F7CB2EDC0827D2F9
73A1460966368EA8F0D42E7A93BBD492847AE57C85675CF04BFD1410B56E616F
68C3927EA7267C0C4BBA87AA3EC7166170B80B7355E802532D38053D427DA3EC
5D297AB110438F9AA9CEDA887E63AD877E9208260AE6AF24100E2B365BF89C5B
679912C69C51E8D0541100E3DF71D501F4BFA0AE8260EA411984C107C8FD9285
F08FC3C879AE6D42023BE0E114B374F049F75FC09E974E64A63E36F76D0DCE3B
3E57F4A1C80AE684E56726F52F4A49A022808893BADF86ECD0EFEACC9F5B7E84
1DBC5A753D3803C89C438B0FB99CAF607B7B16433C977215E7F78D80C54177E7
D853C4EB05C108B4859A21AFADEEDBAB163F8C1C822C4DA3FB1A29EC3ACE79A8
C5A00293FCA8CAD6BD2A94098E88D45175D4D9A88D0F77DFD5C14FD6081321C7
AEE0F7914B79B9ED057E292AC7A96CEE551D96F4D85369D2B4167C0A622AFC28
80C6D6FCF36412F8EEC622F2783C9F1A0403E9A5D876942803F08147525ECF7E
0304D3BD24256912A2ED3C59B32CB4091040E21EA8F9253E6CB7433656B87E1B
0A17BA09B89DA54E89C36AC72560140421800FFBFCF4372B123AB0EAA5A28063
EA72DB6C8E32FA349461C1A8946B78E05C110976E5B4B81BD89C82D81AEC14F6
8511ECD14AC322A438BDBC4262A26D679ED4D87F89B2D3FF1A88AEC671EC30FB
4DDA9E1BD3A55C4D59BBFB7F5EFB232FCBE3C721D8D181B02711EE2C105FBB16
BAAF98F469068B96F7ADA96E4C628D450E7E1B4025089EDF05D020C458C7F3C0
A9E5F676EB11E606954B3A3613D4E1DE3727C04BAD9177A42914B371F4FECE62
5C47EC539B20F4FCFB72DD0EF45CC71FFA185F653F299CF0858E25008D1538FD
4D2748FD791113395323560E169AC68D884E15ACA3BA6934ACB18CFB0869D655
CC9E8B7B2A883E868B7D9AB5F1966D7364A38F999D57EA93937C58C1343F917C
4B77C7BCD394C7A7C155763DEF4609925F2B5D58FD32BB7BB54CE2DC59D09E42
CF83A35DC7802A111D96E6C592F5DA313DB18AEC1CBD734D9C289A53647EB6D7
735D9E91EE200FFF4250D413CF779E46A1A18E239FD522EDAD8AEA7F7EC5D653
0B3F2D2A59FED4C52F3D93BEEAFDDEACCA99724FC6248DFC44FCA9723223CBAF
554E37F1F63A7CC7241B6A3197C6081BB1F3246540E952D3CE37E2F63D1B34FB
1EBDC9A60F4AB8C27EF1D4E65E5E97328618BF64DE4BEE2CB0F263EF782C0D49
E6AC6384AEA13283716F280C3478C8EE4EA63876BB37A5F17C733167B2CB7DA2
0C340ABA91FF0B3C926798326D283B4A92B34FFB6273EF4F8128FCB12A4F2C8D
13768637D078225DEF89BFE7329F2B420491CAF1794C18E8AB1DEA1749E877EC
12EF096A2BE42692EA401E2A3A11F32513AB4829EF58D62DF6C4CD5658D8DEE5
58D56E17F13ED15C8E490FF120C6DBAE75E3AA5B8D06A527BA83FC7759239ED3
2C9487CE5089F76DAF6F1AEF63D276707539A79C0AA4367F4B1359BFE46E90DE
9ED306DDA195B893F42B5C037A98F21B48AB50B63BC616BA3F3C588FDD7480FA
2A14FCEE4706AA003DAE9F92D5C55727F7AC23F58C8EF808B093595E631544CC
051BAFED695D5C51797C4E9E14EC72010DB93C1EE96A8C4EA4856637A5669681
D8058179F67449AE6584B538A32295BC5C5F40DFC533F5B87A0D016B3A67CAC1
CE1953C9CF7334F7F3605E4426785042123F5784844950C5E30EFF8683D73019
7DEDF1DA5A31B8AAF9FB4F4C4E0E815AD1282D0003D149F5A1A1742EC110A5AD
42B236F512DE383DA77E7ABE6662843B857DF4EFF9DA9D4652CE666141182F86
363104165800E6AABE35B01B991AE910B7DC821CFD8A6B5C7F4CC6FC03C091CE
C66A50A9349FB3B1C2A695930A19809C222D522ADC89CF698C61B861F1B4CCA1
2CF4B2481E472FDDC90C7BF552E25EFA727413E0F7C59661F1ECF4DCCE59D724
2984AFC94A2233E590A733DF8E98FBB11F635BA1B2912109796C1C7ED9476FD9
4CA6A05BB8C3A756CCE5D25F8D2B1B99B73FFECCAF7C7531842B95B7A4A67149
2A44B7F43E4219879931BEA2B95C7510EA319DE31DA5E946E39856B07D81DF2D
0C98672BD99C91405F80083EEFA4F53DBE3356BE438546C0FB741303E40B31EC
F7705509E83E336BA0A9264629A6EC25B94E589B80B54A3BC1358EC3FA22E15F
C60EF3EC60091856CB963DA4B845FB3276FD3F0B755A375F5C9D4F03D038DAFC
2F7B2FC44D874EE1812B3F153E63FE095A87CC113B930AC5E5548B3701982522
7FD74D17B8E54FAF294389E3804F2D8827B368FD56FCA8E01B8FEC2384E26B98
803679524D46A5A1BC4BEEC335A5C78E90E121BEFE8C3E1729FA4353EBB08AE3
9BC8B715A541515BA68D3264DF63396D5C6B2FB989FFAAF363FBCD811050AD49
BEC1A5CCE5CF234EDC9466F1B88FFEF31523001CE48D8F355B2BDC20BDB11845
0F9F9C13AF26147A6F94636839CF1075286502027833484674C9ED2EE44D10C0
CE6B2EEAA9BD1B7182CE9151EF2A4AFE4FA32112954C5B86EF7AE3D015FAC570
F6596AF00C0F5C7D6336E0E19CA338CCD852E4AD9EFDB3784C6366C4A1EB3950
6A273761A898F69A36FA0E6ADE17A52A09061F578841058F3FAE9DDA4237FE83
F267FB2E492AFCBEF4C8E9DF3FA6967F6F5C9216D1F34F1F9025773C7EA50CD0
1DF13A42E9491468078630B74E277F5C32166AB539082917BFF7EF652D589681
C4958EC2FBCE0E01F764EC4EDBF1A7E60ECE54CB38A7251F23A0CD43453352D5
C5AB3E3F4D4D5CAD9543A3ADBD3DA129B2195F29379C4B88C50DF01F591763F1
6FE1D1CAD9382839AE8C789A6339F7D36DAFE163824896DC2C7B007941D39239
CFA195CE54BBFE9F13E4F119193F62F76BEAD5C3BEA1E7044636F7D3BAD00C99
38DA2463A42D22D0C888082F3DDEF6558D68EEE57DD7DE2478A2B21894DBA290
3489ABB6B2EB9F977F3F4D690B31E8F6E08514B46890A7D87B06DD81FCC70783
17F01C0E31E1A4C310B0C4E5DAEDBD08EDBCBC3BAC588F367E850F9D9D2A9F7B
17BDC34F34DA91337E5469B32C9ED1980C4CB36101226D4929EE7C9DC63EA8F9
780763E889B13FB2BC0150921CF2C5C11A3A9A52E09A006B8124A80BBF26C1B0
D309A6E8E5F3879805D13FB270799FDB98850AC5630E0DB9EA544860D688E9CD
F25E98769FDA84FA98DAA60F8B7B4B80EE209CC66F763542D242050EE1FD5980
C610C2AE6F94B0997E15984F42D43D629178D72F01CFE1AB79E6A2F569230CAF
55EB6CF686087DE12B3D6D19E4ED3FC032610EC4A97842F2BB59894122796E46
19F5CE7FC3B92ED8BC604ABBE0575CF97D126E1669A54A08243D46A59ACBF3D6
48C1AE05E9A2A4432B7BB69C467659C2247A0B25217E43C8C3A9D70992C1F31D
C6753222850ECF459A7BEFF8CE272B577AD0616D09DDA2A16584C8D40E7F673F
BC859CFE610AC653373F102E395262C8BBFCF5C16E64FBCB889EFC8F5CB01A1D
7C7D9C1D968238CADDE66EBBFEDF28BEFDEF19D1BFB83991280E8AE164321863
7BFE082D98512C9D23F5C73C6D1049D98797B1FAF91561FE88F6B59AC7CB0A06
1D63D174CCE92A2B70638D24A5445B56F34C92CBD4E80331798E82A8CDAA8046
3BCC001CB369CE5D0CCE7584FF1FD3333EC86FFD2CB48D694619D3B6F77D8D87
56065D4CC919ACE44690CDB5907C380524B381B6236164777BCFB2273E157B01
E8B11BB02F5772F0FFB1B81C3ED5CA1ACEC503AC5A3F9D962D8B23770C91FF42
EF52D058EC3C0B13410D4DF0EBBC7856F66566786826CFB01F22A944EF21FAA6
C12D3BAC92E531CF3456DD2778F1181D774D8A4CDD0A5787C961FE2354A448E4
6A492EF0633D73C071CEA58830A18AE1C56554E8935A8E29EA9053C5F3EFB0EA
307483F841C23B766D1CB22E9EC67D91F7299AAC56823CD4BE926D0EE4E8CD01
599BC4C22A42A4E9F9365D91CEFA249A039485BFA31F9D1FFB1C157CA626EC05
6A68B66C652833CDCF08803F40EEB4AD2BE99A7A0858D7D26AB192CCFE79C07C
7ED5FDDA9D4AE4C409B2719E566CDF77D94A229FF53A0011CFA86DE80FF60B45
926E88D1714610671D3923BAB73DB3747D8AA14EC6059854FA6DE8AAAAC0A855
AA667C6821D655778926F8FE0A064A24CCE1F22EBA80314370DBEEF9F7CCD561
DC7ABC387CDF2B6C6F1D7D2B33C37AE910E603808CCECEFB9AA802F3002A294E
48053B5402594A8D6CBE3144E3F023BA7B594B3C738E3AC8167A29AFB38F8708
85E83F0F87AFCB125DB47FF5134FDE8B541232027AEA2735E8E862CCF28496AE
C62C6D2A9117340F3205C1198E32511F945E117287AD86E517267E421D37E93F
670D79239ED9C23CE1CB161F50091092627CA0CE851D73E08A7F3F8BC5E58313
03447C940325E2C4030CBF4F39893EAC86362504A872500F5A72E99FD49D0BF0
C12A7175C6305BCCFD126A1E65396D8881438CA223336ED74D2CB53F1FA77EA7
4787017E92DDE4CA70E9A409216C2F6CB26B9C95E60D2DC40052D3478EC279E6
FF80B23C94DFA8ECE2B7374827AE168634FA007F8981ADA3D0355AF506D88E32
379E2C8F02E1379F36DB5250CBB102B21359C32200E796531DE4EB6632820659
74F633EA0483358A528D56A6FBE9F3002E56EA59E9C2459EEA50D4558727B404
136F691BE1541AE3E64BE682605CE4EFC5FD59DDB4A16140C85D55AF2AA52C92
EE85C37881985A9F22B7E3D74EBAF8B072345BE26EABB77DD815A2C40A43FAEC
418E16536B30D75D3462EB461C609C8D47E2B111C2A48FAB1C999BD8C3910780
3EDC1CB30FFC89509DFFBE1F55156A7951B8EFD72B485F95F8AAAD655EC46EE0
B1269CC8781D7AE8780028A6CA54C77CBABD469AFE468B7950BDC321CC873A5A
19873D58DA915279D4C414D7511069F7BF2152984266E65DE1A3A4189DADB602
2E5AA9715DCDB8A3D3D1E9FA06793C754111044E6BD47DD72384082A6ABBC6F6
2F9D368D0F93C4E2551F1E1BD1968BA2383121482B7727ED2FEEF31983E07927
F8878102167E6C23C85BE7D3C1625DDFCBB59703CCC55D0802F05B67594FAC20
AE98EAD48AEDB936A29293C513AF98CE93D5063F7D87E6F759A29F32ADBF5D37
B697E1824527ABE5B8F62F15899242626C9F22996711088F3FBA80E2C1599E58
D1F25BC54EF6FFB05AA6289ADEFE783DC387F689DDB79FCB67920CEF937822D6
AB50026A3744BF5BA2E45A826F84216D7EAC6B9A8134C4E80828B0B849B269F3
81281EA458FF71185168B5152A74B0D383A2088632E52D26886F9BED966ADC9A
C306ADAB6AB6118CDDBD6201B83D0E86C2405A02517839D51030B695AE25CFBE
C0CCD5FD1F4EFDE44C2E47EF8AF9790FBF0497F8CCCE3002458D6D475A6DCD86
4A1AA95C1F47F45B554C5DB2004E075F188A9FF4DACA08F258DA5E279D8FA49A
6B1525ADD1FE7E7420B500C440D364CA8C1F272323156F95644EEDD4DD907472
7F4FBD3C035BAEBD18239DAA37517B3FF2B21C4398EF3C4DAAA73D2E9E02B7C7
F7C277A3DEB8EDC0BB83249CF414967A020E5B8B0F4C985830CDF5E299E0C0F7
F1D0C83ECE888457C900E82C4133E43905EE91B9C549CE3D9E2806607E422732
EBC81F6DBA1E01B1AC09C515B31676917D11D6AAC4F958DB61B556DC1DDD04E4
4AD3FD17A2C6A56854206D95098E2350C75AD80244BC4D6F73FDE34846245FB1
9B5036E5A40FFAD255002931AB82AEDD0BDA2953ED797E7569F71563CA7C5F85
5EE5DA523977FB149576AEA5549B61C5475A0A6EFB0F2F0056228FE28DB2DF16
0599E3A94522133EBD574DA06353DDFA9C87125E5C9B69FE0A5923903203E49B
3AAC7F81979ECA8231422739C0C58B4ADD86BF559D2F5028AE5DA5139E8DBFBE
BFF644019D08C6614921A8C129938FA16F33A24555973303D8CF202979524863
3B82EE3BB7AB14D465CB0E4F622144E415EA54E08AF6BE26B0A20ECC10367817
3A5E658CE844D4F0DDB7D17CBEAD0F5C4AA381B8581DF3F82578AC6FFC9216A0
6EBB48A7D5CF358A8F64CD0CA264AA0476CD88D97E2B329ADEF2F4CE4EEB512E
AB95AC899DFB6F5923EC7B3CAA8F046B4CA5055A4E0C3CCE2A30757E1385F846
2D0CDA1D4FE31FAC01B3BDC0B3A663581AC44D7E7652336E2DD2A86DF840561A
91BB942FF755C0A1B04D23F4F1B2E01628DF6C5A021D50886FE4E385E858EF6C
F333D987339F41F2B8899C23CCB7AEBB5D60F011E319A23D2D54576AA26A3A33
3761183D0C720073C05A2F6D7CE4EF45440710DCD3C90B959AC3A19FA9D0303D
AC5BE0058B7AC46EFDC42A3BB7EC99ED28D2B4A7B685B9B278C77FF850296A9B
645C8A6336457245B77DB5BED5AD69086905342282DD090F725D2C12B770B646
6A74DE9180A36895C3013A45F8EFE7D6D6BB6660DCC1DC1737FCDAE025AA1456
472B68CB75E7DAECA154625D290753F8A8446BCA2EBA9FA3B59F1ADC65ADE10F
AB296A939884449842FE797BA4473543F1383986C413CBF283AA4E1B6102C1BD
67947A2465141D0CC94768B538891AFC33B1E9929C9CEE82C4D82646280FDDDF
C1EE81028E13027F26BABF3AE38AF0FD6BD081E5989BF17241D483037DEDC584
02CD8195B2DFC7EE6F2B321909F5D067042F1120EC56BDFD3602CD8C6A407734
13BF6452ED50E0454810807035BAD9B23E06267D9AB0480ED8F243C7A7491600
119C6CB203E65CC1462B7C3E811E4FBF589BFD5C15D965C316B3A1FC467F98A7
E2F4511DEB9FBAB2FEDC321C7614F30AC150E4622CB7BDB175B84F2AE6120EBD
D792769E7EF80AF8B32B1A30C9F7923E3E12C1BFDDA721786C43C071BC2ADB91
D5D4F19876785AB3080EB8A0C4A16F69321AB69C710E7908494C50597F58D5EC
D91792AEC6465F89F9EBDD06968A80A8CF7BBB5FEB274F945A0FE6EE8D270015
A2C420D9771CD9C71B01A93AFC986C34C0835E517EC748DC40497193F4E4EB75
BCA69046C0326DB03EA31065C27B544A46BFB42677030221082DF6F57B13A373
A9E02DA8959E1E9E908D2A3E2A7D8829B9DDECD23EDFF11182E78DFF8DFF2247
D8C7EBBE4E95D9CF6F8D4D204CC6D61EDBBE1D890C67186CCA0576C1BC1A6D88
1BB06CD0E30160B12D190831DA30BD1A0AC04F2851504C8881A81C1DF0738606
D584CA516A265A9132694BF1A6C96DCFEB832689DC0098589449C6B0FF73A672
307B352E141233CD8E2B135F78A56D706B19396BFBA6BCAAF617825376C9765F
9C13B0D0893DF52D57BD6C1A98F2D084B9E63F2752AB0F918E093F586685D7FE
3A08372E7D7204C19A9BAA0858A960DA6426CF5DE016D08DF4EEA40A90E1043B
7BC1D982E7CAA79328DE04F0F7A33D4CD50BC68D1EC7256EE3FB416D8D4D75C7
DB51C8299B1400E45F4D8E1D77C0C11DDA2EC873CC2BD4C28604E044677EAC91
7DCE9258FAE9F7BA325933AF2A3C98F87DD26806FCDB9C98773585EA5E4D316A
EAC8CB4182A887EF4B294898CDBE8E8271BA5A9A2831669C086A3590309D998E
61DC8F252A4A13C1842F8BEB5A2416107B1E59084B5A0C3941DFE2688F464727
BE1CDF9FF5239C62338F7EBA6802CD6A89C52B018E46EBE636B6214175D6C385
0D944F07D9C7BBA90E20CA49FD3906B7D32C787DE06908B02E3216715507FAC1
A256207D14A1E013338CA388A3A3D8D2373225C6385265F0B26F3B72A68643D8
44B4F859B9AA0942C46A7199C7510F9B2A10DCE4F979767770FEE84EB9C99413
0A91A5941FF5A10EAA8A5FE2CD4FE65E899C5B2267C747BAFD5934D95FBD2640
BFF7E94C4C260CA3170473D18BE8365338117FAE90B9F3164E2A29FBB5372BE2
E7EA49AABA75AEEEC5DDE1D8BF68483C3D2443BC6E159C3EB567F2E92567354C
D98440880CF5031E5E45BCC5D29F88AEE951C2452D22AA967D32C3F37A96A585
89898025EA873936EB69BC17539AFB4E5E6E11F518C80E2749400B4D9A8BEA50
2B531A95D074A7642D5BAB97980D042DB9334244F1B53A7CD80D444A93455702
1183767D7AB50B2BB294132270228229EEA3F8D8300975A1E4CEA313CFFC773E
35283DB5E6587DA67A23B9AADB7B820678F4B87B292CF288D338C41D88929285
1E8273323A6E550D7779D1096790EB7D8991E2D2BB4E21AB095CE70CDE48B320
04072B5D76AFE97A87CF71BFAF27178E708298C154CA1CBC5A2347AC28E96012
3A04365F334C326BB19FEE02D4F50615AC4FF3F906E9D890A821349DE1809038
91204F4EBE911581EA3BE89E4CDAA34900E8B9F47CC51D45AFB01CB6558FEC2D
3770FC07531D30C09C38F2C2F487CA8BC0696574F4D97784BCD075E047C5E337
58D8990D8EE81BAE03AD70AF745817CA28E3D2F3D53CFCBCE1DE0C0838B32F42
4CDA9346E625CAE0DBFF80E0A0B8334346BA37CD833BE338A0A9D593462CF91C
1DC3D228BCF7E99F93FB8CC353325868F716DFD2933D5F0B14A0BB45AB5F7642
E8C7B6113E9D68288A8A324AADAE80AAD15DD2581B12A1F341E51F352F5ACF47
4B8D104A5677B231727E89E38E6DC7E76C5031C3C0FD6080CF97D0318FBE6A0D
B8D3B79075B5727D400344644D0C16A555C50F6826750E2E7486680E7C90DC71
0C4909D50036BB8CEC576642181EF3199F594839CE0339BF6BC57AE9364475D4
0A38ED45BB7D6DA36565148F3FC891B295E7A73C62066CF520A47E1DCD562BA8
E943EFC02ED8BD1AF09AC4E8A0BD65C4230D916FF9E4B2E310D48403E301699E
50BB542741370B3C342C005EB85B3EF2E1DDAA2510837ABA7A29AB18FAB25B86
F15244E8940C2F9BE4BDDA2E4322C0528513D668E6478E9BE3326266B2D53D8C
44BF4406642BE1AFBE7AA05D928A193AC2863B41DB67BDBF4EB722FF4A651863
D0505F551F95DDE3615B9F1E6134534A315CF6304E2DD15317738826E365EA2E
5831E662E3F99243D20B70959B12A70DC985FF76BB327CF2F2FE3BBCA3201A5A
4CCA5FDFE743D4CF1A918C5F58DF1D364E29610F516493F7D4977CB26F9A83AF
7B4C5FF11863868BF0E582CF0251A2C2166A0E4EE6272EC1F39BB7E05C36CD0D
E61B3AE3668AA3D7DA417C906CBA807993A9162700BC9A110DC6F51D28CF849D
07521DE30F80A6CFFBAC0CA1E1FAAFAB1922FCB9A6BA94EC16802DB8ED8C1596
0B4579F3E651C341E532592376A74B7042A9865584BFEEB4D4C3FF774887D93C
19B83AF6E957C9A4253FEAC804D0C0EC19964EFDD3D7586D95E7DFE70FBD7E67
9F03A8E2E4CFA9697B9E513973DF94CC2D37694850ECE54C80D2CE7BA941F938
AAF88CB18CFF74FC89AE9A0B32ECDFD0BF913825C5D6CE35E7D5460EF05B1A51
36CF2C1DDEB46F756776F10698EFCDEEEDA99C75ACDF7262119E30EB552B111F
81240CC0667E2ED796A8D6BC9CE98F2B71D98623F6106DD1716603D89315F346
2668BCD5C44675717F9724412C5B9610388BC481FE16664FC7B10192CE7D55A6
F16A2F32777BBD74CFF9C797041D0A982AB1C0D499907112619B132D1D7DF3C3
7E35E2ADBABCAEB14B34D2A184C9155AB8D6C978DC702A7278890312F6E32B53
6B9C9926D6DA9BA0FFB366D19D8C69701D7E8ECBEA885694AF30048AEDBD06FD
79BAEAB05CCF5B81D99CD34D142EC19F2762CD95B4BE8C22431014B54551378F
52F29CBD80BB6E5B01BEE566EFC53A6C0F546A7E2FA8A481581C49DB7D26D98C
3AE27C211C8C4FA5132D2B427B8583BBC14969D9EB2C285965F4DCF207F6BE5A
1C3C4AEB59E750573D14577705EFEFF28C43761EDC0E66A5E026E1AC6382ED76
32008080C78C427E8E051B99E95D205AD9D4E91AC08D389275D701D5A0B2E94E
7984D00F03986014CC31EBB066ABCC4F6FF2D5FA315A4A1C9B6067D2874D6CBF
F004142161A7701192F6585586FC5DDAB14D19C7C8E39FC04D479C6F4123EA81
2EBBBAC6B6F48D530BB0F7ECA49000C283DAF19CCF88634833F3A62F55D62CB3
7607DCD3E057392B1202E416B635D3F474AD6CD39E49D7478C767DD9B71530C5
F01BE2D2611CF9644C28F3F7822F453139A615402A144402BC8CAD70441769D9
8F90D04DABD55602A2234943DC1C617EF756440F870DA4B07B36A43967BBF036
C87602A1A166AB1BB4A7E6344A0D40A712322CF101D2820C4B916D2585181D54
F1F36A85E2D3ADD60AA8F5B2BE8C21D7344CD8E8A6C73664ABF25B5416331DA3
205E8F38383299755769C94370B4E3C380A3642A91F1947AAB4A780D034BC00B
16D7C4D77CA30E73FC7B4221C1A677B413EC24C29DA1F2D33041FFA0E1FE4020
29FE2439769D67DEBDC8AD8C861E90E5322B3F0767AE6499663C88B604B2A8F9
47700A630BFD6A51E28A938379CAB93ABE05747491570EDB80902B818F38B4C6
459401AE3114CC83B1B24FE74C351EABBC368E540F255A281B2437BBC4295CCD
AA8DE64137227F139DC0BEE360FC7E9B9BF26D89F808B05C2E483B9171450E4E
645763A82ACEE79613DD66EA9EA94D956AF7ADAF6F34C805C8BDDBDDC8BAD0B8
7F3BA50D36D20926718FD3700B7182B0C3798DA5A68D0EA4AF872890576B1DE9
85ADCF8DA53F157BD60FAD7449153823E9F7778158B67FD31F5B6E8DC4F671A6
8F8B02EF2EF44976FF68DF0865B4180F54B8675D83F5D851D392340AED402E9D
FC0045FC47FFF7C880B1EA553450E58790B89A577AC441F71ED017C4B1CA9CE4
7A0675DBF2E804072C010757B047D81CDE80D92842300CBA463409FA76943A91
2816EA4DA67931E27059BC1063DB3004BFD229E6A1E22554AF326DDED91DFFDD
939E001AAF11F61EE5D6A4303ED46CEB34782DA67397EDB859A9F9A257A366CF
288A27F32BBBB40E175B1C9D974E44EF83A517C3C5752B9A508639FC3EAB9A66
EC8D2C8858E58DD524D173A2E79B98DB9E6748C784C9F2B15590E4E80363ED65
2CEA14D0CD2FAF8CD0C0D5FCBE09D4EAE4DE0A8330DE53C1C7ECE32FE269C7DD
84CBDFBAC186DE2E1CF84844B43966FB2E3AB8CE7FECFE016537A52FD1A6086D
FCD366465ABA0EF103567F98FBA5BAB5CCB5C196731EF7E3B7D4C0C86D9C66ED
01B85534A1E39BD5C20DE216B334256C526B94316E56A74DE14A0E8AAD7163D6
D9B782384C61138EC1501C46CB5B5152192E8D337A77D60A3BC6B0F33E99DA89
99D504B49BD30B1F537AB109F6DC000AC14DA4B6470AF1DF4F4EBE911581EA3B
E89E4CDAA34E087AC99A1C4348C3109D0671951505993DFCEFAA29DBD045BA5C
1868021E69F6DCF2B27FF31EA794BC8B59C36A663FC828D5FB2C9832772C15EB
82E86734FF9C269DC4DE52743A4AF692E07EC8648BBAF792ADBC2583F7991E91
42D27FCE2CC85BB5DAE1FC5751649009B86F0806D385A7D1E170C47AE4059FE8
5CABBB066949A02C4E3601F85780C59378BAE88F6E3EAF3E903BAB38790E872C
8A80F3D37D34429519EACABAAEE6384883F21D51527A22F9C168E7DF3B43FCB4
C9DF1736074582183309AE00F7ECAB34218E6B25E840A594C538AA8052854792
C3A985AD57350AE15AB7B12CD019B4AF7582590C7498E5BACA91156CD7903C1C
42E115E9C5203037C808BD295190FB22E382137EA26FEB07208D32DADF413920
53084F113479AD8253C8460D4159149C1EE0F65C84B23A94F219AC14BC1D6A10
EAC63EA4B4E55BAA92BE152FE8233BB992DFB53B06017CA640FF1CA71025C1F5
3713226D0A5FF3160746BD0A86AACFEC7C2D4CCFF39FAC7EB56BE27F9F08271B
B84AC9AAC072FF6D5AFDC5A833E61CE4EDB9BEC18B7A3D9546AE17060A9DA3A3
FC071E413DDEC851DA08562622002C3DDF0D5BB0D1F5A4FBAE0C602130439FCA
7A2A2959DACA9F8C687C126BBE696AA6732DBA9AEDFDFE3CD1E8FE988132C263
A316141ED0F25A4455CE5AB9473137EE9A79EC3F588762C66D9860B6D4FA7E3B
525A89C672AA53D222D84CBC9EB9BC1C8ED0033F5C2418093D59FA7958AC9BB9
3E2BE97037023BD77C5AC2A8AFBD5F585AC27FC1CBB2D87BFD031AFF7612DD60
816C4C6CB3943483B75A88D3BBB2777CCD84865D5C98C84BC53B3D9697AE3555
83D824B2BE94BE35692A62358DBE53EC4D0D85406CB205B03A9A7ED63D1E8F2E
42D4D0358B380BAE915A183A8FBFC7A5688FF76C9041485C16FE9005D865F680
319DA302AA75A5465F54A849C5F2F57D79D880E13273F7A423D64D1696CCA4BB
B299CFBC46A80CD1D1820D329A68E9056D5FAB2F69752EE4D03A6FCEC59387A0
57AA11C9B137D6546855B2DC996510F6E87E3B4D75685B2E9BCC9EF5096B4631
4345F0B5F5978A3FC55B7099C9F6EDE1080D905A39DDF1F6D6B2EC17F6A56159
ED98B450806EC9100A418DBE985371C35EC9FFA8941D71394316E1E954B7D91B
CDA043482049435B525F265179BE321E5CB431C0BB2A9B4593B71C39F4CB6342
B3A76311D692EC8E56A3B492C93F502611CA37ECEEA4AAF6FCBE1752316A1700
5BEB0DFCCCEA88F549F4FF7DCDA5DD6F5ABDAF12E0B10F8806310EF7F3371CC1
F33591F2A81E947884D1E3DD1A8970E3599FE3110CEABF5CE69F5813A5220097
640011752C09F192C81BEDEFC264408C6DB1AA29867BCF8BD9D7BD925B6BFD1F
3E8D1F7B13351D44FB1513CBB22AC8F22D037826FF7AEDEB09DFB0B956B404C7
4657B72A77E33A5C3974B932EA37986750ABB935836BF804BC54D97E27F1BC63
6D02AF9989AFC62E8940835751EDD0ED2C9219DED59689DD84408EEC4830380A
6BD3E210DCFC74F2D7544478F5C4855F2F360DDFB20C99E460C500785A687464
291FBD091E396B917C643BD16C758C02761838FF339492D16359318985FC488E
579CA914407DD6A68881E4BF6690B9F606AD442360B6BF751352F89FE155DCCC
3CD76497AA6F526926E003D763B4210F95426FBFEBF9B7792DAEC02E50847EAE
256B924772E14EFD18D418D486AA25073B3E54CE69B424CAC2EC43C0610134AA
104EF89EB88BBDC94F581ACC3314752038D74C7B5EA21CAA7033393373CF233C
944352EFAB00DF6D80192C2787656EBD21729A2C7FD9A30D9E8FFA9D0A9D090B
86A2B91B84A433661632CE15CAD67EA78AB7E80316B269223DAD309A683EBF41
AE775F614724D9CC2CAB80D164FC974F2FBF089FE3538FF509A488628DF810FF
885293CB6C256D4C1C03BB3BCEE0536EB75AB24C180252D6833A45A17234D630
F306BCBE084293DCDAFFB6FA1BD270023702D4B7269D89248CC553EDF0582C53
AEF387E93741B6D25287A75F83698690EF6AF9826E5A363718390BEDAD164640
3593F4DD2310F2EC5B5EF4B836951BDFE951A128FCEEBC78DDC18AB82D14AE5C
B90F020525DF69F3B84711C7F8B9E64B090E023E71E554B36E5C41F967574284
FC5F88DC7ABF2F42F1418BDFAB8210BA22E31202EBA850142C565D9D9C1493F2
A929E194D9FC49B3A3469F9EE59E5FB30174ADC5A27B52FD69ED74EB417F35CE
973BF987172DC59FAB3C1EF0D16EAC105CC67FF490DC09E4E30648F55D67307F
7D1A561A968D274CD70BF2D0A3ABD3D78B5FA182DFB7253A7D46AD791F36BE8F
D0119866C0ED814810B7DCBCABEA4B17D25A4F34F4E0A0665D0200CDF9E9F319
41A966ADD901CBE980979D6629AE4D5C921DB9023DFF1DD1239CF25984DE1AC9
F9587FCAC5001E054B8F41686CFADF82381FD89E850CA0CC49A3015E93B3146D
1C22C94655B5AFA1C377DCDA55A08DE4C4FEE96C8D4DF87F70789A98EE2B5F85
37AC7CC043B89683DD56ECEB9EE7794D840913D0A0CF9B4684DB1E43E0FA8092
A38390EE9980A0F981DD6BE578EFBCBC3D9F02BD5266ACCE6C2FCAF7AF84606C
AFC7D29FE18F359D9DF554A69B25AB0C2FAE702250932CE45CB7479A9A865458
03CBD2F1D440A70A2ECA664E69AD816BB0371D1C8FDAFCD7272834190F8E4900
F00685DF1D0658AF5F09DFE993DC351CC1D53D3FB6CF6E59B3DEDBE19B52BB06
BA0CDE818E0B299C48EE11740C813A654C2D6BFA71CF5360C888DF83277DE842
C2A845ED884748E14A0D48DDDF01194F49D81326A7331F16B9B42C1B0A34361A
1D46E9CF73A7EFDF3A298DC14D5CD47379129EA4DD463D920D156002CEFA1758
1814CCB47CA9574AC3454A9A528F28942CAF0CC082121951591DA3FAA4B84BC7
D66D708C642A7A95BBC8929606A910394B61D9FC00865640FA3AA723BDE36D38
DA53E8A2574634F1C2E2D858E09CFB0EE1AB3DA75FE760D2B2BCD445B04DC4A5
9173DCB8EDEE08F521F5A524321CA6129909170821C48C2E0EFA0C5F9B455896
723E0A2B8381AF2B4C2488BDA143A917E4CC953B107B112EA38EDDB451A96E4C
CC94118A75969B803518D815F11973816C9D25F988B97A025C9805CEB46BE11B
F115229EDC0D4302F9400975DE4D96BE28E1F9CE055B61E76BD5B818EE88240C
4AC5FDA2DBE48D8A5A80E21C7F95C90A1C83C13D7CB98230464414D3C04C1410
351E9A7F2FBE002F91690E70576E1631823A2A061EE89C83A56D499241C08B36
3A3024DC22B67F6C9A84726B343777ECD8F75079886CAE669E568B91A17D541F
1E3D73C230BA930597DD99B885572AA73D9BEE7EE253DB902F122BD01890CAF1
104025ECD4CCA34A307DA379E08DC3749DDF5A9C4564DA6C51C3F01A36FD0973
C16F129A9F4B28262CD8F8D078E88AC81BE636F7331611E8B4BC08509C454475
E8E798D21757B31D5A435A4BEC8E8989EE45A0865B0AA83BD687B74C3444B700
7776663006159DA85F3EE14E252EEF23835D3F43928DCDCC66B46A6B4F6FE1CE
CE2A45419DDA387E9C1F0F6E708BC17831B6995D328F45044E8D1C3FDDA3C158
4D59AF8134FEBC14CA7B04D53374D04CE18A34C38042D11D3DEF0985479A63EB
154D6363BD80CFE442EF81FBF506A54DEC48C465627BFA3D1B73EA3E0512BA64
99BA17AFF782CB25E02AC53438DF16898E28BDBB4E975D99697D88EC5151E724
984970363CB9113472B8A6F1188617D7FE680E4A3B59D2A6EBF08250C3A547A3
67E720A8C0F0D045E0FC0B42002239BEA8D81E0936D07B275E1EB9DAAD72D889
EAB77789EA8A4C951FE66EE64FC6B38EAD028708F2032DCA2443B0D44F8C53AE
4ECF1400AC7221D4B66D2A81091C7B0B6CAF9CA3B446F9C3775487BBB421C2BB
EBB0C299C16D66369B54733D37607C0D6A8BAC0699063490B45EEB1F1ED3CDC6
D9ADAF185FE9C1DD26238C9DC4F218CE2E5CF363697F76F6D59E21661ECB82F9
70362EC41E0F02AD3E3FC1D3DCAE703754A099D21B332B57165595DEB9D305AD
D3F849D4A867BA24B083E54D91DEEA769A0861364AF28EF5772360C64EF93008
A341E04B71DCCA078403BCE5CC7888305E6DFA5412A4E58D2AA59D4725A96614
A518677758D8AF24D8AB19421D396632FBEE38D88B53D2CBA1A5863783239935
1813D877C928A2F7BAF29D80D99896E2F3C582C851916ADF5619D1ECCD8FAB38
E7BD2AA05E7C151358EABCFE0AA795D97311812431C4C557069E1A86F4D25376
690556290B4D24F5E4E1A89954B70317696C6E908DD35907D1B061F92F4112FE
50BD7EA52EAE2DF1A267050367040D9D0AD0719A5FBDE14AEBF3F11A375DFAFB
8B2DD804CBE4973487850E5D781D09098AFD77E8A29A4B52437DCBECFBE3E4C7
3E40DC60B9475A2DF16BA715106429C2C5F127C80301B087935BDDB3FFAB5736
12B83A48088FE25F942E9114E784E041ED4267BC5BBD58D9EF19F7508772EB0F
130533F3B66A2A02B9B9FEABCECE17B13CC4690FB31AFB3808A2FC3EBFF73010
E7625254A0EB74F63C285E2D52D69BEC6558ACC1B24B03D138396F3619557849
327871EA80F6CD7D9A7C8CB34B040C29B9DF8963000217458FABB5851BAA776B
4C613A778B833326CE81F2D512D2D5377941FAB08D753329CDA8A0639F3B3FDA
6C11E023EDE1EE58A0A3CDFD66025BBED8288F18ED50E1F14CA2B9D5DDEB4EA2
B05513B331F1A76D61C6F6D1CD7C65E82EA70A963F70770D687E32EAAA36B13D
2360A34112FB5BF92419C850A42A59682AB4AB53D80402CF730DFB0A760CB998
0D31A333387019B63DAEEBCEDF1024F1F9C03817F82805E61ABDFC1C570A502B
E999363BF881BAD3820DCA4D7D6D9208285200C7FE96A8B758681047D709410F
AC13F1DF172D586EEF26404FB38C36ADB0D2ED6562E5CF7954F3CFE4F3038176
95F5862BAD2D51765CCD442A1F0CBBF88B93EF4A7E93758CE56EAAE89A332C2B
1120E2206AE26638082911A0F18947929C4B3469C953BB80ECA7EA2FD09ECFC6
34DD655E5A20C7112BB6D5DDBF1E87FC8A55B8C2C608F261583D0BE693E9621B
02BEBE2F572EE279E7041C28F4B537D15C66B01A8A92AE7587B024738B7B93D0
E7E0ED592A3FA900DACAE294E6D77B1120E7EBBDC9D17D9234996B3FA9FCF557
8147F4CB27039CD1CB8F806952571D4D0C00356A19595141AB8D94CFFE6565E2
EA9FD454EF80E70905F10F20F927BCFFCC5D398AAC5796B786FE81F5DD39CC81
4E1482D018B34D9AA5C215CD83B0E03A794C9DA1A753AC0336429AAA80A44404
7F155DF42145151A94C7EFE9FC9BF1625A2C942739DEB8C57B015BDB3289A2A8
1EA6B5676EE829C16BC4FE435F9EB32EBDA94ABC0D8452F4D244BAA163C4E999
B506EDC20CF66F6B83F10A0569D6DC70C46C279C5D26096E5F413CB5D927277E
D205A3B90AB1618FED747489B7CA28581CB0242C0BC7C58780168B24D7DC7804
B503EEE0EE1D38773FC5739A2652162263C749FFF5262E738BBC1EF20CC8BDD5
6A3AF689B0621B62FB586B51BEE603D64BA50F10D5EDC8838CC302C66F107763
009ED7CA83E318873BED624E3B0246B72496A39EA1E3B673DC2BF79331E978B1
5B5319D984772C8C481BAEEC11C8E1544DA7BB9A8C28BD7693E2ADC98284D625
1A92C7670F8A8CFE66056EE9574EE07FB9AC22B3123ED4F0C659B90C8B99BBD3
62683EB9D9FD1FBDD3B3B6CBFDEB8461E72A6CA83033D3578D25298F32E73233
5CEFC0354348025FA4378DD5103690ECBDCE1BD41AF41029E5D4701E75C9A2B2
8102C9D8E81FF28ED091FF7D9F5E4CFA99DCDFFEDB3327BCDCD5503DD3A3DC42
C9107CA0BAC50A027BB01514BD9A159D5DAC33E3F01B884A02EFA230D4452BDE
4C7B7A5570FFDDFE3827306119A08DD4FD14888AE22C59E3E0ED63BBA4E4A156
DBBBB740E3B8A55B917AB7FA6806E5241B91CAB9DF6A9C84AD8358E8F6C899CA
7D9F960E513CE1CBF95F070EEB3F3BC6CDB17E507EE53F4B6EE2AB45A340109A
F4D75ABEAE9AB7E7A087623AC9F93783D8280DFB565176F28E7618B0337447EE
38A02F76C2350AE180C2CE885D80A4CE2C75CEEC1159468BBAC06BACADEE76CD
C7812D5FBD6AAB2B4E7110E2E0EDCD1F5B09D043BAB1A9FEAAE4E2FBD5E452DA
BE0F442904586385BC8AFA2ECAF747E065C25C6E7E51CB79901652CED1BBD538
2332D4C9B13B56F948B9B2EDD3AEE3E6FDDCF294B5FEE9D259B981E6F73045A0
45F9280D79AC9E0CAFD806AAAA7942D7ECAF59DDCCB44754D45D2DAB99850B3A
C3CAA2716A7278DA0E93A283E9D33ACC84F0E494A259749D9FC1FA6F5AB1D724
A9FA3C784203B38F1737C5A5187A8197CAFF1544C76C128632A537E9C871617F
B79B944C34C57BAA186858CAFA75BA7DFD613802C1AE159AF837A3A2F5C501AF
422A313B47DCEC7A019705E60907B0CEE215F5894EAE38B7EDFAFB64C0891B14
D990AA1F717C6E8DFA10A67EC13828136A0CDDDD8281DC1AE61776BF8B224372
8A8DDADB1900E1EC052BE61CEA0FEC55FA4568C194D46532CB63E69DDCAB9738
4CAE1A88130D551F15281D71FAF980ED9FDB5EEDCD50967F365BB9EB460D2A58
FB9F3EA594C0E119D7BE8F7EE95F1E692E381AE3DEDABEBD4D7006A26529E67E
145169007B7E87BD9D405FAE797D1EF62013434D5955190F7CB96F74F7D5BB71
C48B79F589A372D0BA6AB915E341A2B0D682C3031B6FAB8A6B19FD5393E3A4DC
86CF83AE43E5F8C391406B6C611064A26062E5C14259B43A8E140AE41E063D00
80BA9349801E39AFCEE02039275FEBA3068F5EFD3535732741023F88537CAFA1
5B731D75BF8FD8F2F9B0C01AC0CBC46DB582A2392DBA184523E6CF6AA5E16CA3
773A05BCC93B20D730B43691E149409C10DB0715331633839803C71F8701545E
CA6EF216815F47C25F406A59DB9D50CCF0087A58E1EF9BD95AE1F2D2A90801CD
F56575AA3F7804D64E934C162AEA756B555E2FD9CB42ED9FA0A92B2311D4409E
9DC62A3CEDF8B03A6DC960D21151E65C1750264A3DAF082C95201F680AF0AE74
D236099DA4701C3110FF92E77A34193CD294F995C11526F6D0C18B03564EB61A
8DA4D73364FD53735796FB86627E86EBA90797C472B7A31D05E62D664AE5B6C0
89A485601FFDCC7CCADAF50A8DC041FB92861DF748717933E98AD0AA26CB18C4
B7233D9D28C9242773BCAED60D655792040DA588D597086DEA2B5F2372296902
A8E303135E00AE343882AD0796D5CCBAA6F264F62D397ED454F46E7F4C814DF7
59C9E2248C9C5245FC58E7E45290ED679235C7A2CB08C4AA3D93257CDB367BB8
1C6C1188FAB7E3083D5EBD7603AFC596089111FA317168A25406A4E58047A2BC
A2065BD1971AC80C595DE9E711EDC8E21EDBC7FCE46BACE3EF8AAD8EC83FED06
EC1301033F5AD9E9174DD406F8353BCE5B51C646E0B564BEBE2FF35E4CAFA13A
CE01B1F9B76EAF6AE503D9952870360B3FE83D067F828D7135BAEE94606AC85E
DA41C694A3DDE34F8BA689E6F6D9058EAC2049E95E91F8039EE4D3B6E42094AF
F82BBF658E3236DFBA794388B1666DA4997D71EDCB645D75EBE13860C93AAA35
0B9F9D22F16E4018CAD5B1611DA04006C86D510188CFC464AB887F33B2E512A5
BD5E157D331996D4469078BD13066B5A13AFC5C81CB59693D618EF780F04527B
5AFC265188E0E247C56EC286B066AB847BCE6848D91D099C52DB54D9965CCABE
D2136DA163C4FC47D104932F6510A2EC593B475F92C4A7E0ABCC95E0E08A723F
6E80F10D4754D067FC40C2065A37EE7475CE269618C727B596C3C119E92E2623
108A275059727637A7399FACE02A9D3F119E9C9E53EEEB3679624EAC779A1A1D
BD41DB89C45DF87DF10B40191F10B9B02CFA162F205500794B34603061180CCB
E912322364A3232D8A4D9B9A972B874175F84CA0CB5075B813C9E496E035F21C
16A1273D8A186537190F35443B69F15740984C304EC17E9717BC4A8A758E63C5
AE28E3AD1F18DDBE287B6732AB1920A5BCFFB403C14E050C3BD12EEB7D5262B5
16FD35B1E76B603B08F34E7D44C65AEF0DE3631E0FEA8C168B1F07AF698BBC60
14ECAD507680ACA37850B30D1BBCDD128AC4835989372468909E4F59803685F8
04B0C6A98E5D37F963A15B1C0F4D17240BBB7B5CF26F8C6A61D49EC82D3E7CCD
8E0771CB573F8D0426CF9BCFD4D73527FAE9BCB0994F991BFD1BCCEE27F98379
866392C6DF944F77A9E9BF7BF973C98F044BBF607B9B10135D5CDB62E4BC76D8
D4D353831D56E83B551D0C6159F2B758903A333B8984B9B1520FA7BDB2C711E3
B764519B599829376AB867F43B2F6320B331A6EA21B519A4667F23E21C499ACC
7B5B6A1A3749C1342AF400984DA083F83E5901B9DF69318790CC766E7D53451C
02C6F59481638BB4E082E6AF4E94FF0D5D37FB4BA862E04C2733CE41739C6EB5
776CBEB44A3ED3DBBC3B736C672890B010E2C4A6190F8808C8295F3ED352C10D
0B659F0F0B6296FC439E5483C6E5E957BECFD607FCA3FCEFDE12B13B55AEC857
0714A97F206CCBA2EEFD04AD9A595D4AFEDD153850E204B61BE1B5FAE803D24B
DD8595E6C183DBECB4262E8BBFE62569F3FDDCD4F76DBA0F9E9961FBD33430E5
E0BE9FDBC7133213F7183C3A34059F886ABD222E4A6B9D9AFC4A68F6B22872F4
2401BFBA34C9FE853C4705FE8FEC55BF4337D889E809CC51D2DB49562F745C59
6BD293AE6E0B8DE7E597D9128D2B2D62A29A2B9E7DA7F3FF4227C914F067479B
3AC07DA1C5E81AD828B4C33B12BBB8CE8F7C7BD7558DD527052A2AAD04E36317
FF51BD556CF6AD07B242CA837F6DED2C60B07499F5274C4A2EA43B822C692D30
FCFB07BA5208B91F59A262388F8439DAD00730B1BBC838DDFF084CF30725C282
D1010D75FF4255503F7B73E564D152759D4095B00EADFD99A8AF315B8E1DEF18
FEA368F63489F8963D45A7BAEC948DD47CDBC8234B8620A78AD0839094553AEE
DDBE0A9E040A8970C219DE8ECC9E037B80CA3009AD7C5DC0B52DA507A3E408E8
0DA391EF540E338BFC9AB2F8420A3260CEEAD0123E71C9A9CFDB1EC37EB68ADD
141379E585A071ED1928400D716A714D86771C45B5D6F83CE3CC63FD1CF93E89
26EC03228E7EDE8D2F7BEEBB536527D13E789C4D1AEB51A8612828DED34824A2
3C2CCB42F82042DA49406BF0E83A3CB13099BDF7539258B9C4818081AF08D1F1
FF2FDF27C1122151BD507E54A6CA755FEB1F270E1B850BF851C1C4D33FBCF3A9
F547BDDC5764C07757C7CF639AE06F73BBD50BEF4AD09A3E4687ECBB2E9040E8
5D23934571B4AA061F27D2DA45CB5AEEB66CE99FBBD9293D62238EE3F013BDEA
495069A1DDF11DC579F498034907CA7FDD451A321CAD2BED2C21958B2E171B14
71936AD7E6DD50EB95C06727C0A97A6F3033C2B882569554822428F3B3FB36B0
66651FDC02A3FA7D180708D846099ED6405762AEBC873C123E68773C3A3673AF
8F51A15534B978482F9041012AD781066C37459250D8608F8BFC9B054BC8F030
84DBC22206D65C503BB3C169262AB60F6864E8378F18401641DF13A9BCA69412
A8E204DB01326291DF06713A887A68D40BFB943EC4D810556FC3417CA6E5680F
44A68A2AADE1ECC96DC2AD5B24414E9544E65EA2576A842891CC2A72DE0E9D39
7AA805BB3BD8F7FABDDB15C7568C36C9EC5AFA0F3AB2A97C079EAFF922CB7CDD
5F4A783115A6438E26C04C41774B9F2F516A4350D296BC19FE6B2C0808B0D7C5
54E25962F4749824852F4B3B2BF5FC0E9F7664CC6693CA18624ECAAE7EFAA677
74E2965D650932C461CBD0D2513E89273593259258455B25371F216C743DFB71
786FF6189CD681CD81E924D891846FA23E83FB29EACAF3772339C9EDD67D7654
25ED26EA9751484AD5429947CEBBE6140A8C57DDCD07FBA4C768810D2A357666
DD3693B27358C8176A3F8D4E09EC61EBB21C15555D0AC3E984DD3D449EA3E7CF
44141EE6200AB068DA86EF0566E2DCBDA9B29837ACD579854CD11DE5B8296AD7
AE02AA5AA6382253CB2BA6EBCCFBC26B35BBE87370096F2168B6852B84A78987
2053E9930701583C14BC4B2683DF88F44B9F9CC174C1ECDD3A63E5883BF8C044
AF78C09E13E90690A80DF614F24E9D390EF7866ECC4C92D6FE3237635C589670
37C7008FF67D6ED281BF2DFF158C88A253D74774970B11342D30A798FFA9B26A
03853C4BAB92BB7183E58236D485D4A862CF628B5D033A1C2C204783EB36531D
BFE52F4A8E9094A215028C7D18EEEDFF50A3A17F333DA69210BDC4232B0DC109
53F8AF817EBF5653DF736159DE727E3F45CD50146460DE396ACD96EB188EC466
245B65AE81495F244D6DDEB4F5641CF4C7963CD3770F9516B7E91D09A0272C5A
ECB0E591C44EA064C81D1A388E48B9EFF9D2B5D9F8C0A6CF74A5B021E31471EA
E965FDB667E617BB3319E9AA5312E192C2AFB9280A76622A202A3062F218582C
59B4973E4E9FB1DCAC39C18CCF586586654038EC562FB8C340A7A231DE2D065C
888472B438F880D1B9147A7CAA5EEAE6BA6A1828D0666BD9785F07839D301C6D
94DC52CE91E5B0E041A1244EB8E074EA37E934EBDC4C9DFE660B8A9B2F7BEFF3
362D95719D26F058FDBFCAD645B6711CE48BC2BFA5E098627EAC45B2C885DEF6
35AE071BDF6BD7932A5E64E2E417C6B64D84B19F7C2D7C143E287ABA206F35CD
7205435589588FBD6B7BE3D5D877EDFF3C7D4C9D2E2E0630B789C97EBAC2EE0C
224D6045902875C5B7B91F3C65D1E2611909EF7D14E125B4D06DA04041579E96
08012034537F935126EA50BFB0CE1E73074C34569F013C8797E213E7C4848EF8
A10D9F5C9C50864C10579F9965D17659F0393B34E72CE680042CA683B123A051
B5A575128E473A359ABF0C020A224ACF261A77D52731F0FFF63FBD2F9B67F9BF
A689FEAB8632789620A89CC6D77658D49210F85207E9433D011F27D6D131D672
457311662A0348E70A97A4677840B113D3A4716D2FC8CAF0DAFB63A8C28130E1
591DA3779CE7CACCAEDBA16A992E6B88C29CFFFC95F56114E8215D882B3CFC3C
D9CD8BE635B351BC0CD505F47BF514667E6544A4F7393C18B2E5098B1E6B0D87
9A638AAE53467827EB635BFB6D5C8C66C3D184704C86343AC38E2FFF466DAA91
839D038ED7CBBE6993BB7455CB374C46319E316042736A73C196D8618F85AB3F
011E787205B8045C6B5D84723A0D6B9998821A9350D76CBA16B7A86224580700
606CEB24A581288CA7BB872A4450AC4A8438FEDC2F0D2C8F2CDEC5653D9C26CE
26E2912B604CE86836E09AA4985195C3F0D00A425336B2C81DBD94FC7A708AEA
BA0FD0B7651FA3088440A47794533C614306971FB3524E498A1EEC35192F24AE
59A5D46114F3AFE3063976D546798C7BEF6A032BF40C16E3705041F2C1BD1E66
EF3A1A3ED1A077D35F2D3BF46894726573102442574818D8E2E330E2FE5102B7
F4DF3E4FF47020EC786EE39776EE06BFD3C04FF933CE48AE61ED5C7F30D7CB7C
01BC6EFD70E0215C50EE42A111EA4B21D20B2FAA612EA316EB8E8A825F0CE7F3
3BE13D8D145F8ECE09F8D6639843D08FBCAFE02A4FABFE9E13B8BC0F4EF409DF
076B0AEAD03AB485F43DD669E9F6D78F7F3A3D184E089393FCA362BC59A995FE
5430B39CB5EC916B760DA8F86FAB8F94EBD6B5258FB7581BC0E605A1D0942E03
8A832A026D6E4BB80425136FA5AA827CB69E65C015408143542E3F276ED65336
9ECD27DDD1BBED95CBAFDE383075339D51C33CE1BEDA54451093DBC33611C448
668B84836AC84CF3F5B6B884F0FD9DCEB533A6ED75B95F01610F6DF3BBF81A1D
1063CF7A1A381FF672442A66A601DE0AF5CD890470AE9CBBAFC2B36119FBFBA4
2B3D2BA631082B177CCE6F7FDB27A5B543B9F395508FF98E3410ADA67D0353AF
45A1F176DC754E1BEE6C8EE443D62AE6A2C9A48EFCB71AD65DAAD7EB3AF8B955
FD3EBD100CF8869DC7CCA5CF8B0AFD99A5855AA9D1DC181EE715CB577C4DFC25
482A27A4E48DBC617EB2DF361B2AF9584973C1EDEB2F0F24E2FA99ACE86C391C
E82A78B4620DD7D154CB349247804A1FB6B7C7093FF3F4D297D4E226E2154D82
22CEA40DDF69983DE36F2BCE4473932308A1D3AF16D1F5B705309DA145A55A2C
E7E2B8993391140E56465ED888EE313C81470496B0D287EE9801BA92B30D133F
5C264A29E634CE3267520D1C72F2D2B9A5E2115F2D6334D2BE74940E3418BD07
659C871B645C5CFE109AC7A355699319C74C3F859B9D4F41FCBBAF1D70EEBA68
EC4D84AD05EEAA7189D3E1C9FCA25F9FE1C1E8DAEC14FC13ECF305BEACB56480
EB850FF807C68502EDA0817D6626FB8FECB76C3799EBFD222CB46ED8D8719B8D
F820C35D848B35290BB20178DA4F01E29C67F2F19BDCF363A678B06465682526
04E3BBE4122AFF4AF1E395CFD7678A42542CE4550E1A375DBA1D192112DB2A1B
28E9B111DDA93D23BB95627A6E456099191A1ECC1DC0B686ACA441E316ED0CB3
CCB6ECBBD05FB822C66B3B083F23EDA8E2FBACB8D3355170D0C0C5BE98C0E45D
502AE23E84DDCF715BC97A91602AA2499202BD930495E048234336AD2E3874D5
731FEB0B65C917C65752C45EE8EE6C1FA0AE0F66B2652B9E71D3AF022B675E9A
48B8C3E764398403BB19E97A02E63F8B30EBEE9FCA1B8B7B45FBB21C0D0683DF
777222349B653BB0F818E4E6636B310CEBA74F1D892970C0BF7202DFE7960787
BFDD01178600AAA71A305E8D2F57F67FD981C22E411FB366C693DCFE7A8A9A95
60C7D3244A71EA044579AAC7B813F29F450714EF37CA84397F0CABC125351097
FD8497D3BB8E9F0450B6D1AB6A1BB3D5D9A85A491CE456427CEE991160A5E41C
3E7C3516898E28BDBB4E975D695306177B1F6AE3F1C5B8919A28F731D70E2DFD
3ADB91B340CE7F3A58AFD868B8CB91647FD2B51E7C6ACD577CA0AE1EA865E553
076928F9867BDE8CD923404BBDE5111A09F2F70FA32542FF1E83E1FA20A248E6
A1604F88644C6E5835216E7CCCF73DC913A5802EA6BBA1E85C69773CE0A54886
A2430C5233D3A3AD60696558EBAA5FB17C6F99145A1CC30F51F387AFD64B7AD5
8271EAF8DD973B2CCD78C266E7E119A2C5E29022E137F808DCFF33D406320583
193B6201E1F9F453C3B7756E06B403EBE8AA158C45390FC5BDBA029841A87E0E
B2CCEFDC74ACDD0A592FFB2DF1672342B98C8C123312ECF70AC43BB1D4751F57
512749F002E1148BFA48A0CF8C1F0C4EC952C94AD319C715F1CABAA2BB9F711F
EE55B227F74202FAA42ABCBC4C8F87471310CA26AE9372FFAE0685C7C24E70AC
B8564454277C41C28075AC868531541B8D17AC88386A79B3499F99B48F8A92F3
7F5C961B7CF21F7DD3136F99DFDF0A598942FA060B0617732E1908FD40E43A7E
A149580198ED895A0C51A142D207B968B889F1B08D3F59237DEF7079426CD119
0A9DC44F3A020DD899704923818ACBE28F2C9B5E212861B5F825428B4AF97E8E
BEF4ED04E195FB31B2901C8C2DA92BEE9F27728FE5F4CF00092078002D162D49
EF8453EABC206471506847F71B16F069DDA3F113D047ED48561BAAF390E1417C
30C84F6F3426D93AE3A0628451243FC493ECED5AD21AD6B9422CDD4DD1EF5742
F5B02AED09E56CC6D3BF977B44A028C9C9DCBFE53223D096351D214B3DC904C3
28953CA07D9035460CA3496B85B4F96C89BA91BA161B8C79525AA6FC0A5DD394
45C1A8E23AC74CDDF523947580064D434BEEE59F46BA45BA52C8EBBF787C87DE
135914D9EE5FC432576830D7FD19F77BB2CC4C5C32B4CC1AA1F4E87F1F184F68
19F4D26416C3F9BAF4996544C15BD25D51283D153D8785DD1AD632A308872AAF
A1776946B3096B0D75AD07AABDAF833B99DD91A7CFAEC51670CB8DB363427C42
DC55B47DC4834C41428489C236B4E32750970B40B489D59A4FDB57C38734D3DB
8B5381AF41FEA71074FF82BE314681410AD7377674DBCD9FA8B32CF5BA8B70E4
3447EFC2E50A7F1D8B18B10C81F9370D4E4859B8F00F8DFC3132BEABB0B51289
9C03527F9C2450D9B4C828F183177F9C707C9A164DCDE4A8412400004C1D424F
E9B8A33A421FAAD88038DFEE28C6748915856FE50D44D9E982E54CDD9BC66AE9
C8A840ECD9D1917E7B661AC592209D208BB03E5BE05134E6FB384FDC09BA3858
0E2BFE7939374CAC5D97A95AF6262B52C70DE1120702A237BE928C00E066A03A
5781A4173AC93C0F9C6B05D44221DDAF7FD77CB534E74F590AC18F55EAF42B6D
05A5786F755E8C4AEB40D68457BC8DEC6D989DBEEB2A5FC12BB9534E81FE13D1
2C79DF6F33C0F96622873BDB9E91C10E01155431A7AF2AF1EEA8E4B391FE883E
5BF142E524A3745F62F0715C8654A8B8CEB099ED5D9EC93526F17388D6265741
D5B4F7D232734606B7BC4B973A7106E8B8C9FA901A8046E365D0B73FA494A568
C67AECF19FE0DA3F1EF73F820B00E188F569F66DEA6D6D320CC01A4F4CCF86CA
9F5B7E841DBC5A755B48A833303A35E8891F11449BCB449E339E3F480613FFB7
57FAFD907D49249312C99D064966343DAC74DBD1AA2E2F1D14199B324D15E091
902C8368DFCF9AA0F11EA6E3E3EEAF347EA164FB21A7075C86CD6A8D4C263EF1
78A8601E44EBA680782F4DFBEB9807CF85E932B0BCC0E744E8046FC81942A85B
969115685AA1D04857BA77EC1DA360C4CF05A5F07AA82DD814E463358D70DE7B
C6BAFECD377B48633D0100ED40328715E65AC465A693A5260568334E34AF8970
15C3EF78D4122013757C6D445496CD9E665C4CB2B3CDA3BB7F1CC421D34F98B6
9FF4C335B95F4222A8BAB77665D86F11014ECC4B9962A89661F28AA0C13CDA7A
D331900D06A5B3A4A5F41929D75D3B1EFB5D133541236CC5CDDBA186DCA31064
0AE77C6D375E0BBCD80252B084B03E0C187642F8BA3A7B27CAF06D5C86C735F8
13079CAF222CEB4FDEBA586C6FF368ABDC475CC7E9C3EBC159A8AD8558F049FB
E07BB4A3EF822B2089B43DC326C1285904816DD679C2989E1C76FDC96647BFE8
8320FE76554432864C62C95BA4802C0079C8AACEAB18D1A6367CAEA1CC29DCD1
7F0EBCB7705A43DA4915B9ABACD63CAB3F114572520DF0466C28A95C12238244
82D800F7C8894D369A4741B7E0D00A1FFE2B9E872DD99B66EB8FE7D30EF26AE7
9119C7AE0A78C142AD24774DC8F3173FE3EE6AD5503F75A1C0E62FC0E3CE3132
1C10536845D119E9E4F465753B660DE84E11DCD97FD5E3F1A99662DEEA6EF927
E221050F3376B55B80B51EEB416941DF533537B33C794385AC2420D7FFF94948
5F468EB8E7A980838C5B2B478CD92AAF6D76C66DFF0B07DA1D2F18173CA41331
E7EE19CC2C4B13C18557B1980044F74166EF89429BDC3AC80BC34E1381DBB9CE
AC5DE29FF4E6F14E83970FCBBC4C9145042A3AAC7589EBC272EDB0C4DBD3811B
CD546B7631CDF9C8DDE5CC55790EA3240179FB4B56748944AE83ED7F55580BBA
5081B3E12A4249F7EB42F6B821E75DADFFFBDB46B03FC0FD52500E8D21D81154
899B9DF267A46265A7CC1B3AD2375466FA0272B67363B438DF356ED075F5A6AC
A629308174FD56D0C96DDE3839FC9901FD3CE4674D4EEB42891BC3FBB114E2DE
51FD851063068EA4A2F4EAB6C4248C541C5DCEE10C45F01235C19126B85B3014
31F192BC698286B3BE8DCDA5CEB0E25C90BCC810A6E3532F63C155FB86CBF6A6
2EC2D4975D926998F739D55E1AB926E5F1230538D96AB2484EA11E24314B0975
E13BE96A55B5C87C6B53842AE45F669ABFB3A22074AFDE68CCAE80B0FFF88D1E
6044D7D7DCED5A3C8287C128D35A3FFA1BD108130C1AC3403B544D7E481D91EF
5B0A2310F5A168F6CB83AAC3C3C7D00F813E49030BF703A3C2AB39B830602EBD
BB815DB97DC450CFA4D4957D83D4AB01771CB6BB84B8CEDF27205AA43E3F83A1
36BBE74AC7F9107A41830EAF890EA0ED3BB458C2DA5051026E4E9E23C5636217
774935F6E81155806CCF271460664E4C28868B70E467C0A77E0A3D81921F87DF
00D99BFB81B10E8ABBD892E8EB606C2BD63BA835840FD3CF0F49DF3490686280
A7CDF47CE12489E9C7091F7ED9F52818FAC02AC17A1D5484A8ACAE902CE9F036
C36310B86B9F057A295E39476ABF50849300E21224DF8208F33C13D3D9BD9801
20CD89087E4342782EC2564CBA8C9D87A78F64B2332429C9661A9DD85CB8E622
B6373ACBA6F0387CA03AAF347F7EF05FF7F579199029B3C52A85E3A069D5265B
78DF1E8A68FD3068144A010CABC53339E8CDF172B872311C783A8F2BEFEB25CC
74739D6973CE3C2DAB275D9CDEE074A865233DDA9BE982EE7AB754BD817E02AB
77741BF89E29DE9C39BE1C446B722422BDC79DF5C5DFEAEDFD98057DDE9FEA6D
2D407C0089818E3F82FA42E9473ABE2F9E0CEBEDF5DF8D3C2EAD0BD5AD97E55C
AC100AE563564FC1EE68544E9B672ACB124FBED6580C39D6A130678100141B68
1904E6A7CB6FBF65104B93E0C7573C702A48C722E940D4CACF4A77D3C395367C
6D3242A71CDD4F4AF7C95C784CAFA983416C0A07D23B82AA4EED7C1E74E5D54E
5F743F106675EE08763A61D27684F240CC0EFB504340035C5EAF7684E8E03620
5B149DA99B2CD2F337147B5D39B68167443C33B97B28C87C6082D9E03E257095
1103F0F313A0663CFB5DF462A15DB507610322A4E259A6A161A1364621CC131F
067BE82B7A00167945245303572FCFE78C78E8F130575910EC324FD2DF976CFC
21F029256CB7AD3C41A484CF7B7D56968E9DD32ADCAC98FB5260D3A7703AFD49
BBD089B189203DF7A7722DB69D1D8E2D0DD25B0BBEB51D8F7D1366DCEEC58017
1F4B2C9B85D31B2D8F0A53E9D1B0C6D6B04101F8F792B867273E41A33F45DF66
84D3DCBDCA5537ABC8C2B536D34C3A487D47C9849D74C89F5D38D639C22F88B2
76E5A5EEA1FF86846BA1B1B2BFE36AF9E311D31CB4D124C5A978ED082C0CA07D
5E9A31F28B335C772B3FB6E71E7B801BD0BC5C1783618B011F86C9490704010E
E379908BC3B87D1F76B0F9D703994024A3214877736FEBD350E449553E0D9A79
B8AB56EA0BFB2AC47F2E423410C34A1D8414A633B73EA098C2C32ADEA2AFD571
BCB630EE4DA9961DF62031D967A9782C3D1060E25FEFDA9A31D6E8675B1E2A8D
AFB7983BF339540A8D8280F3576CDCD4F2140F00B7A40702199AAF7F906A361B
DAD5F0C921B6F04431768ADBAA07A27A116C80E837DC740E86068952F0A579A4
188B8A3B3F63A0E77220CED0A6D0F3BBD7B09A1812F3FC79D5FBD519CA84D852
7EE6C4FA93894677402B8A707BFF1A7E72BA089EB4C072D3196F99FB05EF733B
4D4C76A47A1335CA1AD3C2B451361DC744F17421465A89A138C36E12ED74B218
7B99D5F33DADC3D84EE4DDEA7472239B7DA8B9139C4F615859050459DFF5962A
EC5BC2F58C21EAB6712C486771B07495E16438D23C9F8966593471E443E74485
FB8223624C08C67C6DEE8804F4BCBB80DAEF2C634F00B108E11673EE2AA541AE
169307C0A604D0B22BA3C48B2A31B99BBBB05DC525B128EC5B7814341C8C9D5B
C11BB2DC68AF2217C2CAECE1071332A9274942404C46943A76E856AA1E59C531
11A5E4DFD660B8DB49FDCDDC2E21FA4126557B672B92CE387F376F7EA7B96973
3631283E66502810C083BC31CDFC0DFB5D8C14F78D70E6B9048F394009E6F333
71E117F0F7E213BA79517E5A6436BB6907872AD24D7517CF6F42243C23441375
6CA68A0F125A0E7C1BFBF8ECD7472E457BF81D606411D58E12728A64E198182E
EA22A4FFE4E1A156DDF0127E2C87A8AD82DEE1B80E0534050D07FDEA209F3960
9EBA730568A7F5826B455638D7EB0BC541DB7A48FC9E022A042DA64B8B30F906
F408DEEB2F4BCB1328EB11CBB8930FF2710FF55BC9FDD46CC53081949E751E23
C654F39E9251F9700A87CFC3B9BE6B465C0A3509FCC50AF1CABDE1C9A17754FA
BA6FE190A57E06BB41A81A21F8A1EBF261A64142B5E2990ECE96EF6D71BE39AB
689DAD7E5E5BD4938CACBBDB3835E53CCD034B48480A1613FBE0AD7A4007088A
67B8FED187D9CF2FB4A626EA3E546717AE6E239813383278615B70DBDDB43739
D05EECE15112FADEAFA8DF7BB61B0296104C9465C03C0A3CBEE624FC8F0C8340
4B0AFBCF660D31375CE1DBA3BBED131EFADAD826FB58AEE3D398287E439A0E82
C437920F27A5ACE261620AA9575556E59E3279B606E74F9D1ACADF6608885147
40B46A6710CBEE2EC1B99F36FA1A10228694120725C03B4132B7BA25E3B70D65
4CBA4A65F24C95C19E66F93DBC8E9CA5E86793FA37889936F823DF8795230823
4FC559DD1F7D85A7CD3BB80421FA781D95E90FFC97731F1B39A4924822B52657
73A5E86A17A41BE984D7A0E9D6DA42978A983DADBA4F728040D2A098AC14E33B
53C8196451247A9DCF0172E7E92B86F8DF4CA7283E95832B92C298DF2EC7706E
9F77C8A04B529CC5F97E8C128A0A15C6653CB85BF452ABBF5E8E9D8CCF2FEC3B
8C436C77BD8C8D332D0BCCD1046DD47CE6505D1BE698191C0F12BA04D7AAD47D
978D9E27B27A5E810DA32D8A953915DB200E5ACCE752D0CE0191D57EE7FA05CC
545E047F80FC9B4384EE6F9A1528F7E58A9CB23E3EDE452F483473D73B85EA11
8A1036DDF61B515C7E8DD9DB72E28DF304396555159AE9BDA259322C88BC39A9
A1F466031539A0932E3CA42CD4C3AEEC4DA8967F0BA0A576E48E4A7B856350B3
52014576858A26DF969402AB30E0F9C5686DA221685EA394047116ED7629C74E
8171EE39B996815F1D4C8F01E5693BCBA645B07E11D8AC59AE55F0F7D4C66F58
CDE775B1D22F687066179A2BDE4E8E0A9A06AFC6177E72E99FB0394258F4BA2B
94A6DBF6B5594D1F9F2DC55AFC5016FB2C4E46822205E640375A9CAA5245667D
057C95F2CA9599385CB7FE0B28A607D5242312EC254311435101EEE86C72A817
2A46B866F4C7596B3D3867CBE5B6409D4903CF328BFFD58F7067A552F704EBEA
F90AAA28B6804C1CDA9066279B59EF16CB91539514F44DDE0622A228207C0172
BF3BF0B5D81F26CB99ADE3EFF02134242916AAA88F1B52BE124FAFF425EC316E
C6EC284F21545CD8C86942C4AA30A5CED810FDCB3566DB0E00E8478BDBE9BD0B
3EFB01D867563247DAAC23DE56381BA275FE5987D36507BC80085920AB9C349E
708200032A2DB1C9F9FF6A9D15675FD6536B50B2DF41682FB8139A98E320FE48
78F3577194BE04D971C72755E95A6B429C3E4C9366A032CDDA2F0B0340F42BAC
72348473933541E1D4FC806643893A641C49948FBA78BF2473F99D8050ACCD1A
381F3FCE72CC6274ECDD101300AFC93D1548DE4597E1F10895E14C415CB58AB4
7FAABA1B604C266E69834B68E6CE5EA8AC69ADBF68EB3D1734B6A9696D4C695B
544300DCB79BF86028FA508EA08521B0DEE85037F42DC2E8E27CF34B972AD10D
FD269E762E83D1FAF55AAFDE03CD27DD1FDF56247DD3F1CE4AAF3A3C3E59B2D1
6633ED0F116D6062165B9EE0BA0C870AB44BB1683934B279F5BB7BE9E28D9E58
369BD6AD6DC03BC62CC58C7733E16D2AC36A3CE788BB0CDA698F35F581F81646
27634D49F59423ACF4B1ACF80687D6383CA578157328AA019A4616E1CD83F1D6
1C1D0A16CA68A4AF96E6F89370958884EE2308DF9948122FAB8D553CA6B822A3
848DB1C2BFD00F844045CE78ADBBD5E0735B99A6E94EC375C735028B31B846B4
0FA4FCE9C00A5845D1C7E8F51710B4F1A4DBD8E6BDD5F051F55968F63A8507C3
86FCB705BBF46AAE7CE33CE6D10739F5638F9917A41081B83612B3EB27C2D853
09DEBBFF3359F62327FEA224A856E0B7309A9711146DA8AA83475C093525EB57
29D8AF505B26F99EAC72A872C547925F16F0317449079864D54B26A575D9DA9B
920B20A1772D133D36D963BF8667C8DC3E83CA195EF6ED3B6EEF70913E3561C7
2800157712E85E97349FAC7329FEECCDE7082D8DB99454AEF0AD0088753DEB92
924B8AACE2305083636D113EC79899621E1789548F30389BB0DED8FEFC208584
D5DB0E5C30E5A42DB22DD8E13A29F907AF1D7854D298A39FCDFBCB88AC0EA6AA
CCAB081537DBE0B7549829577BF4A90C0A7A3716E46F464A198EBEE6C79146B1
143AF8D0CD314243BDF9B00AFDF1540D3E87BC44C55328257B42D88099526EA8
D475C0A403C3E1A65F83A2B5ED9F240435345ABF01932612BE59E8C4EA4B47A3
9D9D73EA96FEF282C17A4305158EB48AF7F083C7851D5328D6D205F19A60B02E
80A85D103528A79957F00BF8849A73B9D49874E519B7D328D50FD6FAD3C8ABCD
6781B3621227B57A842581444E483940C97544F888E80577C8A673C79B2116A9
028A5D60D302A4701A5F1273D01BC49413E3FC2C0478F85EA7111E2293E78F1B
009C13E8ABAFCCB76A863BAF9C9E4B9A8A99F193164A2720DC19611F81BC0322
D696181338DF637A9DF710232E7E9DF8620C266E90C750DF1529F5431782DBD2
1EF7F58947C4E3A78E0D7EF8C599655C725A5B7CE517C24BF6DD0BC6A79A2DB1
F9BCF4935A60525D6DB5D83E17A24D901AF15E9D092E0A344C1326BA9E6016BF
6C0EB16907D2C521D80FAE2FE86463A660FCF496AF0126C34F7ABD28442FA100
81266F320A731B90C4F19A0999B940D7B30E13B1118FD1A285202A97A2B34222
9925F735E97C672C57F9804BD0F190E41F7A07E082CB873440C4648D3FFF06A1
499A5C7EDD427B2B71333FC04EA41A3D47ED79F3CF854023A8480FCE5515A88F
AB1C999BD8C391F4F045EE1155E8E9933349BC0DE390729F6D0835CFB91437FD
F5FA3F59048FD4744DEF586267439F149549A6615B4315E82C359BF2EC7AA7B7
FBF5919A2893BAD39B99FEC7FDB24FFD726EAE3C5B713364C8B41EA510D61214
6659C2BF0FB695968BAD63CD201FD65D0138274CAD5D0847B95633BE22E59C94
12B765020265AA13BFC463A010261430AD895A1753313769F6EB3AD5A1FE4511
7A0C41ACBC43774A41103390DA3F4B11BB195452F6D1A1689A2BBAE0007448F0
8C15488380F6167B008C218F2F1183908AC05B562AA6575B60534EB1C8D342D9
12DB9CA8C96A19283EC977E98E31FD3021485E3D82A817866FE481DF6360BEB5
D68DE9191493419F16DEE78804BB57D7F61F515257894A017CB2329C94439347
6FF4309FBB870BE237661B1A9FC285027C1511837B493AA8861BC65F5E0F70C5
0354F5FF8A4DC0A288621885A0DD8ECC5D77FEA9D69961FEE55761BFD21A9A9E
816ED18369F5F803FC20B59D0AB929D1E7E52EA0D0E947B245D9B2E80D58B526
E6470AEA57996C609748C98707EB49780FA11BB703F3F57C1537832E5CB24F73
3B48ED0AB58F4EC29C4AE2583AED8EB7CFD482592CB40A9F6C4690371D368C2F
018D0FE62CB5B237C6925E0CB5BD9681B6E1BE3E784AC0AEF080969A3EBB4978
F040F50F4B71AF1DBF92BA2C78BEACA46ECF09B6F5584C3E6D91929E2BDCC9AA
B48948F5212C24227944DD3AA8F446B34168FD024E2E26F45D3409E8DE1AA362
DBEE0BF9B2AEE7620A275F3BE911B987D639935B174DE525B82E8AD4D243D83C
9483B9FF2E9437343C272DB779B89449531A4F3AD784BDAB229EC2263E472ADA
90AFC679D6F78E0AFB2D682FB47F9884F052D1DB42D1EE993709ECEBCBF513DA
2C7C4F8C9E700351CA23FD26135C7D8F74670811C4FE5B32523083A478CE3F3D
0F2B9E19146748C2A701037918C9F3EB2C4FBC86C8DC3B95771CD773B84358D9
B73BC9B40188F832CAFA7AC314390DC31733D6E153BC39FEAB0FF6C3CA61EE1D
E3EDFAAC035ED733BB110416373213DB825760537EE8B52C56F2F170BF02E53F
36039B860E4D93548CF104B3401FB796566FD7BA239A37F3702FE77FB2E695EC
F239FA6A2251C779DBF06476574485C3C63B10B24D392AE1C80DF51BA5837B9F
9F85FF266FC57DC2FC8586722AB5085080E67E0CB7B9F6408BC7D61A6C3F7472
32CEB3D7434FCDCD142B021236778FEB46ABA851524B5C1557C76DD2D30E303D
D8A08BBE9A4203A76BCA96436B61A4AD9EDE6BEA1CA7BB7C46DA941C099E23AF
E36EA453EDBF5D2219245F73CC6366DB53FC3FA379FB4FA013B1694C4971A4F3
C28BB1392E0338BAFAB41112CDF873FC181CA0042E22BF6462CDEA3A3A21E0BC
8923EFC2BAFE35D913A38215F99EE409F0EF5A18CF9823258169169EE605DACE
2E0D9039A712B032C37FA79049B46B4EA129ADFA88453934CBF025CAD65553CF
7F5D5646A56A4378AD57294AB13E45AE490B2FF92519D867320374E216FBBC5F
5978A84B02E806CE058BA00E0D86205684B025179C6C7BCBBB32B844C62BFD8B
CDDABF5413CAC8852FCC7D2E9947269AF552C8AABFFB8D9E646395B6EBB0260C
08604CDE26B90530C8A76E85F59E7A5F43935CC69F35A263D304E59DF19D1651
B1493BF1C48EE06947577438C5CA31D880D71FC4CABC54D16183A0C578F49B43
5B3946BCC044D0F3B56763BE730A182AA0905D2DDD8B722FC4FB24A48CE4EDED
39ABCC7C6731A88C99B51BF1A323D7C79F682CD41ADD95A5765FCD40384294D4
FD9DE83F9FBFB5FA2556993F547DE7F2E11F622F50478C7B1583E0656CD6BCCD
D7B94AC84E717DC761925684C6A2F686D0F2155BFF9E6D13DEA00A14CFBFB076
17827028FA6627ABA1EA34715EB4E2C3A89FB1C021273AC1DE3C080F9E2B3D94
167FFB05963522EE759E35C9369661B3B154D62DDE4D861DF4C24B1B1A380AB4
2157DD306E410DDB4CF20AF491CE10C59CCADF877C3D2460FD857489111C889A
27DA3C55B18896A5E5A5468249EBCC782745C4F2CF9E8F7E7087B5312DD2C196
8317DF71D3A64AFA048E26168DD8F8DD304BDFFCF4C472B49C8AD1CD2C77D97E
5AD54D513AD96845053057DAF6F84C74EAF2B40498A56BA3F1B7EB0112DEC884
46D89F254DFE7DEF57CE415B6FDFD7B21F6BF2EE8EDBB7B4BCCEB58A479E437F
012C40459F541A7F1A77A0FC5963F5261281FE787494030E4A181FB1DDFC88F8
AE88BB0EF30CE83803EFF9ED02D8CFCDEAB4F27A730F7AE6028714E8DCA8328A
494A0270FCAE1DA5FBE871D8B442388ECECC0043E8689266DAA74A9F87E11097
49C6978CA8DA59A8D50A0D7466A5CF873F749D05643AA2ACD5A1352817576A7C
0E3E0040DE3089641D92788514703EAA8BAE5BB69E75B05C03FC8B2E1FD92E87
53D2664BA6DB137553218EF9777894BB389AA2F84B5AB72E22E7B6DB9FCED29E
EE474CC7DD07E691CD50942E49054B424054F627698FDCA6DE69BC54474EA062
D3EA2BA9EE7756AAAED6478F7F971657F65E1E54A17BD3AC6AED311EFF04D995
6CD0A4F9EC36C6B1FB0C2A8238F6DDD2D621BDC11368D2B191E4C7706ADF681C
D2FE5AFDF8534D1DFE60AB9BC4BBFF17417389E6F85D391EF7C1C23D0C37B95B
CF8AA1AF3F803857A1A99817D9874940F75665543A755A726DCAA03ED04D0918
67EF7697954A3BD36C6482D0F39166089315A13C74C800ABDBB06A43B5E79946
9F40C8FBC133C81C58326A78957BAE1F009AE44E587214D98712C8F149F643EC
607E69866A7C9A89ED83868F6AAEDB2D7AD5E44BB174992DB8D542BE6633CDEF
6A1A6BA8402AB045394A84A8133F0026FD5988F56C54E68F2FC05ECB43577907
6041265CABC028E2938D66E51DB7FA00675EC32CAA0ACBD255B30B7C0B861543
F31C9E016A6647B3262E3E73433B4498073417401A3081BFAED952676CDC78E3
9C3320A64FB25B1582CC040D3DC1A9D0EFD817355D4F8772E94401F9E28A6F5D
1302B4557E5419DF3B1EA6B9E37F7395916C421D27476E1C67E04C692C6E4351
B1E24198E0B678CA8492956F3DEC0D65E00BDE4684A8FE7E5F4803FDFB6ED0C1
7634E7C5B3AC38DDC41EE0754468CFA7E61561FE9CA500BCCEFBC89CDB68AC88
25128ABBEEC4824929ECEAC06A0C21DCA5B646D39959CC5CDE05CA9B2D7189F7
C970E796D0B1A2623AEC14C52B7C58D4F55FCB83D67D926816D58DEE9C8ECFBA
59142F16B048745DD97A79B72F680C1F3C29EA3404B240F66310FCF323C291EA
16C6AA667A271D7F44AA6061EF7555A606D248DAB876B9A5E0844B1005DCE85F
BDBD37D5F03F9314770AEF294D318DC2251D11695AF35FB9CFF7942D6C992755
43E64E5D8F374CC51FCB15DF78A938B8122FA9A9EB91FB6181ACC5753F96248F
07815C7E080127212E2F14BED34CFA346577954A1C93F34FAF7C9C0DEDBE1CF7
4A3A8E735D338B3AC36DF638E7DE994ECF1E48F9FF3EAD71B59BE85A544018F2
6DE17A3BA6E3B8BC7A60692B8AC1C5DD49926AC996CD0D449AF385849226C896
C788593FD61E5A0DC9C09A0159D8777ACFE9528D09F38B218EE4C042A5F182C6
B85964255F7346DC20660FF0BDEDE783BC26D8AE0490E6D201225110FA3A8241
C39E8AA606DF10E19F654DC0D5F369B71DB645385D678BC2CA6EA2ECE3208369
FF0F28BA9B8D1C88C6C3D14EC476E0A5C99EDB7666A33C61A0F88BB9102925E1
D03B98C42383BFD7105760D77B2C2AE385847786187DD31AF10437773579C661
F3715AF29DB1C1390A89A72BF7F0FA724A4CAC089B3E9B5AAE9E0668E3A896F4
18D57F632DA7E7B1B1C68B76CD782FFC72D748F32BA355FECF70EC6E3B4C9672
856EEE382B2DE2BB3D862C6AFEC289C5AEA84A900F7E85741F0D3278F775FCDA
12372686B1FEEAC57CFBC5F8E6CB2432B450681F6A290045B943C9990C495732
3CB903C4CF4940DC6157BA2EA2D8284A4E0F43FF0F6B7B7E7C5FE5A0767D8A41
9CA12BA41C0DCBE493EC41B1071F529C37DE7559FE6A69AA3B2602D7D2DC9F8B
980AB74F300EBF8A011023E89E118EE326354F743F356D8C3700B358FB29FBEF
7CC203C6D210C16294C086343CBFFD549B8A39453A5E2216DE1C25CE223DEADC
E72713D022BE8ED06339E508D2D14BADF1CA4A6A6BBDC84CE75AEC42D40287ED
52A5D9BA300C0FE5A667623614454903102CB034610C519DC55DC64750A0F471
5C8E18F68A3FAF0BD2123EE51718D9790AA505EBC12D763FBD6503CB5D41955D
581EF4E65F442D15A9CE48CB095FDD97E3CCB9C5E4651D7E9FED71CD1899BB4D
8736F33103C2CEF1DBFA66F826A53597BB93FBD9CACFF3A2931889C97DBF322C
048D03D224506E855F8E3E5EDF9CD4B4CC12DE7E054C555E0D6302E22EC99EE1
CEA4E68A51C06A67FDAD83AD508C1BA377079ACB3D98C4A73F59836AE949EE72
8CA7F0AA350D33D22115A1AD0ACF4737BE6DC090EEABDCC706888DFEC8AC35AB
074C4EF2440A623CFB9FD8FE1E508AA35A42D356F88904DE6227F8917A078D42
124BB32DD046EB8F914C8032D7A89A6CB94DE27E39AFDEFBA08D2A0093B1C31C
749425E5F92603EFA80A259764CEC03754F9E5F764B8CDAB01E8EEC0B90B948C
8F92CFB8EB66C2276AE07DD53A451B7203BAD7449C30686141FD9BFF9D3F8842
4D0CFA1D32FBA36954242155FC74916020D85A1884D91C49A9464F262D7E484C
F26B8C6318A84D193BC1DBF4D14FCDE2E675F71D82D4E755FA50216F1B758BA2
2A7094A6B326C93C5E734C2674F646D82EDBB7779EE6C59872FCAEBD65164735
D7189B3E9BE843A42C242507921E828DE095E2B94DAB8171343D6E1A878A6C6E
97737D29C0DD6121457E45A6484A82690F8E51E30E7090765B9722A6F1AAAC13
EDC526F59DABA970CB38BF9675A6BC68C7FB928611F87A61499A7BCB9F31A51F
DC2570A35C795107CDC6E5239DEA5483D47FC04E61BCB7FEEE9AFB15D2F09EEA
3AD86057D41B3ADB10679C2E4A79DA8062B027447EF5F1A93D8A822C050BE059
A671F69E69297304936728626F18012C89A5EB2E4A4C69618FE8EEEA176B1383
FCB5453D803DB525D66A9BA69FB27A3A009CF03BD4F5B45367CD259932A9480A
D9D27C348423F43139834ADFB895A90A3E23A06FCE7527588077FEE33FB49702
F12D1EB2DC5967CA0AA80FDDB1132C77A8D987B9909D602F361A28044476ED26
7C9F9416BCDD00FA4F65699CC5AAEDFD62084382C41CB74EBB80E9F926A1D2D1
F9F24EB79FDA8FB24FC3ED8C232ABEA44C5DF3C9769455C592277584AE005D84
8DDDF6BBA7E8F97EC53D68B5C7D7B11308C276B66083D962250CDE486DD72554
7EA9D73902FF79A248BBB45582EE4E65F2DFABFCBFA078EF2A65F3B59D2004C1
3CC4302022379E96004DEC17372AD7C608C6FB78515AD150702190BE664CCB3C
59D6738B4CBA8FFDC66E77EA4E437C803CE2498CB77C0165D8345BD37D9637FA
F45B394FDF2D39B44043360FA737516C25004236C10EF1D812C08A0E084F4FFF
42ED973D99DD705D1EE2693CC0401A68E83A7B0134FE41223A8A5BCC5E9EDCFE
50942185A66B65D554CECF72ACF8DEE92A93F5598A4E00B5AD30E1F934EA7ECF
FFAED9991343C2C24DEB74E2AEF327C62AA3633A1C8CD78441DDE68393F1FC65
A1315328405DF08395130A44E89C39D206543426BAFD56591A11F26479BED798
24EB83E370880BBBD0AF719A1E0B6EF4140E2744364894CD8088BF4BF99F0A16
B77981A906C6CE4DB6F90585C75CD51E4D5B6C07A77BFD50A97233AEB6F5B79B
14996A401CA887FF9A0C64DAC27EAAAF12FEF750745989CDDBC645F29F756E76
0BBB87F3E31852D9762E3AE7A24523E49A07AC2F6196F8DD622B80AB8EA80E9C
E424173D3EB2B91CF579DCE2374428F167E57A59372A6A001BAEFFAD920A3E41
EB8F672883879D6590916D5FDD0960EA00981013F2C2DEDB233175182AE104BC
D28BE99FC267510AB3AD565AA22C25C22C4158C9ADF56CBF771D762BC0B61352
B77EDCF94CDFA06E18533A9D2BA34DDEFE059374D56675ADA54F2F03ED2A4EAC
D5736626C766EAE495B7BD21B93CB3FBE553C1E3F43AD7A5514902552BC92544
A5F5BADCDB86A0E6655AB7431DDEFC993D192F1EB980F73A60A28E58CC29D03C
FB97F0007E9F809BC9769B944B336CB5E8904FFEF935954AFB0C08073ACA73A0
4E55406FC73530CD5D3972074E1C95F4A4B7F719BF38344255034286AD92FE7D
4EF6026C0A7B9DB033E6A547A5C29288C6287EF9BF3DA8AD58082C1AE58F3362
333074C8C49AEC1CE661311F4AB328A38117CF37BA6E5BC2558749A1EEF44B06
A39C2952231B098EAB86EAF60344C11208528E0AFA835C98529CF1A6899448C8
FBE06F04A21087F89E7A056739CA43698F801A74E7EEDAA15F02AD1A72F4D374
7F3FEFAFAFEF90D97280C735F47E039ED4F9AD15ED4682A0ACCB65F1EA75F7A1
58890670E7330CDD6D7B08B252AE66B83D15EADEEDE52D50B20357AEAD6E7657
6C8FF0F47194F9B9E1F4296A03F5ED26BE41D7BA4D239ADEA0BFEE216E39B83F
D32480F6BA6CA65017BA30C0D0620C4C9277D3637B4E3D9BF8D48583C56C9358
672E7154D836F1DA56F39D27A5631BEBBD9E89D2300580CE11EB6313111123AB
EF1DDB3390A5297CB07DA744863FD8EA70585A5F47050E8F2D3396FEC8020ACA
FEDAAF618DBC90F4DFDBE14FE9EE3D83B704EF2F001154511CFC6C175B1C08F2
2890ED8E581544130BC95DD65665E065DADBF5AB53289E21133B4C0B5AB6E14C
051410A14E0822EF99DD0267153A360C9C941AA7672A048CE49CEF98E4741C61
9F1897566AFF73842811013B8B48C18B5964CDEA4188A4298D6A7ECA357A5631
1DA8AA165798D1F9A97F652F811C5D4C50F0A0AC2F11AB475A82BD456C8742B6
4B7D850C458FEAD5E7C3E94CC5A16B48A45524A1851DD69DEF47C9C47EC3968B
AD8E3EC306BE23FC751ED5030290B03C9F7F76120BB6744ABC883034D1F3BAC6
B6670E6D6D71A1CB35FFB446FE2CD0A85B48B87B49C04103ADD18D1C6868ED07
E53CE8D779A42F56054D9FF8650E91F5FD1D09F8E21EF907890B190182E59C2F
D93E5AD8FAFCE739995CC7774E5F3C8571B0357992EBA51CDAAE67B93642D805
F0D4C8861932B9E75E499A4499059C6D013AD2465FA2D71F701794AE9A11927A
EAED7B4FD5CB7155319CDE436704318C315094FF4D364E32FB3029ADC0FD2A39
EC271CA4408ED61E921162B9F5FA24D46D727147FBED115435AFE1FC81B70093
5B32F44FAE631B2C0D20265951913549E67EC6521AA6B34D62
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic12-Regular
%!PS-AdobeFont-1.0: LMMathItalic12-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 833 233 0
%%EndComments
FontDirectory/LMMathItalic12-Regular known{/LMMathItalic12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic12-Regular)readonly def
/FamilyName(LMMathItalic12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMMathItalic12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-31 -250 1026 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD11234369CB38BBC21C40020C4E57C
950DC4A5CD271B5530E91DBA55EA1A3BF584D9405556EF9C802B109FF1EB2B0F
C350D7F091E7B613B08574EDA3BF27099BC2EF0E503A4C4724614A73AA054756
A503BEB31E3FCD96F733D0C5815847DFBB66DE4968A9B389FC00C2146C4FF68E
076BA8B3847A3D8237D36A6BBDF0096290F1BCD02CC66B12E0070215D5D8306F
406DF7590940DE35CA0854D3609249AEA4EE9D3D377A7996C1CC2E940132A90C
F633C774985DCAE8E9353607B9059DD211265A0A346B1A062D80C64B5802A750
D9FEFA3C9920A3DE942C65BD08060AF33C91CFF62930F65F9A42F70B83B0E077
E169BF7F5D84F15D59F8A74BC2EE4A7F3ADE36F38C3A661F4CC9826BF73D7F02
D3CCC267927CAE22B5ED695D212FC3B669F9BE369B7A8D325C3FB9D552F175EC
29972562517E91E7B8D570612CC50B1A5CB6B94D030B0C60465EA21631F7A30B
44A47143D0C2F942B5D76384B8C3F2F197BB3646CBED3DEECB6513D3AD460F49
4BB874969A3663617EB537E75C1C1BF92749F9D147080EFF78ED285C315BAFA7
D78B7B4B8B7CFD1639EA303ACE986EDEEBA9350F92529C47EA7689779BD50CDB
D1B3A68B383B54B51F4FD77D6458F15AFDAB471DEA9909CAB29840091391F2EB
148588D02607411F2E802B9CDDFFEF1C1FFCC9EED0405371651ACF30808E8C57
682B734916EE806703B2ABA2F6910E0C75BCE10A94FDD1ED3E4FDA7857341427
CA0A4F7D30151BEB8E3D351E1E100A8A75959D11122C83A5C0C4C87214413B25
A6BFE44A42D446E9C4ADBFECA756A185E977BFF8C37BE1840CF90BED14A3164D
A8B20DFD9728E6BAC7EF9A114A217DEE75884EF4B9C60C040E8FEFB94BDCA9B0
43F8F6EFC1F52768B6086C41EBDACF46445AEEC02EFF10D4FE13601C3FB16EBB
96A0A60B69DE009F15549E0A5D45A0357FA8A5AC12E289CF2D907A6EC2FF53F9
8821703295813331DA7761B1A0D1337F0779776AFE85BE8A59526694A0F4EB05
67316863FA73E29895CBABEF51AFE1EB024F24F6FB79332C017A9411BF924DE0
E40A24B0E1B797094DD456CE9AD3AB8669A69121B16C33CD949DC6E4C61EB730
176DA74C7DC0D0D0A18384F44D6DFB8677161B8174BE74D7309B15320537D3C6
8392988141F31EE4BED3833D341B2ED787102912117E89C1762D1D58C522E991
CF63E027CDC6072975BBA855964ECF98B21C50DDD5F5BDCF9DF9A815A47BDB3D
FD957F7E5F58E9F0233288E360BA518797DF10D86BE9888BC2427FF8F9282B5D
2B115E8947123C8464BC5F4243F63B1C1767A866F1F9B4B27B64CB3D44108486
E4550EC5C68153E7DC46ACFFC6C3CA7EDF84E81C7704100482EC15E4BF7FA46C
8D7CDB53136660494D2E9949A49AAE6BCC2E319ED9D5E2D6D224D301DE616EF4
75FADF08E27FF18CFA86C9A98FB9DB608D0760FCBF45DD8C31559C8B61790857
547C6FCBB35A79610367CE47D1EC0E12B5AF108B0A14AC3F8338E1910099477D
1CE91DB81A77C19C9BDB4426F2E6E52F6410BD76E446CB16D2C86996B95C59BA
14D36EEC6BE9DA05496091895880E3964BD3201977FE9C4724F18937391C3E47
F5E0B28AF6259E183CE31B0AB03A0FFF290FB10359EF6B59B669723240EF474A
AAC6D3B450D864B6B348DDBD788C4AD71CF90F39E1D225BC2CCD303A5DF0182B
DAAB61673AF9EFCF4289AD9BC9BB2ABD70E577990193AA89D277C341427D0A41
07DD5D6B4AA14C7EE68BF805D039CAED3E67C5554AF6DFCA625D5253D4AD8C12
397770CE7ED0967E6AECDE8EFC332AFDCA6E9481C2FF9BAE09B0455F73F94825
20AAA4AE05FA237BDBAAB9696E5753A18E4CAC6FED9AFA7459BA8F445251F6DA
9036F9DF1448645743C70661F7F3BE9D016CFAF756DE65E4B95327928767E576
78CACB1BE5D65FF5576226568D05ECC5B7ABF62D772FB4DFD9223251210E0C4B
EEFA8FDEC2C829EC6A2E0D9DFBDC28DEB481D305165D6F1C34F50E447BDEDFA6
5ACD9ADE32B093F5D533C0090551C1616F8411228413D50C4E6B719588E61ADA
CDCE2CA7DDEF84D0EC4AEEE034E9C8A35655F3C4B34BB11F6298661BB371BA0B
A4C3FC5B8B10AC5362EFE6A4271F2B6A98BCC944634407025ADD94489BCBE0D1
B74F8D5C7B44A10D44BF63153E8EDD8BD7A5C64D66319AE0C7A00D9FFB2ACD05
A3ED43457146464C1997DCC8EB65845ACB37DBDBD6BD0635AE67E6496C1639A5
610D15FFD651F751BA6360EE27045DBF8957E52879E3A37A9C25015329C02D15
43C52F4AE5C16FC04F0EFC689A06578897EC1F5C5A5EEEBA57A1B2D269D2BD06
9F980F33D5DAC4E275F0373A2F9F11FE2C9B850D96E8218836044E8AAEE91E1C
8A6FA80F3DA03224A019D7082891AE13DDFA0C588AB968600D1C69F250A4C5B7
33D99157EDD145012B2423EE8CEB30C45C806DE004D219400277C807E147EFFE
42D3F6E0645964C351FFFF3F82E48AD1E6311803E7FFBC52C454FD5A3F3BA1DD
D1894BD5A6AD833A4BA6F9B90971BA8F7A5FF1E1E6705E839D22D094B8CC066F
DB3521AB47D7CB58B241547C0478C44F365EC4831C21E4A4AD7C1EDE29F56246
0FFE83534654D0E96265EBDB69D428C0F2BC6FBF12805FEAF5A4CC0FCE641D82
163FFF56183D7C8A52BC5EBD38E6D55FC042F64DFD3ECF912B1D80DEC6C4F8EF
454A0A8BE834999D6135DDA1DC6BC31DE845D0A98AB8689F491F5664065263C0
460E80BAE6374E77DB7CAB8C9E4FAF9310626A94FA7F45A54BEDFAF83CE8D372
F337ED054C8992B7F65E9C1EF41C0EC617E0EE5062346259844571401AC5BD77
CC49914BD484ED97D876AC0A14019342706222C7196609349A83C4B381F605B8
2D108614E603ADA16BF10DAB786CE911FCBE218AA701E97AEDEB5835FBDFF25D
911FBF1E863AEE65CFE55A7DFECC1371659E81C458CE4E37EE08BFF43B74DEA8
EF0F3F480C47804056E1B2FCE54B2EC4E0F6D459D3596C0FC7013EE3C8DB066D
60CFB6D5B92441D663D0CDFE159EE68F058E8BBD18814611742DEC5455E5DBF0
E86C1B2E4CAF9A424EA7C3CA24CC1F42C544BDF8F1D7569A22A0C09E919E2EE2
A3D44AB1987EF09A43A5FA1C7320744CB340359E46527501A8AD5EBE3CDB6220
CA683F4D6E7F8E9DC74961AE7C020CDFEBBB2E82AA05F9F54F7132A7713519C5
F25D47A2BB89B23B077C3378AA57503F703B583651A7A44C8CB3C70C22AECFB0
B6351D033BA09A1094A3A10F7ED5457A8F5560ACFCFF63DBE1C569057E63558B
CAABF3E05E9C0B4694069E01574F1FD4FFED6F3C843418C90B46CC70B10DE362
DB090BF8D4C5E5446AFA2BA1855019E23C31650A2500114511FB7A56A278E9D3
0AE49B63C19EF1844E70B018EB6DFCAC34E4B3ACE47B6BBF55F746739FD87175
C27C026D41862EBBC9BEE660255089725F0C5F5C6253B2E9A73A6C486FCAD521
C983064A676204D65F4B5B4D44C200E571FA50DA6C1C004CEFB9B4377A9BD64A
7062571220F20FA1D151A51BD41DFC7946AA45C901D91E3A04B823F60A6E3A3B
373DA80BA283F7E88342CBEE7F7EB98B0CC57E82F1A2C726F6EDE9D7005A118A
A33FF784BF424DDD5BEFAC06B2A8DEB32B746C08895969F16E5C2474F36D3A27
E60327DE1AEBD868AE84B401167DF38394C2E0730543BBF9D45685ED96072EB9
A3355A95950EFF2C452B043825C1896C9E05DAAB7083B361F90754A729266042
B1D09008220FAA6F54D3241F87582C0E55BEA002E53AA9B8677FE764D7136892
ED42C5B355BE0552658B64744E67FC895D2E8770F5510B86D5C1BD92924C5923
1DED7446766448F0303491E5F136D9CFFD8D3FEFC32EDA85A8150EA81F973B33
CAEA5FE4C0CF761E92A86A745F59C30DA0254D14D82B0677E5B5FB099239A090
00983D9CAF633F89CCD0EDEDC622BD232AF61DC5177C971F5EFBFBD9E4C34DFE
6866F59FC32AD9B37FA8E20ADE9131D98E297127B07886A675D3F5872A1155BD
65C037BA5D16A8B88E10DA532FF7F4FFC4DF9981AC9B67B5AB6F3303EA1AB659
48E7A325F2F8F25799D393E1E9890A662756F99F4121C77290A4B0BEE5BF6106
82748BB6D8400D8DDCD47866D5C452EDA746687BCA912F4635531435A3B8CFC9
143B783816EE8A8E2FD588E84A9CC4966CFF9D50504BF29CBE56A26AFCEABD24
6B2D6B508EB8E16B590E37F6A38416654D7F04D333B66EBF5AB72E15C972A49B
467CE97F343F16F8AC2E73EFDC17C7450DE24C0F8C90C2366EEC089828830DB8
A4D2941C0BBDD64A4D32783C271365A85B93CD140A299B3B43B89F3333BB02A6
E4DB48392A08A6563FFE8433EA031ABFC33F7FB5795D04F80DED45911F9B63B7
F069837FF11C8B9660ACCBD4C04E014ED0614F460B994BD10B6E7C6C0F05DD79
DDE217AD96950A15C1A7CD4856E1CB60AFE2D57DFBB2415614AF27954DD98F37
A895660811367A43593B17E03F6C7B2F1071E116B23838D7B624232AF763A735
0C75AB0A0211FA4AF8BD4642CE769D59A008FD366F7A281EFD9B562D7A631974
34E83AB45DFE8F99C2F9C4E3BCEBD2A2A7880E55F6578AF9EE7435341435ABD5
22C7FDF797B8915C97B653AAB698E66E467200575A1D861E24ECC554283E0E7E
660CBFBB8CE0A1002C941989B595E23EB49286E3600A54CE858852F911142F86
59D26403EB954F761FF0EB86131CCC3305ECB191C30809D8FC2A55BDCBCBB510
7C5B2DE2959E9094C679698B4452239DC3BFC52E197F0E2416970E404805951A
FEF90573369BDAD4C51331EEA12CBA1BCDF9156D934B497AC4802446B28B8E18
3A51E84F0EE1DA70AEE4AC729CF5E18F12B7D8106DF29ACBEFAA0943195470BE
A1F4988C5A14CE2735C183E895CAE52E372E4FFB3F66A9C925CF620A48A0C535
ABB5E30C36F8FB0DE35B13E7CB37795852F3FE0370A02F9CB880E21FC768AE63
B11D15A49BDB5348B2B707D5E8B58B5CE1BEE491B35F9ACC687433D89945C002
92C2A6A0504EBBFFB6D5D7879B8AADE60175FDD6987143FC8127AA0F8B47B9B1
694EA89D87BE0E975EFD821D892378A13BAD3F3623FE1E9C7652F93F518C8B0E
3AA6AFDEF4C47C32E95CAD037F6F2D4D5036FAFF8EE42CEF5605945736C1D026
9293FEB23A80A8F3C6D6805D650C8F579B24EB440E6C20429CCB8535BB8F22E7
5F0234BAF32D8066C742F1AC6B0C4A4AAECB28AB5E1CC455A376259503CB5A7F
A14C249DB11E3E99A8D3D3E1337DAE4E37B248DED9FE5C77DEBC90DA3478E519
FB0A679383F071A3F1710ABF1DDD1A310FAC9CE0D3E8AFF2E6A6ED23AE815B04
863D010095F0E1FC52D990549899DF336F8B32F259D8E4A6F39F67B65DDC3FA8
2FBC6863B0919C2C5244D4CB27329103018360D2F3BB5A30EE7EBA5ACC4ABF2B
5DBA0F9C417B9E6D830575ED879FCA0131CB5676F98683067FE0FF1E63EE6916
82B0259AF6089335E062D33FEFEE7BC76B261D842A86CA3412D9C2729B43F9AF
FC6F0DF7C91362B5F628603E34CBAE92A0673B83AE864E48521A0D873134C876
93B2D65FF7E207AC5A5EA3AEB2DFEDB9D6168477CA1B0E24A1E7284661329A4B
5EE2AD82D78FA282CFC7D63B491CEB3BC6D604E2FB6364C7E5BAD52327515678
62EA96EA644B33F532E3CEBCCE4EB35B8DF1B4BA035FF768E311E4731B6DF453
7E008008329AB20B8A48A155EB792DF44C9AC39A6F20EEC98FCFE5C4F5B00AF5
3942BC0FF168E6BE2C9FD57EDEA6DB00C64FD60FA19100F3E6D88709F0B07D8E
EB29053C245AFAE6DE07385363AB719ACEB3BEB367EEB99000DC6BF15539C6D5
C9A453079995A03195A409E2CF0A21342EFA47E8B3513E4067AE45C26DAA6443
54621B5691CD367E8A13A22D60542102240FDE29452DC7CB955EF49B1A3DED5D
47BEA40BD27D869E35ACA85C746BBD368F8C7D444503AC8EA3C70DC705C8DB34
F769EAD54911C3423EBDF0BA1D29E93285411C58EF2389C5E1B808BA10E63733
29D4704CA616D59BC73CCF5E29C24E84BF27297F844A7DC46DFC69EBD6019BE5
1E18EEE27AEFC86363460474C6B9344AEFB10BBDA67D95B9A157D1728E1EDCE8
A6A3722963724E3B27480B7AEAF8E3F8CA43E5D0A218C4E8622606DC3F43776D
2D087FBFB63239FC40679D884408B5E5196CCE07EC61FE4ACEECC60C0B9CB9EE
E5D83916D58B236724C0B6435737ED27A6F573A41BBC62CB64AAD2B7C2E07FBB
3E190C71E6BD1DA20BD2ACE4343662BA9A678146201FD98AB0F300888D95D2A1
0CAE1CDD0C89F1FC2E4DEFF565E638AD84303F5C6FA6D26B36B358C9C016ECAE
99E65C5854330E96290E76BE486623BA8ADC5A1536B760F9F92867BF74C17730
7B79126034C8EC5CFC384A3402858E328FB019A778DE70868DA8773FE867A54A
DBE104DB2FA9EB0ED412A65F8762AC6A4636C38E4454D7B20E6A11A39B92E393
3167046C97F3216E151267D09EE5A12F83
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E752429B985F23EBA0C9875AD055D8B1F640D10DB8F40BBF062F476691
EDAA1D05C5591EEDC1B75251BFF8576F1C9CC5C0E521392A2F0D5F869F8AA462
B3883A673A976328E1F0DAA22B80CB7737DE2537E7B54F5E1643E30046E87CF3
8D9A45A973757BC16CC50504033125D2A68A1C97CA095C56B3D62783960780B3
1693596869FAF5692AA8FA6643FCD7F55E72948D2DC55AFC5016FB2C48AF9D85
192393C682B739EB43CAD8C3FD4053B2D53CF911352E2BA87A65F8949B0B7918
EA727DE4A08DE07B71365B8F31103159F65D30A7A318C1056BF638CD20BB56D8
6F22ED3EACC46F750F405FAF96268E80A409CD8AE0F36B68AA8C5FD2E0E871DB
D2628AEC086AAFC9F04CC93440E1A8B0ACC1DCADB778837360339A25C08E3B0C
E768240F0E8CE9FF939E4B1A6365664AAB69761B7A9C7B95BD29B09B930B0D82
F2C39F9BC0B94E56C48DCB22D8F0CA6C633BE68E5977EB3D88103E4230C6A08B
B4FB0CDEA7D44636102D47AB90B92FA42243943EB3E77E6CC38DEDBB2DB8BE77
78936B70FAE12EB1E2913B766CA2BAC3FA555CBADAF2CBF6B7A216FC93470554
2C841542BC1FDB26DBE389CED193E28A19CE9CBA64FCEB47C4D9C7891741E0A1
23FBBE971ED93F797C02EA830678317452481FB78DFEFDB25A3645AD3979D2F4
AA17C624CAB35B85963C6DED262AED5DE92278F31B2E573FD86696D98800443F
32CF695BC103A3ACA687FBB3F42AF9C89123C719005844588667C3DA28AFA523
BAEADF7BED1F3B5D595DF571540D0855FA377DFA6880F525878D6A3D1980C7D1
05554ACC5D07ACEA1E0D27664F6DFB6EFF878D0A68604565D0BF75FD8BE023FA
36D164B7BE25F9F811A466CE04C2CE5A774EE3288A245769B7ED30FCFA10230A
D6C9E809341BF5E55E58F3288F7298D62092922F07027352BC7C9612CFCB7018
B3394AF7EE7076395E67C3CF9B71BE069AE6C6C412F86A496E7C77173A0CDA0B
CC46683C239700CF259CF668B9F5C990DE3196B84BE792F51E17583FD4A83178
989638A37897AA769D74E0B3A299DD94B314F9BAFA7217AC70D8D9D02544A545
F6880EED34399A835514CCB97938F3E012AF4D68C140C6CE231015D93CEFC522
CF56EDA6F3147B3861904FBF8BEE6DB3D2E71479CD3A02BE03C555B0808D40B9
53D2EC56876076A116EE7E81836676237F88C519F8DBF39EC35FE41D78CF1665
E3FFD09C78FFF428AC27BCF0318D0849935822699E31F5115E7854A22F46951A
51F24526F7190B18B313DC58AA2EAF631A48ABE394668C6F1CE9AEADFB56116F
FB38C388F96143BA870537CC8B3E5F2DC39F9B930ECC63475BBB8C5F9A45218D
E05C4E6F250F6E544D6011F65EF4808D3D0158097CDB6E280AA402229A6B78E6
AC615258668BFD3469CD663592BF1214E5EF1C116C4DB47B805E2F60771168CF
79CF10DC2DA8F2BE94869AA570DF2AA5852113C51CFC85C1E41516CE412CB410
BD026231E22A9CD0F664D76D385CC1170476B17BCDA45C640C583F16DA207028
0C58570A966383AA9F7CE59375525369CA6A559BEF0E05F11CA9C72A278C045B
1D2572EC08DE1424D2420D550177794FB3DEBEBE9E4105AAD34FF119AB2483CC
A034A95AF0B24B801710B398D9E9A95138859A819011423AB5921DE8EAC56ADB
58FB18C27A41CE503CAF2E7EA6F673ED5F34F1C1D20B609A152EDECFA26872BC
3C8C802A1517D9C6FDA3474591F19D573EB051F551990D0331B2DEBFA31B5010
3F6332290E522C15C69352124E1051A715399BBD1A6D3704BCBBE1FFF89E56CF
9C3EF605898309C7C3D20DFBFD10DF5FA30F409A76AE8021045DC09C95C9AE4B
4EF735A5414D985F6F79100E7045B930267F0EEA9BE820E13291132AE91118E4
7B8432BD1AD7A9CD912F2BFF83A2C4705A26FCBB7F8E45CB2FD9AA2EA98E381A
01BA4C4E31747123F20A0A721766F9D9A6769FF80B400B1EDBFCAC63CE15283E
72EC447BADD5BD58B053A11BD770399E31FB3B3D856FBCF6235BAD1F0D38E26C
3518FE6411F2A5FD4809C085AC2D60FA311DC99B9100C1A59CEF4C877053161B
59682BF5F2D85F2DA7EA0FE603D477F6E80DEAE0F250811BCC646D8CE2956C78
B897A5000D73AD32BD99B92E6E63BF8D79777859EC0F7FAE47F5A0CA878106F5
5462D3027DEA15E36AACC0E7349C8E60D6F2439E2D50DCB9D96C6C20D11266F7
913970C783EF6D587F638339D1E89A4878ED27E515FED0D26FEEE69602B2BD58
D146C077FAC71FD55A5490C89142F2844CB7E6352B01A448D4BD7A06D8EC0F00
E69984EC55E0B487FDEBB3F7FC3F4093CC6E13B87084E461E23A4D6862F0EEA2
84DAEA8343FE913EA90B9ADC7D025C2B8EA3689D75AA38B5222166C447B82E75
52DE05711B3883394BA9D683C161A48059A0463B17F3DFE8A73B46E913B99D2A
38E7FCC667A5B810B665519E7E1450E00BB9D0279537763ACA5F131550E83404
04E208B9C0B0A118F40332BDBB431AA70981E77AA5E5E76F43E730D9D3D047D0
B3EC66EF1D37916398FB8CE955E12D8A89ADEB1AE1EDCF91BD788D8F261962B4
3870D5928D160218A297BBD3BEA22E12E9C4197D0F3835C0942AD6487F5C9B20
C9A597910685A9BEE4CBA868D352ADC10A564782DF3BD57758FD145E769D4E88
BF43D19050DA58FFD64EB7B1D37BA13752B6C966C7A1397D80160687245269D0
F27E87B2186D931D624120B81967E58ABF5DD66AE39640224A518BF378B5CD26
761D1ECD916FC625A90EE8A7E00080300F0A05D265549982D56614814E10FB25
DA53070C2BBB4411D9608F4FF0B2E171820C734BD20399504F034BFE4C20E7A3
1326783358CF8D4FA48C1AB81741FA70BC0E0A4BBD104C7E5AC05CE49C6375E8
9F0EAB2B56BBB89144CE810C78D8CA02BD7CE2AEF79E27A7CC1D6B68A5B9F504
BED3487D1424CA82B8CC60A0156706987C7D0DB913F1BBF8A7B9A275E3345BBA
213B3DF67C4111E9564B59B724BD65916BFEEFE9BF03AF9D84DD2AB94847F33A
3AB3757D2C8CB688D50EEA68DEAD0613A62C3000C037092ED0A93F8486FDD39C
FCD0E8A6224BFA03E8C6D73F4B8F480327701262285C527828E5E203F328AD95
5AB433987B229534C53061C3350047FB20E3887F514B5897FDF225685D18D679
9DC141B7F6830D6771F1A3CAE655CA173FA57D400530CA6FABDCCB4325478D0C
93AC7EAA9DF7605213DEAF94C7281D9AC68D884E15ACA3BA68034F897A2FFC1E
F76FA2A69CEE7F1E9543904F1773969F65553C3469FD85B2F2F89F0E547BFBFD
F62A3E47DAA4EAD6D47F0305CCDB297C320A48A3655FAFC810CEC6F6D68ADA4F
AB5DD7F61DB94072B0AB8F1ABF62A78E43E1578DEBD2D05109DEBBCEC64AC700
4C28C4F0A5E3A003423B9958C73D306B2B4A7C67A95F8B4E737992642BD3701D
39FFAD94524A7752560FE97B8E99A12AFCCC5044D989BCAEC863BD15CAB7CE63
0194962E4183C3838D9401260A743447DF953444B29D7CB004560D0685F73E87
72FDDAB87125F419F90D165EF1C2A06A9B7500C6AD185B4115777C6BF9C24D88
653589B431FB84E4DDB650C2F783594DE6123D3142FC5C99973AF211F2A2A05F
5A756073B85FEADA4823BC1467EF2FC0E98A2BB28E5933E2F6E50D3580C547C2
54FBBBDC95998DEF2EA825E3BB2AEEACC0F30841835121B7A7D7A973F2EF67F2
795E6DD8CF55B9823AB2B15ADC328CC3AC493DE8C2F022EBFA14A2976D8E3559
B5FEDADF4E23A07F6C0E1387DD54F5C8BD071C4E9A716737B6BA413F846A887B
D1B3B89EEF73565F3D0D2D1E40E4C2811D37C9029692DF8E94F6FE39474EE13A
EEE65EC0E099C29064CBC0503FA4C89D845F91A107C8414C1648F6EBF6C8B1AA
7B2F72302AC2C6E6E9E4FD1EDCFCB8C648B2BDC18FE07B44B7E886DAB96F8B4A
BC3C584457B1565FE02E26EFAADB605C5CFE109AC7A355E2283555E10CA9070F
BB98E2337281FDEE7EC20EA060A062235F8848946BD058A0C86C794697BB0674
C1DA26CAC3FCFFE73689E2CCCAD5DE725AF6C7DE282CAA214D69B6793520439F
2991BEE6E427D4E82FADAC6C3829AFE1196FFD8D1D0F6BFAFF4F9062FDD08665
FFBDE33DB3EBD99D8110257DD0B832CB4209074A589041E903F6D89E22D34EBD
2B3C90EF5D9AF0A0DBD5145F0FAD88EB09D1BD84D00D951D4CF9252A4443EECC
AF1E56E5FF02B9070C1A92470E3AD7F1CD944E91ADBD1EFF555FF3EC5664191F
1C11943BB76D70D356FE5D145C73670D1A8F71E5C4FEE96C8D4DF87FF05432B5
165C8DDEF25DC98CBEA51FA99398860E1C252C17EE576B7ED658ABFD497DD5D4
E49663A5CA73CA347E27BC49C7DBD28DDB3AC7A78020551168A47ED789C2AD9A
B8C8FB7EA2F8C7D4D9FAB4B8DD91CB69558534CCE31AE7E157D0B060877AAEE5
14CFF0AD50200A157151F7625E63296E325E2C36D5DC45C5129C2D342CA7541A
75675EB2F1A5BF25461BB38C84D0651F4644CF51DAA8608BC3B698A22BAE29AE
3FE5C543DB648AB544E8212B3B2F97B5844022274F5EA46CF4E9D49CADFF1DC7
AD838B09A2CB6136CAE6AEA52ABA90745D527188599641549149217DF6B36367
A67BA60DB09562E82863F6C001ABEACCA36DAC81C30C11F98A77F4D100499847
E1102CC075FA1210881D95D6ECDD37B0B820176667500E58782156ED77373459
6699116573EB74FC1C83B091EA1700BD5B069BB7DEEE2BB45E7757F7BC00D85F
75BF5F32B350E2CF46BA0E8D0120BDB3E742C15DE5A8340318F907D7DB5591A7
08C83C63D6D457915A2F41B21629926169F4AEFD81BA2A880F4799EAE1C0C57C
FBC28FFFC956640872B49219FA101B88EBFA3E47EA4515043C418049903E3F36
885AD45509FC3CF7A376A608FC51751104BB96EAF8314E2322C457EC6683D385
525F118C799C34B50840604E7C248CA5BAE81E8C76C29FA3779933221D8A612A
2DFF00179C41CDD34E7015DD7198AD6EBD2BC01221F7E35F8662AEF8B6203C54
59E883141A505B275EE1333E6958254B6D96C9E54D47A12F4D299F67168AF7E6
1F19056BD1DEB7FE32A4F4E62D202CE86DDB34598B8CAED5B6DA81A6C816C747
568DD57D21AC8F8B1CD8B2BE97272017FC8176FB0988076E76EC6E8B4CA921C1
AAFC0EC3E24C38BF6D64E9C259ACF279C3272383D7526CEE1C178B1C6988F963
BB0D7534D41E675EF1BA59AA153AEFA7AA88C44F92801FAC61A4EFA2911B55BD
7DF444571A774CFABE590CD7C75BBE8B58EDC3A2C53FE35CC6B22EDC09857DBE
3019A7C60107821040CB0824EE588C4973D9A0D51FAE6E5FC9F82277403C5DCE
FC2C316D499F60E7C6C04DE9C117345C4E51748D3A5C5167780590DD9E188017
79FBC3307C0BB8A5784518676D62FF024E380036EC605313952366F3C351EFC4
33256002C59C39260DF18DDAB0BA5A40946D550B7831A2EE2670B2FC5DF8A50E
6F0C48860C52FEEFAA70B5953345568F1DA030BEF5C410DCA1D11F770EBC2E64
1196A40F44A2BD2529610091D8A9F09161A41BAC6A15727CE914A1009B2517FA
41ACD230B1E0CE76E289C42EAB07B0F60452B537A69B9EB54A68FDED4456122D
483AE830BE0C173A0D256118B0867DA2ACFA39F9F6EF1D81C607DDC242707D6B
53ED198367C7D54AC750A007498FA31E27B0F86C6D3AA81060727EDD60506506
EDE0AF44190FD947C4B9D41C4A6A03DF807F98C68F883721E6E7E6383207B054
006A409855639AB72C071CA7DBDEC1EB29885A11D100A9D443EC282E485CBCC4
8CA8861B0BAC0B3574ECAB561760E687C3BF7B72600494F60D3490DC63F40B39
F2C388F118806FAEF0361E5A30DA786E599D9055059C0C2180824BAFBDE47BB4
6F54EDD7D7FBE6B569AD9CA1AC51B9CAA30D805089E1E96AA5F1C7D8579C4D83
3DDC80D805CFE4868E62C90C06533AE6C9A73E86D96C6E3919B677C2599BAA26
96DDF00B27D9E1AA2D9A1986D83626E0D8D0C105CB6FC5F610237BB3C6E242EC
52D4D247307FDF5269B44DAAA80E7B4DAD286C0B4469A6264647AC1D5FB8AEBC
6481A94C6ED5EAD255050003F03E16A6529971CBCB06166030EEF983EF332497
5116CEE2F516B4E2977709EDBD3DB7AE516C55E742F598B2D718232DDAFB2043
F674EA73C9F043EB73E6A0511F1E28762342120515EF4AB7CD1C0D977AD77AA3
B19AADA40A0586A02109B864FE34566E17B4A1A09F9BA10DED06056B51C42FB9
B6A9C4362429C2FBCD39A24463D3E0AB8FCC9F3FD3A30F4F015CDE9893D5D66C
804F030B04D85B48DC345FC8249F699D5364BBA3E4FC59D1F7378FB3FA254230
B9826E6322C4D6231EFE10719E907FECF478FEF51DB2687D13CA64138054D591
B1C7894E2A0D724F4369326D31DC3FED9625DDBBEEADB867DDB7FF0678F202EF
8252CED93785F720E4DE92960A101294ECE75FFB72E6043F33FD3778024A3CBA
9DC490FD77F0F3AA902CB872E59AA81C0B0A6BC9DD687A18BA25D37CED0CD4E4
F0736A7C0EDA3E239C23A9BC94D2BB2581629D0C9CEDA46E01A5443002CFE126
DF21A740D9791D4FD8CFD7A635837144E85014CE922B9801C1C1939D2FCDDA6D
CCDC6E7B4B622D86519A9A42FB03DD17290E01444DE0216C35C52F0C3950222F
A43EFF75AEA3FA058494B0BCEE5A20AF99C473D1241DDDA5FDA97A2888AF5FCF
BB88F51495E5B2EECC7F07816F1CDFD16F7B82AE7FA98BF363EDEB32B1544C9B
7F8041AAC5EF16801613FCB3273DC62300B0AB0281C7CD4FBCE2B5356A2ECEE5
118D86CD0DC85A9A53BE7E1C06835390A532F3F6B1F8FF071E03D1BB27C6A591
AAF6BEBA1976526BFC9D408297302124C1A7A32D8F5976F7CA9EB64367E3161A
5B20A7DEA7A985D1C34836249AEF8ADE9F56E298AC1D7181D637A568C615AC37
91D8E50942287BC59CCADFB67B23FD0CC520310B3EF0414CB723B3506AFA56D0
24D45A9A51D740B3A96E7AB386AB4E1154350EA81C5DF203CAB41F0E6C48E170
4F311F51451DD607ACE85F8B4F4C828D7FF50D459FB6C913BB52FEF3A6D478FB
BCE3D06A8573ED0BBCF641FDA888EB1B9654C0CD0E070A900A54D9B875E95CA8
166B84CCDE9FB92FEF1C849E210276F72734DB97A902EAF9C9DBE267C618E342
EE8B5C4DA157F0B3F4ADE8D0DC6B9E205C7C32C2724172E4E8FC4B58E6CD01B5
9C73A14DBFB287B7017F6AE0F5CB1F557E34D6F3B792A1257B9FF5EB18BB80A6
425EBDA44D6753DCA4A6667BB22C841A91A8AC118812C9BB0FB860D2DFF11716
82E86970679952012FB4D39CADBCA6419979CFB0A877B1055CBFC4E8EEAB50A6
84882F5AFA6776BEB4765C6ED70B6BF84F03FB878D974AD04A770977FBB2C31C
4F8FF8BB1E7F5262B2649200FC5C77003D22C3A1E82B87DC2C2C554495B74DAF
CC33DADDC64D2A8C99DF087027EC2EC8DE518F1F6A50D7011BCAD9B86BFB6772
CA98CA95FFD014D72924ED65F147D6F231B461AF422355101AC49658B6396F4B
551044BB5A01FD8F30E96A773B1E19920DF95835D87D2262EC7AF31ACAC176D1
1DEB3601A993B6641F73D01D09636D8DFE49F75A1FEA7FB038BD30EB76410ECD
5062BD50BAEA04E96DC81F6F9F742A10CFFDABEB16062CA90F69D361C3182674
3EB62C444271924C89E11F2F498E401646F45EA63BA74EBBC62EB7903268006A
98C1CAD6065BC69698A27F3A9CA142E39598151578C3C118D40E9E8419C1A968
F1DF66B627B992C83529FB4BE67A1833D36D09829FA03EE7D559D5AA9875885B
96A2B47E4C81BA6C9E6FDA99321F57F6794E4F864073CAFF73E3C7106DE30A0B
E3EFD47261CBE2F070C5A57E223A0565DE2352C00C1694F3526F0BBE8E4F5D2F
E9D3A7C041B06172198B32F99D58E21B0A78302026FBE7A6BE1CE72DCE5CDDEE
C7E3113C9510F18204616B9019BDA26A143C18825686F9ED9506C080D968E979
B03376184591951FB17F3F4D690B31E8F6E329F88598FC36B36F9968B5CF9FAF
82BD496839A32EBCF1D18C6905B4FFB0432DF191F6023D154D4E5B3692276D84
35C2A3E01214CC90D74A9E2EDAA794F62C8E955CDB8AC8BC34C602D0F73A09CE
AA55A74E243D08DDBCB12F26FBBB8F9C43DD7BF7665D5F14CA4BD5E05B7DA8C4
35A28EF529B15DCFE08B3574C576E3AAD2E26E78E543F2B250A4B6BCCBE8D90E
DACEC433E0E45CBB75B7341F06D8E37285BEAA9AB71AABE3C85554A5A06B2AC8
B13D844A44C61135C81F9D586E0FBDB5221FE1F3BFE28ADE72E1F7E45D55CA20
34552666D5F1DD367C3FCF5311083B89C86D81AF27BDCBDABC57530B1AA9A74C
DEE023FEA051AEFEE5DCB52CF065EE27C9D3F453CCA5959665E40FE323256A36
6A45877CF940CA779E14D9530E8A6887BD14D5580C88C5871E9038CC62498A89
898025EA873936EB69BC17539AFB4E5E6E11F46E976EE6BC32FE658EDF088337
1DAAD3E660F09D520D471E487B130E254DF39B4DE5BAFA5B9682D05205EEC186
F876671BD65F869D2D389DB0D75797A8D577CAC542265A9064D7950B82F1DE12
E1EBB53F8D738E0ECEECB503FCA3D467865B963C6CB6C2BAC0238F0A2AB3DA27
6B209B473961A55E2618F1D8B444719E07C6768FF004AB0BAB8FC26A6302FE92
867358E2F5C27C016B20B867FEE8ACCF82672026B3122E379A0012322A325BEF
16B1FA0D85B65C1BDFB873D1B8AA2084BE9D840DA0D79520355177AD6F525F9A
017A34A18AABBDEC20E7700686FE88CEC8A3A326B77B817ADBF1E5A669A87C38
86435AD5198F5ED2CC8C4AA2D7E81DC82DC43051457907950717495F62AD860B
E59DD9C26FA72639FB421C3457FDC09D3B8D5255384A2C0EF7347C378B111AD7
92A90E38E1552D1936410B0E8ECB71ACDB08D469FA914C1ED1B237EB729260D9
7F3F1DDF55DBD314B20F9215B085F4E2BAC9E70578002E221E3878624A015FE7
5322A710B0E857532B41154D4588FA10A67EC13828136E1E719A52A0F2135609
B0BA01181B1E0CB73B74804696B14F0C6E77EB72E933CC0AF6A8C1095C726856
4ABCC720B69D111D278B122D39F103536F07E4B5325EDB72234C4966A716489A
F56E781AC3C53098D0B721C751699D83E8826D4AD3607A91673A3DF62988DE97
DA96C5C43CC63FBB7EBB8A678026968855B88283552DD3CD9831BE0D702AEFD5
278ACEC4A55F1A082D537B3C1EE890A6FD2ECE0FA115CB387A35DF5272A9AC76
5A0BBD8CEA4AD8DA18756756F9C9D4DB5C342277749E85C7BE53D7191ED68390
5AD80C2F016A43350F0034B1CFEC671B7F820C3863C1C59177AD0A23CFB7F631
E00CC979AD410F813119C05BF6F3A624E2167F7BDD45A9C222FBC9ABD8D3F08C
926AF66356A2A5C3B4C1F7A671760EED5D95F602687628A7F687B76F89E628D7
5CB834F24C4ABF95BF80FBAC642A003D8B8116D143E653C64F79B9B48DF5E401
CBEB5F0E7939858CAD24FFB5D675000565199BC15C451E1A1358E0CAAA3A6EBB
0C27F6B3D45356DFBEB0F12864B22FD1458FA08F195038907F9EB5901BC33833
2AF14A0CC7AAC1D3D2B2EE4CF591CF933BD8B554D763E0F9026E2A9EB717E9F8
F68C52EF8D76F50188274F566C5B2A338425938C1BA49A25E227C139495A4F80
88E006FF95E07F1CC14DC82CB3D7C5BAC359A256E7F30905CAAAB4FFD115846B
F98CD6DD8CC10E1237149141FEB9433AF21E8D84C50F750434191ECF16684BFC
ACA28701B13895988AD2D1F42F8CB2A04C1F8D0F7A88154D1DF0103E0A79EF11
310CA22F253FE4E3D1E56E432F655A8C234A301660D9C83425FD0B0E5186F694
9A70C40B3E6AAB5B0440DDC5B71564ED71BD85AC96EFC164226B9C2EEA6B9666
28A1F8CC1D312FE2FFD0CF3E5B55F0A7492A8E73B103DACFB5D7E0CA1DC96A72
C881E694C4C5F6A2E9ACDE3B32A9DF4998B1B1164EB30AE3737AC094373F1D21
6881361A7D66BF775292DF056CFAACA8C087B4C0BCC2AAE1F05DD911831536E2
F66A2B9F9683381C56776D27F95AA5C5241E827D0608A6B90E08CBF44A30669A
F4E20CD5C1F791865580E510F180C63CD039D399B1D9C4208BDE9F2A8B4A3F5B
8AD99FF719D6C5FFC31F458936B9EAC17F808DA4775A7C08F3776B20C5900D6C
452937B11FA74A52666CEFB649B15B905E4134FB8A0ECA85100824A14C5F5DFA
4D67E59B58C6D9BAD063D247787282EC4820B3C0033BECEDFB1567439AF718D3
B7B02416DF5DECABA6E0750987ACE9F2A8EC2DB98F85783C01623FD3612C7CED
EB8D19CD37E3D1881861E2B8856ADBDBF5191C525448245BB2957D602180678D
9CEE6397F787B06C71940E20E464BE0532CA2D8205BD6EAAF03A971F6814D3F9
FC9BD17D5326862338562D9039641247C5F33B540E92D1B87C3998E988F4E0E7
C56C93EAFB9C7745EE9FA75E286134EA2C9A685A4C4D38AF1752A6547B2F7F77
A71910A3F648EBC576E16E367D09E7F61B5646999717D017ED4301789D4FD191
9A0D5E617269DE9037EFB267FEC472C8BB99A926B3C76160D8DA7321E6D222C9
572BDC4DCF1B2E6AD172CF9DD1B8DC9E23D1751721FA293BE262D477B67FFFEE
3BEF3E46AA957F5D1988A3D8F64CA95E29E05F90678F7F3C2B15E13CEAB77811
E50A8FCCAD408D69CCEA8A7917A0F359C4C172951461E884747D6E5D2863C0A8
5D7F90D278D7151D59D40D28184F00034AF1BB3AA8E7A8C1AF60D163801D2968
60FFED817B1F5B4DE58872A36235197721FC55311D39C41CA718F5FF28B9A59F
7A20EFECDF6B1C287FA48581CF4FB723E2238AB55AACA0F17E1A3FAC930A2C3C
2BEBA86CD8754FBF01CDFC8602B0AA79104E10420C3F67E491EA298A68097564
A8434BFC38A821AEBAF5D0C7E846542A358E0B8F82D79031D8B4C564C26AF256
96553753718AE0425FD9EB66638D78D111B10FAAF8DC17EFFB7A46733C277C65
06C04EA79F36181B4C66B50A643D86F407F2239F4070B73733590E562622002C
3DDF0D5BB0D1F5A4FBAE0C602130444A300458269D67C83EA6B9F5351815E661
85FEEF6C73AA4D791886B52275052894C39DAD40632EC98DABB7DBC89D39485C
226284125367D10FDC376F2C32D769F3657CBAC8CB205DE87280206EBD32BB04
2F46824DA25032697E79494A189878F20FF7D0A11571F69B4EC965F20D7C056B
3D608F4089340F038C4A68DEEF068032B92723D72A61658CDD33BE34ED09BB1B
EF9525DBECFE5A994BC1E14C7115B5D8DF47C67E367D2376B73CE5E992441A59
B2521787F7A76DD68F7E5D640C87FFA05C0EA432E062EA4F71C63297B03C9F7F
76B44EE925C8AC12751906444D637E97F8985B6823BC95500AA1711E0010118D
36E15B500332A74F141D8778EAF3910486B2EA25AAD16989E8F517E8BE682D61
7EE310A79C945126847769D6DFEEC37DF1491BE959F1418F547082D175022311
5919DA3CAFD232BF936527C3F6251DE11B8B5F815032AEDFF168F06EEBFE36A6
E658BD6D9B72486CD5D51EDEB314960567040DD351580824450D62A12078BC05
3A65AE1FF0A347BD6C35AE5C1107D773495C4743BCA601DA71B7A8008D319A80
9EAE7BCE9A7AB5B1E77B1B8CD7F561861D275E21CFE17E2DA671A7FA88213B59
6074FE4D777E041409717E410B6673373215DB1BEB6EF81BFD7640789BE629D8
4375718AA931E5FA13B644B884645DAF9F4EB18C3C9F861BF4B3A4BDD20B796C
C7DE1FBF2AD98445AD543A339A72DD46EF815CF944AF37CC5A43AFFAADDDB805
B21236E42B64F1DE8F7B8246C840F68A08DFEB68B4A63771DF955001433FE00D
93528FEC9ACD00389398C67FE15FB05B53E1B9BDC776BFBE74BBC7DD92D941DD
6215DA3B58792D4F9ACD92ED5A79AE617B77D886B36E185673540FD199188132
7327B90CD5534097225899D5410EBD7F1F3334AAA50B56D05D29B98C9D152D6C
0DC98D182BD0C8D6B4811AF48F65A36B0399A326E0A57B695D391D64AAAEB4B0
BE5CE51D102BC0EC8B0E3E69D117EEC5C8F84D69BD5B50DB0379832507E2D443
91785BDA31564D715104C19AD63F2DA95091108D36C8086072F20123F59E1B5E
8D34EB46F04E8ABC5F4D367639B4216AC03CD74FC736141F03DA35D68D91E93E
80203A62ADA5F283FA2DCA1314503CFFFCE5CCF041A02877B76050B077450F60
DB75CEFF3C692BCD8174BB9537EDB0F8769AD30E9556D7837D8F9A6060FBCBB8
298ECBDB5E6259038906F04E2BB54EDCE5D6E365450F5CD528BDCB140E3F6C3D
0B5F9F79BC1AAD0208ACB0CE04316685304F54925DE84F8C740515971B4CE437
5A1A9F1EC3D6148A1C850AC234953FB4FA6EB237F8ED94AF22F25DAD959C8114
35E406B8F085FC7A58576F23CD19CEF83ED66EABA8CF178FE068A131AFC76773
2BC332AF54087065083A6524E6537DA1E5D5E4B896D55B67837FE1B0D9EDEC97
11F4E9AB33DCE6F520A16FEC6BC543657B58D17313B32AAD52FFAD3ABBAC55FD
47082DBE00ECB6C5C0F3CB6F2433FA5AC144B40C5D496DCB96A463116389EAFF
5982413687F580635C555B6473652776F685FEDEF296CE3177297C136F3C6C1D
3B6F61BEA096CFB1380FD318AC45D3E7C548CDA606BF71A39EF59C9E976C5F56
2F31C628021C6520EEA7711B75C6AFECFF846191F4C6B573815A3AA979F327EA
F34D51025EF8B6CC482ADAC3FED84C85ABC9D17103FE42EB033DFBE2E387A0EA
EFD03A12376C5901B01A89119088C53490119121DA941D8F96C9CFB1946D4B1E
23701D12DC75C643BD36443DC1E1D1AD087B2E4304E9229EC2855938CB532FC2
60FEF5CF3FE05F4F6B1A686C1E90D208744A52E593570C6EC8E49BD41ED97931
4AD32902C65E737066229312A018E607AFD73EC28FFBF4DA48BBE35D527F40F2
E194844E76B625836C94F281B43CC02B1F6DB3AFA1BF4B117E4BF69789878019
0F1359019823D94203EDFEB2A8899B078698314F0898139734F82F63BD025D25
7624B3EE5A864F6E65094FD7C70131796BA27FD30F540A1E177B6FFD0E22DD7A
119778233BC38A804DAA2B51B443839D49DE5CE537DF8352F46116F8E7C21022
F91926361763B86FA081E98DFE93C6030A94C7F7540FA825DE6E0B910F0CAF88
E6309CB00AA35DCD1F7640E0DAE8EAE60218354FBFB4894943AA2C3AE6703322
C3B1AE04709B28E38E80485BAC718F97F2805F0AB1437E9B37D21481BB42DF9F
34C5E80B618FA651F9B7BD2AA1761639E638CE9D89C4CF0AAE1B38A2837E1839
7FB78472DF419022F6B4D7B1E210382DB0321D08CFF1F462C25CC8EB574B11C5
F168849F68876CE406261BD738DF16D6CA98017C7C118D8C67F71A4BC3C8794B
DE910C96040C1A6741E56D793ABDE9F34D71C58EF11F657917FFDC1281379FC2
AD3324AE6C9704D3078A7EDB51C8DA98AA2A1F02B7155E76D0C80E31B39CE0EA
E6322374409365090D58BB4E0B099DA528E5BB6426A755DD92B2A2CAD73E31BD
3229C5F8931981B7F9C278F0853C03D60E4AD7D836AD02211578672376E2B3FC
E63EA6188EA0B330001790770D058B9FB23098A309023373FF754C9199C9E7DE
AE85DC7A673BB1D8E2B410F5C5A738B3CF732E1A6D55FC6872A733E861E2EB93
9323B64066465BF7D4EFBE89ABED3B1422A124751EDA0CED4C3D2F1D52B36E0D
F0F6638EBDDED0DC98950D9D07C0308D173F61BFDC3E247502747D6F4CA1BA70
0D97CD1B89A25711472A6FD8A594210FB5200157C0F02340FDD61392BE9B08AE
D0C5E76D39946E99ABD6F2B63BDE0EB1187C1B15AD0671302C030D29FEF6FD6A
EFC263C2A95E45CFD44843128CA28B531B1E987FFAC89B9386ED6942A6888B1B
3AA4609A93C7CF4E83F0FBC6C4BFEFE178BCAF292623EC448988C56FFA843B1E
F3AACA3FCEE17C7835239CD82466086853DB8998F9CBE0472F641CF6660A76C9
29E56D744E3864E8AC0F394CE7BA861E4C1E9EB7DC11D6579A16F91AA1489D01
74E713B976F3A0B36C575DF597A3DDBEAD8960B17260850FB1E3077451FD4A24
570EA79346E6DFAB6B9C8810A52BC5F9674D286FD002DFA5BB313E0B784ADF9D
2843FC809A040B9287F0C71D93F7C2B322315F070559EB2456676E931E4EA1EE
3C44EE4DDC284786865A90540E5FD5922F512C0A83999C07CEB7A37F708F9CAC
6B9BECF2190F31C568C908C2A31E6042DBCDB8113CAE81027650945A5FD5CD86
CFE17B5C184328F419AADAE3606BED42095620764487BDF92633CE56BD2E5DB6
21849C266CB622F9F7DD740A0E8A1AAAEF6F9D84C265D2BAB01501D07654C470
FD226F1E98C07ACE01B11211D992556B38F254A74BFFF2BEAAFB4F0EA0D1DA71
F0DBF300737540B21745BD882FFECB8914A1E25B2A8B2BAAB8D7B6B60A83CFDA
C57BCE423DADCDB7C3931096D2BD7D24A3FF370EEFBCD54039208ED7DA3A6C18
1536F7EC84D7D6DAC8936854A0E9B5873E0C43A98002905B1CF228EC7B27B429
929742FA4FE73B31D9075B4D37B78394D8D0AEA1C81BC3D6DE2A45C15172FF2C
B08E341A386A50EAEB261E696CD413485DF93CADCED318B5FA421B6C7B9B81A2
598C9422463D8B1D450DC7E71CA5DE4E227ADF70F36340D8417D27A83D007491
C542505F3BD5D5A71B4A05218BE6DCD49E7B623D9A8677E2ADD1495E24D9E86C
A4698631D4DE942B7951DF193524704C61242B4B1983A5D0B134C8052495CBAA
9D2B9E8332FAECB356174BFDE732B68F61B19CB6C0D61EAF53F6C91D33E6F388
E1C1C7839B309F0421354ED4AF854150AC97AB16CFFA3F66FAFBD0B269C85A27
43EA914B847378572EC9BA14A0944E37480AD3FF9C10590C07082B081CADB630
138C9B03ED2F4592D3D38E10A40C93CB76DFAFFF0D1623C49F3A52C4EDA18B7B
6BE5C494D3BF1A8A32F8672E0E0600DEB38A0C2618A58148687C5C917444A99E
A3280D9F3320A3FAFBE5AC5CA9E7D404FD4DA5F55CB9568AA9C68C085E87B32E
DCAFFCED2FA9A16198E62CD5BCEEF0235965AEDBF2AAB6D34F4564D288AEFA5D
9158AA483FBF2D06CDD4D82A6B974664DB6555775D1C728DC24D8C2C25B06AE0
91DB97DCDE55F701A63B21922C483F0D2B4266B025DF0C80782B325A0B3CF632
7D436F1B92489BC74B93B7D7BED04206674BCC38AA81885557A5FBA9F331A244
01AD23B81C7C475FDCA1F2E7B8341376C47B399F2136B6E9A563BB6CF6EE049B
C37E715513514C2B1A3249E83C9B3BB09C5FE38C7AC82B45187AF80A06360EF0
D88095025D7A154E7FAA68EBE49DBD1D1D6D06E838F7245B1347921D8D93659E
C8BF5397E77D1729711369CEDDA424A9E19BED13D137DFE3F01A3E95448917C5
B7C0486172439C132B32E829D10EA96E9110C0528917E8327FB8B6B10274907C
8E9A28945C75A2475162294547525ACA6C964A1E08423D9BDA918220ED02C2C2
7956D4647D2D624D9688C49F9C1C2FBC2086358AD56A77CCFC0E17F59396E501
6B8018BBCF4896017B08CE192B694582DBC021CFE1217CF272748BB9CD7007BB
023B8982C1D8E1F97E4787BB31E0D5EBA5C714737006EC344D217432E9C76E6B
590845648531D696EE446E5E98FB3EB79FB2082A98312322579423DD55BB1379
B465052193B39981240F1DEFFE0DB47E9F0131F902352918244E0C1AE41BE63D
5B88A26DA17E970D312BC85B225F9F0100EB969617EED5FA87B1BBE5E5A4746A
6348CE631A69123B4D3CDC533555EFE97595C9E9618841D3AAA74CC86F063547
C020780F44DA865D57DC28C51D6634212ED83D0A9F7D51E08CF73F7B8F214D36
CCC762DA0B116F46A1051D1E7388DBFB71D19D57F32A387396D91CADA9FABCB6
BEB4345E70A4DBD6C5BC6F23D4575E2971F355C21312DA808311D07D8983EDC4
A8A193C31A438AD167AD6C39AA2FE5CCA6028CB3A7EA6CE3D687DA446D9872CD
CF4C4A160FB30CB68AF5DD55F8B07DC35C3BF5AC2924A9668392099F635B6054
F316987AE22C3F0B4492D37DD6E0CB221D09D075B82D59828B8569B68523FE80
795953BBDDB5D2D7AAC430CCDF7F54C7891A31668523655BD0EB1135955F6837
B24AFE2DB5AEDD6DE9A1F92FB504E729D10AC61938A8D70BE04FA4FD7A14C9F7
2C96472C3776DABB96D54C5CD396FEFDC9FAD48952E041669207AD889C7A5B23
06053AB76C04A21ED4AADACD4FB7B7293CBE2193B206BCECCFD719F95E7B6BE7
5647E29A04F58F913968B1B85BBD391A1B1FB4CA625DBCE2D4726D6A281A0A27
55349FD452E1450D88B9E87FD36D3F502444B05507D07C5A38FE780E0C8023D2
A0FE62C66658F7BB0B85902482A660432309525558F0AE701056FE9E003557B5
7D9E22F99FF8EEFF17E0E3F75A3A300A93880A0A305E61AB44A549E99C423F29
615F9DB059E5EFA404E8FC9053F7ECEA8AD6B53B53B9E8A4E78EFEC82D85B4ED
807F8B247CB59185AF856A1D96599D6431AF96D988707250EDF362E70BE14006
2C536520828827E6C7057C96182B5ED78CFB4CC13E973892F0907EAB8FFECE8A
8C92DAA65F73AEB10DF4FD8E887D729FCC5380207EB899AE24327A1A7C05B715
49BDE63E4E03B58D800178D1B9B7CD68196C20C7A8DB9D5F7EE4DCEB463207F1
C840459525BF42D3CC6324BDCBAC9FA4529DF9771BB1D437CE70E6E4CB2A1DD4
AA948048682A3D6C7883ED1AAC03D1FFC5F9433FD42EB69170C4C065C3120A3B
9599A6FD7B8F83E36B22F4F5B3441B11FAD17B3ED6E1666AB377914C79993707
D679053BC9F349EE8A70BE0B5D55E4BB506B8D456A126E1ED1D5B1E53B436D98
944341FF550D46CA3F6635F11AD12FBC5DBD3BABFE96240E5D62037B741C70B2
E32DC6AB2A66FEEE56FB85BA4BC16F8B5189699CD435D9812E5532EEE7342452
2F0FBEB8D7E8C64D564F8A8F470E34F17D7554566DC11C1CA1F9D5FA01438FE5
07425781DDBB23F82D9A693838A60BD493244E14EB146A159F61A774F04D35FD
C5FD2242D383A02871EBB193AB2611F17AAA550E93CA1DD842639BCB2B7C89EC
F3F7C183037B3952F3D2109AF652A31EF645C96B77B060396BC82A0DE7F711CE
C9031B78D7D123CEE308E4638AAE806411AAB62838C0EE4B40E1535C0906738F
8C4802897781210D7E2B8AD93B9460CABD795126880E02688B9C3C32B1078CFE
B167A37A60F7F32EA0EFC5D8F1932EE3349CE5AFC730C14B943624794F24E0B6
82671269E6C19249E2BDA25FFA750F997B614D23F38D4E83BEAFCAF41C5B2FF6
AFAFEBABB6AF47AE25572189A19315AD39793138ECEF7C54EA07F6FDB19C96DB
A02AE3B0DF0C16846D491F52FC3FF1E48BC9621717E6C707FFA2102DB5015E21
C8F738D6C2207B1A4295775BA619BA0EF1364A56ADF29525243695C55D67B4C4
D2129EA16AB457EEB44C8842D7B3D7017C2441801F808B75B8D9BBDA824C5B6C
0A01237F6609B5A7F2E869F3F7B38FAFEF6C6E6485D239AF8E8FBCAC80900CEB
4B7CF70DA32C8AC37A4C335CE55B7589A6B0523D6812BD736AD21734CAA3AC9C
0FCC092F5B7A65713E07825D59F6E73DC02C999E4CB91BF653D22821F530624B
2B7FB31A7CB714A8FCCAF0ABD874FA0C18F5089AE2E9672610DC1C5B33915286
1CF856199CB5B4FFFDC8DEB8DE95405811BE4CE8FD1B6D73320ACB1F6C267D3E
B2DA414FCF77ACBB4811B8774221C1A677B413ECA49FA064DAC7EAA9D3A9215E
F7EEE3A050A5F1248EE579E0D39738AA70EEBBB914F6E5D796B55276A7BB0252
EE19A7DD5BFC7BBC0BF314D53903AE034F63454E9FF3B3FC272B42225986E560
C04091D8E5609A4E1386C1B10D6EF6CF7DA79505C1B609A1CDE7F03164B95D1A
065A90070192F59C87B7B00EDBFF2E7E656AC52972CAAC14E86CE47DE988603C
CAFCE21C74ED943ACE824127445974581D47BAE4351664A0D899ABA597F7A929
311780962E7895C8139A6D11835B946DA45AD0FE33B6078C823FFED04DD7A3DA
96999BDC42D456C04EA6189CC02B60179516BB478AA598791149BA97FFF17710
DD4472FA37606C3176A90531A262BDF8B1FC7AC58BA2507852BBE42813A58A8A
6ACA590FAE44A62CB76556A41F1604D3256B046F7E559C28607AA39F28909744
DD2A0E854D72C2587B6CAD29EC5C9767171313F92A306D1A7DD5FCA29CE22313
8B98E6C263EED886D93F3F45630436BCC3F8ADD162DEA2677D4296D62208246B
1132BC6AC99EF357806EC5476E3F287A7256F0FA404657430F1CEC53881DF1B3
457BD811E616DB5BC4BBEB0896586854605D658D8C7681595D0492034DBEB633
407055A86070985E83121A0806A2FC117F208CEF42C213CB237B187A7B54F41B
54433526B5BCF13D2578231B50EE154AFEFCD6DA55C6C6A0D1FD700E42C061A9
59CFFCAC8D4833E5FEE442121F2F4F18BCE19393512772E0720A02B5D7607050
FE4D61145907EA3B7BC5205AFC9DB340BD191F45695D303441CC0A2697ACF172
18968BB0F1A0159497058FBF180780770D6036F89E29EDA898B6207751698A9F
9F8744E5D20CF7E358470095F07B016F0DBF265BF9BEB63AB5395E639BB620FE
54790728789F35CBD2B85A4747C3FAD756A5714F08D4AD2F91C42BF621F46178
C436BBB9624D65F00D2B087C0D01C72AB279C5755890D21835C8E233CDF3BE81
3A9E2555122B46A03394E895095EB9B3338F446210484C1AF9ECCA460F09EA1C
8257F3C46543BF7DA121B8C73AFB3730AE0710CDBBD4971905E29A433027ECA3
DF529A995E2CE207513653316F9FB99F1F2C5B220FDB5EF80BF96C80E8E5295C
298312595BECB0CAF4E7E98CEC9E7AEBC678BF9D10BF97EB270C2836F3163BF6
8482D442FE861E370B677470532136F1204816605E6819933ABE730820E61E3A
1048176833A5D53D1EA68883E79E3BB86BC0CFF59068065A8F58F1C4FCA0277D
A2CD35595421B5818C8656B22949BA337D025C628F5B6A4F789CB30EDD59A9AB
41FD6567A868FBD3F5EAB99E94970AFD7D9D7B6298D4A02347227675B8448EC2
7609B38F4F16557C2BD9DF069B6CA6222D10D6350953D3F028A03B070646243E
C239599427B7685EE2B9DBAA5F01317B25DD1E3F05E35DA1555C8675001DE6C9
D9D628BD4216ACFA5D979361C0D63349FA0660A2DE342E973DC3A9C183BBA01B
A43C743589C85EFAE2C91BC20A72C0DB24DC3705BBB8089EDE78E0B882BBB6E4
6F1127D0396384638495ADAF61E4A1BACB017C1E8788D6C4F6C0367FFEB14470
BBCF2FFF8B9E8D625AE22F5FA949003C71B0A4797E672A4A4A352246B69C16A5
1EC12F32CFDED29B26FE7EC0CDAB35B3BFEC85B8FA4718E8FF4CEE9655941884
D3B9FFABCA4F49031745D862038568D292847AE57C85675CF04BFD1410B56E61
6F68C39EC6E5772CAB23D9CE5BB9930CAA6262AB6280CF987C7CB61BF72E2BB0
1D49C48DAB045F59151E2A892F653CC759A5EE6A3CBF66A9211E85D674484E92
9AAC982781C4197CFFC0156116257B3BA74DE2C77B1847D191FFEBE0D582376F
60A63272BD320599814539C8050D68F94810CDE4DEF7A65545DA825598FF9F91
61C22941C6EBFA9290B26421495E9A8C103197618D45672116E2EC80BFDBAF1A
47513A48F7186E9196E5C0B69AA62188560129E22BA58C835B54FE27B6D4E5AC
2018D0495465E409BBE0C0E5F2D242B83C4C29BC2DDB52E81C677B701DD0C4B7
2B696CF7660F3AC4E2B80CF1BF56A257B250EA12C557E19CCF2818F4ECE550B9
CD4B54BE0A5857BDE18E917AF5A841A3666029A4EB16E5B303CCAD80E8D23AA2
E007E44E60AACC8D432B02B6C3D91820A6BA1CBBA7E5C90706027537C592E0BC
3695CFDD8C94E6FB598AAD23AC4DE1B98DE843C8C20FA4402442639E5008BBD4
62224F084DC243C2E2EA1DEE7C919262E0DBA31F0BAECDDD72C76988B8D86808
B36F396A933AD7E7EA88590810ED8663DF9624C67CE88AA72F602B6920012160
E8E12FDCA959EF002F184452E800DE7215D964C4F29D1C5C9BAC5DC42D5637E6
E4A38DEDD67F152D4540B6944C2D2758991E9E5B59E6966F6591756804DAD389
45EB4DA14B7D98AF408AEF517A4E1BA2F39AF2E91D5D9ACA3FD626CC47D247CC
610668FF164EFBF2FAB76DC8D3A78D2D3358A5163F4065B309E3410B9518551E
A701FBC29EA0317341F5E1995F30366D83578E300D18AE9211D2E32A94389890
258BA2C575833FBC110525DD9D358A8357A86717D1FDBC3A474A5773F4AD8434
6AAE08C2CB287F70777B35A2077EDCFE049751C6DEC7C26E338B9A819467B778
9EBC6E59DDE60C7E9726BB139B39BC8C210F536D500872FE961C62995A8ED98C
89BEDF58DAB6334F4800695B15D7A73C7B544E1EA3FD185CFA65DF3DB858BCF7
5E95321A7131547E08456EC7E4B39FED998FFC3D6487C777AC252DB48967E844
2AAD973F27A6C41677519886FD5FB10186B4B4CA73A52F5A6EABF8C9A67F98BC
7222F4A0EAF3A0CCF6EAFAE4946DBE38A936D9ECE04B8B8403D1F872A739B7EB
C13C6ADE9188F8E3ABA3E4FEE44D0821E03F2F6F59ACEEB756EB130CE996E3D3
C710F9E34F6E568CD6DBB0CA4EE7511B22C7469DB2BB196E6B6384EF10547B30
E0B3DFC93C433E7843A0330E68DBACCE1DBCC04FCD483BF1AAD3FAB74C2B6953
7837A2B70DC0908FB843776222EEC2281E4DA5F7981C060E5E26BE8A2FD3FE85
3A7AFF5C68F4C39DBEC8BE6DD7BC9F83A6EB9D5B5E6137428D467DE0D257E5A0
27C100317467BA68329050CFD07846BEF8964A87D562502993B52DABCE16E526
11E4BDA2A4358D1F6448F86ED0ACE08B28FBA7EAA1585919798B100888C66005
2545C40B1E231BDBEF65640810BD7C466F5F433EC555E83C466B698F5A2382E9
BC568943DE1A68599E2F3EF62EA528B388FB2C27CB6641C7DE5F26AB8FC01951
A22E97B68B3C6F723886DF4FA863954DF160077B16CBCA944DA25C0BA18B26BC
AF75FD8A56395085729C35554B73EBFF3A43348D3773E861997948E429AE0002
EFCB13C4943725ED7BBE7F8F00722D1775DA4AEFF510247D88A97E176FEFA678
54481CD1B3B8E5EDB935F09F938D648222DF87570F4C3F68C915AD682CA72C34
A8BCD12739F02C3B4A227BF3481CA49FE568661E24D8C13373855D24E3D757E9
28FA3397DE0928FD54A3788E37B3E5095C15F93F8173093AF7FCAFCAC561AC26
33B8A264F06B795FB2153C4015A3B8C4099A81D1B1A3E0E42FFC84F9727DF3E5
B038EB8D61E286E558CDC72D278609DEB1D6EC0F93B3F80E136484827773BA2C
ED4836EB57655FF66BBC2E8E7493FFA2A96BE684F7191B7B4692D8225B2134DE
E52FC383AB8969688DF384620B00EFB129F9D230CD9430F841E701825B6B0DE7
F27281CC99484173678FEBBEB4CE613BE4360BA2DDABCB6A363B3253875E4C76
D3F4924945BAE57E80AB4F6238C0FC259516349244D805992BC69C7A63342810
C74064EF022DCD988A4A8099E66BA3E83FC0004386A9196922822F5F10FB92E8
C96FEF09FAD3EF76D1853278F6A8F5C9E432BD19A6EC3BDDB0560D57C148BE22
12F5119F009623A43C71CB2663AECB68B72F04B67274B6DA0C09768971340D0F
F1ADA8E00706F2AB4111841768CD9D6EDCCB5DBFFDB46063AE397F4829690EAF
BAB88AE3B4A20F49066086F000D6CFD67F9DA4FF150EAA2DA52C7BA6298D3869
752420439E590EF307E3EC644F05609AA46E89996BF4EBB7842B8F58CDB75221
EAA651881F5082DA657C5FB7C1EF58C5F5988B4F083B96A16E592987424C9C4D
BD7AC491954AA572D448AE03D08EE296360E63FF381BF88AB4C5542E2E47803D
52F5E9F341A882AF4456BCE832C7D25ED597B4AFD890B94EB89E315980439D11
060D0F598A168017ABBBE1C16D4C316BBFA31186CCA03322473085764133216D
37FCFDB87184BF2902856D0C9498D76BBC666584D25A8599717F9EF91A6AFFBC
F9BD7E3EBC4D1B2751AC7FD85A8E9725D8D3AAAEC15C67D13816923D1A935731
6971D85CB36EEBD34EB3481B8ED13E253B2C06AD9D338E22402ABE570EB500CF
490FC1776D7B6BC22FADB3E0066ADF9E520EC2082FC8DB4755239CD91B7CB111
74616C89E538F1E96E7EDC918A5827EF8D53C31C9ACAA5B72CB038C3FBA8D1B3
884063858C9B9972D74A6F0A56736E16F4E2A7E2F3A9818E42618611A920E2DD
1FB9EBC9448B8FEF85D1CDC12201101F004DB32DA55AB66D790A654328052C06
C8667C4B7D10A12937EAA925A6F49009BC6EB5FF47E5967DC55294E55B607AEF
7AEB2BCF6656513D7033D55ABD647DAE789490828363D2BA23F7250282FDECFD
BDD1425A678C33924F09FE3206DF3DE6F4F8CDF268CC072F36EF123238671BB2
9AEEE2D5BB9B10B58B6971752F50ACC9BFA6BE9B41D280D4CDEF55B02361F221
0369901B8040EE87DE744CAE33B3513C93B8B90986F900DD6C74C0C0D7BC5640
9FFB480DC11397BE816C358815945611E8686D2398C6351B129A656CE08EBBC0
C484315EE485A8714EB6009A9C06DEE52B1039CEAE5937EC7F21EFAF32C82BA8
F444587674327C1D80F28446DA7CE45E23E578AA3A9B2535D45C3E5402CFB92D
9D82E45DBA52A7CE27CDE44BF401CDA0250769E1A99EE769A641DBBA4C7702C8
994778783CAE597FF492A84ED051EB8AE225A822DFAC9A3E1BA1D49D6BF9D0FA
91748F635D7C1D238E43F7732B146F3E7758D3D4F47D092724DE185209635AAF
36DB857C470F1B045136A78852297AE7B20D7574389A51AB4CF9CD1A2187418A
3EC6093E8684F35FF4F4139BB1A63A4047EA20DA5234EFA7DD4C1E0F10AE5994
B90F9D33A444E2BFE8B9CF0782C6DA4A9063B569693C3EDCC324BFB4D10AD6A2
46255940D86B11F499F64F3D3A363A5D51AA7ABE0A1E9516895DB80307F635AF
C1A2E1358168848EA6901ADEE9B765E858850E6C6CF9E5CA28BA647584F5C1CB
17A28FB1F23EEA357806A3D0D706338688908A43EEAC604957F6A614D0CB4744
0014F30DA73C12AAC73ED8A6B8B8EB99891B92A9628593986BBE21736A4BA3EC
DF48D4CDCCB77344191394B78F1FE0D6ABFC4FFA2DE60A7E24C5AB00E02777BB
8C38A9A282D514095C361ADF4BFC4169E107DF90499B87BD767AD3EFBE479EBE
2CB728AADC539D07DE355F5322A44EB9EB98CEC0A162C8EA002226DB69BF5549
92646D4A080E01212CE126E5DBBC5E015E6BB9BCC20AB8134EB15C2163A349A3
C45DB064EFCE0DDCEA3746A0A80315B53F112D3B8DE64A58B240A0961B3EDD06
79B0C5D9FCA450A80A1C3058ABF110679A54FDEBFD456F77844FC27438F6061C
E0C155A07D1065670894990B5B4CCDEFBA8FA1D34686001ADF08CCB3404948EA
0F954AD7D03474A6A82DAF5E1ABDF8CE3C652A84E329DA3443EC28D399200BFC
00FD0236F2EB01AB01A2B733E255DAD15F08252EDF5979C14C46A1ACCBBC622B
0E5C84FF27C05CC9FE8D9AD16D7CE795210EF7B14BF3E963BB9C021B992A0FBA
2FB72FFAB7790CEEE16C582BA56D5D9CD06BF4BE332C22867284727AE28FB1CD
A82757F5571470301CEC1C54621A8CB0818A04A0666F275B8A995FC192D8F8BA
8702ED7AD00D98F6359B2E3E0BCCC95884764A621D917DBFB94A9C0F5FBFF030
0C0F868CE26986EEBA85BAD11E560633DE694B4658977E59E17FDD1250C50C43
AFB34E4378D21DC42224760EE0D81FDC752A43D487F987B3B76845D1C5A83560
C25C5910FD81B2BDB2F18A8895BB6FFC41CA54653101C12FB4661340033C94E7
B936A3A1614F10F73F2B0335B34C7586BB2D0D1B9244AE6CF74632E775A1605E
63B002F0E83EF8D0F8E168C0FCAADBC5F94F4EB5A9E238F8DE8A10B2BFAEDE89
100B8A6EB1463F123C86FA67FA095C0EA7DE983C2C483F9D8ACFC3D009C05416
4BC2FFAADEEFE5F0A3D7E2B606573147DBD270596EE39E400A6F1B84E4183ECA
0F2784611B128DDFD3B8061FEAB76A854770C84C92BCACAE3E0170B746DB63CA
39A2B75F595BBA1BE4DDD5D3DC32A37C5BD00DD016072EEEA098A86BA3714857
7F67F6E02B76C71D6809A3ADEC3800693DF0F087E85360A4837F6D2B047983D3
3B641B22597223BD97D3C667B948739931070DE3741576F7F6B1F20D320C605E
5C2F565387D8D2176685B1A58609AEC90E71132EAF8DA65E9A006F8EDBEB4D0B
AF47300B80C3F944CF3C1CD84920DE4C1F23B16A9440AD00F6BA5601CEB6D079
BA4054095D1CA40B9417A1DB1BC9CFD7A726E5853FD36F734C69DAA10D9AC7B9
6C817AD352B5C4397872ED1E09C2D332181E239065E32B17AEB326540207E4A5
2B755FB03D115844FDA9A2D92ECBCC9770D0132628D7CAE18A9B44F65E0CEA3F
10C0B38F0F033C7B92DAE7C12F2BC8877B35C7823CAC45513B2A9911B39603B4
15168A1FFF2FE183E57D0E806CB7D13B81CE15C720390C3EBFD7DA824D334CA5
F336B3BAC97AFC9599AA0F452D028F4FCCB0BF65BF856CC55D2B72AC6766790C
81ECE3210433F9FF86C857B0301FFC461601672BE6EED97FF91EA2A00BDCE7C8
2D606AB2BCD7AB93A8795AA46773CFDEA40376B124A9B8728BE7045DF33975EC
34387F5E4BC4A044FAAA7572F659B9869D066EB184FD390E499DC9016C3410FE
F62CB217DB07076D4391E99DF321D0D871A37C34FF8E7580CA45189BD8A3B135
FE7050A6DD93D6CB6FECC239EFB62AA4B9076094B5B725710C0CB748D2AD9529
A79EB43E84A10B3CF49BDAFAF2A0044A7A0A6A8E7D06E3898E4BEED3232EE9C4
A5204729FA07E823A05EC35D462E920C7C80101B7B1FDFAA901217BEFCE84284
4F51FA314E48DEADBA1FABE0BFD016F19EAFFF14D9FDC641B105445D0714A98A
7CCF155757F859BDC710A330D6704BCBE14EA5296654634482491DC499382BE8
BF7E3B4BF760EF7ED4B9FC5399357F8D5EA713F1C3B54048D83D06D6BE527C43
0FC58EF184E517CBB13064E30200007B1150752B7367E2783EB08B658FD2D95E
69ACCAD48E863E3122A517AD21899C5EAC311457F3F43EA858CDC793C39317A4
DD99EE28143FF17F16033D971DEB479177F195DB53CA33F50DD99C9CDF6F5013
FA340C8145208C488018B5C51A68BC073DFB43FB9CE762DFD959905CADECFF50
45C4F98C3D7CCADBEE9CAC7E77D79BA760EF4C53A3C983853B0A9BA95E350439
00CF3BC8D6A3496230AAF1232518D44532D0977F61D836C0BB1FA3D448B363C3
6F9830029D892CBA7622E2E44E7C653774029E709393A4F8DDC886A76C65F9F8
45E184CC0594188DC4771B8904EEEBCC20B4A4CAA577FDD4A0C3CB556245C965
074A8DD4E351549B84B3FD8695CC7E4D624573A635B65951DC366F76FFE4F243
63C0946EB7EECDF919BCDE8B036EB6873EA97EDACDC9A04CDB15B160C3E2B285
BBCFE14C06C4901851611678C968FB3FF4848C380C8B9839873F934C88858BEA
6D72FD1B75F967140641FC062518E345F7AA32037C619191C1B665762A4ADFFA
9AF1B45BE84940526884AE2F69A14D39EB60053C0C5B71B1BA24E32C6045DE78
3BF091CE70E0C097AFB0B227EB92EE2D81D708B1BD178B5CCE088B3ACA4E03A3
CF8C5DFF4132151E1300915CBFED910D55AA3BC51183D7173C50197D128087D8
117DEC24A453989EB7CE1FEC9D31E66BB00C09B952A829C6BEAC2B3EA98F5ADA
485A644A34CD0F70B5ADA7DCC9E6A5261F05B7F695DD49F678A39EE29110129E
BF1016D7D1F2F49BD94475A5C451559BFE1985BA68B8C9F4DD7F34DFF937C739
DCDD0FF4C5D8A96AAF1560E72CE2ED30F4CDD5C08077E46EEC4C91B9FFB9528A
BB5CF9781082DB56810D7BA76F1815F8EF3AAB303ACA4121E9C9205157824415
5F5D43A01099FE36FDF5A9F44ECC5B23C6CB7DF4FE07B1A98AD5BFEC3CF7F24A
F59B69348BD0F8F8A32AED98990F64726CA28F16C42624A2C8026E1BA4C3413A
08916C081D6D48BDF44898CECC2092A8CBEEFCC10F47FB671C91A7E12A8BAEE0
0B6C5F34482B5AB271BAF42325A7CA185A61D33A7E3016DD6362F60726B58AC9
94127775162D043808C6578FAF386CFA087FCF844F8768D6A47AC3C0A2C36FBA
E60FEA71020E501FF8D50D710071415BEEFDDB599B1C0042405AE64D5746D5A0
1E478B28EDB24633F4C244B9A7597250F4A58C50ABAFAA52EC5F286AE67CB509
07176F2DF1E72F15E6C158940CC86C3E3CF3C86B416FE6BF97BC5D91210B10EE
7934C215451BC9D441EF8278B9D00EA80814CC8303017FB1F41C13A2C3F021C7
3243257170617D05A7086A3A8247773BF93CE143AB03DA13405FD339E7F04E62
A47933495A954F676F7D7AB4A7DB2A09E4981995B29378AECC62737F7B74A3EA
9F542666653E1F146149DD919610D5E991FD1136ECCCE234C13F17FCCD00D444
8834502D0364D400AA33CFD82B467C9D9E74A68EE3953648AD10D0A6F1EDA10D
CB6CEE8389ACBC7F3B67F0373DC072D5AF974F8A50EEE33F12C5394CAAF155F8
15FF783CDE0A5A5DF315F72FAF8798DADE8F390DA75F2237A4FC1D0659D2926D
0FE7F07D743545BE4398C86E4F96BE9982B6EE4C1CB14D0EDAE88FE94A255EAE
2182A767D0C5F4BB9CBCCBFA7625C922AD1FF2B250222D68E2F8F0544CE29F39
29A98A589D9CEE75E299A53F5DB00C952DEE1F6CE6A0752411EC61354347A758
A8773E81099DA63D302CBCBD80B08416BA3FBA00C0EF6C924AD5934C09C12513
75ABE920EB50BBFCE512A45CC40FF6339956E6205D28B4700C1756B32F065473
592FDDE40FA5BBD22576CC0C80F9D84EC1E1E29ECE55922049D757345A692A4E
1A12F758DB2355A2BCA9632B90226E6F899371EBBCCEC1906AAC7DC48CB99EEC
67E8E99051FD700828E8BED578FC72028477E858C3F08538215E00754FFBC720
C9489CF6BF32D2A22897FDBD70F729D915BC8C6A5199EE7BF0DBCE7007246381
1257891A08FAD24873CC2C75DA3473DAB2832332F6784B63AE9FE8C66DFDBDD5
8BEEBAF5565EE90A4DDACC298A7F771483C26BB2F7622736A0FDD2D813AB4369
3BC84402FE80817B67E939CF69FDCDF57D19559DBFD8C476A8B0A88362BFDCD0
49907FE5F0A77229D0AA6E4041E50A14A1C76ABE9A1B857A54DAF7A4CC5C2D09
539CD22DEF7FE01F6650249E85130952321CA0E1A5E0185A71AE5A7FB9C3CCD7
937205ABB5CB1384AD3F6DBA4F2DDB502E429FECC46A0DEC15748EFF68F498A5
16CBBB1D65C8650851AA63AC4A5BE8C364B8164E6CF77E91BEED3C5DE8E5621F
EED17F055E018CB367331B05EFAD2795D667D3E495794B2EE2835BEF3B22049B
6522EB1E1AB3F438CA57A2D497B50B272A65E7D5122137BD1B6EE530E332A19B
F10FAB381D6A0976335EC81AFDF3F629F7967B89B09EFC1C0822DCDDABDAADD1
9D99093B81444B8B9DD5A72FD601B4C221253289590B1722F95F6CEA4642F240
9E506EDBFE9AA1867F67FDF66A3DCA3C092A691292BFAC09A0A66B863A85A75C
AA28B66BCCFC7855461372B4CF5400F4B7BCF0DA5923F1173793087399AE2CD4
2EA3950E8C685E1633142C074C8DBC0B9A1993A9B392A4FB76D29C0565E07065
09A271280EC343D3AA6D7065146003D317F51A0ACA357078B264F7B5DE9F1C59
5016D922FA4F462FE35C58E41D8FABE14467AD1C453F9E774389BF54308B3DC9
21E2B0C748EC94C2F329E12684A05A6417E1A5898E95B563E295134E6942D17E
702DABFEEAE10AC5CFD56A17AD7D78BA6731EE262D68462720A813F0158EFA3F
A577FA9FB6AEE138CE340DD58E736113345D596144FF49AB0E7B399FB2354E6B
339F2643DD3C8D21B3ED60B461974CA96F553212C06967548E00ABF534D4380E
4BBC06F77621723D48EB70473182818A9278854EA8FDE1C4C4EDD8C453FBCA91
32C26716B73584C049A786679CFB5B6D0CC5D397DB2DD70D22A88D59037A05BF
9842C0D70E6AF784A117617CEF422F7E209C19161FFCFAD9CBA9F1CAFF7E4879
9B37D21481BB42DFF27C8F79136F1517C70E009D89E11FD1077FF1449F2D0C9E
61548B2E54E6A57A98495D0711F2E705AC31AE62DA3B35D95583636D113EC798
99621E1789548F30389BB0DED9AC72A082E96BDC5D82872E30CA63DC5D4FC31B
8B271645D5D6BF1359584455FCA7617FD7EE9216B8432FF19E9204C156430173
AEF758B362D44119A6D50BA19A29DBAD10C24386CFD079F67B043F71912ED4DF
0D3F43D356D401BC58235808CCE2B497FA302E0EB87E1D278D076D24F9D683F9
01F8008AA1C547BA352302969B5CD517C1AFC2C42AA317D3620FD9DDBF7B909F
1F87B638C5B191EB96BD1CA41D6D36E8D75702DB6687F83B637F19FFB7511DE2
23A0A261324189EDB3894866264CFBA06065AB22476B5017C53D18DADCD8377F
BCDE84705383D05EA02D410DA660EE50583BE34AA679AD16F6637DB6A215655E
F488D040C63ACB5FA24E41CAF5051FBCD1C18A271D67A94B587DB3D7BA51638B
64D935BDBD549F79515DABE3C74E9CFF1AC27B24ECDD666B300F1D378361FC8C
BC09CF5BA8D6E5C1C149D38E457DAB48EC8BAC4B0F000C5AA995ADE92B15AFD7
42E730D62C9BB96EBCB4DAA4FBE78E6612D7BB746979F4DD1D180C86C7C49D45
8491A14805FE32EA1E4568FE1427D7A5FC1D7CFD5D05CE83074DC561288D166C
942A79B06EA4465759D0B357D962770F37D06BA760546DF3F774D3814481FF72
1C94CAF73D5DCFDFCFE3A5511219AFBFABAE4AF312575682E6A86792FF4B1E9A
7C0B112F18F889050AEF7C63E8A7DD0258EFFB92D154F957FB336DF35BD4B322
8907FE2C69F8DC14A640CF8865AEF482276FB9FBFA9B5BEECC34BBBA65E5D572
515ADDF084844FF1B357B10EC3855E96425AA5F10CA1EF4608FE644DA9ECB83D
720FC60882E920EB1C184DA0C0396BB3AE8446D1F8E95F06FDF9D0CCD55FCFA3
5A91FC4E741A3DD9230A4FCD695D4DF5AD80F9C357CA8E2424585B9D34982C57
A0C8513AB434161B4CD9385A5AFA01532296FDA1DBEC1848858566F026E25F35
08C48A8BB31377DE3B1B91161962E11F2D969EB0B7E169D0A3EC24C9454987D9
A8FFE73CF66A14AB4C73C82A8D266AE490756AEBDD463A19A92CE2FACF7C07F2
49FC058275A863D921A182DC7C205A9A740BBD39451AD0062C6D1CEE3D463FB5
F6588F762459747A0C119FC35E435A69079A46C84B3CF54BAAB62D5995AD4E14
D9CBAADF8EF93A933795C0CBFB7204DC654FFA3859FD9E1D5455234F366F8919
BBA377177966F9346F38AB8FAA7956D34CCBAD35DBB4AEF2054421E951E89757
9BD4CBBDF2276A4F74DE4D6BB8F341FBA21304C93E72878250A8C0BAFFDE7DCE
1CD6F5E09E418B68C193E5E3C936A06A609F48029307D8249FEAAB72F6E1C8DA
1C6DA4D7D31A9F6BE6F146D4A9DC78F419FAB7C9E1CFE835E116B59E7BB99EBC
75215AC3E6C1752635203AB0F684664BFE59CB75371F4B124C64E88902FDBCC1
1B82781A0B7FE592860A47A61E951CB5B08CDAA8FC4834EB043EB10733C06CC8
8625A3813E3C37DDD271CA865121F208D2B653B93AF76866E38F6F5B4953BB67
90BA3F964EFC52D90EA1C3CCD41ED86ADAE9C01123EFAC57E9153AF523A60202
B4062B5C8A4F3AF53C72678BB307D3AB4B28FF68957942DB5BD93FB36D52A5B2
708D4DF4D28011CBCEE74EEC946B4412B0B9666DA6446AAA01B9C3F99ABE1F56
E5662445B08C647E54B19FF7506BFD050AF0DAF11F80B65FD333DD6A1DFD3F3C
F2476231B11E3005F3FD9CDE61C7964BEA151336168FA3FEC3A59203A9B6B8CD
360DA78C0157DB843CC75FCDAA40A5C9A5623B07973C44A084B4B9AB0A69C94B
B35D55EEFC72CB446B6A3818E4D5E4F6D55FF114586FF56F82756E7E7E6A7D1D
4D75B7C8E038A136F8256B7DCCA0D7503A0750027042AE2ED775C99E74F8C0EE
459510B9C763D2C0E410C52DFEB8C077DDDFD981362A1538C24BA0745D88EDAB
8F60072E7CB8147327DD8305DE0344DF203DA7C282144D38D451126588DF5F26
53C608EEC3D845B12F3975C5EAFB904FC0A0C09325430B6C2F801B8B7E48C029
1852C6AF3C21715565E7C7A802F123A58715566C2AED41B70E9DB0BCF3939007
4C17A3CCE3980D40A34904451A4EC7894E2A0D72499247C2809358F98D672E02
62522F9EBCFA1387594F6B2AB109589611DC0A84475089DD2C1469769932A190
473BC59F987562CD6AA206F56662BE96AE49BE13904D8A7C1A6B69EB18BA4DD2
95682F6E109B03CAADF1C109B63DF85FE356A32BB5F337C05CF64D81FE3741D9
3452813521C72CE09AA133598A0A66EC02085C18FFF27707F64DF8FDBABB8BF8
13CB9DB27CB44AA47AA0D4E648240B1350E252D2AB5429BF76E1A7D08ABCA444
3ABFF10E70D38DC6EB9A2E55D57FC85CD2C5370DDA01183D761EB836DCB0DEFA
B38DC24E562CAA1C5DE638892BDFC27D77D1CA213D04F5DE5D8C5C9D04F0AC98
EBA8484CC6C201DF87F002C463693495C5C639C7DD1527B3D18D32640FC3779C
18EE7FC488E90BD714A9268086A4C9BA264829CBB9EE2963BF87271B5DC4615D
281B73F4DA92823A4FD6651C4BFAB082F33CA61BC587A5132CA4E82F35F9DF4D
9B9F941BABA5E4A9E942F3C6B7029A58B67828940729A228696E7094847126FE
27211D2E1DFD5B7C33A6DE4D9A1E9142D27FCE2CC85BB5DAE1FC5751649009B8
6F080520F651F791B14D83F1DF955796BD15D834C53562765C84F86E19F8EC61
581A4B4CED1CAEC753FFA8DCB018DB7886B217F29A1AB5F5EF4D4DF2D036FFBD
288FF8E3747AC6CE46ECA8E60DE90966B9A2828F75571A14100918F605CFE56D
A8B9A95E2F71E964DFE75E27D378208A379C22193172318686ED9E447F8E185B
03C942C987A026992772DC2A0B06D5E4AB1186D81007460001055D27B9479396
116CB75D3735842F6E706AE9A36F2A055394192D922641ADBEDE3875523CDFFF
0F3B2CBBF616B3C6BB81ED09F494B51A2269832861BD92C099CE5C7F64567C9D
80D1829D7FE5F45647ED6B99C6DCF4BA2F2C03FE2C63B1708B7866DD9E8FD9C6
F90676BB537EF59501FD94988B3667BDE771BC62455181F1B1B6199BD1AF2158
90547EB22A1FB22654555F8CA81A98FD95E6B83737EC98F4A6F7EC12B8B4FB9B
366B109921E40254F6F7F0127C5A92A54E9D8E50C05AFF61EE040DF8DCB86031
216DDA75183E5D18DA7C41529DCEA4C011D58FCD7D6BC2B13BA1A06C0764941A
D57270774A0EA3317DDCB6CCA6249AD64F922526C352765C2A041BD4C5BA15A4
4D2A16686EA73CA41B1667D83AD9378CA55306C8D08B0CD4D44C97A8F6546457
7DDFC461E6ACEEB25CAD1B04B9AF1831192D23878E807AE0D523F99254773C65
920E5E3C1F229C589A8FC997026C3EA14F20143C90ED66A6DFEFF5100204D212
B6E7A84CC797802E2E30E3B9D85E3E5F32DF16D6CA98017C7C118D8C67F71A4B
C3C8794BDDE617BDDA669AFF1099E3D76D55067C591328E391BA0F8913008DF2
99E1F9DE618C179B1FD5EC127D5465D204E46F7ECF1229D9BA0A6773C8E3AA1A
9D95416FBEEA9C67322BEC52B478206ED9F8FAF6B0A70F46877976C12D195EAB
0339569338D455D8D355DBB8548F0D58ED8419EFEB8F575EDD9301D779B22FDD
DA497D541FF251FF770191910E01CA702AA905BDF292F184074676FCA8C043B0
2CA8FEF64559AB53A08ECC991B61ACB6AD7893D69D6EC13DA3EBC3427456EA5A
76E1FB05B5162EFFD0DC69628212D05ABB15DE733618F0317DB8FE0A53DB1691
B48AF047A6544EDF34268AEC0AFE05D539A338C029DD6AA1876AC4F908AE029B
BFFB7EB14B44F8CF7B29AC7A1473C542FD3F1F90A977E8657ED1E3D4690E3EE4
00C3394CADCD0B28501C9323EDACAF4760BDB5D84166B43FCB760375D26286BA
01C7C0E4B8DE81AC2B3F2A38B8CD430EF341FEAB2A3E1DF0C1C992A847CDF739
2CCD4C3DBC3E11E2D6A185EE6A8152A31199D8877030ACD3CBFE8B51B3416285
05C51D9D58A1892376776461D2BFEEF8BFD513B0380993B8D52A6546D6920CD7
EE44849F4021CA494EF6C2CE64BB429C542FF8A09D6B9F4F58E4908EFA20B755
1C67CB65DFB3A6A4F461F768E4DB0CC2627A90945C9E7FE52389CAFAEAEE1C80
F49880F8EAFEE102D755AB6A0DD12CC09CD9112690708E32DA6564E63E4448BD
86AAF678BCB0B56BFF435FC0AD588D30DF7582E296838D7DD1CCD7A89F9D2181
70F4EB878D429B95D709D9A2531462945084D8BF715E80C3B0A16971A05AF4F3
29B3BF197F1CE08A4D8635BC8BAB711F1FB99B83BF35C8C3C0F03DD8E221098C
BC3E05C524BC8C7F280053479A3A8234D93B303EDBBE9C97735E8DE0B3F9CE0F
253FB6800D5D6BB753CFB933FB9303A98A69C29E73F9F9E81159520DC4E99BE7
62C9F5CE2D55C3CC7C08D069889BE86EE0F7F67FC39E73EAE0E4C167EFCC8494
AEB75615C7A8F64D13FDBD4FB5AE98A4AFF4A097BC7D1A697682E4AEA88E2C22
905A58A3CC586BA5F442E0CEBAE1975AFE355ECBF65DE8E5621FEED17F04A92F
E4B13948F568CE739D1DBEA0F7EBBED6B1E29CDE2DE22B133E9F6AAE0CDA18F2
428EACE52EE14B5FE74C30B0A5C97B6B8F4763D21E005D89FAEBBD7D8B06F3FE
16E4C469D9A5443BD8E8BD8CDF61FEF2585E482EE3E644EB9BD2F314B4595C18
B7A2C0EF1F5A33B8BE57F38491E2CE6E3396AB329CFA81A3FD438C5C31BCF78C
0D623D841C8AF6D1E19F8548D3FF177F057C58A40714D717DAA3E3BAB42C1B0A
34361A1DDB23585CB941530493A8484BD8765468462B9AADD9F877A33AE08A7D
848E5EB73D2F1098006F532E9227C04A548A84E8652AE73A8A9E6966032D23F8
7F9F8ACC096D5068D0C36DBFEBFCDBEC128F6FBA8564C7F0E530B72981F3B682
029BE92AA5399BC1B9F4D59F1CC4D51744A45E451E59684051F9985A4C77BD0A
1B2BCA9E2E4002AC853E772944B435BA7B817CE47D4731F12C1375B510DF2FB6
000B957E4739469EFE567567E3559C5300FB2E60BBDC3E9E6B0BA436F1BD29EA
F819CF58B26A83FE867DE833DA3CA823BDDAEDE00B01FAD7705D8D118127E020
F7FEE885785785AFCCD0D27C17E31855AF4F23DE3DCF048A0DC8760616D79481
2A101965D7D89036DFC483E2A7DC5DB9E0E8625B5BFE7A66C862301211D0C733
EB9A02071A42B6D057F6EC115CE200FA1CD4AC5AFD73579220756C28CD4389FF
7661DB45C7F7BCFBD90A00888E017A592D413187EBC5DC8390C682B067F1525D
C49B516D26B48487BA51388DC0A3BC18FE35BCFDA4961633D49AEFF0D925BB0F
DE9646FB43ECB2FF45EA93A0C15C62AA1D113B91EE1CA91B9ADFD195F24CB953
68A12024C01EFD41767EC553FA7DB29F9EE8DDE89A3A6AEA832F1CF57919EE81
1D824099A8AAA4336A219F89A2B68C2C0688E056730DC920C3C6CA4FA654A0E5
D21FB404697FCF0437D6BAA310D533AFAC484E2C3D97BFA325CE8054689F9B9E
8BA832D5F6F455FF53C7CEE93261BDE67A6689BE6CE558BCEAB29F2BB1DDB59C
CF4E8D1D1703590E4E69BB6DDB50F0C22E6FBA8E9B2272F960713347D7020459
548EBD5D8C4E87FA495DC58BCBC67A40CA1C613BDA54B20347F687E7A62B172F
5D54311A4ECFF08B8122435BF6EC3A5AAFB86CE1ECAB76B7CE5A35DA4F58F855
FD538254493B14952989C29FCE47F94F629E6F8F9C64A50F0B54FAFF4CA4BA08
C12FA0DBCCFACC10A787A5AA51B79C15932015CC298D9A55AD518A8AFE6AE6DD
298A4D0D82A0B18C98C0E45A32E47AEB77447704AD5892D7F2E63B00FBC9F02D
648326601CAC53B66361FC9625AD617777866B892C4030526C118C228C684452
513CBF64BC25A59A47E71AF59EBF0799DC7F633D6299F6F19E39400620AEE834
0C96DEB25E01E9F870CA85236D2AF44B3B9F10B72029EF2213B728AD2FC62BBA
8609CCB13F0003D65A312C3520263702A528688E428E49A1E67870AB5D2B59FF
152BB562761FEBE59FD53D54DEE558F100CCEC4771CB4C3E3EFD84585C20609F
5B02BA9EFB09B67587A7C051518D89DDC33C5BEC08EC219C99F032FE572F9F97
C084824548038A09EC7F49A6225E8ADFDB8B4CA7CD86AAAFC3C0C637DEA909FA
E391533AC746CD529BAAD1AC6380CAB9C132511C02C0416C154F57C105EDE9B1
1B833C434F6D895E615CD1A4BCD5FEEF69EAA19BE510064CCD3309644119E1CD
153EFF1A4B235CF18814481A8977D55EB8F2A9568C39F8C29AF1EB17C19CF7AB
0FFF3967B5A741B252F7C5B81B487A59005CA37BB8A62B9F60040134BA903EF5
1E091BEACB8E101A7349212CB835ED4AF3B8C82C485AFB5D7267B11C2273F5DB
35E8C8A38D313F992FFAAB3004924BFBC400CABD4C05BB15A331ECF4FBF03F1A
EB4BD4470B0B0515E4CDCBC77D21180A385D833B56669E45C5C03851FFAF3535
5B53BB370508AC6A925B1F9484B56879DFE1185BF04BF416920E040F282AEBBE
6278AEADBF9C2F43C163877FE2479C6E657A4D8874A3F4114770765DC412F166
15D131511483E1813837940E99A5BF2CD3A89356F39EC3901F46C874E4075793
5A0DFFECCA2120D8588EFF06B504D8C6807C2197092DD2EEA03BC245E11D6420
22FEB8750D221A457E0EF8D3F5FA4BCA5A8221B2DC02EEEEF15B5ED9142A198F
7544BA478E2F9AE92AEB4BB3FAD3C4BBDA91A4084F69D80842A40EF8F0050B4F
16D2EEC6D99365AFD5D5D2674B47677B7555D16561BADC8CE29776EFF7CC953B
98B0A792F764E548BA45FBD6DA8078B1600BC1589C73A9CA873ACEC91672EC1C
FF33994D27390DAD7D09451AD9CC51DFFDDAC7ADE8E1FD6AEE9DFF87942F3422
C3F010753205ABE0A2A256E293BE57A42927E3F0424FCB8FB95670467646379D
77DE08001D746D4B74517A1DA067436C53518FF184F6C92387B430921ED3E206
531443CF12BE894AAAB8E2793F56CE2C14DB0D0768E49F9D724CC20A9C50BB9F
F4920A060E9B10DC5F84DAD1831CEF240677571C65DED9398C3C157CDF053319
F07F2249CBAEF9F12E09365208CE1FB984C9C5B2A2C0C313104F49904F8225F7
AD3D55FA0E7304B1FEA3C1030A05AF7DBC879EA2142EEA9691547D4E09D920B2
A76D3229BFA89973842874FAA563821C68059ACEE6156FD04C71662655AA51E2
5B22ED67B895C3BF85B71C907CDA4849E8177A0607F0FABADAD4C541C078B8B4
264912189A38C6F9AA84BBFAB6596D2DA26ECB65C49B3023AE15CDD011119EA2
8A3A8FB238E8CF1351B0CFA5EC2B3879547D400ADCA855362210962B3400AEB6
4ED5ECB0F24E7FACC21A2EFEC5FE9F074BD6F569AFEFB5E2972A4DA72A6B6A6C
E685DABD6DE7FA3BBFF4F39F140659C5162ABE1412648A5DACE3CFC931D421E7
03C362D829DC55D1D99DFB5F3A26FF546106AA51D83076FB450E710D365A98A0
3C8FA3F9A4E31E1656523593148B0B41A4644C8B88EAAED6A112FA287CCE9D82
A4C9ACEDE04042C6CB55754DB43C350B314DDEFE43199A32112A72D9F9319DDC
6E9F76E01D48366429807A880DB3550F5661F591F06E057BAA06DE4EF3F475E5
7BE4A4A5C17DE6823755374DD091F3E48A3B8C0DF6CD74F61A1B1E94F6605CBE
638D9AD1E0B44AE7245E00A339E1EF2A8290D3C0C76EC4F1640F8631F2E637F9
2C64ACB8AFFD768B9318141778712D823701F5A683A7BD1246E8C0D7205570AC
830F81D3E81C21D636BF71CD0CA07B78A1EB293E344C073494FDBD85AB6FA412
7152B5139B8EEC22BEE2E86341709938BDBCC83D9A3019CC13531736F7FCA280
4E784BEB49E1953F15DF92B29732C0B9F4B6DD0AA3C7D9918187F0772254116C
E0A82BF2B28F6925A98E05EDE98AB865619A6406B1BDBF2CA7859617A200D5DA
FFE353929EE38B67CBDAFF19E94053A31C4CBFA7975478055C26AA2695B21D53
48E3F6FBFA5C518BFC01E9537998EED0EC4446A0C4B9E5B5BFFE723625922BB5
BB206AAE96F667A656AE31A100EEB83100D939755DA4957636C8AA87CA47E1DA
A3A19C96BDCFC064FEF7C215E2FEAB6971D378FB8CA0A871B6CF075F42771C2E
5918B88E43FC77F7594B8D807E710193A6EE251CAD02E6A3DC8F7A01812B6EB4
6F0D9035BBD4A0ABC7789CDB891DB728AA97A857FD66A6F12F01B99F7C43B021
49D661919D533CE73BE753625DD677CACEC7DE50B730DEFF65AE9F6A81C4DB50
7F2316BF834DA5B13327FA887BAEA232E31B735E5DEF4843C7219CC92BE90B36
57B6F0EA299D0CFAA8D82D3E7D9FA2895EB2A2FE6A397D71B99F68373988794E
0AF20604351597F12D8C730543071E483CB90D3E86B1A03A75565F8DD04255A4
7F3CA9E0608138431CE2A9311303A2BE24857B55ECC1F81B32C3D819A0C1AE05
DA79C4E2FF2669083A0E579C435B044BDFB4618A51975E4F988362F79CB0B5A9
9199A3102A15FD7569CB31DD2F78942A522380BA62D28FCBFFD58ACB85DD90B6
3B3910DD5ADAC5C57A3C69DBECD0614986C7202A7DA13B7912195C04D5428B68
3AE49504CBC3212BA6ED764A47CEA8E4F0219AEF63323F8B10C36E35970C53A1
E4387253A98D0281FB6AC2D69A630BC3D4DDE5D843EBE7C98B2096DA2EDE17CD
1B1A2BD74F67FA58
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000
(C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktional)
@start /Fa 154[966 101[{}1 1328.35 /TeX-feymr10 rf /Fb
134[497 497 16[470 51[470 470 470 49[{ enclmec ReEncodeFont }6
885.568 /LMRoman8-Regular rf /Fc 135[530 17[452 31[595
690 772 671 710 705 65[{ enclmmathit ReEncodeFont }8
885.568 /LMMathItalic8-Regular rf /Fd 255[732{
 enclmmathsy ReEncodeFont }1 885.568 /LMMathSymbols8-Regular
rf /Fe 199[470 1[470 470 470 470 470 470 470 4[732 43[{
 enclmrm ReEncodeFont }9 885.568 /LMRoman8-Regular rf
/Ff 173[959 82[{}1 1328.35 /MSBM10 rf /Fg 185[723 4[830
13[553 553 3[307 46[{ enclmec ReEncodeFont }5 1106.96
/LMRoman10-Regular rf /Fh 160[909 45[606 1[606 47[{
 enclmec ReEncodeFont }3 1212.12 /LMRoman10-Regular rf
/Fi 203[993 52[{}1 1328.35 /wasy10 rf /Fj 201[0 3[886
34[664 13[369 1033{ enclmmathsy ReEncodeFont }5 1328.35
/LMMathSymbols10-Regular rf /Fk 162[361 1[361 29[1012
1[361 4[650 650 650 650 650 650 650 4[1012 1[506 506
40[{ enclmrm ReEncodeFont }14 1328.35 /LMRoman12-Regular
rf /Fl 134[634 739 1[629 1[470 613 5[1138 1[676 3[623
641 1[676 12[1228 11[1107 12[1012 650 1012 361 59[{
 enclmmathit ReEncodeFont }16 1328.35 /LMMathItalic12-Regular
rf /Fm 650 2[723 5[650 17[650 105[578 686 686 939 686
723 506 513 506 1[723 650 723 1084 361 686 397 361 723
650 397 578 723 578 723 650 6[795 2[1336 975 2[723 957
1012 885 1012 975 1192 813 1011 668 469 975 1021 849
885 993 939 921 975 1[614 4[361 650 650 650 650 650 650
650 650 650 650 650 361 434 361 2[506 506 6[361 5[759
27[{ enclmec ReEncodeFont }71 1328.35 /LMRoman12-Regular
rf /Fn 3[1196 132[1554 1[1196 837 849 879 1[1196 1076
1196 1793 598 1136 1[598 1196 1076 1[982 1196 956 1196
1046 6[1315 2[2223 2[1497 1196 2[1470 1616 1682 2041
1293 2[801 1682 1691 1353 1412 1649 1554 1530 1625 7[1076
1076 1076 1076 1076 1076 1076 1076 1076 1076 1076 598
717 598 44[{ enclmec ReEncodeFont }52 1912.83 /LMRoman12-Bold
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-2331 165 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a -2331
165 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a 1328 x Fn(F)-239
b(A)605 b(2.3)g(-)h(1)g(A)-60 b(ussagen)604 b(\374b)60
b(er)604 b(lineare)h(F)-179 b(unktionen)602 b(-)k(MC)g(-)g(BIFIE)p
0 TeXcolorgray -741 4800 a Fm(1.)p 0 TeXcolorgray 651
w(Betrac)-36 b(h)g(te)433 b(die)g(lineare)h(F)-108 b(unktion)433
b Fl(f)142 b Fk(\()p Fl(x)p Fk(\))369 b(=)g Fl(k)340
b Fj(\001)295 b Fl(x)g Fk(+)g Fl(d)p Fm(.)921 7346 y(Kreuze)530
b(die)h(b)36 b(eiden)529 b(zutre\033enden)g(A)-36 b(ussagen)530
b(b)36 b(etre\033end)529 b(lineare)i(F)-108 b(unktionen)529
b(dieser)921 9338 y(F)-108 b(orm)433 b(an!)p 1062 10046
44260 45 v 1062 14850 45 4805 v 1770 11914 a(Jede)h(lineare)g(F)-108
b(unktion)433 b(mit)g Fl(k)414 b Fk(=)369 b(0)434 b Fm(sc)-36
b(hneidet)433 b(jede)g(K)-36 b(o)36 b(ordinatenac)-36
b(hse)434 b(min-)1770 13905 y(destens)f(einmal.)p 42912
14850 V 45277 14850 V 1062 14895 44260 45 v 1062 17965
45 3071 v 1770 16762 a(Jede)h(lineare)g(F)-108 b(unktion)433
b(mit)g Fl(d)369 b Fj(6)p Fk(=)g(0)434 b Fm(hat)f(genau)h(eine)f
(Nullstelle.)p 42912 17965 V 45277 17965 V 1062 18009
44260 45 v 1062 23072 45 5063 v 1770 19877 a(Jede)h(lineare)g(F)-108
b(unktion)433 b(mit)g Fl(d)369 b Fk(=)g(0)434 b Fm(und)e
Fl(k)414 b Fj(6)p Fk(=)369 b(0)434 b Fm(l\344sst)g(sic)-36
b(h)433 b(als)h(direktes)g(V)-108 b(er-)1770 21869 y(h\344ltnis)434
b(in)-36 b(terpretieren.)p 42912 23072 V 1 0 0 TeXcolorrgb
43621 20873 a Fi(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 45277 23072 V 1062 23116 44260 45 v 1062
26187 45 3071 v 1770 24983 a Fm(Der)434 b(Graph)f(einer)g(linearen)h(F)
-108 b(unktion)433 b(mit)g Fl(k)414 b Fk(=)369 b(0)434
b Fm(ist)f(stets)h(eine)f(Gerade.)p 42912 26187 V 1 0 0
TeXcolorrgb 3753 w Fi(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 45277 26187 V 1062 26231 44260 45 v 1062
31028 45 4797 v 1770 28091 a Fm(Zu)356 b(jeder)f(Geraden)g(im)h(K)-36
b(o)36 b(ordinatensystem)356 b(l\344sst)g(sic)-36 b(h)356
b(eine)g(lineare)g(F)-108 b(unktion)1770 30083 y(aufstellen.)p
42912 31028 V 45277 31028 V 1062 31072 44260 45 v 47992
4800 a Fh(___/1)p 1 0 0 TeXcolorrgb 48228 6792 a Fg(F)-123
b(A)369 b(2.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 35100 54804 45 v 0 TeXcolorgray 24746
81281 a Fm(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fn(F)-239 b(A)683 b(2.3)g(-)g(2)g(P)-60
b(arameter)684 b(eine)e(linearen)g(F)-179 b(unktion)680
b(-)k(O)-60 b(A)683 b(-)h(BIFIE)p 0 TeXcolorgray -741
4800 a Fm(2.)p 0 TeXcolorgray 651 w(Der)461 b(V)-108
b(erlauf)462 b(einer)f(linearen)g(F)-108 b(unktion)461
b Fl(f)603 b Fm(mit)461 b(der)g(Gleic)-36 b(h)g(ung)461
b Fl(f)142 b Fk(\()p Fl(x)p Fk(\))415 b(=)h Fl(k)359
b Fj(\001)314 b Fl(x)g Fk(+)g Fl(d)461 b Fm(wird)921
6792 y(durc)-36 b(h)432 b(ihre)h(P)-36 b(arameter)434
b Fl(k)479 b Fm(und)432 b Fl(d)h Fm(mit)h Fl(k)45 b(;)221
b(d)370 b Fj(2)e Ff(R)434 b Fm(b)36 b(estimm)-36 b(t.)921
9338 y(Zeic)g(hne)355 b(den)g(Graphen)g(einer)g(linearen)h(F)-108
b(unktion)355 b Fl(f)142 b Fk(\()p Fl(x)p Fk(\))369 b(=)f
Fl(k)181 b Fj(\001)136 b Fl(x)g Fk(+)g Fl(d)217 b Fm(,)357
b(f\374r)f(deren)f(P)-36 b(arame-)921 11330 y(ter)509
b Fl(k)555 b Fm(und)509 b Fl(d)g Fm(die)h(nac)-36 b(hfolgenden)509
b(Bedingungen)g(gelten,)i(in)e(das)h(K)-36 b(o)36 b(ordinatensystem)921
13322 y(ein!)p 0 TeXcolorgray 0 TeXcolorgray 19759 17306
a Fl(k)414 b Fk(=)22363 16783 y Fe(2)p 22363 16996 471
45 v 22363 17764 a(3)22966 17306 y Fl(;)221 b(d)370 b(<)e
Fk(0)8133 48452 y
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 275.99152 a add def
/d 0.0 a add neg def /h 253.22966 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 8133 48452 a 22999 34908 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81097 T 9
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 141.69453 0.0 -134.29698 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -113.81097 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 130.88278 0.0 -122.34688   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 141.69453  0 -134.29698  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -134.29698
 141.69453  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-122.34688  def /maxTickline 130.88278  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 130.88278
0.0 -122.34688   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 141.69453
0.0 -134.29698 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 130.88278  0 -122.34688  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -122.34688
 130.88278  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-134.29698  def /maxTickline 141.69453  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 130.88278
0.0 -122.34688   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 141.69453
0.0 -134.29698 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
21754 32044 a Fe(1)21754 28895 y(2)21754 25745 y(3)21754
22595 y(4)21022 38297 y Fd(\000)p Fe(1)21022 41447 y
Fd(\000)p Fe(2)21022 44596 y Fd(\000)p Fe(3)21022 47746
y Fd(\000)p Fe(4)25914 36254 y(1)2679 b(2)h(3)f(4)-16584
b Fd(\000)p Fe(1)-4351 b Fd(\000)p Fe(2)f Fd(\000)p Fe(3)h
Fd(\000)p Fe(4)22999 34908 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 22999 34908 a 22999 34908
a
tx@Dict begin  { 141.69453 130.88278 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 22999 34908 a 22999 34908 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 22999 34908 a 22656 35194
a Fm(x)22999 34908 y
tx@Dict begin  PutEnd  end
 22999 34908 a 22999 34908 a
tx@Dict begin  PutEnd  end
 22999
34908 a 22999 34908 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 22999 34908 a 22999 34908 a
tx@Dict begin  { 0.0 0.0 pop 141.69453 130.88278 exch pop } PutCoor
PutBegin  end
 22999
34908 a 22999 34908 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 22999 34908 a 21951 35240 a Fm(f\(x\))22999
34908 y
tx@Dict begin  PutEnd  end
 22999 34908 a 22999 34908 a
tx@Dict begin  PutEnd  end
 22999 34908 a 1 0 0
TeXcolorrgb @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0.8 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -4.720000000000004
def /x1 4.9799999999999995 def /dx x1 x sub 199 div def /F@pstplot
(2.0/3.0*x-1.0)  tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274
mul F@pstplot 28.45274 mul } def  /ps@Exit false def xy moveto  199
1 sub { /x x dx add def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } ps@Exit
{ exit } if repeat ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul
gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } if  gsave 1.2 SLW 0.8 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 38684 48452
a
currentpoint initclip moveto
 38684 48452 a 1 0 0 TeXcolorrgb 921 52436 a Fm(Die)600
b(L\366sung)f(gilt)g(n)-36 b(ur)598 b(dann)h(als)h(ric)-36
b(h)g(tig,)599 b(w)-36 b(enn)599 b(ein)g(Graph)f(gezeic)-36
b(hnet)599 b(w)-36 b(orden)599 b(ist,)921 54428 y(der)559
b(die)h(Bedingungen)f(f\374r)h(die)g(P)-36 b(arameter)559
b Fl(k)605 b Fm(und)559 b Fl(d)h Fm(erf\374llt.)h(D.h.)g(ric)-36
b(h)g(tig)560 b(sind)f(alle)921 56420 y(Graphen,)432
b(deren)h(Steigung)g Fl(k)414 b Fk(=)18130 55897 y Fe(2)p
18130 56110 471 45 v 18130 56878 a(3)19167 56420 y Fm(und)432
b(deren)h Fl(d)369 b(<)f Fk(0)434 b Fm(ist.)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 4800 a Fh(___/1)p
1 0 0 TeXcolorrgb 48228 6792 a Fg(F)-123 b(A)369 b(2.3)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
60353 54804 45 v 0 TeXcolorgray 24746 81281 a Fm(2)p
0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fn(F)-239 b(A)791 b(2.3)f(-)i(3)f(Zeit-W)-179
b(eg-Diagramm,)791 b(Gesc)-60 b(h)g(windigk)g(eiten)789
b(-)i(ZO)h(-)-2331 4515 y(BIFIE)p 0 TeXcolorgray -741
7823 a Fm(3.)p 0 TeXcolorgray 651 w(Das)314 b(folgende)h(Zeit-W)-108
b(eg-Diagramm)314 b(stellt)g(eine)g(Bew)-36 b(egung)314
b(dar.)g(Der)g(W)-108 b(eg)314 b(wird)g(in)f(Me-)921
9815 y(tern)359 b Fk(\()p Fl(m)p Fk(\))p Fm(,)h(die)g(Zeit)g(in)f
(Sekunden)g Fk(\()p Fl(s)p Fk(\))g Fm(gemessen.)i(Zur)e(Besc)-36
b(hreibung)359 b(dieser)h(Bew)-36 b(egung)921 11806 y(sind)433
b(zudam)g(v)-36 b(ersc)g(hiedene)433 b(Gesc)-36 b(h)g(windigk)g(eiten)
434 b Fk(\()p Fl(v)27414 12005 y Fc(x)27998 11806 y Fk(\))g
Fm(gegeb)36 b(en.)p 0 TeXcolorgray 0 TeXcolorgray 12164
33637 a
 currentpoint currentpoint translate 0.82236 0.82236 scale neg exch
neg exch translate
 12164 33637 a 12164 33637 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 247.04123 a add def
/d 0.0 a add neg def /h 213.06062 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 12164 33637 a 17464
28973 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 15 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 199.16486 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 14.22714
T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 18 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 170.92726 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 14.22636
0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 199.16486  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 199.16486  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 170.92726  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 170.92726
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 199.16486
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 170.92726  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 170.92726  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 199.16486  def /dT 1864780 abs 65536 div viceversa
{ neg } if def /DT 20. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 1.42271  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 1.42271  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 170.92726
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 199.16486
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 16219 29258 a Fe(0)15748 26109
y(20)15748 22959 y(40)15748 19809 y(60)15748 16659 y(80)15278
13510 y(100)17229 30319 y(0)2679 b(1)h(2)g(3)f(4)h(5)f(6)17464
28973 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 42.67911 42.68143 0.0 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.6 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 42.68143 42.67911 42.68143
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 113.81097 113.81714 85.35823 42.68143
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 170.71646 142.27142 113.81097 113.81714
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 17464 28973 a
tx@Dict begin  { 11.76341 160.87273 } PutCoor PutBegin  end

17464 28973 a 996 x Fm(W)-108 b(eg)434 b(\(in)f(m\))17464
28973 y
tx@Dict begin  PutEnd  end
 17464 28973 a 17464 28973 a
tx@Dict begin  { 148.10135 15.5895 } PutCoor PutBegin  end
 17464 28973 a 996
x Fm(Zeit)h(\(in)f(s\))17464 28973 y
tx@Dict begin  PutEnd  end
 17464 28973 a 39511
33637 a
currentpoint initclip moveto
 39511 33637 a 12164 33637 a
 currentpoint currentpoint translate 1 0.82236 div 1 0.82236 div scale
neg exch neg exch translate
 12164 33637 a 921
37622 a Fm(Ordne)409 b(jew)-36 b(eils)413 b(jedem)d(Zeitin)-36
b(terv)-72 b(all)412 b(jene)f(Gesc)-36 b(h)g(windigk)g(eit)411
b(zu,)f(die)h(der)f(Bew)-36 b(egung)411 b(in)921 39613
y(diesem)434 b(In)-36 b(terv)-72 b(all)434 b(en)-36 b(tspric)g(h)g(t!)p
0 TeXcolorgray 0 TeXcolorgray 9600 41210 5043 45 v 14642
41210 4523 45 v 9600 44543 45 3334 v 10309 43266 a Fk([)8
b(0;)221 b(1)p Fl(;)p Fk(5])p 14598 44543 V 0.9 TeXcolorgray
14643 44543 4478 3334 v 0 TeXcolorgray 1 0 0 TeXcolorrgb
16385 43392 a Fm(D)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 19120 44543 45 3334 v 9600 44587 5043
45 v 14642 44587 4523 45 v 9600 47920 45 3334 v 10309
46643 a Fk([)8 b(1)p Fl(;)p Fk(5;)221 b(3])p 14598 47920
V 0.9 TeXcolorgray 14643 47920 4478 3334 v 0 TeXcolorgray
1 0 0 TeXcolorrgb 16370 46769 a Fm(A)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 19120 47920 45 3334
v 9600 47965 5043 45 v 14642 47965 4523 45 v 9600 51298
45 3334 v 10309 50021 a Fk([)8 b(3;)221 b(4])p 14598
51298 V 0.9 TeXcolorgray 14643 51298 4478 3334 v 0 TeXcolorgray
1 0 0 TeXcolorrgb 16457 50146 a Fm(F)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 19120 51298 45 3334
v 9600 51342 5043 45 v 14642 51342 4523 45 v 9600 54675
45 3334 v 10309 53398 a Fk([)8 b(4;)221 b(6])p 14598
54675 V 0.9 TeXcolorgray 14643 54675 4478 3334 v 0 TeXcolorgray
1 0 0 TeXcolorrgb 16412 53523 a Fm(C)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 19120 54675 45 3334
v 9600 54719 5043 45 v 14642 54719 4523 45 v 0 TeXcolorgray
0 TeXcolorgray 24451 41210 4567 45 v 29018 41210 8528
45 v 24451 44543 45 3334 v 0.92 TeXcolorgray 24496 44543
4478 3334 v 0 TeXcolorgray 26223 43391 a(A)p 28973 44543
45 3334 v 29682 43266 a Fl(v)30311 43465 y Fc(A)31440
43266 y Fk(=)368 b(0)221 b Fl(m=s)p 37501 44543 V 24451
44587 4567 45 v 29018 44587 8528 45 v 24451 47920 45
3334 v 0.92 TeXcolorgray 24496 47920 4478 3334 v 0 TeXcolorgray
26274 46768 a Fm(B)p 28973 47920 45 3334 v 29682 46643
a Fl(v)30311 46842 y Fc(B)31488 46643 y Fk(=)369 b(5)221
b Fl(m=s)p 37501 47920 V 24451 47965 4567 45 v 29018
47965 8528 45 v 24451 51298 45 3334 v 0.92 TeXcolorgray
24496 51298 4478 3334 v 0 TeXcolorgray 26265 50146 a
Fm(C)p 28973 51298 45 3334 v 29682 50021 a Fl(v)30311
50220 y Fc(C)31468 50021 y Fk(=)369 b(10)221 b Fl(m=s)p
37501 51298 V 24451 51342 4567 45 v 29018 51342 8528
45 v 24451 54675 45 3334 v 0.92 TeXcolorgray 24496 54675
4478 3334 v 0 TeXcolorgray 26238 53523 a Fm(D)p 28973
54675 45 3334 v 29682 53398 a Fl(v)30311 53597 y Fc(D)31533
53398 y Fk(=)369 b(20)221 b Fl(m=s)p 37501 54675 V 24451
54719 4567 45 v 29018 54719 8528 45 v 24451 58052 45
3334 v 0.92 TeXcolorgray 24496 58052 4478 3334 v 0 TeXcolorgray
26292 56900 a Fm(E)p 28973 58052 45 3334 v 29682 56775
a Fl(v)30311 56974 y Fc(E)31474 56775 y Fk(=)369 b(25)221
b Fl(m=s)p 37501 58052 V 24451 58097 4567 45 v 29018
58097 8528 45 v 24451 61430 45 3334 v 0.92 TeXcolorgray
24496 61430 4478 3334 v 0 TeXcolorgray 26310 60278 a
Fm(F)p 28973 61430 45 3334 v 29682 60153 a Fl(v)30311
60352 y Fc(F)31461 60153 y Fk(=)369 b(50)221 b Fl(m=s)p
37501 61430 V 24451 61474 4567 45 v 29018 61474 8528
45 v 47992 7823 a Fh(___/1)p 1 0 0 TeXcolorrgb 48228
9815 a Fg(F)-123 b(A)369 b(2.3)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 67841 54804 45 v 0 TeXcolorgray
24746 81281 a Fm(3)p 0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fn(F)-239 b(A)717 b(2.3)g(-)h(4)f(Lineare)f
(F)-179 b(unktion)715 b(-)j(O)-60 b(A)717 b(-)h(BIFIE)p
0 TeXcolorgray -741 4800 a Fm(4.)p 0 TeXcolorgray 651
w(Die)377 b(Gerade)e Fl(g)424 b Fm(ist)376 b(so)-36 b(w)g(ohl)377
b(durc)-36 b(h)375 b(ihren)h(Graphen)e(als)j(auc)-36
b(h)376 b(durc)-36 b(h)375 b(ihre)h(Gleic)-36 b(h)g(ung)375
b Fl(y)417 b Fk(=)1054 6269 y Fe(3)p 1054 6482 471 45
v 1054 7250 a(2)1957 6792 y Fj(\001)299 b Fl(x)h Fj(\000)f
Fk(3)441 b Fm(festgelegt.)g(A)-36 b(u\377erdem)440 b(ist)g(ein)g
(Steigungsdreiec)-36 b(k)440 b(eingezeic)-36 b(hnet,)440
b(allerdings)921 8784 y(fehlt)434 b(die)f(x-A)-36 b(c)g(hse.)p
0 TeXcolorgray 0 TeXcolorgray 11143 36590 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 221.61758 a add def
/d 0.0 a add neg def /h 232.19228 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 11143 36590
a 28443 22389 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -142.26372 56.90549 -142.03188 96.54335
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -104.32947 57.00143 -142.26372 56.90549
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -113.81097 85.35823 -142.09743 85.35736
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -113.81097 56.90549 -113.81097 85.35823
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -28.45274 85.35823 -28.45274 -113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 28.45274 -28.45274 -28.45274 -28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 28.45274 56.90549 28.45274 -28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ -85.35823 -113.81097
48.40343 86.83174   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 28443 22389 a
tx@Dict begin  { -148.92885 68.4961 } PutCoor PutBegin  end

28443 22389 a Fb(1)28443 22389 y
tx@Dict begin  PutEnd  end
 28443 22389 a 28443
22389 a
tx@Dict begin  { -129.1579 48.26581 } PutCoor PutBegin  end
 28443 22389 a Fb(1)28443 22389 y
tx@Dict begin  PutEnd  end
 28443 22389
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ -28.45274 85.35823
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(u) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 28443 22389
a
tx@Dict begin  { -23.86676 77.69193 } PutCoor PutBegin  end
 28443 22389 a -172 x Fb(y)28443 22389 y
tx@Dict begin  PutEnd  end
 28443 22389
a 28443 22389 a
tx@Dict begin  { 3.72026 -36.33525 } PutCoor PutBegin  end
 28443 22389 a Fb(2)28443 22389 y
tx@Dict begin  PutEnd  end
 28443
22389 a 28443 22389 a
tx@Dict begin  { 33.60658 7.34459 } PutCoor PutBegin  end
 28443 22389 a Fb(3)28443 22389
y
tx@Dict begin  PutEnd  end
 28443 22389 a 28443 22389 a
tx@Dict begin  { -6.85486 19.75879 } PutCoor PutBegin  end
 28443 22389 a 0 0 1 TeXcolorrgb
-172 x Fb(g)p 0 TeXcolorgray 28443 22389 a
tx@Dict begin  PutEnd  end
 28443 22389
a 1 0 0 TeXcolorrgb @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 56.90549 -85.35823 56.90549
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 56.90549 56.90549
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 270.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(u) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 28443 22389 a
tx@Dict begin  { 51.07869 48.72557 } PutCoor PutBegin  end

28443 22389 a Fb(x)28443 22389 y
tx@Dict begin  PutEnd  end
 28443 22389 a 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 35675 36590
a
currentpoint initclip moveto
 35675 36590 a 921 40575 a Fm(Zeic)g(hne)398 b(die)h(x-A)-36
b(c)g(hse)398 b(so)h(ein,)g(dass)f(die)h(dargestellte)g(Gerade)f(die)g
(gegeb)36 b(ene)399 b(Gleic)-36 b(h)g(ung)921 42567 y(hat!)47992
4800 y Fh(___/1)p 1 0 0 TeXcolorrgb 48228 6792 a Fg(F)-123
b(A)369 b(2.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 44603 54804 45 v 0 TeXcolorgray 24746
81281 a Fm(4)p 0 TeXcolorgray eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1599 a Fn(F)-239 b(A)1039 b(2.3)f(-)i(5)f(Pro)60
b(duktionsk)-60 b(osten)1035 b(-)k(O)-60 b(A)1040 b(-)f(Matura)g
(2014/15)g(-)-2331 4622 y(Haupttermin)p 0 TeXcolorgray
-741 7929 a Fm(5.)p 0 TeXcolorgray 651 w(Ein)407 b(Betrieb)f(gibt)h
(f\374r)f(die)h(Absc)-36 b(h\344tzung)406 b(der)g(Gesam)-36
b(tk)g(osten)406 b Fl(K)95 b Fk(\()p Fl(x)p Fk(\))407
b Fm(f\374r)f Fl(x)h Fm(pro)36 b(duzierte)921 9921 y(St\374c)-36
b(k)433 b(einer)g(W)-108 b(are)434 b(folgende)g(Gleic)-36
b(h)g(ung)433 b(an:)h Fl(K)95 b Fk(\()p Fl(x)p Fk(\))369
b(=)f(25)p Fl(x)296 b Fk(+)f(12)221 b(000)p Fm(.)921
14458 y(In)-36 b(terpretiere)432 b(die)i(b)36 b(eiden)433
b(Zahlen)-36 b(w)g(erte)433 b(25)h(und)f(12)217 b(000)435
b(in)e(diesem)h(K)-36 b(on)g(text.)p 1 0 0 TeXcolorrgb
888 17004 a(25)435 b(.)217 b(.)g(.)921 19549 y(.)g(.)g(.)g(der)433
b(K)-36 b(ostenzu)g(w)g(ac)g(hs)433 b(f\374r)h(die)f(Pro)36
b(duktion)434 b(eines)g(w)-36 b(eiteren)433 b(St\374c)-36
b(ks)921 21541 y(.)217 b(.)g(.)g(zus\344tzlic)-36 b(he)434
b(\(v)-72 b(ariable\))434 b(K)-36 b(osten,)434 b(die)f(pro)h(St\374c)
-36 b(k)433 b(f\374r)g(die)h(Pro)36 b(duktion)433 b(anfallen)856
26078 y(12)217 b(000)435 b(.)217 b(.)g(.)921 28624 y(.)g(.)g(.)g(Fixk)
-36 b(osten)921 30615 y(.)217 b(.)g(.)g(jene)434 b(K)-36
b(osten,)434 b(die)f(unabh\344ngig)h(v)-36 b(on)433 b(der)g(pro)36
b(duzierten)433 b(St\374c)-36 b(kzahl)433 b(anfallen)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 47992
7929 a Fh(___/1)p 1 0 0 TeXcolorrgb 48228 9921 a Fg(F)-123
b(A)369 b(2.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 34349 54804 45 v 0 TeXcolorgray 24746
81281 a Fm(5)p 0 TeXcolorgray eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1599 a Fn(F)-239 b(A)751 b(2.3)h(-)f(6)h(Mo)60
b(dellierung)749 b(-)j(MC)g(-)g(Matura)f(2014/15)h(-)f(Neb)60
b(en-)-2331 4622 y(termin)717 b(1)p 0 TeXcolorgray -741
7929 a Fm(6.)p 0 TeXcolorgray 651 w(Eine)537 b(lineare)h(F)-108
b(unktion)537 b(f)h(wird)g(allgemein)h(durc)-36 b(h)536
b(eine)h(F)-108 b(unktionsgleic)-36 b(h)g(ung)537 b Fl(f)142
b Fk(\()p Fl(x)p Fk(\))546 b(=)921 9921 y Fl(k)340 b
Fj(\001)295 b Fl(x)h Fk(+)f Fl(d)433 b Fm(mit)h(den)e(P)-36
b(arametern)434 b Fl(k)414 b Fj(2)368 b Ff(R)434 b Fm(und)e
Fl(d)369 b Fj(2)g Ff(R)434 b Fm(dargestellt.)855 14458
y(W)-108 b(elc)-36 b(he)344 b(der)h(nac)-36 b(hstehend)343
b(angegeb)36 b(enen)345 b(A)-36 b(ufgab)36 b(enstellungen)345
b(kann/k)-36 b(\366nnen)345 b(mithilfe)921 16450 y(einer)376
b(linearen)h(F)-108 b(unktion)376 b(mo)36 b(delliert)377
b(w)-36 b(erden?)376 b(Kreuze)g(die)h(zutre\033ende\(n\))d(A)-36
b(ufgab)36 b(en-)921 18442 y(stellung\(en\))433 b(an!.)p
1062 19483 44260 45 v 1062 30513 45 11031 v 1770 21342
a(Die)500 b(Gesam)-36 b(tk)g(osten)498 b(b)36 b(ei)499
b(der)f(Herstellung)h(einer)g(Keramikglasur)h(setzen)e(sic)-36
b(h)1770 23334 y(aus)496 b(einmaligen)g(K)-36 b(osten)496
b(v)-36 b(on)496 b Fa(e)712 b Fm(1.000)497 b(f\374r)e(die)h(Masc)-36
b(hine)495 b(und)f Fa(e)713 b Fm(8)495 b(pro)h(er-)1770
25326 y(zeugtem)434 b(Kilogramm)h(Glasur)e(zusammen.)1770
27318 y(Stelle)419 b(die)g(Gesam)-36 b(tk)g(osten)419
b(f\374r)f(die)h(Herstellung)g(einer)g(Keramikglasur)h(in)f(Ab-)1770
29310 y(h\344ngigk)-36 b(eit)435 b(v)-36 b(on)434 b(den)f(erzeugten)g
(Kilogramm)i(Glasur)e(dar.)p 42912 30513 V 1 0 0 TeXcolorrgb
43621 25330 a Fi(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 45277 30513 V 1062 30558 44260 45 v 1062
39670 45 9113 v 1770 32418 a Fm(Eine)428 b(Bakterienkultur)g(b)36
b(esteh)-36 b(t)427 b(zu)h(Beginn)f(einer)h(Messung)f(aus)h(20)217
b(000)430 b(Bak-)1770 34409 y(terien.)k(Die)g(Anzahl)g(der)f(Bakterien)
h(v)-36 b(erdreifac)g(h)g(t)434 b(sic)-36 b(h)433 b(alle)i(vier)f
(Stunden.)1770 36401 y(Stelle)556 b(die)f(Anzahl)g(der)g(Bakterien)h
(in)f(dieser)g(Kultur)g(in)g(Abh\344ngigk)-36 b(eit)556
b(v)-36 b(on)1770 38393 y(der)434 b(v)-36 b(erstric)g(henen)432
b(Zeit)i(\(in)f(Stunden\))e(dar.)p 42912 39670 V 45277
39670 V 1062 39715 44260 45 v 1062 48495 45 8781 v 1770
41574 a(Die)455 b(Anzieh)-36 b(ungskraft)454 b(zw)-36
b(eier)455 b(Planeten)e(v)-36 b(erh\344lt)455 b(sic)-36
b(h)454 b(indirekt)g(prop)36 b(ortional)1770 43566 y(zum)434
b(Quadrat)e(des)i(Abstandes)e(der)h(b)36 b(eiden)433
b(Planeten.)1770 45558 y(Stelle)415 b(die)f(Abh\344ngigk)-36
b(eit)414 b(der)g(Anzieh)-36 b(ungskraft)414 b(zw)-36
b(eier)414 b(Planeten)g(v)-36 b(on)414 b(ihrem)1770 47550
y(Abstand)433 b(dar.)p 42912 48495 V 45277 48495 V 1062
48539 44260 45 v 1062 57331 45 8792 v 1770 50410 a(Ein)344
b(zinsenloses)f(W)-108 b(ohn)-36 b(baudarlehen)342 b(v)-36
b(on)344 b Fa(e)560 b Fm(240.000)345 b(wird)f(40)g(Jahre)f(lang)h(mit)
1770 52402 y(gleic)-36 b(h)g(bleib)36 b(enden)433 b(Jahresraten)h(v)-36
b(on)434 b Fa(e)650 b Fm(6.000)435 b(zur\374c)-36 b(kgezahlt.)1770
54394 y(Stelle)480 b(die)g(Restsc)-36 b(h)g(uld)478 b(in)i
(Abh\344ngigk)-36 b(eit)480 b(v)-36 b(on)480 b(der)f(Anzahl)h(der)f(v)
-36 b(ergangenen)1770 56386 y(Jahre)434 b(dar.)p 42912
57331 V 1 0 0 TeXcolorrgb 43621 53267 a Fi(4)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45277 57331
V 1062 57375 44260 45 v 1062 66156 45 8781 v 1770 59235
a Fm(Bleibt)489 b(in)f(einem)g(Stromkreis)g(die)g(Spann)-36
b(ung)486 b(k)-36 b(onstan)g(t,)489 b(so)f(ist)g(die)g(Leistung)1770
61227 y(direkt)434 b(prop)36 b(ortional)434 b(zur)f(Stromst\344rk)-36
b(e.)1770 63219 y(Stelle)434 b(die)g(Leistung)f(im)h(Stromkreis)f(in)h
(Abh\344ngigk)-36 b(eit)434 b(v)-36 b(on)434 b(der)f(Stromst\344rk)-36
b(e)1770 65211 y(dar.)p 42912 66156 V 1 0 0 TeXcolorrgb
43621 62097 a Fi(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 45277 66156 V 1062 66200 44260 45 v 47992
7929 a Fh(___/1)p 1 0 0 TeXcolorrgb 48228 9921 a Fg(F)-123
b(A)369 b(2.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 70228 54804 45 v 0 TeXcolorgray 24746
81281 a Fm(6)p 0 TeXcolorgray eop end
%%Page: 7 7
TeXDict begin 7 6 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fn(F)-239 b(A)575 b(2.3)g(-)h(7)g(F)-179
b(unktionsgleic)-60 b(h)g(ung)571 b(einer)j(linearen)g(F)-179
b(unktion)573 b(-)j(O)-60 b(A)-2617 4515 y(-)718 b(Matura)f(2015/16)g
(-)g(Neb)60 b(en)-60 b(termin)716 b(1)p 0 TeXcolorgray
-741 7823 a Fm(7.)p 0 TeXcolorgray 651 w(Gegeb)36 b(en)433
b(ist)h(eine)f(lineare)h(F)-108 b(unktion)433 b Fl(f)576
b Fm(mit)433 b(folgenden)h(Eigensc)-36 b(haften:)p 0
TeXcolorgray 2468 11254 a Fj(\017)p 0 TeXcolorgray 650
w Fm(W)-108 b(enn)349 b(das)g(Argumen)-36 b(t)349 b Fl(x)g
Fm(um)g(2)h(zunimm)-36 b(t,)349 b(dann)g(nimm)-36 b(t)348
b(der)h(F)-108 b(unktionsw)-36 b(ert)349 b Fl(f)142 b
Fk(\()p Fl(x)p Fk(\))3782 13246 y Fm(um)434 b(4)f(ab.)p
0 TeXcolorgray 2468 15791 a Fj(\017)p 0 TeXcolorgray
650 w Fl(f)142 b Fk(\(0\))369 b(=)g(1)921 19222 y Fm(Gib)433
b(eine)h(F)-108 b(unktionsgleic)-36 b(h)g(ung)432 b(dieser)i(linearen)f
(F)-108 b(unktion)433 b Fl(f)576 b Fm(an.)921 23759 y
Fl(f)142 b Fk(\()p Fl(x)p Fk(\))369 b(=)p 5204 23759
15749 34 v 1 0 0 TeXcolorrgb 921 26305 a Fl(f)142 b Fk(\()p
Fl(x)p Fk(\))369 b(=)f Fj(\000)p Fk(2)296 b Fj(\001)f
Fl(x)g Fk(+)g(1)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 47992 7823 a Fh(___/1)p 1 0 0 TeXcolorrgb
48228 9815 a Fg(F)-123 b(A)369 b(2.3)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 30112 54804 45
v 0 TeXcolorgray 24746 81281 a Fm(7)p 0 TeXcolorgray
eop end
%%Page: 8 8
TeXDict begin 8 7 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fn(F)-239 b(A)728 b(2.3)f(-)i(8)f(Steigung)e
(des)h(Graphen)g(einer)g(linearen)f(F)-179 b(unktion)726
b(-)-2331 4515 y(MC)718 b(-)g(Matura)f(2013/14)g(1.)g(Neb)60
b(en)-60 b(termin)p 0 TeXcolorgray -741 7823 a Fm(8.)p
0 TeXcolorgray 651 w(In)481 b(der)g(un)-36 b(tenstehenden)478
b(Graphik)j(sind)g(drei)g(Geraden)g Fl(g)30706 8022 y
Fe(1)31231 7823 y Fl(;)221 b(g)32436 8022 y Fe(2)33444
7823 y Fm(und)480 b Fl(g)36716 8022 y Fe(3)37723 7823
y Fm(dargestellt.)i(Es)921 9815 y(gilt:)921 12360 y Fl(g)1544
12559 y Fe(1)2070 12360 y Fm(:)433 b Fl(y)417 b Fk(=)369
b Fl(k)5972 12559 y Fe(1)6793 12360 y Fj(\001)296 b Fl(x)f
Fk(+)g Fl(d)10475 12559 y Fe(1)921 14352 y Fl(g)1544
14551 y Fe(2)2070 14352 y Fm(:)433 b Fl(y)417 b Fk(=)369
b Fl(k)5972 14551 y Fe(2)6793 14352 y Fj(\001)296 b Fl(x)f
Fk(+)g Fl(d)10475 14551 y Fe(2)921 16344 y Fl(g)1544
16543 y Fe(3)2070 16344 y Fm(:)433 b Fl(y)417 b Fk(=)369
b Fl(k)5972 16543 y Fe(3)6793 16344 y Fj(\001)296 b Fl(x)f
Fk(+)g Fl(d)10475 16543 y Fe(3)p 0 TeXcolorgray 0 TeXcolorgray
7667 45943 a
 currentpoint currentpoint translate 1.03691 1.03691 scale neg exch
neg exch translate
 7667 45943 a 7667 45943 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 274.28441 a add def
/d 0.0 a add neg def /h 237.29619 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 7667 45943 a 19321
34604 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 9 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 169.00935 0.0 -105.27505 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 134.86615 0.0 -102.43004   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 169.00935  0 -105.27505  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -105.27505
 169.00935  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-102.43004  def /maxTickline 134.86615  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 134.86615
0.0 -102.43004   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 169.00935
0.0 -105.27505 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 134.86615  0 -102.43004  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -102.43004
 134.86615  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-105.27505  def /maxTickline 169.00935  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 134.86615
0.0 -102.43004   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 169.00935
0.0 -105.27505 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 18075 31740 a Fe(1)18075 28590
y(2)18075 25441 y(3)18075 22291 y(4)17344 37993 y Fd(\000)p
Fe(1)17344 41142 y Fd(\000)p Fe(2)17344 44292 y Fd(\000)p
Fe(3)22235 35950 y(1)2680 b(2)f(3)h(4)g(5)-19734 b Fd(\000)p
Fe(1)-4352 b Fd(\000)p Fe(2)h Fd(\000)p Fe(3)19321 34604
y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 19321 34604 a 19321 34604 a
tx@Dict begin  { 169.00935 134.86615 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 19321 34604 a 19321 34604
a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 19321 34604 a 18978 34890 a Fm(x)19321 34604 y
tx@Dict begin  PutEnd  end
 19321
34604 a 19321 34604 a
tx@Dict begin  PutEnd  end
 19321 34604 a 19321 34604 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 19321
34604 a 19321 34604 a
tx@Dict begin  { 0.0 0.0 pop 169.00935 134.86615 exch pop } PutCoor
PutBegin  end
 19321 34604 a 19321 34604 a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 19321
34604 a 18978 34761 a Fm(y)19321 34604 y
tx@Dict begin  PutEnd  end
 19321 34604
a 19321 34604 a
tx@Dict begin  PutEnd  end
 19321 34604 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.7 def /x1 5.94 def /dx x1 x sub
49 div def /F@pstplot ((--3.--1.*x)/3.)  tx@AlgToPs begin AlgToPs end
cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.7 def /x1 5.94 def /dx x1 x sub
49 div def /F@pstplot ((-0.-4.*x)/-3.)  tx@AlgToPs begin AlgToPs end
cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.7 def /x1 5.94 def /dx x1 x sub
49 div def /F@pstplot ((-2.-1.*x)/2.)  tx@AlgToPs begin AlgToPs end
cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 19321 34604 a
tx@Dict begin  { 88.77242 114.94888 } PutCoor PutBegin  end
 19321 34604 a
572 x Fl(g)19944 35375 y Fe(1)19321 34604 y
tx@Dict begin  PutEnd  end
 19321 34604
a 19321 34604 a
tx@Dict begin  { 133.15863 69.99393 } PutCoor PutBegin  end
 19321 34604 a 572 x Fl(g)19944 35375
y Fe(2)19321 34604 y
tx@Dict begin  PutEnd  end
 19321 34604 a 19321 34604 a
tx@Dict begin  { 119.50143 -73.9773 } PutCoor PutBegin  end
 19321
34604 a 572 x Fl(g)19944 35375 y Fe(3)19321 34604 y
tx@Dict begin  PutEnd  end
 19321
34604 a 38029 45943 a
currentpoint initclip moveto
 38029 45943 a 7667 45943 a
 currentpoint currentpoint translate 1 1.03691 div 1 1.03691 div scale
neg exch neg exch translate
 7667
45943 a 921 51919 a Fm(Kreuze)433 b(die)h(b)36 b(eiden)433
b(zutre\033enden)e(A)-36 b(ussagen)434 b(an!)p 19224
54878 7937 45 v 19224 57889 45 3012 v 19932 56745 a Fl(k)20608
56944 y Fe(1)21503 56745 y Fl(<)369 b(k)23560 56944 y
Fe(2)p 24751 57889 V 27116 57889 V 19224 57933 7937 45
v 19224 60945 45 3012 v 19932 59801 a Fl(d)20608 60000
y Fe(3)21503 59801 y Fl(>)f(d)23559 60000 y Fe(2)p 24751
60945 V 27116 60945 V 19224 60989 7937 45 v 19224 64001
45 3012 v 19932 62856 a Fl(k)20608 63055 y Fe(2)21503
62856 y Fl(>)h(k)23560 63055 y Fe(3)p 24751 64001 V 1 0 0
TeXcolorrgb 25459 62827 a Fi(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 27116 64001 V 19224 64045
7937 45 v 19224 67056 45 3012 v 19932 65912 a Fl(k)20608
66111 y Fe(3)21503 65912 y Fl(<)g(k)23560 66111 y Fe(1)p
24751 67056 V 1 0 0 TeXcolorrgb 25459 65883 a Fi(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 27116
67056 V 19224 67101 7937 45 v 19224 70112 45 3012 v 19932
68968 a Fl(d)20608 69167 y Fe(1)21503 68968 y Fl(<)f(d)23559
69167 y Fe(3)p 24751 70112 V 27116 70112 V 19224 70156
7937 45 v 47992 7823 a Fh(___/1)p 1 0 0 TeXcolorrgb 48228
9815 a Fg(F)-123 b(A)369 b(2.3)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 74185 54804 45 v 0 TeXcolorgray
24746 81281 a Fm(8)p 0 TeXcolorgray eop end
%%Page: 9 9
TeXDict begin 9 8 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1599 a Fn(F)-239 b(A)969 b(2.3)g(-)h(9)f(Lineare)f
(F)-179 b(unktionen)966 b(-)k(ZO)g(-)f(Matura)g(2016/17)h(-)-2331
4622 y(Haupttermin)p 0 TeXcolorgray -741 7929 a Fm(9.)p
0 TeXcolorgray 651 w(Gegeb)36 b(en)566 b(sind)f(die)i(Graphen)e(v)-36
b(on)566 b(vier)h(v)-36 b(ersc)g(hiedenen)566 b(linearen)g(F)-108
b(unktionen)565 b Fl(f)708 b Fm(mit)921 9921 y Fl(f)142
b Fk(\()p Fl(x)p Fk(\))369 b(=)f Fl(k)340 b Fj(\001)296
b Fl(x)f Fk(+)g Fl(d)p Fm(,)434 b(w)-36 b(ob)36 b(ei)434
b Fl(k)45 b(;)221 b(d)369 b Fj(2)g Ff(R)p Fm(.)921 14458
y(Ordne)436 b(den)g(vier)i(Graphen)e(jew)-36 b(eils)438
b(die)f(en)-36 b(tsprec)g(hende)435 b(A)-36 b(ussage)438
b(\374b)36 b(er)436 b(die)h(P)-36 b(arameter)921 16450
y Fl(k)479 b Fm(und)432 b Fl(d)h Fm(\(aus)h(A)f(bis)h(F\))f(zu!)p
0 TeXcolorgray 0 TeXcolorgray 2683 18231 14083 45 v 16765
18231 4523 45 v 2683 32786 45 14556 v 3391 31842 a
 currentpoint currentpoint translate 0.67021 0.67021 scale neg exch
neg exch translate
 3391
31842 a 3391 31842 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 170.71645 a add def
/d 0.0 a add neg def /h 170.71645 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 3391 31842 a 14415 20818 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.3  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 74.72447 0.0 -101.36159 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.3  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.3  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 73.19582 0.0 -101.32729   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.3  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 71.13185  0 -99.5846  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -99.5846
 71.13185  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-99.5846  def /maxTickline 71.13185  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 71.13185
0.0 -99.5846   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 71.13185
0.0 -99.5846 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 71.13185  0 -99.5846  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -99.5846
 71.13185  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-99.5846  def /maxTickline 71.13185  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 71.13185
0.0 -99.5846   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 71.13185
0.0 -99.5846 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
13170 17954 a Fe(1)13170 14804 y(2)12438 24207 y Fd(\000)p
Fe(1)12438 27356 y Fd(\000)p Fe(2)12438 30506 y Fd(\000)p
Fe(3)17329 22163 y(1)2680 b(2)-10285 b Fd(\000)p Fe(1)-4351
b Fd(\000)p Fe(2)f Fd(\000)p Fe(3)14415 20818 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 14415
20818 a 14415 20818 a
tx@Dict begin  { 71.13185 71.13185 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 14415 20818 a 14415 20818 a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 14415
20818 a 14045 21104 a Fl(x)14415 20818 y
tx@Dict begin  PutEnd  end
 14415 20818
a 14415 20818 a
tx@Dict begin  PutEnd  end
 14415 20818 a 14415 20818 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 14415 20818
a 14415 20818 a
tx@Dict begin  { 0.0 0.0 pop 71.13185 71.13185 exch pop } PutCoor PutBegin
 end
 14415 20818 a 14415 20818 a
tx@Dict begin  { 5.0 22.88857 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 14415 20818
a 13148 21150 a Fl(f)142 b Fk(\()p Fl(x)p Fk(\))14415
20818 y
tx@Dict begin  PutEnd  end
 14415 20818 a 14415 20818 a
tx@Dict begin  PutEnd  end
 14415 20818 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.5624604195235996 def /x1 2.6262646545420583
def /dx x1 x sub 199 div def /F@pstplot (1.0/3.0*x-2.0)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 14415 20818 a
tx@Dict begin  { -78.4391 -77.36284 } PutCoor PutBegin  end
 14415 20818 a
-172 x Fc(f)14415 20818 y
tx@Dict begin  PutEnd  end
 14415 20818 a 22289 31842 a
currentpoint initclip moveto

22289 31842 a 3391 31842 a
 currentpoint currentpoint translate 1 0.67021 div 1 0.67021 div scale
neg exch neg exch translate
 3391 31842 a 16721 32786 45
14556 v 0.9 TeXcolorgray 16765 32786 4478 14556 v 0 TeXcolorgray
1 0 0 TeXcolorrgb 18562 25966 a Fm(E)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 21243 32786 45 14556
v 2683 32831 14083 45 v 16765 32831 4523 45 v 2683 47386
45 14556 v 3391 46441 a
 currentpoint currentpoint translate 0.67021 0.67021 scale neg exch
neg exch translate
 3391 46441 a 3391 46441 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 170.71645 a add def
/d 0.0 a add neg def /h 170.71645 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 3391
46441 a 14415 35417 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.3  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 74.72447 0.0 -101.36159 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.3  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.3  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 73.19582 0.0 -101.32729   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.3  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 71.13185  0 -99.5846  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -99.5846
 71.13185  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-99.5846  def /maxTickline 71.13185  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 71.13185
0.0 -99.5846   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 71.13185
0.0 -99.5846 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 71.13185  0 -99.5846  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -99.5846
 71.13185  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-99.5846  def /maxTickline 71.13185  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 71.13185
0.0 -99.5846   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 71.13185
0.0 -99.5846 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 13170 32553 a
Fe(1)13170 29403 y(2)12438 38806 y Fd(\000)p Fe(1)12438
41956 y Fd(\000)p Fe(2)12438 45105 y Fd(\000)p Fe(3)17329
36763 y(1)2680 b(2)-10285 b Fd(\000)p Fe(1)-4351 b Fd(\000)p
Fe(2)f Fd(\000)p Fe(3)14415 35417 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 14415 35417 a 14415
35417 a
tx@Dict begin  { 71.13185 71.13185 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 14415 35417 a 14415 35417 a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 14415 35417 a 14045
35703 a Fl(x)14415 35417 y
tx@Dict begin  PutEnd  end
 14415 35417 a 14415 35417
a
tx@Dict begin  PutEnd  end
 14415 35417 a 14415 35417 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 14415 35417 a 14415 35417
a
tx@Dict begin  { 0.0 0.0 pop 71.13185 71.13185 exch pop } PutCoor PutBegin
 end
 14415 35417 a 14415 35417 a
tx@Dict begin  { 5.0 22.88857 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 14415 35417 a 13148 35749
a Fl(f)142 b Fk(\()p Fl(x)p Fk(\))14415 35417 y
tx@Dict begin  PutEnd  end
 14415
35417 a 14415 35417 a
tx@Dict begin  PutEnd  end
 14415 35417 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.5624604195235996 def /x1 2.6262646545420583
def /dx x1 x sub 199 div def /F@pstplot (-3.0/2.0*x+1.0)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial 14415 35417 a
tx@Dict begin  { -17.07181 34.1432 } PutCoor PutBegin  end
 14415 35417 a -172 x Fc(f)14415
35417 y
tx@Dict begin  PutEnd  end
 14415 35417 a 22289 46441 a
currentpoint initclip moveto
 22289 46441 a 3391
46441 a
 currentpoint currentpoint translate 1 0.67021 div 1 0.67021 div scale
neg exch neg exch translate
 3391 46441 a 16721 47386 45 14556 v 0.9 TeXcolorgray
16765 47386 4478 14556 v 0 TeXcolorgray 1 0 0 TeXcolorrgb
18580 40566 a Fm(F)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 21243 47386 45 14556 v 2683 47430 14083
45 v 16765 47430 4523 45 v 2683 61985 45 14556 v 3391
61040 a
 currentpoint currentpoint translate 0.67021 0.67021 scale neg exch
neg exch translate
 3391 61040 a 3391 61040 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 170.71645 a add def
/d 0.0 a add neg def /h 170.71645 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 3391 61040 a 14415
50017 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.3  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 74.72447 0.0 -101.36159 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.3  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.3  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 73.19582 0.0 -101.32729   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.3  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 71.13185  0 -99.5846  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -99.5846
 71.13185  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-99.5846  def /maxTickline 71.13185  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 71.13185
0.0 -99.5846   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 71.13185
0.0 -99.5846 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 71.13185  0 -99.5846  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -99.5846
 71.13185  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-99.5846  def /maxTickline 71.13185  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 71.13185
0.0 -99.5846   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 71.13185
0.0 -99.5846 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 13170 47153 a Fe(1)13170 44003
y(2)12438 53406 y Fd(\000)p Fe(1)12438 56555 y Fd(\000)p
Fe(2)12438 59705 y Fd(\000)p Fe(3)17329 51362 y(1)2680
b(2)-10285 b Fd(\000)p Fe(1)-4351 b Fd(\000)p Fe(2)f
Fd(\000)p Fe(3)14415 50017 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 14415 50017 a 14415 50017
a
tx@Dict begin  { 71.13185 71.13185 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 14415 50017 a 14415 50017 a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 14415 50017 a 14045 50303
a Fl(x)14415 50017 y
tx@Dict begin  PutEnd  end
 14415 50017 a 14415 50017 a
tx@Dict begin  PutEnd  end
 14415
50017 a 14415 50017 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 14415 50017 a 14415 50017 a
tx@Dict begin  { 0.0 0.0 pop 71.13185 71.13185 exch pop } PutCoor PutBegin
 end
 14415
50017 a 14415 50017 a
tx@Dict begin  { 5.0 22.88857 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 14415 50017 a 13148 50349 a Fl(f)142
b Fk(\()p Fl(x)p Fk(\))14415 50017 y
tx@Dict begin  PutEnd  end
 14415 50017 a 14415
50017 a
tx@Dict begin  PutEnd  end
 14415 50017 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.5624604195235996 def /x1 2.6262646545420583
def /dx x1 x sub 199 div def /F@pstplot (2)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
14415 50017 a
tx@Dict begin  { -78.4391 42.67911 } PutCoor PutBegin  end
 14415 50017 a -172 x Fc(f)14415 50017 y
tx@Dict begin  PutEnd  end

14415 50017 a 22289 61040 a
currentpoint initclip moveto
 22289 61040 a 3391 61040
a
 currentpoint currentpoint translate 1 0.67021 div 1 0.67021 div scale
neg exch neg exch translate
 3391 61040 a 16721 61985 45 14556 v 0.9 TeXcolorgray
16765 61985 4478 14556 v 0 TeXcolorgray 1 0 0 TeXcolorrgb
18534 55165 a Fm(C)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 21243 61985 45 14556 v 2683 62030 14083
45 v 16765 62030 4523 45 v 2683 76585 45 14556 v 3391
75640 a
 currentpoint currentpoint translate 0.67021 0.67021 scale neg exch
neg exch translate
 3391 75640 a 3391 75640 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 170.71645 a add def
/d 0.0 a add neg def /h 170.71645 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 3391 75640 a 14415
64616 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.3  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 74.72447 0.0 -101.36159 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.3  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.3  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 73.19582 0.0 -101.32729   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.3  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 71.13185  0 -99.5846  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -99.5846
 71.13185  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-99.5846  def /maxTickline 71.13185  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 71.13185
0.0 -99.5846   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 71.13185
0.0 -99.5846 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 71.13185  0 -99.5846  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -99.5846
 71.13185  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-99.5846  def /maxTickline 71.13185  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 71.13185
0.0 -99.5846   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 71.13185
0.0 -99.5846 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 13170 61752 a Fe(1)13170 58602
y(2)12438 68005 y Fd(\000)p Fe(1)12438 71155 y Fd(\000)p
Fe(2)12438 74304 y Fd(\000)p Fe(3)17329 65962 y(1)2680
b(2)-10285 b Fd(\000)p Fe(1)-4351 b Fd(\000)p Fe(2)f
Fd(\000)p Fe(3)14415 64616 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 14415 64616 a 14415 64616
a
tx@Dict begin  { 71.13185 71.13185 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 14415 64616 a 14415 64616 a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 14415 64616 a 14045 64902
a Fl(x)14415 64616 y
tx@Dict begin  PutEnd  end
 14415 64616 a 14415 64616 a
tx@Dict begin  PutEnd  end
 14415
64616 a 14415 64616 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 14415 64616 a 14415 64616 a
tx@Dict begin  { 0.0 0.0 pop 71.13185 71.13185 exch pop } PutCoor PutBegin
 end
 14415
64616 a 14415 64616 a
tx@Dict begin  { 5.0 22.88857 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 14415 64616 a 13148 64948 a Fl(f)142
b Fk(\()p Fl(x)p Fk(\))14415 64616 y
tx@Dict begin  PutEnd  end
 14415 64616 a 14415
64616 a
tx@Dict begin  PutEnd  end
 14415 64616 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.5624604195235996 def /x1 2.6262646545420583
def /dx x1 x sub 199 div def /F@pstplot (-0.45*x-1)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
14415 64616 a
tx@Dict begin  { -78.4391 -77.36284 } PutCoor PutBegin  end
 14415 64616 a -172 x Fc(f)14415 64616 y
tx@Dict begin  PutEnd  end

14415 64616 a 22289 75640 a
currentpoint initclip moveto
 22289 75640 a 3391 75640
a
 currentpoint currentpoint translate 1 0.67021 div 1 0.67021 div scale
neg exch neg exch translate
 3391 75640 a 16721 76585 45 14556 v 0.9 TeXcolorgray
16765 76585 4478 14556 v 0 TeXcolorgray 1 0 0 TeXcolorrgb
18507 69765 a Fm(D)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 21243 76585 45 14556 v 2683 76629 14083
45 v 16765 76629 4523 45 v 0 TeXcolorgray 0 TeXcolorgray
26430 18121 4567 45 v 30997 18121 8153 45 v 26430 21380
45 3260 v 0.92 TeXcolorgray 26475 21380 4478 3260 v 0
TeXcolorgray 28202 20302 a(A)p 30952 21380 45 3260 v
31661 20177 a Fl(k)414 b Fk(=)369 b(0)p Fl(;)221 b(d)369
b(<)g Fk(0)p 39105 21380 V 26430 21424 4567 45 v 30997
21424 8153 45 v 26430 24683 45 3260 v 0.92 TeXcolorgray
26475 24683 4478 3260 v 0 TeXcolorgray 28253 23605 a
Fm(B)p 30952 24683 45 3260 v 31661 23480 a Fl(k)414 b(>)369
b Fk(0)p Fl(;)221 b(d)369 b(>)g Fk(0)p 39105 24683 V
26430 24728 4567 45 v 30997 24728 8153 45 v 26430 27987
45 3260 v 0.92 TeXcolorgray 26475 27987 4478 3260 v 0
TeXcolorgray 28244 26909 a Fm(C)p 30952 27987 45 3260
v 31661 26784 a Fl(k)414 b Fk(=)369 b(0)p Fl(;)221 b(d)369
b(>)g Fk(0)p 39105 27987 V 26430 28031 4567 45 v 30997
28031 8153 45 v 26430 31290 45 3260 v 0.92 TeXcolorgray
26475 31290 4478 3260 v 0 TeXcolorgray 28217 30212 a
Fm(D)p 30952 31290 45 3260 v 31661 30087 a Fl(k)414 b(<)369
b Fk(0)p Fl(;)221 b(d)369 b(<)g Fk(0)p 39105 31290 V
26430 31334 4567 45 v 30997 31334 8153 45 v 26430 34594
45 3260 v 0.92 TeXcolorgray 26475 34594 4478 3260 v 0
TeXcolorgray 28271 33516 a Fm(E)p 30952 34594 45 3260
v 31661 33391 a Fl(k)414 b(>)369 b Fk(0)p Fl(;)221 b(d)369
b(<)g Fk(0)p 39105 34594 V 26430 34638 4567 45 v 30997
34638 8153 45 v 26430 37897 45 3260 v 0.92 TeXcolorgray
26475 37897 4478 3260 v 0 TeXcolorgray 28289 36819 a
Fm(F)p 30952 37897 45 3260 v 31661 36694 a Fl(k)414 b(<)369
b Fk(0)p Fl(;)221 b(d)369 b(>)g Fk(0)p 39105 37897 V
26430 37941 4567 45 v 30997 37941 8153 45 v 47992 7929
a Fh(___/1)p 1 0 0 TeXcolorrgb 48228 9921 a Fg(F)-123
b(A)369 b(2.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 0 TeXcolorgray 24746 81281 a Fm(9)p 0 TeXcolorgray
eop end
%%Page: 10 10
TeXDict begin 10 9 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 54804 45 v -2331 6795 a Fn(F)-239
b(A)710 b(2.3)f(-)h(10)g(W)-179 b(ert)709 b(eines)g(Gegenstandes)f(-)i
(O)-60 b(A)710 b(-)g(Matura)g(NT)g(1)-2439 9817 y(16/17)p
0 TeXcolorgray -1391 13124 a Fm(10.)p 0 TeXcolorgray
651 w(Der)314 b(W)-108 b(ert)314 b(eines)g(b)36 b(estimm)-36
b(ten)313 b(Gegenstandes)g Fl(t)h Fm(Jahre)g(nac)-36
b(h)313 b(der)h(Ansc)-36 b(ha\033ung)312 b(wird)i(mit)921
15116 y Fl(W)181 b Fk(\()p Fl(t)p Fk(\))410 b Fm(angegeb)36
b(en)412 b(und)f(kann)g(mithilfe)i(der)e(Gleic)-36 b(h)g(ung)410
b Fl(W)181 b Fk(\()p Fl(t)p Fk(\))368 b(=)h Fj(\000)p
Fl(k)296 b Fj(\001)250 b Fl(t)g Fk(+)g Fl(d)411 b Fm(\()p
Fl(k)45 b(;)221 b(d)370 b Fj(2)e Ff(R)44755 14634 y Fe(+)45543
15116 y Fm(\))921 17108 y(b)36 b(erec)-36 b(hnet)432
b(w)-36 b(erden)433 b(\()p Fl(W)181 b Fk(\()p Fl(t)p
Fk(\))432 b Fm(in)i(Euro\).)921 19653 y(Gib)390 b(die)h(Bedeutung)f
(der)h(P)-36 b(arameter)391 b Fl(k)436 b Fm(und)390 b
Fl(d)h Fm(im)g(Hin)-36 b(blic)g(k)391 b(auf)h(den)e(W)-108
b(ert)391 b(des)f(Gegen-)921 21645 y(standes)433 b(an!)p
1 0 0 TeXcolorrgb 921 24191 a Fl(k)428 b Fm(...)385 b(j\344hrlic)-36
b(he)383 b(W)-108 b(ertminderung)382 b(\(des)h(Gegenstandes\),)f
(j\344hrlic)-36 b(her)384 b(W)-108 b(ertev)-36 b(erlust,)383
b(j\344hr-)921 26183 y(lic)-36 b(he)434 b(Abnahme)e(des)i(W)-108
b(ertes)921 28728 y Fl(d)433 b Fm(...)i(W)-108 b(ert)433
b(des)g(Gegenstandes)g(zum)g(Zeitpunkt)g(der)g(Ansc)-36
b(ha\033ung)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
47992 13124 a Fh(___/1)p 1 0 0 TeXcolorrgb 48228 15116
a Fg(F)-123 b(A)369 b(2.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 32462 V 0 TeXcolorgray 24421 81281
a Fm(10)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

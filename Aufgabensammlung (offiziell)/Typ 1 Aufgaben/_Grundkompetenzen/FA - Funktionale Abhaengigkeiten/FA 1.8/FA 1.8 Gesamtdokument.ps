%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 1.8/FA 1.8 Gesamtdokument.dvi
%%CreationDate: Fri Nov 10 08:37:07 2017
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: LMRoman12-Bold LMRoman12-Regular LMMathItalic12-Regular
%%+ LMMathSymbols10-Regular LMRoman8-Regular LMRoman10-Regular wasy10
%%+ MSBM10
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ "C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 1.8/FA 1.8 Gesamtdokument.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2017.11.10:0936
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: MSBM10
%!PS-AdobeFont-1.0: MSBM10 003.002
%%Title: MSBM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSBM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSBM10 known{/MSBM10 findfont dup/UniqueID known{dup
/UniqueID get 5031982 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSBM10 def
/FontBBox {-55 -420 2343 920 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSBM10.) readonly def
/FullName (MSBM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 82 /R put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943E919FB4E3240FEEED78EE63
0677FAF39AB2543D18C08A2B98B97451CD42CB7893DA8601CC0F45A65BEAFC64
EF72554395DA801CF2E9E3B03F65F1BD98F8C5F8EA06D7457842303C1A817E7D
69821807328AF426B9DDBC188A79A66FBB9E6193B4A3EDFE3136C6574B9C4C94
E2CBA4FE7997F949BB2DAC0D329C2AD8E4095BD18A037AC9F77B794FC389E5CD
56CC4C0B74D64FB0D02C92B88942C18B6DA84D4CF482DAF3A01E80BE483AC6ED
AE98F5F3E49BC762EF6BA937D528E751D9588B0A1E82EF0A5998150EC3854472
5A91EB983915BC1D6E2C3E615E0267B39D6937ECE0EC16162FE76676E5B69F3C
BC1AD934BECA284B89F0613B70876247D768BCD246883CFF4D819D6265302730
7E4BE6B2FFE7E91CCB8C6D2AFACDB4C5DB9688153E1D6B2DE136BF7068418A4F
2D1C0CA301B1B97290B46EE14B8286A81E709980F67382A5132F01B2D44DCFF0
9753E776AEAE2141D580E64C82598DAA6DA4057FFA9D02C3B77AE15A50AB457F
3FA5A10A3C986B22F8E154C1E564A55D3BE4487677613DCF793F7E1B57C9A925
BC57746C25FE567719A9EAA9CC44F1D0FF8F92C03132B205F57E3AFE9FB66632
D3FB3EF5BDFB9848030527FE759A5273CB81DBA2719611355F43E34F8FD7D0EC
9BE47685A2D122C9B60198A430C5F5E3F972376F0FF4BA52BAFF64095F7ABCBA
022622692231FF87514FD912B80C07A0EDCEECFA629E2734B5EFE2604E8DCB24
32A4C691DB4CCCF19EF897A9F4EA5B2B5AFCDF87AC06B93669F3007C1295E016
FF0A99324B80E37020B1080E80949525B3278DF111ABEA48E7182B6F4DE2DC90
B8D31A953343D5DB78B1F2CC6CE631EC7E3D0041A823DF2A4702AAC0F0A2F018
E5ADCD42EF2EC8AFF6F4705D30042BE7B6F866C14AEA1CEE04DFF82BF14931B8
D297C38E6DA6E587C23EF0864F69BB0DBC9C1EFBBB97B92BADC336A4AFAC6A91
0A6B158DC42E975CB5D8D2054CEF367FB112456AF50684C41F80B1E7ACAEA853
B843CABA76BDE9582090299F423519EE3AF8F83AE7F7828B314B6E36E9127419
F274E9FBF5622C5E48D7E95664D6C0C1006661038CF2C93BEF1DE34A163A2C86
693A13F4D0F052D2E183F36401F0C29862BC1B36A086524F76C7EE2C6D436A23
7009F146F1756DCADD3F70C51FDCE610E30C0F4AC538A2703423A07976ACA74C
25F4CFD6A92969E206375FB0C672E45948B0E832F2BE688EC22FEEB3E06BBC3A
272F73081A30830AE4214F2F029918FCA40BAEBED6299EDBECA01E08F27E5627
F53BC56F4AE7CE2D6273B27323AB829E2D51672A4990E3AEE84331583A99DA4E
63610AF8F10C50FE6196E3F4C1E4FC9BA6BE0ABDC81A0A7BF6A5792A97BD0A7E
7BBD31C3FDC01D734550843C8D84C6CC0B492CD1A6CCD57428F03A863E959C77
457D401028FD00FFA9BC422FD09D8B8A70446A61CB256A2FA0B59A2646D9C5FE
961894DB8B315C52008B4416AC35439E010BF90E43A05FCB2FBE8E62385E220E
588B7FE5509F1BB71150E159D01D24EE28008D4213227FE9BCAA34364B1039F6
BC142AAB19C8E9B15F0113781DF9C9B3BC145955552A901AEBA588D39D7E87F1
CAF27D315E168807021B0CD1B2CE13B611A7B5FC28DEB4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: wasy10
%!PS-AdobeFont-1.0: wasy10 001.000
%%CreationDate: Sun Mar 22 11:13:35 1998
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.002) readonly def
/Copyright (Metafont original (c) 1992 Ronald Waldi, Metafont curve conversion by Metafog (c) 1995 Richard Kinch.) readonly def
/Notice (Copyright 1998 Taco Hoekwater) readonly def
/FullName (wasy10) readonly def
/FamilyName (wasy10) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /wasy10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /Box put
dup 52 /XBox put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox {-23 -1667 1720 881} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB02CB1AAE
36F1D7B67C605A37687A9C3F7067F07673039D1E3E1F5D9B09E6A389A55EBF12
06E72531469F768EDBC4DCCA572BD608C4BA8F7EC3E5BC61C6D949C94A843E69
0622F0AAEBF5CB25A2395DFF6342106C198751CF0B33691FC18800254AC54C04
02494A0E3670008E8BA57A3CD823BF47494F2EF9244421A8A0AED84D153D7201
BB12EE9478DF00CA573F64C2474817FF401EE94BACCA8AFC16E776665C3E1E31
89AEEC906A2B9F8974BEA7160C33F0AE7FB04B2666A5B16659D6DF66A688D80A
B531D9F866F21F15D55C6FE75A8787091359698E434EF9C129EED0427EB96787
B3F25C530E3664725C63D4C5DFF9D05CD13619FC41A001275A78C58F85FC7C4A
911CC31CB426231473202A698E5715B032D2206BB361EFCBFE3E32BC0C8D9BC1
353AAEC62EE632FC8FFFDCF6E7D928F562F689406CA00C11C7EAA723B62FFD2F
5F6343AF494085662CE2CE880B04F5589396EAAA8823DBCDE56D868B9E66BB8F
10EA91AF37D76A1BF27E69C2A2ED1D8B25434C0F205313ECB8A6E039093FFB32
983346BEC569B175529DAAD1FFEC1A9302918FC947C390A86C061AE0F6522D79
2D4FE06AE4FABA59F225D7ECE2EECD4BA1359DB18F8957F551C5D6F037F18545
CC6D03EB2DCCCFA294492ED72A737588457E5B18FA4CA0F6D6D8963CA35DFEDF
31A684FC0388D416D7BF6CD9837AD8692F284F24B80CF9F24DB10DAD0C4198BC
2D2A52D9F75CF6C52C7AE0D8D4598DB750E9CC97D0FD31EE8C598A2FF3745694
29DA808141AF4D8F8AA36D7DDCC3457D5E082B2BDF7EE060296721D44B092E70
3607B2335488925E41B22D659C8F0FFEE19A7C19547A147DB851262E47E9C4FB
0A8364BCBC1C77E29A1183EF185EF35B9A5B13170730ED52D5C52CCB460E7D37
F4F37F772794BEA0DA201C99C52F8AC2E4CE7FF33F6ACB796E55BA2372E3B035
52C4F57AB5C0BF828DC7E5A8F8F00ACE0120B99667816FAF5D736BCEBF7D45A5
79C9B5EAA32C9B672D764D2F51B2393ADC71A36AC0D5CA76F3F571D50CB4C1D7
CA77149B8F0C98198919DC43890B0BBF10075D53739F7E84CEE95B40C3DB68D5
6E9847E37B7920412068C3DE2065A77281345980956AFAD312499818890B454F
5DD8C92695818BA4DAFEBCDD4D268763515CE077A64C5F3AB384A6DFD7DD9641
FCDA0A3344B3A14F82D478B4BE7BFC2822A4D67AD3FD07B11589B93842066528
1E51D954D7E6019F6921DB9B00ED303B4B8F557EAC7A0B0340A268B0DDB25B3E
BE0982129B0D3416CA5D07ADC689CAA181270B8141F9D0F60C60F156CB305E5B
E71D9A5D5FB3216BFB66284FCABF6D74564D1288EA99D3FCF6F29C3AA690A596
02C0AD2BB29A2D457C66031E5571A1454758212EB4D053F4C28FF629FA94DBF2
9677AC4B92C4DF5C7FFDE31A8F2D6F9477896C11CBA890DD464C9231B1C350E8
E8CEE17F2E0F5D10416F7D7FBC6085E9BE09E692951EA7B93A9F49CD458476E0
A380E1D122F275093ECFD398FCA6D714187CC12A2B16318F9E1D2B0E9EC134A2
C4D2674AA68D2E7EDBCCA383
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE637A46D470BB1239E64BDFB0C5E059913DDF7E2AFA021A6
B56EC9F33783F715048AA4EC1B1F89B3CCB0149CE74CCC7518C027E399132550
20FAA5D8352D4237219BC63DD74387A3D4C45B156302ADF2FF40BD407790793B
2B4A9E06AE094338F09076A091CA69B1ACA5AA995EDCA2CD0AC32539CC0EAD16
213FCF9E1B9514BCE0D709937B6C195D979E9E98C9A7924CE582EC2347A9D9D5
33A43F1525A4BBB12EA7ECA1A5A5AE9679354CDA6A3F9C1062927E36A2E4A6F3
4E754C8DD8EA2571C7C48BC29C175FBD01BF238B753D3E79BC34EE383C5A8AB1
6E3C947A011221956AE269FF01BC597924775DFE721577703E5588268DAA8654
78898C645295B338359944962E09541FBB7A00956D1ACA7D8C2355A7CEAB6B77
A4F4A47CB6269D49966E24FE51C7D95B148AC1B7A39CBBE3E75DA003115C7416
C29A27BE5F176495CDB33FB4366285011AFAEB151B1CF06B726D350362C6AC75
0D662C96893585E5910E342D8D4F4775E75159382FC657B06DED974A697CCFC0
9C7625C9B0711FA238F4631ABA1F02182C4DF8677DD7968A3D348169A0F0D186
6CA9CA94D87E1CACB6B0527EB39BC776BBE77AC6B5792FC8ED11CC469A2CECCA
F20B6CABF9129C43F4EEC5D6A384EA3A0CBA00608A4B2404DF01910F032ABC5C
8FEE0AB63BF1A81A888B351E7FA0AAF424CB304081979ECA823142CDFA680F8A
31442276D486C4BCAA0401495B21CCC236D532A81AF44B0301346C54D4FA6967
38CE7594E846BBDA89E155D3DD74AC576B7A657B7E9D469DD3B4097D7893EA48
6B56F527BB5B1954FC12CD397FAB582F2C8BFC6CCEE2A73BDE85D1D967F7073F
1F1915BB9BF4AD35CAF04DC8E58C07F700B770BCD45E0D3918E9ECCE8B4CACC8
8AA4A9CF790B5B11E2A165F5714085FE266849F64FE5CF0436734736B4DA6129
F0F781F26584BFEAA5C77C99870E69B4BDEA707831775CACADB97366DBDA32D5
E8EAF69C0E5BB00EC0FCA67E6BB10AB91F39671331459D7BD45593A87F8BD5E1
01DBB017500D3C7ED3688F500EBA35E0AE3CC1CEB2AF058998623AAED4E3C357
F031363C08528BE3E0DB8FA1D782FE985C447E10D8192333D65B42765F4FCAB3
04BFA568978F7734ECCB39E5695A456CBACAF45FBB3B6B73E80D502532DC9E3F
CDD8AB080716A21165956CEA65A116C0D4DA71D778E4A3AFAA2878BEED354E1A
A86B52BFE03F8B0BE7CEF6A13AB2307FFB871B4FEDF199DCD4C6A97CEE1EB73F
A613F2B44FF2522836B4D12723FD5CE4596E88B1211D78FE09CF4FC9AC96B32A
7E0199130F4CEB4547AC807D7446DFA4A8DCC56C69147769592007BC67EEA1EA
2CCE411CF40AA957157168F5F61567721F90032DC07F1C87AC188A3BC6C34653
A3A617950C442EF7821F971038A101857E8853218ABDF3682A744E2CF76BB5E9
ED79B0AABD48A6A5081B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C071D06D71D60CEEC9FC68AAC0ADD1DD74B262
0156612EB4B21A3F4ABD34403540C124221FB9DA5EC6C7229DA9A1D033AB828E
9D80023B2C8E68FAF7A38C925E0587A1CCE432EBBBA598B201F5AD036BE7C8AD
B8C411BC79646781C4519B89DA648B919EB362176B83298EE2D8B405DC66D81E
C655DFFD1BB283F3C5DEF1495FF97C798C213036AD02BB07FD42EC5932E79727
ACF464295E75CFC635036CF27FFC42DC2919CC167CA4C2E673040B7909AA26E8
123B3D9F176F6510B9526E94D4E38E62F8B9B96E2D2D51BDA2FB7C6992B79CD8
3E40292315B0EFE711C8FCB37968B8AE1BCADE6BD8A3BA1009B34137B90D924F
B2784C9E13F0795427324E80C175BC99140171AA2F40784356690DDB982F55FE
EFFCF946C6DADBC6A907C7DC28850415D9AFC1C8A868801B990CE2D26AE40CB3
4EE0281A60063AA71E48DB8A35E05C2BEA1ED5BEC68717E95B7597AD7CACDA2A
6A4E8808BDF0AFFBA31BE1697149D7BACECF4481DC61CEAB7476A2E00CD8EFF1
37E476FE5A098E607E25ED29F4BF3409309145BD0530C8A76E85F59EB0890ECB
A12DE954F33220ECCE5E9CC4B52E97089790D08FFEEA7D143DCC7C07BB2694CA
6709EE19C11515E6E967043F9162C39D9BEB2767B7B31EA068C594A63173F7F1
67F3D6FE97087D19F73EEE205A47785EF3C453E6F77A08AE9F93F4060DD19EF6
6DA5E780DCCA30F180F8DFB0CEC4602AD1201C63D91450E7B5F44AEF32087A03
0D933A941134E74040E6E7E797E18AF57941DDF7DE2072ADACCD3BF8D4CFF06C
5B946E21D0F5A799CD011CFFE4CF0F571B4377AD4768FBEBDFCF6B49F09839B9
35B1F7AB20DBC872DEDA90B79F113F5A4BE581DB49C5EB8C9033B8050C143424
1EDB333D1DCB862DC543CE420CC26EDF9639E4256570975B25C6C1F06CFDB2FD
9035344017BAA39283C14E3AE66A14DAFFE2CD87485598645C39B92C18AAD014
7814BF27C8FA6DCA0BBA0FFA552B9FFDD54BDD8C7F84484031FFFC0AE8932A64
53D2632D9379F30231361D03BF91F74904C7106B6F8EB6ABBB29858F65E937CD
E31D67C847719779DE0B34CECE88A8F9A12D46B8FCA50DF4433B0B8AED6A63B9
E6512B667AC78A09A780813B1FF02AA967B12AAFAA0AF1B3DA27604A975C2DB6
FC1854457C67C54DC08DB989CA3267B2BE5B8178E6B7889A33771F86276E6DA4
F83033522871198AB3E954EDD88B5059BFBB42AFFC2738CA09B628CC646123FC
9C2BB8B9149CBADE7A7953FB4FBAEB6078B410935DF7D6D5064271899313C4E5
0DA12BF2F08521A17641A2F5541EC8419514939892C0E353FB1785CF9CB67C88
AF752C2A0DAB509A424DDB9649BD8A846E6BD3D374BEB6B9DBD5C10FF56E2000
AE4AA5B339C187F52630B52309834F266D778C720FA9BD9CBC1F322A39EFCAF5
85107BD5A5C188A6409352766D80E77B1270019E0EF57F31E9F13B9483F070F4
86122EE08A4870456161458B6C93A1602A5EE583461ED91A90CA5B743636AED8
1E5142CC0A7DC998CBCF84E39CE3B141286A5994C60855979B402FC1C092EA15
1A6F3762571629775247A6AC65DEFBCA10A51ED614E0C7FBC7335681207464AB
F8C4ED5B883E7A4D01199AFC3C88B0E2AB5FE014A84377451081CA0390DEBA75
7BEA45FA3171095052B839F7A2A9E41737F4A4CD704E8EAFC757116FE3012E01
AEBF584F6B34EB3F9C4B3893DF4E25B71CA17D427219E0E2F3F7ADB530841948
1FC1CD966965C72E9490C31153E2A0DAB73629A1DC0ED7C058AD150C4D5BE6CA
FCC7D71907232339F3FCD771914933CABF613F0F9FA3E206172B0B4ADD1D9744
00A8C2642147D4B652A8F1A7E5BD064E369FC591D4739533513C202E9DA91CDD
1581D1A58898DD6564B1710A88AEF94B888C52681BAEE1E3EFB4DBC694919D4F
41D01894C91D8E03F68DB550934E5D783537D2B57CEFE23ABACEC756F5D1EA5D
A74192035D2304EC4F9083716CA7906B80486BB5C79752270821CB12BE7ED0FB
9FEAA580CA187AA3C9475070809AF6881F745EC71298D454AD31AB998F5821B8
2070122634D5A247EE4D8672339B1D90113137D4FEAF3CF3A2456A8712556956
C5A48721B1B1E140ABFF7793081B2B092724FC0F129DE772236556BEEEBEBFB1
FAB1037FB0997B367483D2C8C0D44E6111CEE2EF443F84FAC7710AD0368D542E
8A629BBC3C6E2D85E984AA01B575B37DD1D9B0D453E3A73EE7A34FEFA5641BDD
67E694671B6250DAFA3D85E0A78E946C78E33A284D4F92B73D7AE87B13F108F2
C4611CD948F30F56B984E409650E9CDFFD63D996E25E5C0E0FFE02BBE2237537
8C945F31C26697A7ED159B529276995292581CB9B29A54F4F4B2D472C74909CC
47C1675DC6FB9A932C0552F8FBE17F4D8771BFC6109E6D709951694157B3CA9B
1F3952D101D6CE60D1A0A97C99EDB3FAD64BBD337BB747424BE88E67FEA44610
51A1F65159650D3A2FA882944E6E8DB113CE928969F6BE3E3B8BFB71302E87A4
5A22ED99B04853D66E5A22B56F79FEFE917A6F436B823B1A2FD914DDADEFB5C5
CA3A43E348D017CE2040752BF94A98902E608264DED8C3241F06469FE18C377E
448EDBB0823526BD66B40F0519F047195405629408224D070207499DF2F43E7D
52E442E3B6E9E3B08F88C9961E81373B96460077464C7DBE6C7C7887BEB3F685
B182706F5DB4C7C4BC2FB81A7D040EC5A04E5C5434D732318AE791EDC71A47F2
AB39A992EE304763BBA1AA81F9D74B24FA7EACEFBCAC72D673540922501841A4
F7EF18CA86AD20AD76325914FC0197DA6D7632947C4AB3AF2133D1A1E2719511
F62BEB9C879E76B74493C7D5EF38E01CC031CB4CE13C2EB6BA2695E1AB97260C
39A7CF8F690145893081D526990E92C1FB18CC4B968D70DFD13C6223FAC9AD31
2E1240ED981AECE8D13DC653D59255F868EF158EDD781E9D02889907B23F00D4
F6A0D9B74E591BADA348B09E22B1A783A8EF2AC87D34B6407522AB33411ECA4F
6C765C85ED1405A5F27B28A16751402AB278A8099E29940E719DE1E109E5BEFC
2A4098E77020110C37A90B5BDBE279918B0B31E08031DB686D518B4CBB8A4D0B
EBF6750A452A7F706EA676E3B3237FC5656B29CD5A3A04F82AC871B526CC28B3
A61D985EEB3610FCAA433B9C6D4683C512F0FDBF3EE6FF552D7BF0BBBBA37050
FCBE3F164189FDC8446ACDE8D0D4050278151B46E56AF826A0C2E9389C2B8BB8
E38579D281D5142944D3322E1C66D456E4C5DD727AA41FA5B369D5E10CD71832
A7DD40DE855B47289C449B6AD8D5F1D557102050EDA5F1641EAAFDDBC082E579
A06D8A3A323458808BAD0F4B8A2BF406DBAC4C5F555EC96E760C8245A1AD9F50
881DB475F892F868823CC55D4859C09148529FBA57A392127B68F5366491D1BB
097D8FF4A71966D42DD988F48C8A1F4DE0449E6AAE79500C42B4EFE4936D0D00
0FB339115493C16412F1D6DCE02BC7B485CC108C6321EBF1C609633933A576C6
B0758D49F3155D448D505F73A5206EC1C8886F5949790A7E4B850B6B8E31EC18
B7321E63AC75B6588774961F6B7D313B850AA4B368E48DAFAA5693CAA236E150
E02FB2831359FDB95792B2E6431DD24BFA8F2B51BC21E2E5AACC0CA211F50A13
075ABCF9F440CA468403D939B91520C652F1196EAF1BC975E26F8057F69CB972
E976F99070AD3FCD958C1EC54B3994EA142AA0615EF7BC00D85F75BF5F32B350
E2CF46BA0E8D0120BDB54910E5C27A27B59664E856EDDE290103A0D490FD76DD
09B152B3AD1C4754696B239D4B13935AC19769600943C7343A5E7A06C9115395
DC2F92EA95E5ECE5A08EDD16DF74B6297EC0220C91F8BB9AFE742FA96456E131
7D41CDCE88A8F9A12D46B8FCA50DF4433B0B8AED6A63BB5FFDFB8D48D04F9849
2972699B5667C0D2D206F4785DE20A854E1D4C655A690689B7B5A19F8162E5D8
454B7A1CE94AF723F47C6B168CB7269CC802B14545C8448B5C260C6AAED5FB23
2390D7239C22534FEE644AE96C5718EFFB9DF1AC47CB3022D3751E6B7123FB71
403E154150FA4A14EE2CDC8F0BD084CAB30272E8F065218BA88536F138B94AFA
D750F6EA9BB43271084CD876A14CEBEB86283BDB500BBC0F9E152C30059054EE
92951E4A202AB409F7D16443DE00ED69C1FA674BA3664F8BD00C08A27F475C00
E6AABE35B01B991AE910B7DC821CFD8A6B5C7F4B116E78065CB219C926D45163
EBF6E81EF0C38076871283D64FA5F2126CCA7E93636A7CCA2158B99A15CD405D
4AD290CD8F7AF8845CF78D4BE9C7F2E4DC00372530C64BBBB785117A8AEEC190
9F49C82BAD55AD174D38A74582CB367BB50ACF8FBB2C8A2EDB17FF267D0F21C3
5BE42CA518272C9F9FB2DF0780C957CF1B9734E9F49C0E6EBDB5D24ED5D673E2
6A25811D4BCA9D693EF8ABE784D2BE46DE1E57E1B738ADF6FD49E6A53BF48C6C
2A73026234D3719C72C2FB8B8274AB54A6853DC6784398A6B994BE424B6E9078
6C303D590747608AF3CDD6A51B5612DD5D49E1153A25EBEAC76FEC601CF4D10F
65DAE3EDBF9A163BEE244542BFD2849D498C239237ECDCB23458C7C3B9395C7F
900C2AC7BDEF8FB9D4574698BC8D4E374B34969A885A0A4AA26F19F8348EC621
89B42297868AD2C3E80D95C41FA4A5AF7A016D3C773E040312AA0240DE24C7F9
D662FC2E59673DEF563AECCABF724C09CEEB5DCA64FC6D24A091A75B5745DFEE
F5C1162900B5F1EF5A7102C27DB1918679E7E354A5DABF897D9C8EF5A14FA8DF
FA3A7B3D47542FFF5987268E60E7FD64B017EC6A8FDB4BA5AB5B5B58046899C9
C5993E7302C870678DEBE8FEF3F2438217BA5121CC668458620DB3D381D56770
19CDD612E5C0A267BE4F707ECE93B3E1E8BE65922315729FA5513AD13B562C5E
E145AB39905815D6C3E8B60AC5C1D4D7731E2A6B122C6F57790C42B0368AD7A4
99EE5F029AA6F8E302F4CD994EC08C00AC6A66C51254F71280CC722402E200EA
D4F6F489DCD61B81CDB85804A5EF00CDB09D9C2EE4F3D571285E319A78F90942
1C31359DDF81F38F6E8615BCD0E6CFFE077688C365888921E45608C868A0F6F9
D726CB2CD81B49A9F47C12FF76284D3B07E2C2E788036B4867F90D40C1E4FF74
60399F1F08F98A05A579D00D1ED5E8A86BE9DC1CEE3FCB03B9A0E4BBB81C849F
AB1A6089E9807455A5DD78B2EC3090E36EDF4D19FA6BBEF386127BBDB53D25E6
8448A975CD56BE0A93070F848850FB9B3B0285C7FADB28A3711C06273B79FBD2
A509FDF7AF81630306D67E0AAD0DAB78243E1B814F745234BA7CD57325B5A34C
C3F984018DC9653649786481788A6F58ADDB87DD0D883AF60455753850A63756
5EBCDE76329F5626E6328EBE3DB5770A4C3E21341C304F38845FE70E091803D9
D14037AC4AA8C4D17EBB62ACEFE5344982E0F489D72EF60183D8F2A79A3AA765
C18E0479B0255870CD61C8CF7AA8DE567D174EC90945404C5B928EAF3E8DDC1E
018442474EC6B0B42DF539EC1557722299347DCFF0347BA4273054B8062D3DF6
FF094944AE472D60DDF6CA62288E4E780F8614C7749C9406325C82715C866134
637DCCE4848D2B051B8E0EC7B88872E9AE68BB5DDC30F4A61119733F6F6DE0BF
4C6437A849A661B6A233B1C24238BB910C11D2A8024C89FB5DC745489AAC2570
4C61242B4B1983A5D0B134C8052495CBAA9D2E2E014641BD58F0EC389FACADA3
08A1723A5C2492BA0615B0222EDD152AD19C307118AC0086653521EA59D676CF
C36AB586FF1FD4C383E2785EAD36F41274FB0BFF9DFEADC612CA44A7392D8E79
1DDE1DE818BBF26CE3BCC2569F5CE6DC91D4F8B7800A05DECB300CD7A8C38D77
4C1DF436013901C9671F77F34A63F361C5579EC5E00C5A8E2FC97874F6459EFC
C1760E9C6C78E60CC0152340DA6F26C67B2E10B620750E2C44E5CB9DCE747E29
6F7E716E6BB12B699A2FCA90DFB3DD730D96D100DC5B1BBB1632D7015235F4D5
1C1C753EEFDD6ADCEB45DF4D00713744039C43B860B5A9C51AF0BEF11CC8E85B
067A402342896C9B3BAAA570C4900E12D720F2812F28626DE3BD3F3426B82718
259AD02CDB518BA4C4AD8F261CFEBF43857EC7A543ABB1E059247E276E206CB0
0BED125C8F78A665901F80068C9B0AED83074C6270B177BAA18F1975F43E9160
8B75D86D9F7C1E986C2DDA71CBF33FACEE675B943764AFE71B5A359C4A092916
3E8EF660794518DA4307AA5B38469000FBF31BAE9CE8703754A099D21B332D3C
A19A842755A79DDC1E281A8C34A969B80EDC946658B7579B5BCF07AC8B45C2A8
3664140E70CA62DCB3153CB4A8E46F12CC16254F52A26FE47FE41504D3E851A0
665AB60BC0CE5C72512D196F8D1BC0B3FC12DA2D13F4B9AEA2D017EE7E574B86
2576F5EA495F51E1B3A86090ECFDB57097EF73BFFD5E41E8AB6BF105F87986D4
95940A8B4A29E4DC974554DF975D026EA92FC09DBD65783663CAFE414B6F8C06
F00A26631D7FCC4527109F177093E7432F5FAA6CA14F1654ACCFEC8FFC127488
F604E972B695E9EF18F331A58BE4704E5130FB4984C3FE2474E6CF0935F90B79
7221D94774689E83E5406F5D9554C1284249C687A6CF5A6B4783F54267C48710
32ED406DE854CD5E243C0BE4656E35FA02FAF5101E1AE6B7CB286C9DB979D763
FEB468FC7AA2DDBE2E708D27D89164B12BD8BDF0418BEDF018EA67683158D1B7
73C6EF553EA897D5F2D53E75902E57D7C4E06D7DC83F1C557ECF5DE83748370B
00EE03A3ADB919976D4DBFF11B246AF9C2FE922A8A6F8CD47656ED2CBC816B17
3B01048BE9D1E4B54ABC0396D5203D088ED7A1FC7CC863AF414AC14AC2D75E5E
EDEB706CFB2AFE24EB580E55BD31B793E4065CE83795F047004ED88F5C38BDA8
7F5FA8880517429B9C4E5FE980448EDF3BD57758FD145E769D4E88BF43D19050
DA58F5EDC7B4AA76BD8CDAF0B8639BD5D2C7552AF5415B7F35B957F02B962930
D3D0C3AABCE7BF840A7A035F2CC57FC978684570CF6C8FDB960B9CC6E9435D65
77D1CFB71D362BAD7280AED8771C6EE2F7E2D86C5661CDBEBB354B84249E93B7
7A0E409B4D5E17600E1E43F5EA1F884939C0AE467119F1E155676D10A8A35955
BADB667DB10180DF404F43A166E2E533F1C050D35CE4AEE92C35EE391398EFCF
E19EDE2E31F837DF86F1800F59C89EF6401112AB73434A3938E1970D8EA3CD40
C7B8FB44205899626FBC269C25478E0A63F78F3460EDD4F64B4D2A5B3E660B64
D293F803C670E243F0B0EB1C548746C08C7F4FAC0D4A7FD8B7369AED2AE9A79C
74C0FF0E0B0C1AD3B59BEF79753FDA3E929B52F207382364B1C62AE8311C4337
297E030CC0CE93ADB4E2FEB60E28FF6D4AF0010D422AFC137F2254FFF6C2929F
CB76A235705EC088049C1F1B0E78FD2D357BBBFB0E12CD481F96252AB7402213
DF9BB4464515CCEA5FE4C0CF761E921D7D2992EB24625547D54E3F2C644ABABB
47914DF3ED2C719753BB1EED9C435F2D571BEBA4F76A0AD5DFDBA6EC952A4F37
948B63263FA4097587802F6C66C3BC6E9DF45A22A24877E4A4499697D46B779C
8609E85E4BCFE84319532B3AC9D62BD413CC127C8DAEBC28D7DE5CB57A30F23A
2859902409CD4FF43EF6A99E9FFA2DB4113C12AB9C616F074276C4840A546A73
0D24D8518117AD200014839545B1078F38D7284FBFC473C510CA28AB90147613
F0EBC94C3EA0001043705336F16E783FDADA674B361F951D5152C0011FE0BEAE
51286E4979DACD3F5A953BD9E918D5E46449525A4A597FF0F091B2B4794752D7
EE5D9B94524DF768ADA1377760AB1ACE2D780F5624CF53DE046A36EFB35B52F0
566623440D7F364C4030648BC39783FD7AE189510DB572D01093BC4C7EE0C09F
389FF828AA7585F9B7FAFA718DAF925AA837B8C0B647161E5C322CA820521400
5D234795C9DC1354D1C0E5ABC997C64F3C84D2C3B7581BC9566EB6D012B6B784
F740B8E0B360808C984DEC73EF57328A2347BC752EB0EFF7BE8B688A3622826E
C83CC42DCA4A26C504AB95C5232A86199FC1295D8BC52BBA9C5089A346CC5760
009233FDE0B38CD4EC1D07A9F817ADBD1AA6D303AAF94D5FA688675B55D40FA4
3C6D97741D9FE4C964FC6D24A091A75B5745DFEEF5C1162900B5F1EF59402CD5
E4D0C3953C9493D87F46CE4E9C7A543364A9B82B34154924F4739C650A8EF8D2
38C73BD6689A0657D8427446E44E2F5C77937234D1D6AFCA63944D3FE5126940
8ADA00FF11BFB205B9A42EC1F50B435E4D44E14E22056FEA071D0061F16D8879
6C4BA0C670D0E715ED9333A0FBBD15F19CBCE5F93259A6C4A8CAD50B9186BF14
62D3AE2AAEA8A45E9A29BBCF83E95F0C65B2D60169538EDFAAB935FE3468186E
CD90E2F15FDBB395191E6C4659910683768F80764D94FE8A746FD06C08F15F97
3A528084C73A3416B7D9498707C04E9115D411FD74AD771B5973E6D0A573A1FD
2E01CB1197990EDF8444CC83F1AF789DCE5C7F64567C9D80D1829D7FE5F45647
ED6B99C6D96B728840A77AAB12DF037473065B62E9F3775CAEDAD9508FA92283
6FAA01D50CBB9B12B543AF2A86A99F4D544B8974F01B52945FC6ABCF3ECD8410
335AE6CAAA4F740EFA8AE1742B115F4FA7FD8E330D0B86B191FF5B038A5D0C32
91053A42460468F6A1700953700663A85229385FB9BC726979DE858914A95826
CB2A8F0F17773C8DC86EDDB610CA36C8A6051774DAD79E4E3DD10CA06A919430
0B6FF769550AD34A047DDF4DCAD48C79C13C76BDB9A98E254804C9126F6A007A
D697659D0F4B9B7BE0BE1E74DE179CA649DEDD316A452509D2804B5BE0F6C5C6
EF94B0FC821BF1E02C91C149EBC163C14366CDBF3C81F57A352355320AB4F3E3
A84E4B60EC6CF57A1A00F90F224190D7BFAFF83C13AF40E46F7154198D7BC2C6
F10586634E82705468F167630971BC01DC641766DC254D9E9B06BD62DEAA105F
CD48375C11A3207B5A381FF8E1C163001513CC382BDC172026981E9CD05FD8DD
83503D108FA0BF72ECFAAADAFEE78E1D8D2B9E94AF57AE0A20570A74D0C84155
353C360C86120BE8A6A2B0C9D6550784FB8929369CA329F6A6D89A7066E845EA
FE223A6D26B84EE6B6ADF0D9950A195F64FD3209C6D47B46B7708F855E501D4F
6F9B939EE1663FD02D1E1D74F22C4DA4143A4D523E32A0A371A51F64CDC4E06F
544F2055F67F0ACD4E9D99C47877168E8977CDA919CA86D82794F04E7E98644D
98246CC6E5F85E045FE750DA4A9B403FD293CC436888B75949007FB2D0557A88
D362014EDFD3445233A03A005D3F670E67B8FE790851B16E71241433FEA5650A
3908D0B0BD195F64242395E6C807B7D00E12CC9CA711980842040899809A443C
00042C681FE3F9BBDDA09127551CC4780E971D3952648BE3ACB42BEC6D5B5DA0
CAF19D34A8BD8E904BBB589CA901E79BBDB311C102F70F1D2FE7EB3609B14BBF
10E66264FD1E6EAE175987CC0DE53E3799F86A71F96165AA3EFB39B7B13C5FCC
011F38E349AF6FB76AC51841B39F02662AF720242D74012508F26C7003A39A3D
65A8CE04E1583229836D0DD8CA390CFD14E80FC0455F34F89764223F7DC55BA6
69B8793F48CA8E9FA4C89E877948CA4CF92F1BB9E3825B748C865593BAFE4D25
F58B6C3937F7A3D8165EDF4C74CBB662283EA3FB964084B345CC06DBE98FE9E5
2BDF3CF8FEC118F0FE83A621685EA394047116ED7629C74E8171EE39B9968596
DAD2FB69E0425E6B527C4E25D28CDE453EF7A4E0988B62CE07D14F620B90A67F
273B311061BF2D3CE3DC3A689EF85714824E939267229AAFDE9C8C387F15F064
F68627E32241CA1AE9D54F1E3710F18FFA2F912FD822B05DDC146FDE82B9FABC
A9A986683FF9CB2E1937937AFBCCFCFB821CEDEFB4941ACB6488C1A608FA21A2
EDC0D22ED3D5F6735067D8C0F31C456BB35D31B98E4DA0CCE45277DB109D6A95
87CD6B0C5BF54A30D4E3072F05FEA72A3C39AA0DB177C37546FF0FFE8288920E
35A3B84D87A21F5043A04BE41F18B2CD19AAC871DF4CCABC332ED75E1657E2B5
531B227A3879412434F68276BACEC7094E9C4779051CB9421DE1DD7BC5D109B5
2B7093D785F43FD6DAE693B16645D354E54ED6C97ED4F591623645C99097F1BF
66F347EE1D6DB95461595C9938581921663D3A3DB29723187596489A8894E037
3BF6D0E1D56EA24BEE873E68313353CCEF779B6200A1047B20647CBC2F42292B
825608A05FCC5A87AD774203738D9D144919E98326CE01E4BE6B9E623761D24C
0B7CB02DD90DC8A2CBBEBDCC9B7EF3CDC194DF7541D34D08480F1A1CA16F2E2F
8A6A4A00EBEB709BB571CBD6D51C00B349268DE077F06EC59482927DF994271B
1F39BB29575F0D72916AF4B385735E3409FF6CC8F3C38638084F8F4F7DA8B4AE
EED926F2DEE9A34E92E3925484E3FA45344C7FD3D4D3A68B7A80D27AF606694C
DDFE9C6DD15D99ED151912F966FCDFE7AF5AC66080F745228EAC9B0EC2C3F650
1F4BA0C82814EE1605F5CA9D62127553EE375832C57F9ECCF6D8C3FCCDDFF2DA
B3612678BF24A2450F6E99DE896F7F3E4563B59A33344959BAE4CB57E6FF0CAB
1468DC84FE0F3F92EC4E129E00BA3BD9CC0870FB6060AAF40EB540CD50D3198A
9127F8B594F29CCFDAEA3CA1276BFC8969DA9B9A00344F1D4D782CA0ABA98754
1FFD5934A377B4E670B933462098578BCD5050EB47A9F4313EDADA4845CD6C72
77041939F7243D600CF7EE179BBD3BA15C58FC4736583A4EBB71EFF383DC58FC
1C6DAA3105C475E5D473CD591B11F1282E9A80CFE218A4B5FF0264F1EC9818FC
81ABBFC92DD26021738105BCED3E94CECEB2E6E552D1F135733C7ABB72957138
4824567D6D1B2BE5142DEBA285AC0DF74D696E55B08B672A1118DAA72C369DAA
397883491E11171B2040FB6637140BE927369F803A4FF311D52A74289065C1D0
E2663FA57A88150633F3F937E9606D75A53BC9AC8678874FC3486B5EC7D278A0
D5DABB7B1BC64C3BC771C29C5837FFFBAD42F40083C2E412EE5E6E050E99E1DD
8C3FC2A00E05F0D6076A34A4B833ECB05F190B1444E379817760012E1331E9DA
B047409E478B58C1E5D8811E1799E40445E29A10318D320D2C81AA5DCE6620B1
3159F6F0DA988C6FF06B7DEF84FD26D3794264CB02B2E1B8F18CC386797D2A9A
40DD7EFA8609D2E30899DAC9B8553DB4FC96FC35ECDC38C3E3223F9E340C6745
0386D3DC4FC1E20A83DFAE731EAD0363A7BBEC37D8A9CAECC16CEAA06FED505E
C60F7460026CB419574319DAD73DCF5A465E9F002FA79AD452E2CCE8D95B6A53
88F29F07A9F37C84D143DEDCFB27AD763C746E1814DAF2D759976B3D2246EBC6
9353B083453AA83AB1657ABADB9A30C6C52A33B45F9C7B9361F7C7F4EBB939F4
6ACCC32B19C5A5886DAD4EC3D83D0BF1564C00C405693F2832BA5827DBB7103C
432EDAEC18CAD42166EDA7834BE592C3B7C87AAB2CBBB8A87C093937215405A4
E4D84599E4674B52F65CD9EDBBF10DF518D2436969674D4C79B5F77B8D6FA2E2
26B8B932A195CC0EEFA8E39744C2315DFC0050BB4DAD4B0FF3779D39D39D1205
9B64E8C6097B5281C359CE4BDF4907ADA234C6DE77DC4957B683947D54583D09
C01DC47D2CA3D7E500C9BE47338665F1538F2F645757A6FECBE5A1590A6EA831
635F1E7946F9ED34797866D7479F81B25C8B73BE5EDF2461F63CAC91E253D461
23B796965124AF855AF2CFF8EE38436E7C68C48BA02E9F78B4EF39EC5CC133D1
4C2E464C13F5C41C3C5F8114A5650C07838E0D553E7E840AF3EA2B0E8D47E025
299E048097B778D17B0AA1C672E2020C946F0F8E03A35E76E81DBB60E01D4CDD
FC2E9BE4709956583F3B9EEF0A37F30434C3077A2428BEB3FA5E46ED9C413EF1
95DB3159AFA04AF25F0A82F1114AC09880F80827DBBE528FFC7FE26EB04AA53A
EAF4DBDBF6F0800EBEF9EA787C014E395791F73DC3A126EBEE67B036D93D18AB
91F771A43F256843EFCDCCACE4627CFE80E82179579BFE305B9AA04A6E9528D7
57CE24139474F15CA1082CF6930F992BFC83A4D983558086958FF839797DB451
68A9F3FEF6B8BEBD37ADA98518DD604EFE6715F50897F075509F64E99F3543B1
13D3A4716D2FC8CAF0DAFB63A8C28130E1591BC17273EBAD6AFB646F54CEC76A
C98678B54E6E3A103F615CA05A901D8B991528CC1ED3B30CDE23A07FFBB7128E
66FC9D66FF7CD9538565425DCD900AC231610AB9789DA62AC41EE688184BFE66
41C0D34DC5F77FEB37954682979666FD919D83DF85BA4F4B14D6A77044767539
C0C38F4EF65E5D900353EFC3A7D5BA1EB1F51ADF85A244CF55CE0EC7494D4247
243DFA8385DBC5760B397F0EFEDF9EF7769E0A6E389AD0B2A5D10CD4C41A4009
7EF753FAF0128954373F9718877DA7599DE0AFF6ABB520C27B9B698116A5787F
E211379BBC3E33DF49A031282BFAE588877B2A9A6426F6010B1050C5F50CA931
A8AED0902642383EF313DA6EFC55D3AF10B647078CA66EB88EEA899385122089
2D97DA2F0E5BB1BDD5ABD40D988B018FD18F5ECE08D9A100CC4229A4E33FA93A
0FDB1AE200E2F6C6B899AD9D53871027450BAA1FC67517CD5B69EA896122FDB9
20E721E0DB58AE8034D8C75D758E668485BD05C356D3255479B96DDEE53455F4
1AB052F11C588936C1837380CBC611ED14FB2F017FD1CB7E1E23C1459E378627
F323C6E6F04912979B3850CAACDA744B25D6FDDD4207C80A3636F3B7AC37F415
FD2F8EA734FA949289DAC5813D5C91D4689F7553DE7432E5B553BD7AFC2D8E6F
3071A191FA8947D12382B17FDCEBBC82F61E5EF76E8793195B9D6474F0070FE5
7D16CD12153DE8F377028125088457135DBB27457FB4CAE16197347611DFE63D
A3C7C9266F7ECB5B7E091D1B11EFF73F0B5E7A5748C8AFB555D1E26CCBF43EE9
C02CB6F255587300FD433C3B4D9FF1E96935A959D465B74109BA1843085C27C2
69C751AB2AFE4B15C13C6A0664475C3A9C192169487905DC47D2022934989F37
1A8F30B1B39DA9B1F203A2814A200FFD11E14CC70C954BEAA33A81A5EE27B922
0C89DF8C7471DED4067D1AFB8A49609DCCF844AC7E03278F56A07C3423C5B2B1
4B8D584BA7468DFECCF5BE1B12A00F107E3B1014C01FF888A9B1E40D31C73F5B
4E253538C5E0D0672F042A01EC5CB1BE74CE9522C06896B9E641673A87B47BA7
D4A91ED4903EE143F0FF84E3670B8D1D046FFC2E8400E63C1B8315BF63C3BA9B
849EDD5F620C7E451943A157C7CFE362567ED47BF94B63D67A9113921AAC23AB
1B8F7DDBE6F6DCF9A3C3CED6842C356858594C63EDBA2EEC06B6756F2281E040
0F776034AA7370C867BDF8F8CD40540C3C28B45B30772EE9FFBB8D00718C3430
10FAFA41B507DDED01318BC9A9C8A9E8D714B1A1D6BF89D4CB98136839AAAA92
BE85FE2786437E6FA70BA428073349AF15F2DCF43283BCA59F109E9740BCDE6B
C5813EA8EBDB20FC0C7682845F3E4266B7D327312EFB770916FBAC97E6584C84
9A9BF389B403CD6FF5F8366F9D36FB76A217CD9C3F62414281BCB53CA46A8161
D536C2D0011A2B12B23165BB4DE936CC3A4BF19EA1C5D6C0D79F9DB3B28A9266
CA8402BD985CAB49BB651D6FDE79EA92A7A00FDD42D5701AECD409DBEBF0C9E9
5509BDD99A537F5C974ADEB4C564C26AF25696553753718AE0425FD9EB6664B9
516671F04ADD10C478B7F8D9A562487A9FAD8D2C70C21A4F3ED7F9F55C21A04F
1A6DF8168FA2286D8C7EB897EC741C41A0BDB45D751F6641FDAD6065A36614A6
86D6A7B3543205DFF5A31866735EB1A931953CB0EDF319AB319EA996076E3AD1
F6363E18CEF8715CB464AA160792A95431549FB6A4ED42741F9996D7BB1EC714
A2F30863F354F78FF9D34A41EA24E7A2ACB665959298984C7B4B72564646B091
0BA9E173FD2222DDED8C4BB4813D97384DFAB387977946314C2FD50B1EFABC3D
291F4FDD99EB7C0EB047051BE634D62F6F164085EB045535E44A67A143EB6391
3019CCB8D949E25D7DB43EF32CE21205C9B33BEA2D1B94DAEE18FD20F24BBFB3
A2C968EF269DA1ECC28C2F9B079ED3CF9C315BA95779D124604AA59F92201234
15DE40C492F1036351910FE6B93342626EF81FBFA9AED252C2CAF15D3A748549
B6F6A61F79CC9DA248CA8A674045257BF43591473F853FE3A2A43B7CC317DEEA
02FFC7B4CDCBB6A5CE017AA860B96CA41C168548C5076500FD0985C57E723DE5
5A2ABED9B40D7BE674118BCF391F130DEA693AD05F6FCAAE4BFC1F60C355698E
32DED416EBF582A3D80351CADC60B733E50FA695EA1AB682A056B226DB767392
0A2C426EEF8DA67E650EB7B1DE643531FEA419BBA8067C6D0E964143A0906762
197B8DEA764ECFAE0BC6723E560B0FDAFB34E8AD48A2E4BA5979A58CCC637332
22D0687E1BA843C2E0831CC5C994179AF2BA4B7AA7617E2C8E789C621BD307B6
477A05334A8EFDF778DA38E54F972D6A17B932EFECCDDE3DE2B354F3681BB1B3
E49E42E7B668D99299AAFC1A4965F05C14791FA73964C470E1FA471436D8C6E4
4AC4C5010157D94FC1250822504BFA173CEED4E2DE5B7DA75EC58D886E9D64EA
069C9432AF8F2B50A91B0C7C55571DCD924B0C089E2515829D461CC7AC00155E
932FA3F5B34063E5095402C6368C2AEBE26D3157EE874CCED4EDBDA26B381A13
DEF3C35E4DEC459759D7D3575F6FFCC6B27F94965BBAD1D2156928CFC8EE865A
632AB4A611CAD82809B7204C28F45A55EA03A132AAA54B5AC1B745CA3E8A11FA
F9612B74D2950015F2EACCA793E7888C26EE723E78F3C894D26D13AAE036CEFA
B476721A2E3A65C2C5B0C7A8C8B2206E76CB6598DFD42AA22CFB939A914FB803
C324871E0BCF73B19653C3BCCAFA1AA748409D3C1E1A165DB626D7429709776F
04C4D5E4D04DAEBF5C475C7C3EB2EF7410CA53A9034999638C65F45B0F57D760
0215E8FC2552DB72CE2772DB7D5B3A765D09AEE0F0178E20124CFC1D434822CE
24ED6438F2103F4EEAECD38BB01B2C6F42C4C1B222707A748CC97785174C6E81
A614B95868CFEAD3BDB4FB04FDC4FE2F15947DE72BDE539DC79E2EDC7DDE5151
78FBC21A3BFC4E230375D47F4691E0E9E35436DAAB48FAB07CE7C933BD984EB7
13405D2B3F481244379A40283186D67327CD487B978FD50D9BCA2508355C508E
8C22EEDC232CA6A04E928004BD90C2FCDFB6DD8955D2D3B6FCF5943BF5BEEFF1
F9BF99301CB61CB5FD95EAD945BBE7141CCE4BD29366A97A5D740CCA11DF380F
90656717F2270C0F1D1D5A0C48774E2E3E1308F919F597CB24D48FD50D1EE2A9
FEF854CD6238126A0B323E6E84D554F59DB81033F4F4AEA1BF99F8070976D754
85DC4DC5F3C3D020E853171B0D1612A3DFA5264D6B64371271FCB4A74B2157AD
DE421D5F51D813B577B8741B68891BF8FF9BBB484DDA6371DFFA6222F88F0886
C7F8848E958C6F74CBEFC62A27FAAB38B52465EEE09E12C4482926B22743E5D1
A94A301D3ABD6010E43C4EC19A0D63112FEF67D69CEC2F78116EC8583ABEEB71
D9592AFE1D648C347BD72FF30455B7E6447D19E2611C39EC0DE9AA9AF9629976
79755C4CBD2D05F9A170FC269B792E8CF7A0462248EE95527AA116CF31B971CA
F5DBF65ECCD01FF04E6148A80BB2611AD6460F73243DB763DEDBF476F3516136
578D66103E6455B244B9BF9C400BC802A021411BFB80B334C4BD614EA7496D58
CE8BF62247CB10F893048F37A2FD1E4BCD68D656301406C1FD474D98B7555DAB
FC469D633FE91FC8103AC6DFEA6F007AF4A42C0A08C4DFD62E596AC1DDC11E23
572F8A2F5CAB5CA87E7A6693182B9561E329A3E67F23EFA6DE495C7C9D966924
F124603446F01CF73CEC5B7877077E421392293506C391705D62EEE3CF25BB0C
4EE70CAB7C5DA7C9BCDCFB67F1B66DD991E2E4C0A29284FD2C9A8740851EDC44
2490FAE83FAE3DCCD4447BE0C2D6DE59B1BD629F479924757548799EA068E215
35FA1B41FCC74614129FECD357C3BE8A07B61BA51F5781CAA9A414AEEA78ABC1
7DDD10E2B4D776449896677E02D47DB24D4967158F415484BF9D6A2AF010F8F3
BACF583EFBE1FF3856DF768AFD7C810A269760DFA831CF3CB5D0A73CCC6B41CE
8296FF0C92CA794AFBF04F8BB3B65AFFBD62E1EBC63C182EFEB487A03399B496
9F863BA0A83115E8AED878484FAD3448F4BBFCD65D1EBFCB6494575BE7C27F44
B99EBB6713BB8306E5B5A0947A00F952DBBB63C0DA21C717E348E0BE63120324
CF402F90BED39B54D866320877A767FE000D8A3386EB1E20F1194FD049F28B82
F4C2D73E41CC73C1C9F668931E64C8D467ECE84CF7A8C288F9B22E0AE6685047
D8BE005ED260ED9488E270BAB33AEC2A3A055F6BA3C3700A868E92B4E26D499F
BE545C804154DD343D0FCCA88D299600B0C26ADE2DD3774D903024A13EDE0D58
B50937201CDA9C1EA23BF95C4A3A8932F7D47100FF8A7D4BDE1BC37CE16625CD
FF321ADFD514B2BA1B66E7CFDB8FC93B6A8EE952D196EEFFF2D9E6B8CE8CF9F3
2866ADCA85FACAE68E9C7954B512463A86B1623BD5433F6551DE2AA71475089B
3D2BD411FB9BA4C621F23724D73B1079F7FA07AAFC9BBEBE2E4AC9E2B9D11603
4191A1A804EA935EF390C90783F6DA40C59AE09ED22AE971884911F452C33F94
F3A9165CAEAD2464D8D80FF6C61F4410BE7699FF1E5E942546C8A4CE88818DBD
E72D030D8E884D315F56536F6A8756826B7786F35D21E3098DC9CF8BBE54D707
A866B52B55E06213C9491954D1A8509555EDD6F3AFA7710F49EB3706A4BC08DD
6698AB78D7681FECCBB4BABA1BFF3FCB4D8216D136C4B20B96065574316F2EE8
2417F28EF33242AD35C5B3A99045B99EC805E25F46A0C1D1C281BA23D096EE2A
4B193612337A6D180D9FA91E94F858DAD0662FC9CF4D1A5F32B6E6F0DB26D2A2
BEF33383AA86D27BEBA7169F949B08254A985398CF9DE6AF7875967EE3CA79A7
97C3A4F27AA9924D6616FC860CCAA34024F5669DA02ABCD1BE3963D734D64B01
82A6CFCF064906AF5C9ACA3FD626CC47D247CC610668FF164EFBF2FAB76ABC57
935C81CF7CC61260CF2B227DED699ADDE69F0C644DB1B12A15889917716A5491
0E71FB6278604A400502100D8CDBF2947CE3218574CDAB399479F824738B690E
8189691C1EA942403339023DBC4A50793CC443112BECFDD6E018E867FDA253BF
15E1ADBB05F04614DDA701D1CCCA3404EDE621A85F81C42418F86A00F9E86AD2
055F1A4587DBA063C52E8210D6F5B3C5C23A608558756F8622A8FA6643FCD7F5
5E72948D2DC55AFC5016FB2C4CE14861F1909488B3C1295FB381FFE037D9126B
AEBC8B4C6A7EC8556845CF97062549BF859A34ECDE8AF4FDE1550774A9C670A2
833CC6DCE45D2E4898BBD96830A113AE69DA214B1AD5EB1B5B430AF25A20A0B6
36FFEE11D9F45BCA484AAE98AF60C2AEF608A1119AA13FB6FA40C2B7FFA305CB
793241192FD9C1B01AF5CD5388A0802D80FE1FB499545814BC2B3B2ED508A554
7C4B8B182CBE28D8B46C0FFA3AA93A437BD5C68850DC71A816B0D510076BC298
CB824BE6E3FEDA248248457A91624203BC9932A5AB72BC6AE0FCA66760484CFF
4BA51454712FDB8102D968755E73DF40B4E922D522E2CAF63FA0A8D22AF65683
9B0DBBC50EDC121CA1ABABDCA567BB9D28CB3E5AEC098EFA7599D096FC928471
D2FE294C8173E82B508A73108E3E811755919256A220DB336BAA2F104AD50AD2
E64EB30D71CA776A70EC63DC4676FA2CEA7F139ADD0D45F83682E568D0F3C5E3
83F832A87B94F0A1114B8A280517254A9804386AC790A8728CE92BFC45D4DD83
DCC6264A110B4917D2BD8AA6E4AEF554C38270217222F599EB268B627E774077
2E31F6A6A724BFDD2BD3557874CC35028C6AEB427537C4E38F3ACF31A7781408
8EDDABA2CFD7D9F91E2376B6BD68ED4675657DED4FFDCC47019E5E141C23F4C8
9D5F7051F016B7B274AFC53AC098729B7E555DCA48D4C8FECBA8A37C224F21D5
4B77DB117D4925D9C2C0A706CCA4AF87BA538C7F5F51DFB2B8658462BBD4842B
B22D392125E6B3F0C934BD9D3ACA17F0E4BCE696958BF961961E96456882CB82
F70CC0FC06F266DA457FA86538CB71584A5D39410566CADBBD744AB724580928
40ACEA436D868F635EDED08DB8941E040A09E9DE9DDB141074433C98144F76B7
C19EA4E5E056BC86704B6DA606EB7C2DF1C969B3E4DA617FBEB1868539CBFAF9
4A66186C177501453CD3FE3582073DD86F0442DF0A8E3B0E998FC75FAB18CB9C
2773ABC9DD5B1A5F82FE4CC925E8C00BB3E642A64685456B6BAF629AB8085A03
1F0EB43F0E12C2EE8285E41F5E39371EE40A46E231B28F7A572D60295D216F39
ACF4002EF52173A54E93A42E837EF4BF0BCB5B70EE1987D6739F21631E0B79DE
3C9FC419BEE7F28684F2C4E0FC0D4D59A75FE8DFEEC83F9B0EA2A6AA2D587151
9431A85D597A49335CC40D386571CB0390DEBA757BEA45FA3171095052B839F7
A2A9E41AB50ABFBFCB709F07541F69F3F9A35EDE6D609086E564AE478555769E
C2C44150D849A0C7D966B2EE653CDBD799DC86890FB34B80E5A62A8232106093
EA39091D5837B194F08BBC60B5DB9D19965C742945873049981541B5BFAF9223
BFFC63A514AF6BF4AE2B867B9CF1B3A17E4B8EF16B05AD9E0E1972EBF20BA99B
973D833C013530F607011BBF21045DC09C95C9AE4B4EF735A5414D985CC92F2C
CF4CFBA53477316D1F4EA0CBA36C3B9A4D6E63EFF4EA7B75EDF72CCD4BB1D84D
1BE81AE2EE6C98ED66DFD11211DE4271273CF39110B40FEEF6B961452F14E75A
0853459138C37E00D26A712B9C188B31A371A521FD1C9FDD48E3DAEFF4E3760A
8B0E1D0641C7768CB7980E1E63618AA677D9F690EA169F7FE41F0F171BBEC63B
9AC6BEA653498A071D4F1397B4ABFD8DF02DF71286A13BB0D267B35592E73C61
A2DC1F13CD09369054DC56953B71EC94BF041792494691B655CB9C88996A27E4
435BD8974EA80A303950EF8E8D07AD70A62B8B43DD7108277F1FB9E55CBA5E62
F16CA4AAD970585C6E338F5F95A8391B6AEA1803EAC4AB9F7D674E7089B4D571
15306585F54044A0294A75A62AA83295F8DC9FF20536F140D86E13DE31F3C8D0
A1D3F3212BD35164A1D77AE9CD36B336020592D5607BFC6008F2EDFC9D74BD2E
D07CB68B2B95FBBDFC79C06E69FC7987E3727EE06985E1559ADF6B988263F9DB
7B467C0440CF4F07022E542342964D3E11D27D1060CE01220662CB6FC9D8585F
E53E837723E7EC88DC8E784F27F5B212999D21D23C50687F8B8D343063014F7C
F085C8B0DDF9A3963D0B1161934B23A5C5C87D078B83B7B50E5204E612A84E61
DA20F004DDB1EA743DEAB3CEAC2B8E5D150CB3584CB2DDC5796F17B54A16ACA1
30DB57AE1F0470E60207001B8C41F6C9528B9FF55B57B3DDF7AD0A09DDE3FB4F
9CD60DE0C8E3ABFF56635C7BB7439E553E820F5556755F0AC2899A8420E80AF4
3800F3390D2F8EE7C984F02B00BFC32CA86533084ADC2013BFF04704DB16421C
5B976AF7FBCB4457A04BCEA2F724D913490B87259BA0D0151DCB3F2CFD871220
892D97DA2F0E5BB1BDD5ABD40D988B018FD36D0A0992123A276F3483AB90D7EB
79A87E6467D40C41F697A1C6CE5D16A2FA826A806C0D781DB6A0FC125B78E607
99E31548FC7703AD5E1BFE6AC2F8D5857311A80ED350820EF03EB99A23AE9793
8041F7541CCD2694F09E85AA7489097EC382B0687A8D701D86BDA16B44FAC0BE
FD825432574C9A5B66DAAD0A940CF9A96365BAA62E20BDF2C249D0492D0BFC40
D8DF6B9D4B8299B2399045A5841102DA3CDB78AED53F98161464DC5DFD2B460B
990992E4584D0670E527BC95332D13B3980549FA02073BC3CD7F144E9FD272CE
6A23BADEFC0FC80B646A2FC08C8499E7433AB4F7CDE57AA7490C0803B59CCB38
B77BBF891B585E940A10EF9A7C4E085759F390036755C4BFE9741885F58E4FDD
4CE2E2EB14C9C997BE5651DE0F5DDFEE25BB2DA3ACE7B900150A7374920D6F63
770EEE3797CF695BDD25F3F8A5335C37216FBFCB7BE1255583782E114CC9320D
B89681A5A80819BA929CCAC4B35B07FCF178AB66F8D96D779B654150041D3795
04D771158D1D3283036AE7B8E01100944BD59BB75A46BDF6734EC628DD808955
0D41B177BFFBD9B94C2C008FF74A20138BEB2D0B28D3FD719276D25B1F67A774
D6DE23B4AE10F280D6BF716B49F91E1C73DA70945B9BCC22483B0FCE601FBC09
A84A73DB8EA36A61BB73ADE94DFF249763950EC9D472E364624F6F7CAD4242AE
6C63D047AAC8EF82134EC41A4FA2751C40846188611E976891A2BDFC66EE858D
35E16C0AB60A9ABEC6F1FF955C9F58B2EE9650552271020C3948171E0DE7C86D
12C9F01E971A6FC020C061322B72D59C546F4AC7FCA094F32499C0F8AA33D2C7
D00283872898E844D514E123FDBBD49FE36AA88DF9E59107C890EF9213E7449F
D300F6111A501180C56DF1515BE3D4E92DD7B6FC0229068FC2081EF93FFD0E0C
654D9E97727845A164F877396BA83809446DD699668F9CB76B73BB60003C1376
C47B399F2136B6E9A563BB6CF6EE049BC37C9F7A6FFA1AC28B04BF3DAC8F2DD4
026EFD3B57466FF5CC7D4ADE1CD2E9CB17614D0A930928C8B79C3A3C57BECA6E
289E8BB4BE24DEFEE5CEB9A8CCD78C0AA830E7BE202C1CE8EB7069C9E67E96EA
825EBBA92EC6210B4F14BE44CC81B3445B02E27AC2A2FE3A14C5CA57DB545BA4
917E063AF9CCD4063B8984C3889F9DDAAA2086E7D34294FDC9E12E45F6931C49
EC99D5D48F0EC6A4E93F0E01627BD1103036B695EDB12D5762D8075F69A14582
9866C11A178311FA4DC6B27A1A5982211AAABBA90479824E3FE167EFC7F9128A
17CD447047E6DBADB7AE9A7B205B88CDCE5BDE7A2C9A124900DD8F1732791A32
ED4820FB93C3BC235DE87B1FF6DBD93F01F4F3989D8141816C3173CD7D5B5D62
A97BCD03931315E78D198FB6DD459C417EEDEB173B2F166FDA22E38A447F7408
BD9DC974B5230365BC0F8284D4124E5A355BB7F9168E861CDBFEE4C8D48BC302
2C50FFCE40AFD163F8B4B5199B610EB41E963A2DFBF8A7CFA315D2A1B0FA5117
C21FB2DE99DD2C181C7E35947A0E57EA057A9973974AA074BF8FEAC4F0A08786
EA6512A0AC1CC00800832AFE4B841DD77470628210D6C09238374D5BC908EF97
0D0E8D3721CE0C69502AE900770A202E74519F043C7CD8FA2E6C749D88789C52
F788D31C1E93F5F396F67B8ACF439CABFEEACA48453F06EFE4217D2B46589A60
E0DCCF6D71323A978165FE475DC2E42AF88FA2A7B54BF0E68323C210385FD72F
DE491C9FC16C5F0E3DA61AE13BE61828CC3175A31BC100D80367A7462EFA11B1
31B70FD5509D40C202ACF1153F606E7CF711AA5345C3B278190283BCA557CDB6
667F5046B5C471BA380EEC014CEBC4FB75DCE676DAC7827316D2FF32042ADB92
6EC8CC9BFFE37D3A7B41CACEDF26EBAAD6D5E0811240CB327A5DD44AB6944920
047DB7EF79B9912D759A9D582ECC1519AE9A23D52A6EB95161B324F7AEAEAED3
D3D8FE7A74E85A68531FFB57B3DF725DA364DBF1D165C4D4E6B00BF84FBE6428
597412531988959AC07AEAE0F6DE8434EF087320F134579D9E18D1E0A10A15B7
524592D4D6813FA53700775B2F6459EDB9D667FC6287BC9F306B44A7BDD35F63
7D616C7003024B08E526DA0ABD7E58F62CB64109E9856CFC5D2A62DA183B416F
FCAF99CD02DFB0FC278B529C5B6D43B55A3F3ACADBA99E863FFEC15DB13D437C
2923BF8C7EC3D3B49DCC3434ED28557339FEFF5716F817647C9F9146DE60BFCF
DDB0C8630F6572393B8F51227D876CFA92E57CF66198F1F7EAAEDDE53F7627C5
EB24D7FB1AC128604DC225404F3CF9A74091CEA8B1E529DD5575C2362EA9F95E
B9E16E2D7EE23A79C65F1EDC5CC0D8A503C01A1425D5A6527C31995FCD15B985
BB2D00197AEE3C0F83A50E05A8E6A0F9459F88728874706381E06CAB4FEF345D
361E6BFEB0F470CFAD0BAE965DAE012540D9DF5BDE9F4F5D02D46BE2C6DAED37
05DFE13EB7E3AF75001AE8C8203622C7290C3CDAB191DF57AE3A4492672A3B30
BB7DFC8DF26DA8F837930E9FB252D7C7806F1AA59FE77425FE62C24ACF71C4D1
87DE8A6A3C971A03327FEC53F1F43913282D7DD783091B4993AD4B09E331D14A
662DA0E2251998CD0CFB5C4FC70C22568949E624D8FE780D65910243575ACA23
6F24FD61F346CAD55B0BEF461C749ACD6B2E995F93025102C80F9ABDAD878915
286731DE01010A7C89305D2AE590C7DE36CAD6DBFECEDFEF976AE5071223CA6D
67732F8CBF9EAE16CD83AA19B621749E3F10736FACA7F6BB091438BA2C25389A
4A4289945B806CC14F198DBA7A880E32BE9189E6DE0BEC9F0D07A47A715C1C33
C5C566603A235FDAAEFC70EA6D36AE941E3291793B66598F7719F2E9BEA662B5
BCED70A87CD0D4798B97D61B2BB33D740F533AFB8D80C54177E7D853363B2467
59EC16209E82ACF3ABCEE5B559AA42CBBA8CDE9FF407C8A7E5FE9FBB016C4467
B82C1986E948333E1D0B5BDEC27230D2966673055FCCC3F5D98ECD3DCC13EBA3
049418E59C5418E748D53C18CA4063BCC8EE90AC1756B426A936BAED123E6281
B932FDFEBB8A80ABD3372BF7B61D458BBC8CB550C551B9C7587D2C48AA89062A
F2E4690B41B9343E725A87130999865C58F3455FA101D6EC4A0F58B4662E40A0
02F965AF59870F969EB6B887FDEBC9069C29AF8A992E780005D8B675B261FCE9
455E95B57C84214E9F17E2548D973DBF614C94A4582856BA21289BF1E02E0748
6E90C895AAEDEDF87704921CCFA16F0DCD60F522EE900DAB2DA1E77AF6E525B3
13128359FB837C6159BDD34959515D5669D0F27E87B2186D931D624120B81967
E58ABF53E4B9BD269418B1FAEF148615D78265BF0E0150053C6992BF5E67BF88
0AB2CBFB7909B93FBE74BEE6955D3E4CF97CCEB0DA2442304FF353060D432603
4A5CD9EC8F710801CA5AED88EAE8608354A27DA79FD0F96B3E2A4462F7E6BC88
E28B653076CA53A9D73D5FB903C296E7B8D0B1D69402DB2E7732E7FE06C896F1
D8880CC2915A0EE67F64791C7EBF6F454E4AE91268CEEF58C3CD492EE4DA23E9
BE716523C67BD10AE64DBCCA541BC7E69DD5C47D4404FC97731F1B39A4924822
B5265773A5E86A17A41BEABF04713BB63FB1C3717A3F9E507D6D8C32671862B2
6EEB19E42DAC2C2A9E711EE272D387A03A4C1711DB1CE069A6372A3C4235274C
47E121DC3A8BF80246F4CC89C0B133ED8119F306CC5F2623BFDAF5600168775D
F398747885EDF454F39D7AD4B5AE946C7E207BBDDE96E9AF8648F5647C4B7D10
A12937EA59229885DE2FF1F9AAE488047D4947F8501B061371500AC7FA2630BE
CCA0318D24D6F13A33FE49FED460A102B225FF51C3CAD527A8BB4535C5BDDEB0
4079726CA43FCABE49351B4A5FED8652659E7FEA9789840A5620C8DD4F4FAEAD
DF737EBFAA0B9D3094DA6FFA490EDBEEC662169655F6D78125EE54996C17CCDF
B4A363C64AADBB2CACE246ABBF5F0F768ECD69A87FB69444911B4B4D6C2C0D89
8787A43C1B428B8C897043D5331E935F94F2A58AA9394588881EF3502D23206F
33F3F59AB471CF2A7D3ABB64199B13F41E57913435C56B7FC65CCDB5FB0D4143
818B992AA1F74850D4542982F94D688139DBF47C7AD4138EBABF491A61ADF481
10905B8EDBCDE9CFD2BC34DF6068C72D3FE008DF3217A9171EF64D57F39DA7E5
CA0A68D62BF6FC705468B2FA3FAF841AD6A54680825267D023FC3381A9A2CD89
BAB9FD9DA8676B5C1F4444F8DE79826B3F94CE2A20F23C8C0EED25012C5160BF
D7AD66A2DE7D9CAFBA0562AB6D2FC9ED5E2D516A4350D296BC197E9B6C1B2706
DC46F7FC1CEDB26AC9EB6F7548E63D6E83F77B0929D99246B2B211292C7A60AA
FA4E615C2367341815394F0360220C8796496A9F6A3A2FE7FA1826E5DAC5C0D5
A7CB777899F4CCAA79A6F9939A298FB39CD6BB24A6903F8AD3E1BBEE7593CB9D
CF4060DB7F42F339AB93A7432453B6534ABF47C1AB3E90B348F1657F327D698A
8A222DE58623B2BD29785AEE55D7062DD9A9AF99461B1F89B3CCB0149CE1A34A
AF79410A422B9831F443C48DD0E5B0B2C42BBE5CE658612C14381B3FB7E42E84
1B123CBBBA6C33C080FC5F82AB6464E161D3E736F84FD94C409BBBDF2C411819
3AA8C582C8329607108080263EB92C9DF6DAEBA5C2E0F1F0CC1CB0A36DFE6CC6
84A0EDA74B41A51B8B3930FD5F8CC854F77FCADE8149571FEFBC840BD375490C
A2C8F3A4868D87871AA4DC5D3640AF3949DFDE4BFF9AA2FBD478F5D8ED5009FB
809985FBD9A3E99D1D6124A3B4DF005EC9562E1FB2D410C3641A1DC59A816C93
3FF531954FEB043B7BC1D982E7CAA79328DE04F0F7A33D4CD50F18ED870B692C
D097005D1500BF926CBB9146855D0C7C26303F06A1983104FD0583F6B3B0E85E
66C882C0AAB2405B18DF8CEE4B9E59CE2420515A0042EF7592DEE52AD8E732E3
8AB2B0CF3AB3029E31BA333586646EEAD71A161A6BC83CB7D22D504C13E3B3CE
C8F2FA3948635339B12388263213846A61C260DEBECC1EF70DD55434CC97FE07
7C20E0AC73D46A704D6B2816D020DE045114B695E34B57F8B0A1D6DC764F4274
89865E03C0C0D6DE7B1539DDCA901F57E05BA8B4D829DF4684CB74785537AE13
3661B848830E6987404A4ABBB490D44EE8874E54DE38EFC0AE9EA08BF104B7B5
6C1467D1A59C6C9E2844A8E06BAE75E2B32F3A80AC939951D59379A0F7EBFDA5
F8F308407C4A4B362143F510C94C26647858F142DD380FC58764806FEC35AAA4
100ECC05416ECE2F061CFDBC321288F5EE8E2E5D4D979C3C840C5436938CD797
5BAB77F018A74FE33B37FDF81BFF234B3500BBD814752D0743083663BE5992DA
15B29CA142C73BA10292D0754E475343AEE6CB5F989871CCE60042E3E8AE2DDB
34FB454F1FD1B6F0E3C7ADC327457BAE54CDA11B7C316065BB27BBF90F024922
CD09E76AA9AAF5F82272BE6482579AABC918FB4CFAB082F33CA61BC587A5132C
A4E82F35F9DF4D9B94F6BF6D684FD9084AC279F5EBCA452889175FC90DDD5DCA
89125BC27FB4A991C45634B477D3BB3732E514A5610B1337D7AD3D3487FFA46B
54D3305A460F868CD85C7DD45422B85C36411BAB3D72DC17FA6DA648A6E95486
02F403A0FD7DCC0F4E58304AAC2D9AD27F8A67E78A45603FBFF73010E7625254
A0EB74F63C285E2D52D69BE080DAF09199F13A726E93DCBB3045733D43880F4D
01B602F7E51395ED67AD441581D7A43EC3324CFF3DAB7E1B12E4009498DB2CFC
A285E3A8683AAED685780F3F598592A77C03278F02394F4611CEA11A59B78B90
C463CFDA09AE6E4E5ABF7653D4E191CA3B5F623A44BD83E2EC4B0191FC5A0371
FAF14E7D7542B1B42D692328847E728A6A2BCFBB094848B0FBBC592094E92386
152750B09EB8BD9AC246A164E01F163796FFCBACDA22C239ACEDFE7D9CF24A26
84FBE4E08CED552C09CDB80ADBAB2BFB7CEEDEC9D2F8B02F89B429212C584FB9
461A52DAB14D19CCC99584E93D19A5833FA589993F6D8F839808711285E2ED55
C26F1727A525F170429ECDA186071464EE07EE9CA8CA2026F58D771229C2A3A4
91455426500E410A70717A4A872EAA06E9F7541E748C473676A396158E522ED9
E42E6F3ED3A26B7E8BAA8EDB383DDC0BC6740305C4011487AE0A2CFD33813965
D88BC90326B7429F0143562FF789ADB4AF180671B6EFF4B4AEEA7CC556F58459
9D0DAFD909084927E0DA3DB454B1BED8CD3EC75326188E24F3C78E7EF2198C00
5568E9DB85B2A0D87AA2DC26393F4ED972AACBF8AE866C0504DCAE2EA0AF63D4
5D80F3CB8FED8C27B1E7BED385BA0DCD0C6ACE9FE03A28780D384ECC947527D8
57FD477BA50486F6864CB7AB263AD032E7DABB7B63CB86D6663189688C6E5B12
3733610842EDB08EB10B1FB50C503E5130983C68A4241BEE082E102F98D7DF44
22910465649F842BB64AA48C82DAA0AE14C2358DEA615BF622CBFC2D1CEF2289
8F1639376A8639AF03913162B9C583897864E59CE6F46F213B0EA52186A3BBA2
B9310742DC47A084620AFE85289172711778FD93589EDDF95057F1A668F7137A
0C348F450B13EF02D7456EDA81C34E62D5E268088D47B520976CFC21F0292562
433C8778C8C392A02C263614D142436C0FF38F25E5632C665DECCF71B8A44CCB
06B78D27D6B4B3636398EFB29C5A79B7A7D6C45C305D4E5E329E91344E2B3EB7
5F11D7476E23478AD56C865CF48739976AB5AC152FA12A65F3B06D603E8D0906
1E486AF75A8C1BCEA9D210579587A56AC653F933D6CEFD146C84A94AA7AAE84A
6D87A738C340CED2C31FD08731E0A3A099F8070976D75485DC417C9D8AFE92AA
7EB62E988B0D3CE71048399787217BC56AA3524C88D6AC9CBD937D09C5B71623
7FF745E42FFE853B75C071DD47CBDB273AA380990F4230DDDD0AEB3AA5CB28BC
11C69A884657E36271363919B140CD6DB9E0CEBF2FFF275D1F3607DD9ED193AD
F2C24BA546888941E327FA80259F623646D8005ABF69620C1D5FE90A00178003
7F360422F59F50625FAE9DD08A8BB3C39D282B768D4B7E8535ED02349884DE2E
55FFF208D6D731C47D6DC12AC979F5CFB9371D3FF527C5B59A59FE5C3360A0C2
2B5168F3B5F4FCFB4ED010744C0D753396941A903A90B2FE37CAB297762FB5C4
5277393235C450451C550EEC63C0A499392C72D0A2FA523625CDD31086FEE081
9C352D78FFDB12824857DE02F4E2422976C62CAF5D87C2B56906526C93C55879
A8EA0224911F0728FB73B1C2DF58F86C8848DED6E8EC6A58365D7A62C2FDBD0B
7FB6D86553343EFF42BB294383F2C1D2C690BE08E129244B19CE0529296940CA
E8F8712E1BEC7272951D9CC4ECBF2DC74F0687351BEFEAE26D641D49B7A3490F
09BF16B8D175A3CD4ED06705F1094AFB2137E5924D4252E2999D144D0F736456
93E60EEC78109393D208D61C1A444BDF16C1BBBBCA2E7B659B219EBF9FD754E4
27E44F32E934880D8826F736A3EB452FC1EBA1B68956894B318FD75D8DC340C6
512F527FEC90A076CE203B9DBAED3FAE907B21CB0C06F30C7FF2B337B41292AE
8861FDBFE9165F8143AA0FC9C748D21F86936BD60B16C94CF8AC32D6CDB9738A
EB1EDCE68685E7A17290A3A62D330AAB6481AE291904E2C4F58C5F73FA53F9C8
BA05AFE5C1F2CE95D0A2D87768B7E589BD7979E1B6E17D1B22A924EB1F8012BA
E7256C9F4B2C7573859EAC6ECE9C32648DBAA7E33D7715B7EB90A3E47EB6C10B
ABC2904B1C075925F05350E868F6FE445290BFED3AD9228EEC4CA4F938EC494D
0A2A3ED6EF3FD15AF073A91A433CB5EB443EC7E4474E1925904FBAEDD2CD1045
404745E5F4874E2ABC86F4973037F22F853EEC0EE8608B121BB6066121A8DCB3
8F585395CE262A86117786CD6238DB60D4A219AFE705EA1F092665BB4DE936CC
3A4BF156AB49128DF827D32CCCB83B9AB73586D5923BF0CA629B2964DCC6A02C
53C13BC134F7100C85AEA80D2E5586E9415C4E9B0C2442AC2BD190F65BA8AEA5
D8568AFD981EF74AE2276008542A12B9E1D0B0B957FCC5C1131652800830CE56
CA9C61CA8247BBAA8EFF3F3F28E0F60E69D7A730DD14F4C2E4418B77C935DF2C
A43737A23FE525FBFF96CADC9E5DFA616E81E700A6706ED84D1F2C293D0B3809
B919BCADEFBC91A6B244D5976F67296B4F102951B161441D769CEA4C37835CF0
54CC662956608E15762C001FDEE5C0E56972C0CB5F0F5A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFB8DD9B92CCD508A09171BC12C8ACA32FECEB20
7CAA1C2C81ED075E3EA7E712D95FC612CF97F3402658E90924C75CA278243C52
D4E02E8224F197E555143D563819EB1ADD2248C18E02E18FE3DCF624E37ED993
3C7DAB05959E694040B7EF5F92D80AEAC2CF58EC01BD61D7CB962C4EA678C5C0
62593DE423E11AF90918CFC6E1E8F9DA428296FF0C92CA794AFBE2067C46264E
EEB0AB0FBF2EDA1A8420EF654A1D4E0A295D1DFECBE39D9FF712C85C748311C9
CB8695716F72FD4F80E77DFD7E01E9FB8CB1F2B5971940EE4E7B14727B086F27
E43E6E3EA6EF0DE68E17C9C0F050085274ADB56BAAF193211E48D1B82FE44A59
2A9F5FB13EACEB54AA027C1B87380F9EEF9D500DC327702B132335FF288ADF62
578F30CDCCCF826E4C4CB57B5D5B537BD2FF89086BD0C4CAE557ED66306DF3F5
BA9D1007C869E8594D4138161162682A719FFCB1A982A5CE8765E2681E64B8D8
4A7CD7504E58CB81D0EF03A3EEA97D43741F54987AD65FA54A1BD682F7EFED16
D35D034F1AA5CD4EB628353F1FFEBD0CEB905F10C183245F1B733C17D3B854D5
3BA686CF4088BC6C0FADF9A6C05BE3499567E930F710682B8954108AB7B126D8
255F1A0F1BD08158F94077D191F62DD73838E0CDBC99204AA6AD1309BC5668A2
A524C6D1C68B4E416B248A6FE29A67DCF4E1CBFCE603260A277AEB7F75627333
3E84F341637A1BDB292EADD055C97A12CF0B915E39263AA9F03B21C1F45C87C2
CCB12B59066B6DA2CA24E020A0FDDCC0498D74594AE3ACB0EB4CE7727EA32222
07E864C7F39773638E3BD2FDDA11C79177AD0A23CFB7F631E00CC979AD410F81
3119C0543E091E4820C12FE47E3154789E02FE363C319139350F014FE8A785A3
F66FFAB8D8C9E7E26E49BE5FE558491D1A57B150A5B386F7ECCC0EE8E31695A3
36BCC7BB9F7FB26DA3444238CC33E2791CABC1DCD0BFC3372E1DE72D93AFD1C8
E2635A5E428AB33E24E81346D13A9377EBEFC6206D372675CF43235722B50C78
8C4A02867C68BD8E5FE9A45653BBAF2A5DCA560DB5BEE7054FB8B0A13AB598BB
C481A3240450D1453A1CC1054A06B962B7E28A73BE0B2713DFD32DEABA293EEE
AAA8C0409564BB1ECD1249588C18D01D8AD4E0F0032FD811ADF35B869BB210E4
4A57178893AF229268DC5375F01AB676E600823FEC28C30D2208A868EC0D01B1
4845736F9DEE02D06634547729442ECDC50C90989CC881C3D8E85B76FBB10040
F0DADEE5ACBDBB43307A30FDEEE5F77E621B130E4B824CE23100BC08DC65BDA3
46307E3BD497D7F1E2F51B557FEB6AA32E84F5E55E5C12A81B73F370431F3842
A1B0CAFD4ECE7F0DC8E2A6D644CA8735A4E96445BA9CEBB627718F858DC051E4
3963ACD7E7868CAA4488EE815D40E28CA54C83221810546F0009F98531353C9A
8EBFE7DB9C9A120C2A4E2FED0E63F90B8DF65026707BD39B489E54425A5ED877
73C6B3A8ABC8ABB13ECC3B249F1878A8F76D59596C63BCB936321589906AB242
14F3C046A1F210FE287A8192CBA7D2A89BBE7A7B2DB6B1E19224F04262D6403E
3B41787E1449587E28093E66A9837BB94195E3A4A5C17DE6823755F59BB9E3A0
52F69C7808FB657D9270933D8B167D2575CF146336BB1C76735BE5CAAAEDBE98
C69F89E7E71474CFC7515F73F86727442EC24D46F92C99498946CAB6DED8F5DF
0540063DEC2EF3F83AAAA3F4F68A8E892C3D0529A466C6A310A6101223949B01
79CF7DE6B550657C91BF3116EE7F85B0178B3227810D99B48361133B54A6DFDC
872745DD45766283944D7293D6FB1B42BCDDF2F241AB267897BFABA39D0F2725
E0DBA7C8CE305DE7C1B59DC2184872FB99578B809358856E4E99B28E138E2DB5
85CDCCFBF2B46F01012CC94E2FB30C1E4411918E892630F2AD07EFF1919E9BA9
0194E24A69649F0DFD0046D2EED7AF90313E70594EB5C354023BFA07912408F1
72E39AFA29111A71BCFDDA20BCD6006B0309EF09261B7AE1C67BDE0D385104C7
C0730BEF94DF3D9BB2161C7346FAB11805152716480C0984BA13A8433ADBD629
229C446AF84A690F56A09A84EBB1CED5515C36F2798A89689BED966ADC9AC306
D01B6E24DBB2CFFBEF205FC921305B45B1B8FFDE2A09CF6301F485C8B7DC2E56
82DCE3042DC9767C407C0DB4D0FD1A4881A34FA0EEE7810D69F2428045CD609E
23CE37791362950FB435D1899A47E6E69EDB17BC08CA1B092D4F20BE1AA6BC4A
9DEAAB1B74EEB7B908245CDDB7A093C1AA307DECFFE53A1FE54984DB1360E320
862F2CA6E0258507C6D3DC1DB94102FB88F631211557D3A4F79A8E5FDE69B1F8
4E9FB2EDBFB4B8853524F58D4E1EB98EEBEF1B6C2D330B1CFC47ADE896255DE1
FFA8CC1A09D26342E89B9A39149E124C564C5251F613393060892D5A51B78BEB
3E44B78C50316C61B6FE484CE582EB7FBDC53D9427FE267051934E366F7C7B2C
ABD2C65921B5520C6F70C1B6E7AF8E11BA4798C1DD2EB7D4F962028061B71099
8E5EAE433D8A82CFB15547B339AF376E9341FEB9433AF21E8D84C50F75043419
1ECF16684180B65D9CD4C8CDC57A0BBC0598B3AB03652A6AA459894E119B5356
CED765F73F6935478D5133B9E761430A39CAB0DC109B02A80626A9ACD7856ECE
4D6569F5D1D918A30005C31F177816336B74AF8B9931BEC0CAC75380C714BFB1
BC100B05D19D7BCFB18CDAFB0310935E6C7EAC6B9A8134C4E8F4969C9268F7A2
C306146CEC5039310EF1F4ACEA1A40014BA27BD58490D24B7885E4084932266C
621A42B8A3139CE953DFA9687BC439A31644BF123DA78DD615C4287ED7DD43B6
79CAF0EB2F9F428C431683A41C2C61A429E3DC0D87D76AB6294CF8CC9918A6A4
6873A1769ACCF25B59CB4365AC451FE1D956E1254970C706438805E25284C7CA
AE679F2B7C58BE9909CBFCD273EF5617183CFA64757627D2D567877FDDED97FD
7C9E73DE4D6D4ED370EFAAB4E52F30E55B902ACC35DE87E70DE8EDFE7D803CB9
B4F8D58998C2ED6B93CF62F8E991B754899CE46B900DC93C5A58EADB30BCFFA3
A71EF23D13FDAFE72642854A3340E64896CC6DEA0F7E3AF4C39EE4E68AA31889
A372F02266FE65ABCDAA308258FCDDD13DCBB18E462B56F956B94CE97E870122
A0A46CCFD6B4158BE06C768C73F0377CE3F21E030748189C553B9F62C83765B0
149330C96EC3496F9F2F9B289307D7E0C33BCB7023200FC3221F12B5FDE01011
87BBF9960E56CAA899438C90156BBF2B14596F131B71830D84172E7CD7C05B25
85A53C7CB0DA5729FD6CA218A1CB03FCB945FC24376A45F2DE0C21378769921A
72E46589CC08EA87EECFDF36B819B07306C448777163A723A9E71F504DA5D447
AFE8CFDBD88089FA4802F449B477BE528C3667F06EC5479B0824B87C47EEAF1A
0A23941B8257A2A5EC3F63FD62DD09890F4DF33AA1E70376A9CE8E4B6C4211CB
FCF9709AA29144F3A40001AB98BE816619AC543753969AC5B540ED39E51F5869
98342686761A7C070EA75140331D7A0DD5731F0E395A6CB0412028C2FABE2E9D
C3B57F412A5CC05FA7599948E6B8B50BCF16EF9825F6B20090E4D6280C528375
4EBCB42B38B7ED6634AFE0B2C249699E212509817638845B5604BB526053ACC5
C0FF6206B2953C9350E57657B374600DA75FB8D5B00DB7BA78FBFC5B95E167C6
CFB9A2275128DDCE62E56BBF35D257EAE99D627535F8E5ACB4A4D3E1E6D9D24F
9CDD9F80028D37C9CB4067A28D41E879AF98739929DDADA413EE35894A6A5B14
CBB136548C4B00E47FA77732DBEA89E10E98CAED50DEC8AB2536A447F7D46D4C
63A99114EFD23133E2FB8243221A2E8AB1CB892DE716CA34CE544502ABC9526D
F48B0762B57F8AAF2E120D5DCD70D140B498BA43863C45D94E6642DD04CBDC31
0087B2FC75CAD18883113AAADF162B023352069DD1BDEF229E16DE8D008A4CCC
BC317B47BE42354627EC77B91564A034FF2F3B60508154B08981B62A2E9974E0
E9A46A3AAC7F87B1FD8620A5A695852F2FF71CD16FA34635B526265F1A635254
75398013F04B49F67164F03610FAAC41229306EA37B9DF6E8DEB1C6C2BDEC9E6
EADDEF6E99BC482289181D89CF74F9995B40E5C55FBC81DC7686AE740022F764
C49FE9B49A108931E3CB077A9C53C764DBB47C789C795E97A537F013BC2BC786
BDA32DCD5A856714ACD5D2BB98B011650B2A5D8B881D6854DA373B002BA279C6
0649618BE2D9B1E10DECA9090F66F089E4D7C6D8087016FCB998B95F194BC9B6
E95BA14850E251A4EFF1C66B148E036AFB7FF007F18AAB4CAA2CEDB34F65F327
D58731A241E11468BBA16BA3494A4E80FF16410385FF17A1444B2D1596343B25
64124D648B1E0955CDCCE027BC9F127F79622FEB3A6781181EAD3F02101364EC
FB540C0B2473F20BF05A8315BBC31178398C4DF5CA482F899FBE7654F08D93E0
29994A566CDDC866CD6A1CF5DA076F94B31AE4EDE8237218A12D5E9DEEB9EB26
7CE99EEF40ED1A5A247FA60A89A2EF6AB95CAE1FB119500650FAD0C18B03564E
B61A0D261812A3EDE5BF402542BD215541E3A478F0933EB129EAE44484E084BD
DE7D2CEEF5E54E2CBE14A20F56A27B70B9C7DCBE9300AA2826EF2D6E38C9EE32
60EAFD1C1B7E9CAE9EE810B4C7934D08C44E8A3EDCADDF8FCD6E289C19A7056D
A716700F391FBA6480099E8276173D443884AC0600329C607B7521B1C1C0F575
F4A979FF04F1B3C17864FBC8B92B77DFD068E53CC9111E290624DC39FB79FEFA
C07D2DA7DEC9642694ACAD9C980FC6F26BBC4B98AA0F9624D8678DDD10596E3F
55CAF2F4419B78FF39B929627428C3A6736D8777332C017A9411BF924DE0E40A
24B0E1B797094DDD8EA17A7A281D007F1F6EE3CB17E0FDB167D05506A96F7296
047E208835176F3154E8757A1C21857556EE412F4434E8062A9F9101ADD125A3
2195B8CB98C9B19235FE35E0DB6F1FBF31ABF448C9261B75BF1EB61260DEF86E
BD69F26D77A20B25BE10094D4C196E26034F2577471EF7CDEFD087BAFFC6C93A
F8FE338E70387B4F1BA2119F24E0AC14D6C89D60DBE2E17850FEEDA72C8A882C
F268AA853D036C7633EF1DA737CF40C5F170EDDCB3B5518E28C971EBFB43D842
99D336736B15B05591122AE51D1486E1F2FA31E9C9379F2B3440AEB83539438B
B83563DD61FA39B66B4DDCE39F3E590823590CD7C75BBE8B58EDC2F2ECB1E684
00C6706D29DF0BCA1B5C649CF209DAFA7619F27D165264869A4D5EC574FFF640
76FD6BE210178957E86D8B7303BF3EBF660879783E563E5FD42AFA2E2C523957
8183B066D5A65BAE4AB038087E40257C1FE6F484941D7387A2F92A69CAD3FFA9
AE559D3043D7128482D9ED343F64C6CAC65D8218E75ECDA7292A0F2FBB4A60FC
7025B92E55DD5D5897F13EDBB3356F9E2B9DE1FE09288B3217E226202117CFBE
3DE2C6DBFB0BB25BB13A128CECEF9D4D51001EF6E00C9CBA158724AC4352EBBD
4085CC2897C588A09FDB14647F570BBEE55DC7F2AED102A1134FD48A8C8480D9
137F359E6287C5369650A06422FB0B3B29ACF32F3DDCB4DF8B5AC385B0E99329
08C1050CB6DB39BB10C1F4D149305E6D442E7D8B58020A01C8A417B670A41F2E
B01A30F2AE8C73D83360E849EC83AABD17E084BFD0A3606D42EFBDAD44BB98A7
440207EC9597D409FBD1E6B2429DCC30846293BF3060E9CAE54A81D21AAF3BFA
BAFE773F095BA4D5A0F9607E25DC3137296CE1D8E2B8FB0DF6B5FB6D5C415495
635BDFF798B08041C566CF1D783EC7B15B4330A37FC9C1BF23CE45EF19471FC7
2472E528053EC041E396333C90480C82F2B80E740D5ACBCB0882F35AE8A3E3B1
FE3903A941EA20902C10B0C3E73DF25106052700653849C02805E1C56026FA71
302E87A45A22ED99B04853D66E5A22B56F79FEF73918B7CBCC65CA7DB3E410DB
1AB7AAF9B483A4DB3B333B158517971542915D70737B3F22C6A831A9821624AD
61DC8A0DE77A1F4BA087E7E54F4602592AEB49D4AEA40B81B7B653D90E146B6A
AA318E165C8353C9CC1F0927D73E21ECE52D9C3EA6DE3CE70352D2ABEC8E3DD4
CCF226A6829DF67E37A242C5E0FDF6AFCEBB0621A8ADE7553CCA3725FB707ED9
526ED054C471B82AA52B6C090D4C6C776B5610954A6E5471F8D8344C07DB8E45
BE34098668A5FB9DB4D49F3FC041809ACDA455C62A76B51D730D8B124BC6B76D
049B17736CD9E28DA73506142B6AA54FDFAC9050332212CD062A6B96FB18552E
DB51B991870A6E579DC68B52DF7F950CE1BDB15548CAD879752198F3A2141F1B
77DCD2B7DC83E662C19DDE6A5207ACEA1E0C78CBAA7A47C5F3D0C745262B88DD
F05E7E3C1682E8E90674B781EF298DBA6CB1758D22EE8A7680B01DAC100D3748
CA1BC047117E5E9AFBA7839CAE44964C974F08DB4C947F074F5B3644BB3F93D7
F96770C73499AC0AFC3E20F0BBDFA01502C9A1C30E9DF357529D99BD156464C5
D64ED5C7BE1C1DB9852E09F62BB22A3A51BEC8BB98DE63D6763E8225E9ACAEE7
9D813C62B96A7CD2247A269F53AC59E3E886BC531628CD9FDA87188135B3D6CE
0F2CC637A8F2EEEA4C05990EB23142620576551DC347BCB2302D5D5FCBBB04D7
7DC4955E84168F9AC6EA2E25C8C38B8A36B337C6925E0CB5BD963CB791E28CB5
4B37655D9DC3BCF1F660E8262CD10AA45C67562303483314B5B71B07C7F8C598
D226227FA8C178C10D90A2F26A639CF016B843ACE6B352A0B859AAEB15A52403
FBD562D284EFBCAF3553CC5A757FA50D53E6AF18AF09A1B9C4792EEAB445547F
698E0DC00CC722B65CBD277C5DF3B4B1275090B71A4D4B3B7961171D67F8F6B2
6EBA8AB37B5C35DB16D8B776255132DE99F3F4B7530A72C49503FC4D5C84291E
0740415B51E89FC1E4887D1912C7FFB218D23A08172BC11116C8028E77D0FE5A
DDEF0931C9EFBA2B76B78F6A90C0E44F8236F55938C3CE5A9EEAA8379EE7D879
D13C3E2D204512584029A7E941946AB7D45710ED4396C6C9816137832A56C48F
C89066B9FF63B80A84B36F75AD6D455B580A4BBE440839A54B385C9E4571C466
AF1C084F04AF31AB83EAEDA618C70F735DF746994341A37D17E8AE636315CE9D
47B1A020296D23FD0A59D6AD28E34849187D767EDE855B520ADFA07DACBEC45B
BF0C25F00DD94C798C8CF098F26C8AF48B458803BB26487C1391BD9A5B51F33D
505FE3ED168109F1F39AC5C3357E48CB38906275AAE8D8CBE9ACD7740ECA4A47
A985E2E16051FA4178F6557DFC8FEF287CB787EFF59E86B4A72A199F16F2C24D
D5A6AD833A4BA6F96FE67FE603F3DE0BC536C9A2A04B73CB2E4EBCF70184C5E1
D9C9E3DF6D0AB7F44E679E8518074632F6BB0639E2AA1DBBF34708FDB8092FE9
343274DA68CD751A72052D4FD983EB8C149E081333B2F0E0A54134F91D7B4ACA
E954658CFEB3FF04F3F9F42C57124BF3FC0BA485E050DF883E4B2767E236BE21
9FEC94EF94D9F2096E76F1C558F40812444C6F0F4DA995C8C03162375AEF5BBD
6BC3B250625E4B5C2B2BF9879F853460339AEFAF4FCC58EA396431BD4F95BD5F
6DA31DDC13D860842BAEC5EB5C217FC685C06C5AE447C991137584534EFDDE0F
7BBB3FAEB89D737F9FDD69B4EDADB476A1E588A8C8499A8917CAB23F00BC124F
D93096D1B365B754E3D03ABC8B3DA3F4F6C2DB54682F72DFB7E665EF36DBD3B8
9455CA9BFE2FE8ED26203A2B353C3C9C7AFCAA09793C8A74DA25396CBC1484DB
565607911498AE56FF61F2AAB48F1B954211AF0A38D6CAB3BCD6697C7E56C29D
62A325714D3FE8C3DC019CC01E8738CCA2596AB05857E4B8F9D6695EF332BD3B
AA9EE551A4B142DDC13600318F45CBE1BB1A6E0CCF1CD79182D3B235B457CA9F
B713822F634A96C5D1923710DB4B98B063FA07A5FFE26234C70FF6EF6CA2A853
FE0F76AB1ED5B97A1060D13911F4AC44FA5358837F7CC6ED863F0FCCE5F79065
D7AF0839F444CFE8AC2F2FF46DB2B95247BD8261F39BA12AD5E50433EF517BD0
FD04C73FBF1058A8907ED43B4C144BDAA3C4E6BE9637FC8BD3E94D6257BE1B7B
FB179A4479EBA92EF2EE4E7B73DD295274E1D416F7AD7338FB3116A3CFEB9E33
8EF0D7B0FA721D7D11990750232AB90B60DEF84924B838AE79C6689275697225
1698C73A825EAF77F8C38CA8468E616771E6C9093D7E3479B0DF3F3160EA2059
B5F7BFD55E90340B4244BADD57DA5902E2C08D00E814009234E2A36EFBD854F8
68BC9301D33D0203F8D1F59EBCE526B06B610DB1B028D29F838A52AEC3BAA982
56BFC6A306ACDD86AEFA6F4F2AFCE55BF27AFC96D93AE476AB15324149043E71
3261671835DDF163EA8D3DA7CB1F0514DEECC225301813E4ECE6D689B0A04229
04F28E6DD3CAF0134F9E19DF8F5ABD86CB0F8CDD3A059F2F3421FF99BCAC2D54
03D67B0DD5ADFC6174D559534155A42F6626A6E7CFC849FBFFBB17679ABA8C34
B1296EAACD7DA7010ADED0D6A83F04F396CE83F0549B1168EB7DA7468011420D
BE034D5AB67817DA21F12130B85DF957C636987F2ED81971E9FC729AFC1E778A
3C062A85C2282BC39C571BD45057FD09085730695ADEFF892B4307BB163A248F
9A2052CB8980119F3F2EFECCCF2C04B55F44FC0D155C1E04055D6F81AE5E20A9
E98ADD7649142C6CC2FCBD09F82ECF0716F5378A8C51C139D72816DA8B61E413
EDA36A71E7B6110CAFAC612E3E67F979E774BA9C7A580D605929D6D790A34084
7DD751CF51F14D89B269A940060FB0B603D3A2A6839C1C36A3CB55707A0663E4
D7346CE1DD000B51AB4A815FECF291D3E8F573EEBB83E6F9DECA82BEB3F58558
67B2B884E4A9A334BC95558E4C1A9D0B93E9A8C0D83CB8354B69357920BEE4A0
4E464B774D6CB4588DE10B3DAF9F7E546F6AFE62D85E8D25FC1A0039346F9156
82672DE85AE82551277388BDC62DE6FD1A3DB14805DB66731CE5CE34765A6E35
825C99CB7AFE5A873340B50AEE34371B1D7C90AFB517178C9DFE59CE8B036E3B
067B364E0F77D36DC299ABF128FE2511732602A5885A6CD283AD3C1C87F360F7
BFF771183B302FF55667390AF2E314BC8E0EF10504B5612395461652E3B2D6B3
BCCE3F5D699B3E2227DEF786D7BBDAA2A35EB13FD17790793B2B4A9E06AFC15B
8B1E7C3534BF816D19A02789F1E1BE623EDD5DAF54733EB1AD965E8A5A3ECEEB
F44790D57FFB857764A8EC459BFF61D9A893DA0177CAB77BB183F54581052B66
D6CB569F8C51F03E409DCE0717779DEA582740E49F088BEAD6E482EB87350926
910860A95DE4100D2A9BA91424DAD1802F2EC862FB85A143D7B299223ED85252
02C31B687F2C19136157C6D83B33313266F1BA8B9E065A0E64509902D75FF0EB
AF919567B7A1CDA5E14FEDA66F60059ACA0ECA3D597FBAD8C7EC31F3C1C46E5A
E79F74B3589EA1C34BC2A4827253F72CEBA7495FFD2989718F2A54E5D0EA1719
ACDE43012A2AAA1F71550220B035B6AE978341404C817414D0579308612AD113
219204CA43994CAA4671A6A97BD8C6807C21360D0C3F7742F47CBC2D74EF214C
0B15C50A9B5A26205F096D63762A9B14F267CE0337485EF58E37EEF30EAB487B
6E7AB230EBC988C382F594B4D4D4B92E6AEC4A9F07841FF93433615B89BA1272
6F5B01CD5715C6432452ECEC048DCD14814E47DC1226F723CE25814E30876470
F16C5E8F87F74CFB89CA99219C25478E0A63F78F3460EDD4F64B4D2A5B3E660A
B83C0CD1BB032CF0DDA97FD7C35218928C48545178CCAA9646C6C89D2FB89665
3CB3AF6C9466BF2240E2A71EBEA84FE2BA8B2BAD7C2F670BD9087F7531490409
D02F3D87BE05852F9C004219582D45949B8C3A7907A725B1DBB3F1A92E0A0456
D103AD819382A9EB1E201AD6F522AF0386A30A2693B607A67E0AEAA7E969E420
86DC576CE06532479E48E7E905FB5E8F9FC3DC5F258FE3C18E7464AFBB0B0757
2E4E438A2F1A4E37E0909724BDD52F4D4B98C4AD8E1A1528BD444DD1B0EFDA76
FCA43DA6DFF11E72D5BAA35CCDDAB44EBBC0C71C3FD43F21DBC6904AEE4B01DF
4F1005122C3B92BB93F4E9CA79A797C3A4F27AA9924D6616FC860CCAA3402216
64068B6E7C7CF2E2432A65BA21DBEB0A83FC660BEB3F1A3357D218276A5D0FA4
EADB3616CBBE98428D5D811FF6FE99AD7ADAD0922C1BEAAAD9B337968A02FCA0
1148C302E8E3AAD1DD61DADD7A1FD82F0C2E744CC3B65AAC7C04E9646515EB8F
EF55DBF964A5C2AA9623B8674C8259A681E27E2C4AE26093689327A256571CE9
457E795AB6B63D78163F227F1385113B9D2A2F0C56DB55B7317231C2B2F371B1
559D8BEB245FFAA7955250F08E8F5B149E8F97D25635B98E9B51FE570826C75E
64296714597A74010F59376FB1AEB72D08E929E1630A7750DE134C6BC13E5AAF
A36ED9F7A8E5D9BECFBE4384E04B0D6FECCB0244DB29A8B801321969CD052FD6
1493FDA211564478C68C592E158DACD4D9005B983760C79C08C12658303A3F51
1EBE5F047EE68288BF3DE1225D981C287FA9BE1B690BA0F8059823BD2AB80BC9
DC78BD724DEDA7987A6DD44876D3FD2B0A21E719D5677DB0E64C7650DF6FDDAF
6038DA9D24DC1978AFD87934AF5BFEAC00EDE5DBDE3D585DB595D29361F8253C
26C37E09B4F87056EDD8C90917EEEB978E51957475B5717AC1BB4AEDD87AD40D
D35C3449819CCC9366AFE79A48A3BCA95DB66E5D14FE0A8C3FFFD51B5492DB49
BF8810AF0BDC54BB1D08740818CF45A63A694C8F8DC44FBA5607435A619684F5
02CF60F00AB8418D0C93AC7EAA9DF793A62FC3E0C50F55A84F67D932B8062860
39E75042D590F24D8FE9F50D35EC6FF30384385CF7C56DB4A483D83D7CDB2BA2
48A366D5E0651560A4BA2299074E853FEFDCE9480F0E55E126E1DE7E700FC3D2
2EC26F9B2761469B0EDEE8BA22F029985C6F5C6E52567706CB28468A9A6AD9F9
B873F1845718FCF81B2A15BF986954219C2577014CE55CEE9E4D5B2FC43C7447
A9605D5D86CC06E8029D4F57A392D2738F846305E8F3AE5B5E2BBC2F802F00B3
A75DE53FEBE1B7B9272A951A047119B40830A39909494E86AEE21694223DF5E4
A7198F31E2B8282BED7392C7BE2B61691EA52F310E0367BD918A9DB9077118A0
42EB52EB7800276E7502D8CB8A68A46889B0D2DAC7CE9E40D84F17B6ACCD8743
2BF87A6B87D3297452BA7EA1CA9EACEC454312EC1DCE09A40896B78BD1D5A73E
157AECB9F3F59C0D736946734C6DF70888665716037A35F574BB08A82641F363
6C82E2BB16E686C92C60EA329075C30D3F97A3214A478933678E9C5B2267C747
BAFD5934D95FBD2640BFF7E94C4C260BFD0FFF9D966F224AA72C22207BCA2267
52B21D21999E31A3DA1E51A3282038BBA7F7FC70987A57EC73E5A6B9508B48DD
49577EF2E015E8D9C0F64025C76E0550BC5D75F5C40F7C7768A67B861D5FC288
7F1635AACF2782022D039A8D49085ACB83B160C466909F562BD4C26A26BEE741
ECC847467858898AD528633F477B739EAAF07A516D86CC678FF6D5A199877F04
81B1BFA806A353E3270334E0880843F700FC1F6065FA37F248AE52A1FBA985A3
1F28AC72D636AE969256DC91944150153C99FBFF35539B5E3CEE76DF3204AEC1
961F654E12385D1EC21D1831C177FAC71FD55A5490C89142F2844CB7E6352B01
A07303DE29B299AF582319835E23408E414CE2299CD46784E6A7AE912C213D0F
380112FEBD737CFF6C1483C4520BA4A4B904A4031C519E155A116C14F576AEF6
6E86BF55B83AB07C8875DE7D96261C02AF3B27E36352F8DC981EF838587C80FD
855F1733F50F636A4C7426584812DA63B5F0B1E400E9F96CC34E7E2C3CCF88A5
17FE6F9C5FB51F8737E0EC21F7CD596D42A88458B89786C2F6D96AD2D415402B
06C2CBB2CB91B45D00DF27E5A47692A30A7D13527A7F3FDF0C07D30FB6436D58
753F6AE969F7207578FA40B7457C36BF9A0846A0C5007E8D72ACF2D32F854BE1
642416405BCCE8D41818D663AFDC9CD1C81B91D658B398D4C89F58C854451014
68001F40721E8DADDCBFCD8BC92D0D26A7DEDA6FE09F7DC39F9F2DE66A66190C
689A73A26C5E0137C208DCF1A7143359F8EE27AB1F3639B4C997B3FE3D863BD1
FE2D56BD513E5BE907EDBB61A117B7F1BDB61AE87F1906CFADE3EFCF095AA187
EE498BC5455C976C40C6E24D239FCFE9CAA763CD150D404C418B12590B6EEA0E
1A19CD139622317F5DFD2EFBD95A7589BAAD70364C33665F90E24D35581DA77D
776D1EEB96F837A3A2F5C501AF422A313B47DCEC7A019705E05AC514331F7A91
B4F74898E2FAD14576F81B1D688DD8F61B1E4450C0C994D2FA8F4EA0B31BC626
75775A139B54949665078867B4A024FC24B16AB6474F370F7F61C7A430AB2303
FC215B5B353C8B1D386CED0321AA1103F5F4CC57F15121A5265A4B316901E61D
0B6A13CBC0EB3B038B56DEB99AC4C60BB469AC2C2CDC1E415746055916E409D0
85688DEBC02A6E020EF5101E41C289C854F7452F28FFBCEDB0E2DEF7ACE89539
7DFAF366B982B1E79ADC6523109832853C664B53C4ECDF81B0004DBE82B86F5B
A36A3B2DE83040B16BFFBBEB73850E2199B8D101C85CBAF179EC5881CEBF7EBC
3B30AC8AEB18B09AC7183771066ECCF26590A7894CA6F91AC2CF4A1420693935
9518C6B25D2C97192E8E1F0AE8D3882052CD47181C522E1F417F28A12064034A
7290750EBC897F11987CE12AC4C09643CB0B9D921B4A6980F6B22FE3C7B7CF63
57CCAE079ED34837B5A08E55E6319BE14383542B9F6500CD29B4760D5B4C77D2
5AE31C4A75BD8C7EB02722DA8D894241446F05FD5DB3815F144E1EFB2D400AD0
25F1AD7295D531787D2C5D4E00A09F155BFDF971B5A4D0AC102C2CE8A28E1A82
794BABD4D8814B53865E03C0C0D6DE7B16FE54A2CD42AEA5FAB6694A64B334CB
750BB6A4D0230ADC13EBBF5AC7571B0778C0E9D25358DA06B20DDF35F409AF15
997127DFFA9ABFF8C858A51C83CCCC572024A6243D6BC209B8D579F6A057A27A
EF243C4B389CCF9382BA5143D6359D3BA2ED407299B5C9E361C08AA256350ECD
82F3B38BD30286E0A8B3E42F7CBEC366E60C18416B956C6377E02A43FDBC78E4
627ED79B16862D939F3A3000659AC050E7001000B2C6848457D632AF0F1DCFFB
6E5F5F586F3A72BC1E72A5F984E7235607EC39E49ECCE85A8E75B8B18D8D9B9D
2227C7649133EC6A81002AE7A4E697857358F58A400549BAA570F95B97AE0BC5
7BB244A80105AEAF034D50D17F2A2913B639720FF4675597704DB7721A0FB87B
BE7530ED3C037A517E7F4D92C7AB7A2B373039EBD068D131C7F302A2F9FB65EC
CCAD4616927004178B7B2CE55A8F36653841CD79FD3514557D69140D6E7E9813
2DE2FD992965837E604A8B2C51E4FA23D38F0387351BEFEAE26D641D49B7A349
0F09BF16B8D179FC176D0735CAD73632F8EE970DC0EBA43D2C700A1D58F29F7E
F1487F54EB23A1CE0AB8CB768EDF04DBF511A3BEB1869F9D5F0086E13F8C3349
8D55FB08ED70950200C50B7E71F8C21BA46E833E6C0DCF6556C1CC6A1C88ED2C
49C1700E8AC2E1EE384B0F6907DA0232BF5153AD600D17DE2777D5CC84335A77
6EC13A25F0B85F0EA2FB526C4A6975188599D789CE1B95719560247100F68FEC
756F7AA110B22AE36B9518755C2FAC2135E89AF71192E8CC3776F553A88FD966
801A249712B98F8F6684D7361A1286AF3E4083CC9E64F40A500F045A27CDFAEF
A66D28B966E7D491B5803E4E32D24FDE0B7C56732957AC35E7CEA2C1AA00C6C7
57576EA0E4C8F0F14614231A275836A622235EADEE4F56A388398B1E3B8EF7D9
F110CEE189C26CAAF7990882F149552ACBF1101C0CC34540AFE14778BB219B59
B3BB99066BCDDBD6A90DADFDC11833C934EC4E446C77F005D897D944251600E7
A6B304DD76E088EF97077EDE26FD1456F4EA599CF4C4B22F65104F6D0D96CEB9
463A89A504AB57C377BB062C02225DCA03E6485C035C6247166107D6C1A4FAF9
AE46BCF6A6475B4197423EF9DE9959CC5CDE05CA9B914F8749608248E964F913
5155384A2C0EF7347C378B111AD792A90E38E1552BA4D6E36C5AD7B56F4A5D0C
F8FE219670A817942121C56A6E64555EBD682B2A587F38458944A0E355F989A6
D77EA1E24367EB14A7D28DAC9A22E2DF55C42D244D9DB91ADAB25927B9001E6A
DAAB86BA6B2B4E28F3C65566E2DF0AB84140F348449C01E851C4736321D6DFCE
20133ADC7C1C76B14667721A220ED3DAAF96F20E29D2F08BB07743827690BF7B
6E45B4F8674A6FA270F14B4944F276428753AFF93D541651CD027D5B23BE4FC8
6005E73CF2508994E2244B800EA15AF8C16B9B8329E91644DB1EACF0C0C781C4
F4C411F79B1D23A87ADA31D3A48C7190B618659D7D0B64A40FC4773482AF8C73
85F80E163B9463C38F611AF4987F7203DDCE93170428CB54EFDA16BCA724284A
ECC3A2904C546D6F2ED297BD3D3A359F69CD6D9D92F5265392E03264AE22D81E
75A04AE68344A9F152859C697E93BC968A3F78C8604FB03A0AF394E19A0E50D8
A50838734E691BC16C50353B2441985488F0E70612603E3F0722046046DC94B5
017D456E865FB2E416C4E91494CB6FB74220158EBAAD27211EB43A348E7E1F83
87334F443CE79BEBA97AE481AD4AB1DC86D8BDB89DADA068799547812B285C06
A7820642245A91B895E018395581C536C3CA5680F622117252D1D72A6D9D057A
413F73C7FEA1993B5020F8574CE0C8B6FCE43E382AA3BBE0CAF9620ED0ECBE98
14BD19184B2C0F3B04B2D3ADE2358EEB27274D7B30DD69E1B2C3CA70F2F79FA2
9543F526BE2A04C6309DD3E47CF1FA44EFBAA756B02E839A6105021CA9B728D2
7C8018BECD829ACB6C3D9129E976A2427E1611066E0025917D1BDB7E9E37AD93
5833B94133FD5C6E5F76EBABE1C94999A54BC260661FD4DCE55956FA246836DD
DB17F52681C14DE689A8C6F2576DB779DA5064C8743100C8DA1A4DF6C8B7B019
CC31279CD27DDA52E1DA4CB052C16E049D2E6645239263D0B6E6419174661478
75F99B35930AAA74A477AFE29B1DAD0E6BD33735C477FB9BBFF2EB908D91B245
11AC525E15EA2EB389640906449D7A0A2979BBD6460F393365098CA717F915EC
27ACD59D2F35DDD0320956D2148DC7C2D7EFE859F41ED2661FFEFE5493FBEA5F
B1D26743416B6D20BA817AB49C66552CF7FEF8C99C29BD310590E1B613AAB89F
20B39C67B801932612BE59E8C4EA4B47A39D9D73EA96FEF2811F36BB337D4E9D
38D33E46E3F79F2BC92D811CC6DAB392EA379D23BED8DCA6132D76C53B78A28B
C434AF4C963E047E7CA794F2C7E845FC08034E600A9A20EDAEE67F65EBA7C2C6
1AFE1C7FD58404CCF6E173D56F8D3D3CCEC06A27BB12FF9B399DB1AF4BA9A570
5502F55E4CCF7160C54F7BC202236296A9052306639F4672E90E3B9DDE5FB364
F7BD728B86D3BBE1E37BC2104E79747402361416DDB4C1AD10889CB7851699BF
FD28D02FF638853114464CF170F3EAFC1572D2E56F2F0F692831903D20979257
C35CA8E92DCD33C7DD73FBAFAD2A3EC3AD445193BEC19A3ADD031C747FA67225
34BA34991AF3F1BF309ADE33C2780E971D3952648BE3ACB42BEC6D5B5DA0CAF1
9B5792A3F832853CB465BB8B66C50948800458912B40D3D1C93BFF447255A99C
CE4EC0E8B418284452650AC9F595D065353A0D84229C2226465DBD27291A7AAD
14E946490AEED2FF28FF48234265B4759B50D24BD711DAC55620DCFDC63493D8
B9EF33711947B65B0C07BB7FE129E074482B62CA26EA8970DCA4F35C139CBABD
4FFCF1E22865F11E640D484E5F57C00B1336A8F61DE8919B9F5A5D3533D903B8
948753E873822FF2E1C8DE9834854FF2955EDC15456438FED1B333FC882FEA17
CE5ECA50FE1EA7907A9A79564DBFFF9566BEA8DFAD1CD13FE4F4BD5FE272043A
59FBC65D5C5FFA73F59AE22BC7A9DE94C8D7D03ADE5D6DC0252CA2E3EFEDE150
916661FEF85C14B05424C0C51BC3E784E53A157C5192135A7055198A66789574
CA9DE18D9CD69BDDB4707F7B2C827516C1A6B49353FB7457EE57EF5908241374
2A4CD1BB78156D5809A689085E5EABA02F60389E94F86AAAF2B7E9E315B157F8
BE66C4AE3F0F649948253EC51D98A20B1C4150AECE1B644EF4F9B15154D3FF75
4428AE15D0D7F8837386F411D0FB2C1CEA22C286B7F058E8F48EBFC36AAD3511
F899A93419E74B4EEADDE0FE0B5D86C9538B9E3260EB814969E2E48645E1F5AC
047A8204F464CF29A60BA4DEAE3FFB984843DAA8E9420BDA882054B68A169C3E
54FF994669E0E0A4CD33F1B71EA3C7C787E612AFFBFDBB75E53941B46165FF34
0CEC0051A4EEF6A495823192E78065FD6060A0F7D8ECB4EBAE515878A31F197F
D069F443133F6271A817B670A41F2EB01A30F2AE8C73D83360E849EC87FE9711
CE71D9034EE8704CED9534746FB31E330BE53B043CBB36B38CE86196A8838829
AA72E7DAB35155314A35C56475A9CC8CC6267A6C8B55512546ACE6437740E677
EE22A40C38BB1F69F691122BFE48E6FE4003BED0D4270A59532C46091584E9CF
7759EF3E2FBBC0EE740CD2622E599A513A5A5F8F39BBA8D08AEB6465A1FB1258
980913106DE9470F037FDD15E6113A181DCB5104577F6303D8AFFF0D1623C49F
3A52C4EDA18B7B6BE5C494D3BE6EED741DC2B9D578DAF502D940AEA08876BE07
1C01DBADD0EBFBC4FF52507C34739FC6E798467FB71DAC5EFFE0D7BBC8114201
E03961015596BFDCD08FBB40B1153AB6626767FF1A48838221A3FAB6E8027A10
873C04482CAC5129F1D102860A54D8E656ECEA88768396EFEC282DC3DA70208D
6884BBFA2D4ADA174645BF47E448B703ADBAAB9F0DF2A0805C9B140D8CEB4474
0442AC4891051195B0B6624F3DB00520FF4657F7D127A24EB69B4ADCA04C25DD
A90364C4462F8DF7B588398EA6C9D82EC5A2888F03FD399BAAA3890E4F95DAA8
3D88BC9BF79C0F2F5A0752A8DC4E816B78B9EE734118C991282B1240D3E46337
C1FB2DB53C79D16B085D8400FFC9324014BE2A1D5CF3A0CC22E480CD066D1019
6C05A0EFD97EE57F50C5A59D1EC020C2C04DFC9F36C8253C4346DBC11A9D851D
A3A8E0D478DFDC64095D442198D9D530581F1C40D357CB03A7FBC28AB07B83B1
800E41C9104A62A074B44B977A4E4A9974A30FD61E80F89DE77282D37856765A
2E3980461481535061B2CC994D41EF6AC07B567DA70D25CD23C25C7D0B103312
B17D16087D670D7F854D5740F601C12493300841AF0F3A67E1E6093BE6DCB400
BDF8C5B29940B3CD12C56C7856D4B0ECD4E415CC9290C79FE24F1ED92BA45398
9EB7CE1FEC9D31E66BB00C09B952A829C5F56AE313967A0B57292667588D0A60
A045AE5775EFA566735F30BF915A60F7C027C153000E975E7513D0156C73F7F1
6C034A24BA4FA16E84B73917E43FF456B5C435C17071907E4739469EFE5675C0
FE6A19FEC026975039D81B532DE5BF0DA704808D7B0878A09BF1DCA721854AB3
AD69C48B50DDF960297D39DF2B708BEF605075EE12D775483CE4272074EBD88C
9DCBDD1E51AC1353F7C1C7A428B07047B80849C0A77BEDA560ECAE3FCD7FF41B
A151F41490796CF35B02E38BFB36CBF2E6D0D7304344C50598DEDE4D3B78F8F3
1A5A92ADECF6E7F3706A4B080C17A5BD89D50D48DAEEF9CBD343B8D23017AF0E
768DEB79F37D84B51D8C3E4B86EFCFF1C0E19F4369AD260BA77F5715A910D79D
C805755E7349D3325CD8FEC4EF92A2D38BE6AD3BF8B879A425CED34F30D932AF
DC2EC726D2DCF41EAAB2F0BAC298957E4172F101A12BC5F2734A2A5384D629C4
9699BE537834825AE7B8A44677488AADC422EC3E8050A97238F88827E75E2F51
339FAD5776CBFCAD859A2F4556AA437BAD036E1931583807EE0A93E84ADB1F8E
9A5F8178D528E7E6BA5DEF6EF5B452A9C57BE4F5BCD80AFC1D747E8A46ED6B31
8E71813F2C217744E987B45DD2384D9223EEFED42EF90D1C0E0A124711CAE6F1
82330FEF033234F6BD0B4AED7624A3A6043E519AD2ECDF2EE4D976BA9A90F152
D68E756C29A24A789A87AD5C58ABB0F94ABDD9C681FE691EF3090EA8853E8A16
02EBA8D23DEBD7FC535C46F77718A6955F9C81401F7217C8071D319558F8B12E
C74AD23D8D3D60FB98D39D0817B607A1FE2265A1FF6BB0F2511C6947BCA4D4E4
C32BF41ED5AB8509D015C37A6F48916CA33E376CBF428BDA96EF1354B62C9927
502590AC4935026215EC675BF3F3132933877B819434E200FFF0DD0E06040215
08FD510804CFA426D5808F63FA1F4464E1DB4923E44B129933E3FE54680F784F
42F625DFE333507C3CF7B820037A908AB9B06BA8BFE3B7659B13AEA47ADA41BB
A4474B7611AA885146779C1C30A634A48F72899426CF9EC7C334FDFB7C979505
52E683E39F8464076AD8A441BFF7B95FF8DB779F5C69A6EC77FD3EEFDC15E662
E4E766AE5F6AD0EDDE655B5E79997CFDEBAC31E26DAB725237AAF4879364060D
FA6C617365E9F141CC3CD485C3858F2EFEB078DDDBD3AECAD5B9383AB4333598
62DCB30BA53A413B5E9943A3E5F157A6E1D45DF424BE6DCFEBD915BEE2AE4770
EBE59975E66A9995FA5B117AE91425C30A0B85C98BEFD525AB5C1D66866465AD
9DFD2D25D7026D8483CADDD894DED3B55882890C62B75E5C6F1B83D4EC3D7789
525377AA53331DCFD0D2F96F251DEE4F0568ADD23CDC8631D139577FDBEF9681
38D2ED1E658A4864D672B5B698A36D26147D9C5BE7F10A47D95FD1156E71F27F
061B2D5701421C8BEA9941E06B32D9D199924E40CF66BB4C006E141302BBCAE7
65F2778C34894E187B72399A6E816F7DDFA1EC3DEC0FDA50ADF09D8FCC00FFBC
F7EAC2D6E2FAF9287268BF1C0FB911F7C941789145A5FC51887E252E8CA46334
0490CA6634BFA6F5B7440193E6B9AFFA3E9950914CB0781D5442DC61E235A209
A3839BB788B1188AA5757A22154C03831CFC91F03AB3F7E02D99809C71C946EB
77ED556CD01675A5D45FC8BAF576CAF35123A7ACDC2F480480B6E53E3B08E110
CFCECCED384662B1CEBCE890D038C519BBC0C2707BEB48FC21BB7E3AB8469630
4079D28D41F52248D706E117DE4CF66C67859F13BE58CC190AE494135DA16F1B
90356C49737097C94BDEB5DD87563AEA655AECECCCFAEE257464E01D77EBAACA
85FB49F5589A34F8599566F61D53D7823C6BB458F2E1ECB61B6A2C9887A5D054
1AC711EC68B03874B816F8896C4BB18C575AADC6F58867633981828AF16FBA84
717637F4F62A76A595F3530B95CDACC4AEC65502486F2DD64D12C7D9BB51DE06
150C7C7A825D08B9A899CB9C4E4BD0B8F9C6B3C6FB075F188A9FF4DACA0C3233
68909178D9A544430CFF9BCFB9246472A47BDB51D3F19D511E2F429E8CEC0122
CABCCDFE781195A1B1A120A62C133DE3866CB703A5B760715238B61A4A3DA509
A09DB7E0E7EB32C428F531FF5E355D691E098D1FB67AEFFF63F4C53E435F8619
E256E1F3191DCA7DDED14C03F5419FB1498EBB9CA680A624C20CE95AA5B5D4FA
8B062C9EEE81FC98ADD44640348F5C7C91A449496A33F2A8E88F26AF2C70DDAF
438047D9DA1E8AF5F4C16E56A0353919F8E90B351B015320794A89E84C34F32B
465E2017EF50D681604A5C1836D42AE44E136202623EFF3B3876C5ACC0D752C1
B0F86BDE60D7C04D7C218132B4D3680276FA7996DB1B6A97E165EADC6CE23BD6
CB9700745AF6C6C4959B419528B283E03EA02F39AFF37556536D462BA88D3889
4C69341DD02AA491637E24F116AA297732D500DA0A6D3A73572D79A8CBE198C9
F63FFD1470AEB4708158A9CA2E2B7D736DB0F32541B8D32B5C20AEBCF90448DC
7E4A3C59ED5565F2096BC24D7F12FC905E2D6DC7F58B627F19006CC52D9E451D
C21450FD3DBB18715AF4C13DB605D70D4F243943EDBC2199FC48F27F9AA276C8
51FA2D948C0424762597BA429ADD5A422D7570CAC22BF7B69C0B81390C67B61C
835FBA29F185C0181148D2DEB9A05796201DD36642B5A8BA107BAEA2B7086DC2
E484876D77AB3C26FB93A62D5DFEA07A0C80C0A828A47BB14A01BDAA236D4BB6
CCE198C17646D4023E62507492813EF0F4CEFE3B4245E981074B8637A89EE47E
AF9B93FD70BF866CE2EB3DD88426FB22EA87B5F38C119934FFA994A42AC59FFF
274B4E1CA95D4E35208026AB554031E8838BBAE715381BF247D955C5D6C8C269
359114E9D718E545D6386240D95D5216E6AF65B62E820DA2AF55D8F8EEA6A566
ECEB61CF2BF6035B98EA90F559625C437D4B64D72CD92F6E1087A57378BC5CB9
E34C0EA2AE82D3DEB97505CDD011119EA28A3A8F58803E3D52DB586338B7B554
A936A7F9A2098050930339C0DB023D08E568308F544B13475DB2A5F3876C929B
0A05304A6430A70EC98B71C80117C0EA512125DC02C19B85C24B38B1B40D53EB
C3E88F873407D8ECC2D0DB427E8E9D7FCC7FE4A040223EB22229B014C1532DE7
B7795242AB54725732E2B44AC0344A2A44CA18B10CDD9DED32A96DF332C5E427
0C9BBB86360D69D0102F4ACA897F0502C545F92404F6B14877477E87C6A6C346
A08DBE65B140D02A0FC24705D3E1EEA80B382A387FBDBA65D5CAED55E4355A53
15D0371D4C79A60F822B231A51A453477B1F6033ADE243F14D497C086D8DB56F
2F56A18218C345C32D38934E4037285179E8ABB9E3A838DF0A05417C570880C2
E5A57DA1211148844F9F61FB670F5521FE1FEFC260F3E926AE8AECAAB856EFD9
800F98038B815C5D1EA498A138CD5AED476B544FFF0AF7FF5CCE31B93E4048CF
BFCDADF56B75CB057F0AFEAC9181A6C434512F6A544CCFF36F8AE899722C4A93
C81AF1E108AA75CBB741E74C47F8B20547A2A38F01FC97731F1B39A4924822B5
265773A5E86A17A41A3D46DD8BBD767AD3EFBE479ECA5B7529BAE86B985D6C9A
BD2AA631AC2163E04A69A2DFFE85B298AC23152C22A5D640FE6D22505EC7C1DE
B88CA5BE13F85373A8733835C5B3B7D78A82D9D6D54932D5495476440B9864E7
42BAD5D7CC7C04DCA33030F187E88F3A42403FD4606190675A15AF4C6B62C52F
E635D7DBE1DEBA4603B10AF174EF63D2C4C8834BE9EC41F48EE50AF679748923
6880AAFB0C40074EBF904E6C116D035CF8FDBA0A9D56E5EDBA3C2794AD2E091D
D7659A4DE4DE812FC920354999BE977CBAC7A04E9387E3E188F2F5C21CDB9599
4F56D69D6B48B7721A0FB87BBE7530ED3C037A517E7F4D92C7AB784AE20CB117
8A77A4792F69C2C8A7450783352A92D61AE32FCA8EE7AD235AF1F50DA985D21F
EF5897DCC7EF4FBE278D0C64F81BABC9E046AEE8866049379032547DE261C761
AAB16B9DF176051ABB7C78512D6F34A84B9DB9F2568445E2423C73FBF82E9961
A7926D1A05FDB24361A99F6D8C91D104F883777AD1B0FFD5C8C14C34C3638E6D
2FB2F981BFA79544B1A2F756D81ACAE235A58C64D8DF6B0ED524949A252036B9
21751FB3806B69940F415EF2C9D9B107BBF43CDEF5D2A41B5CDED1A9D574718B
9C76A1871510FB3661D8B5F4D9120A155D32DB5C681FB70AB788B876C71B13A7
37A00B245A1571E9CBB63FB2ECAB3EFB4137D55F76088819802AC0ECDE469085
BCC3A5E78F9AF07A42EC29CEE0176DE0853DD365E9B853E9315425011EF60360
96398D8D10ADD46B3FCFC12980C2E89DF11770D3FF36D19AB569AD0865E26C9F
0048B1100E27AF8F72767FF2268BED8317FAFDB532191FA35C29805C89A3E1CF
261967A11FA5B073A62AEFA198FF5739C37442B80455AF129EA1A66E87168EBF
926C2A91C528165662F652DD43DAC6C32C9548A6F7607A1F49CA66CB12882786
D794D5E8EB01E9169E93845117CBE2F0B5980B6F11A12B81E74C08CC2DE33E2A
24247D78344F561751682EB1877C6951F86EBEAFE1C5725C894669FF44C8BFA8
9445E2CE5BDDA7CB599B4DCBE5BAA80366BDF9D404B2FDED79EEDD6FD3B6613D
855D5E17D6020D27DC30DCED3EE33E4F0549473B1E0C6CFE144177013B090E06
286D0DEDFFBB18E470BE77630EE925BDD46EF192F5D04DDC73C0287AD45948B2
225F0183BD481A526F5680F6A3D38E39EFA71A0DDCE149E75A28461D686F8329
7FAA9EABCD71BEA209917709BAF693D668F7AC02F3DEB82BFB87DFCCEA1AB910
FF57513810E439B5705D8987D32CB5E37809317C50945E7DEF65F98080F155EB
CFBCE24CBB5B913C140BD64AB6CDC615EF85C7747CFD61EFD84E2D8142BC0BBD
19FECDF86A5980B9B83F8BFEBC6C8FDD760D1CFBEF39C25DECEB2C64030E4873
3BCEBEF9452315BDDD77E669FD770003EDEFB74B9BCAC40C589C79ED8C432598
31FE44C13336BBC3B0569784320814C4FA99AC15611CAB3534A86E51C473E3F9
CE236C2399BAA8B34BF5923162B9C583897864E59CE6F46F213B0EA52186ACFA
F9C21D45FC95F4483FED80420E4BCD787F6C1979B5ADB7294E30885DC5F1A7C0
10EC1B86BFE8B4E0C2804ADF7265152F19C026C89FE4A47F9DE9DA86D75A9D8F
39727CDE4D8E251CB3B3A5B0A91C0FCD7FBBEAD7A812F1DD240A3EADCB9E7DAB
19B7A27F2BE09900B60B0E04DF5EE2475851AFE225349BD9936E274ED7A5CFCC
0057D9F73C9862046476ADED15087DA8D19A2C3B7260FB620EF714F054A18E11
BFC8F0677F7473BBC8F898D0459DD711DEA6B241473F8252E34FA911185BBB34
A6EBF5F640B382E82871A1FE5717DCE2CA2B7311E8AA33409D7E07E7AD8BBE63
06D6B1CCDE4251E736E6B1CBD09075410A2017BC4240CDC4A30790A98F2ED8F6
48FE2285E3198F45BDDDFCD4F291E0BB1A9D79E829E1B64DE91C306B8393519A
7A59226CBC34EC86D2CA91E32214DD857E80C70CFB59AD713BC6DA67172869F9
E4359B75F27C0256E5D7CCA469A9F64B95A6FBA4BC89DBC93765E3AE4723163E
492525A147759BBB495C5D5B99EA24A21A41A2E09B412DC20AA5B1B19BFEBA52
AAB0BDBBE0539C09DC52E4804470A8956B7B47FEFF3A2D6E11BFCACD6149A201
88B3B18E174328A4B90D93FA215065DF8C19C153EA76C5428C92ABAF509BFE73
7B0E77F4156977CDED3DF176000A1AAD3493874D67FB56FED2C58DD18152F75E
9E3A65D12036996DEB087871070082410933B8B6339B6106663D6147C391A369
F897DD1CFD7A456FA223553311D5DC175CD41B1FDED43967E0676CA53A9CC5E1
6C770DFF9C69B91DFDC228FEDF1E2C50A9D6BCCBA9AC188BE84D94820262F3C7
01390274F4A233B7C21EABC56271E0D26A4622107B077BAC69AA8DC1EC35AF2C
3E12674A53B3A3F2EAA7711B75C6AFECFF846191F4C6B573815A3AA97D3076F2
AB65B7BDC9F704E15D8F7E4DE009307129C0401A7E58935BE5A9105C3164B472
23A893DC58A24D65F44AD8D2FB69E0425E6B527C4E25D28CDE453EF7A4E09CC7
275EB64B46FA556FF6AD04D46529E9BC9A1876241B347A7C5A6AF81F6238F191
2F06CE23D9B929E7E8CC201278D36BFA9D85C9CB0414FA7B15EC02E8C08C8A4F
7E4B77201F827CF41845BE0BF8AFAE8348F559D6AD28E6D36CDEB5AE7DFBB73F
D1A0039F86E8489003F84951D9237767C38D64411A41FB44D0687B24A0069127
404ED92DDB1E36014C5E4B546CEC445793129113559E917EE5E91A226D4929EE
7C9DC63EA8F9780763E889B13FB2BAA993B4E3A10523D0D3A10238FAF971633F
0FE9A9BEA490FE3B8F7A361CA77F3E807FF945B24970EC6078E5A5BE03C72E63
84292A2E1CD06130A091F8AFB70C0D2C2A6D49C56D91469EA758F72040FB7177
9C25E2709855D4B337F9088002BF1D547E407DA41D28A1207045CB33D09A3887
A80BFF75CBCD814C6B5C42785DD8FDE082F7994FE2FDDE97D4CBAD7F8FE89B4A
CE18BCCCD4EF93EFBA6E8F902C817A5606152631CFB73F8DBD8A99AE723192B8
FD7EDCADCD1BA23C0423B872CFF49E3E575228C9722F92EB9D139A1EB5434EAA
E6541A3DB6A076296B35E8D6A897962EBECEDD21DEF42A0ACB73580BABFD25EC
E3A9EA5EA803DEF478A1DDC7BF0C57938319EDB9EECCD83F382E45211576133D
BBDA5CC4582CC3224BDD0CEAD4A5479C77743044EC0600CAE66913D3A893D91E
D6A220A3B1458EA90D68B2B13A5D4A79B827C93CB3274537274E5102564EE586
F97C1FDE8E7BCE01645DA72B35BBFC367448EB7FE9D1349E90AB58CBFAA79D59
67987422B53CCE01B56A7B0FC859F6A13415FF25D97E34027AEA2735E8E862CC
F28496AEC62C6D2A9117340ACC6C836239546551F5E6BEC12C895C1F84907B95
A2F89A79461AA87AABC56F78F0F213D963AD955334B2DC5EC0719AAEE0BF09A3
19FAEBDEE27D69DAB92802C091E1DD96672E47DA7CB4ABD9B410BEF6473FB412
6192FE56F0FAEBF2192874E00E4682CF0AE4507F9B9ACF4C51DBFCB9258BB81E
248987CE1A14766F76AF88BBF04AFE131578AC0B627131B95E5DEEB834030924
89A7A0FD2DA44A673046B42AE20F058CD38EDB16D55F238EC69B6EB8445E1A15
910769678FC5D929DEC57025F82CEEAFFFFB6D41D5701AECD409DBEBF0C9E955
09BDD99A537F5C942A7CAB4BDED1134230650AD2AE42517997FF7ED694FDCE57
1992AD7941AE16EF07E5231112BA37850D2AE40ADDC52B48008D082AC5C1C042
7AD24E2C9976490B46B8BD64C235D83B848E819175C4E9E5718AC24980220875
52373CD1D23D5C8E17CF1B43A482C44FE52E57AF48D0498C699E371532480797
E5C6302D1F29B003E56B90BE60FBC2FE513C93C7EB2528CC8B0472B5A579EC88
E8BE5890BD5993F661B75F403B0327A58E94861527D7189F6FC62EF9EB9AD584
935A58676976DDD2B6E118FD1D409904D12E824D1F9E7004CAED6DBA20F6A900
EC119A96BBE9ED9C4910218E0E1F254137D816B21F76617F02A0FC94D6F4EEEE
809BCD936FF4B76DDB821EFFF0BF941A8F045AE1633C8085ECF572713053E922
2838472960926A3C99F7383E534EF6C936DF6ED77EFB07C3DA6F036CBC424F41
DCF28BEDEDA81A4DF29ED7C8C7FD903BACAAF8ABDF9F1234B69484C237E2D1E2
E64C0D48329329AB52F8A3B64826CD95F02199EFFCF454A40AC29D2907BF8933
0D363438EDB94D25B85B2FFA06BEE4B4866CCD6F9DBDE0A453BAE8CD9BC976A1
491093B30D44F25A298FFB963241F8F05D06EF7BE0D60FD996223903C9A02FBA
E90130F57792DAF2D43D99E9EB6392846DA0B01BEB9E101D4E7377B61B4A077F
ADD338120AAC858A501D8D6030329402C5EBFA28642B10E65ABAC46863D26460
2718214D9A6E751E278EAD6004782A066CD7406F2C075B87AEF6FE35C55601F9
99B512A80F5266108EC36BDB46E5704EA4E95BC91194E2A4F97459504B95B658
3129FB837AFE9E5EA65226535F722426FF14D074B1BB7C4564FB54FC6C71558E
4C1A9D0B93E9A2123B044448355F808ADBE045E6CE6D9398755417A2CC20884E
40E9494038C8C4146D9E400A2CF70467645A23A9974BFD62F54A6A98F74CB852
D6510B5AB1B30E1EBDBA650E077EC8EE339C4804180FAB47078057D55EA08960
8F21F58EC322B1D86E58CE46F9982113791C051AE8C88922EEDC232CA6A04E92
8004BD90C2FCDFB6DD8959142324E13613FAA8BA742F3165989453BA3A994ADD
C6324DB33FFFB35AD715BB0DCDBB2D35B51730CB8CC9DD1B574184656D3ECACB
B7E5701BB1EA4029C7C87BD0772AE30671ED2BC4F1E12B16DA8FA645F56CF2C1
1B51C7AA9A80146F398B9FE829119A4ACEED02EBA65E3D0C39ABB9DA13E34086
4F2D181B83DCAEF214F5FB004EAD632015EE1E2FA54E38977031156C876E1291
8275E17D994EBE5F2BD0FBFCF937DD3BE4A5B31D1B869CF99D01FE229B9966FB
DE2B55A8B0031DE455BEB83DF8971CCC3C4CCD9239790F6B0B3DD6FACF052D2E
1C0EB34672AA746EE7E73D4934F65C216EB6C3A6207CF39EA825E6DD1B32CF54
14CD559F65B1728DFED9A13E39976C99B380EF4615293F2CF30358B76F04C6C0
E80D3AAF01749ADCF5E38544F6F225FAB6045756E1D6148F9BE2064A37646CB6
6F645723D143A8D4D74D8FE6C0F77B08D4232C6789A0F5DDB7337A300CA3A1E9
B53585E431E90DEB617EDC0F95E180DD7550442AE3E0F8C1178EFEEB5152EB51
288864523AD01F7A76DD5424B746A66BA0A805CF2EBE2454308EC81D16316F21
015487644B55DDA2E1146AA3C0D5541EB45ABB32D64FFBE3475AC402B3DEC385
C593322AE2043AFA55C6AB9E1895E036BA65DE15BF69090B7FC8B3E303F8B56D
1161CAF14DC202B636DB484CCA840C48ABC86C0D95192C772C129F71427E98CC
2ECABE77252816C99DD11820D375EB9335D7CB6267EF13E1CFCF241DB485DAD4
57C8351CA765BA358247310D2D65F7AA1A2FB3FF6CA041375A2F358180A3A207
B2B331CD0C7DAFAE8E14C0C9BB060ECAB69004D3628756A3A9B624BC018ABEBD
269418B1FAEF148615D78265BF0E0150053C6601FD711F4949A68C1F57865095
CBA6E700A1CE8C1854EC73A7204D9E9FA8728D4BCAA70FB527B440C0CAEDCBF5
AA4A878BC760F2F70D4299A4F76115EE6135F0ADFEEA0C82E30B395FBEA1DC6D
7DFC80DE646F8D21E6DAE8B8285CCB13156B025DF2E5182DE426255FD062D11B
74A0CB238281C41D9387A29171C53E99A6C68B84EB905A08E3AE9629B0275AF4
22EB5476C2F259E6E8AFC57CD429081D817B4DB795BFBCC80F4EFBE3D7E37769
48F8DDE5F879C79EC2E13B44602369AB74EF77341BF520553987E90CB1CADA54
1EA9D47C168251145C17626EE61BD5B758B069148683375E02AE84420BFCC53F
E88134ACD7B507526E18C29421DB4FEFD57CD2B0B7721EAF2B21A67AF5E43B18
2BD85FD6FF960420E3B5F8A1C120887EE499B94F4E0FE6344878D0FFDBE4C314
85F2D4DF74A8FED485A7D1E170C47AE4059FE85CABBB066949A02C4E3A5869B4
2350F1BB7DF1C66513FBED11FE196B9FA247CED368590B63277B0E09F0A0280A
6BEE5F7C91AF235D94843C7065B09977A242AF7FC410C64CDE855B47289C449B
CA773B5F7DC8862B9CF8625EDCA40365201A1C4E155C86BC059C1091A8B687AD
33471E4792694CFCBA4CB368300E9BC196094C6216E7B5C34539D5848179585A
AB57BC814B1B5DE90D0136152E4190CEA510AB3E173171D5641A24016B351694
CF9614C645E64D34B5A2C6FEA57D50495B458B436ED0C74AD75ECCFF2F7C4304
A1FA6260C5C645145D54A2A7CDAD63A0DB6DECBD8879915086FD3569427C0288
473329A8B217601A96B9F3015EBBE56E141A3E8F64D987CA17A7D512629011A8
3B73973BA97418380A98469D8ACE4FF8DE150FB6F88F2BCD55EF0329C2C23065
6084ADFE1BDCA1CE911BB7D50284860A8999BE323AF4E7796EBD1ADD78D7530C
932C400838BB49DC71E5BC588C87A99F441ABAB5955595BFE5E53D4C11563B03
B94D44633FA74712E287445390A63470B89FD735B02D8C932405A9C8277AEBE5
67762CDF9DE85BBBEAD7A81DE32825848FCF97B7D1CB5D8F121EC7175CCC937A
0F9E49F8B27EEF8E1087FF370606241EC1977967D9988DE1196E1195BEC8A5E1
724C1F8C43F22DF8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4850EDCB990134F321F1FD6696F64BA101037918C9
F3EB2C616987CEAA46F6C052EB3FF6F2FB9A6F974915B82B6608CD85F75F0664
5644A5E3888713099F73E90FBC9681A6432D6944A68175A656D126AB96DEEC97
7DFB9A5ECCECE68B7C706A15EA93F5FA7800171D760667E1336DDDED349310D0
BB68B865F3E43C4275DFD82036752613F3FC722D561C0B5BA22C873A42C13AFF
73B7A9B8096208922179B7EDF55236F13203049ED2D3A304BEF0120285E9FBC3
921898A37465752B57535DF5054235CB5A713FDF779C161E40A8A8AD8074AABD
6A06EA11E40F1F4F4090C99D86095BE64A36FA8733362A8D4A2273879968020D
41EAA7F6C1A9B682B344B7DC94AAEDADFD1BD39385A57F9383AA235717AF84AF
BF5D808D32071618FA11E2F7907B9626CA16609BFEE67DB56CFE2E2B90BED39B
54D866320877A767FE000D8A3386EB1AEB2D99809C71C946EB77ED556CD01675
A5D45FC8BD04EAF80C756386291444CFC1D7F12BB4B1304696B2080A14F56ED1
959BD60C7F7F5BFAF8497205D4BD589967F17FBA10C2EF19C1679C5AACA4F9EE
B15E13977CA81B5026C7E1EF4FDDFF62E82B16CBE3D401AAFA4D973976EF232F
76C9D0C0793684D68FE95129C326682238CE9807B35B2C2C0C32F4122724C159
AA1C41DD94D0808809572A0A32125FA4D78B525B256291CA389F839797A13591
6197A48D453611484DA293AAA6B62F5ECBC9D32FD482C74A5387629E03895C5B
946117AA34217BC77B1E075A4BB99145EA55CFD1D12CB1D2E72636AE538232C1
3966FC6E07843E4FC7A8FB27BFB4FB04FDC4FE2F15947DE72BDE539DC79E2EDC
7B7FBA63800A37B6EDB5E58E81BCA267212F3D633FBD44F1767D5CE3A205C3F2
98258D4435F7CAD86CDB2D9EF08F2E13FFD0FFA610B1CCA391B8F65032736F4D
D2EB18FCECC20D99411CA0918A4E18AAEF907EC7D6131076BA25EAB5421B2C55
A43C3D7FD8317443078E3A7FDB6B95539CF003A195663FFB3A1235FEC42224E0
8E3030C575B01BA01325A524D676161B14D376DB237618616EC64BDF972895EE
541BD1EC657ED5D3BD43A15CB7EACE2A5AFE749E97308D8A30731A2D16BEF610
3E5CF27493980D042DB9334244F1B53A7CD80D444A93455702169AD375BCEAF3
987102F0C9D83420D26447974D5F4E690980035348B6E613150446293F3A2B35
3C3C9D2AC6CE183F72C2571F46E81CE317A0B867554FC418A96A550D2453ED75
51F09716732B9B7F6CFD3DBEF2854FBB70F3F5EFDA7CA047CE71B49325EFE87D
508AA84519A585B0D50E05208B6D2C68F8CAE9E03728954CAA40EF5C7609B7B8
A5E1768FD239F48D40506776C2E5BCE6D4AF2E318F2058F294D236578CFFBE68
A3A58E1A82794BABD4D8814B53865E03C0C0D6DE7B16FBD58263E48108AE8702
3FA6C06816598772E12C1CCF051938DBCF63442E4E1621C7B4A3EAE77A96BC8D
7EDC0AAC6DA6407D2629816D401982539FBBD85CE5A495B91553790303BC2B34
C61FA82F21D77803AFDAA49FDDDDB86B8F6978F44EAD1E6C3FCCB186BBE6C59B
B74DAFCC33DADDC64D2A8C99DF087027EC2EC8D96AFB0859D8B9DF74AA62D786
288903BA14F2AA4C819D8EB3C82EA74007016658E856FE5EBE3C8099E375D64B
D63E250047E910F5587847B9B4F6BC4383775280C8337FA283BB4340DDEBC4D2
56E13F78F42DD4C3787832DA8FE8848BA6FD3427F6FEADE6308DA8EEAF8ABC55
508E470D0EDDE6465223B3ED9E26A5D9B2A0136C9BC16AA4812839EF1745C0D9
E8A74DB6DAAE6CA7DD212083440C3C61D2BF3B821B982896932E0212DE5D58BA
9334E274E26C9B301BAAEE8A0237BCB5C7A1CFE8F85CCDCD23E9182604CB5D07
52DD37CDAD896C537B440CFA78A1197FCF102CBDC87BBA4333336530C19C1008
E363144F18651E39ECD39E1A3561F99043CD9EF07F9D957AB251D62164BA463D
C0714424BCFE282588EABC04F4E40A42037773349DE530D7055980B63AC736D7
3305BE7C76A6D637A543047CB6FB3907739D7EC6A3BD1B16ED4B0620CD94F6A1
3F12F4C185CD6EDA68951673D6384E6CD12944F86D178C9E4085E7065FB50E28
631D2A286B9862B0C69172A92B2BEAD105A169AC099700E454C9B0FAAF6F2A73
D0F47FA372D5CF659CB8BCC3A264110C2C6A35909BA14CFAEDC2875F4D6B2C1E
A59D629B0FF93EB424BE478116E5FE553BAE20B09A6F8AE40BE8937089322286
8F2CBCC1A37AC300FCBB1C8F38EFE801F71407301D522C2D87ABEF72CEC76681
F8FF7ABBFF2A12FDAEBB2C961DE6141FECE531A950C020BE383482E14BF8D9AE
C453B7C6B245AFE9025E9D4452957B2F2CD39BF76BC7ED9F3887071835353368
D8131F7561EF5A3DE144D44BB63166AA8C7281F619F322A3635893A174A266F1
46FB68007DDC6962717FE0EEFBEE2F317BC45E4B7647B83B7437FB44CE935D6B
4CF9DC620B2E22056DCEDF9A10781829D8E2CC2364301A79073E539D81EFB4F3
0C40106141EEBFA99CDBC561C949F1641B1136F65BFB1E1FD2D6E99E7F67FA7D
E5C2D9FFF367226E73CA986811E416EC00E3C5746415B1AC57AFA1821DAAE142
3DF997A9E43F30BB7DFC8DF26DA8F6427469C4F61076183D794D01AE224451B5
C13C2CEF05FAA1C17D3FDCD5F6FAD9DE513E0D6D14A3980014FA109C9235A7D5
5DCAD16A7AA32EC49EA31641D1739B576500ADBDD6ED553C872502C08791F29A
7831C8FC85F8BDE8FC66C6F24BBED7138A88D7EB58E6AE90DE241983B0DB057B
72FD370FCBF53C18F76B79AB072E704173D21EC1E057FEDAF53561D04A85898C
0BE02B519493C9E5AF7B22B0C55EB698ADDBB0F8ED15C971AEF113C747B2EB98
20A92F8C86B98A36AB956ECE9F5C5620713A5FFA49628CDC2A8FB41FBF08C850
C509FF5EEB4E85CE7327EE8310F8FC87A29AD6D75C4863DCEAD5EA71EBDAD922
BEAE31D1239719766CD650AF2D9B1753BF0783C1C9B860B740F2B4D53A8656B4
EABE3095AF246B004CC2E0A360373E7BCA063423BF653F266B6254E1DEC9A6B3
ED3261CF7652215E55CAD75EB726F416F93B8DF53EE8E41302E597B15C2F640C
A86F29174F5A713364C8B41EA510D612146659C2BF0FB6959685F5E76AD7232F
07F13A18F68E71FA1567B10B0CCD431C8E54EC3176CE6D4FF9E1672415F7B960
61C2E73C5E4F2DE812CF0A27F44E3AA88DE45F8F70D60AEE9B09FCC642AD0C59
D2368A1CC3967DF6EC4140AC4E181FE4C37546805C3CFC1CFC7241A40EB7EEF7
896CBA737A01D3929260ECC8D9181CE590E61BED0C9FD838E51A272517D28E9E
093AE66DE4B01356388F586D7C4B4CB35F0C5F18788E3378756BCE8659ED075E
B49AE754BF7F8203F03BBBFC86D384494517023CE9CEAA785A842E153568D54E
0077F0F14AFE061E31E285B68B1C5D33151654881E1411FD3FA71C28EDFC157F
6E5E2199C53D01CF167B0D7BBBB83C095D156C24D86271C3BDFE2B891C8FBAF1
AB0D4645AE26BCF46C92C6D2AC9F10D14EC183298277594958908F52261CAD65
564EA5B099C094DA672C9D042051FB5E063BE8D4D7C18DD6A189304A5B5BD933
48951B354102F98EDF3AB2F6C54C1ABE7AD98C4BFF998A9E337BD16D6004B0D1
FD73174F07790D00E851167F0440BAD8771642F8EBB4FBA99B7EFE1571BB537F
C01D4EC43AD1B8F73F3A995E4606C9F70AA43390728A701FB14B6B1700AE32B1
51322270C47548CDBF7D3D9E9D6B55DA0351AC49A8E5177E92E69D23E9FD278C
D5F26788A7E5D8476DE8E217C088A770B1FBC97F1F26859BC591AD95A56CAC75
973E8CE872824EA276E2DCC080416E8EAE46BCF6A6475B41925EA9F55636A7FE
7FBAE9F372C3F0FA8F1880345D6B720E2CECC29400A1C49D4728E731942B25D5
FA8C7D62E35BF81C654B754C7937F678F52C826754E19C0943D37A094403AA47
6B2476161F8C5058DA20F5AA71FD8BDF6EDB7C6022BCC5A3A6AA86041322FCDE
16405F21EB9601217D77E9B567F4ED5F54BC20ED3F909057747513AE94F44AFD
9415CD22F7D1EF564F9D4A077B526321D9E67DEA7A05593012813A7EE6C5882E
0AE6685047D8BE0494EE78D9808F63FA1F4464E127BF1C18754688036EE18D07
6098CB45D10BD3331E935F94F2A58A55C1F29683960683231D520DDC0E2944A9
C250A5CC53A8BAF39883AE261391BB667719D9F90D451426BC620E8DF2FE9125
2495954BE0B8164B93E2EB1C89AD1DDB15D6C9B18141AA9663BA238228C268E3
045ECB820AAD9F95C4F6ADC601C09CDCC0262C6E8C4C3F2D173BBCEB69D1D202
871BC2B15EEE8E1AD13E7308928E76A26690C165FB39B8F0596BDE0D50274A1C
D0DF722351EA756072F77720ACE22C9983B434CD778C286374763E104BD99BEB
430557CC188BD44FE265A2DC2A176462F1D3D90BF0054F72ED0CA0451E5D8A81
3AD6697E53A43F374A1F96BD8ED3011D4E2E1A18333BCC946891D9569E380A9C
F9F1F35134DC4ED8B0C662A0B19CE4410C96FB6731C02D847D0A2374A0F4627E
D82BBB50568CA4EB640390C353F464EAFB984ED9535EEF0550084F43CC9728F2
881E4C77381AE42D708DF8E5C93474AFDFF072A5224D8CA16AD3B4194DCBD2FB
66C44CCFE98859CB80E3CB8DE317F7C1449E4F6C8AE7D67AEE9BE9CD45EEAC33
0977263E4EB261F6718EBF15ABA15B45CE0008CBDFB222FB49415FC06B0EC169
28F338F9272F1725E2F75A0F141D3EEF8AE40E7F5F783714FB07BB409B5D350A
AA08318765F178B1FC06FBDCB5446259B56837F41DC5AE4E7E7526957F074F5B
3644BB3F93D7F96770C73499AC0AFC3D777C6FF9A419F65532D5DA71ADA3F8F0
C009AA08743748E6C46E94E0C35803774283C658B716F852E839CD5AC8B15308
A2C0A24EC521CC6C63EE16D0C2DD5ED0582A0B27E4E7FA070294B5158F3BF442
9E7091E4B5868D62FAEF3873C2DFB2926A6A4E2E96CFD36EB47CE4A1E97111C3
8B35CB48DA6611E0ED9D102FC5598792E6234F8F9553F6F7F0127C5A92A54E9D
8E50C05AFF61EE040DFE8BEF0B5F523A8B2E7812E325EA858A25C26ABBC4C25E
3FFFA7DA1C2CAE65EDFC00061D62E086814CA0DD22B130AEE0DE91C1250C49E0
60D989B489D1BA5D33B1FDBEE0280CC78C4FFAF50A2A66D9959F98E7BA23D475
D79EE7BF30014A62A5BBB1FB0CD99C8D4C0D16D50CB7FFF2F744421638DD01C7
6A507BF7B12C4126F62D11AB45A7BDDC012374B67D02E99FBA47C206FAB3AE43
3B5CA20611CED485D93D8209C94E8875065A8D2F7D8A673AA442E056ED4B4AAE
CB28AB5E1CC4FFC422917E243C440FA84895B35BAB672AB65D7701BE2C420693
4FBFF48423324D667B6EC1C3314567C88BE2A4333B1E9964BDA8C46B9B02ED2C
97B53738B4B2ED56EBE617BEF17B9DF4F314A41EA81C502AB62EDFB6C4B05520
07ED672902C044289855EF86B63BDB575DAE9F7E1E55AD308CD97CA63ACDF052
CA144765FC7D16FF244FC13E97116E1C3FDB669AE9337D5B5D62A97BCD039313
15E78D198FB6DD459C466763F41BA87B4E08CAE59E8303C56509CEE4C3952CDC
239FAABC297A8C4C8985FB5F0731836DBEEF53E3DAE35D9BDBC3B5EA0EB4722F
6C9DF6925B33E3CA232E5EC004B3A3FDDE1DA1C862C9BDC3A2B152842BF8FE45
235E391B7AB718101083E94631B8295834C8C3BAF1CCD316FB33CF00130673D6
B4E81751ADA6184B2FA4640F53BE8E8934362CA0C6A066ABEA6C1D3B8F40238D
E24F302F69638F184A66D911FDA9633767CC89A787F82D8BDC164DCB457B16FD
9FA2606CC3C0740F437DF5F1B361E2AE957BA721CE97E1FD9A0EFE937656C78D
3EEF38378129A92638B7ED6634AFE0B2C249699E212509817638845B53FCE6C6
2B7C89ECF3F7C1839FEC5F71C3D5C65C821D4C11BA95900DB4A14F7638DDEB6E
BA2F8228603C991F8CA2896DD470D4DC49BF5D7E85930282F102E66F4AE9EA7F
111CDA518E1D24BB7F3D6A3A91D93A331F9B1543763CB008A73B07518B9EA8A3
028D7DA9987B6DEB3556CAB63C5EB5611852AFD27654A467FF3CA388E840184D
D63840E75879BE4EF03B9AEBBEB3B51AA797687145CDE71867944AE235F4F872
E636F24BA68ECAFED13668218A913A0FEA2B8B3BA7C089CCFA75E93D12359725
4F8CD0B6CD1CB0F12CC3632AFDA9076C2B4D0CA7D89ED2FFE81FB0969A5E6E93
2885990E7EE6C9F7CCF0EA8148713B1ECA27006B051DD9E902E81FACD5563BCB
A5AFF741439933B7E16255918F3984C8D8AA9CE2EA00D512287B918E690AB98E
5D6E0EC1073BDCDF047B7C61FD9841E176122E3D1E16DE395C7335F1B602CF8A
5D6BB3E21369276C1B1A1964C7DB42C74BB2C3AA32CAC88D3BCA0D4FDFA87C42
ACA58C7A8DC99F0A33FE83C973E65971596DC7423CAF3A987E65FDF6DDD6E9C8
A3BF1C6DECEFA54791E781399189F528397E74A1FCD21E5789A95CD7C2B2DD6A
02320C92591A4F695F5FCDB616F45FDA682823143D7430D65215C84B3D1358A3
65460B5AA814A25CF558DBDE81261290E142EF38FDFA07FE94011A0BF512C925
0112ABD6810AAE2EDA9CEAAA07D3BFCE05B6A2BD017FA8AB3942D6C5D1274590
49C09AD75A27D5D356DEDABEBD4D7006A261E79A9D5589C52B018E46EBE636B6
214175D6C3850D9625AFB57DE7D10EA7D651D2112D36C1AF4F2E921D25546FED
A7709AC97CCD001D327840DF12896F122727523D6B9A1709B4EA0F908B64D5B0
ABFF06BB47ABA09AC8104C2469F8749826284B5DB8E20690CAB98FCB242CB73D
F1586BFC9D408297302124C1A7A32D8F5976F7CA9EB642BC939C8FF15B8532C3
3BEB4193F5455BB10DC043CF2712DB1455F0BD5FFC7BF4304713942BCE511A8D
1D76EEAB76C4288FBC0046ABE6DEE542E1F77DFBD40A3D1885E1C7C91C767667
8D879ED9947954902253EAEAEE0E61555DF8BFC353CD3784725568AC539B2AD1
B3D1124E0DF523A1B5EE0BBD792B05F3F585BB0CDC067B5F4B543F1DE725D2AB
9FF2B70E341CB4E9913BC51369D66B70FBD957EBEA3230AD2897B89A0630C559
87967B344ED58A2EE4E7E1F4737F42E1D5452977794600E674A9E20ECAFD58F6
27B164A6E78AC00CC32068063A416ACB955079FDA0BF12DA422AC78D7FBEEB0E
514A406C524A9B39883E7DFEBC3680D9D81DAA415A151602766105E7EE9518DE
4AFDD55B036800A98B5344E2979E49AD29281A25771AA45809360329ACF5B813
6EC07CBC550A59BEF7C8885162B2649200FC5C77003D22C3A1E82B87DC2C2C55
473BF420175E17CD0741FD87972D92438937409FC21E8431E7227EC0C4F85CA7
4278CE1F76F4545C11F06143AEE3696939E42738595A9D0508543A040CB489A8
D4C9EBAC5070915528DF5683610586A8BEA497E867582A137D33309B02262916
7664E7533AEEF54C6A6DEC9D5D65E0176CFC9D963D769A957C8A11CE2A8DC481
81C93F29C90DD8E3CF7729009495AF32699904D4229F797E793C0A1C327257D9
BEB1BC43CE626586FD77921C79F575FE091EB0C567B17E1E0B3EDC325FEDD473
DE05BEC164113889E3C3F61076183D794D012E55C69242F195F75852109E5E3C
EE76DF3204AEC1961F654E12385D1EC21D19E6B5331D56EAD7EC62CFC83DE5D3
0412F4E1ADF2D35BEC8B8DF54FBB5CF83F65A6F1661D1DB4E94CBA67D2EB54FF
7CB558CAF2B0568943DE1A68599EDCF13E05838FF548AF36F41E2198BF50B082
8994874DD922AAC19316E8ECBC547C47982C70F200859E7601F6788640F8BCE2
7C810BDF93B2CF3CD678A7468011420DBE0330B1EACFA155DFE54512E34C02FE
D16621EC14F219950F42B633D8DB8453CCFADA24266BE73CA1B36B4B2F2784D2
4F8F50F6254E6A4D3B38558C6287C81A6FCAD90C5684302F523873D49AB0B965
BEC1A8B100500554145125FB0C15FEAE7DEB6D0BEE5087694CA9A46CDBD8A513
A8E3C9FA6E59281B91BAB816434577E380D4407D0BE8775E1F82D0AA749270F9
6241E324DBE4ACD5ED0392DAD1AF9CD06C2E2ED38ADBA4247D40287817E577F7
1295EEF85AB528E8CDA7116A08F23BEB802901EE13254E9A121C5DD24892C602
10099866CD3B6242DB2233B50B98818A00114ED49208F2EC66CEB935FABD6416
DFA8FF6AACDD72D4849AB4F48526DBFA918D3B0ACAB4DD3932448B56B873CC6C
0CF0E3F4B32439C036CB07B39791DF3AAC55B66C8E360EEA2E6627C292001DD4
B51671841C6AEC94CBD224C355266A867853682BEE7ED59D4B2F1F18A674C515
915147583D19371A766262D2B0F76B7F2B8B194D7B7F4FDE7B73F9B440316B89
F4013D58815C92DA0B55A51B978CFB6BF169D424EFB12A1ED6ED2383C65FF6EC
DF659E13DB5B7BE48A9B9A437A12F4D60FD0B5888117010CBBBB4CE97E870122
A0A46CCFD6B4158BE06C768C73F346070EB580E8B7B48ECA10C3B9FD2498D84B
AC4D649597E7959192C6F2F6C635A2C17CBECEC40386F048879DDB57E47DF9FB
EA97DA04FB772797921FC7E416D29B1AA0EA886C5417DA88F96BD9BD67E0A5EB
CEC560B2C88C55C7CFE91544BF5FFA32566D2B54F3F661E2B4C57394D6B23C88
BC5BC19777A3F38F7EBE31FE7F66E30BAD25394A1AF88BCE768CC72F14589D29
3BF29C73EB3A2860B560B390E97E52B81F3057209621E7A2F40B50A4BC207649
407BA6F533D3AE96EF148ECA646A8C3CC88384C00797EB53F373EF24A82EDCED
CE509D926BD5E3C4F6E511BD73710D3D92EB644A1E863BCEB155914D39D71C56
14AA2765CED0D79F987D963CC392365BB3DDF7350A2EC9B27DC79C5E98BD38B1
4F7FC7DFABB3BF569214525E6F4082A21BBF80EC93F7FCFE82F4DADC600746F7
1F32364F942C90D9FC0115D85BD7B8DDE271A0D13042DBFEF12EFB4A657CCE94
D311F51A49326E93EBE93FC663854E51CEBD2319C3AF991B3613B40586DDF13A
C832A5DFD8C5A3C1B4BB3667A2CA616F9A0A8E036FCFF098B6D258386C65FFE6
6DE483011A4F305AB1796BF596B2722961ADE1D8326E1A9D0DB17A1D921E3306
AB2B2A0EAE2EF1658E902E175AD3FD3DEDD4C85EE5217379DB414EF338907431
03CE2820714B43DD9EA62BB2F5000FF23382B120321A7BF337DA8B9939021638
949FB0039DA5F622FFE8A0D59FF3D815B045C9B64FFB8DAF846931370FF1C387
D4FDC27CF78E392506AAF7A5C8A21E06037F698465B3D9269E8D4CDB7F92E030
156C7AB18411EC8745F5A6AA5C26B49B21BD4DD5741495206082B647B69C9C0A
95AB7A77A14DF4431DB3E8171F50DD33D78020E9575407985E5AEA9D49E3F8A1
9E93F3B6ED6ABF5FBA7CFC2152C12DBDAD988E5147C913B2E2A96821ABD9CC0A
EA383AF2385E1CE48D9D7DAC7D581318D98098F86960E1482C50FFC16BA09008
25A18A3DC8F5CE8472C0F6AC2DA72DB0CB853B13A2D88CB67CECA9A1D3498D56
9DE012062B68183CA091D29E755311AC11603739112A6DD852D73CF5EEA56621
9E1AEB667BAC3A58A4EEDF99FE8C1113F4D598483B88AB4EA91ED60447A31981
FF56719213898B5CEAD46B04C44DC66508A3F74A2746E95A62D7FD59BA1F9102
D5A13492C763050D8E3ED64E5AD5A6D340BFDCBAAA5E39F23ED0046C3861AF30
4CD78E87700D5A18BB4FA9CDA30DB6F1AEF8AE8448BBC999C839BD97502F351D
81614CD73E27F230046F89E913D0211C109BCDE7045D57945A929B2829CC6A35
3E27F7F2F85ECFAE439A50197CC14BEE324383EF043BFD9E1858BF77AF247542
81FE3FAA2E1B52D713BF072873368ADD9649EF7521D2F58E187A33AE2529C37A
4FC379602573F4AB0D421A7AB3C9B297762FB5C45277C9F5D98A82832277BFB0
F48E3E8CF31C5D103CA1E0B1C7CD964A4962A697CA30668AE84AB375FF137CDB
BB74D744827E8AEFB156DC85AEA94441AF8D497B572C44DC36C236272FD4CDFC
8923B80543E5C6616DC4D4978813067D64E0DF70541891615BDCBF3B581C0435
A0A09DDE121A580DC892423613708F967186E16F6D5B940BF9377C91F9E00D37
30EEF2FD1B1017CD10400663A7713F7B08F9111899BD86BEA97E9B6B14111DDC
4E547CB0F59386340C9F9ACF9B1510282836EE37AEB991AC212ED5D0056115A2
5CE121D0F2B1AE7D0A01B5272F09F63FC3832F7A2C432F10F7EDCEC8EFEA7F64
E38A219E5D2C64AF5F711FB26D09C83B087427CEE3874CDD4ED921463C0A1238
9EC9A25555EF5E6F811AF118F21548D17AC5E87463E58BC4780AF14EBBF5C8F5
A25399BA8CDFA85E1E9B8163B23440457B8863118E8E938CA3849EEB62CE4981
4E7833AA1E9B8ED51EAF83287EA5F3D1B1B84960F0FB847AB87709AAD4FCC3EA
41D0C9BADA8760AD44E31416EE4EA8C182C1D459885C81B1E0A3E10B009E4896
8EC723C6DECDFDE76C4A7E741B2BFD36DE08A63AB714709C14EB85869A09552C
199FE84DC3F814CC14ED33F79B2FA72AAF170F20B33BA720B58EF838AAA5C534
54E279BE24D3DEAA67D8ED7A01FFCBFF0C19E72FC8AE9D835BE39DF765ADAAA5
23C72A653801A73EDF714E0C8692F37CF1D7E3DEFD43B2B428FA325D2CF7FEF8
C99C29BD310590E1B613AAB89F20B39BA18098D1F27F9BD39E7AE32E5E256AFF
17F7CEEF7E55DEF3971101815CEE9018765F8DF8ECB0A02D9EED192448CFA7C8
F8272B4C34FD26058AA9E35E6DE5D8F2B1B29210683876EE0F8E07FB898E46B3
3A5B0338A896F9B4F27B2C3EF61F720CE7F7788599AAF3FF46CE5AFDA10E335D
059E431CD83EEA8085E3337E32DEED5C9FB49D2635B29E476E36E9127419F274
69DD3BA6A1D82680155C04AD454EF08A25B6B242E36DAAF1DE150D2674F35243
2739B3B8DE8DD27EA9D12727FA1535196170E9653BE1B7A8D4BB062B0690FEE6
0D4517CB8EC6A76EB90F760AD632ACB17AF6F492E24663E0422B21DD2A015EAB
8613D009C729A9B845FA4DB9CDCACCD1804B9444C284E42D9AA0454EF08A25B6
B242E36DAAF1DE150D2674F35243273CDE3C87CFD96F84E221798699736211C9
3E48CA43BC28C08FBC05291063120165B4379B1A4DC9D967DBF6AFB03B7ABB3F
13781C6F65C00591A0DC2601FC4F93A3C8A681BB3381FFFC6801FC793F24F175
B4395881CCBFF99C1563EEBC9D9886DBE5024CDAC61A3A8E149EFB5F773B0977
263E4EB261F6718EBF15ABA15B45CE0008C97CB381B2482372B2C20ED895E24A
946B868F9AB139E5C7FD11CCAAD1BECB8C59A9F476CCDD98832059FCEE46C217
80835B57D688D8741905DC21F75057C2798537EC841AAD80176CDACA3BC49CAD
EBBCF28CA7C0D267AC0814AA776A2F731C046E7B342B84A07C006EFA4A697DFD
000706D74F17037CDFA5ADB85B423D4E484684C9394BA9313FE3EC851B9D085A
7DE39639C42FE7710F5F10BEF207CBA3018A2E8F6AA87BB6AD208B81071A62AE
7E7856ABEC91B8CD1DC24AC1E0C4726AC96E44060C1D4CB37236209050865DB7
C42DF627B9C3C090B33F185DC6A9CA2EF3D53B18AABDC8BCF468B7B44515E5C9
A0B78610D2D795E0959C0188CADA78E1C7B6132981E7111A7668EB5E73730A4F
8DDEAE3628926B53C8A8B729F90B73639521BC63A2252638E44CE1ABFB166B9A
7E900D060011EA3A3DCB102E369C03C964E3A969FF9238E0B18AF4114B94CDF5
DADB44EAF5DB260F6DF77A55A86B68F77C160BB6F3E5DEB7A1043916E941E27C
B90D4C37C4E6C970F7D4EA4D8333C5B27CAEB1C0476454773FF3E432D45103C7
5A2A0537B9FCB7B78BDE75599A60BEEEF61F7273B23833662C05C23C5D0B2DB4
E66AF3F73F954505CBC76B9127245B79FB2A1CF6C475B71C63D67FBE4BF01A7A
CD72330ABC9E413D1DC2AC884ABDB680BC0998937F297CB8632829AE73C4E152
CF0EFAD3632C12606449ACD326A76B011D9FDD66C24C5342A6040BD574848C85
BCB7F3D74FE0BAABA30A31E9D23919274A4E5F4332877AAC803213ADD83E2C03
2BCA7722436B3704BDF21BFFB63A8B9F41583F75A2D1339A463D56F6189A2583
50CDB97056F97CCC4209CAA120DF414ACA8B905EE7B82BBAABDD0D92BB5351D3
A0B3071E8667AB274D4CD9FD2FC1FC8C4F065447F5AE375E90AB1DBDEBCCA906
BEE8B178FA9743947F46A3C3678F4DBFBDF807DEDF29B22F885988C306058ED7
3421F9D738DBD7BB8C898DF395CE9A836EFFBC02B41CBE8D589CF50BA27E3D40
2E9D77EACBBE3D271C3DD27C28F754521E715BEE6A2D29698D0739003C1D8A04
1DB1EDB1CF471B02B6CE6EB26E5A8032FCE0B50CB70D4F7E3E5272E57DEB9A22
AE348B9F9A3F4B89932B9982C8D4F0302A61C41E33E3BBEF480D7C43865049C3
FBEA1B9E7BCE95777759EA2C15E7AF5A2C93E5C578285B76AB6823AD536B1E3F
3D26114248F3B93043F3ED792CFCF5AC617DBF2FB8C7A3E4A7AB85ACC4F23E2C
0F9279CD59961D5036B47F9852717DAD549AE133CD7BACAF9F7ECD175ED70002
48B0E79CE10BAB40A16786F6245A907E7370EAF4260A698AF73D199A1C57754A
6722EA3A4ECBD084FC5DF1B26838D8B088606E6AEC36C38FFEE58A7CF412C978
59BA2D699B6643EA2EF62EEF0951579DAE636CB4638D0482BF77FE270C8610E8
4D5E5795A34E65694436761182BA6D5F35A9A51D18B56D0AE9F5AF647B5EF00B
35CCDB5D8E13419C327582D72497EBF96AFA6691D4E5B6A4F40A7C7E8854B034
AA9F24548D00E722021FAD70D99E2FCCE6FA219CDAFC02193B8E72415E9CFD2C
39F71ECC65F1300CC250B1F71BCA667137A76761CBA2FBFFCEAFE3E98D5590DB
3CFC520E9F943106625A3ED64B25818D960C6F4A305D684BF8673345263FB59B
F0D7FD22BB800A96B2722960F57C9821DF82B89E2DD0885CA956529EA49D7B91
337FF9AE01354634F060085FE5EC3F1666585B4F1FA778D66AED6329DC8FDEAF
158B62BB107A8AFA280C8538B730345182DF5CBD3F1D0E9D0D05DF4C44D23C06
7C14FA4D5C5B60640BB17710A5ECDADB2CDB17ACEFDE8AA1B613BF845E26DD1E
3BD852A017138F4C9CF842249CC9E1F39D3B6C3A1DCCF42389A260FB4BDF2F5B
BADBD746080FF8402C8AE579801B110C76FD7357B8B0659B1BCD7335D9E803C4
66940ED136F05CD2E3A0EB810C9CC36147EF01EED246FC0CAC7850013FB3F1B0
75D4754A82A584DEAAA669761B7A9C7B95BD29B09B930B0D82F2C39F9BC16EBB
68E809B02354FF0785CF5F88D9C178153E0CFE712E0370D5990DD9B4CA9726CA
C5224C853F2229F0B3357563D05CDCA6D3F2057FD13B76678F757AC1ED7052AB
3F34375F3A7C6D6CD68EFF4E4D4CC00A0AA17A213400758D91B364932404F301
7E13DEB1431EC807802FE4D816B5E22F32BD1B883F76C6FBC44FFAAC52903814
63C49F949C7719F6BF954D1E7C03B05F4F4BA4A6690194884E1FDFBE9B4D20B0
BE8BBE3C1A5459A27799E63F1368C4DFFCE3C84544F223A60624E11300A768C5
D30AEC5F7E641BB032EF0F402ED81971E9FC729AFC1E778A3C007701574A05E7
686DF03F80B23E478C5ABCA26796BB6462012BAC23C2866945E46981F9406B6E
4F61160966AF237E2BC7D53E26C4F00FF61C1C42ED9F946D7234C570A114FE4F
5C2067E4206F8D4F3AF4B2C7D95E63DA3C2B2C8D72B9E6D6A900BA4404681288
4F2FEFBBD39715F617C1AC1DCFBED577BEC9CAF1C6DB6736E8991338E5CBA85D
CF62C46683A81AE2BA83BE28EF402C92B79B8A0C9D0EE96851F00D0245484732
D41593C3181479A7C6A621F88E081FBADA15B871D8EEAC0EAB134DD682DCBC9A
BA8F0543D0F0F5070C44375E95FB8E80593DC7F9BBECAE99C85013232F52D81A
8697D1700FC60882E920EB1C184DA0C0396BB3AE8446D1FA4A50BF0708D97515
CB6CF112C2A89D2D44816E907410D510BB8964D3312AFB91898526FC628BD2AA
4BE6827D40D963FEB468FC7AA2DDBE2E708D27D89164B12BD8BB159318932E56
3C8827CC340AC4350DD2FF1A3EA9F8F5D792D8C2434A8886D583181CFE693F96
F674A02769B341345A8AB16E3C947A011221956AE269FF01BC597921EE91EA7C
74A64966DD2F49858BC351519FC213A1475B455812CDBADC4547911BFA0D2BC5
89186D24D5FBE888BB7FCEB0DA2442304FF353060D4326034A5CD9EC8F723A10
47010D307D6AFAC179F40F6471526D408712B812E106A2D2352DE559933C8B4E
514DB0410B1E140095ED4EAE3D1B827919FFE46292E803045FC7D7ED27129CEC
3D1502A9F69CB191E2F8FCFF6FE23A3ABC8D6EE13774688EE457FC565E44F8F0
808F26A82E25AD6B4176B3BB37617134639D9BA1140336BC143532244FA23261
C8E072AEEAACB72F3FE026E0D86E3C761B8BE4A0ECF381E0EBA4B8DD6BA34A43
7F711AA636231EAE65D3CAEB8047D7BF3DB669C8E4378C777769EAC9EF09FB04
124570D4D8A69FBC37C05C42A2AF30EEA757DA4A7D78046F9618F881FD0635C5
7A4F765901F6DC2E9040E85D239345708BDE3CEFA59153C4D7C426F0D3BF38E4
E476DA4B7C3B87294170750D3891D7D3447483F0977A944BBF51C1E7D98DFCFC
1E029E64293585DCC8F91CC8B8E94D2D8BE4B96A223E0910BC6092E488A3488D
54C024C9D1D083F76FFD48EFBC5C66A86DA1267EFD0181C65C2F290D74822F85
0D0E75E691EC815A22E4F06AC52972CAAC14E86CE9604B36A286CB84C14FBD5C
09AF84E16A5EEC8E9AB462F9B8C3E12E312EB7BE3084D2BA1FAC3D91C6E7195C
FDA5CEDBAEFD14FB9E03BD6DCEB7158A8BF35603C68BD482CCFA396053909C6A
7377F35F082E3976B95DE627D1D6987627D5844580135B616405F42758BDD2C8
CC2FF567023649E43CFE82E4F6D74AA3696DD13387024C177151B504CE478177
F585F15CD2624874C1017E4F335284280B9A372D42FAB8C427C2C92E385021B8
4227ACE310658B076EA7A4A87509C43CFFCBCBF6C7C7E6111B92133CC1490D70
C0E83B6D78E41DCE92BC7BD5C0274440824A95B61CA0427E6CFCBC313EDEF936
D4E7369C37B8761341D2763A1FF764ED045DEB086332C87ED9B639F772149489
2406CF1EE84B5AD03266C661DAF3A67012298FFD77760AA9C0611FED9B670734
0B2B72E9E936BBC50D28B5C185399BC5C251127B6C6943FA139FEE5F45132524
C31BE606B3DC96111549ECA3FE9F7D0A9FC87686FC22C8F111F56D53ADC64547
BBC57FAA80D08B77A40CB972E74299E2558DD70A36B6A8B64966DB71B23B0A9C
F1F1FB873365EA1FCACDD36E41D766547347BB2E16A5F093E63A6A3EF9489DFB
011045A2723AFCDAC01BA256DE73FC8BE63397C8EA891CD41A465610F3AD7D84
D027324E19D24245A10E071416F35A1FE772773C1DD91907A984DE4C96138BE3
BDA2BE4021BC1D1D6D06E838F7245B1347921D8D93659EC8BF5397E64C39893E
AC86362504A872500F5A72E99FD49D0BF6F14665E6CF273DAE91E994379A74B5
8CE813E386B300454DE3EDAB572B816C02CE2700205D7E1D43BE82C5490DA4F6
FBB07DFB6A6227A73AA255113DF4821BC5FB991FB78EB4657F1F3BFE97412F17
6E0E7716C77AECA32AE6C1E6912DCFF9FF07EBE821AAFF09597BDEA4E71E7489
8956DD52559AAD4EE55393019E6E934CD88D2CF5DD2338CDD453F10B29C86401
8EEF1BCB7D07297B04F9DF81A595F19F1654C52D5764B2CB881C590B3118B8E0
401ECFBC3CDDC6708496E78CD5F28984CDDC34A26336FFC7AB5978BC0AB0BABC
2EC6B1813E0C695ED19869EDA05F5A9C83D65C94B9A4E97187016FAAF5AF1AF1
0B70ED676DC5B343C567F7B393A19433A786EB60F7FF2B8F65E174301878CA8B
516C12C2B1C8EB09D5AE127F1CFD04D44558488090251A96982001DD8D9E9906
F4B5E57FE2C578EC3941BE4A948B3490EA861BD99423B56C2084505F7A69E808
9525CECD505DC35CB17B6D8F433F9402B69C0CD81902E9BE11CB03C9FDCFDEB7
CFE055A79A7A9CE78E1D1D968A7EB317AFE84517A5338B3F6500467BA8F85094
A90F39DD43FCD1EA529FB5A6F3DD84A14398F15977D9230BBBDEF3B9EB3AEE89
B9A8D69E0B634CC415E50BD3B2BA08EB08A671FCAEE112CC1D7608C279F68BA5
676FC8DD87982A2FA07E748445843993A81005499931D55B51033D8AA06605C4
63367B0D18E7683B321C413B3AE6762320E971E7F08788F9E7A12A6DF86DEE6B
AEC60A4B2F77F0CE2B6F94D5676912D5E868E2DF97DEDF81F7703CE2AAB39253
1104ADAE188A6685F6C645E1942FBC085280F99595AF8470AED12CFB324300AE
C275CFA55A5122ABE3D5D39507DA99CB1669863C22E876CA74625D5E6FA7C875
4A1CE908EB9A944BDEADC7EF44E9CC2A269BDD513854AE3D8444F47A06BBEE63
B6A17F71B154749F63DC3E18E2CD85EE5A6D7CD3E15E29DBDEF2B26CF98096AA
87BA3DA9CF832D34FE82AAF94ADEC4B0AB40FAF9E204679B931EF1F156EDA812
1F368F7B5F80189D11C295F8F7E536F247E74028D6F81D8B2BDE0E036DD35505
6EA6ED06BBA31AD2103BB14F526234BB63EC54498EF5393560B559176CAF28B7
889591183CA5F1FCD9BACF833A9D58F384DC27B11B3613B1790940BD44E19FA0
FB17A49DAA7EB1A04E15476712D417B7ED6C679FFD4247D561D2090DC5B56C24
D23345583DD8F4B7B6B0DC43E6A843B86C7634C8CD0A2868F11CD9A95929D346
90302239B94C83C9CB9F5E421D26529A941D5E140E4D7CC178DBA92EF6B17533
3A18C59F49861CE3C7A0E08EA706333097257B71FF8B15FDA9B19A51FB425D9F
711C70F9FFA0FDB7B9C09FF9047014193C1D03FD54C3DFD4DAD9A0A3B1C120FF
37E86372B6995F6E62A9B9551F00501D75047137010F317CFE6DDFAC2C609B87
186E747E692E585713B5FD22FD4529A844A8C1BAA6F0814A94CA3CBC21146CB0
A5B4AD9DC4250ED19804608CC65AF016A23530626089978C8B1B74F4E5C327B5
226A3CE66EF8295B59C184D266DE500B67AE3C24835DF8B01CFC4719A812FE45
E2546F54DAB9398350C4DA8F80A8B31827A8353A158C96F1E14A470288BD72A2
78F8C4F749B01B60B52D3EFAC30ECDE166666DA0896CFA77E34675F695D55126
E2E81CC44F99153F61A7CA9BD5660D0CAF69B0D6CF55110536EB8640FA7A9032
4F41D8A689137215F23322B5F5B1AD9F6076E1B4DA1F5A13455D74F3701493D0
A3050E8AAD6AAEFD46EAEBCF0172948474818697CA450FB3F4BF8F8AB64057E6
E2DF72F637EA243D1D447B2A9BD1463FA6359491E7E038AF7F01C4F8AD2BBA1D
CD287C0FEC2EDB64C27D1B3CEA87CA94EB836D1FC93EFFE371CD9102D7EE1402
B3FE91000771EDECEA167772EEC06FC242E6D39D432B2945B3DE89DFD3F71AC6
0B43407B7A8270852925CBE8A765D8B0CE36D252C7555DEE08D04664B2DBD809
492EE0CC42573A5538AACE47D8C0CEFF941A7270C3199B9853AC4C8523369C28
E64281F4EA0823AAB33A391820EB5901B79952819B5FF425210978F6869E3C1D
26A3B34BC21408034F4646B0910BA9E173FDBFAC9CA0B73A3025F2F452CC7396
005D7A9DDB70E16DC15DC08EEB4C250DC8252CEB98C2242DBED1D71DAA050661
E17BD994D42F7C6518045312B922F3809428D6CA0C3F8DC7213615D5CF35F016
B52718D0A7C7F2A8109B7C4E9EA5D55F5B1A21DAB9636B54F3061A80E24F2937
3A124E6525752FC71D621F9B6A6C011F37CE30F5AC97A0FCED33E344735058C6
81EED202B9B4DB820F27BA6799ED7CA02758E77EB2E1F4D3D5ED7F0EF1DA5277
5538D9C4DE4EE27849609F8AB8876968F4C052BADA835F45B43E378168BA4B23
707BE8C925BE37F7B4C8E511C95D4B64795B57085F0408A462B7639B2610BE2F
DD5E67DFD535A6AA3B68320C8287EA387090CEA46DA2F5F9A3722A33BE7F8523
53DCCD61BE7A994C9C7CBEAB5C6EAAC60EB3BD1323DE603C85FD5EDDFAE64F46
205883DC36DCA1B2B9386E9C57BE16E5DB721041BFC1D19B63A5E715FF902C17
EC2FD14FBFBE3FFA4017CC5ACF169D226BC9DEF83CD6FAE31E540CD02E035B97
EEA3BFED6C6F5C84F057F010DC518229F6AF1ACFF640C466857ADD0386E074B1
06C8B6F8CDF78FB20308D1191BD00333B81DADF47F45B3E715BB50FC7489227E
C622734CD2063A1D0C54EF86546024BA90631557257EC4AFFE7F38132B7E187B
4F875CDC2D0810206BBE5A34350758ACF08F7C784508366CBFCD223ECEEFF45C
B2ECC0C6BCF37B79B1F65339265C3BDC27CD99AC7D748CF08913AE8EE0F72589
CE8192748B282F5B248F763AD2582D8A0925383F1BD4E236C4B59F37E9F41BE0
91C6398A0CC62524BB6F441BB27E5CD25F7090584432CA640D63E1B6E3381C1D
B158CC097FE01CAFA4E39AC9C9B9BF8A5723E2DB207551CAF519B1A16A63634D
A44EC5962FF544917A82F9AA4F3E36A354C7D98D37F7E1B501BC036874D954BB
A10891CA6F81BE3E315A762DDCA4E19311403DF68FD35629844B4CB8C52DFAC5
CB2D239144BCDCD6A65B67F36CB1FEB896053C4641288A4EAFBB2D085D4AF5AF
D742B701FFCC27B9A9B93D949482E7E76220EF4A82638B2A0C5F21F3A5B4329F
462C2FAB6F57F2A1E00C2AB55C9202617355C4891F35FE05CF3D5A42C01A4207
A6A907E5B9746DE4EF0CAFF3597633674E767AE50AD8FE4BD736A49E704E0C5C
EC02C4BC76458224D9A9A3F3048940B60F002764F5192ED3D272734414426733
B7CA2FAB28360724E0928C85C21A9F5D5DF068096E62753E97CE1C0B152D66E1
48E1C5883A9EA154558B3C494D420A7DE4689432A443528679BED3753A03A0D5
AB9EE32D4C10582A42620CDBBF334C96D2D87CBAB0ABAA7A86E38C6319ED4830
EC75366B5EE566F3487B080D268495F3C3C3EC292E682F582B3BB75901EAC956
B84ED21BDEA32D2C6BA58A4966F1B8B7754B57CF6F1AAAF4749B753005C5F068
79D21D4A700D64F723526A71248852C185D884EF1DDAA4707822983E5D276451
97571530C9B48983C3CD550922E73CFFBE4201AD7462760440A2317E38B029DA
CFE088A233625AE0D5FC43ED076B7907E2A94D026C229EC492E3504EA400D6DE
71B54E8A6513BA355D95C9FA4125FE5115217747971E1E637F55A896FFEC49CC
9840079CC68936A86231975E1F89D97D98DE1C3F4E2D385E6EDEBB259C2D1097
1906327197D9F01E93413B1C382332A04F15A93D6D06CC0B67F8167DE50CAF6C
1A58589BB78AD8B0DE7ECC7509B4399402012B68730CA3AF44EAAC3063B0E652
019DA8C9A7838F89AC5F9E88C49285F457C3BE45855A644C0A477BF00A1D1C33
AEBB10BE4AF610CF0F1774532C32A300877FEC1ECB20E603F95DC0C5FD1CE4F5
838A27D48CA89DD947529AF6DE5A51B58837EE91110B50440EECCB668D559826
C4FE9D50A202B8AA33F11FC77BA0DFBDF57715F98D35944FAC56FEEAABC01A47
09CB3A5957923873FD4020B86A9E14E6776B9D0A62118704F4C9DDA1EEF4DFE7
80E86651D99C9B74B13EBE642F27871A09D6ECAED6F3C1782BCD804690601455
6090443BC2B012B9AF74D4FB644F7578714E0E103EF8E45EF3312279633339E4
F832502111DE91E6DC18EB26A9DE5D58F72C75501D34CD78F7423F72622DC241
0A26D666476507B6B940063BF08C552A02DE25E747828F5A36C480EE553F8D12
67981984D0BFC1F174F5F594BC6A6EE67ECA3E09DB93FA90D4057BCF159C5E76
09EC3AC708FF6816598772E12C1DF8FA929D11197E2F42F5363E6DF22BA29E86
7F335A4EEADB15456438FED1B333FC882FEA17CE5ECA50FE1EA79121B0A20ECC
103678173A5E658CE844D4F0DDB7D17B897D66B9496E51F821FB8ECDE31A121A
DA6EF5A42E22492ED5E35E898A28BF72B6F0779D7C2B04D4642DF296EF5C03AE
66CA95D1FDE0EDF813F2A478B6D8474E3E740866039C5762251AAE0BBDFFBD15
7BC1F636EF9E6C136FFC9E66A10E996164B86C1316340BCFEDFE49EB1FA9117E
310328AD3BC71C22E34E9C1CD5C4931C4A4A8C0E90ABB8C0B4CF0743FD98F897
83A09A7618AF507BA3B608231D2920B6A17C5EA7A0BDF4A23CBCFC76BD0AB6C2
46BBF964626D1E998991A1DCAC623E60660772DA52F43EE8FB8F9236CDEF35CF
AD7B2A5FF07989956E893DB0E1E3CE1833F8AC35FF263F2243B06091C0570E77
4E81B1DA6DCDB63DDFA8760D83874342F6057832E6ABD8B69C6A5E53ECE088C8
565E5340294535D4C10F41A1C0AC1981A9834048C2F4056352FA5D69D40EE1DF
4DC41917183A479E55BA3441B55DC1D21B30B35758A3D79A2967B73A095EE6F2
23A59837F34E3C2422C0DFFEE076C14FA25D3959AA1722A8A116163055C7C38D
B3310477E33C99BAD3739F95CAEA31EB0FCAF216C67DB221FEDA8A3F06A8464C
0DC459F292BA04B13B868CB7EF68FBF0A44AC26FC9E4E1D73FF62C686D636BE8
1B7B4B4BC79A8BB9FB8515B2935D45E4B98B5C8E1C9388867DA67DA47F1AB147
7AB32754BE6CF5C6D885F0C590D7FB9E51E01110C9C79C0620D3A136DBDE9EFB
12F0A936307F2C1EB2CC90E7A3B4B3031E0F8939544A58F696E9557FE4C14935
6BF6FC5807CE37C5C3835E5B03044A32115A9784E84DE579F5F1842B5C1D088E
26E82060E350699867518D7806D8BA241392B05A215E44E44918464470E352CD
33125F32835E34F9F3F4AEEF2B4BCDC6BDFBF55788BCF0932540B40FE2F0786E
979497CF2A3361B379302099EB9DF14692804D19A2582702B0E297D69FF9B3AD
38AF0A8E383D6E537AD3B43C6F3A905597570A8C6B0B4A5E099ED71513CF72F0
4A08E9A86C68ECE4791C8339D8250FD700908C87E930AA6FA5AA2E8E6317B60E
6DA9574B676AAECA2DF28B111ED8DB6C0B826CFED692B47C35B2638104BFFEE9
1997288E84B87B9C1B6E120EF084D1626684DBD0FDD5B90A979B867739768588
D4C570C104D5F7DF9AE12B261508B0D522AABF54415538C3BBF97AE7C6C44258
83165E85D442D6F6CE74A29FA23BECCE71AB67639EBC8E9AE584A91278748911
4591E214967EF9422ED96D7B37665D1ABC5777E2588B26846BD4A97F82516242
F03398F33FC863BA14FF3610F681B57B67071A8CFBB6CAC323167D9D96DBE2AB
54293FAECC23650C429AF024EF5EC2592A32E90CF70EF4A631EBE51A8BEC4A74
2712F00B16A6798D6760D9FEE5529005F72357541D57004DD0410A743D8D2AF8
476A4F068040988379EA6442E974F742FED66F7B89A9A88E63C868A8DFA913DE
94E9CD50F872A6CB40B1AAC2B280CD088F988BD2DC8B26A2E7E3485A86A709A3
15A13A079AD7638A7C07C0DA9C8537F99ABA66E9DC50B7887EB14060DB0FBDD7
45BDE56C4DD22AE64DB1186C10A7C760D3569E5EDD235ABC9C23879C2455A1A1
A35DCFFBC0466A81247D0D69510D8E127641D47B9C7A7991D1BAA8A61764AC5E
C0B4DC2FE30A89D5CD6A1187A075E0F09CB3967D912BB426C80B8764CEB725FB
94562AAFC8E755326B471F38C397EB2C5E7F6E9BFC59D23D6E960D167EA93E65
8B44761BACF0D0A76F613D0BD98F170A3173562FDEEBF3B06653EDFDAA596C39
39E3023849760F8619F3A6DEE353D39EADA50D1C7B30C693395989C5BA45AA1E
939DF937F153C3A41110E24E78A18E28D1C6277EF3A83359EBBD9D612BFE7BBC
23EC0B62CCA6957C3C57277DD5AAA6BBBBDD190E7636F48E80BB5A3166298875
3D2E173CD833B1B0AD8295229C8A64ECC8107D4682F70497AC3FC50685EEE824
D228D848E73FA27F7F38ECAC98F7D6AC1A5FF961E5CDB0BFC3A0111333F510C7
3CD1AFA2E7CE96077793FED9D579FE81F4978367A670AC79A99C6BDA43FCFDEC
D7CB6D3A96C98E4D6CCC975705AEAD31F6A58E6F054B6D6E43673D94DBAE18D7
F3E826C033ACC1589DA9C7F8195ABC7E72DA713161E5A852FA54670CF70521B8
DE3255C53E46CEC121A1431F96BE52782E34609B04176AC859081A6A54A6805B
7F680B56CED7F1984220443B845D2AC89F60E388A8C8499A8917CA32706F0C94
0FA146A5F3FE8098706604490CDD1B99C155126D5C2322F84AF92F8AF62FDD71
961989725DC20C4F110CB73EACA932442A927B325F4CB3132ADE47271ABEF7FC
6AFE8F64E2C34F71CD370EE5012C07BC08690993963556020E108B332B09478C
729F228F5177E12FFDFC799516B142F1C4B5D94BB9EF30F44F0B40A69C009E87
C975CF6431B25774F7345DE36A954FDF2D70C1A6CD4C22222605CB7062981E47
D381596A55F3FA550DECB3F3F71AFDEF5EE71A784016B87FCE9778443C67EE82
490B7D6DAFB990188C1748173BCFE8D46AEECA1B44DB9D11E863DBC39137266B
57E210657C68972CA5FBE910CCA9A8D8632CB05620A24B553A27E1AA59F3ED76
CBF3024F88A7BD1992E095B71987A69F2304B200DEBF3D577ED34C12B183D376
30C9B280650126AD14F2CE4412F14B3C0E7684557CA2BAA5C6C13D7D99635773
CA4570DB9EAE3D813C57B322716905D2A64E4537AA8D05CD66D00C054CE99B9F
75309828CD3203CD0D1A78AA64AA9FF80D4AD28DBF991398291D8F188A334762
A700EE46CCFFFFD4C9945801294B7DC172FCCD552B9F6FEA43CF5FDDF97BECF6
28D1524ACD5E094F31141BA0D4CA53A8990735893564B9F9997A85E8413F57BE
668C744F734F6B769D31D02F0995C1EACD0B56EED1D6012B71A6E1B96BDF81DD
CC5700E3730E533349E8F1489D91F013E82CFB4AAC771C89C0D2196294FE173E
A579ACDCD5CEB4EC0A94C48D217916C831495BF1DFF31F9D04CC76C0390F9E22
E95266FDCC4EBE20C7AC37A6D9E49FC6B11E57E29CCBC1FF3C3ADC2C7FF19413
F8C0DA7F817670BFC9AE8FB0F6BFEE81BB45B406CC0C02259AC84EF7775A8856
D6F9787AA276271A3DBF57CE49244B1A17E32DDB45BF02A22073619DEC509865
1590AF8226AAC25D9B989164B8FE78D5C3354C17511541D364CA8C1F27232312
DBD065CB53E7B1896BF003AA15D377F7F4332FBA5C0C00C70C0254C27B0A0F8D
3ECD1B056A35C37842C492DAA9588BFB0E0CF46A06EA698545C376603E34B998
96580F7355631B667A6E45E7BEC208C3B4A68B34E3E1AE093F2D0A8CDD8A31A0
090A7C0FD608C35EBBBC89F56754CE506438795D653EC04001FE646E37039040
7746B9D4643B72336E983F4BD65023FF7C7A21D1F7D121B9714214CA4D56D0E1
1826B47B1BDF5E931D5FC0F2869F55BF8E3B41C379ADBA80FAB2DA4581166E7F
D4478FCA705FF1CC17B538F8A0619713A358F33E0CC7DB51C8299B1400E2E7C5
DF2E6C382CF8541FF7E243AA7F16F534CB8E4EEBA1C1AD77FA9B4CA05CEA57E1
84293362DFBD0B5D90A35327FA3DBE728BE7045DF33975B9249A55C4B8D1773C
406A88A6549AC1F0A25F4BAF610D67EC1B5DAC48D806EAFF9C5535A89852A40A
6F4D071E7319056CD394D2519E260E19184703A3630ECE85DCD0F5C964020D30
62E1A1DD8598787B2FFE01BC07C0490B0347A5A0817887BCB9F55C05FB87B760
B29C99F734FE11DC0E64FB39C512E7F85E1A4F0E8D107E4E94E720EFEE367509
56765D637B7CABF7F9A593D9FF6C3228914F14F2AFC5E74F80FEBAFE5C3553F5
E599ED3A7192DF2860FB3C722486508A92DFEF127A8BCD1B94D8025D60A8E336
E7A257D32B1A19CB241605ADBC4B0F60A77CC1D2F7F847D390531356431924C4
23B7A166A0435C6B8CEF3FC33121CAB7A1FA7ED10B1415954373AB66CC420BDF
3B63357D83C3C70DD9F3E6DDE87DEACF756B352E24F6F16B58AA7B006877B630
DD45C6C9B90489846E96852878792D64A7BEA283E190B6EF5FDF14155487DC65
939F04DF25603E4E2155351D644E967263E234E7803297A2737C39EB7D148F45
7FDB8310BBB651EDE7B5DF05C844D3978F8A4FBCC99D5CDB5377C969975DADE5
8C1A863D53B67DFFDE2F486521000DEAFE3BEB7F64B895346429B104706745B7
3D7C2E88B4A7E0D95C6E382369F2B860434C3EB695109E54E7D7B673BCBD85D6
96E148142B59734D55C2F587E0F7DC8F0C126909ECB0EAE3FEB5D28A49499953
CD93466E01A44DBDB6429DB93CB4B42377C9D6E8FAF3E19AC12735E881C6E598
68F9BD6D6DA78933EA884EC9F3EE4895B3A83A831EC69E57DA4A7D78046F9619
ADE5A0098DCDD32D50196DB55BC8463033C452199673B2683FC235888D9E3D24
C7DC65F407F99A68AD7AAE80D900B905D58856A99BEAE260A8CF01A6F2D73F6A
5AFFE24785D2E9C5611A174BD260A65396CD18AB6DA3F547605E721122FEF6C4
B721ACC874FC2BCEF49359244D0F74759E6DDFBF4CC6E06F7F4E221AA17F75D3
6F7194C5CC7F16359EBFD88ECE219BA650EEFA3DC87EB05F6ECFBDC823330E4F
A7E65759489A8C1A520E35CC383CE5C9F094E889074681C58D18345EE6B10F6A
F26401C07428C34EFCD4442B45EBB61994D9088F638DCB85C8B41D7CB903D43B
E9FA9C0C7A01DAA1C10DC03B2571F6376D2B454878712319768B94D1937868E7
B8350959F98E774C89935E739FF0307192AD4CB1E7A8E709E36725A1250C5907
B8A7B5D6B23DA4DD84BDF1F5449C2169315824D0A6BB0AD8D5662A85EA18693C
6264FD726D9C0B7BB9FD97C0233F418BA417957B89C7C0F139E2F261BB8CBCD8
4D39EF0F0BA674CBFF6A1602C5E8895E20D821636CA7BF79B5B8C0925EC8B97C
FFE76E8EED63F5281ED9CE60832DC567F8D7F2C6F80BF4F85C7013E0EBA099CE
FFDACDE95B2032C3115A335727658736A9FB69716CE217D04DF5A37C5AD7875C
7CDD208BE1C22FF91E4BA2278D042C76D0F1ED51FF0CDE5499656B059C109182
3B03DC61B39650C66F42485387E9168CD692FA421D3220ED9D550FCAB1F28049
B74F443E0ABEAA7D61599F2F3E0F26ECB495E9B0ED149342AFA1A2B0C2BBD5E4
2177F59870194C1057FC0301087271EE7DCB44D6297237758B75F5ECCDF50338
3715F45158FEBE4E79E956C0747CA26E829800CE4AAD98F6CBCDFBD90B6DF5C7
77B523DA5C966FD7221B1B7FA3B477C5D9CA00AEAA4FC629EEA1040FAF2DE1FD
6A9860D4BD2FD8F0684CABBF5B788176A23DBBE9DB022E9BA171E3B730F711CA
22822ABB3CBC6BE86DC34E262428CE40F2CEFD4D785A45946108C19FF9E1F570
C88012D54CF7E096632B3ABCB915CE1CEE8936D558DE72E0CF17C708908ED30F
E216B0ABF0470E86517CCDAA02D78ED53ACBAF9FB2AA2B811F79594A9B366660
4AB9A44069347300A8BE66551E2B35040B728222926E7B9FD2367E45AA87B3E7
D151AF48008CB0A1F82649FDD17821A60CED6694F025FED299C4C7F8B077C2DD
5D379B7AA1AC57FFCCDB5AB220347BBC0B8640A6BA75F90AAD4407ADEC6EE36C
5327BD9D45CBA77412A93EBD93D099C2F35E585D0D010C4885C5E01FD5D7EFBF
4102545BF34456AAE12F64475F548BD2D0827EFFDD05D4EEA6B2A1A5A77CB2CF
394F7EB0D9B1117596E6FFDF4E205CD85CA5F80839F0C7FB7B8D2ED848205648
CBE820C52A5FBA6EAE6FB1A37122677ADFBD41D1D1AF54ED8C3C45E78D94E158
87BCBF001170600121C12F049CBD2E0D9471EA12AA71942A8000FFE860A5AA39
453707C387813B4F7C133E259917028829EE2C58BF09D30DFEB19A02D18CA446
89E5DFA545C8C309FB645CCFCEE8A7AE9FCD8CD913CF559750F82313207B50CC
7AF5FCA3F662C36F5C8CD9238C606DA19C0CDA168E7DEFBD0C258054872D079E
3897C7E03DFAD947216C416D50AD7E8CAE1E9BB5F520B302136D5AD497D5781A
73D9ED02DD23382FDC5D311AEB733B0136E0B3C29DBE7626520C3D5B005A6B6F
CFBAF04C04D9389D396B339BD81267D36C0798F5C481E2DE4B09900AE2E30B6A
E41238D7E64A96A086E1299D3061FBB46A31319B517B5167975510EE20E48755
6F5DAFB37214E57EFCA8DEB439C20604A2F7305334AF446F694CA31C6C22C73A
0EED657D7F91790777E7D8B1EBAFB0EE7A58135DBB27457FB4CAE16197347611
DFE63DA3C7CB85170FDB681FF0181501606A23750D6CCF87F65670B25DD561A7
6BC4D7849494E3D8502F3E1D7431FB6E94CEC95893225AC05A93E28F33E7769E
EB7346E8014D372A5B59A6185E14D58CB202036E784364150A3079F26928DF0F
55133F8E7F06D46E1108071F0F10E38BFA8A6B112756C704C7969BF710B695D9
8F11929915549E0A5D45A0358CA040F87FE03B6DA23C90201CD110D9E1266B81
B1749615B0A91E73A7937CADD889D07AFBB19DA0FF8C9036CD5EF776B5687C76
6F4520EDE9F86515A249DB0640E85AC4382490EBDF90624BB22393DDB90DF1D8
545651EA776D53E756C262B3F62A4266E23A13B99F854E754CF6A2D27C525F7B
3C05CDDD0A71452F74D5EC4AAF18ECFDA9F0F735E5B1A0FD19BBF56C4ABCDA7A
7E55E6F77181AF67617D3FA211FB8A3CE5A78D6D8B6B5D5CB11521A40DD44E6C
1F7AC9E31FECA53748EB84088D6A8A3C050F0907E3B61B9DD252FC8B15B56D7A
EE5FCC7E3DFCA1C81ABBE956F29D191748D0B81BD74B19EAC22DAD907EF5EBB6
082A2B23BF8F93B684E5BAC5579A7A851B52A754D357B12B986AD3B37496865B
7A9A4375CEB76B0DBDCE6232477D1F39A73F7CCD64404AC251E82C6F8DAF7867
7F5EF9D24808E85FAFD0E1F5896C48AF6011BE464FE5AECC40D2D06F1C862CF7
540183CC439C646458186E41B5139398DC871F0752BB93EF1BCB655B4EBDA6B5
4C21F2610DFAD868DAD4334BAD9D5738AC4A167623989D0E44CFE4BA10984E45
15E2401E139A4B50917FC9262E36D24BC5818D9EA471964F09BE2DA396A3D3D0
8F06653E575869910064A986E1DD00BF6F3A501525A1F34CF876D3D5930ABA46
C8E1E8D30561EE8D84857517A5F51E22F31F2B2D2C05B69E55969AE74CD3A31D
6E5204F3689191D8B2140383A667BB1C52FFA3450E4AD1664CA415168FF41A8A
9773652020775EC866826F5FDBD1BE80D936C9D6713BE0754E62CCFC68029ACD
7516F125F3BEF9EF57BD1AB902AB7A9E5B8B2A868CE702CD20A00546E0F30FCD
4F0F15B6009EAE101A774CB61844FEB21466DEA1115898BAB2E58FB5AEB55BC0
9B1253748B61B4E00C448F26344A7823FB846DAFD3297DA381474AF81B5584B0
54A5EA0689CD091C08DDE499B5BA7BE05FFB352A2D2BB067A3EA5DE458E7C1C2
F1D6F6AE5F0CC7346C3FA6C028254B0978663FB0B71A5178468FC63AE53068A6
4F9917FF908D97D695D8CC1979414B141B0B14ACEA0C0DDCAED669667EA53B8C
EA649134885015C2E04D6FDC463C1510C782FD978B3C7BA6F80A3B750DB063E9
62E26A130BB340B62D64843593E71DB3D4B0D22DFA53E1F5C1162900B5F1EF5D
9C850AA823120D20388F40A973AFE4076DFF3EAE8F849BA114A59423BF4100A3
7F8F180E5ECF0099552DA1C8EEE1B8C7652F1799509D40AF7B4C2C282DBBEE84
A12E90EBDF4266B93CAE5B0DF80E94942EA800762EF0FD0B0968A2677B658477
9D8BB07973F5031BF91291520E8F904FF4D1457D3636E663A26D50B14BD45BC6
5582FCF4D18B97E93646DF2E7C96DEED7DFBE0DEF4A647C1FD20B5160AF0849D
5FFDE75EF2B9C3556A7CE1A9B1386693DAAC701B4DE33DCEB8DC36446FB24D63
F66122E702CD92AA15D6B3B31F1C72FE37AE784561BFBBFF0182B969C8B46342
EB345E5686764B5DD934BFD15EB79AF3C2E49200E4E11DB776FA46ED6F892B7C
921A130C9D80B36FDD6B2FF78C6432F9935A3CD276620BF2BBC8695FA473D203
50A7232F86BE66A788D2098D50198DB6B27A0F5A1ADAB1D363625F98C8E1BB78
87E2F0C3E532A39D8AB5FAFCA8AC4DE94E1F1149E90BD6EA65B8E752CCB24706
13E6D1DCCD1B654AE57CE2F5639F03C1FA5AF9E241C3B1154DD2E911583EF92C
807E049CF6F301BF0BD268A158F53B88AE253EAA43F084DEFF1E8EFDA029FBFB
0A5930150D0AB4682B5B9ED1E0C2DED4DB437E27AF3471329742982FCA8D3761
D129C1169D9B3FC9631E19DAC04A577DF4448944623D77E18608EDABBE3D85B8
2DEDFE4DC124626C1228B9B2F296281350C23CEE1D869C4B895050C06BF987F2
8EDD3146F069085169C476A13C3012BB414E78C8DE5B0D0EDAF5DC3DE55CCFC4
7CE2367572CE60E61676ED64289EE871F14A55D1C83F3D144C3B55C72742DBAD
656CF6320CE66934AB31C290EBDA36A297936EBA8F80BF5B2ABD3536A2450AB5
778BF086F6B60D783D56905A5D7794904C0CB95E2AA835150608FD3B60DED4EB
4951554C574189EFC68663444DB5774AB4464ACF6BB7EB6DC648DD591585A08F
81174FFC8BEB06A4A1B09218D52CACAE1AF790585392D6A44D9491CEFC87B728
1903138B5DF51FB66EAB36AA6B5A4DCC5B738D3F4750086F2335DBF76142D635
E9ABF534D4380E4BBC06F7762173DCCAF46B650947B49035E0DE59B7E2C1C588
1C28A24D29DCF7C575BC918DF1EB8F10A11686D44C1AD9C4592F37010CBE13ED
671368B7643F0EF407E64C8FF8C9E12E45F6931C49EC99D5D48F0EC6A4E93F0E
016278A69D2CA6C5FF3F0ADE1EB42E37C38CF4F5F507DC56D0300B647A719E19
A83F05B26369541270F3285CCFD65C99B3982D3B6219A8B2DD4249FE277C4F27
F5B212999D21D23C50687F8B8D343063014F78BF99A80A9295A2108EEA1D137B
33B1DF4C23904395F9F35139D4BD3019C5B0750F58E4A4A864BFE5EE51B4EA58
57D3F4C438558FD565E8C78B03918140EC5932E79727ACF464295E75CFC63503
6CF27FFC57E0CDD8F6C7C11A67ABEBED27BAC915531365E910E2CD112FCDC615
217D9DC7A1D06EBBC91434536B00B72C7369C7E7AF8F1ABF62A78E43E15EB3EF
3A72BCBF3B2F2BAF4D93E3B4E61D2E0512DF4A03D54EBA1C8D04EAFE5597F6FC
B7B0EA96F70E52B10EC212D258C3CAD121C8F9A620A10483B09CA310083CC6AF
9DC1888569215E8305F3C22E6FBA8E9B22722DD25AE3BA2DEC2A0C9DA68B938E
289D66EDD30965D997D6FFF4DCE02D82496D8A91DB7DB969C07E70F4D2F5C6D7
F44664C00B6ED73303C3813663D33205454A1A4B2D9173D593615C44598007AE
99CD02DFB0FC278B529C5B6D43B55A3F3ACADBA9904386655EC6E370B94F19A5
4C3ADAF77BFC22A20736D51EB85FD2AAE351AA5C1A5EAB8CC3B57C95508948D8
AD8AE124C3E2D81F48F04CB32D17A0451E63FFF6B99EC0CEE80D5FF538EB10A6
199B33F3C1173535E17C888075DCF46BF5AAE5D2A7A3BB79A5E1D5B11D75DF05
85D199E755E337FB59EF89B24C28163F9270AA4C95CA0F58C88B5FB547FA8D8E
2EC2BE15336C1B2C006DA31157A4C31F6306D598A39FCDFBCB88AC8AB535D5E7
8AC26A195589769674037D48BF5419FCBBF8085F81D0B65B2E9F3C1534EB7401
CC7121F82D253B440CCFBFC6BC2310AF7E66F09F04BBC8B01F009D09BAD4E0AC
0F8AD28B1EA00128B2C5D7A50545025A36185A5DC744CE147D17BC7A036D8AED
54591271ACC1809460A8DC455A54B9DB36C490D81737976009F60811385EF294
FE561AC80CB80D8452F4D244BAA1E3B282FD29E62A823848F267A50CB3CDD405
00DD3014D53E32719381936CB0708D33C361A3E43BE637B70B9966664E12EF47
07F6B1070AFAEB2D1AF844712AF0F70DDAFDFC2E0B23C3575BA69F4D7437D9D1
1E55BDAD6163341BE08A9EBD674FA7515EA5EE9ECDDE8DD5AB6A6510CF16E8CA
A48D18DE6EE5233957FB3F215EC34D0BDA6BDD5326FE66ECCCCC22ED4328A787
903E034A2D141798D21C74A0F0666B13E890EF1488F459EC5DD89072F6A670C3
04334A33A9D07A5AC138FA257D9E8D18641C25BDB06BB7A6848DD0BAB0DE0A4A
DB933243FB1FD7F9BABA3201D6F247340B108315E38FFF635A3F57C728E8D802
0D71C1703E33C3538DB8CF06364C18D0B14473491ECC44B826A023137C8CEAB3
1BC4CC20850F9E1ADC4DF1C589CE89B7791F0EEC653B2200DCC3AF4BDCEF6E63
9862E7402954F9B0D84E6077E73AF3EEFC72CB446B6A38199AE388CDF4C98583
36F527238EA56E83A2A09C7F01635FDE9F3BE071948B22C77DE2A91BBB8AF301
A43B7B32C3877686A88BA6A686A2B77BB5495B80492760B19CB5D3F27D47E843
FD27386144A4F7393C18B2E5FA8CB6622C572EC1299B142DC8E41A378628EFD1
4F41F5C4953C04BA16B8DC48EF37130C5B5997E4562CCC2014414D96BC35B012
882ABEE02433DF7CF95A00E8E775BB3134856EE73DBEE0069466A1B3D42D3E6B
B7E2FD58A4883F8AE9D210CF36B6EDE8ABE94C8BDDA908C412D1709B7BFFE9A7
06788F2BDA3EE9970123FA7FC83B1751E4077B962A79ABD230CF148457FA16C1
8A62FAF64BA95B4C9AD2DF591967138A612BAFE409434C5A94ED63EE997504B6
B18EB3B25FB33C43E536CA19303FF6FA8BF063694BBD47E2EFF06A829FC53103
1891EDC71A47F2AB39A6012AEEB0937B20FF4C2C324A8A9078CBDED85629A2B8
8D7783BF42E9924A576FB31AACD37CE93077CE7CCB1220AAA2CDC97AC798D4FE
FE2F20EC34DDC345B18710F6776C75FDB53EA802DC2653FF227765E26C9214A7
DB6C9879845088B32841FB4521A97D4644D6A8119DC2FB346B63A6444A311CED
27BD539F7866D7B3B8321F24DB5274485AEC7B63B1A63307494907D3050FC9D5
5762ECD61B1D07F60234951FF68AC24D6ADFE3D9C2D6FA1B915AAE99C976E71D
9214BE08F5422280AAB1016970DC24537EA96231CCB901847E49BE403465E9F0
918267336E1CA7678B23A7EBCAF98097861710D733B5510790EB163068EC51BA
0E3B73895A45C136704094A97F5F335EDE9C9382900535F5320F630BA5F689CC
6D91517EA4B3FB0D74652A91073F2FAFF465FCE050524F299B22D35A6738DEB8
9A083526C79010E937DF2CE903A7C4D6C1C00D139F969AFFE938F608AF10E3B3
1B98C36E5AAA15FF955619229F107D0A7754C4C27620D6CE5925909FD73ADD3A
A837D8197EA627089D71EAA4E103C8BF03E66F3D81BD5D0C8224317BE91DD624
D25C17C01C6EB24F8BD7671E83F0A037A2A7930D8CEC27BD050B78ED02FD02BD
6E8323A8155A2B4C4BFBEF1E1A860AC2A2F2D25C1BCBDE1DA0F70EFE840959AE
F3E34287BE6E17CA0E265ADB294DD05C0A93C2BE6091FF0FC1F756FEE0E51A3A
5197A31D2602C14E1632AD04A6AFCE6DCD75B61DF84FFD2A7EEAED736D45E3EF
92D7AA21255F1EED2FF038407BC405811DD0A0D346AED70EA59FABA7039A4997
09F7C85F077150B88634666F2EBCDEBE0CB0CBDE736DC50A51AAC9346655A3EB
3FBE055BAED0E397DFD15A3A53981A5F158B492A37527B433C0C11E5B9A2CB4F
747C7CC43D73432B880C4955304585D8E67269DF8CAAB0A355F4262760E017A8
57AB1A921E3786D8640098885B9329DF559EE4F73496FDD2B58F8B140D431C00
818B57560C08868F0F26B2DE3A8A834CA315127D73DDF5483242CAD88E2A1CEC
71BB6272E685C5F8A29E094027AC88633AFACDF6EF4E8AF2195B7896A0AC11C1
9D1DE647122C041B6A6A0EE70BB7CE812C67FAB6D0CECBB43B5EA4CC8C776FB0
386158298F547F2534EE5F60AD32CE002FE797B646FA6E4961D3EEC19DDFB54D
8F6EF6EE3500146B49936FBC8990C6E60F8BA36403237D8D298EACD96F05A5CE
35F399C2264540350C9C4105F867E2AA3F10C3D702F82D9913BEA9EADBAD6D72
6799A0D1871F62477C3DF072B8F6BA2248B5571F3EF4ECA82FEB04C3A6A0FE09
FB8F1B6B6938C8CBB9468016965C81C7A1D59FD1C7F22E621B0FD862092C5D24
CE3B8037AC8FDD3EA68783468C67C7640CA3EC26ED6581AFA8B6A0C6C450A150
77ACB44A4138C528DE354EAB9F5E23F624427169C9EDD2151D7A6D811C66C679
A83E7D6EE63090EEC569D8FBEAF4E5CA52AF81F8FD9A2F7701F2107138F9ECC8
E5E4F9095D27C310BB63F6B1B54516E95531B250C3F352B68B3A44C5A4EFFB38
9BDB3028001B9E8FB902DEB084FA4170CF621599E3A9547DE46D28074A54E078
5BD51DFFE90077736717DED0EA63D6D55D79563CC2D2EE272B069313C4F83C1A
415D17BA194CF38ABB5318219A0B53F6D1EFD63D07D1AC0A3728D93B33AFCC46
8C99A8771958C008DA29E18492BF190333691953717193371852BDF637C110EC
A86E6D7058108DB19CA055E86D8B7303BF3EBF660879783E563E5FD42AFA2871
59D0F57357F4F5AECD3FDB730F5E8ABCD0F27FBE6382282FA95D10FAA84DFFE9
0A240EF474ACBB9E6B044E495A46D0F84D580E64A869F708EE80E4BA2C0BDB76
7B0B45838796FEDE5D81709D1B3AC99444E7C55F697AE2C173D2A71C5E47E6EE
3B813136F26CF1BECF1D09D627F6F7FDA5DA864C0C87F694ED2937E3C2EF8EE3
02DA2ACACB3FEC5DAC77C9B5A9DBCD821321A1DDDC6B39335D4BAF2243943EB3
E77E6CC38DEDBB2DB8BE7778936B75E437D18E559DAB50A977CF474EE1410D70
97785D120A355D2ECF3E3E820C3CBF690D5A6D4299765578EB49D191F1A4A8E4
08604369101BD16DB8A70A7E46F92001D06384237D67F4E6D9031F874AC47BEB
4E84870290E8B75E5CAC97AB16CFFA3F66FAFBD0B269C85A2743EA914873F3B7
EBD718248AA3FA53B85D3EE6DF698FAC50F4169841CD4E0B13537A1FF73F6FE7
49F9DCFC157DA980B541F0D22180BF5BBC0BC5AFB42AF3076D7747CF864CE33F
5C997211E5081EBEE922EFA8FC9237938FF8642BD551DF6E19A3D52FDFDF331E
6D047C31F0AF1C2FD75C48023CC0FB7B49A95CD4062B72854A0B8A6ADE15EBBF
D5CD2BA9FAB7E75099FBC6E28310F3C4521DA28864D735098E4DD9DA33A4C39D
0ED0347736B514E7BE15A7FA69E91199894B87E6795001F0A6B9950BA68FDF67
6E35F1DADA9EAD1358A2F076FDCA34B0495E894CB49A374F2A0C1638A1086E6A
23E774AFCBD2BA61C6A6BB191DA2BA62BB5A35FAA8D4666D3212BE0F6797C0AC
43019F0A4C553C7E8E30E2707B6840DD148024FB21333E9BDE9090B18D1A0DBB
AC7C86DCE0920A5CC1B6640BCEC2F8D0478935C577AACC40AE9CA5981EC5103B
50EFC2D47C7B30D49E9AF13896E2B6064AA3C3147B26224D0D2BD4EA600B1ADC
4C374C2B906FBA38F8BAB09E1C98BD1D25AE7E02C38A082ADE07913162B9C583
897864E59CE6F46F213B0EA52186ACFD0CB60BCE7A4975433D1ACFD965F3C47D
22B2B8E48B72F3957EA1805B978529CE833B1EECAF947E67DBA702C9F1E67540
8DFCC7E67C946531DFF69669CFD455CCAC03BC5AA61E97106A29A46DEDC66F6D
3730B41105D8856E47A6CAF1CD365CE402F2AB98BC3AADCF4829603BBDC3E165
7F5F1463ABFF37AECD69BE9AD7B87EC13DF7B663625B20EB34E4F78CBFE93404
B296C0238912226D571F03236472A747A459E1A0206B706274CFB2E5004AA42F
8B3D78C328DE953F3494CB99CB209FA97A20E05E0279195657A47A53B42F2977
1497E9F5AF68E2540408A7119D71F87419A0D24A42CEF307CBF1945B22B48B2C
F10AA78D17D0E58FC9ED82BF46CAA6DB62C207FBA7E7D0E36DC8D2F8B02F89B4
29212C584FB9461A52DAB14D19C3811184811E83C732112C6ED49055201E3BEF
7AC39179DA8D3133390D1A978EF8314E2322C457EC60D8E2B615F6F492F8D3AA
12B7E2928E87443D6FE06973253E459589F7CC9A7435EA85EDFE725F6A4B8E2B
50231FB76AD8959D51F9715FDBB2746B06AD40CDC5EC668AF51E316EB3865272
BFBD7B9FAC1F08770A4FFBFBAA72AEB86C76B2A69D59AA76946FE0697197DF00
EE94F990F6AE462A974742071BEAB9656842237EE2121C14F19670643F796EDE
2A007078649B5010951883B78DA70862B10BFE4E1F7BF2BC995A410ED28592C8
7A239DFD8824F52E1500FF864C90EFEAF3AAA26693B78ACA7F294174CD21E497
A9D902687A3E458E43E2D8DAE02ACB1783FF4658350676B2C4890EF41FEA4770
CCA611E5A825B9C3BB620ACC354D47A91C3907C9F1C172E1E5BB5384C8EBF049
8AF2812CE5E830C6E32E3B1310DA4F4E4DC188CDFBA89C7AB3C25F20B5EBA6BF
3CDF8ADE1C03D95063E557FB1C02677208775D309A49BF7E9B2B5B22CEEC10E6
49E80C99EC9B009467481D092767CFBC0C64684B653A8BD8A3835CCD6AC2D08A
A29C91C527E718592061DA48B0B5A9F2CE6ED9C1C20F0C48C876B16E9206D73E
24E5E04C6EA5F99603A579F5B4C94720F1D16C34A4CCA92DA15D95E925E9BA08
CE5CC18B2356AFE80D145F09B87C961E611B0536D197DA44BD9FA3450052CE78
12189CDE70488DC94F820B6B351694CF9ADC3E3F0D2255F220536ABDFFA429B8
C9BC29434E4555DC2DC5737C8C1F8F2B0B07A707B02FA06196885FCEEA5381D8
6BEDCA0DCC14331792901E33FADE64F72EDE73CCA70B8CFF47CDB9DC5C7C0AB8
1F2EBB0EE3359AB82993837F56CBD7201682A0CD56E4325909B0FAFFEF18E5C3
EAF6B6B318913FE4FFE3094354B10FCEFD865CB51D65DAF80E5F1CE057E8422B
837FBAC8970C70147753E076B788E6E86963904E96418F22164DBB5A2E5DB13D
CE518DD376580FE5BFE1A7FC6B77CD102714498E665E294D9E2736CF9ED51DEC
BF7B799B1C3A6E77B9C1E0683BD4459037BB64F51AC3CB50DC2C05EDF9116B0F
97B27345AA83A968D22E0BD5428CD2CA6EA93BD65EE1EA6F4EB9DE9AA43DD387
76B3E05B8AB616837966D5C9F257DF97B1721E0A2A7FD271FD8B4E500A7375AF
6667CFC4676E6BEEA9FF38C55FCD4343CEF0FCD290DB9FEFEFDDBC6295F5C432
1C9FC09236B8FA35261638BB1D15B132D9937591BC5B148EE67C38F445B08FAC
37BF35E51787BAC6D00E91DA0B5A4B818E2E47593E450D5D711C2926ECBB38B1
7FDA08ECCB042B3204D4A33DB2D83B4788A250851FCAF14E43979D2050F4ED4C
EB786D02E90E1522B00382B6D409E6612A9372CCBC871AEC9132EAA40A0FE8A0
3DB8FE38485B668D5640BB41CA08AC5E2C76DA01CA924A61509FBB7D1A1449AD
47E1A9AB074334F4BA1C3A19ABF1650A530B9F43598CD2EC32B466D21C9B3F4C
7E5AF95830166E3A93EF6B41E0776E76C110E729849E721FEB913CC0461E217F
4EF82E356922B573F2955194423B770B45A91205ABAFA9DEBC9487B79886795C
3666244DEA36D6F8D42AEB5E9E28FC52725DDC399D1ED1CAAF2F04E878051A6C
198C74F39BF27FE31C49F374AE29B3606BD1ED33D924CBA146C2CD421C09E65A
096396CA62ADD6785112D529712D2F5C04F8A643DC3C4964D3677F9CFD766CD2
CE6702A30C27F625F8242E2A611355924E0FFAEF1D24A115A70BF69AFB8922E6
F6BEF0AE2E7D4A11EF196363BDF582B68620747044E42F8049B5A7DFCF122F18
ABCC0D24CC214552387C29DD1759EE2474A738FC01D817151536860B98582939
01A02731DC312978F83905B1AA4A21693D31CB3CC7C96FEB2B6E8D9FA3CDFD93
1CCC69ADB76AB9C15C1A6D84224B43B128947F030B686C753A506F1D9368B1C3
9A619B95828E89FF9F8B66199072EF8D2EB738588B3392693ECDAEF7E7417850
98B2B0EC620F631507A31CB78A249168383B8EF79D88FB07DBAE4876F6E6CAE0
26B57A8E2270BD106D091D7C33936F47BF7813ED64059141C0398AC93942EF97
C01A8EBDCA99A42D84B49E2BB0ACA862A8C795E637DBF853DD069C2059569260
7D1D1DC62DA29A8EF99A6953FFECA7582B985EEBD047CA7E8892BBF6CCD495F9
911028795C8CFCBD977F9934FD40FF86443D3D689570B6EEDD618BB4EB0DE64B
ECD946A7233587026CE3DE59B85A1272A4738097E5827A5B89299EC00BE5C269
67C20A24B9856E1ABA3CA1D563653568EF76ABA77F829E3F6CB40B74B5264D5C
45724C4BA519AA34F5FBE39117D6B9610B6E0CF93660BDBB489F19CD76A88EBB
9DA6BD5F5FEEE2E14D5467F47FEB791BF87DC8239B6A004B2415598E1470196F
C29DAF52E2A8299217A57AAD6318059B9E3704387AFF735E0BBF2D38E8B49287
1D35BBB0F1830CD6A439E14EE05E3BF5A2DB7D4F38E9D6070A0CCE97065387F9
E3A873E4099280F03F169144170754C748E265256C348ED8705DEC043D211F55
0213AA4C03973D6AA137CA2860D97EE9008373A972ED304A5E56398C2BCC510D
DCC1007AE087F9FE79AF57400400F185FA99BA638F1EFBF2D078B414D190C647
5597687229052C289F3FF4038800BDFFC20DFA02DC02F7DA620EEE478A12D8DF
CD5081564101049865876F2A2D40CA781F3C47C0A4F9F19A29FAA73A00968C55
B7855A09EB8390B2BF4E66E9A0F926172B8E50CF99B7801DADE8986FA932D125
A4D3FE512D30EBB8F875CCFDAD86FD673794E6CCA69885F0661028A85973F16E
581C9B49D8471338A26DFAE45C0F23535EC9C352DC8195182BD792B308C84AE6
354C88727906C65318B37ADCBB52B79035787CA8A44A61DCD8EFD311F63D514B
1C54C7DB191B4CFE0CD88003CF3B05E5C388932F7641BE12A83699699D1DFFAB
B0771DF9786B27A6109878F8C7BEDC2B2C1EA74144E743A6D533E03361BFC309
B94B418D6C16A17AA4AAE90AAB2E0CA8BF102A54205FC77F1ECC4AC980FFD515
93CD598BA68023253817326762B06B724D32850236BBE18E07022F5F6F0A0A0C
E7787F1BEB11E0526116A9E4FF68D4D5954958EEF6CD7FFC3DFB6A7E1A920812
E762A5801D1AC69871B7671F1ABE869E4DEFA8EE1D31024457323D28E7C4F5B4
57C783E119548B6B5E0B1055DF077041C09A2ABA7D8229BC82176E2A0185EE2D
55C9D6AADDE6BDB1C3A530D8D3C5B0B0735977DEC9027869ED6AF3DF43365D99
8BA29E63C64A862BA240B28DFE9442D51C312DB573060A7E73A576CF8B3330CB
700E94C0C26983562885FC099F6B9569D00C2499BBCD9B36AB0D4B390A6A55F4
BD0DF25E71CD5E061219E70E9884DF1AC7021058CD11D2A16239EE241F763C60
96E9DAD513C7A63E808703AF0D809ECAB835C6E65599AF11E9AA916DFA3C2C1A
4A2360909FEA803ECF9847D5A0ADC7ED4B1A890A21ABF2D02FC489A160A6FD62
19FC44CD0E307193E4BD081D3A9661F6159AC2F748AF58ABAA5A90F01B76420A
31E07987EEF8C6271177A15EFA70535E00AEB7043866D037569345F676ECF8B6
7B9C190C22A7AE45DEC417342B1C2F89D2560DE534678FF6C084E8FF831D1E01
F178C82C3083EE546330253E8941AFEE58C909E805E896C017BF3FCED8EDB173
32073D3E50EE934563FF336AD3D2D2FB7CE5DF180EB15E6ABB7EC23C70E920FF
9EE903224FEF76DDFF4B2CB8D87BFCCC855867AE96AD57289845BA59A34B6384
FB4F74D1A10906B325A2B3CD7414A67034ED43C17E93399C29AA72BC7D663A1D
4EAF5F3DF5FDA8CA282FF49842931AB6898BC170922DFAB9A176E41C2D804DF7
018142A5553575C167C268BA8DB757B89165167D6139E83BAE685BFB0F43B410
4CB823EF574BFBE3DB963EB1AFD6F14F0CABFF16960CE9E940860D7AB25563C7
BC54D04C9DE2A1B4BC909FF70182E6C6309F81090B3AB95C324431A2F719A106
6B4520A1950184D9147D34876F7C7632A1896AC2FBDD230273695CDE072A09C3
F5813A6C1DAE5335F722687DB9CF10CD88863E58EA5F31847416E84A3312ED85
9B17F465ACA3FFA204373768B4E0B3D3D6D5C5D6C37CCA35789451D27E926223
38E1E19437423672A26BE95CE2E0128695ED345AF3AFA5BE831CFAF51E01C576
65B6B472D3837609806356AD15D791CF4C3F8CA172E48271C0369FF08704D89F
72B24D6304D45B46FC0A48E9CFF9A06B1E699026E2E5F064768F7E0ED44D117E
1C942FE1D11A8520BD4630B5CF5727AED06158E3C6CC959FB15A005EA7CAA9F4
B15E040980BB509894CA2836C2F7DBC3F1C22EAD78C98B774904EC4E7B14727B
086F2772EBFBD747337D92AFC9B1C3BCD964DEFD8B60BB7D8C8ECE13CB258A88
18C1ECE48F3B1004E144B958DF4C577CFE3F24D1566C50C19C211DAF19833F15
B65293302DDCC954AF2C320A9CBD5887FE17B97AE4E5007B4DFD496F8CBD9C4A
3D43A69BA6CE36F797BF7A7D01E420A257F7D29DD8150917FEB686121BD3DA14
52D39A3D986FB8EB5782B7E4E3D20559365F7ACE2FA8F5AAE916903CEC390391
6719552AAC2020D8E46AEB120E671940FC644DAF4294B75E8609FB1C98EC4E1D
A1B6C4F36E5E50FF2012FA56B478A57F5EDD7A6BADB4ABF03133AB09FB135F8A
4BFD8D515F6BE69EED18E0E4FD98A0AFD625243E5B81EE831EAB2101ADD7547B
1D4914AADC72E064BEF93C5EDA47CE27F161E0F13AEC2B95C7B59AE34DC7FD54
AE1FF748C257765C4801FB761A8BCA7738EB55D08D9764F1ABF32CD7EB7D62B4
C24A0D0E44CD3A74129B0234203BFE01DD72405B2798A8D0C3565A64EEC185FD
A2D9B62C6EAFE04CB21BCA9B984351F5EE05DAB58E92DF166067385D6EB67194
98654BBE2818F20CE6F47CB003BD759616CEB516B585EB35BC2A21A0CCF3DFF3
B2215916BEF68BAF7EBE7B82E65EFEACA18116BF3FF8403B8E3731A28DBA58F5
3BE8F5CA899948C2DFB2D194E8513A59001836E66F40462F5B7405848ECA7B14
E0204CD510892E549B34655ECC423FD685FD6E0AEA1D5CD7CB32666F03A7CA5E
2280D97CF10ED8E1ACE203D24017935475FBFDEB19B98ED23DBA03FB43FC00D7
4C2B84C52090C4772F8502DD9589870BE1455B8BBCB83DA18E371BEEA3273754
048A115661FB8C417FAC459D363909559870421FEBD6903642C15D6963815F53
0714BB290B7BDC50E6F576CDF56B797EE2971728130AB9CE3F446623BB3716F3
F95BFA4B5C906CF2DCBB9719463745DB81E24B2BA71C42A5D86DA94E897393DC
BBE2D324FB57E6936FB0AFC41E22D216473C7457EBA028C482CB04C681A0BDDD
C1C64C09C7BDD0598AD4576D28D037B29652E763300876D93D745910050479FF
DC2208E99C63550BF1D18E858E516022F7229FE3741D65CBB676EE5771B7DE5A
B20980170BA2D3AD850635E9B305276460C8C7781A3BFC7E27282D2047AA707F
725CCE360DA6789536D912DC1538F8EE73650B4A7CF5ED87DF80378A9F282AF8
277E536F747514ACB8650647FEFB8C5C52A0F8DCB80383BBB42F9A095DE002B3
5938BFB253115173D4585A168B3975893E1B15A65352184DD8F16D7EFAA7A5A2
96BFB57D539141B76AD4FF8425B53AA68C85344F8CF5EB511BD585A57586B2AC
DA832CD6120D4B91B8BF245D6ACC2D60CA0D2AA69C1F7177D9387A7E22DA469F
B1C5EF506ABC8B2345C75B1A271C4724FD55B09B4B6A32988D9D3312D2315C35
BCEF5090B1C61620213FF991E3A022CE1B0930B776D3436E3AE536E51C9FE0C0
AC9056FBED943047C0409CF8BE5963F29FD09235
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic12-Regular
%!PS-AdobeFont-1.0: LMMathItalic12-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 833 233 0
%%EndComments
FontDirectory/LMMathItalic12-Regular known{/LMMathItalic12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic12-Regular)readonly def
/FamilyName(LMMathItalic12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMMathItalic12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-31 -250 1026 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD11234369CB38BBC21C40020C4E57C
950DC4A5CD271B5530E91DBA55EA1A3BF584D9405556EF9C802B109FF1EB2B0F
C350D7F091E7B613B08574EDA3BF27099BC2EF0E503A4C4724614A73AA054756
A503BEB31E3FCD96F733D0C5815847DFBB66DE4968A9B389FC00C2146C4FF68E
076BA8B3847A3D8237D36A6BBDF0096290F1BCD02CC66B12E0070215D5D8306F
406DF7590940DE35CA0854D3609249AEA4EE9D3D377A7996C1CC2E940132A90C
F633C774985DCAE8E9353607B9059DD211265A0A346B1A062D80C64B5802A750
D9FEFA3C9920A3DE942C65BD08060AF33C91CFF62930F65F9A42F70B83B0E077
E169BF7F5D84F15D59F8A74BC2EE4A7F3ADE36F38C3A661F4CC9826BF73D7F02
D3CCC267927CAE22B5ED695D212FC3B669F9BE369B7A8D325C3FB9D552F175EC
29972562517E91E7B8D570612CC50B1A5CB6B94D030B0C60465EA21631F7A30B
44A47143D0C2F942B5D76384B8C3F2F197BB3646CBED3DEECB6513D3AD460F49
4BB874969A3663617EB537E75C1C1BF92749F9D147080EFF78ED285C315BAFA7
D78B7B4B8B7CFD1639EA303ACE986EDEEBA9350F92529C47EA7689779BD50CDB
D1B3A68B383B54B51F4FD77D6458F15AFDAB471DEA9909CAB29840091391F2EB
148588D02607411F2E802B9CDDFFEF1C1FFCC9EED0405371651ACF30808E8C57
682B734916EE806703B2ABA2F6910E0C75BCE10A94FDD1ED3E4FDA7857341427
CA0A4F7D30151BEB8E3D351E1E100A8A75959D11122C83A5C0C4C87214413B25
A6BFE44A42D446E9C4AC88F86B07C1097F9C5C5673B88582CEA8CD622F9B0C79
E463DF7F2F4C6640FF3852BEB520F7B23D8A22E7E601EF9CC6D0A2E6E82E6840
65B82C6A3A6692811E2B4F57723AA3A6E27076A2F63D6CE1FBA7ACD844E732FA
02797B386F2EDCE9FF9F84EEAD17B366D678E61C6176FEC09C94B74DFC090CCC
40AE9DA65E5DA02E7A7E8A840B45B752AF11A279BA06F821525DD0F477831176
84C80B29D318260FBC314986223F9EC4DB5B0EF2EF5D424C6DA581B49C709E1E
98149FEAAB15DFE7F94977CD2041DEBCB1FC8F4F3B288515CE43713570027C3E
2D68BB99DCDE2D950740A8EC16C42EFEC22B34901DA9B302C7B6492ADCF1EE4C
8C8D102B0C81DBC566450B0EE201286021C5A953D8DCCC8637FA5C02E813A318
F739DDC20785E785D3E86FA49B6804313BA4A5FED7BECB1EF153B7E79F9F449C
246733E425AA6317DAA66604633B159186F8846CAC78A7DC80655064CE701177
534AB9CE3BAE1E963098AB8D279E04AFCB278FB21D39FA261F6114F8B2CA9F59
2FCCC9EF455D0F5FB495BCB58C5B468DEB5AB0E936298944459EA5FF7288E68D
81F5E691E8BC05EC4B132636BC7FC7A6B28D151EEEEB5B9D56AD7158EFF560D3
569E5EDD235AB845ABD19E66502FB01BB3684D274B6896EA3FC50824B6C86517
9B3FAB830E1EAAC293AE37EE0993D38EE8F6158A098CD4C026A95D677617CAEE
4CA4B282C8E1B9A8AC0BAF795333376EB4C186DD1A8504330449B36E66A3A2FD
7FCE95CF0ABE55E0A16B98267ED83B673662CAD637B9FB3E77A1914F418159EB
49C4815439DF7F456997E2B9210278970DE9CF6919EA3E027E2D73E8CF8FF1E9
9D5CDF7D517D261C603B834BB03CF44D183D0DAAEEF484C8367D0421A6827CE9
7317F5329CB570987FF8D2613D6FF4E4695BFAC868562C58D6008B66C9A99A7B
6D1308DD9C414C58DB3EF7DE91147FE91F51CC41BA4B552C993AFB39A2FFEE79
DD25B15EE25718FAB75426DEDA6066E01480F7701EBE65B3489EA1ADE99EE8BA
F828FC6A9558EE5EF2B94E412C3E88E5E561D194EA1AF0A8EE76D79B6E13F70A
A384069131C342FEEBEE4DBD141DBB126E012406497E829A0090F48589D895D3
1B00E8DABF81667BD6F73A817C62B6D9BD1D20BE046E63F637D9628328B14776
1B7105197AA0700E5C0A1A543A7E68EF2C3F555A3B038BAD2D380A11EF76DEB8
444CFB7E53F808D602C0055392CE6356C9285BB14AF4CF18305CA1E2959BC4E5
02CFEE2E8E33ACE1F665EE30AE3D8A6FD8E32F1B23DAE7CA267896578F46BE8A
BC18939CF4A5090FB17C1F174CB15BC26E9BC0A6D209EC4441DF47910C6E2BCE
9C47F9AA44FAC682F3C28DB5E3DD3F13C4041ADC5F52005EA07CB72BCCBFEA01
48283EADC35A70E43E66AEBAC3E46496D7289FB51CA9E875423B3CE13FA5E016
D0D3D9E9A95138859A8197FFA47E507EE6EF317C394275A8D4EA9E4728E8FE7A
40446F9D2827C6787EB8B909B882BFF8C3AA5D2250CABCF047868EB693B14CBE
659A63F55D9742F877CE7E410423A3216557921404D20C73481A2F4E805099DD
20BD5794C717EE522FA72C5B087963882D97673A70BC8428464796A32F805BBF
BC33119CD5D8E62F8377C5D82228A074080213C2F9FB830F5AD70C3119180B78
C206677AC4260AD77DB005D835B04DC328500DBE2E66A622A421D14A0B49DEDF
A9B15A961EB62924F76ACBE7D463FC7D32096C6A7E4E081D61DD7A3FD9373F9A
74AFDA4B5DD9ED6E3482283ACB506A2D6812D4676F3F6E458EBA443764E6A621
77C6EA6523F58F5AF3BFAE16AD4DEDA3D4471ACC51D8CB419CDACD1378F7D163
AF165902A8462F871D59F966076D05A43A815BCDE9ACF52ECC99506DF96E5FF9
D2C80B693FE90EF6723BE160BC84D0F56D2AD9C30F1B2CAF4126501FB987B29F
6E6580A6DB94D8DCF5841E1C5631B9B500B8C97DE2C7750FCEC98D08D2154E9A
B4A35A024C2E8A1447D496A2D61BA61618C7C6B9DE408FC5C7CB5B8623A4E9A1
C7BF6C5090795D0FEB27967DEAA198638F9E49CD06E26032EB615BADE27A8F1C
3387DB084F6F3D4E4AFAC31165EEBD9F0F4706BF2707F5C61B8905002037EB3A
28DF08BC2F46142CD2C2151787B639110C12AE1B44552E829237F9BA62B74965
A6E861B6A448F677202877DFF1884A46659B62C48F67F2CE2D815159D48870A3
A105AE3978765A6F5A86AE14305682CEC27AE4EB4EA65E04D55F9D52ACBD8BFA
6838C570945D479C06468DEA31D9E6CEE8A4BD58B99AC2614BA8BFBFD33E4CBF
1CE9484BF4E2C5983BB0D057C8F0C81CE7F864789D6E7118C7814BEEE1A5127E
0B0016AD810FFD6F12EC9CCC2888824F945147B293A6AF782FC4C29688C424C5
34E95DAFDBBEAA7A63B02796883226A9B0226ACF16BA10A2826CA9A6B585B703
4401560075C08CFDA386BAAFFD1F0387D531B989AB58378E8F95A13451A96B91
387A1C08AA4A4D95FD034171CC79273B0E1CC6081E1437DFEAE6C49C2A9072E8
23B7C7D658BD19BD98C88021163EE8B35068104B041A1D1744DF89C129AA8FD3
5D0056099D92F9E425A630A2A093C5103AD3E6EB5A2D83BA8AF70F73A9691A41
64C82516FA59D55EF6793954DF5678AF58A80362E498568332C341BA3F47FCD0
F828DF62817311B637661FBD7E353BF10C8C6434D83C9A66FD5A1D4FF37441C9
A075B955D4BFE0F3393655A9341FEA1C0D5A576D3B7553DED63A290F946D0CDB
E6F713F6F29675CC38F52397E82133B72221C4BA15C44188BCC99E134D8E3386
837C61F20D48CA74076D0867C303AC75CB2B19A156873D46C91B15E5E7D8882C
B813AB5643BEF56ABEDB1EB427D25D97FBD5E84BB3628C0614C571D7AFCD579E
DD556C7EEEAF7383CAF337CDCC7095CFF48142B75A6C9EE307D9B79AB3564245
97950BAC0D203E0E5CF6AE2FB4ED2DBE043C788267D3DDD575EC80AB3F2A4667
5A5AF890E905AAA843D261D13FAA3ED316F4A308F5D7F1C7148D64385A1251DE
056FC948E753D3E19BF717FFFE950C953018A97A771E7BB0FCCB3510BD85B7E4
C5F0E783EAA80FFEFF057AE03AC2988D8B38634483D7E45E8E75FB580C1156D0
59D338A98C95A35740F3A73BC5D95581894B7B41827006345B5A6FB17A86771D
A428B397101A3E9201FA87F349E296CAC8679BE0E1AB1D786EA6F4680936B9DE
97810B3A1765949E1FF03EC9CE8B7A2834E726F3DCBB29F24D8823C69471EEBD
54485DCFCCAF205ABF21832F2D48F016ED8EAEE74608D5C85F94AF0EBDAEBF2D
35131BBA5327126789E0AA68E0EEA9DF74CF1D041B513E80DEBAE4726E757A59
333998BB7AFFEDC0AA80B47EF9AC0EC553BA22DAB25CCC8B58BD4E31DAD2A1C4
5B2DCA31328865F4E9E8949CB40D2F0880669B132FA050CE7D23DE224C55AD5E
87D464643C40FADDA78144C77C068AF7AF0160C9B4536DEE10A85747685F3E69
FCE49E8F40E87EFB947F6EF3A5664F57A0D6AE7CE889C98ACB01A13E494A6D8B
E18E81689EF86CF1BE8E4CCFE7848F5432C238FBFD8C26866E8147F2EA19897E
8A2582F6649A19745D02BA3EC27EE3E867129CB237A97EAC7B1C77DD3EA3F4B9
851E1942909171A8C758290C99BA27465BCD7F113C2FE2692C6C2C36B9B8D0E8
059D907CB7B6B9469914EA5756383EF3E51C800069B4B17996637F3F617709AC
A270470781A54AA17952D48B38EFD52ADB48D262D874832407EDCD06ED143686
E8A5E6C8050D774BFD01A131502CCA359AA8433CEB0C6E68A8181BB9F102D328
CB6FCE6BE182F2693FB4F3A46DE017FB88D1ECD4ACA57C001CB804DC21D23F3C
0303C69386A8FBA81ACA88F84DBFC08741235D6F39FB871033243EBFB37B5CC0
6AFC8A9F7074641E8F72E7699754F6798BA7B822E6A7C51576E60E36CDF92DF6
5C1F036ED36360CA62249833C7B65A1B3A0F47417E98C624FC36B0A9FD9C2B55
24CF48E4AACFDF2FEFDBFA09BAFFEBAF8FFC4B6A0D66D1701CF244EE12C2F289
F37EF0AC9143A7010D865700DB10515E8533226F59EE5A7C3C9ECFAEC9A15A62
D31167A9CCF89D6341D14F5ADA6FB7CBD993E25208D8581B503C629C5C26C184
BAD23950B28C38AC510FA86F64198662A9F927A50E58D5CA711260C81CFA05B7
06577DB8F83BE318B682C7C372BCC3587E54F06917DE2F5475F5A8996765B796
DD6EA11A5ABD6F2C9872053FA563F5994A855D8BACE98D4FF8BE78BEA76C2B26
96D3EF7708CADBF78A9B53626575D47044C31923DEBC0C2495DEA75E15073032
942B6F26E6C3A14B73997740EEE16EFFFDCC9E371E0E97B2D583229EB0592559
159CA1135B1F3DB500FE861688D47BCA3CA1F2EB75C667C0F4329B730BC0DF49
221046DA577D4ABAA0C5519A36139065924884E4219BB2746C7092443A390FD8
02686AD345BAA38AD5FF75AF9BC21FC52A64AAE68196CDA05DD0CB4ABCD4C94B
4FF1CFE8BF037DA5108937752734A92C7E0300B0AE37AD0227E11DB4026137E3
EA432C989705AB02E522F9C565ADF5271858970DDBEBA58D7185833CE67F4043
5C0F37B02C7BE0DDFD01F8F19CCF1D2296B67D4148E9C0C1EF59C87A95DDB296
77235CFC8A18BA1EF2A7A5DE811D8CC6C25E204030DF1FE6ED9A515A39DECC6A
6CC60798DB3B1E84F53DD78C94A0CB02C0B3290E4C240A0080DFBEE9253A18ED
049852113C76BA220E6F934F53024260F774F51294207C3EAAB5696F6001AEA3
E75BC1361FAC4C9DA6DA79568D3B69F26A9F341218A53F50937C7F4A4AC52046
9C8F3891E1C20E436CE31C617C9A983AB4CD1338827FC32666D98215C7C86883
8A162C4748AA2653D4C1D8163B3703055FE1DABC7C835F28DDA539AE49A9C09C
114FA80618034010E43B3A6D80AAB8F8CF928A1E0B4F8A01D9E72FB59A3872EF
BED597E3BDCB80F425A815D2EC5E172B8110F3F3C6F1185C8BE1936159FC278A
412DC15F539CC8A3B639CCBD02E82BD2F013358A5F45E98BD4D51604A06C5182
F62F4EA4DD88D5321377A7DB797F9926B8E20BE2525F399624D9BDABADC85949
B5BACFAD300E41B39AA953BF0064FEF222FCC1944D44609E13D8B127C8C0EF84
5C7598BF859F373262A5FA2A56E07AC6D9CDC9F2EA41B75E78F067E1CD486CC9
2F5B5ED9507BF12B9E11E59C2B6E8F8208B5CB726F5F9511D64E7F78D2A1F236
F328CF65DC0F4ED2B733F1B86A341BE87CCF2FC46276D4E76AD9494C9E45A927
488229B90F6A747EACF058DC946A0DA25157B2E809041FCFB3B8A56729F8CA6D
11091317875DEA3A8BA409835290F0B176A64C19934B474D90129C7C5237D659
B8CA3EDB82A9CBC4DC1FA8160B080469B4346FF01C94102B7B47B07002E18151
D7440A6D377FC43BF4F3EC101BF53298C1B14C6949BA1561BC2ABB8F6970F858
2BEA890237EEC52BCAEF3A9F1C2AD5FD9CECDF375539F237C5E77D6EAF271988
517254A1B9C98983EF27DD799CC6B58ECB6DDDEF88685B932EE6BCEBF3850DA7
E617BF5857EE4971A72E1E1D643AA548456BAAC0ABDFB11B1C1519957DA455B9
C93E937BFDE4CB0BE6B5CE38E48413B46DD8E6837E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E752429B985F23EBA0C9875AD055D8B1F640D10DB8F40BBF062F476691
EDAA1D05C5591EEDC1B75251BFF8576F1C9CC5C0E521392A2F0D5F869F8AA462
B3883A673A976328E1F0DAA22B80CB7737DE2537E7B54F5E1643E30046E87CF3
8D9A45A973757BC16CC50504033125D2A68A1C97CA095C56B3D62783960780B3
1693596869FAF5692AA8FA6643FCD7F55E72948D2DC55AFC5016FB2C48AF9D85
192393C682B739EB43CAD8C3FD4053B2D53CF911352E2BA87A65F8949B0B7918
EA727DE4A08DE07B71365B8F31103159F65D30A7A318C1056BF638CD20BB56D8
6F22ED3EACC46F750F405FAF96268E80A409CD8AE0F36B68AA8C5FD2E0E871DB
D2628AEC086AAFC9F04CC93440E1A8B0ACC1DCADB778837360339A25C08E3B0C
E768240F0E8CE9FF939E4B1A6365664AAB69761B7A9C7B95BD29B09B930B0D82
F2C39F9BC0B94E56C48DCB22D8F0CA6C633BE68E5977EB3D88103E4230C6A08B
B4FB0CDEA7D44636102D47AB90B92FA42243943EB3E77E6CC38DEDBB2DB8BE77
78936B70FAE12EB1E2913B766CA2BAC3FA555CBADAF2CBF6B7A216FC93470554
2C841542BC1FDB26DBE389CED193E28A19CE9CBA64FCEB47C4D9C7891741E0A1
23FBBE971ED93F797C02EA830678317452481FB78DFEFDB25A3645AD3979D2F4
AA17C624CAB35B85963C6DED262AED5DE92278F31B2E573FD86696D98800443F
32CF695BC660D7704664695A83680221C6397E36FED57827D0CEC45CCE9134E1
20F85C107CE5E670014BCD3D09417B18667B975BF873F4BEA9022072655ECB43
9ACF13725A79EF90AD4FB0073FF142CFAF4290F2BEFCDF56CE9AD3AB8669A691
21B16C33CD949DC6E4C614B2D1A0ED127FEDDC4387DDB2E10EF3FA3985EDC86B
243368F8CA936A6B93DE729493EDC6FFEE039CDB833C0CA3B0223A63BA100BB2
B4714AB955DA07C374F097906ACD908F1A8355BD40273AB986F80E6021E31427
AEF512224950615DA2039D4EB3B18C87BC21D80345EDB06493E9849967F12E63
19295F104EFA71C12917DFE9B08B5473DD51A322ADB72FBD8794B3F51A1EA076
A789F59B3D595DD347079EA1554A4608FE9440AAC9F04CC93440E1A8B0ACC1DC
ADB778837360339F16EBBF5AC7571B0778C0E9D25358DA06B20DDF35F40C2314
035F52C165A49120D5332A136461B27E1D641B91CA52CB6583FA4C6F64BD28EC
6F839F95D74E2FACD9500D776DBF675838C2E27A9A1C75D9786FB52F7B15A017
61AF688C996E2561756B8F923AE34B82BCFDE51213AA578A8B93C301A831AE89
3172B7D2FF24745F8972DF419022F6B4D7310D075029554F2E31FD6843FB2454
1DC60BB39BB060ED6495AE98F6798010F76FBF63E31324B0F048C2F099F9085F
C2395C8F5A89348809EE005D206688D0DC863AE9D671BBAA034E8C32025F984E
69BF65497EDD146516938637D1DDF0F7255864D2C4C8834BE9EC41F48EE50AF6
797489236880A9CBC9A305ECC299FBD9A74AC0CD41EFED2D2CC5A3137F136AE6
76E52680371D036D1801406A3A5009F8AB7638A1926BCA7B7C3F049E3E5B235D
984FA314E9F4555AA5F99198A39BE62AF7CFBAB277B8A66C8413AF546739AB46
30018BE647C048D9204778226D706C55505A06D4EF01D9FECD5C795DAA94A1AC
AB3F519B354DC0198F2957A103CB2F0D1F55AA122628853277D0FA20345C143E
B8F2A289EA703C24663DD7C2033892919E4E65630EE03681A62471A1C035932B
6545FA5D6F2A04D26899399FF91F4FB98EF6E228ADD22D093FF7C07247CE5236
EB13B7F1E8A15AB9B0819C35691AAC73AACADC529A2B37845CADC5D1C00E2592
7E8523A776A608FC51751104BB96EAF8314E2322C457EC61961583124324CC49
1AA909ADDCD2D038C3174BB48F0E846DF3CEFCE0977B68BBEF34E03365FDF696
30AF010FCC79FE5120FF3149465E612A7AEEC2446ACE741C2D86A04B426E4778
6802DE7FE88E84A77CD3AE846ECF2693940F20F5176D8D1B6DB30D6740156644
17F53C060AEC69C2987EB7A9DAB2125D445153AFD3F9CA5169205C09A3ABA72E
EED76A0453B2D8B3EF3EA7CD9E665C4CB2B3CDA28A0E667685A662BF38551B50
DF4F12EE6C72352170B4FAB1037FB0997B367483D2C8C0D44E6111CEE2EF4370
AC4CD5D68004F8B2012B1A0C9C20040175C45A00D690BD3B098CCE53DF66B332
030F66A40C5371D8A6507D35F092FA58B287777FEDAAE750B107CCC7C39AE7C2
72FB9E9857356C4ECEDFCAAE74590B3DD208A9754D04BE163B9E964F6762BDF2
BD0ACE10B99E156A67CAD0A3DEBA0D947D0AA1F03FCAAAFB247078719DB68E22
8E6AC9E51AF57A7B2F22749A53E22583C0AE5B3E7506A8D328199ECE23C1F65F
EB3C45554F66C8FBFC1F3930B708E9E73D9E9F69FC7147D6F806458851F3D994
762E9918C422D1763BE8FDED2C51369E0DEA4E821067927EC46753645F880BD1
38BCBADAAA94EF14407ACFF4FF975E04E30045D6FBA477667651D8C7368B0E9E
CE176300D5B23326DB319B1509B693779181F685FFAC786ABEAB809427D3C924
672E418A8F273187F24F9D209D78E0A2FD3FA71C28EDFC1577DA8EC167B3ABEA
718BF706ED33155383EF6400CDE98179A9C3D3166C39DCB64337D7A141529B10
FDAF9ECC35E387DF38E4B5DC807AD09ADAD44A2DBB0299AAB0CC3944DEB241F1
FD9A5FBEE5B1F2620B814FA2A9F442DAF6C658893DFBF0DB8BEA767880B7064D
05AE383EF05A00A57078A6C9289FBFAB908E868942C117CFA7CBFE350C693B23
476C3C77F0D21406751D2DE44887FC5DF0B7AB1BC8DCE622DC3FABD85B0F740A
5A8CCC2B509E9D70AA5F53D932C71EA76AC75EE6B68937852005B46123D78C29
6F0A156E288433A91BF564EF22B8245F102B7DFCE33759312AB0A03416D0DF55
1593B3392E75FD9BEA16B3FD22EBFB9D13E7D7EB59D752001FC8B8E3B1270C1B
EB1C4042BBA0D34125774CAC70D8FE9B08C9033A1E95F5F8A1717DBBA7AAA1EA
7285589A7279F88F053DF725F2FA768CD4958CD594AFF8C59F9CD25756231AA9
6C0193B195DE5014BB87872C738945BA0F664F19C2ABF0D00206548CB12C58D3
7F6DC0A2A3EBE9A5170BFC5A58D65A8E6DFD583EE98081A569696544F6B1F129
A8207891AE60FFF1229F6F875D5783D804EFCC8C4F5D5BAAC2D11907D0090F63
EDBED52E7A45C7DB6C2F3431241965694818722E945EE8DD772B99FBBA9D68F3
6654B20EC2DD55C31E3FE7541B2DC374F135DB26BF1BB505BB4602DDC56B1E8B
497797CBC2D5487DDBDC27DC56054DDC84389591B0C348ADE52E536208334DB9
C53B29B8EF5B8C6E1FB46E5C40B1D2D23D99FAE30364639514793A83B7CDC6E6
F044C69648A0320DA6B8939E3D5DF5F7CCD561DC7ABC388F4539424239C618F1
D92DF63DA4C509B1150ECBF843C38A4E32C9EEC6B7BDE14411961CF0406493C9
7CDCDDA1FFB9497706044BD0507AB45160A44D125456BA17D8B91011010407B5
F2CAE74F6724A7B6E605242727E8CC4149D01BA9946820758FA8C76B72A26F7C
5BFB146E5B38643081A91DA1D968D5BF81840048F96BD4AF2EAAA6B47C55626F
5C6488D4837669C8DA7E7CD7DAC270263550BA374D54D4BC31F747EA67B5EE5C
C6EDDB55CFD4CD875072FF79F4ABDD8F90321383DF0E452D5BEC576F18A38E3C
45E186B8EAC1CFBE65C0F3E4585CAE02092F991F62E3F6573133B8CC186539A1
22D6BC79EA3A1963B94B9903CD874CF329240E46C1AA9361E93490C7ED6E46D8
0DFA61245E8447B1E0D38F1B3CFA112EAD850C1EFDCF13156B025DF2E518A63A
71113DA020BAAA0E7C14771FFE20FF6134375B62BA0111133173A369A4A30AEF
8299AE84CAA85176660078A3C0362C77A7FABFF2FFC3F1C143E13BE6B003CFA0
DE2E46FD78C82B8FB28E0853F6F4FCD97CF3756F13F194204A8847FB6F2DB279
AD157D1C68D877F9C115383B4FCB16BFB2D70AB75E3F490621E9A09BE0C89F99
D1AD03EA2E2B3A3B35663BF0C3011A7832CC8A959A9853BA6B381EC379295DB6
7E7B2DA63D8E0EE3E998EAC4C84F7CC1656BE602CAAF7D89959658835F6DD1A7
B8E2B638C87A9DACF56D583486E8DD0357E35E1805174C5DE5CAAAEDBE98C69F
89E7E71474CFC7515F73F86723043C93E598BA51322F0548A74AC221796FEF28
187ADA95A2249AD64F922526C352765C2A041BD4C5BA15A44BB2ADB9347D3FD8
F575230559220F6A416C005EACE2A18A4705803F4C580F80546B2D997B174FD5
3FA4041B087286BAB7D34EF99AD642B738312FC6F300093EBC7661493AED8EE2
895A696AAEF0EB67902FA53D9E8BCF2B5D8D06C44B538EEFBA6788A85A9A6F99
57642C677B94DB7A0FE1A21FFBC5DE2429EC0989A3F2B6AE4290A005FBE3EF23
9F5035FA46F719B503CECBC280007CA7FB8EAB591C8300A6D2EAD6DCE72627E3
2175A0D741E384B32C67ED173A46B3719D7280A90EA7038A2F6390BC183FDA43
88B0FF585B561BD3EEEAC3E8BB95BD1C6596BC5DD9FA10D626A9235C76FC3010
895BE4AFF551597F0B1BFE08FFC52F6B458208BEFDD79BD8C4C6E6394AE72B8A
7017489A37A541ECFFC41F3DD3FD2EBD84B672F4AA1276059882A8FDE5AA396E
BD58CD1FC98261FE9546C44F98D996599B49EC9587706A53B5D5DD4244726E81
B17CFFF3CB6B0C091A7A2F6B6EAC7A5B4D39DAA5C0E94FEB24D9511017E77DE3
0E4887C0E7B8F2A0D884F8C09A588008731A0FCE134A886C645E9E28195FB50B
C27AF8E38324CA3DAAEF22AF24628FBAE363274B2C5D1C50FB8E29D1A3240450
D1453A1CC3F8A5BF7FE395C9E2D7796D0B633965BB6891B9F34006745CC91933
64AA3F547FFF70A5B6DFBFFD8BDCEE6ABC218F3ECCE85ED1F4FF5F2DC767133B
9769CCFA21FDF0DC77CA7AC67CBFAA34A11578294F66E2585DD7181AE09F38A8
152E34920B956EA2742462589EE9832FC6295AF61B462F8DDAEE658222AD6C53
001050958C69140F1F2C1AA25026527B2EF907D739ACA3E5878CF3795A0514FB
67759ACC4C6FBF1E3B769D7BEF9E00B824A16D67D19A332E3D2B2766AFE145F3
98CED574617D14C0AE26137B1C9DF476B6953A8DB701BF7A8D27ADBD5FEF37FB
59EF89B24C2896D309B94C08F3D6F44D40452171096797C6CE770C761DA72242
FC059A2C0FC15DAB7AB992081CC71C6BAD6E8C7A2D807CD06926013E4242176C
CC9F0661D553F814511378EBB3037BB0667F0382E30FE68A7CCB8E4EDFC64B53
FA54CE628FADB2EF29003015A9D364B1CD13DCA3D385B83499C715ECD7598762
715A3F6D4F3C9CE40724AE4F4714B8933B54AC4C09372C28B1310CBA00608A4B
24045FB082AB4FFE58DDE52F7339852DF58E88CAB2CA2E8BC7860CCA854382AA
5CA56DB2EB9B986154E767F4DD7373D2E090CE356984C422A22DC440631902B9
2C516F671CBD98E454F752CE7410CA9783F428992270E1039CAEE78B2D136545
062399ED56FDC3A725F26CA64199D2B763A3098A82D583E1EC8AAC7647E25105
A3E124929876488AFA9F7987D22036AF7261E19E0B78B36BE80A16237A613F5F
46048128D88BEE5E2AB0A03416D0DF55159466BCBDC41758B4122E88E548D22E
15A2087B61FD69FE33F5B60E17C6665863AC03E8F8CE02D50F50548792E03424
1D3A427F9B1AD26ECD535E46C137084A835CDBB865DB1B1AE65F9788563B6C0E
D3D9F9ACD05998073827B9EF53EFE0CAA60432FB85C125190EF73FA305264C64
110C95C4C9DF1F49D41B4604264A80570E47C61AB9B119CC7FE20FBBC297B193
5A3A5DE94E8681FC6842832971FA23CB7610BEAD29527EE5A5350D4D63EC9EC6
D91F57B8ED57EC0874E26BA43EEE451D698BDF3DE1588EF5236196D2E4BA1BAE
2EAA53FF433AAA6D12256F20494CBE6FBF2402581F6F84BE8AAA3CE7A906C63E
FC4CEDAFF667E51859F4A455482B979DBDE13544B856AD10C052D37D202BB697
39202BD31EDAA120CE54ED0DE7EAAFEA68B8F9BD9F4C10B1CA1196BC062E04A4
E5BDC058475169BCDD68CC1860B3EAEAA564961A7F9523E1DDB68B707D12C14C
FFD98A31AFFFF8C34ED4505C7F6607DAFC41C2F3C695FD46180C519916C2A57C
2909F2E640F991DD45B978ACC96226775B037B920804532521E7EDE46BC165FF
7C7FEC0715F84FA77D3B65D73DB6493FE38E007F68BA9B877B857DA39049F588
7F6C75EA22E2C1A23C39A2E523B36A2AB5F41BAF1D6771576B4D367AA58DB1B7
132ED56EB6794BBB90FBF34BBEAF282A69007BF67C0DEBCAA8B511A630E8148A
51C1394C7C321156CF52EE73535C22D9DC361A0FFF2CC6C99969ADFAB5780847
9FB5A64F1C48527544E28F808AAC801670C3D6BAB0DA01231DD9AC89078910F3
D70211659CDBCE05F0733AF96931055D457E55E2913AEE591678EADA8F6E6D3F
AF39BF497749176712F636C95B9F8AAEF8D29C974C5A18DA8C8AEBD8868CE298
57AC764A19824E49578AEBD9108BFD2805F0F378D0E993DEE8EFE824AF1F1A64
F91759B165A964767BC5470A2A7C2376815CC23BD0FFB24E731F7FC847B39D4C
B0C0C97CBCBFCCAA9A1D1F7E29F00D8E4554E603A6E083BDDB9E7E8BEA64DE71
4E59438AD980E0B1FFD51EE19692ED65AAF359AD713BC6DA67172869F9E4359B
75F27C0256E0ECD12721E8C240B2D22FFCD960B94C55460A557DB6EFD58E6D26
BE03212A8087110839B09D287C411FAB348BE60B05AC2BE886D9D90227506923
ADC66BF831DB6A55D577A4F1EDCD09993D20C046089A98EA5B70E06CE96B6A9A
706EA336F89880CE4C5B805C3C54F112F7AA206E8A3FB0D9C59C15DB93E45AB8
6731E47F691F9E8A3366ACAA230A1B797ACE38376DB0321D7D2B33C37AE910E6
0386A31CE022CBA49FABD2B6BF09FCB4CA2D81A942C5DAB2B99C881ABBF836F8
EC13A5A32A91CDD341E13F85238D610616A417C37827D8AD8802F62C21D16B3B
6B20F82BA205BF77E16D1B0387843CD39A2AF0EC9B51677305D9A912E47FC61D
09F44A31F7D88B072B10C44A60DC11A5B8DC37E7C7C0CA4DB5C3993FE8C1C4A9
0327065F99470A18B40E952E098614C2DB3FA57D400530CA6FA8B32DAB5C6A16
58D1858CF4AE06685282DD09D47ADDCCBB891BBD258ADFB0B4BD92AE3E7CEC08
957D1E08DDA1C52CFEB059A019B99967A3E3F1526DCF6D389B34C824538EC663
458C94BCA7D9D93AC694DA7DCA8F8DACF03CB8AAF73775122C66EC7854FFC24F
0C307E4633954DE17FBFA6BC4F5AAE6D6DB69528E8A707179011BD1716C67635
44EF3D5D6E29CA1405DACE81B2FF46A7BCBCCA74B6D314B33AAFF216180F5999
FDB2041597A8A577304663F5FA4B9CF430BC88CE2B9F2A9C06619AA6CCBC3DD8
120AE66A6A6A8862CB1405A49D37E9CD14A077B05AC1D894BDEC87BB96D4ECB2
20E432B1C20CD382EB8EEC2982333428081F09F426B8A731E5A1CC35B646ACD0
A28749B62599E75F4C6636C971E51B9E9AE8E9D60E06A3E169A1A02B17E1E5A3
21FB102472854A0B8A6ADE15EBBFD5CD2BA9FAB7E75099FE68E287B877E37700
D66FDDFC026516FDA258B0E7B322ABDD35FBDD7DCFEF07F93366AF7F26F35ECF
8D5AA73D8015428B9D34331BFA9C9A08BD09FD5054C8388DA82A50D4E5EB29BE
DC9314736E9046AED39FFA15066BD90CEA85512DE776A9DDF64744F8EA46F07B
B8A4E027FC97BC4756B71F03B1A9968E53004D5D0561510D62F881B123F0C52C
A07E59508CC2064BFF6975A959F0C38D2A2B323A32835A68438D8C7681595D04
920478E5155A21F054FEA3C549E19A66B3C7EFD33EA796BEEC5EFFC51696B1D9
C4208BDE9E7F973F247467259BADF061BF5F70E4BA0CD7D2227F59CC0BE329F5
DE8442FF13EBBD0D06D7E62CE534576ECCDB01BCB4CBA088D3922EEE7150107E
3A46EAF7928AB81491BE01CD328B332F06CB1DE98AA4C60583906515E77ED32B
FBBEB52F816EFDBA9CFF83AC072C75218AC4F0BD795EAD215E012FEE2151C914
29061E8ACE4B92604A9BC2E8EF9FF13E29DC064F3C70730B6B567A9AA1CD0DAE
A5D87ECC5243915C0BA12EC2F8AD6305A2F219F87180E6828392F3978EFB0530
AA2239903E4B3F8196C3A9FBE7B17DEA84B0633460821B88857BC62232D41148
3EA3B91042B26C31BF9E40F50E74F1D56C307F2F2A9FF8ACA1E0C57869537D67
C3B3C432B24A043124FE60C9C3594F38666C7B0A7B10F10DA7017B72F57DC497
1A485ECFB7C8C95C18AD3B61A15D637CE0D8617EDB931969D2AA578FD2082183
D51A95456A761655D006138CEA62A65CE6F7924AFEC7130DE52A490DD550A273
25171953B66C6B093EAEE6A4764B47C15B0CEA5E5726B81B7983D319D1DF4422
910465649F842BB64AA48C82DAA0AE14C8E89EC2F4552CECF63C84F805508C4A
0CB9891044169A6678F80B793FA88EE3DB7788FBB28D6A6235824DDCA19A767D
BE0D853B0FA15A4D58DEF4812FDF9458012EC5EFB21F7A6F998AE6E072B40F17
243EDE31995D77233DEBE2ECE86CFC8D7D71D73F8FAB6D0BDCA8250D0E561D78
32D904B7FFBB8A539A5A7870C9521A69E792093D1834150A215CF2ED860038E5
57CA1AFF5F39222BC8F3063415E0465E1AAE17E74B0BAE5BD03124485D0C3F5A
EB1519C66C0FAD7DFCB05E178555E2314470BD7E64EC79B572AB160D55D18615
82536A7B4AB7B90A9E4A59A7220C33F1FFB8A486483FB09DA826F677BF6ACC24
10A686FDC296FCF9D3E2FB4251593589540033FFA39DB14BFD9C7A3DF55AB61D
83AF76F0EB2A9192186D9E600E48BDF027BB01D55B18D83B7101AF39500AD4EA
064800EF36B8E71F816068081DC14BAED0CE5B15FF689A0EA58B35C74EDB45D8
7389A00636502358BACF891021C7D1EC5223B340C172353AD5E0EEA2F21919F2
31AF4C1EECA10758CF9F5CFB1B3156064CEEC693C16B03EA8555FB4E2D527FBF
80D86BDC60DB268EAE4450B7603A566B2CC0585A7AC24DE6DB33473D460C71ED
BC4D803BC32EFAEE34959A0FD994D2DEDE8EBF3F64D0959281B1BCF9F0315CAF
C23ED4F9CBBB2EAA73E79883897651EBCF689CC0DE5B6E8F976AE8191B491539
30BD20FD20C4E3CCE7DBFA0C956505B6DA60B8A8A3DF0F0C2FBBFAD0D5C8F689
39B28C0A8D519A948A5E54879DD21E4600FD79287A622FF3C96C68D4FF66F28D
A43616D3185493975D7F41CF563059333B27DF0A49159707C99A752D3E1A781F
D053FF0F727EE7A62C4A4C0C8D10A93430C7F921E307980663D7D88B4AA2BC47
9768B32B9C059D3B5C171FF11F62984C5F853516C1419DF929D29EAF4490A012
C589FC0EFC552C5FC511935D0402CEA398F99BBC5B225D69BA3C34DE43B531F8
4B485EF8F360082659FFD79E47FFC8BB0B9B743486E0A343D68682DDD7E10A9F
B28C0A041B711C074A9C05A17C014945F08547DBB905FC116A47C73B4C282933
07F22EB28C915A6423433A1804188F9B07C2184C794F0DDDA42481071CF1F5F4
AB3D7EA63555DBD514F840BAFC74BB84BBD22FC2A1AFB46E5BBD20EFE0994552
32455A794E6DCCF2D7221490784231EA6CF28982A4470A7157ACCC987BDB800D
A1C4306AC740184CB367D70D8AB7DED9131423402F2ADE388F8E152584A7E82F
FBAE30E8C2050B6ADF99ECFCC4461B595C70BC08D30416E6BA194BFF94E07904
8596734F0904DF5280531C93F0F9BDFE641667E56963A758EBCD38F575524424
00959A62CACF5EFE18A6C6BE1F33A0DB7564F01C4CD135F96CC59DA792091B88
5E39407E71E8A81EDCA2C35B230038A91814B382CC1FFF3848F64407C72774F0
E9B1F0EE4F9F1687F2590620E775C4064934FB530B35AD9155EF03D074AB5532
74A8D5E57FC50203EE6EC6625ABEC849DFF88D61A9C25660C9D279613FFAA3D6
5FFDAAB3B89F357F7F55A64BEC0676A861BB5FF8B74EE25981C24E8C36BFA67F
71C17565443ECA040F54A876DD343BF69D7B2F16E43F5B9768F5722801C44B73
F726014E5F80CEC413FF211D3AF499BD2D073A400E7CA0B870EE6EBF02A0707C
EABD8F2817EDF6820E69D5CC3D80B2834416E19C17F6D84458E86E29FDF3DD6C
73C55A1E990A07F8B008FCFEF55C2E21664ADC97DA44BD9FA34500F72B7B38CE
B8258173258507B9070C1A92470E3AD7F1CD944E91ADBD1EFF555D1204133764
B8D3051BE747C134397AF98F26AE6BE96AE877570C1792AC0CF18BAF9E6FC668
A573248CAB68725ABCA9801E168543480A39A5063AE31266DF857E7233E8EBC0
7A0BB1C59B638E677A4FC26F9D9A17F28132BF021FC8B8E3B1270C1BEB1C4042
BBA0D34125774CAC72B756F590155BF03A84F0DC427C57B71704D2F4FE437B28
778ACE5C18720E3E3C72B08FB19807710498752E1B1855E4DE8F5DDC3BBA41CE
B43E46E9972EBB66CA1F2390889EB779D89DC565746F129EEAC3CDF33EC8821B
5281F55F19AD53BB4FE9559A1CD46A71E1847119E030D75EEEDCF7155D293660
ED7E91867553D12CA559E3D625BD41A27B1BD42213757E16CEFFB075813DF7B7
BA6C66C6457824330F5052B43E42A8D9BABC1C3DDA7B54BE6D814705609AA46E
89996BF4EBB7842B8F58CDB75221EC1C7D7F8FE3160E3A68C5B2F1EA996FE71C
F6D1E942B835AC50C7E8898926E201C9E847D513189D68F0EAE6D3A5205C663F
183246F0377048C48AB0D05E92A03FCD29639EE52AF793A4937CFC9E9ACC236C
E307310AA50B8A6C01952F48F61E0B528F4873A53214B80D797AB7E392C58972
DEC59D297CC24DB89EC76930D071A679EDCE785ABE9C0B81390C67B61C835FBA
29F185C0181148D2DB117274C6AE0C64EB9EAC541E02AE177F44787B394B649E
1647D3B06AFAFB4A0D0D87C31A11E0231DDCFD8B1C7481F7C056FA366106E55C
70E87C11358DB2D4F72B5317DA45C10E91E5C321504EFA0E519E0A66A000D549
76B984E3730FA073A68EA7B6BEB3D8CF73C66752FAA10CCB261AC96380F50E48
4A18749B4B10F526DE12D88C373EBB117158A4FBAC084708A6D5BAD32AE7178C
9A6EA3EF7B42F53DC0838C1917ABDE57FE1D34CA143066E10133EDFDAD04F076
7BE960612179D325BE5FBB515128DC868A5DACED6F47059CEEBBB988E953AC22
110E3366BD096E88B4B726AC41950EE2F482555BF740EFD19B855364D2C840D4
896A183FF4E395EB7A69DCE16AF779DB5B0A6B50BDA39792AFD17B52513AEF6A
BD14878C181A4194F9DD04B4085690CCDA8AC7D0D48CDE08E0CE3392164FAB46
A067EF4F5587DDE44F3238540F57899B311D52877F71669DCA948F18341306C3
422922BCF391BE9C96360AA8B637B16C389B678E804FFADCBF28E0049FBF8B69
AE3ABBAC55FD47082DBE00ECB6C5C0F3CB6F2433FA57BCAD47D03CBAF47C14B4
B93BAD310343816BDAE9EF6CBAD23573EDF7798A4397FC6B28F7DFB72F5895A6
B90EFE450BFE875A6D265BE53CB4F79A25DC42832C04D6757C946387E6DF677C
977AB426EB6CF686087DE12B3FC4B8CDE2E2B35C58847F36B887EED1D629B477
018D53C9EF94BF041792494691B655CB9C88996A27E4435BDD992E3F091E9FA1
E349FE97857C9B6DE42D88B0BF013D71CCF6741A5C45AE186A2F9E899153F7F2
F9E5AB58150DECA49DF107A7F4743E37FF5A790ED6B92B62F1651E122B0FBA42
7EBCC9F86882CD96EEB8F3DDC554ECFECB0E68F8A268857C7C013561FCE2D5CC
58CFB186696DB409A8A71B9E1F6A47F14E57CF25383AB2C486B2D793539BA480
46E8532AF543E46B58881A512884C04147E597D353D3505ECC2E3EFAD46CF758
54E2CB731A579D72CF47E53E8C72692DC12B53503EF1433CACE72E04427C5103
29268EEE5C776507CBFFD885C109EB32CE516270186848DD5F31BACE6BDDFF67
16D141BCDD4FA9D6617B7088D3BF3E9BAB479A3F9DA76C318D6D0798203FED7C
022CF414C13D06A414BB9D434502EFAD841F0DDAC1AB935CB4086687E740D809
5E63F70CAAEF65D1CDE37647037EF45CBEC411EEBD07899B755DAC1126CE5CF7
1C5BC9233FF068007B7E87BD9D405F2E29BF660674457A70F82D1B4BC7389985
CB4F5A32031AF9C7AD1B3986EF4BFF59E95DCB1279D5327814B63E4301F91DE9
74B8DD7503D60E4946298381C2DA705BB5069F19A580755318BB1B96E4772D9F
4081BCA683FFECEE5B7BB6173763C2E6DAB5392C948CF1656FA97A05A937A3AF
22EA39978F1D7103FAC21CC470A32CFCF7AC318CDE98739B360390E9AF0097E7
9F53A21234F3DC2ED2ABFA3F1661074778EBB62469CDF7F981B9F838C1352A05
CEF380FE489886299B33BEECF34CC81038FDB1F0ED2F297115F853CC86DAC70D
94DC2778A20B98D3E011ADCB826685EDC4152693A948B831C4CCDE8E30FF5A06
35997288AA244B3925AC7AC582024702EA8A9A31D45A530C3C76BFA4056CF63C
58869EE60CDF648F9677A2701944FEE0E51FD5BEB5015141133CAC7E399A667E
12B07C65D79172DF1A3287C67BCBADB984712368C4C2C7CBC32295E98D32C976
F94487DA22EAF34D51025EF8B6CC482ADAC3FED84C85ABC9D171048DC168AE63
B11D15A49B6E46D8EC621225A259A7C138FB17E4621145D1DDDA77BE41E745F2
0E64783506845D2911BB5E61951DAFF2A3E9E9B46B9A5B29A2F7997CF674FC97
83BAD5DA960A1BBF958DBE1DDE280A937DA27F0B02548F82897948B056A86679
7292AC7023CCCF337BFFAF8782C30F4FBCD5010D94DDA30568C75286BDEDDB91
A1C10223AF53A16B1DCD7C5DF152E571C9E734130C61324819BD29B657D61E2B
A950218A3AAEA34714C68736EDBEC14C5256B9940F0800E6DD26001BE1FD4AC6
11FC7DC2F3A0655EA208F98B354A29FA9E962DC65C85A4358E0A1B05164210F4
453883898DE5BA43091345A341C5661CCCBA123B2C56BCA4F1724FD3C64E1B66
C5F9EACB50F09C029DFD240DD11799F2F6B3FC0438504895437E86EB5FE4B3AD
545CF2DC302D330A414824E7D5B0B83F699756F1197D8B120E48C983DB51F4FC
23E312D9A5086A47A0EC71D4169ECC5A9AF15C361F4CA0CB8FA4772988B08711
D1C26A6F7FC2E24FD64F7B74BEE2071B456F1A5E8C10A3A63EFDBE4A15FD0D0C
1948BA56735705231708623163ED2DB636BA33208269330C24A4E66C6C2EDBB2
3894BC719D68C21A6625E48518D2E33F823DA4ABDF05D656E52E3959574B0B4B
CFA0B9C7B2590D35C78DB2E6D5109FDE9B405E97ED9527026AFD8C09ADE601B3
DB3A00354353B50C9B2DC97AC798D4FEFE2F2376959E12A6A42C89543196FB8F
A21E8894D2C09DA435E56B6FFF53F447D44E968A8B29A84AA5CE3B159971043F
95DD4ADA95093D064B0E699C59892B661E5A0CF700EFF2E3C4F57847EBC5AF87
C86FF819AD0834C9B7DD00A237BE928C00E066A03A5781A4173AC93C0F9C6B05
D63FEFE3CC6CE631EC7E3D00412D24271B9FA4FA4233558829E27C86BFD7AE2B
988A390BEB352917E28C85B86DD43454FACD12B5C689DBE39D73BA8C9C093FF3
6C00895A83D4A16B2BECF9DC186E0B3479EC564EB9E63BE5C8748B3C4C120710
8F3D4D7AC6BB7F5EBB84447B363877CB9D377E831E4FD8D7385C115E229FFA8A
794F67112CB9305E19AD1D5E5C5F47775A67C69A80416EDE8726605A030FAF50
A76B7BEBA99F7A8167F9AFA37A73A0FB81B5A0E9E633BD1AACE6F06A397B5D75
289ED307C730A28819DC0C2D9D95F7E82180B767328BFC532CCF26068F61B752
5A740B80BB8B3C209EEAA6A4B2422F75140C6CCEA99D85192393C682B739EB43
CAD8C3FD4053B2D5396C85E85A38F4D4F39348B96E5AFC3E8C5493E8FE4A63EF
1CA20D44F2E50F091E00982F4FD83A14682E0D7437748FF301DB98A91C6F34AA
573BDF47829A0BD0C1FF587C759A7C8CB34B040C29B9DF8963000217458FABB5
8511B2E3D0DC4C2312EC701C2A55C23A71E12403A443509B05EEB3DCFE4783F5
A3DB1C600AAFAD8D61BAF6222FF896D9F7A5E8A9C1D5460FE747D637C095D3A5
6B3D3253EFF24B393985E8DA7768801D9A6515ED7BFAD3CAB8137782B78039D2
C3956923C9DD71A04C7A9CF032A8B59AE576CA6C311D84D4D071C1465C95E05B
D1F6B603ADEFCEADC5B677EF946A2D806D67A95E1E790BEAFCC312DFA96BE214
AC88BF14CB44C210BF44141C72291EBB1078F38BDB5187DA096589FE1C6AF104
DC95DDBD1FA5C057024943F2FFF8F1BD3BD8F42BB2FC3662D7BDB14720282530
82DD7583FE4BC0A3A30649486C002BFB9868AAC45FA3889A9481A39115215105
5D2B2B9DAAA7D85A7963E6ECBA619FA6C38D9D27307FAC14429AB8FA9A5FA48F
E6245DA950A72D479C48D67816F04AD0E3DC993DC2497A81230D0F8A676B928A
8884081996FEA9AEEF420DCECAAB865893171CA3A4439C3B75A1C7078215733B
69179D084DE0294BCED50924B9FD409CA99EFD0DF79B13EB5D68B45BDF736A27
654BC2ED09427F7E5EACA0D28D6A0F247C07FC508D83491CE04DFA2D0479AA51
C2086D8E71C34694CF2C4CD167F58BD2BC351F994C007C4149DD8D961936D93A
5B632AC01D0DDF9481F00D7067FA57B561F745A1E86953865D451F5B002D7BE1
DAB83C34AC97C66C21F4CE4812FA0F007C12820EB5024898B2AD1DA3A35E032B
8E1D2064BA0B2EEE00A0E9C48AD610BF5DD105C8A8E7861C4EC541FE5C14FD2A
7365E6436434BA54C12EC437D28D0AC33B7BDCBB8DE0B2768B23F9CBB656BB32
CB7B55EC602E20FC9A8BFFB15BA1579713735FA47174630C757411E78EE7E862
E8A5D92C9A0C81E94A8380D89096E480D7B112A801A36956D21DDE8A3B5D229A
41A206226DA21B6B0E1805B357807CA056032E6B45D0B3327DECC621D9569274
12507705E167BA556285CDF549243B2365325A3A4F028F88CB2B3C75BA6DB828
E48ECA9018B12EA9801A93F1D2EA5B38FC09D6913F9101D522DA03412A6C4C6B
34EEA836994B69F09279E81D9CE04C5C360D7677FEFC0BC3255F010520A2BA45
363D3B7FDCC2F4A81E47370B18001316F0FAF27BD20B41AE6B28880F9C43CDBE
F790281699E31C3F8107120FF35E760AD363F6F09B66DCEEA83512FC056B00D0
32181E239065E32B17AEB326540207E4A52B755E8E30D79B3ACA07A34CCA87A8
722EB0F03839DCF6BD505A282A2DD583FD795AD2FD055E7B3A1C57F0A516BF06
6D5B66A7210FFE6617ED0227426D5B1352397BC54B100327B55BA9ACD4B6A4E9
846B9D8B82E5C7FB106DF3606030989908E4FB3FDA3303E6BC7EBC8C3F90ECE5
DAE556C363127CE5ADC833BDC7BAA33C1937541891B78E0BAA8D98BB4A05545B
974F452CB2DAF69AD84AC8E0F70AE197829720388B5B6A6A2EE27DFA9FD3D44A
13996CD1EEF5A7D16BBFCD34AE1F5F91F055BD187360B226665EEDD4D42E026A
9FEF4ED50BF9A97674FC049A4E362988893B52A72EE1455E5F70A6829512F971
C2B7E719A6BF90235320306BAE3373D8C7DB2D5DBF6C58E3A9BE6AE8769D9029
7D27660A3F7D8AA929097F51C0572D0EA0FEE782997871B24591FB1A73F31BF5
1A8AE492D5D8EECC3544174925F2CA270C094B54DE5E5F4E0375754CA6605133
2AC0459B26D0442E92EF2E00B8DE7B8975764F1D1D6F455A258D68ABB040B827
B63EB42E6948E7CA62A9B41256EA1FB83CF28B18EA768D9A4308635583ED282C
11A690F7FE55691984F8515420FD6D46B07A3727B08473ADB05FF655659F958C
938C8CA054E0D2518D4B678878442933D3BB75B4F28F76CE5AC59AF8637DE595
C4C12D20917CD1CBBB78C70A802962B3B6500B533A8A05B576819202F72F17A0
9EDCD00BD97A7B488AC9E0CFC85344011938C3FC948BF7350AAC720AB4D6A379
C40D33C21F46955BCD54FA258120EBD48F301B04F46631626586FD77921C79F5
75F85C4EC9F40457DA1B8BDFB99D880F1B2612D509E1A626375A4072AE76A679
EA447B94DB5CB272D0E55C2C138C6592E3AE00B66F4A9398E4F3E813EE0695C8
7322F0418058488F50AA8B62B3ECEFB66FA24814128AD4338ACF7340B39E0F40
D59D152BB1F5E716D30A5646F6E4A7185271C8D110BEB9C0145F4AB07BD6F232
527036E2C4C5601E5C9D03B3CD1425CC36C2E4B233E8AF4A2907418ECDAB6758
019C74411B7B4A3385DA8DFA2C052187DD7EB4D63393B427ACC095444EBE4145
8215D67F1784401F2B6A809A60DF7C10D5507F08617F138EBCD29B9BF13A8E85
B67B205A5E33172435FF67081BF64FD96B88D231281DD28BECA8DA75883BAD08
B79CAD4BF9C359C3819991141757C3148D4980E7B43E5A7E20060F82209A9A12
8DDD4372985D63ADD499747706F42502053E10AC2545A76576003C56FEA5570B
493CAAAEB2058DF0AFB567F141A5B414747AF59FC57D2F66546F9F192334DC72
C30C784015FD3D0590A90F1C4EC2C19A21877D016B1F58EF688D9DCA5C19DACF
C81E5E9F5D558E4A3636C569975DADE58C1A86BD2F4B779A4B18E44189E520BA
42B0711483A8B2BBFDB7B4ADCEAA97AFC0002D40162E4C121FF0ADED1AB70BD9
BE6C5DAB68A1FCF41154D54ED81CB2B551032929927DB9E520FC9DEE70E9FC03
58E9E98D50162C2D0B1CD72209D9568CC1C01FDF0C52DAB05A8CBCEAE81D8A6E
1DDE744393829552B60D291F8D03B0F84882C88512C172900040B933B7938221
9263F40C72D798C4BD9D88419BE103EC6036BE07A1EE5E579E69711BFB6CA866
13F5ABAC01477E5D194DF4FCD7E87E08D0E665B1B8B09F9AF863F602A6E4A34A
A4322435C5815291300DBEE2C9A7C59CD109B5BFBF13ECE664E0402D0C951E1C
89B2D3B7BCBEEAC7150B14AD080D14C76266501743B85F90A1E86C26B0CAB4FB
8D70788B2A3C62DA1259305B91F62C362F558A7C977711C7BBB9C21F99373274
4FF16A5F490A795B841D4A07E48D03DE2FA190BAB9326EEF9FE6A563644E59B5
BF520F70E41DD5403DDCAB8837EB696BAC4B915CC97D8C70140964DF09A73861
FA00291890482B8DE3E3117875E5A1DC7CF80D6D9EA93C9B8C01EDEEE3A7F7CC
B0CD7F3EDDA8A3DB4C08ED8899935A8487D4A46F609CA3E80D5413CAC61205CD
BC780F945797423C8A0ECF543065B584A30ED08790E2D41C41D3B6C21116DDE4
69F25F84B59AC66782387FD5CAC83472B472284DA04BCE081F88ECD3125B6972
B5C4A06261E56806738C7AF43604858C28160F972CEB7F3CC7AFF3DDD0AAAB1E
A8B6BE61A0CFFBDE8CC24538DCC1FBC4989BD5ECA24FAA6161B1FFD22A31C1FF
1492EE042109974B99C3A0363AA5CAE125EF0F3B74E35560D651590BABB0B40F
307C0F59500B5F47BC687CE25B469AF865E3C6C0F10EADC4DF91857CABE7DF1C
AF09812E0A9F09C0D39649E1E1934D2290E5B31854AFF8D8A673D4C405E2DE10
4E7C6735D09D8FB9DDCB335A483906EEAA547B4A37312F11F44E4259637296A8
6F74ACE88DD64DF61F5A884E879395F078AB31D07A99900D809673B35084DA98
A0ADDD6A491DE4A956D7F6F5B8F74C0BBA8CCE42A0128B2AF35F572733A07DDD
AB797BDD08227189055C07B67CC7F6C981A1B69D4A686E5E182D930A2DC36916
54340BE93B8E8300599553DB44869CB51198CFD8771A99ADD18E9C3289A74059
39868F02138047E9722F77F39C29EA6F8251D4565D1F1FBE56DE145488C0306C
6EE589C2E71F0433B9BED8032878B9062320BC72B839065204D2A18C9CC16546
5B54A957B5AC8D9CF501F83E9DD95F49362F66E81C231EE6B3328DF6539392A8
E10F242691BD3FC2B37F6C4DA2B6B21A2BF8527EAAA783F11DD04EBA5BCB2BCA
28AB468218146499A52AC2C717F7BFA6AA7DA5110CDC21105F16A80D1C6AEC94
CBD224C35296EBA3BD6ADAD1E6F076EA41F6454DA77C20346758AB4D3BF9DC90
F6F55D27EB0C9ABFA2CAECD229144E2437FA4AD02DE7E377FBBAC29F348EAE8B
A7B3A01C26B32C1B2FE87B2D7EE7A1A2AFB3BB80655938C081CBB9A7235E61B6
D9C769E49C083406CC9F724E41B910CCD33805C80DF75D80D42F40E3C901881D
1D0EFB802E7B1A4C0A9BDBA2787F16C321F35F9EE0B878FD723EEC619DB985B2
D8966CE10002385E5E7283DB7E099BFD6576ACF2CDF306EEE9E7630EABC9D0D9
261731D82DBB324C90207B01A07539866A1DB7839361A6E1231FB6DE616809BB
7CEBA64388EDBAAF5A3E1C9CB15A1A2292EDCBD09E0FA9529732824413A72119
D2484D4C105DFD6FA4ED3D2B15998D02304F1F8BA19D607C55B60EDA5099FA0B
5F87FB1A9C53635FD3D406AAC5AD3E9FA78D636A2BFA0A632EE7D2A1FAE1B2B1
206DF1F27862C4103F676D02B2744A8270A5D1D0148EB34A3354C52E16278C71
A03CBB9413EDB505DE338851C0DB4F7623427C6F51C7A307A8D4F2C4468147CD
7A4C52578106BF7D7DF5EE098D610C2056CD01C50E209057AD0BE266549AA3B7
CA1A5BFFD9A567EAA7D2B13810A80CA08BB65FD333DD6A1DFD3F3CF2476231B1
1E3005F3FF7BB6B14B8D584BA7468DFECCF5BE1B12A00F107E3B11C7D4B4C5F7
61913054F9FABFDD9A885EF346524F2A01DD98D2D285793D8DEBBD9E91E59363
F428ED6CCF88DDA843702FEA9A160C6F177D896ED0D8C720BD9786FFC9722A41
846F3026141EE9F2D8BC51842C4A5DAF315E00AD27C412B1F77E5FA9D38C8707
9CB3445C5E4488CEAEAB7FEB1234826C9F93C1EE153B96BB593BD43932C02CA9
125AA09D290C96D22C17CD43FFA44513A2ECCB35B69369C888AA39917CDDB885
8606089CEF094C21C8D7FAD2ADB181B67A51495543AAC99F499EFF2ECFA52700
5CD6FDE60CC49B767DD3BF6BA86CC36E87B58A2C7110183BFDB2C400CA81F0B8
2DC98340DBF80FDF54F2561A784FA50039F2FC3B39A9F75849AF4F7693A60DD1
6D94EE5537FD244DF8D6AD68ECC29592EEF5AC83A4C947568085B97644291000
D2BCD0C54BDD8B33610D50F17723A7AF1989CC30E26E756894FD5875A90D88E9
F6B5C5C889681A26E56520B241B3B3323122C699B948C279AD00967975FEB53B
E36B8D0AE7BAF04376E0991FB6D16C26B740E1F2030FC5F4F3B99F5330381267
A2B06A906FE1F4332276B8583276639586BCB85F5B12A5FBABEC2FBBF498AB96
F55DA6D35FB7CE5CF6EB2F9F428C431683A41C2C61A429E3DC0D87D7667A0DE2
85E783703F6DB868C99D97813B2145791FFE3E2C86D31F309A8EF49DE60A36D5
B6C1EC12BEC917755C9D470080B0726A43F79284D8C037BF59C83E601B485A16
8937A89F564B9BE096B78D1F7958922E67BF4BE39E83E4AD91AEFE5194B89C0F
7806D9C84867CCA9F67943DF89183F2CBCD3AE89D56A2AB3C4CE836E99DEF32A
5250765A9D4B49402912314A73CB5954C6D639CEB6F8A0A1F4D9414F1CA61230
3507EADE4D385A5E94F122140B56A0ED02649947F57251094378AF9FD4022E17
E04A34DC46A53947624B742848D3AA09A45D8D128F1233F371928B924F9E8D6C
E9269757FCE1A28877C41DAFCFCC3F05B0338AEF8D5B492307879D2D78ECDDB4
DE7A2E0124105E5C0F21BB0E1C16282324EC09CB33BF28E7B6BFADF505C0A91A
6731DC75407E9819FE68FC2C4D6B7E607E26481C02A184638BF92CBA44AD89CF
E59081E498F88027568E1C088F279AFE031CE20930C273EA59274182A7C7C43E
4F7F38F5287778A9D10DEF566754DD494308646C3E036CE5ACECE8F1CD97109B
5DDE6BBEEB6BE25AA86C8BBF0D1FF7D0E22B078B838783721496B30E5B09B2C8
DBA794758AACB8C23B78CBA5B4838C19AE0FA306748132FDA8AF192A51DB00FD
3C01EA93A6C374EE3B8F55F765F444263993DA92713D824A495496CCFC0CFB4E
67CFE82348C39084A9C71516582BCE25EBF7C1E0D8431444F779F5AB63FC5F28
2FB23867D928A14FC94468128D67858B49AB56B74E9D6E459220D22D3C6863DF
4ACB9C7940F3641CB824F737D807E2CB59BD0FA0BBF91F6FC82A3E7D17681E5A
4678209A3713D5487DD6A81DCBA888A5C2EFF91374F4DDE1B586125726323B68
16BBC785024BF0A42C45C69275620844678A6312CF48AD31E77F7A0AF518ECBB
6A5FA336DA2D495799F3550F7CDBC35F18E2FAFF16AE537E7296E0EE3EE6FC00
B5BCACA4693DF0370A98042E527BD65EC1E77D32A4B3ED23CC96CE1BC740EC90
A076BEA1889F7C7C4B1EBFDDC9CFB9214DF205387A8DB8402250ECAFB03F0D76
F21C681F6D3D5AC64B3B5CEB0C697DB6C77F9F5EF60C3FB3D99515A55754B788
73C6FC89267AD8D2BD6D6A93EC2AE0FDEB52BB38FBAA59B1AE92C834411DF3AD
028FA7209B08B9A1E9974BA1E0C5D0392F36AA2311C1E2E411AC2D975C6CEF1F
1C41088F5534C9C54907E3E92007D5A26DCBE13757C72A5B0B732318B2BC5ACA
90BA0D83ECB275CF468E90DBC423710363404B9C07C17C2E8073E85DA1EF9EB9
34479F0419EF5632E998D1930A10EF9A7C4E0857D98F1E8155798A5E5B010525
86C2EEB7A7EE29E05B812486844D2EA853F66589C91256B11E15A27F6E3235C0
F550556BB685C2C15E14CD6EF05104109AF261CED6E33BFFDECF8AE2857BC2A8
64120F4E37C4812EB6259E2A96C0238912226D571DA22135D42CAE4159CCFE77
3D9ADE8A25C3C962840DA5731F1555A56F4C8FA2D0D7F069B10D869A415C8CD6
AEE8A4EDFF8A9D221F960AF6873D8046AED36A8B2DBE4CE8693298DD28FCC654
76A821FB9F157911E60BFC3989F3AF813902BAA1E989E1BDDAE154F44D5D6057
E1F2EB413797B60D39567D61B9FE6689E9B549CA6290F7EA7727CA70F0B5BB29
37C004F4691EB43B42EEF7DCD71EBCE91F5979A5F45D3C39C797CAF268CC072F
36EF1232392C62591F159EB60B490854F94FB62D0B2C30C2F83A3AFC4A258159
C424B359AFA87BDF0101B9EB1A015ABB9A4F973F9BD2E324E8B75BAFA9E7D3CE
CC314DCC97DB7D26DE5AFFF0B103E3C59BEAB947D42DA31107BC3625A830D855
D778A8D07D4CAFAFCF11281B9CB832EDB4C52A31E6C102236AA2514D461923B2
5CE6500A60AAD8F7A0F140AD2EA3AA6C50684EA6FBE357678D1B3EB2A32E2D90
96FDEF370B4C22E3952CDCB610F56E7FE04375081EB10F924C43A2BFEC536592
EA879CDE6B7972F4C158F799BF6209D2B777C13DEFAB9BBFFCB3FE9740C6D9FF
8BD0743CCFE73E0B0F42BEB8396D03C6ABD18F70784AFA77C88137E42846577F
66B459169FE19DCF73C5380BDDFD630F60A9558D53F1A8ED1232C425BB594E43
62B73FA650EF4FF8665FD677FFBB2243B8B8C9F484E25924DFD1086FD8903D08
F32E72BD8AAC7C4B358634E404744FC5763A71B4525A4ACC84285AB2A9CC81CC
F57216DF08C98EE86C72DEA5214DB8B6CFEB267933C11865E2BC11307483441D
2963D63961CF4DA91E37A8D5922C9E5A8378A02AC76BD481F38DD868CD2BB26C
911C37C0FBF3E566388AD1F432E145223B1609F7BA76ACEED169DCF8D3080024
2461F6B4F277FF655817D6502F270092C7EA469C1E8B537DD0F33582C9C29F8C
D6E5FA33ED0BF51C31DD7109BCA7E9DA91968B0970E4F89199BF4F71E1F67587
A59CED582E0C76ED3AE0B6A736E6D297D98F0746FFA53C061CB608D35A6844C1
B13E097A072C98477A2A348F32DEEADB85017615125B5E8A3CA425906DAD85BB
F397BA999D64A3A36F084CA5FDEB1ADD752C5C2B393685654F00D4C233F2707B
CBAC21C9507357B0C74851F2333DFCF3D97A98FCA949B1DA71AB27885183DF18
12728EB8C9955BDC3C107F352CABDEBCF9A22F9F4F4E903009C2A49FCA5BB62E
5E51E56CA70B16425B302787DFD0AEA1C81BC3D6DE2A45C15172FF2CB08E341A
3918E4C8F09A260BFCE7C040D10575084BC081821FB75D8D1862285C527828E5
E203F328AD955AB433987B2291FDAB439098D4CA52DEB18C0943A39B48A6A3F4
999939623352AD7577C8EB4BCC88ACBC5A62EA1F054D8C429953B37E579DA191
A63FAB427A45CE4DB5FB80350DBBB55A259B918E8AE8B2EF2E39529212B65E75
65AC5AF02409FD0E9BFAC42105EBEAAF269711C0CE1EE92FA7DDBA6569E647DC
066E3BCDEFE3928BAA8452E64FE2DAD4DC0B2CF2D83DF719778F9D2578EAAD08
8A7D0600F31C9A35E74B1ECFB9AA7B9F0E4E6C466BC0F5343D79F05E90456455
6B9279FC9194E2846675A21436F96354CB9740D4BC69AD60434EF2824246CD4B
7C7592758D2EB8632504EA13D52174ED5C933E8C8525F88E6CE4826618615CFB
E6B94537D9CEF904EDEC7EBFB0E60995CF6457CF0F50FCB2813F3E8130E33961
FE59835F21DC12BA218782159F5AC85C1B43EB9623DB369D2E0217DE72D65B0B
05112806C89697DC6FF5E875146F413F4C42D8470CF5C94896246D471693F2DF
2608C28329316045535EB9203444DA89FB10C7BE1D5563DD47A48048AB09DE71
0899BAD015A43A6A68E4D42CDD2484CF47C0FB3A68121F4243EECE2D87DF05D1
F89C5B497B45FE81D48BF1CA23E229BFAD376A368F7159166319930D0A7DD461
49BF24733165E644D4776B3AB7C58EA0A9AEB4A2638E950EDBC979BE159A4D69
21CEA1A31C82587A0E788AB7158E556DBD5F54C609517FC0AB69CD2260364701
EA7082CD0EC8659948F84008F4624A4F41B8DDA112B42BC27A43EBC897ED2C6E
AF713011776BC1FCD81EF9A29C6807685FA55F4E0503D39165A5990C929CFCE0
2EA867E9BF2A10E36A4BD0262CB1FDBDA69FD3C29181C9DCC64B54E3FE4AF309
D526ABDDC92446B81113AF6D9D07BBC2C8B387726B001019F3BC3778A52203D8
E1D1510EFB6BEF2419CBF1F4F77E05DB98DBC7FEA6FC0CCC5B2A8CEF721FB68B
648715845C0DDA80FCDA32585BAD9FBCACC7D75A81EBBE8CB838CE639D2E4080
FAC2A13CDD6DAEA81198648A941C64D12DD4CBDD74BFD2C45FD1A30675D11E8F
2817E361F92C4FB6743FDA4BB0C1257FE26C5A5FE4499B09CD8F1266A738DF72
7985D1D1F0CF0362D02534F7BD45AFFEE4A232ED4399A75DB103C3AE71702350
D62048D1958D36E171C0FDB0B7661A99E3BB1BD13565961B1B3760EE57E29DB5
69DE16D7E6F42D58A138028FE8FFC29FBE0F93390BF69261ECA0BE81C9C8D7B6
938CAD55A5115A0DBDF3096A90A9F5A23A3CE8A015130A0FB817DE38359C63DB
2208BD0E96C682B067F1525DC438EA0076574A376BBA7504D6BEC5D0C7C8B614
7928A0CCDB842F2F84219987AF7E84BE05852F9C004219582D45949B8C3A7907
A725B466360A84A5FFE1F4E73AB0D97814C976112B9DE60C2C4775EEA1C710C9
CCA91C3A0F3DDAAA9B45734348FF7763C01AC139CA000B293D12E5797D09B504
F072B85E89435944654068EE836036C4EABC2FFFFD635262090F8306DF0CD7BF
A48D28BB363416C095E4386599D4C52C9493F17F24CE273FB1096B4F700B99F1
3397359F0E4F540DA987B36181C5D210D7242EE09F50CC3CC234FEB907BB47E6
B700F7BFBA645864CA94CD5BA274FD97632C6C0F0067967A1A37694C50097240
019E47B2230986A5D37263D62BA3D19A84EDC60AA2C2AD169FF34266D8A72C91
C24108FC0F38AD844C0BF9AF326F201D889F40D7AB654F3C24E9BC97A8CEF48E
9D3AAC9798AA82080B0B3CA0B0F7EC02D7FCA3ABF9144682C7325EE9F9CCD651
BF60F49A27B2A4605B8697BDACB2A4054AA21EE77ADD01D476462B75A3E03BE1
E3038A14FA23B994162962680130D78C0B165FAB5F94FF12D08902EE97B8CAB0
F872DDEF7205F33EF50648FFE450E1CD2F0FE4EFD68797E34E14CAE4A3742ABD
44E7DD2F65C460DE6C53A811C8DD08009B2FF8F887003900359010AD52472E97
602424CC86C82454190AF058614B77D0112527C92DF85C31BE5BB72245268D1C
DFBE9B4D20B0BE8BBE3C1A5459A27799E63F136AA3B70D1DFEAD8D88BB590340
604971BC0A71B9AABF1D9BFD814A97942E5E998E3A188F654884B13C9FF6A78F
CDC1E6B72D89032A5641A9B6D46B9163FEB5AC11FD64EF0232A74F141D8778EA
03F30EC272518C993EC54B52B71FAB0D800FFCFA4027E12B63DA55BB3B31D9DA
389D375A025E94A854A1BCFE5626C85483608E6BE9A1529FB7CDE3A1A0DBCEBB
2BCEDAB114BCC37530A9621E121B1809F933CF6FDB999AFB6E5A6BC5EFB35ABB
F6A257B04F09F5E21E2AF323B50423D218FEF610C619EB91F39E261ED1CFC57D
F481B0830A94E5D19387F603F7FEE6A373F4674AD17C39E1F2030FC5F4F3B99C
C78CA9FDDAC13FEAF57217EC230CCA301F89A1016CD7C13EC697DF01C1F094DE
CCDD9F43AAB88640D0E9347B1382ADB179DA98E65C015DD2917588A8FCBEE927
AA27731340E0334819BD29B657D61EA5D5A1768E03D1ECE41EB1B6E6271D840F
8FBF6C4FA07E4855AB3222D1531C5C02848253BDAC8D95A06EE7B8D22E09B7DB
BA7B0760853C1F9A390F0306308BD62BA71A8CC282E6E4F865AC8FDF8DF56A82
E7E6D4C90730CFB259E348145C5C9A51773D0C75B3EB9F56CC63467873B3FD87
74AFE554C6929CA9C20B62E827085627A31944C10E108665DBADEC977F6E7846
D738BDFF5A323DE18721C03286E3A9A94E35019024DD980D63193F5B7327F9F7
477DDCB99714E9C15A136E4856CA485A21ECC117B8B004B03FA00E54B8675D83
F5D851D392340AED402E9DFC0045FE27072987E24AEDF9B4CE2928CFCE6A72FB
8A8A86511C36AAF671B30D0E8CC3E41CBB902CB474836A46D325C9E6C3D6F058
91708FF5968776FAF644E1879C37A1E31B5C76D595F18A4289312E74FA9C289A
53647EB6D7740EAD4063103B89A932C946455256DE821247F764D842AD871F38
8983E560AE31E321A14D78E952EEED8A2024DF773AF222687DB9CF10CD88109B
0AA050F06A64F755D1999995470C2ADA7DC66857AECBDE1D3BD3710A1EBE7572
3FC5E91602CA0A1F5503AA671C48DF7B405E91C990CE9569BAFDBE642C963411
707E41DA572B26015478128E17ADC676E012A737EFA5B743C0FEDB224E360B01
9274093637EFBE8110087320F134579D9E18D1E0A10A198B4116388E7C2CA43C
281567835CF037ACE47977ECE30032C0C6C59A860FB262168EBB9F88CE3EDA25
8CBD400C4AD0DD5FDF21E5146709D0B03B59813DF6BA96772D00207A6F3B6379
9836FF59617A8AFE66C09166915EAF14592EFEDEE89E943136CE0005002C4E3F
BAD81B389A61782C353900D2350CC18F9BF3BB85B770A2545C4F82B52B33D92A
27A8A8E7B412EDCDDD5995A6E117F6BC806A41F7F1107728BF1E9A648CFF9742
73D18BC7EE0394960014969BD78FD57BCFE092F16FC59B70F1C17D82D4DEF71C
D3173441F14310C406421EBCF15C29DA587D09D9A6DEB8F502FFB286BFA3019B
D75E81CCEF10611BB7A2FFB0FFC63B7D9F12B2F4A61E66537C09C2B815563E78
A763B6F500FD4C32473D9875FCC1191960267A991A8192A287F5074A8C01D7A9
B5D4073C9BD871455CE049CCFF7A3C0937323ACA75A8EAF1F3EEC674838648A2
67F039C7DBB8E693716D9FFD953676199029B3C52A85E3A069D5265B78DF1E8A
68FD306815184BCC426C591BA22DF38389D183D64EA6EB8BBD40B8E134E17AE9
565160895CA8D5C119C9E649899F6C21F3705031C9111E290624DC390B726D8E
D759E4EBFEE1BF205807C857163D36D714C9AF0C148AC78EDE1F2856C9F4DA9E
B000BF64F5721ACC89C58A40EB1CDFFDB901F93C044C87B3CD95AF693B429828
F7C1302B33DFB91A93FA995AF792FA4ECB9EE778AB72B03B0237C8E67D174E8E
1735173936712A690168B8838D895E8BBB56D6E219096BD1E09FF6BEB1469D37
1688F5199E88AF05E9E6696DE4E39CA05A8F919A4C6B227A13C6FAB4BAF10C72
A23626BF6849FC82D5608AA9DBFE3BD2D72E438409C48B746741632E040D458B
5A1D18535E2BF50AA2FC7D4B4D2AD7A2FA8C47740F3834E4D17BD54514602B2F
B30C9A40DACB3A1AA64B9BF372E32F1B411B6B51FAA564DA0FF48EE6402B3C9F
B77D5789116E62D375CCFDB723E2904AE0FAFAA0C9E9BE388D31A9E3F6FB12E8
404A028BDC6862D2B0ABE1E13CEF29EF8D2F6C78E60CC0152340DDF68D3795AC
338C57A05C4E5D56A4DDC4681B41A25362E4C875734240E4B00DC0E60C98FEC6
C11C49CBE7C4D8413F5355B0E26711658E3636933A60C554B80B5A7C821A83A4
72E2A837C34105FC0BD61DCD45C709377306F725BD062FDCCAD45C850AAD6CE3
CC501264706CF99E1321396F2D15F5D60F2354E42A68FED95C933B074191CC75
4AB5FAAC0FFADA1341FC273B83C2DBFBB4EF256B7156955121EFD5D365D41125
77066012F35BD4B32289F7FE8C66A6A82D7D7565DB2D4EDD16DD0E11384C2B99
11C0B7333AC1AB759280D7D2337E86CDADFF3B72732A4E082C00FBD73BC06D80
F7DC7809692DF4DFBFA3EDA081AA379231DB5D3C332DB2F5186BD6043C9CF23B
9B6C2A6176056CE5DB4AAFD407544AC6B808540C553DFF75F3A00495714800B3
06BE00A31AE479CD96B4F9C3CF1D39123EF1C1ECA9B83CE13ECD19BE5A1AA944
C54DB9518F931EB97DD9D881E50D8EF64441BE2105B861FAC6C3D38F32F29B1D
B2FA3167BDA0C610923F255A23E86A87086C49CFA284AB05224551CD051A3CA7
F34164660413E66E1FB5B051B7D6BAF161A1CDB5133E5A5D0B5019F9E1D42684
3264201C49B086852731D40F4BBBA3557362AD0A39F29E7E10E5CB7D4B3D0697
4C660A27F619ABC0E178D15C8C2172701E6B611DB79B8A2E285ACE63FCB0B137
685611FDDAB2E8FF68D87D202BB69739202BD31EDAA120CE54ED0DE7EAA814BD
46DEBE8FBE932F21EE27EFAB0519B8B6688DE9E47222A4AD65C2ABCCF5B9903F
013DFDA4272FCF11949423ABF5A06342869329971DB2754024729BBB2824C4E5
CFE024C3AF660DAAC64156BCB30481EB8D0920E6FE0FB696AEE312CB054E84BD
3442D366CC01BEDD930B2071CB188A06D85305F4994827DD1017EEEE54B481F0
652FFDDC2FF0E40D5A3A2E5B7AF64A3304B9E86E1BAFC49EB8C929A89DBF371F
08DDF47A25F389DE2C91C9E45771931921F82DA0FE709B9447BB18C65636A8AF
511CB9948B797F629FA6B66BFC686A71E401C3D7EFA3F6906F0F3BD822021793
F292636B3F8C7B2A0D353F370B3586281FD84B5F9009000B752CFA7E50A7F967
91014712DD241BD6C2925E38CBE6CCA897724AE8F908EF485539C1CD9B0E9D7A
0546E34F8BF633F656FE32F1FF453232648335A0A8E68CFFA780DFEC1B2DE27E
BAD1BAAB063D4EFEB1B4FD3BC3AD6487B679963ACC4B3BD238174BA42C4FFF8F
E71DFBF27CCFF4CD2432804F0747A3C6E735E9600401E33DFD17F6080B00A9B3
BB548FD2D8337556C5876C7C0C0289A1BAA29D4467B2EDB0A3034370710DDC16
3EF953F7907469EC4A4C4E515888278110F6132C4308BB25FE49FA8CB2158D39
8EFEA4DEEC40CA788A9181DB8D9455DA2486BE6DDC0940725465903AE48C1152
74A883E7CB4583544EADB79035787CA842053C119ECEE2F49FE8BB78B5490672
12058FADC299CF292FE789840D2BC0415014B4872D158E88EE3F59090FB93A57
47EDA57889E30E54BB4C798FFBF14D18A2C653EF52DFD5BD5FA826AA08559B5A
4E0E5B1DE965B895528EC9017860DDE223A37469108F44975B7A94588215878E
6866C71C6FE5F3B7F8AB325DC5A5B0D8ADB5563588D38C1151A012779EACE630
B4C997B3FE3D863BD1FE2D56BD513E5BE907EDBFA0F6944AC07B89EF93F9FE63
0AA99AFB93D3548358D6B416EBB81B161FE31633A6EDA1EB40611079EC30F206
C038D145FE5318391D7B9754F37372464A166EF7E182A6A4047B3F4FE24C8FFA
00BEE53E42323E9B3733DD3EE7DF7F774DE5D0D0980DA8C63007B79E0DDC7033
4FF6D7B446F67BF70AEBF35A2AE55664FF7BA6B78268276EDE30154235FB8DE6
8F21F3B0AF9C3AE65CD3F6C7F6E0DFF467A5BA6F5AABF3E7053CC6F43D710073
87C697011834635F86095CF4ACDCC4CF12EE4635EFC15D5D7BA5444EB942582D
B27E6C1A558C82F71E796C29E1E4453B45FEFF5E341613DF5E22169BDF36C06B
A04249DF324F65176B760B692E3896BCA6B5CE308A767EA6FE093E393C8ECEB3
EE29DA78461BB8B1ACA765025C551AB599C3EA4A5B43EFD388D2DAB89BB94D7E
2F6A320A79C6A1C23A695A0C8B36CBEEC17D5A5A54F9859F2B46DF97AE05915E
791F1CE849154C53C445258C77266B06B756BACEB5FCD36A0F153536DAD78AFA
20DB610B578CE26E351964BDE6F028867B9CF1B3A17CE6B01F7BF097E4599421
048329FB29BAE351A07AFD9E9D97797440C314037C7E13F3D146873CB848F7B1
6C9F9C186AA0AF078126540BD2D435D0AD6CA9233144A057EBF7281D38D992F1
779CE576DBC43DA0B3D52D76D9044BB96083B0267E52474998E3E6319EBAB3D1
D4F44B243239BD0FB0B334503F9F4AD872B7B2B687381BCDC4D300B9F0AFAA58
7C618BE88C3D473307DF4FA0711FE40BC8A920328A7FBF8D3AC972C91E47BB64
2A01E0C4E0DE1F5F515F4FBA502926219E1D01834759C1B53084FFDAB17F00D2
9B2C18AFD70D490F20A4305479A29C6F7C694517271A42B443C7DE891D22C01E
B907D1413F647D905576F2E22778C426F710560A9BB88DBD9146F1A6FE3EAEDC
5808B30F5554A12B671BB2CA1398F65FD0A764A54500F2222AEB04A439D43635
254CFF36C827155FC7F5C670321D5E500668E59A7C8DF2AD0123EA18D5AB0735
D57A6DF3C0DF29B22F885988C306058ED73421F9D738DBD7BFC1D0F85BD47E3C
79CDB4AD769ABB374D1B705D61C42E6B0D47DB2791AB32CABC3FAFA58B5089FD
5B584A49F407BC90308F450553308B687B3632982D41F6C7D9C0098DBD18905D
F0293FE27E698D4BC1C4339CD72127099F2F351F681C4F3E198C6F84A8E325AA
F18BD5493D060A92B195840782580FB079F692AEB20C9A785CBE4A3626706220
C9A656C8C009782A89EA0B50CBBDC7108B0D08D9F258128B92AF1F2326F31CAF
13F8835658A87EB98840F13BA4C52A2C60CCAD9B260E841D29D8284C373BA55D
54800823824AF385D0AB53786B334B6BB3BFE3BD4D1FB335988AF33EC54374FE
945DBF5772675D8C066CDB0A3CE819B912EA2C1B0D9C8DE08D80183653373840
5E9B7AB69DC77FE9A283B3A8C6A6F78DFD0635C57A4F765901F6DC2E9040E85D
239345731216B21FF5BBADD8023AB9D1FCF2AC39103594EC51386282C525EA45
0CA2E00F13584B0AA7DD92F2646BF7F30614723C4D739EC41CB885A429042F21
E131BCBE2367ED77AA8255803096E1646B3F3B91AD9F52854792C3AAB2B7C864
966FBEE8989D3AD64DAA7BDFED532F10127A3D133EF8D24A0B3CBC3DAE46817B
2C306A106B9026C92A5724D8C0FB19279F86AE6C8C6B3B5D4AB4CFAC6400D648
85A7529ECEB3758E9DFD534CAC1AAF06A06E4D4EA0D63147E7B4F682116D96D8
E1D86A54EFD1C11F0C81DE27A67CCBB423527AECE390C311309580D5334A523E
398774F4D2E991E7A981F856409739885A994617FC37D1E56AFFE3CDE50F7693
D5A4D6BF6BA810B780AD3D7D0122075B9DCC920A5FC0D6206DF1B2B7701C20E8
11C7F70E4F520C5AAF132A27B809011676A70056DED9C4CCAAB959197596B2DB
D18DC081E2256F38328F9B41F64F97E7B2F457AC57492B349F1E88CF8686EA19
A2D965A6D160DF09A73861FA00291890482B8DE3E3117875E5A3BE64FF7A43A2
031B372029D198494C1AA394B20AC8DAB495CA2A8F4F65D4884D1854DB59D0F6
08E8471A5D05E0B822FD059C4858F97C79D08492ACE3AA3E3C9EF2EE67132AE7
219BFE341207F12B03968966A34F5891EA33E38B20CD1D15987A7716BBFC20EB
3DB805CAC99BDB86FAE66C35E865636E5CFA757AA5E0CEAB244A45B281762ED8
98964CB404D9E1FAE18F1A7D26F4B731C3F387F15188EB5B6AF93383BEFFAEBA
1CA6C565DB7F48D70E9BCB38D79E7008ED1E8A49229FD44F45CC0F6CC85C2109
568AB9806C19B7E9E550F0962A137CE362192A347B6422FF92CCD22851666B91
0BEC1F0B5A22E5745FE8EF42B032BB3D28B42945DA4A9455103CC33474390660
C14E29E66623A42E05AEC0E8F4239727253F312186154461D79CB245FF8CDA7D
ADB788FC0049CB189CF6C43B56887DAF0312CC79FE5120FF31494656F64A2364
3A74F5D36BD724807368002359E91988C6D52E4285669EE5F4B7E6A618767F68
BA44B66A8460169C778AF18767637093A0A3131A990B383C2C151990AF87C49F
8EABE54CA177B4CC78816096446F2618FCC7298239D06288A7A02472FC338255
102A3C46A8A3899D6D60A212DBFCD83F43506B81AE125EAA550AF4027C0D942B
57EEB20EC3E58F517C5624CE9A41ACDAD923E93EC552C7F4C4210CABF02D200F
49606CCFBC9EF8DAB7526C4B9E3876BC9388C67AEBA00D0D9E56FF8FD5BAF67D
3711992B3061D71E2CA985D316F605C540E125C4B0F1E8DB4B2D92677AAA1229
61AFBB8A5E7E066892A019C794AED175A444EF36DE6541ED8D78A331F1839356
8251950D93D974843E3A99ED69866552042957B12015026F168AF454F00B2791
B4D7E85BF2DF3BF895FFCD2FBC00B681159C8A9AFCD33EE5CF12A31278B8D786
423F006504B66C3760BB3AD19E65545571B0D033F74EAA2B0DA0D8603B4A7A4C
AAF491D4BC7E7CDB36A06937B72E028C3D50BE01FC3D31D26D2DD2320FE3EEAB
997E28369E8C76FA7115E4A7406797D9D1297EC5B70A7F0D6D7DC137A90478A9
B37C512A23AC5969F5A9B6C04A6682FD78112D9718D28BF9E9066309CC14AAEA
4994AB4A1931171BC14D0A1F7A6325E107105342BAAE63AB8EDEAC18697874FB
336C8F8BB9C9046AA5CC4D508D951862A58F9349ACCC25F477834FD16D96CAC1
F1ADBBCE1581F2B501195C4ABE269882D1AA82D68002F76035066FE78DCDA3D4
06E10BD86AA9DD4116D909A60361419F10FD268F72ED28D348B72E28DB8D65B8
D22AB04A724D2519FCDC0BE39099DEA1022564A086304FD92B50C90C7A2DCA71
0B4437959752FE9A145B5D4F8D9E829A9A12B30E79269342A3FD257D6D653E56
3D2A083DB580A7A549D9D4310698697342C2F7003C949A3BB100E09FE26CBD3A
BC7985E063B8E5115C60F102117DAE7B2D8C4F594DBCACC60041E0985CBD24E6
1F45F16123313B35059E85DD54513C67BB2275D8AA11B3F7E9C9C1D350DBA4C7
7B7E95D06ED17E1EC8CB3484E99BD498286E1960E7DE5ED2F2572BF01E39FE52
095CD5FD6DDBDBAA0FEF64B89243AF682779F26FEEACC608455A6B8B8F1919AC
1533750C74B722069D3CC49851AC9C7B581241951D8EA40FD8DC69CD312F9532
86A517B34F61CDFEE974575AA625929FA6991EF5ABCFFA29C70C899E14087C6D
715C29FDB180D6830AA37E89252CF36F6C8BE34DEF93F42E0AC04E547EB8BC29
1DE199EA8D5611C411D34D484954DF00A8415D70BD54637941C8E4627D8C077D
8CD8327440CF61B3CF2B5AEC01A50ECC7F28A3E9C11311C145F43C25EBC8AD89
31A749CB510A60174EF791513FA1CC723447F8C74CCEB986863DBDD083337CE4
C5D33697970CE3FBC14070DB6804079A7B406A0AEB2C3DDAB259B3A88DF06CAB
927945079A71F682065FD264E5ECF87EB0178BD882E77D1781B56BDF1AB3D793
991B84E6FE7644888A5322C9FF0C684770DF02A9D8CF21F49B9F8E7AC0DA7BC3
7E6188DC204E2317DED47A2E275E11CA4459C2D7F378B62DB43CA4023FA72792
1900404C0892F32E507BCB86991993F8B6338534F400A7961D676E40C4AB6E76
94F3FEED86C1D6C36F4FA0E6607AA9028E1209CEF6DF6B5E3CE6524CBF562234
D6BDAEFA99540B75F9DD3DE3186432F0AAAF4ADEC2BDB73F98B73A6A77D094A3
2B23859A4CDFB5EEBC5FC2FDEC6DC8D6D5656B3DE5C4FBD7C5C87495513AB68E
1BBBD8C2250C897613441A0E649BE7E58824E9B731FFEBE68FD133AB847F8891
9FCAF407237ADC0546221F623CEFBC81724A76B4AC604BCC6FE435A2B184752D
0965A77A86E443776EFAD1E34740742EC9DF7A150363DD8AA4B840D6E56C8A6E
CAF2EB0C4034DD573E1E57CB110B955C77DC9662282952D72E87DC7884B33708
6AF0281A6F9A856BA154B2DCDCA15FFE025BC6DE525778B2FD0FC0881FA837B7
B4EBF0EE3522005E94A1B3182E486C1D3EC0C54A237DCA29301171CBB423527A
ECE3906607AF5DCC17EEDBCD1DF7BD180CD02A449255D0B9360734425B093E79
FF157F66D8DFD5C6668C60E487A6BE374EA524870C43BC5F0BC107F0353A610E
A9CAC9C819214B6B96EA9E36FFFA2CFA0C5A17578B442AB57A3A87C38AF8A0A4
329EEAE710CECA9ABD666AECAE3EE16DFDADEE907E1961458B9E4536F58522C7
47694A6154C966CFDFBFE4252C9E3C5A7192D07B1DC8BCD5F9D328CE7E1C577F
92480E68DDC518F5DEC929D63C5811DD4B094B70B5F09ED315891A22B8BA9937
337D3FD8F5752305598979F346992FF4F851BA1507D4B871CF5610BDEDCF40FD
5E334FDCBD5738F9947C4D9C05092A894157CA70793CF0416D540D9D238A210A
28175C221DE84F41987AC5210BD083A451B5FFC61EA9217859685959D2A47248
BAAA2A6D8BC5AF855580441D4BC108510A92BDFD8DAE682D77671B3031907442
BCEB19071DD1592968F528575C6C435B6E36DC791CC1B1A2B04E9DBE2C1F32BB
8893D8975A2F95A16868AE866ABCB617A9E7056F25A07020C79A4A0ADE04D972
7B793E36D53C23153F669FD69CF96073C3078747F78A260C9F83A9E83987B9BE
1CC7DB45D38351AF138C320B4A60B2226B11712BB78A42F971B19731F1D805D0
E50A525C31CEE515652099EF69809653DDF3B453FD011B94946786EC5F50CBEE
A33C4BB942265ABF10571729FB159E63B6FF2FF11AA7B0D9D0A60BF2C688F1D1
546BCA7B768E75373B97FB81DC7D33B8D160652A255266F5E3A1EC16A2FEABB4
34DCBE48A4FF1B9FF54F9181869E31318AFF2BC17EA64917D0B5999B5C161754
1FE9EB3A99966C22A581A0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000
(C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktional)
@start /Fa 173[959 82[{}1 1328.35 /MSBM10 rf /Fb 203[993
1[993 50[{}2 1328.35 /wasy10 rf /Fc 242[1594 13[{
 enclmmathsy ReEncodeFont }1 1594.02 /LMMathSymbols10-Regular
rf /Fd 185[723 4[830 8[553 6[553 2[307 46[{ enclmec ReEncodeFont }5
1106.96 /LMRoman10-Regular rf /Fe 160[909 45[606 1[606
47[{ enclmec ReEncodeFont }3 1212.12 /LMRoman10-Regular
rf /Ff 204[470 470 470 49[{ enclmrm ReEncodeFont }3 885.568
/LMRoman8-Regular rf /Fg 205[886 24[1033 23[369 1[{
 enclmmathsy ReEncodeFont }3 1328.35 /LMMathSymbols10-Regular
rf /Fh 162[361 1[361 29[1012 1[361 1[650 650 650 650
650 650 650 1[650 650 6[506 506 40[{ enclmrm ReEncodeFont }15
1328.35 /LMRoman12-Regular rf /Fi 141[586 4[1138 1[676
2[749 623 2[676 560 553 683 10[758 8[1258 6[842 8[650
1[361 32[671 738 25[{ enclmmathit ReEncodeFont }16 1328.35
/LMMathItalic12-Regular rf /Fj 650 2[723 5[650 17[650
105[578 686 686 939 686 723 506 513 506 686 723 650 723
1084 361 686 397 361 723 650 397 578 723 578 723 650
10[975 1[939 723 957 4[1192 1[1011 2[975 1021 849 885
993 2[975 6[361 6[650 650 650 2[361 434 361 10[361 33[{
 enclmec ReEncodeFont }50 1328.35 /LMRoman12-Regular
rf /Fk 3[1196 134[1196 837 849 879 1[1196 1076 1196 1793
598 1136 1[598 1196 1076 658 982 3[1046 12[1497 4[1616
1[2041 1293 1685 1[801 2[1353 1412 1649 1[1530 1625 8[1076
2[1076 1076 1076 1076 1076 1076 1076 598 717 45[{ enclmec ReEncodeFont }
38 1912.83 /LMRoman12-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-2331 165 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a -2331
165 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a 1328 x Fk(F)-239
b(A)717 b(1.8)g(-)h(1)f(Masse)g(-)h(O)-60 b(A)718 b(-)f(BIFIE)p
0 TeXcolorgray -741 4800 a Fj(1.)p 0 TeXcolorgray 651
w(Die)432 b(Masse)f(eines)g(Drehzylinders)g(in)f(Abh\344ngigk)-36
b(eit)432 b(v)-36 b(on)431 b(seinen)g(Abmessungen)e Fi(r)467
b Fj(und)921 6792 y Fi(h)436 b Fj(und)f(seiner)h(Dic)-36
b(h)g(te)436 b Fi(\032)g Fj(kann)g(durc)-36 b(h)435 b(die)h(F)-108
b(unktion)436 b Fi(M)575 b Fj(mit)436 b Fi(M)139 b Fh(\()p
Fi(r)-36 b(;)221 b(h;)g(\032)p Fh(\))374 b(=)f Fi(\031)345
b Fg(\001)297 b Fi(r)42025 6310 y Ff(2)42848 6792 y Fg(\001)g
Fi(h)g Fg(\001)f Fi(\032)921 8784 y Fj(b)36 b(esc)-36
b(hrieb)36 b(en)432 b(w)-36 b(erden.)921 11330 y(Ein)509
b(aus)g(Fic)-36 b(h)g(tenholz)508 b(gesc)-36 b(hnitzter)509
b(Drehzylinder)g(hat)f(den)h(Durc)-36 b(hmesser)508 b
Fi(d)497 b Fh(=)g(8)221 b Fi(cm)921 13322 y Fj(und)432
b(die)i(H\366he)f Fi(h)369 b Fh(=)g(6)221 b Fi(dm)p Fj(.)434
b(Die)g(Dic)-36 b(h)g(te)434 b(v)-36 b(on)434 b(Fic)-36
b(h)g(tenholz)433 b(b)36 b(etr\344gt)433 b(ca.)h Fh(0)p
Fi(;)p Fh(5)221 b Fi(g)48 b(=cm)42383 12840 y Ff(3)42910
13322 y Fj(.)921 15867 y(Gib)553 b(die)g(Masse)g(des)g(in)g(der)g
(Angab)36 b(e)553 b(b)36 b(esc)-36 b(hrieb)36 b(enen)552
b(Drehzylinders)i(in)f(Kilogramm)921 17859 y(an!)p 1 0 0
TeXcolorrgb 921 22396 a Fi(M)139 b Fh(\(4)p Fi(;)p Fh(60)p
Fi(;)p Fh(0)p Fi(;)p Fh(5\))371 b Fg(\031)e Fh(1)221
b(507)p Fi(;)p Fh(96)921 24942 y Fj(Die)434 b(Masse)g(des)f
(Drehzylinders)h(b)36 b(etr\344gt)434 b(ca.)g Fh(1)p
Fi(;)p Fh(5)221 b Fi(k)45 b(g)j Fj(.)874 27487 y(T)-108
b(oleranzin)-36 b(terv)-72 b(all:)435 b Fh([)8 b(1)p
Fi(;)p Fh(5;)221 b(1)p Fi(;)p Fh(51])p Fj(.)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 4800 a Fe(___/1)p
1 0 0 TeXcolorrgb 48228 6792 a Fd(F)-123 b(A)369 b(1.8)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
31294 54804 45 v -2331 36596 a Fk(F)-239 b(A)717 b(1.8)g(-)h(2)f(Drehk)
-60 b(egel)717 b(-)g(L)-179 b(T)717 b(-)g(BIFIE)p 0 TeXcolorgray
-741 39903 a Fj(2.)p 0 TeXcolorgray 651 w(Das)780 b(V)-108
b(olumen)779 b(eines)h(Drehk)-36 b(egels)781 b(kann)f(durc)-36
b(h)778 b(eine)h(F)-108 b(unktion)779 b Fi(V)1069 b Fj(in)780
b(Abh\344ngig-)921 41895 y(k)-36 b(eit)668 b(v)-36 b(om)668
b(Radius)f Fi(r)704 b Fj(und)666 b(v)-36 b(on)668 b(der)f(H\366he)g
Fi(h)h Fj(folgenderma\377en)g(angegeb)36 b(en)667 b(w)-36
b(erden:)921 43887 y Fi(V)289 b Fh(\()p Fi(r)-36 b(;)221
b(h)p Fh(\))369 b(=)6744 43364 y Ff(1)p 6744 43577 471
45 v 6744 44345 a(3)7642 43887 y Fg(\001)295 b Fi(r)8928
43405 y Ff(2)9750 43887 y Fg(\001)g Fi(\031)48 b(h)o
Fj(.)921 48424 y(Erg\344nze)358 b(die)h(T)-108 b(extl\374c)-36
b(k)g(en)358 b(im)g(folgenden)h(Satz)f(durc)-36 b(h)357
b(Ankreuzen)g(der)h(jew)-36 b(eils)360 b(ric)-36 b(h)g(tigen)921
50416 y(Satzteile)434 b(so,)g(dass)g(eine)f(mathematisc)-36
b(h)434 b(k)-36 b(orrekte)434 b(A)-36 b(ussage)434 b(en)-36
b(tsteh)g(t!)921 53907 y(Das)354 b(V)-108 b(olumen)352
b Fi(V)289 b Fh(\()p Fi(r)-36 b(;)221 b(h)p Fh(\))353
b Fj(bleibt)g(un)-36 b(v)g(er\344ndert,)352 b(w)-36 b(enn)352
b(der)h(Radius)g Fi(r)p 35121 53907 3150 45 v 38742 53859
a Fj(1)38271 53907 y Fc(\015)p 39865 53907 V 3502 w Fj(wird)921
55898 y(und)432 b(die)i(H\366he)f Fi(h)p 10377 55898
V 13998 55850 a Fj(2)13526 55898 y Fc(\015)p 15120 55898
V 3583 w Fj(wird.)p 0 TeXcolorgray 0 TeXcolorgray 10296
57271 10864 45 v 10296 60355 45 3085 v 15403 59052 a(1)14931
59100 y Fc(\015)p 21115 60355 V 10296 60399 10864 45
v 10296 63658 45 3260 v 11005 62455 a Fj(v)-36 b(erdopp)36
b(elt)p 18750 63658 V 19459 62361 a Fb(2)p 21115 63658
V 10296 63703 10864 45 v 10296 66962 45 3260 v 11005
65759 a Fj(halbiert)p 18750 66962 V 1 0 0 TeXcolorrgb
19459 65664 a Fb(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 21115 66962 V 10296 67006 10864 45 v 10296
70265 45 3260 v 11005 69062 a Fj(v)-36 b(ervierfac)g(h)g(t)p
18750 70265 V 19459 68968 a Fb(2)p 21115 70265 V 10296
70310 10864 45 v 0 TeXcolorgray 0 TeXcolorgray 30427
57271 10430 45 v 30427 60355 45 3085 v 35316 59052 a
Fj(2)34845 59100 y Fc(\015)p 40812 60355 V 30427 60399
10430 45 v 30427 63658 45 3260 v 31135 62455 a Fj(v)g(erdopp)36
b(elt)p 38447 63658 V 39156 62361 a Fb(2)p 40812 63658
V 30427 63703 10430 45 v 30427 66962 45 3260 v 31135
65759 a Fj(halbiert)p 38447 66962 V 39156 65664 a Fb(2)p
40812 66962 V 30427 67006 10430 45 v 30427 70265 45 3260
v 31135 69062 a Fj(v)-36 b(ervierfac)g(h)g(t)p 38447
70265 V 1 0 0 TeXcolorrgb 39156 68968 a Fb(4)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 40812 70265
V 30427 70310 10430 45 v 47992 39903 a Fe(___/1)p 1 0 0
TeXcolorrgb 48228 41895 a Fd(F)-123 b(A)369 b(1.8)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 74338
54804 45 v 0 TeXcolorgray 24746 81281 a Fj(1)p 0 TeXcolorgray
eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fk(F)-239 b(A)552 b(1.8)f(-)i(3)f(F)-179
b(ormel)551 b(als)g(F)-179 b(unktion)550 b(in)-60 b(terpretieren)549
b(-)j(L)-179 b(T)551 b(-)i(Matura)-2385 4515 y(2014/15)718
b(-)f(K)-60 b(omp)60 b(ensationspr\374fung)p 0 TeXcolorgray
-741 7823 a Fj(3.)p 0 TeXcolorgray 651 w(Gegeb)36 b(en)433
b(ist)h(folgende)g(F)-108 b(ormel:)p 0 TeXcolorgray 0
TeXcolorgray 15384 11803 a Fi(F)550 b Fh(=)18289 10905
y(5)296 b Fg(\001)f Fi(a)20582 10423 y Ff(2)21403 10905
y Fg(\001)g Fi(b)p 18289 11494 4331 45 v 20129 12715
a Fh(3)23186 11803 y Fj(mit)434 b Fi(F)36 b(;)221 b(a;)g(b)370
b Fg(2)f Fa(R)921 15456 y Fj(Erg\344nze)358 b(die)h(T)-108
b(extl\374c)-36 b(k)g(en)358 b(im)g(folgenden)h(Satz)f(durc)-36
b(h)357 b(Ankreuzen)g(der)h(jew)-36 b(eils)360 b(ric)-36
b(h)g(tigen)921 17448 y(Satzteile)434 b(so,)g(dass)g(eine)f
(mathematisc)-36 b(h)434 b(k)-36 b(orrekte)434 b(A)-36
b(ussage)434 b(en)-36 b(tsteh)g(t!)921 20938 y Fi(F)614
b Fj(in)434 b(Abh\344ngigk)-36 b(eit)434 b(v)-36 b(on)p
14553 20938 3150 45 v 18174 20890 a(1)17702 20938 y Fc(\015)p
19296 20938 V 3583 w Fj(b)36 b(esc)-36 b(hreibt)433 b(eine)p
31991 20938 V 35613 20890 a(2)35141 20938 y Fc(\015)p
36735 20938 V 3583 w Fj(.)p 0 TeXcolorgray 0 TeXcolorgray
6163 22310 14998 45 v 6163 25395 45 3085 v 13336 24092
a(1)12864 24140 y Fc(\015)p 21115 25395 V 6163 25439
14998 45 v 6163 28698 45 3260 v 6871 27495 a Fi(a)h Fj(b)36
b(ei)433 b(k)-36 b(onstan)g(tem)434 b Fi(b)p 18750 28698
V 1 0 0 TeXcolorrgb 19459 27401 a Fb(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 21115 28698 V 6163 28742
14998 45 v 6163 32002 45 3260 v 6871 30798 a Fi(b)g Fj(b)36
b(ei)433 b(k)-36 b(onstan)g(tem)434 b Fi(a)p 18750 32002
V 19459 30704 a Fb(2)p 21115 32002 V 6163 32046 14998
45 v 6163 35305 45 3260 v 6871 34102 a Fi(b)g Fj(mit)f
Fi(a)369 b Fh(=)g(3)p 18750 35305 V 19459 34008 a Fb(2)p
21115 35305 V 6163 35349 14998 45 v 0 TeXcolorgray 0
TeXcolorgray 25658 22421 17654 45 v 25658 25505 45 3085
v 34159 24202 a Fj(2)33687 24250 y Fc(\015)p 43267 25505
V 25658 25550 17654 45 v 25658 28809 45 3260 v 26366
27606 a Fj(quadratisc)-36 b(he)434 b(F)-108 b(unktion)p
40902 28809 V 1 0 0 TeXcolorrgb 41610 27511 a Fb(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 43267
28809 V 25658 28853 17654 45 v 25658 32112 45 3260 v
26366 30909 a Fj(k)-36 b(onstan)g(te)433 b(F)-108 b(unktion)p
40902 32112 V 41610 30815 a Fb(2)p 43267 32112 V 25658
32157 17654 45 v 25658 35416 45 3260 v 26366 34213 a
Fj(F)g(unktion)433 b(dritten)f(Grades)p 40902 35416 V
41610 34118 a Fb(2)p 43267 35416 V 25658 35460 17654
45 v 47992 7823 a Fe(___/1)p 1 0 0 TeXcolorrgb 48228
9815 a Fd(F)-123 b(A)369 b(1.8)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 39488 54804 45 v 0 TeXcolorgray
24746 81281 a Fj(2)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

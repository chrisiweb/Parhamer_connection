%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 1.2/FA 1.2 Gesamtdokument.dvi
%%CreationDate: Fri Nov 10 08:30:17 2017
%%Pages: 3
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: LMRoman12-Bold LMRoman12-Regular LMMathItalic12-Regular
%%+ LMRoman8-Regular LMRoman6-Regular wasy10 LMRoman10-Regular
%%+ LMMathSymbols10-Regular
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ "C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 1.2/FA 1.2 Gesamtdokument.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2017.11.10:0929
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: LMRoman6-Regular
%!PS-AdobeFont-1.0: LMRoman6-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman6-Regular known{/LMRoman6-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman6-Regular)readonly def
/FamilyName(LMRoman6)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -88 def
/UnderlineThickness 31 def
end readonly def
/FontName /LMRoman6-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-515 -298 1647 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF386043BC0B77B47F761487099
F3EE8B97E5F18DCAE51B94317C8F4DECC130CEC55EE16A19C81D4D1668127C7B
86C63787AA273CDA19F2DCE459A6BDCED90E3C60B9F7DA6A0715D2D12F8B805A
5203A948442C2E5796D5CD20544385DB0893AB62040E1E7F33167592F1944E2A
AF140EB52E80AC868A5E53B529B98C77E46244F0B9D46A2FBA3E0040CF5A1D5B
8CF20FDE7C876B9AF4A5F6798ED83E56E985DC30EE5A3B2D5EA30F640DA2DB67
1783F69DA070954570F579C316046D8A6B7EEEBAC73F338A8B7D40470B4468D8
CD9BA8B731E8581C69A41FE873D6ECF58F4962AB44706743806BDB909276EE0E
99E10A530147C9C14638387F89B169CCEA629DE9AEBC010589EE04588A992E08
30B37AB3DF923029B8F6BF19C1C728797AEB5C0F2044753BA4C7D1437E2B9B1B
3DAE6A15672EF1F238D1AB8F873DBF5264D704FB19F5C1CFA0E5168002B3741F
0134E79412F5B0AFABBF3069460C10225E6F7BADE64F07074C9D594F6F7514CA
5B8A7750FAF214600FB248AD5E8D9FF734EE44CA79A585268A06C6FD4E294257
0F814FAE80C1A7776ACFE85D3159ED173F8C4EF0456171564E9A2E1C26464408
16B747D137D37316A340FB72BC005029A06DF8BA48E9AACDF832BA2745C448E7
9225CE3A522B46E18F5733663105D638E571758C9E8D9121EE819E4A12676318
11F0C568B81E1502A5D168139F197F7A71FE60CCB05063C6D9D8A0048E60F9C9
5CFFF69AFB554B3534796218449D2BB97FE15BD1A6FF104BF67F8EBA5C3C39B0
24ADAC78AC4FF61D5847F0A110651116BDF3B03E4BC0F18BB4064EAEF4C52C76
FA47E1D2A4777FE07745F9804294A609B645FF7A49ACDB394CBBC16C945DD21B
C5FB8F14A51CAF8CB6CFED7596B5855B28202F6E446D29481257F780995E57E3
9ED8EABA5D5F5FF14BFAABDD2A56E4CEC34D583169C4918F791067417FDD3131
CE2D43CCE1EB5FC3CB80141A923F87FBD2430FD466CCB4EEC3E1642A919650F0
0D4F0240AD2B6D0FF2710FF55BC9FDD4750BA2C340B265B989E10F811FFAADAB
3C186FE35D7A9DC85F902C47DD4D64A7C2465106CEACD608F355206369B2357D
B7A88096EF19171074364EC0FB2DB53C79D16B085D8400FFC9324014BE2A1D58
BD84E6404384CB70707F4F0F088114534F6D36E4D587840301B22A3F138D3B45
D2739DECDDCDED8E9BADC38289D2EC32B466D21C9B802FF1810458E2756AEA19
375AC09CE5AEF44A9C3F70237BEAC8805B0F5882AD7C061D56CE72CB67E59EAE
0D87FE8400FACF1F3D51270821CB12BE7ED0FB9FEAA580CA187AA3C94757DA72
C8387BC8E9C7F62398D9888FC47F9FA03C6C4A7644AF5DC34C546E5E430CBB82
782A160E0C10C93767679A412BBBC86A1FE55F5369B12A05851331961EB0C929
1B2485069A74873F10114BCBE46E4DF6F23A999BE2920418067A8406791A29D2
8EA30D94D51640E4BBC09AD7EF03CF8A2EFF52CAA34C7B703E7A2A58F8F5F040
E7D8CF7849612AEA754CCB377CCDCF829EEA4449369E211375B1DCB60BD44DB1
3FC7623589A2B4D35EC4DF7C639F175EEB2188E9D09ACD08123E0EA146A2EC71
BEE13C8EDF435911D0DD383670A99D2DA3B8DCE9C44E878CF5E2C2A3338A127C
73EEF13C8E12CD82B634562E96B8EF8C66BFBF49C4C5B41E4E6F9B20A901AD98
606C248E4453D8EBADC19FEC33DD6C3E3A6FD60A7386846C9400E70CA0E6E114
DD647EA6415ABB8FCF0FD7087915C7005028E37D99E2E7A0B278946D805BC785
80A7EF7997467C254D74D509224224CA3D3DFEFDD21D733DEA650C59DB2D58EA
0C8272EFF24AB88D33935FBAE571B21A230452D3C09C48A255C29CE13701A4D4
D4C96FC5035DC5AF1E9B08909CFBFE632A666964EF77572B7FB2D4365582E4B1
87B14F4F119AB730E1B4296A1545420E633F0FE9A9BEA05B8337E211B10C9B5C
28A6DE7B0329006E4AF46A866356FD8086D05B4D5C88D88BEC3ED1305354BD30
92F9E51FC473410F96B56B11B7BA4B3B0F935D7B9F80829BB14C7D4FD2C4E605
7BE5F5C51A242002726251535ED87773C6B3A8ABC8ABB13ECC3B249F1878A8F7
66F41A74BEF5C8743351DC9550AC182A98736A2FA89D633C312BAEB63990C31F
1EB7DA809BE9F612EC568FE2EEAFEC10ECA86DBCD675244FA279980B91B1C69A
BC9902242F0363BD8FA39874B38A5773E679768AA63178989638A37897AA769D
74E0B3A299DD94B313C532BE355EDAC9632EB2FB3B0007243F409731FFDA5CC1
0AA563F2964C3B13B7E54BBBF08F23F8F2FBAA1D596EC63ADCFC01DC4E23EE35
DF9BDC8DA4DA92763B0A6BBA324DECB086CB36468EDC8CCF17E0FD80229C25E6
A38C407C126D97595C9FDBCDAC33916516C460562E59FC6D52EC845BE486ACE5
92F718017CD2E6451EBFD780DDE75A8607FCED3D443D30BB1E4DE5660D72207F
AF08E24C5D0A20A385910CF5CC9590B7D0DD41B057ABDD59C5F5A07C0EB7A1F1
AE6D768B1767012BAC23C2866945E46981F9406B6E4F61160966AE724226D66F
F0FCDA9E9B8B8CB59150CA66DB631E5CFE0AC19E1099E777C86E198C354D1A51
40E0073F8562D8E9C1E5FB3EBE07CB1ED5EA53FE5E6D9A09EB35E7F51667A11F
7CD5CF8FD053E67223B64D740B7B5740CA49BD54EEC1B72058DE679CDAD3DD8F
72FC21983C8FF110BB19E18B570DC8E76669D1D95412A61ECC2224E2398DD99A
002C512A426A8C54C902A1EC3319C7D6B2FF589643A3620920A5094765F358F9
286B8B535613CDE40BDA7901157A5FE0D7C76E8BA15289EAAD7A9BCEF469E030
F44776078DAA51D2E55EE43250F8D47B989162975370A4EE24C12429C8A21A0E
E94DED1DA78219F3F938C186741CB1EC95FA761422D7F14693C81AF1E108AA75
CBB741E74C47F8B20547A2A2DBC5B79E97D0F2752100481BBD994D8880B4A972
C6C44A4039EC9E30ED3D823570774FE82475745461C865D7F6245C0559045C91
E1147873400FE01EBAF6D69984BEB5BB38161FD1EAE077110A3AAF7CFC574836
DEF1F5BC54BCA3800F83AAEB8F3D60AE5B120F163AAC2212D0048E23B1DD05C8
89D021D5FC3A7279A43003D5BFB0418A0E4E57B13B956E26191B12F8E56F03F6
06BCC94E549E58EA59668CBCA064DDB13B68D37A6855348A1095746B34AF15DF
313091C59E5BF9E795662BC890D6A7C5C410AFBBF859E855D21B146F7B985200
1309AE34EF4E7CF2799E7589449EF35A4408057DA7F06A3C36A4C792D168DC61
B0E00C91D605645E18EEEF9BB535B3BB2DF00419F59E7D9B9BA37245C3B29F1B
5D912D96569C2E45CFF465AF2FDDEBA8A249D529A86D0F960927F3CF2B91CE73
10630D01C326D2143A2080BE3F1FB3E96B0960A8B9F3DCE101C80AA0F68C6F09
5910B656D3ACD7A98015D7DFF9AEFEF7B5CA04F40E52362457EA58E510BAAB41
A1A7F349E23B383A6A9E43A0310316F78211ADAA1AA9954C8C41A805EE01DE39
FE83DBC1A06B49DC5E9A9FFD534CD2DC39143A1574FC22CEDBDF325F5F3D4E77
3B8D621B2E0BB3ABF8562E1D016CFFBCD753899CB8F87ED5B96699394A944BEB
BE20D5795B41C85D883A7B825C2C6C6C3705F05C752E2CD594D05B15173D5A85
A7C58E0A09C4180B7DDB99E3AF5C45072D5FDE12DD81276D7B939BED0B38F659
CD7EAE81E2E8703FC75242CB2E36A03F52378FE5CA9D10043E0DDF5406C03166
45AA62A41BC5A3C4E6BE9637FC8BD3E94D6257BE1B7BFB1C8C11C202DC92A263
CCF305021C674FC70A8D1E5B92439FB501AA43231F13A05FB9262024E28822E7
347F98388AC56F08B34DD7BDB2786B121355B5A7E7B543393F182B0912B5D948
6B5C8F6CD5238CB94A0C807F4BA98BA791FA8947D12382B17FDCEBBC82F61E5E
F76E8796A3B7FE0870DCAC49BF53BE42EAD156AC73C494C1BBBE2C4BA04DF4C4
2D75D661F33430B0CF56859103CB5CEF1AD1BC8F1293105D38E74A9B760397A1
AC78A54A649899A148F9AC90ED7B624CD4E5EB652F778F794216517EA9355993
5B388CF75B423EDFBC4680B3A107EA9167B61EE4C8F09A260BFCE7C040D10575
084BC081821FB759B18698BB4A05545B974F452CB2DAF69AD84AC8E0F70FD0C1
4F7A4104D14F3A5945C04A10922AA24984276F4839281CD40D1C98764EF35285
91EE06C1A0E5BE179E3D0F91CCF68645A68F72285FB2A586B7F622D5A2C8DEC5
A78F4BE70311218D1226787AA0A3FD23E2890634946A58A5EB6D89CEC580A966
AF5D4A79D593015B4C63E38895DF0DCE81AD466D6DDE336D4B5F9F8395469839
226EDFA51C3EC88A2E0976C2C2C711F0E82BBC208850A7810E99B8C4530A1BE5
182B4F95B4988A9F5E686E35792AB6F41B9B176926F360586A5C26C99195A664
6B1336F5B93761C065FA2517348B3B443B8A9A314FDD21F4829096523E0DF05F
787B2B565746C29188076721F2BBA49EAE94FCC08853CDCB028B195E7193BE41
45944506E6C19714C1A8CB95734FA77EBC3D8611E3607832D37A416A99E0839D
4500138EBAE287EA0B0AA51DB41B2D44D3718F668F28597412531988959D56AC
C22238637206A7941CF0CD9403BD88E1DAC75E540FFEB8C3E12E312EB7BE3084
D2BA1FAC3D91C6E719596CE3E1F3E01D6E3E6DF0D2F3424047A5CBDB888C84AE
D9C2F159E1A4617EFF11145DC25ACEB048DD2379BAD8BC7E14FD15EFBB2589A3
E222390A08E90B60AB594475F32EE27B888606031FDD3014D53E32719381936C
B077685C6ACB030A0FAE31E830C857AAC89EC0A90CF14796EA84D31928C87051
2F628D998E53AF47E4E541A01B9AB29B3E63E5097B3C418049903E3F36885AD4
5509FC3CF18B7E14B664BF15DD89A0C4DE78B5DDAFA9B3A1AA0ABE53DBEAB698
898B8C456B760EC883DC7C18994FF414A1416BF76BDEAACA47D04546EFFD1AC3
86043D6E178812582917F792338F843FA8349F660C272D54592FA44F0E32A3DA
1E51A3282038BBA7F7FC70987A57EC73E5A4C1932B531FCAB29F4C8E7D591AE0
494A4BF14767F034AC49BA8F13783167A9DA37A6E22E7C508CFE9373FBF5F92E
9C8ADDD4BC7CB4C9ADA51ADAA643EB311F9C71D382ADFCF568BF66A41F3B3AB8
D7E33C4FEDDD970231A7F6A4D4A4A2055CD35D520B40E15FBE17A440784E4F57
D3EF8BC26CE436CB8730DD1D4D5EFAF5FA6A47330C6510D7E4F756CB95EA4C2F
9F4541B4ACFE9CA666C46C7A1EDFBDB64F9D04CF52CD03FE62369EB7121FA612
B45AB31C51A6108AC1864C968DC394CA300DF3C5A3E0FF8793B2C2253AE85AB3
8889B26761BA509C7F638C6CBC4BBEAF68E3977C4C730F2A37988D9D03CA305B
ED5E3FA72B7EA11770D4FAD1B1B8D4D0F6BBFD2C717646CFED938A62755FA798
60C1C2C5C6B21B02CD8195B2DFC7EE6C9270815CC640335575C69A9EB838DAF9
A2E8056EBB3EB81947D0F75151398B14A65214F97869C2FAEFF9B4FEE8CF61AF
E9D26BFF842E08752064C9D149D5AB137C172AC9822900EFE3946CA837B0FE2E
97B6A09C36A90A7F87C645958391589B431E90D4571106E2AE72AA71D6D23BDB
B25F63CD8CC50A4FC59C2F3F6FD9963174FF8638CD01B6756F2281E0400F7760
34AA7370C867BDF8F8C85F566CB04C7CABC1D37D26ECC85EC180EB8EED1A6E86
C708F5D076592306D8BC30833BD11CF1198C51BE09B61C4872E1FF727EDA4DB5
C687282A10D31D881F6C47B6D2BF72ED2E95E26467CCF181287B99E2D2DC1EFB
2790F58EC46751A5689967512AC84C42DFB2D9C47204DC623A368C429CB0DD02
79D0FC834B3DA7B3B8C176ABD524426477C42793B52B6C655084B441198134DF
A827D6992211C1E4B7DBF60FD0870068140DB45F90DE9249C5A9D366CF7A1A38
1FF672442A66A601DE0AF5CD890470AA5CB3AFCF64BD2BB65C137CA2821EC983
8CE39156532BF5DC33CDB6803328A3D52EEDBEB18DD80446181DAD8A2D2CDFE5
F0CF45E34F3E676F57892E7B84E9F184214ED216557EE7668528DB216195143E
8CF31C5D103CA1E3C42992F74A378B308F05D8E2964B470316617538D36F23EA
3D79B7E604C912EA7DAC8E354F1CEA9C76D10F571A92585D24C91627F49E8327
1B7498CBD67ABDE015CF65E81B3F3CC28EE10BE6610B8820C212630C2D9D32EA
5C0A2C57645F8F7284E4F4002D9FBB4869162DE96A3C76D0048C2190616F793D
B31310AA0A8F45140EE4FAED53735280C8337FA283BB4340DDEBC4D256E13F78
F42999D12D633CFAF4907DDE965A3959752BED492B8DC2B873EF214C0B15C50A
9B5A26205F096D63762A9B14F265567BDFD7561D55C9E03EBB587B340A358A65
ADDBE9EA3B652DE1E3AC0A662937874153DA92EAF57D6D9CAAC52297B1D25175
D4D9A88D0F77A22AADC2AFADBF3F6074E16250E92E971F6A42046019E11D040B
B87BBB7ECA6B92447919FAEDCC9135C58F8F73D47D434DC4A4E0C28AD8C7C090
B33F185DC6A9CA2EF3D53B18AABDC8BCF46A27A9058F26CA737FA1492D6F0890
6900399BC707F7B593C3A0C750E5063E960F37D2B0FE314A6716712E9732584A
A1D76EB088B8E6123958523931DB4FAA798AE992B4EA64BE0532CA2D8205BD6E
AAF03A971F6814D3F9FE7FBE81B14581C6E968DAAAB2896FCFB745795C4D2C81
2C4DF4A623C63A895FE66E14641959655F235BD056D5993276256851D7C637B2
82BBF5DAB0182C67EE05B6CA0EF0BBDCE740367F31FAD328F6A15B0148E05213
5618E40B1A553FF47AEB55E074E0A7EDCEF6F7111078FA69F2C64D22CA556E23
D42C79FFF7E1CB0F2199F55A7B7AEA10792D9EA463C2FB76BC889370A04D8682
D0AE03DE6C6F46EFBE1744123AC8C0F4CA8C980DB119518F89168C4AD95546DB
11FA32359BBBA7F8046B52CB4BE2C7A0D2CA8AD061C3DC60016EE1F4848CA1A8
533BE7D472D33AD14D5E7C7227C76F79C4261DAC82AE92065F2FA5D501E27E1C
2D93E4E93FC183B92C92EBB1C9D571BBF37290D626CC98ACB47E3EF8BB1A0BA1
10FFD14534C83B52808D9D509DA3CED8FECCDADE8C5EB7123C92A5F8A657651C
EAFBC59BF0404A36DB4A079CF92AFED25998FA67C9563BDCCE31A358933C39B5
27DEE9A6B13A3E53D1F360481C37841C114A889F2AB95CBC4EE87640886D9552
A0FC54F78FF9D34A41EA24E7A2ACB665959298984C7D2B9E3D0E671BBCCFCA24
011DE68DD7DB418AC5957D54111DCBB515F1B16E2B05F82076631C38774FB945
4F35D6B226B3297B75E73D446B752513918E6AFF3A56AE897D9F38554A169249
B307AD318F9745E6A9DB8D45F1EAFB8EB34190AC06A6ED10305E09ADDC767335
712B4542DB006FF3B1B8EA0380FFD69361F81BAF8D677E076CEFFA087C3AC603
C44D8AEA1F9821E0124F9AE3E5A1EA6ECBCE64DAF1EFD40AF797F32DC9655692
C15AC45C83A799C43C0F5C5724AE3C9E2B8CA4C389C7CE8AAE26FC945B23F392
4DADB7DEA139D539F1465D50C5D1DF71C76F2A005D16F2C9056A5AE147101230
E8B709068CE066960D758F045E8F36708C383AB60E0E8CAF02F10163A0C59319
9B31AF7034155870747FCA1150FF64B719550BB392C0BAD4703A5EA471A67BEC
B8728CE2C4E7C3E63CF4622780AB15FA42F2F264CE7FEED86A019485EF31E406
957A96A5687BD9F33D193276CDAA152C0C500791C76873A35DD142F14DC9532D
C0FB76931629BC216CBD42A8E83344E9909CD4A49E4600DBC7FE9A727D18EA99
9ED1B30D37F9582F33B2E198934294E52A2A25163FDF224CCB545ED87773C6B3
A8ABC8ABB13ECC3B249F1878A8F14F9D9D38F126E2118A27CB1A88797E9DE1A3
4E6EACBB0BFA7D876DE7D40EE0544D5492C33FA350F6787ABC2DED8C42A46F65
EB765A04C09EA527C1F30FD1CDEE64F811A38E4B46122EDA7F4170C2DE867625
FC6047E74142095BB42D5A4BB5A14E1217960A56E41FB7F566D32F10D2BB9110
845142660F556F69906E2416B7550D5216A9A79D68D4AAC414F307488A9B054F
B5B4D0A2B019B3CF1BFB840BB82101C19895ADCD9C269AD747CBE7CA39E81C95
B5C1AC746A23640AF1DAAE306808A6508B40890A6E227A13C6FAB4BAF10C72A2
3626BF6849FC82D5608EEA88388E07A4B3B963C3E0FB216D55D8DB84FB19A69D
0A613650121894B9D280C4F16906654393ECB9D74206B5816380F5E9943682A5
1642BA27C943B460063E42F28690448B9CAFFA4BC15B304C7446A71A59F056B3
7F04B100C27EB562B2CFCC6C8E30F658A9095000B8CFDA0127549CBDBB8C1EC9
1AC0FA666F6A4161E6593F9EF18F4153D2ACDBCF2730C10173C147DD9A770AD2
A21749E5639D2B2064115FCC2C0B048E62B50BF64A9A860C3B96EEBFF6413BA4
DEB76CE1B7C8CFD866C961BF468F25ABB25BB39B8C52DE63A06B1B761F68EE31
3DAC963DE59CEC85FAA1644FA922FC56B0B93D32362BA966DDE41AE1BDC9006E
04619B81578C0EA3C3A72402DFB9B35C8E52D6F3657327D41340F9D2987CF946
2B74259F19F9A269BE1EFA885DAA68993A4094F490EF2DA767DA69B10DAAFA65
449350CD6DE913053B7A675D0F0519B5B7F5A935D8ECA9495B072911CC814C19
D53B95DE0071E3A439D0B97B5EACA0D28D6A0F247C07FC508D83491CE04DFA2B
A1861F56A5C5F8E8DDD7180F306DF16E79A2D2DB98072D62B48A6B89B6C1D135
B6E8B9038DEC76B0CB5271DDD2A29D3668F7FBE41F4EF6A81C0F9EBF9A4CF024
C1D6087B172CA75144E70BEA368A35947E11D1311B45DE58599B7CEE0C509DB6
A4A0FFACE376582C360DC94D275F5A3B4F927CABF282C200B9A8DD93D555CDC7
F4D5012C66DDEA40FE0803859B8E32D6FE6DB9D06E5DEBD1507120DD2BE53053
6305DF233368AB891AA0006AFDE458F28C88624B7CD1FEC7FF8009B450BFC2EC
D8314F99F0E19BD6EE406E3ECD28F999B7E26BB1730B9E3B03982F0297A1FE85
2B945B17BF66449303B1C24D5916E2A6F58558CA274E9D40717E9812FD85CF92
89DF78EE12F3DEB4E33DCD967D167E9A363C86B4B7933745D6866EDE08128085
2C5DB56F5E040B49B9CE0122F60874F87B8C979D1FE1E23F0AF4975A31C93BFC
8CE815CF8DC0CF6D4C15FC110A14C6B17D81F2C4E03A260F2E92C7807C74EFED
2B132A2915E0454C2D60637070DA6B60528565F061978FF3C3ED33A6A881118E
999F367E6A91EFF7C614342278BADD6DB0A5663CE9E5BC6AB5DADCB2E3143D95
295E23EE37E497C4CE6765AD76DA0B21819E209EFB5641184DAEAFF3FC3E99ED
A1E884DC549418D190B1C581260C7A5203CB5C00D65154A8549AE133CD7BACAF
9F7ECD175ED7000248B0E79D922A01E3735C1238FB68520A56BBDED554E57501
8D9CB55703F310B5A8068E167B6E11828C9721A9E9DD6417FEC2496F9F2F9B28
9307D7E0C33BCB7023200FC3221C805DAA5986F04D17BE7FF0A4839E595B9C51
7AA0A836E38B20CD1D15987A7716BBFC20EB3DB805CAC99BDB836FC2986506EC
C1BE90299649817AB7DE0588C855D2EED61DB213854CB51175B088CCFBF6EEB4
6D7BC3B3B23A057ABA63CD47F5B91A075F5BE42A3BF17038D2ACCA7826EA0E3C
26FCE96B24DED8A0DA83D58D8413A45EB18E98B0B7463B16492EC628DBE6D3D6
08A7BE0B7EE204C06198A34DA4D4C40E586B3DE66B95C3C2251EB47AA4341A72
CB029A6DB10FCE7B59925A3F5FB7DB35B3D7944EDE4EE161ED73B8A5D56C84E1
BC4288060EE0197FC507416327A57DF0B4CC9D118666C78DD383D722EC2C9123
812FC399AAD5D324BCC6F79069690BDE2D5DCAB19AF6DA41B03E7F03EF36CE03
90DB45EA1F0B6AA0630DCBC4307C6437BEA435CF4310F498F16333A0124C2C8F
4A106DD9FCBFA8C93131565B1EEC7EEA0D39805B15434A0241220CA7DA81F744
079461180436BC926F08D69F8EC2D9FBA915590C8C5A147E34341E158CAA3AB1
B6C5736B1710EDF703BAA08D393AA0BAC2781D8B360E5AA4DB68A312CA50F1B8
5F57673C6CE09EFC4E229D463548AB471FAC857E065D555CB217F8857FE0DB1F
6F94DAF5104983F7CB8EE7E0A553ED1C167611B98529389D46C775EE652B9581
F400113A3491F5E07CBA5CA3E34B94447EAB9DC89C8F162E7A48480D0F5E55A0
973254A9DEF9CE731782F229119A2752AA2AD62BA6AB975E71220D5E3D2108A2
23A3FFE140672C6445756E4E43CA8AA6C934ED4A4F1F431232CBBA15DB4002E1
941504FE6D3AA62C4F58B43B38B6B9A5998D6BF35919DB26271A70FD551FDA5F
CB96A98ACDB7722E297692FC187C000A9E64BDFB0C5D67255C940ADDDBFCAF37
BA2500213239F12DC7E00B6388ECB34F36495811D8DE5904E67BA3B608231D29
20B08A197E0A8EEB2A4D518DF5FE373DA1264FA065C0B2CFECC443211B9B6F91
10AD2795D667D3E495794B2EE286E2B1603DC2B59108094C406EB457743043EB
EA32B09F7FBB39FD5C68F4C39DBEC8BEEDA86F09129C65CF388860292BD56F1F
25312B41B125B4A46DA4550DB20C2618C8D7429688CBA598533E602E3779EF74
94E427C5F588A9B76116356E147F7D25A6B84A1921CFCC821786A49DDC960CF0
F71F72FF52A8A4C819D119551A8B29CCFE9D9E5DD9666700C095207E57106950
D839087BE28F05EFFD7658C2AAF242059AA51DD77F8A56C433059E839707FD8F
7CDEB23ECBA603CE654F0B4CB297E3AA3E9EF091E0C84BD41F2637BCFFD66D79
B090D239BB28B04F50B209229E72DFC04B7B823C551E0567C0A543A4B01D70AC
BBA291E4A62D5AF6B69ABD9CFCCAE361770F7112D355E1D8C73355C84532F7A0
83D5DDD9A52A0E8E38C85842A2F2324F1EDA91976CABB8D2D9ACC9B93C575C36
3FAC4A2BAFEEEDFAAC035ED733BBDB078952E44D6777D901F46F1052511C02B6
F9C5319E4159C386DFD7E08913A46BAE3CF315EDB95FF9CEC0A5517012F178A8
EE1835964AF9A2F0BBC8221F5B71F51DA9B563DF30F06E69DE570600F2C71705
0A9B73E2CE44EFFFC2DBE5AE8A5C994487B356EFD9800F98038B815C5D1EA498
A138CD5AED42666BE7BA643C32ED9984DFAF5F7E5BCDC7F2A7EC35543486F7C5
8FEC4F546B31566D7C3F43D5829E6603AB01CA4E6FEA7C1D4EAD89507E04EFB9
6476A3B4A2511E205F37BDB90C3C2A75D382C7F7361ADE33183B5F100171B0EC
708F4737959B2B859737ECA0E6AEEEF942FC33E77BA234AE14DC6B1CFB81E838
B97BEC540629204632C6391F21753E86F8A3C4326C4C0619C9862D301F4A05AA
5DE0DECDABE9F3842581C3BB3F68A47752328AC1739A9155E318551EBD9B8F4A
A038DF79588063FA5C12788BC7F372A01C5800D5233F46E4D3D830E9CA83BABE
929A27EFD4C245CF768BAB03DC70130158933F88571D558A4CF2D165C4D4E6B0
0BF84FBE6428597412531988959F345BA934221765FE0CC6A3A745FEB2C19865
479671008F83BED6A5EF82D27AC66A2F6F91819A23E4A229EC8606519A6483A9
BCF868B177F15C14A034E70C5AA4687610BCCAB0DD9BF9D336F25E5799BB341C
0177F10D97344A6FE9217A8B47246B7C4D03A5B1814448ACFB10D386A3548A84
7E93232C034664E2C43DF499BE3810C38A4AFF1BD06D7C952B12E6646662A651
EE4185C5725607F6CA47D4BD7A06D8EC0F00E69984EC55E0B487FDEBB3F3A71B
16CFEFB149CB67410C30C1F0203646F53CDDEC1F4F74B73087CDACE346515478
23DA7503D50E7C2E94501C384AF829C39DB36BFA67124053D79DB19F848987C7
45B911A19B2D697C75CE2B6171EA0D39805B15434A0373C91B8AF7CC9A7435EA
85ED80D8DAA2ACAA5B048E4972A0B08B3C2A698E4F95DAE539B5E403A0771421
FBBD5BB8C64D85B6442F844F2FD7D0B9789D902A8634AC0FD41AEAFA91DF6C81
7009D66181D65E4B00FD203DAF08D8D54BD6E3F5A259B0CC129B34F7B5E4C9FA
E869F6C47F545F52A799C9520C13DFDA4E1D95A677CAFDA9B3483A580F6F6F78
6A20316B992F547DE9372FEEA0BE4051D37446B40BA6EEA726EBA19D288B0275
495A5FDA55143FF68C3FC7EFAC5BC5F623465E81758FA86378485C357531E964
DF6C072EF4701514195A43A81826D8B89CC47592CC410505B03C28B5A0D0B0C0
52CD7679FFFF591A4123EBD48F301B04F46631626586FD77921C79F575FF3F79
E0E00A028B98F990B4D015153CCC2E1853473BBB1786551604753DE51F4F7971
3F761AEF5A91CE7EB136F96BCD22E3E4A8E70082F0C085AF03D89E764E467708
D7A0D346AED70EA59FABA7039A499709F7C85F077154F38243C98684CA1AC7AB
CCE6CF63DE924E16D4177B3BC92BB52A590DA0FBD0CCBA3A05B25B0E98968FBA
2BF8C8EF94BF041792494691B655CB9C88996A27E4435BDD987C4ADF4FBCF10F
61C9BC429B5EEE3FAB3E8E69689CCAEDC4394A2D22182D25E20AD4D48E139ECE
3C73DDC2C1ACD87F3FCEBF2730D812FDDDD016B803C38B892380B527B462508A
B5353B6428ABB42BBE9C1F6C104A56F6F097412BCB80AA7307A1C978F414458F
9A7EC07EB5F23823EA401C06D3D5E81C497121E89D672888605828AE138E237D
67F4E6D9031F874AC47BEB4E84870290E8B30944DA29B54CD2EC33F618B8CA36
FCDA32FDC097B1935F5A07D402D14F972D7E215A6942623456E577D8AC3D2D8C
5450771F19B59A2760C52C87C36694BE5257D9DAA43CCF04187CA5BDC8EF1246
B62339A063C5D408C56020A0C4C52CCB460E7D37F4F3FAB67FF5C6BF23015225
809F377D80FCCAF634AE7A1D21B652818AABE247C5D56B75399BA25DC06AA5E5
CDF0DB7CF70534F620EE513EA8403894775B2DF1F871924CE2C0479EA8C8C337
504EF1D71C4BC9EFA3BEE0D63E0DC4E6F253A60B2B187AAD8FC51219E393C3F3
334854C5D7495678DE754AF0AED1ECBC76A385CEC705A2EB89D7F32FBD60C08B
86A3021B0CDC0B407F725096DEC84C574452605A8E2D4D83EFDB8229FBB5FAD6
BC8BEDDD96595D60F3C71202EFBB2393DD45B978ACC96226775B037B92080453
2521E7EDE46962B649E80C67BA35C6FAFBFD9818C21E96827534175F5304428E
D37AF944D326EDDB80820D550FBC010FB410689BD4AF92BA5D627FA697E110BC
240CD8069D8039DBED8BBF9C76C921024B55FC6D5DB5BCCCF77226C214AB72F6
23651E77725BFCAB36FEC044A22874D19630E3FFEF0393A6BBD801CA0B0320DD
3970FC1804D241E14CED521CD2BFFF553A539F05BFD3125B9A52934AC46E268D
28E8B6FB0433BCD7424BCAD824AD77D8837021895B04400D540B1A42B6D057F6
EC11DC7BD2F47472592808C5F4357D292335BF6663088E4A13FF65FB1A4A5E6C
8CF97392CC410505B03C28B5A0D0B0C052CD7679FFFF591DD2E4B65B1BD86643
6AA7E2D2C09DDEBD95B89FEE748C22D04028A12064034A7290750EBC897F1198
7CE12AC4C09820CFE12B66291A897CD411560247B4D041902FEA91165041696C
183D62872AA2923D802D94278A2835C91B8E929599A0F81B43C52F5C88CA3242
F20984B44BB4BFA718783CA81177E26CF828FED0D16B16987D62B6EED163A746
2EFA11B131B70FD5509D40C202ACF1153F62C77072F4618CDC774CAC643C8A05
19441C6043AFE063AE1292453F5050DEA499563C86523C08C94F417CA514CB0A
60DEF84924B838AE79C66892756972251698C73C6006B18CEE5DD843B5FE4096
F520222A20FE01B30790500220E46FF64199038C006B74DD8D060CE5FE0B0EAC
5A0065F244704AE2B065259EE821CAAD682B251DF5679E7DBA6DB828E48ECA90
18B12EA9801A93F1D2EA5B38FAA200D1D0B9A91F0F83DAD1DFED8E8E569D3D3D
C4E19ED8BB7B63CB86D6663189688C6E5B123733610842E1E7E858EC1F4619F6
71605FACD5B6AF9A887A21D5935681F3B59F4353D9020ADF5271790BBBB6BA3D
4E22B144A961EE0B8DCC3F56219CF698FFD3BC5E89C0FD5D7B7E401AB82D0B85
C4629DCDCC78451DC450426725D35E38F856777BF90A75073302BBE80809A0E9
34D63F193DFB746D2899D07E3F8CE1918548FE197A0F6E54EEF9B3879A404F10
19BEEEF9DACF5F60C8D9DB5DFC8201ABE06DAADAE39D1EC954B803C19DD4F5B5
8C4D2012E04E630A683CC5E3B553E8D513719B4467FF2EBB5C7489358364CC0A
9B3EE1860D5F11A241C4889FC8C0F634CABABB7EEC7805C060D65C25FEA1A598
0EC3B8FDD9F568AF98704D01CAF403BB449F19BE418B41F69BC01816313959F5
47D42805E2042E248A874E814B3D78F46AF4F001A3885FB94815E33196056BC6
87F886C067FC70DE0B05B11093AFCD07D26BBFC6568B8E12707DBA8BC1F786DC
CB60523F143A1574FC22CEDBDF325F5F3D4E773B8D621B2368D99F9AAC581DC1
F040BAF224FB5C0FA52C0B89FD7BC847B052C16E049D2E6645239263D0B6E641
9174661473016B33B5418F210BACAA8CCC7D60AF299F7A6109C5F714CA50F1B8
5F57673C6CE09EFC4E229D463548AB417B1ADC0C2D9D95F7E82180B767328BFC
532CCF26068F66BE3B79B89DE7E561195C6853D22BF99D85992FEAD42182B1A6
C6754F6487EE04ACD8E91BF342F4087D9BC3F7E7C5F35440E94C8261317E023D
1EE84E77FA87202078297C3EBE04470D136433372FB330C9251103E56744B6F4
BF9007CD86D2AA045ED8F5B22144D82C90F5D0F35955E9F70669113065923D7A
6457012D7D59BAE248FB6A6F0BA4AFF79E9ADC4FEC9D11B0CB1EE425FA28690C
E3904813B0A01DF8F876EDCC4F384055FD37C5757267BEB106FA04FC210E9E3D
D63F00738AFFF0F2903EFF7F87C2E66069D56F6579693CB65053BF56062972DE
5B5030A53582DAD4BDE5254C4660274462334AF71A1E8789DACF6EDCDE565963
9825AC78602AD07851D8FE9BCA921C410EDC6802C21B5561DBC1B19BFA4431E2
C5647895A7F7469F71248E271FE38DB3B824A78B6761B22CE4DA9F12658E1B06
DCA548D41AC58850911D4D3A68BFC499BC89A4DA1DB50DABC0C0F1EC4248CFF2
4B78C4B4DEABC1D3C21B126F607D31F950B24B2C9042139D5E7DD43E07C180D3
6EC0611DB7DFD41217DF50CFB8585136029084CD63E7526A427499AFAF4ACD6C
6A475373979424F0107B66BCBFC852454446457A97395E80B0B978A58EDDD9BD
34947AF82D8D10AB50C26895953E493CD5E3519BA7E212220D0EF7CB139D0745
C61011010407B5F2CAE240009B69B6A167BC387D06AE5D07A38877924D5DB468
558E60F3C8EE3A7AE59C665CD642F51EF1EBA346173B377573E9760C57EAD7CB
37952D1A0E9F744FBE8041D1C10CD8EC38910D05E5AAB0AC7F4AB9CE3BAE1E96
309D95CCE788036B4867F90D40C1E4FF7460399F1F08F98F0D334F90367DD0CF
AA01DAB7A5752742E65D77FEA9809360E599A5E23CC2A3BB44438C741B79546B
6FB5CAC002FC158F4177AEF0B44D466103BDAE0D6DF3697FF03EFB856B186971
34143D76C8B2184A53DC34FB9699097483C5376A2C3719CB2FB7C4B1311ADB97
C07BA24772579B344930B4AAC76A132C32DCBECD227134E7F747AEFDC1000E48
A784CED2BEE9375D7DDBDCA3C894A1527C8EC06EF8DD24262D80A1DDA1396947
FBE8692B77E9A6F482AC07C7DC28850415D9AFC1C8A868801B990CE2D26FE851
E31ADAE0B467F3CDF0CDE12200B62FD553359823B345B2DB3B3C57F7748ECBE8
44CF256D98ED4C5C0A2096FAFCE1449F0E80BDCBCFCF477A2C30A72EC227B20F
7BD6C120C124BAEF8489E22A13C30552196E990462045B4D171C89D8AB26B7EC
BFF4EBCB68A2D325F02C783D0F080BB9427C07939EB5649DED6075ECFF58FBAC
C2E7A431527D3338B3E89A18C5A3DBF575BD2DCEBCE2997C954550A792BFB500
4B54A8631F85FF8DEF675A72FA68478593397942ED0508663E38B7FF05556CDD
7FAF7FDB9EE4E2D619D2EA74D6613E87DEE38A2A9504D47D4E0E4C23BC4F31A4
AA99AC8B08E2C1B671986592AE7310903640089393FCA362BC59A995FE5430B3
9CB5EC916B7730545539CB2A58832AA92DA5F34F197E3EFBF17115FEA4973B33
A45B38CD6A223B219D9978D3B9FA37E805892E6D589A52D66CD401D3BE7B698C
B264399D901F1DF581877B2A9A6426F6010B1050C5F50CA931A8AED090264B7A
E4A7099844282972DDAB121A040D3D7CC97870F88C3CAE8386E9FA937A009312
7A715FA8CBD9B0CC8D4C2070A978C4DA25A1CCECAD509C077C58F78173615C96
2CE32DCECA53608173E9DC5D8292AAE110DCA268598438992904D307A292EF2B
E0378196A107DAD0FB7702DD52E149617809FB8B2F24322AB310F16A60F884A5
889C33E2DDD5D3DC32A37C5BD00DD016072EEEA098A86BA3776734053FC7DBF8
13A96D33773AACD4000D71140AE606AC156E5CE91FBD5F44F0E247D957956045
B1613113FD9B6D3C9D2C4B706A00CC6FC0C6FDC412D1B1E0A59F386F1741ABB6
BDCA12EBFFD4384FC57CB4689FC0FF8FAC44B39E0F40D59D152BB1F5E716D30A
5646F6E4A7190AF94148B6FB00A5F0328A6CD7A8669E539995283046A4A6DC6D
9AF57EA283EE09BBD61FC4AF42608C6E01E2E2A3CAEB9C52B1E16C7FCFA694BE
8BB2E92544EA213F9B072C8522639BD02BF782F79CD875F2D2745418BEFCB27A
BD9DF99EED9AABA70EBC005B7E807A854FD70F209AFEC73588593FD61E5A0DC9
7EA2E4AA2D6C07BC2970A2A611750F165CB93993472033D4EECB11AE61D7EA73
EC82F137F5D721EBE79A621FF37033CA412EE05A459953ADB573EFAEEA5D8C58
8DE556745DA3E386BBD02540C87F3F7AB9BB690B3F1F8D5D92B0125D3D3408D1
7A9F943BC6955BE9ED8D0F033FB488ECF0ADD93E7E4BF059F3F0CFFCB7894DD5
65CCF14EAE6264E06D391FEAE0D8F226723823EC950F683A6BFB55D22DFB161E
1D6B6DB05A1262FC7E2E104143923BF639CC3241D6FC539FA7677E9DC16D93CA
35EB458CAD1AB52FE22BB8ECA12177C0621857E66D4FDEDBF9258EF212E5C281
463B9D81A24C63292BD56F1F25312B41B125B4A46DA4550DB20C261EFD0C3577
8E3BB1B1EDE4A453F3188709A85504074B8243F84B182070AA3A421603ECC162
3D32353CD7684A1F437CB3CB8D3F2E752B75D29D4A5CE589C0CD29353E7D03CF
E4C854C2E49C85F86F30CED81356B31948249983CDD9D7A2D7B25F16C6BE98CD
1C0273182DE5201996A1359E0A895C939AAB79E28FC7528B367E1AFE47999BF0
4359BE639914EFEA509A4F243F2B1DD541725D39108E17187F2B3F9602649CA3
AD6706B4C0FC3756D13CBD7A34EB2BC65498C6F2EAB3050E21553205D1226EC6
6E6A31AED7DF758E3B2C9A428E765A421A2BD0B4A555CCB9CA9D31625B5FA9A6
E73C0D514224CFC00A8F8333936E71E26A68999731A8847C24DBDB3EB1BFE503
4F884D05C0148506AF3E1BD133241D58DD4C92F0FC04F5E1A534CC1538FBBA63
3855E86F553D6F0462071B47E0F79F9B17243E4B6F1A6CAC76285D504D8B6B0B
EF0B6D52A03D543A010C5F745C33A758618FC9C11CA0F3F24E403DE72FE7146F
BC7E7C0B52C6AACFDDF0997380AA914287F94F8DA7E99D0AACE951BF3B1940C5
472143F16AB8B61D86F2D70A23AC677800E3603B3FDC0ABB95E0C51F55FD382A
88AFEBF38541AD1BB12E1C38C34B695E681E537D26036E02FDC6366BA2ABACB9
AD1760964ADA8436700E758A995E5405EB5449AD8CCDFE6615E39270C3A6F2FC
6188E67E7AC8E934D993EFAFC5D3C280C6065CC8EE72A8049517C3A95D471EAE
9D83E664D7CEF78D51D42008452F3AEFBDB0DEA139D539F1465D50C5D1DF71C7
6845F083422F93DB1A210C6917BB6A04E89C45507BE1B22D0F5AFB3DBCAB07A8
F9A07FB3455B1CE6936AF27B3B296231A4A81BF6562ECE87586E03C99C4FEC72
6E5D5D87A4DD479B45A818D41E5A4168FC2D039AF2636D9E93A4EE7E13C47114
84075AAD24C10874C856F4FDA49C612D120B005D36955BC90EE29DEB375D4A00
E3B2ADA2624E9EB74B859D000F3E1250F5D694969A150C492524A4C2E78002AB
F9C66D487BF9F8266B4CD057E20E70F09D0216EB2E151624EDD0224B2764A04B
2C88310B3C9506F9E9A17A864D868DD2BF42B6CCBB8134FBEB64D9E59F2D6729
1F5A87881B0BA0421BFDAB64F4E1C45E6BB5B990909546CA828FE3C3C49FA268
C0A6B5EFE30AEA1242B2A36DB0E19710EC27BBEDDD25AFFDE220C16FEF542E5B
B4D820B1DB4E2202A85718270018A852D28E4EB447CBC5C99131B436E3695F52
2B3A9F1E34262BF17A9B56024D86ACD235A8530DC5B86830D0E5BCF9588898EF
8F5B46B51604D154F55A9889B690A1AFFA1CE01BCA959D56BC294F0B6A8E9513
E5E8AE8965BDBA15C1998FBDB75D9374F92F0CD81B44F21255A22749DDB852FA
1FBCEEB43AFC9B97B90B0C2A006FF4E26ADC1081714C591BE61A0E717F7BF0B0
ECFF1024F90A16E95F22A69D88CD0B589C1DFE6BC19A289A925264B145961309
68AFB5284AA776CDC3942819204B3072F876378BF839C4F64FD5682CE86CA4A7
1F71CDA3E69E796FFE1F384F90F1B47DB4276CE06532479E48E7EF39606CECFE
E6ECB6AD565E77920BD3FF425821DAAABC3D70E7B6A46340010DBFCC4D015A5B
F4A0E9FEA9B227BD95AF6A18DC9B42E3255D9F5B6B98BE298A3999D918B6942D
DF6A86944B3BEE596931DD7D5EE5949236930BC1F82D65BDF65F2F5EE2960A35
AEB42F3CD5F4E1162CE365B48A6B89B6C1D135B6E8B9038DEC76B0CB5271DA4E
6627D7F75790571F65D0A1684C94BC96A0F39C297CF779501ECC18F0A78587E1
259B1205482DDB69B0316A2577DEF2DBAF6FE031D8137E49BE7E6673C8269347
49F212DEF69335A22D18434271D0E06D33996EB0F7521545DBECD20D18649F1C
1EB7535779A5BAB5D82B4223475E34176AE382C902AF1A86C6E9E498361675D2
B472AC598CC7CDA275AEEF2B2CF35C073278159853E3F9C4715758D357CEDDA6
086620697E8994F2A7EB2B5F75EBB37A04C0F161DDEC1020214029548ECB03F2
BD47F24841AA5946010E2FEF569F0772BED49967AB61994F100F981725D12254
88A9B780043DFE114D2536479E7D64EEB605E791BB0BF34BD0F89D7775B3BAAC
70709EF8C93AB4377F044AD553748912EF96A7C3EFC43B3954F7780073F6A95D
F2B05979E2A63D064661399ACF40FF8860372C48221F5A7F0F9802C491CDBDDD
EA748F6A3079C02625BA61FBD922AC334DBF66ABC61DD367B4609A1A0D2268D3
ACB6C2A077939B3BDB1011BE17C089E5F127C383341F5BB66C669965C3983F7E
676308A07F230EDB99902132CA5B6E0E95558760A409CE1DE39663F2876B13FF
A5B6BDE7BC6408A9C820B9BABD55D2CBBECDB2CCE5BE9885C3670D82BABFED7F
3C6124C4AF9A9028349E5DB3808B980EDD5CFA2D4E378283AE9526C39853101B
9461F4C1862A4534F30047781954087BE7632AC6D2E920AA7A5C51B37937F9DF
00DA5CA695B29BC3B2F7E23DF3632543F41832615FE181596B43D6E6BBF0DB58
3E2471B61759B2B5EA2DEE1E297F172F0F4E0E5B4E9C4EDA13114345E4CDEC10
04F9BFD24560A7C9BDB2E20C1F6BF5805FB68C5DFFDAF30EA918EB543A46F76C
008E018BFF8747C00C0C908B6A3308B89B8E77CAA452289A98F10329E4CB2317
681FCCEB541872EA71001C654D42DFFF1DB2A72EAC33078529238342C32A4B81
788C31E62BA0614BA24B4006473F525372BDE229F1BC277751454170B6DBCB3A
BBB5AE2D6FF99C5A65AF5D9F1D5A2F357435AE71B02CB2D8C4C44741A535D965
E48F0F4AD114076E79FD9FFD715567D2BDEC73EC3B8308B94DAE1C20EC756F18
E1EFBA392E27761E72DA24E4C108C309E90A8C6DAB6DFE79A7017AB7E3A91418
DEE48399ACBA6A7224324C88FD8861D1E01B09FE682EE128C28E930169DBAF16
CB022AC4B3ADF066E04C09553BFD0FAF0F00AABFED9BA35366F8ECE39C2AAB5D
BC6B4D224FC0BD03B4E41501101AF13AD75422B85C36411BAB3D72DC17FA6DA6
48A6E95484A796445B5926A7AA84A5E96521F3A544426A80EB4067DF49F4A7A4
DF51BF0EFB57472C5FCB1195C608C43B85657B8099F23CBD507627DA64EC5050
3AF8F80D81970315BF4844F2E31995DDB0BB2E743B02F396382879694577CC6F
6274027559A8B3843FCFFBC8C6E51250F22B856954FD2B3476FC2357E9D9D6F9
67C5983037BB6E9EC7E70105D8B675B261FCE9455E95B57C84214E9F17E25665
A80BC9C73264E946226627968FA8AD8EFA4530AD6F4B5B4B6E1C1E7E7CD26F0A
86E6A01B6D315271D10F2CE3137A07E082CB873440C4648D3FFF06A1499A5C7E
DF284A73AC3D7C9D53126432B6B3DD17FDFEA03D4E0C9092EB95905F74956D7C
9B33DF636E35011FF6D197C9B8FBC7D431BB5A2E1B9C1740751CB0C82D8E1C74
333BD0861EC50AA3FECF8A05B094AF75E2869314AA2F33B09E0BF96680F4004C
27DB20FEF95B0BE467B5B7F436B4529A79136AE676E52680371D036D1801406A
3A5009F8A8E6A9AA1ACE9E4426114DD821579901B8563C2F66397BE1C82AF588
CC3B5147FB15E1E8FC722D61478FAB68C27414D8F8AC93832B0AE9E5660F58AE
FBFD489E95ED635261D7F1B78D3C62F09DB17818A5F1AD15C37D3EB3C1456DC5
A94732BE0FCB9BFF90C4C783DD983579A30AA988C7B589686F3F263BC002C888
4F38F3BB6E09768DA7E3AC0CFC749FAB513205F0A8CF8E4559BEAD533D5C68C5
3E900716A4E585578EC5D5769AFA455C17BCA32CD65A68E8CB6A7E7849651D13
BC0A4F00E480335E0F5ADC9D41F04C39EECBBBC90596EFAA889F6602C6EE7568
608D25C9DBFE5ED4D2BA25631C93EC41596FECCBCD3B399DEA376E57B6E45D2F
375499F8118EAF5C7F6607DAFB984EA7E3040F6515229FCDB226EC73DBD346DE
3E01DF3857B3348F4B44F1DA7D23111F9CE050A46D17DA14AB2A91F2F5BBB81E
B4609221DB705695E407C55AE387147B7FB90F845F7845A9A2364BD94EDDDB45
CE58783B435F3A78C6AB5931B0AB096BED4EC0A60837CA6E517BA9FB39566195
4DF160077B16CB4AFC85B4C391418EC9A088A8DF9EDEC5A3196E9B6C6FA4B740
8F85F5C6069BF13D2FD815D75665525EC2DBFE798E6A68580FD4C9797CE591C5
8349BEFFC4449F832807549F2403488CF2897ADB034DE7028830360F668CC7D1
078DE9D6B13F6DECCE7BAB83204277FB9384FCC80431DCC9AB27708D4E112BBE
506311F987F76E2E2E5CBE9B6C6B6DFAF58173915C21F43400F1F93326831395
B9274966CB0B5DD9165904B59BAFEC5FB40AC0B8DE84705383D05EA02D410DA6
60EE50583BE34AA679A9DFA0726454C7D49477C1BD064D8CE9D646DCB9085863
8B35283BD2B223A49CDAE98497F4FA7C5048C08689E52CDE544C15F520450DD4
5CD850BB95B627B6F4ABC9A8143FDF30071366E3A448AB5E5A234C15A55E5C23
CBE448FA6ADF53D5F268E81E69D833AFA667FC39AAB01CEA5F4D3955D07E1D33
FE5416FCCBB211B1D868058463680AA78A41E4BA6D9D1645E8F9DFC8C9093A07
D419CC9F165789FCCACC2FB83A74EFF103A5EBE078D2D9D15BA7F297CF8A693D
79C9EA18B10BFF5DCA3D18AAD4226D89C8615658FCF4269B2230F5BA5CB3AEA3
1D0BDAB2136D2518716578EA20159331255327919195B5862C96EA1243561331
C2D9EE7B65B826B179EF99111BABBBEDB83B50CB2D6E44036DA3DE4A6C60A58A
4127CA7332E5039A2A7E32F2389255B0491052B9B44123E160E65D2ED3DE1E37
473F9BD92D3BE4E77B39AC4E5800D626CC47D247CC610668FF164EFBF2FAB4C0
236160532B48948C4B25D81FF6A99A3BBAD79D0B43F97AF406499A2B12B953D0
AE1984D78EF2399E862A275B7FBE240E9B8AE837B7DDE8993804A527FA18E5C7
74D13CA9A515AC5D6B5F8B5A1402C2C4DC011B043066EAF4DBD13280106156AA
2D5B790AFDEFFD04B04AB3469F305FAC962A19C387672A4D101E1BFB07CFF9F5
77580CB72DCFBB094848B0FBBC592094E92386152750B09EB6C42CCE4740F0AA
61E1DFCE95DFCA2DADA7BFEA7C740EE677589D06D3FAD451B9C70A1870543B57
FC8ABFFF475D97513F0911504B583015DA807673416491068203CC3FC95EFBED
195C67841000359D2ED7FD6B3C2216070471F0FFF09FCBAE6C1BB500C839DC25
CB07FD277A2656EBB2CE76E8F0FAD8BFD15B26A6FC4B864511588A5FDD4CB1C9
5F2682BC5649C7B03B92B57DA0F5BE89F5DA40AE31D540BE77E249546AEADFCF
DE52F22BEF34F7BB1A55FA2E881F5CBA918F299A849F5ED006AA52A23114F87F
8D24272609BC68E93A4E781B1E174A02F8F6CE590AB57B9A7F928108402DF39C
62DA2EAE8BCAF81DBFDDD71FD87E0750770213BF6188DC183302136FF6CC18ED
1A44261A99201B99E29F709C9ACF280854914E1D232EC40ED164D1841B2FE33F
3DF5262A92E98F7A5873F70B94CBADFAB83995414E9D3900926FA8087A61383E
01E64836ED5A690A776E288BEED7010ADB1076B23257F94846E1D354226B03E4
DEFB70112BE7F4212FB8E2A9BA7387614ACA4E7892D99644B225C06917CD8C63
2D443824A1E986590E4D63BF187D8A93FE9F8CD6208492E7A448BE92105877EF
ACBDD14EC74FAF23B7784B64C524C2A3117131FE530BBF2D38E8B49287A1D890
E8CD6EF325DCAA09A9614CB7465B022FAA7CD29DA0F0624AE6119641B027A34C
EF6CAC90369FF71A3EB16EFAC41D22D1BF4B1A341FCD866ED15BCF2FBA48D153
E56EA98C889C84F43BCE8356DB43399E6A6918A887A64B2EEE98060E47C0F427
7B035AC8B80968AD1178A8DDF20277F9158E74FDECA49FA7665B035375338426
A68A556A08A5FAF598F9E1630BBAAE87A4CB61EF66C51065F186E397D9FDE103
446B3DB675FB979CB5494CD195A1DB0345D5822CB94B42518592CC4489F682CA
E39E3FE7543C5392CDD26DBB0B3B8AB68C7C6F4F0FF1F348C9D3F1FA454D98E2
5393738FFC41A74D1489DFD974588112D4CB630389A4F601F28719068D976175
7536A48FC7ADE5549801825D973C8A6C3ACDBECD3B9F74A6B21D04D33D8D6867
E328F1F84E5521E6E5B727A71B84639777F936CC6B9222D3D13C1BE3885C713E
D2861F781AF45D55D2D83387E9874EA766898328D814E463358D70DE7BC6BAFE
CD377B48633D0100E90E770F19A5292DCD4C30E8928CDB1375A67FFC936C5A53
E709E8A6CDAE9F7EB8ADF8F303A1653E9FB661BB9454869765B17F7A9B49860D
3EDED3CA0B29DC5BFA89D151F7EEC7F87E5FB5F9B4D986B6E975BF8F27A17CC4
695AEF57A74EAA4CEEAEA98AF92D5E758C290A579C2CC0F89D27BD64EDF7574B
612B85EAAB846B6EC144DE286606A9C6BC448888ECF646A49B2C58E9A830E17A
51EAE4E71B6950D5D43C08932DAF40BC1620DFF03D5CF38629A41BC46F08EDAB
E22B162DA9A78C234FA2E075B9F9EA54A0F474722C2C0261EBADEF3B9CC4DA47
6FA01466E866DCD99398C16988D529AE144FD133B11DA950F2DF0722830A38C7
B58AF68CFECB09313F5745B02B4BB608BB3F6EA3D76220182D57FB18DEAE2349
F27FD72C7ECAFD783AFE11526767E2C75279BCFBAC46D8224E8952DCC7F5EC00
EC532870FD72E532671CF9042E72CC4F32949118CCAC6C165A39EB148B25F234
59D2996A7896CB24AB4BFD40B5C0041310556883CEC750C615EDCBCCDF3B63DF
DB8587895C5C402C2B09D4D592EDAA637B4E4E7D7283F6E014AD71DA71F92A5D
25B7789EBC6E59DDE60F8E6E7307318ECE80777A5FA529030B795AA0CE8D74EA
1A4DB69F42B4D0A858F8A3B763760ED716A24400838472E1EB419C638761CD0A
A12DD9031412AC87B96A7177247AE7B2EDB14B03A3CE00A6870BB846D7D5CB1E
4FF0B6322058736D607CA8EB562EDC8ABB5D6C02C56198620C8747525ECF7E03
04D3BD24256912A2ED3C59B32CB2AC531E4A46DF541B088F55D76B2F86DDE919
FDB952BCD8D774E6B8F152E4C362DF1D4AE6A73D8E7942C3B7B392E669555B1C
B68B11C0E04C822DC99243D5F8211C97ECECE5062D720A8E05B319FE16FE42AC
C4F8B1F8FB7A7709CF70AB808FB5463133418C76C371F9FADA0222F424FF49CD
7A4D0500600EF954CCE1A7ED40F1AA5867D802DF36AF482F2E48AA56435A4BFC
57904CDBA6BB2FB1FC97EB25E3E98734A0CA4A814D824EE4CA5383C6EB89DF68
BD9644EEEC6439D7AD0810B5407E1085B1D510485C84F83AE2F256EB21595E79
5B727FD7B5FED0B59CCF8DDEA3D6EB4CE7AE86F0DA8AEAC48426982C0CDB79DA
7065430E43D16E0D780DA825AC347EE138DC959E22DBCE841F6A50D7011BCAD9
B86BFB6772CA98CA95FFD0114B6957D782416D6696AC8645E10FDD80D52109B4
D002FE8F6105130AE25923E7EB77C0FDF5286780C3763D99D291DA1E51C0C8B9
47175219DC294964D501CAA5B862E269199F1D2F43F92DC94F908F67F7AD292E
4437C8A28DF7BC5758FF0C9116BB0D00B6E24214CDEBB2918B905C2EB8F47DE1
694B408603A0C4AC0EC5B2468083435F7B540EBBC4131B9CC9CF26A4C6E034E2
6D6BBD97BDE3A179AF0A9F966EB9261170ED04F7433A928756FC9BE6FDF8D4AA
59D7B64AD40E0E8B0D19951515A6EF4DF74E57CA1E9A94780A7AF45966CEEE10
B25B9A4A279FBBCAFCF7506D16094E18D9C77CB25E04053E0552D1570297E72C
4567B73012B130536BDAC1CCBA0D791A5346DFB2C3AF47579752BCF5C8B00400
59CDAF1118CE04D23881A2EA0DAB99A669F70EBC4901DF9C5469C868EFD49270
854E5A085D4DEDA1E64E8F09431633C3E5A1C1BACFFF5A58CA143A4757421323
238C5653A3BF9F28CABDCE6AF2605D1E6977A51D2D2838ED097919861C2DCC3F
C63CB564365297FD4421CDF6F1AB2E63235155A2E98E99202B84DB96A9ED85AD
222A233EC61899AD22102AE68680A244718193599D9E987C17802C37E47BADCC
1E0EEBC819FF7A39C44E259355E9073401088078B10AEB7EAB250D80F942EEA3
A07BF210C878F5954B74B51E801985BF1D3B9AE906C232A124D171C22295BACD
1D974C8BD85BF09E8719D173F4FBA16DEE1DF371A889E06E4F7ADDA8BAFC895F
6D1CD6C2A9FBA36545B9F8FA73BE010D7C4C0A730C6574F0D402ACED2B7D6352
3757F6AE29273EE91BB120D2CF9F5F9F1FFEBC01C83CBA3F6CB29E1EF04C3545
9738F562EB8738D25513C8E09E739F6A7917586A739930DEE742311FE4BE2626
60F33321AECF7862664BCF04DFB1F62A556CAD6F0F434CACF7361CAFB8E01269
9FC45FB907C50FDBC4B919AF9DCFE7C822301F9D4C7B7DCE79378974A281B8F0
74456303CAE324705BE0751DFD153A26FC69AA03ED308F28A23FE7A7DF7F4EE6
D26E1D1B9302DB9BF961F09CCE062B17EF20E492C02A138DF27CA806711890C1
AC5997F21A14E7523CEDB295474D5204CBBC0BF0A4DD2CB038B8843685BFEAE1
5514C34155BE409D3DD85939EC795AE7E62F0534183A7BC46FDCA2939024A822
946BF8F810235FFA7904418684810F196A24B0A20ECC103678173A5E658CE844
D4F0DDB7D17928EA0F10ECF433D4C9901B0A5D2888B29FC66B4FC570F2218856
814F1ACC4A7F7B5754BE7FCF01EF9FF989CD54D17C7E2C5EB5F68377A82ECF17
8CFC51F75D4815BE1AD8FD90C8D702FA11B262ECE324C2625BB1832EBE91A642
922933DCF3BC471A077525E04BC38603E07E7A020E5B8B0F4C985D3908B847BC
A2FD7D159B0308E33E6C3C2DE149887653883B7028F74294FB777078BAD84FE0
B9E27E5EB32D967C9DB2678A04EAD1565FD603D36259C433CA1E5CA81DBA018C
EDA22379CE386A13FEB9568F66F15D2B2A9D71A01DEFC05BD25D51283D153D87
85DD1AD632A308872B5A9B58203176FD4C2D16191D8876927CD90FBD29519305
BB5827A262D846549BAEB53987787AC9AF72F866C1682BA784D7657DC8284488
14EB159950185ABE396DAFBB2C6B7ADA3AE06F801E6C37B04B18441D4497E178
FDB582B298D4B56B91A01E225A773224878068A9224DBF1786551604753DE51F
4F79713F761AEF5A91CE7EB132A3A86B4EE8FCB5924E01F73A956FCA977A5793
953E23592DB30CCFC704128747515D013FC749F75BA912618C973305B993F5CF
DB502635117336387D170AB42F95FC433D05B3E0C76AEFB69565A7B7347B4577
0125B5D869DAC34A4D5DDD215780BA71E493103B563BFF48BE11C949A24B8B49
C81270862B8528051C67824D505EBA49C0A62932D8AAA1829308E3583315E31B
F70E2E0FDF33BE1BE3910E59364B690E72D49232D229A3A43A98760A56D7869C
9546A7C7BA03C39E2B59B5BAB7C622F974A3D896A679D3C6BCA66C4E52763B57
9D4535CBEFA5C9999A748739E2045D57945A929B28A9AA2C21E05D767DB0DDB2
A0EE6D87377A7F70F555DF45E883869A4478FEC89898169AD1F0A7DBDB89D0EE
3B243B5D6552D7189D4AFFAAA3FF809510749440EDA8415DCEB4F266BA674CC7
FAF7C46F63F51819C4206CB45D52E88EB1C042E28A6DF8D479CB06520983CC67
41DE803E5B6EB1E7F5517A860481FFFDDA92FFFCF7B2D6744C0F0A489FCA954A
0C1358722BC116D193A3BC7B6EC649B9923A92343BFEB7CC1D94ABB38A6CA582
90D557AFA6B2F76D3C2C0D7C2FEF33BC526FE345B5E929CB01DFC6E4AE406203
A42C91FF49E213FC7193127782371D3D4884B50E1295C517FC56BCA0167EAE6E
28CC683E82F754CFE79598457D94ADE423C310CF0A0F1770DABFA09730FEC742
F9287F2792B92CA8104C3BE3EE5DC01A9FA9D3613E04F4B21AFAB6EDAA432795
87E2295BD4748871D5A349370AA3F656B45B585DE52D984CC099AE441600E6BF
37693F7C1360DD9CD894183E498D5EC423985F63F7BA5EA703122EF3B1696284
58157FFCA9F2D5BFD0073C9671F7F951F199375ED0434ACEA3F4C904C19B7456
A83B17083469EE367CC1FEB3F87A89F8EE67FC86A86A4DE5C59198F5124711CA
E41520C2763D38121FE0F961527C3BD065D70CF3B6007181B355440F071138FC
4DEFD4E596353E2A05960C9FB80F5BFE00F867731F2800A33133B8B9AEF03A70
F4AC6323EC817D05A4BD642DFAD8B91BF0B9EDAC69886326630DFD6B038CD509
43CDD5B32ADA56F50A1E47F15513C1DC5DBC75DE9AE457EF670B55E2F78AD683
079F564F669E6366D3F9D51BF73E000254A8671C3523CAB620C1DEA823A09D01
0E11E6D49C77FC969D1EC519EE0EEA3AB47CF872734534F0ADC5EADD12659B37
70745B774D879399A1EDB91D2A74E12A72DA524B0F3ABBA5A82312990F43B5FD
B477010C1E685F759A9F3F1B4B2CC627C779A0E217BDDA669AFF1099E3D76D55
067C591328E391BA0095F41D02EF0130AFB075715457789E55361BBA8D8DDC63
B5F64D6A0AEB2C3DDAB25909FEF00778D7003A85E90148BE1055DE2F08C9BD32
C9A464F1CA4419A6C77017B79BF9D849BE301AEDF654471A12B45CF0F57426C0
271A032165B6453A1BCCB55901EE8361BD16FADF7A2246DBE07DCE0432841D44
CD5C1F3DC3390B090D830D37ED19DCC671692EDD0042913B5A51B162FA63D146
D77752E5C12332BC0767B9FBDBA0110311F1F0412A17D7D1CCE370E79DF586A1
82EF325A97890D0689822578790EC833A4BA42AAEB64258B5209C4AA648EE5AA
4613CBAF59850D101D84F4CA615590598AADDF53F639F6E54C0B032069084DEF
0AB3884AE4336F3FEBD08BBAB9BB310E2DF5FD75B3AB02A1FF9D490958CE8115
44AD2E3925488EC01BD7948F55DE2A7B9649808406BA5F2E78DFC2EF0B65EEAE
F79E27A7CC1D6B94AA09EC282A62169520046E03BBD09A77ADCAD62F11485C14
C94E2408FA3B4C7D0B8794E084234A844F4325EBBBF0FBE8D7AA178EC1471C36
8877A32175D037B92B70BA406BE638971A8838AD07317657CE30975E0D8A6B40
6BECBB85C92EA3ADF8D515E2D11C464F2A1383AD8713091D65D3F9C30D2848E9
43BE66241351C092686FB15956C9346193401FF0B47C74977FFF6413BE390A03
81191B86617D0953D590A62AD8AFD7386320610029FD38F2C352A0EB40B6651E
015D76EC28A23BE13EBB4B036087D5173B37ABE0E12AABD4905F07ACF22D3813
598A2B38BA83190CC57D3D506344322DDEDC2456566D4EFA0539B1138D900D52
F18DF68481C539EABEABD2EEB99CD2199068FA557A9A38AB3C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFB8DD9B92CCD508A09171BC12C8ACA32FECEB20
7CAA1C2C81ED075E3EA7E712D95FC612CF97F3402658E90924C75CA278243C52
D4E02E8224F197E555143D563819EB1ADD2248C18E02E18FE3DCF624E37ED993
3C7DAB05959E694040B7EF5F92D80AEAC2CF58EC01BD61D7CB962C4EA678C5C0
62593DE423E11AF90918CFC6E1E8F9DA428296FF0C92CA794AFBE20B44A2BE90
C36DA2687DCB7DBA40F6B99E51650B25F4E51941B49774F8273B5E98306C87E5
3A03E6B35B82A143A76D58265254C13E6E1A9D0DB17A1D9294C759AEDDA6D4E5
CB498912E3AC15AF88E6309CB00AA35170DBDDB43739D05EECE15112FADEAFA8
DF7BB6157C5374FE3D6DE742A6980C8C55A9DD737F2069BAABD6F1B8A83AE84F
8ECCECD0CDFA74FD3C4FA486433D06974C660A27F619ABC0E178D15C8C217270
1E6C1493BDCD772A1B9A9CB8C1205F7896343973FBB99481B1A6B865510896B0
133C9D9C98E813E0B142027A215FC75181A42E65C3E1CF5269B00E31FB47B4F7
7FD95A823A176D8387CA420A441980D3E866604325998BF88E4D0A27D4DE5AB3
F44DF52033A1EE28195614165597150B847315C78C3871F7DF0D5B8BBD40BB58
C6F12D16BCB3BE5B4EB51671AE9357176D5AC14505504C43A33EA29CBE2AB98C
D0305DD935D8F0F5EE3205B6BA139A251BCF348F2A19EDEBB709068CE066960D
6D0E7801038F92981250C3BDD77F02C296953F4FE2ADEEEE96C2499E4D5C40DE
EFB9EEC8853BB3E2BAED185D6B4A80C1BFA827E4F15E623A96FA4C467940BECA
B15E072F4D80E6FA1492BDE59F46CA026F44D74B0536463124DFF7ACBDE3E03F
7063896D3B578B229735564F4BD7CF18486E33C6AD14424873AC44919FAAE46F
12CC16254F52A26FE47FE41504D3E851A066522DD56FAD7828E5E203F328AD95
5AB433987B2296EB3B524700CCC455A521EFDAB11378FA57CAB556A4F4B23D7B
C51D926CA86263840FFCC3BAF798B72E5EE24715E42D9D1AFFF7AACCB3BE5EF6
3B1C4E79B49A3CDF145253BD827ADB43D157A1BDFCB3233B9397EA3C8B3217E2
26202117CFBE3DE2C6DBFB0BB25BB138BCB5DEBDD171A3100D4D69D8A56566C0
FA3EAC58EBE319E08383B6A269D928DD94CE748AC1F0E99EB86D800AAC284813
B298DD1D7EF648B69F693C23EA484E5EF04ABA445FF958E4CA098C9D022FF497
44F3F1DD4AEB615ADAD672C6BE223DDDA48E95A221C8EAA6415537EFF572CA73
E4E558E2B016B13DD10CA06A91925B8F035FFA5B7481050ED9EF7A99E3FE103A
B285C96ED14BF085FBF50AF7CF2D153881B994A7A8C7FF2F25AF4EC556835774
B08B04CBF20D471B7C228958E96587810AC9401E1D5ADE97B6CE7BE0CC90B884
3B28FEB56250D8743AAD7F2CAD78D6F32E558B510C0C2730F09ECB07AFDE1428
7A32E1F9046A37CDCD838855DA828AD50EB703E99F0C33737F64E650B2FBCD9B
1B2D63BF87271B5DC4615D281B73F4DA92823A4FD666C4B19ACE6690CAC1B113
237A3F35EAD437F588CBDD9BB31C81037BED3641265F815F8E69BF0C8A5BED21
A826EC20AC4384A8CFF8CECF07A597EDD246FC0CAC7850013FB3F1B075D4754A
82A584D88CE3C03E3D69212E49DF05A42ED088BEDCC2539F884446A7254B3275
6000AF03E97943129A8A6FB15CB94503E4231DD1E14AE1E34F34BCFF6055BC43
0DCF84FCAF507DDFF4885399DB68282CAC77A0D5895184306707EC587466B0E5
5B5690955F260A441AB54B256359EDEF9C514BF9FBA3A854DA481FBC1CC4B580
95CA47F3F8F92DA0B1B3A34E9BB9BCAE0E89082ED18572CF877640C27032E69A
65588CD61115FC966FCFE51E5A9371706E846D02F57F18066ED53549CF9E7C3E
F0F8405324CEB0A5DA14980B1FE43A4C4C566EDBC7AF39EF79B4E7EE3A8A30DB
99F0F40C21C0BCE46EC223C08E0050945569610079DF9E96CDE8D005FC25E59B
029C05A28021D66F223A6ED2EAE1534A139466F7F62EFEBD034610F9A7BBE4D9
4389941682F0CABD073F2376E124CCA5752AAF92BFBAC68A88FA66C49E1490EC
01C946247DB315DBE2328B3A70167B928CD4B189F8BBE8BE4BF6A1ACA730BA1F
A90C0D7F09B3DD6A5FE918C86610220FC1CEA674D56637B407679812A0890AB0
8E2754E03280E403235E6835ED221EAF81EF6581C6AE0ABC0452FB99C4190B42
97DFC9B4A2CF19A4AC6ED1DAFDC63493D8B9EF33711947B65B0C07BB7FE129E2
D31FF78077E0118B0B9702ACED9DB6F1156B5FE3883DF8B6FF0B0D28B049F33D
A50B0FDF4FA8F2153C3429AF1F0487C30CAE8A871B9627A789E268385070E27C
92147BCD955869B80587746A2C55B63866E552FE3DBC2A06A959B629EF744486
3CF361D2F7242677C5148F295C1CE0B5E19A665BEA628E5C361F4CA0CB8C129C
2C7D246C6BBBC779F84B6DFBE0E673604D21AECDC9022814F58A69A8643A1655
DF6C848C3B02C047E7DDE830AE5FF2FD1A26930E14FADD837552972E487B7F8B
9FCCCCDB9F327097EFE73DBA9E508070C5E11C262068E043BAFA2CCBCACE0875
E368521C0D91FF9EF94963AB9399A239A74E0C03B7D1CA4CE35D25C1EE22A644
41FF6949A8AE1753283BF2E9B0A86139A5BF3A04BA1F3E668B0082724961CDD8
AB05CEAD315D878E0034288E97C143576D2AD37F46E21F017D2EEEEFA163B82E
56389248E7594FB9F4A2522CCEA4ECA91EF2A9B90F5CE713C315E6E1A4950DBE
C58E9369EEAB9AB636016EE266358CDB0E27E89D4F5CC7779253CFD5B1F30EC4
6FE8971B8CE5F43DE6FCB7C928450BFDD46DDF88004A089BAEC734DF415EA833
4CC2F26CF23323EF301095C6E99EF77CF350E769A7EB0E1B9BF5CD44BE116463
8B6D952B4458893802CAB57B9DC5BF9843A67F7224EA242372B7142F685A7A51
091536FFA4C9DE6C8C2C8B7EB292D0E4EC96101C4AC46DFC475C716CB352830F
A336B8CDABF38EBC07753618A374051DF4743FC631A2BF9652C4E0805F625D80
6B486739CE5265CE4EE240200BB7085567F6AD3F4BB72F1633644BBE84967364
952081AC22A85157BA5C9BA0897E711DFFF1EE6ABE33479FC9E09D33F9D8EB2F
CE5DF8E873AF92E7A41E0400C3AFC76281C22AAF7BFC20B637B2AE97252B5210
1B6F33F63CF67434E388FAC6474970914857919926E5A42548B9D1A9078F1D76
243E898F2442AF858196ADD0AB7EC59A2815F89932C19E128DB67D6F73FE591B
DF942BCABB96853DECAD02B6123F25D2E5978D05E9EDF07B8E6F61A812735FE8
335042BBEBC8DCF193CA3D40E5337359272C890F4D3AED6F03D917F0C8BB0CB3
120C3CD743789E435A460AEF65C161371032BE4902BBD57AA5DC285EA30F18F2
B9591FED2312CDD8FBDFFB276035A428E531D41C57BA6BF1A56F65B8FC21FEC4
0F4059C2EA3DEE94D79A8D046474CA6EC92FA9101102BAEEAE5C1875DBE42C23
E561946BE110C37AE06BE770561CD930E8AE76E35329382BC56F6DA0468D5C98
B4E9C99FE1B4DE04B482145F3924B20D19E633C26771E2301735A28978B5135B
8F28084F419E5F85685735F0B0A47B75F63DC4559D32A31558EEA998EC8C4702
F89F660AD38ABB9AE811E6C73E3DF9C364357ACD480B48A201BA6625FC608958
9E70132E7CC5684E34DC85646396AA84DF28CF38994138E0F4E0A7CA0058ACF0
8F7C784508366CBFCD223ECEEFF45CB2E9BF61FA2AC17072EA6C9F52E42816C8
5AF34C21215E7731E679C9DAF1AED801D6239C7777FF97DB2AC67C7F6118F432
42FBA0351FE639313C561BB821C5577F7ABE95D06F4B9FFA8B1F91DB49F181F0
DCB7453E2A33C81476A8951B1A5624BF0D2EA0214373BA9992CF371C1A07A956
8159D030BA9F1AE6A71D61E4DEF3D5B062FFBEB54A430BFFA26066C7CD272587
73D747DED2B68D227691ACC53CBF939792B6CD340BA06E12F284DD1B240591CE
5F32317201DD80D2851C59D58E117B85CC17F7BE4EF1E76BD275BF88D7E1F8FF
373ED07D33E42FF9C37B2EC62DA5486A550A868D0C17E5861E79939718243DB1
F1C729D9EAB7B4E5B768EA4B1F96983772097BE3F071225074652B12B08286D9
47413E48F70CFA41C190D9CF23479F5CB596CE9A764D8FB11597FA64C204AA8A
AD5CA267A0997CDAEBC1CE52CC8015865AA46773CFDEA403727CD8E363237782
E3B2AE143E60069683917D8D87F033AFC4AD7582D711094C0C8B3F1C892370DE
073A17C2694A3083D1E73023BB66A4AE15DC7959BB36A10B51E964B38064E61D
B23032736B224A9B0C456200949A01730C363CD0ABDD83226C25C32643FDA7E4
F9F5DA3AFE74216E879338056AABAD822CB4B0D735D46ECAD9B3058B1655DBEF
B89B829BEDB5E3DD60F5433EE1E6728C071FC3F94E0005EBBB793A0B71577BD4
08C15C2152DC52D90BB968138EC1501C46CB5B5152192E8D337A77D60A3BC323
709B8C11F4DC6A1EE18BFA4AEB8E8FCF1565480CC719616F499E45D95AB16320
C06B4F625F5741DA37E29C0BA0DC3F8F945E8803662299C3FE983D7D85435A62
2641E1C1897FDACE081033C2648F76C255145D67DF638A372D67A1324B65EA61
E97B2819EF932341824C215706F25B20BA23B66124203536CB04FCAA433B9C6D
4683C516CA83004995898EFFC985D007AE44672530620E26ECC340A4B3C4140F
146A06890ADEBBF2BF3D2FD3C6966D14AE30D56CFE8FC26805B455CAA9BD0A2A
3286810DC71936DCE13A19A62CFF57309C7872612078DF99DCD01D76B50C3B28
B0F44DBB92FD793EA37DC67D93D0487E79FB3FA3A9D81A503AA8244A272C16CA
EF6B64CDC70B85BDDEADA10DD79E71C527867BB83EC8516C6D3DD8874B003250
F65DA63402166F691C9FD7515D76F88B3EC719EE9AB2C8A40E6CB11C31D9C29C
7AA3B71450BDEAC4AE6D7EFAF030A10ABB310B4D67130AE7053A2C227BF147E9
3D7BA0C994938ACFB5FE284C6059B3CF4542133E0D4D52E0E90286281DD2A688
183420FC63F44C24F76443DF532B9D86439FD265C90CC97F2378B9B632A6DFA8
7F15C09F987562CD6AA206F56662BE96AE49BE13904D8CDCFB39B171D12586AE
8AB582BC0C63DBF12520C3AD385D812008E043C1C4AA4B571230AE6DA6569549
8515512C98E0C1D30AF2F4B6F7B44F95AA93A3F3820C88B446B73F6099662792
47352449FF4376F37A9B52D651886EC83777DC4B946660818EA103F17672AAD4
0B40B3B362AA3B778C47E857E4C2AC635DFFA4CF90BBD139D828045042809BA9
9DD7B637802D663A87531B9DD06EC1056E4450D7206C6F7AE60C952F882E4F26
FF3E6E525E86E041A6DED9B721BDD6E2223145BB57CC4DE9FBC6B7CC3667DE62
5CCB4B03843809DADFF492DC29934B4283C233C8744FD5EC84144B2966F72FDA
20502D178F33BA78DF24F7346872E84795059D0A12F0E034351091BC5B3216B7
72316E032FD22CCE572209731A0A226231FB0416E80E4E19D6A4D045FA24AD82
93635E74A6489C6D09EA559B9E8D8FF9D064BD36F18F718996556628C3F46950
AE7439D74DC29EBEAF478224803BE21FD28CDDB4DF465DB9A8B025BBB49637AA
0D4AD5E004FC3414502FD8BC997C6B5AB50B0F606605116CFC2AFD82B5B60629
84CA5731AC4034A3B9A915CC61E0B6F6943A992E63C0D48FAA8972C660BAA4F7
98EB5E612E9853577796D136C544D5107A7E7474557DE23B94B87520299E8515
34408F39443AA946A7630D18741B5263AB30DC3F3BB4B4EFDC6DD658FEAFE642
F6F3152C6F3705F05C752E2CD594D05B15173D5A85A7C58E02F1128FFB0C8BB5
E7D0A50B33234AF28E55765856F9C5DA047D1B7C37610A75DEC881250886C586
3A4D3B725F61E40DDAE88E34ECAF5F6E49A777D15DA87D810AC3FC56743D5EB4
45C3B76095A2FD5BFC3E7A8A2085E551501C091A6BD5BF1F8E62D380C7849CDF
06492BEC78C972A996F2F7001A3D0E8A24476CEB3AF69E875DE4F7903B65F79D
511E2F429E8CEC0122CABCCDFE781195A1B1A6220D31EF06C3D620E42B145626
CDD287909F4E902B13A4F7B9F742BC4FA62D0F0B04F5A4F9EBBFAAFFB7CC465B
CF923D312888E865AC3E7626167E369AC65724E0E2E6C9BABB452DF2ECC9744C
9C500556EF9EB6764B4F8448E7278EA0678603F85C0F3013AEB1B2AADDB2337D
BACAE7B172BE416FEA0D359CBE04C83230BF3F1AC0969FA3DE9285AD770F5E87
B0F864EACC0F71D1FAD30B15C56FF41F8B29BBBDB962DF1466F27913394E9A84
8702BF4AC3E149A8A38EC38515582AE2C5AE270F31A408D7487C89480444A0BC
0B30A59B8FC8BF6ADF871A58857A135C06F6683C5AD462F825F1D3B0B0E97978
36CA0B1D5A2861458A1ABAAA7CE8CAA45A9CF32034CD2106773B44BA9E98D377
74642CBB01A1CD423EB147F95B5ACFEF157BA26337BF404B153605402F14B545
51378F52F29CBCD8D1C3A949C547B8A5CF52D9334892D6D548E3AEE8B0500239
61B173049620CC6631A369797125990858F9945CFFE6C4F3A087F4BE21A90DE9
250E5D74823D830A3A2F7FF105940210209779C16B2A621D818752BE3E0596B7
1744D17A9535FDD857AD224A2DB7270781DAAA348B156EA71466748187222315
252264773FDAD954D1140F89D305B6D7853518F8522B9D5C229C89D59664FF21
6D11138AC7F3F66C8AE30B2A8BB96416FDFF848179580A7DE71B6CD3542AA437
22748EBAD8C81EE73B03FB45FCD0141CB99C68581593A6CEBAFE9A9136C3AAE0
71B00D461A0BB582A022944E02CB6DFD5D5D5A748C350ADBD4A113AB2A3A44B1
EB69C07BCBE3A853130C1166EE98EAF0E8733F52A53D468179AC6BA242538EC5
64F080D8F2D235D82EBEACACC718F5905E864DD54CA062EA1FF4052DBDD3FC68
C8E444AD667F9BD757CC7D708592EDA8C6D867A66C2C3B5E16FDACB9A7F68828
EFA0F74BA87F7215D90C078DA169F77B32BCF9CE3782D3EE1739B003D8812AD9
EB3820144C7EADD2B7564578EE778AB577C5BAA025F3924DADB7DEA139D539F1
465D50C5D1DF71C76F2958F8C30E907C72052513A1B20808585CACEF9C426320
4ABBE40E0EF6EFD917EE28E980A062580B9FA11ECC7488439CBA2B34D9120F4D
170F1F8300B5BF8D4BE40A561060D1869F461DE358037AFBCD4C9A323769828C
58973E9708CCF674025C8D120FE3ECB4BCAA7CAF9CEF083F67F578DB8121C249
FADFFB69F2296D9F724349DB48BDD1763F03516A6EEA22D2EA136FE2B8C7CAE8
040C8181B0522A3182127E10F30EFE00E05C08AA50EABE80B12A8C0132923ACE
057116BF388C8C0FE4267213204FF318EC7D8C2C8B7EB292D0E4ECEB60C79F9D
F0F8E92B88699ED4AD5B5F9C815B4F86BE50000FB32209766D44D548E3D7D8A2
9BD62C37CD1D6C55544460DEDA4F8244B6CD4E6B456D189245F75ABB8BF578BD
19E9047E99ADA4B31539CC314F9940AE48775B4094985B207F8A833037F67C77
A14DF4431DB3E8171F50DD33D78020E95754079C92F2F5BBB81EB4609221DB70
5695E407C55AE3871023DD7E4A3C59ED5565F2096BC24D7F12FC905E2D6DC3BF
F00E9A79CF91E2F23F5348B811342DD3A2B352DF1E88657DA6F76FF4B424C52B
014C68C1924EA4BD6E305A48C87EE994D92CFB878BB725B0E81E119B3C1DC388
C69467F650E5565495A5978375ABDCD02EA24E6776FDCBB1467CB520B59E5311
7FB961AD0BDD708C34E6B895A98FFE87EA3E36D8081D645083CB8C992985DB99
D9BD2A88AA4D67659C31F4F6F7DECB5E57E0C7B6EB1C817BBFD0DB0F1AE8C44F
E31CEE80C0D8954150DB3E2C7FAB20DCC3CE3BBACA2D739FBC72E90BC0E886D4
BD5E272DE64919557E34D6F3B792A1257B9FF5EB18BB80A6425EBDA2DAE4F662
AA2B647AFF05722E88E6320A422C7025D76E20AF184694442AADDBB4DEAF6141
D460D1FE4D5BA8D766531EBDA3904CE70AA9F7A74DABE0F4609576ED38C28C4F
BB23B636DEC931E87F4BF5F39840266A3ECAF56E9C29B85979E878C00247A227
893C488185343BDFA2C32764C25B2CE086713E396437D37A135783DB2AA4FCAD
FCA7D82422BEAA8E76475F7F5E1A736660D9AB5E2A30F8CA94D78EC6097FAFD5
BE455E2C97B6C512D0140CAEAEA7E94428D6D723C01F3A732DD8185C51D69240
5F5D6E84F1F1088A69A2B74058822221B090CCB46C0A8A2655612C14381B3FB7
E42E841B123CBBBA6C33C080F9CBC2B479309AE973BB998BBBFE4C486AD89EAB
0D0C21D705FF764C914B4C11AEA7B23988D184F29AAC5C274CC07FD08FD7B683
52CACCA2D75D486446E7369DE487131806574A05E7686DF03F80B23E478C5ABC
A26796BB6283AD0AA5311FB05079878AD49127A054DD75488BD6D5CA7F4A0CF9
1F7087EE721F64CA0E33B511878F1E0C8559DA13DE0E31E5E08B89B0E3941460
CCB0AA4CE5F709E097773C49E0F8EE1DA6B4E6F21298B6A6D22A71F09C00559C
EDFDCBAB8F1CF96712957859BC52FD1EA5F3DF42CB6DE10F277743C54C36FB1E
6FB57DAFCED1D207DC2D1D824AA786C824114BD6BCCF2321C221DBB89611354F
C88E6559EE447E9903ECAEC93D5E9D3E18F4A07276012534F43E19B43A4F31EC
885627819BA0248274AAAD27F6949ABA1D5BF00773410D2F616484AD85E62A5B
B2568678DE7ABFBA623B59103A2C6E2F8B4CAED6A5419A36CDE39D5A2573F591
867412637A11121B01BC7443FFD645E8EB8B8A505001FBDAF0D485BADEEDCC18
657062F36EBAE129BE12E41854631F388B1327B6AF6AECFA67902D0150ED4BEA
A77353823CC67E36721E6AF0AFD9EBAB73776E7A7696773C49E0F8EE1DA6B4E6
F21298B6A6D22A71F09C0108607477B471844EDDFBE24126D4B28B932406BA5B
5D7A0B0C3F10080C12CC74EB8C5288E168E18C8694A0110D9E9C2DC8A7CFC020
FDF6FD6D60F4F5A5B281ECA531C990E0EF638B210931772B298BD43EDDF7277E
E292914509F17B7ED3B19BBC746DE44065D4297B398A16DB1F5085EF2B7412F4
3F6225EFD82D88C1D80B65496854F2351DC1EA42375BB856547B82DC006747FE
5D968556C98FD6FA6B627AC2A9170334E4A7D6A670F55E757F732B393074CDD4
A1A65AB541061598C843E51708031961AE3D35108D69FE0A8C5216E5198FC7C8
C63BEC6F0F337F2AC64C4C769C96DC63384AB3D04AF892FB0E1942DF5E434277
24E0E700CC0AF455120508C5413D64D6510F72FEFF98DF3100E01279397F0866
E7FC1FB135AC120234F8F03E2C36644C31CEB2ABD660D2B60CFC125843C10F6B
022695445B95A6A7487485A275D15AA92D0AC79E414BFC06055E06FDB0DF2D5C
D155CA566353F34502EBAE22FE9FEEF344C5218AD07EBB2F326A9F4073096C72
FF867ADEC79EF58EE77CC9AEEB43F80489DF5275BCB2DC287840236DF4AC6041
19029F54CA574FB6513D85342A87AD49F6A5BCEC12999BBAB002791D704F6B47
A5A18DE65034D0CC9F9F66DE2BE45C2D6F1AF1EB9BAD9DE1D97865F8C2D9B55C
114BD8277BDD2E80D923202FA0F4243D324A5983198F2A73CDBD54D8633FC694
1BCDDAA06C54247BD18B7A124F020F8BC59461A094827F0E93C157AAB6B16829
5CF1191FFDDE2C4273FCE44270A9C9278E274CF40359D051DD6C8762EC9F22D8
772B8F148A17EF4A4CD214B123B2112202761FBF8EDE708FD477D8D5530779A1
3D11C1A61E854163E286B22BEF97CB9256C0CD4CCE3F8060B700822EB157C4BE
8DE188872E57D5B88BB9D233B5E47EEF26714A4CC8923A94433E87AE473351AB
D014CD380CEF7BFBB68CDB7C90D3BDE6021CBE099ECF330F033AC321D463A276
32AC5B4B0AD031F172CB2FAA0C0BFDAD40BD3AE7D647B0FFC92B6520B2F84DE3
CEAB2B97B606A0BFC6874869A86E3A570AE27BB696C8285F78C66D154289455C
5FF2D23C1A5F58AFDDE53F7627C5EB24D7FB1AC128604DC225404F39655F77CF
1700323489C7DFEB4B7AF909F18A9D030920535989C3EFB5381856F76E79BE7F
42723C95CCA984D8E4F59682F687343EF61149DC3BF556A632D10F0E0708E160
7B9B1A8838AD07317657050B505070A9C4DE98D5C2E19A2887FAC7A3D8CAB54D
79BB7FF1573C2FB9405613267564A3574A9C02A9899CE0C16B339B68A2AE149F
195C76D595F18A4289312E74FA9C289A53647EB6D771E3BEF8CEFCB79818A6D6
6025C20BC5924DBD3DE66FD5128D6EB393787779F7699443E59C545C8E613408
E4912580275C2798AC486C1FC2ABE13287690007B115A1F652A15E37DCE233AC
45B2036B0A5478FD54BE878B4223DD8ACDE8AD0AB99D04FEB88B6DE54FB27196
0849B0AF6FD5ACF8E463BEECE85E4FAFEC57F806DC6D27AF94F660759B7B7820
6BB5E077D703D135515167D5DD99FD599854B6929F99828AE51D6655704BFCF0
DA75C9221E3F45BC7A8F8AF3361EE4B989D3A5128DF2FE36B36F9968B5CF9FDB
FA11DCA0E08D087C4D0E81B177F7241681D3EAA0C81B561E7D6169FB0C68E3A8
91B3592682EFCF0103834714C42B1C0B53164C8FE5408AE3A2D1A275297514E7
62C01CD9930799BDAA3C029DFB85C8B0DDF9A3963D0B1161934B23A5C5C87D07
8E2DCBADC5B677EF946A2D806D67A95E1E790BEAFCC315653E033545AFBF5763
77A48059E6DECA5D00BA874DF456C1C090B33F185DC6A9CA2EF3D53B18AABDC8
BCF468B0D30C060CAB8A06F6E369D3D200565F58DF9C93B7D7C18E07C256081F
5B8F3636CCE0A293F905974A0B370509985F14B9DB208D130BF5160D28956477
0D0A5EEBD93BB6294E30885DC5F1A7C010EC1B86BFE8B4E0C2804E1B9E5A78A8
B27BD2869D59778999DAD55652CF8B3D7C0440D2607D60C5F1E0C78012268AC3
B7A4D74466964C4FCA0B44363C27DE6DF4AACB189CFC990D024A8719B8C4F9FE
6CA17D515B26497148725E1E777D1CD1E22607D6583926FD05C8FC76D9F1E4BA
09FAB2311285D5B26261AF2A7A6133F46882944B7D444B9CF969977681A88937
2A09AAA8F44A6BB4A34F1C35114EBAC0B0F263ACEDDCD15E4289F24E742ABE05
38FB7A82BE7DDEF5CFC3051ED4F249B4203DB0A98E40A9C419BA24B720DE733E
2AD6864D9930B9E0544CA6AB5B87D0824E4A4E81527F69081A1E4450C0C994D2
FA8F4EA0B31BC62675775A139B5993CC450A63079235C60E9E8A93D1D0E944A6
9E852274929D38A4E5DE096705B4034226D6B5DE97BBDD742780F46A1763D775
A7AD326589828310346614F45671DEF8D00675A49597413D95EA0463B1C42857
9113EAE373267308D281F5762ADE506C2DA47286A8A2312B11DE4D2D1009CF93
BE6783A7FE49E9117F2119FFA0310FC07BCACA0B3AAE98A934A36889BE243644
8DF2CF7FED61BCAA295453173D7DF58572B80DE2366557171F2F72AAE38C57A5
F21AE59F5A0A26E769F4EEC9B0E81E871C39B9606FABFBFEA20AEFCF5691DC2F
08424BAD2A76790BBB18E9A73A3AC40F568486FA6166D0F4316983578CC35025
1B4474B677CEB6C24FF21DFCA35AA12FDE3B3BF5254E59C0E8B82075C60AAA5D
9192A3376F58135BCFA5DE0696385BB0FFB6345B7A9487CB340420EAD844C7E3
36A2E47224D29972E84783EE7CA052A6E26D52BEC23C21EC0C0FDE2375719E96
286B9002FC7A5CF34A17BA8BB89EC9287B3729137F167238C1242BE6E5420E0D
145E3C82485AB07E93D34E70BE5C1D19DF7E2DFEDB8F10BE06FED538273CD290
74D82A4BD1B7A6B429489275571F6B7615B13EFC3101D7CDEF3AEF62363F66C0
DDD904FAF6AB01A82A5E230905B368214DA264B73136F9AF34390319F6A543D5
D4D7FDDDF01C43BA52601C71E2428CAFD2D2017A07E7DB640FE0D428DF536C92
2E5D54C8528E8A4BEB8FAB9005788A5B03630631EC013F696F06BBA6E69C74E3
51C19D61778A0DD377A4F1EDCD09993D20C046089A98EA5B70E06CE96ABB6CF7
1BA6A38E10F51F646E6A282516B7800BA8ECBCA6CBF8132E8C92B729F0F68C6E
E117A1C4940A7282F9550E43B64454A8FDE2E58925A0C9440DC034DAD9C19483
F134983ACB1A35E9C925F08060154641171E00413EDF545259BE9799BD387E88
D61748DE25B2081C4DE68F185A3627402DFDC0890A4296F3E9B0D405E9DEBF3A
7D8DF5390137495FA80D6E1F61199322E0D926876A97AA990832C147716CA5CA
C05D4506ABF94C6914A674BE9B03DC078CDF0EDB3A2C7866C977678C571CCC9F
FFBCC6B70B51DB939ACC309471B28923719B58815CB1180BDFD2F8698126B898
1506427FEF687CC83EC1A2691FDD8C3E96C83D3FB66F981FF9642CBE065FC6CB
FFCAE54065F573AE47CF016E3B3AD1A5C090108D4964C7FD5E57B0DE426452EA
DF75C77F1B4078C0B0B09675FE9EC168A2936543B901F6B601D390E2DC1104F9
1B54A06D57CA518FB5D93D59072ABA18C0FDBF3675ABF732FB41F87A67EB9988
DD862CFDC0F7B123089A4524CC7CB3DA0D395F8A525AD0C3C9ADC104BF7E6BBD
9691E64833B16F5BD1F00E24DFBEF21AE3C1183FCABB2F4E65F5271B585DF4F9
1B8E543AD35710EFCF4C5C6CBCEBDA84D4AEEA1D1136DC40FE6D22505EC7C1DE
B88CA5BE13F85373A8733D3368B1FA86240692633B1D061E66558B3A7AFBA72B
4646D82A512927C51CEE40731A21B81A7AC291413C501F3E3CCF00130673D6B4
E81751ADA6184B2FA4640F53BC25EDC8F2D11C5BC1C5A5A08B942528B4FDF9E4
2A5F6F8968C35F2ADFD9D42E2637E8918867F04D4049A6FC4CD8E8F18D9C1C1A
DD745B02A7610D7B4DFE27B6F1ED0001DA89286C3BC2D58E281A672CE9703F8A
049F057F1478741A8B79148259FA2E81EE1DD221D487447AB5ABCC705AFA4EDD
38DB5710EBFE0078093EA47D0DA522E23F0EE60900D14EF927A2F0C3A8BE6E4C
BC44070FC79D8363456974971985326ABB5BF707F31ECFC84E6CB5186BA1D019
4B1817A5D4B8DDD32EFB45B567DE081A7A9EAD38365AF6FD13BBFCF23842A49D
B132CDE66F20BAEC065D8FA56E63115F1A4B4CED1CC44BB69DD41DE505CB7C40
70B90E0346E0F7873BA3F30DE02C2F5F77E8E58AF5B59BEA7F2D7BA5CD8A91C0
1AE80B672831C286C900A838A9C616CE73F6320E7FBCE9F21123F70792CF315B
AC0549A27B1BD42213757E16CEFFB075813DF7B7BA6C61DC1C7EDC7909357DFB
4C6FB6446FD6AE83EA4BACEEF0296008746F7366B3855C49CB8396EE7E475F29
A5573A63D3F13A33FE49FED460A102B225FF51C3CAD527A8B834B7E13562E68C
1D259FCACD70F0CCF12E488A3F223BC20E8F138B43CFEB4C301E5596CCFA7519
DBB19F45963D0FA6AB0D63050DAFEF2B2B970EA384CB6EA25D04E767A0017A6A
A6EAEFDC44DBC7C26C6ED12FF6750E6A32F609619FCA686B5792D720974ED924
9ECE9FE8FCC56A502843FB340911E7F047483587D80D9983E48F8F6644FD998F
912458C1965BF8BED4AA857E62B7BD008DCC0C257A14FC94635268A1523DEEF3
4174068A3C7B75E44C132F3D305D4132793CDF8DB01750F4DFB79975EAD0E6EF
953B62659842A7B90F8B2165401C7010E0B69DC1F1BF860B82252D028837EDD8
04BD0B761B8ED1E718488E90CF22A28B895148E53F8ACE7CDA3877D7DAEFFD70
61ACDBFF1C13FB67A3B5FB0BD500E9EBBB7881F729289A6B99EB86B8BF729B4B
7467486C673EFC9F867CFA5CF9D777F5A92C8149B0FA58B4F6101E49A6D4B822
4C70EFD210C6CC217C65F52CE2AA64F93425A12D3F99FA56EE1954E582C59264
192CC13EA5A623CAAD1FA80328613AA15E2F565387D8D2176685B1A58609AEC9
0E71132EAED845678C956D013FB0402EF2F6C3B06EEAFF00FE2603A3E69A2B8D
C8849E90F329A9EF4B08231102E217DCC2F55936442C20E14598F0BFA3B6C201
1B842784111022A7EE67127944EB80DC56FA968672331BE4268D2ABD64635C9A
35B41B4B6200D8F97BB703231B4C20F5355925796ADCAB88BB92D576D161A36D
8873877CF1862E8A8069398B9E18F720457A4AB35C68C07865063A2AFC57C08D
8DF0763049644039D1D3CBB0C7646DD33D9E3568F7DCEFD853133786151FD06B
447323A98E0481DB2B80339379EF9ECC22B5D7B4E8E9A11D95EFC71B5A6C6EF7
F635BCBFA39E4CBD884D4994A7EC9407F5280FE5690CC6E9B42AA3FBFBE9BB81
6B42EDF445E9984AD71187BE7FCCE14A8A162BD9BB26137253BA8B581941E759
A7CA791561065826D34C38C598D8626BFED7CB672F132E065C4400616D034B3F
80AD2AD5D4E1DAE678029CC028DB4A9AEB3513EB6E72F1C7FCFA2AC432ED5755
11FDBE6AFA0AE6E8B46D051CFDD0CEBF4B0C057E5CB0FEDD062F3BA879A81A1C
6ABCB45E5A9848A2485EC84D12EF0332857EB24FFA1EAC827EDBDDA678126D3A
A061FB3614B789A10D07F8BF51124D286E04C5E4AF642A7BE205003048B7DD7D
2667C50A07390FD01FC6CE69EEDE25A0C58C9A0637B2405D8C11BEACC5DCE371
CE0F825A65B22E682D85995A7F6572497A6859BB8B46B5B7ADD7CC5E36F02C2E
635959DF14405AD0EF2B7E4FB2E203561018F0CE719D211FB6DE616809BB7CEB
A64388EDBAAF5A3E1C9CB0A84EE00F29406853D8A5D64194339EB99785EEB018
84A059EC562808CB0D98FC87B893D2B604D77A609B503D76AAE210DE5DE94DEB
D07C12F50A5E7B73647BFF7067ECE8079853BC21C88A8E8AD88833808160A84F
3F9F2B9FDB75D887C411A4C185B878B8003E1782E9A3484F8CFA10E320FC6896
E2F408B840D4FB9786E782B22828C8524F72B574E18981FD2B469D303AD1CEB6
594C64FFB9D2BE219AD8063ED4C879861B97A9FF87F80D8F8693422AEC39EBEF
8C5F3A75B96D98C17AC253906BA2ACDC4480B4FAB486FE7BC2E431EE3F6186F8
57B2FB2F403BEDAD915A78A8B27BD2869D59778999DAD55652CF8B3D7B5E4960
9B14C8D1F96356661F43F7ECB1CF1480CDFA74AAC7D85B8B79F8673150E70C9B
B7F30A18D69C466498E983CC2A1CC2C5D6ADB354B0D2F8C6C5D809F919A8D241
6FBE294FADE1BBF4EDFAC6E27801964CDFFFCBA64197A944F4BBB849BA89F2AE
5877339D1F2ACE6E53FF0238A3F70F7F30D3717A2301CA0EF153FA9D4AC7A752
DC2042AAF25F7B190EF15AEA7A75F7C114E62D234EA9940C03979549C7FCEE1F
220DEF7CD6F56354DFE69300CAC599A0ED00F273E0DD044A7DF055D633040BF5
853FEC07380D6677A1F2676225A2299BC2E64FAD2F51D2218C7B58C4D44A4F16
0CEEE87C7D50FB4DDC3D4E3242D9A1707C44CCFC66887FF3C563185662EEE213
EC8671211D8FB099DBED532F88CA8C433284613A150BED73EE7BF304F22061A8
89240B2E196C3450BBDA9D018F6210E7B84A9A86257D9BA441C82B2E70BE926C
CD72052D4F839593993854C9EA86DA22AB40A3B3886A6C0542C01CAC6771C9CC
0DC5B4F3268A8831F3391A7B2A17E1A8397AD347B3B9C2D22EC26F9B2761469B
0EDEE8BA22F029985BB39F3C140BD64AB6CDC615EF85C7747CFD61EFD84E2E47
70D5D669EF4E794EF6D6320109A4205CFD1917BB1DA0F8B6269854BB3F271F2D
D86AAD6EBD2BC01221F7E6EC01E5C03C65A92958D22B63F541A5C8997C5A7CF6
7894AEB8A07828702857EDDDC1030D19928F2E260434DC9F948AFB0F2BABD939
22C7DB78C54E81C2E4C11086C352061361B82E1B0B2F7D7107A377EF76DF1F1D
6A1122AAC2D60DB2D69ABA96673E399338B988234E9E9616EA3F408B120CCE1C
66F5489890731D895BC4215406A8774EAF1C3298FA99C53536EDED25435CB78E
F0F4A8EA3EE98155E7EF2DC1C36937123329824946320837A6F8F725A324680F
AE5B3A0649BB26ECFCA2F44C620BFDB72B7CAEE3BAB42C1B0A34361A1DDB2358
5CB941530493AA3DE40E39F00BA99FBF0F58790DB69856591230B56C932A351A
6715C3AAB9D7A991233488B2D41B812A11DD56294C23BCA2096671FFEE9B7C4B
058BE8B5CF61805BB68B0EE0491BB50ED4D6D27399B516B372D050288238FE02
014DB631F105D77CDF18A2EDA5801DE620C8987AF18863851AD5896ACA01B298
9993D432EE93A75860E50AFCA2969295B73342C6E3CCC0C03A5394F51C5FC6AC
8DAF2569280A39586639D8E1C418E04748B104D2FD8D532B8B49DB25D939C03B
73F2C64250E5EC798A612BE0066DAF6D9A2F9F96D45D538AFC13852FC7AF1DA7
94D7CC6D0EBC1A68E87568A844EEA08E4B273A00CB5D81CF1969A3025B2EAAEA
5F3111D898979125D2AC348ECA164932910F2D7B6D9575F45562C3A9DE6D4EBF
59482D7A75A2AB4FEEEA5A8D3E4AA152E5C338ABBB26B25B523D819458B2A6B8
B8195337FCA53EE1174424C26B9F11A2703A38BB806B7D1146CDD7B5AF2FE2AF
7C8824D328722CBFF0B3177C55E3ED89E370A620C414D729AB077D7C9A5AB996
CD51D02FA1999CB88EA646C764BD2088A3EF070BA1A40E38B7DC25D78E2AA6DE
2D8C18BDF9A390CB237716B7CE4F1ACA9704215BC52783310E19AFBAB852B9F8
BA0648FAD40756621200E43834B0CCA28532BB1E7A62ACCF5225E537266DF9E2
729F08033A0EB87FE3614BAB83A31D61AE3D35108D69FEF91E13323FAE6EAAC2
E152A7D0166D610667E7F03C4E9687200096F3A8D3218DFC6E3011B666F41489
91C353852B4CD283018EB513BD27F16F7394088DC50A1C1FC14A0F8E5003D470
3A071EE02788533E687A6A893A3EF3E520891FC807DDC7F0A0255BE83098F89F
F38B30D840A9079480F30EB64479F4DD5DDCC240976600A90CEEC68D8D104003
6F2E0E500960B6B0F795CC6D377F09A17FB2C3F45B2E98C37EC1F2700FDD9830
B8CDC1E183BBCFBB2C11CDEDF020EE0465C7C804F18BBC35AFB2BDE1E5431BEC
51670EF8463D39464C561AC3E73728A55039E4A7EA63CDDCB2C2AA2FD42A404A
A89CC62667BD404A07E1BA0B051AD3EE2DEB7C60B2246755E05EBD8614AB2FA8
97E8227A0BD7526BC82F5FE95A37D9CEF904EDEC7EBFB0E60995CF6457CF0F5B
9BDD4F132248742876953526D119551A8B29CCFE9B215C6C0736E62CD1CEB660
425F040200EDAE2413F872350CCAF584B0D4AFB602504C560DC590052EAC34F2
A8BF3BD212B4FCA7DAF88EE055B2CD2711EC377DF941210821821321C287925B
F53DB2C28B55AAF8797624292F1936B61B3AEDB1755A0341E20E4D894D2DD809
9F6BAA098330D2B8FDB828986367E2C4F0243B2FEC24DAF9FF71C07BB9536B90
A66DA0A76FE2087A021FF5FC2287839B9AC4C278C920263221254213129D577B
D8E0D6A70D2757D27F511B1F01835DCA3FA88A475ED04DCCE94CB26DEFD3EAC8
96C9E50A85C1E620574519E6223753B1688648651B73836E6207CAABEE74A730
6B6D86834FA1122368951732CF296B055401F24F7AFAA256602451495B1D0E03
5131BE0254292465D2A6D2D7F72A09204AED2F450DF9CB772EE2FF1E31D915C6
626F6E421543DC775216F6C88EE84941135314135CD8FFA407D97F4E938B90E7
D253850158CF3C78E858E34B8CFFDC7A128BEC0943533D435AD8B5690C5BCA6D
17B9E51F0E0BF50829783E951AD84E223D306718D250574E4602EC0964E1E28A
F7899DB0FF0C7BDC027A34721EBF9414261E4D0239A81A09D0E20938B639750F
F981F5C988527B2ED63600DD8BDF0382EF7A3A825B7D209A246DA1A2601635E7
396187A1D8AE67DA3476CCE84832BDA1B6BB5244DF4DCD65A9BEA3159AB21F7F
54782429A21E2A2F56135F3E65C5C7B907F5302D64572C8709576A00DD7D21F5
5668D3CB95085331645A26941640D432741550BB1ECCBCE1DB2038AB8253A929
44C7B55132368C59D38A131FF60ABF3508B5F922BF35F516BC0017A335EA2FC6
EA05A38CB74AC6F706CDA66397DF518F38210F937364D4E8CCF67B16F3873D53
375C2FA8CAC29961174199A9A351E21CAF8B070DFC8A0CC86B96A477A1EFB9FE
CBE0FC1F54370142F752DC3C3774BDC42CB63AAD25E7467D5EF2DB788DABE303
F21C10B6F8E9D1D9C9580B3E2E7736DB466EAC17E200523B2AECD6C05A0A8366
D4EBC86C1B23C385BE62E6ECDE3EE487E2E4CCA729FF94C41CF4DCF4ADD4D4FA
DEA06F18A44A7E7BF02FCD2F52D4A3FE36899106225ACDC6D829F002A20624B2
659A7011A96139284C67FCDE1FDE7BD992B553D6C03FC527E6CBAD6866202364
0B72AEAE6F6AC63735C6F441714A621147FA175C40D18B584F94901A92EB8EBF
868F9E2A02B126FC41C0B763C0D76B04E985DDCD67CD3D69CC502181BF5E2CA8
45E64FA4E68B8BD309CCBD572E8A1840B609A0522D5180F673BF3CE7FD4790B2
4F5C442017DEAFC7C75C2E346BC8B5B24AC7B2A394FCFF0A4B0D124BBBC1D8F5
6D5C41063DBBDD97E22194A490DCFBAF39159FB3A63B24AA15B2D0DDAE221CBB
E91BC55A81CC89FDE91EA283543BFC3DB67EB912859424AF93DB66C9EE07FCAD
6181F82F434ED89861D2C4C8834BE9EC41F48EE50AF6797489236880A9C97EC8
717EA1205C78C5192B323E14154DD5FB270ED0FB372D38B92F3E77B55CE291AC
B8321BE53A2C7D274FD78CB653E4C9A19210AEA6313E62E70EC9BEF8C4560936
BD24644F92E34598BDF81AA6149CCC4D10631860355D4519338D55900657F018
FF22777C4F90DF9E07904429A290B155089411961AE9ACBB6AC758ED6CD97A1A
0B6A986C370436F7384D91AB9C378CB35E4A3F4198B11BCEE80ED05E563CB068
A83EFE2B92D780A0F0A8728E12992581B18B193606E969E3AB8707EF5469EF66
FE452EEBFAD71A010B163D31E206ADF9FF0339F6F544A5A973EF1D51CCA5B046
85DC82E048C2F5D34968D0D2CA60B2E3AD1888AF21414ABB328D5583D69A74C5
1A611A4A52206CECC8759007B43C8EC99E6FE3FB13AB6FB9F66BECF95B625F9B
E81991FE13B2BB7E47EA7CF33DB12B22A894F8745D10026BD5D9037C7C26CD0F
254CD8A11ED7F0792504F71D4D972D25130A297ADC58021CB7125122FE4FB7A5
27E4D8826AE579243A34C55D089842234F5FFD7E760F3355D82E63E689375A3E
C32CCF8E13C61A47983CB3AD7CA3C11B9D51BDC4518E3496A6A6775A5B48A9AB
9D8131EE806BB095F23F2DE059EC4B154FAC3E5220AE476B753586C697B414EF
D4874CFF62A84963541C5CDEAC4C90FCAD1A887E071087DECD4DB7E551DF703F
4C3AA5165F1DFA12AE5B99CA89CE76DF92F2B1FCB715ED224DFED7A30C3CEE43
4832D290AAAFB6CA80087E80E5BE26B3297B75E73D446B752513918E6AFF3A56
AE8E6CCBA2E2D4AE26385ABF6CC82A01F18E577035FF3494627899EB8C40288B
69A9E79012C9C5064D6804B4B23D63052EDDE58958E4928D006C5017706C1C0C
E6A08C809DC380D136B87307C25B821828F53A261608FFD5E0791D307C30CAFC
E21C74ED943A4EED0C1B3BD32479CB4C18E7AC5BFCFC0EC8839CD9931CAE4CF7
FB4DB60AF26BEEDF5116533BAE1B750318362BF85D9A4FED0550257AABDBDF5B
7963E6EC917BC6FE271EE6C23FBF532ADEE5E843D02B4D2B19D6477314944427
FC7FC91F7BCA627E3C09A4FCE9C00A5845D1C7E8F51710B4F1A4DBD8E6BF474E
844E1D39319341D0F40B15EFC6B8101C4762D9EB21D10A9FC1F5DAE96E1A7A9C
6023DE05228EC140AFB6FC7F08A3B2A7A02BC29585F87992AFD400D2F662E02C
62F11AA195D9F12E03463930D05A3D71E1E9830AC1A08E078F120A45FDE2CCCD
226811D375A23B26115CFA88FA061E25535DD496AC6209BFD509FCA450316BAB
C9EF876141EC370CF1CD500A1B059910461D7771F9EBB20D5CE02C2ABEC6939B
E85DA16E068E90D44A382051D9AEE3163EA182B1A9FF96436FB7EF2AF26C1EC9
944DE6ED8322F5ED95EC298B4C5C98084482AF5B3FF61C5C663B53887859EE1A
6743BADE9309A7CC4247CB082ED09958E703F7C6D723B9765172D5C8308B575C
5C1331150CEE1B942E6A555049252B35E9614CD5DE45C491103B6C2D4C14393B
95D12FC9F4D36F563DE7B4D6899726DA27EBEE38443A0995BA6ED0B538A69D34
DBDE36946FBFC4D184CB3471F958F98B5D411933162A43F95E0AD32A8EDB9588
B369B19355EFD0EDD9F854F991AD1F056CEC4952227A4ED3148AA8F2010F195C
21494D8801BAACAFA7B2EB6C0DAAD46801979BF4D84695BBA1DA14E2A8D7197B
0F7D204DE6A601E8C160B0436E964F844D1A9F70EE29B069A97BDE7AF2209A9F
760CD056A1C164285284FEBC79674BCFA2ADED44359A90D3B85F2113AB4829EF
58D62DF6C4CD5658D8DEE558D56E102CC9AAA4DF396A0028B3296D6D205C9FC9
334E576A2D62FF05126AD35D6E279AC28C0D0C7793A814E31E8AC5DA8ABA6EC0
CDF8BC632580A94486EE59CDAC22BC3DB056CB159CC422D941EB11C4355EAB54
04515CB26BF9942102F0FE7DB37A713AE355662EB52E6E1D827E3DA29A3A4117
DDEEF5925608991F0682731CB0709761EA7A458EB6620FCBB0D8615F7988B0A4
714E2116D5303C268D66AAB65622B957644BF482F0FAEDF15C09C508953A60B3
66890F040D4E3D86668358E400D58E80E2D81431859A07CC9ABA28EFBF3740EF
26B5AE1CDB26AC44F1338D123E7ECA68729591549C169E6602EF588750FD56C6
24A85CB82ED7446507C41E47B1B478FE28C2CF995DC875B949E8EC26D7BB7252
51FA2C8C10F6B6CF80898FAB4BADFEE9ED0300A234C5E2345AA680CC0213F630
DBB2199A8DC08CAA79ABAE1F635AD4656A8411543FD8B3DB6B7ACB32CA6E48E5
9D20CFE12B66291A897CD411560247B4D041902FE837548CD38BF633D601D421
16F507F3DF64ABFE35F742DA4DD10DC21408FCEA6D747C1997953D2DE0551410
F010F28F9D12E6298288601F1EC2134C63CC7C4BDF7750DEBDC196A23123BB39
9318B4D2A836F88D24D6FE389C2EE21A0A684762116477A4D31E86315F29C010
6A137BEACB4CCE2E2EC8AFB8FDDCA425029BF91E5C3F4E0A583064D662B26992
9C431F13BDA571E3523E5AF4654282EEFDAECC1EFDCC281D68285BA128E09B84
0E807E6F69CE7A41935285DFDCA777CE731DE6B46EE9D1C3D61DB6F81E8C1D85
9D45F35E20C5554B0D72C262A23CCB48B61F5103F057E05D147A27AAA2684BF0
8AE584333C38C4DB1673129711D3BA7C52C08E87AF023C833F2E36C29581D5FA
C1883222A1C90CA4E940136520C8AF7DC481A1881DC8E9A6787E86813FAA0C5F
1ED2BC24B77548F1E1DE94AFCA2AEFD997AD21C556376D21FB706D26251A2FC2
C51C1DF9A1CAD2BC6E812806D30B4821F1AE91968901302A2A620C0CBAE61187
AFEEF92DD067A829037378105A9A40989702C24743165E8D9C6742F8C8EFD88C
652D83F5D695E4362C94BEEC61975F46F707903DE9AA3B891D87E2282E90AA4D
17AF4E7960EA48349668E671C1EEDFBFDE9B94904AC8D0CC07D307DDBF52E27B
75787AE81EA98B34D8DAEBFF72FAFDE14EE8DC4F4D6AA70536BD8E66FEAAA8CE
3F83594D7682D1A0AE125DF60CFF05C7454B82F991CDACAC0BF08DC6E569A1AF
7B997F729BF4AD17B31B763ACAF1BBE50BB5EA5023F9575996CCECA18EB8DFD2
792E735FBE9E07011011FA8E864870DC3214F8B293A3F5E97876C90A6093CCBB
7FA7E182F153A378F4DDAAB040B0A3FDDE1DA1C862C9BDC3A2B152842BF8FE45
2359337CE3F21E030748189C553B9F62C83765B0149330CE5253460D7E1A708B
7D0EFB2B5FF55F9E4571C466AF18356A3BD998F3C5BDA4BB16589BF177A23816
8FD3279CF698A01BE3922F1CB7DE5576AF240E5E90DE41FEBA477AFC19FD124F
D7CD9341AB55C7294195B48964E2F4ABC2DF2F0C46763A0BE692D47598441E70
11C41A69566B2273532A31D12091AF98A3614A80845BC772803943E9D389E2EE
AFEC10ECA86DBCD675244FA279980B91B1C4279F53DAC31AF82047C67E367D23
76B73CE5E992441F4054E17904D85DF0A7D9E501B59E4B817D6632F17765DED0
4059D79CEF1D6C55B3F1ED51C694C79F3FF3AC9F5D23027374A41C9AE494AA74
D5DA4F158E624C2437B29B67368D0593ED7C9E2AB4B0184BC89A05CD2D29851B
1CC40E45B6AC7F41EEDA416B03695A7A04D5A51CB2A5FC1C795331BAB84A96C2
D9BC54BCD6B5E5E5CF0414961C9189B1C81A964BB3BA1C8BDA87257B8B807B76
D60A3602B4027EC3DBD1DC14BC65B0BE5D6F6B03CB1DB9B726B029845A7F8722
590B974217226AF8EEB0DD871FE9187F3C37EB7A043E36E6AB18044769623667
C89B05A4BBA29DF222ADED151D6624378D9C444A193D5360D242A1F86D736602
AF9D374A8D11CB5F883B5FD6AE51F1C05B62B0E0C454C8C57735031B7A58D1CC
858BC7B4D4D9D5C48F6D4440488AE7C9B57B85DE61CE78FD29960EC53271DC8F
4229E8154DD6BDAB1DF5CCFACB550AD74EF885E858B3FCA768B1748F63604885
E6E3173C865CAD0113B85E9EEE582D062693DF8E223CDD15B8B185AA9776447A
C2A59B07C199F94E3D08301AF343C837324B9EA150AD8846A82AF91F44923F25
BAC6773C8AD0A810775FA41342B18710F6776C75FD20EA19F0AD47C282AD75E0
D86AE09073B38E8EC302C923C417F577823C021046223398CD8C00CB1EECA4A9
775F3C22FB155F49E51BD3DA080D054E270CF0A4D50427E9EC784D5503D49177
D0416ECA7DAB105648B5B8257B3BB949425148356E3897D19B76964FC0BB99F4
899FA771548CC09716E40CC682C97F0720E46FF64199038C006B74DD8D060CE5
FE0B0EAE30BA44515DD6C338BF9ADD21A60C14BF696A8E3E16990F21F9AFC842
AEA5FAB6694A644301F93060BCB71586FE8E30F08C319C565C46B2EDFCD61D32
917CA0BDA0A0D874A8853DF2A40A769FEC0B2957CB0E0AE908826A589494B337
511A142136A1277E259660759953B83813C9BC6E520D66D57A44EAA483BD45C6
5FDB06F40DD6FF7D44BD3A28C78CB20E96570097176033A7A3ABA468FA39B091
030EEF66C5F23DD00C6C48AEF676230A41BA29DF7C0BDCB7FB78D744C9ABFCD0
95A12C405F561BD9FBC456D92BB3C4A3080D59978771BE5DF3C4242665543312
31D8E040446B78E89DD66F9EEEF258E53D698E3F2B7FA847CBA888DE894EE7FD
9B7283AF109382E0FFBA9018C10AA639BB37343980D51CDD3524F0B146BB99BA
B1D6B99ACAC549686F7A74D985BEC536E96633BEA4CBC1B060F568D98E969FB1
F684291242494E52311C02C8A34C0A59534B40A96499663C88B604B2A8F94770
0A630BFD6A547ED4E4455805FD5CCE647F990EC29436C60A8C9DCE56EDBA3AB1
B045CF5A585471FD2528CB9881A8D662574A079DA59A3C9C1BD16EB61FA074B8
752FA9D61F2EF7190EE3FB530E12EF9AAA10A7D19BDC08F635A6259AE5BB4388
06BBCA66322FD2062E1691B9BF3AD43C472CC04388E4D075E348A8169D782F34
16E6E89E8B884C3DA9CD7CD7FF491FF07CBB06A3CA7C3F21222AD7E0721D9B2C
C023830BB9DC0BB659B2598C8A3062BB4D58D6E0EF22EEE2A3E98DC5905A6024
BD32080C6820D226FD2E307FAC6FF1F7496EE06E13A4A48A427593EC233DD921
821B465F781979FA6052D13EF990CE4B44FE06F0B093B14CDD27B30ABCC69AD3
50543C7F57523AD46B2A36DE2F8BF9E6C38CFFC54B84B977A8CDB82BDDAED096
91A6FCD3FEAEA3C0D6D1559DE16723BFEE1B4FBA65ABFF7C516F5C38DE21E5EF
D3BEC41F18FB8C6D2B457E60950E1CEE71C173E04D6009F314570BD06FCD6558
27CC511B0EE9FF325FD6870F268F04A18665F01C9A647943E6B1F15FF743205B
0D48FB75CD72BAD117EFCE8ADF16A6EE79233938FD4EFA1E1EA8D93C4F30EA09
7BC050F20460D409148D672DE25916753BC8C799498EA80CB2062F319454FE3B
843CF8D3D3E9172BDB50096C934921208A8E3BB6AE1594BC7BD5C0274440824A
95B61CA0427E6CFCBC313D2C918028CD5BDDF48851E1F958530DA41C2A680473
0DDB877693E6DE5304D99F1DD333991B18E0EDDA17258033D1239F0F41E86F2D
4EEB998520A57985CEEF4463E822D46B75173C5D37047E511DC980EBD803E01C
35504AEDC0D1569BE951DF9250770DB3C4996836EB36CCA89B5766DD82D1A1D2
97D1973E6125FF805E17D38C76F5B5F4E1889C23B903B1D4A9906F3EAC5DE29F
F4E6F14E82E48D99CE058CA4994F6AD3FD93A2EBD338C28CDCBBA518D44EE2C8
44A0E1323D2B6F0AC89ED75A8D8990BEC3B8A82E3C709E9102C9FC4C68FCDF69
49852B16E2BA582AA91C6CD3EBCE191B0F1897F45E676D2D16E9493A2A84640D
4DE107CCC21DCE943E8B785DF3D782CC5EA81E3FC7E4FB1687A50867043566AC
7938C812D690765D25A71935D99C0F144261391B4EDE0BCE9B255D18B359DCC8
23F2BB04A721B6B0C7DBE1AA6B43B597550002B276890668831EA52EC0C2C447
1627FB5F2D03BDF8726BCF0D7386DAD3BBAA7BCC1FC72BF1E02379BE1B8F3D3B
A6E3343CD68D78DB2A5DFBF469C3D02FFFD3B21DFE7CBFF50C6B336804C9D88F
0EEB0C993216CD336AECEC76C697A4743894CE9B9F43EEFD1FCCF91E1D1863AC
A97BB3D42E08B35157F11930C8756A84FD681880B3CE799AE93C347F3778C719
DC5993EE914DDAC7360F9F7F3BD276EDE033C4CB22B633B70F38D563819330DD
52912F3D1421D6A3034BAFB367CE721AA7121C80D154E0955DF11C424B089393
FCA362BC59A995FE5430B39CB5EC916B74AD53760111E8BF0C3E924CBF638E84
08512612AA22A7129D2A8D8D6FF5273CF5918C94145DA241CCB8D8A6B3CE4DA6
3EBA7B5562B9EE7E3C2D1F57D0AB9AEAA6C3C33ADEBB543EA93D2D21D077C840
3C820715EE2C13567B53E2CD413C8FE45D47E1D403E1924A2D891A613EC28D85
BB53EE049127BE32A77F724C1D30F16F22F02E93FD5945B9A0630C727D975C34
1169124D80763A099DE53DE169C38D7F295E8158D68F71F943AE26A9331B63B1
78709E55EDCFAFBB55CEEFF1CA96F549488CD58457081F0EF2F1B5A882CD357E
E2E010146CB30E8A703DCFD1BFDEBCC3A12114CC920D6060DB63D12E3D4D09F5
3229A3A1A11491A2B9C1C4DD2D5EAE1D7948E41870B7F934387FDE0B8736AC99
C312BCE1CB7C2B019727EB1A8750DF7E7961AC02510F5B6EE04E45B561EC2D03
1209B70BA56CBBC8F894B06AB69A867B1C0322F5A1BC4760F8B9A15A195A0ECD
0A33E8B690321E1A1C9F60C2F677D3E2B31056F217B2BB9C6F38617CBEE762A0
483FA8F72733B7F3B44F48E78519E114A8BDC93D400BA0AF872AF2B85E7C1C3E
750A52C070289822BB0302803C07EC9B4A0988E4AAE449964323B79BADE117A3
CE6E4D56E92AA7E3D696B97D6C8D1A7E9F4CB2CE88828898D39A0242177CA5CA
EA90D1B9CC6D71FF2EED18FB9848C1044AD7651D44FE76DBF369706318E0C382
15CE324C58FBD1CA0C650C18287C6E4392ACEE9A1C8FB7FD9391AE5BEF516B3A
2F5A8284AA2FA9187C32D91D47628C167CFF313F26FF8FC14D0B094AECF59054
765816492E0F0DCBE99461753A09617854264999009C8D902ACD8AEF15B9CB7A
AA479AEED2F233B51BF3D9A2A91F226AF6C1A70EFA5C843FF3AEFF7F1C8FF0EC
EE676A74DD81E8ECDBBAF59F5AD6E6F5099188C960BEAF4EA0DE6D14E5BB4E34
51B47FCD3CF4D6FD4E82963AFC96381EC5710AA5F7FB5B7D816B4D3AB9A46B3F
7CCB4FE28664CF266096682A66E04BBDAC1D41C639AF02693C47AE25D84D5E7C
7227C76F79C4261DAC82AE92065F2FA5D01E011E5A65818FB42A05FB7803D0BB
26FEDC511F8B1C899CFC2EB8EC45E5F326A3FE4769199872A70259B3748E345E
4E0E741BE7D06F9A19E6CEE31A42BDE92C5EE2C6F3DC10DC23951B2B4E17343E
1672ED9F3BB0C965174AB6C2122CCFCF91252227836371FF838122FBB9F734AC
514A3B200ED1151418051744E40FB9CCB3F6A868E8DDB392685584B5BD6E725A
AA020FDB13D5F363C0808F380E1C2536BBEF275A43D50E35DA75FA891764500D
B2B7D7775E395BA4BAF7F82F0850D4EC408D5FDE9D12B21E74A216ECAAB6DAE2
D8907671248569054F43AFB4064E369FC591D4739533513C202E9DA91CDD1580
22F6638AA4BCFB0B711A771548C11BFCD146DFF1E58B742BDE56381BA275FE59
87D36507BC80085920AB9C349BEF1B3DC5D54F473D67AA4E0B001530F5C1B8AE
F5E76FC7D434F1987943914B3CBB793D68E5483364DFD62A37603F7FA4217D85
3967AF5E3659D9628533AE56E652304A79ECA8315278B0B4D113A3DE9EC13B44
9FCBD7D49DE9EB45541CB32FF7D147CB85CD34424CE13529BC026086C887F24F
66C3477F7D2EE671BF0079442052A2BCC14DC891E283ED970B130C0A04502D83
2AE53000DBB0084C37B2C25CCF3AF3E0E78A42FA0F970C9B27AD62378F817447
5F36FA1D9905A3E169A1A02B17E1E5A321FEB68C2455316E16C3790BA72034D7
BE9025BE2E1D1324701734E4878F915CF508B9C1DF08AEB3B2888C65AE24837E
5D4EABB2794D20E516EFD47AAF5F4FC227188F0F2C8BAA066F41264F0AC879A6
7E1B0B621CD8572B3C6090C1C54E890380CEA0B0E0CD8A82DA2BA32CF7B87A39
F4F6834D1BBB4D7213FED3D871DA6939897330245586037BA69DEF4F35816A39
E65B1528AE7D952D4A4FBBF278FBE5E0F97FC9B58B6A605314F854A16AC3011D
A8D4E63E86B6EF38C81511BA8FF4887F3EE4357A42157521416E4491CBF50E1A
AB4DB1875D107D8180396BA6046ABB4101A8834048C2F40563527AC4DB5221EE
F1861889840C01EE2009B8B1BB2CBC48AC2F425E8150E0A2C21124BB4D72186A
BF14A12B8ABA67E37090F3A56D06FBC4FF4D2B34FAF8CB61DD5E0BF54F2B8E1C
7EA1FEE81E08624FD2673B132906D4F88BF12A3445794FC9DB3F1BB114F86EB9
4EA3488AAF0485C522EAD0C70B3F4F4AD1CC4C71B83263E029803A86F69EE90B
348CAAE31F589B3D213DC74828CFBEEECA79F4D0CFB5F9C44E2C537CC0AF4C48
C199E97ECBAAC0D4990CC5130EC9F6DE383C674C24816DAE80E8BF3C8CF15E5D
C2EE5CD4FC85CEC5A85A6059067CD3D854870F2B0861CBE8A9827B3F9E9EF0F1
99A134E2C5354C3BC8109064F1B79385F1F09F222B545B1E00A91B333A3387DB
5308191FFB83BF0B26924A08FC2F4C014C1CAA3B2654AFC64543D4BC320843A4
BF30E82A78D0E0A49CBEFDB477010C1E685F759A9F3F1B4B2CC627C779A0E21A
28AA512D7C3AF72212F5C8D808B0DF69DBFBBEB6A871A1A607BEB053E9730D8A
FD3BE9587B6CC8BDBB8D38BDFE253B7304F3254E39EC3544A105388227EB3114
4E2AC7B506403215A33E829F94FEAF92DCF193A0DC0E0A7B0B3A647E93E5B3AF
BDD4A5E6D0CFF8FF2000E67AA8C8A80C71C13F9E6EB178DE312651A33BEC1D91
D932FEA8A790C218DD6FCF27146068283022C6E7EC57CC51E6331FBA563C58BD
5415A8E780A5F9993D2DEC74FD1F4669F2E3EA3B6454DE0DD827621354EAE9A2
70823267DCAF70D85D56D17D89DCCBAB746A792584F36B0027977D6B37B2827E
64FF0CA96215EF69294C55C2F8798C93FA35EBF0D886D408414EE0911879279D
18E71D6D890713607A2CBFCD0FA478F8BDB88CBBADA1E05651603BC1DA665B80
9EF162CCFD992CFDA187EF76FCE9115EEDBE11EBC206A88DF495CD0162C13EE5
5B169EDD035E877362B829B9EECA79F4D0CFB5F9C44E2C537CC0AF4C48C199E9
7147623EEA6B165B1476641279723F476C0235F3CD2DCA6EAAE244522A8DB0D0
565F05E22849E02D2EC43FB3AAE6D145E41BB95A1878BC7DB282614030F1AC9F
7FCDE0DAC8BAEC14ABA6F06BD839C1571FF4FC6FE4E23313A4C1BDB0088636F0
9EBE614D4BFA8B7DAA0AEB340D42110B7CBF49A8078E398980C7C6DCED448D15
88FD8922A47AD1FA014B2EE5A810D6F9F78F44E6284817A248BC4766A7C2EE44
5D023DFDF9ED71D4E41598D5D59389340D67B1EE847913F8BE77E0273ADEF500
54AA5F2E994BAA7B0FE168C25A5CF385FF18BCF6690415AE872823D8DDFFCCCF
53674D79E92444AE54D5C6FF284FD81E544D200A0A482DD6AD9A27CDF940B9C0
96DBBA4915FBF8489EDF6E2BA9A60B24B85C99A5E98B5C458F88AA854D2F15F7
AD81C210EF926255FD030246AC687884A3547DA00438951DD5B225E71394F660
5CBE638D9A6B5A0DF28C4D81535BABA44D7FFB36B2867E0B88169A56393222CA
A9B96151B2B885B29E107C77DBDBFEE4FA9528484AFEF77CB1015C0DFB6419EF
A716E85BEBAB9938F99A2394F2B5338FBCDEE9A3B90A08B89BA75466127AC574
53F02BECEE027E559CABA01A950A768E59132F627317F0357FEFB6C3EDB00154
5CBA6F90B8E9AB9EFFC5FE4940A35CF347DAD46106F472C651846FA8C1B7B107
E9A8E2C5F2671F9AFF6A1910C5593F7487CB390BE16A46AFABA2125F36423756
0ECA59253BA1D99F332378645EABABA6E2C311EF9941A18712A0C56ABCA7A5BB
248AC2C70EC8293513516F1B7A942B6A1ACEB717E2B2A84B409EFD52CAB7B8E8
75ACAE40009D0682CAF5DB88E408B799859A65C14EEFD8D524D135E550E0E940
4E76C95651ED65838696F1CE02B43E9E2EE79138D5B9FDD4CB833623C6BB639E
1586CB286F2B8A85A231590BDDFF0353B07F96CD711EDD6E73D22E2386B24713
9DC7CB05109E955B803238AA43CE1778BE9BE141910B35D941E9307561A0C137
E1E90A5D8304CE37D3D708FB4C197F972E2941C99FC711D6ACD8185628836608
6F50154919E5C99CF62A7D3A76114FD5A1D0124CDE7CC9189CB1A51F7AA1F2D6
849B9F4A686E5E182D930A2DC3691654340BE93B8E830DD04FFD40B5C0041310
556883CEC750C615EDCBCCDF35B0526FE345B5E929CB01DFC6E4AE406203A42C
91FF465A8A330FEF033234F6BD0B4AED7624A3A6043E519ADF7B91352741C980
265570A42113C83ED727B5BFC009F75F82832B76458887F0FD9D971D2C75AAA2
37EFCFBE06D41A0FD9E3062F4EBC4405EA4B88BB5F97F04924E8C5EC27F84BE8
0DBD34ADAE1D899DD64BC02EB64DB70600403AA432F2B385D51E598AE0216A34
D55E97DD9B83E42006A73E92348FE74AE5B8CED1F61DE6B4F56754BB33192492
20A27CBD23A3057371330B4041566CF5A666F8B6E029C41F9D6B880D6A47AAAC
CA3BBA4F5B31497701943A471E1EEDED7DBAD6C2DC672BF913ED44A41A2D1516
32B857546EEEDA01ED6232B563D7C73423625E5F96461F918A6FF4B2F5618025
D135483CE1533C3F755771B08F839EECED8A0313FA9B32970FA98483E04D117B
E157DB681633223DA18767D32F4CAC355786154241FEE7C6C3DFF0CFEFBABAE4
D26C8148813D932AE218846F0C7434AA0EC40BD86C3336B766C15CF52FF15A2A
A6B04857579FF2953BC0150FB81131292953302DB580277A6D0C4191E363E13E
D94F054D85337DBF752EE368229466AAC0E96CC1F32A0DDC41DC42113C20AF95
A5ADA76EFBB7A2DB243F5256B3655278533A996D06E93E5E866F9707576ABEE2
A655DBF84650A97177D219D565E4025EDB1B34C4769655DEA654A44BDC797778
59EC0F7FAE47F5A0E1765E7B39466409C6FFB54D969D3128BBEA4E5DDE8CA985
C290A2FB598859C15FB8D7EDBF8D085F0893FB5872D98685C84C2B39FBDB748D
DDB1FFE02F8F8D9E46B22933ABF44132DDF189C3ABABC6C1F7324E2498490454
E2D5BC2A92F99FA39442C6DA9B0108974CB9CE432C94FEED1CFDA18F88CC3A4B
791F810925C353716BF81D7054665FCC97B4731B62E3AA84E903E006D659836F
E301D0AC73FA8BD211DFA9D586295D55E47D190540FD5F7598EDB94696FF034D
F25C4E71209E70D33B3BC21C7BB734D124EB03392F7A71507966977DB5E0E71F
5CE88804A5CE1965ADF2EB11899982133125935F1BBB9DAE0BC953676903169A
18C7666E5BFB72B1B4E80979B7487BA2CBC71B0E054C3725D92051DF32417BC1
733464D367A1F558E9CF7C94ECFC0FD2279845BB1691AB7CA0E509F24E72F6F1
ADEFF6694CDA64713E016B943893EB5E045006F32B980DA6BB8A6C098E3D80F5
B5E498E5077D0E0CB527E9E33FDBABEFFF4D44FA4F7B99C96D252D449AFDF559
CE627D14445EFD959A64CAB257949BAB6A824F90563C634A6DFFB6C79232A627
79394C4F9EBA44327497D290B42D7BE4AA79CB072764F0ED17C86CD46B755D82
C4252233FE39D956141A6A997B6E2425E2602289BFBE71AC522BFB5FE998EF12
330728247D81D5579B39BE6CC9E33291E253240863B94AE1678C06D38F301B04
F4663162A9DFE7205A4A3E65EF44F9284F30A42B97492F9E2A04B013756F5D7D
F5FF08E24A7361A8994458A6853461DB41C417652589DBC227D3FE927BDBEABB
799D48CA999B5A92F56F0D8C0B90444C477C53DEE713C563CEB059885C35BBD9
BDB241D9C01B22A4CE7C8C01A492EE46712D8B18F0B719F20C31B083E3A718D0
D606FD8A734E6658E19C2ED235C3EBAF48D27AA5E2AF48EDC377077D35A1C99A
CE5E57E783E1423D4F344C2CEF8B8E0F4231279F829CB2D2C8DCD76E50DF0B99
37FC9417D058BF1883AB34C033B7C365F93E9719ECCC20DB9FD9D95773151E54
10FEB294CDC9385ABAA4CB1C80104C86489B998F409C18389C927C5FE4D1CA0A
398B3A76EA5D71D0EC9574C85537748418C66D0B5532A04602C766F3B98B43A2
E68885742A0C27EB6C6D110DA3AECFC74A26C32A540E5722C188F662040D2E28
F63B17A01C2EE235185F9733FBB051A2D98CAF177E58B5CE5B704B6D2B94EC50
B3F5FBE4429F65B7E1216EDE995418CA9FE2F70AC3A223876F4765813A441931
DA188EE95CDAE3584EC730351FB97A0D9C92DE5D9E0C59E4029CAA26EBEB7D15
0AB7F995FBAECEC33F278E6A49318CC33C5E02579AFC40BD178E461DBC3D12FF
E5F99DC056B554E811D74C57A6919EB3223E6C575652D10E1246F839EDF76397
B53FB556A111CE5D034F9DDC408675378C4222726EEA34B2D5B385E8592F97DA
0CFCF521A0AC2ABDF34DFA53D0B891F3347A53E80181286B7FCE2532C5AFD4F6
ED7A71BFD824D855F77A49B874A303452CD65FC3104B1292A1F88BAF65FE5E13
C4F067A13534491CA7F9691718950D3B2C3BB5292586CC8AB32F205B1A24B0C5
E4770DC4D0311C2BD0C812C766421A140E5F36AB14222C3AFD068EED35C22175
148AC3662D7FE8153AB50B36AD3D97C2239E827CA547E74E6E4EAE191E082ED9
14EC05224832C70A5712BE53636F246102589DEACB338F839BA46305E9A1F7B1
C6196AA5193E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE3B67D0FF6359D1B6C1C6DA4220428777EA791A503CDE266
386B24E0D7FC0C19F54D39D2B9223D466810564615CF6EBF5A75BEC8F6DDDF38
26F6A75F7C9A433ABB0C95B150D21DBB43878E3EF527976A3A2433047A05623D
54F22D062F633C08A3EBDF22FEFA476B92D1B05B8667CF563F5CFD60228D5707
0FA2674ECBFB8D84E1693A5497D4575DEC4114A0B80027DA61B2F65A6CF49F39
F1E6E57FFBF72587943DFDB4C686CCC01181F81BC2BBFEA4157F5041B689A99C
29E6ABD63B6B48CCBB1C0F6EE88AC48623C6BDB8631BD4F9BC82CBEF4EDB5618
9D68FF859DA3900D011AF4DD81B818CAFCED4D49322970597D43C3EEBC3CFF66
567457022E117F575B55CD26E27B115C0BF1EB6D2FECA4E6AA9623B8680B8E7B
360AA4F54FA5BF63F4291E2308C219A6C42E18CF3ABB5959337DF865A61351FF
A3A89AA1CBBAC6E643C18EF4B37D35F3F3590F5BD09CD5AE86
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C071D06D71D60CEEC9FC68AAC0ADD1DD74B262
0156612EB4B21A3F4ABD34403540C124221FB9DA5EC6C7229DA9A1D033AB828E
9D80023B2C8E68FAF7A38C925E0587A1CCE432EBBBA598B201F5AD036BE7C8AD
B8C411BC79646781C4519B89DA648B919EB362176B83298EE2D8B405DC66D81E
C655DFFD1BB283F3C5DEF1495FF97C798C213036AD02BB07FD42EC5932E79727
ACF464295E75CFC635036CF27FFC42DC2919CC167CA4C2E673040B7909AA26E8
123B3D9F176F6510B9526E94D4E38E62F8B9B96E2D2D51BDA2FB7C6992B79CD8
3E40292315B0EFE711C8FCB37968B8AE1BCADE6BD8A3BA1009B34137B90D924F
B2784C9E13F0795427324E80C175BC99140171AA2F40784356690DDB982F55FE
EFFCF946C6DADBC6A907C7DC28850415D9AFC1C8A868801B990CE2D26AE40CB3
4EE0281A60063AA71E48DB8A35E05C2BEA1ED5BEC68717E95B7597AD7CACDA2A
6A4E8808BDF0AFFBA31BE1697149D7BACECF4481DC61CEAB7476A2E00CD8EFF1
37E476FE5A098E607E25ED29F4BF3409309145BD0530C8A76E85F59EB0890ECB
A12DE954F33220ECCE5E9CC4B52E97089790D08FFEEA7D143DCC7C07BB2694CA
6709EE19C11515E6E967043F9162C39D9BEB2767B7B31EA068C594A63173F7F1
67F3D6FE97087D19F73EEE205A47785EF3C453E6F77A08AE9F93F4060DD19EF6
6DA5E780DCCA30F180F8DFB0CEC4602AD1201C63D91450E7B5F44AEF32087A03
0D933A941134E74040E6E7E797E18AF57941DDF7DE2072ADACCD3BF8D4CFF06C
5B946E21D0F5A799CD011CFFE4CF0F571B4377AD4768FBEBDFCF6B49F09839B9
35B1F7AB20DBC872DEDA90B79F113F5A4BE581DB49C5EB8C9033B8050C143424
1EDB333D1DCB862DC543CE420CC26EDF9639E4256570975B25C6C1F06CFDB2FD
9035344017BAA39283C14E3AE66A14DAFFE2CD87485598645C39B92C18AAD014
7814BF27C8FA6DCA0BBA0FFA552B9FFDD54BDD8C7F84484031FFFC0AE8932A64
53D2632D9379F30231361D03BF91F74904C7106B6F8EB6ABBB29858F65E937CD
E31D67C847719779DE0B34CECE88A8F9A12D46B8FCA50DF4433B0B8AED6A63B9
E6512B667AC78A09A780813B1FF02AA967B12AAFAA0AF1B3DA27604A975C2DB6
FC1854457C67C54DC08DB989CA3267B2BE5B8178E6B7889A33771F86276E6DA4
F83033522871198AB3E954EDD88B5059BFBB42AFFC2738CA09B628CC646123FC
9C2BB8B9149CBADE7A7953FB4FBAEB6078B410935DF7D6D5064271899313C4E5
0DA12BF2F08521A17641A2F5541EC8419514939892C0E353FB1785CF9CB67C88
AF752C2A0DAB509A424DDB9649BD8A846E6BD3D374BEB6B9DBD5C10FF56E2000
AE4AA5B339C187F52630B52309834F266D778C720FA9BD9CBC1F322A39EFCAF5
85107BD5A5C188A6409352766D80E77B1270019E0EF57F31E9F13B9483F070F4
86122EE08A4870456161458B6C93A1602A5EE583461ED91A90CA5B743636AED8
1E5142CC0A7DC998CBCF84E39CE3B141286A5994C60855979B402FC1C092EA15
1A6F3762571629775247A6AC65DEFBCA10A51ED614E0C7FBC7335681207464AB
F8C4ED5B883E7A4D01199AFC3C88B0E2AB5FE014A84377451081CA0390DEBA75
7BEA45FA3171095052B839F7A2A9E41737F4A4CD704E8EAFC757116FE3012E01
AEBF584F6B34EB3F9C4B3893DF4E25B71CA17D427219E0E2F3F7ADB530841948
1FC1CD966965C72E9490C31153E2A0DAB73629A1DC0ED7C058AD150C4D5BE6CA
FCC7D71907232339F3FCD771914933CABF613F0F9FA3E206172B0B4ADD1D9744
00A8C2642147D4B652A8F1A7E5BD064E369FC591D4739533513C202E9DA91CDD
1581D1A58898DD6564B1710A88AEF94B888C52681BAEE1E3EFB4DBC694919D4F
41D01894C91D8E03F68DB550934E5D783537D2B57CEFE23ABACEC756F5D1EA5D
A74192035D2304EC4F9083716CA7906B80486BB5C79752270821CB12BE7ED0FB
9FEAA580CA187AA3C9475070809AF6881F745EC71298D454AD31AB998F5821B8
2070122634D5A247EE4D8672339B1D90113137D4FEAF3CF3A2456A8712556956
C5A48721B1B1E140ABFF7793081B2B092724FC0F129DE772236556BEEEBEBFB1
FAB1037FB0997B367483D2C8C0D44E6111CEE2EF443F84FAC7710AD0368D542E
8A629BBC3C6E2D85E984AA01B575B37DD1D9B0D453E3A73EE7A34FEFA5641BDD
67E694671B6250DAFA3D85E0A78E946C78E33A284D4F92B73D7AE87B13F108F2
C4611CD948F30F56B984E409650E9CDFFD63D996E25E5C0E0FFE02BBE2237537
8C945F31C26697A7ED159B529276995292581CB9B29A54F4F4B2D472C74909CC
47C1675DC6FB9A932C0552F8FBE17F4D8771BFC6109E6D709951694157B3CA9B
1F3952D101D6CE60D1A0A97C99EDB3FAD64BBD337BB747424BE88E67FEA44610
51A1F65159650D3A2FA882944E6E8DB113CE928969F6BE3E3B8BFB71302E87A4
5A22ED99B04853D66E5A22B56F79FEFE917A6F436B823B1A2FD914DDADEFB5C5
CA3A43E348D017CE2040752BF94A98902E608264DED8C3241F06469FE18C377E
448EDBB0823526BD66B40F0519F047195405629408224D070207499DF2F43E7D
52E442E3B6E9E3B08F88C9961E81373B96460077464C7DBE6C7C7887BEB3F685
B182706F5DB4C7C4BC2FB81A7D040EC5A04E5C5434D732318AE791EDC71A47F2
AB39A992EE304763BBA1AA81F9D74B24FA7EACEFBCAC72D673540922501841A4
F7EF18CA86AD20AD76325914FC0197DA6D7632947C4AB3AF2133D1A1E2719511
F62BEB9C879E76B74493C7D5EF38E01CC031CB4CE13C2EB6BA2695E1AB97260C
39A7CF8F690145893081D526990E92C1FB18CC4B968D70DFD13C6223FAC9AD31
2E1240ED981AECE8D13DC653D59255F868EF158EDD781E9D02889907B23F00D4
F6A0D9B74E591BADA348B09E22B1A783A8EF2AC87D34B6407522AB33411ECA4F
6C765C85ED1405A5F27B28A16751402AB278A8099E29940E719DE1E109E5BEFC
2A4098E77020110C37A90B5BDBE279918B0B31E08031DB686D518B4CBB8A4D0B
EBF6750A452A7F706EA676E3B3237FC5656B29CD5A3A04F82AC871B526CC28B3
A61D985EEB3610FCAA433B9C6D4683C512F0FDBF3EE6FF552D7BF0BBBBA37050
FCBE3F164189FDC8446ACDE8D0D4050278151B46E56AF826A0C2E9389C2B8BB8
E38579D281D5142944D3322E1C66D456E4C5DD727AA41FA5B369D5E10CD71832
A7DD40DE855B47289C449B6AD8D5F1D557102050EDA5F1641EAAFDDBC082E579
A06D8A3A323458808BAD0F4B8A2BF406DBAC4C5F555EC96E760C8245A1AD9F50
881DB475F892F868823CC55D4859C09148529FBA57A392127B68F5366491D1BB
097D8FF4A71966D42DD988F48C8A1F4DE0449E6AAE79500C42B4EFE4936D0D00
0FB339115493C16412F1D6DCE02BC7B485CC108C6321EBF1C609633933A576C6
B0758D49F3155D448D505F73A5206EC1C8886F5949790A7E4B850B6B8E31EC18
B7321E63AC75B6588774961F6B7D313B850AA4B368E48DAFAA5693CAA236E150
E02FB2831359FDB95792B2E6431DD24BFA8F2B51BC21E2E5AACC0CA211F50A13
075ABCF9F440CA468403D939B91520C652F1196EAF1BC975E26F8057F69CB972
E976F99070AD3FCD958C1EC54B3994EA142AA0615EF7BC00D85F75BF5F32B350
E2CF46BA0E8D0120BDB54910E5C27A27B59664E856EDDE290103A0D490FD76DD
09B152B3AD1C4754696B239D4B13935AC19769600943C7343A5E7A06C9115395
DC2F92EA95E5ECE5A08EDD16DF74B6297EC0220C91F8BB9AFE742FA96456E131
7D41CDCE88A8F9A12D46B8FCA50DF4433B0B8AED6A63BB5FFDFB8D48D04F9849
2972699B5667C0D2D206F4785DE20A854E1D4C655A690689B7B5A19F8162E5D8
454B7A1CE94AF723F47C6B168CB7269CC802B14545C8448B5C260C6AAED5FB23
2390D7239C22534FEE644AE96C5718EFFB9DF1AC47CB3022D3751E6B7123FB71
403E154150FA4A14EE2CDC8F0BD084CAB30272E8F065218BA88536F138B94AFA
D750F6EA9BB43271084CD876A14CEBEB86283BDB500BBC0F9E152C30059054EE
92951E4A202AB409F7D16443DE00ED69C1FA674BA3664F8BD00C08A27F475C00
E6AABE35B01B991AE910B7DC821CFD8A6B5C7F4B116E78065CB219C926D45163
EBF6E81EF0C38076871283D64FA5F2126CCA7E93636A7CCA2158B99A15CD405D
4AD290CD8F7AF8845CF78D4BE9C7F2E4DC00372530C64BBBB785117A8AEEC190
9F49C82BAD55AD174D38A74582CB367BB50ACF8FBB2C8A2EDB17FF267D0F21C3
5BE42CA518272C9F9FB2DF0780C957CF1B9734E9F49C0E6EBDB5D24ED5D673E2
6A25811D4BCA9D693EF8ABE784D2BE46DE1E57E1B738ADF6FD49E6A53BF48C6C
2A73026234D3719C72C2FB8B8274AB54A6853DC6784398A6B994BE424B6E9078
6C303D590747608AF3CDD6A51B5612DD5D49E1153A25EBEAC76FEC601CF4D10F
65DAE3EDBF9A163BEE244542BFD2849D498C239237ECDCB23458C7C3B9395C7F
900C2AC7BDEF8FB9D4574698BC8D4E374B34969A885A0A4AA26F19F8348EC621
89B42297868AD2C3E80D95C41FA4A5AF7A016D3C773E040312AA0240DE24C7F9
D662FC2E59673DEF563AECCABF724C09CEEB5DCA64FC6D24A091A75B5745DFEE
F5C1162900B5F1EF5A7102C27DB1918679E7E354A5DABF897D9C8EF5A14FA8DF
FA3A7B3D47542FFF5987268E60E7FD64B017EC6A8FDB4BA5AB5B5B58046899C9
C5993E7302C870678DEBE8FEF3F2438217BA5121CC668458620DB3D381D56770
19CDD612E5C0A267BE4F707ECE93B3E1E8BE65922315729FA5513AD13B562C5E
E145AB39905815D6C3E8B60AC5C1D4D7731E2A6B122C6F57790C42B0368AD7A4
99EE5F029AA6F8E302F4CD994EC08C00AC6A66C51254F71280CC722402E200EA
D4F6F489DCD61B81CDB85804A5EF00CDB09D9C2EE4F3D571285E319A78F90942
1C31359DDF81F38F6E8615BCD0E6CFFE077688C365888921E45608C868A0F6F9
D726CB2CD81B49A9F47C12FF76284D3B07E2C2E788036B4867F90D40C1E4FF74
60399F1F08F98A05A579D00D1ED5E8A86BE9DC1CEE3FCB03B9A0E4BBB81C849F
AB1A6089E9807455A5DD78B2EC3090E36EDF4D19FA6BBEF386127BBDB53D25E6
8448A975CD56BE0A93070F848850FB9B3B0285C7FADB28A3711C06273B79FBD2
A509FDF7AF81630306D67E0AAD0DAB78243E1B814F745234BA7CD57325B5A34C
C3F984018DC9653649786481788A6F58ADDB87DD0D883AF60455753850A63756
5EBCDE76329F5626E6328EBE3DB5770A4C3E21341C304F38845FE70E091803D9
D14037AC4AA8C4D17EBB62ACEFE5344982E0F489D72EF60183D8F2A79A3AA765
C18E0479B0255870CD61C8CF7AA8DE567D174EC90945404C5B928EAF3E8DDC1E
018442474EC6B0B42DF539EC1557722299347DCFF0347BA4273054B8062D3DF6
FF094944AE472D60DDF6CA62288E4E780F8614C7749C9406325C82715C866134
637DCCE4848D2B051B8E0EC7B88872E9AE68BB5DDC30F4A61119733F6F6DE0BF
4C6437A849A661B6A233B1C24238BB910C11D2A8024C89FB5DC745489AAC2570
4C61242B4B1983A5D0B134C8052495CBAA9D2E2E014641BD58F0EC389FACADA3
08A1723A5C2492BA0615B0222EDD152AD19C307118AC0086653521EA59D676CF
C36AB586FF1FD4C383E2785EAD36F41274FB0BFF9DFEADC612CA44A7392D8E79
1DDE1DE818BBF26CE3BCC2569F5CE6DC91D4F8B7800A05DECB300CD7A8C38D77
4C1DF436013901C9671F77F34A63F361C5579EC5E00C5A8E2FC97874F6459EFC
C1760E9C6C78E60CC0152340DA6F26C67B2E10B620750E2C44E5CB9DCE747E29
6F7E716E6BB12B699A2FCA90DFB3DD730D96D100DC5B1BBB1632D7015235F4D5
1C1C753EEFDD6ADCEB45DF4D00713744039C43B860B5A9C51AF0BEF11CC8E85B
067A402342896C9B3BAAA570C4900E12D720F2812F28626DE3BD3F3426B82718
259AD02CDB518BA4C4AD8F261CFEBF43857EC7A543ABB1E059247E276E206CB0
0BED125C8F78A665901F80068C9B0AED83074C6270B177BAA18F1975F43E9160
8B75D86D9F7C1E986C2DDA71CBF33FACEE675B943764AFE71B5A359C4A092916
3E8EF660794518DA4307AA5B38469000FBF31BAE9CE8703754A099D21B332D3C
A19A842755A79DDC1E281A8C34A969B80EDC946658B7579B5BCF07AC8B45C2A8
3664140E70CA62DCB3153CB4A8E46F12CC16254F52A26FE47FE41504D3E851A0
665AB60BC0CE5C72512D196F8D1BC0B3FC12DA2D13F4B9AEA2D017EE7E574B86
2576F5EA495F51E1B3A86090ECFDB57097EF73BFFD5E41E8AB6BF105F87986D4
95940A8B4A29E4DC974554DF975D026EA92FC09DBD65783663CAFE414B6F8C06
F00A26631D7FCC4527109F177093E7432F5FAA6CA14F1654ACCFEC8FFC127488
F604E972B695E9EF18F331A58BE4704E5130FB4984C3FE2474E6CF0935F90B79
7221D94774689E83E5406F5D9554C1284249C687A6CF5A6B4783F54267C48710
32ED406DE854CD5E243C0BE4656E35FA02FAF5101E1AE6B7CB286C9DB979D763
FEB468FC7AA2DDBE2E708D27D89164B12BD8BDF0418BEDF018EA67683158D1B7
73C6EF553EA897D5F2D53E75902E57D7C4E06D7DC83F1C557ECF5DE83748370B
00EE03A3ADB919976D4DBFF11B246AF9C2FE922A8A6F8CD47656ED2CBC816B17
3B01048BE9D1E4B54ABC0396D5203D088ED7A1FC7CC863AF414AC14AC2D75E5E
EDEB706CFB2AFE24EB580E55BD31B793E4065CE83795F047004ED88F5C38BDA8
7F5FA8880517429B9C4E5FE980448EDF3BD57758FD145E769D4E88BF43D19050
DA58F5EDC7B4AA76BD8CDAF0B8639BD5D2C7552AF5415B7F35B957F02B962930
D3D0C3AABCE7BF840A7A035F2CC57FC978684570CF6C8FDB960B9CC6E9435D65
77D1CFB71D362BAD7280AED8771C6EE2F7E2D86C5661CDBEBB354B84249E93B7
7A0E409B4D5E17600E1E43F5EA1F884939C0AE467119F1E155676D10A8A35955
BADB667DB10180DF404F43A166E2E533F1C050D35CE4AEE92C35EE391398EFCF
E19EDE2E31F837DF86F1800F59C89EF6401112AB73434A3938E1970D8EA3CD40
C7B8FB44205899626FBC269C25478E0A63F78F3460EDD4F64B4D2A5B3E660B64
D293F803C670E243F0B0EB1C548746C08C7F4FAC0D4A7FD8B7369AED2AE9A79C
74C0FF0E0B0C1AD3B59BEF79753FDA3E929B52F207382364B1C62AE8311C4337
297E030CC0CE93ADB4E2FEB60E28FF6D4AF0010D422AFC137F2254FFF6C2929F
CB76A235705EC088049C1F1B0E78FD2D357BBBFB0E12CD481F96252AB7402213
DF9BB4464515CCEA5FE4C0CF761E921D7D2992EB24625547D54E3F2C644ABABB
47914DF3ED2C719753BB1EED9C435F2D571BEBA4F76A0AD5DFDBA6EC952A4F37
948B63263FA4097587802F6C66C3BC6E9DF45A22A24877E4A4499697D46B779C
8609E85E4BCFE84319532B3AC9D62BD413CC127C8DAEBC28D7DE5CB57A30F23A
2859902409CD4FF43EF6A99E9FFA2DB4113C12AB9C616F074276C4840A546A73
0D24D8518117AD200014839545B1078F38D7284FBFC473C510CA28AB90147613
F0EBC94C3EA0001043705336F16E783FDADA674B361F951D5152C0011FE0BEAE
51286E4979DACD3F5A953BD9E918D5E46449525A4A597FF0F091B2B4794752D7
EE5D9B94524DF768ADA1377760AB1ACE2D780F5624CF53DE046A36EFB35B52F0
566623440D7F364C4030648BC39783FD7AE189510DB572D01093BC4C7EE0C09F
389FF828AA7585F9B7FAFA718DAF925AA837B8C0B647161E5C322CA820521400
5D234795C9DC1354D1C0E5ABC997C64F3C84D2C3B7581BC9566EB6D012B6B784
F740B8E0B360808C984DEC73EF57328A2347BC752EB0EFF7BE8B688A3622826E
C83CC42DCA4A26C504AB95C5232A86199FC1295D8BC52BBA9C5089A346CC5760
009233FDE0B38CD4EC1D07A9F817ADBD1AA6D303AAF94D5FA688675B55D40FA4
3C6D97741D9FE4C964FC6D24A091A75B5745DFEEF5C1162900B5F1EF59402CD5
E4D0C3953C9493D87F46CE4E9C7A543364A9B82B34154924F4739C650A8EF8D2
38C73BD6689A0657D8427446E44E2F5C77937234D1D6AFCA63944D3FE5126940
8ADA00FF11BFB205B9A42EC1F50B435E4D44E14E22056FEA071D0061F16D8879
6C4BA0C670D0E715ED9333A0FBBD15F19CBCE5F93259A6C4A8CAD50B9186BF14
62D3AE2AAEA8A45E9A29BBCF83E95F0C65B2D60169538EDFAAB935FE3468186E
CD90E2F15FDBB395191E6C4659910683768F80764D94FE8A746FD06C08F15F97
3A528084C73A3416B7D9498707C04E9115D411FD74AD771B5973E6D0A573A1FD
2E01CB1197990EDF8444CC83F1AF789DCE5C7F64567C9D80D1829D7FE5F45647
ED6B99C6D96B728840A77AAB12DF037473065B62E9F3775CAEDAD9508FA92283
6FAA01D50CBB9B12B543AF2A86A99F4D544B8974F01B52945FC6ABCF3ECD8410
335AE6CAAA4F740EFA8AE1742B115F4FA7FD8E330D0B86B191FF5B038A5D0C32
91053A42460468F6A1700953700663A85229385FB9BC726979DE858914A95826
CB2A8F0F17773C8DC86EDDB610CA36C8A6051774DAD79E4E3DD10CA06A919430
0B6FF769550AD34A047DDF4DCAD48C79C13C76BDB9A98E254804C9126F6A007A
D697659D0F4B9B7BE0BE1E74DE179CA649DEDD316A452509D2804B5BE0F6C5C6
EF94B0FC821BF1E02C91C149EBC163C14366CDBF3C81F57A352355320AB4F3E3
A84E4B60EC6CF57A1A00F90F224190D7BFAFF83C13AF40E46F7154198D7BC2C6
F10586634E82705468F167630971BC01DC641766DC254D9E9B06BD62DEAA105F
CD48375C11A3207B5A381FF8E1C163001513CC382BDC172026981E9CD05FD8DD
83503D108FA0BF72ECFAAADAFEE78E1D8D2B9E94AF57AE0A20570A74D0C84155
353C360C86120BE8A6A2B0C9D6550784FB8929369CA329F6A6D89A7066E845EA
FE223A6D26B84EE6B6ADF0D9950A195F64FD3209C6D47B46B7708F855E501D4F
6F9B939EE1663FD02D1E1D74F22C4DA4143A4D523E32A0A371A51F64CDC4E06F
544F2055F67F0ACD4E9D99C47877168E8977CDA919CA86D82794F04E7E98644D
98246CC6E5F85E045FE750DA4A9B403FD293CC436888B75949007FB2D0557A88
D362014EDFD3445233A03A005D3F670E67B8FE790851B16E71241433FEA5650A
3908D0B0BD195F64242395E6C807B7D00E12CC9CA711980842040899809A443C
00042C681FE3F9BBDDA09127551CC4780E971D3952648BE3ACB42BEC6D5B5DA0
CAF19D34A8BD8E904BBB589CA901E79BBDB311C102F70F1D2FE7EB3609B14BBF
10E66264FD1E6EAE175987CC0DE53E3799F86A71F96165AA3EFB39B7B13C5FCC
011F38E349AF6FB76AC51841B39F02662AF720242D74012508F26C7003A39A3D
65A8CE04E1583229836D0DD8CA390CFD14E80FC0417C7EA00C3BF24A9F25D40F
4D6755FDDF7FC12E90F2281180BDD1263A9AEDB29E4CEDC083E9A8818E4F0C86
5FCD780F40BED45ACF63A6B1CEC1CBCA4B0B8145DD941B8766A1D28C0EBF9178
9E2B42D978A47B6B18BF0134F12CB398D097D7FC83EAF094FB08A17E36051178
8A42A3D87ECC5243915C0BA12EC2F8AD6305A2F219F870D6A1811AD7326AE12B
896F411E09C15B0506D1F805511965AC7FBF7EF0A2AE13FBDCC2812207A6503E
B00435B0B6EF5E5E1F853052970408E1B96714C7B1D4F806F889EBE1F2ADB31C
432B7A6B88F7B26F555A751CBAF82B795CD0F1BCE51275AA635695BD883B2F6B
22C897D136C06546E80EEBD1B06127A7E7797B41DBCCE9E48F09ABAD8E116038
BEB06DC30ED8E89BBDFE4480A36CD4F92F872474D1DF235DE89D464EF44F2C92
97ECBF2840EC61A315630066630D8595A47913D246893E3D1682833519113716
D1DAC8CE1540946D3EA0CEAC72D968371521CEE81C167C0322F52C3B92C29F8F
D050130FF7C7D8E436ECA4E5227FA99FBA99942BD86CE4B46FF5C69BABCA7859
A876DA0B21819E209EFB5641184DAEAFF3FC3E99ECFA3D1376C47B399F2136B6
E9A563BB6CF6EE049BC3790CCB1FFAFF2326B40E27E034DC75E7E797B53DEB54
9C6D3C6DE98769691F9CE7ADA0F5D6C1AB83B98945A1FB9CE7E2D42213218F2A
CBB2F5361C86BECDAEEEC705F1F1DC687857D57A34CABDBE4B0D8667BF0FE54A
8E67BE8E0E51D90F63043196BAA257EDDD055A37FC3D5A6F2AC7D97350CEDE8D
8720A80DB951D1D9FAC8ED3EF4D4B03D5D15AF4C6B62C52FE635D7DBE1DEBA46
03B10AF1715EA3418AA997C16C2988EF7E0148A1DF74DA038B947205ABECE765
A6F5C39C5A27A1661D9C192421E79A5C0E3632C09A62F2A89E84964B2B68602D
92E9EFF00404DD0A2AED5D5C4A91CCC4E24C50984C346A441E0D4C268DD363A3
82E750152A94A0A0DABC97B4B2A944138C5413B08F8B757A68BFC53ADF8F88D7
F4844A8FA4414EF339406E166CD727639D26DD574C550AA3864CAD2FE404C29C
FCB9F734AC514A3B200ED1151418051744E40FB9C87F5F56E3EA0BB5CE010201
005AD0317780B06EF63A07D938C2D114FA43CE0B06A5B8FB130A3936C4504264
CFF299997BDAE4EF14F9E60E487517C8ECCA81ED1DCF6536EA8AEEA67912F19E
B02D56869F7EBC6A93EEBAC763AF4A2556E76F11E21940DED1DD6815946798BA
56470026735A1C33E62D7A8D23C21F63B4642608AD851A31DB1359721319B911
DB91692758F1907EC08F5E8ADB0E9A092174032BB57DF31DAABB7DE1EBAE20A3
8DC804C230E228574DF9E9896FE3FF392A00DEE04E3156C97F8C103897DF3058
6958C707F0205C3F9872476833B252DE228173010F59376FB1AEB72D08E929E1
630A7750DE134C6DA77B5CEBF5D03BBC3C2FAA19D4E7C58231807317CC077DFB
EB40EF57CD4DDFFCE7B9035E2CE43776643E402FCA886F5949790A7E4B850B6B
8E31EC18B7321E63AED47752547DC27269C1904CB0CD0160136BEE30A0B65D10
BF4D7CC2F28CC4EFE8A891B2A31968694C04BAA55BF3CFF37AA1D0570FF3D683
011C315D6B938837DF75D2AEC19BC7C0F4C7A421734301813921B971F6B6E7B4
1F58302FA1254A1FE3C44528AFF1B6638CAF87F553DF1F0A84DC8BBD23B356B7
A1488750A4D98DD7966737111A6B79BEF479A567BAB3764282DA78B388D27A6D
EC10E1B914D4201B9A4B4971ADB498B74F8F86EE5D21DBD34CDD4E03E5A41ADC
0636AFFA3A9031A7D52AD383ADEFECE76669BF76C5EE35D36E883E3362E8151A
38AD6FA6A56560228EF0C0B8703123FB2153DED6B9D4555BE6678F63311F130D
EA693AD05F6FCAAE4BFC1F60C355698E356465F57F984176061723F228A13B73
04F3254E39EC3E810060742A7B748BAD4C7AC5DE779115C57BF3DC3E66A13B29
3409C469920A5E60BE73C36611705DF0DE76780DC2934C4287B17F5613AF6A08
21CF81AA3BD93F1BE08D614D0CAB75DC0396E0802ACCEF1ABA9A1CD9797E0562
5080815C62AA5706D772C8E0F2A3303895C92605AC43CEA7CA7D3C3A6403B9A7
675DC69ED861AA0478A60C98204C5747F1FC0A88D9E1C5058E00713382AA8099
89562C3BE6FA1B3C3155C4C2C9D9B6784C80119CB77D9C30A1FAB83995414E9D
3900926FA8087A61383E01E64D3344B5A6B6E1AF4FB0AB0CE7F517E28F67D1FC
7629636842E7AD3ADC6C73336EEC461C81B8128C629EF0E86EAE03D5EC474E7C
E6AF8E5C9A33F4E490CCF8636921014C5E850C6ACF3DD244C32A9E4618FF40C4
90B27180A053D6567A2F0F53E5FEDB788C961BC74FFAE2E26DC36958C619EE29
BCD29A724AE4024D5B5A6A25612F7378744512C5BB5DB4DE1CA9064368A00D89
E04C07B80303E089204A1ED054FAEB7C41A0858354B42706AECDD9AEA1AABCC7
00A5D6C5B7D1CEBCF30EE34E39143E5676CA9EB5A3147745E7DDE2364F639260
77121FAD39A304CB7BD67738778C600E9F7FFF00B5B895884BFBC020895A26A3
8AE6A350169601AF4CCD120E7C16E6B195372FAE49A9212103B3BC5F55E235A9
0201A826568CF2C21EE1C54D4CE496E97C50334C156FDD2F9219C86854E96B7B
C3A5B87E38409DA085A2924AFA002FA83DD86D63E9FF50B21ACE4ABFBFA159B0
7ED5C93D976CCAD20691B072DA28B696A9284A1DAB3BB85A734B583B3E2E7960
9CAC4A2A0D12DD59CC296BD8D69AE3E4FA2CD789ABE07054E39695AF6B99D5ED
BE2499BF00ECB6C5C0F3CB6F2433FA5BFCB2320F6AD8E6CFB0D2666679C13A65
E1D6872B1873FB09BD48225E110640A81C7C151D784EF671B66930A143948E27
E1F2FA81FE54BE6C57EF8C2B2E460F086265E1AF2573482AFDDA9F1D252FCF3D
CCDCB3A72541318543A028C9C9DCBFE53223D096351D214B3DC904C32A71036D
0A741AC388F04B00DE2653B18C99512BDA16157E02FC97731F1B39A4924822B5
265773A5E86A17A4185EEEC3C4AC7AA8B27CFF05C5E768115C104826CC10BC78
22701F493A3471A97B87D1E05B7A9A4375CEB76B0F1827AD916E268A701EE540
4CF3ADD7D79A33AFD79FA05F287659B8D7B2924AF04D875E139FEBB73B10C153
AA656370D0A0C5489848C5FCEE650ADC55C703E9AB03C4C817DEF45CDE086413
5B202DBF7983071104BEC1B29A1DEA1E99918B82D8BBDB1DCFE65325453720F0
2A01A0A015630066630D8595A47913D246893E3D168283351E1A7D6609D033D8
0A82CC481EAD70AADE0E2676CAC461FE45040B5255F62BD2B6A93C68B79E9026
102990E062B5B058542C45F05748B1A1A133EC7DFFCC255E05EB66D60ABA9EFE
F377E49B7A134356A0994785F9078D1B8B97E8E73F801263DB7DC7EBCDD9B3D8
4D1CD5BE08DB019DB26819ED22A9E83B7C851AAC3FB59E4C7FCDCD4BE50BEC9A
4878ED27E515FED0D26FEEE69602B2BD58D145143D2FC60563D081F110CBB181
C03581AE7F5CFB6E2B1E4009215DEEF49B959AE6CB67471140028BDB77F8E0D4
EE0B2C0AE9D1AF457BA4830AF3BC5AC25B6E250D2CBC6847C10CDE73950A2DBF
81F7C3B10A749A1436FEB673921A195027DB020897E28DA4C2E24AC43738F842
045A04919A108CCF28ADD9B2582CF6C3178700E56D15B63611A51C51B31574B2
FA8A71BA89DC8F6F167C7C0336FFE6DC170CBF5F561E004C322217D2A01680D7
EC23747CA7156E5CE91FBD5F44F0E247D957956045B1613112CCBB7091B33FEE
92536D6EAC29F1F7D265EA9CBFF5415AD85E4004694D39E05F5E2AEE30F76D51
A3CF5FD037153F66F8765090E7AAE59D8053AE0BA8DB3BCB2AC0437FD14A2941
15CB01446379D93A84DA7DDE692830CEEDBB812E26126498DF01A8B4E7DF01CA
E49DE944C25FE5771EAA9AEB426146DBAF38651053E5EAE46AF5F5F19491F679
C2F3F3CC8C5E5189F8C986AB3EE576DA9DF54E80CCF9A71394B4BFA8CED0C416
64DF7B5BBB015C15EA34DB8B90F2ED9FFD88F15A1BAE76C6EEFC79C130434BDB
9F865580E510F180C63CD039D399B1D9C4208BDE9841363695AD2F8B3922A609
7DA81E6A3D4B3F340503E6D9DAF82EBA11D53BEB168DAA474049FA840261F7A8
A976812A938FF436B01AB54EE1CE32BA926E34A8F8C31D8643EF6B051FBBA7EA
E4D5967EC3646F547C1BB5DC530423DD7C44A82B622327EA30ECA42B8CB89314
E8AE0CC7634258E1A49C6B865B75EAA21C02F7007978FF715B59DB48A55F4E05
03D39165A53031425C5E1F37426ADB7B3FFA6D2412BFB5783DB3C0F6D60E34BE
594B65D76CDAE5693B2E8739D9BD57A4D67E09514EB3A1D2DCF490DC1EB5FC03
C43BE397E8115F3A0C322EFE02904D82B3032B82E7C310D4934710441F46312E
AC995D35324DEB1A832126F491688AB4FFC28B25F44AEF8261BB77AFE63D26EF
D97218971819C58624089FE39F416FB3FC681F6312B9BC458258383E94966CDA
9AAB97986B5C9091DCB1F9B280BE8D374A8D48A10B2713DFD32DEABA293EE9A1
77F5C40F7C7768A67B861D5FC2887F1635AACF2785AA6A7EC9D666970F39E1F0
1522BF2FCB6B28C527C32DA580A7A619EA936D0B6239F72579B0E99370DA9C9A
EC6822571F3B782893E1631735FC7FEF8384AEA8C2273268144A010CABC53339
E8CDF172B872311C783A8F2BED76B849B93DD14AC40A4E4226F5ECD3DAEA01CB
2604024F955DC5CE4093E2F1A817C538EA4F64E96C20699C8A54F090F212398D
1FA9D5FF8CBDDFAFCA66543CFB72EEF26CC3F3561B1CA13FDB336BD4F041E9FE
46C75BA73BFF8D88C56FFA843B1EF3AACA3FCEE17C7835239CD82463FB4A243F
8C74C0035ADA5BBCB0E724AFA0F51B8E2EDD6E0ED16D2ACFC90A1ED23A88CF1D
EE3F583DC78DFCE980BD40FB1344156DE7712A41673F44DA2E1E7D41DF6BA988
0AE784071E6B3E2101F0B663DE14DB1ABF8B7951914BF2E9C684E2C80951B24A
AACDF129B2BB843A35322415E37E745F1478DF48659E20919F519EC7B7BED843
F35548CFE3266DB0E088F48DBD44C379EFCF03E929E6C390138AA7A9BE8E9EA7
6D1DED1866D5010782042200B3914DB7477F4ACE3E01C310717FD8D10B05176B
2D990696B3D4677A6D2AED73403C90884F55AF936438B4F0B1E942537CD9A3C0
6DA77812BB4EE9929C9CEE82C265186552E9231CC55FAAC46EDA9984444FC750
9374E11C1651D0A365FAFC66389761F5436DA107749746B5118ED2297F5A7BEA
B0D625692F612266A93EF535C72093AAF178BF91230BFE3F36B8A0F98A0CC800
A501580CAF3478CC65C774E5244912470606D852A39CBBE5E41174596443BF7D
A121B8C73AFB3730AE0710CDBBD49719043C0432C014E7CC244189592FB944D4
03458FF43F071C38FEE3A811F2D67B799250CAF11120873098B5138445288FDB
AA54FF0F25A13DAD43232F7EE4D840B4362172F75AE64ACD2B72602D2A8F76E1
3CA240865F625827B5B14B93CBD317817EDCC1726036E156CDC649D036DA3DFD
DC31F576F64475E62FBF30074B701B39665F4BF41393BBF474A9CFA2EC28FEC1
3422167D2F49D7601A570BEA14B7C813C7EE435E6B39AA70A9F61CCC446F6FD2
D440F8B6F47E9C8E5C2929BDC7EE14F6D868464493DF45E9E560FB40476AD6E7
850D0E405AE6523DC0CBB3604025E1F18331E151718268DE4D626FADFD70DE44
B561BA1BD4626A01C282FEB8B53E2972147D9EBD179E3D9F1452AC0613F8DE36
1C46A55BAE9F54A1BCFE5626C854818C35B88DDEA6D3A49A83886DB260065E42
3B426EFCAD8639CB438AEF68DB0DF2F2FF138364824C7D41C3B93D9A5B6B2091
FB0F74E34F73B119BE0CBCB087ADD6D2804D2B798B301739E51DD451D8071BF1
B58C840313AC91D346479D38E0ECB73664581BA1552F680511B5FE3EA89500B8
23A0FA5A18321056A36750BC67D3CFBBE3A4B914ECDC45179F7225B6871B570E
BE05C9D95D8F947BD7D9F6D539E4754CD2C62F1790F8A442D94ED07F5F983965
896021A6B8466391813B9003AC9B950A22EE900DA9B2A80B9BFC4919F2483E98
68E0D59E613B99092C8C0FCD223E4499C14B7B552BDCEC37E745415462F2538D
A2D71EC332D6C13A8A7B92514B6CD803081AD247BD97FBE97DEC3941BE4A948B
3490EA861BD99423B56C2084510627CA5DA18A0F9447DEAC39141E4A8C8584A3
8E57441EEA00961DD0EDCEE6CE7F6AD035A435017F8EDC6CAB41EA6234C70FF6
EF6CA2A853FE0F76AB1ED5B97A1067B820BDDF5FC2AF9A36305E36C2A2DDC690
256D2085B52886DC399FE1D8CFA559C93999700F1189021D601510F9AC22E36F
01DF05AB58428703B5F8FCF7156859F14E61042D5A147F0A784F0C5A4E1934FB
A251CA55B73D7515D4048EA67AB4E1DD05CDD42DA117D5956FFE7111F53C8D8D
F395CE9A836EFFBC02B41CBE8D589CF50BA27804E8971CA26B393A98569E59FC
7A33A9F31B1198C6D9980B7C21ADAA911578E0CBDBC8FA2043BDEB19CBF070E5
82307367F5F9AC09ACDBCF4AACF533C80A39605C9702070CC252B957DFC1A97D
522C07B0F972DB969DB77637B6E22C2CAFC254B52413A107BF5B596BAF902B8D
63C8A18E045FAB03CDAA01086862BCEF11AF66D26B9A0D11530C6F70C1B6E7AF
8E11BA4798C1DD2EB7D4F9620F1C42678C956D013FB0402EF2F6C3B06EEAFF00
FE2602F07B88E183809095E88840F703E9BF997E8A6666919D00D517CE6D9C2B
C0DE6516B649A4DC292CA2AB1D7823261B7B7EE08A4211AD764B9A8D9CAA0D1D
E3106460BD438275B8B18D8D9B9D2227C7649133EC6A81002AE7A5918BD0EF50
FC3859C0CCD704BF425C64379E8F07D1B21CEAF609047DB5AB1D11EF4A587E56
9A48CB419390489F70CBB069CAE6BC5F117865AF3389F9B24A1D21A9CCBCC365
9E3AC8CA5DF66DDC7933F828D3CF9ABC2827A6200222621DEACC953EB5D4EE5C
195C81DEFFBE1E3A195EBF7787BFAFFD9A066C4CEAE0ED581BC5A9037A4D15F3
200B13F44F655AD6FC40955A3EE68C16EF312027D054C0D88996599333FDAEBA
AB30E04E3C78DAB918F9559C31EBE12912B39338A6BD32CEDD4E8A51C229D309
11AC105F799840538DFC9B186642C1FA978B5AE2733334BB5EC0151CDDBD053D
D22218B8B0B71E60CCC50CDD5C6DE465C7932B3C509D3B02172583CE1449920F
9A073DEE6F9E6A6A1DB9213C2142AEEA0B692ACA1E819ABF89C01007F28C5A80
F4BD3C2C515EB5BE01853F7F1EA8A3815901DA3DF606E424677807FED4146096
85E975670E68DB88850EF4DD9314C0FEA2661CF8688C3D53F22AA0E1A26B1F9A
C6202BEA5AD2C4142CA7D8CB954B8D0C0C2BE2CB8DE317F7C1449E4F6C8AE7D6
7AEE9BE9CD45EA51767A0C5ED8C8CB4191E950DBCCD311A20B14B4177092A52E
3F29539FB7F8E16596FFD4151B332C718B173132660B0ACCF1CA0A25AB10E00E
4D5A8D0C3299FD3777981C789FD4BBE40DF2F03232480D73FE00AF577494DA7A
B6FB78D744C9ABFCD095A12C405F561BD9FBC456DAD7FC9C900C91E6DF15400F
35F789CD093396F0E34A66267EAD315CAA69F4DB314DC26ED5B60252DD152E0A
11AB38A0C98C9BB1216EDA7BC3094324CEA4FD5A9518236B742F3579E050C9FE
A8E1EF4F3252FD330D163CF0F35CAFC0D61E05B8B32000D4F6A0D9B74E591BAD
A348BC61386E71104202FB3F677DC4F398E82228CEB92CE0B5E695D536274984
B73FD1A0039F86E8489003F84951DB86742C3EF61F720CE7F7788599AAF3FF46
CE5AFDA1081D3E544F7F4FE29CE4952D5E50B1AB34F96DB9F031C7920CEC9A16
4C369C237DD28FC4BE2843036E872B2A04C4C2DDD09A780E3211EFB72BC5B2CF
545D57AB4B9C46F8379EDE9399E5B127D646FAB0A8612DCA1CC8DA7A3C5E33BB
337D4E9D38D33E46E3F79F2BC92D811CC6DAB2EA0636869186AA71F0C1ADF3AA
8290123A8B67E6AE0C769A5E8CE27B8C4B6E8B4F056867F1C0B014E2B65B58FF
1D647BA03560E06391BDE9A02514DB9B144641A5B2548D2909144C30A00A6E01
0B4220EBFA66EF79E0BFA03358E9F753AA892BD9A7AD14F509BA49C6320EFB42
1B3B10694FDED4B3EDBE4FE9C3DFFA5E45C08D537491AE24293BE475B6AFA056
DD3F3F525DA26365A2DF7F72CA78CAC785BBDD2D86B42FF91FCE7E06435BB294
0232870251A35518DFB99CA7E44B6E03DABF8ABB73228AB478B849E58ED08010
8F18DB3ECC698AEA11E32B5F743B75E26E66A24209E1E34EAD17A0AC81EA7357
571737966E650CF2D73DBCB019395239FC111EC0ADA17A90C19A43D4206E2B15
F0ADF54FA750FDAF7121246123CFD3141C81FCC5C5305259AEBAF52AA9BCBBA8
C9636E63A0DC0690DCCC7AB8828C02B00920293556311878D421BCC9FFF72437
7740502EC30BB318289197B74B960686FA892002C19B3221F02826617596B585
5B28202F696BF41B341A01D47A5FFCC91ED4B7E13900CB00E970CAAABD5E3101
82F66B217FD6CC9B23CD9DBB08CE4B28C377375572C513E842F42BFBD3511F4A
DEB1E990D07CD4D46A5703E09CDA5B195BF1CC49F81022023B083A73BEB9A932
238BE4D2DBFC52FB6837D0AF6FFC27B43A9CFA3F57E9478D3251ACCC0EA722FC
9DCF37794E7186404D252F9A0289664EA62E732C4BD3A421E8F13A717538E21C
8554823E5377C82C08CED9509AF593CBCB7B0B261E24DFD30C40B6D35742A408
FA77154EB77D6F52481690604E0614F792804C8C32AF13165D47FEF1D6AA9194
0F93EB95905F74956D7C9B33DF636E35011FF6D197C9B8FA15F1F8FAC9AAB396
62E6D137560A8363F8D0B481C71ECCBF5D498496818C244467171449C73BABBA
B53F4CDB1197769BEAF49D19F0841D5E8EC7CCEAA4D28DDB3E14935B8CE43228
548E00800DE1B6C627488ECE138724E2C9BDD46FADABA26B5433D34C2AEB0760
31841EA02BD6006B6DA2CA24E020A0FDDCC0498D74594AE3ACB0EC7104EA49C7
DA55875A3CCD94F522EDFCAE0CBDD9C92A04E49DF56331E837562DDFD2B9A20C
64458327A48F3351EE3B21017973B3B0C45734AF5241C5ADA1387512EFB6528D
36CD1DCE4AB6E7671F4276E6CBC2A4EBA4E6ABD17B534BD65EDDA5B466A2B687
F0998FC59BE4B93F43805FE0EB7A4A5B00AB550C451413A237842D91C888C4F7
6414E6C277543D4AA0D04B945257A16BA754214E9256E95A6B429C3E4C9366A0
32CDDA2F0B0340F42BAC73E5382A5F9CD71974101F6C389CABC69B231B033132
6254BFB119C6057DBFC2B0085C818FDDA774EBDBE7A957E1602DE3DA6F20B595
7F6F748928F9156100AF21730FDF1AE10EF475F585B2E615996C11BDC84BD9EA
252474D8F9450FC341D125DA3A11FF534B375CDE3CA6DD714223D35D69FB6BB5
17B593AE025E7DB76E3B3E083DD36D72F6A3B64826CD95F02199EFFCF454A40A
C29D2907B15F8C6AF233C3C2792A42338D892C8E1C2DAB56438F1FBD0E63A5EC
278081506796D4A5CE91258B1C760B7B254B34AE37084F9F621C590DC9F91688
A7F5806B6D1EC164588C020522D7263EAA89B3ABF870834A682AB8809F82277E
FC2083F279926A360E4B995EDD16A401B12A1C0D488AF24BC0B83C2D2429E576
E97C39D2034E884EB9BF9BFA200E8DDCA68FC9E9478D07F4C6EAF1D37D624314
BA2AD28316C66821F40E54E6F57FE832B12306953241F8F05D06EF7BE0D60FD9
96223903C9A02FB433E08EDE786CFC2B617CFE4D6E5B4077B438642E42F89BD4
36AEC67146942DAFE5DDFAD97B5EE4B04E0B479D31CB771B40D48806F82B4B5A
A65A7A9B6E99FED552EEA2F20D725EB5F1A1B135B5E5097E60AFDF729A535E05
1501D8107244C8E2C33EA2B27F97F5F7C5CD526CED2DF28AF1814B5845898D29
7A6A791205A854F67B54A58AC1D5D57F0DEA2E45DFC9822A4CB5B59E51E6B799
03D29C1C63A7964CE23DD2F5563D5AC32CCA4ECB7E39D3C74723A53E54044AA6
A13F05A35BA44A62A5EDC245455943A3DFE5422C5E45E5D0CD32FF862402772B
16F6E7154C570048AD99925459B26B502DCDFF0B2514EEA06C4D3BE4D8D2EFBB
235EFEFC8FE8B2D6281A9F1C30D13BBBD899E1113DB8E9E10BBE2AAAF759287C
6F4150C4774423E8C99C28166E5FC3BCE52C13E22A5EE09FF45F2D070A7FF539
1AA9BB2001FF87704706D141BC860829C1FC5AB7FD0E50294C91E426F122286E
F473301DA3F5C5D300555AAC9230CEB38F253DB2EAA39E117FFE2DA4B5BE5CFF
577D6C74AE6F4D4B7A8DB95D4EDA2C386289EBD7CCB6319582D7B0F7571F47A6
67323B2D8E5C8C129AE6DDC88039288277AA477D07BBE7D570327ACED1EA729F
BBF3D9C2829B9FA5A21173244DA052356338CC0F8950392B6C66759DEAAA6C9E
414B784A95EA7DA862DC3D3E6426D42279B1853D20A31C612CB246B36F01C671
0BCC3064B3896E28AE7389D260CF07655CBE427F4C91C807F1A3B23B0DD937C0
CBCED5F160717097C94BDEB5DD87563AEA655AECECCCFAEE257464E2F26DF464
2CD37869BC08F102BA0EA2EBFBC82BDC7DFE1CF990C5349F494200A88FDA22E2
4F5D5F7DF0EE66CD58CE0C9013DAD8E90216B044810A668F1D6928EDE7C4ACB2
916B86943E19CD454468FBB4187C77274565235EB9C1764AD9D987DEA4536807
2750CAD0C9ABC3F4960F03A501C5BB001FF37B292301F1244DBF5A2C79B9B609
CA550922E73CFFBE4201AD7462760440A2317E38B2995775FDCB5F12391781D1
555E66E0D67549FBF0833BDCCAE990AA8B26441324A228BF89C162EB68EA6DB1
574BDA5274485AEC7B63B1A63307494907D3050FC9D556B01E8A90F3893CB2E0
B4C75A713F443B08792A50891CF476483DD8451FE4FF72E37B03CEF0E2DA4C84
2ACF7C33D5F487598CE1C576AC85423EC679AFDA95EF3F0F9657F4161F425FC7
831B3FF7FF114C014E1DA800226FFC3331E33921DA5D3F2E4484D88CEF40CE31
3C8754B85DDB68BD9644EEEC6439D7AD0810B5407E1085B1D510490E597C17BD
16A11DFD7D48F4FE71A6869C42FCF442B648AB6C761AEDE8AA97262EC0173560
C8F5722743E02AC7620BA3B1DE132F1BF1D98869BFDBC9E1DDE716C4A642869B
B77B93F37348E5E9F121810229014271364B9050801D1F3041B13A105DF8C41F
14E954B6395B87FE5AD8CB90B1E0B6FEEE1E3DF06973DBC08C1F72289D2F0DFA
19A971CDE9629C0B16424CF3609285DAEB0115E4AA069D84EC735F63CC8A9041
7E80E396349CCE3D47F08AE65138CD662779BF9273B7F448B79D76EF0ECDF6D9
3AA535986D70C6D02EBA1FD4BF2EC6DCCB7B5F7ABCBA1B4B701FD053FF0F727E
E7A62C4A4C0C8D10A93430C7FD647B873D93D17B5F45A358A7A162679E52850A
292A04BA1ED15A0EBF2C8F288214125072AE15C467502382E801BD0EC484A189
2E79A94AF0B3C21C166DEAFC24FFCC9696E826E8C364FA71301D51FA54830E23
648C1E0DE52FE77D3841B9FD401A469962DF6BE268D3CEC78F0CDCA08E3A714E
15A869A760D44D5B355836833BD1FA7CE1F62ED81160B6A5A4468B2B2585EEEF
01CD882063EAF15D3973445ADC0F6EA36C6DA9CBD276DC4FAACAD5A1706F843E
857C6FC2C1E3CB2BB26E7000AC331BA4ABC5112BA320C636173D5D9EF4C45B08
7BC34E8F14FCED37AB55EB94BED0241E39A771747F79A79D9BFE1996455980D4
0DCF76E7D4AED20EB63AEEF38F8BDB6AEC7B662102EA88663237E82970FC0EC0
32AED2A2FD2D948114EEAEA1F50C497704AD5892D7F2E681EB1EA12AE2DC994A
212900B3DAB9948677AF0CBFD70CD2844F5601EF69F8182D757B66970563255A
4B7C49FD16D8FB2177F2F088D2A4F66A44ED8B88CB1B2544153A1AA8D2DAAD95
397886DFC855A5FC36A7C291A47A69E9C57AB73343F5FD681D5BEAFB5055592F
74B91FD7F78DBAF995F1D86F8EC129FA664F8841713DE784371B9FCE178F9A75
F3504749F3C67582004AB0973A5BD735736D9A2DBC7AFD01B46325492728A57C
D458DF6ED9F8FAF6B0A70F46877976C12C6528BA7622E2E44E7C653774029E70
9393A4F8DDC885E8102ED56EB6794BBB90FBF34BBEAF282A69007BF67B5EBC83
8FC0B5926498262F418310539EA4CFCF5990D005D60E8D0E067E2A3D0BE8B2D3
78E5E3EAAD4EA0CAA974517C1141A7903C924ABA53A4B5C7C390F436CB4C0A1B
56984FEAB4F519600668E48BE0C7A590D6C817424D3C384650DA926F24CFC1AC
7172514CF1F4CC942F4B98E43E8B3D4321C04AE86EF9AAE55767C0809544F529
1CDAA0CE9488C855936EF155DC90A020CEA122A36D71C5FBF0007D6DCB2A974E
04CDD34141696BAE8F8DE78320F88DEA6512A0AC1CC00800832AFE4B841DD774
7062821F3C9F82169E5FE0D613468676A21638730B3AB634985E739DD8E5D987
95FB0A08C894BAF2BF8E26A9102AD655D5D49203B02F840FB06091C8BA03B62C
F71D52FB4D17ED6234C70FF6EF6CA2A853FE0F76AB1ED5B97A1064276E76E333
BF24A5894AA474C9F08EDF66B627B992CC0698D646AC1CBBA7BDD35F637D616C
7003024B08E527812374D2950015F2EACCA793E7888C26EE723E78F3CB3E539B
89DA648B919EB362176B83298EE2D8B405DC651A522C2D87ABEF72CEC76681F8
FF7ABBFF2A12FDAEBB2F12AB5978361D83B9D6C514372866A572B31491F9BD0A
742ED042F0A9F8DD7CBEBE018E1F056476FC098BE08AD2F4571771532737CAC4
FE269D52662BDA70D7019DA708A2A4254B80C17134D2308CDFBC3BF32EBB01BD
6D00B71C87B8BC5CF59F64B790DADE8D58756157053F86F4A129B6D09B560FF4
3A19CAB380E2ACA02B1F4DE659CECD29C31F9E8C66735C59EA38E3BCACCC6F85
A6E451B6D459DB33A4A8A1BE6742EB71BC09CF1FCC9E7E83A7E83F5C91D4689F
7553DE7432E5B553BD7AFC2D8E6F339A46E1917DA885DD96133A5CE1A290DBBF
D88AF285A7BBB711D0E9CBD331ECA61B000C13A681B5D7FEFB9C0D8A97CAB9D5
1FA9412407E10C4A4FAF36CD27DA3CB90F384CF8AB617BAB11A3A5EDA03CAC5A
C431C893607DFE852F3BE5F7F9BF42EA170FF2EA98485424B855AAFFF82E47AA
FEDC471ED6488AA685D04243BF460051DA59D4B269BE8AD8FD28A9EF8EEB25F6
A230DC6AB0708EA9048247FBDBA229F6F44316033FEB0A4244F4405709FAE17F
AF63980C768540A8BB14D390F350DA0CEBF7927D5E289AEC1BFB8B6DA74EE3B5
F2D77AAEA3D3241C59C9CE7D6326FD0229D451A1EF4160C90D2A1B932C5284AF
F153351CE0730E2148AD363D40FC75EB3F94FDF3A7307A67F7657E96DC43141F
02009F1C1931DEEE7AB6BE273A084E4E325B88AC132D54A5A908B5F2A32F3896
0F407A2FFA629095B531FC4DBA01FA187DF959E597FD86C9DE4966A66C9F2C85
01A2E9324D5E6F0F1294E1C0AC67EFCDA8EDA5BF150E373526CF55A76CC97FA4
7FFDD7D8913791DD48E3DAEFF4E3760A8B0E1D0641C7768CB7980CB912D457CD
214D05982AE778AEA1330D4DDD264FD3C872308F2C21B7CBDECEDA8B484FD4DA
121C010A40A2D04B35C085CDDB6DE033212209872667423B22D9891D718E11C8
1A7F567B7814B47E09C2B12838DF827ECE6D24315E612F1A0E540B3911A7D284
91883B928672AF8E7F5F27F67C9281DDE7EDA445CEE41C9073FBFB6DB15CED38
94DB7F3E6174779CDF1D7FD2815F9092C346805F08F4653BBBABB95F57397A31
C93330A149C5D9572A20B495FC41E49E8816E1FF70E1F51F027A06DBB5236240
484C56E5567ABD3D9951F55183CA0B9098477F133CEE759D8359A5FA8DA61D2C
C4A2247218EC017302C9A10B8B217BCB06520983CC6741DE803E5B6EB1E7F551
7A86048D4A0645BB84A6B098DCC8D21513741301029A9B2BB7E29428F185FCCF
89BC0778B174A9FB4F5872BE9544ED37FB1E796C29E1E4453B45FEFF5E341613
DF5E22169BD90D12DCD840C0DB82DFEA436DEB4794ACD823CA8A116BDFE44465
D651D2236F883F1F42ECE339B694B19D21A3B201C0AF945259EF364631E8E8DF
511894E8900D786DF564EE95F42A411D26C48562C814D59494554390A5B534FB
16636516C6190C9681EF5494CA7A44222AE28E49BDDDF620002D182AF8045FE3
24CAFE784CB873F37AAC5ED2C00F79A4F0E84F0F996562DA5BB51608D3FEC3C0
1D08BBC8AF9626B1DF061FFD64D5E9727ED81446B1BAEB0D9443060D79DC3EE6
5E742ABA451A2E501EAEE1004CCD483BF1AAD3FAB74C2B69537837A2B70DC090
8DDB4ABFD82D5167D7A4C7C44F78456C84DAF476A00A96343D7C8537A5FCD099
50C59D0B79467CED736D9EE1F82F58620615883B0E589EE3A0E0FAFC9DC93DE1
77F14F02B3C92F57789B62A14E6495133A1B3B110F97D9D17E63E0FDAD510D72
1956F7200EAE8F93ED95AE429D7CCEFD9D9BB24F9FB191508C75C058F8FB6539
9CBCD9C9E557DA75AB3D8F141B95F3251B6DABD584F17C7524786CA53B78C328
DE953F3494CB99CB209FA97A20E05E027918A67FE3E0F8CC792879EBA47B6EF1
6E2C6DA9D1EB5100CE21181170BB05CC2CAF62830C2C50EFD34C4EF05D228D07
CDCF8827EC04177712A79AED14FD6A58590CAD14A92B83EF282429D430CE35AA
150D692C3EA405779F6C395E1CE48D9D7DAC7D581318D98098F86960E14829CA
617A7737256C6A801B16C8ED115437A8EA8CD328F1BA64E9F096EA448EEEC367
52787F85EB045535E44A641FFD86F1A234FDF8ADEB552B7E7E10AA577ED3D559
049144E28A8B6DDDB556D22D3BB579328E4AD9D5C3475D72601CAAC1A9F7E87D
D609A40C735DA40E068D61F2B9B0414B8F0156C0BEDED15F61B43914C6D17D10
38335DFB13DD913ABEE28BFA1EE081811FEA1AE3C2AA46C5AD8DA264298E5767
D6881C64BE717E10AA577ED3D559049143D4EEBFFFE810F076D00710C302B4E5
E8AD40D6C17E325BEE543B7320DE2F49D840FC89CB8AA5D5C034614B31D18FD6
9AB6F539560F9E8D4C9AF6C8BC23B0EF11F37FFCC8BD8C4F0B6AB3CB42D63190
91FB1944279C1BDDA556B74560FE64C1C440D1C866159D8DF1A8F6BC59A16C7B
47B88DEE02EE578910A18CD1827922BF5BB095A776A2C5CB23494F45B1A378C2
334376FB34610D1A4AF71DE347DE8BD4C3C7EF12F4BAEEDA8DD594F9FDD3F038
6FF6545DD7B4C68A3F79464C1D64E30219493B2269A1DE208282ADF04ED5C226
4211DAD907074BE3AB545E4845219DDA8FD87341F337F112E6E649BE407C85D3
D2CFE41C4D4A1F2D1CB9276400AFF35CE170D31F2B166D2A01235AF50043582A
0BB588897DA22D5C20F8A2C7C95CB1E55F731368F373A67893FEE2BCE0512797
88C2BBDD81475211B28D9A614446CEE225D117901D017E0A380089CD031A30A0
F87D7BAF534E49D13772304484CE384526A09DF38B3FC60F78AF509D7B448A0D
A42C5E456AD713694C65D2484218CB438C2B9FB81757802E694B726851A966E9
3490C7ED6E46D8FE97C313D83D481291F7BA24FA33EA39EF3D2AFE9349319358
1479A70FAA733BEA5E0E08468693268E4DF9E0CCAE59FC2A788EDB10196768D0
23D6BD1C2CA79CAD7F0FE9BAF8F71089C3F94FAEE44631388A38FC1B81A193DB
5D59CF092C82E0B5AE1F39CA85BA749C7CB1687ADFFB0B83A7838452A6F18291
0CE6F49D4494A93081D9EDC3E6F33C0CBDFA4AAB1FC2970DA4619E834957CB1C
E9106A9B0A113ACEAE5A638992C479F86CD53E8CC9DE6B2DDB148E81B1F6B9E2
BCC86ABE5811DD097EB0065B1E01ABF5E2D8428D248B1B0A1132A8DA2DDE3EEB
17C167E15736CB60DB4FD58B00CE00AF066C2169DF9B3D0654FB87EFBD4C7B75
3F6E88E8423D1E060B20BC8498014FC6AF9154768BA86963E006ADEE6D7A1161
558E0103D69F95627A6E45609919178CD5015D613B637F19614B32D3113FEDDB
8BD432AFA87F26F693CC93AE903B04DC70CEB126E37F9B68DC215D667243EBC8
97ED2C6EAF713011776BC1FCD81EF9A291438D48073CA60ABA155F4A03A5FEC5
A8E14E5A17FF6BA44447C98400B39FB9D00B7880E7DAB1639CA2A26D53F630F1
FCB2560AD582DB153772FA61136A0A5EF8DA1E9300A2D369E9DD9EDE9AC14E4F
D09695BBDBD7994FD7F9A51C6CD3EBCE191B0F1897F45E676D2D16E9493A259D
B7DF7AC21D9B88457317ED0F6CF9FF5A2907997EB82C15C082CC9D5F9EE46468
3A6649D8EBF57C89305D25FC1B1FEF198165415498597436449EE0F9445B4C80
696678204E90FEAFE0A407C7C23BA5F5E684764A0FF3119B626A67B0061808B1
AA8A9F4E87C682601AB378DCEAF01EBA7AE208615F5D00DB8AEDBC8209595969
EB322C601A8D700072E3F5010A9141AAFCE6733B371BF3603FD6C2816137832A
56C48FC89066B9FF63B80A84B36F7F9C83605DD868C8F663872B230E921494B1
29F80EA04146854D9EEB4034FA39274D2EC964B32F3FE6CC7D57F5CE48E4912E
5431C06D2C1CEE39D5413C110EB25E1205995293762A7A83FD2F1415C012F74E
253D45C14DFEED6FF6A9F6A5EB4F570CE4ABE7C8A1852095D045E85DAA4BE53B
26AE30EDCB46ED7952DD4F10F3A2F4EA315404C8E04A5A873CA0A32864F262D4
F64C91525C1DC028495987E737091B05A3BAA49FCAE6E32DC9D1AED22C2EA725
FA6748AF1F586142B2524A8EA76881278EC54549FF754E46BB83E4728E1CF8E4
497211DAE158F2DDB6A860F0624618239067AB0D70008BB2ABCF06E283F5507F
6333B37A975BE804C5563DFC3C67C8166A935E2DFDC5653F8CD834A1E8AB45FF
E334532FFF6EE351252820E234C97E96A5687BD9F33D193276CDAA152C0C5007
91C762581B3E498D5EC423985F63F7BA5EA703122EF3B1696DAF841B6693BB70
A7AC9B290539B172E2F22DC62C9855FEA8779B1D7CD4882F55258C57D4A8367D
82EF814BD97304C3518422CEF3C41D748B5A07A0EA50E3F6C38E0C13FE30AAA0
7C0CAAA57932CCE22798816FAC800F99054B041CD28CED6DA01287AC96E605DC
58670265FC8FA6BD03DD67593CC09B3350E40689A5BA6F5AABF3E70533868D72
0E28A4055091ED6C0F733B035CCAC9A2CAA2829B9E161412B28D4DA44C60ABF5
751A90099A4DAB23C36BE2772C1D183F91D837DAC94609659451F83DAA632524
8CFDD49BC425FD7D7EE5953A40F8BCE27C810BDF9963D15FA4283F9CE523D03C
847131EEF1D6A8C20BB052FDA9FBCEADA2194F7BCF7AAE569CEF156BEC782E44
6B2A3DDB53C4C24F3408C19817F0CA102F52A894B559D265D856CB17517DF95D
8D5E51D994BACE39AC902E200BE756716E15A3F345F395F32CED2CB15B87902E
04E19C09209B93C6D340C9839D58A365195647F6BCB28B5B171265D2C5490FCF
C21CB7024E2D8F4807D027C96D69F024A529E4FDD808777D2040627A5F4BF8E6
14FCBD870B67CBC48B6CC5688CB047EBA45F170F697E22B2A18E87EC2FB4DC73
752C89EA423A179B77342E366773F2D5DEC1FB3C7B344507DF936A19ED319C82
1BE3E8EED5C48B888B802F6C66C3BC6E9D748332D74655C7992458105D1BA286
5A52C5F4D31C4917A92596DABBEB1928532E4F497C5954BC12FA428A10857D35
B49AF5976972FE4E64245ADB6834824495ADAB8157D6F56BFA6DA0DB6915A9C3
21DE19CB262905235EE0AF42A48690647B2E835E7ACF892DCBAD677F212328EE
F599B0A35E042269A9C4C3F2ADA2D1985C85211AFD2D810F5768CA47F9728AD6
8E52B5971389DB71AA4AB9CB38D2E9F15FCDAB2E629D25F75FB061D828F2BFB0
6CA814AD93DB76476C5578E5CCB30BB1D7D4129D8AE131229F406CBB99DCDE2D
9507407BC016D0B0CD2F795D0464C9E334DEC573E61A9B752E8869F9F4011DC7
021D34FDAE0D6951F120944F679A2F9A3E46D77F396BFC9DE708C2AFB5967FDE
32BC77530DC353B3CCEDE3119B91A719719C6D317FF562DD096DD0A3EFC494E5
B642D674172BF8F3E5E75E2890C12B6AAEBA7855CD28A4884E0C99A95F819AEC
23F177F11CD02925F54CEDE04FA10D9B7516803EFD9070DFB5F96B80FD7FE20D
1FD09789F7C7007E6B1AF5A8F5EF2CD04A4EECA469B2A6246AE685A6044D3A9C
EBEDEA5A8D3E4AA152E5432BC2A3E320AECFCD68551094D1001C6D1A75CD0EA2
2D849D589FBD71A844C34793F87E35A363E14DE497CD19B91CB92E669C8751A1
D3C5C417DE391A82F969C55DE88DA79354B160AF878383043DB5A9012127E4C3
22040F87EA6AC9F60265222606BBA53965AE74AFE4077461CE13614CF1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: wasy10
%!PS-AdobeFont-1.0: wasy10 001.000
%%CreationDate: Sun Mar 22 11:13:35 1998
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.002) readonly def
/Copyright (Metafont original (c) 1992 Ronald Waldi, Metafont curve conversion by Metafog (c) 1995 Richard Kinch.) readonly def
/Notice (Copyright 1998 Taco Hoekwater) readonly def
/FullName (wasy10) readonly def
/FamilyName (wasy10) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /wasy10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 52 /XBox put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox {-23 -1667 1720 881} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB02CB1AAE
36F1D7B67C605A37687A9C3F7067F07673039D1E3E1F5D9B09E6A389A55EBF12
06E72531469F768EDBC4DCCA572BD608C4BA8F7EC3E5BC61C6D949C94A843E69
0622F0AAEBF5CB25A2395DFF6342106C198751CF0B33691FC18800254AC54C04
02494A0E3670008E8BA57A3CD823BF47494F2EF9244421A8A0AED84D153D7201
BB12EE9478DF00CA573F64C2474817FF401EE94BACCA8AFC16E776665C3E1E31
89AEEC906A2B9F8974BEA7160C33F0AE7FB04B2666A5B16659D6DF66A688D80A
B531D9F866F21F15D55C6FE75A8787091359698E434EF9C129EED0427EB96787
B3F25C530E3664725C63D4C5DFF9D05CD13619FC41A001275A78C58F85FC7C4A
911CC31CB426231473202A698E5715B032D2206BB361EFCBFE3E32BC0C8D9BC1
353AAEC62EE632FC8FFFDCF6E7D928F562F689406CA00C11C7EAA723B62FFD2F
5F6343AF494085662CE2CE880B04F5589396EAAA8823DBCDE56D868B9E66BB8F
10EA91AF37D76A1BF27E69C2A2ED1D8B25434C0F205313ECB8A6E039093FFB32
983346BEC569B175529DAAD1FFEC1A9302918FC947C390A86C061AE0F6522D79
2D4FE06AE4FABA59F225D7ECE2EECD4BA1359DB18F8957F551C5D6F037F18545
CC6D03EB2DCCCFA294492ED72A737588457E5B18FA4CA0F6D6D8963CA35DFEDF
31A684FC0388D416D7BF6CD9837AD8692F284F24B80CF9F24DB10DAD0C4198BC
2D2A52D9F75CF6C52C7AE0D8D4598DB750E9CC97D0FD31EE8C598A2FF3745694
29DA808141AF4D8F8AA36D7DDCC3457D5E082B2BDF7EE060296721D44B092E70
3607B2335488925E41B22D659C8F0FFEE19A7C19547A147DB851262E47E9C4FB
0A8364BCBC1C77E29A1183EF185EF35B9A5B13170730ED52D5C52CCB460E7D37
F4F37F772794BEA0DA201C99C52F8AC2E4CE7FF33F6ACB796E55BA2372E3B035
52C4F57AB5C0BF828DC7E5A8F8F00ACE0120B99667816FAF5D736BCEBF7D45A5
79C9B5EAA32C9B672D764D2F51B2393ADC71A36AC0D5CA76F3F571D50CB4C1D7
CA77149B8F0C98198919DC43890A7D49B0A6C7268E399C6C68B6ACC0D1E9F5B2
931BAF9EEEA6ED985835323E85D72C6A607A99212BA2DDD24D57809EDE36890C
F8121121306593CBADA65AD9EDED7740C9A2F402E3908B54CB4AED249AE575AF
E64C76BA802490ABB489275E5A3F2B926955B0D961A0B9B3AE205C074AA695C8
68FC2F6997531FC328B8FC65BB06C17B212C8C06D5127A14D7989D24912D1CA2
1FF37457E65829B6E1C65A09C1A101047DF20ABCD57E067A7298091C88C4B587
84409C67D00F7D95FFA0D125FB938B5762D912E1C0E116AA0593B1231FDF3BB1
498BA3D20DF13C7EC6D40091B789C9FB7CC872BB73E6B9D4ED8A555CA31581CA
0F057B10C7A8CE1D7CDD4FE2D5332FC533158B8CE6CD3E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4A2DE9AEA203B209385B88D9E708FA615ADAD672C6
BE223D5855C0F6753649EFC00A7683A9EBCDDF1610B2D942987DAF090BF54FD4
E7304082BF34EBA0169EC3F6190879D5D8DE05CB5C6CE7C2212251BFE8824A87
3A277D0CE8C588611AF4987F7203DDCE93170428CB54EFDA16BCA73256C1FF85
2C85996873C9487906AB70DAF5E4FF2EBB5C7489358365EE072EB45FE7328E73
5D241828F39C98E813E0B142027DA0842BB3BB3A4EA8DE8EB34BB81AE7BA9B29
193A289A9EA7EC158512A268417204F047097E042BB52BDA0AA3ED16B4315244
E3BB451A99B211EEA2F1CD0A5709AC8CFC3EBA9A0C45B48925B43CD4417517CF
6F42243C234413756CA68A0F125A0E7C1CA1F6166685C3FDC27532C931AC8B86
E81FB0223686025707E5A69C6BF3D0C6660E636D6AD25B03A44355855B2712D6
F84E63A541739B3F161891F0FEF72180DA1546675AE16824DD84B6CA375598B6
C439A2E90E30B7AF6043F860D5D548B166C25921D8DDAD3398299D23D94203ED
FEB2A8899B078698314F08981397316AEEDFAF486F58FEF25284B5B5618A6762
967822C2B91D421D3C8CF5D76D071D3748C32BF1C779E9131603E8C0EDE2D696
E60DFEE5F15D5EA092DCC4D49B16373FD58807C44B06016EF5E2670A911AE147
CC5A9756F870A1716B4DC3D868BDE539079576E5CDFFAC34E165C063768ED394
770CF07675657587CB8A56596847362B00E9728B7CF7F5E85673E4B8C4F424D5
94F93A6861828F6251F206B9131C951D1ED4364A9CCE5383C0DD92E3E329CFC4
E2B36E704F5A2E99A7CBCE624FD99A6A452BDA7CE29D9E0AF72F0AAB66DFBB8C
8ADD16BB65D88A7AAD93961976DE90E40187EA775CC79FCB6654FCFD2269F2EA
7951C85F49D40AE4D7D193541D0631D347B191536A6557B5B8C874FA44E71539
3E6B62F58F9D3B055E3CA3FC5F586E8D1B006E523AF961E9C9893E8D65DAF13D
26C24BC276BC5F72AC1343EE49D70ECA4F25F58B6C3937F7A3D8165EDF4C74CB
B662283EA3FB859F2B46DF97AE05915E791F1CE849154C53C441EF100B3D3F74
36A5F496503A3E108CBCD7AB1104D13535023D5E0F563059F9959F021413C8DC
613D035D69EDB4DCAF6F52EBA08FFC62384622982E88BFC0C20B422D4B14971C
6890397008D96737F48EEB999FCC8F26AC74EE09527348E31E31545F0FBAE081
3944C8BDCF6E32FA15B53C70BD06F06681193AF93A55066E8345D531472249C8
FDCE5D2CF3A342C8C3E0EC7846ACBEEE09B1C6048724F4AD47323294281412E0
33B051DE4B5B54076F7EE652220C5CD20A575A917C9E7F9EB8C5D400FAC3275D
E7A1CB64B5D1B5FA98029D7BCAC785BBDD2D86B42FF91FCE7E06435BB2940232
8654C6213212E127B968C9D09176613CDBBF70DD3492B82A746A18621FCEA034
C5478EDDA7C1280A05B1E32B4537274E5102564EE586F97C1FDE8E7BCE01645E
6997373B2BD37B09BD7BE26B975CFB5F1762444C53CB604A45763B67768AC526
1DF9C7E081A7F60049B0EF4E1912DEA25281CE4DDC8BE953FF658A1117CD4434
A122D6BC79EA3A1963B94B9903CD874CF329240A0A080B93847EF4A6D9FE1590
71334AFCEF5F9F56BE7AF8FEFDD9A275F88659D2ECB70F44FD2643BC95F886D6
9F8E5C9750C4C9E76545696CAC80421363FD81AB15094F74295A600EE8A42977
8B0570F27487933DBBAA82C5904BD2170921D4B2CB846E609078D5527C1141A7
903C924ABA53A4B5C7C390F436CB4C096165F9F845E184CC0594188DC4771B89
04EEEBCC20BB62DEAA105FCD48375C11A3207B5A381FF8E1C1643FAB51C16D1E
2C79A7488B9C54BECCF570BB1321CB3136656AA6256F36CB1B93A8AE9E43D2BF
759505E1F5F3759E08318611701B27F723F3786A03BA8515285CD7FB6640DEBD
ACC45D477D8788EFC79A0297F6D18FED9656B074B08F2CD31FC681245C724A8E
754BDA7CF80902AAFD2B6018DD0680B43A5AE7900B43027D002C318363FF20B5
A0762A4A9A546A212DB60D5242FD1C2D25BCA2B4E479414E699B812685A5890D
C3FD97D8C2434A8886D583181CFE693F96F674A02769B1E1F51667A11F7CD5CF
8FD053E67223B64D740B7B5746E193B5F15C9CAF3AF3BF89D94C253CDCE59227
2EFE43323DFF913D8D5F9B31D94A995E77D369B625ED15E573C039463C85D6D8
0D2E3F6E3D9B0F29434DB3C314312748E0A60E83AFECFC0279ECFDE314BC8E0B
6C0895146C40ECE0760D71E25054717CCAAF6D21D4382290691DBA3D105FFA49
D59C844204CC485B2C61FD26C033019C4ADC916AA6F4753081FA1D94EA99EC33
7B400379BB84FED0BA2E719DD6558D875B609A4EE8EA87A10FB585990593F20A
35C876029EB65E328BC84527AC2D1E06F8F45B9A4E0A50A5974B4E84FAA55133
861783867EAAF8138F4275ADEA0A3E4C5F2162ECC430C5BFD22467E3B7B7EAEC
D9E3E13E5A06C67184BBCFE30B3C2DFDB8B6B023CE7CE84BF2C517B5295BB70D
0AE365DDE57674C4C84D1F697AC661337A3505E36F62EDAAC717F70F694D3945
998A9EE63BEACBB06368841C70B46F6315CE9D47B1A0205450B19364F44ADF11
A23797648C0BE5767B20B56DA1BEA00B2640454A1C0FC242551112D54FA17CED
FE34356C5FAB68358E1CD44317F66105F277E5B6745FF4A5CB0EE90FA42E1529
4C38154262B37BD16AF15612ED9AC48BF60CFF85EB410DF338956B813E3BE2A9
303CD76B5399BAB5E6826BE84DC50E4490C70521A77EE734890C67B2C91F576A
78564C9BB7F666CFAE1CFE2EBC7880134F6DD446C04AD5F17FCD1E87796B6F67
21ACE5F11E54305CA0C3E6EDA91ECFEC0ECF0B5340E0DDD17A6381B5847772F6
59B9869D066EB184FD390E499DC9016C341D79792B1DA8F972FBF7AF89198BE6
437E638FA4191CE16E037D7CD767AE50843AA610583CC318C66E25A453ABBFE1
FC07FAD8542975DA911C65CCAEE98C14885AAC9527FF3A91D6EFF971666FDD84
471D287F1C0CCAC0653C734F0C5E89F868673F38A6C1392EBF4E135CC6513FDC
78BD724DEDA798707DEC3CC439F65980BBF08129FC9E798D02102F63CD12D9DF
D15045C345839AF0A2A207C56F3D57F8DF72D9E9727DDA9DC6806E9B9557CB48
44083E1E189796C43757826851F98A6AAE8CCAF8786AEE3E1072BA0242779D9D
0EA35D4BE263DF490DC590052EAC34F2A46BFDF66A3DCA3C092A691292BFAC09
A0A66B863A8AA5F19F3FEDB608C178B9CF687F6870B3A796EDAB7619A8A1DCE0
E4AA6C193AEA970F45D01EFCFBBD18095985A0FBCBE7609C8111412825F4EDB4
137097D8CA219D816FFF15F540DAF3BBDFC628E3ECDF6B1C287FA48573D598DD
2C2AC8F83A69A5AF81CB271A764C4E59340CA51DBFEA2C02F039C4A005B15A39
141AAF70D67CE015DC9649EF7521D2F58E99C3E4D0A9A47FF7BE60C949CA1692
15D521D50FF7A49A4104BC29A369CB5EFF8A1B06A1B8A026B3CA3A4B91843DD0
43A2BF70C01CCD061D03C3747E763577E76FD4382EE5D8526D9F2407B7A0D14B
76B58C9F90C924CE03873F8A08AE977001F1364377E5F75E345F3D60D8C555BF
14FFD61E05B8B32000D4F6A0D9B74E591BADA348B82A72D44D2220BD4EF12017
FACD410123C239F97E12B6E76E1FDF7A91F1ED536615B3A68832F647022F0386
61A345CB7DAB82C4B4329E5CFF8AB0F213E9D5CF55D422C1D7220A1C15988847
BCB5B01B04F5C3A01B3BD24390D80EF38B1A64CDD91A97186391F351F6D14287
110FCBAB13CEE46206D78D05B296152A7B9819D4C64D1888ED653B4C306A3A83
5B98A1D4AE5D6C51E06127958CBFBEF0DAA87AFCFE9009B608DED6278F87BEFB
AAC870EA8045A4E8AD0A62DE800C385269992E41A8DB2F02AA83CB3754D05AEE
E502C58527239E3B161A15DB54D1C7DC507A3CC81184573338B105AA4A3F32D5
D8378E645FBAC3EC74230D995E44006D45F11797379AE23EAA6BAD454EA21F35
93B0C11EBAE00CBFBB83E60B190C36A6AC2522EC18F41F738AC7FD3ABD6EC50B
FA7ED45DC186A9022967162A1F55641176C3B6700F1A00129564D5EFCBF2B155
90E4E80363ED652CEA14D0CD2FAF8CD0C5DE3C4A4BDCAD32202C7F74C30A4646
D8726DD73FFCC6D10C01B8A20B93FD8A6C6511665267B075C5D91DDA5FA44878
47107009B163709687F03E8904C670CBFF1BC3FC222D2C52F35DFA76D8BD28B2
DD16C22B540BD2E3DF5463B158F34E426E865DC8BAA0362B0DFA26DF487B9906
950CF0045080F87A9B60494D9DF409F39494094E39894FB36F01C6710BCC3064
B3896E28AE7389D260CF00835F589E0980EEF27FF33ACB54F0A6AD8849F98CF9
A3C92EA518272C9F9FB2DF0780C957CF1B9734E9F49C0E69B79B172EB3758DE4
3E0A91DE993454563A528E1E6F1F9FE84315FA42C53DC7E39ED55FDF46D9BD2C
8244631ED862E9D3F5D145833E88B2D41B812A11DD52EC624C2A432E15146642
40BA7C78226D4E8ECC5B15EEBD5FC0E4B8F7C3EDF3F84092A930362DD09229C8
0134549941FDB621D02C36E94ED84C9A5708441BAEA7F5123E4C03FB878D974A
D04A770977FBB2C31C4F8FF8BB1D4C9D9CC7C00A69D770C6CA0EB548FA1E4795
007691AABF3C7BD243EF56A477B3DFBCC8AF7B6FB67E620200B0BA869387AAA5
FA8A32C70F2B0F593A32EFF0ECC2377846B5673009AA4FB9CB9BAF821700E4E1
33C6C2E19A4F5D703731C17ED92C0010AE5C1F837CD1339A37719070DB1E3408
E8B1BF0F7362CFA24BB2F3D4EF7D39E1902C53053C20290BD45908186740C941
2068CEBAB515DF56E83B525527F707630500597A96A072EFCB143FEB9090CCFA
94F299147E0ADB2442E31F4D770C18220C5D77607237A69D66D69BA6A333669E
1D9F459EA1F9C81F69F7035DEEF3D9D9E29146FAABE4C113F0DC8A4AA515708E
0F4F783593AC5D766B378FE86691BB1283618D234ECFE8B485CD7F5DABB0F94A
BDD9C681FE691EF3090EA8853E8A1606389718635F0C806A7F79AB1668CB03AA
08FB060A2AD9BA942AC29D7605F00B0BFC2C39A98B88135FEFC62A958480A6FF
136A085FEF3A1F8AC88267A1B6600190E9D8D817723C4D739EC41CB885A42904
2F21E131BCBE2361313FB133911F9592B816C7261AF3D9F5E1728F408B8C6212
6AD761C6AF98B2DACF65736B83FE34300613AD3F870338D2664856D62E28396E
84AD58C190F60FB936D2F0880545C941D59CFA44DE81C9562831CD23DEC40E67
6F53286D45ED4A730B66F1600139D8A3CAC11575AB54D238EEE6E26212A073EC
154B21A663D18B4643E66382BEC93E8B807AB38A8553E4B5345123312D43AD2E
836939DC31F1BF0447FF90BEAD2AD29936E9CEC739A1402288B98D5C6585CC4C
3D373AB6530B16F574AC8B12D7137538F78D4A55409F16111EAC8BFB0D946E34
E5623D688379598AB20A52DABAF7035C85986DE59AD301B93AAE5035CCD07FB9
FD8DD7D1F131D312C2CF747D35FB85DE4D0D23158454E29255E8846AB1AB9E44
4B82AC000DE04002AD98651394CCC742D048E391EBB2D5FBCAE22D7270A876C5
A984CC9A15294FE781EB4D6148E58E0D11066B9D276CC51C86FEBB15424B17BA
ACFAD06CDD3378308EA4DF621FBD84163C13A65128994D74CAD21F2BA3834E8B
AEC7EDE0CBCF1AC4B2432B5FC671FC5A672F5C893C16AA878E6791D2D603A9F2
7E558E396EB858681DCCCD17DD90B90DA35A18C332D39E16F9F5AB7D81B729A4
6BFCC7340740A748F4FC18BC16B98845BBE333A7D198D4A7E85C6B452AFF1132
8F2850865F3F667F1F0B59E0BA6254A1055F5158F421692CBC815753145F3F9F
1A77D44613F763461ED764B530D2B46DD8E4FBB6003E4166DF4DF95E0AD32A8E
DB9588B369B19355EFD0EDD9F853CCF2433D6923766B1A50FDEB0587BCA6D9CF
6A1B1F79FD10C1B72D6702AE620AF391022A8ECABC9E50D69CC51CE1DDBA2549
852043B5A93B8C7DA6D16F64C3CF84D270259B900D8DED34B8A702E96ECDCF28
BAE94FE49CAB828959B8D7D1ED800D9835E6CBA7F3E2DB20C2D8530FF9C328E8
9C5355F29E7EE697BFFECCAE75C27AEA6C7238B58A2DA52D5BD2F0B2A939C424
76B611F1F52A0405C59C0E99761E066F7FCA3E57C46F3F924AD3D83219C02EE1
0212866BA7ED46F2B0994068C2F9F083F990F21EB7C1E429B40F0D8EDE5E0BEC
4080AE1233C7E87B7EBB40DE5211EE0D9E6274678EBCF4482E9D9773869A3BBB
326AB87E4289332A867E9E70E8260D6648EF939858A3ED3CAA1D77CB73868B75
7A68BFC53ADF8F88D7F4844A8FA4414EF33B293C5FA2F4C860EF57F9251FA9B4
5F45C3630465995F1039BE9008E88CCC394CFD3B7A672D73C22382AECACD8C2B
5B06D42215F7C2717D782B4A8F898E5CBDE7B1BA3BC19F9EB1B6EC876A8BFF9E
51789A1DE2ECE16909AEF8A1743B4C506F4F4A5A37C01FA41DBFBFB965C82A64
D48F663237E82970FC0EC032AED2A2FD2D948114EEA9B74F479D7737876ED3B7
46B667563C664CE01135E4E5E3741C92B9C813633E003B09BB6C65E3A07DA7B1
68FF8DD6EC74958A4667C36585F73E8772FDDAB8712D04A690A85C7497A50516
F5CB5B9C97263034709E348765174424C26B9F11A2747D4552F9DF5BB77DD354
58B662A0EA8643183649CEA500A109120BC75B70CC4E75B3E0863C6C72C97BF8
4A06C0941B339C7FD535832BFF11FF54BE1ADEEAC0BE35B4D7972EB00F3EE374
25A0C38CB958BCA2B9DDBC8BC0FF14DFAA5E94BD5D4AA0E355673A6A7A4A84C8
D8AA9CE2EA00D6C8480C26166D5A49AD37BCFC2E5AE335976E04B58E7339936A
5C51ADB5595B333A06C8EC4A42C6CD98A11CF4361F70B7ACF83DBCFB12980956
BCE2AFF75C864A8B5BF4494DAE890620BF249A218DE01B8B920F09E9FA8EE389
2A64C4DB0D4C915CD937F8BE19EF71F4ABCAD445E56950A572D3FE1289FBB4C8
5DDF72F5F6B01E30B2D9FB186C38D99A8A1C950D8D2057162E9F059E671D9EF6
A6ADBCB80A051B2F4DA417B2CC98BE9B945989C0F5BBFCD1B346DD76961F4391
25C39FCD8BFC7E107366EB90EDD55E44C526A14AE951E4A03A886B8BDEAAFFD1
70649E2FFAED18B816F850268C5550019FD00B0495D0D8AE67CF7B9B31610B91
8ACBE6C1B4F5419C8704101CCE7BD7FCE9FC7C29EDCCA10AB03099187ACC0F68
0A66A9DEFBB892905C3FD4C715E5AB1B0AB52A559569A0122ADF1DD84B5F9009
000B752CFA7E50A7F96791014712D83AD0DE6664E363591C86F9882372BF002C
07632B5196602AA8459C662760414C01404043E413839CF8C96D5117F4466006
E9A148F39874A1488F1F0458409D442D2D6FEB2422ED37B4105AE85529A9AA5B
E172DE470E2D0A4C8B6105130AE25923E7EB77C0FDF5286780C3763D9C7C2FEB
E8205F2653C608EEC3D845B12F3975C5EAFB95B45573A554034710B4A9DA4C7B
3F15FECBC036634F638E070E4BAD9A9260DD5D895AE3276AFDECB790793CA2CE
3A55A08337C9812303280228A1E6E048CC39F01871EB54E8936212F232DE54F6
59A360EAACBA07E9AE56AD38A09D81A2ECEEE74705FEE01AB1EA93615AFBFDD2
9E9356FF7AFE7DC3807891D039AECEAC3F500A09579E6055ABD175E39EDBB885
2D862D7D7AEA53A9EDE1682E06F2DD5D3FA827EC09C4A5745707438921B72245
BB149215DD70F36340D8417D27A83D007491C542505F3BD5D3C6CBAE6F51A337
57FD8DCEA2488E7B130462CAC1C61E80D658B0A0269A1FD38BAB95AA31DF4BE8
804458E1BF8570A08ED8AD3CD8850A475496BFAE5E7D1459BC80B7BA88484AE9
28F6A7F4454579ABD9055CC8CFB01373D2783A76887915A5D26105B85F6BB781
408C91BCDB000D9FB0095D463F5376EC13D4824C7CE13944A6301964EF43D124
1FBA85281C413245BACFE48254562C446B3C96FF9C9904AB73610509B5F94ACA
1C3579289B368EA2141B1DD5E631CEDBF79040347FF78D906699CB9CD75582CC
F9D411112F91890DBD316E6DBA7CB6C9A241A093B769BB09BAC9969C73808250
A8C0BAFFDE7DB3DFC7BB09182595C4393F400628D119A2A4617E945251D4DB9C
C36D6AD66EAC15B5B4B0C5D6D12CDCAC2A6A5D3C54A4DD511EAFC3716A486E39
0E995D1CF130344373C4F7F560170C3B05B09F16873B5839C38233088BCE6251
A865FEC1A4D157977EDFFA92AD4C39394D8CE0F5FEAEDAA325B79D294897F8E6
BDF8674D52F1A498223006A550EB524BEE1C167C0322F52C3B92C29F8FD05013
0FF7C7D8E4379909D667EBCC77E61F50F82E00DC6735CC4CE79578BD05A1827C
831C4D5256069855635B43A7FCBFCD73E963D7B2288B6905EC04ED310E37BD38
0A32270F4981DA76F47393094FE7016C6F59098D8404A626401F96F39B16EF02
FE1C1497851C7B11300C3D6948D6FF4B35E682C9212D044D41E87D9F04F4FA78
553B4C7A0BE6DF82C2EFC9E29419BACF04FFFF38E09A1337FBF361E35F61C382
06314EBB71EFF383DC58FC1C6DAA3105C475E5D473CCAB927F05187DB80FC952
418014E909E2AE00EC642263DA4E75154A8A07D01FED1C412FA9813664082503
DA2EDF90AC6822EA8E529B40F6458AEF4157279C6E9CA88F3BBDDBBBF4BFE1AE
855973129978F707C87462B6750AADA0ADFAD5E55CE850355395BE8CACE75623
A92D174673231CD58E15E23EB6FFC0B492E09549CEA21B8FE276373443F6F3C1
8D8364FB1869A2441A399D11328DF9A39AA3C6438D0FB1C687604D09B7D0F438
904BB943CBEEBBB19FD5A5ED804CF9A763367BEC85D9D26CDF0AEAD448356175
7682D67DDF250E3AAB891F2FBF04F730A814C7A164E5FB93D85CC5C2DA770AC9
4C5A8E284E4873BF236976D8E14AED4F06B3F1FB4AB16280601D4308FB33E7A3
4AFC3C1F745325FF863E1B1DC4F69029EA6A156CB165C9A0AADEBEA9D1A4C30F
51E9B375D24D089EEF4FE4DCE540275953E222C1AB7FD8AFB2C629CD2B0512E1
788D240088B9E7E3262FB036E1F51B26BFCAC3915932AAF16221AB7875CCA19E
45CF3721111356D1F3E208CC50AC51752D2E666E4453B5C1488F2AA4E984A613
FACF3C2C3D901BF499128ED228A0548CD9FCD5194B302D28999416F14B3AD588
05DC0020DA959EF524B8BE47F16C09662AD204C9F508DE64083AA7CD0A8F3C0E
EA6E6D9A0522C2EFD2FE0CA35B333D281640515BF9C595EFEC75E7370D1E285E
D697D69314BF897C98CDE5B9CAE03A7B30342322651F1241C6E2B89D5A96BB6D
ADF878EF8FF5E689AAF1C35F6938DD79049927CFA9BCA1F6164C53B762339293
6ABF6580C629A7592A909A4F89FBE2E3EEFC8D2986C5547F202F06D6C0255EF7
8529DB232A949ADE888AE4DEBF4A6BEDB34D9A09A5DE47786C890DA776307CB5
BB7A615BAB53EFF349B5AA436EFD8764A33F8308472B699FE8FFD273A2159F8E
E8C9F376DBA8F10B6A381975E9A01692A603FF9D104723BB02264CCF8736BE32
EBCAA12C5A7FE60456189008F10D3367C5AF4829FEF6B211BD4356914FF31EF2
2D4E33B72BD8EED2450BAF522B1EE90448387DC65F1B6E5D964834D39CD34FAC
CE6FE06337119B2CBB457DD77D4AA49F08473C18E8114C1507CFA47A27C033E2
7BAACA9CCB8F5FDCF5E10577569ACA9770A56D61D2D3F44841393916D4321D10
405C55F6EF171258CC1BFDFDF9070C322EFE02904D82B5EB5AD022C41892A3BD
971AC9ADC442CBDB2E7460E040F6FCB38D9E9906F4B5E57FE4B656EEA4DCDF3E
4AFB32361ACA4160EBAB5F1E239A871FA4898D084818FC9A74A40B2812488CB1
AEC582C8329607108080263EB92C9DF6DAEBA5C2E5F6E62F060655DED219AE75
8B5A5537E8AD1DA5DD7399829E0E9D7A0546E34F8BF633F656FE32F1FF453232
61719B0E92C1FB18CC4B968D70DFD13C6223FAC9AD3125DA027AB860E131ED9A
E9AE5186E222EF53C533AF3B20538B3DA18FCBCBC7839C0744DD5CE017FCC070
EFE546F044FC6F8F8C0E9E815A6B3AE0AA9CDBA8F8AB692D360E387AA6DBD6AF
825732901EE927E536BD4963C69456C8D05361231ED2E4CCC4BBB3D0F0A77E17
E9846A41B74ACA861AAABDE11879E3ADCF4CE6147FF50C0417243059083F5E07
E64BF7DCCF84F9B04D08E9FFB57C4DBEA8C96CDEAF8149911A78DF6691E34EC1
30A9D27C0C3532B5718352E4CE45863BEC1B5E8CAB53041472335EF9B6230D31
23380AADC1DCD8BD9144CC9C39D861CF039216762900C1A624AACA506DCBF9AC
0D226D76E3E41B681C19DCF72A684B37FB7BA9F1FC00D98E345EB2BC8999EC28
EBE10442617829C58627F62C3D6584699524E4E18997786BA72E91BA1D275975
3E96A327B6C550679B8B11F1B3F3B1EF24974DD6824A8E335AB7E672723E342F
F91B3D0D6E79725A6692D96DAC83BDF39425E7D18221883665C31B5361DD832C
513510C5F90752F6272BBE87991F755B2DBA4BD765F7A4F966BDDBC0507F029A
BF653EB0FF18A376FF6FDE547A4CD3C7D183BC25FC4D261CB849B07F5777B063
247CD0F1D75102D7BEB07B8C46CBFCB12F8313B7B7844ABB0F5D3B2EFB4950E0
4A235B039EFC02996FD9F97B621F174AB176D508B97E24DF8B61E413EDA36A71
E7B6110CAFAC612E3E67F97820180663525D6DB5D83E17A2EF9D954C1DAAD9BD
C21AA5AC9A56DCAA101DAA6BE705FF575048CC768BB8F138C44B681175F8FE30
57BF6E9FBCF3F635F1FD8DA05FBAF302F6875890DAF09D18C3EB567019261C42
C5D4291D0113204322929D8632C4BD136C89169D45718A88BABCB296D9248274
7C5247FC949EBCF49A2635076A7496407BF0D538637FEE65804AD9F47FD5D09F
E551F14295591346814C283601A5CF1C41FAB7DD4784CD74B34B93D30FC1EA25
3175642B9F566C11B5428F7BBAA66FDD4CA1EF02096CBAE3DA56F5B6CE1FBD5C
2A43529A894801ED552274D05E250335E05CDD95E3BEFC41E38347AED4C47D98
9666FD919D83DF85BA4F4B14D6A77044767539C0C886116038BEB06DC30ED8E8
9BBDFE4480A36CD4F92F8678556651A455077D64B52C5FF4B80250D312DBDF81
61E63B5143B4D7C02512F2C206936D56176E3E2D24DC32B6FDE5ABD78C8996A3
4FE4055EF24B8D188A8C01FF987A4F7ADF646EA9D2299BF1C0B721340E3C283E
F9BDDA9448283E6E547DFFAFA5F3DB26115C3BCA0647FD68538C8EEC22E84082
4CEE4ACCC707809188CA821FAB51B444154738A54B549345099531DC130E71A5
87A3935D91E2F1EDF54D76932130618BD819D5E9C4588AA1B9BECEB18D785FF6
3B4FC19AC4878F1B67C61136ECEFC056F812112CA2E5DB900DC43E636866D020
1D1E7E2E27FADCF643C0D7CB15E2DFD2F64ED304526ECB12044D3E4FCE173420
B130353EAC9DCA96223E970F89B6BA6E8B05DDF2B538BC24B526ECDC0ADE5DFE
B4D9C31B610435FB22758D56CD1A3E3D67162B98B249C3F814CC14ED33F79B2F
A72AAF170F20B33BA720B148DD29B3B4B551C48CF2F739CB2EC7AC3F669435FC
2DB07DC325BEDF738EB6D550863099C9AE6A1D3DBB5C600FCE192B694582DBC0
21CFE1217CF272748BB9CD77D0E25A9B84DB541D8D299C5C5F56DD69E7635073
B64DCDC74EE8FB43AD7CEBAA1E8AC903FB1EF52F939E9177410C96B19CDEFC01
A7C48DB7041AEA1D83C0F18DB47892D7A3DC9FADFEF45E209717A157AB0CF188
1601EF229753CD46FFAC1019EEBEF540640ADF732D0F3522AEFCA42EED20A96E
8F4430344988EB94048545A761892E4EC086B65D9CD4C8CDC57A0BBC0598B3AB
03652A6AA4522F9661ECA0BE81C9C8D7B6938CAD55A5115A0DBDF30CF3DC09B8
0F5F8576B477970D94FD85B3A7455B4BA424A58E3E3595088CEABFB137634D2A
E8694C53BEEBDD1362755C86A375AEA1A0FDAA7D46CF5216ADCB21A84A435D6F
F8A99DE3167E4031624F0ACB218614BE7415679F0173108A0C2CCBC094031C71
39367941CA39AA6DDE27C76593AF6603E7BE95D2B9E8B9F50EFE02A94198A797
4015824AA786C824114BD6BCCF2321C221DBB89611349FD2E2BBE984B17FE930
3F13428A68D6A1959288FFB445C1D0722FFD3218887D32CE599579BE99EBCC1B
00E0854CE7A04965F292B0C09FAA9B9B21285CF0544EE7E54C5662BD50BAEA04
E96DC81F6F9F742A10CFFDABEB1735AFE13FD1EB9CFB72156B8106016E3D49C2
D5D9A5CCCD4500B4E36A89586CE50FC9C168281F59F45D49BE85A81978CADE0E
E48913BB0C4CB09F2124ED1AD4B59F7861B1EECBD9D75C25B1DE870FB547D657
B91139CE999977C7F394CD7FA1132EEB0C7442A63B99930B70AF8F8289048900
38BB100E2332B0264C617D7B27C8492D7B6FCA2604FEFD6E07300BD1B42AD8D1
8CDF614BCF3D8E269FDCAE9BDD7E614BFFE78D628646C32C1D95C0DAD9F3543A
DAC875AA8D5657A0E4A558AB0BA93007579732ECBDDC4D5FFEBA3F61D35AE7A0
3042D2F0C84EB946AB451333B779E11299E7A4D9E7D8D370CFC9EAA5658F702C
CE6A001C80A5CF302500D3F3428D883D166829B22395AA2E2EB6CD7A4A50AEED
2824980D3B052BA6ED7645CA09F983F2A858182EFCF99114F384B2D69C75A42B
747D40CA124E538CB207A3D156167BA2B5BFF816F894ADD428040350FD4F8AAD
CD73CB08A376CB8E95E4248C4A10D782FE64293B5FBF0A378306459C022F4127
F2E2207147CA6641C7DE5F26AB8FC01951A22E97B68B3C6F723EB4969D5589C5
2B018E46EBE636B6214175D6C3850D9447FE711E158D13F55A2A587261AF1A2D
7EB2E0DE91E4C8FBDD0536E7C70D3AC58AB2DFA3EDD496C18C8974EC90FEEC06
9B0F155E56DB3DBA9C43AB54200A68082FF383BEA29EF55C6ADAA3B2B49B17F2
97793FDA280740ACDCCF188B7A30DE453A38BFE3EEEECEF5EBEC93DA9D3E919A
944F3ADBCE07F54C53C5C927606C646E6720D7FBE5A6126FDFB9D3F72A9B0E07
A2F65B9923E587A4AB67DAC1278A3549585E94245D9E7E63EB45F0D1798271EE
C0944FB174E3C63454AFB214A8944B2299D75F55E04091FE39B66B4DDCE39F3E
590823590CD7C75BBE8B58EFAB5927DE3A06A64B95E285E8AD93D568750046F6
031FC8E9493725C5A7D11765025B996B24C511AA2924EBAF0F1770E08C365BCA
A589B9FB46E97AB020DD38D71B7B8F00890674CF9CF62D79BB3521128814A1B7
5DD571F4670654BE16393EDE9646B2D979488D756578B11218B80E9DA59A3C9C
1BD16EB61FA074B8752FA9D61F2EF71BE4A72607DAE2B6EC8603B6D89B8AFF8A
4EAD2E627D4EB8151062BD000C1F8359A11DB860D2CDA8FFCE3D416C3C62A053
9A035AE3749991DEA439FBF139A16A55342B5E4FDEB32E539CD690B41B639E21
B547FCF698B77B1E77BD00BE51509F685173FC157CA62976128D48E72C10FA60
B391DD9F3CC8B68DD5F343C14C3C7AA45C670399743B57FB3F215EC34D0BDA6B
DD5326FE66ECCCCC22EF28B549BC7317AC222D65C592DE9810EC5627944F56F5
F3E07D89A99594E1DAA5D7C29EB2D84E38E27654D2E8551FB18E726B2F474083
9E9FF40CDA511A96571999D2B63A5802AB247E9FD612C7762E866A6E4C83D0AD
28B08449B05F65857EC1CBE59F047E3956309ECAAA931850AB773EB02C980C4A
2C3048043FF23BB1B8C34F99BEDAC99DBA48E510C064F95504C55BF844961F1F
5F3D690F8BB9427F3AACE64BE6623CC4CC1A97C5D9896F2BFD0D101F03E134E1
4130A4093348028CD7D1AC997867EB021731B3080974204043938E7238E140F7
84C649F65CA60EBB2461AA63CB1F7A4969B62148DC96A8F6879E2135374C70D7
9D19EA9EFDD478170BC92A54ACA688D325B8FB6FD35D8B2A9420802B29FC376D
166D5853E33EB59B3FE4A32EA3800CC8AD97D85581F3C2FE513C93C7EB2528CC
8B0472B5A579EC88E8BDA1D0239C57FE699CD9F0CABEEAEFA2A97D02C82012C6
BE988BD3D92EC5CAC7416E4ECCE80BE54C77342B0043344CAE0031885DB8D0B7
2A02E7FD4C3EFF42D9E05C4F9A8CF7C5416109CCEFEC324FD2DF976CFC21F029
256E2F1F2D41FB10A63104AD5F9CF990CCBB01C6ECBE840BD72FFE5A01B90848
A5ADCC95DE49241DC602F4B71F8E0DB4936FF8C8669EB2DE84B7B61759667B7F
6F52E578613C18F95B4ED5492982159489729ACF9368F03D809F682F30529B3E
E149554EB95268A1A07E6E7BCD1EE19C8DF3AE78C04B549FA1A623A71A8C8C76
D2502BDB72A5F1EF6567C1B6F9DA250BE4C9917F3B35D43FA75D5405BCCD0849
79890AB29EEAE0A954A77A254CC31833BCEA16EF5F0116A7351DAF147B6C4968
91B9F34006745CCCABBB944146B3B7D9CA452453C825B92E606247E509FC880A
CC901EBB437A6C1DE1024E5FCE8DDE9CD3808E97BD98FF58CA2C6701C4D3E399
79022FEFF095DA482A48E01ED062C34B85229B3E5A5E4685B1BC45A841EB3B93
900383C7F7FC09358FD5F673DCC906C7E0FA7711ABED2D011083A38A0F478AE6
465F7F11D948FB905A29621D17EB67ED908314B0457C276C5B7F7D603DD37541
E344CC0803206D85A3D447A4D946BD503062DED9A4E6F58274043C96AC0D7859
734D3A377A6AF8C5EF8D5806C6446B64B51835BB1246CCF238F394F8BD72279B
C3B0D288DFE5E5B0B7206EF286D4D709E40199A49F9846C53E362ACF0C0E83A3
C7BD7646FCB6C28886EC210A1F84DB24675A951D247C5A2E208983DF2BD52684
E1125277241FD87D28934C8174C2AA327DB960E15955E708A983F437204740B9
7E38178ED36221E238D277F4B48A3A9830ECD85E92A8FCE76F32E61F3DBA32BA
CF3200C869DDC5AAE04253AC240F7A64999F2421960D2B25DBB80C3B25D069B2
D7B0AE6C673245C688EFD1407167C20C6F31801F823E6B21EF61C7E869CF3B0A
FF6F1E5C6EB75D98BBB45B91E0281845DF8F8927A0D307DBCC41D533C8D68D06
96621D7C1479469DCBDEA1F0A87448C01E4A64DF3F74F36E773AE887DDE80552
8C272B246291566F85A386DC278C8F7253779EB9D278001C908C1019DEFDA17A
C2E515BDB3D6B2980655EFDB97B56857334E0E2E64636F77F4A0CEDA6815412C
9200C5AA0026DDD25A5ADD22C031A2171426881BBE4090D1CBFC4C1C9F908E29
6AADE1C27B8F6888B20CDF4ED4B7F2CABDCDC974EA78B269EB284A42234038F1
2E5795683F27D267114864FD966BDC275557607AAA6AD59AC21FC387EC32519F
4234B7ACFF3C578C6363014E8C987DEC8B3BFFC99FEC4E818B2F64AA3D78C308
C290FEECB6BFDFFBCB958D8939DAAC4A2EC5C445911CFDB94AECC50946E35984
0B879EA8034AF404EA960F5A6CBED5C40B669F0DCCF9C245AB58388D6060D809
5361657973BEE789B1578185F87051523EC8C785172FFDDED3B859563F8FEAD4
BA3CFD705740C6AB2076A5F474B850CE6400C544CDB70573252BD1B8AD4C61E9
683CB5741A968F8B23FA77F42D0202BF127B09386BEACC3228335B36B9666EF7
A12749EE6C8DFDAB2D605A9B528E0E510FD1B3EB121BE4D4566A24D019F9C52F
34094B4FBB29B9F871A66D7013A3FC214B1B36F5C074919789F5F428575520C2
14B9AB6AE3A3955E7D5B75F4F7B271F5373CF6DF45DCB616305D6B55D668C379
5A77AD1B5502132AEE21B2EF27A4BA4DBBAC7033930C7B8A4BCEC4B7FEF3B4BF
6C2F5082701E985FD40243D39EA46C31410337C470077B9C487E1282A24B05FC
43669BBE20D81E77A13D42F5517FAD1909D3893147BE10B839DF0E5EAB1B036C
24E04B900120FCEB6F4C0AB843C46AC6C97DA00ACF82C54A4A49847E7FE2ABB2
B591424BE5016B74116233186382B5EEF1B534EA12A1C2628F9E83BDB1BDA7D3
3486570449498552A59627BDCEFE5A99BDE977FEA781C3B803C11E3F3AF35361
F090FD604B5F3A97B78F6134A594E58E7FB05453B9AC3306B7577D5CD59F2D59
609EBF9874DF0664AFC1A3973F633314B471F3E6A5BED82B2A1468CE1110A1E5
2F316F30313CD1A8718943455951315ED2012C878CB8D70022E915D8CDC31652
12F13026683FA89F8D1FEC9C9B28F84D3670A8A440DD5569A5EBEF68558BF319
D917163B78FF7B82DD638D18C1FF4467D1D2E95E6B8066172C50DE5708B08541
06EDA403DB46B71B95FEDEFFF491AD114C46F6F7C885DE98F1AA4E0E30E7A4A7
5697F855CBDC9D16B664EA1BE6377A970C40A1104FF443B6B0F7A8CB82CA5875
F482AAA9E6AE4883DA73031491C5ADFEBD65085698A5676F2DB5110A810AB64F
C1331A5A0E9BE98D9B39C8F682C245F4CE7FA80A90D472719805A634C530FEDE
33E389C9434903A4DB4A65CBD3227560AE9F763405298CDFEE9C46D30BF9EC5B
1BD1247F8686CE4E00F2FE869081DBF6C3F5CC57B785071C0568A8DECAF94BD7
F16143829D59B99512EAF5002BC8001FB163DF6FAD07987A2568AC0E749B44BE
B86F319BB75C3D3238EB5EB9EE007F7987874869CF99B3F19769C17EC4F6112E
16113AFD06F2B219A6CE3EB3E95BFDEB49EAC4F83628E491CC9EE316D219C4C9
9CE88255F9C0B7BB08333C95F10CA2CD1B517B2E59BDEB7FD90CC036E1922F97
959797619AAB08E788149ED82E45A2E80ED1A226F3FDDF289A23A46BB5C426CF
763FD12B2063174969D4996F149E1AF26EF1DF5A8E831A8000571F602E7D9131
1B7ADB69438C7A62599D1F3C4A38B497F140D0B03E4D99ECF4FEB84AAACBCBB4
5329AFCC86697B0E17572B5BE906B5A444873800C2598804DCCF4D1EFC7C0715
F5F03DE7A4DB63F61E723751FA037FF07BFEA7DAFE7D087F619E6310CBBC224F
8489093A883C113C2E7A8DF0AB9C9B35E71B0BE1A3A7054C7C8FAC2DED3690C8
08D50EE3FB532B9F3BEA0EE8B656C3B27A94CB1FFB751B46C7972BDA6332A726
4A3B2700DD72D12DAE5A1F73D1AB651FCFD41A5E053F4613B62F7EE533337F65
EBC0B7D4EE666851803D65F498D97503E411805AB21711937D00439E409323E7
7273610DE7CA6025D67C60C0EB452D3E1D708FB23AA6382020F7A4D96AAED3B7
F62E593ADEF46BCCF5B027DB93E483AF95C4287AA27F7083F8F627D074BD3FDA
C64590A3E6AB0DD549CFF6DA1F222E2CD4FF98DC02290FF6E947CE5062D99BFD
E101CABA52B44ECB051BB671CC481970FE96507E1AB0CA0682D77582EC328894
4F597F8249C8AD63CB0C2E509DF266A232803F0A84BAB0022149821F72337124
2F1116B7125D6201444065623A30CB0035C5339ADAE7DD2CA8F7A1787CD7CC5F
EFB3ECFED7273E68D783C863E2AD0EFD72CEF40EDDB0AA86832F0084067806B3
FB5DD36B4B193E2562ABD7EFC34666B2041AA4BF481AA7B13957F63C45AF51F0
EEE1E3278804DAF68819583508D1897DF0FDF9E1980E8715DB1568F8B35F57AA
77C977DFE6929121E532C6604C059CBABE2C9A512F7954BFF39E16C722AB4C7F
82297BA7530C44B6A4A5185F2AF9D93CCD110AE01EADEF63C9B2BDE2666D276D
700ABA8610F60938C3160694E550E6241447EF8B5FC1BD27FCE51281B08A70D8
B2AF202815EAAD88DBF11B1AFD0399460C38A44F12397B6AB3F72F547622F493
DB770792787065FF19DF02D82111748F6641EDA24A1E0120CA12E0C18915DBCB
0EEDF12334C4796E5E888298D94435640F9DF79A15FCECC7B62A018C995C99ED
A5C85207691E5FBE8F2B96F9FF695F7B8292573F782BA7500249E24ED01E5205
36715AF0C7E39AEC785315E5B7C88FAF8A6A47F399E09D4ED56A73AEA5A2B1D5
C4C6A2BAE89A882B5C0A98DA2EC4EF7C437758608284844C50399613D290EA99
15E609C9C448CC5FED28EB53EF2EA9A9E210B1DFD73D6FA0707305854DCC5FBB
52F89A96B32996666FEC7D13DFB86091ECF5C68049E736664251687C70BAF520
429A4C13B9E70C85E9970DDABBB47458F797E0BF58B3ED0DAB5EC21D80314240
7AD5234F1FC36674E8E09462DDDB8B10AA88179260F7A7B59784D6FCFED33757
04DDBD27629BAFA6D2BB2D10A2E3E41E2F54793EC876EB66394E23274DCF05CD
CE5897D2D444086619C435A75D972AC95E690FB066E45B54140D903A7459FF25
1897BFB6EB2B35F5D6A1F5704D26C4C670967C04485BCDC7455A65890979C443
5A91E61BF69F1334A2A85BDBF5370FFB8EF5F01408BC19E5195BD81AD62ACA61
75FD26FCF274D9C65BBE8CAAAE88832712277C9FA3D729EF419D292F10CB5601
1680DD12BC9BED7B1D57DFBD94A4FCC106D4EE4FBA5D9A50B153195536AE6A6E
83FC0D04CA55D14766950DBBB869C08B929591DC20A23F814F53B9901E9333BA
C0BD21E3F9CB72B99D5B72F5453E5E8E61DB18911D454B8DCAC484E17F4D8771
BFC6109E6D709951694D2DC0DE87FC4B566455356E0523E89C9E9FF35BC50133
B946D9CE21F9352A3B2C0C3249878EEE191219B406E684B70B4B84C26EF440C1
06C3850DE3553A64EFC3417B02E7410BDDC6DB3B426B0AC9DE1C3B8BA42D2FE4
F8A86E2AA62BDD7935623265254BDFB5A4974FABB08FE730F5EC7E972BC68FC7
49E8A951690C181F48915B4A6ABB75F45175A3AD32F14BC59C4249D116BE883C
2C97046148E46A261B9CC6A56073F9BBDA1F2BA3A42EC1FDF11EC8385B3F737B
A6157B5E1EC2C3B58D6C1A9D5A4E40821EE8089BF5521A19117A09ACA7EADED4
F9168BD99EDC1FAB7008CAE5716DB958657F45C26A85EF14721A4C192DE48405
FADA89CBCF1E4E0BF784EBDCA4468BBBD7877865189BF48D976D2B20FE3C9565
60BFF4CE84790880B8AA3F061C958B7830695A0F7B685A88802E70BA474F39C3
E2C87B82959E28D7463E27191EBDA8A7851D1B8CA718883FA09899534EA8CE18
5C48B9358EF9A1F70FDA1D7D79F2EA12E835BE52626F5C6488D48696C28F8E2A
06C327B57108030856E5E8BD7F439982F6CAAC0B31EBC10B7217D83F2FAAA760
1D37C29BD183138E6B54B29A54B1DF8960B6F0E23AF0240355A708B5A4877F29
8F03E5F650F9BE523E999B62DB682FF863B58FCA29B015085C2ED8BF048D52A9
5B82D9B411E854B591454DBB94233FCEB9748E03856240D729CBDE3AF64AEB04
F6D51941D3C89B1DDF00916A4F96AA45A278E35A1F9F8D95C891DC6DD1CA0577
7BB5680270777F42F0C54E24B71C82212361760FA0A3A619BAF5F050AC8F76BE
9C5961E7C6928B4A48829C62F44050A1F863CD2DFDDA53C088251DA32CE40D96
1036D3F123A413DCB2385E5123E055F8DAD35AA71DFEDB680983C968795E88B2
A2936AB3C937EAB64903AF2CB648E1A92F9C0483E616448E4833DE16465B97FD
59D8F2B23E6E244B5E97728D698F0138D40DD824965922B3EB2F251F386855F5
55961A4764A05FE6F80F289533E1BFAAD2838E66D1D870CF36728AD04F42E30C
ECBF0FDC11E0564EAB15D3004933A14DACB95892829A3BEE98218A430F7C61F1
BE6C27AAC68059D62BC28D1008107BC48D9C90D1F42BBD12A3F5AAF5241185D0
8EA35DEF6C68D1E424EA32670F2D538AAF4C48CCA1A632E58E65D5036D989D16
32B1DB06B12234949582B2EE6339FA06E8E43DDE13447C8DCDE49FFEE44F3E38
E3B8D2DA1375742A06D66A3998016F858D6608F304E3C1B9FDF97FB541A59846
68609F66997E964CA3FC7ECAE9218A915BDDDB73DCD86322F31B354D93546A29
395A5BE66101EC0A83496AF08322D0DAA2DE6C0097EC1BC552EBE9B4BEDDDDF2
7B0F00DD7E5048D2036F186F32D75E105B6DA98E8A1B13FE0F3EE994EA5B249B
7A07735A36737C99E1B7D6043FEC3CA6A46508DDC3A6B60DFAD490E35D07F12A
D239681870B7CCD370717B3CA1B7EF6116284FB963143A2DBC36C75022EB8390
9CE7DBDA64FC67158C6C1F5A3F060FF42046B7E0CF8BD46EA87E51746BE9469D
50035F5D3B5B65D6DB8C0B1DC98D79E2CAAB60B5C4FE51CE36D5DBDD02D5BC8F
E05AB3DDA93F1701EF6B1454E8668DEBD99CEEF4E3A931BDDE405652D1B4E21E
2088284FCE15B098CE6177E4260542489203AB98E63D0D1F9C04D7F814A3D919
9B4A0F6CD606F7273C0E52E652492F328AC892E4484A455670981E596961E863
85C540A2AAF0238150DD24552F31CC2A6A5C28111962F8ADEE38AD4C2FD8ADBC
D9FDCF2A169E3E990DA7937CF76A43A35653253D16189F0CCDDFB73B707F2811
B9574A40A13733037B3072C488ED6D4DD0A6D87EE94E783D9B3A2F97C83025DD
7225A29B143740B489029D6D08CEA99839EC8C19FF2989F0F5962C2B11E4C4A0
5FB897E268F49945E3F83575042E8CA30F3B8446B108886383623D48C6FE979A
4F4080AFBA6FEEB9C2206CBA457E99AC0A140452E0C2EDECD9DE3E91CCD5B002
FDC61C35720D6771090B5B4F3A776A0589F242588B783D84B5F4E57BFFFE3006
14371543AAE8E5F3879805D13F328274EB56534613FDBABD70566E07EBC37F73
4BFA6CAB086B9F45C32FBBA4932E1F0022D0DC0B759CE37A82C905802581454A
BB4C97FA9189142020826A2C5894999746ECBE03198C11D5A7487784D5658139
FE3646B680BB0FB087E055961E8B38579FE7E7B9A29DF26B7CCBDC5680292E5A
01B6E29B0D02A840424A84EDF65562A18C3204A5D5FB6720EA26782C59DF2A8D
383A09280F36634BF9DFDB49745C7E6A72A30B92E1D6E1AEBF4510C724AB326D
D8B68822097AEA2735E8E862CCF28496AEC62C6D2A911734086CF26F7D7FED1B
B6B48B01ECC02E7933E19CDA965A8E7B1BA128C91C36EEE43CB41592BD13837B
9EC9735990F0284D4E5EFA64C349484222A9FCE7DCC8B58F6404FEEFC19EA563
567DF910C9F3046B200C5E93BC86B961BE463E796B8CB995B03EE89D82185B3B
4E77769007C7BE803D7E021790A1443758736475A38D8E5132C5733B4D861689
1F0B6306B6FC72E4B1EB87B2D527B774C765D8AB4AD26442237EE2121C14F116
A1114838B333EF11AB85D462693EDC9C5A4FA4A71EA0848A9364BA6446D5BCEA
5B4EC6F9774FBD896843C02A99F0CEA71BCA3AB5D091DB4AB4D8E0ED0AC08192
3362F45333450D721006F050AE905B9B6ABC8850B6F484BB6D97E6D3168D7C17
CAB96CADFF9A8D8CAD687DF69C3D8B8D091536385A260C40B6B91D787FA3A242
D978A47B6B18BF07E8B589CCF769285284FEBC79674B45C3FFB85C10E667F3DC
E81057CFC6DD8400B18B8BD4F8FD0EBB3EBC147280721F66B97F925B0E4F9868
492D7905CDC63B6722EE11E194C6D85D1DFC612F971441E2F1654A7E1F72080C
B9F5183DEEEA1B0F9D0BF350B52BD8241BD275A18ED719C2CE508202C090B4EF
B119302A9052A0C01232A5771564C8066BC70608B3164AE96FBA9DFF538E839D
5BD22420A2FDC02D8E02F240A63D2F9E879604C73082E901E043F7CAE64A3143
EB67A21AA1B06249094404C005AF58BB2A6DE6BDF018CC135AF23D98727A31BE
1DD698E7044003782E8742E6818EC1DEB74BB9E50D9A56C84D2A25DF2E153483
344E4BBE07BC3FF2A69D6464A0D68E4C22F0BA8459332CFA088ABF529981D98B
DC7A1EF7285AF04F70814177CA6C1A954131B592C09D9335F1B4CB5FAA2BB5B7
F70B3CADDD0BA133155D0549B950EBD21D19C3FC51E19D2697B4CF9F8098E332
30DAF7B9DC0E97A1638E02DA29555A943E29244ADFC0A252A70932555D2B5985
EF99E3302B40CEB35592BBEB7BC05AE1507D26BD8A2DAEEE0450E4C446AB05EE
E826B76AA16A32830E01B7E1E80ED0B74B84B03906BC34186BE4E2361E3110EA
70E44910B5E3EE2A3F7D6CD8F65EE27264115BCD8AC8A770A6124DD8B7746413
3A80A344A4F11691DF42752324DF2383C4D9EEB415FBACC1607D079DB00F3379
79DA04BBD485BD56300DA794EE0076DD98E3C88E4DA41A68F9D135A5D11CB6A9
E46A25D894FECC0247DC7BFDA8939AA8D6F1F3F0E9FB45D05FC235B4FA4282A4
3233ECA20751D060D9E86FC14974E30715D667403D65F73A883C85435A512014
7F9B3BC68E2F91E9561F5FEA9879D75EBCFA87E94E62411F3A86C87409BFB2B4
972340FDD61392BE9B0959CE60B6DD4513C1F1A45F3CD7BA00458FA7A17EB948
663E008A7F24C43F5B4638C111385BA2FBAD5B8A483EE78795662318693FA239
449818DC5555B89205E4F1EAAA807664D6618FEDF370DC69097C7A71375DAB3F
8999DA99A41C7E57D33AB1EEBB59E485F0D0233F97951E600C5E800D096BCD7A
1713DE7AD5B639946FBB4EB0E5BC4EF204E240BF65211A22EF9A206249548DE0
9BE1862097BC700681208E668FE2A02936E8851AF4C431E10A25CF3D4E83BD44
E96C7C5ADBCEE654D622FA9090FEF332F65D519FE20A80737145AC6CCA5902E3
8111D213E8AF5B184DDF5193B97AA25A227D269776993FD75F6762AB9F2D969C
ECE3555E3DA39E5BCD82B4DE1097FBA4DE7BD4F60E2FE3929597DAC67653783A
51198028FF2C46980F42821A0BC9D238A641DEE23CD2ECF4E48D9C7B6CC66941
1D14C90EB2D857B94E595E5D66EDF8A007C8C5190B0CDE530645DACA39CDB4A4
6F42BFC3E1AFB3DC362DDF387C0B13299F3EB9A9752E7DD3DD6D2E1532A22946
C6710B99F0B86FD5FDAE4C614FC41D6BC51E2F707DC1745B7A3D29F65FE44988
1A1C26632E9BE2E638D1B9CA04634010A39182F77754CFF68E1DAD714EF0EE4F
9F1687F432C408E5A1FA942A4E3E66EEDB334BC61D9C644E3FC735992904D307
A292EF2BE0378196A107DAD0FB7702DCA95C479400C1A59CEF4C8770D3E62C7E
EA9759D337AC9B980B6D3A86FB04163ED36491F24D7C3D634B25C2CB67491AF8
D80A714FA9764D1F94A025EF53C533AF3B273AFF1B985F869B5ED92BF513ADD2
A34677D5EEDE8D2EB320F39DB90C3AC9AD11247C7876A4817A846A5C5040FD95
30B988DD82FFD4612011CDDE53EE22DE1EFB9A833D3B8241797FF0A1B21ACE3F
FB291D964E14685ACD81A67BDBEBED703BC7366ABEDC18701F715896C85FBDC3
38C3B578F341F9BDE49ACED95541102E45C982081C9E5AD108D7D1B6915E0885
A6AE00662C504CDDBD216B3A818887FF6E0D5A9099C1566F99E3FA1F046F3571
8C0D7924EE4536035F6AC83E492591FD84DE70C728F23CDA3101616BFFFBB3A9
B62A77306BA76F1A22FB9D4A8EB84608A5E95A2593A77AC3B48D46470F9E9B2E
E00D5D6DCDDE1AE858AB0BD573C2E4B6873A18E0447F437F24D25C6D3DE6AC3D
D591F1996EDED4AAC6E3F62DA29B98C841715D7B48A70183597171267DD57994
3734EEE5B8ABC260DF30AA59D086A55BFD62091572DAE3DC844BD3047827E355
EDE2B2B915DCA5D50A7E3512B325253FEEE5F743CB959EC5474049A693CBEBA4
E07CB9B5D8DE5E0B1B7AF3091F25A923EA9D4730372E32CA0817B42639F59517
59F7EDC36C78E30CCCCE4EEBEFA2169FA75AE50BCADD64477D9526E492876E68
EDFFADD2E4AA3D5831D8B21D10495E7F26989BF6328610AED78D0AC8A6526EA1
44ECE9E4263866CD683D9E2833DDF7F0F8E5B487EDC7DA9A8E1DEE273B2E7D2D
F24878CAA34EAD81BDC76197D97C6E24753C0261F3A55F821AAFF780307168F5
F61A1C90A59CAB8A1D161AC665CF55923200F47F86E5BCCDAD4DCACE70E5B43E
1AA9C337B72DD3B7020C1EF7951AF8AEA631FFA858E873889D9B0D1EDD7837F4
AC6D46663FC641252E8C0EC79E5CA64AA4DBCD19D2629641B5206A5A0BAC1ED7
B2DCCE13890CAF20659601549A6F4FC457D8D90DDF0026ED1A686EAFE3CB12F5
3BAE2904601397AC6124220C280E417BCDE241F0C2556BF2963CADC84DA9CE87
D81D4F2306F0F4CD8882D5591FBBECF2CB5C7C49D40D8F7CF28DC0960B055900
D32510841B9D9865887D4EF8AA7AE6AB234B252A506EA2EF9380D865B2DE12D3
184BD3E1A1F94AECE2622F721CE2EFB6D713E5184646740BD790BF10405E80AF
3C1B82D2FCB3448230C4611B33767D290398B07A09A94DBAE60AFC7FF7107697
31545B30E4232333D0D851BB55A87A5CFBE2AE94274A8B1AA257C2DEB994B26E
538D85FE872DFF48DCB87E3F515781C12C4ACCCDE9B0B9A3254137D441DBBFCE
C12C15781B46FE35992F9EF9BFC94C02D34EA6283981BC946726FB07C2B38919
F9014777E74B7A6314F36997CDAE9CEE2A0F75DB109D6A9587CD6B0C5BF54A30
D4E3072F05FEA17AC2DA760514F3096D12ECF20972B58E10A8538F7BDF2C93AC
55C518FC964BA4D7C1B2522A37B14D7743D97257B4D565B443C53CACE9535303
D71F3EB7F12E73771EDB6B5EC5CDA47D5C15974B7EDF6D7FDB24D5F390F6DE31
8931541B8D17AC88386A79B3499F99B48F8A92F37C39A8CC22BEB6E7EEEC6CA0
A6EEF6DB3AF947649B67D37B6B9E329012FDA9AB7F939B930AEF206A638D27EF
C1B3C06AC4D930B1E4A758D54A133323F225A715CE72F2DAEF9F2F987AD65FA5
4A1BD686C37DA1E5ED23FEF6B7950098A32F2520D1B2E5F19762F71E06AC6A50
E910E9A15782D91BBACC8F11A28199B3DCC6C53E0687109340E4EF75790EFB72
3E8DEF4B4E56389A8C4DED2AE3D39C42F5A3F4AF3946619AFA7D123B500EE628
A13C1DF299898AA10B3D956D729E9026B048BF61FA390F64979D77A4C7C8C2D2
5068976DE5C947140AC48BD25E027678DC1DA61155CDBD944FAD721037E829D0
98A1F0E1CDFC545407BB5EA008BF0D4E0E8DA951B0A201E059EC4B154FAC3E52
215CC3169A552B4F2B9552C8064AD6380ED075A28E93BCB6A6248A70FD5EEC88
D7C6D1F379C40365FF924930B5FCE70FB52CC4965C5AB4A23EECDAFED6774B61
B7E034FB5E4E686CDA7673DFCD596C91A021EA8A1C76B8A0EA55D7FE556D640F
93FA574D34252D99214D8C40142D825FEEEEF386E67964B4208569B0BFCF8F2D
D846DA947BE800078B5A9BDA85CD04E66B192A7159071A89D5DB40B69F81A077
4513C9CF98ACE7F8A4CB9C06F5A2CEDE9C68F323E4BA7FFB2E5D15C8D09D13B0
A98AB430342A8C76E4521EF0083996E4A38C1576C9EE90FE9E0A9F5EC4928A31
B81124BD85C5BFEAED8FB39E77FE5E3661E3BD0FB4DE3309D9D0C9B8553DB4FC
96FC35ECDC38C3E3223F9E340C61A4152BD8E9166094B03E1B344ECBE0D67602
4887E4214D3FEE87830D5C3A01BCC9042DAC2398714E9DFCE5ACBD963E1C60E9
52853129BEC6DA094011C34044965E20BD3D283BE2AF922B5E5D05CFB53BF721
2E2933DD050FB0820AFA1B2ABA4A9FFE6547A049AF60C860AA9D2A82FC9AFE79
37D0B8B0EC140D3452731CA0332AD67926B0FC08217314C7371857D010EF8F6B
4AC2C88C8437574C3055642FDFC110F2FDD759327026880FC15759128D6CCA81
F95F17FA11AF7D0A61C666D3D5F8C9E32673F7190951C58005F18A81DA0BBC61
8A937C4159C91A453A8C4B09BADB9BC70E96B31C3CE4C4F64DF379F6E9B6BE0B
BBB409421FC72472E528053EC041E396333C90480C82F2BFECB7E3B370A61900
39BD94F21DCD05FF887330D1BBD003609157A217BD7A0F49DBCA253B5A47F447
584457043D3F02DCBDD7E2AC003FF35033C237D55F6B18117AC6658D31816726
97BB545B4C85DBAA4CF97F37FE6C3D8E92D56ED52734D447A5DF73FC46E9A970
4144D16D6003821EABFDC1F053585739C741044AFEFE8F8F21CFEB4CCC012FDD
79FEFE04CD9B06653C7DE2464401EA599AE249D8A006EA1FC197E1234670D192
7D8EA3CF2C00DA2F1D839490CCAF4CA8A7F431FD64EC834127B278FA649D6626
B1BD577E38DE7C917F8670C41F7D36E865797879DD5D76F6E064184D0C2D5D6E
CD63A96C02BA457190D94CF5BD84CA8D0DBF7C2A65A5A104B8D5F185AAD47021
DC85E9BE2F46922C8FDA5BAB178A8865F159B5135B8CAA9F3EF6B32AF2DE2CCE
E6BADA0AB587AD0479EBD6B094B14FBD8953E62AA9BB968DC08B75C0AD9C6073
0CDB6C87A6D2ECB9A0E6DA6D26A37041D7DCB8DA4571C709A9B2FC1091CCA094
08587DA7A93B760B3D6A6C9D8552BFBF3E3F268E79ADAB72D1586EB0E10BDD77
36CDBA698862377B29349DDF5B51441D54CFF953B8976D0EFAB9122DE4207A4C
FA51733BD90F1267C0672B2B2504194538BD8434FB061E8D8C9AA085B3B5A87A
04282C152610C6DF152CD38145B5F6F29DD4CA99AA88692E6E873C2E1E8D6DE1
0975B47E919B21C0A1A2C9A486227CC321BF2902118F9D088C7B93BE8D94B384
5E15A1CDCB66C41CB9038E83416D98D8E18D788D6B050671E1ED55FC88DC2080
52E93D23665172A82B9EBC8F5934D6004370D2D91DF4D0BF4F7CF317149562B7
0BB27515F34D60DB3CCA2D62F2F3BF9B77DACA868F05DD1C564A45D3341C8AD0
ECD23EDFF11182E789BEDBBDB0134E6D6083277D8ACF36FF0BDBE4146ED2D651
6B1C7BF34A0E25EFB2AD7503D23492E7E980B2C435ED9B7EF777EDF5F4B1F0A6
DF35BC2A47CC76393F477FAD9C76AE907AF8F20D293F17F5D8B2CA1B34280425
9A9BF98A20F98696D81ECC213234FF18250C360111D050192FC30B277DC536D3
916DBF92AE7399843193FB23721F1CC313E93350914839FE96DE745DFA79F106
BB7E60303D8A384F60A604BEF0EFF30EFE00E05C08AA50EABE80B560925DAA6D
0E2DB7A9939B29958A10424AA8ADEDFF577A77D6CEB362007A28C7FD516B1A9B
E2D0D207C80CF9360CCF70AB808FB5463133418C76C371F9FADA0222F5D1D295
94162682F9947E1A097E36367B9D6314831249087768244A2EBBB9310ACA9EF0
5193524C4E85AAA0DA6A725590E407C2CA961F03D1762ABC486E717CE9A1DE3C
330690DD2DDCC634D3D634D7CC06195116DFE7AC820C3AC14CF30456C6FA9236
7F539CC3F114CACBDFBD35B8C95E73A26B0DAA5313377400F27F8438E5B78F29
44811C04D8396C533B42D14161FF3B058203DFCA31594947ED0B0DDBB8E69371
6D9FFD95305C8336611868129C1186130E2DFFFE8F95F43B4B6372F2EC00EC53
2870FD72E532671CF9042E72CC4F32949B01489D3836A94AD89F1C51FBD589F3
CFD097B2F85C72E956C0646703E6A2A1E2F8ADB12A494EF73B68A0547A36B19F
22FC09DEA79681CF2D10E06E47861FF3DDB9FDB516897EAC4CE565C9C6181D31
E9C500B038730BEA3915049DFB356A8CD7124C119706E8F6070A92ECB856495D
A49E941FAAE2635949970E57B6889DD107F682D9DC577A581448E0D0C0F7D841
6730AFC41DB200A827B37C609221A42E932990D8969DD9881EC81FC4B4E72BD4
B7C7A4525146FF0AF2B8216973DA3E467C40D6A93DBBD9F3BD6EE492E0047CDA
BCEEBFC7EE678CB9B27DA792815D9824F460C498376B7A77E12671D4A68A67C7
70C5EE5B18C781B8690FF97C25965673E52B5A7316D772F8532BD90DEDF6CB45
9F146B4E820228E5DB7AD2D6449682C3BF16398367DD2F1A199FDA3C8FA50A35
20295F4402B15D6BA5B8477E9788C524A4C847A5E0A3779583DFD34AF0DAB7FC
E8F13A4D87B6FA5CACB65D61D6D9B72AFA0BCF189CD54B8ECC37EAF5F56DBED7
41BF7F78928EF8D8528C8F6DB7B307D720243DF2FF0CB60BCE7A4975433D1ACF
D965F3C47D22B2B8E48A4196CC5A5E1947A1A80642E73431449159694228F4D6
6A8BA6FDDBAE549A9D225505734F3063FAF5573603F607A1F3B79124A9E47F4F
5A8A15D697DF7E5483790A5670674258F3596B941EEE41F2B7A0180F20F8669A
EFCF519D1AF74D3150A2805008B67C11037C4AB4485A36A4D735E5A8C5D88C48
756BC2D9FED57D398895C67E4EEAA170C20C66869B0177EA7A1E22AAA8F03AAD
5B4C514EFBA28DBBD05E96FD1BA4834F63859523B84F89230AF6FFD502DFFA8D
6AD02DD50DB6295FC17379DDD08FF521506BCBE154BB1CE951FD498D473FF161
96EBC1161779F8D65D21DDE12B9957A88C79B55D644C5B787E6D655759309D43
3CA39C9B6EEAC223AED162589AC925041A629918C8DBD5BFB09357D861AB1394
3E2688F91815268DEAF39F0654D590E6E8AC9068E04A0D0262075C5E5774F852
D9B99EFF6E2AC398930F83B044CA4A6FC95936540C95F5EA3A0B9617836F765E
51F1FB8072F603E7A84A4A6F7C40F957BD55091B92BFED2CDD724C21750D7365
97A601881043A313A28A9AB40812C2A949B71B69F6AEBEE72A3DA2403412987F
9D1B0766AD24F497D993A4B132A6E7DE5D7F3998678417926F1FC50DE7E6F286
D27D731EE3709B2D46657B0646D939B176D457A0524A60872CF29A7413895BE0
4FD12FADCE417DE8DD78AD45254257AF49590E08F405AFA9EEC20A6108DB2999
F26EED9D3233B288EB19016AD57C5B6E83F4231A39FAEEA71301005938EAE468
E86BF2838CD150CC2B600E2D63BCE010820AD5D1C608DE99FEE6879648256634
0746AE5C0A6C9F39DDC9B220391CC097A598D77FF64792D7F05677906C9A1E47
4B8C49CF740734665C5887D21F219A295EA233C6DB75E56421A3B1386C8878EB
DFF132070DF8A4E24782BA326BCD751AC2AD65E979A31E979859ACBC25317F27
1AEC2FD4EC6EAC821F837228CBED51FA9D84A48D7F91127FBA63CD47F5B91A07
5F5BE42A3BF17038D2ACCA7C6E6B07EC587466B0E55B5690955F260A441AB54B
2560336AB72521D78213984E0E177E9C7360E93C5A09A59774259E731333107A
831FBE6A6CAF1BB6D934295DDA37DCB3132BF87958F958B10401452DE8670512
AE5AA12B63ED09D7AC9FEA3E44617753BBFFA3EDF0966D4A7F54A91E91350712
6B2CE72AC322B45D73FAC7E1322BC616C73FEC4D0BB8EE1526347F54BC760FA1
C4EB98B4019F893B26676735D1FFFBB3A9B62A77306810F3C07190BFB61B710D
DA6CC608A623FD4459C787E058E139EABBF38DDFA77AB23C7F16F5BD0A9CCF30
7F680BA2A232F44B216B0A7C6B898EEEEA2EAE31DBAA34310FEF769B1E1BDD61
6AAA66BF5B6754EE7CE90EE8C3B2A9E6177E799855334DAC3760EA1B589B5562
F3D48657B2D32FBA7F757259A5D32A90AD3A6AE94632209346563AF25781397E
9BD4BA26E2B8960CF88D9EB312118BF8FB9B1C20764E6F579503D13ED63750F8
19F24E7D6F56C002688D162C7FA895DCCBD8276620B10E6C7E03FEA314BA3868
A8696DD77372304300B93CECBFA91BDD117E4DEA2E40874F4AE55118EA3F6289
1AD4DEE7C73D21C2E4EBE67EFB8C82885D9D7F74EC35DCFDB9D794CDEF1EE282
75EA8E24406B33720880BFA6E15B1F17E6538A05DE7C16918BC1EE7E7F232D6B
3A8EBA699AB4BA658F86824343C2F83B4C535BB47576C0AFCD00AE9338847A4F
93868840178440B8F1CDEC05289F6CAEF751871196B77BF70874462D6D951BC5
4D61D6DEF2B38E250D34EF16FDE34C570D7BE76AC96247BBA956B5B096ED382C
224939768DED5B8E06E714EEB353998846FD818DC1BD7BF9AFC8A64EAF37E97C
820EBD818A4BC17DEC6A7AC505A43498619BC80C019DB6C46C0872F9D660AA13
A43DC1829A11A32A399384AA5E095F3EA93369BC8346B1C4E75897746A960337
4CA625C0D9620309096E25F6A36DCB5CFA78440BDE4C69A454C6B203F522F1FE
54A951F8AC03E93461FAF01B2653812E48390E9BD8E862081DE30FD764650DC4
448ADB78D43BC5C5115789C442E6BEFDADB6D2A741F03577E7AA7BB50C6BB200
2E68A7EC2AC67823AFEEA01521912308EE959E3C118E0F3FCD26977D99755C78
6C272911BE7935020F3586B0C08AF8A15F4A4DF313D85C474780C64CE32A9AF1
4CAF0BAE66C0A862D6B27E0F1154A9EC0D95BEC686BC684A407AABA5FB1F45E6
294DB4E62A8AE41A6D50C461787648F78F8FCC95478C3FEC7D3F8121283D5C7B
BE9D81E4DD8D18137183C00915005FCA77ECB3172F50EB591BD32BAC8CBABF04
2A6A15D17886DEFDF21E20255A369F28A168BE5EF350B4A1BB6B6D62A3A8E24F
1A822F341F820C59DB2D58EA0C827626184DEB4AFD240A527264178904D7E4D6
CCE39D7C44306F06C73A25AB9555626DC7CF3E4103B6E58E089D0A6037AACECB
99E209D2DD9F52E223FD098660B344B76A7FE3FC83B58DD7EEAF884491251E90
99681293009DFDDBF03E92CB239C8A18312EC58DCAC78480D3D9F880487E9CFF
F837F0ACAFE3A6986BD9F3F48B5215C37968D7C6B155F8B680A50E700B9A05B3
E906EBDAD7D3BBAA7BCC1FC72B7111BCFECBC9E2946C075BC973F3887D235681
756B561AB3A69E350E84241DF40F49F8450FB5717ED9E45A05323B272CCB6A54
9F132615B9FB0CEFC0CF1861AFE3978C19893E4A1B722A021A2858BF522A3182
127E10F30EFE00E05C08AA50EABE80B4B3C481CA375F2F26C049117DB040C2E2
CA5DD42B6374C01135D99C0F144261391B4EDE0BCE9B255D18B359DCCB4C91F2
111DB1AAB1889FB06BEAA1E0A05C5B34B731F2169C2F439F0ECD7AC315EEEA51
C7B0A8DD0C05C283E07836894E21A64F50AA7D53090F61EB25B9FD9BCCEA91A7
7DAAB60FAF8B43F9409392E4D9197B434AFA1C9C2CB1FBA99B7EFE1571BB537F
C01D4EC43AD1B8F73F3C74FEB3E4EF615E561F6451044762B2356CB859EA249C
2064477D48E5D1B1CA9524457069D854689ADC65E63D6006D72483DD8EE22792
6096F165FAB755DAB5D72514381907FA5508A9585AD95B37C17B6C708BDCFB59
7CF5246B955D9C45DCD9BED88F6242D82527484A481372B3870489C890138AA7
A9BE8E9EA76D1DED1866D501078204215A4855507660C2167EED603BA3D57283
645E83C542A6DEDC314735566203199DD5580E703CF30ABAE463184117BE9B2D
7CEC08957D1E08DDA1363749E23ACBE480ECACF6B36C6BE6FA298197D5027C65
D2D681E323EC2FABE8EDBE199B899A6C6EAF34572B623E3EDD7B4C069F185DE2
18554B7A51DDC1C5E474FC4A46FBB1FF01C814878F0C177F552BDC9BB0E16744
92CF417B218758F11DAAB9D763A34A791B1323F494FDEDEE48B4D41FEBAF2A1E
E8D6FC8FE9A68155DD2A78D21C7023FB6E7E02C244FE0EEE8FB3DE83F65802C2
74C24959A125B99CC9C3E03F13395A4AC256224F0071E0DE691DF98ACB6C7EAB
A2BE50B2086BEFE12FC9C9E0612F3A7AEBFE4A0471871905926CBF7DF5DE1745
70CC1FCD2159FEFEEB0F096282DCB872B6BE7EBD89DB74674BFFEDD140360EB7
279511CC1700DA348283522B5AEC490A066D109C412EDE26F6A94321C8CEA614
A5A206295152CE0A04DD84048E38088BB76CA846A545497019795749ACFC81B6
0B486CBE8811F7F211B86E827E68FD93D44C256BFAF23328398D9E91C199937C
A66D68DEBAA3BDCE38D166CE490D7AAE604D3239A840F1174BB23054ED01BE10
437CEED4242B5BA882573D158B30253C166B90C47B6B6ED24B0288F8BAF4C546
AC7BBA575CFE7F484C71714FCE652FA38CDFCDBD76B9BE18E2F7ADADF3654EF0
034947F21F3C35894F7DCFF5B87C645710C734A1927474873DD20C86A1B5EE8D
963D5FA4415977B74378CDA96C64EE104F5A27E68695B6324C2143C5FC9E91D7
AA663609194C5553EB77E4B8C7606EC18C33B3B95F39A41D2E0C84ABD2FFD865
25323ACE4A8162E823C82215284C372A8527186EAAC064AA1A5B3C72BD5F38C1
43355AED03337DEDA21A5BB90DAB18D604C9E079108B8D251D8FCCD90B2BDC8C
340987DAA73D979F49FECC1339A4DF92F7435E11A1E8B4BFF9EAB5E6E8503794
92A2B6E296CE4A007648C0CE655612567DA35A98E7EF4BBF2B0C0CCADB597E64
1054899B9DF267A46264F00AB8418D0C93AC7EAA9DF793A62FC3E0C50F55A84B
2DF7741598E2C35870EDC52A14B8E25113FA1453DB47161F029518A84A313834
E9E3C9722947CE7159296456AE88AAB17B920AAB6FEC1B5DCED2A635506B1FA0
6986ECCEE35404B02EA8F5DDAF71C4BD05C92AA7C03A7F89178E29DD36C8D455
7D1CC21A3B4BCCD2A5984EAF9D2C715C63A82ACEE79613DD66EA9EA94D956AF7
ADAF6F375624FBFA2B95ECCF029A6B18A512D30CEB0B6ADF80FBDD6DDC79C164
824B6E3E3C3E69366B759B352F6AF5BA33358CF215ECA53E73C0C347A0C47DE8
86A1E1F78EE5C4077534680D2ACC6987BE974B751FBFDFA1104E2272A70BA003
F471ECEFB444B7048B2236C524B7E2F0CA11DD483D833E4AE962A24B6A6377E0
2A43FDBC78E4627ED79B16862D939F3A33A8A5412A97C78A25C5717BF323F716
7D12F37209017D01115F799840538DFC9B186642C1FA978B5AE2733336131508
D36550887883B3C9AC23596EFB8C23979204F301F8EE55A6DAF28122ECCBCE7B
2B7D46754970FAF1BCA49C71ED3871B4B8A80C84CD8C08366D2E0481BA01FC11
E9CCE0308ED3E9972CEB41F0D25095DFD3B832426C8D24FC15F45E59CC159E68
2660DDFE7C9052241A2A6DF744748D771E0E601E3C8DE0362D76B3DF1A6225CA
7955EDE53044811ED7B311700F04DD608E006FA9E8DF387EDA37FA5E4A6CE9A7
7BC41F453CF1F228BB2D2693D89446AFA24A920699BB183509CB40BD2B8D6402
FF60463C49AB2E641696C84A2319CCEFA5DCCFA45FB1A181EF4EBF6FB5C8C1B2
0D1AD0FD2E6A4C530BEEF47FE717EA44D35D45ADFCD296F82FDF5B7C98854899
BDB2E64329E55D03F4CD2CD99AE5AD22F3797128CDF10224DBCCC062A8DEEE49
513DE1CCF2C5CB43CA38B6FA33E13AE594BE83EB86DAF47CA940706D4B043040
AA2E719B91DDE36148F4C0E9655171298F52A97DC53A914FB5E395D6EDB3D0A8
6EA972A16B1E4A8892D1D03ACD2FADCF1684F18BC4EDE0996427EDA0CAE0F19C
2B1D5B917C50887FF55F1CE391966857000AEC1C53E0C94AC457D222E38314E3
24C12AF90CDCD2C0A7D438C61F0239328466F24C623B0A640B2DC602C756B5F8
EAF453A6D82701E2F5ECC7C42134253C04FCEE9CB233501A96497FCF85FDA8E5
A3A0FAB8F42D90434A48E3F4993DDF5FDF93C9E21EFD46B03E7F03EF36CE0390
DB45EA1F0B6AA0630DCBC1AAE6BD12F041CD64AFE61BAC3A46E4A43E85BEA75A
68A6D7C21FE3C1597DA77B79DBD891DC9EBB77843DA09F119E2D94E2CCE03ED9
B4283694A2ADA3268CBB7AAFE4CA0251F29656A2DAD70788CDBCF47E26209F07
919E0D41DE5C6BFFEAF264C454AA0060DE5E64CB41BD0E31FA0A742BFAAEBD91
94632F0F99A83AE987ACF7F2FDA72B5877B53747D331874686B04E7A18CA7383
1FF2A92E01065E3BCB1AE8B9A31FAC9F291DE9E2644EF741C7A315A2C043D4D2
9CD29031CDAB090095FC39459858D0DF67ED0595A99D6366ED346EC46136E789
DFBB55B65C115FF548BCF1A7492358724813877094BD09DD34F76861EE5DB556
DFC35E1B0547715813E8D613E8DF549F4F8546D7E1C684A39108827F839AB8CB
516C8D9C6CB94CA7C0B7F09D4501D4B8E5A7EB4675596A6E033DA344F1D428B3
728BCECF5537F1509A035AE3749991DE587EF1515F38D9CEC33022826CE5B918
50950E0A858000E70C81E6FCB40B01D452EC4A91F9584F62892EC6D057EEC7C0
64FB169B33DFDC62868861B64196D8FB0F0C0963D4338801903DB7A7EF3EBDBF
230A61B09C8D4E9602C8AF6749DA8465297336A319C1C76F5BFD383DBF42550E
D97390764E46738D0004C793913305C899977B088EFC553835F01DB2438A5413
36E204EE168BD35D574C144978E492251371736C2057A8D24C71BAF88C720534
B66E4457BF6829E1D2E19B981B6C56C6160EAE5E097444070F69E0A3EF0392B7
A648759BA92D861581DC7AF6D35CEDEDCF1D488423607A36D12EE1EBA59FB1FE
BE729C666E929D6C8C2E3DB45D48BD44946DCB33677D834C3A5106034D9A513A
5A5F8F39BBA8757F3866DD488B814EF450BDCFCA6AF14FEB1100040306E614DA
D99E9B9830AB5B8D1A07DE117745F61C1AF3D91247AA7DA64829EF58D62DF6C4
72FA27E6864D8EDE38D97A970AB2586166FA1811F6583C087BA39A395D484ADA
6EC970B9ACAECB7209744D0B19199000D9DF26D04A8204BF66F50FEDD68931AC
D1BFEFD4F83CEB1AFCE803D012F4B98BBB4A5A9FD66C35F2B83D24E57ED039DD
9DF658ECA2054F069D023BA16C283721688B7C7E40C1C9AE6AC470F8D8B36FEC
0B0DA4942B595424AA3753F7CF6CF4416ECD7D40E02FF813F3F8ECC0AF94339E
9A53622540EABE4422ED26ED39EBA46428FCE80FD44B49B8EF6C9999031DEC98
D232149E7419E2D11284EC1B2D26F77D27D179B61B1EC4C0B8F3E1E357A85ABD
5347364C4213B3005B56C7C9F8AB62AE2A6CD9106E48632BBF45E17D43681F67
A754EB411FD87682F2D8E062D06145181E90D75AE565E857692781A8DFAD36B3
63CEF2C76F5D424BD034B74E241441E2435D2F3D76AF358DA4D51CB83CA52DED
BB7325B9948538B047980A6484A6170C0BD181A354FC2C9E1AF4DD7C1C00C0B8
675BF0EEF0A9B7D65A895CE56085DD9195EF8ADF3432EBAC23D8F2029F77AC23
3B4E654FEE2F517E9D40A37B188DB5155130B8CD0E98A820D4E8FD6F8BD32551
AD35519B0FD0F05E818F6DAB6C350DC3D62EDC82C7C0ECA5167699EEEAE5A6E1
1C53AD8A67435ADBBB0E2359C6E13269B86D980E58722388DE30B8C344FABAF4
7585DA0AE45EA4127F960DCC90507076059D66BBBE3B57BF7C446B0809452763
5AD932A9DDF7702FC355E73DA8CBC6B04CAE97EF57CF7C14B79455A15B8CA485
69EB8F6A4E9BB6DA5A368437157DDD42EC2C31416F01448962CB21F53A1393C1
A494C7A7DA166BEFEBDDBED22F24CDD31CF7301F7420ACB51B0096D1F404BCE1
2C0A7098DF7AF66E3A7A245D54C4DABC084957D5AE403567F4AF03B696879652
BCB4DED35E64AE92CC606264C7565FCC89BFEDB3128A03E205484B5510F409BE
076BD15A11BD7BDF67B7D00537EA5E86F7A7BB423D1A7C8F187C987BEDD34DFC
5AE9687697B8064FE11F52D150BE449DCE55EF50384F0A2AEBD9D51FC98B776D
05EE11FE310B9FA85827069DE2079EF1989BBA7CD8CC76996D5F2DA812749898
1D52ADE7F788203C76B58523B907CB97487E127C2CB1E200B2B9315384CECFD1
2A34CA9CFBDBA9CFDF5AFD14FCDD5157A20AABA3E25F9CC17AC8945D1E28DD80
892D9E1AD5D37B01BD362692D6F59C6AC33EF5735340FF2B61FA477B7311362A
9667FB1D3523E76405672D3283A8D126BD6DF9B468FC7AA2DDBE2ECFAEA09DCE
7545423E55332876941D75644152C6FDC5D5E551193F45EA9E768F1C89D57157
CE025ACE936EABDFD023A11EA57B48CC839F5DB4C8993403FCEF1E7E41D352AB
49710C88D130BF5DB7C286150CEF52C48C478E123957BFCB4B675B657BE91115
4DDB56EDD857C135F13758D8990D8EE81BAEAFE965C95D64C57C2EE2EDE7A169
E422205541B6181E7A187BAEDF64E585E848AD295B7FDFC5EAE3E452E9C5DFC0
8C3DC0D5732DC1D3130E28D73D23433002691CF790EB99F5DB3A413BF1BDE0D6
69F017046AEBF0F14AE002D7CE937EA84C3DF06C511559D98F0ED3A08CF1EB23
E9A0F46B6BE0D71E54543FE04B064AB3FBD860E71FF3B8FE4A4D40FAFA8F9AED
38D2DD785E6A20B9E4CAD41CB15670636666A8EB683FEBB020AE5EC3C18730CE
A591B86BAFBDED8920A21E23DB93541CAEE9EA98B047B47A9EC5EEAD046719EE
E0B7E2F192A87C319B62B790915AA97404CBD6C47E9C6499C99257B237295883
1B575D38A6DAC0F0BF7195C77CE69D9856F4E0F8785345AA1A5F75A43C90BA25
E1241A9123FCB8BCCA325323210A42104E035BE342FCFB916C45A3FFE06012F6
26E9A82DDC25F36CC7C91D2C43F2F118A9DE6FF801E62620FA03CA4C4F18ED1B
68F2F544CE8C5C086BEC833D35A729464F8D95991EAA107868920EB41A357A9A
D1E423EF2AF42D608215A2FE2BEA0E4DAE869FF544B5A15C586AFA8046F0DB01
F839BA198B7AD10B9683296D7D762BC2B5C413BEAEE530C0948319C71510B1FA
500F751C6FB8D8A75F8C0BD5CCBB830C35E5C87B3A11831CEE88E36DB8BF75B6
EFE6750D577E142367B8B2C75A4253B6F22A2DED8A730D4086B86C42CFD82F51
8D9546D08FF628660F2F1FDC0F62D69F4CE01CA8DE8C2B6A73354B050EF956F1
4B569C2414FEED123CFDF555210261CDA390061A632C264D716B2CDDF7B4BC09
3C1205E05ECE48CC35BB5EF46284AA2DAC568E4D60531EA7DDDB14769662CDE8
9512FCE071759DE406C018F907AF32B1FE8F55F4CAD367A395E5A9E7FFB04AE7
8C5AB86B0B9306B2611AD6460F732498C9F3242ABC02D13C9128729C74C57FF2
4C7EAB0836671B44659B73B7105ECA99C3CF0F4550FBE00742795739B379E46F
74029705A4A65A9FFD2D7179606B38DFDAFD4E14F523138546C3A47848BA4859
70D09EEB3D5D5DE6A99AC5E7B0DBEA8E2C163812EE8016BD4E95522EAF80F576
963CDF11670C3FCB8F6BB1AF0DE86B8910E20FCDD60158E7CF6DA73F5A3CC04D
886FE80BC4645B9FFDFD905C6E9E744218DCBACF2A8E7659761038560FCC4C81
2AABE3CE346DCEF7F95018373D371A60CE6BE7FB925EC97BCACB9E1E696930DB
E911E85296B83795CC0289C264A4100719C8726E9E47DAE60DA9D98873211750
8D867EA3E414D3CF3DEEF3EDEB1313744B2E10AFA8F420B100AF727FB9AB2EB5
2ABD3B38CE4F21F668812F6AF18E26D068D5630B0C7F8572A6F035316A5E95A8
9CBD501604E921EA3D878B3D87CEC69C9E0775F7CC2C09559F11EBD61A5AD257
B807DB1CD20410AB3FAC5522C340712C4F8A7D9D2ED03C776F18BC6344938E88
B3B323E0DD7E91CB830CF9CC9AFF074253F40CEA7846088C8B8EFBA9F66BBE69
85C4C4EAB7448A4BBC5C8FAFB038D513B248467B34AF7855828D1E2B60759523
BB1BADC966827A598D6CC472042A7269B966BAACFF9DDBF83776E344F8F1DCE4
CB9ECE2CCB859A19B7D7325E65ACEC70233AF9BFD22CD076BFD9AFDBCDC8C83C
51AC73C726DC5EF5AA564273D772DBA7FA1CDC8FC74714A72C92959337D28585
B6D59163ED64F8E7575ACD70073596BE454F665F57FD299A2A82346F445F3F5B
996090B5A44FF6538B3F2DAECF8B8B0A491D57498F099D1D3EBED4515B19762B
6F32CD0D7250699B7E314C0E850E12C84F2B373CA14531C1AC8DDDF0077664EC
97FD294FF319B0DD6CECF63E0DB19D1A360493FD8DC4E668CF86C6E0437FAD3E
530C419BE08F4B87B87AEA611C5011560BB9977A04DBADF56C73BB315A6F7575
0E5A0E92BAA5EAA7608496F30E955AB2EE46CCD6673659DDBAA5633981098C7A
A25BBDF4C9D1721C9E84C768C8E40344EFD10EF55E82959F593833D57DF350D8
9569BCC705E5D070B19B8C2EE13E54945B0A6BCB56849A4A447ED683F5F82D4F
9772037CA860AF9A76F1A6BC04AEB5B4E063E3677E7B9C335167EFD5EB17F489
0D1C40DE23D3F4D3C18F7BFEEABCED896D7FC83CD298D737EDBA1BD5AFC21C92
79AB35ACDB58D7D18284C1D46281E7A715F4B671A59A8C0B96345CF3A285032A
557CFC767FF7A9F5B9116BD1C5EBDA8C1F5544568181DB784B198F739C6DA39B
E9979168F1D4F253A671229312B51DD9087B4B5AE2FEB9276FF573288EA6AFFB
E855029B21EAF03392F0DFCD8A5CFE98ACD7BA284ED8A4F912D5F91DF03E0886
8A05E17302FAE9BCBDC97825E2B11F5EAC2DDF3E1250B271159F8C8D5B824775
CDD7E4883BB8854ACE930A003FECCDF983E75EC054ABF1CC0071E22D9D612270
B4931A01610DC620CF342FDF2E4879CC8A4EBD4F2B69D7237450E49E5DC1C7F2
A32F66AB6BE0480D5E658C70C1761573FCF86B53B303DA2A60DCEE770F36B936
3E00CDE302F53ABDC352218B551B37BE3DD8D9288AA1D32530622048219B1A18
509E28C6C71CCD2FF5698E3B4F215CB6F3880C38FB234928A24591F66EDFFB2D
2B363A27EB9EAA1F0BBC5A43489FEA1227A0123488E5610B1AA971DEFA9B64D5
25DC444FAF8683BD6920025B234C41AE1E3412A5EE9FB6F03F4FBED609819634
84DEDE75E8B532C360B85D8207753F89B0D1B9251CD6791D0D93552126EDFCAD
8AA90D475B71528D6D23C2D007F8D3881969786FE49315E1DB2BFC184E76CD4C
AFA432791D902E5706FFD6E49185B2C456C4D626C39E26AD0B3C90346573F466
FE5DDB0639D793A0C7E8CD8FBA03A2573AC35B9E33CA6EBCFBB7A6BF1BC4FC7F
021078E938F1D109B71AE2CCA9CE581B0ECE320C58A94F47F95255C501C5C672
88F1810336DBB05C55BE4C46F437238FEF6A0F03DE2BA917E328DB2B642B5C54
131745717A81F890452024CCC961624959CD8448F5906F33E7BFB1498B75B9CA
815EBEE532DBDB0311608C3FD1186B8F8D8A3F36DCBB53FF4C18B1CB23B008E7
572600E8D685CC04D2134817BA856EA10617EFF49A79EEE4958562E08578C74F
727184BAA637C729DBF2DCBEAB3E9F27E90A92E2F1DBDDCE17A5203415F83011
9B110B39A2AF8D7B8087C59EA109D8722B4B327CE363A0085B59F63F50ED7799
609A8AE03616CC654BF8E8FD474FC794F2477829854A2C00BBF259FEFB6618DA
C9BA828B1CB5B4F12DB2BBE447868E07527053ED1CECC9C0E5C494E89429A9E8
6374DA43D39D3E0774EDE095212C3F92B5C8501016BB9F449CA313C5997D1176
49B02014DEA301CE750A98D65174CE846CDD232B8BEF87F7596D18981DDCF3A4
E8A45FB83417D0AB2A2AFC7A3EBB1DA58713D19045F08E6A5CE9ED7F3FDD8973
9229EF55836DB0A14FF9235B8DA029E84C2D0736BFF162609D9E8C993DBAA30F
7EC2692D544AA5CC6279FE2FDA87241EFD3CE36671033B269177A7AA0D2E540A
68361DBD07FC96DB45FCF2A64A306239C7D48C5D55D3FED290DF40DDA041E963
B3FEE2F492C1CE1646CFF6E21190D48374185CA4BF60D9F0B2A2844A5E57E1BE
AB4D3FBC5DC260B1FA9BF388242132B066AD4EA20DF70F66D582209FCA98D1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic12-Regular
%!PS-AdobeFont-1.0: LMMathItalic12-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 833 233 0
%%EndComments
FontDirectory/LMMathItalic12-Regular known{/LMMathItalic12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic12-Regular)readonly def
/FamilyName(LMMathItalic12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMMathItalic12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-31 -250 1026 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD11234369CB38BBC21C40020C4E57C
950DC4A5CD271B5530E91DBA55EA1A3BF584D9405556EF9C802B109FF1EB2B0F
C350D7F091E7B613B08574EDA3BF27099BC2EF0E503A4C4724614A73AA054756
A503BEB31E3FCD96F733D0C5815847DFBB66DE4968A9B389FC00C2146C4FF68E
076BA8B3847A3D8237D36A6BBDF0096290F1BCD02CC66B12E0070215D5D8306F
406DF7590940DE35CA0854D3609249AEA4EE9D3D377A7996C1CC2E940132A90C
F633C774985DCAE8E9353607B9059DD211265A0A346B1A062D80C64B5802A750
D9FEFA3C9920A3DE942C65BD08060AF33C91CFF62930F65F9A42F70B83B0E077
E169BF7F5D84F15D59F8A74BC2EE4A7F3ADE36F38C3A661F4CC9826BF73D7F02
D3CCC267927CAE22B5ED695D212FC3B669F9BE369B7A8D325C3FB9D552F175EC
29972562517E91E7B8D570612CC50B1A5CB6B94D030B0C60465EA21631F7A30B
44A47143D0C2F942B5D76384B8C3F2F197BB3646CBED3DEECB6513D3AD460F49
4BB874969A3663617EB537E75C1C1BF92749F9D147080EFF78ED285C315BAFA7
D78B7B4B8B7CFD1639EA303ACE986EDEEBA9350F92529C47EA7689779BD50CDB
D1B3A68B383B54B51F4FD77D6458F15AFDAB471DEA9909CAB29840091391F2EB
148588D02607411F2E802B9CDDFFEF1C1FFCC9EED0405371651ACF30808E8C57
682B734916EE806703B2ABA2F6910E0C75BCE10A94FDD1ED3E4FDA7857341427
CA0A4F7D30151BEB8E3D351E1E100A8A75959D11122C83A5C0C4C87214413B25
A6BFE44A42D446E9C4AC88F86B07C1097F9C5C5673B88582CEA8CD622F9B0C79
E463DF7F2F4C6640FF3852BEB520F7B23D8A22E7E601EF9CC6D0A2E6E82E6840
65B82C6A3A6692811E2B4F57723AA3A6E27076A2F63D6CE1FBA7ACD844E732FA
02797B386F2EDCE9FF9F84EEAD17B366D678E61C6176FEC09C94B74DFC090CCC
40AE9DA65E5DA02E7A7E8A840B45B752AF11A279BA06F821525DD0F477831176
84C80B29D318260FBC314986223F9EC4DB5B0EF2EF5D424C6DA581B49C709E1E
98149FEAAB15DFE7F94977CD2041DEBCB1FC8F4F3B288515CE43713570027C3E
2D68BB99DCDE2D950740A8EC16C42EFEC22B34901DA9B302C7B6492ADCF1EE4C
8C8D102B0C81DBC566450B0EE201286021C5A953D8DCCC8637FA5C02E813A318
F739DDC20785E785D3E86FA49B6804313BA4A5FED7BECB1EF153B7E79F9F449C
246733E425AA6317DAA66604633B159186F8846CAC78A7DC80655064CE701177
534AB9CE3BAE1E963098AB8D252B6668089F50930339C0DB023D08E56830888D
155502F957B20E26619874CEBE43D125F6E863833E8FF08EDC1D254AA9E35504
8C87857CF229376A770DE32EB015E59A1DB2C85C444FC05B1AFAC1155DB20674
DEC4349F961F2B1D6EC9F7550BAA81946B5746D249C81453385E15C2FF341B4A
13C0698565B34B714B6335A1B02A1C7D0739EB61C72A116773C7DE0CE7B1033A
E30571EE6A082AEC530275F2B71641A1B6189DB6C313B5CB54A9A9456CEA99D2
367E45AA87B3E75C48FB9C70F33932772E45A6D1EFE98E0B9CBE3AB88104BB6B
50A734BA667EC56978B3DD455B40964DBE6B8CB92AFF9801161669B687EB8F76
B8EECCCDAE093B74A454F11A7EEBA894D9B2DDA7BD3B8039F87169C465BC2FD2
DDDDDAC4DC88E38608500737AD16863D1F03FA1DC9A1212088496F26419F51AD
245098A9CFAE5B475ECC608E913EE027C4A7E177C396385BFF862ACED0E5BF6A
B303FEBB2C20AB717557BAB2FFC553ECFAB8D40BFC83C68B9043740852B45766
D01BF50E949CE7F48AA24A103C06E686325987E673613D324873B7B5F6523542
2070D5B5CFA072135E19514ACC803C1C4257740D8BF4343B283D1E9906259C74
BE3535877F54B6215EE9312D840A34635EA134C5F21711AF3E5B9F029FE16CD1
4BF085FBF50AF7CF2D153881B994A7A8C7FF297553154FFDDD3322A2B0FA0C1A
B82116D999DBF4C16BFAFC6B1E82F38F10ACD338AF19870FFA3C39139C37A4CF
D73528996F49686ECE037FD3A0DA5227CA6FB63199FBCD39A24463D3E0A87D8B
F61AB70AD1C6615B51881FB83E438FA7115925843460339AEFAF4FCC58EA3964
31BD4F95BD5F6DA3111EF4C989C7B3A74727AD2AA6306C89D289A05C0790FAD2
AA17E3A97F8C922BBBBE2DB63A18F1EAE7CFADD8CF343D8A73BF2B8DA03BA98D
8A95E7D14DA39E5E6BF3B46FD6A73D31AF122A7D4310010C92022EC5B9737020
A147A0E22E36D40967E63BB7F5495DC2BFD2E11F4C43752DFADFEE616C86C8AC
C184EB37514163193A30B5947A16C8C4451BE54D020E2C6448138C3D4A880FEB
971C0269DDCE94B193B070D0E54C37C59EE8355CB3612A78CEA26681723BB6B7
6B4C3CAE8273DA9564D4D95A6F734CB1718D02DB5CF09C029DFD240DD1FE87E0
195924923A24E3E381051D4DCF379343824A214429672218078D1772122319F6
0D9085A5043017A1050E1DE6A147BF300B498BDA960865AE8A9BB72B2CC44C47
7D3C08C8EE26154448C398335289F9F8CCF92F0F9196956F2F535A3F58D24FB9
7AADACE17BB106CFB7625E7EC96F78F128E16763715536E8446529C25D3F8E1D
87553A3D4795B516F08793AC608AB77DFAF15CB3DDFA89B6F8B2D3D7E3C0F05D
5AAD4ECDBA503821822C0480185E82EFBB10BDD0E80D674D03F9AF07EADCD7CC
3DB430F645CC77A1A33B3B2447C9200F68D944D2603715E37185A14FE17F1D42
73D35EE74CED59582A6B3A047A182A4F4D27D1116355A817FE5E3EC1C5186C83
67FB4886C6B9BED739C584A02D9A6DA055CBC3E2795DAE8F29BE777FB1E12F5F
84419E6204BDD0F31CDD3180CD6DFEB7902036DB494E018EFD27B29A128EA0CB
1BA4D35CD0AEFB0E628CFBCFC0D438BA14F2C6253C4C00F13252365A30E59F36
2269567F17792E40813F0FE5A1209EE7E4078F4ADEFF4A3F2E2DCB8C71041680
57313CAD7561274CF8B33D8592C922B8284CD4D05ACF5A0CFDBD5234AFDD629B
6F0637D06F3543E16F1762BA91AD46F025E8F8FDDFE27EB0DB98C65207A6026E
213748ABFA229A6C88643D4E104D7D31726A55FED21A198689AFF0B54EF7C6CE
5FAE08E6CAC5FA9343F30F5DBD1118B417ED25A6C933683151661B0A29784B3C
FBA55E8A1A393E22B5650646398CE61FEF69687155DD394FD5B30C3656B7D86B
91357A988B3E1868D0939298887EF08C80D17F47C7A62DA3A0C3FCD8815187A5
043494211DF1ECE7D46A3304D5D67B5DB8562463429AEE62063EE6F439A8537B
0B7B0BD5F9CCF914E26F06DBB2256493874280B005F012D56A1F5F12D83B031D
1F73B7C54F62BC68223CA5F86E7A2F4982608606B3D24CDDAE6C3D6E69C49410
0D5BB592EF21957BFFFE7703BC94E32D4C224891871E5F50F87CC603D14E7A0C
7842B3BCCC4A843E28C9CD26C07033F7A8CC29D2A3F5D581F94565F2C4CEC567
9786B88FFF4DC93D7A7E62C8B4EF8BDD3A7C161C0A891A07C5F9D5A4449DF77D
C3779EFC70F389A21BF608ADFB7F857E7630F2B55F52C898330020816BA8C6B1
1713FD9FBFE57EDF5B8608691ED69714E3D8553456223C53EC27A3911AEB4784
59EF5EF316F7363624EC66AFB8F4EE72F16F4A4A4B8777DAC3B2166863915BF8
C001211871C2BD9F9FE26C4257D89E186E14AD5A89E792E215C715AA9363C321
DD13C5AC794701A502C11AA45CF13516ECF26EA0D17002E93ACE69A5241D2F82
6E52E63822561CD3C062925C61E615B65203A0454787E3CD2BC6E16409422F96
546A70B713F19D4B5ADAB509734899B2450FA9EEF734893333BF9328072B8B2F
18F912A692996925D239F9EC8E43507ABEB111EFAE9AC5F86EB0A93165125AA1
C55D63B82703E6374FDF7D7FB3243029FBC893422B1A850F89DAAADFC8C1574C
51894EC4F53B84F167C68CDF689B2941598632AECF101A97F55822F1B71A2598
99724965664913C7805577E08D20ECC428AD5A44748993C5DB66E261DFB8AB0D
39B99F173B3D0018C4BF60BECFE1D505A451D5F2527F40FDE2F34181724BE3C8
1590851A173FDF78821C2883CE1A1E90507E67763AA1227878C9EB13CF1CE21C
FD395B994795A824BD949CE3905636A767FE629150AFAFF913110ECB377AE638
40C2658EAFDE885E48E1BA7E3B9A3B8F2D39291678DC4718A02E2906C092E63B
30388ED091376074602D584D8617B91244B5FFC30C25C2CBE31131486F87828B
7B21F47E6B465679566824EEA23CAD8881C436D1AD12F04AFC356C0517B2BBF8
C6FA7DBF2E798644381E46E7637D40D83A847DC1888B5B72AE800C4A30390F39
D04B8D2A02FEC574E0DDD9D9CBD0410E90CEDD4A638A204FA861DFA9A358DB5F
63814ABD21AA59E606A022D7B9F17286AE699F39DDE007E42F548A64957BC5F0
5EF8EB0B4921F66BA63434EAD87F80277E66354410CF6D86C36FFC1ED5D48399
AEE0EE143A1D05981664012B7F625A5E58B342D9C90F0182C72B323ACBE922D5
6E50E5D3673889E815B358DB38076DE1A51E1584D15205D42C6AC6ABBAFA53FA
DA59CBCEC30E66B99B5A44795F3E6FCF6BCFA8DE1A56E910BB16BE02E7F2045D
D2A518AF3F06908EA8D001EE39149FF3D9156D7630A6A3E122B15AAC7F8D3317
3AEE0B0ABC51F103F3D9E526F595D79587215FC1AD8E218DD825978FA8AB648D
D9B823746386656430D496E772B134449EA7CFC61BA0A367712B7721EB35FB13
C69C8D442CDA9F982A54B1999661354BFEE6C0C32A8BD178F177AE6A2555AFE8
578CCEAA355CD977497AE7ABB1278E7709387FCC46F634A4A3DE123D31DDFA9E
9B635521384548E9B387DA56DDC4E6D402D0CA48A0E12E0EDB08F7D61423228F
2EB98EBF9E85D743DF0C05EB30A502CE41E7F72B50FBD75326C0FF6266A21BC3
676088A4EE826D44A69A4A398110D8BAD14ADF59ECA9B5805A017EE4831AF019
6310AA5AA334CFDEE7D47CBB3F19C267C39913138411BF40C9D4DA89C20DBB1D
10579E2F2118B09641EABA1E7C7A4E49CFD8FE1C0AF9F4E1A185E3459ED4CC32
1692AE9591F60FC381535AADFA319428A342C705B415C06855DDACB628E77B14
022B31A231302782F325C9C690DA855EE5379C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E752429B985F23EBA0C9875AD055D8B1F640D10DB8F40BBF062F476691
EDAA1D05C5591EEDC1B75251BFF8576F1C9CC5C0E521392A2F0D5F869F8AA462
B3883A673A976328E1F0DAA22B80CB7737DE2537E7B54F5E1643E30046E87CF3
8D9A45A973757BC16CC50504033125D2A68A1C97CA095C56B3D62783960780B3
1693596869FAF5692AA8FA6643FCD7F55E72948D2DC55AFC5016FB2C48AF9D85
192393C682B739EB43CAD8C3FD4053B2D53CF911352E2BA87A65F8949B0B7918
EA727DE4A08DE07B71365B8F31103159F65D30A7A318C1056BF638CD20BB56D8
6F22ED3EACC46F750F405FAF96268E80A409CD8AE0F36B68AA8C5FD2E0E871DB
D2628AEC086AAFC9F04CC93440E1A8B0ACC1DCADB778837360339A25C08E3B0C
E768240F0E8CE9FF939E4B1A6365664AAB69761B7A9C7B95BD29B09B930B0D82
F2C39F9BC0B94E56C48DCB22D8F0CA6C633BE68E5977EB3D88103E4230C6A08B
B4FB0CDEA7D44636102D47AB90B92FA42243943EB3E77E6CC38DEDBB2DB8BE77
78936B70FAE12EB1E2913B766CA2BAC3FA555CBADAF2CBF6B7A216FC93470554
2C841542BC1FDB26DBE389CED193E28A19CE9CBA64FCEB47C4D9C7891741E0A1
23FBBE971ED93F797C02EA830678317452481FB78DFEFDB25A3645AD3979D2F4
AA17C624CAB35B85963C6DED262AED5DE92278F31B2E573FD86696D98800443F
32CF695BC660D7704664695A83680221C6397E36FED57827D0CEC45CCE9134E1
20F85C107CE5E670014BCD3D09417B18667B975BF873F4BEA9022072655ECB43
9ACF13725A79EF90AD4FB0073FF142CFAF4290F2BEFCDF56CE9AD3AB8669A691
21B16C33CD949DC6E4C614B2D1A0ED127FEDDC4387DDB2E10EF3FA3985EDC86B
243368F8CA936A6B93DE729493EDC6FFEE039CDB833C0CA3B0223A63BA100BB2
B4714AB955DA07C374F097906ACD908F1A8355BD40273AB986F80E6021E31427
AEF512224950615DA2039D4EB3B18C87BC21D80345EDB06493E9849967F12E63
19295F104EFA71C12917DFE9B08B5473DD51A322ADB72FBD8794B3F51A1EA076
A789F59B3D595DD347079EA1554A4608FE9440AAC9F04CC93440E1A8B0ACC1DC
ADB778837360339F16EBBF5AC7571B0778C0E9D25358DA06B20DDF35F40C2314
035F52C165A49120D5332A136461B27E1D641B91CA52CB6583FA4C6F64BD28EC
6F839F95D74E2FACD9500D776DBF675838C2E27A9A1C75D9786FB52F7B15A017
61AF688C996E2561756B8F923AE34B82BCFDE515AAA95D76089B8C6D8CBF4863
3095FC397712BF000B4F2852F1C52ED15534409086E06FD6BC39007057B13EBC
E5D8E8EB108C21F7A32F8D0DE181A612268EF75CF1AA6A436B3DF24E7DC6ADB9
39B89E2924D0A92FCDC2AEE877BDC9CC108A18629F0D64BA727A5BC21B42B5F4
1E8F864AC5FCD0977D31EFCD46CFD2F60DFBD4B1B7E0041EF68AB5AF9B946FF9
36607E3512ECF70AC43BB1D4751F57512749F002E1148BF99DA5CA7EDBB00B60
E26CAD17086C48CEA3FF695D5E829EE6473F0C657F7655A674B43152DEC8B2E9
36E490A4D367D68214B348BA51DF871A83CECEDDA1F3DA646B38272829C49B77
DA56D8C3459AEF9356949ED2BC8CA8085F829B9F9E0B4E360140E2EF8AE58083
EC6DA4E70BE9D053F69949A8E464ED478A8E037FB132781E4D3BA60B95605DA5
5C67C5F6EF7AE2049EA3D2EEE67F2FFC49FDB8B4BF1A5B55899A71BFFBC96D20
CF2025F12147C5C8D5E39937B03356D453D819AB0EECCFE7DA6DEB238A87FDC4
1A647D79A3E56C4B5AB6B245E707523349225E6B8EB758ECEDE8173B87B4AA14
71C5FA50EF20ECB3E3080FC6D8B395542D5E464EAD1953BF60A81E14EE323080
F4DBF77A197944E1DCF0738600BFFAE3E467BEA9BBE6258A20D9E32E17451282
4E1ED5C40D3C40923DA150C493699F0E68263CC98B61749221081D1C75F39CBF
B348CC853CECFF1489C53CEBE1A6915BA90065A1A95764E697057F013763621B
17F36B310B47B715FAAF668FB7F142A6C7682F1CA89CECD0A14CE3BFFCCAF634
AE7A1DD365AB9D3569F5A96C3FD32EB201189D07FC46F41CD2FB9B1BBE515CE2
23213D98659912424520237D41AD0A00728D89D92DEEF30B110E58570A966383
AA9F7CE59375525369CA6A559BEF0CA0B802D43F883E1C794B9D3EE9AF8A5CD1
0A347EC4A862A6F0B3867EDE0A050EF258A7F49F5081F1FE098F53AC01525217
1C713B12582F6D29ADDB80A225B11738EB3D1BA708653BEC6F7AC682EFC32633
1F40C5E8FF16D3AB8647D6542B4C6CD77F4469A676906BA6AC776BDA43E4B128
3ADC30DB82832166A9202C67C70817F41B505FA0B5F906C537EFCDEE4C69AFFE
F891072A4BF938AF76A97EDD40B7F6F9D15E91CCF9B8B2DD85257EB6A2C747CF
7113878FC1B094729613788FD31ADEFC852D2E598734CDCCCFD8C05DDC3040E3
87C62F0DBAA9DC2F6628F61497ADF417AABEAD37062A126B997B7696988A9F2B
3AC897A10789DA53D2DF6BC8441AA916C8F02240634E21A4E79A7C8F9062C2AB
821ABC614DA8C5DE3657D1A80350032D19862612D6C80422A4362A89E46F7DC9
1B557A4C8683B5295596D591703D3A1C188354695617AF56DDA1FBC56DBE898C
9AF2FF244463C0DA21C717E348E0BE63120324C3F420649F82D4160A07270010
141602C3A6572740D06F3AE476ADAE3DE5D771C66E86F97387D4AE97D6E59A55
4057B9862A120162EE8B3F4E8DA71604E6933F27729A2C7FD9A30D9E8FFA9D0A
9D090B86A2B91B89AE3479CA9B27527C68B896EDB1FAE22EE3B71C15A10C1971
0517916D0CF980211650F7FD1D657C3164611037449E390AE607F3790491D6FB
BD58617B4FAA8341C4DFBAB734E78912D306347C0DCDEBBF156308BED3E724B1
5646DD2FDEA523D863CBD4EE16455CEA2C0BEC9873A424C98F8E905C9CF80FC7
24E5A519BBD1CFD777EFC9548086229ADAC4953EEEF78155D1AAAF6A197A1B14
F0A5EAAB461B7B4C814D7591163219389B0F4E74CAF6C646E9169D885AF04A62
7278E243314F53B604C87763D8BBACAE4B22606DF4F87EC63BD74CE9504531A6
AF606B83F77678B642E1E8A32C268DC6FE77C016E19412B6011FDA90BC02ACDE
8A3A4BCFF003E895AA05182617BAC758B30905B56CCEDE37F37167FBCFA2CC9A
F628BA1877424769AD11C53BED092CD4C17A17A44068884BE4DFF69219562767
BA09C44B8F1E68BEBF387FC14BC2377955F6408A0F6951FDECE16DC97E999840
09138FD539C739477EB1F5370DD1D26E6DE100B060B7E57DAF6051F6254E6A4D
3B38558C6287C81A6FCAD90C568433B94F8088527CDABEC674B13580A32722BE
FDA8D1EA7BE286D95B7DBF3D2758D029FE6D1EC1336A154B5490D8D794DA1A9A
16DA891583A755B987124713CD716D916700E68F601F6F8A63D0FCF3135BE7E4
461907C8EF7DCF59971DE42B2B781312D14C0A9051B17B14FB582DDFDB57287C
55A74F13B01343474FA3B865C083A61C715C777F8117D2DDB83815E3868E2F4F
86F53BE69F3BBA3D0FCF5437EABD8B2A042FABFF483882103582209E9DB25ABA
5906F28D71D53750ED0F7B30F268BA2559C0B2578592CDF1FFB8A486483FB09D
A826F677BF6ACC2410A685CE4603E79C04FF94C5059BAC10947BA16CC916C66B
1F0E9688D25AE8CAA031125B61B6BE8E2F73A22316553BDFB492D1935C76CCA4
F1168492672DD4645F808213658D20FB0D8E059A9D520625C49BB777EEB850C7
481BC165D26D9173D5A2B01AF004C22AE04B48A3289E49FB112331FD1DF46319
AB90126937F60CF9E48AC36377776EBAB2E91A00A9E009C531EB63E5300CC2F3
41264C6993BB7455CB374C42FF64BA9E556DF0D1A7CE8684138AC9AC0C237AFF
69BC6F8289F9703357AC4BE04C73C1DC1F84E03D692B02A2B072252518FEC11B
39FBD137292D2C05B69E55969AE74CD3A31D6E5204F3689196C1CFC6763A9B86
752AF24A305C366150DFACB4A332E59F85B57E5D2947B2D313480A405C62E9A6
320DF9C0B926C51AC0B85964255F7346DC8CEDC702D3D57B09EF8FF7562D4A75
4F038108BD7A61604A4D5FF0DD4EB1116228DBCF4E75722C9F37E4C9B4E010E3
CA56EAA8868DB2A3DFA7967B2433B6BD77628D7DC92221438E1C15460917E6BF
342CA6B772E8A981047FBA5F4107A2A3862024E0306BC0D22E976972C71EBE2C
8F4B253EDE6068C67A6BDC0841C2E785C0851356A4FE39BFC1390EBAD6D8966E
9B2609A3FCCC76F5ED4C048FE63430BCEE7CB7349C677A05C65CCF78C7DDD293
EB63D5E7C466E528CCAF36835EE227BAC4EF115AB6116957DA97DDFA62CF9AC0
C97851F982E62B258E26E398918A834C36A0C657D4208D512E3315950F851AA0
2CD0BD544751347E9AA35209B6820D0FF6FF28AB27D2F132BF72F1BE104309CF
C7944F3E75616D118C53B8834047CAC32A61BBE94CAC3E85E92416C778BE2581
0FE125B5C289AA53571EA1D80C452D25541F3D309AC650FEAF3BDDA56769149F
2A1B8CA7965127D8FE5FE873E98EEF621E059DF969C14E19E1C820A49FD2F193
75D6E5BC2521E803FF56AA45F1574B90D1F8450805C5DD2A8E4F4C23E114246F
C103EB63B58F30688C09E1B766F6B41E595F24356F8D6E6EC6D1476CBCC4C6A3
06753C7C6E67538BA28C743EBEF8C82DA0218BC5E3356119D1E4BD658E9EB5C6
4396D14E541FDA2EE73861C682D5FD2AE1B8ED3F84FEF0673D50B14FE29A5DFE
F03C2C1A78D554F14F6156FD26793B74454BEB7210A3F88B9E37BE276A19C497
B4C23B7F0AFD393498B2EFF70B8FCD62041BB2F4871B150F9865E3FE7207BCDC
7C8CBC3CF3A9129FDD04F9A09482ABEE624C540143A1A35A14E5FF7110BFC9D5
E0419ADD2F5CC1C09AD68EBB0935D3DA2A47FC87C5E3CF18CE4227ED29B9A8CF
29D9EA657B9BCDD963E79046E4538E1175311D5C8EC1832FA60469E495151073
2711716E70D2B2CCA0BB9CE60BCF933117CD3849EAADC717918F45BFC9E4D90A
76C518B12C14382D00630FC4BCB24DDD8D68BF88779D3C541DC2C630A67428B4
31E4F3C861CB90E032ED3B553D2D5C5F3EF331806CC972387BE43F7199EB05F0
C717BD20D8BB1CC5A9F32DD6E2EAC43D4ED87516E6663D35073AE07442D24BFD
FDB028036C11263A0B11C7D838FB6135F9BF8DCCC03323FD90E3AE92245AC31B
810E4C95B7506440F3B34C329E6924572BC911432419B925629B2791A732B34A
C069FFBB7A0AEEBD872519D89ECB766FAB70ABFAD26F89E61703E7211CD7C570
A39F1135C4E9D0CFA54B5C45CD1CA9CEA2236DED7E77A8B4E0B5182C1F9F01C6
77EE3F7513729D7CF27F9A18E0B8548BF1F4DB2CE7CE111FF1EBC256A357DFA2
8D40FCD6D9B321855BDA608E23BD365208D228C10A6302AD9FB72610F1DEEA39
D2699079347807F110D3503EC68928BFBF73E85DA16F01479400E79A99F578E4
6A5E5FBF02A197321B545625093FA590EA7A2C44B5EA0504D4F1E1DA09B971F2
C4468C2AFF27F1F0E7A0D48326F58C22DBBB9B75AF60B6F2397D996F421C900B
EB332B5654306BC193F6D87C915E3E26329C3AEB150A340CF2C6B6E847062270
D7452E8DD84A9A652307B7EF8B7DCBEDF2FF5011A06D5C948F8BA701017F06A4
346DCFC946394126ED6F9FFB5D6271D4FEEB470DCB239EF9D2771EDD2A4BDD22
F82ECE54FD567040DCD5C54B9234618410808685806BDBC524F3914FB3F945E0
A8B3D0BA3DB62D680AE9DF1C22D1E205B546D86FFB6D567AEF67B112126E2ACF
3642047B54B09D3B31DF2790637E4375815EA4ABE99BE732D6518A5B8365DB72
AEC255D01E5F51974F8B80E5501D8F33616769788FE84E1E85CFE56E137BA47C
2A14D106F554978FC07A154765411925D03D58A22DCD2AEF5406DF46611E216F
8B9161510B36B230EF3E93590FA686661BC2390E19CD3DEE77F3538ABB1119F1
3CDF297EBD29C3DD1888F0FE99AD7ADAD0922C1BEAAAD9B337968A02FCA0132E
033BED6E64D0BD1E9C51FE0264A18B16E899EAB7FB6A5D283005D97035874D2B
9AFD4D3F29B4B1E6EDE30FB077310016F5279CC754F3D13AD666CBA8F8C56E27
E4466907B099BEC7CD38699015DDFA5E32143ACCD729EE43B417EFAC4D403595
265F0306D9CB3B26CB5F05EC5FBA7C19AAC361613A028572D68AB9D20F3ED413
0D20DB5FB364F7BD728B86D3BBE1E37BC2104E797474023611FAD7AC43A65982
9BCD60A999E9F3E78F6480C3C8B6297958A634242E698BAEE3C5CAC2DDB33327
0F9AEB92A892D0578C34519695EAD030B18D2B1B928D2CB8CAF6B4484B03FB87
8D974AD04A770977FBB2C31C4F8FF8BB1E7DF55CBD0EA7805A438AAB424675C4
5984BC321B833109634244037384B36372980DE4F1819DC2B4F825D7F6AF5BA3
889A9481A391152151055D2B2B9DAAA7D85A7F1D36345F3BC5A90CCE79572D44
A07DB50823C01E2F535DFC2C0655A9A103406D8CCCF97174ABCF4EBF02283169
4B2773BA052B475D09EB09469D2BB86F7BC232B842C924ADC1B1AC7AAE6732DA
C6E6E6F989D279899F037BCBD7DF2830E4F2AC7BC9A0512C5598CD6A8558B8C4
83AAE9A85021A873D7BD1ECF175A939AFAB0E4287673AA9C16174DA9F67265E4
005CF796DB04D493AB8B4AE4AB7A23CB8C28AB4960DE85EB8DF5E45ECDB7329F
90BB727A3EB118B25881E7481360A41E0439F7386F8B261FABD320AE18BDF25D
592ADB01BF6DD128E980A062580B9FA11ECC771558C49D240F662BB23D7704D4
E18B68FF3BD876AEDC7DAA52C5AA0E215357F7DC728D263C9A3578EF05590B6D
08C4D53EEB440910361E2E56BF53B36F3086EC749AE9203E0B2890D204E55C3D
6EF69FC60D33727DAE576111BD7715BA7AA3BCEC0FCDBBE065A4076A4D467ABC
F68F7FBE0C3CFF9C5CAD1CB5BA1AF1B6A8D13F6A0D3FC449304E2B504D7A6AD4
EEEBAFC8BE35B06BF8B30FFCE62048CD7B6952D4A7A5BDFEF661E9320A1726A7
6F60DAF50796CADE8F0C39DF8F351E153B539BF8237387DF6D2741ACE718440F
9AC620FFF89CFB7FCB1955C7DC8C5E42C59448931E22563699D427F8D97C7D58
151049A6CA7A8AFA280C8538B731E9C711514EE22BFB83C77161145FC0E4FC15
5733F1071351407076291515826E985DE89C5E0D7375B95EC14C717475573080
E67AB9F074981BA85FE7B19453C2013BBC37F09AC718F307E80B29885BD8B971
C8670EB6567BF3FEBF60C4D07048BCF34879B683B2846019287CC9C18589E486
CAB5C7D0D9AF69A89FE5F8EE5CCB4A2E54701FC5D60DFF13F4B2BFF0C2D48D73
A369A4A30AEF829A58C4C2EE65F3412825E15AB6E3C75600D22E6C0CEDB7DA12
5E0096D6D6825B500859210CC80DF93E7B747BD5FDBB2A7133E834379B3477DA
D425B7996592FB0395E460887BF9C10EDE96B37089A1D702D5541B68C59A1465
8A463EA2457F56703B271F766E4E8E3E36F9D84B8B5A9B4D3F553934AE1CDEF2
9DE336B98C4ADD7F99BFF30FA5B03F3EC2B79CD050513FA46B02F2263CD374C0
17DE4ABBE46728AD90E833F397246EA4C44A12EF33A54D200269AA573E6EB988
1D0B12D55859CD17EB731CB63B38F4EA29DA3443EC28D399200BFC00FD0236F2
EB01AB06A8531E4A46DF541B088F55D76B2F86DDE919FDB952B949F5AE7F706A
40F0BCD6C3905D07EEFCACD74368BDAA780C1EF9BF6A3205AC2EC474390FF4D3
445B104281ADE18AA05FD3AC7A5536CCD95377E0D3F4AB011A52ABFF33CA9F9C
8E6FF120C1BC0B5520036AA5683DD6C5F30EADF2050B71A79E2BA8841B57D1C7
F0962611EB3ADAAA4802F999D739FCFD8645008E5FDF9C86DE6697E60438DA76
A0A508D8A72BA36B195EB2A498E60E6181AA4FF088601E0BCC65D850BB99D8E7
5DA9854FC3F7AE20B22E72A4157D316541AE327E00DFD4EDBF4044F0E247D957
956045B1613114AEBFCB7AAA479AEED2F233B51BF3D9A2A91F226AF6C4C89573
7E7FEF50B56093A0781629093CD02931932BE1421294C0E2CA89BB581FF57DDB
FF7865063A2AFC57C6BA9682918633C66D46CBB936BBB429D2A39239E748FEA1
D31DD900F951767AF33F88BA6963957F3DBE73F5B64EB2951A7063B1F2970CFE
E5429A5B40AB52A3B20DA54C6D374A2272E6511BD0987B6E4A1FBAD528ADB443
3BCC81F838AAA5C53454E279BE24D3DEAA67D8ED7A01FE199BCF569C85F74282
8DBD3A572B5C21DFF08EA7AC131DEA51292F1C935F264BC41873E40028AA8F3D
D3F0BB950DC8031D505D69DBB5F5AD46B06CB8429E2CEF1DE0287BB9D9B3D500
3D79CDA613B8B4263412C0CF0B61476D286F8B442492E7A89D2DF0204E657D0E
44FCA5F79A1DEFE8E530CCD921ACF0AFD7A972250F2EA50E2A559FD72190B824
5254972A9E4781FCBAA506BD9D7CE361F9BB1DCEE5E31CFB6F594D326D48E679
190A0FAE0EB69A89E0581C35B9E5670AACADC42B84738AC04F961E03169DA1ED
0A5A2C1C623A6D6615F24FED298A68097564A908B8476F2EF2991878E11F38FF
36D1F1D67E0A154F2B4EBD8E174328A4B90D93FA215065DF8C19C153EA76C05E
7AC2AA4C67F3EE4D176E0A4B84C9F47E5E871C6768538A98A4E666860414F5C0
00CFB1279FEB8FC14062F4827830FC6DECADB54BDAD2FD90E92171E48432BBAB
9589BA5B87259D35AA0847B7E9A4E1D5C3FED9F2798B3969726181782CB418D2
A2842D2A8D814A3F0622B58625F05281FC61D6FE43CBD8FA5C856399CA50418E
0F4CB0AA7DB77CE33C016CFC65FC73BC484C694D4A0E15B86B800446E46A8522
2936C98A4D5975A9178F3A055F6BA3C3700A8182C636769856DFFC008CCA4106
2783AE15C08538A672AC7F396E302DDC4403A087EC17E2275F9F8A436D3D6EB8
48AEB3ED8FCA285454D781C5AF110ABB979B0295FBB55CBA2B0D731BA72CAF55
04A8EB348C863EDE31E97ADF14D9F180343DA29EB6D4908FC8959EC5474049A6
93CBEBA4E07CB9B5D8DE5E0B1C2257A8DC4E816B78B9EE734118C991282B1240
D3E464E928369FA93FB926139676774399E370879B537E40FD383EFEF02E3CF2
5222317FA36FFFFDC8DEB8DE95405EC7DE4C780BB7B6AD8195784DE96BECF95B
625F9BE81E96E51EC9602D4654DEB38E8E94225D8F864E791EA66CE3A7B80CCC
A6788AEF25264822AB4D94FD51449F12FDD58B76CFA594F3223C22C5045B0287
00C8710E6F425220C975AF0249835F399A5539D63AF043C136465C5C6EDD6AC0
425D8F374CC51FCB15600FF7A49A4104BC29A0D7D3B555652AD4E14D4104669F
132B4584E73C21F2C83078F5D96EDC72B7B9B4BCC12F4209B1951AF23FF685C1
4584FF171362B3551FF7356C84CF0F2434A53A3873E1326AEFC575FAEE1B5EC4
2CDDC027C7AAC514A42B45A190590663C03DB348ABE792DB5E7DB73311A007AC
CC65F1BE0CBB445E9DC99DE3BF32B95CA40F19FE0EEEAD46783F7DFB786AF63C
DD9131A6670B8968E01E75B35E782DCF2C614732F3FBAFE78126AC74EE095273
48E31E31545F0FBAE0813944C960B5A8AFC4CD1348704810FB580525AF98AAA0
49AB14508E0919E9E6D97837356B4B1F29D4B0F67C8A86432A7C6375887A31F2
E6F7B8310230D14E2DA564BAA67C916635FDCC748D4A2A0AE8620FD24CF4C248
948E397F8D99914D65E08722DCE6A5762EDB87EA4AD820C3592017228058418A
EC18D647A6DA9DBCF5A10C5007ADBE32E4238D55E4EA0ED503C7B55E1FE989CF
0BB55EC84C02CB655485B878485A966B136E08D4D6B920B84E040C63CAE71F77
A77CD77EEDDCF5D5FCB463D7EC135192132945CF336C3A1DCCF42389A260FB4B
DF2F5BBADBD746080FF1F5E739911B5115C55F586AC878E93ACF92274001029D
BD2EC90FDE715D61801FE189AB7A7530A0C7C921F2ECEBFDAD04F0767BE96061
2179D325BE5FBB515128DC83759F446877A679BDB33BA020167AFF72DFEE7D9F
802673AB160D55D1861582536A7B4AB7B90A9E4A59A72338213442AD48691C2A
47DF05F6A7466E87D3020FB2DF8B38F399C2264540350C9C4105F867E2AA3F10
C3D7063576CA5E17824D6A9B57D1DF1CEC7712FA5E6E28EEDEC74551981FE131
3ACA0F29371954548294DE90C4CC2D3D9718635F0C806A7F79AB1668CB03AA08
FB060A2ADB1AE7CF15B83C7F0DD201D74FDF7F448889F2CC1668F483A6A4080A
732B877EA2DED6026CFA1807B087EAB33E77D96B0B0340A268B0DDB25BD184FD
79C57C9EA994EA6C92A9F4213D30B583E220F80BA5571A6E412839A1E7F56243
B94E33878035A0109F73B9E8EB51C53056C2DFB020039ADA8A80553F052F9798
8D4B276110BCA39FC676F63C12D7E0B65E32A8EEA690C33C850A8BC6988EC6D8
799C4B2FEE740BCF8F66A707BB17DCF1991BCFAAD26B541D207553B790C815B7
A0FBC152B9BE768420D3695F81A9FC589975823965AA4D2FC6AE27B27A17C510
E9358D68BA4B23707BE8C925BE37F7B4C8E511C95D4B63419B2FE50C8A915F95
09A822FB278023E56BEEA38DB11B94153C95555805F13A46336CD2171FFC3559
65BDD458822760954D2CE0CE474B3A5826DE04B5E80FBDF2108C586C0736E62C
D1CEB660425F040200EDAE2413F87490FE4A2684FBE4E08CED552C09CDB80ADB
AB2BFB7CE59F837E45873CD3DD3281D71574370C35C4DDAFB83D73096F7F52A3
424F1B7995A97253C8F822C11204E340647F1CBB8F138F1F254A77EA74602C6D
2BD4D780571679365FABB27E42E2314850D21041D6849F5A34F0C817D4AAC65D
566003B04D0603504C04951290F43BA455DEF16A9D1BC2EE98C878DD54F9923F
72D6AC5BA847A7B9434ED08E727628710490D4EAAFB5AA2AEC52E3A4F818C280
47AAFDD92534DA0E0876FACE36FE6F39331DC4E3A6A4F76F7394088DC50A1C1F
C14A0F8E5003D4703A0718C82DB8383DFB5DA7A5A97407F3DEF442B8DCCDEC2D
DC9AABB1B22C9B5C4F117DE2AE7A5AD40E10979FD7473F2CEF1B3EC877FAEF37
091968B9DCDF924979BEE3F3B23AC8689D34A4AFF927895017165AF8F6B730EF
CEA25925039DBAB8682DC2477EFB73DB13B45BD482CDDFA1C1ADF00602581EEE
DD6C8F062E3E6783AD762482408DC75918106270C7F476591F47BC406326CD9E
79E7F6B3864154FE0C28AAF68F401CDFC0241B4712D56B35AF4D8D306B37B435
FF635B80BCC4B4912AC3076B863D865D845D41948E27E1F2FA81FE54BE6C57EF
8C2B2E460F0865F4C5D2F93158A6728EB552FA09202865142FE8D1300CB74AF0
E31D8D407BF78624E191DBC2C225A3D3AF1E9BFE828C9AA085B3B5A87A04282C
152610C6DF152CD384D738F14606218CF236274FE5B883EE84FDF41236AD3AB8
41F012FFB59340D23E1BFE1487D82689119BB85674B7E6116DE8A806A98D1123
79C8DE23C75AF530BBACF069483535286B41180AD68E00DF5037586FB1A55007
FA8C162FCC451CDF5508519B9B58B5BACA7207A8E469C77D12726F959C04D04E
C6CCC6D5C4515070E4EB6AD127A2E2C46A90F5C92C686F122D59B3F30C9D7CAA
718915AF41D9CAFA0CAEAF0A927D5C7DDCE03DCCB229C4467E650BF1B0626F3B
6FCDE016EC757883083D7F28ED966770CE5417866EC07D54C89A8053FB4C2054
13CA5F80954A784E90371976C5FAE1625D62879E4B5A7F10378A9855BCF64D6A
0AEB2C3DDAB25909FEF00778D7003A85E2BDE0CB527595851B12A3C1E1FB53FD
9B346864E6AF66249F871D883DBB1CC9F5BE250F123027EEAC691DE581708664
E7514F44EE67F9147F84117948C4C6A871D8284CFF29A4FA8C83E4AD433C084D
0AD5E2164D50C910B8C1498E43CEB5C4BDA5A093F493F51B52788B4525A509F5
60DE14521C015B5855F0998A24B79A81AEAA9A670779BDEECBD9D75C25B1DE87
0FB547D657B91139CE999977C1DD7015B4C4BEC14BE403299463C32D52D9EEC7
DCCBF08D161008B70521E4C3F3EFD4F84DC63083CC9EB036C85D32043C847D11
D7DA737251FB47D0B21212E70DAB43362E764A2BDA0F6C1B24426E302DDC4403
A087EDD776DC7501DE9DB60CAD2D55EFA306290781178780D451406A9F6A3A2F
E7FA1826E5DAC5C0D5A7CB777899F0F8991BCC59ABDC30CF9725C7679721976F
0D034710815B655D1239A7FD2CC98708E04A5AB714B111D8A8FE86B41848CBFA
FE44700EC4BF98029957096037583594684734762434947D4ACF22EC57D40ECF
628EC96EA4CF47C190C83306A1E11D90CBACD2808878266A198BE77159380FFB
B379D5C2D949F1CF7C81D9FED79367104EC44AEDB35A7DE111B268EB02E852A1
7B101AC4D7EF91B7D778BA17ED74243FE51E6BAD891BC2CCACF0C9E1BC503620
270D693391DEA7CB26D4A418E48A2989167B7DCE2466E29D4469DC7E5A9141AD
2C56C395D1B1542BDDF61B53F5158B8A851E1B210C3AAB5A51451DA27DD7DA80
FCD52AF20906E6873997A3490967DCFBB99FFA480FF4A1943CB3BB9746927708
56D2C163DF16C10F38588227F3347DD399B8A04327DC057B08DB8F80AD718FE0
C9DB930FE68C8085F24845B77B6AB47E0EB897E7EEBD2D0C6FD2D2DD0C2CE122
674E4F20CB5034E660B814E9F857C59027462990DB2960ED2C624CAAA8C031D7
18CB10253A3FEE5739C91205A98E76F2C80BB771975E7513D0156D23EEAB3493
706076D62F4C407BE252B5F31039CFF52E7FC3F8FFD925675379569A1DB1723E
07A385333CEAE00CA3EFF2C9858336F527238ECDAF7D11D36E957231FE073F74
0D246EB15EC2183F1CB7655376F5FE6469726A1FD6996BEEBB7E1A4F11954E66
9DE14B907CAB448E39C69D6D3C9D2C4B706A00CC6FC0C6FDC412D1B1E0A59E09
ED1B3F3CC28EE10BE6610B8820C212630C2D9D32EF432D40187558084D9CD408
EF7FDCE23F465AFCAA8EAD6FD5C815CA35B7EFF8A256212E9EC4897DD4F12C79
11CD860F2BFB2C8381E13CB69A288CFB8408890ECB59097DE4BBC352BE2CDD01
A6B2628A48571587D75B1E1BBE1A5D50D7D4FA086B02F42B2EF6104F0437D55A
4BA4FE826D77AB3C26FB93A62D5DFEA07A0C80C0A828A47BB32AA9606B83F776
78B642E1E8A32C268DC6FE77C016E43EAF26D44CF32E3CA37C0A3C956D0251A3
799F7AC8EDBDE03B53BA096EE9A53EFC3D43014A8761F3B973F45C99E8C67537
2BDD73B0B19BD143C697D103B20F96993A8F06E4EC76FE3383700A594ADE0E9D
59FF37C4F4E6E2210D453E6BF41692DEC5CBC2465BF1CE78A971F4AC9C819E94
49FE10A4FAB74EC7001C7FA5C9A5623B07973FD2D4CE866D35503E63EC4E8839
96473C1542283845509C582AB8585D9C731EB49F2FA5A5A6B5E003D704FC6A86
54B78E219263F40C72D7984425606DDDE632D7AD1F4044BA832436D1EC34DAE7
D9BF5033533583821D40C6DE3BC9C4A83EA7AF7C30BBF5848B9A43DC60097A49
509923ACE934EA61838AAA3CF084DCB1FFBD0AD41ADC93AD2D2E060770E4CBB9
6F020FD149273B2C0E5055E327D583A197C0C36D4D35AF4F7F0875D4A77395A3
D68627D0E5CB50F09C029DFD240DD11799F2F6B3FC04385048972108B1190E19
1E921521A4BD6E4A678BD8857D176A45F3E15946610E9F323CD7F2A9CD574B60
FCDC337880A0F5433CE8B6F1A3C9DA8C4CDBD29377F1B90CACAB36D8755DFE72
1577703E5588268DAA865478898C64529049A810E6C52BCD44A4F9A2E41B30E5
C948FAB0C8D1C62CB37E6B7B0934D43B9A24F5A9BDEA3D6D9690B071F9E316B7
65508EE98BF576EF311BDD72638EC88A57C2DF066F90C26944439B59CDD0C32A
0411F64D448641380DA7BB3B79B89DE7E561195C6853D22BF99D85992FEAD426
81E6D0DACBECAFBFEF8E1885081943A757218D16DC68B79E45EA683DF15336D0
7AC3B4F744E0A34913ED4906965E3E26329C3AEB150A340CF2C6B6E847062270
D25E0B7861DD577C9C65D7561AC7536C61F215557C0D8403F90F4EE3D8ED6F50
AE60AF3E00B6E524774D43991159E79C613EB234EA2AC527C5E0F43C29B797B0
0D04AF6B50DFADF923F763A8F3E79EACD5C3AE21E8E0E5DD105B391CB1658CD2
7FC5FD7FCA057EC2E3231296F67B8A74D3B0B3AE8CEBC1461957D7BAA20EB916
8C6AA9E422279A972D0FC17976DEB8C98ED2B30FFC89509DFFBE19A52851BEA6
44871B11BE44463195D56642A713F9F3E0025A7FF3BF07644BE345E1989F01BF
6F95C6BE6CA90CC362E31324B0F048C2F099F9085FC2395C8F5A8934893CB958
27A262D846549BAEB53987787AC9AF72F866C219347F945275CB4A4692393F56
1AC3395F6D9B8AE4F805370E2B091DBE029CECB93447111807A857DC545E0690
6E8D62581D54A0EADF9DEFFB3DB34A9F052BCE33D0F108B6DAB80FD9B553A520
6ED35EAF92015BF312EAE929EA444F24A7256E1A20BB902AA55B520FBE8CCB73
61AE965E6EB58AE03B17825065A7D17F4815CA118A1F4985F59A147695843FD9
CF8D6BEB3B9A8FDB3333B694B4929E26B9DC09081469223AA0219763C2B44F42
60042FB74E9DCCBEAEDAAEF7F7DF4CCAB29A5B26E9167045C9C41F593D734DD7
CB5C9B7DBCAFD9B53928CB0BB9346AF4DEDE36946FBFC4D184CB3471F958F98B
5D41193314484466A9AA7EED0A2C9DC58C0E1C62AF2EFAB5813E8AE7AFB8A2FC
43AC60378CB8294F8A392BAE3346AB7413B311314A73CB5954C6D639CEB6F8A0
A1F4D9414F1CA7D92E9C8A8FA9E7F90D27E38DA7BAE33901AF57C7DB960AD435
B444547DF7D9B7F9EA1DD690571689F7233406BEDCBF38ECCF14EE2FF0443BF7
7799E457D5902471349FDD506F9AF778B4A8AC4B74D356F94193EE7169D5E494
BAE2FFCF9AB319C9F3BCA04911B77B657C0E6ED9083D4EB1E5705F6DB7EF310F
0BE1B88E80F8DFB0CEC466D8EC1AD94FCD6D373246804BA5F2171C5C56B6562A
163F499BF079A64E39E02C98CFBED9D1B87A8DC71DD68657DC9DFD282B79BC3F
A1308AE4D972D368412B3F53498893B639806DAAF3E5F1EC2EAB9EFD6057BFFF
54E7FBB6A1249960384EB4B84EC4C71E91D872B1DB3B7EE411FC778D7A3CFE29
87ADFCF5EBB603227FA2702D5777EBE0F142DFE14CB390C69AAF35C89B103DF5
666EE9AE0354BE87429FD1D9DA6F6DFE3B7B5B4A1B7CA05420725F1BFD8951C6
44A10ABB7CBC3A579E69FD9DBBE5372C3BD51140E9933D1A469A390397432293
D3349640BD48EEF60AE32AF9ABFF613F157B6D35489507729D3A3B7C2969FF79
975C870E6D88A5E7E0269BAB29E63CA91A99D154F0641FB9CE560A545A7BA470
1AA0CB88FD8E67042A4ECA15D9F55B04D90A1A097416C37525D9570A02EEFE2C
B89A06CE00E6368EC95C28A2322E7CD3C520B098F91CA7D05E9F9ACA1ABA6C34
8AA62F56A599959C0862437825ED863EC17D6841CDC8CDE26ACA7C9BBA02F8D9
F13735BC776BA62CFB1A2476D583414044BA28557EBCC1DA9A19ACD311615528
C0A651527EAE44B6D7F1F1A3A33E606313AD888A0403EC28809A90A8C2663A93
0C0D36B0567BBA3AE2C7E0BD277C5DF3B4B12756415A23D5D0BFE8BCEB3E07D6
EEFAFA9B374E36996C388151095D1CA40B9417A1DB1BC9CFD7A726E5853FD36E
4D0D73481A2F4E805099DD20BD5794C717EE522FA72AF786A25FC81B91DDCE0C
A3E5B551096DD5762189E8BC4FBAD7E24E2B18FA0D5A7BAAB82D3297C9CEDC20
F96391F3F16E7B0E575DAC7A0324909EF3EF2A4C728BC84903C03672546AF3ED
E43B35792D80CE15A6BEF1CE581469025174497638D4991FD23B742F56E4C380
A99E72C844B9AEBB27F26A5A3389398CFAE168DE655CCB85FB2E72C077FE573F
409DA085A2924AFA8EAF38671465D9214324D02A58B7A72633D8B54A9F6FB9DC
885F2AD08CD95EBDE0DD01471D1BE654997C47A31791EE4E5B71BED97C43DCBE
EF55ACFB21869ADFE7BC7CEA87DED25AE93D0E43EA397C165016F200508EF5A8
AF30C26D40A7D83CB8FFDAA0F70FE8D129EBA28BEC226FE0472042A3532C42DD
5BD8D02D8B4EA1AEC126C5C43D0834815359965B5194E7712BBDF81331DFD7F5
3608DA3A7AF84DE2197685F130B57446765DE8106FDC64B54F82426DC14940F9
C17F90CEDC842E00DEC6A9D550DBB6ABB870F0D7557BD333B9642BF675C978FC
A80A7BFFC71FFE54A71EBCE160ACB6D82A387BC8F02FA3BE4F5C6EC6B13F84D8
460A7B65FAE4A538D73EED2D6E97D208D1E285F087CC2F4565EEE4FAA3E864AF
2F321EC841D43DDA516F689397F8006B07A3CD38C5A746B3570B7101106C3939
B2659AF8A0F6DFDCA7A99068183B91C19A97C0653724C5808FBA3C4711639DBE
BC93083B90ED99996BB1A76709275032B7ABE1136C4AEEF47949FE48F1D0B65D
64E40E60CD349B8C4A3402B5441115409C2FE8571EDE178F1D4749F47A5C3171
AA5E45C450B162F8C65A907C830D1589D4F3C0977E52F622B11B508FA50A54C7
F67E157648B76E12C914CEB528E9B29F21BD4FB981C04224B67F3BFC81946750
8EB98481294200C4FEA28D38518FFD13925246B0974EA91D7A3D7BDB87E2DF4F
D5CE26827DEE12F1C06A228FA584024C96457559901E4191222775300DDF7F46
3EA60EDCE62116ECCD472298ABDC3F8F945E8803662299C3FE983D7D85435A62
220BD087D9CF2FB4A626EA3E546717AE6E23981338327ADE58E34897555E4185
6D173CED91E77A8626A29B22D81F25BB54E07D94B187D72A93518C1C686CAD65
DDE0CCACED632E4A89ED435F4F843AEB0DE2D08746E18A70170F7386DAD3BBAA
7BCC1FC72BF1E02379BE1B8F3D3BA404CE6F336551A6836C0430A946C0D86419
0CE11362E38B327E0B98FBB2E7E8FE43EA25BAED0603112EBF0B85243004016D
D87751CF46E6A4016FAC523F88A8C988DBEE0A8AA178ED3C33DC9AA21530412B
AAF3A01DA29D5583E2A08AC332C9DECB22786BEAF0C3225FAF383118BF9A3217
C35EEB6C83C9FF058EDFE2A230CA84619B3D384885B46037CE12B7173A3D70EF
8EEDF532B205FD97BFB549E335E75200B5B67235E027E8D157952B552E82CC22
BA7E5C8DF003AF661550418EC17C3B6069D7BF949AE66CA6EF6FD2B82E594E51
3F6357B54389C5E44E2817807494BDA2645D0FDFCFBECC8B621B0D8D5A8EC2EF
922D917CDB0ADD125F3CFDD64AF36B6E54543B4114855461C83881CDF494C2B4
363E2EE061BBFC66180409995938F9BD5A6CA0873B2E3741D8D2620D6033A76D
BC83BCF17DFC2CB1112F643AECC32EE50DA6ED4BD6582E0925DDC2C0F2F0DA63
D0C8C7FE442F12102954822C27F9880C2455340585B923EEA3B845656FDF74BA
B0D6BEA9E4EB416C2278457FFBFDB49540F8F7328A0593F1BC51713152EB8A2A
03024C02D93E6D8D2A0C102A9CCB251EDF3C3EE20353FF5D8050DD13B93F7422
DD65D647FB6337D439037D44325069C0C4D00C40DE8C48F205F7524BDB04A71C
40EAE4F39F192B2A2CD3C1D603EE3527EF55A97594DBE1BC513611ED0874B55A
2F393F513C09D57D1775AAC969B6F1C411E18FFE4860F3348229304471907755
2FCEAD9C605AF732517DFE1339E4C6CE79061EF888CE6BF0D027B8108BA0B837
63E2F7A028295F2EB56546835EC34CF9006FA3F2CE815C7ED6E13CDD051D9D64
2A3089241999056B28C286599AEEC0F49FBAD1249970879701B01FFC7EFC9F1A
9A6E4FD2E9C79AF58766073C78557D9D42AFE409F192C58781FB2AB6426BF36B
BE64AC89C4B95E45C51E983402BC3583689F29C9969749592E859601FE46D36B
15DED94C7877DA020A9A9C6CCD5A553D5560029C2C808865F2648E4D5DB0D6A1
10F560FAFA9077247C061119676D365A588850A581EF4043103A7D5350D8C0CE
4C665A6901CDCDE509BA11DA761AF3328CC905C657929C41A306FBE3D2F468F3
A662326EEAE48CF373F19D34BC71C9685FAB3D26851036D287909C137FD6875E
E81F813F4B43DCBEF238880FE09D144AE59DB0F48C8D9349B322FD0B3D25692D
2D97AB8BEB6F1FEB404E47901751F077A3443B9336946FE5CB51B52BE00F2153
2431D428B1076EF38DF09636DCC38824533FAB944F2F414D6447F99813AE50F3
116FC4627DE4402E9A04C760921B553F1834933FF902B0D9474826391137B655
C3EBE2730860DA8510619533272D13BE12439CC94F4E14A242BA2DABE752CD14
087E18B05CDA8B26B12BBA6E7F24D888C4FAFDA4F468D66D8EEDF65C6E11DB35
9B238B001B405B496D082E67924B43BF6CE43C9140AA5F8FE895E4093068661E
BB24600C577CDF514D89222B39F7D09A121118428CE2641EB7CB19D5C7ED23A3
308BC012A670F78AEC964FC4223F27FC80817B67E939CF690133EDE92FFACAE3
089BECF9CE6E41E6C4AEF2CE7215F9FB88D09FE4D1FCC0B364541E4BC8065BAF
393FFAB924635579E7CF52B739B1EC5437B8F67721883BB280365F5DA1C9A7DF
298B8C2265398DD7902FC0E967F6DECA7277FCA73E841737D9AA451FCB197A7D
F573B91E5481522C7E5449ED049CDF2A7B8023AC76A1F343BB3E1061CF4DCFCF
D87D706A3082786EF3F7F22A500C53429EF18C3D347430A1B8925501B9467826
9823C87331C9579B9F24C9D4F232BFC563252DAA82D94C21A9767AAC67D0310F
61F2F1176859F83BA20A28ED403E97020BA48ACFE8EAD930BE14D658B958672E
0C9A5F110B2CD2B20FD0CCBD54ECEAF532B3CAAE77A647138A1D7091799A7843
AD1D70EEBA68EC4D8423E3E8129E96214E441110AB67B9F5C784351D1A04CC8D
1D47C4EF2DA54702EBC6C54D57FB9F84DC0814BE7898F251048B351EF0CA4CA8
695D79A3051E97241C4FA2A2DE4E3D50CE02DAD93C35CBC55384326343075779
62E812EB996114BC9BEBF21CACC96B08735E9D71B957EE81881E93CCCC75E0E0
97FA9767D8D55A0BC8ACE6E7972CDD9318A247900C698EB3D768E918523F07BE
F10B0BB14C4D4DE4F2AEDF89BD8951D519655631480556C59FF1D9066D4C5B55
0A69CF55AC2C8350C57189061F3DC0EE814DE110583455A712401862BBDB00CB
217F957D335347A98A5A3240EEF562D1607B33BA9781D266CC3BC1554157A223
44A6C4A1B16AB74055B37D83F04E3CEC6711A9944BF7C78F77AB9FC20233AFDF
7AC708AA06959B90B191F8EAA28051C336B76DE774B2CCB63E5307AE41ECDB5F
F231C58553CFCFCD20E316FB229762B1BA041D45C1C84F7A4104D14F3A5945C0
4A10922AA24984276F4C75D431F03E0F37668F77C77D1C1E18515F5CC3BB29A6
25AF1A072AD2D80D229BA32F5A687B74DAC1CE89B910AF6CC57EB28F3AE398CC
FCD35FCF5AE53F2661518DAD5447E4718AFF4F3A1A611D47EE7B715BF06D0F86
AD7415980ADCFCF9D9264ED3E1F628D70D08EF61ABF7A2164B1AD38EBCFD00B2
5EE58D4763F5B0E1848C67E09DFCC6C04AB5AF960A97A9BC863553D9ABB83324
D78AE80194A3DBFF564F2AD244533A882A49C75E434DD46C0B5B7D98D6F1A2C5
883B43DD38A3FA559D43564DA4AA62C85BD7FA4333AFA4FE8480F8CC893FBA8F
A97AFF07FA05D23A01A37B13382227A754C1E76427F112C008D3347920F1AA1B
60B2AD65E2C85BE7C16846CCB1EA1D30F975A732DB62D2E7695E544CB5408725
D148E5378DF30687D3BB920C4790D066385DB53C6F11609D1350697C5BFE5FAE
5FB53BA5429C922CDAC6C3F2E101693C946393569A96B781D5E506C3401F542C
0687C763A01B29DCF2CA734EECA66158FCF5E3A4A5F3BAA5A769D039CBA7AEE9
B7949A4B4144BF0E39F30BEC6844B789C23C205DC4F7292A7491B232DEA17566
FDA74EA2986F7B6E7AB230EBC988C57B6D6B8A12ECA7752E0477CC7F945AA8CA
30ECC8B013933BD9BAFCB990105C1DED1E1831987B40196CABC6A8DAE7C748AF
4277E80E833B14257BABB80D04DB6BA6A0CDAE79D40014B98CFC649D9F8D56AF
C3BD3CF251ADE3332D78A5CA62E686E175DAED88BD2F0CC90694AA92C19AFB0B
2E860411800D5ABCA845E2B6128E6C913C8816064FE3B23DD4EB3E437DA8C0E1
86C1646CAFE072D903ADD678B96D9C7AB9BCD283495FF2A2B4237E5B3645292E
F49EFBA1C6AE4D8DA4A81EAE82EFF7BD0E85B575778601965B2E7F51437E843A
0B8AFAEEBAF3A9708BA4704DCF1880FA0EA26BEFD997F7D9420A2B9ED27C588A
C66453F951D86E0E4C62BFF030F461E614AC870A28CE055900E10DF0E9641DBB
70577AE828DD3CAE98FA9E1A721DB1A7B44A6E96E97520EE266EA1828B34F8CD
A86CB887E16695246E9514319999B6DF3174DE77BC7498AD36840739EEB2C1A1
E445CD0BFA7EFCC4C402515F0987FBA6A08A80405A3075A8D099F7E76A289449
7D79F8509C5982453C57722A7FAC52BA1B67DA2B7114DC06904F0684E0F805FF
7E29BBBA2C52EE0385F33690BDADA2B0D53B7C46984247FFAABFA9652CE7AF17
8B421B0DC4AC69692C026FF463473278D3831B545DB05487C88DB06E31E49C5E
69D762FDC1622DF8D7621812685D7D153D09606E1E6F0299D8043C4F35B031A2
488E7B130462CAC1C6199D7204ECCD640A245C8A5B229AD3704592E08866BFAC
369C751D7350C145762B5CAF00DC4A4AD75A97378E6C1E29602B6670D9BE79DF
B472FDD581E6A2D43BDA5ACB1CF7ACE1D5EA20F6E58BAFC37327C1C519EAB109
554FDEB8CB91138634D14849CE3236900E2990E3FC386BD692E14F92D4FBBD7F
3F8084E7BEE40FEDCAF3E4DB41FC221A2A168CCAC7D4E6243535751DB45DC5EF
9B85371252CEA939741E24C88BA9A06158FED814509AA592188C58208AD89920
65640C0252988FE3951D465F3B1936A5DCB1B43C41854F0856B6AF9099B8BDB6
000E5FF6B07DA395BCD78139D2737B43EEDEAF18A9334BA7F8204169E433B702
693CF4B2DD72A1C4950D640262E1354DF51015929435B17E148ACE32F9CB5BCD
0D4CDDF35A96C5CB07C3ADF454D147D0FC0C36F79B6A0F641747467ABBC192C0
C0F535F0CDF6362291C49E7DBD81C69C5DBA36AEEC17357403F263ABFE28369F
37BFA6A2708B8633953CAEE49A7DA8ECD98509EF76889F27EA5A327F1E318A75
7B04DDBFE5FF8BF5257A549A4BA9866D7622A5DBED3705DFE13EB7E3AF75001A
E8C8203622C7290F46F534CB35DBCA03CAE19A98F8114090E2D39F9B2E14F806
85125D4777602F732DCCDAB71EB262B8A87DFD9D73E2275C26835080FD2AC78D
E88BF65298A8EB4181F5BC811C25AE365EA7A44553C0A02F477E6169355E7DB5
C823EFD83E5C0CF4C2A2212001F3EF1EFE302F694C5456921A047119B40830A3
9909494E86AEE21694223DF303DDB4DAB92AE722C326065E48F4EC7FBF2E1158
F055358FBF9F2F82E1A8B2ECEE35641512CA9C0ED68138F940E0315C9285436E
5868E756EFA26237F1F33881825A51F523906866DE7293A1F71DF875BB199FA5
8D444899244488BD62694A5DD0BDB90C60A5EA34DEA95035262B4F3AECC71B41
1C533A5CC6E235B63CEF024C8BA292928FCF051BBDBDA7942886181D89F8EA7B
A11962E3CB79BE333DC829F1D03D211175AB982226616B19C51800E0769D65BA
4C88C8934ABD872C9099AB98A49922824A4269C1F51D28CF849D07521DE30F80
A6CFFBAC0CA1E1FC0FFD6FC77F1AA11A8AFA6B6EBA8FCA6750CB48A95CA0A7DE
8F3A8C7100DDBAFA847E6CC4A1E70CC7CD343C785B03952F95336FC074602E69
57DA97DDFA62CF9AC0CDBE0808DF242157F4D3DB0519EA9095EE0320B1B6AF53
5B09AFD50612B985AA1BB8A7F709BDBA6705D80FBF0EE95A8444AFF044845F16
B02C5105565CBB43DE8DD9B3663D37894D054AA38BC5095F322AE1B521B693B3
84A10EC222A900B1910B7CD0FACBB9AAF4192FB72637BDC2D6FC3906F211147B
A146D78C62B62FBEA3A04583F3C7D16D387C336804C9D88F0EEB0C30D71682B5
B25A471EECD289A51B0665AC173EE49D35610EE4E76D4F11F422F16A713EA243
7D82D5FCFC2376A68A69B6CC9E4836EF6896623BA52DDAF4E7A7BB78C760D454
E5A151B5B2A9B70EC43DD2CC4D4A7CD70AFE529E542684F76E6B3B26B2BEC856
EE0ED85C5BDEEDE598431497DF9AF68B05287FA0B0F99A93528F663F694BE474
36D806A712D8075F1ECAE49B9BB9DCDD81DCFDAEF221993D48754421E6444BA9
5515862E744155C846F4750E26EDD997605E246B7E846ADCE6D56F23D7F3F7CD
41A470003AAB80E1A3A054FAAB7F2A979308224755206EC47A239DFD8824F52E
B30D25A9940FCC74C45B6B46CBC0A2787A829639B3106F43B885806930D7FB64
327C1FA0C386F50D2C9FC7F252AD669BB39A19492924A81AE9808BC121551BD2
6F4ECFA13415BA19B37938E33B6C446637D795510E5BFA475E8051C73026B1B7
D86A106FFAFA2CB139762BA4D2046C23DCF069221A28B395DA16A6711C116432
8D3D72B03A8D6902B2DC12DAC3E89351A44F9AFBB3A238B7DA900CDF822A4761
6498009B01210B1273766151F36B081FFA1E403BB81EEDEF8A16CD26816D66B7
BCEDBE1DD0B5D560DF7DDC6F3E2CC8DA4623112FB1E3B5437964E2431F7B614C
D62017182AB8F57670DD11EA6E1A14EBB1BBB062CE726E106E13371B96F765C3
DC78F1CB1154E63B1B89213BDFFC5F1C26E67CB553BF98D2CCD6A88B0A67C909
E66B76985E7B9D061AC8C425EB6158A7A32EC17DCECE34947BFAA3AFBDEF2101
3D3A0B25C5CE55AB4DF88D6DB44330DCF88F599EC5E1F3DBF5792893B4528161
410E49CBE74C82A940F6DCC88AA7023C4B88777F963E88805F90EF2EB65FBDD8
6A1244A76764E363591C86F988D3E047F16CDC2EFC954440110E72F525358FFC
C85F7BC10C4DC789C554E08E473E3EC59CB05BC2A8C359218F5268C9A28C3DB8
57935C81CF7CC61260CF2B227DED699ADDE69F0F8D6B12A8903055D53313DBD1
DE6C8937D66B3714B8EE74837CDDFBEF79999598E57464E82D184CF76BE6CC50
2DD3D91816A84B5A0E61B4A96FAE7439D74DC29EBEA8F9CFEFA673A3FFB3D478
EF32B286D1738E60C074C6C5C079921733546199D9EEC967EB4A346B602A97D3
DEDF6608B60A582EAB8DE29408577107D18646D569D4590DB773F00878CEC244
1E27E0A163883774284C4C5001D96482810E7EA302766B71B6EC24FD7B4DE021
68F9A05F2EEDBC5C34FCBD8F76C57F933603320432479BF3E3D83DBD7DCD4F71
96A6B2686F1F7268661B91332AC07885C826D0A738D7611D82A36F9FC00D0BE0
2AC723699FD4A5BA72587E32274197FF8C194008BBA9624B355E9E71CAAF5A17
D5598D8E8BB772EF73E44F15E2B8964878C02328BD308424854AFD3AD930AF49
79D182221810546F0009F98531353C9A8EBFE7DB9C9A10ACE2C18D44944553A3
39A4F5D0B6AD45BFF4891BF8C3A1C7227228FE4D5CC6EE8458FE2C84C3F13AC7
399019345C375D5100DBEE9F5831E18510B9BF1128D67639A48A43841DAAFF1B
72C9674F6E96612E84F89297C59649CC759617E70CAA48F4A3ED6D0A92C08E4B
79F8C713BC7E31E870020D1BBAC56A8FD9FD1DC9F621C157FC555B4D973E2404
0EF2AFF7DCA4511480B9077A8806EFDADF015452EE319C1222495511637ABD5A
6967E6004D88512A8506E972013820D76B5A92D5BFDC37A921D1DFFE0B1C5A8E
B36741A2DFE943B0E25640416B905950F1C0FE7EEADC6AFC6FD8FCD2856B3B38
FBE2DC3C70CD8777C1DB8F5B0DCBFB9C8A95985A0571E67A52C13E2E55C03F39
A3B9FDEF15DA1FE7FC5804B3A7DE99EC88FA62EBC0C595D7A083B3A30DCC21E4
038F6EDDD28038E326E55E306EE1C5F4D673B253BFAD5DEDF022294BF0F60543
76893F64D24DDE0E0560100742C0C991B59FC898AA9CC6516DC7A0660CC2B0B3
C78EA9652D67879A2D238F71836827211B879B0652D79EDC835375ED3D788CB9
83726F9ECA5C9BABFA49E8217131544D9B05B51C424377578E1F7322697C44D4
AB874F57E4903334E16CB470C1028F44347CDA0C2E3AABB4D0AE6285563D87A7
594C1DCB2C662679D6B692A04DA68DAFF042AFE03CB33372301E5F59D0BA242F
5FE84EA48A09618DEEDE0F42C7E42B793B74454BEB72102588169E618E6B2A23
E0D6725DF836C1C62F7C09A0AB81C8E8D447D5FF7EA0CC48402DBFB9F42CB40A
63BBEC54EC63CCB18E93BC17C4D80097ADE872BD5CF46386D69730FAB26DC4AD
37A8C676DBA95260D743937716582CF4A5144D232D96C795E4EC7E279F1F1A16
4B444185083907081825CFBBBD258E363FE60C90C7AFA95D167057C1A1B5066E
3321E64B2331D9E90AC2234C15EEAD67106F1577A93E12C2D8B5230231DE743A
60BC0E04F067A5C13D434667F08EBE906D3B9EC53E7FDFA26F060FC883892586
428602B9DF105BA1F4CEA6F23E7D025234B7C3DD2F5898217F5A26909B1D2020
03469068A5BD2017D3094B67D6A21F2F943E4D15E091902C8368DFCF9AA0F11E
A6E3E3EEAF3479A5591C349D897BCAA28FFDFDDB25B9773493EDA92613F8CD75
203D0BF3A3C7921F475D02D0DACCEEFC5D2A5617DBA630724BD002C7E7F4F512
C488EF7093D5146E2538DB8C1A1278D2CC07BF989CEC3ECC3BCFA3A5A5A5C061
32E3F92F9A7DC0AE201544DC7A3E5F86420B0D93133DD2DC58828E007E0C19A8
02A795C11FCD4BA5F29026B4F9F6FA1460C282DA9B4B37C95C8E4377B099FFA0
5EBA35709EE537683A98D01C5CDCCB6064647E26B515931218F617A4B54899B4
B066FD03384DED7F2AB18281D37B9D56B3AA8B007F4368368B64371BFF9CABB4
7F838B603A7BA37C4FF540E3DFD88BE3AFADB32E0527BDB68D0A2B5ABCBEDE23
CBC03359F62327FEA224A856E0B7309A9711146DA95BA981E94CF64E71F6017D
DD85B0F8AD2FDFA0AFBD10D3E512F22AACF2D33AB5D9FE7BC6838B6D167DFD3C
504AA14EF4DA60248130F81F4EDC871BBF6CCBEF418373E9D49A4FE8FD49FC9C
8914C4A02DCB27989E0752A84B8537F09B4884979D611382D96BE1124E7ED753
8635EDB16056FF059F996B83FBD1511275A29FB284F38140FFB6A303B11D9930
27884012CDC35C4B36242F8D77D18D91AF46A320A0932B65C1FF7776FC2AD3CC
8496259C1B053FAB27AD15B45820BA2C8942FB1311365882421129BD67EC85C6
C829C038EEF4F07BE865D79899CDADD1656E90C816B95BDE06056718020AFA8F
C106A2C43DCD99519797534E05AD6F4C749DF90FF8E5E3FF4D8E64CE7047AEEB
7FB1D3FE714BC12E5592664AADD69471CE6B07099AF0E0F7240A1B663AA361A3
3DD43932C02CA9125AA09D290C96D22C17CD43FFA7D539986B863DBAACFDE460
906271A828EADF88D41F1CE0D017652753ED5914DB79DB11E821A00930D83FB1
79B8A1F08379922A637297BFEB9F5002AE1230C4BC5F76AD2134CC4DDB0863CA
89792D133D36D963BF8667C8DC3E83CA195EF6ED3B6F9EB26A841BA76536B62D
20E752B76BADF8AA33822F0E5F0C79468E29838365121EAD77DB71CBA6FAE153
2A44951004434961BF1742DEDF34244D43CB96CBDDBE2087B6857B2A9A6426F6
010B1050C5F50CA931A8AED09024EEBA17BDE539B8BF0673882164FF2F57FE5D
DAEF20A802166E78539970EFB2D13C855D11D212CE13ABD5A5378542E9F80D11
80B1FCA1A75090DCBAE8DB96C15B1849D1059DD6AA15B6DD86726F1107016FD8
8A03A679E33AF7875C4AF4C0E9655171298F07DF376DE565D115026D6CEC0671
ED2BC4F1E12B16DA8FA645F56CF2C11B51C900FBE76AD7232F07F13A18F68E71
FA1567B10B0CCD4C547A0934FFD3110CBF8F774728E4278EEC55AEB085C81244
6BF6EAAD2163B2871DDB76497570C90861F3ECFC0971D7588606F7AB41B429CB
F347632CFE037499C0CF49F30A7068432DEC0053CEC7BFED397F59BEB40AF34F
BAC6A77BCA95B6F655020E2964AD82AD77382DFF490C111AA0834EBA348614E3
850F7328DD6D712F93B14AFE7077315AF4B7ECAC8A60F0907F292315B0EFE711
C73724DACF326AD2F36FD2EB62CF4C2B70796A23BE194031C3D3AD5C7BE95535
B486F8C805A2EE1D38F2EA585A225AD6870F268F04A18665F01C9A647943E6B1
F15FF69D33F9D8EB2FCE5DF8E873AF92E7A41E0400C3AFC76DAEF7BC56D7731B
980EF3C793B89AD3612894309F1DD03E67D05224C9DBA79A84DC57C2EBDA8E42
2A9550A2EEB87B488650D3E78A9CB5BDFFAEFE99F3EE645DA08D0015F2032827
1BBE2E611F8255890355581CBF03B38F6419499B6E5953C1B834BD195096C9A6
1145921EBA98A70B52C5B86F73D38567245A095F8C91294627FFAFF0399CCEB8
7B6DAA69943B050CCEC5C81D68C4D3B152F038F5EB123DE2CC88689C8934EDCA
599ACC5C1EA7B60FB79F8113DD2324D76F615F8936F163FAF95D90410021306E
105898E5EFA244F95EA4399C4CDCCF4875AE139D6B531996A49E5DB0521E6360
3E1FB4CEE4EBD0128ADB4ED6CE88F747E7548B9827341F2830EF12831567FDD5
B3BA6935818F282A6239609D959B3A288AA3F5E6D1AB7F466607FD37D46E2F5A
A2BC7C534357A65C25929B54898BA9B59C11D3CF44630A285F751DAFEDC3E3D3
D51F61AF2B14897B0C633458DBEA210651C805C2BD9B85E185E95B2E2F753C46
19D27C9549C52DE768E0F5E6DD69BBBB8DCF7D8EA7CC4945EB6748E3CAA720DE
0904F423F05A0C0D2608EF3BCA8561B68F6D0D6E11B3FE268772307DC168E01E
79496098A865E7B124F886D8AC8881CED68C7E9ECF4FE4010B7C0028E6544980
2E6C1E310E78A4D28ADDB131FA20FC49A04C729C5B9AF95E715EA4D3F84EE24C
324335A059B912376554718809A601E5D2562798D819588655BAA7D57AF78766
4FCF245203C8460A098595B7BE5DE656436688FADC94A77124E291CB27BF10E4
EFC417FDB11BB1AC91488B86B6A05134D14D0B4E7DDC42E3039E13DB2269E0B5
008F455D72387C1C42775FF674A31B8E86E28D430C80EDA4C7B9E7AA036C5198
79BD2073F645753368CE47E706C508835CB5ACF60BA71FF3419336AA668ADAA7
FD02C21B40ABFB7CE65528E27AD97DD33F5A5C699AE6DE2A29AF7F11567F65F6
08E08A2CDC45E40E5DBC7409F74D696E55B08B672A1118DAA72C369DAA397887
841DCB483BA3EBCD9AB2E58CB96372CC1CBC690B43D80BAC678AD62B82E32D8B
BF150492ADC2702C7B30F0A04A5BE8DD71293C3A0936B92D221B4B759B39A500
5A2F01C74384A03289D622CCE2408EC84C8F8B8A4C95D7EB3F7FDB5E41BB1C0A
46FEF16EBB0A93F8D0FAC1883222A1C90CA4E940136520C8AF7DC481A0DED874
E4345EDB25665463433953096C7C0CC05409CA619009103DE0E095F7129DC64B
4012AC9CE863CE8B77C4296AD3AA17B1FD8F15F9063C39C8540DB2BD058A8909
B5B8E81DDFE9B58ECB933965934C5CA2043B9B0E54E923CB11C35BA9D7B664BE
A7448A6B067FE9BCAA3B220F83B3FD79F75ED2208F2E90FC60916CAF61A15C78
9D64539CE3129549C594D33B30DE0A59DC9A63C681536FE3CD6311794B78307D
3B0114756B82C2962B78D05373B3634825CF63C13B40CE21656E37A0FCB6836A
AAC078BAFB6108525A437F4391E79987A4CCDAD31438FDA623B8BBA65603C906
95413FDE08838913819723763788C64EC292E6808A59867BE75DAB314A5E2CF7
5D2D02D9941A488DB2115689B16DD619A90441E2BC41E415CBEC45468CB043E4
C543DB648AB544E8212B3B2F97B5844022274F588D01616F7B0F6A30D36BB285
E7955CFD860345F16D934A0D4610AC6A84BD327150E6AE971A7E893E368B8497
986744C0DAA6DD5D5492CA1736A52B8B9D95AE23A9C073BCA623061C6A4784D9
11FB585269B20E630978C45B5E282C65BE92FC109B2B38EF8C02F86120E587F7
F3E1ABA958384779DB29211D89008139F24666C276AAF9EBF2A31AE1F6DF9F3A
E99A6380CCDF76BA83E7EC6781315AB733ED8119F306CC5F2623BFDAF5600168
775DF3987291B8A735E82BA885886035E32F00C15325D93A4470DB30A3DAAC7B
4C83F112CD364456A7F5BB6C308823830F9FAABBDF899FF7964E034A7D7A6537
04B91F849952D112B6701504E7C146ABFDF13BE19AB2A2AD716E78E597B6C42E
D1488736BDBF63F9059895E4915405803C7901862AEEB7DC1415B0E515E6D8E8
FC2D22A259F7809F3C77727331B61D861CEDEFB4941ACB6425DCBF1F655B3F79
E2002112571ECC9D449472C1C132CA6A5012A5CB7AC623150AAB3E828A78AB4D
AAEAC9A54A0DA59DF3F1CA84D6B31F4D115BBD8E5CDE893304D72DF5A689781D
76360C6511E51EAAEC0F6DFE28C0A9AAB4B2CFD7E622EC22111C2438849F220A
096D9D99475B3387CC896ADF7ABA61FC71A4841BC9EA8A8E7848E7DECDABE9F3
842581C3BB3F68A47752328AC1739EEAAACEAF23100219B1CF3A1F09D967E429
545A65BB98BE3EDE32DC8120E63045002D044B71370D2195B0745905FA382FF6
A474BC95D164B029EB8875677A3C0E43DAD8174AE09392546A9760E5ECEA9F2F
CE0B991E85351EA6D553850158CF3C78E858E34B8CFFDC7A128BEC0941FFBC31
643A74F5D36BD724808357D4FD1813801BFDFB92BD0C88D7C77FB1097C6B36D6
495916FD69B176E7FD793D2800A9A0EF849BB02EADCA01610F6DF3BBF81A1FF3
AB42E8106C10865CB7AE7BC12E7615988EF6A5FB53A4D8B3E26E65F4C501E208
85FCB7D648FABC1C7B0B4D9EBFDA16D96BEDA842C9B8078D60E5FA106E398019
1C752990099F97D70AF54E554A8F28FDAC53748FF1ADF2D4A9A1AE95682AB3BD
762EB1D2F722477ED3C9E8221F8EAFAF63443672BFFE79BB6D991204E7837DD4
538DF2BFC7488007282E7F49144209A249017016918F0AB2D87C6181417A1B16
610253CF9AB210F04E9C256FA52B407484FB82B3D8A303AD186A5DDBBAD17134
4743FF09472A3E2F337BE4C411F3BB959C77F05616FC958B62CA3C0194893751
7DFE1339E4C6CE0DEB62D1DAAD58CF3E99D5FD19FD124FD7CD9341AB55C72941
95B48964E2F4AA1FDFA2FBEB95AA878584A8ABDF1E8CF78EBE55ABDB3F2DF216
1F8F98CC3027FB5FDF901190949B4B6A3297CABF67EEDBF89EED28653FD3657D
D2B1531CCE1A08A96919AC0AA5311FB05079878AD49127A054DD75488BD6D0CC
D745766283944D7293D6FB1B42BCDDF2F241AB26794DBA117158A4FBAC084708
A6D5BAD32AE7178C9A6EA72C4F1D2A24663AA6A96DBD57E0710C7318C152697C
6DFCA1017AB7E3A91418DEE48399ACBA6A7224324C88FF7505E5C74D5F312D65
3513ADE6840166E7B01EEB6110A8F73006615D86A56F6A0BC895EFECE4EB96A6
95F03A190341C7C02A63E2E41F3E954600B61B724401CF5235CF67B5DB0DD484
48F189D0A4AF6188BAB007CE114FFD5083A22B6B29ACC7E16F498BE8275D2861
7BE25173D9C0204E417751073C35F9CF7FA2DFD0D9A2F7B1C861CA0B19FCD11A
27F19A2DBC7AFD01B463249AFC48BC158B40FE0E15AD22D7E53BBC69A17E8CFD
357555D93F0DA10572DF6936E9572AD43A27A2C62CB54EA5CA59CC041F2FB85C
2D9C60C4A8CF1C756CBBE4BEE813FBEA06BAE87B5AE215F2F8B9C687E11F632F
7D502CBDEB3982F857AD1B67D061586166FA1835FEA54323D93A69FB240C1D3B
E992025748D86B9F4BA4E90CEBDE08E109D92F01DBFB168681C055D562FC97F4
908FF5C7677119823ADE67C5543EE9704F2C36FCCE813F0CD08A04423447A8D6
5255FAAF48FBA11A76057E7E0CA3FDDA5121F163DF55E63ADAD54C1E0F10AE59
94B94342F30B65300230E47A6CDBD6630BDB2FD061DAB626B56D01D8ED2B2B70
E6E24AA8F9ECBAC89A26A4F884EE9EE147B9AFAF1AC8FC2CC8728FAE98B98AFC
C6F535D3B2F359329E8A8FE1E6B86DF9DBD24F62FEDCE93A173B14ED2C8B4C11
96293277D223F7BB8C08A20962E2004CE634CD242CD87CF816304414F73EEE20
5A47785E4995CF0D828250B23D033A497B4728ED1033256C4C0EF039F3725945
F251099400ED4C112B8E1D0991710420CDBE8568348E268C8D44E0EB7741F3E9
8FACEA57EEDA8C64E7CA3C64C08E32974EE64C80C53FAFBF1217DD06CB86B6A0
0FF25C00645C4E2A19A7E14A04A78E5453C05FC12CEB7BD210745FCFDC688237
74E8EB1F38C0A35F690277835BC5487E761E75D867D1FE9D189A3AA2E671B60B
8709A657F9E60EB05FA3A43555F7BDC3BD2D6C52EC0BD581F6982934AE5D0A09
78E795B8284A2DAAEF53FE866A4199F111E801E0699988E0F0E5EB210078BF51
0689ED17DAB238151351F493F0DB06E873811C79642F63B8ED3223E7BE037972
0A63410EB5DAA7B464F731C0A1730583413418FE99F2E2939530679D3C3C2922
506A4F3C9CE40724AE4FDB7C6185062D420063EF8942DCA4C455EFF4E4BDF74C
53268EBB5C92D7FCBE20875986EE2CF855731509EF1C2E77ED22D3BEE283515C
BF946353CF650B88961F9C752D2DC7B4499EB8DA25726C7817E08DCBA5285819
2DFA60B5D9DB43607FEEEB15F8B364F82CE2863BFF64869FE8E437FEAB46DDEF
FB0AB83D0EBFDE865BF551AF1C426B7408747B369E539460E9A8E4608181A899
1200C4317BFD54CAEB46B250827449182DC2EECA730E8B7509F1F313178E02D3
BFFCCFB5B172F58C1F5F153F68D86EC2E7F6439C186DC5EC3AF9BF11DA75BD25
226BB81FB4487FB50AE74DBF7B121F1A654E144D78A749D63E2D925613AD2AE8
9A7079FB55ED95A3190B1F84DDE3FA860CB3F2CB77EF167648E28611374C5531
F8268729CF0408023751670311E80FB9731695D14B11FC5806C3042FBC821D7E
0C5BB3088EE1423D4F344C2CEFF56140941A92666CC2ED67E554326930C4C45D
0811D1FCCEFF313E863BA272A219A1D8832FB2C7D08BB2860ED8CB6506A55327
1AA0ABC84FE197E62F07B5EC3085FA00A6FA39E4929E3C34F799B3750F84EA03
8360616F45D6C7458125B90A327C31ADE96438C0317ABF3D873AD1F5AE96DB9C
CE4702EBAE22FE9FEEF3903C8B582EE4E269C9E970A8AB9DA1BF3224F7FD7451
27A8BA78A093E149C244F353AA892BD9A7AD14373945865FB81AD431DB3123E6
39F7D5164374D3064A6B1D33A578BC6204CCD590C5C8E3A35885FA65A3680A0F
0661D39F57BC8B702B185D25101608973D13DC4F16D1F6847AB46F92C76B8AC9
F9FD6302D1DA68F89CBCED21D51BBB0886CEBB9862ECFEFD86250037F98B4E16
38CC14AE88EFEDEBB48EA4CFE53BE5C6EF5212EED07C4435ABE5454325B62DB0
7A091F5E82847C5A8F03C846657F7AE4606FA0F5DE1F9A0312F7F24EA70DF5F9
7EA8598917DFFDA6EA1046303DF0F8544E1B7DDB8C7C508676D9AB1B9F20B1DC
16F78190AF2E5A4F7DE8CB80DACE584724D80263A5F8FB1305859CE81C34307B
C51D926CA86263216F9CD23986F6AB46CE7AD3F029A47C61A3628CE0118D3D5B
B9BD4905664DFD4D96A284A278C9D19410BECF6518665881D38F66FDD8F6C6FC
6FADDA2F62E8A0FBABFD2A446D883DFDA709198245A118583DD117822FB091DE
BF0272A3CC2EEE42C9A2391FDFC23E3D69212E49DF0515E85A8FD99E76FECC08
DAF221B2AC6FBE495493CF04DD7EDB18F2E89D1FDCA01C3C5656F2429349DBCD
08421FA0D6027EF8C615D994F718756CA498B6D003E473991C6A6CED251CFB89
62E0627A2BF9FC71E1A8D63C0B0B7A64717A2DE316DDBAB5F1FE35E781338F7E
360DED1C5ECC639F0F8440BBD37A57C6A3C14544F068343D827A977A7ACADB02
67A6D35566E82A527F6B8932A937137CB6AE2F46ED7E0DAFD5DCF907942CE4FF
29717141F75904AD6835CF2376F87AE131CF4859A86AE52FB8F09C73BC373DC2
83EF83A52D14220B47CD22C8B2958D4E90A6A8164C0C1461D172E747CFD0E64D
3E45A2C8EC104E3B8954DF14E155CF5CC6
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000
(C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktional)
@start /Fa 204[406 51[{ enclmrm ReEncodeFont }1 664.176
/LMRoman6-Regular rf /Fb 145[523 784 3[261 5[418 1[470
10[705 44[366 366 40[{ enclmec ReEncodeFont }8 885.568
/LMRoman8-Regular rf /Fc 254[369 1[{ enclmmathsy ReEncodeFont }1
1328.35 /LMMathSymbols10-Regular rf /Fd 185[723 4[830
14[553 553 2[307 46[{ enclmec ReEncodeFont }5 1106.96
/LMRoman10-Regular rf /Fe 160[909 45[606 1[606 47[{
 enclmec ReEncodeFont }3 1212.12 /LMRoman10-Regular rf
/Ff 203[993 52[{}1 1328.35 /wasy10 rf /Fg 140[324 10[449
2[363 1[363 33[595 14[406 406 2[234 46[{ enclmec ReEncodeFont }8
664.176 /LMRoman6-Regular rf /Fh 199[470 470 470 470
470 470 470 470 470 48[{ enclmrm ReEncodeFont }9 885.568
/LMRoman8-Regular rf /Fi 162[361 1[361 29[1012 1[361
5[650 650 1[650 1[650 6[506 506 40[{ enclmrm ReEncodeFont }10
1328.35 /LMRoman12-Regular rf /Fj 138[740 470 613 586
4[1138 4[749 1[641 2[560 1[683 10[758 23[1012 2[361 59[{
 enclmmathit ReEncodeFont }12 1328.35 /LMMathItalic12-Regular
rf /Fk 3[723 5[650 17[650 105[578 686 686 939 686 723
506 513 506 686 723 650 723 1084 361 686 397 361 723
650 397 578 723 578 723 650 9[1336 975 2[723 2[885 4[1011
1[469 975 1021 849 885 993 2[975 1[614 6[650 2[650 650
650 650 650 650 650 361 1[361 2[506 506 6[361 3[723 1[759
27[{ enclmec ReEncodeFont }57 1328.35 /LMRoman12-Regular
rf /Fl 138[1196 837 849 879 2[1076 1196 1793 598 1136
1[598 1196 1076 1[982 1196 956 1[1046 15[1616 1470 1616
1[2041 3[801 2[1353 1412 1649 1554 1530 1625 13[1076
1076 1076 2[598 717 45[{ enclmec ReEncodeFont }32 1912.83
/LMRoman12-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-2331 165 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a -2331
165 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a 1328 x Fl(F)-239
b(A)575 b(1.2)g(-)g(1)g(F)-179 b(unktionsdarstellung)570
b(einer)k(F)-179 b(ormel)574 b(-)i(MC)f(-)h(BIFIE)p 0
TeXcolorgray -741 5243 a Fk(1.)p 0 TeXcolorgray 651 w(Gegeb)36
b(en)433 b(ist)h(die)f(F)-108 b(ormel)434 b Fj(r)405
b Fi(=)17008 4344 y(2)p Fj(s)18271 3862 y Fh(2)18797
4344 y Fj(t)p 17008 4933 2259 45 v 17767 6154 a(u)19833
5243 y Fk(f\374r)434 b Fj(s;)221 b(t;)g(u)370 b(>)e Fi(0)p
Fk(.)855 9780 y(W)-108 b(enn)538 b Fj(u)h Fk(und)e Fj(s)i
Fk(k)-36 b(onstan)g(t)539 b(sind,)f(dann)g(kann)h Fj(r)576
b Fk(als)539 b(eine)g(F)-108 b(unktion)538 b(in)h(Abh\344ngigk)-36
b(eit)887 11772 y(v)g(on)468 b Fj(t)g Fk(b)36 b(etrac)-36
b(h)g(tet)466 b(w)-36 b(erden.)468 b(Kreuze)f(denjenigen/diejenigen)i
(der)e(un)-36 b(ten)466 b(dargestellten)921 13764 y(F)-108
b(unktionsgraphen)432 b(an,)i(der/die)f(dann)g(f\374r)h(die)f(F)-108
b(unktion)433 b Fj(r)470 b Fk(m\366glic)-36 b(h)434 b(ist/sind!)p
12194 14804 21997 45 v 12194 26718 45 11914 v 12902 25773
a
 currentpoint currentpoint translate 0.63908 0.63908 scale neg exch
neg exch translate
 12902 25773 a 12902 25773 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 257.46962 a add def
/d 0.0 a add neg def /h 141.69453 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 12902 25773 a 16997 24384
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 220.48097  0 -23.66922  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -23.66922
 220.48097  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-12.55183  def /maxTickline 129.1427  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
0.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 129.1427
0.0 -12.55183   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 220.48097
0.0 -23.66922 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 129.1427  0 -12.55183  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -12.55183
 129.1427  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-23.66922  def /maxTickline 220.48097  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
0.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 129.1427
0.0 -12.55183   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 220.48097
0.0 -23.66922 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0.001 def /x1 7.749030052594037
def /dx x1 x sub 199 div def /F@pstplot (1.0/x)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 16997 24384 a
tx@Dict begin  { 184.94283 -3.39595 } PutCoor PutBegin  end

16997 24384 a 457 x Fg(1.)276 b(A)-22 b(c)g(hse)16997
24384 y
tx@Dict begin  PutEnd  end
 16997 24384 a 16997 24384 a
tx@Dict begin  { -34.1432 125.6547 } PutCoor PutBegin  end
 16997 24384 a 457
x Fg(2.)276 b(A)-22 b(c)g(hse)16997 24384 y
tx@Dict begin  PutEnd  end
 16997 24384
a 16997 24384 a
tx@Dict begin  { 28.45274 65.44139 } PutCoor PutBegin  end
 16997 24384 a 922 x Fj(f)17638 25505
y Fh(1)16997 24384 y
tx@Dict begin  PutEnd  end
 16997 24384 a 41403 25773 a
currentpoint initclip moveto
 41403
25773 a 12902 25773 a
 currentpoint currentpoint translate 1 0.63908 div 1 0.63908 div scale
neg exch neg exch translate
 12902 25773 a 31781 26718 45 11914
v 34146 26718 V 12194 26762 21997 45 v 12194 38676 45
11914 v 12902 37731 a
 currentpoint currentpoint translate 0.63908 0.63908 scale neg exch
neg exch translate
 12902 37731 a 12902 37731 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 257.46962 a add def
/d 0.0 a add neg def /h 141.69453 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 12902
37731 a 16997 36342 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 220.48097  0 -23.66922  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -23.66922
 220.48097  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-12.55183  def /maxTickline 129.1427  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
0.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 129.1427
0.0 -12.55183   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 220.48097
0.0 -23.66922 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 129.1427  0 -12.55183  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -12.55183
 129.1427  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-23.66922  def /maxTickline 220.48097  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
0.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 129.1427
0.0 -12.55183   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 220.48097
0.0 -23.66922 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 5.4 def /dx x1 x sub 199
div def /F@pstplot ((-x)/1.8+3.0)  tx@AlgToPs begin AlgToPs end cvx
def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit false
def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 28.45274 mul
gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
16997 36342 a
tx@Dict begin  { 184.94283 -3.39595 } PutCoor PutBegin  end
 16997 36342 a 457 x Fg(1.)276 b(A)-22 b(c)g(hse)16997
36342 y
tx@Dict begin  PutEnd  end
 16997 36342 a 16997 36342 a
tx@Dict begin  { -34.1432 125.6547 } PutCoor PutBegin  end
 16997 36342 a 457
x Fg(2.)276 b(A)-22 b(c)g(hse)16997 36342 y
tx@Dict begin  PutEnd  end
 16997 36342
a 16997 36342 a
tx@Dict begin  { 39.83366 79.66776 } PutCoor PutBegin  end
 16997 36342 a 922 x Fj(f)17638 37463
y Fh(2)16997 36342 y
tx@Dict begin  PutEnd  end
 16997 36342 a 41403 37731 a
currentpoint initclip moveto
 41403
37731 a 12902 37731 a
 currentpoint currentpoint translate 1 0.63908 div 1 0.63908 div scale
neg exch neg exch translate
 12902 37731 a 31781 38676 45 11914
v 34146 38676 V 12194 38720 21997 45 v 12194 50634 45
11914 v 12902 49689 a
 currentpoint currentpoint translate 0.63908 0.63908 scale neg exch
neg exch translate
 12902 49689 a 12902 49689 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 257.46962 a add def
/d 0.0 a add neg def /h 141.69453 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 12902
49689 a 16997 48300 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 220.48097  0 -23.66922  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -23.66922
 220.48097  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-12.55183  def /maxTickline 129.1427  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
0.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 129.1427
0.0 -12.55183   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 220.48097
0.0 -23.66922 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 129.1427  0 -12.55183  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -12.55183
 129.1427  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-23.66922  def /maxTickline 220.48097  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
0.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 129.1427
0.0 -12.55183   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 220.48097
0.0 -23.66922 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 7.749030052594037 def
/dx x1 x sub 199 div def /F@pstplot (x/2.0)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
16997 48300 a
tx@Dict begin  { 184.94283 -3.39595 } PutCoor PutBegin  end
 16997 48300 a 457 x Fg(1.)276 b(A)-22 b(c)g(hse)16997
48300 y
tx@Dict begin  PutEnd  end
 16997 48300 a 16997 48300 a
tx@Dict begin  { -34.1432 125.6547 } PutCoor PutBegin  end
 16997 48300 a 457
x Fg(2.)276 b(A)-22 b(c)g(hse)16997 48300 y
tx@Dict begin  PutEnd  end
 16997 48300
a 16997 48300 a
tx@Dict begin  { 65.44139 56.90549 } PutCoor PutBegin  end
 16997 48300 a 922 x Fj(f)17638 49421
y Fh(3)16997 48300 y
tx@Dict begin  PutEnd  end
 16997 48300 a 41403 49689 a
currentpoint initclip moveto
 41403
49689 a 12902 49689 a
 currentpoint currentpoint translate 1 0.63908 div 1 0.63908 div scale
neg exch neg exch translate
 12902 49689 a 31781 50634 45 11914
v 1 0 0 TeXcolorrgb 32489 45009 a Ff(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 34146 50634 V 12194
50678 21997 45 v 12194 62592 45 11914 v 12902 61647 a
 currentpoint currentpoint translate 0.63908 0.63908 scale neg exch
neg exch translate

12902 61647 a 12902 61647 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 257.46962 a add def
/d 0.0 a add neg def /h 141.69453 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 12902 61647 a 16997 60258
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 220.48097  0 -23.66922  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -23.66922
 220.48097  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-12.55183  def /maxTickline 129.1427  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
0.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 129.1427
0.0 -12.55183   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 220.48097
0.0 -23.66922 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 129.1427  0 -12.55183  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -12.55183
 129.1427  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-23.66922  def /maxTickline 220.48097  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
0.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 129.1427
0.0 -12.55183   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 220.48097
0.0 -23.66922 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 7.749030052594037 def
/dx x1 x sub 199 div def /F@pstplot ((x/2.0)^(2.0))  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 16997 60258 a
tx@Dict begin  { 184.94283 -3.39595 } PutCoor PutBegin  end

16997 60258 a 457 x Fg(1.)276 b(A)-22 b(c)g(hse)16997
60258 y
tx@Dict begin  PutEnd  end
 16997 60258 a 16997 60258 a
tx@Dict begin  { -34.1432 125.6547 } PutCoor PutBegin  end
 16997 60258 a 457
x Fg(2.)276 b(A)-22 b(c)g(hse)16997 60258 y
tx@Dict begin  PutEnd  end
 16997 60258
a 16997 60258 a
tx@Dict begin  { 56.90549 56.90549 } PutCoor PutBegin  end
 16997 60258 a 922 x Fj(f)17638 61379
y Fh(4)16997 60258 y
tx@Dict begin  PutEnd  end
 16997 60258 a 41403 61647 a
currentpoint initclip moveto
 41403
61647 a 12902 61647 a
 currentpoint currentpoint translate 1 0.63908 div 1 0.63908 div scale
neg exch neg exch translate
 12902 61647 a 31781 62592 45 11914
v 34146 62592 V 12194 62637 21997 45 v 12194 74550 45
11914 v 12902 73605 a
 currentpoint currentpoint translate 0.63908 0.63908 scale neg exch
neg exch translate
 12902 73605 a 12902 73605 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 257.46962 a add def
/d 0.0 a add neg def /h 141.69453 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 12902
73605 a 16997 72216 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 220.48097  0 -23.66922  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -23.66922
 220.48097  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-12.55183  def /maxTickline 129.1427  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
0.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 129.1427
0.0 -12.55183   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 220.48097
0.0 -23.66922 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 129.1427  0 -12.55183  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -12.55183
 129.1427  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-23.66922  def /maxTickline 220.48097  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
0.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 129.1427
0.0 -12.55183   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 220.48097
0.0 -23.66922 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 7.749030052594037 def
/dx x1 x sub 199 div def /F@pstplot (x/2.0+1.0)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
16997 72216 a
tx@Dict begin  { 184.94283 -3.39595 } PutCoor PutBegin  end
 16997 72216 a 458 x Fg(1.)276 b(A)-22 b(c)g(hse)16997
72216 y
tx@Dict begin  PutEnd  end
 16997 72216 a 16997 72216 a
tx@Dict begin  { -34.1432 125.6547 } PutCoor PutBegin  end
 16997 72216 a 458
x Fg(2.)276 b(A)-22 b(c)g(hse)16997 72216 y
tx@Dict begin  PutEnd  end
 16997 72216
a 16997 72216 a
tx@Dict begin  { 36.98865 65.44139 } PutCoor PutBegin  end
 16997 72216 a 923 x Fj(f)17638 73338
y Fh(5)16997 72216 y
tx@Dict begin  PutEnd  end
 16997 72216 a 41403 73605 a
currentpoint initclip moveto
 41403
73605 a 12902 73605 a
 currentpoint currentpoint translate 1 0.63908 div 1 0.63908 div scale
neg exch neg exch translate
 12902 73605 a 31781 74550 45 11914
v 34146 74550 V 12194 74595 21997 45 v 47992 5243 a Fe(___/1)p
1 0 0 TeXcolorrgb 48228 7234 a Fd(F)-123 b(A)369 b(1.2)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 0
TeXcolorgray 24746 81281 a Fk(1)p 0 TeXcolorgray eop
end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 54804 45 v -2331 6795 a Fl(F)-239
b(A)901 b(1.2)f(-)i(2)e(F)-179 b(ormel)901 b(als)f(Darstellung)g(einer)
g(F)-179 b(unktion)898 b(-)j(MC)h(-)-2331 9817 y(BIFIE)p
0 TeXcolorgray -741 13124 a Fk(2.)p 0 TeXcolorgray 651
w(Gegeb)36 b(en)433 b(ist)h(die)f(F)-108 b(ormel)434
b Fj(r)405 b Fi(=)17008 12226 y(2)p Fj(s)18271 11743
y Fh(2)18797 12226 y Fj(t)p 17008 12814 2259 45 v 17767
14035 a(u)19833 13124 y Fk(f\374r)434 b Fj(s;)221 b(t;)g(u)370
b(>)e Fi(0)p Fk(.)855 17661 y(W)-108 b(enn)362 b Fj(u)i
Fk(und)f Fj(t)g Fk(k)-36 b(onstan)g(t)363 b(sind,)h(dann)e(kann)i
Fj(r)400 b Fk(als)364 b(eine)g(F)-108 b(unktion)362 b(in)i
(Abh\344ngigk)-36 b(eit)364 b(v)-36 b(on)921 19653 y
Fj(s)433 b Fk(b)36 b(etrac)-36 b(h)g(tet)433 b(w)-36
b(erden.)433 b(W)-108 b(elc)-36 b(hem)433 b(F)-108 b(unktionst)-36
b(yp)433 b(ist)h(dann)e Fj(r)470 b Fk(zuzuordnen?)921
21645 y(Kreuze)433 b(den)g(zutre\033enden)f(F)-108 b(unktionst)-36
b(yp)432 b(an.)p 12964 22612 20456 45 v 12964 25417 45
2805 v 13672 24472 a(lineare)i(F)-108 b(unktion)p 31010
25417 V 33376 25417 V 12964 25461 20456 45 v 12964 28266
45 2805 v 13672 27321 a(k)-36 b(onstan)g(te)434 b(F)-108
b(unktion)p 31010 28266 V 33376 28266 V 12964 28310 20456
45 v 12964 31373 45 3064 v 13672 30170 a(quadratisc)-36
b(he)434 b(F)-108 b(unktion)p 31010 31373 V 1 0 0 TeXcolorrgb
31719 30174 a Ff(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 33376 31373 V 12964 31418 20456 45 v 12964
34222 45 2805 v 13672 33278 a Fk(W)g(urzelfunktion)p
31010 34222 V 33376 34222 V 12964 34267 20456 45 v 12964
37330 45 3064 v 13672 36127 a(gebro)36 b(c)-36 b(hen)433
b(rationale)i(F)-108 b(unktion)p 31010 37330 V 33376
37330 V 12964 37374 20456 45 v 12964 40437 45 3064 v
13672 39234 a(Exp)36 b(onen)-36 b(tialfunktion)p 31010
40437 V 33376 40437 V 12964 40482 20456 45 v 47992 13124
a Fe(___/1)p 1 0 0 TeXcolorrgb 48228 15116 a Fd(F)-123
b(A)369 b(1.2)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 44510 54804 45 v 0 TeXcolorgray 24746
81281 a Fk(2)p 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fl(F)-239 b(A)717 b(1.2)g(-)h(3)f(Quadratisc)
-60 b(hes)716 b(Prisma)h(-)h(O)-60 b(A)717 b(-)h(BIFIE)p
0 TeXcolorgray -741 4800 a Fk(3.)p 0 TeXcolorgray 651
w(Das)372 b(V)-108 b(olumen)371 b Fj(V)661 b Fk(eines)372
b(geraden)g(quadratisc)-36 b(hen)371 b(Prismas)h(h\344ngt)f(v)-36
b(on)372 b(der)f(Seitenl\344nge)921 6792 y Fj(a)575 b
Fk(der)g(quadratisc)-36 b(hen)575 b(Grund\035\344c)-36
b(he)573 b(und)i(v)-36 b(on)575 b(der)g(H\366he)h Fj(h)f
Fk(ab.)h(Es)g(wird)f(durc)-36 b(h)574 b(die)921 8784
y(F)-108 b(ormel)433 b Fj(V)659 b Fi(=)368 b Fj(a)8754
8302 y Fh(2)9575 8784 y Fc(\001)295 b Fj(h)434 b Fk(b)36
b(esc)-36 b(hrieb)36 b(en.)921 11330 y(Stelle)425 b(die)g(Abh\344ngigk)
-36 b(eit)426 b(des)e(V)-108 b(olumens)425 b Fj(V)289
b Fi(\()p Fj(a)p Fi(\))425 b Fk(in)g Fj(cm)29052 10848
y Fh(3)30002 11330 y Fk(eines)g(geraden)g(quadratisc)-36
b(hen)921 13322 y(Prismas)412 b(v)-36 b(on)411 b(der)g(Seitenl\344nge)g
Fj(a)g Fk(in)g(cm)h(b)36 b(ei)411 b(k)-36 b(onstan)g(ter)411
b(H\366he)g Fj(h)369 b Fi(=)f(5)221 b Fj(cm)412 b Fk(durc)-36
b(h)410 b(einen)921 15314 y(en)-36 b(tsprec)g(henden)431
b(F)-108 b(unktionsgraphen)432 b(im)i(In)-36 b(terv)-72
b(all)434 b Fi([)8 b(0;)221 b(4])435 b Fk(dar!)p 0 TeXcolorgray
0 TeXcolorgray 9915 63292 a
 currentpoint currentpoint translate 1.4286 1.4286 scale neg exch neg
exch translate
 9915 63292 a 10348 63292
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 166.73785 a add def
/d 0.0 a add neg def /h 275.39536 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 10348 63292 a 12640 61250 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 20 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 142.26372 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 14.22722
T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 6 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 256.94986 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 28.45274
0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 146.03607  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 146.03607  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 256.94986  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 256.94986
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 146.03607
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 256.94986  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 256.94986  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 146.03607  def /dT 932395 abs 65536 div viceversa
{ neg } if def /DT 5. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 2.84544  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 2.84544  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 256.94986
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 146.03607
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 11395 61535 a
Fh(0)11395 59961 y(5)10924 58386 y(10)10924 56811 y(15)10924
55236 y(20)10924 53661 y(25)10924 52086 y(30)10924 50511
y(35)10924 48936 y(40)10924 47361 y(45)10924 45787 y(50)10924
44212 y(55)10924 42637 y(60)10924 41062 y(65)10924 39487
y(70)10924 37912 y(75)10924 36337 y(80)10924 34762 y(85)12405
62596 y(0)2679 b(1)h(2)g(3)f(4)12640 61250 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 12640 61250
a 12640 61250 a
tx@Dict begin  { 146.03607 256.94986 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 12640 61250 a 12640 61250 a
tx@Dict begin  { 5.0 27.86174 5.1555 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 12640 61250
a 11098 61535 a Fb(a)314 b(in)g(cm)12640 61250 y
tx@Dict begin  PutEnd  end
 12640
61250 a 12640 61250 a
tx@Dict begin  PutEnd  end
 12640 61250 a 12640 61250 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 12640
61250 a 12640 61250 a
tx@Dict begin  { 0.0 0.0 pop 146.03607 256.94986 exch pop } PutCoor
PutBegin  end
 12640 61250 a 12640 61250 a
tx@Dict begin  { 5.0 45.00673 6.68999 2.0 -40.  Uput UUput } PutCoor
PutBegin  end
 12640
61250 a 10149 61510 a Fb(V\(a\))g(in)g(cm)14670 61197
y Fa(3)12640 61250 y
tx@Dict begin  PutEnd  end
 12640 61250 a 12640 61250 a
tx@Dict begin  PutEnd  end
 12640
61250 a 1 0 0 TeXcolorrgb @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x 0 def /x1 4 def /dx
x1 x sub 199 div def /F@pstplot (5.0*x^(2.0)-3.0E-50*x)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 2.84544 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 2.84544 mul gt { moveto } { dup -1.e30 2.84544 mul lt {
moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 2.84544 mul gt { moveto } { dup -1.e30
2.84544 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW
1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
12640 61250 a
tx@Dict begin  { 99.55855 153.53134 } PutCoor PutBegin  end
 12640 61250 a 1 0 0 TeXcolorrgb 572 x Fk(v)p
1 0 0 TeXcolorrgb 12640 61250 a
tx@Dict begin  PutEnd  end
 12640 61250 a 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 28806 63292 a
currentpoint initclip moveto
 28806
63292 a 9915 63292 a
 currentpoint currentpoint translate 1 1.4286 div 1 1.4286 div scale
neg exch neg exch translate
 9915 63292 a 1 0 0 TeXcolorrgb 921
69268 a Fk(Ein)576 b(Punkt)g(ist)h(genau)g(dann)e(zu)i(geb)36
b(en,)576 b(w)-36 b(enn)576 b(der)g(darestellte)h(Graph)f(als)h(P)-36
b(arab)36 b(el)921 71260 y(erk)-36 b(enn)g(bar)534 b(ist)h(\(bzw.)h
(links)g(gekr\374mm)-36 b(t)535 b(ist\))g(und)f(die)h(Punkte)g
(\(1/5\),)h(\(2/20\),)h(\(3/45\))921 73252 y(so)-36 b(wie)434
b(\(4/80\))h(en)-36 b(th\344lt.)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 47992 4800 a Fe(___/1)p 1 0 0
TeXcolorrgb 48228 6792 a Fd(F)-123 b(A)369 b(1.2)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 77059
54804 45 v 0 TeXcolorgray 24746 81281 a Fk(3)p 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%!PS-Adobe-2.0
%%Creator: dvips(k) 5.996 Copyright 2016 Radical Eye Software
%%Title: E:/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 1.1/FA 1.1 Gesamtdokument.dvi
%%CreationDate: Thu Feb  8 06:36:29 2018
%%Pages: 3
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: LMRoman12-Bold LMRoman12-Regular LMMathItalic12-Regular
%%+ LMMathSymbols10-Regular LMRoman8-Regular LMMathSymbols8-Regular
%%+ wasy10 LMRoman10-Regular MSBM10 LMMathItalic8-Regular
%%+ LMRoman6-Regular
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ "E:/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 1.1/FA 1.1 Gesamtdokument.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2018.02.08:0636
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end
 
@fedspecial end
%%BeginFont: LMRoman6-Regular
%!PS-AdobeFont-1.0: LMRoman6-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman6-Regular known{/LMRoman6-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman6-Regular)readonly def
/FamilyName(LMRoman6)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -88 def
/UnderlineThickness 31 def
end readonly def
/FontName /LMRoman6-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-515 -298 1647 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF386043BC0B77B47F761487099
F3EE8B97E5F18DCAE51B94317C8F4DECC130CEC55EE16A19C81D4D1668127C7B
86C63787AA273CDA19F2DCE459A6BDCED90E3C60B9F7DA6A0715D2D12F8B805A
5203A948442C2E5796D5CD20544385DB0893AB62040E1E7F33167592F1944E2A
AF140EB52E80AC868A5E53B529B98C77E46244F0B9D46A2FBA3E0040CF5A1D5B
8CF20FDE7C876B9AF4A5F6798ED83E56E985DC30EE5A3B2D5EA30F640DA2DB67
1783F69DA070954570F579C316046D8A6B7EEEBAC73F338A8B7D40470B4468D8
CD9BA8B731E8581C69A41FE873D6ECF58F4962AB44706743806BDB909276EE0E
99E10A530147C9C14638387F89B169CCEA629DE9AEBC010589EE04588A992E08
30B37AB3DF923029B8F6BF19C1C728797AEB5C0F2044753BA4C7D1437E2B9B1B
3DAE6A15672EF1F238D1AB8F873DBF5264D704FB19F5C1CFA0E5168002B3741F
0134E79412F5B0AFABBF3069460C10225E6F7BADE64F07074C9D594F6F7514CA
5B8A7750FAF214600FB248AD5E8D9FF734EE44CA79A585268A06C6FD4E294257
0F814FAE80C1A7776ACFE85D3159ED173F8C4EF0456171564E9A2E1C26464408
16B747D137D37316A340FB72BC005029A06DF8BA48E9AACDF832BA2745C448E7
9225CE3A522B46E18F5733663105D638E571758C9E8D9121EE819E4A12676318
11F0C568B81E1502A5D168139F197F7A71FE60CCB05063C6D9D8A0048E60F9C9
5CFFF69AFB554B3534796218449D2BB97FE15BD1A6FF104BF67F8EBA5C3C39B0
24ADAC78AC4FF61D5847F0A110651C31C7E8B693D1749B15C418E45E80E48284
2B429B1AFB33D68B4D63B8AE33380F0FA4A426F4A8E0F7466729AAF35F157381
6C9D25F988B9FAE475C9BC21222AD7E0721D9B289F29BF3D41D92425E94C50FB
3D4BAA7574FBB32CA8ABAF8D9AF332256FCB3EA78A9EB74B4B091BB5B674B009
7587802F6C66C3BC6E9DF45A22A24877E4A44991BBD0B8ACA80F6E7A468EFFDD
A0F44FB32709CC57D353A47EE953FE22B755CA1B83024E916430F66BCC9C0013
59DF6DF52D943BC285B007D1135D873B6709CF1783C386AC2358F315677479DB
92989DF17B1C7CE7AF4D7985886E4D9610EDCFDFC77C8DBC0F35778E3BB1B1ED
E4A453F3188709A85504074B869A7D9CCB045E0AAAC45C73496026CFC1B35259
5ED325A37D4D89E34BD8A09FC863DBD2D14764D82C2AD229D1219D78BE4FEC35
74D5AE3388DDE9AE21AFE51F5205CF54722827FBC24AEF08F6DD0BC6A79A2DB1
FF55716866C7406275A3206C0B981EB6DC945854759B8A4E469825F31A982083
0FB63D5BB4E8414211B972FEDAA71766C9B0D3440CE049E4FD8F1183360FA328
5D8CD3D8330D96CD8F687E8947B12E123AC89F962A9530DE5AEA07A6EC2C6585
47487FC2B6844308370AEDF60F40B1065F435BE8A39EB454D88F5BC45BA818E0
576B43654C207F12B1FE9D0800C9DA440F8F4DF34BCF34F43878F7D76E5B0744
A7C12C1F974E42BCB15BE6E4B11B1B3C178225B2108D94089E6544907FDC1CD4
24D2D1E8ED86030B6F0F045A27CDFAEFA66D2E563E091E4820C12FE47E315478
9E02FE363C3191393B266A453C68C647CE8EA12552AB0F918E093F58668BE6A0
988C56A71701327F3123ED0ECDF2560422F393437B17993C173D78CA380FA824
540B79150E4DAECEBD1A67CC197C6775A117B7B607BEAA7CF9812FD8C2C90C93
B34EE07C1F1B354CC7B6A68856A2E0FEA9E06345800DD13C04021FC924C88B19
890571C60826E10376A9CE8E4B6C4211CBFCF9709AA29144F3A402FF8311E955
631DB6480CE2CCADE0F132943AEE55FAE4610C564183F2641C90D3BC9C9C2047
3D6FAEBE70E9DB326C4323F499565020467A2F2E305D6C518ACB1F8602BEEAEE
EB033229E3646B97042C0403FA6A577BBCBEBA936014055D10434972C003AF6B
F7798E9858286E4979DACD3F5A953BD9E918D5E46449525A4B02E0FF1D61A339
2B13C2BAA4F2EBC705FD27CD6D2025DA9E2137BBB050747E7D512F9C67296CB7
35C413373B421BB8AF0E7365683A159EAC40D59B99666C590B9C40B2123936DB
F7D6E0C043CD6D918C8C67320A7A144E5291FA4017E674E4E3F6B8002890F8CC
8043EBAE66593FE6A8B43430B87B8469A3FE856445ACA7820214079A40712874
93CF60835B57D688D8741902B245E6D36223AB972791081FE59397EF9D69415C
6C250EFDA6808BB06DC14D79B44B1D65CF8C2EB97FD192DC5543674EA5327A63
F01ED14BB1ED9A0BAF084C7AA806BE5556CA1B25F2298D1B77928B2565A93B23
689A9246F1420227229158747B235AF81D9C07C40D09E4BD687C783B27501C60
3CD989F14A2A0A56807349E490FA6577D5C87A08B6F333E1C2EEABC20A07088B
CD029984DEC1EE34F30E77F7C3174AEAA273A07A8F9639778A72914EB3707E9E
24D51CCB52F85814F0E7B70E525A10C58FE7994621A9801A93F1D2EA5B39AC70
CABD8E491D8F710C5F31260C5AD761E6DF3CFBCEB55C1CFB942952C5F2D227B7
A94085C657D1C6E4AC560C188EAADF0DF449FB9D09F917E5CA703C7E944A2193
6F13388CE0AC08ADC3134D1F38F37B0253074A1AF90C7A388469A4AFE99F2BE5
CCE86EF8B6EFE3C0D55955EBF49DAC8DDF427DD8BCEDFD5D15F53B6627729B60
3B6CCEC05220CD184DF3A8F645825C9F5C0ACFA0EDDF6A0122789BF66501B146
80A3B9650D68D467E0DF4748B39BBE76D32933BFB3185C3972FFB69050956E25
AC33EA5F2DB7978E8581B39E56E5A0F9FF6C603FA96532FA00F88FCC7A95AB5E
44EB877C6E9B75042A9C413C838DBAE11B315A3B6B5FC1351BECE9D1CF451FFD
EF67FA97D58086B1BB39BB1AF6C0BC2386BB3061C215420F75A9D089C7BCDEC5
0559B82CA1E9E633BD1AACE6F06A397B5D75289ED307C730A1DD3B5B7F23CD96
597C5D225B4C7A3FD940B5B7DAD66F4CFF5899A0884293BDEB690DC928A68EFF
BD0C108505F7C6D5F9A8BB59A813C66373E8E10B6C92AD0119E10939525FA2CD
9E35988FD5B8584B58D2A96BA21E71A915FB663A04001D43A504ABC776456B69
DDCC93254749D04EBC0F1106F62A30D3F714A33E4F65F6B6CE70F9F9E8115952
0DC45679D35E06C8A1C712F41EB5FFFC86409023DA0394E3CCA13502D03B122C
2166F38A261A3524EA3A004092AFBD59A17235FED8A6C0BBC9925B98CC9178F1
C644D40CE07A4E70B37A678F66822BEDDEAA3E177C5141A9845302F716DECFF9
1A64657D64B43EAF4ACBAC482D06AFD458F0DC3F4896CB93D7D9640B9469F723
C84543BEE989037E08E004B46EBFD5E6625286B9FAAFADFF8458994798F6A07D
58935BE5A9105C3164B47223A893DC58A24D65FB154BC4409B9A97CCAB9DA5C7
6148888F30AE04C7E2CD9F6CEA624002296A1EFE646E370390407746B9D96181
11EA22AA11A489B87A3C6A208E9CB0B30F7ACDF0B926969D1F898B5F9A7DE36F
F3A32F6B29B0EB5364E310DE9062984F6951B5AA2EBC9853650192211C56DFA3
0ECD347E1717AA5D4CB03B26C4A34300BFE6DB438E60940A1A7B10FF68354C04
3DFE6F770C56475E713DCF6434AE97F67BDD87E81163E68BDD4B8FEE35C725E9
A9EE151663032EE1B2834670BC9A18AEE36074AAC9214825540B01B34472A56C
5AB4179BA79BFEF0DA75C9221E3F45BC7A8F8AF3361EE4B989D3AF06335785DF
8F0B1D342FA414E3499C15F3C1C75BFD2390BC9B72C3D7C59B116F163295C36B
FA0E83CCB23BD376578942C226789972FCD53625BABFE9264F5EEDD2992597BE
968B5B231DBC59328B0F92E1CC7C2EE68241C590B09ECBD676D2E3EB556E9B5A
0507CA54A84D3343C409A009674D3973F49E02479CFCBCC6F3F444867A98605E
DCF4CDE45EFB46A7FBFCAE9A895D47D5DDFDC73D350147C2A6074B263DFB6FE5
8624564DABAC8AED352C574D062226B47B9CB5B4647CAD084A51EDF2A7B5D44D
FBC57F1B0A7E8F6FB6C483282DE613E28E0AB1E5B62028A52F9B53B3FA27F000
DD189ECC42864A1D5AA1AF966FDA5D5AF706F0A30AB0EF438151C7D39682CE21
0D8FAC8DBFABB91D54CC819680322EAB72E1250A760DB5FC904651FE75CB3AE3
44D9DDD6D66B643350BBF6D1653A9614781EB7E8CA56445DFAF3B11CEB70BC12
15DD9D1109CB4D90B6068A5235A94489F21B514032F3FBAC42EDC07887EB8455
6F43AEDEA439FBF139A16A55342EE8A56971A05AF4F329B3BF197F1CE08A4D86
35BC8BADD2AF776E11669B81EAA99EF9150B8D39695D096825DF2E102C6CC2FC
BD09F82ECF0716F5378A8C51C139D72BA8445DEA9CE0C63338837ABF0EFB575E
E2A90BF14437E63C54B529297E4E8AEB9E349683FC5E1C323236F7177878D14C
F0881BBD1006BC9B62A95FE764579DE0CC5B4CFAEBFCC4E3F3D8112A7E8FF270
331D2FB475491A51AAEF10C504360FCB236B33EA5BA6233B2973A1A4A64CB156
1CCCE5676F5FEC5AD00CF74808248E7CA6304838B953DC7DB84DEB6DA73092F2
1F04F718009DBA58BF46AAD3CD7C9BE6B7C56C9816AD1985FB7624F5E48CF6C0
C7E019E37CF0B527D14F008E134FA0711FE40BC8A926EF8BB980B95A2F77EC3E
049D527B3C51560442A175D5D8758E82FBFF5F294B5D0D796A90FB81A5A18E98
E97BE601EA4F039C49B39B0B7A38F24A31CF2BBE8A4A77DA9ABDE0A3E10B009E
48968EC723C6DECDFDE76C4A7E76FBC1463CE5C32B054A731210DF35A32EB4B6
13956531D3652BAB2409BEA0B2194F8237AB16453B9349050643D5B98B056F47
97583A5F1CC5DB3DFA665A46AD11556A9DE4D19C3D69EC4B6AC687A6FFB98191
9CAAA657A12F1BB1A7B638AD6B9A54234FE345E1F0CE798DC546A5079757062C
0D09191F8E0EEA8B2AAB1BB852FF9A88ACE76802717FB43013DA06FF41184DEF
3526C06FD5BAB6F19684B7B126D8255F1A0F1BD08158F94077D191F62DD4AF06
B5E6243B2801FE685033C7E1D82DD51B28CDD8CCEEDF97BC4AF5366221DF88F3
A15D9619D717EBCD44473B8C0B519F7B53237A6BF0906A6DFF38E77DCACD3AC5
7B34E7FE4B7CB450A9C45FCC1397C6B0A86284D5B1047CE4A5267D952A379B66
0FE3A9671DD13E01433F2F6C208E32496F7EA8624C034C349973AC1227D16964
F9AB8BFD27680D2ACC6987BE974B04232D56DDA60AD2549A0BA63F83FAC01F1A
052E23200E94DCDA8807FC3021A6D2E4C13E06F1086EA20848A8E5E5D3DFB242
4B7CC458238CAB79438F28BD4D270F57A959F26997929BD1F884756B97919179
FCDE51DAEA400AAF8982DD653B0A7794729014DE0E4409134DC478749FF92F08
63167264EFAFFBE1F3DA733618F0317DB8FEA73BA241AD8A569A91A52E003357
85DF8F0B1D342FA414E3499C15F3C1C75BF59D0F150CECE0D45E10BD736B633C
8ABF3817168828BA1ADDB86B39E7C589EF576D93988FC7CBCE8F8EEAD343E055
6CB04C7CABC1D37D26ECC85EC180EB8EED1A6E86C7054A06B962B7E28A73BE0B
2713DFD32DEABA293EEC35CA74E8F4E4BDF74C53268E1A7ECA73776BA42DACC6
FAF2215872715967549F665E4D31FA89D07F9F7B71A981F6F30B8AAC02EFBF02
3FB3ACB3EB8D30CE573EBB102DC6774E0673364D2F5F08BD9F392CA41047466A
036F13A73B9E9748CBE052AC7C80C0A7253DA38F8096C24E1B46EEC4A0102A61
086064FB56D54FC54129B7DF0DBAD470D9C53731DDDBFA0A0B019593BF22319C
02486B37F961B03210F3BF96D6BF08F38611A67040608203A5C3D09D6059AE84
C186BA3DDF8A3D03A6269D7BB2137246B7C44A4D5DDD215780BA71E493103B56
3BFF48BE11CF626EDEE4BD2E4A16523198B2E05EC8749D3D46AA1886DE2A843D
955A35B70900EAD57E09228E923A91B2F77E5DB154631BD38C0D833343743003
D9EBF5AF03297DD2D683CF58D8BBDA154BFC9348A604AD1CD1644512270E45BB
ECF09337AC26BBB0E45CAEC8BE479279364FB843554834A226B66760F4607752
DF8677C0397AF9D0BAFA292F4D4F92B73D7AE87B13F108F2C4611CD948F30F50
8E6A5E75668ED3E9929056DCE30D42439FD75C1D03151D5FE0EEFDC575B41DE4
0FC8E52F0331B58CD9A51ECAF5ACC9F1CDC63772C2FA28877F526F1F3D0ABD28
289F98A3ED752F5393470DD641BB173B202FB9C5CFBABEDB73CE2FD3EC6A3ECE
8816AA5C60500DA5759D88CA15505F73ACA804CD809616BE4342A5047C07E768
89E53BC8BFCAF67124B5CF48327FBA645C9485D04E301A710BFCEE5BE0EEFDC5
75B41DE40FC8E52F0331B58CD9A51ECAFA907A695410551EA8F0912E1D19CE24
488F510E909A96C87572C1D4B56E2EB23BBF72415D00225EAF9E7326259D3C28
E90BB62A03F77E45BE54A5F49E7C5BFEBE1C71A3B572BBED5F359EC5BC402442
BBA33B2663D564461D57DFAC85CB745676F87833CC5803627C6DD6BE703FCEFB
D941EF5C3B1C10287CB787EFF59E86B4A72A199C8226F1477A18C5FA931ACAE3
1CE6B70C0C19FF70E8B577759A7C8CB34B040C29B9DF8963000217458FABB580
220574A252291322ACF12EE7FE8A738607329268F442A400BDDBE793C16F9C0C
FA569344FE06F0B093B14CDA8AB813F95EEF8F1D23575A3C84CD3760AAE7D688
5413557D3BA5484CC6C201DF87F0F105C79882D616159780F65C4243F63B1C17
67A866F1F9B4B27B64CB3D4410848E03E71CFD33CB08A071A6A7923A63E3B2BE
941FAD5DA8002F633C08A3EBDF22FEFA476B92D1B071F54300226864F320A5D2
8216384F61DB0CD008AB7A26A46FF9C8241F9F8FC68B9043740852B4CCBDD37B
F728E5648212726C12C5F614AAEE0D8590A3A26854ED51C4A9A1C13A034DC924
6699909AC060DCC4606454904FB9E7BC9FCBFE9F1D1880A7048295A277AD1D40
22BBBEA0A9483EE8EFD959ABF1FAA17C5B39F4A20A3DEC19163D7C748C451741
B5D481AAA4E0464F52F36DC07ABAD3F725A77089EE2518409CB64E9E89BF1483
8CC8E9BDA2CDF3424644937C761909AAF09F2E35801FD76EB4956C28D804A744
68E8A493F99CE2D3DFF0982549271B429927D4775BEB5F1B3CC2370D8619DB10
C162B96E490193208D7CE9CCFB889CC948BEF8AC77069D64A294FC4B927E16F3
C2229EB5B9918C0626FBF8C4B10DFE83AF257544C70A57A8021D8B6A1ED33D19
A1FBA979FF7BAB06B1AB21AC051521CCB9177819D9A8E4A57914BF755FF8BFA6
BF246BF26D4E85A7529ECEB3758E9DFD534CAC1AAF06A06E4D4B1A20E66F1035
4BDAECB0ADC7DC3FA7B24303B3C291BAB5A582CE3CB43CD00D5017219264F47E
5F287393BDE47B047F83B5AC7829017B484553D7C7E5685138A0638CE5D37C7F
601B0E36197BFA431548DC233902D54DA503AB022BDDE741CAD677367993F1B4
E7756DBC96D8A861F3882FEE876EC79521622318BB6960F7588E6392FC187987
36023DEDB0CC9AE428714DDD6619AF0785E90C2A0EF5CFF30014FE1DC8921C0E
A428E4809029FF9F7965597AB420EBB0B19C1AD3D1F5B8685D1874C7454D9ADC
7CBB39FD5C68F4C39DBEC8BEEDA86F09129C65CF38892DA4941732B8C31799B4
E67102E1628592D5D67BC817676C3705F05C752E2CD594D05B15173D5A85A7C5
8E01C97CEBC71B33F0B065EBCC731CB2F06F856541DAF4948EC2D4875DCB885E
AD2CAB2644F1E25DF5F6EF5B5ED29CA7F252DFC48E9DD4953A244E5AE73B98F8
203B2AE4F894FB61F519825659E854A83D4E6F02B610E5B65F18E4F6A88D839E
ADD20F9A893744085F176E43E1878F88D41A08D7FAF7B601661B2E2B92D08E15
1289F0E62B8EF8D94EB3FA60EED514882C79251115EB490BFB9C96586141E225
36AD74B6819A058C9DD483677E091DCE521F60B2C866CD45B80656513B6871E5
258B4F80702ADB029F18A4891A65E0AC01235E81F308949FA133943BAF0F1E43
430A8B4B4675E598639F1E9D877F10F7C8C0EC193A59A1BDFD83F4E6FB7C7698
19702617D08C10F4DC9F85CC1D7082661851B3D94D71719C73B320DC91F4F64A
EC6BB9A6B340F5BB512DC333468FB500D860BEFB0929944A4377E4668760649B
816EFE129661D5D17037A6CB3C58556EC8BFBADBAD045C00A6C3887E0A00795C
3712A58274F19CAB46BEE6168EAED2B0EC9606F6300D6B118D2C0F7796B3FF18
1058A150426089EC7071143F5177610D4C2683129C912ACDB47AECE3F9786E47
398891C3990700F3123E5BB8ACC107D8B722419A9C1F8EBE330D7A360FBCB654
0E7EB3B2ED0460F81AB38B9240BAE845D47A0BD6760B31870D69C4C15EEA09E1
831354F7C4A16212A067BDF0ED84C9A5735368A09CE46A5C17CCAC557BB69FD4
2494D5D2B9C1ED812F3CCEEC1BC079E837DCF4EB4E495547C25D2893E35E2443
5F55A2D66CE9FDEC1A5F81FA219E49C2F4D2C8EC80D9E187F9E15825F57826DD
B17A35CF2E4C380E50E1797F855826EAB926A051DDBBD93F907D31D6709284C8
6F0542486710BCF518C1B5D1E6CF23E0D97980F20EFD24A6644AA26EBAF342B3
6AEFAAAC0AB3727E59F1642789A1765F02944B8E689BF03404F5426F7148BB8F
A709AF1344271173529372AF6DA383511770EAC39ED55DADB32778CAE943CE6E
928C9521FE45A04F184800733B13440F514AF796BCDD85974E0AEC9A164C369C
237DD28FC4BE2843036E872B2A03163F0CAD1BCD5F7FBC20299D5C6FC1EDDFCE
777B796FAD72EEA5713D78F437DAE50160FAC28C1C21FCF83DE1B5516CB04C7C
ABC1D37D26ECC85EC180EB8EED1A6E85129293842B429B1AFB33D68BC88143F9
2B5D64DA3F8DBFB0D329C7450A21E4F97C8FF528ADC2F97F87C592935C07955C
1F1B0F125261DA0D2F7312CE5B3F3A1DF65DD60AA679945BCA6A71E4329DB73E
7F29098787D96D89D74796C6908AEFCAFC2C9DDFDD855116AFD66EA16F96AA4B
9F040771F86CE98994E113749F2047C28A0906100EF57663A483AA7375C850A3
1668037014979D53F051CBE5D246FC0CAC7850013FB3F1B075D4754A82A584DF
54EDC7C8DB59B77CB7A8592B7CFA7D097BB4BF8EECC6634A8112ED925C55E4B0
DF0E5BEE4B29E5DA8177D46930E3E90AEA7B324350D5926BF3AAB7CF462B8C46
CCC43F2AAB8ABEDEF76AD7F14CB416CC957E016A4C72A6A2FC3DA24AF084E754
4D8A76154942ACCED03A7785D88FEE716F2A7D77A990393CA5CBCA996BE2E518
6292AE634456B428623FD1E621555BBCA26C986ACA69714EE280FFCC692113CC
15C94DDD294049748B473FD5F4AE9C321F8D3A7609539BB1E313BACC161E4DFD
3BBD84E1216F1446F95F7E0B679C0D5FE02E0CF9AA45628844A54275C0E58946
55E7B06095437FEF27B81EB14663E3073EA68F60F1D5B1A01C9D57853580E6F1
80343DA29EB6D4908FC8959EC5474049A693CBEBA4E07CB9B5D8DE5E0B1C2257
A8DC4E816B78B9EE734118C991282B1240D3E464E928369FA93FB92613967677
4399E370879B537E40FD383EFEF02E3CF25222317FA36FFFFDC8DEB8DE95405E
C7DE4C780BB7B6AD8195784DE96BECF95B625F9BE81E96E51EC9602D4654DEB3
8E8E94225D8F864E791EA66CE3A7B80CCCA6788AEF25264822AB4D94FD51449F
12FDD58B76CFA594F3223C22C5045B028700C8710E6F425220C975AF0249835F
399A5539D63AF043C136465C5C6EDD6AC0425D8F374CC51FCB15600FF7A49A41
04BC29A0D7D3B555652AD4E14D4104669F132B4584E73C21F2C83078F5D96EDC
72B7B9B4BCC12F4209B1951AF23FF685C14584FF171362B3551FF7356C84CF0F
2434A53A3873E1326AEFC575FAEE1B5EC42CDDC027C7AAC514A42B45A1905906
63C03DB348ABE792DB5E7DB73311A007ACCC65F1BE0CBB445E9DC99DE3BF32B9
5CA40F19FE0EEEAD46783F79B52E24284B8FB0941BF71DE5A8C04AC209B2BC10
57E1B23131263F844B18EA91B95602F465D1AD4EB85656E66D39C6D94C1DFC73
2A196B89AF8000D828F0B96CD1B5C4C56944521E76439B5DCA7732A29F37A08A
140F8C0036E35125E11CFB8F1E397508BCB97A2A87578E15D147311B7C07C177
37878305488298DEF3FCFB79A08C1884C223247C65FA99AC139A69ACDE989B3F
D5A2D5C0A6D3663AFF2DE36A2249BFD2DF460161D3EA5C1B998A83F2F595DEA5
468CAAC2B78E5A1993F2B6373BD0E80C86A751E25B22ED67B8950124818EB258
558D55DEB25473A60B53D4B46DC4CE9B9FF1A7480F80EC4A178CF4CE94A7EEF8
762859353E43AF38D0D4E667A80166DE5FBCEE3580C618C1814F112E445F32C0
970817BC4050803AAE80CE06895EACC815D11C5043C96E89E9C036E84F31BECD
3B9F74A6B21D04D33D8D6867E328F1F84E503F30CC012322BF86C75D542DF2E2
EC862783E843F9628CD09328D96F2191AEB4D4ED70395961900B71104E33D18C
699CB21CBF1E702A43C212F7FDBB168337708E78CDE23E82878404BE7530ED3C
037A517E7F4D92C7AB7DB46166D3F9D51BF73E000254A8671C3523CAB620C1D5
6647B6CB1AF0CDE7B27ED2707252504B6C74D1B1215C450ECE4FF7677CEE2603
269D5F288AB410ACA8C41E7649B66330C265A5B7F41D915514AA0FAF252C2D47
0BE8E487B5C8A276C074A1F51A8FAEF46319AB90126937F49345B442931D89A2
D64E9CEFFBF0E3792A219D478D9159272C789B363F4B77BB6F513F2D1CF82BE3
64B0469874C6EB4C3D782F2BB7EFF536480AA43F0D960075B6036943E3EC779A
517C4D6040629FA35ECF5F72BC11EC5003D3A2FBEB95AA878584A8ABDF1E8CF7
8EBE55ABDB3BE9C60DC252CCFB36274DC69EF2D60CFF2873563D5F829FAAE46F
12CC16254F52A26FE47FE41504D3E851A0670AA04A36A3BD6DFED9BC3104B7D3
1460E3FA77DE5FE016DB36DE56AE7E663E81752C1539A5613325DCF159B32F71
199029B3C52A85E3A069D5265B78DF1E8A68FD35569FF3BD8484D4C450FD2CC5
3E9D5D933D8D348873F7A02DC5A4062A9DAC0FEC368B11CD07341EAB622A7559
CD4601AF33637D19547C8D92E24C1190A50E8DCED4C7B578B8FA81CC95598564
04124F851CDAC202F133D2A0021D5BA5ABB98A5D4359E63E7B5982A26F1ABC0F
7843685481E40BEEAE93DB98DE236DEF8BA32A536C00BA8999080930FB24143D
D7851B5539E97DAEBC0C57E6CAD2FA699ACC80B728B77A07EF96201F5BC9187B
8716270EB91BC97E629FD0ED9D4987C1C3F19BB1DF75F985EB18BCA8844B267B
7610A6D157EA3ADA7CF63EAE1CDEBED0C8CF6560508A7BD68F0D6896FA97C1DE
35DD2DC448E17A060D578CBBC23C7B47CFE6CFD6EBAE3E24A85D002445BF81B4
BB62B6863A4CFAE37F715EDF3EA5A33679FEB21AD1156AC74542B942B0A4F70B
64F7A89EB8D38652FB57A729387C6E48EFC3641A1DC59A816C933FF531910AFD
36D4E7369C37B8761341D2763A1FF764ED045DEC3F74111957D7B00FCF5F246C
5AFD97D7F7DAEBF8092DFD40519CD63CE8E38A742078EF5DF4BCEFC85437AD3B
3AED02EF14AE8BD323700B083E6FB9B54FF40B63FFE88BD7FA6074CD669B124A
8333FC4173EDC8861F00421BDA29947272ECDD4FCACAEF0B0D408990758FE706
25209BE1245C285B171DAA6BE705FF575048CC768BB8F138C00B63BA4E40BA8E
5C0A6D51ED6EBCD11B5068CACB821BE08A1B06587ED0BFCD31833B1EECAF947E
67DBA7060CF90D715B1B4C7A6B386466E51305470160FFA5A9FCD721692FB97A
0DD77737F84F944EE4F182641F051987B79A1615938B81AFA5C99B02AB37CB74
92A3032BC29ED513ABFE8E6F085C4FA6A856A3B0FAE27B20E1DF3B80BF4B5911
464BA2D6CD239CAA9B28146CC516ACD809E764C8DB3BD7F80C944959B74FFA0C
A674B3A52B5E428F6A5529408AEC4A8149338459F8BEE4E3EB8047907EE0174E
9379E76128411F6F62DA2124572295D7FDF91A1B0837AA7F80FED4EFD79B47D3
1ACAB7921E974E0F025141E0E37EFD447C37DB455D2F083DEA179DA4FBC32DCA
FF9A18635F0C806A7F79AB1668CB03AA08FB060A2ADB1D7FC295EACA3E7EA4F5
ED92E78990A082ADB3A32F0774CDB0A4428FFE3F0A1088EA71BD2DB74105301D
0957D57EE4D15D0E8C5B0F468202F91976A5D9C8BDB5514157F1C88F69F5F803
FC20B59D8A94F59777FF203C063C4273C41CC2B831FAC8B35A70EB34886F37C2
D18213DA6D79F0231FD18090D6EE761B5AD3510CB3E47EEF53A23BBC9033481E
0B0BF46B0980D70618A821BAD346F807B68B77266B06B756BACEB5FCD36A0F15
3536DAD78AFE7ADEC90B959AC3A19FA9D0303DAC5BE0058B7AC46EFC13F30FFE
A970858E80ADA63052023889668F4C3E84553C56AE4C8E2478A28257BE4461BF
0D5737FEF579DD93DFA22A948E88B3B323E0DD7E5B229A8753CEACC4610765D2
CBF708EDDB1B5DEA54A92603EF47888C851EEDE853AA9F0EF60D11E54B7BA047
1056B021C03FB2A2D2262AFC1467A7217C1C887F89586F84CE132D460067CEF7
4BB5AC6ED2CEDE02799D369A01933B7A77D835694536563232D2B7C11EF06056
690527A4EBD1F1355C3BD6CFC4FFB40C1CC5E799B3728AF8D6A742D6FB17DCAE
007D8E2C41A2EF916B6A2EAFB651D0E490A79CB8484AE4B453B00318B966EB78
912997CA884D714876239501D7F89D32735ABD099F2B35842AF2A6CFB7EFD6B5
7700B114375B3A18CC1B963DFC1D7F5B9FABC9B989941219026BE888DE73CD3E
463B692A4B59BA7A760DD7A81CDDA23CD0707F8B2CDBA530E9795CBE691C141A
143280C65FB2AE0253F1E002F576583BF8FF1FEE3ED0DB577DA27E45FA577E9D
4B958FC9C413E5FDF7E3F203BD2D3299DCFDAB3D314077FAFF599A6162779C3F
18AD0908F75EE8A4B38C1C582F30C6DF5FA2097A078ADFACAE547DA5926B3D5C
9A7A59226CBC34EC86D2CA91E32214DD857E80C33FB4286BC47DC77742A8C011
C9628BED9C7AD8647A15BA064C8DBC0B9A1993A9B392A4FB76D29C0565E07060
0C36FA9FEB325D9B4567CE2EFECCADDC8A013BEBF580573F64AF5AA364DDE757
9E59AB8F63B4E0D1C4D5047F251B4AE34CA73B1499B395127BF2453FB7F04A26
6A9662CD00305B894723028E0529C6B747E58310BBA39C615BD9DD02347E6B3A
AE64A949E5C87CCA39AE1F17BCA6C77E1A59B2C119DE916B29DE7054ED785232
C74B7B92C5138A7307297BF2B08A80874CF0D889281F4761B0DCFE61E56EDDE1
4DB1462E4F9859384B15882C6B0E2214137472F7DAB6811B1027FDA86CF66E03
2F1B0D4946100FCFC2BE23B43458474D510E94FCE182C53165413E1FC4EC239B
58976F94434C1FB78334D81374C359FC481521A3784357B8E3E7B676414CF22C
D112C8DD5A99D30F55D7EE28DF2F0F6174BED2CA19D075A462526DD5D645E764
B114853CA1BF1C54B28F3591C1B05ACF3D46952ED60024BBA20AFF928DAE4739
7075327EED7195DEE9EDE5DF536ECA77341301986811B7C76940F64EFF4AFBB0
62D33A9D22D14C37AA9EACFF7CC81EF9860D5DA595CC6778A7F06A3C36A4C792
D168DC61B0E00C91D60564524D7B1F773165050913614F8EF8A85BE29E113D06
CC844D519A65F780A78E56CA9D874106924BF00029F54AC39F6331A4A81BF656
2ECE87586E03C99C4FEC726E5D5CD4281510E8B82A5E5CE852D1AB080F8E3F97
843B172D926DE310DE9062984F6951B5AA2EBC98536501922111BACF45C80493
B3ABABB911186600AC62FEFFF4F7754935BE18AAC41C860B70833B92CB7228AB
2C8F68D03B6326AAE61A8AF0431F373DF8E1A969C52A99052A4D3A2FE770C935
8686071FF45FF489BCA0F4BAA4D5D965566BCD23CC0A112E0565D1E1920094A0
509510A0DBD662C731340D67F8BEC315412BA9A18E9744CAC5F1C047BDA80392
8A286C4E76A6B2EAEDFE2FDB17FF267D0F21C35E0E6977AABA48CD601358BFC6
54F3C7516FBE690A67828F56C593686101542A0830ACA6918C86EE5D21DBD34B
2EF84D336A889395E771CEC29602496D2F4CC3005863B6DE09084927E0DA3DB4
54B1BED8CD3EC75326188E28CF534185E66A3A161EED1F99B8496A9FCFAC1349
2DFBAE8110E9811B2898D889A581451395C7C58186048384504A909B92A16E8A
E2275E83777297529C5ED2573FDC622D7D4307DFE77A4B16D1848D485679E592
C1AB0CB02879C5C4AAA33FCFA22C0A4AEABE4D4DEE308AC29CABBA411987C715
206297C0971364CC5B83001B07895F0D8126F67F4A68120DDA56FC6E466A3CA4
7F0F2383A60025C5D0C64D459276BF2D8F25F13137C7F1CC459CB3B3E945760E
98EAF5063E373A084CD6829DC18D063618B2C9C5C3C3F9B01526D9D71A749845
22CAFBAF6CD275B0F8470DB58184D56DEFCA7213829FCEAC430A54AAB1C27135
F14DBBD172CCE6CD2B6095B0157B9B295F244E6197FFF3759E08318611701B27
F723F3786A03BA85152A3C6A3620836DA8BB5CE31BAA722DDB36BA5642CE4117
AD1D6B9E368CC0191FD3EC665A0F563B55F2738B16DD43CF81342B8A5B460CF1
7342B3EC42F3EBB3440E2E602354F10D0B89AA2077894331ED25BF6955E13DA0
B4DE3740C28682534E57DF995F87B37C537FD5D25484B3B641C95A5D96C622B0
4FCDDB40B675F081053377364DE99FFAFE6D22E975678C98EC8A9069AEC8E237
722DBA55BA4214EBF66B06D640012D108ECD3329117185F2DCC8334D331FDB4C
F16123266B94843C4586F7B0914CF4136BAF49D0A85D7764EBB31166A29307F6
343DCA5AE9814FF8EBFD456F77844FC27438F6061CE0C155A07D1064B66DAFAF
B39332B22F2C43C3AD99954E96E39B52434EB13675C377D3C5C7267BEFE151C5
2A60427176D702F257ED71B2803A6BF70C74D8EF4783865CE3532C2BFC6208F2
BEDF5E26A4CAEAC397152D34458B281D8EA05D6583D2796F440720BE08EE3F85
5A597B65071E7946D81D3FF2F85F8CC4417D0D02BF2477552010705ED42A0896
ABD62805E2042E248A874E814B3D78F46AF4F001A3885AB7E7C4F285F9BD614A
00DE6825572189A19315AD3976AB880E5F0AFAB2498FE1D79954BD53619CA376
01FAEC649E37E9038CEFC41BA172055892C47614A9035E7CD93575C377D3C5C7
267BEFE151C52A60427176D702F254590A4A2E016B5FEADE1A79C0AFAD4A8734
34BA54F6D717AB58F78A4BE43408C7C2F6D4465B31BDEBFFA59EB012DB2B39A9
370330D258EE8515E8CBC0DA34E79D8085F8BD147086881CD9C9335856F5F195
FCAFBC3813546176EEA6745F62F0715C865422128A163B6C6AE0D98CA8116AA0
AF078126540BD2D435D0AD6CA9233144A0545BD34F7449237157219D79611E52
DE72B51F2BB650628AC5E429F423F250EB9E8AEB5BA66E6FBB5338F24FE4F9C3
EFD3404FB795EC4D0857AA5D6620C95021DF41F3DCF687067554D464306A44A4
9AF8095E431F91B8EA9B312FC277BE315B18312C8BE99537C3E44E721A361BED
6541FF9AB02AB229B8D20C7CCA131B23CEE3EA3747DDE3939D38A4E5DE096705
B4034226D6B5DE97BBDD742027FE22B2AA7037F55F05E547ADB16F56669A201D
A41C1DAA9B4E66C8E5A03D5F1D98DE47AB51DD77014C2925F4F0125AC8AB5385
65E06699AE5D68759A52096B795842B6283A0129D49E7E9AFCA904B37EDB25A8
0BF2A04235CD244B0A88652F5A1EC5546FD4DEAA2A82A209E244948D832C75AC
8BD1ECDD9992E9F8CF3DB923D549EA4E6D98A6FEDF3B2BE1E54BB8EFB775F1BC
E8B6B9B0696233F5AF80CD6A74273F5204CCD208C109EE75EF233DF172A38D21
74B4730947637701EFBB2FBA3063483F9E82D2336227E1D03B98C42383BF31B6
8F6A6309C9BC0124812E4286E9DB31983877FBC16B4E5EC481D8E9EF87B4C4C1
08E799E71AEE8C115164BD9BF92B1A79C9C7090465E9A00FBC634995A712AB2E
112E3E6AABFC1D6F293F9EE845A2ED6C77763127B0725900DD92FEAB15171D27
2BAF7200828B2E085A16B4BB005B30C1614AEAA2AEC112F30B3AF57D9EAE465F
BEF66FE82623DBED8135D5D1E2A2D9811D78900B7D347046FF9C2A9DA7AEE1F4
2E36FADCE69D1C31BA552A09B30216F9A60D1F58E74D0931CE5AB03850ECDAF2
01BBABA430326604E56F26766AB98A5C51659EE74A875CB811177A20A894351D
75B4E76BFF75C71D425F9409954DF168966159B2A302B801CBA292D1C07EB52F
3849F14FD66B8A34A64B53A37CF300EE316C982A0D58ACB2AB0B6D52C9A745F4
40BE173AB90CDB8D5A62492E44D2391EBD6625AEEDB22442CCEB84056435B241
9148A456405A6BDEBB44025A835D94E3FE7ED4898A10D61824D760F2B86372EC
36424D8A7581AB38447347DC26F8B6F0422F3340A01614CCC41D40D27BF1870C
1EFB412C14EBB08548C09B8594FA27E14DDF887194960B9E3222121B24B97DB7
866E8CE52B81CF44DA54017243EB1546BA7FE32409951CADA934F8896AA60374
62E2444EA33B01A22F873D195661CA3A1BBAEA7BCB4D93C90C0E83A3C7BD7646
FCB6C28886EC210A1F84DB25137A35AA5C7691B72AD442BDDAD18F30DB190E4D
004740C567EB0F86531E771C74DD3701419E5B08ED32C290A30B02CF572199F7
4645C0D9B4DB9DA965633F5DCD87B03DBADCE87FC499FF9DED0E6C8FD6715B57
97EDAC56AD49F59AC389979AC060DCC4606454904FB9E7BC9FCCAC1D11162783
57D8659BCC81753C2906EAC08FC3FB9AA3D2A83ADAAE5427689ED559EBE5BEE0
A331DE6080DA757EC74FFC5E9B1D2F70A87D381F424FC2F34BF902F401264C69
EECF460CF82F033635EB5B3A4F7DF718E0EB68A4F615AF7AD898C9CCA5105A68
7B74DAC1CE89B910A9B6D2C887A3C469F9DC2A96B15D33FE7C565961C2A1C0E5
FDAF8955FBC699FC847F077A81047021DF46F69AD1EB8532A8962EF0DB618EEE
B9F1CACEBF7299500D3C3520DA9E6E7040E6A0131184185A428C37E133A909D0
2EA7CC5DA03D0AE482ECB5F7AABF9749CF4B5BE79087218032FB6D3C67E6A4D8
646298E229C517E89E253C6E46CE01444ACD693258A53F98DB0DF475C8D74928
A381F1E74BB27AF07B164374998F867ABA7A5DFD196AC274D49269CB03F74834
07DC1F346E0934D208422226264CE8AFE6E870382132172F06F105BF2DB51EC3
DF2714104F031BF8D85907DFF2849E4C3C7B62E653903867AB470C9661EC1297
4B4B88A0AD2FFB4491A03346BB7DA151B13D4957485E52C2815090CA3B1221A1
2F749E5C4197196D48244E65F7A54E14EA3DEE4621E32EE2D28136724789FF22
47D8C7EBBE4E95D9CF6F8D4D204CC6D61EDC66E28B7CBDA7CB79240357C0AF60
E817427A9126A9C32B377627ED3AD4456E3A67BF5BB49920F6FE6620D699A53E
1F1DF8D844BB4719549E214E37598BCD577141B8DD30BFF0E275AE21DCA9039D
A02B91411A735B115F242689F50313538F4B55B04A1613170A35B4A0E368FFB1
A287BEF1D44B51773DBF726C3C3A068A6FD312637F59D0DA55F3777E4CBF6A73
D17EF7A14D2B11EACC1D21E9D96DFEC09E9230E3FC37327DE16AAF88BCEA640B
CD466BF822D43A0234ED71A3E1F6F88994686783149A0710F86A46D0B55C396E
C4871CD89B3C4BAFC0110D887303109E7301CAF24954577CAC249BA77682DD4F
CC6DF13B34B101D1E96E034AD66AC6630B20566943B798A3B63363920E22A90E
55283446AC96AD3BD1EDC9E713BE102EC5636217774935F630167167EE4A5121
BAF566BA0C2DC80C17A4E7DCEE787E2D2F704584CFD5C339DA77CF42F6480A1F
D29C8002637CAED51E2CD3ED5979AADBCC7D727237F164BBF516B03977EC5D80
2D9E7F1994A7646B1A03255BC3D74A7F9B4DA617EACDDD1193FC40DA2CFAACF2
CF39D3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic8-Regular
%!PS-AdobeFont-1.0: LMMathItalic8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathItalic8-Regular known{/LMMathItalic8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic8-Regular)readonly def
/FamilyName(LMMathItalic8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathItalic8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -250 1110 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD112356772A65C14D49D03C7D456E5
1A27C2ED815B30E268B02FB1D2E769067ADAF25F28640307E3A89F0B04F44A1E
1392A44B8AAD82CED1539B6A9CEBF441EB81775C7EE4CC12313F31FE710DD429
4B1955DF2BF7A88E1EC21DA22A63BF63E89C913EC01EE10A0601D6FB239DF59D
2CEE7667F4CC4BAF660B24F635F981638F40E8CCF07F21F5B5FE3B5C115D1000
0E4B2ADAF7B1C53935EB7414421DB49A59F82D98D08351CB0BF0C06DE836CFD5
42D68D51AAD4069871F257AB7733F8EABD731FF9B0E3AD64000BCDBBEBE26F88
C96730B45C14458F42927E24318A97B48235E5FE200DB40706E9B41AF7CA33C5
67BF7766BD396006C5364D1E736B256538E5D163CDA75C4F419620D5BE5DDEB1
F7D7A55B5ACEA2B2EB4B78997398C7D38B3D7B5774D980C087236ACC7346F518
7607A19E85C83E2C6ED4F3FA8C15B65FC3D117BC5E3FFE33A5B7A69F7F7159CA
667D96B5D03E4C5E55FCB1F4E2148B4B8DA87567988F07CA181FA6A3C3C30A33
80AC6F4E92903C47BF489A2376AC02B00B8CD01DE080C96A452D52B4B56F9520
B85062F15C4828813D3694BB4BD3512541C82005C9AA5C065476148A4E47DBD4
580CB1ADD206D19E7D653E2690FD48B252BFECDB2C64C96F7477B2E5EA0593A9
84841E96F931F01B2B61C26E8450D5F2B37B51EC364BC2A1233FD108DFFE0F00
AE57465ADB0191B38D14E89413FCCB77A9FCAE09F59A3F5C352570F7390BE91D
178255E10C02CFB7B679DAF86EB351BDEBB8A7D4DBB9C65715A1355FC8D2C355
BB452D44AFDF7E25676F3ACE7772980137BBF6A5C4C136C45CE680D23B992D7F
7544FC9F70CEB83E2B66980ADA7E13488B61554D8CB264FA76074355F7FF6C55
FBF130009A03EEABEEFB1ABC2BF844196D67F7A6D7B5F71162E03FFD780CDCE6
720DA5752962EF6FFEDFCD9C2CEA3A186DFAC113892B6E7F1EC8B28E99D09742
86959C4335F1C11135880D99DE373D9861525270E0F672BE94EF236EA6A73421
3C4837DE148223916BD6808FBBF4CA6E666ADBA1D32034287198BC307CC4C673
4157442A161BD5DF3E7B535E054EE982F07720FEEA788AFC23125417616BFCB4
EEBFB70B2C76C70BF1E8FA4958CCFE84FFAB47972C1A2CA3AF8A82EFB76ED953
7071937D65F2C9E7DE6379350A87BFF8703A1B347EE8384340E16391E2592DE7
1EA0D29B9D28A1DFFAA2B2B842236E05127EDB98D97EB284E646BDAF7B4C3714
38B2A60CBCEF2D2B7B1724C246FB0CA30B71F1D78D86D1E3A6A4953F28264E91
3410092703BB738AEBD09701B726637F67F7843C67AF740B9F77A8906FA47676
D6DC9F7334D7A878F705C8AC17A3CF15996A0516B254796957A7CB62A2CB7315
CCCD2CCA5135F2609271C38C5994F95051E4DDF7E7AD067E77CA02BF85E9D2C9
68A499380262833F86B60112DE1653850D75302AFDA55CFF2BFE1280D518D25A
D754E54C9C1ACD42016497BC2AC2DE882BEEEB3406B75AE04EA3B46A207A3C72
080283484B8E4F2ADE38121C8D38A5D50F0EF74BA7F9A0A6140258BB47D2205E
1721A035AFAD06EB3AA8D08711CF590DE17FF830AA0407992804C67846C849D3
3DA63DF5D39A716877310ED1518D549AD310C00338A2A382DA7679520E0F3F23
23EEE0A97E2581AC3397A4706F6F9DA84C80BAD1812A8ED9884F88508F3A9473
71995C198FA48101D29D1CAF6E3E196F9FA0434C68C55BD3929D79AA0ED72D76
2C02219BD6F371AB09E42C79109816F687B0D2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: MSBM10
%!PS-AdobeFont-1.0: MSBM10 003.002
%%Title: MSBM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSBM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSBM10 known{/MSBM10 findfont dup/UniqueID known{dup
/UniqueID get 5031982 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSBM10 def
/FontBBox {-55 -420 2343 920 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSBM10.) readonly def
/FullName (MSBM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 82 /R put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943E919FB4E3240FEEED78EE63
0677FAF39AB2543D18C08A2B98B97451CD42CB7893DA8601CC0F45A65BEAFC64
EF72554395DA801CF2E9E3B03F65F1BD98F8C5F8EA06D7457842303C1A817E7D
69821807328AF426B9DDBC188A79A66FBB9E6193B4A3EDFE3136C6574B9C4C94
E2CBA4FE7997F949BB2DAC0D329C2AD8E4095BD18A037AC9F77B794FC389E5CD
56CC4C0B74D64FB0D02C92B88942C18B6DA84D4CF482DAF3A01E80BE483AC6ED
AE98F5F3E49BC762EF6BA937D528E751D9588B0A1E82EF0A5998150EC3854472
5A91EB983915BC1D6E2C3E615E0267B39D6937ECE0EC16162FE76676E5B69F3C
BC1AD934BECA284B89F0613B70876247D768BCD246883CFF4D819D6265302730
7E4BE6B2FFE7E91CCB8C6D2AFACDB4C5DB9688153E1D6B2DE136BF7068418A4F
2D1C0CA301B1B97290B46EE14B8286A81E709980F67382A5132F01B2D44DCFF0
9753E776AEAE2141D580E64C82598DAA6DA4057FFA9D02C3B77AE15A50AB457F
3FA5A10A3C986B22F8E154C1E564A55D3BE4487677613DCF793F7E1B57C9A925
BC57746C25FE567719A9EAA9CC44F1D0FF8F92C03132B205F57E3AFE9FB66632
D3FB3EF5BDFB9848030527FE759A5273CB81DBA2719611355F43E34F8FD7D0EC
9BE47685A2D122C9B60198A430C5F5E3F972376F0FF4BA52BAFF64095F7ABCBA
022622692231FF87514FD912B80C07A0EDCEECFA629E2734B5EFE2604E8DCB24
32A4C691DB4CCCF19EF897A9F4EA5B2B5AFCDF87AC06B93669F3007C1295E016
FF0A99324B80E37020B1080E80949525B3278DF111ABEA48E7182B6F4DE2DC90
B8D31A953343D5DB78B1F2CC6CE631EC7E3D0041A823DF2A4702AAC0F0A2F018
E5ADCD42EF2EC8AFF6F4705D30042BE7B6F866C14AEA1CEE04DFF82BF14931B8
D297C38E6DA6E587C23EF0864F69BB0DBC9C1EFBBB97B92BADC336A4AFAC6A91
0A6B158DC42E975CB5D8D2054CEF367FB112456AF50684C41F80B1E7ACAEA853
B843CABA76BDE9582090299F423519EE3AF8F83AE7F7828B314B6E36E9127419
F274E9FBF5622C5E48D7E95664D6C0C1006661038CF2C93BEF1DE34A163A2C86
693A13F4D0F052D2E183F36401F0C29862BC1B36A086524F76C7EE2C6D436A23
7009F146F1756DCADD3F70C51FDCE610E30C0F4AC538A2703423A07976ACA74C
25F4CFD6A92969E206375FB0C672E45948B0E832F2BE688EC22FEEB3E06BBC3A
272F73081A30830AE4214F2F029918FCA40BAEBED6299EDBECA01E08F27E5627
F53BC56F4AE7CE2D6273B27323AB829E2D51672A4990E3AEE84331583A99DA4E
63610AF8F10C50FE6196E3F4C1E4FC9BA6BE0ABDC81A0A7BF6A5792A97BD0A7E
7BBD31C3FDC01D734550843C8D84C6CC0B492CD1A6CCD57428F03A863E959C77
457D401028FD00FFA9BC422FD09D8B8A70446A61CB256A2FA0B59A2646D9C5FE
961894DB8B315C52008B4416AC35439E010BF90E43A05FCB2FBE8E62385E220E
588B7FE5509F1BB71150E159D01D24EE28008D4213227FE9BCAA34364B1039F6
BC142AAB19C8E9B15F0113781DF9C9B3BC145955552A901AEBA588D39D7E87F1
CAF27D315E168807021B0CD1B2CE13B611A7B5FC28DEB4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C071D06D71D60CEEC9FC68AAC0ADD1DD74B262
0156612EB4B21A3F4ABD34403540C124221FB9DA5EC6C7229DA9A1D033AB828E
9D80023B2C8E68FAF7A38C925E0587A1CCE432EBBBA598B201F5AD036BE7C8AD
B8C411BC79646781C4519B89DA648B919EB362176B83298EE2D8B405DC66D81E
C655DFFD1BB283F3C5DEF1495FF97C798C213036AD02BB07FD42EC5932E79727
ACF464295E75CFC635036CF27FFC42DC2919CC167CA4C2E673040B7909AA26E8
123B3D9F176F6510B9526E94D4E38E62F8B9B96E2D2D51BDA2FB7C6992B79CD8
3E40292315B0EFE711C8FCB37968B8AE1BCADE6BD8A3BA1009B34137B90D924F
B2784C9E13F0795427324E80C175BC99140171AA2F40784356690DDB982F55FE
EFFCF946C6DADBC6A907C7DC28850415D9AFC1C8A868801B990CE2D26AE40CB3
4EE0281A60063AA71E48DB8A35E05C2BEA1ED5BEC68717E95B7597AD7CACDA2A
6A4E8808BDF0AFFBA31BE1697149D7BACECF4481DC61CEAB7476A2E00CD8EFF1
37E476FE5A098E607E25ED29F4BF3409309145BD0530C8A76E85F59EB0890ECB
A12DE954F33220ECCE5E9CC4B52E97089790D08FFEEA7D143DCC7C07BB2694CA
6709EE19C11515E6E967043F9162C39D9BEB2767B7B31EA068C594A63173F7F1
67F3D6FE97087D19F73EEE205A47785EF3C453E6F77A08AE9F93F4060DD19EF6
6DA5E780DCCA30F180F8DFB0CEC4602AD1201C63D91450E7B5F44AEF32087A03
0D933A941134E74040E6E7E797E18AF57941DDF7DE2072ADACCD3BF8D4CFF06C
5B946E21D0F5A799CD011CFFE4CF0F571B4377AD4768FBEBDFCF6B49F09839B9
35B1F7AB20DBC872DEDA90B79F113F5A4BE581DB49C5EB8C9033B8050C143424
1EDB333D1DCB862DC543CE420CC26EDF9639E4256570975B25C6C1F06CFDB2FD
9035344017BAA39283C14E3AE66A14DAFFE2CD87485598645C39B92C18AAD014
7814BF27C8FA6DCA0BBA0FFA552B9FFDD54BDD8C7F84484031FFFC0AE8932A64
53D2632D9379F30231361D03BF91F74904C7106B6F8EB6ABBB29858F65E937CD
E31D67C847719779DE0B34CECE88A8F9A12D46B8FCA50DF4433B0B8AED6A63B9
E6512B667AC78A09A780813B1FF02AA967B12AAFAA0AF1B3DA27604A975C2DB6
FC1854457C67C54DC08DB989CA3267B2BE5B8178E6B7889A33771F86276E6DA4
F83033522871198AB3E954EDD88B5059BFBB42AFFC2738CA09B628CC646123FC
9C2BB8B9149CBADE7A7953FB4FBAEB6078B410935DF7D6D5064271899313C4E5
0DA12BF2F08521A17641A2F5541EC8419514939892C0E353FB1785CF9CB67C88
AF752C2A0DAB509A424DDB9649BD8A846E6BD3D374BEB6B9DBD5C10FF56E2000
AE4AA5B339C187F52630B52309834F266D778C720FA9BD9CBC1F322A39EFCAF5
85107BD5A5C188A6409352766D80E77B1270019E0EF57F31E9F13B9483F070F4
86122EE08A4870456161458B6C93A1602A5EE583461ED91A90CA5B743636AED8
1E5142CC0A7DC998CBCF84E39CE3B141286A5994C60855979B402FC1C092EA15
1A6F3762571629775247A6AC65DEFBCA10A51ED614E0C7FBC7335681207464AB
F8C4ED5B883E7A4D01199AFC3C88B0E2AB5FE014A84377451081CA0390DEBA75
7BEA45FA3171095052B839F7A2A9E41737F4A4CD704E8EAFC757116FE3012E01
AEBF584F6B34EB3F9C4B3893DF4E25B71CA17D427219E0E2F3F7ADB530841948
1FC1CD966965C72E9490C31153E2A0DAB73629A1DC0ED7C058AD150C4D5BE6CA
FCC7D71907232339F3FCD771914933CABF613F0F9FA3E206172B0B4ADD1D9744
00A8C2642147D4B652A8F1A7E5BD064E369FC591D4739533513C202E9DA91CDD
1581D1A58898DD6564B1710A88AEF94B888C52681BAEE1E3EFB4DBC694919D4F
41D01894C91D8E03F68DB550934E5D783537D2B57CEFE23ABACEC756F5D1EA5D
A74192035D2304EC4F9083716CA7906B80486BB5C79752270821CB12BE7ED0FB
9FEAA580CA187AA3C9475070809AF6881F745EC71298D454AD31AB998F5821B8
2070122634D5A247EE4D8672339B1D90113137D4FEAF3CF3A2456A8712556956
C5A48721B1B1E140ABFF7793081B2B092724FC0F129DE772236556BEEEBEBFB1
FAB1037FB0997B367483D2C8C0D44E6111CEE2EF443F84FAC7710AD0368D542E
8A629BBC3C6E2D85E984AA01B575B37DD1D9B0D453E3A73EE7A34FEFA5641BDD
67E694671B6250DAFA3D85E0A78E946C78E33A284D4F92B73D7AE87B13F108F2
C4611CD948F30F56B984E409650E9CDFFD63D996E25E5C0E0FFE02BBE2237537
8C945F31C26697A7ED159B529276995292581CB9B29A54F4F4B2D472C74909CC
47C1675DC6FB9A932C0552F8FBE17F4D8771BFC6109E6D709951694157B3CA9B
1F3952D101D6CE60D1A0A97C99EDB3FAD64BBD337BB747424BE88E67FEA44610
51A1F65159650D3A2FA882944E6E8DB113CE928969F6BE3E3B8BFB71302E87A4
5A22ED99B04853D66E5A22B56F79FEFE917A6F436B823B1A2FD914DDADEFB5C5
CA3A43E348D017CE2040752BF94A98902E608264DED8C3241F06469FE18C377E
448EDBB0823526BD66B40F0519F047195405629408224D070207499DF2F43E7D
52E442E3B6E9E3B08F88C9961E81373B96460077464C7DBE6C7C7887BEB3F685
B182706F5DB4C7C4BC2FB81A7D040EC5A04E5C5434D732318AE791EDC71A47F2
AB39A992EE304763BBA1AA81F9D74B24FA7EACEFBCAC72D673540922501841A4
F7EF18CA86AD20AD76325914FC0197DA6D7632947C4AB3AF2133D1A1E2719511
F62BEB9C879E76B74493C7D5EF38E01CC031CB4CE13C2EB6BA2695E1AB97260C
39A7CF8F690145893081D526990E92C1FB18CC4B968D70DFD13C6223FAC9AD31
2E1240ED981AECE8D13DC653D59255F868EF158EDD781E9D02889907B23F00D4
F6A0D9B74E591BADA348B09E22B1A783A8EF2AC87D34B6407522AB33411ECA4F
6C765C85ED1405A5F27B28A16751402AB278A8099E29940E719DE1E109E5BEFC
2A4098E77020110C37A90B5BDBE279918B0B31E08031DB686D518B4CBB8A4D0B
EBF6750A452A7F706EA676E3B3237FC5656B29CD5A3A04F82AC871B526CC28B3
A61D985EEB3610FCAA433B9C6D4683C512F0FDBF3EE6FF552D7BF0BBBBA37050
FCBE3F164189FDC8446ACDE8D0D4050278151B46E56AF826A0C2E9389C2B8BB8
E38579D281D5142944D3322E1C66D456E4C5DD727AA41FA5B369D5E10CD71832
A7DD40DE855B47289C449B6AD8D5F1D557102050EDA5F1641EAAFDDBC082E579
A06D8A3A323458808BAD0F4B8A2BF406DBAC4C5F555EC96E760C8245A1AD9F50
881DB475F892F868823CC55D4859C09148529FBA57A392127B68F5366491D1BB
097D8FF4A71966D42DD988F48C8A1F4DE0449E6AAE79500C42B4EFE4936D0D00
0FB339115493C16412F1D6DCE02BC7B485CC108C6321EBF1C609633933A576C6
B0758D49F3155D448D505F73A5206EC1C8886F5949790A7E4B850B6B8E31EC18
B7321E63AC75B6588774961F6B7D313B850AA4B368E48DAFAA5693CAA236E150
E02FB2831359FDB95792B2E6431DD24BFA8F2B51BC21E2E5AACC0CA211F50A13
075ABCF9F440CA468403D939B91520C652F1196EAF1BC975E26F8057F69CB972
E976F99070AD3FCD958C1EC54B3994EA142AA0615EF7BC00D85F75BF5F32B350
E2CF46BA0E8D0120BDB54910E5C27A27B59664E856EDDE290103A0D490FD76DD
09B152B3AD1C4754696B239D4B13935AC19769600943C7343A5E7A06C9115395
DC2F92EA95E5ECE5A08EDD16DF74B6297EC0220C91F8BB9AFE742FA96456E131
7D41CDCE88A8F9A12D46B8FCA50DF4433B0B8AED6A63BB5FFDFB8D48D04F9849
2972699B5667C0D2D206F4785DE20A854E1D4C655A690689B7B5A19F8162E5D8
454B7A1CE94AF723F47C6B168CB7269CC802B14545C8448B5C260C6AAED5FB23
2390D7239C22534FEE644AE96C5718EFFB9DF1AC47CB3022D3751E6B7123FB71
403E154150FA4A14EE2CDC8F0BD084CAB30272E8F065218BA88536F138B94AFA
D750F6EA9BB43271084CD876A14CEBEB86283BDB500BBC0F9E152C30059054EE
92951E4A202AB409F7D16443DE00ED69C1FA674BA3664F8BD00C08A27F475C00
E6AABE35B01B991AE910B7DC821CFD8A6B5C7F4B116E78065CB219C926D45163
EBF6E81EF0C38076871283D64FA5F2126CCA7E93636A7CCA2158B99A15CD405D
4AD290CD8F7AF8845CF78D4BE9C7F2E4DC00372530C64BBBB785117A8AEEC190
9F49C82BAD55AD174D38A74582CB367BB50ACF8FBB2C8A2EDB17FF267D0F21C3
5BE42CA518272C9F9FB2DF0780C957CF1B9734E9F49C0E6EBDB5D24ED5D673E2
6A25811D4BCA9D693EF8ABE784D2BE46DE1E57E1B738ADF6FD49E6A53BF48C6C
2A73026234D3719C72C2FB8B8274AB54A6853DC6784398A6B994BE424B6E9078
6C303D590747608AF3CDD6A51B5612DD5D49E1153A25EBEAC76FEC601CF4D10F
65DAE3EDBF9A163BEE244542BFD2849D498C239237ECDCB23458C7C3B9395C7F
900C2AC7BDEF8FB9D4574698BC8D4E374B34969A885A0A4AA26F19F8348EC621
89B42297868AD2C3E80D95C41FA4A5AF7A016D3C773E040312AA0240DE24C7F9
D662FC2E59673DEF563AECCABF724C09CEEB5DCA64FC6D24A091A75B5745DFEE
F5C1162900B5F1EF5A7102C27DB1918679E7E354A5DABF897D9C8EF5A14FA8DF
FA3A7B3D47542FFF5987268E60E7FD64B017EC6A8FDB4BA5AB5B5B58046899C9
C5993E7302C870678DEBE8FEF3F2438217BA5121CC668458620DB3D381D56770
19CDD612E5C0A267BE4F707ECE93B3E1E8BE65922315729FA5513AD13B562C5E
E145AB39905815D6C3E8B60AC5C1D4D7731E2A6B122C6F57790C42B0368AD7A4
99EE5F029AA6F8E302F4CD994EC08C00AC6A66C51254F71280CC722402E200EA
D4F6F489DCD61B81CDB85804A5EF00CDB09D9C2EE4F3D571285E319A78F90942
1C31359DDF81F38F6E8615BCD0E6CFFE077688C365888921E45608C868A0F6F9
D726CB2CD81B49A9F47C12FF76284D3B07E2C2E788036B4867F90D40C1E4FF74
60399F1F08F98A05A579D00D1ED5E8A86BE9DC1CEE3FCB03B9A0E4BBB81C849F
AB1A6089E9807455A5DD78B2EC3090E36EDF4D19FA6BBEF386127BBDB53D25E6
8448A975CD56BE0A93070F848850FB9B3B0285C7FADB28A3711C06273B79FBD2
A509FDF7AF81630306D67E0AAD0DAB78243E1B814F745234BA7CD57325B5A34C
C3F984018DC9653649786481788A6F58ADDB87DD0D883AF60455753850A63756
5EBCDE76329F5626E6328EBE3DB5770A4C3E21341C304F38845FE70E091803D9
D14037AC4AA8C4D17EBB62ACEFE5344982E0F489D72EF60183D8F2A79A3AA765
C18E0479B0255870CD61C8CF7AA8DE567D174EC90945404C5B928EAF3E8DDC1E
018442474EC6B0B42DF539EC1557722299347DCFF0347BA4273054B8062D3DF6
FF094944AE472D60DDF6CA62288E4E780F8614C7749C9406325C82715C866134
637DCCE4848D2B051B8E0EC7B88872E9AE68BB5DDC30F4A61119733F6F6DE0BF
4C6437A849A661B6A233B1C24238BB910C11D2A8024C89FB5DC745489AAC2570
4C61242B4B1983A5D0B134C8052495CBAA9D2E2E014641BD58F0EC389FACADA3
08A1723A5C2492BA0615B0222EDD152AD19C307118AC0086653521EA59D676CF
C36AB586FF1FD4C383E2785EAD36F41274FB0BFF9DFEADC612CA44A7392D8E79
1DDE1DE818BBF26CE3BCC2569F5CE6DC91D4F8B7800A05DECB300CD7A8C38D77
4C1DF436013901C9671F77F34A63F361C5579EC5E00C5A8E2FC97874F6459EFC
C1760E9C6C78E60CC0152340DA6F26C67B2E10B620750E2C44E5CB9DCE747E29
6F7E716E6BB12B699A2FCA90DFB3DD730D96D100DC5B1BBB1632D7015235F4D5
1C1C753EEFDD6ADCEB45DF4D00713744039C43B860B5A9C51AF0BEF11CC8E85B
067A402342896C9B3BAAA570C4900E12D720F2812F28626DE3BD3F3426B82718
259AD02CDB518BA4C4AD8F261CFEBF43857EC7A543ABB1E059247E276E206CB0
0BED125C8F78A665901F80068C9B0AED83074C6270B177BAA18F1975F43E9160
8B75D86D9F7C1E986C2DDA71CBF33FACEE675B943764AFE71B5A359C4A092916
3E8EF660794518DA4307AA5B38469000FBF31BAE9CE8703754A099D21B332D3C
A19A842755A79DDC1E281A8C34A969B80EDC946658B7579B5BCF07AC8B45C2A8
3664140E70CA62DCB3153CB4A8E46F12CC16254F52A26FE47FE41504D3E851A0
665AB60BC0CE5C72512D196F8D1BC0B3FC12DA2D13F4B9AEA2D017EE7E574B86
2576F5EA495F51E1B3A86090ECFDB57097EF73BFFD5E41E8AB6BF105F87986D4
95940A8B4A29E4DC974554DF975D026EA92FC09DBD65783663CAFE414B6F8C06
F00A26631D7FCC4527109F177093E7432F5FAA6CA14F1654ACCFEC8FFC127488
F604E972B695E9EF18F331A58BE4704E5130FB4984C3FE2474E6CF0935F90B79
7221D94774689E83E5406F5D9554C1284249C687A6CF5A6B4783F54267C48710
32ED406DE854CD5E243C0BE4656E35FA02FAF5101E1AE6B7CB286C9DB979D763
FEB468FC7AA2DDBE2E708D27D89164B12BD8BDF0418BEDF018EA67683158D1B7
73C6EF553EA897D5F2D53E75902E57D7C4E06D7DC83F1C557ECF5DE83748370B
00EE03A3ADB919976D4DBFF11B246AF9C2FE922A8A6F8CD47656ED2CBC816B17
3B01048BE9D1E4B54ABC0396D5203D088ED7A1FC7CC863AF414AC14AC2D75E5E
EDEB706CFB2AFE24EB580E55BD31B793E4065CE83795F047004ED88F5C38BDA8
7F5FA8880517429B9C4E5FE980448EDF3BD57758FD145E769D4E88BF43D19050
DA58F5EDC7B4AA76BD8CDAF0B8639BD5D2C7552AF5415B7F35B957F02B962930
D3D0C3AABCE7BF840A7A035F2CC57FC978684570CF6C8FDB960B9CC6E9435D65
77D1CFB71D362BAD7280AED8771C6EE2F7E2D86C5661CDBEBB354B84249E93B7
7A0E409B4D5E17600E1E43F5EA1F884939C0AE467119F1E155676D10A8A35955
BADB667DB10180DF404F43A166E2E533F1C050D35CE4AEE92C35EE391398EFCF
E19EDE2E31F837DF86F1800F59C89EF6401112AB73434A3938E1970D8EA3CD40
C7B8FB44205899626FBC269C25478E0A63F78F3460EDD4F64B4D2A5B3E660B64
D293F803C670E243F0B0EB1C548746C08C7F4FAC0D4A7FD8B7369AED2AE9A79C
74C0FF0E0B0C1AD3B59BEF79753FDA3E929B52F207382364B1C62AE8311C4337
297E030CC0CE93ADB4E2FEB60E28FF6D4AF0010D422AFC137F2254FFF6C2929F
CB76A235705EC088049C1F1B0E78FD2D357BBBFB0E12CD481F96252AB7402213
DF9BB4464515CCEA5FE4C0CF761E921D7D2992EB24625547D54E3F2C644ABABB
47914DF3ED2C719753BB1EED9C435F2D571BEBA4F76A0AD5DFDBA6EC952A4F37
948B63263FA4097587802F6C66C3BC6E9DF45A22A24877E4A4499697D46B779C
8609E85E4BCFE84319532B3AC9D62BD413CC127C8DAEBC28D7DE5CB57A30F23A
2859902409CD4FF43EF6A99E9FFA2DB4113C12AB9C616F074276C4840A546A73
0D24D8518117AD200014839545B1078F38D7284FBFC473C510CA28AB90147613
F0EBC94C3EA0001043705336F16E783FDADA674B361F951D5152C0011FE0BEAE
51286E4979DACD3F5A953BD9E918D5E46449525A4A597FF0F091B2B4794752D7
EE5D9B94524DF768ADA1377760AB1ACE2D780F5624CF53DE046A36EFB35B52F0
566623440D7F364C4030648BC39783FD7AE189510DB572D01093BC4C7EE0C09F
389FF828AA7585F9B7FAFA718DAF925AA837B8C0B647161E5C322CA820521400
5D234795C9DC1354D1C0E5ABC997C64F3C84D2C3B7581BC9566EB6D012B6B784
F740B8E0B360808C984DEC73EF57328A2347BC752EB0EFF7BE8B688A3622826E
C83CC42DCA4A26C504AB95C5232A86199FC1295D8BC52BBA9C5089A346CC5760
009233FDE0B38CD4EC1D07A9F817ADBD1AA6D303AAF94D5FA688675B55D40FA4
3C6D97741D9FE4C964FC6D24A091A75B5745DFEEF5C1162900B5F1EF59402CD5
E4D0C3953C9493D87F46CE4E9C7A543364A9B82B34154924F4739C650A8EF8D2
38C73BD6689A0657D8427446E44E2F5C77937234D1D6AFCA63944D3FE5126940
8ADA00FF11BFB205B9A42EC1F50B435E4D44E14E22056FEA071D0061F16D8879
6C4BA0C670D0E715ED9333A0FBBD15F19CBCE5F93259A6C4A8CAD50B9186BF14
62D3AE2AAEA8A45E9A29BBCF83E95F0C65B2D60169538EDFAAB935FE3468186E
CD90E2F15FDBB395191E6C4659910683768F80764D94FE8A746FD06C08F15F97
3A528084C73A3416B7D9498707C04E9115D411FD74AD771B5973E6D0A573A1FD
2E01CB1197990EDF8444CC83F1AF789DCE5C7F64567C9D80D1829D7FE5F45647
ED6B99C6D96B728840A77AAB12DF037473065B62E9F3775CAEDAD9508FA92283
6FAA01D50CBB9B12B543AF2A86A99F4D544B8974F01B52945FC6ABCF3ECD8410
335AE6CAAA4F740EFA8AE1742B115F4FA7FD8E330D0B86B191FF5B038A5D0C32
91053A42460468F6A1700953700663A85229385FB9BC726979DE858914A95826
CB2A8F0F17773C8DC86EDDB610CA36C8A6051774DAD79E4E3DD10CA06A919430
0B6FF769550AD34A047DDF4DCAD48C79C13C76BDB9A98E254804C9126F6A007A
D697659D0F4B9B7BE0BE1E74DE179CA649DEDD316A452509D2804B5BE0F6C5C6
EF94B0FC821BF1E02C91C149EBC163C14366CDBF3C81F57A352355320AB4F3E3
A84E4B60EC6CF57A1A00F90F224190D7BFAFF83C13AF40E46F7154198D7BC2C6
F10586634E82705468F167630971BC01DC641766DC254D9E9B06BD62DEAA105F
CD48375C11A3207B5A381FF8E1C163001513CC382BDC172026981E9CD05FD8DD
83503D108FA0BF72ECFAAADAFEE78E1D8D2B9E94AF57AE0A20570A74D0C84155
353C360C86120BE8A6A2B0C9D6550784FB8929369CA329F6A6D89A7066E845EA
FE223A6D26B84EE6B6ADF0D9950A195F64FD3209C6D47B46B7708F855E501D4F
6F9B939EE1663FD02D1E1D74F22C4DA4143A4D523E32A0A371A51F64CDC4E06F
544F2055F67F0ACD4E9D99C47877168E8977CDA919CA86D82794F04E7E98644D
98246CC6E5F85E045FE750DA4A9B403FD293CC436888B75949007FB2D0557A88
D362014EDFD3445233A03A005D3F670E67B8FE790851B16E71241433FEA5650A
3908D0B0BD195F64242395E6C807B7D00E12CC9CA711980842040899809A443C
00042C681FE3F9BBDDA09127551CC4780E971D3952648BE3ACB42BEC6D5B5DA0
CAF19D34A8BD8E904BBB589CA901E79BBDB311C102F70F1D2FE7EB3609B14BBF
10E66264FD1E6EAE175987CC0DE53E3799F86A71F96165AA3EFB39B7B13C5FCC
011F38E349AF6FB76AC51841B39F02662AF720242D74012508F26C7003A39A3D
65A8CE04E1583229836D0DD8CA390CFD14E80FC0455F34F89764223F7DC55BA6
69B8793F48CA8E9FA4C89E877948CA4CF92F1BB9E3825B748C865593BAFE4D25
F58B6C3937F7A3D8165EDF4C74CBB662283EA3FB964084B345CC06DBE98FE9E5
2BDF3CF8FEC118F0FE83A621685EA394047116ED7629C74E8171EE39B9968596
DAD2FB69E0425E6B527C4E25D28CDE453EF7A4E0988B62CE07D14F620B90A67F
273B311061BF2D3CE3DC3A689EF85714824E939267229AAFDE9C8C387F15F064
F68627E32241CA1AE9D54F1E3710F18FFA2F912FD822B05DDC146FDE82B9FABC
A9A986683FF9CB2E1937937AFBCCFCFB821CEDEFB4941ACB6488C1A608FA21A2
EDC0D22ED3D5F6735067D8C0F31C456BB35D31B98E4DA0CCE45277DB109D6A95
87CD6B0C5BF54A30D4E3072F05FEA72A3C39AA0DB177C37546FF0FFE8288920E
35A3B84D87A21F5043A04BE41F18B2CD19AAC871DF4CCABC332ED75E1657E2B5
531B227A3879412434F68276BACEC7094E9C4779051CB9421DE1DD7BC5D109B5
2B7093D785F43FD6DAE693B16645D354E54ED6C97ED4F591623645C99097F1BF
66F347EE1D6DB95461595C9938581921663D3A3DB29723187596489A8894E037
3BF6D0E1D56EA24BEE873E68313353CCEF779B6200A1047B20647CBC2F42292B
825608A05FCC5A87AD774203738D9D144919E98326CE01E4BE6B9E623761D24C
0B7CB02DD90DC8A2CBBEBDCC9B7EF3CDC194DF7541D34D08480F1A1CA16F2E2F
8A6A4A00EBEB709BB571CBD6D51C00B349268DE077F06EC59482927DF994271B
1F39BB29575F0D72916AF4B385735E3409FF6CC8F3C38638084F8F4F7DA8B4AE
EED926F2DEE9A34E92E3925484E3FA45344C7FD3D4D3A68B7A80D27AF606694C
DDFE9C6DD15D99ED151912F966FCDFE7AF5AC66080F745228EAC9B0EC2C3F650
1F4BA0C82814EE1605F5CA9D62127553EE375832C57F9ECCF6D8C3FCCDDFF2DA
B3612678BF24A2450F6E99DE896F7F3E4563B59A33344959BAE4CB57E6FF0CAB
1468DC84FE0F3F92EC4E129E00BA3BD9CC0870FB6060AAF40EB540CD50D3198A
9127F8B594F29CCFDAEA3CA1276BFC8969DA9B9A00344F1D4D782CA0ABA98754
1FFD5934A377B4E670B933462098578BCD5050EB47A9F4313EDADA4845CD6C72
77041939F7243D600CF7EE179BBD3BA15C58FC4736583A4EBB71EFF383DC58FC
1C6DAA3105C475E5D473CD591B11F1282E9A80CFE218A4B5FF0264F1EC9818FC
81ABBFC92DD26021738105BCED3E94CECEB2E6E552D1F135733C7ABB72957138
4824567D6D1B2BE5142DEBA285AC0DF74D696E55B08B672A1118DAA72C369DAA
397883491E11171B2040FB6637140BE927369F803A4FF311D52A74289065C1D0
E2663FA57A88150633F3F937E9606D75A53BC9AC8678874FC3486B5EC7D278A0
D5DABB7B1BC64C3BC771C29C5837FFFBAD42F40083C2E412EE5E6E050E99E1DD
8C3FC2A00E05F0D6076A34A4B833ECB05F190B1444E379817760012E1331E9DA
B047409E478B58C1E5D8811E1799E40445E29A10318D320D2C81AA5DCE6620B1
3159F6F0DA988C6FF06B7DEF84FD26D3794264CB02B2E1B8F18CC386797D2A9A
40DD7EFA8609D2E30899DAC9B8553DB4FC96FC35ECDC38C3E3223F9E340C6745
0386D3DC4FC1E20A83DFAE731EAD0363A7BBEC37D8A9CAECC16CEAA06FED505E
C60F7460026CB419574319DAD73DCF5A465E9F002FA79AD452E2CCE8D95B6A53
88F29F07A9F37C84D143DEDCFB27AD763C746E1814DAF2D759976B3D2246EBC6
9353B083453AA83AB1657ABADB9A30C6C52A33B45F9C7B9361F7C7F4EBB939F4
6ACCC32B19C5A5886DAD4EC3D83D0BF1564C00C405693F2832BA5827DBB7103C
432EDAEC18CAD42166EDA7834BE592C3B7C87AAB2CBBB8A87C093937215405A4
E4D84599E4674B52F65CD9EDBBF10DF518D2436969674D4C79B5F77B8D6FA2E2
26B8B932A195CC0EEFA8E39744C2315DFC0050BB4DAD4B0FF3779D39D39D1205
9B64E8C6097B5281C359CE4BDF4907ADA234C6DE77DC4957B683947D54583D09
C01DC47D2CA3D7E500C9BE47338665F1538F2F645757A6FECBE5A1590A6EA831
635F1E7946F9ED34797866D7479F81B25C8B73BE5EDF2461F63CAC91E253D461
23B796965124AF855AF2CFF8EE38436E7C68C48BA02E9F78B4EF39EC5CC133D1
4C2E464C13F5C41C3C5F8114A5650C07838E0D553E7E840AF3EA2B0E8D47E025
299E048097B778D17B0AA1C672E2020C946F0F8E03A35E76E81DBB60E01D4CDD
FC2E9BE4709956583F3B9EEF0A37F30434C3077A2428BEB3FA5E46ED9C413EF1
95DB3159AFA04AF25F0A82F1114AC09880F80827DBBE528FFC7FE26EB04AA53A
EAF4DBDBF6F0800EBEF9EA787C014E395791F73DC3A126EBEE67B036D93D18AB
91F771A43F256843EFCDCCACE4627CFE80E82179579BFE305B9AA04A6E9528D7
57CE24139474F15CA1082CF6930F992BFC83A4D983558086958FF839797DB451
68A9F3FEF6B8BEBD37ADA98518DD604EFE6715F50897F075509F64E99F3543B1
13D3A4716D2FC8CAF0DAFB63A8C28130E1591BC17273EBAD6AFB646F54CEC76A
C98678B54E6E3A103F615CA05A901D8B991528CC1ED3B30CDE23A07FFBB7128E
66FC9D66FF7CD9538565425DCD900AC231610AB9789DA62AC41EE688184BFE66
41C0D34DC5F77FEB37954682979666FD919D83DF85BA4F4B14D6A77044767539
C0C38F4EF65E5D900353EFC3A7D5BA1EB1F51ADF85A244CF55CE0EC7494D4247
243DFA8385DBC5760B397F0EFEDF9EF7769E0A6E389AD0B2A5D10CD4C41A4009
7EF753FAF0128954373F9718877DA7599DE0AFF6ABB520C27B9B698116A5787F
E211379BBC3E33DF49A031282BFAE588877B2A9A6426F6010B1050C5F50CA931
A8AED0902642383EF313DA6EFC55D3AF10B647078CA66EB88EEA899385122089
2D97DA2F0E5BB1BDD5ABD40D988B018FD18F5ECE08D9A100CC4229A4E33FA93A
0FDB1AE200E2F6C6B899AD9D53871027450BAA1FC67517CD5B69EA896122FDB9
20E721E0DB58AE8034D8C75D758E668485BD05C356D3255479B96DDEE53455F4
1AB052F11C588936C1837380CBC611ED14FB2F017FD1CB7E1E23C1459E378627
F323C6E6F04912979B3850CAACDA744B25D6FDDD4207C80A3636F3B7AC37F415
FD2F8EA734FA949289DAC5813D5C91D4689F7553DE7432E5B553BD7AFC2D8E6F
3071A191FA8947D12382B17FDCEBBC82F61E5EF76E8793195B9D6474F0070FE5
7D16CD12153DE8F377028125088457135DBB27457FB4CAE16197347611DFE63D
A3C7C9266F7ECB5B7E091D1B11EFF73F0B5E7A5748C8AFB555D1E26CCBF43EE9
C02CB6F255587300FD433C3B4D9FF1E96935A959D465B74109BA1843085C27C2
69C751AB2AFE4B15C13C6A0664475C3A9C192169487905DC47D2022934989F37
1A8F30B1B39DA9B1F203A2814A200FFD11E14CC70C954BEAA33A81A5EE27B922
0C89DF8C7471DED4067D1AFB8A49609DCCF844AC7E03278F56A07C3423C5B2B1
4B8D584BA7468DFECCF5BE1B12A00F107E3B1014C01FF888A9B1E40D31C73F5B
4E253538C5E0D0672F042A01EC5CB1BE74CE9522C06896B9E641673A87B47BA7
D4A91ED4903EE143F0FF84E3670B8D1D046FFC2E8400E63C1B8315BF63C3BA9B
849EDD5F620C7E451943A157C7CFE362567ED47BF94B63D67A9113921AAC23AB
1B8F7DDBE6F6DCF9A3C3CED6842C356858594C63EDBA2EEC06B6756F2281E040
0F776034AA7370C867BDF8F8CD40540C3C28B45B30772EE9FFBB8D00718C3430
10FAFA41B507DDED01318BC9A9C8A9E8D714B1A1D6BF89D4CB98136839AAAA92
BE85FE2786437E6FA70BA428073349AF15F2DCF43283BCA59F109E9740BCDE6B
C5813EA8EBDB20FC0C7682845F3E4266B7D327312EFB770916FBAC97E6584C84
9A9BF389B403CD6FF5F8366F9D36FB76A217CD9C3F62414281BCB53CA46A8161
D536C2D0011A2B12B23165BB4DE936CC3A4BF19EA1C5D6C0D79F9DB3B28A9266
CA8402BD985CAB49BB651D6FDE79EA92A7A00FDD42D5701AECD409DBEBF0C9E9
5509BDD99A537F5C974ADEB4C564C26AF25696553753718AE0425FD9EB6664B9
516671F04ADD10C478B7F8D9A562487A9FAD8D2C70C21A4F3ED7F9F55C21A04F
1A6DF8168FA2286D8C7EB897EC741C41A0BDB45D751F6641FDAD6065A36614A6
86D6A7B3543205DFF5A31866735EB1A931953CB0EDF319AB319EA996076E3AD1
F6363E18CEF8715CB464AA160792A95431549FB6A4ED42741F9996D7BB1EC714
A2F30863F354F78FF9D34A41EA24E7A2ACB665959298984C7B4B72564646B091
0BA9E173FD2222DDED8C4BB4813D97384DFAB387977946314C2FD50B1EFABC3D
291F4FDD99EB7C0EB047051BE634D62F6F164085EB045535E44A67A143EB6391
3019CCB8D949E25D7DB43EF32CE21205C9B33BEA2D1B94DAEE18FD20F24BBFB3
A2C968EF269DA1ECC28C2F9B079ED3CF9C315BA95779D124604AA59F92201234
15DE40C492F1036351910FE6B93342626EF81FBFA9AED252C2CAF15D3A748549
B6F6A61F79CC9DA248CA8A674045257BF43591473F853FE3A2A43B7CC317DEEA
02FFC7B4CDCBB6A5CE017AA860B96CA41C168548C5076500FD0985C57E723DE5
5A2ABED9B40D7BE674118BCF391F130DEA693AD05F6FCAAE4BFC1F60C355698E
32DED416EBF582A3D80351CADC60B733E50FA695EA1AB682A056B226DB767392
0A2C426EEF8DA67E650EB7B1DE643531FEA419BBA8067C6D0E964143A0906762
197B8DEA764ECFAE0BC6723E560B0FDAFB34E8AD48A2E4BA5979A58CCC637332
22D0687E1BA843C2E0831CC5C994179AF2BA4B7AA7617E2C8E789C621BD307B6
477A05334A8EFDF778DA38E54F972D6A17B932EFECCDDE3DE2B354F3681BB1B3
E49E42E7B668D99299AAFC1A4965F05C14791FA73964C470E1FA471436D8C6E4
4AC4C5010157D94FC1250822504BFA173CEED4E2DE5B7DA75EC58D886E9D64EA
069C9432AF8F2B50A91B0C7C55571DCD924B0C089E2515829D461CC7AC00155E
932FA3F5B34063E5095402C6368C2AEBE26D3157EE874CCED4EDBDA26B381A13
DEF3C35E4DEC459759D7D3575F6FFCC6B27F94965BBAD1D2156928CFC8EE865A
632AB4A611CAD82809B7204C28F45A55EA03A132AAA54B5AC1B745CA3E8A11FA
F9612B74D2950015F2EACCA793E7888C26EE723E78F3C894D26D13AAE036CEFA
B476721A2E3A65C2C5B0C7A8C8B2206E76CB6598DFD42AA22CFB939A914FB803
C324871E0BCF73B19653C3BCCAFA1AA748409D3C1E1A165DB626D7429709776F
04C4D5E4D04DAEBF5C475C7C3EB2EF7410CA53A9034999638C65F45B0F57D760
0215E8FC2552DB72CE2772DB7D5B3A765D09AEE0F0178E20124CFC1D434822CE
24ED6438F2103F4EEAECD38BB01B2C6F42C4C1B222707A748CC97785174C6E81
A614B95868CFEAD3BDB4FB04FDC4FE2F15947DE72BDE539DC79E2EDC7DDE5151
78FBC21A3BFC4E230375D47F4691E0E9E35436DAAB48FAB07CE7C933BD984EB7
13405D2B3F481244379A40283186D67327CD487B978FD50D9BCA2508355C508E
8C22EEDC232CA6A04E928004BD90C2FCDFB6DD8955D2D3B6FCF5943BF5BEEFF1
F9BF99301CB61CB5FD95EAD945BBE7141CCE4BD29366A97A5D740CCA11DF380F
90656717F2270C0F1D1D5A0C48774E2E3E1308F919F597CB24D48FD50D1EE2A9
FEF854CD6238126A0B323E6E84D554F59DB81033F4F4AEA1BF99F8070976D754
85DC4DC5F3C3D020E853171B0D1612A3DFA5264D6B64371271FCB4A74B2157AD
DE421D5F51D813B577B8741B68891BF8FF9BBB484DDA6371DFFA6222F88F0886
C7F8848E958C6F74CBEFC62A27FAAB38B52465EEE09E12C4482926B22743E5D1
A94A301D3ABD6010E43C4EC19A0D63112FEF67D69CEC2F78116EC8583ABEEB71
D9592AFE1D648C347BD72FF30455B7E6447D19E2611C39EC0DE9AA9AF9629976
79755C4CBD2D05F9A170FC269B792E8CF7A0462248EE95527AA116CF31B971CA
F5DBF65ECCD01FF04E6148A80BB2611AD6460F73243DB763DEDBF476F3516136
578D66103E6455B244B9BF9C400BC802A021411BFB80B334C4BD614EA7496D58
CE8BF62247CB10F893048F37A2FD1E4BCD68D656301406C1FD474D98B7555DAB
FC469D633FE91FC8103AC6DFEA6F007AF4A42C0A08C4DFD62E596AC1DDC11E23
572F8A2F5CAB5CA87E7A6693182B9561E329A3E67F23EFA6DE495C7C9D966924
F124603446F01CF73CEC5B7877077E421392293506C391705D62EEE3CF25BB0C
4EE70CAB7C5DA7C9BCDCFB67F1B66DD991E2E4C0A29284FD2C9A8740851EDC44
2490FAE83FAE3DCCD4447BE0C2D6DE59B1BD629F479924757548799EA068E215
35FA1B41FCC74614129FECD357C3BE8A07B61BA51F5781CAA9A414AEEA78ABC1
7DDD10E2B4D776449896677E02D47DB24D4967158F415484BF9D6A2AF010F8F3
BACF583EFBE1FF3856DF768AFD7C810A269760DFA831CF3CB5D0A73CCC6B41CE
8296FF0C92CA794AFBF04F8BB3B65AFFBD62E1EBC63C182EFEB487A03399B496
9F863BA0A83115E8AED878484FAD3448F4BBFCD65D1EBFCB6494575BE7C27F44
B99EBB6713BB8306E5B5A0947A00F952DBBB63C0DA21C717E348E0BE63120324
CF402F90BED39B54D866320877A767FE000D8A3386EB1E20F1194FD049F28B82
F4C2D73E41CC73C1C9F668931E64C8D467ECE84CF7A8C288F9B22E0AE6685047
D8BE005ED260ED9488E270BAB33AEC2A3A055F6BA3C3700A868E92B4E26D499F
BE545C804154DD343D0FCCA88D299600B0C26ADE2DD3774D903024A13EDE0D58
B50937201CDA9C1EA23BF95C4A3A8932F7D47100FF8A7D4BDE1BC37CE16625CD
FF321ADFD514B2BA1B66E7CFDB8FC93B6A8EE952D196EEFFF2D9E6B8CE8CF9F3
2866ADCA85FACAE68E9C7954B512463A86B1623BD5433F6551DE2AA71475089B
3D2BD411FB9BA4C621F23724D73B1079F7FA07AAFC9BBEBE2E4AC9E2B9D11603
4191A1A804EA935EF390C90783F6DA40C59AE09ED22AE971884911F452C33F94
F3A9165CAEAD2464D8D80FF6C61F4410BE7699FF1E5E942546C8A4CE88818DBD
E72D030D8E884D315F56536F6A8756826B7786F35D21E3098DC9CF8BBE54D707
A866B52B55E06213C9491954D1A8509555EDD6F3AFA7710F49EB3706A4BC08DD
6698AB78D7681FECCBB4BABA1BFF3FCB4D8216D136C4B20B96065574316F2EE8
2417F28EF33242AD35C5B3A99045B99EC805E25F46A0C1D1C281BA23D096EE2A
4B193612337A6D180D9FA91E94F858DAD0662FC9CF4D1A5F32B6E6F0DB26D2A2
BEF33383AA86D27BEBA7169F949B08254A985398CF9DE6AF7875967EE3CA79A7
97C3A4F27AA9924D6616FC860CCAA34024F5669DA02ABCD1BE3963D734D64B01
82A6CFCF064906AF5C9ACA3FD626CC47D247CC610668FF164EFBF2FAB76ABC57
935C81CF7CC61260CF2B227DED699ADDE69F0C644DB1B12A15889917716A5491
0E71FB6278604A400502100D8CDBF2947CE3218574CDAB399479F824738B690E
8189691C1EA942403339023DBC4A50793CC443112BECFDD6E018E867FDA253BF
15E1ADBB05F04614DDA701D1CCCA3404EDE621A85F81C42418F86A00F9E86AD2
055F1A4587DBA063C52E8210D6F5B3C5C23A608558756F8622A8FA6643FCD7F5
5E72948D2DC55AFC5016FB2C4CE14861F1909488B3C1295FB381FFE037D9126B
AEBC8B4C6A7EC8556845CF97062549BF859A34ECDE8AF4FDE1550774A9C670A2
833CC6DCE45D2E4898BBD96830A113AE69DA214B1AD5EB1B5B430AF25A20A0B6
36FFEE11D9F45BCA484AAE98AF60C2AEF608A1119AA13FB6FA40C2B7FFA305CB
793241192FD9C1B01AF5CD5388A0802D80FE1FB499545814BC2B3B2ED508A554
7C4B8B182CBE28D8B46C0FFA3AA93A437BD5C68850DC71A816B0D510076BC298
CB824BE6E3FEDA248248457A91624203BC9932A5AB72BC6AE0FCA66760484CFF
4BA51454712FDB8102D968755E73DF40B4E922D522E2CAF63FA0A8D22AF65683
9B0DBBC50EDC121CA1ABABDCA567BB9D28CB3E5AEC098EFA7599D096FC928471
D2FE294C8173E82B508A73108E3E857C6FC2C1E3CB2BB26E7000AC331BA4ABC5
12DD810F40E9426C8DE97C2E08CC0185E1B5040F60956E929033853C3BCD247C
17947407B92E406D62814013DC8B7D07EA8BCF6B09E1993EEFAA3FCCF263FE48
D2F58612E2E0943E125B1209029AE09E251D74FE3748704DEB2E2B9758FD1D18
BC412B0D1B1410EA26EEB7EEE691453DBCEAACC6A77540CF459337A4767D25AE
29D2578676B7D52AFDD05A75ED3B76613CDBBF70DD34936C6953124D7433EEB4
4C724ED69C8697D06A5246DF0D089BBA43C39DF8A664335F67B9DDE36DBA793E
C77E5A7FC825D34DEB46C4AD0D21BFC3A9A11405B0873D4E92793CCD7B29380E
EC1C415FE398C7CEFD524F132A4B84C65FC4E875136FFD709A15AB5222CF808E
EF614A4179397FBCBC43190EE840144F9F053FC85041782B25B9AD3F9717B8AC
5A4A9ACB17B620DDA2C76AA0DAFE9BBDB18C93484CDC022ABE678A7F2E298A7F
AD967A2EA7DC41B8475B6F39E58816C7A84839C069CFBB069C10AF00358CFFC0
C1779D733F531FF661381DC983DE2858E791FBE5A690808349DB8ECBF43DB214
9627D250AC3F036BF1377D071EA58A0D10AFF07F15A799749C255C27EBF31A30
880B57DB8FDF8A6088AFEF5FD1D7F8363E5D0A84FD8B9B57CB16B5DF771D52B1
8ABD206531B6B4968A465C12CF8259422AD260702C4419860A94D0E467A9832E
FAF798C19D635F88DBBC73AD3C77E7D0EC1C2534CB9A2016B605576CD6872771
4EBCDAB1E069FB552B244921DD51E77A5E23628762E804EDDD045FA702F68652
A4BAEF9590CA0A13E15C370563EA2DC1F5DC10EB0DD59EB53FE4B506FA04FC21
0E9E3DD63F00738AFFF0F2903EFF7EDA73C577BC8C1DEDC1B91AE582EFF2AD2B
9B2D6D097A7C9E12525061EDF9DB348304CE2D53493AEFE8B0CA716456CFCDC2
DE5A13ED881088B6B60682F4DD99DD79DED8693042FC09D14C99A69FCCAE3D3B
AA6C3EFEBAACF1427FE2982572E4CDF1C6E5BA5CBBAAF733DF941BF1D0C36592
4B43BF6CE43C9140AA5F8FE895E4093068661D8BF9F0DA75C9221E3F45BC7A8F
8AF3361EE4B989D3A028431C635C595DD6FC8268C8DABAEDDE41FBF8349AADC2
125874360EED1C72A524A9E19BED13D137DFE3F0185CABE18CC0C89440046421
9578846685909845C2A0BE9CB7DF7AC21D9B88457317ED0F6CF9FF5A2907997E
B6B068D2AF9356F39EC3901F4654DA943F55F75330C1BD055F17E7340B4E1A11
0BF7ED2BBBB9AD9B8AB909430843B101906D59FEA0253535C8A6DD2D07F4B95C
A0B01830315A8BE52B960F67D6D533ECA263D30C85CD8FFA9D4D5A11EBF823F0
CB12B9B888942681DFC2715F371A8AC15F1687C92D7BF00C6F8129E347C6489F
D4FC798AD913A7F0EAA156E3EF0EEA375E66905D49892B70588D708BB273A253
C5266654D1AA1FDD19A24674F7A8D5A62B6009C8031D505D69DBB5F5AD46B06C
B8429E2CEF1DE4692B1E2074B7116C3845EEA16B5282A7375B3C445C604C440A
08A67EE8CC94D5596272F4B60F7E43809709F8E6802082807F46295D607FAC37
F0413E0CD5D53DFB5225C201ADA22CA8D733D3A12A1999ED21D5104F79B84AB2
852CAC651AF16CAC17111963E719BC2BFF4C7363937480B58CD2256C232F8973
C6C5710DB3ABF8562E1D016CFFBCD753899CB8F87ED5B96927C3992D0E2576D9
850BC6F08AC6F1709071BF6A734F6CDD2CDBB4F35F7D6497774B221B16503354
4CC77116BA609E37E9038CEFC41BA172055892C47614A9035E7EBE5EB5D606A3
1F7EEDF4F0298C9AE254619CFD825A5092052D289A653949F11C130F37E27A62
B17E62CF33D2262F538E6D307965D35D68353E1FF42EA4870FE04CECD30821AC
842CFEDCAB3CF67B65D8B53A376CBC741F1FF0C7AE99E54D87C8AE7446DC3A74
512FE0F2FF7860EB06541D232D35EC5F35D5AD07347B69DBC55E6DD283F464E4
8DFA8BC885FAE09A9446DFDF923961AE5C061625F587D00DC33064E82B283AA4
6D876F0DD9AE8C10E283282932A59B9D4E948DAFC6D574A33B9CE67A5639E34F
1BC8C67243B29E58C9B86656C5F1C8B98E225001413A529017E83B411064A150
661B07ED13B44301FB4F90C6FFD8CCEB9BB7623FF9BE5D7D99B31E627EDABFD4
E30CA8F028FCBF0126FC145DF78DF99D9FDD85AEFAAE39B8126C72F915E90592
641FE99B4D86F2CAB2B61F652CC956CA883E95575A8B730A57721EE9D678A759
A85F77BB9E2D9881A50C3765942F2321EB09ED414AA9861BFEDEB1D20D79D212
AAF2C9C5948B3F7A5E6CBCB27417EC27CAFE8BD84BB1AA7F88CB97755F3116CE
5E9F6A439198754DB442931D89A2D64E9CEFFBF0E3792A219D478D94E26C289E
8BB4BE24DEFEE5CEB9A8CCD78C0AA830E7BE21DCE2DF12801358123442F4A15C
F2683E283A2FCB087C045C601038EB4640358CD2D6FCBD70A3B06ABE5A84DCB7
76DC7ED250F98A9D54B9F2AF8132B8E428CCFDA5D6B9B5DDBAB7FA350C8593FB
3FFB4653C9038539930ABF7303F5430A40F35CA40C36D30FA23AE8C9F9526136
0C46E31E91520E8F904FF4D138518DD564140AAB4C93B7DC864E1C505E451409
F058BBFC0301087271EE7DC82527A424073F982C9EC093D7F96770C73499AC0A
FC3AECEFC6A7FECBAAB4B15C12C70309D5E26382850017B6295A2E7DD30C7B3A
DCAB60AD76E6CCA5E6E543778DA682152ED56EB6794BBB90FBF34BBEAF282A69
007BF67B5399E7912CD3F2EAB2010152363BF9CE7D96355721B901A280F2F719
812D43D7807770C927143018447A70FD175DAEEC690CF237B5C9AA6C81744861
352351811FF96B100BB44EE70247FA3B66EC125FDE2F6D290EAF0ACBE760613A
FF8C32B8224C48E5BDC02294CDD1896E3E294BD4A0ADDFF4C3ECD7CC083D7025
2227836371FF838073BD193B932D3B9A492B777AA228E29D1EFBF5767C3738D7
796220D6EF04EA845A6241FF262C6E8C4C3F2D1052EE73890A1A610551A724AB
B6B01BB5BD1FC5191C9F97C7886BE23AA1833D2A527FC19F8695A97E7AB80C1C
AE38C9776C9C34508263844E00D8209A0D7CDED19AF65440A4E3530340F8347D
B6277982BCA979CEE6F9C59B136B17475923D43279785B68529E668CFCB1710F
3599B4A79E15A7E232176C51FAE6DF02EEACF5E0C9F80EC36EECF609047DB5AB
1D11EF4A587E569A48CB4193904B2140CDFEEF80ACA698BB223B6648346DAB2D
48777BA1640465F140E43A7EA149580132082317DD4A19E976C588EB021DF2C5
9722F53286DDB254A6DB1E5706DDC16EB65C37EFF572CA73E4E558E2B016B13D
D10CA06A9190F9D3FE540BA2788C932D6C9C5F29AE7C893FD921D33DC8A53862
B4ED64CD18471A49B62240FEF22F4D82468A334B2DBCC1F6C1B64632B2FDBEC9
FE7C7B0BD419C0E404F9ECD6C57341C2275C644BCFF020E44A3F8143BCB563C8
E997DA7C363799EB647602502B8190281BA5F0ACA49F377C3ED0E15235B3B2C4
3334107F411F9774670A47B8126AE6231E3C48243AA2E95DF0659993DF1C0DE5
51DBEFB89B829BEDB5E3DD60F5433EE1E6728C071FC4AEAEA92180BFD3F7FD1D
7C0305D67A11D28A41208CB957DE3F1C80A5CF302500D3F3428D883D166829B2
2390AD4CFF68E997B6F7BEF0C52DB9469CFC0E9E9A6D795C22E6082FC4949E9D
7C1D19CF976D0581EAAAEB4173E65C1A4DE2C960FC8DD8350723042CB80FA217
A89F4D2F390B78314EDF4F4361872DFA2C65EB44D5CB662BE0B6D6330202E77B
33EC7CF4718DD267EEFF4C0000F2F310CBB537D6DE0462CA73D02FBE832FF1D4
5F6BCEB846908EB9EECF9081DEC277C2C3488C24B6FFB6FC050C642356637C4D
00623F8A7C29ADFBEE0043D4664253B09D52359DF555DFC8C27356F012F46903
9685D8BE9CEABA2B654F062B5BB10DAE3331C3E3C1B56AB328435C9964D41ED7
7C7F601B0E36197BFA431548DC233902D54DA507EDE4290B983A7CFD19B9DB65
CB41D0CE65F05CC6ADE253328F2C21B7CBDECEDA8B484FD4DA121C010A40A2D1
7FA4DB0875E02748AE1A891F2571C84066CE46D16111E58FCCF943E438072C9B
0E5A5B285AEDA6373F36A72083CB73F5E1E9809CE9BEF643C2568A3365B3C154
0A2FAFD4A82578A00844E981B2B41210D530661670AD0B2C4E0EBFE1D6D0CA54
4386D209958E82E39C166F96689652868F9B935DD1741B08DF798524E8DA87AA
538D03912A344B0FB13575A3128991794AD36351F8A8B4A09FC038430EDE5FDD
27935452BCDC35CAA1362E0BA23C6B25B4A98A4551A971DCF562769FC5E4767C
4CE91F8896FF9A59553D82942B1302FD3BADDE29F623EF50C9B12A3574E5A7AF
1258A15ED5674C3AAAC4CAA8344432F60E7327778D7B70BABC5FFD5F430DA7E2
26941D3C4B6C268D82812A9612E5908DDE75628CE253F50B77A9DAA1A0BBF3FC
F0D83E93BF9A9108594816480C7CF84A535127E4D567B1F9CF94C24746C3FDA1
7F2C848A47115838262BED2401104FFE76273D0A94C8C2DE572535D55B1F77CD
AB45C56020D4EDBF4044F0E247D957956045B16131110171D7588606F7AB41B4
29CBF347632CFE037499C0CE93E01EC89F0A6EEB2AC5F91494F51D54FDC55115
DCC0F5B0DD223E235930A60846247C0C8E5287234F09C3F961C2AB3C586AF168
9FE77C7C772DDD390EF466D40B6C02312803610B2F3EF9F080C1730B1A0DEEA5
B45583AD7F4BD5C4C52C626E5DDEC00A1C9E7A650438AF260A41F951A57260CA
E36E35E6CDF1C75CFB93CF0F6B4392FDC6B233E3899664CA77945407382F6991
01240F732E1D50304950D905D6AFB4390B62A3173B522240F0D3AB7438147310
A056B151C15F895BCF076E4B6F85A94D6214459061128AA6951DF21502BD93CF
19040B8171AAF8F654C771BAEA6C706C3433977EC0AC0CB08D9B02969B72542B
EBD5C3CD1CD7D37445D9DC55D0A60768758642CA225C392102C671FE3892C7AF
AA4221539F3C13CB01810FA4CAD10F821F886FB4496EB11CBD14B5555F3E6889
2A4477C2F4EFCB6D11B27F8A1E3C95DDE4CA70E9A40C4952CF9DBFCC96B5155C
7598D6D71114D161E132C41DCC0344ABE68C2A018FAA8C57D30B7F86BA9A0418
46012414226C156D5BA53D2FADADA2872DC3E2C775A9E06C5796FB67E4109D5E
0A6DCDDCB2E2124D53A2D5106DD8D2499CD79E67394AEC64377457821CDB3B15
AA06EF39CAFB085B9D03597AC3B18B05B7D271BEF9B8173A6C4B99B7C865179B
3FAB830E1EAAC293AE37EE0993D38EEEAFA73252996621248D67285AC42033D5
5934F6849598A24909F57F6513B74F9F6C1F90E5FA9079FAA3E2361450C3468C
99A8771958C008DA29E18492BF1903336919542760BE55223C56908D00199B1D
2D941076B1C64D9F5785B8792E114A0B3B5AC5FE262A49649B9FF8C8C49352E9
59A081B2D1D4CEB9E40FFAC6BD2F8303F58AD7669AF0FF20C2C04DFC9F36C825
3C4346DBC11A9D851DA134233C082BC703ED67F8956F3C757799D61A801701C6
D03DF8B740187441B0D4749EDBFB35844F8CF727A382EB7AE26B5C3E7CAED86C
85B5E190C5C8294E49F4B99E7016E5ACC76D12FCB66B4CE90406085978F8EAEE
A93868B81ED58C422A119E8C6BB471DF05580FB2BC843D9690BDE795E40A62C9
EAC215ED0EEB650262CCC5BAD17B2B1AA5E35267223F46AB148E74D8D1B986B2
EBAE55014694972C8E5416030D4076D4C09B167603068010326F551D2B0A1601
D78E215DEBFE216BADAD8CF8DF891E555F0232701FB034E81220EDD744B8D445
4554E52BC8DAF69434CDB5E5E32533B70D1E617E255A4A7A43966ED762BA3002
4ECF9B9E27C2A57C517DE53310C680BCC0C440AC1C83C0BBD182EC25281FB52C
452BDF2419D6F7A11856FD58BE2A16804A4997ADFEE6E00F84F822BF828D7179
DBE603115CBA55BEEEBC718DF9816B69E19F7320CC252A225C03F528601788EE
BDAD19B56392AA3BFD21CAD7AE67DA3476CCE84832BDA1B6BB5244DF4DCD65AB
1DC40FB940FBC00A9912B63DA88B3C465E434C7ADE8D31E5733F52A53D468179
AC6BA242538EC564F080D8F7DDD3113C97DEFFE1AED9B3D93703DA04B616B9ED
A1AFAD0C3FC6A0A62B66FF1976403B8C17B6DB619D0DF878A59E5DABA1CA25FC
1490BDE9F5C90E5734ADD96E296EB6E37995D78FD99C5784B2B7C7C509E9B93B
CC2935CB4CFCEFE6E2B12759D876E93E78E14FD76B97270E30EF0962D9CF3306
707631F5C6139DE66EA86054E2297F50D012229961818A54D0EB5353BE47D53D
B0D8DB88F2B2E8065A14BC7B27B47AB8E9CC40C85CEC9807E21A6FE4C961783E
806D7FEDDC4387DDB2E10EF3FA3985EDC86F7D7951A9CC47F695536EA269D3EE
945D55154AD3030521F5F523CE96CD5CDD217EDCA671E554B36E5C41F964C38F
0919E9E6D97837356B4B1F29D4B0F67C8A86432EB14A370D68355C2007E89333
537459BED79B9B3EACACF471302E87A45A22ED99B04853D66E5A22B56F79FEF1
1EFC9BBB3BAF6B285A4CB0057689E72DE1D7D5770F0F0C513A4A20BA741F9A9E
0FDDD9189DE5C3F2A05C77B99CA0DEB96E4C3F6F3D70BD587BE7BAFA3EAC91AF
D9F990173A5780E71276C60EAB7E25C124964778296D06CBE33CE2740FA4E11B
592680683F40299172AC3A4A3FC398C470159B5621D374878E63B56C35023AFC
EB539771D03912E5A15B5CFE5D573FB3C2D847AEC2EFA16DAB2D427AEEDF4747
73A747CB6B93B3541FC740549496AA726DDD4264C1B79D2B64DD10291FE16F35
C17D22DB84BC93962E33F96CD42386C234A9447B82BD519B639D87A1248A2373
BC8E4A791EB854607D62C59BD0DA9C906402AD877A8237F7EBF5AF326230B80C
ED913EB6E69DEF0DF05C6B221581344C344A2B9834F97C6EE56522D30CF24CA9
F2F6BF055A524058940BCF1CA8D16D9A2D6E64C67325A481E31A42902243B83D
A90CB0F503589D4D806754D9665ED8B8C46ED1B4A763CC46684C252AA2E7CD03
6B3713C5F5795B0CFE3CB852BA8C7FAC395E4C66432B76511D51381A8FE29323
DA6268F8E9C1C78FDDFA7900D3314C6DA654AA4124D577D774A217D4897A2610
17122E02922C91F5C99F9CC06418549D42176DEA4E100EA565CAFFB37751AB5F
9D5F7E685C44F5AFAC1CC00F6CBD8F971B7E2ADA50A6FA842125360BF3DC1144
957CE05D3FCC98CBCF84E39CE3B141286A5994C60855979B402D6DC6796293CB
C9423D966DED4F341D225723A96091CD360A6CE73F714A543CD8FF8D541BB9DC
D345E5C2D0EDEA9FC8304EDFFA803800B5D37525247C5C189C065B91E5D863FE
B468FC7AA2DDBE2E708D27D89164B12BD8B7DA2A4EA25AA159168EBB2C3776B6
4C0436F1F67FCEF0AE35309BF5ED9D8632C4BD136C89169D45718A88BAB74815
F50DFCF371A8C762AF5BD7C49E875699AB0AF954570522335CA4F819DEF0C610
3AAA90690F834C207BC64532FD982D182E86B3CB63C968430895741B98CC3159
73EC1169316CD9FEE8F22111CC5C1BDD1347412F12762E7C47AF0F39883F6536
C3E621D99D18CE42EE5A34F722C79C6E238795A66FE9C57B4981A6CEDCECFD56
6DDCD25F0340914BBA7C438FE5130439DD96BAC786787D23A2DCB8CBCB49FD9F
FD260F56CD6070B916527529102255AD36B443B92E158AF667638543A1C25BD4
6A6A372BD7350A85275A7DA9E0E1336F13F8526C6BBFF2B1DB766F086247050A
0D7757A4BC7C0380ABEFDBC42371036E62B396A9284A1DAB3BB85A734B583B3E
2E79609CAC41E0B9A879453320DCE8EDE7ED1918294062582DFB8EBBB450DE4E
919ACD596A9D502B2FCBF9DC15B995D2B712676A654F6E978CB8E88E1DDFB252
FF9ED5F0D2EBB744E1F71AD2DBE14FE9EE3D83B7A977BB187362FBBE662AEC9A
9E4E65630EE03681A62471A1C035932B6545FA537AD8E2B830669F8630FB5570
9D85C29E7014A84F592D728EE094B48AE11662FFD3D82CDC8C6B8E693CA7828D
47B8E55F731368F373A67893FEE2BCE051279788C2B4720A60DA0196DD4B0E8A
EB23739AF92B579720B119F33B243A5C325700D9B26E3550CFE92EB1ADB8E291
B9245845BFA49E73E527E9A6488AB074BA7E1908A831102985807117D1908D95
8AD0EFBD5C6CBE684E8993B9C489177F144E5291FA4017E674E4E3F6B8002890
F8CC804FBEB58CAA7FD01A9E4F3A63641E03D2B5D851BEEC467C57D264D4FAF4
90734DC0750B3E204D6FF38C1F6ECCD55EBA6B2A7FFBC00A9912B63DA88B3C46
5E434C7ADE82159600BA27005CD6FDE60CC49B767DD3BF6BA86CC363E59CB8C4
E12D9F9E97E5DBAA2871665E9B2C0C883202672F5AFDBEB9631776656663828A
F4AFADF09D8FCC0E2A0A080F0782EA3B1142C76B364D2D85AF83BDA04D5AE215
C08D45B0926739D960D4614B51D997DA5811CD4C306CC7E6EB24B1CE1E87CAB6
B6187D2ED0CC5BB2D00DC84E5ECD451DF3F6C5D12CB95D3DC2178422A46CA543
94A2706528524A9FA3EF41B38E2DC4F1D8AE32B1AF8F93F463F546AA676CDA52
2409846E8C52358CF3EFBD54994FCB7232023DFC1D7D4C4FAF55E151C39FEF8B
47E94188AEDB4BB096DE59622A2EF791B46312F7CB19B8ED7566C4017673C78E
33FB53B8081AB6EC8060C4CB18381C7CB67C666E254938BF6A44706AFC1CC092
741BA7F1AEFCCF420622EB34B4E3DD2D6BD77D42D4F1646CD216B101A06AFC00
46335F97A2FF20EA44F794C1DFD6B10C5B520C3DA98D5F395ABF21E83E25944B
F6B17546BAC49FF8E37A06EDE5C5A6EA04FCECBBE13660D5360139F9BF2C145D
BB7A0CFCECE8AA6845B803651CDE2B427017F19CCCF679A44CB4BA96B481982C
59847B9DD51F01A6607245209973E0142B0C866367FD92E407301632F4EE2F2D
00893A100BEC19E13A6511D4EA600B1ADC4C3743EE457183CBE6414249A00134
B04D9557145C824496BCAE8043C98684CA1AC7ABCCE6CF63DE924E16D4177B30
2A71A39F28909744DD2A0E854D72C2587B6CAD29EC5034790BD03AF71BAE6A93
0CD02B6C4D07D6D0998EA1832C6B1FD883EC88EBC3CBB32CD81C40D668DEAD32
B00EFA2C916075E359A767C5998E4111E51EAAC692D9C73E06BDF4641DB10483
4D51B17377A1476D0A18CBAC14EA102EA9799995283011B2841B570B04076125
E354CF232BCC13CBF06EDF7DF34E2F4AE56F0EB9FC26F578BDBB96DA1BE65EBB
4F6F2AC4F4427F9368C494213BEE09B227095174DBF8EAF870394215800342A2
EE283F816F872A362A1E8F235C230C4FCC24B9F56169F52ACEA06446059C93AB
12E3198419CFDB3DD2A0C0ED762C78D170D3A5353E9028F3450850061B7FC4CA
BE0F7457B8626C54A1CA53004F56D3E307706B18DDEF8FE7E66E2848EE966D53
F805FA5E6F887D2B2F3F599FA7A6FE0DD1BC6F0228BDBA5EF8A1BCA196798F6C
60541F5CAD58FD5310DE1420C3040DB419F6CBA3C08297FDBA7C464034283055
4EE3A75E2BF34E802881CC85FDA9A48843F86750C63AFE6E89218E40C4CB3CFC
C5AC3C2794CA348FF578A21DC307F6FBEA04C1F3CEFA220C6017AB44C97C9190
AEC5FD1D7727BCC75BDF0BE69A6A0FBDFC00F41B50AC44E03DF7E0DE015F36C3
0D6A4F9EDABA849122436C3DB66F146FFACFCCF9805626158E0C0B204213587F
53FCFDEC18E9E1BF3011EE34B5A6C8277CDB8657B37C59CBA9923FB28948A1E8
F744F1320E2F1C1E68009B0B03F1B45EEDAC1D59768A9370B709EF4FA80542D5
0107820BFD68734C5FC3B010B410073757BEBAFEE27320B92301A8B784472DDD
6D78BED5D0343A30E2B3D0F0AA65176117C0D3DF67F287173FB520C0DC4AD685

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: wasy10
%!PS-AdobeFont-1.0: wasy10 001.000
%%CreationDate: Sun Mar 22 11:13:35 1998
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.002) readonly def
/Copyright (Metafont original (c) 1992 Ronald Waldi, Metafont curve conversion by Metafog (c) 1995 Richard Kinch.) readonly def
/Notice (Copyright 1998 Taco Hoekwater) readonly def
/FullName (wasy10) readonly def
/FamilyName (wasy10) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /wasy10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 52 /XBox put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox {-23 -1667 1720 881} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB02CB1AAE
36F1D7B67C605A37687A9C3F7067F07673039D1E3E1F5D9B09E6A389A55EBF12
06E72531469F768EDBC4DCCA572BD608C4BA8F7EC3E5BC61C6D949C94A843E69
0622F0AAEBF5CB25A2395DFF6342106C198751CF0B33691FC18800254AC54C04
02494A0E3670008E8BA57A3CD823BF47494F2EF9244421A8A0AED84D153D7201
BB12EE9478DF00CA573F64C2474817FF401EE94BACCA8AFC16E776665C3E1E31
89AEEC906A2B9F8974BEA7160C33F0AE7FB04B2666A5B16659D6DF66A688D80A
B531D9F866F21F15D55C6FE75A8787091359698E434EF9C129EED0427EB96787
B3F25C530E3664725C63D4C5DFF9D05CD13619FC41A001275A78C58F85FC7C4A
911CC31CB426231473202A698E5715B032D2206BB361EFCBFE3E32BC0C8D9BC1
353AAEC62EE632FC8FFFDCF6E7D928F562F689406CA00C11C7EAA723B62FFD2F
5F6343AF494085662CE2CE880B04F5589396EAAA8823DBCDE56D868B9E66BB8F
10EA91AF37D76A1BF27E69C2A2ED1D8B25434C0F205313ECB8A6E039093FFB32
983346BEC569B175529DAAD1FFEC1A9302918FC947C390A86C061AE0F6522D79
2D4FE06AE4FABA59F225D7ECE2EECD4BA1359DB18F8957F551C5D6F037F18545
CC6D03EB2DCCCFA294492ED72A737588457E5B18FA4CA0F6D6D8963CA35DFEDF
31A684FC0388D416D7BF6CD9837AD8692F284F24B80CF9F24DB10DAD0C4198BC
2D2A52D9F75CF6C52C7AE0D8D4598DB750E9CC97D0FD31EE8C598A2FF3745694
29DA808141AF4D8F8AA36D7DDCC3457D5E082B2BDF7EE060296721D44B092E70
3607B2335488925E41B22D659C8F0FFEE19A7C19547A147DB851262E47E9C4FB
0A8364BCBC1C77E29A1183EF185EF35B9A5B13170730ED52D5C52CCB460E7D37
F4F37F772794BEA0DA201C99C52F8AC2E4CE7FF33F6ACB796E55BA2372E3B035
52C4F57AB5C0BF828DC7E5A8F8F00ACE0120B99667816FAF5D736BCEBF7D45A5
79C9B5EAA32C9B672D764D2F51B2393ADC71A36AC0D5CA76F3F571D50CB4C1D7
CA77149B8F0C98198919DC43890A7D49B0A6C7268E399C6C68B6ACC0D1E9F5B2
931BAF9EEEA6ED985835323E85D72C6A607A99212BA2DDD24D57809EDE36890C
F8121121306593CBADA65AD9EDED7740C9A2F402E3908B54CB4AED249AE575AF
E64C76BA802490ABB489275E5A3F2B926955B0D961A0B9B3AE205C074AA695C8
68FC2F6997531FC328B8FC65BB06C17B212C8C06D5127A14D7989D24912D1CA2
1FF37457E65829B6E1C65A09C1A101047DF20ABCD57E067A7298091C88C4B587
84409C67D00F7D95FFA0D125FB938B5762D912E1C0E116AA0593B1231FDF3BB1
498BA3D20DF13C7EC6D40091B789C9FB7CC872BB73E6B9D4ED8A555CA31581CA
0F057B10C7A8CE1D7CDD4FE2D5332FC533158B8CE6CD3E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LMMathSymbols8-Regular
%!PS-AdobeFont-1.0: LMMathSymbols8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathSymbols8-Regular known{/LMMathSymbols8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols8-Regular)readonly def
/FamilyName(LMMathSymbols8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathSymbols8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-30 -955 1185 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F035757560E05960E2C327020FEAE317
24C484AC0CD3C1AB9CF35516622A022D6CB83DEB8126DF04762C901617B35492
98158049D5C65DE86143B7F36D36233A115C36DF60D3C55816B2B0B341102AF0
90D7D4E00A7611262CCD366F870F0EE8175688261513076B608C7E160A9A79BD
2B66E2E2A89CBF6D1703854915ABEAFA09718FE338924B5AF1FBF1209786AEB0
0026C38A2C7E208E6C306BAAF037DFB0F3297EE1ABBA65247CF72D0F78A9BC24
038966CE124B94487282B69D6BC0B5E17441DA55415B5369E451E2B0D705FCAF
3AAC6DBEBB8AB0313C4C201F851DB96CA9EB49357C3C1AB73F0CA2110C994680
5AC8F0D760C03F71C92CEC2E1A3AB84813D389BEFE7E0C28FC76FCA70704BC4D
159EE8B490B95CB09DD01A4122A686AFB8B9C69381C8C303F9A3B695238C3BB4
CB44B3BBE50E2BAE63796BB51D945469BB75C69F7A758180B77CAAD2CFD5951A
23580A3D45083C8368543DD37AB49705B939804C12D4BDFA730845F7E42A6C9A
B3F0A376F44DC297393B85E8A18C45C99260BD499DE599CC0D76EBE4AA7D70AB
348FA87CA9A1000814C4FA99B4EBC35A0298AA29563B030707F3EAD9FFF7BFB8
3B347C4A00BFB392E79B79F413E67A73FBB006EBA896A65CB21BE940A0940640
34E08FF806A114ADD3FD42BB394F76CC77DD869C46DEEE20839C9A2FF73B840B
0ACF238D333719F5947DD4C39B8E3F070EEDDA1A39D526319828FA9F47F03D8A
245D8E215B37959566D26DD98185223E4FEF01676650EB4E26C0A425E6C23C50
4BA94BC88E08614769C017F6D4F14C52D7189D4AF8CDA367D8B04CA8D3F2307C
0A7A179419A80695912F456637F539123745CA8E696E250E0BA6B7C6277394E5
98A8799C29B6272613C152B0CAB05F3C7795791EC9AF2BDD416861A3D13FA858
BCB6ACF5BDE40E5DFBC1A171A7280E8FF4AC0D4C8A2199E9E2BAB5CB9131A76D
EAC166A7C449A549EA5111F1750CA2C6E1EC6F00CB6C62BA52D17FC66E06ACC9
1E6B858F9393AF9AA5E69F799E01D301B647DA57225C2920E3BCEE9D09CA5C60
F22B07F24A26DD8F4D6F9C78BFAA8D12A21531E713B80CD03A5FF4F3BBA2AD82
3BEF7DA8C97C30F1452006AA3B1A168483F6EDC4089ED02E567923AE6DBBCCA4
8C246A080448200C2A29C34AE6255BC79B73AE14B980A7C357681BB0962894CB
DA32FF2B70B21AF4D158E0F74652684A7150D0967F83E13EBBAB33588541AEEC
0DE8C53851845A44FFB46A93CEE3E8A0263882542F7F103D13C367EA8E1ABFAF
6486A9DBF6668550BE7858F5790BC87C66492C0FD34DB08EDF842E1AF58A09B0
85A9B7FA402029FE2439769D67DEBDC8AD8C861E90E5322951A2904FD702766B
36916DBA8F9C96141BBF4788FA435556B2B4E1B37DE4506ACC4224CFC00A8F83
33941A050B51B9508758F4EB2DC074D799F5116296B8822ADD743A043F9A6426
88D10767A9F99A072BD4C88CB579B34687BA4953B96DBA29F33211B12A0215F7
5F2F873E5074A7D593DAD0EDD97270FB9A87BE870321A49958B10E32850F0148
68E0A1D795937E61D4556BCDFB7F4DA63A884F9B4B07801D30B1357C3432D6D4
7B72B7D6040410C194EE5124ADFD7A40914BF569EA1F9CA8C8897E839D262395
5EDB3E97C591A3A5927DAC229EEE864B8C0F79ADBF88C0E6C41CC70D9010F07C
1CF9C05960E34FABB6C5DA4D789E39F35FE01F0B22BD9C63B3098457716D6B22
5EFCD0A960F3A2319252C7A0F73A4770E056209C14D721A714D713D5F2BFAB32
EBF815DDDE792B2556A87C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFB8DD9B92CCD508A09171BC12C8ACA32FECEB20
7CAA1C2C81ED075E3EA7E712D95FC612CF97F3402658E90924C75CA278243C52
D4E02E8224F197E555143D563819EB1ADD2248C18E02E18FE3DCF624E37ED993
3C7DAB05959E694040B7EF5F92D80AEAC2CF58EC01BD61D7CB962C4EA678C5C0
62593DE423E11AF90918CFC6E1E8F9DA428296FF0C92CA794AFBE2067C46264E
EEB0AB0FBF2EDA1A8420EF654A1D4E0A295D1DFECBE39D9FF712C85C748311C9
CB8695716F72FD4F80E77DFD7E01E9FB8CB1F2B5971940EE4E7B14727B086F27
E43E6E3EA6EF0DE68E17C9C0F050085274ADB56BAAF193211E48D1B82FE44A59
2A9F5FB13EACEB54AA027C1B87380F9EEF9D500DC327702B132335FF288ADF62
578F30CDCCCF826E4C4CB57B5D5B537BD2FF89086BD0C4CAE557ED66306DF3F5
BA9D1007C869E8594D4138161162682A719FFCB1A982A5CE8765E2681E64B8D8
4A7CD7504E58CB81D0EF03A3EEA97D43741F54987AD65FA54A1BD682F7EFED16
D35D034F1AA5CD4EB628353F1FFEBD0CEB905F10C183245F1B733C17D3B854D5
3BA686CF4088BC6C0FADF9A6C05BE3499567E930F710682B8954108AB7B126D8
255F1A0F1BD08158F94077D191F62DD73838E0CDBC99204AA6AD1309BC5668A2
A524C6D1C68B4E416B248A6FE29A67DCF4E1CBFCE603260A277AEB7F75627333
3E84F341637A1BDB292EADD055C97A12CF0B915E39263AA9F03B21C1F45C87C2
CCB12B59066B6DA2CA24E020A0FDDCC0498D74594AE3ACB0EB4CE7727EA32222
07E864C7F39773638E3BD2FDDA11C79177AD0A23CFB7F631E00CC979AD410F81
3119C0543E091E4820C12FE47E3154789E02FE363C319139350F014FE8A785A3
F66FFAB8D8C9E7E26E49BE5FE558491D1A57B150A5B386F7ECCC0EE8E31695A3
36BCC7BB9F7FB26DA3444238CC33E2791CABC1DCD0BFC3372E1DE72D93AFD1C8
E2635A5E428AB33E24E81346D13A9377EBEFC6206D372675CF43235722B50C78
8C4A02867C68BD8E5FE9A45653BBAF2A5DCA560DB5BEE7054FB8B0A13AB598BB
C481A3240450D1453A1CC1054A06B962B7E28A73BE0B2713DFD32DEABA293EEE
AAA8C0409564BB1ECD1249588C18D01D8AD4E0F0032FD811ADF35B869BB210E4
4A57178893AF229268DC5375F01AB676E600823FEC28C30D2208A868EC0D01B1
4845736F9DEE02D06634547729442ECDC50C90989CC881C3D8E85B76FBB10040
F0DADEE5ACBDBB43307A30FDEEE5F77E621B130E4B824CE23100BC08DC65BDA3
46307E3BD497D7F1E2F51B557FEB6AA32E84F5E55E5C12A81B73F370431F3842
A1B0CAFD4ECE7F0DC8E2A6D644CA8735A4E96445BA9CEBB627718F858DC051E4
3963ACD7E7868CAA4488EE815D40E28CA54C83221810546F0009F98531353C9A
8EBFE7DB9C9A120C2A4E2FED0E63F90B8DF65026707BD39B489E54425A5ED877
73C6B3A8ABC8ABB13ECC3B249F1878A8F76D59596C63BCB936321589906AB242
14F3C046A1F210FE287A8192CBA7D2A89BBE7A7B2DB6B1E19224F04262D6403E
3B41787E1449587E28093E66A9837BB94195E3A4A5C17DE6823755F59BB9E3A0
52F69C7808FB657D9270933D8B167D2575CF146336BB1C76735BE5CAAAEDBE98
C69F89E7E71474CFC7515F73F86727442EC24D46F92C99498946CAB6DED8F5DF
0540063DEC2EF3F83AAAA3F4F68A8E892C3D0529A466C6A310A6101223949B01
79CF7DE6B550657C91BF3116EE7F85B0178B3227810D99B48361133B54A6DFDC
872745DD45766283944D7293D6FB1B42BCDDF2F241AB267897BFABA39D0F2725
E0DBA7C8CE305DE7C1B59DC2184872FB99578B809358856E4E99B28E138E2DB5
85CDCCFBF2B46F01012CC94E2FB30C1E4411918E892630F2AD07EFF1919E9BA9
0194E24A69649F0DFD0046D2EED7AF90313E70594EB5C354023BFA07912408F1
72E39AFA29111A71BCFDDA20BCD6006B0309EF09261B7AE1C67BDE0D385104C7
C0730BEF94DF3D9BB2161C7346FAB11805152716480C0984BA13A8433ADBD629
229C446AF84A690F56A09A84EBB1CED5515C36F2798A89689BED966ADC9AC306
D01B6E24DBB2CFFBEF205FC921305B45B1B8FFDE2A09CF6301F485C8B7DC2E56
82DCE3042DC9767C407C0DB4D0FD1A4881A34FA0EEE7810D69F2428045CD609E
23CE37791362950FB435D1899A47E6E69EDB17BC08CA1B092D4F20BE1AA6BC4A
9DEAAB1B74EEB7B908245CDDB7A093C1AA307DECFFE53A1FE54984DB1360E320
862F2CA6E0258507C6D3DC1DB94102FB88F631211557D3A4F79A8E5FDE69B1F8
4E9FB2EDBFB4B8853524F58D4E1EB98EEBEF1B6C2D330B1CFC47ADE896255DE1
FFA8CC1A09D26342E89B9A39149E124C564C5251F613393060892D5A51B78BEB
3E44B78C50316C61B6FE484CE582EB7FBDC53D9427FE267051934E366F7C7B2C
ABD2C65921B5520C6F70C1B6E7AF8E11BA4798C1DD2EB7D4F962028061B71099
8E5EAE433D8A82CFB15547B339AF376E9341FEB9433AF21E8D84C50F75043419
1ECF16684180B65D9CD4C8CDC57A0BBC0598B3AB03652A6AA459894E119B5356
CED765F73F6935478D5133B9E761430A39CAB0DC109B02A80626A9ACD7856ECE
4D6569F5D1D918A30005C31F177816336B74AF8B9931BEC0CAC75380C714BFB1
BC100B05D19D7BCFB18CDAFB0310935E6C7EAC6B9A8134C4E8F4969C9268F7A2
C306146CEC5039310EF1F4ACEA1A40014BA27BD58490D24B7885E4084932266C
621A42B8A3139CE953DFA9687BC439A31644BF123DA78DD615C4287ED7DD43B6
79CAF0EB2F9F428C431683A41C2C61A429E3DC0D87D76AB6294CF8CC9918A6A4
6873A1769ACCF25B59CB4365AC451FE1D956E1254970C706438805E25284C7CA
AE679F2B7C58BE9909CBFCD273EF5617183CFA64757627D2D567877FDDED97FD
7C9E73DE4D6D4ED370EFAAB4E52F30E55B902ACC35DE87E70DE8EDFE7D803CB9
B4F8D58998C2ED6B93CF62F8E991B754899CE46B900DC93C5A58EADB30BCFFA3
A71EF23D13FDAFE72642854A3340E64896CC6DEA0F7E3AF4C39EE4E68AA31889
A372F02266FE65ABCDAA308258FCDDD13DCBB18E462B56F956B94CE97E870122
A0A46CCFD6B4158BE06C768C73F0377CE3F21E030748189C553B9F62C83765B0
149330C96EC3496F9F2F9B289307D7E0C33BCB7023200FC3221F12B5FDE01011
87BBF9960E56CAA899438C90156BBF2B14596F131B71830D84172E7CD7C05B25
85A53C7CB0DA5729FD6CA218A1CB03FCB945FC24376A45F2DE0C21378769921A
72E46589CC08EA87EECFDF36B819B07306C448777163A723A9E71F504DA5D447
AFE8CFDBD88089FA4802F449B477BE528C3667F06EC5479B0824B87C47EEAF1A
0A23941B8257A2A5EC3F63FD62DD09890F4DF33AA1E70376A9CE8E4B6C4211CB
FCF9709AA29144F3A40001AB98BE816619AC543753969AC5B540ED39E51F5869
98342686761A7C070EA75140331D7A0DD5731F0E395A6CB0412028C2FABE2E9D
C3B57F412A5CC05FA7599948E6B8B50BCF16EF9825F6B20090E4D6280C528375
4EBCB42B38B7ED6634AFE0B2C249699E212509817638845B5604BB526053ACC5
C0FF6206B2953C9350E57657B374600DA75B6B271326A2E7B313EB4598DD7FEA
4A5D95437CBA46D85A5EAD76FEA956126B3EEC337FF78D906699CB9CD7B4012C
474EB33D12DFABB3BF569214525DB9B2D4B34136FDF936F96FFC813FE16DA5F7
9B0F2B3110B1F8C90170E014FE8F31A5FD35CB74EF0FA13C6DA74D7264618562
DABD7DB8E7F480D0521581902848649AD3EBE39E618667C59EA499B7081A0844
B6DC10555D27819E6CAA1CE453A7A68EF1A3EB2178BBF9B9BEA9DEC679DC10D9
E3553DE260FFD590BEDC71CA9AD4AC12B09E86D933AF49B4CB901556E63BD639
1B3C3C3C80C46745E1CA7983B9E80168018E04A84AB47C854C73FC58A393974C
1AFF488EBB29B293905951355C4D4A4F65BF1A72956515750DED0B87A8D3282C
72C634347874775B6F29EB873134F6BCC2EBBD3703E9619F762D64128A18C957
22E6C0DA907A17868AACF3229C176FC26BFBE255AD62737D234986AFF04FF03C
1DB4D1F2D9F60CF2E4DC5DAF88EF3517A2D91CCCBBB8753F92B3E0CDA5D26523
B84CEE3A0429655F8F25C89E65074A52CC6047885F4105DD62F1FB8CC7A4CFE3
22EBEEE15E3395B062B933EB55FA589373CE26568F78981B480F688646A5C8C5
63B8FAAF19A1F6166685C3FDC27532C931AC8B86E81FB0223686074ED596FA6A
922B662575F23B53B7C6B245AFE90258E743F284E22E30D2B418CAE285AA38F9
FB436D39371781DF4FAAD1CFF3BFEAA81F5D11DD76BADDD8122A4AA44B9F863A
DF8127F1FC35DB9CD34EBC684818AB259FFC3C7CE34C9DAEE69D70D010C70540
3B359BDAA5B9ADD10F6F7F2C19136157C6D83B33313266F1BA8B9E065A0C831A
47D767D4558876E85ABB0B8396FEE0C3327CFFEE23D0D7C24466E5410DD289DF
78C335D2BE90B5C581D536596D97F1F463EDD0A9C0118790E5780C0AC27A05B6
4DB13A023A3E5225E0377ED38749AE1F7714AE5E1D649A3AFCBBF060F416C0B7
47EC5BA54AA743154084CCBBC2A47037DDA09D9601412F731039746C1224A29D
191D9E221C06A7EF3CAD09AD5ADE65A51B6A915CA708D66C3EA93A0BE63CDF0C
D9A4546C9325291D11D02F4C2284918795A5B6E6CAA4CDA0371D452F65EC9097
657F51E83FCC22A30D649B80CEFD9F6FDD51AD33D3DB732FF26650A90912822F
9E77D8AC13393AA1B04DEDDF6C37B2D1DE50258300B9BB455AA872810C7948B1
EC866883E78F23DC9DFF60701F4F7C66B61198F8066DD493031D1A5EF91231B4
470B5A034CBA00791EE592FB4DAB538C280A8047F6290E265C8A88331305E67B
EEEA9A03950593605886E125446E5CCB325BF943C3D7F32D49651F5744A27DCE
6004208003A95DA1371E2EE456CC692DF7B71EAEFA2ED09E82012484AF7649C3
FA87A3AE44D93FB7A0D1A7A08A419AFFF7DF7065992B084D567645EE4D2FC29A
888E5E51A42920248E4BF77A7876799B1FD856AAB0EA73DCCBF7FB5979EF5F01
2CAF413DABCB3290E29A0CEE18F02BF93ACF5E651F75F1C47F2699BD0DA86F7C
5E18E1895ACE4B125EF346F608ECCD4DCDCD47DD7717EBC78AE3DDEAB5333174
18A8E967F635ADA03D2EFF80D463A521EB069C2B6271FD736442AF38A52EB58A
59D7A62D97171B45D2A6AFFB7E617C9265B466295CF70CB228FB295850D653FC
3FA379FB4FA0AD9F83269A99D550366B880AF05F913C074EEAEBE390144ECA2E
ABD1ED2BB6C54FAA70C9BA6C6794E3AC06D503EE876C915252EA75E6FA113380
E4E2A0CEA310D96BDFD883642BDB55525358ADA70C5ED0923B060EA6EEA5B735
D0D62E41842C07B79C0E8DC56C55084EE590D2BD58FD9784BCDCC3D498B69CD1
D7C24466E5410DD289DF78C335D2BE90B5C581D53AAA27CB98A914D22E25B41F
E35179D5E020790534D6BA1670B6783FA8DBA0D35DABEB8E162D2EA2ABCB6CC8
DF8E44430383881E5ED0F7F184DBAA9A394D0E08138E5B80D224D4E8FD6F8BD3
255103D823B86B712CD58FC2FF2C9B963C235A59BC191B84B9B6A2D87B85F21F
39F33AD118513BBA722CA46E21F697AFBFEE1989A09F9F9F7F29C1E0C0F28E3C
C64BB4933D3AECC99FEC69C3B047482C0D6F22E851DFDF1315C0679C0906D77A
B2144E810FFE3A942963C9B2584CE14922AAA9E3456AD60EAA44317BAA8D81C7
33BA78C0DEB8D1A2C9BF7CFAF3F6C87EFC09B43D790D3E80AE0EA0AEE1984C59
0DB7EE142C2444A3F4DFAB0C651407A58102F825D9534F2C1768DE55DD354014
B4AD13F8F95AB9B462F7A5950046C9C4A8CFF3CC3738D894770AD27F2BAA1A8A
C49D55D311D7B27E77C664BA4DA424125D1735CDCF888572C3D4E2F0230BB1FD
DAD562E249FC2F1392F7F378BB1754A2E80DE0D9FB55FAFEE3CCC1C812E9FAC3
31FD70975E3A0C72D37207D8A6034994F5A338B85C4ADD0A28C7A8FB765C4A04
DDCD6E0E7854CB47132679FBABF1DF31D16F8FA295CB56D75A836ED366963BD5
7A5FDDECE89ACF7D2EAABC3C655C247E6AA58C7B3A65D90C4598DE6DF2AA81DF
1E7AD672C058BC13013E94942CDCF8E20DEC5CD4696759CC337B6514AEED350F
45EB766C4ADF2EBF18F155CF537A97C212FB23022E75D57D24147D284196D0A5
17320294E3C7A3A1A1BE80ED8FF0A9C509420006D2229CC525B2E21332AF97ED
907BC5FAFBAAE31FCE73C77BFD275F6CD038A6DB9EC1FB4AA5AF31A16FC07D58
F6AD35B345BFA1CF7B0E9545795A6E62188B643BE9FFFFF69BF0E7C694E07807
E04F51013AA2E2215C03ADCA175FED41854EBA64EA1BFCA7B9ADFF7F4ACC6DBE
671126FE078F52AB62DB59A9B9AD1018F245F33A42CF224F327CCEB361EF2E2B
DD7DB751EC8C146E17EAAFC942F80C2313118CD80744B1160919C81067D75442
072E34982759C289C8F929334930B4AAC76A132C32DCBECD227134E7F747AEFB
6809685156270A536E5DC0236DA24612993121152E7E72353B4E4A19BC80F638
158DDC1B6DDD5CFAA56386D2232E51B3AA708541C4671738A1E0CC16CC401640
5B0F10C340F24A30B1C3E6AD87C7D4424486F4D2504B044E802A8B30DF26FC38
1D8D871D0D96566F0E4910D17124056A1F0AD7E9C1807ADA0EE65BF63372B918
2E8CE99142953DBEE0C0104B1292A1F83517BC28709D3864CA389D6CD1041740
7AC6A0DDA1E77D37AC83F0991A4EB1258E47A4E04D0DC15BA4F0C1D12F27F5DE
5E37A07F94A89276B909954466C7032C6FD3DE6ADE20EBA3FA90A309230B93A5
B74FF64283F15EAA51DF4C74CBB662283EA2C98CCAA3F64D2E64AB21C48203C6
08CCC92CFF820CBFE005BB5D4B098F3CC567E9DA9952F5F95048B505DD5C1BAD
049517C3A95D471EAE9D83E664D7CEF78D51D427D2A9126B689964B87ECC23E8
3F19351612FB0B1E70D91934375C410CFB8AC6C99D8665CD7E1CF880F99229AF
C16232CEBA6D7B35526797A8C94EA0723B3062409182103B078B6D4120137695
A8BE5DEC8383E556D1067F2D10E43F158978ABC35805453F84CC5EEC991A5CDC
8C33DBF86934B5368C099B59A7114410C608C749D1B7D493E67EBD9DF99EED9A
ABA70EBC005B7E807A854FD70F27639BAF68211DD20AF3D34A3498F21B00999A
CC476DBE2C5E7F404E59340CA51DBFEADFF2D6856FA15A36EEA17FDFF093D02F
B419CDEAA8924DD923B74F252664C67CEF45743658D8D43AF001ACCC0284EE83
D6B900DDC00EEB5E881FFE9B414C45B06FBC491330279C671334298D0621D516
6AC107F3AA081661CB91E004CEE7220A24C71BBAC196A23123BB399318B4D2A8
36F88D24D6FE3898D6D1C76D8F8E2C75D7460CE135C4E1D0349033D576ACDFF8
68AD600D610E32BDC63998EFFBD8BB34D2423CC6282C145F3F0029A07BA8C929
7BF8B0B016EDCAF80B9043EB61A3BA3E78F64ECDDADF68975D97F94EA8A698A5
CA287EBBD5193878AF0D3EE755BD5958FD3632E670306CAC950F8A1F66D4720D
DBEDC0E0857B057D019BB4C3C1C751481ED7C692CF08BD1EA6C5B30BE280953F
B8FFF50082E28A8D951207D7C494A7B2784E050A11FE8B1CC619F387E700EED9
D0956AE651C28A61DEDA9859E01101F5604685676CFFF64C9F2630CABF2F83D1
37D226BD5EF6EE8EE1EDC4194F1012D8BB958B6940681AEA50C7C8964FB0F377
23C0C4BFA4DFE3FD4AE99F5A8595EA873728E2C8B6D05AA6861E3ABED84D6761
ACEDE777F2D3BBF85031E42B976BF76149CEE298FA46B57981087E31FA46D2C1
91A16ED86E07D8E45FB322FD0B3D25692D2A0E7C4DB93BAC55016AE065951347
39401B0D8ACDA770B340277CE3950462318057F893A50B1BE89222348D7F09A7
FB9144E9162A946DFAAD95EE0B346EBBB899F1F37A0F89D4DAC9B7B0F3348A1A
FAAE48BE88E0E16B8E376035D6D75C10FB83D7B0EB9DCE189314BFC6A128924F
34C083E289918FCC37040DD4771C1218921FD978D54413617494E68E34391E25
42903355658BD278E67696161CDE14626D101B4E117C63F2E7A60627DC40CB9A
B1634701AD9AEAF5D11607A783874D716DC73DB1CBA45D33E0076E992C7DACD8
026D7F4C5AC1E5D796C0E5A79C61B5BF586A0FFF6BD2983A840B68D656FC1584
2D694DFBC7D7800CBAA90F3BF0022E66A54BE1059BD5D224B674AB4D2AD930F7
F724A305C4DB7BBE9E3E9D166FE9AF6147A8BC97C6834B365C39F4F5C39DC16D
F38ED4E2751BA59C0E99173A4757421323238CD6EC545ACBB56D8F72415A1AB9
F0BDF5BF10AADB64E9DC21E5EFD3BEC41F18FB8C6D2B457E60950E1CEE746B8B
D1C38DCFEC33DD7CE3D15A7413BA7221C2A0183B7AF9C14AFB2666D0C76B2A40
4F1C741D14A7855891FE38AF4673CC7172645BFA492CDE638EBD00417A24C048
9BE85952A6776CA88C806DDA31F029D26AE7BBE53504F2B08A80874CF0D88928
1F4761B0DA0610459A383275F46B0E17949612B89374A91445818CCF84403DB8
37A6E6EB5B52549B010FB206FC42AD1B3BA2F939E3855A521224E6698290BC0D
0742A314497D1EE7B94205C9F5DD453B1D3838591BD4A0179BDDE6524E42EED7
7F004F7DC1CCC96ADE0D02904BF3E689B2B265E479FD23BC99D34FCB2E6586DE
317EE3BC34234AEDFE8C8810BCB5B93E04FAA62C2147ADCC67517C05D3140EA6
39BB37343980D51CDD3524F0B146BB99BAB1D6B99E13FC74FF67A48296D205C9
2BB06A4B0C18B1C5DFDCAE53E87AA0B079C664ACB65D4AE6108365BD70298F04
7D7DEB8854FDFCAFFAC77871BD7221E8402A173E563B312F24B88D66A61A47B1
A58998B2A1A17B6AA78EC05276600855DF7CF3CBDDFFFF470794606584B538A3
2295BC5FEF5DD3550010E0F50AFA773ED03BE4C5E64936A40A414248F478860C
841769777C502E4DD4354539587BE5AE2347C835DC00E5A73E95668DD0484B42
1E5FCFC898D707553AA90560AA32BFC1FB1353D8E28E0FFEE0C28522DAAFFFC8
4B3AF701CF1AB4DDF43928DA047C26DAA8165842A4DDD43FC3AB8DADBB4D53C5
BC75E92D9FFC4CF5D97E5C253EC6CBC95C776157B2644FBA911DB569BB21CC18
F997D4A44DA8C2AE04EB142AEC7BEF17A9C1AC42B75BFC767EECE17C65560A0E
E4086DEA06A2D2352DE559933C8B4E514DB0410B1E140095EBE6C361D8BC48CC
05727B71589342370F8A366E11B3623E494B8E802A47C2278F2BD50DE2A806B0
D7FAF7914123A44D9570FC82B6D231B37E2AB7C7143731A8483D8D0E8D865CB6
02D83CD2DC870E1AA53E3712C683F56B2ECF78FCCEF9C018C3D8273DA993B9A1
CF9577C0107889C2EBBBC688FC7FB98005BF250E91BF91F719E5568DA6B69A91
1D746C4C8EBC0A4E6AC3CF08AC86548A8FD6D6D253095D1CA40B9417A1DB1BC9
CFD7A726E5853FD3695D297EBA5400A1B90902EFE6792F207136E1E16B417B2C
21287771F728FDDCE8BB0876873C49ADF8152818A07E8372B9E6D6A900BA4404
6812884F2FEFBBD39715F12D929BE313B1A5F23EAF1A32ECA307C440566D8413
DBBEDE3F4E47F96B61BA0F88E99544E109918AB0BDCA926BA1162CF6F8D703C6
508CB2DC5D586678999DBFF6A39E853134F6BCC2EBBD3703E9619F762D64128A
18C95545E4C79B52D7003FB0F27D5FDA349D52907413D171FA2C0F43B7C69F2B
C1FA11191A2974874205A7DDA96A49166276E333BF24A5894AA474C9F08EDF66
B627B992C9E596047831B16841B250CD148557D72DD7E683BF122A0A267DFC37
AD7469C554F21DA9C2007FFA851430CBB5AF83475C093525EB5729D8AF505B26
F99EAC72A872C10BE7C60AA2C2AD169FF34266D8A72C91C24108FC0F3D955887
236884915F331A5CC5FF426B674CB4C72B22588999185585F81C9FE7F420372D
E86F10868948EE50880C3185549890A6937621E60049B6EF549F775AA2861FC7
EEEFCE2D6FFB37AE8D53E4AF5C970E67BC73C920CA64074B3649FE56AA0AE265
4BA7AE69654EEC38CA4CCB5F26D1C2D5C8005D2871DCD98C3A637137DC8441EA
7B8E6A353FE001C63AD0C72E1EB219C4864D18C4CD499B20534D33C822226FC1
99D26114C8B47D73304B66C6BA835EBDDFC19E88CF11D2E7FBC549CA5D86A25E
591E0531A442F63B6D86590198C5957155006779D9CE0C778599803EE49EBCAF
6C6E111EDC97C368223B86632842682BCD4EED2766A69EF6B97655A930494E6E
1A478D5C2A0D08CB39DA7D5F522A4ED633E8FE6D57A0821BFDF2DA7DF431DEFC
08A052F306F0BD86130C630B5690DB1906123D949ECFE82F7B51DC5267C06989
1DED23AF9D42E7E92E35F3CDB35836193EAAD4C88DBBDC9E20AE49D3FE7B47F0
B4C5BE36297E9DA5DB6AD90AC5A04E5C5434D732318AE791EDC71A47F2AB39A3
FE73AE47CF016E3B3AD1A5C090108D4964C7FD5E57B0D504F8030FC501B4758F
1C0CDF3A5FBB4A0CDD161BEF105C8697B33CC8C54E71E075F1693EFA5483DB7D
EBB1EC30D6A719EBB7B5AAF66866359A3E7724F400933CED59BD7219595A46DA
8FDDB20819F2337432A326ECCE7F6F636B38272829C49B77DA56D8C3459AEF93
56949ED415099A0B82D4C0E326AF1777FD532A369531C4F38A540CBD0E96C682
B067F1525DC438EA0076574A376BBA70183152AD7577C8EB4BCC88ACBC5A62EA
1F054D8C429F0F7FF80AF8B32B1A30C9F7923E3E12C1BFDDA721786D7D6000FD
0985C57E723DE55A2ABED9B40D7BE674118CFCDA53690FAF7F415B3CCDE7AADB
CF72697BCC9D1466D942AD5D2F3718A2590BD1D0A6D49E62478FF7256CE9396F
4491CBF50E1AAB4DB1875D107D8180396BA6046E8883A9FDDAC13FEAF57217EC
230CCA301F89A1016CD2DE577D0A8F874806B28DD649CB35D90E6345B12F46BA
3332097DDAE8237E4A34D9C413290538C5E297121D50C81741C15D5756CC52CA
9EDD64727BD3BE976D4963BDB9B0D1D1FD16155510EA7F6410E1511C924FA76B
3CAE4867CD22E3E4A8E70082F0C085AF03D89E764E467708D4185A1600EA8BF6
80C97212992BB2F5000FF23382B07D5B059D8D3F20870038B6EA3C5E41A3E6E6
EAE70E6200948A2B24D0AE624CB648EF0A2E816D6C1C3C83FC0BDB90052DDC7F
055DDF6A6EAB9E62CBD50ABE89F5DA45968A4FD41C738DF99235FC8AF7B0A7FC
07C2E6FB4A960BCDE8B36D06B51FDFD86A22BE594113A00F62F7A579FB409842
47FFAABFA9652CE7AF178B421B0DC4AC696FC634D09507BDF345201376AFE24E
D8E855C8EC0A4F10A8DCC2EAAE014C26BF75ADEA293858333FAD8A5DF5D5CE64
E34060F98FC38430DFD56AAFEA4135F59E74D46E9C0DE71D7EBF3D9A4DEFC8E6
7F6FC526DDEA73EB9B1EA95C15AF3E1BD133241D58DDCC67037061D453352531
380C21D21C82FCAB5E878414ED99200D945BCCD36E1BA17B2D4E2DD52B5848B2
20B04AABD14C5092F60F1C33E6A77A9E51EAD2D9A4C9C6B49ECBA54DD1C476AE
B59C2440A668262623D6A60F543D13185DBDC938B5A37FA2838C251BBA1D812A
10381D0456CC203C348DD73C1D3F3446A4E306C676DE7CB1ADC78A861EDB3837
55242F3E168A938FA99A616BBD1008CCD083D9C4180B08D5361C6A1952999FC3
37744781995E82918639186A928EF12BAE7FDCC5357E6ADF9AD8C35E6A43B682
3C4E3D2E01A271B4E229F6FAD115EB0ECE8AE791EDC71A47F2AB39A3FA3BDDAB
879CD224BD2B3BD4873BECC873A9C71796A6D13D182F1FD33DCC71554DA83716
98B3536CF6FC0B6134E4F3AFDC577DF8F4B125C0BAC2EA874D558B0F46BE4CD0
45739E04FD5DEA0FB07BCAA18723F901BF5F6B6A8A8AEF1CF8DB5AA29D60B224
C9B8872CD9E55B2E3AE2819BAF9BDC42C781963830BAFE4D6CD2356A3D2733F5
4A29072F126379A165479BE72057F0D6D0311BF204A4C6D04CAAD2542B807009
054090770432D63B1C903E5700D6940D54DDFCF2DB627140ED8AD5DBF7D86C88
CFE9A37CB06C4BE02A9FC63EB240C890DDA668C586795967B2B1D5ABD93033AA
D7057C0C7678850AB645FFFDD403F440028181B75AD590B3989A7F340FD59C3B
75CC4A85E5B3FA0541F2E746E3F5A7F0A84C2334C2D0E64590A2420765F24470
4AE2B065259EE821CAAD682B251DF56033F47B4CBF6DAA00B960B965E9C7F789
DD05BC094546CA4F9CA4E3B35C0BC7079A2CF2E2A1529550D55D4471991B7DE7
59C6BC99788940F8ECCB6AF7ACD216131278EA1107F3C016142C1A8B337A0907
F9192DB48AAB64B6AC9E0FF0F544CE8C5C086BEC650C87AC6908D0C344FA4F94
E91B0A972678A8E98315860D63EFE6178FD39A8CA2F4D538637FEE65804AD9F4
7FD5D09FE551F142955918424CB632ED0C2C1FB31D3A72F9889F590D1F350296
EC270CDAE87B801C0C536C101AA0D77A3B65651CDF72E001E8A3010266862CF3
9FBBA573AADD91993E707C3189EE45721D0F6D8C3A1D8CDB3A7574A94AA01579
67DF66E162668F8D8A3F36DCBB5352490FACD6E9EF0C86845248DC345FC8249F
699D5364BBA3E4FC59D1F7378FB61F7DD6CB7D3DDEE35065C082B37FF060B6DB
75AF203FCA2D6DBDEF48DCE63F3F4869DA9D77CAEB4DC19B208341194569F2F4
629141CF756FAC27DACC81D3B0B0BBDECE5D54AA8023B11FDD5D37C1B60D5582
E03F083CF716C8D2572DE33AA0A7E4A4F64A6E5C39382501F2377EC5E1BE06FE
FC81EA3A88B4024C64A79740384D09CD8FC8DEC08F3E43237D86822376F40EE3
FDB00E6D5249BFE627495DE99814AD4A0798392364FE0BEFFF89A5599AA1EA70
6B50613961F9E542A99E1E9EAB27BEF2BCF74FB40F2D01E2F2D09E731C6C2F9E
4493F6FF4574EEA2B17D2645AC7A467CB73043A75E693DFAA0BF9F9BA10DED03
E01737F4A4CD704E8EAFC757116FE3012E01AEBF584EBE5134087E17D7717C9E
B78CD3364BC4D5B263A7B255D0918EBF55EC09503BF1AFD89227A574BD8D6F62
83BA72533B7C3CAFA5F99ABE792B377B97E059D705A0D83ED2233BB7EC99ED28
D2B4A7B685B9B278C77FF850296C7B8CC91E377352CD4B970C802740F07F64C8
800959147D32AF178C2E2E968248D5B79889D9133B6ED6BD14AAD42F8DDD825D
7E8041DCDA231DFB8E6ABD97BCDCA958BEE59EBFF0D3BDE9B4FB0A540610BDB5
9FC4EFF8586BCF2DC5D496ECFD6D06B9A5AFC8C8C46BCFF335C364E086A66D84
1ADED0348EF0A843D0F05CE3F579148DC114120876F891DC1CBC2613C7770AFF
963ADCA396EB26D50902C8BDDBDDC8BAD0B87F3BA50D36D20926718FD370099B
6BE08F5766FA4F3557D0CCC9EDF31BF84531D664F70963D7B37ADE87C03A2DD1
CE4DCED3C6423C5CF357B67C00FB8A600F088414D8992ECDA0ACC39AB210921E
39DAB25974FAF91DC77B8AAB2239DEFDB964B9A39EB820B0594A04C8A90B658A
61B785B8AEFE9DBA015D717A3CEAF3A92E5909A8F0811FE2758B6161A8A96054
6C2385FEE3AA4828CB103799D5A8121BFD5C984F519BECDCB8EEEF18F331A58B
E4704E5130FB4984C3FE2474E6C95273532B64A356B32A047802C9BDEE75029E
991753E72D33BB3D28B42945DA4A9455103CC33474390660C14D704E6CA5597B
EAFE42535A8C88F9F1937BFB87FC8AF336B6E6B7268BCF2B4DDAA573EC35918A
52243149770D7A638140F9EF7A02B92E75A597785BBED4857290DC1576BACC8F
67701204263E971278EC573514392567A82BDEBB7E3AC567A69429EA3D1E7FCC
F0E3330146F527C77164649A42B061255C93ECD9B8DC0D2A73720893EA82A1EA
0AC894127775162D0438F882845B8A24DD727260B4B18E174328A4B90D93FA21
5065DF8C19C153EA76C60BCD0C0FF79B4E98495C38C459297F3E0DC1BCE6086B
DDEDF8F4E9B794586A9CD11C14D25342DE63682A24C569C99EA4E22AFDC4B35E
149F7EB05AC2BCFE82D329D6332B1E5F5EC98D713D700F4428E59C4D8FDA511B
CF63CA7B0EB34D1BEF48C8FC4FA189D8A962AE59456EC1E2FF796E37DD6D1B9D
E5FAB1CDA68C7673B94ACC38F874D92C1E2074B7116C3845EEA16B5282A7375B
3C445C622F7765443ECA040F54A876DD343BF69D7B2F16E43F5C41A8EE620EB7
E7F02C11C1B52C95B6B66A2DF1FBE1991751323DA2D16A5420B7A869207023FB
C27FE57345CE26EE4FA1566B96E221864A45A24ADAEC63F61C9FD186843B64A3
B8BA56C65FAA99BB540B469C141FF7FA87416303FA2EBAA4303C4F4992D05A21
F628B7901829DD810E10D9DD4D39C32F79AACD665ECA7277148AE89168C46840
BFA42B5EB6D2DC10C1B440B5B316FA8F6565B7C0596FD023D6BD1C2CA79CAD7F
0FE9BAF8F71089C3F94C1A9FE844D514E123FDBBD49FE36AA88DF9E59107C892
4E34E442E4A7B0DAE50CAD34EE9951CFBB3E23E96C7086E8D9E5015CBD6DC0AE
B49862AB0712464EEA52BAC576A4BA45363D3B7FDCC2F4A81E47370B18001316
F0FAF32880794EA774CAD2ECA4581BD58ADB6AB154DAE7900B7C4B60F6343B92
F1B67E0B8B99DCD7EBB4E08F06C3A4F52203654730006F3A39B43BFEE5D80FCB
0D3A83798F244EA38E7D327F0F4C117F34AB17610F5D7F76C202F7697ECB0E22
541651CD027D5B23BE4FC86005E73CF251B746D86FFB6D567AEF67B112126E2A
CF3642047B512AFFB892DECBE1E9CF7F118F554E5688D5246D21E1C4BEF63FF3
123E5BB8ACC107D8B722419A9C1F8EBE330B864E6D9CB09895FB773DB25F1A4F
BD03CEB58C7EDF1577444E6F9B5C63BE4DF55743E0DC918118BAEBFCC476F9F7
F52DC619649FAF3BC7D3F0867D1B8D78B9A9DE9DA1FA281D38D992F1779CE576
DBC43DA0B3D52D76D907DD2BA5FA67289DAAF80C0F5EA7D9E67929CF4142CD55
62FFCDA62B59D893A5959E924476E93CF7DCA4E9552E15B0C62E64A0059FD24E
9E54D410482DA1202736A20A2C8511C202DC92A263CCF305021C674FC70A8D1E
5B9FCE9EBE0709F542F3EE5DFB1C1A0AB40E808537744BD9F54562D7B4167C0A
622AFC28FD1A1F890D10DF396A72D110434C6DF848316629CA47FF9B07038337
966F12D57747A2957AF8F20D293F17F5521D3311F85DC40CDD28FDCE6ED8D979
9646156E1491E5521FC8B9CD9158D750D9AE1D1645E399B20090DBB60D0B3F5E
A1A13FB288A9C0D536A297936EBA8F80BF5B2ABD3536A2450AB577891F3BF378
698BB17CB6118EFDFA622B219121677E28A1CB84DB96F62E89B545CC8CE8B786
D388BFB00807370CFE577C1141A7903C924ABA53A4B5C7C390F436CB4C08BF45
547F698E0DC00CC722B65CBD277C5DF3B4B1275640937E5325EA8D2985AF7B9F
14EA2C7C51096681B774B9079F2DFD5420F6D2453D8A30572DD2A12550B2D61D
32D43CEA6CFFA363D804FAA42013AFFAD1401B54E1E86AFFF6D7E6A9E866BAE0
54F5EE51C829C26F9B88AC109A4388B2362A3AD1F83A14BA94D46350DC9C2286
F9A29749D657CC05714F170AC2B490A94F98BE39F5EBC58E442616A88E8FC019
4CE3B471CC2C4DCD7EE8DA67D9B82DAB5601A9125A3B90CE131D3B48612958B3
89F643AF4EF40437BB056519FF432CEA503118F0A2F57D33E98813E044F87B8B
46C868D6D2FAEF826C12ED0AC734005B3FC8E636D5951411C6F46CF31F03D351
7A96309E02D4153F7F64C21C8767DFAB7E5677415F55FF32E4308FE161C7315A
12FB600B92EEEC2CE2B6C918A7906736E895F3154BC4409B9A97CCAB9DA5C761
48888F30AE04C7EF468C8FC8AA1C0A2E529502832B329B1EBC55089A05E432F5
A19F77E45AB50CDF50B9F75F0A6338BA2148B76EAD501C9C1670B8A568F69091
BF0FBC9AD619AF7C31436CD5130B3B64C1EA82BD4445555CCC8D8C82839F55A4
6A84383A5CF1546572770BBA3CB09E41AB8CD211371A43A1F9F4354B5BF2FAED
4B00F36F2CE5F46491EE8650568A3C4E497D1E90E7A0F10941DE0F2AC2D90107
4A7BD43D4D5B05FA1A04F498C68D3A49078A7E2CB48A43238E9E64127BC951DB
04055489DBA72C24342D68B5C8896AFFF13F6C5D87F9C357CA8E2424585B9D34
982C57A36A52CC3D3CC3A173A7346B4A33C99BBA62EE86C30D0E93B2BCCD4A74
3DE63B7A8395F625BA36D9134FFB89994E5460C89EBDDDED2D74AE20D4B29604
D021B8CB1F3AD3CE5104318FE113C2FEE0BE9AFC4DDB110A7AFEC7A193835DAC
ED6F47059CEEBBB988E953AC22110E3366BB92A8B570377A356DEC6AF110FA0F
C9274961C7033B715C7038A7CEBFE998249291D97CD034935C3A0DF3CC39563B
4230C6A08BB4FB0CDEA7D44636102D47AB90B928C3FC68D277777AD2F477516B
6676A165AE58B26B9DEDEE02099393336984A0495B5AFDFA147835FE0BCFC558
AB6171CBF0AF8D53B79FF544A0C6F98C72AB9F84F3C402380D6677A1F2676225
A2299BC2E64FAD2F51D2218D29E57D8C2C8B7EB292D0E4ECEB60C79F9DF0F8E9
2B8FCC8CF0717532E4799F0DCF5D2FAB1DBBA602BEDD83581EE4119973AB763E
3B857A6D32903A4124E2264000233BA7E9B1E80979B7487BA2CB786018E20A5E
0355AA35B05E219F5E55187DF09674F324FAB81E61751AE62138DD04BE3F1DF3
1CD64AD21688B2FA3BDF5E36CFC585953C95FF27739E9099A4B58BB53E3827F4
65279870CA842A232C789B363F4B77BB6F513F2D1CF82BE364B0469E2E163414
EA231376981947B80419C6552BC98F10E252C17CC9CA5E9E71CAAF5A17D5598D
8E8BB772EF73E44C8F5C4B69EEB8584D6AC888FDFEDE4783A639A6DA91EF82C0
84C1C89C0B70F7654DB9EDF8305228BA8CC8209364811257891A08FAD24873CC
2C75DA3473DAB2832331C2F3DF3CD45EAC63D7202E2F23518545A75568CC03D9
528A3DA314C3781B6AD8A675B3985D96DD31C832B4812AD67FD873378141C0D5
E654274F0A884B4E81A58647CC0C2F66BF8B28CC148252E90F6E7536E42E562D
803338A8B8A330B36B22482CF96FD2696A48C832F41C5C234E5A477B14256AEA
DF217F5E4092D1D03ACD2FADCF1422BED5ABD93033AAD7057C0C7678850AB645
FFFDD4055C250801E1B884A635A73EC67F26C4A36894C4120C6C7FA052F8979C
7A5CA5D52FA1B48C90F140B934EB585E3DC75A23E9F871159B2F3CDA9654D2FC
FCA727506D00906AF8DD24262D80A1DDA1396947FBE8692B77E9A6F5B1286C5F
FA28489391031EF6DC2E9040E85D23934571B2C15D82EBEC804D15C0FEF51E81
E63603AB1E9281C2D8B798E7CDA3D88B9B026AB9A677D0A13C4AE52D001C95D0
C24AD339181124180169F3AC7E7A19D8565769126D2B830F708F56A8327BB7FA
5CC1E56949F31D5077D185A6A8C1C19267AD441581D7A43EC3324CFF3DAB7E16
2F0C63A0687F065CB219C926D4511E817E1D39B34D480522E9DC062394210332
CD9277A4CD1995D21351D824C0F8AB1AB137E7F6D35AD957835FE482F81CD228
FA2227DAF5336316139B1C3959321B8800DA2D2E66DBE5B33DDDA58222CDBB75
89CF09DA07C6EAC8D8FE03BC36A4649EB5F77E9930EE7D89C8DE35DF4911AAC9
B7C62D6F7CA19DA5777365A7DE0EA36661EEDD0D99F80734662C33FF30DB7BFA
31060D48507E4F90994CCCEB2B11C34946640CFDC74AA12724E13770A8817E1E
619793C85487C0571E75403D111C5EFE83AB5351D1812A8B8743AEA49E26DED6
E9861BAAD4020FFC9E1E36598BB8A970AC962596E5DA29211EE28BBBAD5C0771
8185F2E6A707C1CBCB5F7BD74B934EE2BC8350E3A8F4332D19994238F3B603EA
8489EF99E770EED78A968F1DC07FE09105B30F327FA3BE68C5416EEA99D327FC
24376C3213224CB700644CF44FC66D9118186CFA278E47EE2D0B419B93EBA193
7F83EEE9027F53A79111AC130AB4A246A18F1735A73665A2731B4B56297DCE76
B0044C5AD81F01E220370DC8099CA12BF2C5AD035AD6DB4B6128E36279CAB175
64F0F604C2CAC70727F24CB5F2B23E93A3CB703B62F86E41FBC6421EDB9FF682
9A42E3952FA29C49E2D9F885C42FCEF1BC56E92FDE53A26F9395671BD1653E8D
F6C5992563BCCE12B4EA70A67A6BBE9A02D18CA44689E5DC1DCB1767179A1B63
E40EAE3829BF4CE47841CC9958B70AF6D0D07D34102A25E12F04FC9F4B80562B
21C6D0BE5704A5B17E3209DF9F81567747542BD1857B6F5060D31C481C37D159
D01BFF4511CDC412A885258111779F31BBAE3304BF771CEDC1ECC1EEA9D34523
544C00B58BDB14CA1DC0694534AADB7CA1C907C3EAD979BA7BFDEC43C4901AD5
8FE29E46A3635D2AE3390593FC7EF25EE5C264CE4BBB73A61F7C685A3A9A5187
34F9E4D7E801AC7A5134A76D1FBCE0045C8F147537B7C2221103C664299859CC
73266D8ACED067119C4592AC1DCD83087C2DB81FBBCCE75EF02F7E3F51D6E7D6
0A9C421889066A22AB0574D96700D6A10203D03263B1C28B26EADB953ED292A0
674E017CEBA3A38EE6BA2063A650CBC87EB9D1C2DBC7A20BA2D76D94BCE9E2F0
6F49A6F65CFF1A4F8BA05BF9DE746905C1624923AE6DB8994DD4DB0D452EE669
0A8E0CE736A59918E193BFBB4953AB21EDFDCA58BBB7775A75886631416C2190
B36C30927C412A0988C5298471BA2035819B7619DBE08DD2EE3C007463730DBE
8260970F6451BFD1EAE7FCA4E259856EFD5CB9A80D1CAD55D9DFC9B64DC3402A
A1DE45FC978490BB69153DA6D6161F7E3EF19D51D17FA7017754C7B13E4890D4
53802BE679D7D30A907577C8B8DE4E695034A0AFD7D67EE73457204600BE34C5
3EEDB7645170A6A6B6C1A85D0058926158D3D3D81E3013A7856D01915A184EF2
573168158585CB5B398351233CBF49B756D42FA0CBD862C56A5046047DDC604A
4DAE890620BF249A218DE01B8B920F09E9FA8EE4B1CEFFE1421AA0F101BA284D
079A7D06D8D7E20E0C27538A6F7E4290030E99140D3932E4F572642BD80270A9
D022DBF622DBC6438DF6625367A51A814A040839172E350457EAE0585F0E658D
E2D96CE4E32F2AD8BB9DAC4ECF39A8F72733B7F3B44F48E78519E114A8BDC93D
400AF5B67545FE192430635B74CA8893365038EDE85D89C7C75230DADE15B8EF
D806EFC61625AA46AA34B6BD18DBEF779562C307DCBEA8610E12D792CF039DFA
B1ECF15319BB2AE81A3421D0EBB8CB761FC76D93D759CF9C50207336FE0171D9
9ED216F355139D0FFF6D5A812EFB4132ADFA39B4F873B845ABF2660C775A4704
DBBD673F79CC1DC21B27ABFA53F4AE2E622FD9C4587AA9B51673BB078799F0A7
52F3F7DE5CE57978C0AC1830248B5410C7C68DC45383A6470A21648D9F06AA92
E81779BE5DCE90183592A2C6E2FFB3AFF49BBE499EA940E619D58FDBD331C9F4
59A557AD41F0DCA7EF4768DA319D4B2F3D95477FC12ED9995399EB66829AB49A
42016F5E76DD0CDADEFC54FDED78A9446ADACB1F10AE1A860E302A83B960B624
C72D86913A3221AE9CE1E7A23339ACF55167FE8A2F947030413B8C42BDC2E33A
BEAC42E0A3DFCDAACDA7BF1E9DD09B987DDE9A64E9BBAB13E9E5AFB65565788B
7370527464C55762EC46306800B751F026ED5DE92278F31B2E573FD86696D988
00443F32CB27EC3DAF35E795A2D32193DC2E11E51EAAEC0F6DFE29F24B034A8D
5B69C16F750F4788B6B3C3C2776D4DDE217E123FDB2D3B8D6DDC59C6DA3DB9CD
03200959F34BF01B6785A13393D9C3B2D96ED57FC55FCF060D13BE6123F4292C
FB54C356ED031FA2E3262CE664683870EB4F2750798F380B47051133EC68C746
E4F7C5DB3B40A4A909B62BC0631801A4B89C40C2E1A1172CE064648ABA64508A
476F7B9B5B308EFB52EB7278A36712CA21E2CFE07DEA46CE64D8A8853C695C66
5F456A900204055B6FCE3025B3EFDB81F6555F09A25CB68EBB427D11ED7860C0
DE22AD177610374D182906892912A954BCF7BB00D53F3FBD24FEFC0C19947A45
ECC6B9F49C83EFCB2DD144D59AA23A265D273C60C32D8DEC992FBD7A83016D00
286C69375E9E0B1B272B51BB1829FEDEA7A8D8E361ECEA4E7DDD253666AA024F
FA986DDF098E40E2EA149E2D19C21EF5F5DD745F323D016D893B5198863938C8
E3B4CAFE23E8BEF99C8D9B8645A54B519859A8579CA0ECCDCD40CE7AC49715D8
BD0A6803D8B14E7552C24309F4FEF9ED2417593C51061309D2F9A4742DCB0951
F33E6F861A0A32EE23534ECAB1259C875ED86B49895A31C1287938562B220356
5FD277C13BD2342C13A685521D2F9CF54295649CB73D27AFEBD51084FC653EAE
29C85C0951E0B20F41B614C43F5ACD9126970121B0F16BE41947D12B80B6A14D
2E4803A47DDC45AB8194BE9FCF8879E26EDFB90DA95B5899C9FE409D491DB422
E2CF3F84D9B7A5B18F88BC747DC2510E822259DDA43D30C339AC2B795FA517BC
D14F2BC5B745A39B9BF94363EE9662C30C69B5879BBDC3E431A35F75AA9F2EB2
A871F588D755414CE43C8359A162E7A5D6C3533F250818078B97D490CEB91374
1254040BC520FE1C36A44796BDB5DF0FF5C238535735FB2F12E8DF9C6EF0F015
C8184493FC6CD10DB2364F1C5172E6D0D74FF44EAB01854639169FD558750B7B
9D4E483227880E1DA76448326A47FCD6200A4C1DD19594B4A2FFE379FF40D788
D5C00F3E5029A1ABED5E2529B13B00B99D8EC514B5026EBA991AAF4E26E2F552
84C3B4E1018FBF44527E8355633F5C77EBDBADB775033C05D96C09356FD9657A
A5B9A9AA4522C68A1FB049E97F6C22EC02CE64CE9F9DBE52947CAF49A78FB907
EF96552B4F2B9552C8062FD3AF6DB5E64B0E98E3DC0E2409A4459BC9CF7B2BA7
69BCBBE17E81F552B6003F302A5E1BDED74C9BEF3D01A082C36934BDEE62E99A
65F052B9EA1278E210D305677B9A4739C67ACF82AAC6528E4EF65E5D900353EF
C3A7D5BA1EB1F51ADF85A241BF8634666F2EBCDEBE0CB0CBDE736DC50A51AAC9
346700922DDEE91AF18427CA61F1FD7081F840EF225854026C776CF9A6D08728
DA3D95ADF1C5C812B03E2569E0FEBDCB5417866EC07D54C89A8053FB4C205413
CA5F8090413E2C948CF1656FA97A05A937A3AF22EA39978F1D74938E7D314BBF
92D3F1CABDC48E9156123182A8C9355ACFB9A5CD32D55AA3E61DCAE5E57A9D3A
D3DED4F1EB8651A2C612CA44A7392D8E791DDE1DE818BBF26CE3BCC5EC51E7D9
853223CADF1D781A7E4D07DB3D4F16AE2506A7CE1E86D9435CF699EFFC1E7CAF
E1F905DCF098DBBCA46776FB0B75C2FD27FF98722F32AECA18B7F0FCF82D9F69
0140B0348C326D6283FAFB4F618A83C42FE1F93C815E060A973FD6AFD09E1F5C
08ECA6B49A6E98ECDC132B67706E51CB96E8561C64782374B5BB113B860B595D
0EB37B68ECA8E317C53791E197D7688AC4FA0BFEA6F19F871C5461E2339EC468
5617621545E85237B81BCB4FD62723DF9D30974A40872E176EC0052337061489
7E97E006A0FBA50CEBE2BE28FD8E6DE5582244482747726246DEED68118F3352
659297CEA9BF5FE7C0220D844E3E5996771D32D380D3E9212C270F9B03075629
05FC6B007A287AAF68FFDB416935BF25534EF2624694FA389B03B827C361CD8E
3DE146AEC03E2E23107132137A314EE064C2991D2EAF8F1F26C506DECA2CB27E
92FED95B5EB373AD6DCEB0ED314523E81CC6D0102B969D7751807F6A041A56F5
A6771D14EDB3216934A39C1D621945DFB095C0A07651B302DA747B08208D5026
049FADDC1D69A9229FCA424F301FE8EF7C082F7AA3D0B09E098130CDD8F5E9CE
385EC4DDAB84CBF286173FBCDCFEC6A1A9CB03B54B9FE05A283B34E1A60F1699
9113391FA794098F3F01CC82A92938B399848B8F0A694CA5139AA6D4E7C9DDEE
2028ECCCD9844213E41BC82D098077B21B33C6C9938C2AA4C56E468BEAE99C61
35BB2A0DBC9C1EFBBB97B92ECF06C7450D833CC54309BB9A7B79C4E91724F312
EAEB8EB52DDDE6A5B490374097FAA2C1DF59835E8856E8DFA486E54C4E5A1318
F12E614AE73E51EF48603F4053F0BB158FFCFD6FE8447932BEB150E3A400CF8B
83ECE855B1F64D83D1A6A8A3F63EEF5726CCCE0DFD72D09F402E0261E4A5D20F
55666D0C1357B0953D8E9950803E1A5D4672FB06379D3A469D9AB505B94F2B82
BC63104BB150918AA7A74DA77525E729101943FB1073125C8E145DB24750954F
393FC406C0129378B091F6E0E0C2ABC7FEC93DC6E66069D56F6579693CB65053
BF56062972DE5B529A730D5ACBCB0882F35AE8A3E3B1FE3903A941EA20978284
81D0B4103EBB92A3F801177BDE9BDD61E288E9C4265B04D585E6AE259EA0C1E0
60B1C495ED215C9E3B589FF0F0DBF6C62D83149B03B5B9161C5B5E1FE556DB17
D9D16ED69EB52BC90411BD034E11E6B81735AB30E65B39860948F76183A847F2
02D77815ED3E8E7869950B22734B56B59A0A3ED243DF5FC4465A19DCF6C41EF3
B021BAE7E6ABC85888DC059DBE81F40B65934AD2E4DF3C2A219661127D80FD78
3E271DBEDD8994F8A2E9F96F4F86C836771EC35651395E03113FFC2CED08DE46
89EFEAAF3B66E0E00A028B98F990B4D015153CCC2E1853473BBEB42EC8B79B20
990536E070A58988992B1EBC6837AFBB5526AE3B0A5D4BA4A68C8F9467EAD475
06D2F6B52756A8B330001790770D058B9FB23098A309023373FF754F3EBBD93C
D89B84F14D18A2C653EF52DFD5BD5FA826AA0901B9070C1A92470E3AD7F1CD94
4E91ADBD1EFF5559D97B1D3B433DD2B301F57E978BA76768086AF935F710C1B8
A8AE43F782C9C7F3EAAB68393918581E5D402BDD9FC2DC4D8FC12744123F2946
5AC5267B36561BBE6293E3C059CE994AD4BD0065D122E44FFE52EEFF539E3EF6
FF3A0D852582BDB1EB6971F2EBCC0C538B9F4747E6F7BD506674263F62D3E6D2
62F980CD3240CACFB36B9EC30FDF06DBBBAF4CAFC20B5773FA4FB82F8CA5E93F
C02F1F40FEA458ED232D3F24C4839AAF0BA7BFEF50AAAE945DAB1F6C849635FF
109BB34E10042752C0B839FF9E58FE1B77A50542DEBFE49BE6CC438036AED93D
9AFE101F28C08DB367464FCC848329BCBE84245A4B5E96BA220FEB629C482ACB
47B78AD526567B3635C2DF2D8A778075A7E7F2E7D41FAA5D19294AD7623E0609
77AB9233338CBF612BAB2409BEA0B2194F8237AB16453B9349050645B3636A96
BFF33DCF1124A4E0DF06126E587E8F5ED4F7DCCB35E206C199AD291CD4F0E033
445E86EED3003DFC7429E2AA49C4DE54A05AFB1AA6C7CCFBD9F72150DE258B4A
292B55A210FCB74F1B7D0C32C7ECB4241699220B107223F8CB5838CC4F288F75
56007353D88969A3F3D9D8DF3787C591C3F2AABA930D964266398898AF43B510
B472A9AB0C9AF04166E26851EFF3167F964ADA843672E870B90BCDEDA619912D
6E53B350637A1C6B75840B145CEFC54611D9D515EEBB7192C63D22D02BB2A5A2
727479C9BDEBD3DC879377A13C5DCB4A7FC08F8842251411D7F5FD741603D1E0
E18571D3DA62557A0376C2E7162271136303DF6A79C301E00600AB38A00EEA61
310B34A1AF4E53D785E1D0E5068ED5F42F2186618ECA4318D6826E9B94F98412
9C446DD56ECEEA07228F0B0DD1460717C7D8956486C96942AD652B9188F2FFA1
495493978227CF35A182E84F87163A97D16C6DE238383AC59698E080AA93420D
8EEF6ECA04DF85390E261B43A555BA97B9FC5DD4799C1BAB6E8626E7E9F3F6C2
AC944B7B713B63DF43BBBD240FB7E694DCFE132CC1F6E0EAE7BB26824CCBC34D
71864E9788B3C1295FB381FFE037D9126BAEBC89EDCE83B2F52AFC1924FF85BF
0B256F7F383F4F86A402E12641C71508D9E5E6ECEBF585AB8C7EB2B980E23521
148368D3ACF952C9B77A828446BBCA803D774C5E1D01DAB1D5433BE8B3506810
4B041AD7722616B477CCFE4F4CA1017F56A865295A80BC736A8634DD46036359
DFDD4EF9C6AE3C09162E8A4FC6CD4741B38836CB599DF98A228A141B118B0D04
51FA5C0CF712548B9D164B87B1EA798C275059727637A7399FACE02A9D3F119E
9C9E53EEE9534A40ABE963649785F697D2DF5F0241C05C449D8DE10D45301E5B
DC0E125346571C3AC8F053A09AB668003A7606C8BF13998C676F5633D42863F0
263EDD8FCDF7A810C898C94B6D69CFF950270DC1AB3B2964A1A9472231A6F17F
D3C2604EF52210F343C793DEDEFB0A2B19553E8A4DFC3929AD9700B3205A4330
16971AF248EB25722C1D494D0A2A7969C4C1E24E272A91C5C70D329E38BB45C9
A516F0A3D3A6EB0F7FBC3BEE47C4336E84B4597EDAC408FA5F7D6FC1E5AAE5C8
33E6B820F706BFB74203504D4FFF9F5B3A390C7084BA4E6E0D78AFDB692AB573
36EA77F5DA72A975945FBB6481FBC4F25889CCCD84E335EE7A3234A963F7F6C7
4C3424F132DB46B106ABEB773A7A0B01B8A20B93FD8A6C6511665267B075C5D9
1DDA598AD2A3034BAFB367CE721AA7121C80D154E0955DF11C4420919D12354A
FED37CD28F168AA61BB6A1D0581D6E772F7176C9524D7CA2AB7B9C639CD9CC80
2AEDFADED63BC8FA7A0F008D1751CE85D3677E2992991F8911FC331BDEDDDFCF
2C960CC7D5E2182D31F96F99C09696A839E835378E0843451E4D9840AF87F800
D3B6E0248AC51C4A17F50C7BFA2F130478C2A03674870F9FAFD22BD2AB57191A
3196210E0C1363B06E0C4CB49A374F2A0C1638A1093C95E5E87308560F434CC0
370A7E797D91200686FD4803DCE12FB3CE2044B4C5352C0AAA24AF697939E31D
FB3C127BFE62B7892E7B84E9F18421483857B05435F809450303520496959774
571975046E21FD503A4A93AF550285DA91183C4F754C307CCE056DCDD8F80D77
97AF86374130E0E7C7A57F1A67B6246167D10A7A979DC0DF7EE8E51C4BF6C70B
C794C6BBE8A2AF26595BCB0EC9013F7EA391C8922ED288DA4ED0C81666751413
8A90F3893CB2E0B4C75A713F443B08792A50891DB97A68F5366491D1BB097D8F
F4A71966D42DD988F48A29F0D9FC648CD35B1E03827411BA7AD177E43BD16801
26C9B220EB7D3F8A7C29ADFBEE0043D4664253B09D53ECFDFCE4C848E41EFDCB
5AA1EE1DB0E3AC051E6654ED69DC9F3564BE4C153AC91451F122BDD5C724CB80
2331A64C8D3BC19ADEA42AE0AB3741CE1DEF5B751D3B44CEF106F7290E7562AA
10DF6AD4BC9BF80F3188A55927B7EF3CFCBBF060F416C0B747EC5BA54AA74315
4084CCBDA3F4B8C354769FDEB9633D3380A5EF6871CC7FF4A8DBE390972EC5B3
89955A931A37C06AD33548F4F4AC1881AB632AB6CFFF3022D1FFC91F6F2C6B28
808CEB9BD6EE3B67D7F16A7043460436FE0FFF031CE20930C273EA5B88EFCB50
F09C029DFD240DD11799F2F6B3FC0438504B2855F9540EC304140C4E1569529D
433336951DE4EE9E3D49D26442237EE2121C14F116A1114838B333EF11A922D6
8F5439374C40C301C201A9B3E65AA5E0D230265952573AFBDADDC996E9EDE494
5EFAA728C4A18A407BCC2FABE82231873F15E4EA92B37F9045EB711B4939EBC6
188DBDF1F5449C2169315824D0A6BB0AD8D5662A85E8BBACDAE4BF534FC07180
E277C771BBC84A300794A6EF80B9903CFE41A030BAED3FD73752C693BB69DD30
9850915AFF65AA47D59BDE98DFF72C676430AB9A60F28F08E167682B10F81053
6A999BDAB4683EA838449C729EDC5A757C5B5E1E1C5F4D2C469DEFE3F85C8595
5800D2C374F256A3886969D17E57EA78AD5E0DCF6FDCD74B2049E4C93E28E86F
10868948EE507B47172D7B52B098280728DF8DEC200EDB3A2C7866C977678C57
1CCC9FFFBCC26FF6AEAE7FD7AF2F2D88EDF90670519FC2E69ED8A26807CDE334
E0EDC575DEEA0C73666D12F2D112B93EF7E36B764FF4DAB7A5A32ADF28C1A2B3
1DC98AA67CA359ABD5C37680C27310CD065D11C45046EC33B07469F871F97A69
69B3069E84EE1A7A786E1000B59EF234B71023BC83F771481BB46B91EE932517
DFE2B815D288DAF8F0BA2E3FDE32DC8120E63045002D044B71370D2195B07456
F8DF0E2577130E254DF39B4DE56AC726971985A0C26CDED6473B8267FF196B1E
52B808F3091EDD87CAD5016470EA1055E94D2FEE120C7BA6055FAE88DE894EE7
FD9B7283AF109382E0FFBA9018C104F789AC508CB4BDC8DB58FF54C825E7A073
27ECDB2E8C17181030F6CC9B504E1FFFCCA352431A0D5BFCFCFAD9235D909650
BD9404BED91639395DB88CEF35A4B8506D31B17734D27AFAA023B97C367CEF27
6C725B73F6E2214A0172520647FA07B7B6A0D06F3C5A9923AA703FDE1C2A48D9
9AB786A3D5D0C5AC216EA68F8F7D3A5BD929E65D6A3A14590FA2407BAB1E8BB5
63A9C89C0F79AAA6140340522035B2875A44EF7DAFEEC6B06D7DB4B3BE25B008
63398C839ED8D858AD4C773175799B685B89D40194C126593508297A962130FF
121C9621988B5909B8DAAB8F31E2C7FC6ACCFCA617E5ADE3D0B721C751699D83
E2EFACAA1897A0F984F440B9BB0EFDD09656C615245BC9F224ED20A96E8F4430
344988EB94048545A761892E458270716170C5EA7DB77612DF679C0906D77AB2
144E88EEE0330AB6BC5E2CECD68B9981B2BEF1AED8D00A3AEEB1E9C54063AFD7
16088B6E8FE0CD1702C2C331273573F7B244323CC083D9D5F0CC23C7493D971C
8AD739BCE21D5D27DF6EC29E90C08D7617119BDC68150065FDEA072215BB383C
12155843895629B71900A3ACA96791E391EC2AFF0C278E99D4E81BC6A80EA827
7251A46A054E33FE15EBB91EB3CB214F4F214DFD130D697972BB11E9FAEC10BF
4DAA942280A326B0C4356B774DAE57D209909698FEB6F7430526ACE47406FB01
6249A334141B4B1E22F272127793DC4DFE03595BBF57B47B6B47F36194429B83
A549DF505817CF5FCBEB7DD5871EDA1C1A748286128156F0F8FBE4B0AC369070
B3EEC04549DCD60CB7B23EBC7DA2DE64C1D02FD6CAB479553AA9B765C965D691
1223ABB7FE79F11FB59B0CFDAE2C9D3E76CFE803EEFA03CED1A83ADAAE542768
9ED559EBE5BEE0A331DE6080D7EAFBAECDE040816E3AC20786DA28A3711C0627
3B79F297A2252DD820081E3821F226D8D45B9E0A9745747E016355E3FC61B055
2D00C4D311498DE7499F9653EEE4FCE22A65C2A9E7E256F238A0D49BB81A6E5A
0C91E869BA9FB90C0447136B3D32ADAC080E47FBD491626CA771E2B69CE5CAAB
AADF0D6B4D0FB01918E8BA87EB21AAB2C494C6F6FF275D1E4D9DD4D2B1F245E0
1C1F36626E3819E7DCBA9450A2B429534465334A41156A070819E98D7384DCF2
0A308398FD62E704A7ECE39370AF0A1337290A562AF46CE779AC7F7FEE7766DC
CD9B30F171DDE639B45488B890196AC4A256DBE87FA2B9FD5C78839321E3B2DA
5B6697FC6F0224F4F6018C8479E187C50BC36C500B101DE6C11079EDE135A3DA
AC7B4C83F112CD364456A7F5BB6C3088238C4838202830E4F2AC7BC9A0512C55
98CD6A8558B8C48946EDFDAE0712EB238A87FDC41A647D79A3E56C4B5AB817A7
F318F05DDEBFE49BE6CC438036AED93D9AFE10103551553B02B7017DC7778496
D1A7100D9A915D2A8FE391555001FBDAF0D485BADEEDCC18657062F36EBAE123
8653DBEB37050E53DD4E6AA8EE1868EC97A9100D213D75FDDDD758D466939A23
D7A779E813657B78B7EED0F79EAB0E79D1775A4271DB221ECCFA25639CFDADAB
B26748D0C122391FE6A514D300575C2EF67386F05A45B152FD75679CC1F5AFE3
453AC21512E0FB7C64CA58C9FEC679E82E40874F4AE55118EA3F62891AD4DEE7
C73D21CCD93E232305776F93F69C855F72D8A37A9BA1DFD71B7DD86DD0BF2C7F
B98B15F0F0384477A2A5CDBF02F56FFDB54335F9AA9F42C1330294869C78868C
09C04174BAEF8D5181CE3B705EC0FFC1999CCBEB73DDDD93879C3EF192DFE5F7
BB3E4083B8CA604579C3AC38C58F6235EA3E61DF897ACF304881CA6D0BF77E1D
1FCAE469761CB721E4ACAB68BFE954359C172FAEACFCD4BDE28886E9CC71D71D
C563BF3162AE741D85DCE22D655CA7EA6F16C25D5FA4DC48C8E07366EA974854
E793CEF79D1168758BC59C550CF527AF9B4338A594BBE5139DF586A182EA65F2
A12458F69B6E9F731B075C02BF33470523EE11A695819A4BEA1780F81C441DBD
E9B70731E34CA0E11E8CC506068BF444477183AA5E5AC7C7C6B120D6A180C6BD
E7F9A323699EA95D99B413A3A5A7A10D5681F72BB1D45ED4696A9025AF7ABCF8
00D7C5D651DD129EE4EB60B583320A18D172D0B30128964819805040983095F0
7E5775A0444513B0E5645BC1D17B48D67133BF0BFD4E32CC94D09E67394AEC64
3774EB44F3EA113A96971D017FB330535788749F3C53AD7B863C08D3ADDEACB8
D02A0B891DBB4C9916B03C58C164979E02A351E0A91001697990C8821408006A
B81DC0E435E865799F892C4368A6DC439247F84FF0A7278EE67FF2642FF192B1
2415251A79563B0014F00FA110A94BD048A963BEC67E2AD4BDFF02633D5705CD
09FF927AA94EE2A966ADAAB08C4CF5482858C35474401528A7A913ED3FD8D87E
00D5600224EF84A67716773D9DEC452F742EA4FA3C89760EDA39A78F0E9DE819
15161753605ABBBAF43FA1A2C2DD181195AB2E140A84C6C5378603BFA7A5D925
9F47B52232AE0C4CC3A7235C31C5FC50CB3FC22BBBCF0C69
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE5017EF863393113850793875697709861E50EA63860BCBD
4746CCFF44F0A170A875B6245B17861E28EC28D50FB9B75978D4D7919969931A
416110D7D81BE6B6F0862FE61618E8B5575F5FB13461FB79B473A8EF5C815A19
621A9BC5B1C703AB24CC6AA36A96D66D67F077FD6D0977E8069DD79D487A67EA
1D9A22A508EEA8494F7BD45B8D65D86C58DB747A2455B41E7CB3D8C64769914F
77F5C7C882B7BF79F5205F9E9A1EC74128D2448189FA0AF72A54105E7A572DF2
54355335500897F2123353CD23FAC7E2B86EEE2936DCFD6F0539158D3B883FC9
107AD8C633ECBC2EC7B55F467F12BB61BB5E69BA4A04B118AF10776110E31887
3BED624E3B07B6F315F241825ABD849980EB243937D3DBD4B158DEC281D83070
0BDE3C3A46F0BBACD422F8C2D24A8FCD9B5351F64D0D5C17307DB0D983B2478B
82FBBF99BDCEB4B92BD72F54E3F35A448F9B520EA55BF8D0E39D1EC954B803C1
9DD4F5B58C4D2012E04E630F515E958B699A14BC349FF6B535D1F2F28A9FDBF6
1B31883D9235708F3988B2668540D20345FA57D34BFB75310C38B48C2012E0EA
444924FBC760A5E32C9378F20C4F652DF6A4537FC25299BE55008332B6ABA853
046FF3647FED0AFF1F33FB13863341D127CEA81A0F8D82CA44B3B19D36FF290B
4BD1B807749BBF6077B8F99CCE03F54E22E2B141D5417FC4E56B370A532044B4
4E8770C72E6CDA1458BC8D2C258ABBDAB9638306F1E4C6D8B2386E52CCE80CD2
A5F47EAB3653BB035A95679F52ADC07C1FCD50B0605AB38637ED07E3102DEE7F
67FCEDC487CC1BA684FAD744DFE06470630DD70BA62817A18843C3821806D490
FAEA107416545AC5106B50E0674260A62A03E86241BE8CC3D19649FFDA8627DA
9FC26B0E5507ABEA1BFFB7563B63A5AE4005F7273C9E67BF2ABE03212A808711
08B9019EFD49DDC0CA2A38FC450F243595445D1BDED74C9BEF3D017510D75FE3
0E83F0FC13A2E8EC0A652A959EBB32A871303A700670474217FE934EE9182B1F
499AA108E7DE24C00EDFF20384F08E0DE842E0F4B31453998E7E160A8B88E422
ADD9B83C4C0B9E255FD4316D8DEF8125370EC5612560ECC327CBEE65140EFAEA
52D5E49D9F8BB32126558088B345CC06DBE98FE92C7798A1BF0F320BA7334CF6
E416FE6462A8FBD77856CCCF9241971A887F621DA6E57722226BAE6E95576C7F
7A2A254A4454F215B4910EEA2792D6B7CFFF821C4616B25DB2D0BA8E76E528ED
1B59B9CD6937B57F781B27AD04C53ECB750BF1F46401612E820E9EF59E55AC61
C5F6FB17C1950CD931326F4832BD33B2672756D537367A97B2DAAFA056B2D2AD
38B507C9B3CB15966BC19CCD388CDC71E8DFFA4F6F0B4CC4B27D79CAB047599E
D6172BECF7F770948E1D1521BC15417D6B95236370F0852639C198A131023228
6282B1E75F295580FA9723D093CE940B17453275C34B229F4EE9958D3E213332
9F050EC07D94CF9D5AD58597A16AFBF3EDF1A701CAF86B56C75DBBE65FDDF495
645237DB063A22A8882617271767398E0EAA1B106A67FD0D55CBB3A299AC3E9F
C592D1AA58DAA333D7C21DFFF3C26505BEB6F454C566901C8CAF9126A920C2DF
66060714A2BDE046593ABA2A11A560A6D6F4454C60F97818BCB529F8A0910CCF
CAA829AF4BC5F10A0D9945C5C13A302681B44115B85C48944B7FEA4FDF7F006C
0E0306D34F9F330FE864277FF4709B82D4808353B1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4A2DE9AEA203B209385B88D9E708FA615ADAD672C6
BE223D5855C0F6753649EFC00A7683A9EBCDDF1610B2D942987DAF090BF54FD4
E7304082BF34EBA0169EC3F6190879D5D8DE05CB5C6CE7C2212251BFE8824A87
3A277D0CE8C588611AF4987F7203DDCE93170428CB54EFDA16BCA73256C1FF85
2C85996873C9487906AB70DAF5E4FF2EBB5C7489358365EE072EB45FE7328E73
5D241828F39C98E813E0B142027DA0842BB3BB3A4EA8DE8EB34BB81AE7BA9B29
193A289A9EA7EC158512A268417204F047097E042BB52BDA0AA3ED16B4315244
E3BB451A99B211EEA2F1CD0A5709AC8CFC3EBA9A0C45B48925B43CD4417517CF
6F42243C234413756CA68A0F125A0E7C1CA1F6166685C3FDC27532C931AC8B86
E81FB0223686025707E5A69C6BF3D0C6660E636D6AD25B03A44355855B2712D6
F84E63A541739B3F161891F0FEF72180DA1546675AE16824DD84B6CA375598B6
C439A2E90E30B7AF6043F860D5D548B166C25921D8DDAD3398299D23D94203ED
FEB2A8899B078698314F08981397316AEEDFAF486F58FEF25284B5B5618A6762
967822C2B91D421D3C8CF5D76D071D3748C32BF1C779E9131603E8C0EDE2D696
E60DFEE5F15D5EA092DCC4D49B16373FD58807C44B06016EF5E2670A911AE147
CC5A9756F870A1716B4DC3D868BDE539079576E5CDFFAC34E165C063768ED394
770CF07675657587CB8A56596847362B00E9728B7CF7F5E85673E4B8C4F424D5
94F93A6861828F6251F206B9131C951D1ED4364A9CCE5383C0DD92E3E329CFC4
E2B36E704F5A2E99A7CBCE624FD99A6A452BDA7CE29D9E0AF72F0AAB66DFBB8C
8ADD16BB65D88A7AAD93961976DE90E40187EA775CC79FCB6654FCFD2269F2EA
7951C85F49D40AE4D7D193541D0631D347B191536A6557B5B8C874FA44E71539
3E6B62F58F9D3B055E3CA3FC5F586E8D1B006E523AF961E9C9893E8D65DAF13D
26C24BC276BC5F72AC1343EE49D70ECA4F25F58B6C3937F7A3D8165EDF4C74CB
B662283EA3FB859F2B46DF97AE05915E791F1CE849154C53C441EF100B3D3F74
36A5F496503A3E108CBCD7AB1104D13535023D5E0F563059F9959F021413C8DC
613D035D69EDB4DCAF6F52EBA08FFC62384622982E88BFC0C20B422D4B14971C
6890397008D96737F48EEB999FCC8F26AC74EE09527348E31E31545F0FBAE081
3944C8BDCF6E32FA15B53C70BD06F06681193AF93A55066E8345D531472249C8
FDCE5D2CF3A342C8C3E0EC7846ACBEEE09B1C6048724F4AD47323294281412E0
33B051DE4B5B54076F7EE652220C5CD20A575A917C9E7F9EB8C5D400FAC3275D
E7A1CB64B5D1B5FA98029D7BCAC785BBDD2D86B42FF91FCE7E06435BB2940232
8654C6213212E127B968C9D09176613CDBBF70DD3492B82A746A18621FCEA034
C5478EDDA7C1280A05B1E32B4537274E5102564EE586F97C1FDE8E7BCE01645E
6997373B2BD37B09BD7BE26B975CFB5F1762444C53CB604A45763B67768AC526
1DF9C7E081A7F60049B0EF4E1912DEA25281CE4DDC8BE953FF658A1117CD4434
A122D6BC79EA3A1963B94B9903CD874CF329240A0A080B93847EF4A6D9FE1590
71334AFCEF5F9F56BE7AF8FEFDD9A275F88659D2ECB70F44FD2643BC95F886D6
9F8E5C9750C4C9E76545696CAC80421363FD81AB15094F74295A600EE8A42977
8B0570F27487933DBBAA82C5904BD2170921D4B2CB846E609078D5527C1141A7
903C924ABA53A4B5C7C390F436CB4C096165F9F845E184CC0594188DC4771B89
04EEEBCC20BB62DEAA105FCD48375C11A3207B5A381FF8E1C1643FAB51C16D1E
2C79A7488B9C54BECCF570BB1321CB3136656AA6256F36CB1B93A8AE9E43D2BF
759505E1F5F3759E08318611701B27F723F3786A03BA8515285CD7FB6640DEBD
ACC45D477D8788EFC79A0297F6D18FED9656B074B08F2CD31FC681245C724A8E
754BDA7CF80902AAFD2B6018DD0680B43A5AE7900B43027D002C318363FF20B5
A0762A4A9A546A212DB60D5242FD1C2D25BCA2B4E479414E699B812685A5890D
C3FD97D8C2434A8886D583181CFE693F96F674A02769B1E1F51667A11F7CD5CF
8FD053E67223B64D740B7B5746E193B5F15C9CAF3AF3BF89D94C253CDCE59227
2EFE43323DFF913D8D5F9B31D94A995E77D369B625ED15E573C039463C85D6D8
0D2E3F6E3D9B0F29434DB3C314312748E0A60E83AFECFC0279ECFDE314BC8E0B
6C0895146C40ECE0760D71E25054717CCAAF6D21D4382290691DBA3D105FFA49
D59C844204CC485B2C61FD26C033019C4ADC916AA6F4753081FA1D94EA99EC33
7B400379BB84FED0BA2E719DD6558D875B609A4EE8EA87A10FB585990593F20A
35C876029EB65E328BC84527AC2D1E06F8F45B9A4E0A50A5974B4E84FAA55133
861783867EAAF8138F4275ADEA0A3E4C5F2162ECC430C5BFD22467E3B7B7EAEC
D9E3E13E5A06C67184BBCFE30B3C2DFDB8B6B023CE7CE84BF2C517B5295BB70D
0AE365DDE57674C4C849CC0D1B54E47D44B807D264B8FFF9E4D785C1BB721B91
E3B18B10A96E8ABB5CFD28CA18CD9013B79779DA096E1F56D87595343D1C24BC
1455EEF8582ADCE366A721AEC716AD2358AE18DD2EF7767E50C44C91D9277A7A
CB3C766C747C1997953D2DE0551410FE5FCC36944911C50C1FB0C41FE10B6AA7
C7B13A244C3D76660C2C850DC2F7EBF48033C4DF64BF191F4D7FE5616B55B114
7525E3147648B24544D4D0D280C358EA9F015D31C4AE041FAB38A00EEA61310B
34AE2E68859E771835EA607E168019FF408B3C783D0712BCA10A436108F0D6B8
7BFF46E7E197D8541D72B9EA99D6F56F1BE23D9AD3885E2CF29FC8866B0F82F1
56C86BAB9E9909EE52CFD9DDA56E43B43EE27728E64F94911E78F99023106688
8CC3CA21D9B855B941930D94B358A511C38C5E844F53F8CFC95AF3BF1C79D435
EAA77D4B05540EDA577F3759A940D23E73451C967DC8F3AAE36FE01A3E5E6CC4
9C79CA23DC10ED8071E6144EA6111333F510C73CD12533D3F6BFA0FB13B4243D
0D35319E2C674C07B0C87EA3885BC505BB0A5E90C2468F5262055B889245BB66
61679F7EF91967AF17D2965B1F179889636786080986379827EEF74296BF99FF
24BAC582AD3F7DD4F42C692F7438519AAAEEFDD8CC4B007EC9B5F8E0E2CDDCEE
93246DC5D6C0E5FEDE726183FDB6FB5F3E4266B7D327312EFB770916FBA909B0
B1B4AD97C71B859F5A7BD0993656EB9C77529C2FA8E46D297BA2444DD1B0EFDA
F667A918171169D8669C543220F5DC38E426811BE86A560B49BA721CD63D7851
AD2C798E665514BED008E700D6EC1CBE47E4FF8D63E30816953BFC6CCA78DB0C
094BC82EC4F0BC92833AEBC1FA71AE1151B6B6AEBC41CCFCACF35D9DECEE6F9E
9FCD62886351E76E7DB866A2DB1B877D064467A00156D51F4880ECEC977F9C78
F5BB09727EBC06D1830262FBD40356643704BDF21BFFB63A8B9F41583F75A2D1
339A463F3110CBB61942B72B6C3358D293ACEFB6E1E6D586D24DE37560AFEACE
72D47D75003B5DD518CA905BCE5758C134641EE1F45A328D4D4CEA17E02BAE7A
41A843506617240428CD183D707D3F0E3EE831F67EA52C8B139B17C63BF11DB1
6490CB6A70FFB9477393E78CC5659B3C74C3E4413B7117DA0432E4E6B15F9E8C
729ABC94169FC54D43DCE4D1DAF64129FA4ACA397974F9DC6DFC201FE269C7D7
C8B7AF418AEC4A814933845904538A1ECAD88442E6DE4B8B190E5B339E0B863A
12A96E832D92CB6637E3FD8D108C4CBEFE5BD31C5B1440553778805FB3B788AB
AA6196B5480A05846A1A8B40D3229C18FF6237459732C2BA6F48EF90BEEC53E8
8FADDB38686EF45E9EC729609451258BDE7360066362DB24465EFBADDE963B53
79E668142F32A60818E661E1454510BD9D6B538A26884C0BAC128B7D4D61C2AA
87093F0D9188350856B1FCA888D9CE33AE1F7FA543F7003150A9821273E36333
545235C249598578CC1C437E81D737DF5B9B1CCD76964D9633EABF0FDC11E056
4EAB95A2EA372DB1166A15B52C58782334244B767EB7651FF0B70681E8AFCB58
655A8D62BE4534B8C23B409B7B3709B544C8412F8BF64200498E4113B5988AE7
1B8CB269364E8216D5A4DD597644C8AF59E26789B12EDD6E57CBD83348288C77
8F0F49D1BAAF42EFCDB978DDBFA299B671DFB0158C60C1489AC0DC98B713822F
634A96C5D1923710DB4B98B063FA07A6AADBB5380033BF6A3FE89A498F9CAD2B
7BE121B350947C8C128DA6C06130F8B2A4308C2C84981239F9082CF9B7F3CC2B
907F2FE359684DEC4184E12F59AD61B91EAE29342016D1C381E1215F0849BBEB
95D3FF126E33B027C6E44CEC46B305D67E5C253CDB908754242EC08752684C66
C94E84ECF4F361EB4E78E836D10D890EF1E6364930B4AAC76A132C32DCBECD22
7134E7F747AEF8DDF2251D3A910DF8505ACECBB6F919ACEC8D5987FFE429AD8B
E86A783BD5E0935B9AE0C20F25A9379E3924A75558CC691CFCC770E127C526F1
3C85859D999CAA04E1DD88D0221D57D824D250AC3F036BF57D173384CBD15CA3
930A5FE314604E8D3030068C37DBE71203A78F22D80EDA1C25246D67CA83661F
E8E8FD33169BAD40D0A599D118553B9453812A0309F59554533FA55762A0903B
56650D1C335E72F02ECD0ACEEA511B20D4D5F72565C43F022989D8DEFC6D8A11
0710DDA85C1C163C513D25B9264E3890AC262C0271F92E48176AB5869BC6CAFB
FEC9685CB5E954ACE0BA4C073FEAB2A26E2026461322DADA1349ECC4AC1435BB
63BF85BFE4DCF0C8E75BA8EA33617F1E8ACCB70FAF13402C3D640582C972655E
CB16686869E6DA6416A191EB54F16863203613AAAD505CCA785EE521B5D53A71
599737ED09A882AF74475DB676698CFD9496C05FE3C04942E099E6B189D86549
7EDEECEBCBC1BD6A0E937A7D9F3B8186EE2454E318F5CC571A951409B0E69BB7
A0E3E33DD8C872A32D175EC93CF8721B7ACDE3255CA12ADE1597716DBA03B23D
85CC8B701EAA654C5EE74F40D1EF212100ADAE07838F53B0B7C64331A1381632
3CE989E1CB8839DA1968122EEA8D652BE7479621A99C4CA4F8BA75A8B4B3EB23
7EB85B600FD483DA2A8717A30EB97889490536463124DFF7ACBDE3E03F706389
6D3B578B21E617BCE692F4342C634649B5A2CC15CE58596999BAD415D255D54C
F0086FDEE6B7CB2EADC49766F44593DF8E62AEA92577843CB580B537134693F8
E10D7441766532D5E66F956B857291BCDA9B6705F0B062A78EFC65E27E56CA62
8C26CB1751E6F6F923C9B8586CB87E1F0CB44384DED0AD5DC07343C220FB3EDC
22E56DBB5C5C335F34EE27D153A515079CC4F3EC104592D3D38E10A40C93CE9D
1AD12ACB834856A2A46D83CC900DFF2B519493C9EC08DD2CA9EC4DFAF3F3491D
3024502E3DF760580C0611285614E47D092A699F1B16C8ED115437A8EA8CD328
F755B3DDF0E45977B41B9BD11B28F3A10DC9BFDD5FB6A3EB94F3BC025C012E85
B2B1C1D5159025883E3130C6536020AC19161569BDE0D66D79B090D239BB28B0
4F50B0A9D03480566E36545DAB1BB0423C34755F88AD248784077983794C228F
06268D28EE4DFC8498FFFE101EDBB87AB3282797BEC19164512C80D1C6E8822B
8F54C5E4819AA2BA2A55A24376D02217FB64BD239285BC326D3CAA9EC3EFD2FE
0CA35B333D281640515BF9C595EFEC75E4A2868359410E854CFBF08142EE7FE0
DEFC6F7406A4E490F840211D1F114AF6C6B54AD528D7AFAE4A2886F5E84FAF82
CEEE9A057DCAA4F10CF2591C26137E4959F5075C8B11CD6EBF9453B2F632E36A
15B373FF3FAE53532AB7AF4159D6E004CA0EE326B90C882E7CA0051D10AE484C
E46C34676C1A750B344A8C867D0962CD51553F259F887A43EA94DA0BC7370137
3BBB6375EA7AB2ED618FF041EC7B061E721B992A9FC9C9E460A62C80FC2A395F
3024BD2B6A429FDCDC16A22EF6E1D59F1CC4D51744A4589F2F2BD5BD8A16E336
83A8AAF33E89571963AD2AC7E32A57788B72C63378573CA78C55814D2D07B6F3
9B40F92A0246ABD157400F4077DB45828557E83B04E9F9299E942B19133651BD
AA2896438F454BADB4113F0EF44976FF68DF0865B18568612661F780459D9932
AF482B5E2351E3BADBEFFF2364DEFBD41D7DD1DB2BF35B1BD23F1FF599194A04
4C58729D08BAAA7523628FE96F7F0362A7A748A63C6E8381693653CBBED7FC04
BC28FCF73166050117C783D9EBAF4494599CD605D3A0B3369005E3FE2921D320
22B8FA27FEE8419E3B471927181FDF059244CE34C8E2F3833A4629268F228F0E
DBC59DE4F648B6F6F9568EB7FEEF2740E3E8E5AA1D75C661613D0115B97087E5
4DB66A90D14CE9A560260BF8EFAE3CEF3EF3ABBCB3245057BD0E75F70B0F06F5
BD57F5558E2D268CBAC8157093131FE3480AECA4FA8B0D525E849EBE299A1E0E
B627FA02947CD7B1E2803CCFC1C9FC24FE405FDE28FB8FEA0015CCA80C0A1673
799D9308C7344EC8A500CFA0EDDF6A0122789BF66501B14680A3B9650D6C29FE
4660F955C6F90995E1895A56ACA672B233D05F45F650BB4F31114F6BB6EB3FD6
4AA40D1E89750D1C3DFFA8F3AEAE7FD7AF2F2D88EDF90670519FC2E69ED8A26D
7649564A05519BB0C8190FA1FA8C8A21B412B32B89A921F1CC4D74549A52F36B
DDFA8FF067549F3C6CA9E8E0C09FF61E9D66510A1A86F80719F3D684436EDE35
AD651D86A6FF136A085FEF3A1F8AC88267A1B6600190E9DB6943B089B8C9C706
DE4913341530195AE2B431CA70848A0A6E9EE705C681971C9CA65FDEA97EBFFC
01B4B0E2D6F3D6E3D0DC8157A389BBB3C8C2D91E42A8F3E97D7D4379071D6372
4F0DB92AD644231316B556A0CE5245FC6B370A4759C550C932FB016E9306D1FF
3412D50494CE236F4B282E98DD79FDCDB74F52700746CE527470F5AE4D612948
1257F780995ED7B53920D30D870F9CA2E83DFFEB7E81904730359D72FB1F64E3
B041A69B2440F44E78F4D0643460EC9526C92A00ED348D40DD39B82CF758B5D0
CAF8AFE2FC900790F7F6050818D727B4FB3B43D61D0B5A2CE1E2C033D0CBB3BF
6270622EEEE0025DC9F80734C14F8F8D31B1B2C357FAAA44467CB2180AB1DA31
9C568D564C1EADCB680887270B731AC3D9191E1C1735C9C69FF9B6EF2604A9F3
5B5DBFE2EAADFDE26D83598EF52F4B16916E28A58257322FC8F59A6B5E670352
6C18F4FBB1CAF8E7A179628E5902565EE38D5F437D02FCE19A28D43710781EB7
D551626AF1115752193778832541CDFBB94251576B80EB8F69200D272C713BA3
B6125909D055996B79C2E6795E23452881DEA6255133A2739593AD4C8FC0033C
EEF644ED47854E3569ED522FF4E9D3D8E6936425CD45C0A5A4197BA038ADB36B
FB0B0C5314540D41B177BFFBD9B94C2C008FF74A20138BEB2D0F6723C5D44953
0F3734C2B9D624AF3E43BFF510B167E3DAD248A796A43EA25E34BA76F1681A32
82F7FC211E17FE475914BD17456E8AEED7CF4C31FDA73EF6DC3734B5631A8F49
0EC502908EC4853FCE7AC34FAA127A4CC960FBAFA5617E1CA933E7FF893E32E1
54B890317737F63BF13ABB3106F54CEB953F0C16D9F1CEF47274C4690FA06094
5A958D9250B329ED72DFFF1413E660A1ABCBB98413089C1070D7CBAE9BBA72E8
2EF9914D3AED6D1A553A046B8A808785ED46B2205D9BCAEA85DAF9DFB14F50FD
68B1C477283355CA6B6DDDFF3EDF5695B18C9C855EED3994D29AB852D3A6F174
8B19BB47E2ECBCCFE3E108892F23FEFBAA980A083B0515140358DFCE77A8E271
A7A260E60CC675EF4B6219CBCDFB4ABCB0F054105D8FA977F5E6527687CB32FB
0534E1037F8C4C09C1C360D7C8B052084E3B91F5778FCFABE50C7EB3E59331F6
EBE22AFFD596D903391B09CE71E9CA9FC2AB4CF85048789BE20BB44CF4AA1D75
C661613D0115A256710528063ADCBEC519652AFA535D34DA0AC42B92571D1CB2
9578D2689393C136D781DB67F27976C6BC954571D87D79F99D7735371FE5A2F5
46D8B642352E4E4F43280DBA9A840E37A7D4CE1BB2BE4AF7B655ED7915395A1A
52DDD8F6C69AD7377BA9E055E337FB59EF89B24C28163F9270AA4C95CA0F5C0D
6E65497F9C3810DF01720DB290D43B3C3D641039548C28B071C8B15143C0A3A3
C21733B85D1285B001D05DD3B298B50682EB172AF785309A86BB40E157B7D8F2
428305133764B8D3051BE747C134397AF98F26AE6BE96B9D5F3D4B12003ED61F
BE2EF02182297C5262ACAA578F342036CB343FC7E6C72759F1A39580FC0C2194
4F0937B50FF1B3DA27604A975C2DB6FC1854457C67C54DC08C86DD9B759595A0
D8720FAEE6EB640B8F454653B262CABFBA1B75FC1C5036EB454C8FE7410BB44B
E3BD2F4304B664B672BB20632C49E4671C9168366BB2CA30F4D80D72EE1168B0
E0658B71C1442E7BF4C1C343358685BC27282C4891BC527B886842418EA1872B
C169F92A89067B996412A8903055D53313DBD1DE6C8937D66B3714B8EA3EFFF4
99C10BBFBDCF134E1D1EB8B314610183673447CCE1147A844A7DC46DFC69EB7B
63E6126545B566CA3A842CA147B30FA99C4C8C7BD336D401F5DBFDE3DB3135F4
4435371F2AA523BA4ADE325CE7E648920DF308FF9CA487D6FE20516B67987197
DD3EA3AEA9CA6016022875D30AD1705E8466D477FA68DE359C068952311D760A
1F9677A2EC16C797B31B0006D964EE87B70841BBB0011D8D77A9FABFA9E50EB5
6E29C78C0F5026AE72E092082164BBCDD5FEEB9AD584935A58676976DDD2B6E1
18FD1D459E75630E8CD6A2E4D13A42A534EC7EC672D7560AD5C154BABFDEDC9E
199CCB170BB7DC5A3B3CE69F746B0E4734CE9D11F03050016897C740546BCFBA
A9E568F4B42D06D61AAC43F4EC19D387D38B78DBDAA0645B2FB1C9E9DBAA6A8A
1388C4604675EA7384F3398E49404AFCE19EEAD4AB54453E6A4C7B7F667C14A2
84047744C14EDA3CF0899EB14AAA9752283E94DAA8F0389585B31F61BDDBCFE4
744E56631FEB5BEDACD00C64C344DC67A64619744F8774F19CAB46BEE6168EAE
D2B0EC9606F6300D6B118EDA378691D5B8848F53054E2AD69FAE9FCC6406FFCF
C5CBE5D32187979E9CC09256FEC0FE2F17E6C5678B877CDC10D9E3553DE260FF
D590BEDC71CA9AD4AC12B09DD2B76366406AE89584C3B69E74BD5CA1B86671E2
56B549A16056F16A6DD8DCE17FB1C4102F4CE765D3EDEF408EFC2D7827666A8D
E5559C813CD542561E3AB5F5AB0C66D84C7BC4D54F94FAF28247662F3C670A75
D4877A12C40063EADDD822C4806C9910021263EC419BCE1D83330356A729387C
6E48EFC3641A1DC59A816C933FF53190481A14F41C3932EEE241576C9397E053
45B2970824C466B4EB9D9218F95AC98AC233A666DE1833C3B8E3B75C543E0664
50EF056B6191B336AC4F5BAB387D1039A1379C374B81944E671E72CFBD77CBE0
A9540E7C74C6229923B996D528A1284C8682F34D6770BFA80EC7377F7EBD25E4
23849029CC7FA4F2661969DB73D0EA43B6D02E468EF44C2839ED818044CF3C72
C12EDB58EBC740A1D4C5B764583A99842CC3543AB90DDF913048E7A55C4F9C57
7633973D5A09174875FEE37B87EAE0447EDADEB00764A38DAB429277B7786111
434F254274D012BC8E21B5277ACC63EB23D7C8372A8DB108A61F2B9B09CDFE58
66948199CA27C1838AD7DF50A68791DA15FF5999A8A0A26A1C469440C75A4BAD
67EE4F7092710495D7A30239E7E76EFA9CA18600157A0041519C647AC14E7625
D8FF646D135BF584D4963DC5BB66141843B74BB321203363B25CC3F85FD73375
13520DA4696FBB73F3CDD913ABFA47B30938935CDA0B2C4B6EB150F28414C6AB
C697D103B20F96993C62246AD172CF9DD1B8DC9E23D1751721FA293BE262D475
D50A9E40FF7BC1C8059928ABE24544F41569DAEB20C0268E6060A64682DADC55
C79F30CC5F2B3D73FD3EADCAA549DD1962C77742A8C011C9628BED9C7AD8647A
15B3B89B2A0BD76D2FE72FBCF8374E8332B98D6953FFDAA513D147311B7C07C1
7737878305488298DEF3FCFB79A08ABBDE6C58A8FA419F310AB8BD06D067F53E
41FBE4352A2FAE18AFACC74586D3DD54067F7779D9DA069D7F7AEAE4217D2B46
589A60E0DCCF6D71323A978165FE4252362EE061BBFC66180409995938F9BD5A
6CA0873B281F413254CD261B5EE00CAE374CB8D196512968B2B59A3C825DACED
6F47059CEEBBB988E953AC22110E3366BD0CF395DE7334E31E8BAEF4799FF68E
DBBA8148EA7FE0116A23E2EDF90AA077E3000EA2A3FC5A51D3C1504EA06A55D1
1929E44C07D03436CB49F934EAD47B45692A4B8C7C7DBD0A6B4CDE1903873187
DA86D2C1B5D227166FA66C46EFBE1744123AC8C0F4CA8C980DB119518F891429
42754711D99A68E296DD3E74E0DF56E079235A8B3DFD65EBABB728E5EA5A8809
6175F2F9D4AD0E3F3F3A46EB353D9C5E5AF62AB7BC7DB94F56A0800FAE7F4A95
2BA5D5892EA84F4D412B79E8BEA7A874EB87BB445B41C3AA221035E216DC0969
4D2406245E84F4D47146CDB5CAAFA7675AD2A7432584FBEE461DF583D049D68F
7F48CB8C8E938CA3849EEB62CE49814E7833AA1E9B8ED51EAF814DDFAA053929
1B9B8004F29F21B2A9D8EA7F0DAD254309BFB782A22C8D118F3CF7203C7C0C19
1B6A7AD6A3573727291F2D47B02EC7F91571FCF8978A464394EA86B313DEF714
A1468207592BFCA2FFBB4B083155753E24430BCE1CAFDAD8FBB5062803C344D0
CC32979A1EEEC4AFDD3218AB9B7BC8F7037F433A0AB962F52147208D99D0355E
1C317DD3AF44E46800FED97CA40252808F6AEC7AF26448FE10D773E106008165
D09F007ADEA7201CDD72C5934DB6FEA0D11600B36FE9B419C381D9CD3C6765F6
2289B76EED40845D9AFB54CAA90EB44E4C1819F1DB5F91914F3BA09A3ABA404F
170CA67DC4F89A5F4E07FDC715B4CA9A60E233CBD4306186957AD9A2ED31221E
17B36245F5EE5880A5A96C3AE145E3B8A7E61BCC2DA35739C0F3978630F65EA5
D6637D5F9E3781F9B21AA9AC2C8540EB649018BC811251901E41731659C69FED
B4D6141C52878A85ADF68A6975BE0CBEFCB2C3C34A650FE130116B4619A4EE1A
5CA99AD4D51FF975CD8ADBE47F6AB4BABA967D5D2F30D1986CCB571F91D96EC8
DFC16E97A585104F9B660EFF434CCDDC96CC25E9F54CDC9E19D96784A8D0E78C
357CFE3565DAF031EE25D893676DE5025F54273442FA852F66E1E2044AEE7A98
C72AA0DF2D07B6A45D7B8C2E43E8716526220CE629452D507C04521B419578CC
7824C639AD06CDE0AF594B54741D1FA1D73008F25CC6272165A2DBA4978322F3
B706D42300C96FED215BC897EA0C66A69497113958A7DD2A69D1C3EB0FD63FAE
D5856A628A9B0EA9AF81B6CF75F8109E9C4CDAF004A942C256401430119AC825
F0D5049DFA74A19F38BB8CD6B8D68D4FC3E80AFDD7EEED74F66BE8E8A733E439
46EEF72159F34F65E8FC94DCBC1CA521E7D5EE19CE509B1C148437E175131C8C
C487F7EF853BD1E0232AF3C4A673FC576B90A6C4DAD6D6C8EE07AF682F925F01
D0B267A79FDF8709D217496E3C3AB9B3DCBE200EEF4E11B78D5D15E356887E25
2E8CA463340490CA6634BFA6F5B741F3CEBABB452DF2ECC9744C9C500556EF9E
B6764B4F863BB9B11E8143685306D4F13356AE0CC1F19E342389DE76F11134AD
BE2BB894EA141B160B3A6BB1A35F0E7FFE0175943CAF8038C03C574183772552
01AE91F48B7FC6E20B559CD4BBA960C6183A0C8892CB53E6B9688648C371C2D7
977A09FAB0C4870C8E6F613285A713A0057466951D4289A675DFE39DF546A3BF
F3244C90733BA17E4474563D2A6D64D19957837EFA1C39730568765E65BE310A
600969436A19AAAF7D56AE4FA0CB1089D002BECFF608D7C48CB4B342B148AA93
A8CBD31ACE5D70E4A43CB1C2371CED244B3351B9191D5B4BFC8561888BACA0E8
16E75AFDFE545C48C4790C26307CF36BE94165BF7F298382CB995E54CCF9FEEB
5217235B4CA9FE994637CDD191B1A05FFCEC61581A4B4CED1CC44BB69DD41DE5
05CB7B9636572AE1B2B9A234F394EB619D4FD9EFEF43C493380A7F2C88AECC33
67A8436F035D79715C69709BD5C0BD5DC410CC3B9E512C5D4AFA34D00B7F74D8
945AD99BE478A7B6872C8C9C6213593ED56FEC6D5E9E8C3F5912BE8474A72CBD
C5810412ACA2F4F7436FA46BA59CAF8942965CC6276EA61AA9465BBB3A56AAC8
D14E62B83EF68B2BF03735274F754906B3EB804514B98E6323F36019D2A6244B
A3DD711DCA361EBF3DB4F6F633CEBB85B13889B2B07F4D3D2A68B2366102ABAD
3D8ABE1CFB0A9DE45C80EB073535DA36AB230E3D91EDC1384F92AEFFB951432E
CB0C0FF79B4E98495C38C459297F3E0DC1BCE6086C8FBE03EC5B28D8121A2675
BFB1538011B31D5E979F321E6376ECAABAF1A0950A2B0B48CB4A468D6933DDED
A6049CBF794EA774CAD2ECA4581BD58ADB6AB154DAE797DA5AA412E79C08908A
0030F94AEB435C0C0C42BB0FFBD01808BA4751D30E41266E6EB98B56C4E16D6B
61184BF749387ABDF77281ADF83C3380A5EF6871CC7FF4A8DF36A4519AE3CA88
5FC826D7A9FCB11694B694508AA46D937B45812C8E9EE7A622F66300B69C5B27
CC34FCE070E77CFD528B2FC34AB914C268C8874E34F01A8F3E17F82A30211F81
404A39FDB273B64ED685BB2F05E6532BBE776E2610493E9AB21F5E97F57D50A5
A4AA70289F6626E197ABC07FABD5959EB539EA679132F12265160BEB32E8BB28
38BC4C0021571B3CC54019500DDC798B57B6D6861217818CFD111E32142FFB16
0DB6422A5884151A472B3EA5E1CE0ACD8EC2D4647F2207E3F017531D8DAF15AB
B3D32F030C155D3A2FAF6407776001F79BD11779E3CC10D67C4856DB7836D1D5
8214E74109B47B0F8F4DF292AD0D03D5DB93CE19DEB7C60644ACCDB4EDEE8DBE
CA7348746D0F1FEF45942CEA347D253E10733C2AADCCB5B1F7FAD9DE513E0D6D
14A3980014FA109C9235A7D5517B302E1EEA4F86EDB1EB6F4647F4B1AEA267B4
E0A71AC02F7AB3A1DD266A5E7349145F1547C49AD1852FE7B9BE40C56399DF92
F05CA2B9F3BEAA26E847A40084861C179E35F62A539E5B69070B528273A68527
8C5988DB3A19EF0F116D6062165B9EE0BA0C870AB44BB1683934B14B2D7AE02B
2539F6DACD88AD99A2B686FBEC34A6F9EB9FAF8E184B027F08FB8C4E85D8F183
D2C20E7518C87F222163ED92044B80E0D7A1352D7D4274677B103477A30F4DC6
448D322774EC3C021801FC7A6AEF112861D3AB790AF57125516DCB203D476462
BFBA16499036AB8F8038935AABF0DF9B431F70B6C431AF283A075F482E564D45
02F7290E7562AA10DF6AD4BC9BF80F3188A55927B45C8071169DD47A3437A02E
F556D9F32B061E78C54C742F886D255DEC9052E9BA886A310021422BB4EE6666
B0FF61E852931EBA13F01AD5AC9D6B528840E8C30572AD06D6EF7B0ED471DB94
1811EB43FC9C9DB0985ACE34A56BCC27BE0D5852C4AB7901F9408F164B1A9B3C
176A090A9F6851FF9FF10CFE04F29B8529AE56BA0FDFF1E76B74CEF2C452CA23
0A1EB00791FBC4299613813684DC597FE51BE13F6E5753A07954498CA252F9CB
59DC4B0FEE8C937A0920796C09CB74B3EA195260640BB17710A5ECDADB2CDB17
ACEFDE8AA1B6146750982909CF872FC9564795593A72697DB76C3F7613B1DEFD
C4FCD4B1697443A99FFA4491F2B85D31FA193F8A3BFA3269233B7E735477BD3A
2A4CD3AF4410331B1C3EE91B3C44DC05BF90F7E1C0DC50899D11BE76EC06E206
82EA919D0D096D862AB1F528ADC04010B860F00BC18FEBE2A5D39472772BA555
ED48BF05C8BD017B134DD7712C432BC9C838003D02071328058750BC7E6ED274
5DAC7DD2A7A9362E8EDD114145042751E6A5DAFD97118D49C3A85E43C6E5A4F9
9F0133D4148F48ABF20439F99CF5932F16251FD20BEE1A1572D7A182F0DEEEB5
96F457B7FF96502FE6FD8068F002D6E1D9C3FFE7E5403F304D65BBFF3CD0CCA2
ECFB00F9F098AE65B317C6D0B0C465B58A826AB2BA27088CCF6A8F90D91ACA91
3F1D146B2FD520B18100BEE64228990E597E21FC63BBE8685F311F7AEC5A6889
CBA54B96C650A14153D4FF9DB92D17AF7716CC76572FE440D7EDC6EBCD2AF0D5
6D5CB3D90AE89B34E97276C8B62F82F71EE259411685F5F363A593AF58BBD0E1
2AF914DBE32DD3C1292D965AA7AEE47502E9292ACFB5502C46DF4A11ACA54D22
1B44224932D25E0EB50FD9CC1979414B141B0B14ACEA0C0DDCAED669667EA791
78226B1658D1858CF4AE069BC8D5168A2ED64AC354B98E1DBC60E48CCFD9E1AC
3BDDF3FB69A81F2D36111ED0FA3E3F44DF1BA5F724BC963D3825F1111C442A7C
F2142C5F964052C7D8502433ABBA6374CE96C956BBF7C867228E625850CD18B3
174AC4E4B00BA693AB9974D3753AA585DED842C2A0642F862E14B66919AFD491
F98D82BB81D190CEAB577C4EF72BDE7188AEEC3E466AE803B2C7551DF7CF480A
DF9E9D8BBEA3ECFA3ED46C2DBA5CB3B62838053D427DA3EC5D297AB110438F9A
A9CEDA8873432CE4B46F8EB3B207344F9CA52989AD8A876F13387DD9F9E843D5
1141B789F15A6E67A8BA6CF7C24249DA6A8C3FFEF1AF35C45759E9D71ED8DC94
3D22973255580BB177E7B36E3DCF1C4DC905B343BB72416574240E31C0AF8729
BE4870FBCDF58BAD19C9CFA9D528D104702E4D630EF08E9FBE3BA7C43423D25E
4E26AF9E5B79B6895D56D0E115188633278729806AB262316B6CA23F0447C9C4
AB31CB447D19FD60F946A660DACF72BA7154675669F255FBA16353A2CD596FF2
17E9DC7CF6ED25978A39A007D25FD7704B9867C833ED3ECB005A96DC5D8D10E3
E4A459F23680C0DA9FF7E6BF4298E548FE405D01D18D8B146183CF6F55B9C770
6EA87CA124BC397FFD05B86EEFD464032F15D6FE8A368B398CA9379AB1292756
DF7063140132C3CCDB6EFB39271EA23A272FE9B0B0599D9171DAAEF19F3FEDB6
08C178B9CF687F6870B3A796EDAB73887D327897FA9A2049428812234F087305
0F420D81EC6339EFC594B1438B4AEB72DD3680CDFCE4008A7DC06BF8932E8169
F93C1362FD1CA679E9372DD0CC0E22DE174E09593388E8E516647BA8DE567D17
4EC90945404C5E270D96045A86A6B2AFCF21664A704661344F2B8EDE6979DADB
84054144022BE6620E3BE3BCFF07C029D465A072867E4406262F049E69436EB5
D87D41C8CC50E20C5E61C11791F8E112853F74C475451EBD128D0BDE68372147
1EBE6FECE60AC0DCE98C901A79E3E0354517C3D95945DF4AFCE2656F5EF06079
D77596B4B3B56A541927D99A333D9E01FCDF3BF895FFCD2FBC3A29DF3E1BB1B4
1B9BA451BC6A2A812566B762D71B3368BF74D3E1F6841D7DC0E4C04029A91247
508403190CDC96EA7D3CBEDC72DC0E9D44D84EC147BF10D7D5620B7E87B086F9
8553C19C46E11D885670278DC57C26622E3E317D00F7CDC1800162A8FAEDEA70
FE9FF8902445270048AF917D880A9CBDE8D0EEBFB3189506C88725AC69BC88F9
C9011E152B221568F9C495DCDF759CF5824FAA51199204398867C9C2555C12EA
15627D3B2897F8565CA9AD20BE91860B24567D513AB7F89997F2D04B35596558
78CE5F4EC65F0C387EB5BB488D476D4EFC4C2BE152CBA162F4310FA4CB919E33
5EDD5B5420F58B04388CAE6117EEFF39FE4C4A13784BA4C56400C27DEC7D37CB
0E9FA7C75C9822764668A79F5573C205DADDBD8FE9A0A755D1DFC3B5DC698A57
6FD866D3A29D95011C4CB95DDC48EA6F42670A05B70A70E09B584A692F401CE5
0F6253F55BB1B62C521725EB08CBAE8F55549E803FBA5D5BBFA1D79A0EC77F23
D5978CE60056982DE95C182BA5217D380F481A4A5C8AEF75B0826E603A1C3347
42CD0B02FB9C6CD0E7D3EDEDF7F264E0B8FE7533BE4D5AF59AB9FCE12F80C9B5
0746EF219FD72CE4930153D39058273D8603DDB58EB2B929CECECEF14F979FAF
5720F472ED06F6D538063ACD0123FB5E0A6EC6B75A928D543368E2B60CE90E58
1F495000DA3ABE38B9B044239B0EC78747902942477A75FDB1631E0CE734B1BA
39FC1000B862A671340B87482F3CF3C886F9CBEFE39F80F3338FBCC3BA52C76E
61075A2B5FE518FB4FCC588ADD6EBADCB4B138502ECC96B72807C988CCFB6563
38081018DD7452A1737AA51E43824873E74548B690A53A5544E6AEB37FA6E098
75AAF63AF3A791136E6C0BCA0EF6193BA829B090307D3ECBB88AA4C605839065
15E14381CAA304F10AA59C7F68FF91DB97DCDE55F701A63B2FC4EF005C040A9C
6FDBFBE1B6577633973D5A09174E1BEAE67D6903BE5821CFB8DA9DEC1B8EFA3A
B9C8A92140F76EA8D79AB4067FD5DE5E479B65D9AAF94D22A3B25E4A0DC8FCCF
84F80039AC62D2C8EDEC29677653A7E77A5647F5DE37D46A0F99C984BB432A58
4BF72353B403C21489777F5249D200925AE5CE38F857AB056369DB1C9C8CA1BE
A6302BF431481CE72C419AFEBC3B810509938FF257AB38470013189F2C9BDD04
B7EA8A00B2A42B23FB149EF13F0515DA2ED0E3A18FB2EF64FAEFDDE468AAEFF4
491899540B30F28B8406513C7C1DB5FCB99013FAA7AD09D523F94B442D4305E9
F3E8C9BC4555A58055AB2BC05025350DD8AA6292966F589945A26CAB51780221
C76FD2315E86E3B6B727A37205A152EA678C7CFA99EF68211DF7A3F909CB0BFE
D6F24F15E8BC65D625005C0C6A38D31FA65C4B09DA75E0D6E0F30D3C9BC2286B
6B72584DA7D878C4A9328E528F892DE9AADCF64D801928962C6EC85A9248F9D6
4A34142DE86CD3A89C1CBA7B0B3768CDAC25E3235961CCDC93A8A53B947980A1
EAF120E101F502383CDC484A776050DCA7C53798E98F5C2670C61B3CE2B65786
32A537E9C871617E808D21F713D83149911CCE2064C0AFB4D935B09F36A2524E
6B4671E42BF7C669EB92D9D974D5E29D6F1DE7DDCFB4D96D08F16D9349174E5D
0BF41EEFCBD7CB6C3D11CA62441C0E6B85238856233C584A452941029A8B80F9
09B1C381014CA0145C8BEE85C0C5E26DD94CFB3BED3EB6A560E72745C6371C76
CB92F118AC51A9997CB7F9FC7C61781439FA7E2B9848D207BEF3E71925EBBFD5
7341ADC9C22C5DD59E36A1B3E8AC71C035AB38CEFC1232A668DCD1054C8F7E39
73A515F23F9685D13D221E9EC76C43375A302E5F3371B5C2E9F648224D3E066D
5255B6046176544A47869A64E63F033689E579F2B1719FBA71920862456BE123
2B745025D246479D38E0ECB73664581BA1552F680511B5FE3EA94A61F04383FC
C871AF08E7CDDA69390985D83828FEE835B3168B7CCB53A1D3201066F4FE8D02
407177ABD6058C1B229C589A8FC997026C3EA14F20143C90ED66A6DC56A76CA4
4844FF52188FCA5ED5CC1D9C93F01EEBFDA3AAE3AFD59AE99E43EE31A66E3A0A
EC3BEE1EC6C637C70980958443A77A0EDF7152BC8A16C1AE8739E9B5A4497295
7D0BAF44AEFFAF59A223080231D262A9EF835AA99940CD3C2D703E17F2CABA7C
43753E59513237549E3AC0FD6041E2EB982CEA61C5B2C2D8746FCB4FD682D04B
1B515ECA7617A41124595847F504300B995E8562B37C85E89093EC89B975E770
7A65BA56BCDEB0F3292A8AD108AA64FFEB0CC4106C98873792D6402FA986E4A3
D0F951A935FB9B0E1B24C7ADA6C723916368430E8E490F1E21B29C45B739A667
1E90E85FB56098E8EB95C10BFF8CED2D2454CA2E82AAC3E3EAF67CE693FDD80D
756C8454CA88159946A065184071F74F024B2ED732CCA38E70855CDC67672D13
D2EEDC7045F0C8A2BA0FB9FD8FF3EC9EBD59110BE39119729F1F5517529925C5
9E209BA62D23166FB94F698CF435CD8CC2FA66CAC34B116EA8DED992FCACF11F
F1A9C5C71DFEF4DDC4709FF15BAA52E7DA140F86C7635309B468D80B0B07585C
3F35F585BF092B918D1BF0E71E22CCF91257C049E9500999358EF4F34AA33B42
FE6BA46A0DD8D0B5096A6CC88CDCA2C293E99876565B95E04939A383C3A6CBC5
8451B69C4EF6F808C393D17151A3C1F311DBBF732F656569957DAB363EE6604A
9A6739F6F444C26129C944D8CF173568E31B07F9BFB8CF2AD2CD22B1B00C5F18
1B7D1FAA878E6791D2D603A9F27E558E396EB858681DC8F0C5550E0E081AE13D
DC40D378D9BBC37B2117002B2BB2B3FAAAF59B56108D92A93C6B88162F59EF03
F2F795B78EC105CE1EB6C2E243B3513FC6D622569C791267D856EBDCCF18AF29
60A17893F7DE2AF70B75C68A93085EEB23F894E9590C1DE1E0F680228734E143
1B709A8128950E847CFA26AF4904D065308AA88B737FE56C252AB7402213DF9B
B393C1463F5E79ED0B4849C417D86F25FE60AE5F5F4F3E9AE7E5B727A71B8463
9777F936CC6B9222D3D13C1BE064A276708AFEAB29E9A7CBE0BC90D0E45B0149
324F5118B687F2A5E50887AA1B0D3E5ACEB5EDAEA605AF5FD1515B5B9E07C942
55F8E33BE8E1BDD9B5299035A87E10EED07022C5B15C09B013F448ED78EF75B3
A436BDE5E0E971BCE94F16964E6C441331B58C90BEDA80A20AFD40A593706F97
54F6798BA7B8225E8763679D012D9FB774FD975DA96AECAF3A445FA0805AE960
D06C87661AE6FA826C74310CC61892A3BD971AC9ADBE2AC9CD8C50D9C64DC486
4ABDCCAA0EA52836F9A1C61C6E923F8EDABA12C0A69DB20CADD63A446521BE84
B66A8A00C6C80FB666FF7AA184F28385091416AD1C42A710843F0F4ADE5CEA05
8D0FF5FC4146CA6A749994B586E2AF6A25189EB85B54909A4D869DD15187C070
58BE05FFCF4D729D7E131335C212B30BA91220BFB289D603D60555CC1665B045
8EDC336CB029F5DC16A771552DF66D4E9DCB2C7BEEDC4B8B17CEC6B8A2A721B1
159B486E3B1B997E713774FC45A17D1D807C2821678E4AAC372F288045CF8C02
70D67A894C424FC1C5D325DE70D46E7FCD28E9C421EC9C40D2A84BDA0CBE00AB
7F6A82B397B4A0978FD1B74D72C5510042407C181ABB34B017B06D1A83752B2F
3CB7F2F59C5E6A27F6FA07D78FB8A31579941291722A40DCBEDFB17C17AA82FD
27850A3313161F019D0006A2062B56C09CCF2D36B6AFBC9A8BC4C204CAEF1005
1930BCA8DFFD1B5B42F51E989C3F2AE6D618B52B26A2932A9B6E154DB8185175
D6D76068CBC78CCBD2370F21E14941B8E5598E11FD150FCEDB395340BFA11A10
6FDACF6EE6F0644D4CCB2DC64262F3219973B50E022C6E52D7175A80B2F60AE0
3C2D3333B4CC1AA1F4E87F1F184F6819F4D26416C3F9BAF725A09690102DE366
BDBF007C713A7D9687EFB4149F1C4C289305DD002F50F36A89F0400BFAC3A533
E44F41CE820B2E03D0E0001285CC46471BBEBD35B275F372BDB8991A4F6F9B93
9EE1663FD02D1E1D74F22C4DA4143A4A325EFC85D08E90341B411382A5986E1F
3DDF5AEA237766CF0117C0EA512125DC02C19B85C24B38B1B40D53E8B9CAE03B
1AAC8C7642DA07EF2F28988112405F80F2BF1B95C6E76D4C38D855CC53AB9F56
68272B4E4BCCF9E2859C8D2AA2DF53F6E853C7037FBB63DB74A5D79874B1A99D
E2B5F25E776623F737A0D08EE122DA0A83B36C92AB2C075ED47DD6FE8909C387
D8F02A88FD24540AD71E41AA3AEA6D9BC00E54DABD294D53D398EB58F6EBC3B7
3F2EFF0BB60E683A29AB26EE2212726525E9CCCDC176E311F558D7AAA907B07E
184AC36B9EA24D41B1E8F5C65D8AA5DAC605AD4D917B947FDC6CADECA9923BEE
9819B7BB2D4909BD384CD309BABDCAA750D4EB29CDD4C3023D0C3C21CA3CE3AA
87BC846A6A8544D12FA1F6B1551E058F9AFB7EC8A7FC8E6D59B712B2AA3D79D7
1651D841E6295881A5A2660DDDA4FDCFB7D287BFC8E2D7333F738D9A4D2F89D5
8758CD61F157B8B4B2DF93E1D5C9EF0A8E75E50F79DEF4214D1B06233B3DCF70
D5660F5139493E65D10F64075C5866112DC0A52DD7605D94EC70ADF9C6432929
7ACEC68EC110003C72674A561939FD225B77884573AB874D4FB7581C70826008
04F5FF6E95F29C5855AF17345B6FFCB19149F63FA692BA8A0F0DB23B4E9D451C
58D20AE961159541D5883F8013387FE7120FDF1359EF2BE9E1BB1CBECD806308
9643D29F55C86AE9BDDE3010F700B67DADB0DA89B7150B5F9D684F617862971F
5FEDEDB989B5F62C9D5B645EBBA92EC6210B4F17C5D74339B1552C248BEC00A1
5EA0644E6EA0B2D2FC45B20FC80FB6CBF1CB66B537B5E672D1B887358DA0D763
70C5F3127874DD8D53CC0796A4D3530B610861902DC88E787B778A21280587C2
C90F353110351E4C478269D554E1A862F7941EB0EB4A20DD3F2E7C5BD0DF097A
76E12AB8C235A81FBFBCDB24C77A86286B1EB4E713E3ABE342A81D178A78777A
327DF7FC838F17527BC099461F3A9DA8509E7EE6AB98B4BB88F674096F329225
2DEBD64356E2CB8A281C5CF3FFA8B209E521DE6274A7504AB00F13A01C946ADF
6B41D507923C9C349D74EE007A7C6557A15E3847CD8BEA85F0C8F7C14AFE26DF
E6CB7126D27F5D3AFE9926C2DE270DF95E563DFE83A7CB3B1E712F81E03850B8
16ECE7B27F1F3334AAA50B56D05D29B98C9D152D6C0DC98BA21CBB8646ED8A27
ED6D85F54CD9206CC1633B932E6B55BE6E7894043135CA5F674B962AC940459A
AD19358E64A3B49DE6A4825B123EEF8C0C510EE9815477F9851F71FB1FB61B0B
4E96B4C554D8A71310279FC728D502D59CDC38A4040514FA109C9235A7D55048
76A08CE19229209F81567747542BD1857B6F5060D31FD6AC4447B6AF1DA4DF3C
E3829AA7112D640264B6C4BA9B3AB9523E40FF38AC47530EFB68349F9772FAF5
D08ECA59DA2068EFBFAD1FF9B3C720ACFFF1BF8B2AC0EA61BF5E2B558BE8AE2B
991392BA5F3694F9CC6FB1C5B6088D40B912BF4A4F41B8DDA112B42BCFF4BA48
82A18B6602235F026F9D4CE871E5CC7EB3080C1F683DAF8038C03C5741837725
5201AE91F48B7FC0C94091220B0BD9A658969B3BA91500818AA83CDC3FBDF8B5
A9D4863DEBD1050EF3E88FF671B22C634E0E4043744C031168F9C3B0AEC5298A
48E0C87F755C52F99D65DF61EFB2BBDE2341A1416BC51023E41771FD5B624AF6
7E8963D9560EC7AEFF6CAE56CB9BF699DE3742126FFDF15BD7B46BFBE6CF2013
B43B2EC46F1D723B6777D6EEF36D00B7B34E39A9A50F938DD226F136A8CFBCA9
7279A4BE35961BF362241F1A2894B6EEF51856256FAEF5A0A1893673F17A8ED7
6687BD81ED34201A19D57CCC4EAAE9EBB5F6A73A47FFFB9D63617A5256B4388B
E0BFDE518C3F79BA7B78FB84A350354F49261CB849B07F5777B063247CD0F1D7
5102D7BEB6152F6EC47A239DFD8824F52EB30D25A9940FCC74C45B664F09F188
1C427F44F58809F3DCCD4FFE26D2A5AFF780CC05E8E2DD8A29811E6DB9E8BC83
92B8940C458A64CE36A60A7F0D6D7DC137A904C96EB7B3CA2E65F64E879DD65F
D4B7B6E0580904A27FB07FF02D4882FEEC8C93BFF44A2048A7C611F6B74E90D1
AB548A688C4F7859600724339E773A52751020EFAED66B1794B1FFB686D3D038
00181E0D351A251A3968A2DFB14060DB0FBDD745BDE2C6107282BFACDF4042AD
ED53DE3354B2C5301D21432D3032A53C6DF384288948C644E54DF2129E0989F3
43FA398CE00F62B746AF0DE28FE13F068A0A52F139BD6A4435FDFB4CBDD7D345
7CD5A3B41DF4BE786EDAD31BB8E87A3CDCE1454510BD9D6B538E787671933718
52BDF637C110ECA86E6D7058108DB19E04F6DCF3EB4BFC8540484835323410B2
CF4626600B1C7EC4C2BC5E00D557B3DD02C287E5F13AC40D33519DB2584496C4
40F5AD80F9C357CA8EAEB31EFD119BD609B4AE119AF14F41C89A010EB4717A33
D045EA8843E628EBFC60E4B014B77E43D6C4C3832FEA4B2CE8ECFA1A1EAED539
A00DCE547EA714CBFA0F166169DAC568906DFFBDB38CAEE9EB849CE52FF02989
EE3BB7AB14D465CB0E4F622144E415EA54E08AF1B6ACBA2F411B4410B5C06F3B
4E3A0B2CF777529685849955C7B5A51D29A3AF781F1551F23E2D70CD53E72376
16193CCD63701C3C4909B75D5369025324B818204ADC81FC06DC6D27AF94F660
759B7B78206BB5E077D703D7EBF5C185BF1E4AF89319F6B0B5F32883144D5685
8DB139430D4976695D2851ADFE75F0E8AAEAF174FD8B2D55889971FF52D9B99E
FF6E2AC36895C02494F1D1E7FD184BC3A6052E752B1119C8FC5EC152EC0BE37B
9DACC49F990FD28F9E6BFC855720707C02BEC6037839693ADEC412384E622F26
00FE798225FCDDD2186F70A7E779DFA66E4A05B3190A06C4C5E6537DA12DE216
A0C9E8E3E8F1D6D9DDD8131107D37098526D5C3507FDE7DE235BA169CBFDE848
9CAC5C5B05BB255409FBC7A104D81FD490832AEE5010AEB42AC994C4B96D4043
E20A0D44A96214F93C68C7B70266EDA218C6D2606A4B71012791C268A82D5519
573814230123CAA9DD0D86FB2C56B165E858850E6C6CF9E5CA28BA647584F5C1
CB17A28DD0BC8C59DE0A5C01FE0E5F3EC7EE6E6540D5A260284BAEF0EB95F77B
140C4E1569529D433336951DE4EE9C5F857C0E94AEEC901DDEB541604DEC0FE9
0FA0685AF9AE0B930693B782764422692D98FA836012F1BA77AE8212045F6173
C485531DEE0D4D16DF3CBC352CBC226E5844D5D3F2914E1EAC534CBB46F30F2C
7077FEAFF5C7CA8B84265C2032454ADFD5027314312201F721270653AE0BABE7
3B63903B8AFD9C6ACD80E2DEDDC68D7EDDCA5F577C4DFC25482A27A4E48BDF6E
4D672D1306407D69F633E5C7B79CE97EFA3271D42CD8FB3EEC5C9422588D7791
6F5AD04893478E3E5CD55B160039346F9156826750A779DEC0047602E7D38A0C
305ECAD2DCC519D9AAB1AD3626DAD8A6F7825E176AACF1CF418DF3783F0BE805
FC51625D2C9C187AE0595F9CB710C91AFC97674F2843FB709E08E283462DDB1B
D5EE9C6490FC22D2B2E55D5BA11C43C9F5543221DFCEF01743D16F4241DAF04A
23CF90225E414CF8DE12E33ED6ECA8209F8CB490F5AECCC638E34A47E03719BB
9840B2A51FA990AAAFB6CA80087E80E5BC49BD8C742286B3620DC94AD13EF04F
EA68EDB7F0F500F0924889202DFB133747598F2A34D1750F94A7B0355716348E
33B0A6860AEC217DE18FF7EC62CDF30D0990D26D322EAB72E1250A760973121E
F54A3589AB493D1673B1A2737590A0A17D5D382FCF69239856F03E138D66F8F7
33E229271102112611D3975F10C183245F1B733C17D3B854D53BA686CF408C84
BF73C06B736A462CE369A339131D028D07A01603B966EDC3199B3769ACC33600
800BF9CB2FB7F92AC65F28EED2955B1CE09CA026E73DC2923F79B420BB9E031A
C718107D915338141E9AB69F495A99B90D08BB5BB166C8B146A585A99DD64CFC
759E582364739AC46D8E85BD10C918AAAD255F065DB9E32A8FEBF6054E355584
11845502643B1DA53E78F5BCF06E4E172AEA722C5FD5EF8BA32A536C00BA8FB8
E8C79F098182DC77880F7443289E6E8B0FC127B391C4913AD94B63B8C04254AE
7698444D303624FEB310021D9E5CE4E5D6AA1C6F813D68C3D0E18DEC5682F646
0E2AFB442A4806BD491A18FC70CAF6FFBEB70AE878B9FBED8DA5687549CD60A6
76FD984F0C50AFC2F783594DE2D0EE52DDC6BEA07E93C31D65640378033A2EFA
C8C460AB0487CBB418B5B2786E77B69ECA81864B4F28882C71CAE583E442011E
70880A8AEDA8A75942B345ED4C4259000095F843C26602DA52A397BA83A91A13
AC51F79CD1FB62C496B38135066F7B034EB7F2E751201A971AA11BFD43349564
410ACF239BA218F0C2CD3FFD6FCEDE6B18DDBF8A83D72F50C48125777489D17D
3FD7A214E1B87E5EF34B3365DCC7C3A012E2A56AB34DCBBFA70F60D8BC35987E
C5FCFCE1B41FC1324F0F306941A0D5C4AAC437310F1A7D586CC05048684AF27E
F3C09F77AC703265BA56EB6767CDC2297CFBD29A13F5F3598125A5E08F36CCB4
227621D3749DFF82898E01228F3224DF3307EF7B24C163E19DF472705785EB67
1AD64DB34BB77616B7CE4F1ACA9704215BC52783310E19AFBAB852BAA892C199
ABA21AABCAC412960C8DCA687FB2321C2CF442724552B9B88C188D4628203645
AECCF62CFCDCE85E2DC957351AA4422A1F7A3D5EA405C90DC0933E41A4B29B7C
DEC2712A7A5ED40A3F48FBDE95717BDB2AD2EB8AF82F8196FF59D705A0D83C77
B7356B628BBE87506B6EFE05DC693810FB0947FF7404002260262B7BF4C8AF85
F1DDB23604BD9F35A475A3699BA95FB6020B097082E73509B70F0C64694B73BF
F292BAFEAE07A0CDFC782280B8436B909CB12D82ADEEF5E2EB4685E3C5336B64
7097086C931A6103A50105C5635A2D92F73D16FB82BCB6BF1A16587FBD71F44A
2A99BC87DBB6FD664B53B9CB0C6844A31CD2DE64490B0365ED940CA949C907C2
88D2194C80AD9EC09EE5588E9716BD1D056F3CABD6ACE9855E9130838E021D9D
E2223F4CBCDD0731BEA653498A071D4F1397B4ABFD8DF02DF71286A13BB24FFA
B33F4A2C0EF7347C378BBB4EDEBDF8ED3ED6335240B55819D64F6A639BE73763
00A897299E74764A13D16137221EB2AD64D1D93449205861CDA305F735B84753
E61E18D50F14BEF067F255C447541C1D60FA90945DACCA92EE9093DB2FEE751E
7BFDCA6AECCA71B92A0BD5EE1B42B007E3B738EE8DAAC2883ABC76A414E67B2A
734F3600153B7F21268D41BD7DBA64A709155435171FF7A740F4D99AA4A2A46F
AEF9273CC1C02223B545B466DAE292DBB7939C70E9EE8CBEFCC44FE0E4FCA929
E0834456AA847137CD37FB970F7B11087373B6D43BC6E86AA0D5F8843E57D717
4D1165B32528BF3209501E8E925B1E123BCF119FE63E1BC9DF7E9B616007C26B
1C5141CA0986C71EB98169200078E52518A5ADD5C32BEB9ECAC3970EEB606239
22F403DD3DA40F4C615A21E140A5152FAD0A33A0B5656A250EFDA6808BB06DC1
4D79B44B1D65CF8C2EB97FD375F7013B8ABE63165ABA15545146ED2FCB21B034
5A1BF5FF49721AEED75D8566DB7289296E46845117CFFF201C6DB97034876F7C
7632A189CF44A025208FBB701370705624AEF93D86C1A0DA6BA58119FCA25709
64C90545E21C86D25B71C47AB642B3AAF9765FF790FF2EC2C2467F002BDD3430
3AC60DFCD69198918FA4340BAA063C68B72AF081AD847D5976FA7D44D4F8C8C7
52B02DCA88D9104216249A3E04993FDFDC22CC05440350A33A6CCAFAA6F4AD9E
1D5CEC99169F9BF195C95B00D049D3EB0B1F2215A9A53CAE876CAFABD3CA7753
083D587BB97224B95A83F8DF5B4BE47ABEB2896317748B484AE928F6A7F44545
79ABD9055CC8CFB01373D6B643D058D79F8D4191493A350748D01CB5BAAD873A
844BC252A9CBAB5071834CAA36B7C056F15FA37E776AEC1FEEFDAF99CEA510AB
3E173171A6342E57FD2EAFB16272AB4EA1B449BADDA9D9C7D79E662E623D8AD8
07FD5874AF8296F425FA238C47A8F2A0C24E9A7DF39912C7815442FCE389F398
6E99374770DF61DF6C8619889CAA3A54DFFA2A9473A6A860D2CC6F72F9E71456
38B4ADF0401081074D062B5BB10DAE3331C3E3C1B56AB328435C9964D4133BCF
B615F3EEE17497ACFB30D8128E3752762CA027D68046785C0C82A208F4F8F34A
3DA698A69BA804B9AA2AECEB46ECE56243E31E69A878E032529904FD3A21B5D5
80BB5FA94235BB5D48094E8E854A1ACC9AF80A47CD201F1568C2AD3259D3F696
63FFDEA64AE9CC4ABF6976AA4D80E4FB2C64C79C4E7B77F70EC00E7FD112B59B
A801D75428F331EB561A6F257C8BC6701F6071854B27E61664C83BEEA0958198
AE0AE0E053DE8755F049C399BB8E5B26813C6054B0EFD355444F1EFDFCD4B7D6
F757C202000E691852A6833B4C2C142FB2034C0B94C988DD855B94E52711ECD4
FFE6BEBBF721785160A55FF19B089C9865437E16BB0C8716D1DC77B1E4360145
180D33677031C3BA286851BAB4984336F9BE6691B79CE69177D32D6D555100A3
3E0287C97F791790CCB4B4AD67ECA253FD47D3D8D2FC7F1D8E1182E6CE79E98E
F91411CA5726E1DDDAF4220450727FAB99CFE617259AF5BD5310E97BB624069C
9C4288D7C772785564E019F13CA5BB384669745B63CD8CC50A4FC59CDFF5F834
C54788319BC37D9A97F11AF5F5660B59833E81BCA34AC3413323F4EB84936E21
530EAB134DD682DCBC98DB17F0516B499942E56EFB6139518D822DC063095DB8
77EFBD1E80B958F27131247A309A8B9E93214CF8D4F663162A92ED7E2F823019
7B9A64FC8DC9409BBE0D7077B6A4EDA3A0C9F9FFD3C64C38EC16B2D20E0C4252
A18ADD5626450A2914B9892E0147A245EE0F2D30953D2F10B5C472E88BAC0E18
F09BE3AF195A23F2F67B005AAEDAD9D7CEBA399B3FDFF494D78EEF9EC6AD30C2
D157BCD2FC1051E592D4236CB6CF896B5676247588B6CC0C4E3A9D32D2615472
A4964A016E167F612EF1426569FEEDA1B853E72D5DA5132D2B427B8583BE57E3
1DD40C60358C55E4CC8E22EDE7B3F23ECBDA8639060CCBBD8CC9983FC00EDA6D
A2414F34F3F8539D22DA488649D8203A174028CBB2A2717C97FF0F700841CB1C
1D80A0B3134990EF215B151F5214A44C79764CC25ACFA8B9FEA818A9334BA7F8
2041E7517A3B6FCD69192ABBD59F0B6DECE40FDF803344CB844CCFF0B65999F5
BFDF06BC5DD24513C2B16E59080C7D31ECBCD6563EB1AD045203A4FFA1AB0196
CF0B21F0851081A26969E75BF026B84D8E4F3E17638B00884A463DC008F0470E
FFD7D7BD08423F35946C6E3002646FCD01738AACB9AD52BCD0D455C64DF2E82A
F19552D766E652B80E10105FEC8DBF23D657E9460C34003BF52A79FE5CFEBD81
172C3E68D4803A409FE7C84BFA04443334F2AD889E4A3E230D0A9A6A520CAF05
A42E0EB863C256F65A0BC6F39AF5A2B2BF8D7667624C19AD62F714322BAD250D
16B7BB60695126AA08EBF30B7C95F6A957AAFEEA79FEC8CB51739D0F7855EEC1
49F95C853E0ABA4975049E84F3920ED10D7F0ED561B23B0917E3BEC5BAFF0157
B38044B0F55B951D72E8991FD4F07A583179EB3D1309D247613DFED524451396
E267DA4FEF83F58B46A22BC54F9D7BA694524FF2E613EC3AF9EECDF5BEA87E7C
92105FC83187D1C37405ACB1E7F0998740F627B096F2BC91AFF565EBDB79764C
CF53973F324BAD8D643A7067F8E9D019B06838BF518605960ED34E950BEE93FC
FFCDA7DC7C5761CB10C3FA37A28699D9C0F3EE94AA32E3C58F8D7F803B5A915C
67693BBF4A936F085874E5F906BF0053655C34FB892E16D8D0CAA47078D98F84
8BC47519F457699FFA6663922DA86B8BE39AAC8BDDDDF5625C61972D35EDDD28
94C5C8E4CA2D30C7486438C4EBD0701C924819C7BB57AE03CEACB97119954830
6B94C9301C5D674546A840EC61B9B5CCBCEB68068CC866379DE46AB4352F71AD
3320EFB4D2DD74E2FB2E5B86F89160CB448A678B4FB8070D31E6FC60F8C7961B
A96362CA771E3DB9DC5A765893FAB372678F0CA59C727B598BD7EB9CC03C82CF
27635CCF5330DB03FFECCEB28C7D1127ED937028E8BE0E8C881F1D9709685056
67030CDF3492CB211B2D350265D8E7EB5B27A22A3C507C6034C12006B62C45EE
6A79F69734E65ED75A351A3DF8871B0C468142F5B2A0D299019275192A2AF36D
0B8CC35E1F9D33C17E0756D67C8FD8C21A91E29D6A6A7C4C82362A11CF147E4C
100FCDBDB5A04177FB9384FCC804315C355A4BB092D34EBD7C78C4901209AE67
6967CFC73A878756C67A46AE14E6163A96A4D2331A8ACFD51DD8F95023A57636
51EEF6D32FEF33A07B1CBD85BF493182D44236C93F939FFC5263B313FD5066E1
BC3F1D7B12B234F60899F20EFFA823A8EADC8A602E27C4275FDDEA364B0EF501
D1416D96A020E3268498816C26C1255EA3E824C1E3579FFEDA3FD632B95501C0
C8BF9FECDB23A59F12C2D2256C232F8973C6C5799462944D027DD0BF7FF0F73B
0283C8843E9A3001BB90CE7262250E0BA6B7C627731402610E46872CE5AE0D6C
ED1C47094617BB0EF98074CE6116ACEF6302E40AD309AA59E3E886BC531628CD
9FDA87188135B3D6CE0F29BB67C3528793C574A33D7CCDB6F875BBA9E474804E
B6451E6ECF87DD86FD770249BDAAD5A6B388BFBCFCAA63CBC2ABE2230C110C71
6E07B7FC8C19875C002332D592429239FDF3BACF583EFBE1FF3856DF768AFD7C
810A269762BACEFE5EFA7E35DDAE6A622AEBA83E477B00A3527AB42AAA64FF35
2BAC31D36B071C4B68DF8BA0FE38D3A01B19AA95B893F42B5C037A98F21B48AB
50B63BC616BA3908D9CACF97B0D86FF2BC399BEAA86FF6D34DCF21BCB02AAA2F
4086534390215FED63A94EEA0C4887D955B7781670E8C4A4ACA5ABA29958F369
04BA4D3157ADCC999B46C4AD7401D9C7EA82F00AA0132FC5EBAB14FB9BBB371C
583927317440E34D425850AF9EFFB5200DCFCEA6121D662AB11506ADE702CB2E
8CA3FFB8ADD5C2470207B829A4162CF6F8D703C6508CB2DC5D586678999DBFF6
A7D8D4940CD3518AF32E5C3204B59CCE1CB06363EB36E7F5299C581634E789A5
C10BC1E93488DCC273143E753BE0F82782DF837918E4FE0D10520A144FDD2E3A
5018FB1F9CAC3F640723CBEBBF696B95D99B867F508DD2D9B46E1D2A1157E1B2
3131263F844B18EA91B95602F465D1AD4B2479946D805BC78580A7EF7997467C
254D74D50922466263730D24D8518117AD200014839545B1078F38D72DB6AA64
28A7CDD616DD17877C26AD80A7BA5DE60680EB84ACDBA40EDE983380C1EF88C1
DCA32D3EE7E041D9E96D33CC89BD70DD41F0FFE0CDC599E8BF2CE72DE9FEDF54
7B68A41FC346A14D5F5B5306671CA0A088959B2A2CC6AFC2FEDAD6C697F2749A
41F23C77C5072809B2819B32478FD58A974363A5861178CFB532590E7B126DC2
0C11BB8725E1405A7B415FB3D82CCF0943330004EC06172A45E23A3DBE621B9A
BBE8D9D4599EAAE7286BFCDAB3C435A369EEA8725A2941761F9BEFC4A2344FFA
38EB774A642BFA9323EE266DC0D124B04061B220AFBAF8EED11C780DD0694828
DF842CD80161A57CC7E7D936D99B130E3BF1663339F4CE8710E4F3D621652B78
16688F4D0AF596BDC1BC902B99F8314A86E70CD8A5A808449583439996D196BF
51DD4FE2CE1319E382F756FF84B5792FFE4B43314A58021F36A765FC2EA4BD68
A04BC03E8B73549BAE43FF1AD0810A62F516AF093B9CF9D8B6F23CB3DF353F11
454B8B48314DCADEEA7CB4E15CB74F2856E5573D30CBD27D95C4B672323894D5
B24CDDE2929CC68C4EE6544EEE1B5F966B881C2977F80396C5A715795375478B
68865970DAC97B0963E96D04B6E9D5F8AC10E6C52BCD44A4F9A2E41B30E5C948
FAB0C8D1C56240D9836996B9741D43C66318E2FC17F236140E0EF9D8D61A3A2D
DF60753D7D2B4EBDF2EBD6CEA5A27E6F5EE3F77F4E0AA11705F42E8ADE5BDE0E
951972EE5DAB534A95B3EED72031126C9A2EA19A80074BCB3432256BFE41FBDA
126EE5E6ABC85888DC059DBE81F40B65934AD2E4DF3C2BD3F6641B74BF8864CC
28D7AAD8EA3FBBBB407E0ACC5791BBD4064C3A65B38641C2ADE78C30BFC3C5B1
483570ECD5FA93BD49E7FDC803C2554A8CFE209D1497290B74D3438C74051597
1B4CE4375A1A9F1EC3D6148A1C850E00C9E995E273148590FBB65F18CAB4A1A3
A66A0500482656F718A0AD08E1E3019BFD5218EBE79578A07246206638C20F9E
F9B7CB7F1D174B2E94953F541C3B84D435D8D8BEC68717E95B7597AD7CACDA2A
6A4E8808BDF0A9C2DFE2DC59CFCF6E7C9CB506508BA61B65AB48E09033F8DAF5
4E6E96E97520EE266E21EE88740E10DE65574C757B93099D13B81C3904DF76D0
9C575A27CD28508B550207D366B9CBC118E355CDC5E86364FF13B34B86F06748
BD5AA3789536D912DC15385EDA65E18872A93CDA8F89C948D9A1FC92A5039BED
5F5C9B9770ABF579FC9115F01DB5490A959A7E18CB6EF39766B6EB9EA5665985
04C6ADBB8BAD4133128A5D17104CB1D488340BCCCE24F95AE854B71DAEABB1C1
1C0A264512FA4CEA7913344913FF363B88C91C86124995938EB2E53E15F94647
C5EABC7C20BBB90B79A821F1EB3064ACE274AA38DDC172B3EF41D65B6506B2F1
5DBFFCF6F9B56BE11F681017F794ED5F98D0AE4120E49CAE9277B87ADA448FA0
086CE1D6A9AF9CA726CE96CD5CDD217EDC546C3DB72BAF069CE0FA96EE058B44
6F0F5FF5E54F9C909CA1F70B1A0DEEA5B45583AD78EAD2F694FF423AF24B9E1D
24EE9C260CE4C4B33EE56F08E3CD9BDBDE4234ADC7B7C0AFE2F18C1272626A0E
451AE8DD7CAE77CBCC9DE13BCD87FF8CC32C4D3183979B3DDCB6D6B69BAF5891
402BE588B4672AED24A7697748E13900D1798A36537371D5627158729F6B5245
C354F4DC0CD573E9BC4B9FB3639875028E065F9997AC88601AC18497B4850BDD
181EB8A96ABE64730301A06C16A87E75005AAEDAD9D7CEBA399B3FDFF494D78E
EF9EC6AC0ED5A43425B7C87E1D24C34E9E43AD56BA6B5B915CA742F45C021CCB
50C167EDCF79DD47A9AFB16F310778F4BD00B18FF4535E45411A09E1E4FCD42F
1EED670768E3E73AC054FD72789EBA34CC609FA509C6886BBBC3E733E01D5041
DC0191890203800FA9CFD36EB47CE4A1E977CBBD518786EF38F5BF06F73DF53F
AF013E6207BD0487905E5F82E9D4AC9B5424312755C4B74383FD094BBB2222BB
AF9270FB6C7A21D6F979EEDCAE9E346E7588B9444ABB409D4B280567E8D5B9EA
8E8AF21A352BEEFD6F0E47A669C20B732AAB2589536FA3B43E92840BD2987022
7DB082AA93E1B541228CD9817B27BBD0AD095F7A824044F163F127A14013C540
DC0B2C9CDC6A07616DABAE04ADEC5DBF246851CDC2872BC169D3FFC4026B3083
7E4DA1BAD38EAB1461C607EF359E746288532E73122CE876A6F49FF6294B19C3
2F38762D6303B0E85CB4C1745F26862338562D9039E4AE7D7D9058C4340CA634
03E3B02DBAC9581F66538A67B5F73BE3DBB87B0AC14F1F59AB49C4F2EFD6DE3A
2FD816392C9AEEA9A9AC51B8939190874700926AA7A1087738A58144D3A276A2
06BEC8BC8ECE079B0D4A21C76C014495C1F9E3792DEFC7E451297B5ACFD86C18
3C9CC5D4E4F18D8F9EBA77B84E3A3B7AE87B174B531928AB7EE881AE1CFFB376
B6163BC0C8E2DDA8902675D37B060EC2BB3EDBEB65B8B0AC7F77B82E75CD3CD8
8AB83C05887610B2307AD4C6DF39E6265FEFB0A09964CD3678D198B5B92AA0C0
64D2781D90AAD9919F7092F825F8ABA7D9BFB6943635168F52888987698F009F
8753757CF4897A6E6E0ED93C4D09A77A7CD957E93FFC681A0564FE5AC95D3165
354A8222FEBF95928E6CC958875B447F511BF10D4DC5E48072133CA4CB1FB015
F3E3EA05C788AE1D1FD54D82311045F7ED742A7D74895BC47D6F2EF7BA93C8A8
327504E4E77FF8CD3DD9E624B871B862D675E93FE309C9D420911373896F6FB0
D1C350C00B3A5635557FA82B31C7A291C26CEEA4AE39315409B7CF8B52F0C3EE
45CF515A8D8A7D851B6197D04F2D392E531BF8831401DD1771598C94DFCF1E71
62403D5223E1D5E54C456F4782EC1913A0130BF633D97BE59AAB15DD2AAE6232
45949A1F5BCEB5949FF6431E4CC209C21607BE7F5785C0761C91C868FD77F5A4
75033C85592A0C34971E693F33C87A7103594B733ADD916A60E21C173D3011D1
80DF588DF93B6925B50CDA09F6AB2C1C7A6A2680E7E6183D3DD40B8F0B9D8573
C973A0EB72B687F46B3AED681186AEB02CEEFF0432AEB0EB48DB0827C1A420DC
079E8089F9DFAC451E4268D70A22A7E6687AFFF5E4561E12C25A36853AE144AC
5A48A2B8D238516515E7CD26D2D3424F780DB5251D249BB51D43450ECCA90F3E
A2A4C2F45C6B35F7A256EF8ACD9FB6B536CF0142BD917A63825573B8050B24C4
6C45FA2F02D75EF16FEF508140EBDE86C6C8DD740EAF4CC9DEF2E372693F68DC
21DB6E0CC0B0BE3B544AE0F90E6A60433100EB3C6B0D28D76A59EDE88DF621B9
5D5A4ADD39FF9EC115E9E7AA4469CC4C02FC20A4250B56D1B6145D32B9AB302A
BFA6F3FE2F5B3A686E31FB91F53D01DB73BA504BC4FFD3C9FE34E854D87826A9
C8244BE7940558DB66A2E4251723821B491E5F41ED5D5474B3304A3033116DB1
49B555B41D4308CC84A18D43CDB3A383FE188F94589FF54C76885D3FC17925EE
7F741CD2D7AE020036DDCE027F1E0911D1DB1A3A4006F5585C88A5FF274188D1
9F0B0B1AB5E45B46AF1EF7B066D049828664E05459829DBDDD8A43ACFDD36ADB
6906269D06065DAF3F93A192641C9951696A5E67F9BB5C34F23ECA3519B677C2
599BAA26360E1BDB8A5F7B8CC9ACA906DDBB8146B25D47CCE72A98D4C59C15DB
93E45AB8C3238EB54C4AF727F5C409ECC5E0186009E5727F3BB8696D145FCBC3
3099331E80A665208FBDEFA66BD45BEB72E4973B247C78995DEF6BC7F7D7F83E
ED9F38FC9981A75D2EC4ECAF3D46F84A9F4CBDE1E9B8EC70D202551F43AA6EFB
FDDDC3E32466F9F8D5875154ED1FD0DF5EE99226F9CC50854B523E660A4B3AC5
1EE33C0FA51EF3A6E8F9A41861E475615874038789500B760C2254043A5D205A
593BE30982DA89CA2448CA398340CEF4B113B5BC0ED6F7EFFAF597F2ACFDB702
4BA8725BB5053BEB88FE194704FA3F13CAEB52248A1B5EA0B6DE836132D4F03A
73A79D1B235769C6464E7D4506E99D8F07AFD94687098CD4C026A95D679B4D72
8FC10B2B1401AF69883AD72FED4DE315329E6FDAE0E4AA6C193AEA97A36DA5C1
FCD240FBE4B77F3FCC5D88D02F0D0F7B092DD385FDBD947C069C9CAF0353DE28
E56DFE92C82D2F42E77852A4F27FA922C9C7D1FE62961A15D87FED6556DF75A9
F00AB41A3D38EA9BC6F672CC87E5052C43EECB9A614B1869F207E65C6F503025
2D1CC993954D52EDCE5F638CECDD17ED708099068556BCE4F2FD74572FA65E62
F2D0EF201E30AB1E8C30536B2681F68B552B7A5A20D9E21948A7E1EBDEBB5FC2
3F6DC05D80A21AB80B9852CB1EA9CF7A8E7A5EDA50501515E44530E7848E11D5
6FEA7F4E0EA511BD778F00C658BC947D4D5EBB1BDDBBACAE4B22606DF4314B6B
C775A8D25C43ED1530A30217D0F8A54982997425207A7997B6F3588FDF0CB33E
F168DC808F5921AC42C481B8E0E2FD030C85713ECB3CDCAB8F54A96E723278D8
5BC44082B64FFBF5184776F50C5106F1A0E62A24D07B62CFE09ECF70D79A290F
B5CF2209C7BF5AA9255B931CC65FAC6C1FEAC8CF916B857291BCDA9B67EC6786
29702669CED981E63879695B20BCE17C7103916EC4100C013EDD9918418DFC85
08290E2C6D80A66439C39F04858A7D76C8A84D5A2C24C4D916004EF295C66908
7512084EFC6874C50F230BAD8DD261159D8BDF9475F87186ED2034E9594773BD
2860A5AA01414AC7665405ECA2D80C9698C859945EB0F11DA63A9F95E16351DB
944DC3F68A835620BA11FAAAB621170E65744F1632CCAA568F5952D0263AF2AD
D8ABB88456064B30131F2CE86B0BB385F21C268C03644D438AA542E8C2F348BA
4848224D8590717C2E9728B839068DE40D0D97E9BBA0D450C940502EF078B476
0E1B022113080867C8ABC4DB54423ECC0C0B9FEE6AC04006D727AA3F615E4C88
16E77C27641D2C9EC2F95074CBF55F7D54372A03211D51DACB59639A419DF4D0
326A3D94FE555A52422BF5995D9097EB88916EBE18E0CFF5A76BCC8B982EA3F4
CC19069670ADA41E5BEBA1D66EBEA9912EC750D565DC4BD8AB39BA0CC402E7B8
C54D8ED9BE1CC131673B2F1F064AE13373D9E0535B2D1A4A87725790A4B37911
F18D347B5A2485FF38A306FE6BA6A39CC339B00D7385C05E21C345F892F33596
CE3B464E8C6816B4A3E9C17BA2883A4CBB2D65EF0565C1BBCD2C6B88BEFEC111
092B507617EFC181491FD46A79129F464D15AC0E951549137A2E964083043E42
01799947AF89561C37924764E336027004502D910210B6015F7B17C680809DEB
C0D095C78E452C233D873272B13386BA8149E8EE7A547163C2E54960A603351A
89F44B6CD6660921A4F4AC18C75DFE7A8A66663B46C36ECED54DD9C7B549DB87
2D2A798F5325DD5F27D410DC4DD6CFAFDB4B3D89BBB2EEEDD94189EAFC34C6F7
A0FF3420945CF03AD5AE8908DC7912769AFF2ED3A4C204CA4298BBB45B91E09F
5671F34CE918B30375693DFFA343DABC83464BB7834D8960E03F01080BDB2886
6065801AD1CAD2A42E0562020B9CAF749BD2E35E9E94901A7DBF1AB5613C04C4
C1DC5F4DDB69694A964EB00F0B25CF451AD35351BD01CCC3170B71465B848385
295417DDAF8BF89944C5BC0FA17E47BA1BAADA96070AD40028980B32F8EC10EC
E5E54D9A07E138420B02A9B8F30D289469B1D9DCD23B1E1CA929FAC20FA3DEFB
47E874BA5E96D3D276BDE8FEBC9A43450C09C7DA2678E206B86F4EE10EEDC855
EF01B6574250DA7F920EAC5A902B304B5D9158369245B25103FE34F2160A9EBC
58C5962542E2E3021A0C47FB64D881D3DD3CCA9F533DB06315A3C689303A0A2C
CB0B89B31933D2096458121AFFE6E15392354B65995B565763954DC166F67D7D
103BD101906D4ED76961D775FE7CD5C7442B83CC03EFC75139D91A8F1879C97F
E6BDA3B6BF3B7E6F53E9E2E75EA111009D7F09B8F3DDFF292B0F7B69A8A9BC77
CA2C495E7AB4D940B161C4EA8B89C0E86DEDA1637FDC2CFA5E7512C432A65546
99D5AFD643B4624DADB50B31277A1A22A7E369818BCD6F28607EDD30753580F1
999A2AEA5E76D383BF91E722A95E66BEA628F4A645215C4C9740441914300EA9
62A1F0417774872BD4DDA8BDA12CD6121E2DA0B709E24D541F14A1104F8FCD74
20DD4FB1D7F1EFD40AF797F32D5F13213F2FC6C8B0EDCF6F69BC6CE92DCFC02E
4D6295FB08D978FC7ED48D56E844E6153B2C3EE19FCAD5C6D3A0DE3AF3799557
6E51BCC2B4B15DA7F10D473CD1F9C0E1C1BEF26DE8AE873599D5707A2E5E2400
3106F6E50CD5E02F03BE257B5E3CE0A1C34CB459FA57C2A05D4300A2D20A7B90
13D0B931DD6FA82A7276B5FB860D0EC2A1A305FBF72B59E7207187EE7262698B
B1F4312ABACF39D69C51ED7F6B3A61A18BA08A1B871DD962742D35F3FC9F5C81
2BBECCED81BCD5EDEF34E63D50C78627283D41DF18F8B0EB60A993E7368A37E8
241C2B1FF9DB8C1B924A5CA0ACDC0BDBAA569A75DF8C8AFB2D35301DBB2ACBBD
261FD18090D6EE761BF85BE33FF730CDCF44C0467B5C7F41381E9B67F1FA0A95
F2DD6890882899D2CAC3FEC1A4B308B98F3CC8F4E698AB683787BEB7AB015B44
787B3944F4E131361301A632E971132C5BC45593BD239BC4D07E8865CCA8B939
0D6C9646E68080DA187E6586AED29B5CA225076BDA6A1124201902CB69B434AC

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic12-Regular
%!PS-AdobeFont-1.0: LMMathItalic12-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 833 233 0
%%EndComments
FontDirectory/LMMathItalic12-Regular known{/LMMathItalic12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic12-Regular)readonly def
/FamilyName(LMMathItalic12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMMathItalic12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-31 -250 1026 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD11234369CB38BBC21C40020C4E57C
950DC4A5CD271B5530E91DBA55EA1A3BF584D9405556EF9C802B109FF1EB2B0F
C350D7F091E7B613B08574EDA3BF27099BC2EF0E503A4C4724614A73AA054756
A503BEB31E3FCD96F733D0C5815847DFBB66DE4968A9B389FC00C2146C4FF68E
076BA8B3847A3D8237D36A6BBDF0096290F1BCD02CC66B12E0070215D5D8306F
406DF7590940DE35CA0854D3609249AEA4EE9D3D377A7996C1CC2E940132A90C
F633C774985DCAE8E9353607B9059DD211265A0A346B1A062D80C64B5802A750
D9FEFA3C9920A3DE942C65BD08060AF33C91CFF62930F65F9A42F70B83B0E077
E169BF7F5D84F15D59F8A74BC2EE4A7F3ADE36F38C3A661F4CC9826BF73D7F02
D3CCC267927CAE22B5ED695D212FC3B669F9BE369B7A8D325C3FB9D552F175EC
29972562517E91E7B8D570612CC50B1A5CB6B94D030B0C60465EA21631F7A30B
44A47143D0C2F942B5D76384B8C3F2F197BB3646CBED3DEECB6513D3AD460F49
4BB874969A3663617EB537E75C1C1BF92749F9D147080EFF78ED285C315BAFA7
D78B7B4B8B7CFD1639EA303ACE986EDEEBA9350F92529C47EA7689779BD50CDB
D1B3A68B383B54B51F4FD77D6458F15AFDAB471DEA9909CAB29840091391F2EB
148588D02607411F2E802B9CDDFFEF1C1FFCC9EED0405371651ACF30808E8C57
682B734916EE806703B2ABA2F6910E0C75BCE10A94FDD1ED3E4FDA7857341427
CA0A4F7D30151BEB8E3D351E1E100A8A75959D11122C83A5C0C4C87214413B25
A6BFE44A42D446E9C4ABCC72B6CF075717DF5200D680CFF152D215865DE535A6
1CA8E063640C195BD08DBB8AC7B4A3EAE77A96BC881F674B33575A0CE6AC3EBC
22862808E84C47AF37E871AB5A85B043190EE840144F9F85E8C54196C594349F
1E95F04AC99AB789ACD0FE5A2F6587BA6A0786B3E4FE1AB8D3A3BFDDEE2C5A08
EBFA713F917FAB61A4908CFDCAA68441D85A6DF5E034486589BA82E6B61BB21C
8220A1B04358CB908B8334BD4FE84255E25619ECCD65431928235DFC7754E5E4
D9771C3B3FC8474A58CBBA10C1CB73E6A79D8FF4926571A574E9FF295B4535F7
8DAA05993593185F772F3FF69759B5FDE2A57BEE4EA6575D9C44C7DA08D15937
03B153B8F084FFD4F864AF9CD8E91EF4012C66C0F5042649325815086097D07C
257CDEE7077470AF4ADB665A7D21A9524B22DEF089D8500476CDE55550C85DCB
566D966DCD3FBA66569A31069E321287573DB84CA1202CAD8949E3979D1A3CD7
94D64621136F2AFD63746E5172BFC4D9A88D7069DF6DCE5087F932415CE500A8
70B75091EC4E2B95858E6141942BB2DACF51D323878EDC4B6773128891EE36DA
43CD945A60305D9EF982D94C9E03005F36FDDFCB439ED36788C92A7D5E437763
9C2E8FD3866B68180BFE7909F3E7E9D03BFEC5C8923F97A8FD30FDB02760EA64
99C5E39745F40BA6A085226EF31A6DE3D40EDE3D459BA0C3978E8AEB615A4FBC
FE1351CA9D238A615B0B362BFDA7206096C251C377241930C4FA4087244BC453
D699EDBFE67B739BE592CD9D27DFBF761BE1725876A6F03A23A68E65FF881DDE
BDA42BF5CDCA32B905E107ADA5EA97A75F6F728EC82733CFBC6BA53C72B84BEA
AB71156C1C2C2D8B63C789350964F7F174CEB0DCE6D06FCC2E3A7A38AD614BAA
8D6B1C67B1A1D57AA8827F7850F20BDB6BF4E973E0A4F06277F5A7681F136426
03165F927A9709CD50D811080B2405A94DE0FA2FBA070818E757496EE670FAFE
02B18E50B09E025A7225717E54B50D53F0D063E97E33CD5C86AAD5D67C43D045
499427127B8E49C2D9F36C22D45A32AB2763A543E49B75001E0FF436EBC83EDF
D1DEA21C4F436CA739D3F0365EEFBACACE392099AF52F806C2A25B897D099BE9
8931C147008EB0B6711CDB302A97BA1E4405196D1D4809FF9140B7F15B6BFDAB
A97B0007CA99188A464D8F618AD9D90E9315F5C10209E3AE2721F0C45C5B99C0
957B55850AD22B640A1D456A46199F11323ABDFADAFD07D09941235DABD73AC3
0E2CF9A669D693A194CA7586F623C0F1C2332E709F52C4F64C548A88F34F4056
31191267E41986684311BD2DB332DE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E752429B985F23EBA0C9875AD055D8B1F640D10DB8F40BBF062F476691
EDAA1D05C5591EEDC1B75251BFF8576F1C9CC5C0E521392A2F0D5F869F8AA462
B3883A673A976328E1F0DAA22B80CB7737DE2537E7B54F5E1643E30046E87CF3
8D9A45A973757BC16CC50504033125D2A68A1C97CA095C56B3D62783960780B3
1693596869FAF5692AA8FA6643FCD7F55E72948D2DC55AFC5016FB2C48AF9D85
192393C682B739EB43CAD8C3FD4053B2D53CF911352E2BA87A65F8949B0B7918
EA727DE4A08DE07B71365B8F31103159F65D30A7A318C1056BF638CD20BB56D8
6F22ED3EACC46F750F405FAF96268E80A409CD8AE0F36B68AA8C5FD2E0E871DB
D2628AEC086AAFC9F04CC93440E1A8B0ACC1DCADB778837360339A25C08E3B0C
E768240F0E8CE9FF939E4B1A6365664AAB69761B7A9C7B95BD29B09B930B0D82
F2C39F9BC0B94E56C48DCB22D8F0CA6C633BE68E5977EB3D88103E4230C6A08B
B4FB0CDEA7D44636102D47AB90B92FA42243943EB3E77E6CC38DEDBB2DB8BE77
78936B70FAE12EB1E2913B766CA2BAC3FA555CBADAF2CBF6B7A216FC93470554
2C841542BC1FDB26DBE389CED193E28A19CE9CBA64FCEB47C4D9C7891741E0A1
23FBBE971ED93F797C02EA830678317452481FB78DFEFDB25A3645AD3979D2F4
AA17C624CAB35B85963C6DED262AED5DE92278F31B2E573FD86696D98800443F
32CF695BC660D7704664695A83680221C6397E36FED57827D0CEC45CCE9134E1
20F85C107CE5E670014BCD3D09417B18667B975BF873F4BEA9022072655ECB43
9ACF13725A79EF90AD4FB0073FF142CFAF4290F2BEFCDF56CE9AD3AB8669A691
21B16C33CD949DC6E4C614B2D1A0ED127FEDDC4387DDB2E10EF3FA3985EDC86B
243368F8CA936A6B93DE729493EDC6FFEE039CDB833C0CA3B0223A63BA100BB2
B4714AB955DA07C374F097906ACD908F1A8355BD40273AB986F80E6021E31427
AEF512224950615DA2039D4EB3B18C87BC21D80345EDB06493E9849967F12E63
19295F104EFA71C12917DFE9B08B5473DD51A322ADB72FBD8794B3F51A1EA076
A789F59B3D595DD347079EA1554A4608FE9440AAC9F04CC93440E1A8B0ACC1DC
ADB778837360339F16EBBF5AC7571B0778C0E9D25358DA06B20DDF35F40C2314
035F52C165A49120D5332A136461B27E1D641B91CA52CB6583FA4C6F64BD28EC
6F839F95D74E2FACD9500D776DBF675838C2E27A9A1C75D9786FB52F7B15A017
61AF688C996E2561756B8F923AE34B82BCFDE515AAA95D76089B8C6D8CBF4863
3095FC397712BF000B4F2852F1C52ED15534409086E06FD6BC39007057B13EBC
E5D8E8EB108C21F7A32F8D0DE181A612268EF75CF1AA6A436B3DF24E7DC6ADB9
39B89E2924D0A92FCDC2AEE877BDC9CC108A18629F0D64BA727A5BC21B42B5F4
1E8F864AC5FCD0977D31EFCD46CFD2F60DFBD4B1B7E0041EF68AB5AF9B946FF9
36607E3512ECF70AC43BB1D4751F57512749F002E1148BF99DA5CA7EDBB00B60
E26CAD17086C48CEA3FF695D5E829EE6473F0C657F7655A674B43152DEC8B2E9
36E490A4D367D68214B348BA51DF871A83CECEDDA1F3DA646B38272829C49B77
DA56D8C3459AEF9356949ED2BC8CA8085F829B9F9E0B4E360140E2EF8AE58083
EC6DA4E70BE9D053F69949A8E464ED478A8E037FB132781E4D3BA60B95605DA5
5C67C5F6EF7AE2049EA3D2EEE67F2FFC49FDB8B4BF1A5B55899A71BFFBC96D20
CF2025F12147C5C8D5E39937B03356D453D819AB0EECCFE7DA6DEB238A87FDC4
1A647D79A3E56C4B5AB6B245E707523349225E6B8EB758ECEDE8173B87B4AA14
71C5FA50EF20ECB3E3080FC6D8B395542D5E464EAD1953BF60A81E14EE323080
F4DBF77A197944E1DCF0738600BFFAE3E467BEA9BBE6258A20D9E32E17451282
4E1ED5C40D3C40923DA150C493699F0E68263CC98B61749221081D1C75F39CBF
B348CC853CECFF1489C53CEBE1A6915BA90065A1A95764E697057F013763621B
17F36B310B47B715FAAF668FB7F142A6C7682F1CA89CECD0A14CE3BFFCCAF634
AE7A1DD365AB9D3569F5A96C3FD32EB201189D07FC46F41CD2FB9B1BBE515CE2
23213D98659912424520237D41AD0A00728D89D92DEEF30B110E58570A966383
AA9F7CE59375525369CA6A559BEF0CA0B802D43F883E1C794B9D3EE9AF8A5CD1
0A347EC4A862A6F0B3867EDE0A050EF258A7F49F5081F1FE098F53AC01525217
1C713B12582F6D29ADDB80A225B11738EB3D1BA708653BEC6F7AC682EFC32633
1F40C5E8FF16D3AB8647D6542B4C6CD77F4469A676906BA6AC776BDA43E4B128
3ADC30DB82832166A9202C67C70817F41B505FA0B5F906C537EFCDEE4C69AFFE
F891072A4BF938AF76A97EDD40B7F6F9D15E91CCF9B8B2DD85257EB6A2C747CF
7113878FC1B094729613788FD31ADEFC852D2E598734CDCCCFD8C05DDC3040E3
87C62F0DBAA9DC2F6628F61497ADF417AABEAD37062A126B997B7696988A9F2B
3AC897A10789DA53D2DF6BC8441AA916C8F02240634E21A4E79A7C8F9062C2AB
821ABC614DA8C5DE3657D1A80350032D19862612D6C80422A4362A89E46F7DC9
1B557A4C8683B5295596D591703D3A1C188354695617AF56DDA1FBC56DBE898C
9AF2FF244463C0DA21C717E348E0BE63120324C3F420649F82D4160A07270010
141602C3A6572740D06F3AE476ADAE3DE5D771C66E86F97387D4AE97D6E59A55
4057B9862A120162EE8B3F4E8DA71604E6933F27729A2C7FD9A30D9E8FFA9D0A
9D090B86A2B91B89AE3479CA9B27527C68B896EDB1FAE22EE3B71C15A10C1971
0517916D0CF980211650F7FD1D657C3164611037449E390AE607F3790491D6FB
BD58617B4FAA8341C4DFBAB734E78912D306347C0DCDEBBF156308BED3E724B1
5646DD2FDEA523D863CBD4EE16455CEA2C0BEC9873A424C98F8E905C9CF80FC7
24E5A519BBD1CFD777EFC9548086229ADAC4953EEEF78155D1AAAF6A197A1B14
F0A5EAAB461B7B4C814D7591163219389B0F4E74CAF6C646E9169D885AF04A62
7278E243314F53B604C87763D8BBACAE4B22606DF4F87EC63BD74CE9504531A6
AF606B83F77678B642E1E8A32C268DC6FE77C016E19412B6011FDA90BC02ACDE
8A3A4BCFF003E895AA05182617BAC758B30905B56CCEDE37F37167FBCFA2CC9A
F628BA1877424769AD11C53BED092CD4C17A17A44068884BE4DFF69219562767
BA09C44B8F1E68BEBF387FC14BC2377955F6408A0F6951FDECE16DC97E999840
09138FD539C739477EB1F5370DD1D26E6DE100B060B7E57DAF6051F6254E6A4D
3B38558C6287C81A6FCAD90C568433B94F8088527CDABEC674B13580A32722BE
FDA8D1EA7BE286D95B7DBF3D2758D029FE6D1EC1336A154B5490D8D794DA1A9A
16DA891583A755B987124713CD716D916700E68F601F6F8A63D0FCF3135BE7E4
461907C8EF7DCF59971DE42B2B781312D14C0A9051B17B14FB582DDFDB57287C
55A74F13B01343474FA3B865C083A61C715C777F8117D2DDB83815E3868E2F4F
86F53BE69F3BBA3D0FCF5437EABD8B2A042FABFF483882103582209E9DB25ABA
5906F28D71D53750ED0F7B30F268BA2559C0B2578592CDF1FFB8A486483FB09D
A826F677BF6ACC2410A685CE4603E79C04FF94C5059BAC10947BA16CC916C66B
1F0E9688D5D0902E5F8BA2960305F73009B515E452D2D31C8C90A97327A337CC
30676F20323942B77D128367B58E865B50E3D3D80C06EFA0CB885B25C5A09B80
AF43A5193CC00483AD73DF76B3A98861623AA82E746007C749A903536B037F3B
E38C32B6B4033AF21F958826C935CBD7BFE1A109C80D6CC9DDDAEBA47D41956C
89C887314DAC65BD644D41E91ED8A7C9D0E4788741DD19AEA2119A54FA0B1F4C
1571B843DA66CBC040648C9619E46683A783F6AD576B69A5B1171B748D0E32EF
C302B9FA50903546BE455D07E984809CAF607B7B16433C9771683A14590FA240
7BAB1E8BB563A9C89C0F79AAA61D4787F91C173784900699E6CA7B672D208B1F
D63B002DB247E7A34F7B469091B4182B33BF1DA6FCB815622C7FC932C36022EF
AB437A48B1D7B2E5B2D9E2935768B1805917B485F6884A7B560FAB7F0EB5F6FA
72DABD6F0BE34EDFE97DF65B0612857F360BA1F06AF09DE5CAFD23D542686901
564423F1F8A3AB5AEC5A549EA5707353F50B147BC02FE9FAAE87F5A611B1D378
B62358BF5E25F6578B68B14596130968AFB5284AA776CDC3942819204B34B399
C3076661D0BF5541EEBEF456FF9B867B6994E2BA263C151D0BD24017EFA1DED6
5711B579E0B60F46E594F20832C6028CA6D11849D17B5DA8ED647B79AB412E0D
5ECC87C4EF6591D09F5D7A2B86EE1F5B5FF3B7B7D949F18EDC5E1913F5F6C757
234D7E5D66B8CBA85D7EAFBCC8202EB40685BC1112199530E6FAEFCAF25D9965
CF6BE7E5B6F3740DD98E2AD199D39C56BE85889670AB59100899E7CC878C86D8
63F261E8969E275792F7C38F61C675D75F43C6AAB7520FD896CEAA4303C754CD
B848EC526A1BD7C66F1DD1922CEC0B0CFF983D205AA1489DA13E2A006BCD91A3
BB5F43BFB1535CCD1672FBD40A3D1B14BE1C985EEA0521867422FD82022BEBE5
4D643F7C2A0D75DA3CD7FF6637D1F434B962F404DB3C6BC318EF55B0442C5AA2
F385A84BB64B27DA576A7BD8350C2860940B78C4E23576F354A66710A4674F99
EDFA00C510884D59CED6D3E493C298926B2685A94983E273B0780533FA7C32E8
02E47E2507EDD79BF25B98F65669DE8A867F5109DDD8D9094FDBA1613FA09E04
EEB0580D75F5873A6F378444C8F10562A57F0E4F5DB21413104C3A8D110710DD
A85C1C16BC219DBA43D41226153ECF720449E215CC79D786E57CA1229401BF63
4D445C93FDC157796BFA55045EF1DCF52E89C267EE4E8925F675BC0693A324D5
BF27B500BD9B73E650FFB71DEAFD8526EE87B9D9597313805DAFC433A6E5D42C
AB2CD2AB08BA4AE24FEF2B67CE1C07108699ACABEF284C19F63C0674C9CF6C25
22C96DD57EC103AF60D5E05063DE4A025FA5007DB8F3314CF57AC360E1F28340
DF37AA75DB61EB4929AB62872DAFA7DC51BF0687ADF56193C9D6D357122AAA06
C55A90405E029F608C27E76C984E054CE25800DD25631C8F22059305E17D89F6
D60C6E12974DE347D8B3E4C85105D879DFD29A8590F62933B22EC8CD48D81CC0
19C9B4E41A808171BE74577EF9C645314BAC0C5D26C1076AA31C8E8944F6C103
9C0EF935042D3049867723AA9551FFD58E493632205936FF6131D4CBD8880F04
0048728D0EE1112BCA85BFD5CB7ED892F1A55E037E4750E6F3CAB9CE75DE3AC5
6B9E570D265DE6182B00FBB0A75AC7D17C3CF29FD17C7573EFB24394FA5C76CC
0DC9DB83B6F549C06ADBF2FF608D9AF9E4E987E770A4A751AB2E085AA126D1DD
57996F0B9D3E8F573D418002E701CA4270B1E945A70B9ABDAD8789152867B1B2
679F374F0949AAA3222DB82A1C41716BBFF2B4E2F28C0A843F9A9F7696B2DBD1
8DC081E29A4DDBD91DFF437FF75780139E94B65D99961EC6D92ABBCCEE6BC433
3D013563A2E138F69A904DCDEE56EA78FE086797F74F876028A5A6C5EC77B435
6BF8281F2D2B9455F611A4113AB278EABEB511D16A77A401799D65079F767F68
BA44B66A84663D877A814008155FBF4ADD4F2D8EA4169C9682696B332BE9BBC4
518671B8D6440A282859DB641ED9F940FE49868C6BEE434017BD459FCF89FA30
E0281A08AB3702679765E6F21C48216AEEE4D31209BD7AD01EB17C5D14F3300B
4BCD78BAE1B1255B139A4B50B093D58C17846DE289FC0A908D3DEB35D08E2EAF
4EDE0C0C64A45E3F43EA0A34072495E724E633F2433A5ED9413970F91DBF8F67
0A15F72B455074678DFDBED70D546BC7E2C50ED4DC55DE4947780ED76337619F
86AF1FB6373D0CEE6B4671791A7A5AE99A990B727C6C7020F14175225EFEA392
02B2353CF4F2C664871EB1A07B3A6946D45571FC760DFF6C3BD2A4967C8D4CAA
EB97FCA86D77E3E150439D42F68306097ABE5C9E7302EBE72B7927487B8A16E9
7D3649103104D396FB0630AE944938B0FF61097B8C98ADDF1867805162B26492
00FC5C77003D22C3A1E82B87DC2C2C567D046ADAA0169B6A38F6E8D65D483940
C97544F888EE33CBEFA0457F1B420AA61EDADDD60410CDF5CA46C021D83D1CBD
E299B90BC0E2B108C96B16F9E60D3EBEFB8407807BFB460751C04ADD2B18096B
A2200DC10ED188D5D5882CEF0A5232202C7F74C30A4646D8726DD73FFCC525C2
C786BFAED952676CDC7856F14D7D59BF5FA6EF027A167C8DAEBC28D7DE5CB57A
30F23A2859902409CD4FF0FC828FC150E294DA02F9F26195C7191EAC5BB67EF9
A3DE7105AE4903D01C0D1793AA3387F7383D154BB5E75D734B94AA9032575B28
91FE7B40E914F225FED01111B5C55A60A69C415DDFE9A4CFB08DD920920702B3
983C218DDD110F6F37AFB159DC12966CD3C9C455742A3D17A3AE0601DB63F00A
EB6AB5BC7E59ED22D13CFDF599DD43370E6F28DB5DE10E11FB506D16094E18D9
C77CB25E04053E0552D1570292FDEB5E5E97328618BF64DE4BEE2CB0F263EF78
2C0D4A924813475DB2A5F3876C929B0A05304A6430A70EC98F4FCA0E8BDB022B
99F26C5F42A789D622CCE2408EC849635AC71A40D7AED32A610FE0495715743C
9519AD6A1827DDAF2D5EDA062C703A602B82325F6EE7D2BE04AC7FB769029856
DCDEE6F046C9253F3B443E5F62AF90BB935183B4D78854124B117B2F35A1E2F7
24B9928D3272F3427292110510B81B1D598AADA642549516E6C4E63F55B39E1B
CCE6038D184DC74E2E186A664391B7B84E2286974A446B78E89DD66F9EEEF258
E53D698E3F2B7FA8438BAED10889B11F218E4AA3703DF2398F5575678E145031
FDD3B48E76DC5386F7163541D0C4B93E527C3FDBE3E2630C81FA558EEE5E17E1
3A12D87E0B2934AFC0638C90968DB86477CFEFB85336653316D54EAE1A6089E9
807455A5A997EBD46C2ACA7126CD0CB9B5A405548BCCDC66511DF41856D2E550
B1E5EB5E4E0680DB3174E8650810BD7C466F5F43CDAEE01E23758E218E6E8749
42C33114CCADB18D68E562A162AE5CFF0CDDA4763AAFF2692126B4FADF5DDC46
69F20BDB3CD1453C092943FACFE8DF1F7B0A6C5AA46B4E5B040BF8FF666F7C11
67CD675098B616D5A91AE87A22B1E064AF38DB6592B324D8CB65F21458005AE5
60AB19CA41078D5E52080755C7D7AB3CE97AE2F4D8D40C1361B82E1B0B2F7D71
07A377EF76DF1F1D6A112403B2EE7AF1B21C91041D828C72E2878F2F679C3A00
2F588F83FD214FC6C24EA2A599EAA9C44772E82AEFCCF4C20426F7C29944270D
4685080BFEF325C6AE3E80A85FFF21505BF7D84597813143C60D3D1A515D52CB
8732BA9547B36912CF67F8CBDFC44617CAEAD49134E8205BC1046717FD13D4FC
5220E86C5E9ADFD6664348C7A8ADBB0B4307BBC94AE5888A7A4FD92860505B4F
9128470809AEB6A7E67AE8CE18FFF62B10812C6E452FA02FE7E5F59BA7D6F7A6
719B66AA3E4CF7A10D86C2E63BB1BCEFB144CC93424A1C0FC24255111255AFE2
F18C1272626A0B3C28CFA4F3D09D178C737025193E2ABFC8962C812057FAC61A
C139CA000B293D12E5797D09B504F072B85E8D991108D7FAF7B601661B2E2B92
D08E151289F0E62B8EFFBD33B4054B19B3310F6288DC591EA1BA68C537184B28
397FA3555705C417F577823C021042E874BC1C7DB1901DE7CE1A8A011CE362DC
6FE5CF1E6D5A7B038C412B255DD542E77E59CCBFAEBB27F26A5A3389398CFAE1
68DE655CCB85FB2841E444F87B8B46C868D6D2FAEF826C12ED0AC734005CE99E
8EBDD1C6675850CA8195A4F9FA9C539B62C9F3019A830CFB275F5435F3DD911B
E11DB381C01A9C0464550142E4C62B2ECAE693F327D25D98C9AD193F94381CC1
4827202D699E63A013EBB169289FB9333B6AEBEE1DE10F533D140A3B9599A6FD
7B8FF7AD0711E9D787E7D4BD2561B673EFFDF8F0815D7853C6F61278341A1018
28656231F45CD6E6F5099188C9604E2F35B3EF9BEE08C93DB20111E5C15ECA68
CDDBDEB1E05FEC3C0AB6A729F016D1DBC2D5CC2D796BA6CA1B93FA2783C18A70
81BB584FA7389C27CC1079AFF08657A926F5506C19AD3E8183EA5F68C98CB112
889DD3B16E3C2BF4191D7947DD3A9465EA3132A0A371A51F64CDC4E06F544F20
55F67F0ACD4E91CDB58CEBEE82D396F2A3B3276D8416EA2DDF447178D9CF15FF
99555E34634B52F0B8B83EEF5CCA51B26402F01312EA832CFF38AE62A7C42F40
5EBB4BE70A441D3151BDAD178EE10572D29BF719BC6C31CA404A9C2F3986CABA
C9291B2485069A74873F10114BCBE46E4DF6F23A9FA6743B4C506F4F4A5A37C0
1FA41DBFBFB965C82A676F2C1DC8E05DB6D173A1213F53DFFDCC9A06088B42C8
08955377F2CDB9E9B2009EB67D09231780EE80B36DF09371FBD42AEA82D51BF9
669126F15AAEB8C958779287705F6489EE5F1548A11C21562D863C371D8202AE
3125A0F4C49BE014D25D83EB3302EF6DC77C07A991FEF25A3A99980359E7E046
E29182F0F0D1F7D5055B426B1CED8C4F6A33B67D29ECD0A841751F69F5168EDC
D3F3DF7D37512F835F9D0AC73865D83810A3A6B72B91DCC5B8AD459E42D636B8
C192807D64F545448A59934D385554B1819F9277AC6FD3CC08A5CC35AD1A28A2
99E8106180DCA3D9C37BBFF7DF9FEDB9745D3C0B31F65A1853659A3EFC50D9F8
37BDE8ECEFFBD8BB34D2423CC62BB55B32908EDE4B8D2EC13F786F0447B08837
4AB3780A5787C961FE2354A44F4DE006E9A4F656E9BC0423C3931BBEE854F493
BCF958CECE84298DC6830F31E283AE14ACD3D593D3E2644444F7539E67A8C054
CF8FFA6C64F262934E4EA330B8A48154D410482DA1202736A20C89D6337DCFA2
7576320CCD85B077DA331A705CE078F9AF2B571F3B782893E1631735FC7FEF83
84AEA8C22734C2C7A242798CABEC88FE22762491796E95C793C00FF098B3A04D
A6593C846B1FB75433B24AF1F6CE1270429B2146D33B693F074E58FFB1B0CBBD
D1263A9AEDB29E4D93CC64084FE7BC4F5B60542FBA3BABBAC93B61A938F18AEE
DF26F58D771229C2A3A491455426500E410A707B64F327553081FA9CED02E69B
4C058DEA4F847FE19CD8A9E6604FBE708825C7BA991F36C587C30D3C96BFF903
2AEBC82C9F43A749101509FEB31E38C10077F1BAFD0FCC732A1DE9564A9D3E07
106E7C3EBF116741C894BF3F48A94A36A3BD6DFED9BC3104B7D31460E3FA77DE
5FE1CB5DC590B09ECBD676D2E3EB556E9B5A0507CA54A84EE8CDB4CD0882D4C0
E326AF17777DB5EE77BA4F904AF5E7FD9BDB90E754F6CB19C6F759E96DFF545D
63CA72EC43889DD76E590699BC2902CF926792FBFC83F4332A5DB7FF85ACE0F2
5ECF30A3C907107DC103FCBDD935769AE28F1BB1EA4029C7C87BD07DCB7BF2CF
D7E491C01211B9BBC1D2BA6085A4A6B311ACA49A4739C67ACF82AAC21477AA56
BDE2C4FD331CEB502AD286857DD67D898F8AD198128C8B11A8B9D7DC54F36AFA
934E907162B395AD1A47CC5760009233FDE0B38CD4EC1D07A9F817ADBD1B6F13
41766404CB5CD95D3946B1656F6C1ACB51B108F3F3EBA94A5F932FCE2CD96CA7
03FFC8167C703D76BE95FA1D58D9FC840AB53EEBD3C417E5C5F2E7B2B58E3FB6
D2C22C7DD495DAEDFC651D4A939CCBFF875032E159E8AFF378ED9C00BB1712A0
5D62932BE6D33A3FECC4F461BC49415DDB8B9B0D8D847664C29F8BB65B115E46
DCD6A18C9639778A72914EB3707E9E24D51CCB52F85814F69968C8776DB8001F
8685FC95EC7EDD60506506EDE0ADE6A136E77E24639C0A32F749D69F2696457E
3F49734E21F06F7CFD366BF9B140E1940E13D7443EFCEED61617E3FE6BDC20E5
809F5CAF01982ECE47288EAC8F6969F85D7E946387E6DF677C977AB426EB6CF6
86087DE12B3FC388BEBB427E01E60CCE30B0F2B691E3A8C1DD510CAC1278E59B
2AFB843AE2A8B12D3CE3BEE1CF7596C4CD0A252741DDAB32242279D33570B852
4ABBE98AAAEDFABA02521AF7D1036FA5C7935303AD6D0DDE22CC3126DA248FE9
2C0AC8B595C0B2A908AA1E450C7E20E75C2CC65B055EEEA33D7D06B717D9AD0A
D9090339E339375D60A34FD1B642914AD1214B8BFB43159501BAEAB263FAF927
B93B64A237BC0486514F6952862F207136E1E16B417B2E85FF5F7ACFC3009B39
005FE49A79CE949CEDB65B13B2EA22D44FA651507C6739FA847B5C691FED64CF
3793DD9CA8342333B1C402C5557E376495A1AF897DC7D3195C08A50701623EAE
23103EE8EC6634D7D316F01DB50194D4DC15D52DAE64F1831E2FCC5EC3D5A4F5
C2CEA86EEE3CAD79429321A8F96E2E1F02AD70E2FDBEEE625BB5E1972B80368A
39D854E8841836A407C3243AB2A1A92C852A7A1DB15FA670091B9CF82B633EAB
D93E2DE09720A54BF65951ACCC3EFE9914296F95C51784F74D7C1677CD21C665
18608AC5D90D8ABF8C1492282910DA2DF652D346973E31253DAD08488B1C71AA
6F08A5FE3F6222ACF3DD45DAA7007A733D3F4A203EBD502D6C566B04255142B5
5490E5231E496914D0CFFF622D232B1E6293D77469072D157087ACA414D28147
17BC297FF21649EFA535906A643AFDF49662442EFD59F05B961AF21DE2B17697
56BACEC417F721A1CA704913C49F8BC8243EB937E8AC31D96AE495A872463510
543EFFE5DD50FFC2FCDAB71640F054256D88CC4BD4DC84B5EEFE217BE0B43658
3B1F7059990C8285E8B30A95FE7E65D68DF8951796A6472DB08FD9FE5B4FE8DC
01D8F622ECFE3FA7C32B54A527889D1A5043A04BE41F18B2CD19AAC871DF4CCA
BC332ED7587E946387E6DF677C977AB426EB6CF686087DE12B3FC61592592AD9
68CB3E74C7CE0C692A00E53F59B1F52B7E3C527348574CCF9343ADDA08156FB1
E6117FB21C2E9080D865B2DE12D3184BD3E1A1F94AECE2622F721CE441512C26
12D122158C723C69AC7843C0DBEA2D226A96B3D1892AF19D50CFF1C8E6F121CE
477BC13FB3235F53AB2E2D522ADC89CF698C61B861F1B4CCA12CF4B2481CE2D8
67B2D46666CCFAE58CE02E0B25ABDC9F82B6BE0948024C5CF811080BF6B3F9E7
688E31593A54ACF96E5E0A66138907FAEE4F24AB5E19292866F8B534249B0DC9
79D0BB9542D5A2E34899C40980B34552AC4D8D754D42D0050A46BCBD7576320C
CD85B077DA331A705CE078F8FD51CAE4648BBD1EBF369E7696C8B79441C929EE
3F2792125C994CC1BC277FE4513DC2102D4A6D49F0205253743B33983BE6202E
89777695B9CDF0E3E671A8BB4EFD69D81DAFEC73B8F3419AF9EFF1090AECA836
F7040564BB70700CF2A0339F932107DCF0735034F53154A16BD4C7785A493FFF
C27F6AA52F79225868783A50546B12D019A45528AB3C9A630B8EA584A415A12F
D2CDE2A2B3FE757273E9760C57EAD7CB37952D1A0E9F744FBE8041D6C980A476
D9F0942E0AEBE6BD0EFD1F37687B723EB42187DB96581A70E88BF65ABB396A4A
1D65189A94A649651B207FCB0D067F058809C206D19C54BC03C10FA55CD68ED6
ADD2E056258AA295803C60070F8E89217F14F9516B3DEE16B83E7A2DDB24B704
DA1014F052E527C49A2A399A9A5E53D1C1C1E4306F83CA58D52A369E8E8645AD
23DACC059BFE0ECADA74E5E10262F9006D5F16497CF078028B2EA89D0C478B7D
82C25D33938D4CA07A22105F3DA0260363C23854E958D05EC0626BD6F367FD21
1F730A3E3C0AB0A894F08D7774102350E15460EB209E5D3A056EEB7F2C5F4813
B3473BB57651FCAE9AB59F82BC252D09D42892ED6171B0E25FC7EA594E01E0E7
CEE1D3F6D8394316EA2278A65E36711CE80A4360D829E3905EFB8635C76B0EB2
8FD20AF1751A73E37D5200F5A884569A619AF5F5BAD37D218B1C3735FB7D517C
344AFEC68F32FCBBFB7F47C813999C3C595AFC86CD0B7BE65DAEDB34AB55E7DC
0912EAC8754AE29EAE5AC87616C0C26855C79A8BBC9F306B44A7BDD35F637D61
6C7003024B08E5234F68FC62F8CED7E75E4A4C72088A7A79FF6DBFCC7CDBC9A0
6A550D2453ED7551F09716732B9B7F6CFD3DBEF28492DA49661EDD60013B3B39
4283857632A3737C532197DB97E3153548794D9232AA20C29B6CF38FC8562EED
36DD402E4FADB6B5ABDA37F99A52F410985EDFFA7828D37232656D15736C339C
5BFB43AF47577453FF94AE63E0D7575E2971F355C21312DA808311D07D8983ED
C4AF06D567B35592E73C61A2DC1F13CD09369054DC56953E94DD4EE33CD2B296
D91FAD4848A098ACCA36F24BD9C7BBD4ED3705DFE13EB7E3AF75001AE8C82036
22C72909A08581D1E82C2A9040EA273FA0CD888A97E1C3E59334BB9CF3BC025C
012E85B2B1C1D5159025883E3130C65182747163A723A9E71F504DA5D447AFE8
CFDBD88089F8E4F54416E90772ADBE89EB2297A025219D0B26577B7D1F020AF5
7E4ECF56C9B895C2B0CC01A76BDBF90C69DF981A652C11440F024431328D961B
72BF5435880D10FD984E2ADCB4A04DDF34CB499EC864B2332429C9661A98DC97
46C08C4908E723D17040EAD128DB37141ACA92AD15326581296F85483FE343D5
4EAD9D29D5AB7DC23CFEF3D415456438FED1B333FC882FEA17CE5ECA50FE1EA6
E3AB30A52AA3E631B7417F217B0BE86CEC32409D8B66D45D27DE3A06A64B95E2
85E8AD93D568750046F603187C6C3D451B69246E1B04069357CC21D8439789FD
52FB8DEA2B46C468C443FB502408ED3271A2EBFBC82BDC7F5A14D37DCB6631D3
AF2D287EFA3B3678FD6C15045198C249B9C994130A91A5941FF5A10EAA8A5FE2
CD4FE659805F8D35CAE3F78F40E9A45653BBAF2A5DCA560DB5B9FB7659262049
81DC0A45B3ACC18F6865BBEE2C50DB46DFD46EBBBAED8A49B82FF79AC6EB0B36
E2F4794FF8D48E761CDB854398BA98AFAEC951690051A2662DBE191C6AA8642E
49ED4F5370E9C13F0A66881FC91A4FF6F1ABD1A48BE86A783BD5E0935B9AE0C2
0F25A9379E3924A26CDA4FDA13B91D0B53F41B0F31EEF6E5CB36F29D511773E2
3DD8C872A32D175EC93CF8721B7ACDE3255CA12FC2A295BE82CFAA6481E021CB
53EC320AAD6CECD064FCF0B4BEE58EBE61914102AD4E5AC0DEF18BEF1136AFB9
2D7890ACAF0143570E5FB223ED7EAF5BDC32AFD8FB372D4B6B44ECEC87E538CD
1A138A0F482ECC55ADCD02E486F235F225882A033464895E2FAB48A10DAE7D72
55DE7D37A5E70ACD844E3367DE4DB71312CBB85ADD21D5A406A9DBDFD0CB0D55
16F615FEC677A6D52BB7D6B0C6BC1D6B35CEB85520A70B252F935F7CDFB69A1F
8A67E106F0ADF47D149B38A0D7E4E4342CFDD22C780278D973CFE64295108131
959D62AA6D345373B58DF4002F04E2F4406F99BC482289181D89CF74F9995B40
E5C55FBC81D9E8F8A7DF54973E9F237FD4F509708D4C043017B3ED949686DF9A
6609219685284FE6A4E39C4EE44BE4AB58ECC0777F24E1D1DF16D6654B3533B5
19C2658DC69C4AFC46FEF6D6B2EC17F6A56159ED98B450806EC9100A418DB9A1
90873368D785FBB2758DD1B0BFEDF2C3D6DCF61D67F2D000A00D9B23BC937C88
49B501D18E1198602B00DFA6AD28B3B4E057EDEC637353C7D47BF41FBEC8804D
E4D1A91ED4903EE143F0FF84E3670B8D1D046FFC2E84019E8870502F535B2564
F43A94EEB6F15B3D625DFE4E53DB8619D13D8F541EB2C9DD4ECE1D5C657039EC
1F6C652A2BA52DC028A438B9DFA0D9BF845CE38E33893E583995445B5926A7AA
84A5E96521F3A544426A80EB40662AC616BFDCF80180EE6DC71C01AC6AD35381
0CA7938B2DC1C2BE23B43458474D510E94FCE182C53165413E1FC77FCD8FD94E
2F8F2607FEE1B55382A62B35FA16C6216BEC4C91B9FFB9528ABB5CF9781082DB
56810D7BA76DB8C5EB4C4A1E09D4671353EAEB628E09FF7F84DFAD11383532D6
2176E87C9CE253A193BFAD2575B7B23BF4B6D601501018824C0E0CFD58F97A95
7FF98D5BDA3E3E052D9385C33EE973E7CBECACEF5E50D132AAF7E7C32A92D49A
6295CE18217C34587290413C870368709A54C7F059877B15464E7DC2E8F4F4B8
3CFF8B1EA27CF25FC10475FCD86F61EDE3925484E3FA45344C7FD3D4D3A68B7D
2A5980832196D27869EE01D169FC58F743CD16C8F0A0FDCBE336D7AC19EC7550
71FBAE79698AB50506B0F52D0127148DFDB12EA7DAE363C007C9D9AD64F8D4B9
5A379970BE511A90A773A97D8956A65CF6BF8D3F29A8376F7320ED5DE92278F3
1B2E573FD86696D98800443F32C94C49A689CC99E9238B1E39BA4C4FAE1BCBE0
74D111A9F8F8B04FD1B6250BADA65F839B45D165B65C08F45D40DC167EC0D404
169226E63E6694438B3FC655BBDFA80B44E7B86A5F864C31CEB2ABD660D2B068
63C4B72BE2093426677988F8AC9F7FCDE0DAC8BAE04D7C08A12DDDA2501C6655
411A4DF2DF658F42D355F21D678FBED344CB30F555634425B334011FBBC2A5CA
7B6CC6E4491930A1D4B662BC21C5C6FC7B5E1BFF8F5A257FEBD9E480D3AC9EF4
B833D951CEB6073A23BD83238359DE4D2CB53F1FA77EA74787017E92DDE4CA70
E9A40FD1ECFAC007352614C0B6C531C06E1725F392156948902D8EE0976D5F3C
82542C5E344F803547170067B51D03AB2C798E665514BED008E700D6EC1CBE47
E4FF8D63E69590F7A269A1480B694F268CA7C9F788B1C2B92F34A4DA8242A728
3EF893A875CD8F019F124FD73991B3D28D3AE17E13C4711484075AAD24C10874
C856F4FDA49C6066BE2187FBE2AABD9272349E4C037061F44EFD734AE6636660
951CE771C000FAB997C8699AA219CB578D5382E610AB2A3A44B1EB69C07BCBE3
A853130C1166EE98EC6907D12E824D1F9E7004CAED6DBA20F6A900EC119A9583
2AE63CC875F86A646F1492C18B24E84633052EA5DC1430B2405D8C11BEACC5DC
E371CE0F825A65B22E682D877D3BD457397797B1F5E1DF730CF36E7E0DA7F980
538AAB1A4A96CFBDEFF4DE11AB022E33B2765DF15FC2AD59ABF8303352287119
8AB3E954EDD88B5059BFBB42AFFB0F39371DA1EBCC31C4BDC042E1F1EA4D4F7E
587BAE3540102B0745FE0B75AC33767B7F328A8E8E537444EB024C9840C2E6E1
EF0FCFB0208C7A0645DC66CD18EE7C8FB5636D02AF9989AFC62E8940835751ED
D0ED2C9219D15B5F82E9D4AC9B5424312755C4B74383FD094BBB217FC3FE880D
BA07B832A01384198E068B9B5C062C6CE2A07BFBD49CADFF1DC7AD838B897AD7
28B35D869CF78691E587A1840B6154C198C0600BA3F39066B1FBC54D120820A3
AAB22942C7E9005F98A47F26BDCDFAC5798A163FB190C3F77D265CEDC3E47A03
CB465E0E242EDF115BDC288E48B76861D96302C88019490CEDF94D82B84486C5
E8597B40A0A28AD93CAF233AA4F91BDA5EF43A63642F29E75B5D61F79BD5D97D
90F0B345B4DD772EDB0C1530F132984AABFB43D75CB8F79D077D284A55F65A0D
4632507DD8C691AA01C9FC089968D5CFF25FDE1E33600B4140D1D218852D18C7
CAA60C3A169EF901CFAE0F5F03741B47E291575E3BDB0305B7E996AC870FA38D
C30C25057A23DF1469CAA260ED4AD93BC9534EA6AF6B5F6F364524C88D6E6491
D7EBA73AE972393DC265B0696E57429E6BD74FFC6257A2E0CE1910FF41A7B70C
9894450394AD4A2DAACA192E92CF195742D5AEE902284136342E7802A5BF4C92
35E28F5D93FD74122FBE17C519B22E3630FC1D9B1FFB3BFFAA6D0A20C0381ADF
48E1BA5AD72B3BD2EDD03D137866473DDD942178D2526868726C4B551044BB5A
01FD8F30E96A773B1E19920DF95EE490680589DF9FAF2BD300218B87158C5B3F
9D3FAAAA364514E842B0BA12325562E2406AB5D8B80C9A3DFEDD77A7CB5CADA2
89C5836229DD441704D1D86275E443D19E570DA7B8A1CD8AFD87A13CCF097995
2AF3FD3EC8045835EF455E810575A2A67AC8028B65F12B9005B4FB618EBE5A30
2D4B800C912973BD7C41DD8CD3A819585732F1B41CA1E8D767B1B06D88D8D5FF
DC1415AC493E6C54D813566B65140D9E4D4A3E9F5637E7FADABF9DD1BA8601E0
5F75A866EA6C158BF98C972813F9C2D69B0A085F0133089899B4B066FD03384D
EFDF82C8265FA634F542804658D30A5BDE1F29C1EF9027B7923C4130374C506F
4F4A5A37C09F3D17ADA6ABF446A391A6CB102C676E3FC2341213B6E89560A274
AACAFFAC1900804A6EBFBCF4D435EE1D30E455E721AFA83D961C273BAAE5C288
29BA21F81ED5A8F99F3C469CFC1418F0D024CE420D6340DC724D3F3766CEFDF7
CE30CF083056F41C864236A66AC98D40F15735295C3FF2451BC599755A8E4B65
A6F2285974125319889598627F86DF9D854424603C5A41EDBB1672482FB4B44B
1A0F97BB010BCA8370D299F8AE89496D5F5B240DF150995A0BF73DF9CDF61F23
1C1D2319672D65564E8DF971C2E5288A9AB45A04202E10E11EBF4BB945729820
33D3F408CE388F204100066E46031621B44DF87DCB55564FE19EEF8B1073FF59
315798A1E19344CB771382B8BF0B0A21D92C2B9A8FABCF4EC5A78BFB459E964E
268DE68310F453DE243D39154924F4739C650A8EF8D238C73BD6689A0657DE72
ACCEAB6B77A4F4A47CB6269D49966E24FE51C7D95F5174D5D07A9411B6E88C18
CFD9B234CF2F2D603D02671CD5F484E1419B199244E016A893A4A50057B21E4A
95AF3B9532C303C68553C91CE83431F239BE883C519B65E6E3F0A8AEBA211A64
CA8EBEAE5684A6656D809B993EF2E30E3E1EEE071641F9F1ADF7F8CC1F53B2FA
4BD42855DC2726A318A0F0B8118C26DC90A6170A08F68AD5F9208C635632D301
4A2523949B68130B5580D751D5C8FA8BB388975C348E793456B6F8F9B9D71EB3
F9670BA9B2D1EE9CC8A6DAA3DF82DF4C87B3190160CD9EB7135D5181ECB5EA41
DEEDDB87C32656EFFB6E6F083AFA1585D04937F1272C0534C89BC0223A5E5351
2A279B795EDF97EF2A43BDA0F960B99B37F7304EDEB0BB1EEB65E1E581E0204A
BA8B7A5E8D728A17B00F611A713F9A6F88926FFA18614348E17163485F0671D2
30005F2910EE2AC2AFEBD23FFB0E63790DCAD94BA80A303950EF8E8D07AD70A6
2B8B43DD7108277CF395C77F321FB7E7AEAA45B2F56D92D0956BF321AD81402C
31116809206D8FC9AEA87866065A86E8C27F8FF6DBC72EF9EB9AD584935A5867
6976DDD2B6E118FD1D420C88EF4DBB83B3C77432EE201F41C83B213EBBBC0E6A
27C9AF41206F504F14DD921D63C229C8B7CE8F110BC544E9509B6512F0FA8215
5AE1D55E91A79F9E1AFDCEC589B204723ED0B64CEC33739EDA87ED682689A817
38CC23156D008528BA5FF99B1AEAAB5AC7DD22CD157327FB903283D1E73023BB
66A4AE15DC7959BB36A10B51E960762CEAF30DE0A7C9320D907438DB5791820D
EF40818A1D00C096DE7E2408AAD5F82C21FA65E77045A47892829917CCD016FB
61B73DC9EC998B5047501BADE2CD11ABB5D867B248C4B975CF8779975D7DBD63
0C3451F856FC12C097FD1F8AD2597EEAB803420F009FC84A0A96D80EB73CEDF4
95CA411E005362D33973BC9EC7C85AC4ED0530D3DB793C9C24C7F71CEB5E674F
1FE0C3EC8AD61283053B40F143E2FD5A0BF82404A36AFE7363DA2564052C5160
BFD7AD66A25EE0A29CA22B0934F64D98FFCDF202A2F39EDA2E32817607A7E9BF
6F4505AB1087E27E4F29B9E55919483A1E0D82EF043D08F475D9B3CEA0EAC723
D05DE6564893A924A2A4479AEF264E532C22A32181CEFF18480A564F8091A421
73A304E85BC149190E45C1F3106D1D439FA6D93D7A8ADCFE13A09EBFE5F71A89
A5962F17D820488450336225C776C30FEE7DE8CDEF76B79746DF911F556899F8
19A7FF4D65169F1FE7A3D115E94D83126336DCB8867A795FA1E383AF6ED045BF
1102FB39275FF7D8D7983121C213493777A807F216E2009FFE57F6CB0CB72BC2
6EF0ECDD2AA4878689CF391A95DC4C962D8ECEA8E753C2DEA7E42DBE6ACD40D0
3EF76649A6AC929DCD3FF06B9FBF62FB150D9990883B5DF70118B704B2673528
6F105FEC8DBF2044EDD77912A6E278C4C61BE30E4CE55CEE9E4D5B2FC25F7C5D
4EF9391026D75CE7A11CA281E861BB0E2F6D96625BC74AD099199C387A31767A
FEBEE82BF109FB34C4AFD0390C32A10912E41B77C22EC0D1B0F31398B13B38C5
BC2C4D7890DF8420A589993F6D8F839808711285EF6B567C163C19A69E25FA0A
544B0E16F41F33C4446DB8D066AB1B4F59F97F2A13C267EFF9D7CFD1A202580A
2200CE18290FC093C9E693265E820AAB59B3B1799F982D6F4B3AE7D00CA7E346
BBDE977DD9C6815B0E53BADDB173D0FF994EE40E3AAE59FE3F30785A5EA54F0A
60D09BACD3026A75AB1D8186CED61534FE6210FB0CD88B5C6A8BD7970E1AB75E
8CB1975266138B7C516819F07C1F01EE32CDCE87348A4142DEBD26DA522BF30A
BD1E551A9276EA210906DC643D6EC2CD373FF9A307656223A0A491EB4942E54A
E12BBFBA0F939AEFA5A770923825E20CE98BE11B947A788C1E367B6CD922F6CB
C6763981960B50C55AB0810349CD54B6635B00733C5393263FDB0DFEBF2A1D91
F5ACE4241F076C5FE22CB61669CDA5CA0DC94DF5B154E35ED63FDE6F40A4125F
BA79C4653CA71C9BD82D0578237C785476660078A3C0362C87214B6C5205D7B5
9E0568CEC424B7A487A48EA5B567B07AA8D634C702038C766E4AB8011F695455
576CBFDB9A0801E5AF54218EBF21C308A9C437E2EF18B5936096AC6850566703
0CDF3491176019783CFF9219C646A8008D65CD6998E813BAF9B493470DB5CEC1
9492B8498D81D982800318D338D884EC947C2E7467A552F704EBEAF9F9AF6A64
9DD0F7E5D017FAEEBF9FA0D47725D1051C7E83443BD095556D01F401BB75DDC6
A33F1F83986471E7E8447E9ABACF937BFA08C55ECCC2C60DDEA24007E678AEC1
05709D6935F926EB644700758C75DAE4F0AD8AE94A90FB6CC62B2134BA92333B
7B8B4EAC9414B2BCB952564ED207DED2A5D919E832DDACDA7A35AC47B935BF6B
039801B79EC06C7B364E6040B557C7D6B0F7E5E5521E27F0B4CABEFE35951059
7C3ACDE51248B34BDF1EA39FB720928EB2B74B7A944066B4D81374652582D52E
5A39D44A1D800430CCF8C292B4C979BE5C47D88B674468ADE25C6511CF0E0EE7
C292319697D5BC9116205EB19FEBF98632D63BC149DAB09B96871D7508E17C81
A5199AD757B86144A1C04688FBCACE6A72FBC195C7B79B943172F9B002BA02DB
9896FA4071A3C674A62897A9AFA2D3439CAC404A105500BB0938AF52C2FBCD38
3ED590D575D6F68072147E32DEED5C9FB49D201A1E916489BC37E66CCF943F77
584114CFF5B5E46334D384817DC3FF74B7425C2118FE971025F7E19EAAC9E7D9
9F610E708B7E53E5009DC366A4B883765DA1F4D2739858FB38FD01FCD2DF88ED
865643179D0174D32D04B777B8BFF4E881A188219B9EFFCD74E3421BF6F62B88
FFCFF2130DC247B9D83798890A76C489C6A256FC5FB2E27A01D037F912A27BF2
DD909944245C93323C8145F36828B3B052C99D71DA601D5CC37BC63BA9EC36CA
E05DDE2B9564CA4D97AD76CCA5B7EE56DFEB75A4CE61E9AEEF028CB91396ED34
C38E76C97B1452B44268E390ED50D7C55573E4DF26491EEC7A7B127C85DC7F06
D4C04ED9C7AE4D64F00DC7B8213D06DF77BCFC05045C8410F9F4C584F4EE8D2B
2380848306F12A275DE016D08DF4EEA40D206CD4151E77DFF0D1E5B9EF8C94DB
8ED2564AB461001D89D2E02FBC552FA04DB4DBED98DA73BCC7A62E5D3678A0D8
D748A65EF254D07FE6A862D87B70140FA7A082534BF282220947B2D7C7E15149
F4C68AB1C2BFD00F84423B14EE180161A5BA285A634784B5C38BF0CE1D0963CE
9E3627289EA1C3C455D8E7D7F6695055586AD4366A72B69C186D57B74D8268BE
DED04246B2492652DDD3D3E79F2669FD1FE8C0A55CEDAD517840057B3C8854C4
893A8539020ED7EF071525CDB93880A24EAEADF171B5C07019345630D28A53CE
D4851DDADF0DF68AF9E71C36ACD88250AF76E8C6DEE2E7E1A65036AB730E3CFF
41E458FAD7D7A57B113EFBCACDC7A87D48B90D8698F68B20FE4CCBC34B6AC222
58FE13A7AF68B31ADDC89F7D256855E528F28AA1D8E75BFC9ABC5F3BBAE90E17
7AC1E374514FDD96D5C9701C704C9092BC47E66B3D8D4B9D8A909D842480F535
0535BEFDD5214B37D26930D071A679EDCE7E09E6AE9271978280C6753045C840
785F033D885B728DD4908A2F0E1C54B03BFBB05D94BCBCDE82D6BCF251157DF0
B68572C4374E9EF2B4AB97BD8F52BDD8B92EC714E1ED9B38BD9C341F0080C8A8
AD21873ABA54E729C84B42DA7926F26EEFAAF14CA7EC7FAD5E7A8A8853D9B729
EBB9D96EB1BCEC302859B322ACE8141BA95279F15B669F146101EC0A83496AF0
8324B04151EC41CFE9353D29974AD09440EE9307549F89C1102C9D7886690123
5C66B0375A4E531CCE1A08A96B8BF6324E9DAE1176C7724CEE2C70F3A203377F
7D1E8F3817CCD9786F929BFAF65B9F093F66AE0198DB15A1EF920C5BDB3289A2
A81EA6B5676EE829C16BC4FE435F9F6FE4B7D23F29D5FACE40BDF7F9B0714AB9
E6E655AFE2A96860C61572F6332A2BBE1F80C6238B4E1F92BC16E2EBF82488B3
2710451F72B84A25624F30345A584BA506971D9188727543507A36A01100C58C
A83B231D43DB48491FB04589C833A91F30EA372A22A334C72CA9365BE3EE430D
E35D412860A412A8BE9F36AFAA86AB187787D64E4324AD135154E0C2371DAF9E
8CB15BD3258C7FE09B732B67E46621B63E912F9A4F2FC046B5975A654B57FD48
914E72FC476A3D4019D08C25E59C8C8A90222810072C4F2437E7068DAD4F6EA7
6B85DE85922AF417E95A8E1A84BA0C4BD4A6BF0ED7AFB4A1FB529BC8F976502D
50077BE9AA1668BE627189993779AFE4E6EE708F3A11FC2712B27C3157314BB5
A8D210044D08E49D9273F5BDE64010F443E8CFD42368663888593BEBF9980ABA
46C8E1E8D30561EE8D84857517A5F51E22F0FAD16939A98F9438064838B04146
058A2C52D99BBF3D3D9166CAD15F41F7AA0AEDC115AF57A6320C8F34A80669E5
6E02FCF0530E683A96AEDBA01D6FCBBC224F848848058F1D76243E898F2442AF
858196ADD0AB7EC59A2C676715A54F2879BB03C350A0B6C5ECDAD7BAA8CECDD3
2FA41700BB348538AA9E7EA1A4EED27039C40D9E1181C5F8A914D883F38EF413
1EAD223717E66736B72EB971AE1E97C161BF37E788FBECC240A9877168607539
2EA6F98D59B8A55EAD0AD822DC049860CFDAD862DD7CE85A1135F6641391B8CA
B8783CEFA4A53DD7D5DCEEBF171B3DB39F198B7AE11A9C4A45E14D4F6EB27C84
90646297C18635A6CA17004E4CA1005281F05527BCF8ABCEE5B559AA42CBBA8C
DE9FF407C8A7E5FE9FB9ADEB3150A34363BC35D052DA1C3DB6E76F6AD8C92457
70BB3C5C31CE1626D8F34E8C84F801CFC922AA636F3A059B473C6A429FDCDC16
A22EF6482675266C9D2F920E10317280552840F6CC27E5E0F6BD4E4F6B174F50
F329143839544A66D588DED77A0E1DDFD25B7EFF8465526789F923A307B9B41B
B6280E0A6E5D5328754A80257890A6B6D9CDBB12C5B1C9353CC0516EE29A951A
83CE56CB6CFDB3D5F0A7286971FFE2343F698DCE2813C565CD2B25247F626E1F
EBC13CA08744DFDBD273D67316FE4AE8906C7D86A4C254E91D165C09D429C6AE
FCBFE9447A13D00FA3D6E666B4AE09D7B53B59360CBA00608A4B24045FB082AB
4FFE58DDE52B3200A78E86386D29A7CCEFBAA8F35B4813CC9D289E56951D1FE9
DDDE60530ACBFD53EE23242B4CC75114C016CB004610AC6A84BD327150E6AE97
1A7E893E368B8495362F87CCB41F8F9F578737059CCC46416ACFD62C7DD6020F
8394FCEC5A6398F275C832B0315453DAB180934C9F498CC62356886E9B27AFB1
ABFE628A6567768FD3A4E0C90672EFA91DA6164FAA374E3C846535939358D67E
881D3FA2444334FB5421F839B7FE61A3E58CC805DEE17E29D5B7F2825BC54EA5
B18471C4483DD9BB601B85790C64FDEBEF7C38689959D8B303A2F8AA3E6161FB
5257503A8A8E7E676530E8FA2A9E8AB6CBF86922AB5CE1959F650DEBE8329B32
07839522BB31E0D5EBA5C714719B98DC6A984C0E944711C77542A66680C9339C
7F2D5D5BC48DB367464FCC848329BCBE84245A4B5E96BA220E3CAD4C0CBC0A65
0D81D9F707976414FEC828E3E87AB62182198C7D07D92D7B80B41CD6D2780E13
6008E988CD76DD6D133771BB90A655DDA60D36222581420770650CB05A14C8D3
F127A14B35900ECC3CBAADD93DE6987111C9C304CB555D6628A6EDA1E49FF74F
6FA4FD574F36AADEF2C1366937D67D455B119B64DAA0E3377831355B9FB04A42
C2B1D48E2D0A23086C6B9F832987F828AD62C379EA70584F800C6E5383BD4683
DCBCCD60B8E47A05F1DEF0CCA48FAB214208284A8F508D04F7AB59A05A901D8B
991528CC1ED3B30CDE23A07FFBB7178E651D8DB2860BCFC54F567DB1F57D6689
014E4DC6FD2645834B6C21983EB1BDEDF6548BF49EA8C6EC19170373345E2701
001FB94BD7514FD3B0003ED42406BEB0033344B568E536EC77A07B93A4053EB1
5AFAEA40E319260D8DCB04197B84DD29B8F70C924C43A2BFEC536592EA879CDE
6B7972F4C158F471434F11611BD0EE2AE9758494F8A44E1EE8C86DFB8EA89753
6DC2816B4121844771ACB3E92DEF2C3715831CD4F548636AE2543356A10BCA86
6A64E553D39174E8976867475731BFCBF77993B27F23C4B9C00850EB53B429E3
34610A086977052B17A032626772388121ECA7246FCCFB4C5CE5663CB4883A92
20F39D0144B18E2C1614F41C3932EEE241576C9397E05345B2970824C016A66D
9A2F9F96D45D538AFC13852FC7AF1DA794D7CFF5863DD09EB442AEA8A8F2F134
27439971B8428AFE5CDDDD5721D5695E1B8D43FB4219F9B5AE8FC55F44CDE55B
AC26DDE51D43FAF408DDB04BC3824C29CCFF215B564B31C3BF6E00BF981A05CE
39B566F1E106973A178E3F2D79142AC751441CDAB00910DA060AE5EE6A566A6B
A00893D10A217B69C20B7C5F29E3F75FFD18B56A8A5A253A7CC41BC255A4745A
2597372D77A92BE2F6B9BD413D4CC15B85509750AF485DE8DCE8D6F0569350AA
D0D3F4DE56356F862D6764FD9EA134359F44D07B30F27565EF2D8812D285B9B5
9F8C8A49FB435D44455E01DA4A94F447A97175E18373A7A108C2925DEC6557AB
AC315C170F158632C17F42128EAE3004F4689471B6C19340D1226D540527F178
81D39B1349A12023F3D2DBF8369FC16BFD3EBEE5D9F01D76BD7860105F01B949
A6924BC4C46D8B2C82B78BE9CFCCB119E276C1CD867561C9675B8A92106F53EC
C055DF28F5447BA7DB13A18D5269470C3E6661DEBF98C30C32A3737FEABC4C6D
E5E74C2CCE08B84C86843611256D745A7255842E2CBC2720A72068FF87BB0BCB
DA4B8FD30EBFD8E947926A7AD4A39C3E396F0039666B5F3D9E08B7A152C7784A
C66F6EC752D4236A96B5C4E2BA30E02B88EC78FF896C6E4D672452A4394801F3
6EC33D06A414BB9D4345FE899940713A7428922DA0BF15EC7190F1717A8D330A
5D5C49791ECFBEA059A5082A22773A5148DF78B709F122BD2367DE24BBAF6215
F77F00081A0C911F1EEA29C36DE74B7B16AA04828FE02F8C2A22BD64092A5556
6DC0C67DAF6DD7825A6CBD56048BE3943949B1CC8EA2810F58792A873B5EB6DC
81FBDA19A36259EF7169882216D0CD7231B5ACFE00F965ADB89E171134E3BFE6
5436CEC38E941B1E7F573D8C0964194509C21E85600DCB75CF4862EADEF7E262
E32940DB52D0635323E8E33DDA81106182A49CB88706982B6687B8E51E12F0AD
378B858DE9408E4EBCB96CE67468ED160438641E71D673717BDE9F41743DCDAD
88BEF8B3F7104BCAA6E752EE90D2B38DB6ECCB527595851B12A3C1E1FB53FD9B
346864E6AF6393544B6AA5CB3E7D88CA425CCF064A83F6DE23CBE6A031413537
1F2AA523BA4ADE325CE7E648920DF308FF986C1A78CD2F49ECB484E49E3CAED0
3BEFEBE7764495860FC77D6B63F84BAAAB7BA3DDA7417D937327B9B17DBDA92F
6F61640C755C11AE5E942821556F4E2234E0FBB26E18616431361F7DB830AD73
7005645E7DE5F20895EA600C270EADDD52F4620D7574FBB32CA8ABAF88874037
BEE41CFA13CA06EAD9BA13FE15B781EF82A767879216411E8B0E6A5586B6F49D
5B02434555D99F2E2832816EB67AF788FDFF37ACDEA67110CE092C31968B92E0
1790DC00FFC27F6AA52F79225868783A50546B12D502388FF08EDC1D254AA9E3
55048C87857CF229376A70ACF5FDA5DA864C0C87F694ED2937E3C2EF8EE302DA
2BF9421D44114C5F6B43342A87FF1966E6E4E7379E1A16E18C09C45B55A3ED80
2103EF371D812AB0B07155BA68A8C9A77A9E4F006F9DEE56903E2328C95DBB9B
E412452247B0D8CDAD32D6982637028A7DB2590E367C9A4B24C0499FB1611320
491A48DED20371FA6B02BCE1CBA5C80BB272BA01A17A7A72E2777F36E93BE8F4
880533E9C2068F4C67C5D1172091A38196E4048767C391F1D40F84C9755C2CEC
CF5C462973AAAD8001ACFC18FD5E95144D0A7FE6EE1551AFF5DF4A96FB72BE1C
C8E5CA162A40C17F3A81A043ABA9FADDFB68B1507BE2A37B27A8474D69B67935
20439F2E9D0960DA0196DD4B0E8AEB23739AF92B579720B119FD2F40F01974BD
8E120C8087675EC96EFDE2CF5F084CE45C76ACDB4D483303C17560B4222FAF13
9C90CE7F8D08ECFBADE933CE14EF4B9B99042164C633B9FF63BCB64766B93539
5BD8CB1E8273A55216313CB926B3E2941949DF1B66B1D1B68F821ADAFF3C67BB
789B693FDCF8F4080839E669628898FAE6DAF369C50781157E739C254AD0E3C3
DFFD0665DDC72FE8375C91FBD9035841767258BC7CDE236CC7811E1DA6A7A140
25B6839664B8ACB442DB8A16532FDDA928828944EA657066B84C17059030556E
36BF9D67CC9112C669F8F85FDC13036A8A24B892FCF6305CFD71E5978F63E852
56DFBC3277A137FFAD0C81A5B9AB95E019A4656F585B913681B5FEDB13BEEA02
64D39E3DFB7765742E60E70E5C59051E38BD2DB695C237B0CFEF3023EC12CADF
C0ED0B9BB89417A4CEF30634C7107FF9847C634E68611C1C54A88150E257F0B6
91350DC0E4B38EBB6D0B01EE2DD800CBB4C43737E131C28DE7043CFA31C753A7
22ADE666BC702BF0E8C92A234BC8010C5324A8BDE955497048E5D520F3A4A972
B07B5E6DA7874373D8D6D9906D0DDD6FE21381EBD7E779723FDD3E7208BCB014
65B2BC0429162BE040639F2EE9C0FA967E7C2EB55BA9ACD4B6A4E9846B9D8B82
E5C7FB106DF362CD2A397E74A1FCD21E5789A95CD7C2B2DD6A02320C95F4C5A6
D3663AFF2DE36A2249BFD2DF460161D3EA5C1E2D4ABA5D4C249535659573BC50
4F7BD9AD7ECACCDEC7C5B94732ED588181E253CB5FA4D2D486752659C90B85D6
FD474677A412E2185C7314619180FE81A7A5B53E6B9AA2A92180BFD3F7FD1D7C
0305D67A11D28A41208CB957D8695DD214E31A3C16FCC1BAC1C70ECA10FBEBAF
327103E5C17026C40204D23ACEB473C65C768D28FCE6B53C964F07EA9E09ED36
24794C0C045A9458C6C166600CFCD8CC4B007EC9B5F8E0E2CDDCEE93246DC5D6
C0E5F9DF3DCF064F5A123CB8C7A62FAB9DD62DD40022B4AB9AAF279B918E8AE8
B2EF2E39529212B65E7565AC5AF02793ED1ADE0A08009D2CEBBD8EA7BA2E9F8B
8FE40033F8D8AA23A57F745E383FF8BB6DC0C752C8AE387F1D4C10ECC35D842E
C6AE415CE7AF5AC07F36F16C5D6AF50E4D826A8140014543735641173CD23378
F9FD3F10F71B00445307E815E95AEC89927DD97CF502E051A1FBF6453E13F337
F31FC100C92E6405D7DD1C1CADCF7E712A8AE7473D485AB9858152E3FA121F9B
DD04B7EA8A00B2A6892A8C148C2FC26E7F7C2F368DC2FBB2303E5FC195A7B9C3
1BF599FA98E9FC6346773531445FA23A4A39E98E471113C9B5356A9CD88C2616
430A0452193C353608A044282A4B8D36D4F76E939EA1AD8441FE97B77583C6EE
C292ED7B132D5452CA09818EFF3982045FD1FA85144C7D57622EE0E27355FA9C
E1F786D72DEBEB61EB4738BCA0E82AA8046BFD46A4849D90C1F11B4120787C48
150591B14E156AA8E7CEA158E99E37E4773B561C5CD2EE10814CC2C10D9B1536
E174784D21CA938B31D8127B9B6462C898A51F928C61E37748CE08A60064CB42
F4B5DD688729F3F4316304B09B71A9DE12DF6BA8E12A369E2B8947FD5F5CFC91
ABC170A91F29A4CA724B9889DDFA11E51B54179AC07212BC0FCB06AF5B9937B1
4C43CBE3080F67CB143141DFC533F5B87A0D016B3A67CAC1CE1953C9CF733216
178B252D3920883C966C6C44E7FFC2E83ADA764F9F27240A8866EA71B2966167
34020B514C8B677ACF46CE463ED2B57D1BD5C69282459F752DCCC4D181E963ED
B9980A05A6AF8B9FD88399B97B61C11702A3FE4348663C76B4E51FCD43C8CD14
E65B2068CC40344D489CFB91D1E9D4911C8ACEA9B7B8DD2F0B8D82752DF19FF8
5F3ABBCA8FA90504ED7698A5FDB4685C29D7ABC599CBE21843BBCC7A54DEF44D
33DDBD1715531592F8DF58BFE58AAC895AA48BE6DC3E25A9DF8158DF67183B0F
A6ABE87FCB83408D75C2C2C8FF81BC81C7B1E4411F3B475DAF165B9432DC74B9
D0E12AF914DBE32DD3C1292D965AA7AEE47502E92ADFBD5B57E3D3D80C06EFA0
CB7B6606ED644BCDB9A47AE3A6F4A91D36043824B686988E777AD4D1FFE4D228
9F549ACFAEA18E600574FB77490EAFFD25DCCCA5921466386BA82B01FF8AA830
4BFBB472B93F3C7D49723CB3509F29909A009B6625CD539E9583034195851A0A
7FAB1BB9286229CC3069BE68899BA82C40948F1B06A1B8A026B3CA477D4CC612
D0DC8CFFB38E771996A4283EF893A875CD8FFD114933499DD9C75B7E3E6E66A0
9D9CDFEF20D611A620B6AEF318B1F51BA4B71A2AE7948C26408408F057DEF452
6FBEEE7FBD26C56E692DB496C9CCDDD789D38C643B17E3100DD9DE9BB16620B3
DDD90580E8C3CCCABEC877293371EABEBF9FAEAF57E954E61212D08F2CE075EA
C165629405F1A3DCF51013F0A95A98C18EB9480289790693FF542917F792338F
843FA8349F660C272D54592FA4495596AC6822EA8E529B40F6458AEF4157279C
6E9CA88A359E0E92C1FB18CC4B968D70DFD13C6223FAC9AD3120E84F93CBD317
817EDCC1726036E156CDC649D036DA3EA71E1A80092C9ABE53C544DE02DABFDC
209098477C25EC093EE2F3B97181AEDC88F1D875E5523F3D2AFF386B9527B547
BE27F6F81FF57E44D274A166071D85D21F30FF77D9C544D7AC4EC43D61AE5598
7BF22378DDEBB657D274EEA1C710C9CCA91C3A0F3DDAAA9B45734348FF76B720
846D652EDD710B648CC72313AEDE0CE988491CA0FECA60B0E1AD2F8A011E072D
55C073C6294F2D41197DDBAC11DBD978F3032D2FC6BD54FD7664FAF472BBF13E
05F072DAFDBBC9C69DBA334DC309CD3CA69B36A1E9AE526A059EFF61F065CB09
FA30F905A3448483205A841CC9BBD8CC213FBA27CD4F9D6D60195EAC4220B7FD
F85DE8F0E92CF6826FEA7D38726F2A1891340BF1DA9F49EDA513D45341C925E8
C00BB3E642A64685456B6BAF629AB80858AB476A9CB253EB68F06E4351E6B555
A0FC49728867E9A65440A13AC25D5FB37CD18C66727A37A358B1683FBB956394
31C05218420DD30B791B1D7359CEDC67F92DD4810CF684E0A506ABC5E8D8015D
7B38C7F77D12BC7D69382A4C87890C9DA4E53930BBDB54CA2AEF866BDC207E87
C5EB4C3D782F2BB7EFF536480AA43F0D960075B607A138BE9008E88CCC394CFD
3B7A672D73C22382AECACB2D79BA61492F2D6D5F5916537207D9E97001EA90FE
54F0D772A8461661549339B595022723C15799E53CC35A02D4C3AC8EDCE822D5
8B48EFD1BA6EA35340088E34EEE2526F4D28F06AFCBF1634C62F634A89A2E037
168D45B8D27B59565DDB82B57946CC317216B6F631AD72A2D76E82B5A6A085BE
10281686A6CADCD273D0925D546C0A7B151E72F8823B281CB3D58CEB6263F92E
CA090CDF84B947EA4A9D3F7C84EA1B8A6D7300408FFFD2ECBA9F18A9BC4C4481
0607BAF889CE32B4AD91804A740DAAA9E70C2384F9C53038C19921A4C934669C
EB5FDF145F74B6245E4F75EAB30486971398C482345C1AF7D1036FA5C7935303
AD6D0DDE22CC3126DA20B1E610DAE6F7DD940F08764DE837286EBB53EFC8AF3D
72D2AAA0DBBF4E4BF9A7AE1677EEB4BB3D29C2241E157E2B417C1865E2E3FBAD
3BBC137FD522CEEC5B7CA9EA077819AAC361613A028572D68AB9D20F3ED4130D
20DD35E8051DF0328DB42C4E19F7190DD2C1658D75329244B308AEF06637586A
F5185655D71592270DC46238DC08D966C80AA175AFCAB68E295076C40F76B948
F478C098C4218540A9FF11ADA29B5A795C29AF1758A378BBED7ADC7B04BFD025
325A2DEC8E69751384DC7263DFB82B2E2690FADD963F55811ADA2DEDB3BA1B14
24F2805232AAA184F9E249F0DFCD212314A379EBFF13321BA7E3A23FAADBB28F
A508F31573372865BD27C9960F0FFE55C2DAF060E6F21C48216AEEE4D31209BD
7AD01EB17C5D14F5924AEE9655941884D3B9FFABCA4F49031745D8620387C29D
98D37774642CBB01A1CD423EB147F95B5ACFEF1074DE1CFC4890F90DEFBD39D6
8FAB9D72BDA04004E68D5D0C49999A099CD1AD92F8F860019BF968EE31210329
D6F09F7E0D39884C8625CB19AC00356E030FFD1FEABFA4AA02299A38306BFBC8
B4DCB71D274C0E1A106C34B771D8C8394A60F1CEF22096AE18CCD9AA1189F6A2
A882EB2322AB847F88919FCAF407C96C3AA0B2F20F09BD300AA62CE611FC866E
3C0B1610DB86758B39E00B1830F98696D62843999D71C5599F89C29824458186
DF6558A1331F3D24763E96F2C385B9F9C34E0382F02EB8C8BF9C060F93A43676
F2786D00CD23C6C8A987B9724E973A60916C62EC122AC115B0E99873D98F53A5
C694F5BDA0B93611900D564658F0A4ACFB0CFC3F7D2668AC317CC09A9FB065EB
106F365321CE68091E6386CC913D45547312253EC4282A2426B0BFEF43388905
170F1D5C3C48181E7DF36A5B51AECE84C5E04B6B5EB9E250F75311BEC3A57B6A
A6308B3368D785FBB2758DB877C3BC8EE6ACC26B3FE11758A991C044A53F37A8
EE47670C298D410EAB47D2E7A0A4CB7AC623150AAB3E8287DBB0B54DA1614758
9A2D3DAD2E28B505FD9A4375316B14E89B0123BF82B071ED4E495916FD69B176
E7FD7751D44EDC65FC5F9B44032D11CD02423A1B8314ED0E66497DE004D4D7B4
2A1B903FF3D808BF5121A207D8D60933654500EAA242936CA349681441427023
4FEE67FD5E522512F8A5B8E273C7E66E4F4F90804CEDC22EFA0A078AD0EBE5EA
D2EF5D65C011FC67CA0C8FFC0270E2D4F5C231D5812CE452A865C3750867A53C
A4CBF67AC4DC65D2FB3CE2A36D9ED09C04812BEA04D5B72AD063FD9745A5DD4C
F75D5B36BFE1A0AD8D93BF7BFE3F7AFCE0D078D518EE422F47E0857192CC2624
2D918F052A01336BBDCBDCE708C0942AE56448B1CC96C7B51306ED56C37A7C80
7E93C7CBDFADDD149633E6627F844C5A3E1A4460933D8C1477306E7793DFAF32
C45B7C0F0BF79744EA57DA004FC5DC61120D2FB7A11DA985D7D47C02C5C58589
36DA35508230C17EE398EA2B9629018673151ED275A8E4B7A3BC663156FCB02F
A56116BF0E59CE1A5C8AE1EDFB1567439AF718694436907FE28111D167D8D026
E62BD650262085ED460C597A4BF5FBFA574B7FE5141DE2EC6E1C7FADCA01B5A3
443D56DA935ADE10B55860403449D5C33A8CB7483D3970C0166712218F9741A9
D00613B682D689F89455F5F0B6A748570E12AE441CCC55EF4FDEC8C69E642E40
09ECFDCA380643BA4030C2BA469042D1DD927F2D037546EF2BEC14145E8FF21F
E8E149E5F84431706D4E571E1F9318EB4565DE3191F7E2238E9961CAA575B9DA
93B14581C6E968DAAAB24B9C2F7570C3A32A45BF1B62B45FB100BEF20B42714D
8F93A7599DBDD6AF0975329109C6A52CECC9DBA7DD1CB7F525B1E1A696F00149
B3AB1C8A16B955BBB22FDB1F232C419EDAF7958602476ACC5C1E88F6BF75C5C7
79FB701AD10D29DFADE44E587214F9552EC57073905D5F48F6F737E6B9C26416
0511314BF6E74BF2378551028FFB8E15880085E3E19DF3C7F19A7195E992B35C
26AE839239BE723F7315CDC3A18F207D8881A9C92C09B14B13AEC8BF93C1128A
593A4087D6F6F6F55AB2C119DE916B29DED5D4A2E9A7ACA47D7948ED203244CD
F87FD3B754B36DDE9C44E775C80AC4ED5ECACF67141266CC9149E3961FE3EF92
2B863C95251DC840C0C3213A866426ED1046D18A216DC1A558673A4D484AED35
58013290262E5454C7170EAEC68788CEBBBA77A41460596AC6D11FCF35B92697
4E000FF9B8C5C25B30D9FBE35438D0BA614FD05F7E2D2E8670A48163396F234E
C232DEE5CB0F9AAE0389F1D1AFDF1281379FC2AD332410C36856F5285FF8069C
489BFA1FC1478B5E08A98C8D605883DA1D986312EF13B28C716B660158575734
AB8FEC37A21C29DA4ACBADDD256B043A3EBAB3B12CEA753FBCE23A058D826A58
42A684A8F9DD1DCA294989DA706CAA0ECF36C30F76ADEBB7EE6070F28ADC55AA
4287FE9D43ECF2F4129C15247178329E96297A66F202E3AA92878CFCFF6DFB79
E2243C38F8B8B8B40CB007B677E422C2F4B1C2E854940DC5B37BB0A2C89A8B85
19F644893B22AFADED0255A88EB090534CD2EEDD29FFF3258CE0759A57FA7D9F
59B498D3E81D2BC4FB15A69598947ADE8C37906003D98F0F6A1C5467CB1FBB7E
CC77BB81F460D323BAE3B0F0EE3726CF9A6E1938DEC7983008E2A74CDB45D756
FE6AF82904A60D4DBC6817CE5541753460B35F135E7C94053F5849DE8EC3C4AD
98E2AAD2827BBC41F075F70A8BB95BF5844733F0DF5433A46B180B48A835B96F
F771FEC9CCF9FADAC13FEAF57217EC88D9F3A9EA6017525AFAF2D0AEA75E052A
2F49CBAEF9F134684F23BDDC4053E3D2772F46B84E903D8D43C349A064E03854
4B53F281D4FB9C8332261EEE5EABD290918AE3987D7DFE49CCC7143BBD46D13E
9E026B5509AA74D73D0ADDCEAED4D64D0C0C82F11D35BE3C9667CDF183904A0D
CC610F842E4E8E8B5DC84AA0EE61A9163A625ED6C40B93CAFF2E7425D96CD0B8
729D659514E7A4354F08CA35B0E12C1C81416DB353A4EC3E45A14069217598CA
0C94BB7E10C81D8A82D8F3A323E408DE55DA9D8853309386AA2433B68A35AC26
088FA7A951B1083BE8860E7BA7DE9759C4753E5522E3C23B684EA62E3386753F
C2260182484EB1D13A0EC854725A92AEB557B62D266F4E8E3E3632D17A9D3835
9DF3961E22BE7D6648229D708497ED9188AAAFDDA783B98CDF79BC8863AD1FA4
6DFB53210FC3534D69BE12138B523D14BB47ACCE79097385915CA90C728DE22C
CBF1ED8CAC1D01260E50087799D0F10FD9F4121FC0ACFCC0CC6E19ACD074420B
1DA9CF2691B800F786A76E835E4916502D14A8EC1CA4B891
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000
(E:/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA )
@start /Fa 205[406 50[{ enclmrm ReEncodeFont }1 664.176
/LMRoman6-Regular rf /Fb 135[530 13[381 106[{ enclmmathit ReEncodeFont }
2 885.568 /LMMathItalic8-Regular rf /Fc 173[959 82[{}1
1328.35 /MSBM10 rf /Fd 185[723 4[830 15[553 2[307 46[{
 enclmec ReEncodeFont }4 1106.96 /LMRoman10-Regular rf
/Fe 160[909 45[606 1[606 47[{ enclmec ReEncodeFont }3
1212.12 /LMRoman10-Regular rf /Ff 203[993 52[{}1 1328.35
/wasy10 rf /Fg 255[732{ enclmmathsy ReEncodeFont }1 885.568
/LMMathSymbols8-Regular rf /Fh 200[470 470 470 470 470
470 470 49[{ enclmrm ReEncodeFont }7 885.568 /LMRoman8-Regular
rf /Fi 143[1107 5[369 50[0 21[1328 31[369 1033{
 enclmmathsy ReEncodeFont }6 1328.35 /LMMathSymbols10-Regular
rf /Fj 162[361 1[361 31[361 361 6[650 650 8[506 506 40[{
 enclmrm ReEncodeFont }8 1328.35 /LMRoman12-Regular rf
/Fk 134[634 739 17[641 102[{ enclmmathit ReEncodeFont }3
1328.35 /LMMathItalic12-Regular rf /Fl 9[650 123[578
686 686 939 686 723 506 513 506 1[723 650 723 1084 361
686 397 361 723 650 397 578 723 578 723 650 6[795 2[1336
11[1011 1[469 1[1021 849 885 993 2[975 1[614 11[650 650
650 1[650 361 1[361 2[506 506 6[361 33[{ enclmec ReEncodeFont }45
1328.35 /LMRoman12-Regular rf /Fm 3[1196 134[1196 837
849 879 1[1196 1076 1196 1[598 1136 1[598 1196 1076 1[982
1196 2[1046 6[1315 7[1605 4[2041 3[801 1[1691 1353 1412
1[1554 1530 1625 13[1076 1076 1076 2[598 717 45[{ enclmec ReEncodeFont }
31 1912.83 /LMRoman12-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-2331 165 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a -2331
165 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a 1328 x Fm(F)-239
b(A)717 b(1.1)g(-)h(1)f(F)-179 b(unktionsgraph)713 b(-)718
b(MC)g(-)f(BIFIE)p 0 TeXcolorgray -741 4800 a Fl(1.)p
0 TeXcolorgray 651 w(Im)434 b(F)-108 b(olgenden)433 b(sind)g
(Darstellungen)h(v)-36 b(on)433 b(Kurv)-36 b(en)434 b(und)e(Geraden)h
(gegeb)36 b(en.)921 9338 y(Kreuze)1265 b(diejenige\(n\))g
(Abbildung\(en\))e(an,)j(die)f(Graph\(en\))e(einer)i(F)-108
b(unktion)921 11330 y Fk(f)511 b Fj(:)369 b Fk(x)g Fi(!)h
Fk(f)142 b Fj(\()p Fk(x)p Fj(\))433 b Fl(ist/sind!)p
0 TeXcolorgray 0 TeXcolorgray 4628 17316 17248 45 v 4628
29672 45 12357 v 5337 28727 a
 currentpoint currentpoint translate 0.46672 0.46672 scale neg exch
neg exch translate
 5337 28727 a 5337 28727
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 260.62679 a add def
/d 0.0 a add neg def /h 202.58337 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 5337 28727 a 10187 24003 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 216.80975  0 -43.81703  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -43.81703
 216.80975  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-66.01056  def /maxTickline 159.90427  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 159.90427
0.0 -66.01056   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 216.80975
0.0 -43.81703 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 159.90427  0 -66.01056  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -66.01056
 159.90427  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-43.81703  def /maxTickline 216.80975  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 159.90427
0.0 -66.01056   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 216.80975
0.0 -43.81703 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 8942 21139 a Fh(1)8942 17989
y(2)8942 14839 y(3)8942 11690 y(4)8942 8540 y(5)8210
27392 y Fg(\000)p Fh(1)8210 30541 y Fg(\000)p Fh(2)13101
25348 y(1)2680 b(2)g(3)f(4)h(5)f(6)h(7)-26033 b Fg(\000)p
Fh(1)10187 24003 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -1.5400000000000018 def /x1 7.6199999999999966
def /dx x1 x sub 199 div def /F@pstplot (0.004464285714285714*x^(4.0)-0.019345238095238096*x^(3.0)-0.3273809523809524*x^(2.0)+1.6964285714285714*x+2.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
10187 24003 a
tx@Dict begin  { 99.5846 128.60652 } PutCoor PutBegin  end
 10187 24003 a 922 x Fk(f)10187 24003 y
tx@Dict begin  PutEnd  end

10187 24003 a 34187 28727 a
currentpoint initclip moveto
 34187 28727 a 5337 28727
a
 currentpoint currentpoint translate 1 0.46672 div 1 0.46672 div scale
neg exch neg exch translate
 5337 28727 a 19466 29672 45 12357 v 1 0 0 TeXcolorrgb
20175 23826 a Ff(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 21832 29672 V 4628 29716 17248 45 v 4628
44692 45 14977 v 5337 43748 a
 currentpoint currentpoint translate 0.60216 0.60216 scale neg exch
neg exch translate
 5337 43748 a 5337 43748
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 202.0142 a add def
/d 0.0 a add neg def /h 196.32419 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 5337 43748 a 13400 33102 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 129.17526  0 -72.83894  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -72.83894
 129.17526  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-96.17041  def /maxTickline 100.15378  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 100.15378
0.0 -96.17041   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 129.17526
0.0 -72.83894 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 100.15378  0 -96.17041  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -96.17041
 100.15378  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-72.83894  def /maxTickline 129.17526  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 100.15378
0.0 -96.17041   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 129.17526
0.0 -72.83894 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 12155 30238 a Fh(1)12154 27088
y(2)12154 23938 y(3)11423 36491 y Fg(\000)p Fh(1)11423
39640 y Fg(\000)p Fh(2)11423 42790 y Fg(\000)p Fh(3)16314
34447 y(1)2680 b(2)f(3)h(4)-16584 b Fg(\000)p Fh(1)-4352
b Fg(\000)p Fh(2)13400 33102 y
tx@Dict begin  { 50.07666 93.89413 } PutCoor PutBegin  end
 13400 33102 a 922 x Fk(f)13400
33102 y
tx@Dict begin  PutEnd  end
 13400 33102 a 13400 33102 a
tx@Dict begin  gsave STV CP T /ps@rot 0. def grestore  end
 13400 33102 a 13400
33102 a
tx@Dict begin  { 0.28436 0.0 } PutCoor PutBegin  end
 13400 33102 a 13400 33102 a
tx@Dict begin ps@rot  RotBegin  end
 13400 33102 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0 360 113.89128 85.35866
0.0 0.0  0 true Ellipse  closepath  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 13400 33102 a
tx@Dict begin RotEnd  end
 13400 33102 a
13400 33102 a
tx@Dict begin  PutEnd  end
 13400 33102 a 27699 43748 a
currentpoint initclip moveto
 27699 43748
a 5337 43748 a
 currentpoint currentpoint translate 1 0.60216 div 1 0.60216 div scale
neg exch neg exch translate
 5337 43748 a 19466 44692 45 14977 v 21832
44692 V 4628 44737 17248 45 v 4628 59124 45 14388 v 5337
58179 a
 currentpoint currentpoint translate 0.64 0.64 scale neg exch neg exch
translate
 5337 58179 a 5337 58179 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 190.0641 a add def
/d 0.0 a add neg def /h 176.4069 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 5337 58179 a 12455
55659 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 125.76106  0 -64.30304  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -64.30304
 125.76106  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-22.76227  def /maxTickline 153.64464  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 153.64464
0.0 -22.76227   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 125.76106
0.0 -64.30304 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 153.64464  0 -22.76227  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -22.76227
 153.64464  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-64.30304  def /maxTickline 125.76106  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 153.64464
0.0 -22.76227   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 125.76106
0.0 -64.30304 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
11210 52795 a Fh(1)11209 49646 y(2)11209 46496 y(3)11209
43346 y(4)11209 40197 y(5)15369 57005 y(1)2680 b(2)f(3)h(4)-16584
b Fg(\000)p Fh(1)-4352 b Fg(\000)p Fh(2)12455 55659 y
tx@Dict begin  { 58.61258 90.4795 } PutCoor PutBegin  end

12455 55659 a 923 x Fk(f)12455 55659 y
tx@Dict begin  PutEnd  end
 12455 55659 a
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 153.64464 56.90549 -22.76227
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 26376 58179 a
currentpoint initclip moveto

26376 58179 a 5337 58179 a
 currentpoint currentpoint translate 1 0.64 div 1 0.64 div scale neg
exch neg exch translate
 5337 58179 a 19466 59124 45
14388 v 21832 59124 V 4628 59168 17248 45 v 24758 17316
V 24758 31703 45 14388 v 25466 30759 a
 currentpoint currentpoint translate 0.64 0.64 scale neg exch neg exch
translate
 25466 30759 a
25466 30759 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 190.0641 a add def
/d 0.0 a add neg def /h 176.4069 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 25466 30759 a 32584 28239 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 125.76106  0 -64.30304  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -64.30304
 125.76106  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-22.76227  def /maxTickline 153.64464  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 153.64464
0.0 -22.76227   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 125.76106
0.0 -64.30304 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 153.64464  0 -22.76227  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -22.76227
 153.64464  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-64.30304  def /maxTickline 125.76106  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 153.64464
0.0 -22.76227   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 125.76106
0.0 -64.30304 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 31339 25375 a
Fh(1)31339 22225 y(2)31339 19075 y(3)31339 15926 y(4)31339
12776 y(5)35499 29584 y(1)2679 b(2)h(3)g(4)-16584 b Fg(\000)p
Fh(1)-4352 b Fg(\000)p Fh(2)32584 28239 y
tx@Dict begin  { 59.18175 81.37486 } PutCoor PutBegin  end
 32584 28239
a 922 x Fk(f)32584 28239 y
tx@Dict begin  PutEnd  end
 32584 28239 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.26 def /x1 4.42 def /dx x1 x
sub 49 div def /F@pstplot ((--2.-0.*x)/1.)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 46506 30759 a
currentpoint initclip moveto
 46506 30759 a
25466 30759 a
 currentpoint currentpoint translate 1 0.64 div 1 0.64 div scale neg
exch neg exch translate
 25466 30759 a 39596 31703 45 14388 v 1 0 0
TeXcolorrgb 40304 24842 a Ff(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 41961 31703 V 24758 31748
17248 45 v 24758 45263 45 13515 v 25466 44318 a
 currentpoint currentpoint translate 0.62744 0.62744 scale neg exch
neg exch translate
 25466
44318 a 25466 44318 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 193.8699 a add def
/d 0.0 a add neg def /h 167.3765 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 25466 44318 a 29774 40210 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 154.95187  0 -38.91803  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -38.91803
 154.95187  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-37.10716  def /maxTickline 130.26933  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 130.26933
0.0 -37.10716   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 154.95187
0.0 -38.91803 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 130.26933  0 -37.10716  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -37.10716
 130.26933  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-38.91803  def /maxTickline 154.95187  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 130.26933
0.0 -37.10716   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 154.95187
0.0 -38.91803 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 28529 37346 a
Fh(1)28529 34196 y(2)28529 31047 y(3)28529 27897 y(4)27797
43599 y Fg(\000)p Fh(1)32689 41556 y(1)2679 b(2)h(3)g(4)f(5)-19733
b Fg(\000)p Fh(1)29774 40210 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -1.367814021398395 def /x1 2 def
/dx x1 x sub 199 div def /F@pstplot (x)  tx@AlgToPs begin AlgToPs end
cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 2 def /x1 5.445940009284722 def
/dx x1 x sub 199 div def /F@pstplot (0.5*x+1.0)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 29774
40210 a
tx@Dict begin  { 83.57515 88.20367 } PutCoor PutBegin  end
 29774 40210 a 923 x Fk(f)29774 40210 y
tx@Dict begin  PutEnd  end
 29774
40210 a 46927 44318 a
currentpoint initclip moveto
 46927 44318 a 25466 44318 a
 currentpoint currentpoint translate 1 0.62744 div 1 0.62744 div scale
neg exch neg exch translate
 25466
44318 a 39596 45263 45 13515 v 1 0 0 TeXcolorrgb 40304
38837 a Ff(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 41961 45263 V 24758 45307 17248 45 v 47992
4800 a Fe(___/1)p 1 0 0 TeXcolorrgb 48228 6792 a Fd(F)-123
b(A)369 b(1.1)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 63196 54804 45 v 0 TeXcolorgray 24746
81281 a Fl(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fm(F)-239 b(A)717 b(1.1)g(-)h(2)f(Reelle)g(F)
-179 b(unktion)714 b(-)k(MC)g(-)f(BIFIE)p 0 TeXcolorgray
-741 4800 a Fl(2.)p 0 TeXcolorgray 651 w(Eine)613 b(reelle)g(F)-108
b(unktion)612 b Fk(f)816 b Fj(:)675 b([)8 b Fi(\000)p
Fj(3;)221 b(3])675 b Fi(!)g Fc(R)613 b Fl(kann)g(in)g(einem)f(K)-36
b(o)36 b(ordinatensystem)614 b(als)921 6792 y(Graph)432
b(dargestellt)i(w)-36 b(erden.)921 11330 y(Kreuze)400
b(die)h(b)36 b(eiden)400 b(Diagramme)h(an,)g(die)g(einen)f(m\366glic)
-36 b(hen)401 b(Graphen)e(der)h(F)-108 b(unktion)399
b Fk(f)921 13322 y Fl(zeigen.)p 15161 14288 16061 45
v 15161 25440 45 11152 v 15870 24495 a
 currentpoint currentpoint translate 0.55914 0.55914 scale neg exch
neg exch translate
 15870 24495 a
15870 24495 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 198.37946 a add def
/d 0.0 a add neg def /h 149.63478 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 15870 24495 a 26645 16417 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 101.04422  0 -97.33524  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -97.33524
 101.04422  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-72.97658  def /maxTickline 76.6582  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 76.6582
0.0 -72.97658   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 101.04422
0.0 -97.33524 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 76.6582  0 -72.97658  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -72.97658
 76.6582  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-97.33524  def /maxTickline 101.04422  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 76.6582
0.0 -72.97658   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 101.04422
0.0 -97.33524 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 25400 13552 a
Fh(1)25399 10403 y(2)24667 19805 y Fg(\000)p Fh(1)24667
22955 y Fg(\000)p Fh(2)29559 17762 y(1)2680 b(2)f(3)-13434
b Fg(\000)p Fh(1)-4352 b Fg(\000)p Fh(2)h Fg(\000)p Fh(3)26645
16417 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 26645 16417 a 26645 16417 a
tx@Dict begin  { 101.04422 76.6582 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 26645 16417 a 26645
16417 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 26645 16417 a 26302 16703 a Fl(x)26645 16417
y
tx@Dict begin  PutEnd  end
 26645 16417 a 26645 16417 a
tx@Dict begin  PutEnd  end
 26645 16417 a 26645 16417
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 26645 16417 a 26645 16417 a
tx@Dict begin  { 0.0 0.0 pop 101.04422 76.6582 exch pop } PutCoor PutBegin
 end
 26645 16417 a 26645 16417
a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 26645 16417 a 25597 16749 a Fl(f\(x\))26645 16417 y
tx@Dict begin  PutEnd  end

26645 16417 a 26645 16417 a
tx@Dict begin  PutEnd  end
 26645 16417 a 26645 16417
a
tx@Dict begin  gsave STV CP T /ps@rot 0. def grestore  end
 26645 16417 a 26645 16417 a
tx@Dict begin  { -0.12936 0.0 } PutCoor PutBegin  end
 26645 16417 a 26645 16417
a
tx@Dict begin ps@rot  RotBegin  end
 26645 16417 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0 360 84.88803 47.18477
0.0 0.0  0 true Ellipse  closepath  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
26645 16417 a
tx@Dict begin RotEnd  end
 26645 16417 a 26645 16417 a
tx@Dict begin  PutEnd  end
 26645 16417
a 26645 16417 a
tx@Dict begin  { -66.16122 55.1198 } PutCoor PutBegin  end
 26645 16417 a 922 x Fk(f)26645 16417
y
tx@Dict begin  PutEnd  end
 26645 16417 a 37830 24495 a
currentpoint initclip moveto
 37830 24495 a 15870 24495
a
 currentpoint currentpoint translate 1 0.55914 div 1 0.55914 div scale
neg exch neg exch translate
 15870 24495 a 28813 25440 45 11152 v 31178 25440 V
15161 25484 16061 45 v 15161 37777 45 12293 v 15870 36832
a
 currentpoint currentpoint translate 0.56172 0.56172 scale neg exch
neg exch translate
 15870 36832 a 15870 36832 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 197.4621 a add def
/d 0.0 a add neg def /h 167.30225 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 15870 36832 a 26894 27572
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 97.8775  0 -99.5846  0 ArrowA CP 4 2
roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -99.5846
 97.8775  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-83.65112  def /maxTickline 83.65112  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 83.65112
0.0 -83.65112   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 97.8775
0.0 -99.5846 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 83.65112  0 -83.65112  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -83.65112
 83.65112  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-99.5846  def /maxTickline 97.8775  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 83.65112
0.0 -83.65112   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 97.8775
0.0 -99.5846 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
25649 24708 a Fh(1)25648 21558 y(2)24916 30961 y Fg(\000)p
Fh(1)24916 34110 y Fg(\000)p Fh(2)29808 28918 y(1)2680
b(2)f(3)-13434 b Fg(\000)p Fh(1)-4352 b Fg(\000)p Fh(2)h
Fg(\000)p Fh(3)26894 27572 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 26894 27572 a 26894 27572
a
tx@Dict begin  { 97.8775 83.65112 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 26894 27572 a 26894 27572 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 26894 27572 a 26551 27858
a Fl(x)26894 27572 y
tx@Dict begin  PutEnd  end
 26894 27572 a 26894 27572 a
tx@Dict begin  PutEnd  end
 26894
27572 a 26894 27572 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 26894 27572 a 26894 27572 a
tx@Dict begin  { 0.0 0.0 pop 97.8775 83.65112 exch pop } PutCoor PutBegin
 end
 26894
27572 a 26894 27572 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 26894 27572 a 25846 27904 a Fl(f\(x\))26894
27572 y
tx@Dict begin  PutEnd  end
 26894 27572 a 26894 27572 a
tx@Dict begin  PutEnd  end
 26894 27572 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3 def /x1 3 def /dx x1 x sub 199
div def /F@pstplot (0.1130972583234016*x^(3.0)+0.3307862988886959*x^(2.0)-1.0255164282445268*x-2.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 26894 27572 a
tx@Dict begin  { -81.94403 42.67911 } PutCoor PutBegin  end
 26894 27572 a
922 x Fk(f)26894 27572 y
tx@Dict begin  PutEnd  end
 26894 27572 a 37728 36832 a
currentpoint initclip moveto

37728 36832 a 15870 36832 a
 currentpoint currentpoint translate 1 0.56172 div 1 0.56172 div scale
neg exch neg exch translate
 15870 36832 a 28813 37777
45 12293 v 1 0 0 TeXcolorrgb 29521 31962 a Ff(4)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 31178 37777
V 15161 37821 16061 45 v 15161 49112 45 11292 v 15870
48167 a
 currentpoint currentpoint translate 0.52762 0.52762 scale neg exch
neg exch translate
 15870 48167 a 16303 48167 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 206.3145 a add def
/d 0.0 a add neg def /h 160.97055 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 16303 48167 a 27078
39148 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 108.97926  0 -97.33524  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -97.33524
 108.97926  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-81.47862  def /maxTickline 79.49193  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 79.49193
0.0 -81.47862   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 108.97926
0.0 -97.33524 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 79.49193  0 -81.47862  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -81.47862
 79.49193  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-97.33524  def /maxTickline 108.97926  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 79.49193
0.0 -81.47862   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 108.97926
0.0 -97.33524 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
25833 36284 a Fh(1)25833 33134 y(2)25101 42537 y Fg(\000)p
Fh(1)25101 45686 y Fg(\000)p Fh(2)29992 40494 y(1)2680
b(2)g(3)-13435 b Fg(\000)p Fh(1)-4351 b Fg(\000)p Fh(2)f
Fg(\000)p Fh(3)27078 39148 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 27078 39148 a 27078 39148
a
tx@Dict begin  { 108.97926 79.49193 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 27078 39148 a 27078 39148 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 27078 39148 a 26735 39434
a Fl(x)27078 39148 y
tx@Dict begin  PutEnd  end
 27078 39148 a 27078 39148 a
tx@Dict begin  PutEnd  end
 27078
39148 a 27078 39148 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 27078 39148 a 27078 39148 a
tx@Dict begin  { 0.0 0.0 pop 108.97926 79.49193 exch pop } PutCoor
PutBegin  end
 27078
39148 a 27078 39148 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 27078 39148 a 26030 39480 a Fl(f\(x\))27078
39148 y
tx@Dict begin  PutEnd  end
 27078 39148 a 27078 39148 a
tx@Dict begin  PutEnd  end
 27078 39148 a 27078
39148 a
tx@Dict begin  { 32.46172 78.35835 } PutCoor PutBegin  end
 27078 39148 a 922 x Fk(f)27078 39148 y
tx@Dict begin  PutEnd  end
 27078
39148 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 28.45274 79.49193 28.45274 -81.47862
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0 0.39215 0  setrgbcolor   0.8
SLW 0 0.39215 0  setrgbcolor  /ArrowA { /lineto load stopped { moveto
} if } def /ArrowB { } def /ArrowInside { } def   /t 0.0 def /t1 1.5707963267948966
def /dt t1 t sub 49 div def /F@pstplot (0.5976207839914188*cos(t)+1.|0.5976207839914188*sin(t)+0.)
 tx@AlgToPs begin AlgToPs end cvx def /xy { F@pstplot 28.45274 mul
exch 28.45274 mul exch } def  /ps@Exit false def xy /lineto load stopped
{ moveto } if  49 1 sub { /t t dt add def xy  dup 1.e30 28.45274 mul
gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  ps@Exit { exit } if } repeat ps@Exit not { /t t1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if     28.45274 0.0 lineto closepath
gsave 0 0.39215 0  setrgbcolor  0.1 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0 0.39215 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.0 SLW 0 0.39215 0  setrgbcolor   0 360 1.13358
1.13358 35.52554 7.0728  0 true Ellipse  closepath  gsave 0 0.39215
0  setrgbcolor  1. .setopacityalpha  fill  grestore end
 
@endspecial
39142 48167 a
currentpoint initclip moveto
 39142 48167 a 15870 48167 a
 currentpoint currentpoint translate 1 0.52762 div 1 0.52762 div scale
neg exch neg exch translate
 15870 48167
a 28813 49112 45 11292 v 31178 49112 V 15161 49157 16061
45 v 15161 60626 45 11470 v 15870 59681 a
 currentpoint currentpoint translate 0.53763 0.53763 scale neg exch
neg exch translate
 15870 59681
a 15870 59681 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 206.3145 a add def
/d 0.0 a add neg def /h 160.97055 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 15870 59681 a 26645 50662 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 108.97926  0 -97.33524  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -97.33524
 108.97926  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-81.47862  def /maxTickline 79.49193  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 79.49193
0.0 -81.47862   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 108.97926
0.0 -97.33524 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 79.49193  0 -81.47862  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -81.47862
 79.49193  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-97.33524  def /maxTickline 108.97926  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 79.49193
0.0 -81.47862   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 108.97926
0.0 -97.33524 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 25400 47798 a
Fh(1)25399 44648 y(2)24667 54051 y Fg(\000)p Fh(1)24667
57200 y Fg(\000)p Fh(2)29559 52007 y(1)2680 b(2)f(3)-13434
b Fg(\000)p Fh(1)-4352 b Fg(\000)p Fh(2)h Fg(\000)p Fh(3)26645
50662 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 26645 50662 a 26645 50662 a
tx@Dict begin  { 108.97926 79.49193 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 26645 50662 a 26645
50662 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 26645 50662 a 26302 50948 a Fl(x)26645 50662
y
tx@Dict begin  PutEnd  end
 26645 50662 a 26645 50662 a
tx@Dict begin  PutEnd  end
 26645 50662 a 26645 50662
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 26645 50662 a 26645 50662 a
tx@Dict begin  { 0.0 0.0 pop 108.97926 79.49193 exch pop } PutCoor
PutBegin  end
 26645 50662 a 26645 50662
a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 26645 50662 a 25597 50994 a Fl(f\(x\))26645 50662 y
tx@Dict begin  PutEnd  end

26645 50662 a 26645 50662 a
tx@Dict begin  PutEnd  end
 26645 50662 a 26645 50662
a
tx@Dict begin  { -60.49333 55.1198 } PutCoor PutBegin  end
 26645 50662 a 922 x Fk(f)26645 50662 y
tx@Dict begin  PutEnd  end
 26645 50662
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -85.43246 39.8163 40.39676 9.20927
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.1737 -20.83116 8.08916 64.75543
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 38708 59681 a
currentpoint initclip moveto
 38708 59681 a
15870 59681 a
 currentpoint currentpoint translate 1 0.53763 div 1 0.53763 div scale
neg exch neg exch translate
 15870 59681 a 28813 60626 45 11470 v 31178
60626 V 15161 60670 16061 45 v 15161 72301 45 11631 v
15870 71356 a
 currentpoint currentpoint translate 0.54665 0.54665 scale neg exch
neg exch translate
 15870 71356 a 15870 71356 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 202.91377 a add def
/d 0.0 a add neg def /h 160.97055 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 15870 71356
a 26645 62337 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 105.57854  0 -97.33524  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -97.33524
 105.57854  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-81.47862  def /maxTickline 79.49193  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 79.49193
0.0 -81.47862   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 105.57854
0.0 -97.33524 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 79.49193  0 -81.47862  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -81.47862
 79.49193  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-97.33524  def /maxTickline 105.57854  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 79.49193
0.0 -81.47862   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 105.57854
0.0 -97.33524 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 25400 59472 a Fh(1)25399 56323
y(2)24667 65725 y Fg(\000)p Fh(1)24667 68875 y Fg(\000)p
Fh(2)29559 63682 y(1)2680 b(2)f(3)-13434 b Fg(\000)p
Fh(1)-4352 b Fg(\000)p Fh(2)h Fg(\000)p Fh(3)26645 62337
y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 26645 62337 a 26645 62337 a
tx@Dict begin  { 105.57854 79.49193 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 26645 62337 a 26645 62337
a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 26645 62337 a 26302 62622 a Fl(x)26645 62337 y
tx@Dict begin  PutEnd  end
 26645
62337 a 26645 62337 a
tx@Dict begin  PutEnd  end
 26645 62337 a 26645 62337 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 26645
62337 a 26645 62337 a
tx@Dict begin  { 0.0 0.0 pop 105.57854 79.49193 exch pop } PutCoor
PutBegin  end
 26645 62337 a 26645 62337 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 26645
62337 a 25597 62669 a Fl(f\(x\))26645 62337 y
tx@Dict begin  PutEnd  end
 26645 62337
a 26645 62337 a
tx@Dict begin  PutEnd  end
 26645 62337 a 26645 62337 a
tx@Dict begin  { -73.5297 72.69046 } PutCoor PutBegin  end
 26645 62337
a 922 x Fk(f)26645 62337 y
tx@Dict begin  PutEnd  end
 26645 62337 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -85.43246 73.25748 -28.45274 -28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 9.20885 -28.45274 -28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
26645 62337 a
tx@Dict begin  { 30.76114 -17.997 } PutCoor PutBegin  end
 26645 62337 a -172 x Fb(j)26645 62337 y
tx@Dict begin  PutEnd  end

26645 62337 a 38332 71356 a
currentpoint initclip moveto
 38332 71356 a 15870 71356
a
 currentpoint currentpoint translate 1 0.54665 div 1 0.54665 div scale
neg exch neg exch translate
 15870 71356 a 28813 72301 45 11631 v 1 0 0 TeXcolorrgb
29521 66818 a Ff(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 31178 72301 V 15161 72345 16061 45 v 47992
4800 a Fe(___/1)p 1 0 0 TeXcolorrgb 48228 6792 a Fd(F)-123
b(A)369 b(1.1)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 76373 54804 45 v 0 TeXcolorgray 24746
81281 a Fl(2)p 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fm(F)-239 b(A)717 b(1.1)g(-)h(3)f(Reelle)g
(Zuordn)-60 b(ung)715 b(-)i(MC)h(-)g(ChriGr\374)p 0 TeXcolorgray
-741 4800 a Fl(3.)p 0 TeXcolorgray 651 w(W)-108 b(elc)-36
b(he)433 b(Zuordn)-36 b(ung)432 b(kann)i(als)g(F)-108
b(unktion)433 b Fk(f)511 b Fj(:)369 b Fc(R)g Fi(!)h Fc(R)p
Fi(j)p Fk(x)f Fi(7!)h Fk(y)481 b Fl(aufgefasst)435 b(w)-36
b(erden?)p 17838 5841 10708 45 v 17838 9283 45 3442 v
18547 7880 a Fk(x)369 b Fi(7!)21745 7357 y Fh(1)p 21485
7570 991 45 v 21485 8338 a Fb(x)22015 8086 y Fa(2)p 26136
9283 45 3442 v 28501 9283 V 17838 9327 10708 45 v 17838
12598 45 3272 v 18547 11406 a Fk(x)g Fi(7!)21352 10378
y(p)p 22459 10378 3013 54 v 1028 x Fk(x)295 b Fi(\000)h
Fj(3)p 26136 12598 45 3272 v 28501 12598 V 17838 12642
10708 45 v 17838 15894 45 3253 v 18547 14492 a Fk(x)369
b Fi(7!)21485 13968 y Fb(x)p 21485 14182 530 45 v 21515
14950 a Fh(2)p 26136 15894 45 3253 v 1 0 0 TeXcolorrgb
26845 14600 a Ff(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 28501 15894 V 17838 15939 10708 45 v 17838
18881 45 2943 v 18547 17936 a Fk(x)g Fi(7!)g Fk(x)22091
17454 y Fh(2)p 26136 18881 V 1 0 0 TeXcolorrgb 26845
17742 a Ff(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 28501 18881 V 17838 18926 10708 45 v 17838
22197 45 3272 v 18547 21060 a Fk(x)g Fi(7!)g Fk(x)295
b Fi(\001)23050 19977 y(p)p 24157 19977 651 54 v 1083
x Fj(2)p 26136 22197 45 3272 v 1 0 0 TeXcolorrgb 26845
20893 a Ff(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 28501 22197 V 17838 22241 10708 45 v 47992
4800 a Fe(___/1)p 1 0 0 TeXcolorrgb 48228 6792 a Fd(F)-123
b(A)369 b(1.1)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 26269 54804 45 v 0 TeXcolorgray 24746
81281 a Fl(3)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

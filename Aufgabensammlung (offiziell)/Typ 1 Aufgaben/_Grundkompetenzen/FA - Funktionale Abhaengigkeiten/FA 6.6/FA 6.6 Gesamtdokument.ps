%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 6.6/FA 6.6 Gesamtdokument.dvi
%%CreationDate: Fri Nov 10 09:02:02 2017
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: LMRoman12-Bold LMRoman12-Regular LMMathItalic12-Regular
%%+ LMMathSymbols8-Regular LMRoman8-Regular wasy10 LMRoman10-Regular
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ "C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 6.6/FA 6.6 Gesamtdokument.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2017.11.10:1001
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C071D06D71D60CEEC9FC68AAC0ADD1DD74B262
0156612EB4B21A3F4ABD34403540C124221FB9DA5EC6C7229DA9A1D033AB828E
9D80023B2C8E68FAF7A38C925E0587A1CCE432EBBBA598B201F5AD036BE7C8AD
B8C411BC79646781C4519B89DA648B919EB362176B83298EE2D8B405DC66D81E
C655DFFD1BB283F3C5DEF1495FF97C798C213036AD02BB07FD42EC5932E79727
ACF464295E75CFC635036CF27FFC42DC2919CC167CA4C2E673040B7909AA26E8
123B3D9F176F6510B9526E94D4E38E62F8B9B96E2D2D51BDA2FB7C6992B79CD8
3E40292315B0EFE711C8FCB37968B8AE1BCADE6BD8A3BA1009B34137B90D924F
B2784C9E13F0795427324E80C175BC99140171AA2F40784356690DDB982F55FE
EFFCF946C6DADBC6A907C7DC28850415D9AFC1C8A868801B990CE2D26AE40CB3
4EE0281A60063AA71E48DB8A35E05C2BEA1ED5BEC68717E95B7597AD7CACDA2A
6A4E8808BDF0AFFBA31BE1697149D7BACECF4481DC61CEAB7476A2E00CD8EFF1
37E476FE5A098E607E25ED29F4BF3409309145BD0530C8A76E85F59EB0890ECB
A12DE954F33220ECCE5E9CC4B52E97089790D08FFEEA7D143DCC7C07BB2694CA
6709EE19C11515E6E967043F9162C39D9BEB2767B7B31EA068C594A63173F7F1
67F3D6FE97087D19F73EEE205A47785EF3C453E6F77A08AE9F93F4060DD19EF6
6DA5E780DCCA30F180F8DFB0CEC4602AD1201C63D91450E7B5F44AEF32087A03
0D933A941134E74040E6E7E797E18AF57941DDF7DE2072ADACCD3BF8D4CFF06C
5B946E21D0F5A799CD011CFFE4CF0F571B4377AD4768FBEBDFCF6B49F09839B9
35B1F7AB20DBC872DEDA90B79F113F5A4BE581DB49C5EB8C9033B8050C143424
1EDB333D1DCB862DC543CE420CC26EDF9639E4256570975B25C6C1F06CFDB2FD
9035344017BAA39283C14E3AE66A14DAFFE2CD87485598645C39B92C18AAD014
7814BF27C8FA6DCA0BBA0FFA552B9FFDD54BDD8C7F84484031FFFC0AE8932A64
53D2632D9379F30231361D03BF91F74904C7106B6F8EB6ABBB29858F65E937CD
E31D67C847719779DE0B34CECE88A8F9A12D46B8FCA50DF4433B0B8AED6A63B9
E6512B667AC78A09A780813B1FF02AA967B12AAFAA0AF1B3DA27604A975C2DB6
FC1854457C67C54DC08DB989CA3267B2BE5B8178E6B7889A33771F86276E6DA4
F83033522871198AB3E954EDD88B5059BFBB42AFFC2738CA09B628CC646123FC
9C2BB8B9149CBADE7A7953FB4FBAEB6078B410935DF7D6D5064271899313C4E5
0DA12BF2F08521A17641A2F5541EC8419514939892C0E353FB1785CF9CB67C88
AF752C2A0DAB509A424DDB9649BD8A846E6BD3D374BEB6B9DBD5C10FF56E2000
AE4AA5B339C187F52630B52309834F266D778C720FA9BD9CBC1F322A39EFCAF5
85107BD5A5C188A6409352766D80E77B1270019E0EF57F31E9F13B9483F070F4
86122EE08A4870456161458B6C93A1602A5EE583461ED91A90CA5B743636AED8
1E5142CC0A7DC998CBCF84E39CE3B141286A5994C60855979B402FC1C092EA15
1A6F3762571629775247A6AC65DEFBCA10A51ED614E0C7FBC7335681207464AB
F8C4ED5B883E7A4D01199AFC3C88B0E2AB5FE014A84377451081CA0390DEBA75
7BEA45FA3171095052B839F7A2A9E41737F4A4CD704E8EAFC757116FE3012E01
AEBF584F6B34EB3F9C4B3893DF4E25B71CA17D427219E0E2F3F7ADB530841948
1FC1CD966965C72E9490C31153E2A0DAB73629A1DC0ED7C058AD150C4D5BE6CA
FCC7D71907232339F3FCD771914933CABF613F0F9FA3E206172B0B4ADD1D9744
00A8C2642147D4B652A8F1A7E5BD064E369FC591D4739533513C202E9DA91CDD
1581D1A58898DD6564B1710A88AEF94B888C52681BAEE1E3EFB4DBC694919D4F
41D01894C91D8E03F68DB550934E5D783537D2B57CEFE23ABACEC756F5D1EA5D
A74192035D2304EC4F9083716CA7906B80486BB5C79752270821CB12BE7ED0FB
9FEAA580CA187AA3C9475070809AF6881F745EC71298D454AD31AB998F5821B8
2070122634D5A247EE4D8672339B1D90113137D4FEAF3CF3A2456A8712556956
C5A48721B1B1E140ABFF7793081B2B092724FC0F129DE772236556BEEEBEBFB1
FAB1037FB0997B367483D2C8C0D44E6111CEE2EF443F84FAC7710AD0368D542E
8A629BBC3C6E2D85E984AA01B575B37DD1D9B0D453E3A73EE7A34FEFA5641BDD
67E694671B6250DAFA3D85E0A78E946C78E33A284D4F92B73D7AE87B13F108F2
C4611CD948F30F56B984E409650E9CDFFD63D996E25E5C0E0FFE02BBE2237537
8C945F31C26697A7ED159B529276995292581CB9B29A54F4F4B2D472C74909CC
47C1675DC6FB9A932C0552F8FBE17F4D8771BFC6109E6D709951694157B3CA9B
1F3952D101D6CE60D1A0A97C99EDB3FAD64BBD337BB747424BE88E67FEA44610
51A1F65159650D3A2FA882944E6E8DB113CE928969F6BE3E3B8BFB71302E87A4
5A22ED99B04853D66E5A22B56F79FEFE917A6F436B823B1A2FD914DDADEFB5C5
CA3A43E348D017CE2040752BF94A98902E608264DED8C3241F06469FE18C377E
448EDBB0823526BD66B40F0519F047195405629408224D070207499DF2F43E7D
52E442E3B6E9E3B08F88C9961E81373B96460077464C7DBE6C7C7887BEB3F685
B182706F5DB4C7C4BC2FB81A7D040EC5A04E5C5434D732318AE791EDC71A47F2
AB39A992EE304763BBA1AA81F9D74B24FA7EACEFBCAC72D673540922501841A4
F7EF18CA86AD20AD76325914FC0197DA6D7632947C4AB3AF2133D1A1E2719511
F62BEB9C879E76B74493C7D5EF38E01CC031CB4CE13C2EB6BA2695E1AB97260C
39A7CF8F690145893081D526990E92C1FB18CC4B968D70DFD13C6223FAC9AD31
2E1240ED981AECE8D13DC653D59255F868EF158EDD781E9D02889907B23F00D4
F6A0D9B74E591BADA348B09E22B1A783A8EF2AC87D34B6407522AB33411ECA4F
6C765C85ED1405A5F27B28A16751402AB278A8099E29940E719DE1E109E5BEFC
2A4098E77020110C37A90B5BDBE279918B0B31E08031DB686D518B4CBB8A4D0B
EBF6750A452A7F706EA676E3B3237FC5656B29CD5A3A04F82AC871B526CC28B3
A61D985EEB3610FCAA433B9C6D4683C512F0FDBF3EE6FF552D7BF0BBBBA37050
FCBE3F164189FDC8446ACDE8D0D4050278151B46E56AF826A0C2E9389C2B8BB8
E38579D281D5142944D3322E1C66D456E4C5DD727AA41FA5B369D5E10CD71832
A7DD40DE855B47289C449B6AD8D5F1D557102050EDA5F1641EAAFDDBC082E579
A06D8A3A323458808BAD0F4B8A2BF406DBAC4C5F555EC96E760C8245A1AD9F50
881DB475F892F868823CC55D4859C09148529FBA57A392127B68F5366491D1BB
097D8FF4A71966D42DD988F48C8A1F4DE0449E6AAE79500C42B4EFE4936D0D00
0FB339115493C16412F1D6DCE02BC7B485CC108C6321EBF1C609633933A576C6
B0758D49F3155D448D505F73A5206EC1C8886F5949790A7E4B850B6B8E31EC18
B7321E63AC75B6588774961F6B7D313B850AA4B368E48DAFAA5693CAA236E150
E02FB2831359FDB95792B2E6431DD24BFA8F2B51BC21E2E5AACC0CA211F50A13
075ABCF9F440CA468403D939B91520C652F1196EAF1BC975E26F8057F69CB972
E976F99070AD3FCD958C1EC54B3994EA142AA0615EF7BC00D85F75BF5F32B350
E2CF46BA0E8D0120BDB54910E5C27A27B59664E856EDDE290103A0D490FD76DD
09B152B3AD1C4754696B239D4B13935AC19769600943C7343A5E7A06C9115395
DC2F92EA95E5ECE5A08EDD16DF74B6297EC0220C91F8BB9AFE742FA96456E131
7D41CDCE88A8F9A12D46B8FCA50DF4433B0B8AED6A63BB5FFDFB8D48D04F9849
2972699B5667C0D2D206F4785DE20A854E1D4C655A690689B7B5A19F8162E5D8
454B7A1CE94AF723F47C6B168CB7269CC802B14545C8448B5C260C6AAED5FB23
2390D7239C22534FEE644AE96C5718EFFB9DF1AC47CB3022D3751E6B7123FB71
403E154150FA4A14EE2CDC8F0BD084CAB30272E8F065218BA88536F138B94AFA
D750F6EA9BB43271084CD876A14CEBEB86283BDB500BBC0F9E152C30059054EE
92951E4A202AB409F7D16443DE00ED69C1FA674BA3664F8BD00C08A27F475C00
E6AABE35B01B991AE910B7DC821CFD8A6B5C7F4B116E78065CB219C926D45163
EBF6E81EF0C38076871283D64FA5F2126CCA7E93636A7CCA2158B99A15CD405D
4AD290CD8F7AF8845CF78D4BE9C7F2E4DC00372530C64BBBB785117A8AEEC190
9F49C82BAD55AD174D38A74582CB367BB50ACF8FBB2C8A2EDB17FF267D0F21C3
5BE42CA518272C9F9FB2DF0780C957CF1B9734E9F49C0E6EBDB5D24ED5D673E2
6A25811D4BCA9D693EF8ABE784D2BE46DE1E57E1B738ADF6FD49E6A53BF48C6C
2A73026234D3719C72C2FB8B8274AB54A6853DC6784398A6B994BE424B6E9078
6C303D590747608AF3CDD6A51B5612DD5D49E1153A25EBEAC76FEC601CF4D10F
65DAE3EDBF9A163BEE244542BFD2849D498C239237ECDCB23458C7C3B9395C7F
900C2AC7BDEF8FB9D4574698BC8D4E374B34969A885A0A4AA26F19F8348EC621
89B42297868AD2C3E80D95C41FA4A5AF7A016D3C773E040312AA0240DE24C7F9
D662FC2E59673DEF563AECCABF724C09CEEB5DCA64FC6D24A091A75B5745DFEE
F5C1162900B5F1EF5A7102C27DB1918679E7E354A5DABF897D9C8EF5A14FA8DF
FA3A7B3D47542FFF5987268E60E7FD64B017EC6A8FDB4BA5AB5B5B58046899C9
C5993E7302C870678DEBE8FEF3F2438217BA5121CC668458620DB3D381D56770
19CDD612E5C0A267BE4F707ECE93B3E1E8BE65922315729FA5513AD13B562C5E
E145AB39905815D6C3E8B60AC5C1D4D7731E2A6B122C6F57790C42B0368AD7A4
99EE5F029AA6F8E302F4CD994EC08C00AC6A66C51254F71280CC722402E200EA
D4F6F489DCD61B81CDB85804A5EF00CDB09D9C2EE4F3D571285E319A78F90942
1C31359DDF81F38F6E8615BCD0E6CFFE077688C365888921E45608C868A0F6F9
D726CB2CD81B49A9F47C12FF76284D3B07E2C2E788036B4867F90D40C1E4FF74
60399F1F08F98A05A579D00D1ED5E8A86BE9DC1CEE3FCB03B9A0E4BBB81C849F
AB1A6089E9807455A5DD78B2EC3090E36EDF4D19FA6BBEF386127BBDB53D25E6
8448A975CD56BE0A93070F848850FB9B3B0285C7FADB28A3711C06273B79FBD2
A509FDF7AF81630306D67E0AAD0DAB78243E1B814F745234BA7CD57325B5A34C
C3F984018DC9653649786481788A6F58ADDB87DD0D883AF60455753850A63756
5EBCDE76329F5626E6328EBE3DB5770A4C3E21341C304F38845FE70E091803D9
D14037AC4AA8C4D17EBB62ACEFE5344982E0F489D72EF60183D8F2A79A3AA765
C18E0479B0255870CD61C8CF7AA8DE567D174EC90945404C5B928EAF3E8DDC1E
018442474EC6B0B42DF539EC1557722299347DCFF0347BA4273054B8062D3DF6
FF094944AE472D60DDF6CA62288E4E780F8614C7749C9406325C82715C866134
637DCCE4848D2B051B8E0EC7B88872E9AE68BB5DDC30F4A61119733F6F6DE0BF
4C6437A849A661B6A233B1C24238BB910C11D2A8024C89FB5DC745489AAC2570
4C61242B4B1983A5D0B134C8052495CBAA9D2E2E014641BD58F0EC389FACADA3
08A1723A5C2492BA0615B0222EDD152AD19C307118AC0086653521EA59D676CF
C36AB586FF1FD4C383E2785EAD36F41274FB0BFF9DFEADC612CA44A7392D8E79
1DDE1DE818BBF26CE3BCC2569F5CE6DC91D4F8B7800A05DECB300CD7A8C38D77
4C1DF436013901C9671F77F34A63F361C5579EC5E00C5A8E2FC97874F6459EFC
C1760E9C6C78E60CC0152340DA6F26C67B2E10B620750E2C44E5CB9DCE747E29
6F7E716E6BB12B699A2FCA90DFB3DD730D96D100DC5B1BBB1632D7015235F4D5
1C1C753EEFDD6ADCEB45DF4D00713744039C43B860B5A9C51AF0BEF11CC8E85B
067A402342896C9B3BAAA570C4900E12D720F2812F28626DE3BD3F3426B82718
259AD02CDB518BA4C4AD8F261CFEBF43857EC7A543ABB1E059247E276E206CB0
0BED125C8F78A665901F80068C9B0AED83074C6270B177BAA18F1975F43E9160
8B75D86D9F7C1E986C2DDA71CBF33FACEE675B943764AFE71B5A359C4A092916
3E8EF660794518DA4307AA5B38469000FBF31BAE9CE8703754A099D21B332D3C
A19A842755A79DDC1E281A8C34A969B80EDC946658B7579B5BCF07AC8B45C2A8
3664140E70CA62DCB3153CB4A8E46F12CC16254F52A26FE47FE41504D3E851A0
665AB60BC0CE5C72512D196F8D1BC0B3FC12DA2D13F4B9AEA2D017EE7E574B86
2576F5EA495F51E1B3A86090ECFDB57097EF73BFFD5E41E8AB6BF105F87986D4
95940A8B4A29E4DC974554DF975D026EA92FC09DBD65783663CAFE414B6F8C06
F00A26631D7FCC4527109F177093E7432F5FAA6CA14F1654ACCFEC8FFC127488
F604E972B695E9EF18F331A58BE4704E5130FB4984C3FE2474E6CF0935F90B79
7221D94774689E83E5406F5D9554C1284249C687A6CF5A6B4783F54267C48710
32ED406DE854CD5E243C0BE4656E35FA02FAF5101E1AE6B7CB286C9DB979D763
FEB468FC7AA2DDBE2E708D27D89164B12BD8BDF0418BEDF018EA67683158D1B7
73C6EF553EA897D5F2D53E75902E57D7C4E06D7DC83F1C557ECF5DE83748370B
00EE03A3ADB919976D4DBFF11B246AF9C2FE922A8A6F8CD47656ED2CBC816B17
3B01048BE9D1E4B54ABC0396D5203D088ED7A1FC7CC863AF414AC14AC2D75E5E
EDEB706CFB2AFE24EB580E55BD31B793E4065CE83795F047004ED88F5C38BDA8
7F5FA8880517429B9C4E5FE980448EDF3BD57758FD145E769D4E88BF43D19050
DA58F5EDC7B4AA76BD8CDAF0B8639BD5D2C7552AF5415B7F35B957F02B962930
D3D0C3AABCE7BF840A7A035F2CC57FC978684570CF6C8FDB960B9CC6E9435D65
77D1CFB71D362BAD7280AED8771C6EE2F7E2D86C5661CDBEBB354B84249E93B7
7A0E409B4D5E17600E1E43F5EA1F884939C0AE467119F1E155676D10A8A35955
BADB667DB10180DF404F43A166E2E533F1C050D35CE4AEE92C35EE391398EFCF
E19EDE2E31F837DF86F1800F59C89EF6401112AB73434A3938E1970D8EA3CD40
C7B8FB44205899626FBC269C25478E0A63F78F3460EDD4F64B4D2A5B3E660B64
D293F803C670E243F0B0EB1C548746C08C7F4FAC0D4A7FD8B7369AED2AE9A79C
74C0FF0E0B0C1AD3B59BEF79753FDA3E929B52F207382364B1C62AE8311C4337
297E030CC0CE93ADB4E2FEB60E28FF6D4AF0010D422AFC137F2254FFF6C2929F
CB76A235705EC088049C1F1B0E78FD2D357BBBFB0E12CD481F96252AB7402213
DF9BB4464515CCEA5FE4C0CF761E921D7D2992EB24625547D54E3F2C644ABABB
47914DF3ED2C719753BB1EED9C435F2D571BEBA4F76A0AD5DFDBA6EC952A4F37
948B63263FA4097587802F6C66C3BC6E9DF45A22A24877E4A4499697D46B779C
8609E85E4BCFE84319532B3AC9D62BD413CC127C8DAEBC28D7DE5CB57A30F23A
2859902409CD4FF43EF6A99E9FFA2DB4113C12AB9C616F074276C4840A546A73
0D24D8518117AD200014839545B1078F38D7284FBFC473C510CA28AB90147613
F0EBC94C3EA0001043705336F16E783FDADA674B361F951D5152C0011FE0BEAE
51286E4979DACD3F5A953BD9E918D5E46449525A4A597FF0F091B2B4794752D7
EE5D9B94524DF768ADA1377760AB1ACE2D780F5624CF53DE046A36EFB35B52F0
566623440D7F364C4030648BC39783FD7AE189510DB572D01093BC4C7EE0C09F
389FF828AA7585F9B7FAFA718DAF925AA837B8C0B647161E5C322CA820521400
5D234795C9DC1354D1C0E5ABC997C64F3C84D2C3B7581BC9566EB6D012B6B784
F740B8E0B360808C984DEC73EF57328A2347BC752EB0EFF7BE8B688A3622826E
C83CC42DCA4A26C504AB95C5232A86199FC1295D8BC52BBA9C5089A346CC5760
009233FDE0B38CD4EC1D07A9F817ADBD1AA6D303AAF94D5FA688675B55D40FA4
3C6D97741D9FE4C964FC6D24A091A75B5745DFEEF5C1162900B5F1EF59402CD5
E4D0C3953C9493D87F46CE4E9C7A543364A9B82B34154924F4739C650A8EF8D2
38C73BD6689A0657D8427446E44E2F5C77937234D1D6AFCA63944D3FE5126940
8ADA00FF11BFB205B9A42EC1F50B435E4D44E14E22056FEA071D0061F16D8879
6C4BA0C670D0E715ED9333A0FBBD15F19CBCE5F93259A6C4A8CAD50B9186BF14
62D3AE2AAEA8A45E9A29BBCF83E95F0C65B2D60169538EDFAAB935FE3468186E
CD90E2F15FDBB395191E6C4659910683768F80764D94FE8A746FD06C08F15F97
3A528084C73A3416B7D9498707C04E9115D411FD74AD771B5973E6D0A573A1FD
2E01CB1197990EDF8444CC83F1AF789DCE5C7F64567C9D80D1829D7FE5F45647
ED6B99C6D96B728840A77AAB12DF037473065B62E9F3775CAEDAD9508FA92283
6FAA01D50CBB9B12B543AF2A86A99F4D544B8974F01B52945FC6ABCF3ECD8410
335AE6CAAA4F740EFA8AE1742B115F4FA7FD8E330D0B86B191FF5B038A5D0C32
91053A42460468F6A1700953700663A85229385FB9BC76B5FD875ABAE3E6DAD7
9EE2B71FBAA76C2CF157574A30CF7D71980C9059C3D6B6A3204F03427D0C1ED0
63F935C93FEC0118A7769C3492300AC5C68153E7DC46AC75E4031836536A9FF8
F9855C80511A27D667AE834A96925698006601802F57A614BA454AEBAD5381A9
33E9E2EC6A78543582AED8FADA73537FF0C6D7FB2EAF256CEAEC65106F666E66
BF183E0F0E4775D00C05AE65EAF85FB57223FA553494EDAC82855AB977A49791
5342A184DA5589E192F08B7149CBB9903A5809202C698AB39B218ECC7BB9128F
40DFF15856E79E10EA85E741412DF41F4C59FEB8AEF11EC7D1484B17EDFD7F39
0EE3B12312F51B3512559F1D609D0ED4BAD7B1C1C003F982B905BD7D67725C83
EF7119C2C4ABACC0DFF903C17E5B0BC25F89AE84006216080ECAF450D8FF2A1C
A4BD4256B7E56091E388284DBD11F5425FEB05566B96D20438400E0E78630FD5
05A174BEB44068BDD70570D038B3D9F60F63119EC9FA765E6E318CA3DBEB209B
ACED0957B2A13CCC8B93FF7BC5FC7C7A37AE0523EEAF1FBD745CE175B921697F
9D9FF0803559FEA21109882857594189F167F40EED0DF7150DB40D2B141DCC1B
60EDED42C0DB0FF95359E700BE2DC30F248D1BEFA38DFC784CE855754BC80098
5A57640B2B6105B2D2C996F6D44657DAF5DF5891AF008F869D7AF5E4EF1989FD
377E9723C5A85CFE645109B1AA5FEDE99BBB3800D471BB00C657884722CE9678
6CC228DD6BDA9B4F88DC224D329F47D8E9A61F56E5B463649E058E104A8537D3
D81053D9DFBC564791CA6CAFD44529A22B1E1E1B4FEB64AB0950733055DCCC2B
78551535EE5DA52B7AF5030F8AE1482312B61697C4574658A3E865BBEDEF8E1B
CD305A5ACF3C44E769368D0593ED7C9E2AB4B0184BC89A05CD2D29851EA57424
D2CD1BC0281FE40CC2D3DD1B36FCCC46801180D05D76D548B4D41FEBAF2A1E1B
7DF8BD5B4735481E2E64CBDFFD53A6555556089ADAB4DAF9B826BC53D97B4166
C60752E5E4D9771C3B3FC8F2156659677CBF68EEB3D1A5D8A8D2559C85177C31
784217D6A61BCB560C5ADF83A337082F566E73C4C3C500CD798E325C588B5B71
AF3DBF6D30AE540AD4662F8457859B8DBA51655025FA11DFE00469468AD648DF
75630D5E29912CD7E6362E528E075BC01117E45F49AFB2D3E936B548CD78AA6A
6FCF0CFD5A62BD50BAEA04E96DC81F6F9F742A10CFFDABEB17316F9CEC899026
7B1BD97D4734CF37B2C1255D017F11F7E1F90542E9E515490079815C2000B856
C14AC12D7456FF92C2678CD0084F1DFA0EC2AE8B857358C6C1A928CEA7F0D5FF
99461F3A9DA8509E7EE6AB98B4BB88F672AFCA3A553C55AA3402337C6C9B077A
033B01F3B878B9E9FDE0356382226C92B9537DF8C4F37383902B4E1667123615
FF99555E34634B52F0B8B83EEF5CCA51B26403A6263FA4C55FEC2B062491590F
F01EF0F36E918D98CF7327686AF072D547A5AD7A1C457D4DE11410C601C40F65
5EA32589D03360B92ABD1BF4762108CC1B72CF4BE2B3EE78D4C5714622E75955
FF3E78C4575D810E7E05045030378BD2EF0242021D85C50EF4F0FA7E8DDAA7E0
9A5C8225E5EDAEB91BAF1279E7930E73FDE400C7E7A7EF0884DDEC35700215F6
0737ECDD6C87E2764C59C2EFFA770443E21DC3DFC0F2885961670BE2D2CE87F1
1B7F474BB9591EB9678EBB5A676561BF61FABAB8309AE123A6CE6F839C2708CB
5A55F4ED91FBA9AC00C0C25D34BBF10FD8A7676C7BDFE23406C55DD3FA8E6BD8
9DB799536EE19B0EC9C57B38834DF8ADB373A5B5BDB1D57F414F3AE5A0B573EF
AEEA5D8C588DE556745DA3E386BBD02546E44C6FEA7C1D4EAD89507E04EFB964
76A3B4A2511E20586E9E24C566824C8AE99CCF0EA0BC1407B202F3CD1B402168
35375E0B9E13B07B4D38BF176C177353670633F29EFAA268D83B462FC0BD10BB
BB8DB7B12BB1011EE8D6C0A77A499C6C2DD120123D8604D4CA0EC412240A4B47
06677B5EC78742FEFCE44BF6E8AE22EB1DFBE8CEAFA9ADCC20ADAAC3C0C63CFC
3B7ADA39C0AA97CA287AA3B1931DFAC0A37BDFF530845861D5E5C2EC7E59783C
A27D5C82DEDAC7AF97962EBECEDD21DEF42A0ACB73580FE360065E6267113421
BF6430B94091A2B42A2CC2C3BF2B7D3D23763B76BD8F81F317A7974C5A29C373
261FC3D6A8451E60C03FEB118AE510A5A4833C6878133CA085D2E443579A012D
18FD7A725B42CBFFA9B024C740B0ACC084C0DD92E3E329CFC4E2B36E704F5A2E
99A7CBCE637CE9D77ECC1C66D4720DDBEDC0E0857B057D019BB4C2132324B2A9
54DB76FFBE2AB51344990FFB38A6DBEC48FFE206A0FBA50CEBE2BE28FD8E6DE5
58224448274777692B818067213AD4983B07D42634F8840B6FD878D4698FFE1E
AAB2F0BAC298957E4172F101A12BC5F2734A2C358DB93D76EDF6D0CA24D36D57
8A8786980F7B2F5F384A126BC83CB7D22D504C13E3B3CEC8F2FA394863533DF6
169E672CE9991EB8C422B5C54257C66582997E82470623B462508AB5353B6428
ABB42BBE9C1F6C104A56F6F15D1687C92D7BF00C6F8129E347C6489FD4FC798A
DCBBE8656640B9FD8DD7D1F131D312C2CF747D35FB85DCE8356892C857A51A8D
59DE97F8A01E890DA5008479343B609157F082AE2BDE83E736F2993D8C048393
BD80B70A1B9F5F844D4988A574FB12CDDD4F1347213C93275718A7ECE52E4B35
84DDBD03B345F3ABD2897BC9C6E0948720726BDED2B572EAF23F87D1B4E33DCD
967D167E9BF822D0CB8E1EF3F81C1626E3123F65357D50494112084CE01F2CA3
AB00BAB6D6C7EC825EE6AF47BF5B6F6AD18F8118331C87CB83A65571AB482E2D
E257D768E496946556E5311B3C8D1E40676125C5C463F511124CA3AB6655F46F
7CFD366BF9B140E1940E13D7443EFCEED61617E55E5BCFCB4F3C90BFB9F256F3
160A370EBA3775F4297F0DAD9E14CF669C7B38CB2D16EE53FCC59444A3FDD923
9B18626BEF4DD08E57DD9280429B46221987A70CB53C5BEBCD5B2C139389EA1E
172679B2EB1444E570E4FB2E9CDF31D967A9782C3D1060E25FEFDA9A31D6E867
5EA9335CCD9327F84018CAC0A2ACCF03FBCF06FE08AEB149A58E488D596E212F
E0A67ADBC2A0CD63EA4F910768719B316042736A73C196D8618F85AB3F011E78
7205BE3178501911715F16FD79F34C2B0C99F08A14AC86DDA0E5E1DECC2A93B4
82ADF9BFA9BA653CA71C9BD82D057EDFB79CBB3AB0F969475F70DE15FF67FD9F
8598AD4F7784F086FC1153C84590672247F6EB7DE01E820CF9FF3BEDF7164D9A
F89DBBE3B49616C51E8265379ED8DE9A58777D57B95A15D3B8F74B1D3101578C
35ADD0A8D9D4DAD5542DE899339842E6524793E24B0D160100C2DB33B804AE5F
F3756A44F596F7FDB278CFE05F885E3AC77CD882285266E081EC6D193B6D602E
72BD1D95281E7B0971095ECE0EC7494D4247243DFA8385DBC5760B397F0EF9DE
EF7EE029A0C0B16FBD2D0C35AC8DDBA4E9FDA6D4CE4408C1EE66EF483DBA4330
35AB967248C166797ABD0873EBC07887EB84556F43AEDEA439FBF139A16A5534
2C0567C63CCCC7D4581D1D357E52311AF227B3E316B4289EB592EA5CC31283BB
51EC9FE6F2A748BDE8B927C96A7B6A6E5489C5662EF190E9502C097B3D9123E2
13615EACC95D32043C847D11D7DA737251FB47D0B21212E70A01A68BBA1FFC28
AA0B2660C443D24320003930CD82995B6CA72A3CC8C866B77F225EB04390858B
FF70300B0F425D9FE00B3E354A8F91DF44F0FA4452536993F03928FBF72C029E
FF203361CFCB767EBA8D659AF5C78794A5D4ECE06E210228390284F3C645085F
C552479B717261AC64BE8AD8FD28A9EF8EEB25F6A230DC6AB0708EA9072F69CC
6CFDEDC298DF2EC7706E9F77C8A04B529CC5FA2D3044E9909CD4A49E4600DBC7
FE9A727D18EA999ED767B6D299B81268F3A0B7F152A9EACD5E0E0D21CD6BE8E9
CD765385D8B5DE106435BCC52F1F278910A7453E1D5E4495E0ECC246A1A96A67
E7EDE8C1B81FA5A78EE7283509223056560C55438755D243C5F055EB9D6BC533
030B7B24D1CAF943CCF4A65FEA89CBD68DD7C16D019675621BB45566C1D73A81
43C8A24C4A470432BD989259DB9F6C02C826516CEFE76A20C4B77FF5006F9417
D29C701FBBB72A57757B2CBFC6F5D915C260859C43D16849F52816E963DF69E6
5809B7A1A57F9CC512BDC51EF2549329ADE9B5ED66F92F3918E329298D9F6293
E8614966D596681698EF9F5C3F9C1E9D28B71A246B043CE44E65F6FF48FDFD9E
7F97A02DBD8119C5CF0B4AA548F1F5EE79293E39D818910A1BC4CCD59FE2E917
BCC939A9173872146DBFB3CAD4DA410E69C542CAC64B65F6B829C08A4EAD88AB
78C203C6D210C162942911B3230B8D462CB20C910E977863B5BC5F2ADD55C74D
B7CA7E9EFAFE44BA7F7A772A1DE9564A9D3E07106E7C3EBF116741C894BF39A9
0453F01FE9A9C0B99A0C829B31A39E96DB3FB6450A6FA72B393C1329F91FF6E0
5E273B5DB89549315DD15AD26482EB823194818E6DE249207343C37BE9B926EE
DA3BF3D70B7EA564D92A65C4DED8966517660EFB9F77E72A4463CC061B079BA8
C8459393D8766BF4B26E479DA5A2F4C3D020E853171B0D1612A3DFA5264D6B64
371271F687804E60080A4C7FC4641AC84D9C0A610AA270C036838AC86A8C6A32
2C7FB4E132582BFB1566DDCCBD1F5DA09879D88540FA56F817D5C1B557C9C11D
2D1E7D8E9C5608F8D6639843D08FBCAFE02A4FABFE9E13B8BC0F4FA28FF4343B
283D1E9906259C74BE3535877F54B62158362A2FAE18AFACC74586D3DD54067F
7779D9DA069D78960F4869F16F458083B608409F1BC136BE8BE912F59CF929B8
2718259AD02CDB518BA4C4AD8F261CFEBF43800C3687793CA934F06A27C78C51
22CD9EC73E29A912F1956FBA6AC4B35FEAD22394C03A72D4AAC6C42C085ECCA2
83F22890699F277A3B4ECCBCE4AB764ABC44BA382E8F9A0553670CFCE11E6829
DCABA73D9CE75D74A63FE035DA6AE09073B38E8EC302C923C417F577823C0210
444C9EFC2B351212FCB66B4CE90406085978F8EAEEA93BFC81C0DE48C09B326F
64EFEBAE47B9BED3277F15D4F9690BC324B840252750485AD8A5BE240B63473C
5E2AE49AAE5B3839F3E07B66DE9047BCCE989895127AF92F2E6F7BBE20572943
FB64EF33B2776180606E79F42F69D23D83720FA9BD9CBC1F322A39EFCAF58510
7BD5A5C188A4F3E799A32B23859A4CDFB52C22ADB4DB30D313BD8481157DE1AB
55FEA2AA4FB28CD56DAE1865B46C21E0E0E89F92C164DFEC115BCDA359B58305
C56E941651E321CDA67159BB74CE9AA7E2465DF8BB191187D14A7C115822AAC1
C9EE282505EE165C67B85CFD9540F40E3918B0F36799E9556526F5E5F2205DD6
41EE39A4BD6C8EC20F3EDEC379F90BDE98CB15B4BA24624E146098A7CC2A6744
4D326A308657D62DC3F52A76832779BDFDFB3E488773EC7FA5F235AE1BA3C6F3
547FF24606651E5887FE8D860619C6F45FBB3B6B73E80D855F5EBFF6A5BCEC48
48CE05C8BDDBDDC8BAD0B87F3BA50D36D20926718FD3700DEC250462972EF06E
EB9BCD3B1076ABCC3DE786B58C489534C2490AF71BB6460BABFBADD0AFABEA8C
80E085B2BDD8ABD8ABFBA9D53C42A61026E5BDAF599739777399A670671F12FC
2A455157B1BF595EA3E14929085DBBCCEDB86605F30BCF8E570B4341C3751A10
FE6C3304E9A7D21CE731EA372572B28F41AEC501195D34460B4CB7D6A079D7BD
85B9A80845B563220566FEB8F341AACA788E3A182971A143737D515EC7EBDAB4
AF1ECBA1C6E90ED114821961FF7FB9CDC8E87628938D6D0D86F3813393C1B0F8
795A88AD6FBC2E709568E556CB4D1016889B947CBDBFA2AA2F95E47942252534
868BC0BDD3AC613B165583560A971E20D13D14FBDC71D6F64905DBB304B088FD
97B4BC957F62A653018E98A03B7268517394AEC07942847062262A67530B2F73
EEE1DE2A68B5B6105D8764CB02357D8145A1FCCBE19B1974E7D188BE0FB15BB4
6AAD04E02883BE3D2874FC615317B101D4DD8E99CEB6204BAA933445AEA45169
E6F0C558A7C76703D9959B4266FC6B1D8F2F796E97E492D77BAA5654806C9CAC
0D5C44A7F312298283B7BE5DC9E87714F3B802AD3E829A70F3E630D3712A8859
0E36B304030ADA0D2ACD2B57ABD9E5573D568776A96ACE6FCBDD69667868EF37
1BF4BF97B49DD9D0ACDC545F5E9508298692F1D7A25FB8A43CBCBF50D14F75CA
3925E9D2221524462A1F98761B4E749C5290AA347F0642DDA30F1997653E0DDA
51C90CB9815BE41305099CFC3E1E4DF8435E646688A6CAC6190A493572103C85
22892F912C82043AF80F61A293D8E4663948824B1F167FFB8DA6D0FC30521026
8A94F787E3E726E23CD3D59AEDFF832696F5CA0D4BD71FC54A1D783BF1258AF1
911F31464448C0709C1710DA050C922414669E32B9CDBBD1A4F1198D1C09F4F9
74B984F2CCE516A901673DE4B3F6F2B78F3EE8713C62E48F5C8F62344E371AF8
C17D5AAA5E3469EACB167C30F7D7763F20D741FD762A588BD02751783B75A1DB
76E63876B6FB9A2B8BC293A7C116E4411AAB9A60C2FDF1D3759ABCDA9DB4FFB4
CF7051863564D9EE4D3417DD8BA249945228E14A389F089207F671AA80D08B77
A40CB972E74299E2558DD70A36B6A8BA9D4BF36A724D7F414849B63D419F4B45
BB03148724B79E445853D02D69F06FC20D7DE3791B8FB54AB6996CB8826AF76C
F5FE7F2BAAADC3900F14F17E59A758BD75CDF6C8892DA1D9E5D3042D125734EB
53A8090EE56334A908924DC4B86318921169C7F112991FDA63181543D0E993EE
334C06B1A622591040A4D13176649B1A4C795BFDF16DF6E9B62353C3A97B9BC8
66CFBD491B08704C6DB6D9F424CFB1800057E4CD4218C88DAEE1BCCCA10DC61A
DAEA54F207742D31C0B69DDD41BA88727A8086962286D0CC1BB1EE4DD1AA03DF
C8ACC8BFD0FCCA75F4FC8D577A380B34888EFA8DCA131BC4999FC01E54A639DB
E0D7DB87DF0B96BC386A0DC2B658C25806C67763358A994E1927E1E7E81CDEC1
DBA0B63403DB209B0E863AED121E3736AA0E1ED55B70BC0079CC996AC611A934
830E2481F4C794D941A81A592501CB99EC2DA8DC9898E7D7052B6A746598904F
052A50EF84D1C46CFE09C77254D06D3E100E16295B17CF8CDBB25AF54BD452D1
FE2B0C171ED12EDBF622DBC6438DF6625367A51A814A040839172E3D856FDB91
167A89F2C736DE82F77A6D8F10A45FDA871DE066F5383FC4539D3C5601350E11
027DBFE4659DE91408807BD26DF0FBBEF346A224D073A11E3638F95D038D66E5
3CC9111E290624DC39FB79FEFAC07D2DA7DECDBAEAB256B88AE676FDC3CD9831
BE77B254972132E57A163B5355B0E26711658E3636933A60C554B80B5A7C816D
38FEF3E610CEE0821C68FB994E4EF6DCE7C566AF4918148480D802FAC4425713
97A62FF6727AC3BA11E892F304616D034B3F80AD2AD5D4E1DAE678029CC028DB
4B4E119164D6F9F6B7C3C24258D58F35232088B67BBE9656C74AF133C1C75873
1AA348AB2BD113D4C2F5C4ECEE0EED19E733A2A2B3C97F15CB4FEC940C45FCD7
F44ACD3EFD9932C19E128DB67D6F73FE591BDF942BCABB9681E18B6EE5C6B153
BA55F194E998B6EC925AC28831C654EB234ED126A95DBB4FA2D09EF80D1F2C50
7DF980D3DC0EE3F79FEEE1B30ED1EAA29FAA9DD9CB641E5BC06A2384A76EFFE1
487F472EAAAADDBC48486C5D96FF0A334E8F5667997DFA2EEA9B7EE86F7FF639
8C06F8F578B49F50F9D58FD4161F04235FEBAC54193DE67EF18181FF138F946A
8E18E1838F4BD242BC436914F8C55BBCB427552362C7E1301C609871641736D8
B9C714FA8870776EA3C4E8DC170CBF5F561E004C322217D2A01680D7EC23752E
647F5E9284AF035C5C9DB4F8EB9844FABE985F922CCD96E0CC6F5A17D0A887B5
BE606C0A21EFE6853F86A81F2294CD52B8B3CEAF5CEA7C3AE566DA6FC9118B7A
2B088D87B141453D3D3AD224EFD9AEF1FB4B72CB3030285F528CDD83794B1D8E
0D6BEFC5DCDD5D4EEFDD6ABE878DAD54981D7C999B88588E3BDEA834A3B0F645
92C48CA0F3B1DB49F96AF896F9B09E68528214503E95BA71194E435A0810307C
C13A1050AFDB5FD2070031BBBFEE53E415C1E1417E02C197B010E49F7B468D51
C05113E4DFD75D28328970333D68C7090E454AF9E45392F1B4CA74A7A89A3A2A
4B3708E7272F426F700148DD7894AB6048D55F04A4B42F39A4935E10F10BAABF
5FAAAA47A65D35EDAC51547EFE9C11BAEAB87E7827B8321C7FD25344A0A36FCE
EB4DEDF80BA158F65C546E9ABE7B6415B64E2A21E04E486126604BB3082C40A6
5639E91B97483486C428868DFE4356AB5F2F38D70FA75397E8127FD3D47DCF06
281811DA066F16583E31EDBAF6421FD5099C6A2A421B22C399AAD5D324BCC6F7
9069690BDE2D5DCAB19AF1EEBBF1786B432C43F3C7361171FF479FB4FDFFC814
7219F8BC56D7731B980EF3C793B89AD3612894309F1DD29EC2917528A1E4F90E
BE4A58DE01CD82B0B8D1C2699969029ADA6BBE4098BB47894402F0B11E12FE6F
8C7D459D41AAF3214DC47D57754E55CE6588CD0FDD9D151FAC24FC1467A7217C
1C887F89586F84CE132D460067CEF1AAB1132A7760C13A25D4F58FC0C20BED7A
E3AFC8DC88D38BE549181454004F18A348FDA4446E35C019B5DEAB90F1C88BB2
0B7662677D7CABA2D572D5EDEF408B689FAF78D1103036B695EDB12D5762D807
5F69A14582986510FAF7CC85EE25AF847626399CAA221DC09190CF963F70D6FB
253E24FF4AA72AD9117A726322FD0A2F50DA63265374CE25BBBF3E7B160A35E9
6685E39DE90AE39CDDC8ADD26CF9515090CBF63F37CA1E51253191C462F39C2E
6D1E17C5DD710E6DE3B94D853362CCB1538C5D0662C694FA028DF04128F86348
FB9A511FC9C5F2A4948ABF4FFE049B0DDE72B9F10BF392EEB7EB8AED2B53A6F2
E58A123D80514590F1A6F5EBDB837B5DF27E58C30BB0821342EB97D8A5451711
BCF10381381D3FDDBB3CB3324D30BF1893BE00AFD1CF67018D820E9C694AE14C
87D6F5F293B097783B27C733DDEF14A8F726993066F1D7BDA1CC7E62AC1BC317
2CD857F2F8CAA067EB6BACB1604BEE11CE454D7F620051B4131C34AA6A118181
DC716145F7BC7E8475220DCAC43AEF7C894AEB588BD00A58807893395E20C0F1
233B37DFFF06E80BDA2E2780E0925CBA7730842B50CBAB99A691D4BC90EBEBBB
AAEA63C90535AC90368B31AB3110CB4EB8D00DF6246BA012FE0D212D2C52F35D
FA76D8BD28B2DD16C22B540BD2E3DB1BC2F84FA09BD0F0F01A5C693C8659E5EC
E5F23D7167090DE590FABBA2C4A61C3CC62C791E25F5D42D773503A871E7003D
92A42252C0BB59671471F7A62DE9A66C35F09BA6F8E302F4CD994EC08C00AC6A
66C51254F712840B3B151CD82DDFA79D31F0B4A0485F51334BDF5CD5E85B5988
EF29BDF6223F82F41B3259A86D6541C9150BDB7276F5DA72A975945FBB6481FB
C4F25889CCCD84E337400451BAA073A1A81F8BCEA1B152FCAD7FAF84983CEE3B
6025680EB3A373793F0656C0B449E94C749BD813E5E7200FD4EF898C821C238E
F04DF7BD7343B7724669B692ED4BBF2B0C0CCADB597E641054899B9DF267A462
665996C162A7229546436378570253F9314AF146E6642996411987BA74CE27B2
C4557D4B04E7F771105122A7F43B8429BFC949FFD786A0AFE6EAE3F7751A3CE5
CF1EC4C6C2AFF25CDAD43BEC7AAED1F6BAD964197FDC6B98342DF4826F5D8503
1896D58E539449C89C4C0EAE0F92D49E447C4A3E100967B3BC7F3D19501005C1
DAF88B9DE0152320FE0AF6DB142F9D944983B19A5C42053282E1F9391D3D563D
72EDA0CB54435883A32775F148EEA9BF9AEF03C44AD20286FD9F694015EA9361
C2B4BAAC06004B091F3992F71A1B3D33AE7ACA07B528365AE5233ACEB38A5142
4F267E9713229F7B3ABA30559D9E4B6B06AAF2F4CDD8881540047B466EDDA861
0C578650E9B6EA14B973099C40B2123936DBF7D6E0C043CD6D918C8C6732089C
5878537663E0B0DD1698B9D1A2777ACAD657DF71450196C47EB3AAC7B89EEEB9
E2F9CFC6BCDFD9A438C10E66D9ADD60AA8F5B2BE8C21D7344CD8E8A6C73664AB
F75B5D88EEF54D2F40E408D52ABC831EDE8F5F1DDDA31D19D5741193D80A5D6A
6D2E1E26746A94A779EE401A85A7A83DE834E58BF6CEBE3F905291691FEFA90A
3DD11250F79CCE03F54E22E2B141D5417FC4E56B370A5320407A7883957E4A59
BB4D268C8E961A6E25E7A787826AB442B32C4FAFCE3DD2B1B8A93D032C08521C
CFFEE1C28C1EB6F7EA0F868E0B1E18FA0B629E8327A68EA20601AC9990720732
AA1A19BABCCDCD717140938D234BB2DE96AE09E96B095B4D29114FDD325E6CEF
2AE08263950FE6CFD73126C2C136176ECC1145CC3BC61DDA6C89E780F5F132D4
69741F1ADE900657709B4DAD35578DD3E41C3CCF972821E726BD4CBA7AE8BF83
E11DFBCBC20E2347715CC3E50112B4E095F2C33829E720848F8ABE694A82BAAA
4B6E4608F0FBFD2E57F103D8CDBC805E5E96565C2800203D4BA3DEA976ABA8E7
F01833ADE127505F8CF12DF9A2CBC512126729C503B45FB0D73CCF977E2D21A9
20B885BCF4574BE6FE1505687BC463D6F3A2B9511EBD13E6A5D5E64C41B6BD1F
16D657CDDA0DDE5F31C9B8DD5270A72725DB46EA6B672C3C04BCB42AC42236A8
1DA64411C9FAD822B546D0B3F60BA1D2D3AB9A24158569F13BCFEFBC700CF3DC
C7585F894578F82D9DBE70F640BEB821AD49E34383E63C474FB5CE992FDFFA64
2CEE775E9EF547255845970C5AB0DFC8CAA08AD31AA88BD8E49C55BC1B68C60B
75E2F3010CC15E80D2594ADA16D9CA01B23D71CD0AE618D84B06C1D9FE94D42E
D7326EC4D7384A9D9A09994282B995485CE83DD6F787F0D37FCFC704863F7BCB
E3A853130C1166EE98EEC9E4A64869B9F4ED56C6C5CFA68B814B94B7BE0A5F24
F74D9BFD2AE20A0FB0174DCAF6823A371CAFF56A1A6A0D51B9C453592938E507
53358D106FB48726A31D7C16D522D9A45F49A8C83174A9AE3F8171760BB6F161
77BE7A7D12C14CFFD98A31AFFFF8C34ED4505C7F6607DAFB9A2BA3CCC0066047
253D42A7FCB3C1780A0C4E8BD6024DEBF2FA31E9C9379F2B3440AEB83539438B
B83563DAD9898650D1F96A9307BF3FAEF50FE2825A0DF9A87679D1C87B317084
C82296039A2D9E5BE8B5C270923AD51301D4FE634EE1B8BA0B44DBA7B7626067
8D4A6E581FFA2C8CF72654BA38680C93EFCFC2317DF28936561AB83E755DA086
D524E547FB881B376C717628D0C32285C6D5F48BC15D9DD38AC357F60B0D5EF7
0270B40D4EFDAA421F4059C474F4BED185568423E145C6B2DD38630FF688B69F
4881D91F6B49724BD33EF52F6EB0456379A5018902545D6704FFF73534FCDE1C
8E7526FB5F8CDB189CCAC92D86370D5832665C5E989B17A3A72248A138A3CA86
22749CD7481175E0A19DF3DE86B975605D286CDD3FAB8FD8D5711B8ADB299472
72ECDD4FCACAEF0B0D408990758FE7062525829D6B06C337BE0C2A552670B49F
6EAD48DBA338B09EC96E77AAC8583B1FB0BC61C7A26294870255E4A960FDF333
2BB2178486925CDAB6942722DF221264996510CBFA13423AB5921DE8EAC56ADB
58FB18C27A41CE503CAC9F9B48E2CC80A917B83F955C00BE042DC2D87E2C0ED7
0F6F31BBFFE54A8505E005C9200CCB2B476083D7E5597FDFA3034BAFB367CE72
1AA7121C80D154E0955DF11D0B83403C373E5CDD5962599AE3BA0D086EE6BE16
83309502F36A826EC2C21F16F9071872D10DF18FCE12ABEEAFC88F8D74204901
6DBF2EBE83E22175FD33DE7F728402CEBB6FEF5567D53F5FECE23D72A9F61619
E09C9298702C6E64F5C86707D726E8CB6510CB7C057C2D55F38343A9C9415419
E0B7399145BA7A01B9D57754D643A8EEDF0E178B88CDAC56EE02E71CB861F900
BF640BE1A6F382D32A83F0C7925D10BCF081E46C55D9E7AA3C194B3B1C719217
41A4F2D840D0F744A1470A7A67AA5644EAFD78776070BF2E49EDA9528B7D8F87
24EADAB1EA2DE9F3148D6FDE14047075A8E61E672A6496DA97D96749677CFC68
8147691220B40CDED1AADCA60A7E22E14EC367428207955D53D70756AFD54C0D
F38C3D61071868A4CE3D3447803A23EFAB365959491BF8765EDC9EA745830143
28EB90E4A7C81FBAA0F51DC83ADF47D5DD8DA55B1E89309134CDB5E5E32533B7
0D1E617E255A4A7A43966ED6BE28B6B31D984F0072AA303D33D5478995B53381
864E316F70A65AA798B36A639CE4CEE3511B7633F41B40774F346250B4490787
4A1B286B7DCE0D4D5B51864B341F567ECD8FD94E2F8F2607FEE1B55382A62B35
FA16C623CA952B2158B7FF166C507B49AAF6FA4A71C74683F2BFB98BC9197C34
1105B044E7AA81165FA1B97A103553E701D49235C7430364163AEC6E911191B0
6F159BBBE9A45A42B752AF11A279BA06F821525DD0F47783117684C81CE1B287
2E31DA8DD0DFDF35008668D8257FDAEA0941211A063F32C69E40D0F63977B44D
C57D2D73A7B25D911EF17B19060A0D29AC436AF3CD4545A0917ADC69145C50A4
B96604D73F003E662859D8C0F692A22381ABB95BDB2C762D2D4B60D7A3E379BF
000C72C3891E4D22B39105011CA24A56DA1CA78A8AD61511F8DC678BF43D83C8
1B69FBBBF11FC3780E630A24EFB520A6F60B505174A6CDBAA8AE90301A28BA4D
14E7FACE24737C044BBA551DF5D54339B1552C248BEC00A15EA0644E6EA0B2D2
FC466818E419883FF01BB562BF7A8CD1C6CD40BBB35A568176C7DB2502C4C4A9
1BC788FC12516BC85BC89A23C2C93A9493873150FC6E903E8E0A2D4CB9CD1CEE
0FBECE6A4CFACD75E5038E74DD522232F5546377C9A9BE0E1BD3D94748525DD3
7049D7EDF4B3170188BA06228CF9255A6A86A6FFD1E746759CD77594B33D93FC
B5132651E228F7C06894465ED0CC37407C24F3246D0852DA7071380F22A77151
AF50997E8907E60C2E57D997090E60FC7DEA0429E44FDA335B8D86E8B704D37E
19D4F136FFEB7E81904730359D72FB1F64E3B041A69B2444C7A3914AC32F0289
80AA50C18C5C8C44EE90A4254217C635A07B1CBD85BF493182D44236C93F939F
FC5263B313FBF469BE383F47BB8E249300A4E2A66056BB18F8C1E71F0106A0FC
93815CB4580C6C918147E883F119FA4D166A8C09E1B766F6B41E595F24356F8D
6E6EC6D1476B82A33222572B4DF407490D64247BCC7730A01122D44298825FB5
9561573AA857702B2A8F48F563EDA3F739216EC39BDBECCA3D62CF8656281C77
6890FA71FB5A9839B25E59F14F692AB281984EE6A56410101576B49CE7F51C93
A584D93CEFED8768DABF7F2E4FCED47D16F4DD200D2A3D6D50D8A7B453A4A15E
8B8137495F25DBBEDCF11EA7E85280E03809D0363830D1DC7502CEE16E00B9A8
594C5E92D63D8CF4BB41CF35ADCD5851E214DC90AAA0A64E0EA22D12EC3B1506
0C553536AFA1AB550740F72BFA9BBCC810A6E3532F63C155FB86CBF6A62EC2D4
975CE83A544F7F4FE29CE4952D5E50B1AB34F96DB9F031C537925CE75D020391
179FD995E5020FB2B56B488D0D6288BDF28D9B618529F7CD8EA038A4EE4DC836
F31EDEEC9FADD9500D776DBF675838C2E27A9A1C75D9786FB52CD0C85A5D96C6
22B04FCDDB40B675F081053377364DEA4935423D6ADE78AC5156763DCB4ED134
DD502A5A78CE2A27FFB96A311FFB2A6A1E302218F9F363EE87449912DFE4E42C
2BB3C481C676B3BB029368632768C2988B95946D8D665D7AD4D88D93C0C8AB11
9B54176F13818AD16C8359EA9E653F77B478161CAFF62BA0053F44244AAE2071
2F845F80654270445BA9253F9E17A1E0823C22275C007BCD90874F5E3A302E74
4F13633E003B09BB6C630C32A3DA1E51A3282038BBA7F7FC70987A57EC73E5A2
6445B4F38D76A281E581B4391D0FCA41838CEB488F113FAB3617A13D098832C5
8EBB4F54F943DA2FF24F22848DBFBD511B8CAE488343C923BBD13695840A4B56
142475D14D8911F60949C075630D5E29912CD7E6362E528ACE41DEEFEDFB47D2
36F1DF488EA9100D499A87C0AD12E8BF9E446913C4321E200B177332F44DC0F2
A1DD706F2E3CE9C9E5B4450986908EC3E769861BB34154B0E158B295D6F56F1B
E23D9AD3885E2CF29FC8866B0F82F1596EBD0AB2CE131DCE3F5B17D645EDBC0B
373BF97CDA7C326BCA16BEFED5CA2206AF0735FDA1ECD4B5C158C66EFEDCE081
5F9DDF6E6A7F3179DD39B987048E8FBE346C1BB6FF30E18A42C47DD0FA1EE352
1C98714EC451AB5BC77457B2253F632FE978DDAF5E0A70C2137B983B1A5A9DD4
FE557EA837042CCC330766EA028CA0FD447F078CD5C070403230C4E7527EF177
CB25E684AE7DD09D090A60E928E722B7CB9131013B77B216FE145E5E49AF9C37
D1AC2904601397AC6124220C280E417BCDE241F0C257CABB03EC5B28D8121A26
75BFB1538011B31D5E979F36534284FC5F88DC7ABF2F42F1418BDFAB8210BA22
E3115454DFAC85CB745676F87833CC5803627C6DD6BE70392CB9BE4E6127C9DC
4AD6EF6EE0D15AE4C65321DD0ADB821590D104EBADB9DA09321173442805CF8F
8F6BA06F1DC58CFC0D17C742914ABDAB3161C2AB81BF9C9617CDD08CE82FE046
C615B231FD5B7731010E08A50DD46A8FE533C84D84292C1307A5CCE2837283F9
6D066F4EEC992F3472671D5A020E9A7811DD9012B45CF0DF0644B2E3DC0A37FE
1365B3985DC2DA7D7E68619337185BDEC00CDAE3B0E9313749E436516518542A
B92BC063CB94BEC63870B1F0D710AC71210359986F177C33E5032432E7B004FB
97FBF9633F89417C286FB98AB2D2D3A6081AB503E9DBB9F209D9A01CC283B773
4022650FBDC39FE0CA059035306EE8AA00BBD282C6762F07FECA518F59858868
90199ADD20EA5D10BD495D1151F4BB20BEFF60640B1083E681AFCC44A5C176DD
F5EFF2C02F57FE5DDAEF20A93CB59CB9C38B939602D8F7A3F70B39F1723B8E66
8822F5358DA447506ABCC3C649EE21863E4C426DE45811451B5430B7008EA14C
41EBA75D41C7B997E60ADA11E53094C98E78B6C552479B1E51C74F3BE16F39C0
B59D107BB8D658B0EE52466D6DDE336D4B5F9F839546983922682D5BE7DC0912
EAC8754AE29EAE5AC87616C0C26855C346BAC56857B06B212C00A1CC66C5F98D
99E6A83BFE486C29ED82B2F9D5CB5D32B93F2CA8FA546DB1A5A2BF371F9B76D8
D365CDD8FF305059C2E913B7978671AC30CBFD6D58CB1599834A73F6A7F1957B
F95A52353BFF9D31435531D92CC9099C90F2D54C2D906F5A2D07BD8A312A3101
5011999870F0AD19B5EB1B9D54BBE7593C45B8F1F63FF9D85D052DC85A500806
68D9F648ACE56F31BE53E15AF93AE1D7487E2406AD30A2E8B6A1A1DB86B1EA36
3D697EC9D666970F39E1F01522BF2FCB6B28C527C32E69C6250822504BFA173C
EED4E2DE5B7DA75EC58D886DEAE5237B3467B1A26791BB653B865750745817CA
28E72D27C36FC9583A048A83F68049C707E5FC1473E7DF90042780794EA774CA
D2ECA4581BD58ADB6AB154DAE7939E93773DCB2823847EA18AECF20E578428AF
5EDDE762D22B1FB4599FE5AF10E3513D141C31DD7109BCA7E9D83D8681A2A933
8E8F49892490A1CF05305DC3B29A1E317946C925E8C00BB3E642A64685456B6B
AF629AB80858A832ACB531A076037755496C3DF9CBE5B8211CA8E1F3112C0D6E
EEB97C9509C9294C6FDD6D4FDB75FB0AE3EF1F6099B844379760DFA626612E71
99553D3194EACC219E17ECC2212F0FD468AA3A8CF8AA023F208B63AF2A8D542A
B58A6BDC7D7E585A9C849CE54A33D63B69215172378E708DC404283546D7814B
A53FE7FA161FF626461DEEEE3C1C47A04E04279AAA541D411A0BA64BAE383FF3
3D70BF1A9594E900B2173E57F61B1537040858EB3F538801E5C3F58B3EEAF656
E361942F5BD8DFF8B5821ACFA0823B86412505B6FCA5AB5BC8937AD9FF4898D9
706CDEF0F49B45D16CD53C8020A15AE53C4E742567609F53B5B57E579DA191A6
3FAB427A45CE4DB5FB80350DBBB7323F2BB020C5A23E03EBEAA640CF23D89D1C
2F0FFAB206EFCDAAEBE72E55AB10A4980F44CC84F8DD351882DE2BB1EA71794E
9FBD38B14F7FC7DFABB3BF569214525BD6964503471023C5E8F779061500E5A4
39E880B3DF3E7BEE13D71837FB78CD002E65B96BFDE4A362D5BD17C5548CBC63
BFD8062A3915AA5CB574BC60C16FEA1B452F3C4B872F2BB2200367B4FB6C7061
5176F41A8DB91E6772862DCDC7E2DD3206F64E3C71F4704A0B43013773ED91A9
31CC43441F312F05F7E9EFDE2B0457EB8D5467C52CDDE1E7BA8E5424C8D0A899
F621CB490A6823BF8230D490D04BF1A081B8EA09254B84B347E70457B09A1F58
91FAE76C57B6AA7F5B3BF9B315C9C46AA3B83C633E43EB3D8FF394D29CF05BBE
EA60483DA76133EA5CCA699072121EF54A3589AB493D1673B1A2737590A0A17D
5D3A8DCE86125D9A3FABF08480D6B95F1A725A726F554597CAC157F3D5586DB8
783F06030B0E5C758F7A279110D60F09526D14762A1CB6478A4891191970C0F0
E81DBEFD2C0D8E8CF3615342A3944DE09291239E7CFFD239B90218139ADD20EA
5D10BD495D1151F4BB20BEFF60640B1FFFEB2399D39EF436CBA30F8EB1A6E543
782DABE3FF8C25BCAEE932D20D9A5B4779DFFAD7B3E5D447023D643A3A633FCE
D702FA11B262ECE3D4DB52F38098A03B11E17693F1620CFF75BDFD5B8B636585
D62441FCD0648C275447415DDB8B9B0D8D847664C29F8BB65B115E46DCDD06C1
BD1BE8C562766771E80C997F5B1F8692E1E8CBC367794DEEEB76DAD21733DE55
FA05C2A592D1E80050D8EBED3609FE872F662FC475BA88E84C47AF37E871AB50
A4B273ADBFA7CB2C670B71BDEDA9725503C98440DE55077E624BB8B2DEADDD47
5CAF795663765031E331E89BFE0D5AFABC3041BB44B933DA3A8336FFE9568C0E
6EFA84DCEFBC524C6B50648A60367A6A4D08FD038BFD50AFC54127A27B4B7E6C
306F51B9F6DEF9B5D3F20879DF1C2BCD0C0F042FBBB8155EC868D4F208148F47
77479522DDCA89FFC702276681AF7D03B31878FBB1F73E41AE22B9BCF6423EC6
C03F4A6F2F81BA6E4B03157AF42FDB15FB077AEF602FFCE688FA6D251EB0763B
1FFD750A614E7F4D6679DAEA587D36A213850242B44D3D3A0124F417DB192F9C
0297239DB3C1D1AFB06DD6AFF8A9A814589481EA7F756273333E84F341637A1B
DB292EADD055C97023A88EEB200BBBC5CA508A4D744580C7795F7B3D0636601A
0FDF92E2CF8880A9D1B1448067A3F9EF95AA52DEFE8A03D9465E2180A40A1C23
A9FBC0897F01D7B319F2DF237D4CBE71AC6D66BA0971925C5867848F9B3286CA
734AB113866881201429FDA949FE1F364C2F744079FB4E78204F116B2C354852
A9E33D2440FD85E483A0A0B50913DCB96FD59E23BF72280FD906E282172C8BF9
95D877B60F6AE8FA7C6A8DFEF294B4268517F1857924960379862D70B0FBD115
BE7EBCE816AB40D2ECDB17E15F23743D8C16112776678BB400C75DE3A3E70D68
714FFD80D81AE3F51F5EF7039DD184011B7B7F6505A11E4649FE193871D05FB2
9B08D5DE5830B2D48BF66CF1EDD53C5741548A848CE3BC9F4B77EBF56B7A4ECA
286953C8343C031093B2E2990ECE96EF6D712B4FD78087539392EA3BC9D01E32
4A828FB79D8915451C825FEFEF2FABE188076F7DA722852725088E187DD3349C
E83F97D3A722E1D7BA6BA5DC9D9AA36A3480552044F527BB093BBB0BB972B4E9
C7989902475E6CE9C732AAA49CE107C713A3CCECDFEAF153A18BF0292CD25EAE
9A176C9151F9C4EC7FBCEC63D2C4C8834BE9EC41F48EE50AF6797489236880A4
C29788ACC23ADF1096031DF2400A054E10E28F8BAAA5339C07A9F37C84D143DE
DCFB27AD763C746E1814DAF9B2E7AF27AB9182812F516DAF8BF9F0F7D986B1D4
352C65AFAA495A6B8B8F1919AC158DC63FF4600FDF993CE23D3795832B92C298
DF2EC7706E9F77C8A04B529CC5F6D78B7C0E94AEEC901DDEB541604DEC0FE90F
A0685AF4A42E9527D01989A45B5543596F832A953F8F0CF61F39C7785ED0C0A9
F051084E452C075130628DA275FD4F4459CFE4FFCDC2F3625DBCE62375D1DF34
71D83495B19A93EDCF15B83C7F0DD201D74FDF7F448889F2CC1668FFA597A98A
CDB7722E297692FC187C000A9E64BDFB0C56879DC4C9490D7F1783EAAB803194
131A0DDD4C69C1CEEE50D2A6433A1DCF70D9247400F5F8366FB77E42F3E6FB8D
2EA1A31ED42C785C186D94311355CB22E1C8E3601908C1845385477AB883EEA4
6BF10601CABB75E0DE4CA1248F7298D62092922F879F7F52251AC640EF478622
B6F6F4FFFF093DD4F978A2E84EA3EE8713D7C7C2C3CF815587CD7BD450098C5B
7DED6374985E59BE827EA5A22FF692A71E58E6534EDEA52AB1E9A12A4768D2F8
048FD076AFF560D47B2E423533E0A3F43A9435233B24358DEDA4A5F4A3EA5F2D
B01A0E1BC0F229B4B9F28DC73A77C70A5E9BEFC741F6E177F098C56C652EA44A
3D140DB2A0FD42290D8ACBBC3701A6364E311E5EFF4E64565BF8CF8AEC128149
B358437D0CEBB9E0DE0C2EF632DBD7F6378D544355A4050F873A6DCE28B69125
4DF65FD37B11E0EC9C7F554A634A653DE008B33BF01981D7667649523E66D810
114DE3E8040AED15E5AAD0C27B860831E4F0D72260EEDA255F520ECE25559F3B
23D9FA81540F5D173CF3236040BBF8AE8E79C861E0641C986ED7ADCEC73CAB67
F1B11C9239069C7A401D40E2918D0F2D39F630550662560F12C333CC95E5B4FE
9FC2A8A3190A35799A549FF8DF04BF49A127F12B7C8FC5B8D636D725631F113F
A5FE706787E65F7F521B0EA51DA26A509F71696EFDEA74035D067712F96772DD
1DCF63D302E7DF613C774F358CB2656C4993FD35B9B012BA18613732D7EA32F9
2A93E32F073FD822C9DDBF467A1A7B0022978BD3BEB8B79E032969680B698066
04355A234D00C9D356E29C1BD467594177A6F4D4BEC5823D589ED12F1FBBE1BC
F700CCCC6D8F0128
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: wasy10
%!PS-AdobeFont-1.0: wasy10 001.000
%%CreationDate: Sun Mar 22 11:13:35 1998
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.002) readonly def
/Copyright (Metafont original (c) 1992 Ronald Waldi, Metafont curve conversion by Metafog (c) 1995 Richard Kinch.) readonly def
/Notice (Copyright 1998 Taco Hoekwater) readonly def
/FullName (wasy10) readonly def
/FamilyName (wasy10) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /wasy10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 52 /XBox put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox {-23 -1667 1720 881} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB02CB1AAE
36F1D7B67C605A37687A9C3F7067F07673039D1E3E1F5D9B09E6A389A55EBF12
06E72531469F768EDBC4DCCA572BD608C4BA8F7EC3E5BC61C6D949C94A843E69
0622F0AAEBF5CB25A2395DFF6342106C198751CF0B33691FC18800254AC54C04
02494A0E3670008E8BA57A3CD823BF47494F2EF9244421A8A0AED84D153D7201
BB12EE9478DF00CA573F64C2474817FF401EE94BACCA8AFC16E776665C3E1E31
89AEEC906A2B9F8974BEA7160C33F0AE7FB04B2666A5B16659D6DF66A688D80A
B531D9F866F21F15D55C6FE75A8787091359698E434EF9C129EED0427EB96787
B3F25C530E3664725C63D4C5DFF9D05CD13619FC41A001275A78C58F85FC7C4A
911CC31CB426231473202A698E5715B032D2206BB361EFCBFE3E32BC0C8D9BC1
353AAEC62EE632FC8FFFDCF6E7D928F562F689406CA00C11C7EAA723B62FFD2F
5F6343AF494085662CE2CE880B04F5589396EAAA8823DBCDE56D868B9E66BB8F
10EA91AF37D76A1BF27E69C2A2ED1D8B25434C0F205313ECB8A6E039093FFB32
983346BEC569B175529DAAD1FFEC1A9302918FC947C390A86C061AE0F6522D79
2D4FE06AE4FABA59F225D7ECE2EECD4BA1359DB18F8957F551C5D6F037F18545
CC6D03EB2DCCCFA294492ED72A737588457E5B18FA4CA0F6D6D8963CA35DFEDF
31A684FC0388D416D7BF6CD9837AD8692F284F24B80CF9F24DB10DAD0C4198BC
2D2A52D9F75CF6C52C7AE0D8D4598DB750E9CC97D0FD31EE8C598A2FF3745694
29DA808141AF4D8F8AA36D7DDCC3457D5E082B2BDF7EE060296721D44B092E70
3607B2335488925E41B22D659C8F0FFEE19A7C19547A147DB851262E47E9C4FB
0A8364BCBC1C77E29A1183EF185EF35B9A5B13170730ED52D5C52CCB460E7D37
F4F37F772794BEA0DA201C99C52F8AC2E4CE7FF33F6ACB796E55BA2372E3B035
52C4F57AB5C0BF828DC7E5A8F8F00ACE0120B99667816FAF5D736BCEBF7D45A5
79C9B5EAA32C9B672D764D2F51B2393ADC71A36AC0D5CA76F3F571D50CB4C1D7
CA77149B8F0C98198919DC43890A7D49B0A6C7268E399C6C68B6ACC0D1E9F5B2
931BAF9EEEA6ED985835323E85D72C6A607A99212BA2DDD24D57809EDE36890C
F8121121306593CBADA65AD9EDED7740C9A2F402E3908B54CB4AED249AE575AF
E64C76BA802490ABB489275E5A3F2B926955B0D961A0B9B3AE205C074AA695C8
68FC2F6997531FC328B8FC65BB06C17B212C8C06D5127A14D7989D24912D1CA2
1FF37457E65829B6E1C65A09C1A101047DF20ABCD57E067A7298091C88C4B587
84409C67D00F7D95FFA0D125FB938B5762D912E1C0E116AA0593B1231FDF3BB1
498BA3D20DF13C7EC6D40091B789C9FB7CC872BB73E6B9D4ED8A555CA31581CA
0F057B10C7A8CE1D7CDD4FE2D5332FC533158B8CE6CD3E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DB1749576FC52C627F2181104E45B6D90C4CB7ED8
92F1A55E037EC28EC3EA1E403EB80B85A444CC84F8DD351882D81CF6D538B644
942B6B97679E4B3D29C4CAA8344432F60E76A279100D53E3A652381140A60AC9
E399D564C91C1B998EC74BA4DC0AA1B54D55FA959DBDB3A3D59D187984C8B19E
111895943C6CE54E4990F54783F3F12333238AAFB953188F9C9B88B7B5A19F81
62E5D8454B7DB90D4C37C4E6C970F7D4EA4D8333C5B27CAEB1C48C5CB2C644DA
B026162A499787D099A660B6766CFEEB7FBD3285F689A85B864F9D252EAF5F5E
73E8BB70E64EEDEF0CA24784A1DB7F945DA3C9310C929E52E7F1E520E0F0F50C
287A850CB8F474F37399F7AB451FE1D956E1254970C706438805E25284C7CAA6
EEE7810D69F2428045CD609E23CE37791362950FB25AB2A10AB693413B1AB7A3
5B65D857089968DD4A6A37D5F26E8EBC016257E8F4D3BDBF3850A455A4BF834A
C254FBBBDC95998DEF2EA825E3BB2AEEACC0F30846E22536AD74B6819A058C9D
D483677E091DCE521CDF390FEBC79E7F50D3DF9F3E5B6EB1E7F5517A860224B9
ECD544CBE2D7C6FCEF4143E50F9A9079DD2FFFB1672751D8A658C45E07B9558E
776E94EC0991B31B7DE95F23639AF5C05AB13D5A1C28A17DDC8EFA3F3BBECA06
E09D438052E27B75787AE81EA98B34D8DAEF36B9E5DE1884D783C1E2041480C6
862C5CD0D47E24A2BBBEC8AC451239E34711ADD347782194D0FA7B8EA68D5671
095566DBB3F327C441B2392BA948E1EC46435ECCC3A6CB7A5F2F60CA54F14A5F
F3B3F2B3A0D09C2E80E84D859005B46DE826491E802DC10AEC6FD0AE1C3298FA
99C53536EDED25435CB78EF0F4A8EA38C1F73BB1572F7875CC54AE4EDF1087D5
254167A21EABA1D8287E95DCD5BF08A1FFCA11B8BD493853D06B8FC46751A568
9967512AC84C42DFB2D9C47204DC605EF7BC00D85F75BF5F32B350E2CF46BA0E
8D0120BF165A428CA13FCD6B0686B1A34F221780BC3FBEFCE27843EBC897ED2C
6EAF713011776BC1FCD81EF9A29A807BE4300283AE5AC540D464771454AC4CA9
2840DBDA7E1B7B1B1505B3F1266FB8568E4BFF0410C0775643A871CE8580556C
16A49C4B4E8851D93331FF3001E75D64C777FBCB70707F4F0F088114534F6D36
E4D76B65F8774F02A5CFE926BD4891985D68CFD7AD774BEDD19E816587D025EA
6DC053011212523A5C86E50C82C0D98D851C9629B978FA10CE2AC0425C783999
1B2DFD3164CE25F9A19F120360F93E7BE38AFBB5932C564E85513A94BE894217
DECA2F18BF6FA92CFB8D535B2D1B67CD3CF5EF4349B3DDDE8CBDA5AFDB246485
6F531DB9D7ECA48701B5D4511FF86644AE56F46392D9CF48393E530139BE17DB
6A1EDE43613759B68D109146C4433B990B0AB267D3837F53B0DE93BCDA243268
E89D1BA848F9FDECC6604E7D488ECF152B694939E28D488E75BBF597DB49E3F4
2610D596C1D91A878B4A2648506E87CD85E84C54E47C448AB0EECCCBC6EC8E82
6AB2BA27088CCF6A8F90D91ACA913F1D146B2E267EA777FFD62509810B87C552
46B60391D5CFBAB7C1B86F3EDC61AD43FE9BC177C7DAC8DA44B2655D8EC9A13E
235F1B8C2881C0B52D16CB8A3B5D19876C830FD788150D82EEA9530D185C5A01
2B4AF8FA0D43DB3CB9F83BEA96C9925A5BA00548A3141A3981955A3C282A4089
F04CEE35C0B41847C41C143A8ADC78D79BFAE3A811F2D67B799250CAF1112087
3098B51384447951AE879DBB7FB52F25A5A5DFA45DB0FDF9B94F0D339EAC1935
F8964877EA22D9E5D4256F3134B7F3A62C11FD1710119FDDB6C7098134D90F8F
B896D5153F114629439E6B8AB2B752FBF5AD056EF2A9AC6BEAF4358B6F0A756C
A29721D6784A86F3E68670240CACCDC5124B1D4E67DF3C21F1D051AEDD11F65F
E0F14DAC46EC88F3B6577184B17C8320CA028F402E9602317FEE444EA33B01A2
2F873D195661CA3A1BBAEA7BCB4E465DD4B94E0C5EF66E5F4252E5511A19172A
E7E16EFC2202318BADBD95D136728FDC1F3B174E3596DB82865BF5053CFB253C
24C65B5AA6221F458A151C340C5A2F835F9D0AC73865D83810A3A6B72B91DCC5
B8A85AB8E16778C4284F21B29864E26D31511F85D2D2809806065D2034DDAE9C
7B38F502A82A0D35F24B66D798F61E9D66510A1A86F80719F3D684436EDE35AD
601627B61F029D08D9A281520C4A3B4127C06741F0F70E1A55F20456933FCA64
CC1B060E260782BEF6721C7F108A0C2CCBC094031C7139367941CA39AA6DDE23
8ED59B3BE653A80FE9B5F613D694EE004270B5FFF26BFFC184A3C6A182563FA8
F8F6A0A210405C9B5CD8796AADD16EDF3BB714C5A037F58DF43A39DF4F494455
37B8F67721883BB280365F5DA1C9A7DF298B8C2FE351292F1C935F264BC41873
E40028AA8F3DD3F0B1A291E4A62D5AF6B69ABD9CFCCAE361770F7112D35E277D
4D3FFD95F32C14424A2B5AFE307C7807A80183C5E50DA12BF2F08521A17641A2
F5541EC84195149F6D621C746CFEAF186B9198AC674D0A76D7A11670C954A449
EC4E1C006ADFE2CCF08EE40B2837B09EDB5A316F841806A3EF9BCEB1A196F940
1A0C475D1D047809FB018964439FA7B3877858BBA8A26697C5929DF471071938
6E4581BF1493794B0660A2DE342E973DCE4F22F58D24B4AB1D4492ECFB3F7AF5
C3ECA837029A45B27572914CA4189749A74DBB0EA1CFAFCDD853C87668F76D42
0E78726B258206004BA387FAA821247D20ED83336504E06A82A194C7BD042EE9
0B6808E249327D58E53663421E0B1356D7C73FF4178CA4DBEE8AB7684BB471CD
800A378306459C022F4127F2E2207BA5EDA5BF150E373526CF55A76CC97FA47F
FDD7D89F79716527B77AA521C155CE3B0F52E354F0BA788AC9BF66C3DB5DEBD2
71270A478AED9640392137548DAF2D6476ACBDCDFEFC8B7BD24AF41D55196DF6
FB2F204F9812F73D55BF7E9EB4330844CB6AF35D2AA9116D7B649FFBA7CE880F
D80F40C3AC18AFF7308E78F05DB84209A2A06E998BC239F96D24325048BACC9A
BDA9206D0AD26400D878FC92B08DD94FDD0788C9F699187671D845C8C43BCE9B
25CD64E26B57F1DE47D6F9DAD18BE66178622BA86B74865A45D3C82058957883
B5D74BFF42EF404D0B72EC09A99E846384818A44E541E4E108DFE5E1E97F3BD4
57397797B1F5E1DF730CF36E7E0DA7F98056197888148E53F04D4CA153663EFF
8A63016F79C7D0E6C9026B336804C9D88F0EEB0C993216CD336AECEC76C0FE3B
7D5966A35557DAF14A4FAE61403855815D8F7983522486EA3FD2E3D8B66473C7
4888BB0C5CE966D64204063C1676C3926651F5B3F8666E369D50682A921BA05C
82DC800F7362CFA24BB2F3D4EF7D39E1902C53053C202C978749A095671A46A4
D8C410705B100FF1033BE014B7CD8C2DA31500445B3ECF6C6035F883EFC0DF2A
A75EA95E9E898B13ABCDE7322323B3A2A02A0BF388E89B4DF41069404312289E
AC5B98F664803DD7D474A5E0C3E67E8FA0B18E7063D7748945087CFF16DD1DFC
964B4C27683FCCD1C14AE308A9DE8E06E047C76391ED93D9810851A03B9CA089
F7320D1B9BA214E43E83C1FCBECD573418C920277639390ACBCB6F9C5C70E555
DFA1D8EF22E7BA06F33A32C37D7C00D1EB61E25ECB12B1126317F7ED54C97748
1778614D372B043761D928D66FCB9D760D333DA34E243D08DDBCB12F26FBBB8F
9C43DD7BF7665D5C87EAC07887EB84556F43AEDEA439FBF139A16A55342EEBC9
0033144207DC526F24B186BF758FFAA8B678DF14C6FF92CF8BFD11AC59DFF36C
25AAA8C771A83D9CBB7DCADEF7866486665CEDBCF387F67EAA68EC3C5832338D
9BB698487988764781797E2E36F85B97FB489A5D5A12D536115F01BDFFB5EB6C
F214440E4DCFF294E01915AB0165004E47F96B61BA0F88E99544E109918AB0BD
CA908DF6E9A1CAB183E05EF9F3644BF2530CB119078ABB982C5CFED39BC18430
53FB2909D78D0CC5BD0202C8FB9DFB22D48FD50D1EE2A9FEF854CD6238126A0B
323E6E81B31C557A7D64B43EAF4ACBAC482D06AFD458F0DC3F4133EB34835C7C
0E2FBEB1656E6DE0718D62481CA06AFC73449B22937E48C950802CC7B24EE992
477BDAE8844F739EEF29A005231D03B51D3B5ED98C6D02341ECB3E8092A4D59D
6E77D53634C137AE6A6E83FC0D04CA55D14265E0FDAD510D721956F7200EAE8F
93ED95AE429D7CC8C0EEF48029DB6BACF364CFE0BA0B773753BB577FEC7FBA4E
48F13599875048DF2F55ECEBAF8931ADDAA4018FBF2C3CAEC235BC863688B43E
45786255A4DC7DD81BCB713697BB4AF64F4D308793FC1B34FBF5A82D9A43BF12
78F17B4CBF6DAA00B960B965E9C7F789DD05BC0945446259B8B0A4B09E56B245
38CEB6AA2DDDC988D12BD4E208610DFC26A600CB272F79AE07698A0018620539
FAF5FF0CB60BCE7A4975433D1ACFD965F3C47D22B2B8E48DD5EC60FB40476AD6
E7850D0E405AE6523DC0CBB3604510D14FDA13B91D0B53F41B0F31EEF6E5CB36
F29D51120F1A78999867C5F0970BAAFB320F87FC5D14039580BCA0C820277639
390ACBCB6F9C5C70E555DFA1D8EF22E7BD90C911C42005B99D58516FA232E661
C7AC66134A730C1BAC007FE16F87149E876229B1D9D79B17F2D3ABC764266F25
BAC550C282E77B265156DF6B789ECECE188354FFED7B26992399F7151E5B56F2
25D5F360452FA11A8A4A7847107009B163709687F03E8904C670CBFF1BC3FB7E
81230D0F8A676B928A8884081996FEA9AEEF4208C6BF8A2279E9B01C3D7B00ED
AD8F622B8166EACE5F1F7E95016F858D6608F304E3C1B9FDF97FB541A598466C
BC731C76FFCDE3DC72DFFBE32D06D800F52E0882EF078AC20504D9C77E08FCF1
01D33E908A71B94B57A71E9D0E75B54A0ADEC289ECF7C91A46344E619A84577E
90EE8158BEF379A1F1FE5E41BDF8E59075D83082AB0165E301D00B20DAAA10AA
02B9A6E6EEEC07FD93D19F9C0A6B2EBE3165BB4DE936CC3A4BF19EA1C5D6C0D7
9F9DB3B7F0D34576D44A44F108ACDA4E402DBB7F245AA757A20B573E93B7DBC1
3E8E66984826F1301300FE37C74CE4097E1C142088443C22628E66F9D36C8B39
6B58282342412B7EEFCE0EEC76414116026BC6FC01CC7AB541E85B3C974C1E0C
593449E31AA562B4741A6B88834D87621FE230CFD21CAC6764484364FBCE6D70
1FB389257B8BC394FC2BCBE0AC3DBD4F5A7BDBDA43B38A384C2DBF592B0D5B1E
F637F2B625D3A4C5717F7AAB0EC6DEB96170BC42E9C0AA97AD291A3032F4198B
12D0D7A61B06D63389A3DE8DE54897E8B9F0A0E73300686A2EEA2E5002D7CC42
9119063C790D6986F72167A7B5FCB735BE5857F22DD9BBD6B1916CA2E00321E3
409DE3B9941C7165AEDF16E014C1FFB37751AB5F9D5F7E685C44F5AFAC1CC00F
6CBB2D50452F80C93A84675B71AF94DE6734578EB4A5B62F0BBA64443EB7D0F6
C3883D195661CA3A1BBAEA7BCB4950B83A0773D0F7BDD47F29D25A92DBA2AF88
984C142F296F5EC44CAFED396F68A43C26BF138202E62D84800765E74119F5B5
3CCF11576A5B3D14BC2AB8ED858D43F66DF0CDA1BD5C661A4788A758181C6C21
3A2A51EF5CE647E9971FA87911950FD65E90E3CE3A2F684C07F20223EAFA0A96
C971445D731DF9B83A7A1136A9CE87477940047E4EC37FAA311671BCD21B2926
BE4C650BD6D0D1ADC7C4EBEC25616CC076DC7279B83FA125D6DD423540BF165D
4AC10B712825A46A68EB78AA3D2C058488C29EE7524E942C90D9FC0115D85BD7
B8DDE271A0D13042DBFDC1FCE6C5279097919A2254314FCF21D618A11C8FE5D4
0D30BEC350358D62B7B015A019679B0B8E742902AAFBCF4D4AC975ABA0286FC3
1EBB7B819AE455CB993EFA453C94914EBA348614E3850F73A8B2C5B0AADF8AF3
E1CE6D032BD2BB1D80CEED73812B66E3738E8F677979A1564BF38BDB031830C2
A5366F8716DC33D8AC9B5BF5782FFC1FDCBCA6456FE76D34AD5D4D314FCC5389
84EDC70C0FC586E3FB319F985782FFEB05794CC8977E665AAE5AE150D961FA70
CCF2A9568E3A47FF5923031E7BCAAF3A0E143415DE40C492F1036351910FE6B9
3342626EF819845D63ABE36CC2C0C7204BF83B4F7349ECC5BFEEBEE4CCBC754C
D04E4FC6B1E3DE635362BE899C415584C1F2BCCD0BFAF40BD9C5A8652C95246A
640E9625BCB3CB6C9D0F6AA91AD38D69132BB3CDA70EDC5342656C12DD50C531
6C548AE06C27913E3DF2FAB630C7A12F545533847B233CDBCF7C83ACD62213BF
6D8A8C77FE8B2061655020DC0A92111ECBF02129EE8DF16E063B7BB9D3460685
F19031633A7155A83360304FD4175BBC50F3077109A450059DBB3994AD63D63C
43278C28FD1A4F07B8B0680809F32670C2F1A54555FFFE67565AB5DF23A71731
265FC524075ED47DD6FE8909C387D8F02A88FD24540AD7195A850948F76183A8
47F202D77815ED3E8E7869950B26B528DF4B5AB8E1B0DC311FD77D52210EB207
3CEB06E5DDB36E5A8032FCE0B50CB70D4F7E3E5272E57DEB9A2357403C2477DA
990FC58E46BB65AB0676A40A8130F05B1B0E50E6BFE03965204975859AAE67B6
7B37AF86DC4A75FAD4A862142B7A895F9DB67F41582D0C817460440E9E04977B
DCBCAF0CCF5D22E677FF4BD649053FD293830C4EBD3CA5719BB456D1AB80B6C8
0C550CDEC09BDF5FCAAF5F4DA7743A09AFECA6DC807448B48C85E46121054F17
F4288E56438EE91BC7297A8469F567938D322536CCBABBEBD4A514626C26F052
A95D65D942ED54E36A6C2C3BB0D89232567FEF3D544A8F9B896303A47E29FB09
B4ADDBDFD0CB0D5516F615FEC677A6D52BB7D6B0C6BAA0F25B2A9F922A4995E0
83622B36DEFFE1A6AD802B4FF775B6DE6FF9635DD8C6FD508F211931143BA01D
7D099985E73099943D762D20ABC42DFCCF4ED0E151DCDC6D112A08E068177852
1870E80CEA2A87AAD5CC5FB7E9D3D3D31B8637A7FE55DF98DCBE9015D4A4D35B
006CE68B3D19FA3B61A759C707BD7DB9FADF6936E97D67897C643267D9CEB295
39BDA71BBA7E79A8A11520BE2B47FA59E78C28F8C83803992132E16AF8AF6D02
B1B53941ADCC68D6220A1C15988847BCB5B01B04F5C3A01B3BD2439367DAFF1D
47B7EA53FD3D3ABA9F3CFBF0C0DE305E7AD2C9014001A032465003A5310E0401
6C3AE50698C63E3356C89EDB5D5B8AA2D56A311120976314C02C4D84CA61D0D3
F0C0E7EE52EC5A8A0AB9A574039A5B0B9E2065FD7490C7AEF418EF47ACD12550
68A21969742C55D97F1DC437E05F76B3DC275C95EE5FAF3A6D876536B55707F6
850492FCFC8615892C4304686401B0AAE619F7F850A966E7BD19641F47A05F49
CA2A65E0A3E935AA652C0B7305FFD0D434E7C0F668AF758C46B5E53F46EF2081
22D8CEA87738923689F96FA3FA86AA4C503C7CA2D05701B6A0861F56A5C5F8E8
DDD7180F306DF16E79A2D2DB98072CBCAC6DCE622EBFF358E63D9F6000F11FC2
357FA3A8BBC91CECA3DEBEB081964C6150ABBD5B3A4B88B8F2141AB69CBAB904
43083A74742E895C8B2BB07DDA99390B706F0403DAFC454A30381E07F915846D
BCB2C690161DD5A7476AF4893C6475A474561B6385530D40BAFA9E409C73D39A
BBC2B58D97BFFDD887380109216561C53A75A5FB859F2B46DF97AE05915E791F
1CE849154C53C4403B43AFDAC96839397CAA9C23D0F483D155FB93C29415A779
57BC905B9A03FF4E214C11868573EF080958074403F52A37C14EF4FE416F8FB3
B918C454BD5774AAFB265AD654FF066474763370EECC9E1E60195986EB4C4BCB
3CCE9879E4C129CC139E86E1BDC3F13FAF7100C965DEE0BC29EC531D24870365
A38AA8C5EEDD3B4748251058487B73E9760C57EAD7CB37952D1A0E9F744FBE80
41D7F80AD445AA4B08E97B5BD3466C6897065446F7653445CEB58FC5DE5224FE
992AE7CB66C69DBE7886D7ED3F27C3617B84B6EAB895BA6138753EF23A95D41A
8069B91AD6161F18BF75E71B5B6E7022B99AA55C94130C7A4AFF9878DCDA9764
F56EC19382F2B86AD651CA2B01DB899DDBE0D0A526643E1D0F81D86CB8595D09
B1A874789AEDA31E71A915FB663A04001D43A504ABC776456B69DDC90C6D7DD4
C2D071F1C8E049E657F5F14377D75506A96CEF9417BA30602EBDBB815DB99556
9B3E9E6F95C41DEE629A189E9D5FB2A75DD37A909F53C828A653E838F10070A8
A262363543F04DE5B6F611520DA4696FBB73F3CDD7BE198EFDB35B3317308967
A00EADA8A54DD0385F305D14E32638D350F86FA328363D1B4FE236DDDD5D327A
B239D9D6D92DDE4B0DA61C03BF4360FEA49064FDE911D77067C20C6F31801F82
3E6B21EF61C7E869CF3B0AF9B350452810F9349B099A38501F2314DCF08578A3
0A60020A6B80A374C5060D0F0776BD7EBDA80080E3B3FC14BAF82BFDF274D3B5
576966137E9F90AA3CBF50D220AF7255387FF65A63CF2A927E5F2D7313EA2C56
10209DAB5B6A9150337127C6068B9C79A4AD5C1991F7977C9EAA35431625FF8F
D008BD4402918043BEDF77B840B2BE0E5594243F7D9FD8D8EB4A878F25A58C92
0D0FFFD6FB602792243EFB20D792FC6BA87AD98A0BAEC9D3F17AE9CD0CDCE693
6425CD45C0A5A4197BA038ADB36BFB0B0C531E479A988692F0931B645389DD9E
EFA606C7C16504F882FD78BCD95862F2884FFFA17C26969FA7AC28A6FF2DC4B4
7B3B48AB7AB10734FA0475D4AA4CCEA042816BACB5C7A0775CE1A0809D5C2979
D409E4D68BB6DFCA01368E371454CFAAED3C30CECE4FD7CFA6E4BD0ED071182E
6129ED82B2F9D5CB5D32B93F2CA8FA546DB1A5A2BF321AACF862FA731D18CF33
BBF61F01565E3C825B0D6146CBCF1454CFAAED3C30CECE4FD7CFA6E4BD0ED071
182E6073FEE4C6B0BF4F58336B495790F2A96F1D10C8EE6ECE02DCDCCAF5DC69
E296AEB1A806F0222132EA46587E2AEAA3B904112140552E1280DD31317A2394
86A2278F0FE2AFF4DDD78DDA83C237AF564E874A8CC6004D041C55CFAF405F47
77D344C4ADF44538F045091160DFD4AA29DBD79382F68E3993AD0B93A7C03D10
20B9FE9F780E3D55D993744BC84E03D6F2E5A5B2796AE96053CE2780DC7750E9
7BD02496F62FB0778169721B3F1714B1B621965F59F2054FAD9A3878CFF50032
C9215ABB00DB8951CF82013C7CADDC2C3309492A3DB33F8E9EB23EEB04AC45D3
4A294115CB01446379D93A84DA7DDE692830CEEA2D544889141651A5DEA6262F
D54F422E7F9553C125FC3B9DE248268FBE788A4214863168A679D4FAD134E4D5
6178F717E6E7FFF7B1BFE2E98D872573C86536F65E670A06A813D9B83BA91C2B
1EA4B102EC16763EE0F5092CA5030AF4FDDD9069BEA6501105C9AB89E142758E
F9A36F77FFDA9116B4E8CBED2FB8719044CFAD402ABF220653833437ADBE66A5
3BE748C4E76934D67AA367955FD34BB7546652435EE004F57D417428F2ECC729
EFB3AC2543BBECF09337AC26BBB0E45CAEC8BE479279364FB841F44BCD49BCCF
B65347FD1767DFDB6F85337F7B399827B86434053FC7DBF813A96D33773AACD4
000D71140AE06EEFAAAC0AB3727E59F1642789A1765F02944B8E689AC7626485
E1467125B7EB3C9EEF561001051A26F3196E2238683140701ABBD926BB41B1B5
31E491065D57658A2845522035B2875A44EF7DAFEEC6B06D7DB4B3BE25BB29A1
BA5921AA479B5B48F87B63E0A3565639CBD91D4DB48EF838AAA5C53454E279BE
24D3DEAA67D8ED7A01FFCACE2EF9EB9AD584935A58676976DDD2B6E118FD1D44
E863059495BB77FF54F014CC293B27057DE8158DC15E40A40D03D5DB93CE19DE
B7C60644ACCDB4EDEE8DBECA784878F4D0643460EC9526C92A00ED348D40DD39
B82DA68451233CBF49B756D42FA0CBD862C56A5046047DDA8F04FBEDB4CA29BC
51FB2BC0C62CE1B3FEE159A7BD1F296CD053A5C735EDC975CEC40A46F5AF536A
3AD35E6AF31702C467B05AD7A7A7BE352CFCCE52D9325C8BBDEC3C3AC8E233CD
F3BE813A9E2555122B46A03394E8950F77701729711369CEDDA424A9E19BED13
D137DFE3F01D46DFB92C897D83ABBA76105BFF7E7929B8B36A0F3C383E41D33A
E8B2BDCC9705D1EC8848293ECD9599CAADB70331F694CC96CF93B817463535EC
7FE247A0CB0AF5CD770D3297414ECD1FEF73532047FB1478F8554CC724500DFA
E395E68FC891329882A2639575674B2A47C068A119CABECCB9206CBBABDE8C4E
5E6E6B61FCFD3C2BA11D6C86EBF5CDB65E8DFA20E2077404B83803AA3A4643B5
F81E0A22131DB04E222FA8EF0F6A31B9820C7AAF7C7C9780FF5DF5F69DCD8FB9
2B332FB6509FC3FA395199F80BAB0C5F04DDB4B27952C3745B76EE5B168F047E
593066E242C394C0B30C2D8210846A85A5E58EE0E7270BA2C6CCB305D9C4587A
C495570DF9C4F05525921AFF53DAF38EB59E0F97561179C2C0F08E832E2DDBE7
C66ADCEC06F5567D31B488B661F8C45EBD2FB0F0EE1D4A21068DDFB24433BDD9
1BA70E84115929BB08D42023B94C5E08A7C457F254438F234303E15D8F7E4DE0
09307129C044539DEB57AA3DBEF8671AACC34F3E4C8B7F07ABEA1BAEB58FFECB
7489DBD42DC2A12028ECAFDB6CEAFCD1246A7E4314E83E34DE35A5260384175F
C38213E84E11690039F50C12725A14BDB45D92379CACEA43CE73C4B7BE0ACAC3
35EDBFFDEE3E46DD584F04936B53C3C81CD9E76B3AD9F8290D5915969AF272C2
205E542ED8737891E67A8F5DD2C3154FD5480E88E9BEEB2499BF34A46C864A46
97B0DBA695DE4E68439B79B33FBBD44312EBA9063EA631195BBA0DDA3F3F7061
C15460E3C1BC8E20988FBC4701BFB8BF3EF2C1C6DB56FDEF4190263A01AE737A
CE2AE4620C9803C3D031ED3D5783185B69DF809544F529194D26EC7B74F1E8A3
69DAAB3305C440A686E566386C4E57F619FEC839F4D48736977F5B21F6961C8A
9ACF420E7E30E44365D3319C2134B46322F7EB16708D2BE2CA02AB8E0D0C3E8B
D00B108257F92AE1869430C6DE57F020DB975DDB312011F19F94F8BD632589AF
0FB8C8BABC8055031363EF056B5D65444578CFE08378B1DF7086315EB2163A26
AF2CEB9E359BD9E5E92EC8F6A19066B51C2FE1678EF11064986DDA53A77FBE2E
DD38E22689D398BB3667E4BA66F7844A77BAEC87EF5053D888D6C101B6CDE17B
92E526BD45A921C4D6D0F443215273F91C3DC8707547AA2DEED29B985455F21E
95225D7DA4780BE7588842D575C429AABA86C5E24DD1A399C71785CB889E27F0
BC2DBA726B307A8EA9890962512B2DE3CC959848E590C4551EEBA36E8B8DC122
B1432A6BA9A8A674CA2D5F3F592909AAA8F44A6BB4A34F1C35114EBAC0B0F263
ACEDDF61DD3D0917C1539A5DAA9AD34E7134BE594B65D76B173700867E2028EE
56949E915B81C56CD5055CD7F5226685F558D0EDD67F350C9C4105F867E2AA3F
10C3D706339772D69BC62743F758B67B1B1C6FDF84C9B2E9E9B298B465EADD6E
0378A1F7D1A254FAD9F125B2599B59AF47877A82449559F4602627CA0932C2B9
38A071A719E64DD2A0A2F32C5D52B15F9621BA9E1688463FEA43F7297131115B
4AF2D9DF46E1E5B36E223885BB7E1E8B28BAA3232595A07CBF1BD05B68870AA4
FE5CEAEFF2DCF00526FE36A64F79091E373D27C0B88AB5F039A24FD0F3180EB6
F316B59E7BB99EBC7521DA5BAEF8AED3B848E230572F14524F98584ACA795863
2CECDFE1ABA0F78067D00115EEE8DEF5E7410B896BB3E651A8C015BE75966177
9214401C2C0A05FFFED46A72C245F7529B8EA55A038A8A1E77BAE6D06BB1AB0A
EA89B6683EFB7343EA55CD37FAADBFC6867B4BAB0208DB3C5DD474D8829CFB02
6CD35422238CB8CE62255BAF0145692EE3B52643A0DE3E672F294230B9826E63
22C4D6231EFE10719E907FECF47A5C6D76E2B23333ABF27FE159FEFE89CA6E88
F43E2C8E5DDCCF48393E530139BE17DB6A1EDE43613759B68D17753A29357D3C
3A6403B9A7675DC69ED861AA0478A60C96485883BD24D106382A82EF4900A178
29C8A8DDDD4AE47E5F846A44428053C6C606216322B5CB00EB11973241CBF09A
C718F307E80B29885BD8B971C8670EB6567ACA29C72235C37392697AF95FB4F1
AFD8CCF42255F331C4FF7FD0FC8962530A98376BD26C39075D9EC1A987B85615
7952F4DB65684D6CD4AE246EA88B6567C07522C696589828D6CEDCBECA38F7FA
E8C1363A6CBD8AF8B8B82AAAD74A6B73608413B8369365B495E9EEE5FD08FD42
4F1E0FDFDF3F6E03A90ED01EDD1A46782159CD55630124A2A344AB66411C9853
1B2CCBE9FE78BC1AE4D4254787156300D914119D59CE53AC7B8F718013E92256
1CBF76BDAAE575B67C26D06A35A0D394EF1A332D55D8641DE53700800271FBCC
D9DFAAB5E93F903A8FEC0119ED18B7C08EAA7D1909D5833FAB8D6671564F796B
070A2B371E3005BFCF09E533CF65B356A8D902BE94A449C5EB8A3B63A4E70BE9
D053F69949A8E464ED478A8E037FB1309B7A6A7FC778190DD5AEEBEF9B6A034E
133314CB5127107DEA1344C6E44869135113CD900AC1F0F5F458F5034F43D570
1AECD409DBEBF0C9E95509BDD99A537F5C974FC5505CF6EDCF2412B0A9382D7B
9B373257AF837DF7C393F64BE99AD5D15052BE4101EFA8E39744C2315DFB588C
F4CB885E940AB179C9355CE53FBE5B4786920842A92DE5D9D36A9AA32C283B25
D9E35BED54243580FCB2E61F1E46873EDDD6D5EE7953B988399A6C9857B8186A
1963F7B741344010B345394F22199DE571B5E71F57DB9E12622E4A7A73B41920
BA2F51F6627DBC1F119BA6B22248DA2B391A8E87F2C6E50D86A356603A8642D8
BBA038A739145A2BFE6D055580AF134B7DDDBB9BAF94774040A003EDDC21219F
392DDBEA601D6DDCE7A8645953235A1B19A9C0B0BB98EAD3B5ADABB830C68513
A5DFAAB2F6E691099EF8CEB0036F32181F4A5475392B4B1F92B247446CA5597B
EAFE42535A8C88F9F1937BFB87FC8AF3376A38AC8D43CDB3A383FE182EE89A49
C28C2D635A28DFEED16CFA4D5E4A384094A1D84A98A21BD69CF349E99F848A4C
95D7EB3F7FDB5E41BB1C0A46FEF16EBB0A9052013A587AC9523706FAB55BDEF2
D9A3B50D9F5293BE9660E920F82C8D6C46CA36C01CECA219E2EF410CF4A72DDC
3DCD6254C0BD756210F38F01D757B83E2090337859341376112BE48FE6BBA3D9
D06A0C77112AB99ACD73EC7A7C5FA2A0EBCC7E875A641694AAFFBAFD9547DFB0
345DD1B984860123DB51D12DCC5FE6AE3B89F87E115F5DF7BA4AF93B4D5944EE
FAC690FF1C17DA3D4B6BCA8CC6A2941732B8C31799B4E67102E1628592D5D67B
C8114CCE47E44D3355621E4291E8B19372375C5DA4CF8BC684D59F65F460EA1E
5927D4524FCBFA7625C922AD1FF0D05657A77F77AFCCCD82CFC289D46552563B
36DA5DAA33C9BAA665D56A05FE6A270625DF8ABA04200678179BE71EAA84D69C
E8C6203A71CB424C72AF75C1818F6A18C9038E3BC1299256E1D1E4EDD740CB6D
461FE1CCBC3D60567E9D3EF7181B20F534678934A4362DB20B0C8089BA79E701
707CAD347208550DF890CF5924BC50D349A73787E125446E5CCB325BF943C3D7
F32D49651F5744A767707EC61AA529E09D262A841CC9C1CF25413ADC7FEBB158
0922A191239DE0D26635EF19DE46063E625CE2919ED902D587BE6EDD46E091C9
5E57B5C19979E675BADF2FF5BD15F19CBCE5F93259A6C4A8CAD50B9186BF1464
B59A6BE348681CF88CE442026AA09F828E59584BF2C4D75E749EE3C9A2EE6055
14EC228BB66A22545962DDAEA5BFAD178EE10572D29BF719BC6C31CA404A9C2F
3980136B4825CF63C13B40CE21656E37A0FCB6836AAAC07BCFBB26B2A8CFA3C8
6296F768E749F3AA8A56ADCC26A31FE2427FCFBDEEAAC67F14F71B450BC562A1
95E9F1CD42E7EE23AE4194F920986C6CF3A993077C0B2501E3E95B9672042C54
3338449065A454F82E6DED15B32E690092EB2420B6D9F5E6FA1855513B7131C7
A04B00038E4F5E8E26AC74EE09527348E31E31545F0FBAE0813944CF1A81EE3A
4373691772A120BEE77098BB898BAD2174968488B406DCB59972FFBC57BBBB49
3F2C1B5C38F173A377099E99F717FAA635DAE480F40B36D3154B85F978280E22
7A1245FDA84738BE165A609F79CBF49D51AB8BCCC1A672B2BFBA84A84C9BC409
3E2151EA61F538857EE9787034E207FD3BEBEFF03973685DD97F036BD60D4E32
181A0EFAA41BF0A7F27D2A274B1D654C2683E8F0DF6444233BE72E4B676F7A21
1F72225DB3DB146BDB01C7E88F672F6E37605D7BE1D821C67C6D1B7D6DE18064
541C2185B57B67071A8CFBB6CAC323167D9D96DBE2AB5428094C37B2C25CCF3A
F3E0E78A42FA0F970C9B27AD62347BF02FB21503D2FBE78C1B07A8E09A3BFE3E
B5A5B70EE00D8ACAE49BBA679D9E0D06BB86BCA7E5FD3881744B08F6CFFCB789
4DD565CCF14EAE6264E06D391FEAE0D9A6426BF0FB5A606F7A211F72225DB3DB
146BDB01C7E88EB07218D82EC626C936209AAE5D9735BBF8799A87D12607D361
FE8C805163A6957DE6AA4AF7FA6963E77AC9A423F0333E981166F8F5DA8E7B44
48DC3FBB1B774C324AF6862F2CAE2F8B6A8DB26A1287AB3DD941A92AC57A77E5
046A4A17B5C3E9DAF063B335EECF830F146463EFB387A53F157BD60FAD744915
3823E9F7778158B67FD318FA6BBEF386127BBDB53D25E68448A975CD56BE0A96
A497963436F1B526B5A4CF3AD27EA5CAC1BE4E5AD2BF141E24BA210DFCE1D138
8FDAA040A900CD88D739CAFEEA8361B68F6D0D6E11B3FE268772307DC168E01E
794A180B85422DD886BB8C53B28E48E232FE7D29562B3B0F2F3C9005DFDBC7EC
DA793F537AB616249B0358EEE0AA25B669AF5703F015A210D9182678AF5F984D
EA53961E820CCF73B19653C3BCCAFA1AA748409D3C1E1A165DB626D27AF3D0B4
525D7DEEE210A4239DA49D23EC2BB5EC926970D31963A81F3099074342B9F995
4221EF653D3EAE803DD1D270D5456DD52043ADC089C9F1CC96E65C4341491984
C107C8FD9285F08FC3C879AE6D42023BE0EC35E3584D0670E527BC95332D13B3
980549FA02073BC15B155E044D8050BF7C551651FF922639E5077C139E3A837C
35A8D8A8E583D3B87C35933A35DF08B512C2ADE26B7A2E77207E6022E9D50B28
2B1284DD9EA66137C2960AEA8257076676FBC638F830426328CF13180FCF1524
2BAB9381F5E959095F3F1EB907D1413F647D905576F1318A0DDD5C6C2F44BF83
2E4D54880BAF264A44318843E37328644C3FBC75583A7943ED882DC2C6ABDAF3
8CAA2B19A756CC045D2E919084C7D490D88689FC1180B0D18B9D406A0635F4D6
0C3D5A5D5AA54D4566C36A1DE47C68F80E54D3E6F6B2BDA855EF11E75D72EE35
A7F1FC8FDC81666C72993BF21DA93935F90595BDBD4D274FD42F121A21B8EB08
5BAB7D12B3B5F1AF9C403D65CAC4A7A0CDBFABDB4D358E8B8DDC32EA172A2DE4
E8A25320223B96228905711E015CA1115B60CDC9EAD5BD6FE180816127DCAB6B
9C8810A52BC5F9674D286FD002DFA5BB313F36A362D3FC884E32841E6BE12817
A12E65BA65C7CE66AC6BFEEAFE31C8A721C2D46AA00C10681BA9970D09F522AD
91E52759DA17CF323880E5EE7E183DA41EF7DED6C7F61AD6925321D4DD76E461
E79B1CC4A0564E9D7A41C3BDFDB730DA86C9CA2049211DFC67FEF43680759C50
8FC6D79481D91814C47A0A3BFAF7465542D6822F564D169726BA926E6A7AF094
A1F9CCC08D01256B7CED1EDB959E1D48109C2E5D22864BC6AD983C2493CF1748
613F298E07C3D70161F0724055E78899DDF3BCC34D14196CC4BE07D3031D08A9
591029380209D4C769FD636A4A1D08039889DCE822D58B48EFD185C651E24ACD
1D0A7FFAD264D2AE5F9560C3190AC388C4D02E161B1383535A429D90276FBD02
0EE4F28EE492DADDE9A7DC2F40FF95BAD9A9C17907788ECFD84AC599CF9C38E9
18B17E14F8728BD62E45FF52188FCA5ED5CC9D1A8CF9027A5F84AE683086D34C
EEF0FE8FEDE01A7AAD5D667300F07CB0251E2F245297A4BA42AC9083F142DDEA
2183744D33C42E540ECAD829C4255C893F7749C4E7B6796855E211E6751305D6
9561508B1E19EAFA4C676576BF1DAAEDE320A0520B3B46F772B5E5698FC7DBAF
51DC2CBFCE0781919E031A880E3767D8880357E5017147E5372F54B764A8DECD
0CE7B6FFFBEA22D61456E974626482B4C2BE49CDD56BB91D4D1DCA305FD1D602
269C73C8B107D49B98E5E0C4E46DF62197B85088749F3CAFA40A6A3223D4CED4
95D2E481273DF6CFEB55341D3FCD1B53E15238A93F53D2E881629E37E9038CEF
C41BA172055892C47614A9035E7D8D6115A4CEBCCB7E1BDCE1C7CD54907F2ED4
CB1E9D646712495E7F26989BF6328610AED78D0AC8A6526EA144E946A63B5D92
47DCC59E67DF990210DCA0B584944059773DE69E1FE68FB06FBD58BF563372DB
D30BCB727C36153A1E8F2E42D4D0358B380BAE915A183A8FBFC7A569BBE3D2F7
F6618C375D1EC39D0B866481D723779B3781C52E3E11D3AAE27591284292FB1B
F22EA7654C2797615A7F49FBE31D6CC6B63FC347F5E8ACED4509C0A4F07878EB
7D8E64D01390E9E92FB6FA21943BA9C3AA45E954E7F6CB68063B65B26A95C303
711943DCE9AF05FCF282BB8B94E2244B800EA15AF8C16B9B8329E91644DB1EAD
A03E2F74D9A26F35F91D61E51829D31791F1D36CF69DA3337F945275CB4A4692
393F561AC3395F6D9B8AE4F9CB71BCEE0AADCD191C733C695B8DF0163FA0C03A
3234BD65400C0D43F4A0999B39D1D5F9EDAB9FCEE3756BC21D32B49D0C265EC2
511211833F8C475D7BDC3959C33343C76AEA8C43CE8FFC9D1AEB97BAF55DA23B
2FB4A86C886709387253B0851D0ADEA63D9D5B91BB6B95C298D1E77F1CDA031B
D6C638971FF77622866062969131FEB0AAC8DA96F7CA93B7288B2491380B2F4F
87646F6BA4269E6436524AA186982F47DA47525569C373B4B066BA73F9E3FA72
97AB17B4D2307FA2839FCE196D5BD93BED41582931E78F5416F58A9AD099D024
AE7F293E55725E48A97C62B5D90F48DA5BDB8D01BD0DF36D531892BB3AAB55C5
3D979FB64C1924B9A869DFD9A72C83D2DE423A5AEA2A9E72DFC04B7B823C551E
0567C0A543A4B01D70AAD9B650A20BAC294E4D392E266D5F57CB4C3D19DE6FDA
4BB449E97F6C22EC02CE64CE9F9DBE52947CAF49A78C17F38F9E167389023CEB
D2F0E3EB90F50FD11EAB33A8CF611F0AD7E9C1807ADA0EE65BF63372B9182E8C
E9964F169C29074B680191367ED29A5A7FBB4EB2423B73BF347B4247FC0D40A2
C3CD57E796482600AA5E73A63B50D4E8774D50DFF8486F20890332071C3280F5
71B7450BE821B91FA306BB15DA5CB7FE994C3506E6C02DD94BF37C93A17263B9
F0369B66BA6CE4410896ED9356E725FD1523F5B849DB16DA76D4B6E47CB8C03E
730F739778BBCFCE2FD2B999DE15BB9EC58DEAC2DCBA40925D29B3970E0582EC
823434BFCFE218A4B5FF0264F1EC9818FC87436020E36FF2D28374CFAD56A12B
00C3D409420B491AB1B0D595041D0FC126AADC040D9212923F8948E5A8CF7FB7
E6E3FE51870FDE1C24DD45E854C664AE533D0F945638E4121441ED02D5DA83B1
A7FEC5FA6E23A2EB89320FE2FA7297AB17B4D2307FA2839FCE196D5BD93BED41
5A8E97423A8BD29076BAEC3567CD7EAFDFADA9448F1CE2AF347B4F9354DC9006
85CE73A8D5738C2BC3A5CAA921D9A22BCE7616FA610E4B920460316C88FF71B1
04301CB90945B9CD7B18C88E1931B1D04524CDC4DFD91253C98897423A8BD290
76BAEC3567CD7EAFDFADA9448F1CED47FAE296405CA92AB1E898987F8990C685
8F1F6813E2878A429DACE417CECEA2D839810D562BC8ABC302119B717A0C119F
C35E435A69079A46C84B3CF54BAAB62E1730AAC8F75EA67125C72A4E324619D1
EFF42E23907DF6304704446D3A12157DE158671515E8FA0324852EF8AF2E67A1
324B65EA61E97B2819EF932341824C215702B432B8806D34BDE286AF78464D9F
BF4D80433243428C84CB94A6BA3C7EE4290F0D898BB3E404CCAA91FEA4E8DD46
98E1DEA814D34AD1C22BF3D7E222146343ADA948C30D7E7077C518B22888EEFC
64BC1C8D7F7111693805E92D4C6AA42C40192634B360C4D9BD88735ED4D83C14
121B5DF384C3FE28C017EAEB5CA8EC4897901FBAF7C89938115844FDA9A2D92E
CBCC9770D0132628D7CAE18A95A8FABFA9E50EB56E29C78C0F5026AE72E09208
216386917F074F5B3644BB3F93D7F96770C73499AC0AFC39309266C84CF5342B
479A465137BD820832EE94D79A89C21EA9A0DC5A9EFB7130EE72EB3313510EDB
1DF48D8CED92810D3A39848C4AECF40555C99ED63E70A93D368F935147AAD5F4
9FF530E9B2BD87EBB101E1FB697AD8FE7756479581DEF6C117C0FC3E2F617807
E129EAF9B119FE404AA7BA57A449D7BA28B98B743C44914DBD029C44650356FD
F8ED6D2FC85A9073185DAC6B1AC95A90DB6EEA8F861E7081B5F3781AC83D1C3D
AC654D066ABFBD20E39216722D7026D65F60ACEE6BC75F7E7AD0E48C13FBF90D
B85389D4204A70AD659E36425F3228E761F8E4E1850518F37C8CE316534F9D10
BACADCB286AD0869006E86B769E2561ED24B20C18F37DE12366A68E4D42CDD24
844FF60399B1F13134A2AF2E3C527BC7075254D2E380A2957AD52B6C97ABD91C
8B0B6BCDE6C2B5C1BB5E0D48FAAAF43FB71A655DBC45132012088FE46CAE1C9C
F683B85287C376458E1B75CF0C93AAEAD9DE6E03331861CE3CCC9F645236B955
80FA6F87DB2E38A22DC936ECEE11F4A8D116C1CE72BF100976571F28DBEF1EBD
9B704DD2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols8-Regular
%!PS-AdobeFont-1.0: LMMathSymbols8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathSymbols8-Regular known{/LMMathSymbols8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols8-Regular)readonly def
/FamilyName(LMMathSymbols8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathSymbols8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-30 -955 1185 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F035757560E05960E2C327020FEAE317
24C484AC0CD3C1AB9CF35516622A022D6CB83DEB8126DF04762C901617B35492
98158049D5C65DE86143B7F36D36233A115C36DF60D3C55816B2B0B341102AF0
90D7D4E00A7611262CCD366F870F0EE8175688261513076B608C7E160A9A79BD
2B66E2E2A89CBF6D1703854915ABEAFA09718FE338924B5AF1FBF1209786AEB0
0026C38A2C7E208E6C306BAAF037DFB0F3297EE1ABBA65247CF72D0F78A9BC24
038966CE124B94487282B69D6BC0B5E17441DA55415B5369E451E2B0D705FCAF
3AAC6DBEBB8AB0313C4C201F851DB96CA9EB49357C3C1AB73F0CA2110C994680
5AC8F0D760C03F71C92CEC2E1A3AB84813D389BEFE7E0C28FC76FCA70704BC4D
159EE8B490B95CB09DD01A4122A686AFB8B9C69381C8C303F9A3B695238C3BB4
CB44B3BBE50E2BAE63796BB51D945469BB75C69F7A758180B77CAAD2CFD5951A
23580A3D45083C8368543DD37AB49705B939804C12D4BDFA730845F7E42A6C9A
B3F0A376F44DC297393B85E8A18C45C99260BD499DE599CC0D76EBE4AA7D70AB
348FA87CA9A1000814C4FA99B4EBC35A0298AA29563B030707F3EAD9FFF7BFB8
3B347C4A00BFB392E79B79F413E67A73FBB006EBA896A65CB21BE940A0940640
34E08FF806A114ADD3FD42BB394F76CC77DD869C46DEEE20839C9A2FF73B840B
0ACF238D333719F5947DD4C39B8E3F070EEDDA1A39D526319828FA9F47F03D8A
245D8E215B37959566D26DD98185223E4FEF01676650EB4E26C0A425E6C23C50
4BA94BC88E08614769C017F6D4F14C52D7189D4AF8CDA367D8B04CA8D3F2307C
0A7A179419A80695912F456637F539123745CA8E696E250E0BA6B7C6277394E5
98A8799C29B6272613C152B0CAB05F3C7795791EC9AF2BDD416861A3D13FA858
BCB6ACF5BDE40E5DFBC1A171A7280E8FF4AC0D4C8A2199E9E2BAB5CB9131A76D
EAC166A7C449A549EA5111F1750CA2C6E1EC6F00CB6C62BA52D17FC66E06ACC9
1E6B858F9393AF9AA5E69F799E01D301B647DA57225C2920E3BCEE9D09CA5C60
F22B07F24A26DD8F4D6F9C78BFAA8D12A21531E713B80CD03A5FF4F3BBA2AD82
3BEF7DA8C97C30F1452006AA3B1A168483F6EDC4089ED02E567923AE6DBBCCA4
8C246A080448200C2A29C34AE6255BC79B73AE14B980A7C357681BB0962894CB
DA32FF2B70B21AF4D158E0F74652684A7150D0967F83E13EBBAB33588541AEEC
0DE8C53851845A44FFB46A93CEE3E8A0263882542F7F103D13C367EA8E1ABFAF
6486A9DBF6668550BE7858F5790BC87C66492C0FD34DB08EDF842E1AF58A09B0
85A9B7FA402029FE2439769D67DEBDC8AD8C861E90E5322951A2904FD702766B
36916DBA8F9C96141BBF4788FA435556B2B4E1B37DE4506ACC4224CFC00A8F83
33941A050B51B9508758F4EB2DC074D799F5116296B8822ADD743A043F9A6426
88D10767A9F99A072BD4C88CB579B34687BA4953B96DBA29F33211B12A0215F7
5F2F873E5074A7D593DAD0EDD97270FB9A87BE870321A49958B10E3353D075A1
E740C054E9AA191CC6A2B8E854AC7E02D6C53ABB1608ADACCABE3D5AC2F894E8
5E234F72A1C099901DE1E49328D413CEE1295B615F37F139B70238D0C3177995
99A49939640D06478EF23B0FA6C4056FC2D15FB7976D3ED682374F415B8C958B
346537C424D9503D92F1A4394FDC74760106C5895DBB7319A235C0E0313FD6BE
9382F72BB38333F6989452F4E2531047C5663D8B74F6E519395002D61953D7AC
9041F71327F630A452A036C4E06CA3653A9C0F06A8D0134AE67F2D0C9932ED94
63221E7FC9FA156C68417E3220F5885685F46B3FC45274FC345FD64E1810D1E6
2F552FF14B5ABC4263BA38768F4316BF56C2C97A106E296319E528AB821C5027
9A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4A2DE9AEA203B209385B88D9E708FA615ADAD672C6
BE223D5855C0F6753649EFC00A7683A9EBCDDF1610B2D942987DAF090BF54FD4
E7304082BF34EBA0169EC3F6190879D5D8DE05CB5C6CE7C2212251BFE8824A87
3A277D0CE8C588611AF4987F7203DDCE93170428CB54EFDA16BCA73256C1FF85
2C85996873C9487906AB70DAF5E4FF2EBB5C7489358365EE072EB45FE7328E73
5D241828F39C98E813E0B142027DA0842BB3BB3A4EA8DE8EB34BB81AE7BA9B29
193A289A9EA7EC158512A268417204F047097E042BB52BDA0AA3ED16B4315244
E3BB451A99B211EEA2F1CD0A5709AC8CFC3EBA9A0C45B48925B43CD4417517CF
6F42243C234413756CA68A0F125A0E7C1CA1F6166685C3FDC27532C931AC8B86
E81FB0223686025707E5A69C6BF3D0C6660E636D6AD25B03A44355855B2712D6
F84E63A541739B3F161891F0FEF72180DA1546675AE16824DD84B6CA375598B6
C439A2E90E30B7AF6043F860D5D548B166C25921D8DDAD3398299D23D94203ED
FEB2A8899B078698314F08981397316AEEDFAF486F58FEF25284B5B5618A6762
967822C2B91D421D3C8CF5D76D071D3748C32BF1C779E9131603E8C0EDE2D696
E60DFEE5F15D5EA092DCC4D49B16373FD58807C44B06016EF5E2670A911AE147
CC5A9756F870A1716B4DC3D868BDE539079576E5CDFFAC34E165C063768ED394
770CF07675657587CB8A56596847362B00E9728B7CF7F5E85673E4B8C4F424D5
94F93A6861828F6251F206B9131C951D1ED4364A9CCE5383C0DD92E3E329CFC4
E2B36E704F5A2E99A7CBCE624FD99A6A452BDA7CE29D9E0AF72F0AAB66DFBB8C
8ADD16BB65D88A7AAD93961976DE90E40187EA775CC79FCB6654FCFD2269F2EA
7951C85F49D40AE4D7D193541D0631D347B191536A6557B5B8C874FA44E71539
3E6B62F58F9D3B055E3CA3FC5F586E8D1B006E523AF961E9C9893E8D65DAF13D
26C24BC276BC5F72AC1343EE49D70ECA4F25F58B6C3937F7A3D8165EDF4C74CB
B662283EA3FB859F2B46DF97AE05915E791F1CE849154C53C441EF100B3D3F74
36A5F496503A3E108CBCD7AB1104D13535023D5E0F563059F9959F021413C8DC
613D035D69EDB4DCAF6F52EBA08FFC62384622982E88BFC0C20B422D4B14971C
6890397008D96737F48EEB999FCC8F26AC74EE09527348E31E31545F0FBAE081
3944C8BDCF6E32FA15B53C70BD06F06681193AF93A55066E8345D531472249C8
FDCE5D2CF3A342C8C3E0EC7846ACBEEE09B1C6048724F4AD47323294281412E0
33B051DE4B5B54076F7EE652220C5CD20A575A917C9E7F9EB8C5D400FAC3275D
E7A1CB64B5D1B5FA98029D7BCAC785BBDD2D86B42FF91FCE7E06435BB2940232
8654C6213212E127B968C9D09176613CDBBF70DD3492B82A746A18621FCEA034
C5478EDDA7C1280A05B1E32B4537274E5102564EE586F97C1FDE8E7BCE01645E
6997373B2BD37B09BD7BE26B975CFB5F1762444C53CB604A45763B67768AC526
1DF9C7E081A7F60049B0EF4E1912DEA25281CE4DDC8BE953FF658A1117CD4434
A122D6BC79EA3A1963B94B9903CD874CF329240A0A080B93847EF4A6D9FE1590
71334AFCEF5F9F56BE7AF8FEFDD9A275F88659D2ECB70F44FD2643BC95F886D6
9F8E5C9750C4C9E76545696CAC80421363FD81AB15094F74295A600EE8A42977
8B0570F27487933DBBAA82C5904BD2170921D4B2CB846E609078D5527C1141A7
903C924ABA53A4B5C7C390F436CB4C096165F9F845E184CC0594188DC4771B89
04EEEBCC20BB62DEAA105FCD48375C11A3207B5A381FF8E1C1643FAB51C16D1E
2C79A7488B9C54BECCF570BB1321CB3136656AA6256F36CB1B93A8AE9E43D2BF
759505E1F5F3759E08318611701B27F723F3786A03BA8515285CD7FB6640DEBD
ACC45D477D8788EFC79A0297F6D18FED9656B074B08F2CD31FC681245C724A8E
754BDA7CF80902AAFD2B6018DD0680B43A5AE7900B43027D002C318363FF20B5
A0762A4A9A546A212DB60D5242FD1C2D25BCA2B4E479414E699B812685A5890D
C3FD97D8C2434A8886D583181CFE693F96F674A02769B1E1F51667A11F7CD5CF
8FD053E67223B64D740B7B5746E193B5F15C9CAF3AF3BF89D94C253CDCE59227
2EFE43323DFF913D8D5F9B31D94A995E77D369B625ED15E573C039463C85D6D8
0D2E3F6E3D9B0F29434DB3C314312748E0A60E83AFECFC0279ECFDE314BC8E0B
6C0895146C40ECE0760D71E25054717CCAAF6D21D4382290691DBA3D105FFA49
D59C844204CC485B2C61FD26C033019C4ADC916AA6F4753081FA1D94EA99EC33
7B400379BB84FED0BA2E719DD6558D875B609A4EE8EA87A10FB585990593F20A
35C876029EB65E328BC84527AC2D1E06F8F45B9A4E0A50A5974B4E84FAA55133
861783867EAAF8138F4275ADEA0A3E4C5F2162ECC430C5BFD22467E3B7B7EAEC
D9E3E13E5A06C67184BBCFE30B3C2DFDB8B6B023CE7CE84BF2C517B5295BB70D
0AE365DDE57674C4C849CC0D1B54E47D44B807D264B8FFF9E4D785C1BB721B91
E3B18B10A96E8ABB5CFD28CA18CD9013B79779DA096E1F56D87595343D1C24BC
1455EEF8582ADCE366A721AEC716AD2358AE18DD2EF7767E50C44C91D9277A7A
CB3C766C747C1997953D2DE0551410FE5FCC36944911C50C1FB0C41FE10B6AA7
C7B13A244C3D76660C2C850DC2F7EBF48033C4DF64BF191F4D7FE5616B55B114
7525E3147648B24544D4D0D280C358EA9F015D31C4AE041FAB38A00EEA61310B
34AE2E68859E771835EA607E168019FF408B3C783D0712BCA10A436108F0D6B8
7BFF46E7E197D8541D72B9EA99D6F56F1BE23D9AD3885E2CF29FC8866B0F82F1
56C86BAB9E9909EE52CFD9DDA56E43B43EE27728E64F94911E78F99023106688
8CC3CA21D9B855B941930D94B358A511C38C5E844F53F8CFC95AF3BF1C79D435
EAA77D4B05540EDA577F3759A940D23E73451C967DC8F3AAE36FE01A3E5E6CC4
9C79CA23DC10ED8071E6144EA6111333F510C73CD12533D3F6BFA0FB13B4243D
0D35319E2C674C07B0C87EA3885BC505BB0A5E90C2468F5262055B889245BB66
61679F7EF91967AF17D2965B1F179889636786080986379827EEF74296BF99FF
24BAC582AD3F7DD4F42C692F7438519AAAEEFDD8CC4B007EC9B5F8E0E2CDDCEE
93246DC5D6C0E5FEDE726183FDB6FB5F3E4266B7D327312EFB770916FBA909B0
B1B4AD97C71B859F5A7BD0993656EB9C77529C2FA8E46D297BA2444DD1B0EFDA
F667A918171169D8669C543220F5DC38E426811BE86A560B49BA721CD63D7851
AD2C798E665514BED008E700D6EC1CBE47E4FF8D63E30816953BFC6CCA78DB0C
094BC82EC4F0BC92833AEBC1FA71AE1151B6B6AEBC41CCFCACF35D9DECEE6F9E
9FCD62886351E76E7DB866A2DB1B877D064467A00156D51F4880ECEC977F9C78
F5BB09727EBC06D1830262FBD40356643704BDF21BFFB63A8B9F41583F75A2D1
339A463F3110CBB61942B72B6C3358D293ACEFB6E1E6D586D24DE37560AFEACE
72D47D75003B5DD518CA905BCE5758C134641EE1F45A328D4D4CEA17E02BAE7A
41A843506617240428CD183D707D3F0E3EE831F67EA52C8B139B17C63BF11DB1
6490CB6A70FFB9477393E78CC5659B3C74C3E4413B7117DA0432E4E6B15F9E8C
729ABC94169FC54D43DCE4D1DAF64129FA4ACA397974F9DC6DFC201FE269C7D7
C8B7AF418AEC4A814933845904538A1ECAD88442E6DE4B8B190E5B339E0B863A
12A96E832D92CB6637E3FD8D108C4CBEFE5BD31C5B1440553778805FB3B788AB
AA6196B5480A05846A1A8B40D3229C18FF6237459732C2BA6F48EF90BEEC53E8
8FADDB38686EF45E9EC729609451258BDE7360066362DB24465EFBADDE963B53
79E668142F32A60818E661E1454510BD9D6B538A26884C0BAC128B7D4D61C2AA
87093F0D9188350856B1FCA888D9CE33AE1F7FA543F7003150A9821273E36333
545235C249598578CC1C437E81D737DF5B9B1CCD76964D9633EABF0FDC11E056
4EAB95A2EA372DB1166A15B52C58782334244B767EB7651FF0B70681E8AFCB58
655A8D62BE4534B8C23B409B7B3709B544C8412F8BF64200498E4113B5988AE7
1B8CB269364E8216D5A4DD597644C8AF59E26789B12EDD6E57CBD83348288C77
8F0F49D1BAAF42EFCDB978DDBFA299B671DFB0158C60C1489AC0DC98B713822F
634A96C5D1923710DB4B98B063FA07A6AADBB5380033BF6A3FE89A498F9CAD2B
7BE121B350947C8C128DA6C06130F8B2A4308C2C84981239F9082CF9B7F3CC2B
907F2FE359684DEC4184E12F59AD61B91EAE29342016D1C381E1215F0849BBEB
95D3FF126E33B027C6E44CEC46B305D67E5C253CDB908754242EC08752684C66
C94E84ECF4F361EB4E78E836D10D890EF1E6364930B4AAC76A132C32DCBECD22
7134E7F747AEF8DDF2251D3A910DF8505ACECBB6F919ACEC8D5987FFE429AD8B
E86A783BD5E0935B9AE0C20F25A9379E3924A75558CC691CFCC770E127C526F1
3C85859D999CAA04E1DD88D0221D57D824D250AC3F036BF57D173384CBD15CA3
930A5FE314604E8D3030068C37DBE71203A78F22D80EDA1C25246D67CA83661F
E8E8FD33169BAD40D0A599D118553B9453812A0309F59554533FA55762A0903B
56650D1C335E72F02ECD0ACEEA511B20D4D5F72565C43F022989D8DEFC6D8A11
0710DDA85C1C163C513D25B9264E3890AC262C0271F92E48176AB5869BC6CAFB
FEC9685CB5E954ACE0BA4C073FEAB2A26E2026461322DADA1349ECC4AC1435BB
63BF85BFE4DCF0C8E75BA8EA33617F1E8ACCB70FAF13402C3D640582C972655E
CB16686869E6DA6416A191EB54F16863203613AAAD505CCA785EE521B5D53A71
599737ED09A882AF74475DB676698CFD9496C05FE3C04942E099E6B189D86549
7EDEECEBCBC1BD6A0E937A7D9F3B8186EE2454E318F5CC571A951409B0E69BB7
A0E3E33DD8C872A32D175EC93CF8721B7ACDE3255CA12ADE1597716DBA03B23D
85CC8B701EAA654C5EE74F40D1EF212100ADAE07838F53B0B7C64331A1381632
3CE989E1CB8839DA1968122EEA8D652BE7479621A99C4CA4F8BA75A8B4B3EB23
7EB85B600FD483DA2A8717A30EB97889490536463124DFF7ACBDE3E03F706389
6D3B578B21E617BCE692F4342C634649B5A2CC15CE58596999BAD415D255D54C
F0086FDEE6B7CB2EADC49766F44593DF8E62AEA92577843CB580B537134693F8
E10D7441766532D5E66F956B857291BCDA9B6705F0B062A78EFC65E27E56CA62
8C26CB1751E6F6F923C9B8586CB87E1F0CB44384DED0AD5DC07343C220FB3EDC
22E56DBB5C5C335F34EE27D153A515079CC4F3EC104592D3D38E10A40C93CE9D
1AD12ACB834856A2A46D83CC900DFF2B519493C9EC08DD2CA9EC4DFAF3F3491D
3024502E3DF760580C0611285614E47D092A699F1B16C8ED115437A8EA8CD328
F755B3DDF0E45977B41B9BD11B28F3A10DC9BFDD5FB6A3EB94F3BC025C012E85
B2B1C1D5159025883E3130C6536020AC19161569BDE0D66D79B090D239BB28B0
4F50B0A9D03480566E36545DAB1BB0423C34755F88AD248784077983794C228F
06268D28EE4DFC8498FFFE101EDBB87AB3282797BEC19164512C80D1C6E8822B
8F54C5E4819AA2BA2A55A24376D02217FB64BD239285BC326D3CAA9EC3EFD2FE
0CA35B333D281640515BF9C595EFEC75E4A2868359410E854CFBF08142EE7FE0
DEFC6F7406A4E490F840211D1F114AF6C6B54AD528D7AFAE4A2886F5E84FAF82
CEEE9A057DCAA4F10CF2591C26137E4959F5075C8B11CD6EBF9453B2F632E36A
15B373FF3FAE53532AB7AF4159D6E004CA0EE326B90C882E7CA0051D10AE484C
E46C34676C1A750B344A8C867D0962CD51553F259F887A43EA94DA0BC7370137
3BBB6375EA7AB2ED618FF041EC7B061E721B992A9FC9C9E460A62C80FC2A395F
3024BD2B6A429FDCDC16A22EF6E1D59F1CC4D51744A4589F2F2BD5BD8A16E336
83A8AAF33E89571963AD2AC7E32A57788B72C63378573CA78C55814D2D07B6F3
9B40F92A0246ABD157400F4077DB45828557E83B04E9F9299E942B19133651BD
AA2896438F454BADB4113F0EF44976FF68DF0865B18568612661F780459D9932
AF482B5E2351E3BADBEFFF2364DEFBD41D7DD1DB2BF35B1BD23F1FF599194A04
4C58729D08BAAA7523628FE96F7F0362A7A748A63C6E8381693653CBBED7FC04
BC28FCF73166050117C783D9EBAF4494599CD605D3A0B3369005E3FE2921D320
22B8FA27FEE8419E3B471927181FDF059244CE34C8E2F3833A4629268F228F0E
DBC59DE4F648B6F6F9568EB7FEEF2740E3E8E17902A5728F9AEFC3DB3E81B5EB
263B9677424C10A2BDFCE4E2CA2C0A305ACDD18039CB5F51E368E8CD615836FF
D27D21F892B9AE92E8480F5B8A2AB1B87BFA3C48AF0E1DB32EDCD71B48CDBA04
9DAFE3EFBDA7DB0204A9DB4ED19128C657C8098ED5BB7691BBF8C1F6EBA5FC2B
FF29C668B8081D81891456B5C2A458062AE899060B6AA899A70DC8848152E951
C0C3F6AD7B57B980E198A3BCC11AA4157F7CC11191D9DA18C621D859943D7442
FEAECC1EFDCC281D68285BA128E09B840E807E6F6D070ADD9BE9DE529BB45858
65A00FB122EF507C2069EAC54BA0F2F3C2F479FA651F01F72A57705673E627FD
F3C79DA224088422DBCBAA1D8726FABB4EA9EB1409B5A2174C5880C4F7DA38A8
550E1CA6C504B5062D78D40F25AB42B69EC10B0CCD7C0C2478EB2FEEA0C69754
128BFF2BBD1DFEC54AE0A79725DA6355E718D72FEAA5C870851265E4711A4CEE
E74CF6C7345A9D36BD801383F34A04FCB76A2C1D28C57D77DCF2E84F1207108F
3D4D7AC6479ADE302B52A301684AB19B6A159358C7A5B25E22BF2B5C7A2BF30C
27280DB9C56C4F649456956B78527406542ABB1116532AD67AEFE0758C051241
E301C7E13D122C0FA657F157C5239A213A2BF53DC4A68B4EF2356D485662E39B
B855E9BD68C4C0728A5B37F88F7B480E1CFA66DFB96D5030E787961D72D02C19
5C669E792C0DF46CCDB6E45FDA05D04DE260D94722956833588CADED9518028A
78C65E7ACA7CBD3EDB705695E407C55AE3871021745F846A44428053C6C60621
6322B5CB00EB11973375B8389BF0BA95B2A29E90BB4820B6AEF318B1F51BA128
3FC9C760818BB03F7FD90598C38B1C2E0C9A9A82F3094DF4A7A4DF51BF0EFB57
472C5FCB1195C608C43B82C0EEA85447F14127DCB7495134C584257D260AB9E6
C13135DCE23EE53F5EB857A86592A78771A5BE413542F45E2BB7614B5068382C
76644422AE18999FFE3798118AF3A49FBC37C05C42A2AF30EEA757DA4A7D7804
6F961E9041D4EF013FA41C3213DB9E576B7AE9AD4F5B979C9CECF7711C90B4EE
FD97AE5D184F743ACE50A98EE53C261A334347AED468CEDE89A1454A27484A48
1372B387017E73EEA1C710C9CCA91C3A0F3DDAAA9B45734348FF732AA6CF8DE1
93CD5E42769D1F86F927B9752A982E8E42309AAD1F056CEC4952227A4ED3148A
A8F2010F195C25813D5BBD0F42D0CBEE87AE6D68A4C0336BE904ECD31170346C
560FF935F7987487ECF74CFA1CC3A21E456DBF0945D325073CFAC939FDF75031
7DE1FBEC467D089738DE8443C98684CA1AC7ABCCE6CF63DE924E16D4177B3A03
EFD6B1902A1A2AD0610467E0B3C8713000F8469323CAF8C8A22E61026F8AC241
7B757AABA620D2396A0028B3296D6D5548659E5A4DB00D8395D0BBCB644A37B6
583580231B6C0042111B140F1219189FF54777E37337534BE8EA33D990538D9C
7E0FF099162109E4C8B505BC4EAE56F9DB92C75C6EE004F901644D3A8A062AA1
3A9AB0B05CA3B0D56932101422FFDE5BBC3AF8BC50F0EE6AF1B93250698AA595
CC211F81404A39FDB273B64ED685BB2F05E6532BBF2872F63F693DCA492BCBB3
76A278F2D4AE601E81796437CC9AB607650FF82F11DF2BA370DDD6723C154C90
0D195B3F31906127617D2AE1B888EA771422EB425F396780D5E1161B20F3AB5E
3A7507F25CBDE0504C023A845ACFE70B2D8BE6DCD49E7B623D69370F66DEDE87
35D67C03CEEB1FB311A759FE260C1E6EACFA52E8B820C806EE7F56452944B5BF
3F9610B68E57D33378ACB8ED7DE1B7B9E4828392F3978EFB0530AA2239903E4B
3F8196C3A9FBE19A28D43710781EB7D551626AF111575219377883223482F2A8
0550E3A89AA8A18E4A00E72032EAF44C1D972D5266E081EC6D193B6D602E72BD
1D95281E7B0970547E9CB482A3C065CE71C64A50CEB925808E57CB966B7BEEFF
E4B993617095E813169F68881E5062A25F890B4CDD5CDAFEEC5907086772F4BE
1CBA7691480D037E3445DD9235C7430364163AEC6E911191B06F159BBBE9A006
728F07A43830B823E313133F5880A027C59089DB3FD2550AE7972C57A0BAA11A
EEF6BC819027F403EBA7BFCEED3B26FB4D5E3D1751ACBDC1812004520E40365C
82542A20FF8BCFDF1D312FC0FC0162F47FB4D8D9034DC2433FE29090E0192ACE
29AD10E16A3FBDA2F7A427B4C61C0341CCA0B5AB1DD21248BD6F2180310F76CB
845EB46EDAC64FAE88B9973536BB9572ADEF166228948D362EA66A86ED70F659
C90D99E1000D0BFB5359042CD7CD34338F33E72DAA04EFE50FAEAA8C7B9291E8
CC8AAC6E4AEBF1F0BE0CBB445E9DC99DE3BF32B95CA40F19FE0EEEAD4982DF3B
D57758FD145E769D4E88BF43D19050DA58F5E98198D5A9292428B9368284EDCD
E7B6926FA86E486656729D08BAAA7523628FE96F7F0362A7A748A63C6E807AD5
1D0EDDAF6E7780F00DA62502C94A10EC87F2DBA19AA25DD142F14DC9532DC0FB
76931629BC216CBD42A8ED23A2044B1C0EE6096E008AD67226A9ABBB491C413D
3641EA0224D826BB690432609A67E306F6F7C2CD4CDF94BAFEAE07A0CDFC7822
80B8436B909CB12D82ADEEF1AEB3CE77697C7F524665CD2AB7CCB157D88E4968
6B62DAA31AE6B11AB2D7B1099140CE83BD3212C156A0C13EF64D2A0DCAEFA2A2
0B54EE054AE15F26A7304A9A97B5EAB9323B21D5808D636ADC789843A91F21C6
772E2614C8D30E5DCC5484AD230FBC4EB1D310296E53F69B1CFC085E0232911E
F18186172CA4175B9C54145E5B330EEB60B82DA3ACE7B900150A7374920D6F63
770EEE3797CB189CB93971B47DF439558CB53CC12F56D3285CECAB7A881DCF0C
423A86C57CBAE8F9F82E65EDBCCB17469C445E0FB4320D53CB983F9BA5E77BB3
F6A96281564D7ECA7B4A0EA548F4B1F9DB41360FBBA7A83CA366A5D2789DF5AF
F209404578E56B0D8EA6CCB76BBA89C8F5E19646935341BD381BCC0919429B21
C62F2B78EC28FB175658468CD6ECA301D7DF996E76C827664C50FAF95A63CA27
8DCC38682E1BC6D134930242730DFD14B54965079538C1F9087E6FC665136B7A
BFFE8DBF11827369B724A0AB02F25F032E14C851C05AAD242C78106174DB10A9
13779C7DACB01E8E1587D9C2843A426FD7366A1EEEBE8A4703D4D84D1B7B4499
E585B500D54F9D0DB37EA4462F43EF897224867A2155C624FA99651EA4E8894D
C5309ECFE3DE89D2D073D5DB53EF9B564606B5A04B1180CCB977ED5D8F37B922
515858D697A44844F2C7270748CA1666857DE5B2B016A44716A46BC4C3F46564
84C9F05BAB96F90855602A038D686E568B1585A8AC4B4829F66C463B4752D485
BD56300DA794E913B78D50429B985F23EBA0C907B6CCB4A57AC0CEA9F5AE6349
4B6A54765B2C56A6AD522004CF1952D55B0D546E425199E01A4C7B87E4F5D4EC
84E9D21FC68D0D135D357EB6AD29D1471F677B7B54A3B04F2658BD817D143853
6BCE054CEADEFCD37AD00997C5E88265319829F657E0DCA839641B0CB2CFBEF1
04187498B83A1EB5FB5E303548516D156D282BB7BDFC55B4522C394B3A544159
8B9A39C14F0D2FE83F60403C598F8E360AFD7C3A3F37E775EEECBB553C90B4F7
FB949DD094EFC754BFFC1C0AB2E21DF50C88989E4E3A8B8981DA7957B9BD4847
8B6A1C2EAA83534F982D43F3953E7F8BCA35605815E0FFF7BFF1C9C3C17519E4
6F82998324BBD0131B32482D403D230BD5113D19B43A4F31EC8856A7DECEE730
9C0D148694C6E7FC4A6441F33A5597D72C82E4BD9A85E2004635A6669ABFA85D
103528A79957F00BF8849A73B9D49874E1C75879B5224D3BB7D31681D7535442
7E16368E1BF923E1C4A0C09325430B6C2F801B8B7E48C0291852C6AF38E68555
14CCB97938F3E012AF4D68C140C6CE231015DE244F8271D5613B831E9FA76E06
A298ABAE1A432799BF8A512F512686F02CCC66343D83CA952DF1C68576FB465C
3E56378F4AA09F400EF49715BDCDABD4EFA0BD65C425EBC9D73F2C768710DA5E
40DF238862E45E699A220858EAC15F79D3C45EB5F8353C55A5FE5BCFE16F81B2
5B5D216C5ACF068911EFD0CFB268307F4CD1C56B301380A1A0E00A3D3E50EE93
4563FF9416FD0CE19966020235B30EEDF98CE5BA1AB235E1190BA23732E42841
B2BF6B995EEABF5BE3A36153EA88A797296F2FE302F23663DF97D59234451BB9
72B559AC50EE733462DC6CDFB7D0D606275EEF876FDB36916216B3A404AA2B7B
5C052AEA035BA3ED0957B2A13CCC8B93FF7BC5FC7C7A37AE0523EF56C4182BF5
D95A135B9CFF91A00037A3025364DBA8629A9385CD37431DFDAF370FBC0313D9
46B09DCF3032910E8970312D5F48C59537B1582FFC314CAE502517B50551B0AF
C92869148DBAC1EA48921CE9E2CD6ABA43C99624CA566C43D5774F18A1AD10A9
187C32D91D47628C123CF229A3FBA5BF5B3FD77A408B81624F74248314A08CEE
4C57AE76A3FD7CF9024F39CF0CB960C2C0874B3577A5D1BF3E9BAB479A3F9DA7
6C318D6D0798203FED7C0228B0D5A86178956BF7940F2912421C4F3BC76FD991
E86D5654A83BF518CDD4370AFF9D077D74D8C7DCD2F7AA643355AD74EEDEF932
3418456C69BA9FB90C044713601BCD4C6F9D14DD64DD2D471F47B2178FADBABA
51B0704B03CB1FB6B146679A710039E6666835C2D79EC99FDEAE07417A24C048
9BE85952A6776CA88C806DDA31F028239657C9DF28361032F041B46A66ED989A
A7F51CEAB963D4B928D141B5A50A3F5E9A303C99A80E76CF38AA5B40F896502F
E6FD8068F002D6E1D9C3FFE7E5403F304ADE7C78572EC9BA14A0944E37480AD3
FF9C10590C070FF615F1F8FAC9AAB39662E6D137560A8363F8D0B481C164FFAB
9C6BD12A8C843DA6CF1498EF18BE533ECE9AF59B6F851AD5896ACA01B2989993
D432EE93A75860E50C5CF5BBAF1D70EEBA68EC4D84AD05EEAA7189D3E1C9FACB
7BB457EA8FCE8009D30DFEB19A02D18CA44689E5DAB8F03168F9E6EF16312BB6
87AA3EAF0245885C5CEFC667FF2CD04488D639D423941364192AA53E84DA5A4D
E532AC26D6841809D5F0B52D59E6AF662CFDA9AC18A33CD2AC6FD0A1E1A553A0
5978A4FBFF7D591254A5E3A26680065D4005049C9BF95FF0FA981A8AF789E1DA
1A7855C6DF7BD54514602B2FB30C9A40DACB3A1AA64B9BF377E9C2B1CFD59EEB
A7F5DC2C1BB8614BF8524B14273B0D573EEBB3DE636A8E4EB10E500A144A602F
AE78B968D4C2E32A697F4A8BD9635311108D162F9B7210012EA3502E08ACA513
28C628017AC93638DEA121647C09131AF0AF665224EDE522641BB0C9DC62EE16
6334B9919AD6E97ECC1F4CC63F2B9EA92EAEE2AE999771B71AF9B30F28BEB901
961C34DB599505D3A3EC96839904EAB292E67B0DB8A980D1A74CB4E7A7CDB74E
D5E18A4CA2E1F74126E9F9CD75E5038E74DD522232F5546377C9A9BE0E1BD67A
915DDAB0B755398D8FDD8CB073C576C1C86F26B753911B1CB8A8CB6EA47F3B1F
8BB5B13D7B90A4F95E5403932D73FF500114962E610D7BE1ECB505FC2988F002
52CF79DCC4B4F2F6197FD4B0D0C2637153899CAA8CCD6024CF6F312E7BA4F23F
9497EDE5276D2E75E43898FCEA42078E38088BB76CA846A545497019795749AC
FC81B2C9762BC018EDE986D00D3F68C0CBC50521346A87A21B92ACB685A7B720
00C7B2DAFF6236CD773386E362EC7E1214F8E90B351B015320794A89E84C34F3
2B465E2012E2DCF3C2DDC16FD131C7F302A2F9FB65ECCCAD4616959ADD1DDF7C
A8856A61906BB7222DE42F65F49426F8D95256031183C974089DD58B98A57999
E34BA06745AB44942C011F78FE6D542317CCB82B906D58ABEC0C1485BF5B9477
3DBDD80706727CF0F5C4533E5C7E3CC5C40B851BA97489097EC382B0687A8D70
1D86BDA16B44FAC0BB5C3DDFE6F45BD57DB169FD3568C8E044865DE7308E8B80
0BA78C4FC2D4E9C449E1475DBC00969FF873875A26DFF758FACBE963052FAC7E
5753BBDDBB6FABAB6A8B81B57F71662AD1F1404A836A801A94776AE8FF003132
928659BD6E6C845E2379D4B42D8D19FA6D540368BA9F7BB54C6A3CE03FF9EE1C
4293A042586C7D5DF306BD03A70D03523DD2841C24504658522322DDED8C4BB4
813D9050A71DE662017A25446984321EA37892C5232D486778E795CA08DB2A33
B5819982A34C49A313FE9211657D4BBB46B20B1E99309ABDC421B136D9681EC0
90BF144C4A64421C91A7D5DD8F584627AC4E6D2B4CE0108583463B9301919A10
8CCF28ADD9B2582CF6C3178700E56D15B1C5449674A494F370A7329477D58B43
5892A5DCD78EBA1987FF5EF9428B6B265A63F45B5C9B3AD23500585938B910C0
809474D611522E42438EACB09809CF441942491690636EF8C890D69230D0C80E
F12569804A23475AE3640B64CE8AC122B16BF9132830C8F4EA9DED9CA288985D
AB6056A429F54B372902B17D0C404105753FFC4DCC0C74AFBB26D61E5570EA40
4F52028ACE28D99D12CC6331B6E55937DF0CDB33E479A0BE74BBC7DD92D941DD
65BFE012FC23069DF8D162A2B400EDE05DF412F5D3AF86BF7121A0554EA68CD2
276F23985B0041C332096ED8144610BA96475D3AF367496E34A2E63D693D006C
F3E86F4CE161025EDEB99DC3904AF83B01FCB9926E01FF028956D7DADD995E6E
2033E6CC70BC0E96636EAAB676E7231C1096EF9322A1BEE0095949F22E99CBD1
AC1A0CB1E6892401EC5CB1BE74CE9522C06896B9E641673A87B47BA57EDB111E
96164AF8420A7A563D795D8E9E60F52228458EA25FC81B91DDCE0CA3E5B55109
6DD5762189E8BC4670FEB0BFBB6DC2FA129B42E2142611ED0A8ACAC6EDEBD2F3
ADE59460C435361B9EE2378B0B2365178CE4FF0ACA09DDECB85A84440C8EFA9A
5222155980DAAB0F104EAD6D9C24F7370B134CDFFF3F348946890837BD074868
2B54986DE59AD301B93AABCB500C3FE0EB837DBFFFAF3B888134AB38B5B3BDC9
B128521353D18DA8595E93EA029A4969B8F26EE28509DFAFB0EDD6C586F5C0FC
8BCC3D355A4F3C7BB8FF0113F009AD9081F7A1CB7B7BDAC189A0568797D0A561
38DE42047BBE56D5B8C597A7E175B5B422414744779BD6DC57DA2F66127A60C7
76F97ECFF94C2307EB3C44EC877FCCED6170D3A6DB1CCDD76474C9CA9A0EA58B
35C74EDB43607E8DCFDB5ED2526C14D183F2D29DC9AC3DA919BD98611BB45566
C1D73A8143C8A24C4A470432BD989259DB9CD918F69F1E56264B8E31F7850BB9
61E933EAF370C2B966E8C8655B4BF53F63A48C7F4EFCAFF31F6E61A733AD0810
54D2193B8BC36A6C26FB97DE6E1E78EB89C06084801A0FA12A092840A740F3C7
5A30C1B241A0DFA7D16993B235C3F1A53833DEEA43BE551A26129AFA9DF18A88
7B540E9DDD953DFD01CAEBA561F028611754F949BF9541F40059E4C22CDA8CF8
B83BFC68C6C61B7606A358EE8299CBCFDB6C84A32807C0BC46CFA13B270AB88A
B7A8EFB34C7EE68BF805D039CA6AC7DECCD1A395E7BA2A1BB6AFCF64BD2BB65C
137CA2821EC9838CE39156532E1DBA36135D9BD2741BD5A40FB00BA9C014DA21
44FBE1CCF6927EA35B8E19688E347F3F9356111575D04F9AABB975F999FE0159
797AF521C06B9CA7915AC36C9EE0878806E624B24D44ED1E3D3F761928CD2D8C
A7A1B133A1AD1E0F09C6E0D346853DA73055FAAB2DADD904DE6BB4E4A8248582
51438F05B3EA1F686B35F0072DCABF52B310C40D920F4759CBC2995DB020FB5B
2825A4C86135D686640A42C4B8309E79BEA25A9E2BE4D1A042E188EB1EF0EB1B
3EC877FAEF37091968B9DCDF924979BEE3F3B54D13A1457BE695A3CF1A5C1687
8D44BE38107E327EC1F8758A9B23C8C0EE5E1CDE0C9307615D2E9E878FB83140
999E1D924CD89FF87DFBC5B77ED158C0EF082D34EA65EEFDACD080AF068F7A1C
DE18315BD694C60B1DC718BA2F3BE475B6AFA056DD3F3F525DA26365A2DF7F72
CB29E7C079081797A9C0717CF7BF9BF842BFF6F4AA21437BE54C91B9FFB9528A
BB5CF9781082DB56810D7BA76DB9F28F9E167389023CEBD2F0E3EB90F50FD11E
AB33A9FD34D2EDCB3A0C69CD0FF8D30FDB5E9BBB0A870C3BC553B7EB9820A92F
8C86B98A36AB956ECE9F5C562071361803AB4F96BFAA2C8A8C89D44EAEA1A45B
B6EC900FE069AA6A895DAB0CEAC693810ECC15C53E710CC7E4C776F86D88B538
522D048080030FD0C8932BC9F78CD0476A0FD10DC8451E14281069DEFC52198F
984DB16C7147B5992CCA8DE433C390470E429A803095B2E72760EFF224DA378D
0B6590CA0EE1B91FA23D9FD4292B4C730C54CD667EFD50538677F469C6352D65
9FA6F3703FC79A130F1601FE42EB033DFBE2E387A0EAEFD03A12376C5901B7FE
FDC9B323648D1111EBFF81835631AD6C6FB88D8E79536F6377E02A43FDBC78E4
627ED79B16862D939F3A3004A30289398BD3EB1798CB9C7C2E4CD0585CCC85FE
8FDC2C5028AE5DA5139E8DBFBEBFF644019D08C661492745F153CD993A736EB7
D20FB5673360B664F6130809F7D27A878FFEAF3702A7C45E4B09188CFB4AC98B
D8AEA780DC4998FEF28E49E7BBA32CFA12942CEA6EFBBCE12D1E79293B7465E8
96A0EF8E6B3A012AF00EF8A7E879A7C34EA27A9AA8A21F616EC20C91834AAC2A
80D5684C554A03A8ED3C608C46496F2E00B0EFE25E629414ECB8A2B8A7CAD446
335287E949B2DA10840861A6AB8C7F4871E5E198AC1D7181D637A568C615AC37
91D8E50942287DA6D764D0030290B03C9F7F76B44EE925C8AC127519015F0391
990C201FA4DDF49EE7703D9DFE30FC3F11D3528212F8EDC3A3B494F3809BC20E
03E4DA37DA7FABD00AA334DB8B50770631E360AA6DBA1ED468F3897AB7521417
E1E7CF9F4B0A0BB8FA6404E3F9D7A8A1DB44A5A871C097814FA33A1BA4C526CB
6611B3314ADE680FD82738BECC2947517BBDE344A991A66A866C40DD87838744
0DEFA2883ED541797FA1B3D5FE727037BE1317B75908E986BD3696F5EA8C1667
A3517C30CE3D3DB4B5FDA3F79F7144126878941CF77498141B6478356CFDCAD6
918119B81653EA86E48667319BE9C3A14AC12D493122E46203B1B47CD27F9178
7A80E4AF88791400EBFC6C54A4E2D47227B46BC6B528C4156B8CF2C80FA08409
99AE0E6573D5CE090C2DBDCA93B57A82AF52A14DB5E7E4EDDF20B979EBD84494
3D7BFF7A328EF957C8FD2434E8CFA9B0FAD31C60B565F5BC7B74FD4431B7DFC9
26AD1AF4377ACBB0EF69EEE350BB6AD4AE8343DA1C74EFA5A5871CF54B828E5B
0E2F7117C021D51E4F045880A3A20F8C56DDC31E3C30CC36F3BD12FDBD823379
6A985C0A5E1D79F0180D81459D660CAB4AB3879DC6E8517D66F91C3E64A9301D
372242340BA0449D7C94E2F67EF63054AE8C547418DD476341500A752868795E
CBBE6155013967CC2354A96B5F6422C1E994CED92E66F3C5EDC89FA79740E95A
FAC4D7BB000CFBA27FBC49C151CBA755B31AE668CA003D5046F55BC97E708D53
2AFA30AC051E34407F3E63E5F6E0DC6AC13C45200143C922CCEA5670860A212E
07E81FBC58EB48092ABC6F195EBE6408E23CFCCC4BB96D12FD591285F0B5650B
E72B3EE65FA9436269304B223F1FC7D335E48710E970F4C0629E8A0A2042DFF8
C4F4BC1BBDDBD880FA5DF0DE22F7D2C94DF255187F54782429A21E2A52099C6E
75778A369CE5383F32A0A371A51F64CDC4E06F544F2055F67F0ACD48F5CF3720
162BC49699BE53783482270FA8AC4B2CF64F3F52E5ED0C4E2E8A6AFA82F3CFE1
A0C4EC15363B6B211A3C15B3F29E5751094FA88AF3D7D8F35C9410D6619443A7
91C1E3C1E80DE12F821CB9CF800BF7B3FFE20FAA5DA99D3DD6A02CE589EBF033
FD5BADD1FC4CCC6A0AFCBE3B19C4A31926E43BA26D7DF4E389C58493817DCE65
6C0E84015517666E81BA1CEAE7B8E83EDA47671E7817BBE1DF1F043C7B3E50AF
43B025021DF3A863B2BF465C25B8642474DCDFC2D70220B6A5CCB1A9DAAF125E
79D5AD7DAB05959E694040B012C40D603B6D218F9741A9D0BC2BBB60C369C418
3F6048839A2F4556AA437BAD036E1931583807EE0A93E84B83FC2BFC717F43E4
672572B9AF6850E95A9D9EA5D916940FC44F0BABC60F72CE2CB794D5D86E1A04
19D95798D7DAD18733A1D6440478134FACBC64FAFCC5448559D47458A6E0A78D
F530583699E637AB319B21BBA6FA1FFA4C40228D58FD970FAB8D4813037AF01F
297D0ECE9DE9B3D51AC0238EC0BFB31C22B16AECF3ABC98FB0D4077F792026E5
49E423C9C15476360D5CECEB4B8B47938AC09C010B8E0B178D36FDECB41183BC
37080A83FD6825479BB1DD0C0D839B036AAE24BF211C0422050457CD7CAC1B9E
570FF69A6A7A1BC4B9ADEFDE9C5A1F80D025B7A76595ADF5337F8F93BB3B8D56
B40582E0020FC8DCCD236CB28640D40C728C8AEF4B6F0EE4EE11BF7ECF3D1621
AE13A5D6F99DADD75AC82BEDC5CA2DD13F4EEAB2EAC1F8468497DABD620BB087
B87F4B64D1453012FCEC27F3F715C36A43FF8A108648D33B3EA973E07C7721EA
1FE597F1E663CCDE601907ED5D35CE887D681E0292A4E72E044EF96FCAD73BA7
5ADCE4EF9B1B2FE123960248095523A6FC4B4E613756DDE1D8BF68483C3D239D
B59507130471503204710CCBA0E0138D450960AE5028927EF413DFF431A4B099
7305F737F15074A903DA585ABA04F6DB3FDB07071EC00FDD4F956A9D02EECAA1
BDE2B8598780B7D5BA10C31DEC0F6D4E281FF4007B33315D745F23A8AADB26D2
460CEE25BF93DB94831B125F57E8D4F3A46DBD29173483BD9827FA8ABA195FE0
BC64B4B2DB5A80CFA1490FF5F94AA9A5248606C4BB61D00B99874E66096BBFFF
61C144DF45E747C961F5C06C812437F4652FC3F2D13B57FAA8454EEB264E6138
D54EE33CD2B296D91FAD4848A098ACCA36F24BD9C19D2F1CEBA3DB1E042443B6
65E915991D932209B3F4C913BF056BCA70A7E3B757A8130BF3BC078B17590D62
E8496AE408B6BD71BFC42CC17B0608329D093E1F99904C5310AD94A55784AD90
847051F7D56B3F726632F1776689C051E43963ACD7E7868CAA4488EE815D40E2
8CA54DB36721C4B1ADE33FD14670C66F070D8CF7E7607B46F1267A24A18773D3
C5190CC50D7A2ADB38EDB790CC44431380273642095B1E04CC60718A2DC2BCD9
9B3420287BF364A8BDAB6FDC5B1D1F36B5276BDCEA39AA118EDA94632A1E54E0
DC1BE65EBB4F6F2AC4DEF0B53D8A1AE6F2FC39E5D7EE8E48E84E61A6C86D0717
896303416C244342218FC5D2D49AA06AAE83C3486CC64C9D204A264A5B3F0BB6
DE8537E3F64F66AAEE7A851794DD3BB832BD0AFE04CEF03C5569D51E9EC094F8
DB637C5D25BB0A06AB9D3C41C1537635289B228121B43DB3168B7CCB53A1D320
1066F4FE8D02407177ABD604D73BF06981708E619B5116A10310B9B180DC2074
E44C5E0F09625D16AF894B558561839DF24E6E9E4C72380F9708FC6BBCB6E142
5235AAD0342374BC4521225FFFB403888302DFFEDF914B1477685AD6F243B79B
09F44727B19CAE5A05B343A7A8559F10E7EBFD969ED2E35C625A329FFC75767D
DBA9C23FC17C22461F9BD45232F72B65EC29E884763D71D6AD67DEA1649F5445
EE0CB1178A77A4792F69C2C8A7450783352A92D61937FEF85057119AC29535FA
B365FEB61999671C1DFDFE45C08259422AD260702C4419860A94D0E467A9832E
FAFF2CBECBC70DF469EB036B3BFEB3C0EF048513FE8AF0CE3DD37460CE209927
3F1622C089AB3CB216A5C27D6280669457A18E4CAC6FED9AFAF376F3BE101077
3C4008440F2C9A833EADEF9986C1E70CB7700EFFAFBF71BEC2DD14B9B31BC088
A320DCB2073CEB54C50F3E6E2CA991AC331E68CCFADBC48C07DF7899C4AFC426
774F1A0BAB899BD4DF620E4E17BD1BEFAB77690820C31ED465EBD75527541C44
C3092FBC68C718702C35B6334C7A025223FCF97E4F766EF874607F657879F926
9DA059AA16DBEE7FAA26D43F2D092368CFC4E14862D0B702E894290BA470053A
5AFF533CD7695E440F19A0A6B88002637CA12D10B6125505ACFA3D838E3DCA68
43B76B9B3F7CC59BB76904AD69160BFBDA23C2D29311C4F82514DCF27C6B9051
7ED08B8EA537CF2D70FE897795FD4D72D01D984A0B50A28EEFBB9DF1EAB7F150
7F574812E54E211F41ADA349F415B453D20A2055E6124D8E19B7F251808963AA
EB3A788332C12480E0864AA46E4DE1707753D0BB822056A1D50920470B7DCF23
48D5E6CB71CF2361A8D4740E5F8DF0F6CEBA6EAA9AF74AED5B75C01085EEE434
6D45B05E06144787070E2C470AFAACAAE10B3C997074203D874B142EF8EBCB2B
7CE54980DF07F1B210439DCD6A5394BDA1671CE27367F860F1F8CEE4206235B3
E448F4687B58846D24AB57977510B8FA28E6325A351A758FEFB658929E7DAE07
7D32C6B03A0A5BAD5F49513CF89147972D60D6D2816C1ED130F192EBD5FBBA8D
947D3B3A8C9E6013BB37D39337657837990EDD432D659B40434257159898FA04
4EC2113F6A4C6498F5AB528E895D920CF43DBFBB7B59E24E5A9F37E0BDD078D0
17CBEDAECEE55EBA5FEBEC5906310256A8C3525C6E511B094E56B544E8A3DF65
F5CAF702CC009B0D5D1F208F5ABD86CB0F8CDA926497614EF00EAB92CBAC25AA
B048F0EA0B18F47C1C3DC124268DCF38067456BEEE0F1BC7277685FF6B3280D6
31B3CF10308DF130730DE2EC26BD1F29C4E07943DAA4446185F0599BE357236E
1640C05C0CEB29415D808C6D9F26FF798C2A5DDDF4B5C1B178E24C886DEC2673
3EFE986E170CF3DCC7585F89457B05CFA212E9576E25EB201C38AA12BE61E2E6
D4B23E984AFFA911E18E85658A1BB7A447448D77F9FE1356B85FC174FB09D26E
C09C0A5F8D1038A0323C9CE24A1CE82A293274B5DC27DA9FE50031038F99DC74
6700756C596DED1B99106771B64EFD8DC668E265AA2A28A18BBE3AB4021D573B
4125B3E80BB604D0CEF20E79DE02A0BB6F798819CA0E40B248B045656A2C8760
B74DD628EBE2DCF6FF7B8407FA24A82C23283890E01BC47CEC7A53112A764FB4
B7694BE54A27F9473273C1A160DDBD86C9F455F5B3DC4638B4C3FBF22085A8FE
FC7CDE24E904A4D3386F256AE6D0317308B9E4280AB8F0BC99D66D2EEB7045F3
57725745ABBEB593C0E947D4BEBC7E5C934ED38BBF038FEE0B65C4CD9D534236
35B1C08B9CB270E509091C9F1E16BCE7D84470D40C8800A4E58F07389718877D
A7A9C314AEDF054954C2761609FF6CE2DEFBAC568F3D87DA6F1F65DBFDB22AA5
58068FAABA98255139F983C0FEA2F41DB617C3B86A3242EDAB7491C559766793
0D07373C58352664FEF17D53A6F2861509646AD74DCD4EBC1CC4B97293BB01CF
CAA4BEE49A64845BDB04BF025D7C70D0C4022F09658445A73832470314C49EE7
D7E13ADCF5A1BA1DD86622182633C428423544EACFAF6F4EFFE258C0531EC78C
52F952D5CA51A2D32C68EDD9B84ED54214C16153EB1DFD808E924E25DF52D3F9
BFC2D69E4EFA1DF7DB6FF219F0889E16872F8A6F7F2E1C90C9873F4ED706F046
9C969654C80AD28693A6FC257687183B4D5B28CD5233BBA1354BA9FBC15922E4
C38271928CE5344AE68381B4DD8789E1D35D4AE06A051107EA4D97B3015EB886
0A6674522C415E4581DC2E404C1C5076FDDE2A4A1B9924DE9EDDB672E5CF64E5
F89CA22929839C333E771C7F5ABFF5C667E681DE349EB88B977D15639747782B
C65420878D644F5986795F8FB41731AFD8088DB517A51C51B31574B2FA8A71BA
89DC8F6F167C7C0337A9124702119C2D414E4812B2BD61FB558B9D8E86926F10
1DCD51706D62B383E1A1E9F0D97F9579FFDC844716F29B28448FB6E92B0345E5
D3AD7E0009212A52D33A0F480754D54DEFFA9123A8DC0320E459EAB7042CCF12
8B9EA49691B2D90FFB8BE2F427D36CC12A73005BD5764D0F388A3568F84D2CEB
DA542961F5B9BA1759BA2DA2F0AE5EE097D99AF9BA293242849A7EA56B15340D
7379C3BF6BA88D20052439374856E93D33BABC48A6B166AAE4EDC2271A2CF23C
5E8F45272A064274DFD709C036188AF869E8D791FE3DCFC3E1A07E4DE4F0B8CD
4CF8552EC4AD3377675F361966D3B408BCD9A56C16681FB9477E2A1243CB8752
3D2492EBC0F85F5B049DFAA270DD09BAE8957030947A148B8E805294B4A8D80D
5D31B8DE5B2F22D0267D086B8AE53C84F30EAA19315E3A9FDA600E5BDAA1C98D
740A8AF9CA26BDF0B34FAD9C7F07E48A48E44CBF3CF741E5D245E820EC0195E9
9B6E47CBE1D39D16881F1AA47E8C2CDEC5653D9C26CE526905718DDD07C6D4A6
3077CC9509265F6B11B12B80D093764F2321E3965140F192E2FA2302597BFF0F
12D7DF5CE219716715073173CFA5936254C1E13AFB362FA6DD77AF40EA5FAE1C
1EEBB589509D58442248ACD2A7972364C8360C4E43E2198C6F0E3C97E0C9709D
F0F438F47031D1A13C84DAAD94BF12B76CADD1BDED4F258F2DAC9F55447F8CC8
8BD98AF9C1B9395C7F900C2AC7BDEF8FB9D4574698BC8D4E374F0CFF17C1A9A7
5A1675EE98A1F25F10431F7D396D37E17140F2C4EAC47656DE8A593F84D4545A
4CFA464E51A0D0C0FF18345070F4C4D914838946E7BBBD0D7D48451DF84CF3C0
A6F0DC4718EF290E52F8C07E474910024FBBA2DF95704F33678CC2806D116D5B
0F9C0A90BC4BA6DA3A9C09923647E37A6267ADCB0646D5F46E138292F2F3BD65
0E492ECA67D539F5618E255700305FD324D3CDF776EAF4F2E07CC84C4B6A6EC0
C35153698A4FA50EF1BEBA5095045ABA7952457E62E4081D5BF01E34FA5D00D6
B30371349E91009BFA77876957BB8973AF5AC49C5FB383963A3220B4F4CF2032
8415B22066C18D84D3DE066D920D3EDA7BFBCCA8E99A035B26D05D07B5196BD5
689E19C3E604F93B012ABD81551CF0D1D32216CD51706D62B383E1A1E9F0D97F
9579FFDC844716F02BA450A3A1BA4C17BF640D2A0D6CDC1E2F959CA045CC9B7D
EBAC3B03D4145627CD30FA1985C46EDBE6E77943F3971A5A78A72C89CAB21418
9F649884B112D02049605DE1A1170E89312FBA7BC356641874EA0C63AA108CC4
4633862B102690CC79C7A5FC5B4DEECAFD111614267B7A44683D07E37FE2078A
720E590D8132CCA0AF6111AB6F4350B71451ECA03D553D0BE0110983D2208ACD
BFCD6298D880426407FE66C1F2069B3B6180A372DD31D51D8C3597275D7E5DD7
A8015BCB32E7766CAD87F0831E87C251ADB430B63CE6CDFE50A213400A050A96
0230095553782491A414555572D81B721FE7804AA8A2257269EA48C65BAC2E76
602093305408B9E4073542FBC6462D45076E249A857FC13D34B4A0D4AE6017F3
1BADA72F9F257D89E3D6A599CC98316C9470F6313D9B036B0AEAD03AB485F4BD
B403FFE6B7E942939DD2DF0E5D9BEE823AA31CD8CF8DB233EDE13B7502C2D471
A1F4559622D13DB68F66E68408ED8DA3441E2B05D15E9D4334B0CCA28532BB1E
7A6843C235EFB9383AB4333598625CC43449674B46683C0F9CD260499C5BB18A
CEA5CB687E32C4B1F4B7C341B3B18E6F2996D9A0280B7A81B6CDC2BF719272EE
A9C7856D2068293044719077552FCEA45178537663E0B0DD1698B9D1A2777ACA
D657DF714638A10C2C09CD85A9D4D71E03BC8B89881DD509E1A627E7D7B002B4
5B933534C0B4C51DDC50BE37BB6E42B8FD6CC4AADB82EA00EDB0DAB677F58F3B
24750B12A243BC4163FD5708E272C0A29124ED6A80075513C7931BB79C0A0515
17FD7BBF30185BB6A038625BF1CE78A971F4AC9D474F6141CA7FACD96BDBFC37
3E1E1F87881FD7BC3A7AD388D1961978ABA6D758ACCD68D7221181DEABAAA383
97EDEC3D996490A86B64908E470576CA8E50D569164ED4C529E0B69DBAF0A4BF
4B1448E888B600389159309FAEFEE5BEEE10BCBAF6B3769B667D2EE5A3923CFC
69FBCDEA39CB0686C5796293CBC9423D966DED4F341D225723A96091CF9297D5
62C02AFA682C65C411D784E143285DB6A5B5375F082C9A833EADEF9986C1E70C
B7700EFFAFBF71BEC2D6B8BEE40DA110ADA3FF7F79157204E37A4CBBCB1EC6BD
E151FED4CCD2D249ECF4B22B21842C8F86DB2D05360273E7B36E3DCF1C4DC905
B343BB72416574240E31C207419C01D265CE34E1F3D37687AA3B2A80FEE259DC
0D46EC30CEBBFA93D2D5ECA2805BDD81B248DC4E0507B84E2870131A55B77E3C
B0CA12010DEB5B132FD4C5CB8253A06A25CB7A543B33ADFBBBEC29E29CF2347A
A6E8172DFB8BAE37BEB1482EAB2DA6DFAEF53253549A5BD51D96E60A9444EF55
48E7BA21E4A1F7313C939938B4FE9C206494310E4C81D9D739DF88C655165C14
8CA55C7A193E4AA267BD076682DDBC8118D9EF07FC3A6FCA110011E93470499D
A9BBE01D0385CCAA4076092B169861541C8334BB3D28B42945DA4A9455103CC3
3474390660C14FD1D297EC9584D8B63A12D9DC4B4BBDF7677D4E6D7D0231C23B
6CA600A9A65558B9B4AC5B1A5173A1E104A98B6901BBE8D8C0AAF8DADE4C6B3D
0793D7B8A26FBFF9C259EC4AF81B5584B054A5EA05D0B238019816463C020691
8EE55F76AB2428202F6A1BE978D64A49A5B1B43A8A1E463235B276E342F24430
D495364A223F6D9A85F8982A7111DB4A7DAA696C71C53E37B16F50DAA186DD0C
099E81618AF2A19313E987E7743BE33FD00255BBA271A4EF003AFF094650AE01
68130E40718193599D9E987C17802C37E47BADCC1E0EEBC9C968DD3D190C1FBF
1F6C230C1C346ADA83C681BB8F1075C8891181B417A16345E3123DBF0736B5BB
FF6DD7965945EE25AF0F4EBDFA77169B783CA80E60F04ED9E86DB24B224E1BDF
7E607081AE0F2377001821F0BA940E1C3BA04E1E5EE9ADFA69B4ED1159207F22
F20F801677FE34169B488B076C249864408C6B00CFC7D0B6002D2D605D580E08
112CC5187776AC005E9F2A37C90CDA72AE533B4AD9D3A81FFF0DF3DBB8875FF4
1E05852C109E365515AC21C4095336D603BD657C9E1E33D6D49B313072024970
D5D9A43D572C2774CD903888DF38B74CB2DA68E9AB8C5FED8F17DD4E0226646A
2727FAB46CC681F60586C124C0DEA24BBDC7A67CD65AA53D6253DACDEA339537
18948E036EDC1F0FDE5E21CFCCAAB385F35027E9F3044CD8B0B261C229A3C2C8
9F64B7426E0DDEC4F73789601E45AA1AD9657A786A1B060B20BC8498014F4CD7
3667036281C4DF5182ADDFF3B7C23F212B2CE09E54A44F211469244B43065C83
7262649D39F7ED6AA3382A42858A932B26CE562FCC80B1D40191FF42EF52D058
ECBC2D37B7A8D05B1D00B2690BB76C39EA6587B515F5CAD0858001D0F08DA33F
14F167AE4F47FEC164D1134B43DDEA6F428ECE9BA632E4C439AB5D7E0B35306B
D2180CD198138A8A4A8327DE29F47EE26FA0401C5456071B3EB1BB3F89B77292
DB0520AA23DDAF7FD77CB534E74F590AC18F55EAF42B6D05A5791B14F0A5EAAB
461B7B4C814D7591163219389B0F490FB749BAF383477600CD129C1030E90050
D3C11DD57FE6B365EE94D92CFB878BB725B0E81E119B3C1DC388C25464FD24D9
A97AAAE956C340D43CAEB68C47B35C3EB08038F0F5C36951D7EB3E941A44C66B
2F08BF1AA7189212AE441D1E49DDB2C1221D23405797CD423AF11FE7EBBF95CD
CFCD5332C2667B316181BEBE76D05C12301556F56D22BFDB9912882ED7CBFDA5
1C0FCE1979941291722A40DC3E30BC962B5BE5C7E7348E80155787439EF62CE2
7FB2A049346C8F1199E124C87D385FAF18AC8EAEEB99B34D37764CCA28A46673
1CE18802F96732A98009CAE553A317E908C6DA4596B2AAE97E78D4F26FA58059
FA6144BEC7658C05E12BA3BA84B9F5F9932122CC04FEC35A0023F82192384592
AD70FFB4971F3715DC8998AC0E556F16DB74C13D05E062FF908EE17F26F94B7F
4A00706240637B9CC0720467E68E2CC0B1422ADE4F7C7F21762238B86EAB232D
16F067843A61D1CD14160257209F3E93AA6725F06321559BB317CFC3CCEA7C72
08EFBFE0AA2FD9ECA512FE31B0BEF8EB957F817C5699C7293E47DAA4EAD6D47F
04300C7581449B981266F35A1D775DA8BD6974D336DA8A0263BD37331DB4068B
E99D304F82B16B3597E8AE55B2E578E401BF708F7D4FDD2789F57A6585929BF1
028027AC82221A48FDAF5135B233283FECCCA13A43A6EC347DE384627A327BBB
FB0E12CD481F65157E6C50AC9022DBF3539A7787C192956D8F952FEFD4695454
0C3F0ADDFCEF47A850243DBF635B6A34128F36CFD3461612C970CAA2C9472E03
AE17D5C99624AEB7824D5B0A012A1FE6DD373D99C595012BD732FBA44D65FFEF
B342E4ECE4B4768B4A3124DECA1D8F48BFCEA0743A61C7495714783E9CB13DA4
06CE182BF5D95A135B9CFF91A00037A3025364DBA86784DE297E9DB5CDCA5A55
270487854D68E5AA26B3BB46CEBBD845EE1880FE162103A3C70ADF091372BF31
BFDA85EB7845336FCF19040B8171AAF8F70197E91B0A972678A8E98315860D63
EFE6178FD39A89056D91264002EA8A9A31D45A53FC586452D25A92044B177595
DF7CF5A6AB9E9C7A27946C9471DC16EF2631BCA45F764E4F48782D1CF82BE364
B0469D7BA9F2F1C45331C30D2D0F083CEAB1020D895E1277AA86013573D61FA8
65EBB3E287937147C9BE9926DAAAE08206175AB73AC6DB83C3B9D700E8C7F303
EF9E789006FB87C8277B02005BB170E5B47106ADF9B1A4DF6D0D5BB2B52A73EB
52B26F8F53CE2FD0401364D881ADC8455E0D6E8E43CE0F6622A5F119AEE2F2A8
2E2D45D4587486B5C8A276C074A1F51A8FAEF46319AB90126937F103BA7A94E2
7270B41AB70586880A7EEB24A6834CC1ED4EFB22B32BFC199714C3629512C6A5
711DAF0A3F09567090388054E57BAE66CE447123DF5C4349561CBC7B11A01D6E
CB0057E4133240C63B1F4469685B58774F0C92CDC8CFBC094FA2D39A046F77E8
2A8479D36538B1ABCDC040174E506C85470436B32F03940C14DF57CDB61135C0
1DA9A2A09C7581D00AE9851B126B7BDB0BB1586199D566564D07D976715AB3D8
7BA81F0E2E8EA0BF2233216CEA17A9C1AC42B75BFC767EECE17C65560A0EE408
69AE5463C510185BC34AAC67226177133AA7CD431BB679C1395686F4F22FA554
6410F5575B56D3A484AF5D02AA92F585986E868A53B43FC51E84820FEA672BDB
5BA9A55E13AFE32D6FE868DD449773BD6F624D2C4BDB1B267822B0ECC243DD17
6C2A8D53945B7239E2BF0CC6109E67D868A8CB9276DBCDCE0CD13F54F0F6FEA6
3E7E00DFD4EDBF4044F0E247D957956045B161311055574DD6E26CC3DCBCC1BC
5DA199C5150098DA93060832F8F2E125D61FB011C8BF9A79F4DF0F83D532C9C5
8973A0E77EAD540B306955B576F52469452A88622F592E753685F2A7BCFAE2C8
BC6D9A960E7416A6BD1DFB29EFE7464AA9D083F8A63723F7E5F750F0DA9C6BAC
A4A3EB6923C3C9EC10C2B121966B68A93EACD1BC5BB43C61558D3A84C8FE3AD9
613A6CE706DB90796FB0CD95E2E3A5E2B027C129A4047457D56024D95645ADE0
D95DEA748DF0BAD65293A63A397B46FBB2368A315BBEACC8CF72DCC362AEF9D1
AF88BF14CB44C210BF44141C72291EBB12D18BD7A0E9D6DA42978A983DADBA4F
728040D2A098ADCBC9E2717584EAE2BBF38828EBA49BFAC9F133837F22B18E6F
5159E7C2D7B2308E7AC8E65AD83AF5B0A698FF3A976234D3771F5211C1E91001
090A4A7A443D3CA64B3D00E8B27F5559C0B2CC64B17D898289FDAF5E1CC2EDFC
AABE8E6BE1F2BC739461D428AC334947D6C807507382D711094C0C8B3F9C0259
65EC673CDE8866FA7DEC6B90A1405FFB5FC64457368A472340E46521D8D3A181
F8626B1E0DF1D8545651EA776D5B77DA894861B8C01544C76C128632A537E9C8
71617C228A4A8F02721C3E802E0AF989FD869A2758EE44D5EE5381F494CDB21B
6C976164FC320F322CB6B2DA0E1593FD04A9768824045B88C5088B012E82869A
09552C199AE9717555F8C422617BE29C1D0078D5942D9ED60284FA2E8C1EC1E9
A7E0F3CC73CA87371ADF2E41205A1E1B0B175BF1ADE67D3AF7F5940E561FDF3E
C104AB6EF99A329238847B0590A369061A83A2975D6F29E9B69800B92FF1F023
B2BE5448646D1066B5794B901ACB82C2958E7EFE6E919811B070FF3787030A39
524954279E275DBB8EF3AFEDB91D2A74E12A72DA524B0F3ABBA5A8231299006A
C4CD95A1C8FEEE4CF11F941026B443ADA131B674B5C85D7268E2985F48361B49
71B17CEF5BE716B603D9EBF5AF03297DD44D4745427455BE9A926C7A8FF4F45A
FEACD58AA7A9F9ECD8B4C4E35656CC9F8DBC6622F6729EB829951D29150A4376
E8F22C5EAE00C1CA5E0AB1B1C4E91D35DF767DC4EB96F212992A1D8ED0E05E44
9B4E80E3395378E986B272F53A7F60270FB5B058B832E7D89480FD287DB8D742
D0F2179C2B7EDCD5136921BB9116855F20B0DE9F99A91FBD0EB078B1921F6DE2
9913D2B6F1AE4F6DB85E249AC1E9CC1E55EF5123584D5A3508FE86CC6FD9A1DB
D506B4699AC7D9899CD1C8BBB6BE999AC3384E76924D0A6D9E1D4FE3EF30AFC0
D06BD5518758D36F783EC76D0124CD1371C7FF825827FE2A6C008801304DCA2B
BA8F01DFC2463EF9DE9959CC5CDE05CA9B914F8749608248E964FAC5B76E456C
B3A80A4AC3F89150597FBC55DFE6E64786EF0BCCC0A15C2DEE572BDA14D8BDDF
CF2743A15F8A959723574C85B1EF68F2EAA7AF1A87A4C89E096B415A16080CE9
6B57C6BD029C1FD1E5EC6983AC6A3611A5046AFE2B4AECC3A2904C546D6F2ED2
97BD3D3A359F69CD6E48839412F9A6A7431DF5AF888E3C414F73321DC5FF5E0F
2C94782952F440BC614981CEA35234C6E7948D9E9D7B887DA21DDA65C70AE1C1
C49BE5F9B4863315A38887ED565CC53973875938BE310D0033D4C73CD6C95A76
CD17A0E2A53F5D63F34360CEA089E994C36CACD2E02DD59038F339A0799897DC
22385D1C16EB13D1F7C524C89B8DEF2C015AE012FDFD210D6311CC07FA763A1C
52251FD531C3990FC03BE873C1250B0B43545729EA9D97D1BAB0721369783A83
EE1F040866CD4C6C246D4A5A7C3B4CF4FCECA1FE4ACF98A0F30ABC3B57F9C838
D08CE835765AB686D2EC1DCE1B89A2104B3ABE61395BEAFAF4002BAAC94DCBB8
1185B62F9455D655B05435F809450303520496959774571975046E21F91CE293
B4D500F009C2ED820B75D4FACAEFA4489F22FB16027BEBBC9E01AA7172A8F67A
678714BD90C887E28D1A57E2B5531B227A3879412434F68276BACEC7094A474D
D87199D2C34745DF2E81BBEFB063C3DAFA4241664DEF08F3FF96A492130ECBCF
F7F3E58DE3BCCE78BE92F7955CE75D020391179FD995E5020FB2B56B488D0D62
8BC535EE760C253E9AD40B287CFCF642B945A85944A6D97ED4F3F0A28C8C1833
DFD60525A78B2A4BD7C5BD41778D1836533738405E9B7AB69DC77FE9A283B3A8
C6A6F1EB2B11BAF18374DEE98D644FAEBEF322648F56EA163320137AD2A30F9C
DE995E06A82E0E3D4D0616EEEE3F8749842EACD9168B620439F55FCA7313B67C
E7FA22FCB81A47034558B1004827BF9DE6F34B799C88E400E64864A9213E0A0C
BBC22A3CDE0856BD8640D2B9B1844E051A1DDFECE6C9A7CEA474FA9151DA64C5
A488EFD0D6F65F9011A8912FC701E722D7FA3E8802243901F1E0386C13007893
E5710855134A80FAFFA126081DEF3224534DF7CCDFFCD23AB28D932EEFF25B5D
70F45018920ED59388161E27E4872057819EDDD0F3409F4C6081A106519D6B3B
EB016EFB6EB11CFEA1E3EF6F42974E0BFBEE0F5F0FD6EA3117ADA2CF91C6557E
E2ED5B4CDFAB2976D7994943DAFF8E6C6A79D4E8BFF1463DDD942178D252686B
83DA35B444547DF7D9B7F9EA1DD690571689F72334058F53B09BDBA7F0E23C8F
5E5270D039B409D504203A431797D1ACDBB8397173FE341AE5D973CF63E96A16
488BE40066B4076AAA04763FB71D6C28247BE7CE7E7206C16EF271F9A2413631
598808E0F91DBA758A23E515E9F7BE7AEC3CC439F65980BBF08129FC9E798D02
102F63C3200E6C152A214B85D77EA7DD6CE114837E29501C77CC52546CB1CD75
FD3D866DE63393499AA5B89BAC5BCC7D10E4BC55D3E78A9CB5BDFFAE7EC801AA
BE09A13A368B3EF9C185CD6EDA68951673D6384E6CD12944F86D178D43A3FD19
90B6E8CF001E06ACD96AACC54D1CE78A7047AC407B81405F96413EFABC51DCCE
51FDE3A2543F97902E646A90F8D92534DA0E0876FA3C03908A72F3D4B05D4028
057EABED0393B637FF5A44F0D529768115D6B386C8099A9D4FE1D6E3E5D246D6
04E27CC42719173BB8A09294056D4845781957F928827AF55F5B82A842D5DFFA
8223B0312380FCFE5578A4F104E71242BFD727F00B9877A29015F3D725D20005
CEEE31443F1DB5CA98F15391B9BA251E4300CC9C9CDF103089D6D1864A0240E2
922ED987987AD6BCEDD7382241D8087A946368F8147A7C3F74FBCA01A952286C
C46160DE1F11ED73D6DFC7336E49A1AD47FB1C10977628F1D04A4333374BD99B
1EC6251C49EBE8530C132016D6CA98017C7C118D8C67F71A4BC3C8794BDDE4AB
9FBC37C05C42A2AF30EEA757DA4A7D78046F961B016850BF9A56F67AA753BB87
FA32AB6D6516C34C54BB5278DBE0C7AEF33086981E774B082BE739B428F46FBB
84732567078B05975B4625D5BF539E5C9D34D5963E24C78FB26E8171A2820119
CC673B84AC595B4E3A2CB97107F8DF5DACF00BCE930F6409136C1793AAD1ECAA
2A3D8B6AB9716843F33B7143D941433B11A9FEEB5D4A9AD899F9FCE549F41336
77FF06C973F989BB2DC8F8D2F0BDBAD9EF0C8CD4A01F63B6B2C6B6FCB93802D7
2D75FDCD58B388A5CC380114DB40B124C844BFFA3CA29E638C17FDFDC3D797C7
B904D64166FF0A6CD714C2DCB90D285F51C917B016C4ED3AA89EB3A7476013E1
7FD77F4E97FC05452E2D28B525A9E76DA45B4BB63244407ED144F005396A9747
913CEC3B0761B828FB65542BC23C6BF0600A7A3AFBFE040101755B93ECB32BC1
10671E4B4AFC712A882FD6A3E2F6D61218F8D85F126C5117C84D3B63538B88BA
401B0A31F3DBDA754F99AB033EFA5F1D4C563A493E8408D59EEDD0FA9A15EB82
4A8E660C2D254908DDC240E3D43343B7322236A8B728E5EA5A880961D9A4A569
4D8A1971682C22872C38184FD932B32367E6932DD2B930EBDAAA3CBD85FA1F80
E9ECD11883FF89173D8A8B3A1485339AB0262150726357352AE99726B221A319
649018A986B4CDDDBFFA739E7570C3819E61684A3B1AD507EBDEFBB74E98941A
10C637273A5730F497AA4660B58BF1F4B3D8D0CA2989F40BC74CB60856430F4F
9281086571E10C59718DB9C54D46A63B2F2CCFF7B5F5D0F26CC46FDC91B3F741
FCB3FE70792265218D471221E1B4C3A00DB4795B0E2B9A43CF86A729D0FF0815
102425A3F5DE1C630BEB5117D880F9A3A4204F063D3E3040DE776BE197283582
29BB7715E7FFA9B101B8B3D51AA1A94E23328D10DF0B6F29828B4E1C02D21857
F9F6F2DCDE2A64E24B7AB7131A4E8034CD95D61D915003C885E577E9ABFD2F9C
844680D96FFFD80377D8F07FE31158CB77F08B8EA37CBFEC4EE97DC20701B22A
3F138D3B45181983C74D74988251430294D2D51237E4F59E252E08A7BA18FBEF
0EFAD1E8DD22F550EB47D9ADAD433ACCFD96E8E28FD130637150619C0C7A674C
42178B3B15F246F27D1C736D9444BAA3C85ADA0CADEBFBE574914E4277A717F4
74E474EA0EFBA6835194B9CBC147CFE0234358D25DDA1DB8DEAC2673EEA08C22
2486E7F8F67F636F64BFC287659D965784B2C5269E61DE6602AD9FB72610F1DE
551DBAD64E55129F9D63B41DC00B38C2AF3AC04524104A72A1E460CA0F1BC527
9A99C73E6B632A49BF9BFC719035993C14F59971C543D9D34B29AFC9BBB03081
E8C4218368466946600F3AAEC0973B5710CDB53E3992F824882AFC219900C98B
50DDF960297D397EBFD1FE6D04D7773F7A808BA87150875C65917925654ABD0B
993D5A426CCA6BF0689025E0262E18D99F7C12F03E632798C116AFDCBF7F28A6
3D57E2C831BC9CCCA5F7C9FC2057EC431C4FA2D687A01E75B68765119C6127AA
7F8FFD3F98FC224D5E036A6DAAF4513E12EFA7E4AA3A5336AD7333C72D1B84DF
A64D5DD50D8CC665E39E649E6D3C362C6C002EA3132EB846193BF95F53C45F20
F85AAE9700192DE5FC311138896C99380A42D3AB886A91976CBDDD38DF68A97C
FBE2FD8141A35439FEA77860584D4B4E7E752DF1B596C3DC5F258FE3C18E2053
B5F459F81C1E6EC927F282212AF3650828D8EE2B840493B73D2C7D6C71A15B47
3B16151E2831630B93B877BC84F596797B16C6B7994384CCCA9D664F6C1C37DF
482AE09588E08314F95D914874830B1FAF45623C8EE8A78B6D43EB5E4B09BA0C
DC1384C85206CE57CF8558737C55E8C217A4C0FE438BA28823390275D6DB0D8C
C5AD9AB4DA0A64C73A0BA8F80839F0C7FB7B8DC35E974D5093D1CED51DEE6541
FBEBAE34C073721A97EEE2DD8A29811E6DB9448F1F0D84FFC5AB80AC131570F8
6EEED29B76612556D19EAB8CAC73C5F98827A69E1FFD0CE9264650AED8527E9C
99776BEC7931274067AD8A02515CCD15C244DF86F0EDCC7DF6AF141DB0089341
85634E57E1D013A5D1258C6DA4AD3060789D1ACA62CEAFB057A4D9B2A3FE194B
050FCB2F51A3D870675C0AE10DAE82C1B4B42F16D98297F202EC09F25B643E56
FA92BCCA88DD518FE5DEA06656176BF86FC2919CBA55D9B9809615C7841A100B
1DDF60EB2AEA78B0D541FED852485DD936D8E0464C67413E2012C88173E55F8A
94410DB2A445CAE9D658259EAADD0D24164AC33155180D09FDDEF65CDC64CC87
DCF6B0EF74A09EE9413D64F714A9BB7E7CAEF1A02DC2D2537DEB8834D4EC224D
14AC3F0EBA9D61E1A09F0091F00F1445C8C403363F62EC3E7E8A35F3A245BDCE
41F0D4DDACED6AB98B16BAB1E93A76CECF6F5EC347DD92FD373FB389099A7DE7
EC08A91721747124A6CC9F942A18FB29067DC05F7596ABBB337255EBFFDA27F9
4E2E4BD446C338CEC8012DF4B7776E283CBE99208497F62933B22EC8CD4831E1
F3F2DAD03D5EC6F36784F09E4746C68999B19367801BA532E669126B95AE6B71
58666CA61EEFBA3B955F5C9BC871992458CD0DC3D6EEA78F2B849F809389C51A
E7AAC52FF9002899819629028D6E9DB09CE6C94424944BD63A68E8102F7C4C61
EC5561996C7974127E8D5D2159236D3A94CF901F69C9F5F4CA2BEB05E21BD447
034FF6519A787DE9F4D9739B7D112041125A047C8AA9687EA9986211DE163D61
BBE8EAF75DD3AA9500D76CB8578A210150CFDC8F04C8F4A73D7586B663E5F9E5
AD6C0D954C43C7D7F33EDCE6EDCADE0957CFFBEECAC501E8C79FE8C1E98BAC2B
9ECD54E8D8ED0CD73CAA7AB664BFF6D515C69CEC94FABFF1B029388BAF9A23EE
4753D216E76F67B51CC0FB147960559A9F3CAC7464AE8AD7628BF78B174C2B28
F5754019C44C2ED9A51980728633A6E48782CA6E6E281AFC00A36A3C3757ADAC
85B8D81D68A7A5E7DE6B90C8FFF670F9668B8CB384226D854B42E1866F891E35
94FF7D18D397901ADBFEF277230D34376F35A3283BE740C9E158B6DEC58A22B1
ACA1302BB3C6DA523F5DF12AB650E1D5AA99997922ABBFC5A8E77C880AC59732
559148D46A86C6D872F4DA6251C3EF3FFE2854C703957BF0CD96AF8F6263E566
8FBCCB1B1C323C132899AC9150A04E41E663F9CE69EEA737BD29B2F4CB65C53F
F8DA5E51A6C9C1E7CC1CD175BABA629FBBD911AB975D6AEED778BB9E109224C6
3F2AB4E686156DF055C2FE499DC7433CD2EA8EEA6D022D72159A3B92B1047889
E1BB830AFF04976D10D46F313F6B2958FC89510D083291F311D5AFB68B701ACA
C052A5D9D7AFA999A0F6920F16BDBDA7942886181D24C233B03AB4CED0C73BA2
FA044E9A531742E626393EB8847AB1053F4DCD134DF4E2466B3BAE79ACD9FEFF
DAA19C6F0ED74F70B731FBA57FEE1B170DC3C811AB2A1F60394C911E30A2F8C3
82377B4A4CB0F128BF924CD2196CD46BA69A5D9CA0969B492721082247309D16
EC61AF078F6B62C8A1A91AAB6E830AFFE6BB2B7CF3D06B156E2A429C407C8267
D50ADE4FDD7075210993FC18D3BEA0F10C0E78AEEFFEDA563A918A5D776563DE
C798D5D1263CF02626889009E18DB728710115A706920DC379B47672C11E6FE7
2FA2E29A6110EE6A7CFA3DC0931FB87D30462C4B11CDCCD4131A090EB6CEEDAB
50A634F6C82AABEED418E3D117FE244DCB4ACAAF385755AACAE45517BAD24579
DB08A0D270E832D170EF244A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic12-Regular
%!PS-AdobeFont-1.0: LMMathItalic12-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 833 233 0
%%EndComments
FontDirectory/LMMathItalic12-Regular known{/LMMathItalic12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic12-Regular)readonly def
/FamilyName(LMMathItalic12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMMathItalic12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-31 -250 1026 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD11234369CB38BBC21C40020C4E57C
950DC4A5CD271B5530E91DBA55EA1A3BF584D9405556EF9C802B109FF1EB2B0F
C350D7F091E7B613B08574EDA3BF27099BC2EF0E503A4C4724614A73AA054756
A503BEB31E3FCD96F733D0C5815847DFBB66DE4968A9B389FC00C2146C4FF68E
076BA8B3847A3D8237D36A6BBDF0096290F1BCD02CC66B12E0070215D5D8306F
406DF7590940DE35CA0854D3609249AEA4EE9D3D377A7996C1CC2E940132A90C
F633C774985DCAE8E9353607B9059DD211265A0A346B1A062D80C64B5802A750
D9FEFA3C9920A3DE942C65BD08060AF33C91CFF62930F65F9A42F70B83B0E077
E169BF7F5D84F15D59F8A74BC2EE4A7F3ADE36F38C3A661F4CC9826BF73D7F02
D3CCC267927CAE22B5ED695D212FC3B669F9BE369B7A8D325C3FB9D552F175EC
29972562517E91E7B8D570612CC50B1A5CB6B94D030B0C60465EA21631F7A30B
44A47143D0C2F942B5D76384B8C3F2F197BB3646CBED3DEECB6513D3AD460F49
4BB874969A3663617EB537E75C1C1BF92749F9D147080EFF78ED285C315BAFA7
D78B7B4B8B7CFD1639EA303ACE986EDEEBA9350F92529C47EA7689779BD50CDB
D1B3A68B383B54B51F4FD77D6458F15AFDAB471DEA9909CAB29840091391F2EB
148588D02607411F2E802B9CDDFFEF1C1FFCC9EED0405371651ACF30808E8C57
682B734916EE806703B2ABA2F6910E0C75BCE10A94FDD1ED3E4FDA7857341427
CA0A4F7D30151BEB8E3D351E1E100A8A75959D11122C83A5C0C4C87214413B25
A6BFE44A42D446E9C4ADB1A2C8B962924F38EBE33CB1F16324087EAA3272C163
41E5EBAB778735C9E716FE3E69CF08AC86548A8FD6D46574ADE5BED2698E34B2
39BE8B2CFC423086707AD2510CDFC90563DEC9250C603439C7AACAD3734C2E20
89A27762BAA58BE9EB710C0C4158958CD6707E3DE6C99E7B22C57E18750541D0
B1B75533C5A9A08B17CCEC0D2F881EC7256EE3FB416D8D4D75C7DB51C8299B14
00E1242CE5BE6A645C2653FE55D062B786BC3C6651B099DFA54C7F37D97D22AF
A04E1FB8508297F5603D8DA70065D910943A34F7D5F2090FB4AA42ED70C4FFB6
FAD3E1E05C7DDA076F4DEB286987618DE993F0A25D913D1BEFA7D862AA175758
D7B3F037498547F9469301F9501BD996B8DD12FA1DE3618681CAA89D622F697C
25D6D88CAE47E6567488A918261595698D840214079A4071287493CF60835B57
D688D8741907B81FC89E6EC8F51ACB4086198D629A477E3EC8E73003B3DB3A00
354353B50C9B2DC97AC798D4FEFE2F2684E73099943D762D20ABC42DFCCF4ED0
E151DCDC6EC6BF825F9C769CD611F343C793DEDEFB0A2B195538DF45749D6FB2
6B8B04890816F5651CFFDBCBBABBA6FF78ED9C00BB1712A05D62932BE6D33A3F
ECC4F4608EED9656B074B08F2CD31FC681245C724A8E754BDEB9522A3182127E
10F30EFE00E05C08AA50EABE80B12A9556DFCACD3A22A7881910197E470E7277
AAFACA5FDDF45C88DEB19A25ADF96AA92AED7E26BBB3BBAE3D824D1B64CCFDC1
111183811EC78038D8521F88E524CCA5752AAF92BFBAC68A88FA66C49E1490EC
01CD9CE76D8C6F0A941885A6D4F83425F464433417196582EB8D4E55373F4A5B
8F17CE81630E7ECF842AE791FA95DD7B4A3436ABF3F7F2A9B52C3F85FED4D97F
85786902EF4E17296DD00894038240102EC06FCA76CF173CAC3ED298828B6DCF
A25F15FDDFE27E71824051905AE8589BE7D9F22523108A1ED536B2B566A6F5B6
7AB968DBDBD08C993F0AA392F9AA50355B635B86405EF270A816607F8AD2DC88
76F311EE942C8EA276506636EF726407D4658D50FADD240B3CE8CC36CD150DC4
A4DC981C183130BD88DAA11D2451B8B4B073D18B76E5F4D8EF26FA06A004142F
FAA3B6ACF0B961354F9DDB936F2C73C89C04975A6823D55B4DD63FFACAE346C8
CBDAB906DD5B174CE77C1BD76BB52E263A7E82EE94B98E2717C72377A5A7E61A
7B502A725C9888F8EE35119C43CD7F552B30C7F79C4DA0635EA88C8300063BAF
E6B7DC922137D794F4819E0E0143315752FB3ACB1A856572A8C3B8A46C4B2CEB
4EE53BEA9C33B4BC5BF82BE3D0C76736D0DDAB2370C85DA3BC64A5B11CFC2E51
B18C36D3B5F76DC69A81AB8DA5E2AF994E900297286A4FC264FDBD9B98C4743D
1F82C1BB1A44A39E7C459E9381E3DE74ACD34A1511247A4B933F5F18DBCD63B9
5630AE37DC8B4D8E4055442A3E253D3139120670422EF1644E47236F84EC9B33
384DE091516C3B48063A5DC5B11F5E5D7A41A3DDB0F298EEDDFC4B8FA1361D0F
1A93A9925E68436B7D02A538D03D9C78E8FC5964DE166B2E3557C242796D1FE7
24BB150BE8EC85D623BDEE32A40C8FAC249ADE43236DD9D2CC5EA333EA109C2F
AF66592E97334874F7489854C877913588BBEF293BE9545C5D63139F89C42A1E
30AC422EE0FCBABA7CA109A5BB470299F568826B3440C5D0A12D7F6F84E21481
BB54DD1FFD5A9CF5927F2C703107E801B4B2F1CC44FDACA0C3CA4637D2AEDBD8
53062EEF28BFABD9C3ECEB1F0007448EFC361A35E0E1DCA185E981A741C0FC18
39A973F77E6B552B95EF97276EEFFB193BE9921F595EE789228940039F5A8433
B6F71F61B0276066BF9617C12D58B02973793D1EE9C4B688139E94268BA6B12C
BF97D697414676BF9E584ACB9F3CF0662ABB8672BBE76816F52E70EC6B579507
7B58F5D2C9DEE4E609E591DF15BD
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E30CD562DB316843A053F82CD8E6D7EAD84B4C68E74FCA43C0A00C038B
B32C43288B1149ED209700A649B80FE0359DDB6BDCD292EE0320B1B6AF5E62B3
58333483A2C30F1E6F2D0EEB83478AD15F4FA999E8ED6A11315A7926538D22E4
854A274C747B69C406E4D95578B4C5A9BA10884C31535448C20AD821AE51FFF0
51896FB41AE222DF8A67CD805EC55126E6573B012EA2371452E23091C65D76AA
B3B0B477418CA25C0FF5F0D840032F95D39F257C5FFEFDF1E309A23F52378FE5
CA9D10043E0DDF5406C0316645AA6A33D09507BDF345201376AFE24ED8E855C8
EC0A4F120D08DEF0F19151DEB13BBE9608B43085D30037728FACF47F997C4288
AA1C8CDA5E3C6F89AD4B0309808E09C27EB562B2CFCC6C8E30F658A9095000B8
CFDA02D8996B3C557F2EF9182692255F7A98CE9B93A645D54A017FA30521980A
2F726DE746529049089B6B027057A685598D8408D1190424E34A664631E00C17
D80842A8A15EE28E5772676DF8F2F603F3442EE12E1998ABE5F39E7D95DA9DE8
FE516923D8CC810E306A5D58A08AF74F6FA4FD574F36AA2E64C6E1AD1A4021E7
D1D519B7A344550A1D33ACDBF5636346E0A2A60A0D4F4C8112ED925C55E4B0DF
0E5BEE4B29E5DA8177D46930F2D47D3BA57A060FB9C607C595D09538788D3BF8
87CE3583664AEFE0C59EDA04A147FB51227A5AB0C2E26233F880D7134114B90B
48F831E2715B72EDC5E691A856B1A4B34400E668AD8196FF59D705A0D839EA50
9F4B93AF550285DA9118CF620840DB3F0EFBD8013088DF117BEA075ECA768846
E38E374DE01977C142E0ED10318333382EA00A259066AE6C0078B7695BEAD59A
29D4D73780FA7CF848EE3B46B2150DE67F616FBA22F823AFAC1A9A7DA25602AD
FF175C1ED1EAADEC439EE105C467F05ADA40D38A9C18114D2952D05A84180BD1
D23E7D4743E1A9D59383ED8D97C2A77894DADB216105AC441F7546AFD1DA2B2C
9D1B1B0FED72EAFFC3A476F7ABDB58F5A95796201DD36642B5A8BA107BAEA2B7
086DC2E48171F35CD7820B221FE0B71A0CA584024C964575599017F4FA30CDFC
5AB855D56C6B1D3BE08AAFE98B384CD6822540D36BB2C736225102573D21FD0B
03969BA7FB7664A2B8410228067D8E5DFEBAE3F022EAAB02B36EFC61F47D6C10
1972BC861F80C36AAD3511F899A80C6FF769550AD34A047DDF4DCAD48C79C13C
76BDBF5D30FB6EDBDD8D01EE519ED115AEDDE1691251E0F6C1F488A11DF9E925
1C0554FA532AE3CF6B4CC4929615495850B3DBD091C7D41B7859835D08CF0AE8
B33B4C98445CA5149EB72643B4AE1AA019460EF176E32C8BE8FBF8318F5855CE
8B014A3023A12C5B3581D8F40B3800EBB6211CE96439F83C4DB74A317D4933E1
E097ADD00CCBBB9BEB41C852C0C84CAA73F4EDE6921CC9B28D1937122DBF5238
D7226EE6A4C6526AE5DE9F8871D125317E14B83714D18F84E5C4E50BC74E43B0
BA21DAAB34F2A1CD801662934D7876C663B79E1B4D098A5DA5939BFA435FE560
60110EA1E9FF2BCC9C598B1E89DBFB2B7C07EDDFCC655BC55C28705A1144F061
BBD026180B517837886CFAC077EF784B2FFEBFB05490E5231E496914D0CFFF62
2D232B1E6293D7728ABAE45C678123B4BDFF5BC6A4897682B3C9EC9D8480AA06
6F41264F0AC879A67E1B0B621CD8572B3C627DF7413A88828AC205C816FB7FED
803064219D426600F449B477BE528C3667F06EC5479B0824B87C47E9A792DFF7
E113E18F1BB31594F476D76445B4E57E8C6BDFD991C001C437B231507FF515C5
784507F7DA114799A75DB103C3AE71702350D62048D1958D36E172FCE15CBCC2
B4B15DA7F10D8DCF4A96714FB8C4C3BC2DEEB55D6E64436B8BB1659AD76F75EA
F78BD0448B58A297FF423AF24B9E1D2443EF397EE0AB134571CDB1E0A09CC858
785F2D7FA0BAB86CB37A5DAC995C08447C1B7DD226CFBA55A428BCD167EA1DC8
47519246D4E2DBCD122E040A0F8D3ECD9BDA7745D5400AF458F491BA1183298C
0A256E681FC14F51BDACAD222C0120DBF1A84CB7F0118C915F94A4CD04F02CDE
3FE3A2A43B7CC317DD21AD714C92EC61C534209930D97E942122D51EF24DCBE9
49D1C39BC36D89C968D989CF9A3168C3142E0768707AD21FCE7AD760FD5C72A3
A56C037F78D6C568F714018A9EE7C967D6FACD5CD1C2419D2442E180E4B23075
2097DFA6D5DEEBA86DEB42D52EC3575F8374B2AF813CADAFC1AC17B04381C675
4327FA7C65AEAC1A283F44DC94719BC63DC7B186F527B1BAB95A33180B0AEA39
83A51C08D9C48CBADB1212E15060265B49FF4370D6687857D57A34CABDBE4B0D
8667BF0FE54A8E67BABA6E44EB0771512E7D7086371BE3A8E4186D7E9618C73D
64E4DD88F234ABF6FD9A507BD8813B20E099AF3C78C6AB5931B0AB096BED4EC0
A60837CA6E517BA71F46F3BA2F3D1C14EC30CBF83E5729F1C074D4F16F9BF3EC
920769DAA49600CC8214C53F9C312498ACF17E1FA773A0D9E6CE4B03172402C9
9D6B38EA429C41D600CBE05C9289D4A14E99F1622F25ADA5271ECF6D1E90D208
744A52E593570C6EC8E49BD41ED97931419FE2FA9637DD6898F67884BD71EA06
45F89E12CBD6ED25B66055E56D4A8FB3ECB4BE8FB8D21D943D332267253F7CE3
745FE9FA4FBFFFCAE245A23E831BFC88980ADA37E382B549903534CC577FBE9D
2FBC52DDCCB93F3F43205F6C7A1F1D0CDEB9CBABD7CDE1BED4A5BBB4FA8371D3
C4FEA5ABAD50E992F9C8B30F95BDEC1050FC5006E25BA750372C86A036185BFC
21BF84076A04D180892D9E1AD5D37BACDBCEE97B97156C9B6A26BAA076116C1C
2D27B9DDC03BC852C5D7937B7324AAD59D6E77D53634C137AE6A6E83FC0D04CA
55D14AFE2B2DD4E4EB5D8B7370D2FFAAB5BA1013209625E7B22B6BC3946C4099
D1340D27C4479C144AFDC37E4B213979C77A24D5FC81E9B9C3FA269C8553905A
0D843584273053365758F50534E61D650001BE80A48A2B186B54F6F4383F7796
95C9A969DE58BEC9A6FBC5BF379C629B518FF0C15C4187B5842159C81908B75A
212B0C9AE8480890DB1A817C856910A5FE389B1AF013EBCBFF2969E09EEC7A3B
A6E3B8BC7A608411A44EFDCD3B7435B4A9F742DB2A31AAA7432D7D3B52A09414
0E4E4D4D4868FD813187169DC6ECDB5EB835DF7B000BBAB0B84DC680D10B4C20
47DEB00A172677774217ABBFEDC33DF60D19740EFCDA2034A6E5CFAF53CAF1C3
1EAABE44B4E65AC2376018A785B966F2F872151505BA71296A18E04AA75B9AA3
14D45FB1BDCB0EE4A8E1C6763117EED34F871C1D6D7FE26FA0401C5456071B3E
B1BB3F89B77292DB05270F7D9B568E4D43485B8EC35101546D1C427FC2343D58
E795A988482D22A585867F2B8469A5DFC4AAE701C1AD95D0D857CBBC9A494085
80D7A5BFC889CDA4EA23EDE4F0EAF845F1C42E9EAC8E5E51949710ED727C5D7E
7F30572C145C3A7D01579D8C6A3376B918772D7F77F992BCDE135D22D820DD84
6E4D23028826312F07F715DB71447AB5591E6BF8490DA0C23DA2F68B49938616
1B4BD1FB24FDDC528F6A3183BF1695FFCA78165621EC8AB15453E87808A0FADC
FF523F04DB3AE66697F55CC3BD66B83EBDFBD3B6C69E17A074031B8EC4BFCCC1
6DC273D4A01A3FC49E7412C49F5A4D5B093C97A469BE32DEB307102ED20E05A2
40072203661C62E8CB19072CA76705E81701A8FE9DF1AC47CB3022D3751E6B71
23FB71403E154150FB73FEB3E74179B5AD81C7712E79531062CA6278AEA5D256
9F321B44C355EC80237BC6925E38CBE6CCA897F92A7816D89993DCF79B692181
5F91D370FAB743806A2E58AD16EE1FFABB11F5F0538FFF578A72D91AAE3978F7
6AF912A734A181D8BF6F817170C52BD78B7308176C21A9454E2578A3AE04CAE3
3288C1E140DA40049190AC28EB96BF7CA84A49AFE73B193873D837EDDC84C673
E268E380CE610E6D9D1972AFB86595273E193C85EC28AB44A60E6395AF687EC8
8E429815282D63236607DA3AC8ED1F95FCB151594CD686B891E16180CDC03DD8
875EE4A2D086186E1DFFF295901F077B32124A22AFDA54C164BA4DA424125D17
35CDCF888572C3D4E2F0230BBBEC6D2FB7F1523133DA1537C79EE63BEACBB063
6882BB6465298DBBC12087570F4CB1612BEFA1CB71BC1CF84625148EC1E6E2CB
48355AABEA0D1067FF0291CEBBDDF8CD36C145CC25F858E34B6D27E13A4E773B
8D621B26F4996BE395A5D247A11BBEBA73C5E364170E0D91C3AFE9BF754BD167
7B9620CC6631A369797125990858F997E3469C0589D714E5BC01BEA21F193023
D02D89731372CCE8FFE53A1FE54984DB1360E320862F2CA6E02585012EF62755
3081FA9CED02E69B4C058DEA4F847FE19CDBC89F49C74776392FADABC7A72501
226118652CEA451BBC78B781EF298DBA6CB1758D22EE8A7680B01DAC100EE115
B071BB90419EFA4512B1227E6D1174CC7D3D57B60BD60DA9A2E715D31B2A9F95
A6306F7D5261C85D4A0552E3F4637E52C0CE533016DDEEA851DE7E5567C54991
2D4B690A84EF3A2C0D17C269633DAE67C713FEA091BCC4427B2668523E0FA5EC
09BA3FB68C4C05147AFDEB6BC1B1639D45D5A0ABBF1FA44FA6A5D7779A5031AB
41EA065586927A0A136D522889627824ED0DA1BFEA292DB4D908E59769CC1FB8
3B0DEC0F494A42D1103D2DE1F3B3426AE6401E8A6A1988B04AA2224B995D6BAD
1448D45D9A27FB2E2FA4335EF6B9C7A662B575D8A03AC9DEA50CD2F0D1CF2557
93E8AB02E4B39EA6F577396BA83809446D5015C945F1AE3CB1BCDD4120E32EDA
191C183041B13A105DF8C49FEDB8417E2BDA319E717CFEFBBFEF27CB03A03E7F
F21E598B73BD532DF4D9AFBC409178AE6283381E8E847C6E2E6ABE73AAE33BED
EF02E896B4F3258CF93DB64B7D1A70D83A06C101AB379CB47D6A72839E73C839
A9EBBAD493D051B6F151CCE21CDF95DC2A70940F1B3A25714419B8C988456CCC
24B81FAD59AD71A3EA6BC2AFC7DA8C3E0D42D357AE25A878133A558079225EA3
E229689A400C8422C933BF33A8DF702D160C3450D2EE151001E6A9828BFF34CE
9E8D50A09530D29617D1737F232FF818ED3D21E158EDDA88772235D781043CED
8B0D7F0BAA3C59061728EFB3E1317CF247224ECF9FFD37BEA52F38053D427DA3
EC5D297AB110438F9AA9CEDA8876D77B523610F60AA52F893F9E9B333CB7FEE6
396B6774BED621FA514C6B9EEF4C5804E7FDFBB5D0A20D24A42E92ADA281E4E3
4420D1FDC40E678BC42FB3835475F09A854809F7B7B2AC0F915A89AB253EFA65
3E29CDBE7BE837DADD02347E6B3AAE64A949E5C87CCA39AE1F17BCA3BCADE7CC
6A62999A6D5E428B4FA636A6A3152DEA4677C0E910C3E5633C33C8E482368140
C93A20EC2FE9DBE19F5413CB34FC9A291B417D0B25542A15E35CD68679657332
95C5061ABCD9105BDEF8BDD962074C86C27A71871EC95BBDAEF679177325A6A1
F73600C5BA6C35FB669F3FC20F0982F46211009390C9CB039216762900C1A624
AACA506DCBF9AC0D226D7400AA317919026F198BDDB71847B77FF4BA89C15EF8
B7D558359FAADB4C33EEF1BB68989E41FD8401DE1CFF616843B5D481AAA4E046
4F52F36DC07ABAD3F725A7708A95DD05B75831FF3172069E6700B37C86688FAF
A81FF6D70F70BB6CB4CD118419E5AE7A0C417CE93EC6C6403DF51ED84967E7D0
57B246BB2427A14B33842864731E3FA4F77F0397CD075EF9CD41082CCBF63E84
9C48835E105800DE5F31C9B8DD5270A72725DB46EA6B672C3C04BB8EE3C906E0
4EBEE5F8CEC3FDEA36B201E774592CC4006B38BC29504830F03AEA815ED1812E
2D15E5335915D1FE9BF00955FA377DFA6880F5D6F64FC185A3BC3BA69BF5324E
0E2E64636F77F4A0CEDA6815412C9200C5AA05252943F87CA64CC2F7B1F4298B
24B4FC62AA06FDCC5A73DE9AE2932074325629DBE7BF3642EC9C7BBDFFC7A21A
27D2B5109E5B291B20B85791FE7902CCB4FAFD84E21F3F8C10D57DD5E2D5FE45
53ADA5745AE8EE1F8ACD934D8DC4965F27BF8327C9FE55B586D057A5B67F9729
7DFCB23B7ABB3F13781C6F65C00591A0DC2601FC4F93A16704259C56C31EF2B8
E056CDAE4935075FCB35CCF791DC75DFD7561D55C9E03EBB587B340A358A65AD
DBE9EA3ABF255870CD61C8CF7AA8DE567D174EC90945404C5B9CFF95A9296669
B1AC6FBCD623AB4AF6DE5CA80F9098F4DB64A6EF97AA88A1AF3326775379D3B8
E694DCB2CD17CBCCB321E0DBB1291EABC3419C009A5A37506BC272CC6F065C9D
F33A73898D0891D1AB821CD8636B2F07B1DD3C962A0E74F946EA19C26B2B56BB
AF1D727BEA6D6D08937CA5F4BECEDB9ECDCDF94C70486498B92E1BDC94104398
414313C3DA64B8B5CDA5D619E559067BC2EBF3AE6012DBD85CA66FEEB463995E
F7066EF0AFB220FE1C336CEF334C554737AD7D5994236797F4308F037F647570
09287F5B1708FD0685C575449D29B51B30154E150AD128F2BB04A721B6B0C7DB
E1AA6B43B597550002B2737EB789CEEAEC56A35B878719C1134B1DA6B14C8601
41D7458FD6C0AF612CB8A2CACE0B6688CDBD0567637ED0C43C375DC205CD8FFD
81E90BBF30579F13EA06A3699DFB9A3B31DF2790637E4375815EA4ABE99BE732
D65189A5F3DAD4E176B50DB98341C8D442F31C7CA70CA4411EEC9C316042736A
73C196D8618F85AB3F011E787205BFE6EFEEF0934AD0C63700B4526A98631477
A19FE5E168BE8662AB31F8140BF306B6DB4C98AC32B4A9BB38C2934A3D4AE5CC
71BA9B8CEA1FEBE62D888E525888557F6A41489A9AFD645265013E717B3EA1B5
6DCCA040C9F83943A27B5CEBF5D03BBC3C2FAA19D4E7C58231807317CD335107
B7567E147112994F68FDA0005EFD657062B91F8AF6C5282908CA315F95A1A821
45D774FB3508D01F3A45A993352FEB8C2FD43F2C55667217158F77A1CE3283FD
C1262B4249BA9ACCECB8D53121547AA7528316AEEB13219DA6C56D6DE146AB9A
884D3C542F83821C56B4F44B70462F9975A6E314A6F3E8CE82B51948814A4A16
BC094BAC1BCA0CBB58CD8785C27DF4CDC435ECAE7B83423198A06BEF117AFA0B
6694AEB936C2656B59AAFB74F9E40E680D890903458CBAE6CD861DD61A51A359
0C50FFEF722E382CDD254C83913FE40F1D5D95616CD93B93D45459AF43384C66
A46105DA69068F98C3564F42D2F7F26014DE37C4DCCB6B30855A664133801105
A77651F118824F6CD00209EFB60C1EFC43A74DA16147589A2D3DADDE9BB1A63A
4047EA20DDE11744A0B6E3A9A1704083D27D5690B18843ECD4207CD712CA562D
63CFA12F8768CB3ADDCA5046DBF783C781A40430F2DD10C8D37E7BDCC2C000BA
FD7AC199BF0B5E9AA216F488B4985981DDCA5F7DA80BD5C127A400036ABE4025
86C4362F28085255591314013EAA407CE29B2B409995B5EB6A88A30FB007D57F
EFC2BC98587B7EC0DEE2E7E1A65036AB0B6CF7AA892FC8E6E9E290DB601006F8
ECC930DEECC72781066085C13AF52E333EECD4CDFFD54B90CF0768E577C0CB33
BE59FE62006C888864B68E84AB3FCC5AEF37DB709AF088DF321590915CAB7A9D
15DA0191D78DC4590CE16A1BED35FD9F4FE5A16875C4DD2FCBCE8BA8A0360B28
CF7902E9CB2DD144D59AA23A265D273C60C32D8DEC992FB93A9E7A3C3B7A6662
0C252C5AC36AD21A368D84EF4C077A63A99DEEE609E483D00129B815A64EF273
CA7BCE2AB75FDFA0566AF29195C653FA085F712258B8A1B9AABFC27F1994E0CE
CE14F76A594D3F32391C040298C4B93ADFA2F7DE9B1068A4AC9924F5FB36EFEA
483004AE42C6B099C4CE1AF752E3A7B6DDE7BDFFD0954AD15D9D208725889C7B
8CC208D4D5EDF68AA64843BB9A1C2B658D086D1A557A7D64B43EAF4ACBAC482D
06AFD458F0DC3F42FAC337840C73294FD6273F61247E9B350B5BAFEED9507033
143AA22C166F6DAC8C06E300F09378E5799447FAEC326AB8C50FF0B3D86FDB25
E5CE3CD1E1D48A557EDD713A88838EB78D4A0438B5941973F2D74E66F11F3A19
153F5BEC1DDDBC2AD2B526C6CD55B427B524171AAFC6AD4393786668E6592563
A03056FE1C18E6232BC798A177EF480FB4E80D0BF82E819C925254830DA1CB09
9A6F8D45C8C0A3C14544F068343D3ECC39B6820E335081811856DA4425317A8D
8DDE3450CC30F037242EA8FCBFA5C347D5719BE51EA4DED86D7A4B06AE62A277
1727EDE0A970FB04FFC130DB27879AF2191145B1E926385E9AA0EE7D5F347643
5792033AB924266D8734301BA52C5191CD784009D7EE630434645AD290F47482
AB1E4868B8F24586CFF58110607A91F8615190DCE9A8F87B4EE44DC1B8591FCD
D83C1A9473DDF6254C62013FD10333512A41B9C6A30A41A99E5E09087A89E255
BCB6B83201298C0EFF23333F26329C3AEB150A340CF2C6B6E847062270D43067
621F2D21847A702489B28CF62768651196F757C5C17990A8F857C2F54BA01FAA
C221D701C67236E08C7A52ED3E5141FC64FF28F1CA6D4F1BEA1C640181908250
B57ABDC0981C25E3C081E278A3AB9359A878A64E913E87AA2F473672BFFE79BB
6D99AD5AC62145C7A4FE583CD9C05F09503641E0F8A3E731499ACF32234894FC
8C334BCE6B87578A6A51A6906CAC83605B885FB5C33D62F1029F9A94998C6CB8
FF16BE236DF6E6E827A2038DCF160C2BB20A6452ABB966B57F677A92DCCC2F52
2920AED0E939A0C0F04FD8DC055A807F57BCD3B0F556B5D14B64DE244E3A916F
3EFAD1B4BF55BEEF99C192B0437E9B37D21481BB42DF9F34C5E80B618FA651FF
65339A1A6DC3B27ECC2018FD2B609EAD2728D71DBB1707B4DC983157D65B4FA5
262EE96F5E8E2E8CB9BAD8698FEDB7D381FAC3EBBCD2DC47A501DC0873052263
5B0AC5964FB0F37723C0C4BFA4DFE3FD4AE99F5A8595EA873ABCC83406A402F3
A83FCE9918EE8E8D4BBDEF36BCEE4F7D30FF26A1AB03592F9372AF27DDEAEFF8
B80E1A4E835F79B7190C1F0C4DA4A69D35761E26626ADE85A218ED42A4E04D0D
C15BA4F0C1D12F27F5DE5E37A07F94A89824381BD2DB9CEA4707B585E4DC92E8
C21C1E6F27E6F79CC6B79DF8CEFDC0FA2A5E0E6CF8C3A48AA4D73240562A64C6
13C9F61C1FD5A30B240DD1FB8177DF56958D8308486EACAACC508B9D267C79A9
1646478075E259E86B79785476660078A3C0362C87214B6C5205D7B59E02C96D
58C85D379F973BD6FDB5D9614FFE4770E2D1412FEEFAE0C938782A18FA9A9882
C955044A55AB970C2E67308B6809813EAF27D51349DE00E3FFB283B1F17EF141
273D342D74B1A09188847B2128EB8B139A5FB3EDF223574EB5A16D19A96D1D48
EE4A4D2A535E365BBD7A937B24D14523A181350D6EF1F941C0185B6DCCAA31E6
7DFDC33E9675CCD879D1FC8C8C944F07374E34A64DFE669479069E13E5D56C3D
F279D392D926F9C979230DF7CDA80DA5853EE294F2BBD70DCA452881BA76C9C7
F25AEBFB7CCBED053E6098E23F85F556D4F8AF4636303DDD37A8AA4709C1A1F8
28B222B954A987E57B85D56DA207C999CAEC4C445BB1B0B552E8C1477E3381FE
06E03BA9F1BC28D527BFB50F1A7BFA3A94D6A134748872439673064D4FD1BA5C
41A32A2CD4E06176949EC6624EF65EEEFE02FCE0F2042AC372524BC172C6BAA6
65D56A05FE6A270625DF8ABA04200678179C920071CFA9672BDF5356746638CD
D9FD68E308DDAD1421AE945B60AE3D43E04691EA342FCB2623DFA6BE42AA1B79
2D1FDF88FA9735C944C04B919B7BB6A60DD4DDFE233D23394E6966BB1DB680E6
E63029FCE2CF0251EE1EC69968D7B0DADF133520A0F4E9933000A0710759B6D0
7FA5C17B7ECD8A92B9ADAEC8C69AA2BE70170825BD607A118072DAE9C7FCA9F7
EA5A376A808EB33CB9E6053F9D125939BB511D14C6F5A1FE46E885881F02EEE7
10E6FDA5A624056475519E20504721F673673592085CC2A9FEBBAB0F671B02BA
487CF6B588EBECD26F9BB7E8DE0E1B1C0F0B3DE8582E22D221142CB330B75833
6AD62DA88173789A9BD47B5D0DCCCFCFF2C34E70591A1A14D96B2D4529FA3F77
3B665ADFF0135A65ACB5311765991CFCF921A9B8728BE7045DF33975EC34387F
5E4BC4A044FC1DF19CCF772CB5742104AAF7F6B37234BD3256784F9559216EC1
0446E70F07D571C499F175A0A71B8A651C0257EB149E2D19C21EF5F5DD745F32
3D016D893B519883ADFD239798DB5F75ED2150480DD677F5CCF1CEEE63525302
6DB8C38AFFAB5CBEBC7567A0330E68DBACCE1DBA64235B021CB46AB683E3A36E
B6DBCA51BF533F4F66EE7C17344BA5CC8E4B3FB29F2DDC7EA1B24FF6C382ADA2
F4F29EEB8923E618E8B15DC7EAE6168253C97322A2D9926AE3E17CA208450468
258082D6400021C593C24758B9053C9070F96241E324DBE45F66E1F2593276B5
0E82AAC0F3C7C84F3D397E25A739C61C084465A5E6E28BEDDFE1054E364844F0
BF03BE50426089EC7071143F5176B4A6BF72DB85657F4A3558D4585AD1918E86
DAACB86237A30C2FC213EAC75A50B61AB8AFDE8A85854A512F7993C85B19FC11
B97671068172F99A7F085D9DEC3446B13EDD8DEDA104BAECE43AB290DCA2C64E
DFA951B6DF8ACD06240D1CCABC97F3829D48F5E78825737DE521197EC1B3129A
7618C77F6CED9F0A836A180EF459D1526AA7AD95A01FE8C83D61D4BFB90D4C85
EE83847C478012FC2B351784108F18DB3ECC698A6A7443C25C291BF7DC9F2F67
93AF6603E7BE95D2B9E8B9F50EFE02A94198A79742F22B2B54870AC37B86DA81
CBDB85B88EF041AC4F773ECEBF511A27D667AE834A96925698006601802F57A7
CE109DB0C939EB45253B4022AB3359D2EBB743BEA31D6A4AC8965DA246D11B29
1C3F9A95353F31235306174FB86C755FA79860C1C2C5C6B21B02CD8195B2DFC7
EE6E703349515AB10DFBF0BC3B537C3B1E57934EC351A8F81388E21B5C084E19
F5F28704CCA9BC6F5B8E11C7467FB293CF569C85F742828DBD3A572B5C21DFF0
8EA7AC126CDD7FACE8349123EFE3513D141C31DD7109BCA7E9DC713EC2D1A29D
088F6F06857BBA752FD2A7D6BC309B341A24EC7F9E54E92E75E48291ABB565C1
F8644CD5D9F018410C501D46E821750FAFBA1CF306101C7D563C43EE33FD024E
4521C755D34B49654CA7AC01EC0550084F4157202876F04BF1B180B36040D8AF
94F0747C51AF4683ECC9280C98EABA19973BB596EEB41C7FAAB530481B4FBC95
FC29FD565D68BF89BD37A2E4A0B6BE71A47B68613DD77CCD8FEB297118A6E7E1
02D5824B95586D2366DA505C7E6290AB1C4B10165DE8C3E9109949A8FC60CB1B
432829698D0739003C1D8A041DB1EDB1CF471B02B6CE6EB599DFA54C7F37D97D
22AFA04E1FB8508297F560363E963B61627ECB39D5BA7F8E095B9F852E5F33B0
54508A678780D69E25CB2C0BB3B0C945159998A4AA4E2F300F1290DD74D63552
0606A6BC978B65CCB6E8BCFD8FD9344420B92014405AD0EF2B7E4FB2E2035610
18F0CE7686B9000CE1B55B2F5B035ED70817E8C999AEF82993A4B606FCA81945
5105F6E2E60A245B3939415E3709B1E7469B9FD1ED07778DE2F62958FF409D37
332AA4BA88CDD3E819E076E25C4799D60C2CC73610B087F668AEBDE9B0B83EDB
80685331C5C5999B5AEC80E5C6524D974983E0858A1C056D80B361F6C2D8C97C
2D2A77E09104B5A088CE4EEA322DE7913C69605359F63001186121ED2900969A
A8379C3AADF23AB9DC687ACA989BF86F24F23F68AC87285AA5A62886457112DC
04A0EE3D603BEA4173B00433D2107D819094CD8E14744B571776B1D9BC9C5444
ADDA8DE3F6DE36A9BE39D7F0E0E5A2CAC0DAFBC40857A0095EA5A9E1CAA5E94B
0856CE64E50BDF59815F419362B9ABBAA819EB8F42657D15542C6068F5974574
7E0AAA20DCB5AF1919C4F3EE314D0F09A5DC24D41FDD14A82DC580DD664B7470
201E0B68633EB54DE3215CD1B5C72D846AF0FC76BC1B1FD420957905FA6172F7
5BC7865E8D878A4DC9937EA9FFAF8C077A7B40723F6B701EF8C0B6E69C6375E8
9F0EAB2B56BBB89144CE810C78D8CA08596DFA1560B468313DDD88F2C455E920
E05E6AD03A084AD4A7C041B06172198B32F99D58E21B0A78302026FA3C2010C9
C4926575BB9B8CF2C39F8898FD8122998475F02B3D6D50D8A7B453A4A15E8B81
37495F25DBBEDCF550683682D938AB70D416CD39E8562FD546F1E50BFD46273A
7C84B6388A842F52A16C3549B9CF47DCECA8F2FC971EFCC18716D53ACF6A8B74
1A2C728C44314202F65F7ED7E5E871D4347680EF8ADD02DB425252C052698A79
B9D30DA9A2E715D31B2A9F95A6306F7D5261C85D4A073B496141CA7FACD96BDB
FC373E1E1F87881FD7BC3A7CBFFA67186C96E982428FE49289726FC97AB7CCA4
EDC9E2972799D11555CED849422395DCEBAA7D01D4CD352EC8E6AF27AB918281
2F516DAF8BF9F0F7D986B1D4352771792D4973C92CC976AF06D7CBB5667BC573
7A681815F6A482C2BF34FB77D107652BD59E002C56B3DD423BECB0E3AFF614A0
A2B1B15A1041800BB72CEEA17CF4A93CEF7805C060D65C25FEA1A5980EC3B8FD
D9F568AF98704E304A15E2A8A49F428AD81EE68C30F2490362FAF9F3543A0A55
57C1E0913B055F591F8F2E8A74B365795F7323B04122606B568D2DAAAA8A0722
09EEDDC3986FFE291903D73BDAAF6848EEACD2B66A65740087755141099CBFA0
D879118BE4F2D2F5B4D6D5A90B188505175088F5E3CDE38446CF75B0410510BF
6C0986B29955638DE8B24FB15F5B12A5FBABEC2FBBF498AB96F55DA6D35FB7CF
0E401AF88BCE768CC72F14589D293BF29C73EB3A2866660F28C19BBDACAB70E1
FF207560FABBC42680DA4695DE4C73AF03D62447E25F5FABE8882822BC80A55E
FFA170A7A7EBBCECF6D1E6D060743F7452363DA1BA69C72DBFF5BBACA5055336
EA2E3A55F05E65D826D0748FD49900A7642B13AF7C2E28DF5904959122E200AD
EB44D45BCB61AC7F723D7F0CB707ABCCB23D597FE93D3F8464748BE5BB7167FA
243BFB37AE424572A24EFC245742B438E27201BC195E409C760F618296AFBFEE
1989A09F9F9A0EC573F5E1E9809CE9BEF643C2568A3365B3C1540A2DC8EE3ACE
68F8192664DADA740DC6D6B04101F8F792BADE0CB9A5B0901EC307EDBFF4A6CD
8CC2FA66CAC34B11656C0ED4A3681A84D170419B1D9D825F30DF959CEB4AAF5F
F68920F678B5C4584A1EAB39443FB4126192FE55CB6E791190BBC0B763C1FEA3
4255810B8281AC54B0C0F335B00A2C30C030979EBCCB7CDD87CC9059F1AFF60D
1A8BDF3950EDFD6CEA20D0649071442B2916EBCE5F4833BCF0B4DA2A814D14DC
1361CC9554DB2E46B161E4E2203606C365080E5159E51E664E2BF18399EC680F
3D129B6570710FA6EC22C046AC5CB2BCC5DC000765FEC64CE58A10E9811B2898
D889A581451395C7C581860483845049C1A35701BB16F608B914F87BA6D397A6
B7ACD24060AA48FF5B4CCA825DCC6DC578B2D39D618F4F766173973B925269B0
8B19376CE9DDF854810CAEC564B8FD0ABBE5E09FE4561AC4F28A2C7BEDD716B3
3B820BA74356D8834505C606643E0ED45C2BCCA0E3448730FC94AF5FECCB73F5
5431F902C010DCD2B820343C96F968FAA7B4755469D0F27E87B2186D931D6241
20B81967E58ABF5058EE124D9E4B184A84DBE481D044DFB16043E5DE2157D688
28444275706266E620FBBF4BE80B2F496F0CED0C53BD86682BAC2D53944F47E4
D257CB1798520F27F651A0CB271581E1D338477090C7DB3C0591B53CBD3D2B96
D124EB1A8750DF7E7961AC02510F5B6EE04E45B561EFB15D39F71C4F04999350
74B5B5A3470CA5F34361AE575DC99BAB1CE577EE970A2B5E013E23CB0654536F
BDA725AA11D9E2B99F1FD6385F6A1941C4E44C709CD5C31B0541AF9525279536
814044F4AE7DAABC43A230FDAC3CEA900F20D821F125DD9B4396F2684BF4963F
C18B0144296AF4E88D7C1F3AC239ABDCD32171C7377F7EBD25E24AC3A9B76A56
A327053E0F6D96D1C2B699867EB1007DAE908C64D91EC6D5B05686A26E8B9592
059F76EF585D67771994E0CECE14F76A594D3F32391C040298C4B93CB2B73B65
DA3AE06F801E6C37B04B18441D4497E178FE64CCBF21D70A72AA4B05B19BC6EA
6705003370A63CB4F0AF1AB4EAC6FB4A789EB88F31D5F2337EAB4F70211EE783
7D618DFA762A90DBF8A81AD82D0A95CE800AC2850CC139D0E0541B9100595D24
202DE22DE3D1C72ED10530E3DF20B979EBD844943D7BFF7A328EF957C8FD2434
EAA4317ED42A8DBDDF345213CB58D5989FFF2B0CCAEFF7B81D2E9B06FAC2DE33
D3B1965E05B2B363111F45FDA69C0916793412AEDD15191DDD1B6A3FCCE3EBB8
41B62F3BE8D6C826EB32307A623C8DFEDA68DA9A52AB889194199F58C78C3514
CF2FB460C3623CA94748172F64695CF8F5F040E7D8CF7849612AEA754CCB377C
CDCF82983437EE1D2D26278D146F968614587DBBFC546E899C8E5141C925E8C0
0BB3E642A64685456B6BAF629AB8085B3CF57B4949B3B5E1DC217E8A1FBD9B82
8B8E5DDE11737FDE70208D6884BBFA2D4ADA174645BF47E448B703AC894C7ACD
91A39BA398B920B5729591E757D409E2827FC0075233DA1DAC8F01EFD3C68B55
FB44300E0B1195491C66FF936CBD583DA8259E113CE1257BE6EB5872FBF1E95D
866134637DCCE4848D2B051B8E0EC7B88872E9ABD202A97451C9296C2100009D
54C0722BEC75EC3DD97AAE39241CB9D6C81C4D965F85EA14F4839C4D3ADAFAD2
0AA963852F2DB69C1C1CE080F69090CE23089253F14B50DED0AC69A34B5F5460
5818FC34559A4AD68EAC43266B9F84EC735F63CC8A90417E80E396349CCE3D47
F08801BBD8AA5752C845DEDC25045FFDC7FD0F06829558B178F93F130A4A4A35
21BF399E9FEFFC727E07AA69625B268136BD2F492AAFE1C957383C991714D5A5
640E776250BE77378B0FB26F46CC8D6A5018E9E4413584CD0A73A35530E50BEE
73E6D0A48998527FAEA033B10548BDAFB1B434778EE5EB5C6F48E911D19253A3
9F993A39F710314975154A8A07D01FED1C412FA9813664082503DA282C82FF59
3EBB477FB3B36FBECCDCAB62AF3DA89831F7E384024283315B894723028E0529
46E6D496FEFB17A8909026C8180E956F1ACD5F83166375463DCA7891719C7114
824BB6BC9BA8BCEAD797D859AB2979C42D082C7E32B321CED0B9F1FAB8D5F7A5
FE7763B1CBE9C12844009957E1207C6063A506074FE797601BA4DBE82254BD03
C90D010B328488C9A2DFD7D09DFF77806505700118A2CB74AF695457322333F1
E04421554A69F0D94819E4A79EEEDD15C8C56305FAA115857292C447E800AF99
2466FA2B916D258136C3514ABCF5B87853A39105130FDAE7922D97BF0BCEDAEB
BDA6BE7764CAC582CB0A81C4913226569816BFC2FED797BF3FBF60B3E0A4BAB5
A1358D068EA5038FAC8EDC241DC3360844AD12B1FF13B87AC1A10E33FC1E611B
C3142D4A9B58F97102E7AD5F33F06E7C2AA3A3F99E9E9848994EEE652E3CE38E
4AAEB2CC3FB869BFDAB3ED718CC8AF89DF26835C783CEC6DE0027C13C15419DE
1010646EB37C45E29492B05BEC0944C4AB0CEC702CF95674CB74C3F645AB6207
41F23B8D343BB8EC94BBC3D65270A3A11202769A8CF7B5C652AE85E937A80D20
FC812D783F176218FA8AC20E4E2F1CE8C943BE3FC2A82AFBBE5473370984A6EC
5B2823B3E0A20C6D68DE1E6E63549B5F3400F572B178C8147BE4F8AD44A5AEB7
5E181627B1D003BC5E21ED3DBE7604CC29F6070FC66E0E051D51DDEF5E224625
9492FF99534AA1F50B92C796CD4429AAF763240097E522FE6411CFF2DF507993
AA0CFC749FAB513205F0A8CF8E4559BEAD533D5C6AAB7682B78039D2C3956923
C9DD71A04C7A9CF032A8B597561808E50151C166892AA2415303D2ABD61EAD6A
43516C9A96A64441E9E671D8DA530E1C41C3BF918EB4CD4E15451BE2E42FAD10
B8FAFA936A464117B2E3BBCD74BF40E5530E3A5D951B38F3577507C9F4F99D17
E42191B056D76492F7756CC5F1940F35F0AF8E824A108A768F55259D3EE98D01
B67CC381846BB2E8C6C921B4266ABD55A4D60897117174D045C44097488D80D9
70BEC84699BA8BBD363D57EB0343579F4418C5B245498D75CAA14FA4ED209625
6936818474295DFF8628D1A7BFF53527A94F58DE8DAD62A8F1745857C2FA5B51
0BF6D421FC52D7A974E6D6479D4507A02417B42FC663E0B13BCC0C763CDD3627
A3737DD41477A8BCF7CF92659079A6206C39954AD292E79AE372E697787F2C7C
F49A582B5B37D2C69ED6A39B8FA257E30C3107D05B3D2AC71927102E05CB9E6E
1E9E5B4EFEBC423F41DB9BB7FB045B757DC927FEB0040E1F6566B0FBB819C9A3
DB2C8DD84044B21E9642E35535C70FE7995A1CE9877DEA4B38CC5EF5FD1C6697
99841FA1BBB6D840172A7AD7E0F58CF960A3B3BC2CFB7F5EFB232FCBE3C231F9
245D381B2F185FC890116846761371F8B7C116799A7AEEDAAB0666CECDBC4BD2
879D056FF914DD3AD96CB54D1128DAD6567F3A3C545DB73B2066FE2FDE40D6D0
1F7C4DE5F135931B7D191AFC9BEC80664C939C145D1FC202F89D275B6095D5F6
D79A80A1E187F2F61527E5C039E0DBA3C7D3C3C742DBF85362B9C03ED20CBEA2
990D5DB27C6DE3077BC69359CC4652A058933A3C1EE96A8C4EA48563A056129F
62A20129AE3E4BA05DEB2A78E15F4FBEA19D549B2E327817D3BA0E2BB98DBC10
417A546A8A3A0BD2AF1416AF3EA92B61077C98F3043D4FAAE1BF79D5B8717925
4DF89B6FB3948163350E034A3CFA568DD26363E9CB1386BBBF7428F1D04A4333
374B5903E5F5C9F7AD299B6E931B5022EA2FDC73BBF399038C1951033FD8E292
A8D6D8A8A2D021AB49685FAB96ADA9AA615D3ED173876BDC050AF80FA5F66352
850173663CFD035486BC25DF268C5F6C309378DD185061A6BF01992E63FAD5A5
420BDB80485BE5E5CB08DDE1A2F5033743E502F5AF68E2540408A71377EBE5B5
EFEB67FEDD00215C3E170D67E4537DA0FA791CDCDCFBD5EA297233A013D7DEDB
6EEA601146907D82245EC718FB751B46C7972BDAE3C044E0BBD0FFCFB0E66598
F3BD8484D4C450FD2CC53E9D5D933D8D348873F18D19C2AF7825D029C3F82782
0774927E009606313388DF3DB8806D34BDE286AF78464D9FBF4D80433243428C
8C5E833072010FFE6F743B14204876579A1A5E93702CA1006168CB6D42230045
E7AA3F84DC7F506506EDE0AB08504559D47C3240B0D4A30A382DED5AF585C938
A805AA86F55BD6E354CFF3438ED3B36992D22944354AE32B3D9C605D6577A03D
E99BB78A0AA1139DF5414824E7D4800647A7974053DAB9937E5FDB670E295524
876CCE46EFFFD58FD4161F04235FEBAC54193DE67EF18181FF138D355BE818E4
5E6D967E1BDD31C1116B6943E00696C5C844CDFC2EDF56A83FC9AF59940CDF83
C3A313AC55B8EAEF750F6E36069FF2C10FB93C9B2E185ADEE61A33A142428F56
BF93955E89BC69BB76C84FBF1CCD37E79A2A3F15005EDE27FBCA12DACF406236
DAE27C45DFB427EDBD21AC37D4F2101BFE21EA58EEA28ED4FA40C2AC0FC6DC4D
6A219E0C99C113D47CA059915140F76CBC392D59BE9922000801E192019270B4
F0F18033A4D2E0B497FB853D3327DC7B8F4807D027C96D69FDBCC0B227386F3D
714BFD49F6DBF0B04444161BCD5238D7D41D0AE150FEB27BEB28706496BA3104
0D62E0BB1AD29F3EB8F938CCC86A04DB8EC0D544E317F86A0397175F70212BDA
6ECDCC776A3899B1B323BEAEA31C9E34C610F35A19B1777C58D533B291749EDB
BF710C8063E8C9EDDAC353C375A15EE440D1364BC5C8B22B1EA086D60F53382C
1D85E1D039901D525F45E522B942A9A16D4AAC54ACC206DC00F5B58A70D546BD
E992557569456F17475923D43279785B68529E668CFCB1710F359A623C1DAAB3
EC41E1C8BBEAB138088F3E3123018D1A9676CF3367F1C389CD51E7B2BCEC7652
48C2F863BB5A34942E52641CF279206DF52D943BC285B007D1135D87360D92CF
219F339C39CF69081E1EB8FE48F3E078103BDE14DC6D40339955325265C0D568
7884A192D357DBC2F71CCBF085B2AE0423DE309A360FF60CA82A8251BE5676AE
A3061C6F4B994301864942F3C18428C06EF16DAA30781D6E78539970EFB2D13C
855D11D212CE13ABD5A53460E8BC5560F2A9F926A5855D4401FB1F62CD6C9CA9
ED28F4497CC5A17D5E2DBC4D5C1BD11B579C53E67DE41386C55CA96A594D27DA
3C1237C61DE1A5F5B26FC8966E67E05489FF45E41F46751953C4725CDC99096A
C0CE90DCED29A80228155EEE6FCF95F24B7EF78F5D9FEAAF1F2FE93BF4E7655F
2819DBD09E5289C73A406E16A7AB1EF5ED7A489FB81D7D4C186F4826DB80D434
595B28CAA8441AF5053411017D9ECA30895CF10BF35BC7511FE4C4D73E774173
D2132616462E3E70E24BD8D345F58AC350B5FD8ED73B010DC7C4C6ACBDEF8BA5
75387DD0D73162CDDD96166F795D7E676127E2CCC2232674924E662B27AAB6D5
7C09F26B17017E7F1FC03853CE5EA4DBA6728946C135BFA75A98D8F7DB9FA111
CD84C513E2A42DFF6E5073FAF13FF8DA30BBDCC9F4E8F100FB3AE710F79091EA
F4D42CF6A8DEC640F04FF20C785A6F46E7AB1852DA3A667B138DB0BAB16927A6
33D126CD63FDEE48E210E261C16EF1A02365C51A764359705D20D906FC7C9E26
9DF5AD44638059793E9B2ACF4EB2C17357D4E115CF13487F83C49AD96E1130EA
D61A9C9A71CD02986992B15F4CAD81E8CD4B2A18EA6CA11A61F98EE74BC9078A
D56EB57ECB1A493AC71FADE032E7417C007C7F9F89E8A8E368DE280688A88616
0126DC0584132F1FC2EA71CC5DAEC749F41AB15C9DD2D3876937AF8E7D0D86E6
31B28A930EF189C08A0B57B71DE3F9BFA8B6CE6EB7D45DA1287523E29A4275A1
45704815C1FE48005E48CEDBA5B236DE2072000FA6CE6EB31F175724D45ABDBD
509A032838E66B747B3D5DBAC1EF8FC4C3E124D7E97111B6626F882CF58652EC
302AB57E7BF0C3F8A5C86B13A813544F3ED23B9DAF6ED450437DF0A054BAB06C
EEB6AFDB33920763E2823DB571FF12AE57B18B328CB3A665EE2731D31BC9748C
8539B20D606E5AE57BE042D17F35C3F50ACED620B4744231E4DEB8CD7FAB4209
9207B9092854DAA7B54F9E18142403BE85D1E2F89F77155DBE7A7889D7B7A6CC
203EC601778F673BDFFFC5052DBCCF9604B28918547B6D93E3F744762981A083
0881EAE9B45152263ECC75906B814FC3A57F8FD3AEE6682BCE2D0479E887161F
AA3F4C6450A1FEBA501D718777D542E0233FEBEB709BB571CBD6D51C00B34926
8DE077F068152B43FB340911E7F047483587D80D9983E48F8F6645AB10DEF427
3CBF49B756D42FA04B4765C1D68FE8DA43C7D603A24C82E657CE83122DD0432C
68E0C314FF5398E0CABC9BEEE1A581810D7BCDCE33B820BC974B5092CDBAD802
372534BA7EA5A501D01B3C3EE68C16EF312027D0526C289F51978FF2FD682FC5
F4575A34B2A3DE4954B6050B8FAC473856EA57B2B46DA3E78EC2353CFA4C9C0B
A691891333431027B4B7A3C89563717B0E7F635309B1B662C50BC753B3569E6F
DC0E92236B96CFE088D81A361EC0C67C9C7AB91C574DA03603DDC7F458844DBD
B8D800BBB28EEB2B754671D9AD677703A1ECE6EAE0D759C51EE7A31E4510F519
6DF93DC22D53B21CC59DC664DCA8D0D1EA25C291CCED6B43B67052CD04D314DA
439FE433E0EE5E69DA51D0AC505C9F715607A3535689A4FA4CDC950217781F9C
6ED40C6247A0E077BB143C31C95A2911BB5E61951DAFF2A3E9E9B46B9A5B29A2
F79F2D884757DD8E405AE9E0E941252501C6944CC9C26C89F2F8F6F7647784CE
3E95201ED99D8512599A528060082376E896026BF53CA4ED68873FB99037A5A0
D21C7FE8A87E066AF40D56C5A331B0278FCFCD8879AEE83FFAD807B74438ED63
7DFF4DDFA501B3CD0AFFB461D558F4C30B04107EED9CF26DE54A5DC8696D1B7D
6DE18064541DD05BA2904FD702766B36916DBA8F9C96141BBF4788FE829F2154
2497674A8246B77CECFCE89B2E4335D77AD05D1F22850DBEB98EDFA799326722
1A6A86F15E79EA29F8095857B3724CD3877F3A362E1EA8366A02A7F10ECAD274
B1033848511926F2DCD3CE7CCCF9853CF510340773ECC65A26186A379E5A0776
8951256CC59A8A948BFEC411B1411C376787DCCC45EA1E3FAC7C61DA6E683693
241EB0CBCB1EEAB6E9391175324621CC131F067BE82B7A00167945245303572F
CC53AEE77EAD540B306955B576F52469452A88622F592D4262004E47F96B61BA
0F88E99544E109918AB0BDCA94C1270F74DDFEF1E47302C69058C93CD486D302
BC98DE3285FA7599D096FC928471D2FE294C8173E82B508A73108D6FADCECED9
2235FEA97BC469309EDA85DEE4195FF895D32B4BA6205B5C198BD528B06092DF
3F50B9714FCF63624E3BA3B854C245569AE23904F7532F2E9BAC4F5F93230B9C
7606CB953B09ACE65910521533282982B86DE1078529DE942340A40AB1CBBCCD
ACF004602723105C6DA6613024556EE5C6D1931349E06A560F3B3905C077262D
5E1906A2930B434E45A0C624255E2F2BC44423469EB35F62D185F051EC5EA7FE
37F49D7B9A7192A22B971DE57F7DD45F7724B451F6CFC8748E8D2AEFB25093FA
5A61589F84D291DF298C3DA60FE3CB7207E56E71C729CC6B7FC65CCDB5FB0D41
43818B992AA1F74850D45681ED8EA2C6778463735B05E0FA606348288CB8E605
8B778C128A0A15C6653CB85BF452ABBF5E8E9D8CCF2FEE9FA576773A98E09E6A
816DD71D80C3D80ABCB0063537072A47B30BF10D01299C451CE6DB3C8E9EED4D
DD03EB43299B66FA71E013C2311B9B8266D41E4C261B59B85D82C3FC03C091CE
C66A50A9349FB3B1C2A695930A1984D9871C242D395273D98D7A005395D8821E
2A6B0A654A2C18498914A5FA4F9D3A83080A8AAB3C60C966DA3E63FD8C7BE4E2
6017804965CBA5ACCD58E4C1858E9DCDC23C471987C715206297C0971364CC5B
83001B07895F0CDD94EA7DA862DC3D3E6426D42279B1853D20A31C612FD54D2B
845C61493A5EB7C06CE2BBD6335ED8805CBAD0CB369CB2F6583B1BBA4053659B
0F818BEB5FBC9FF219F297D44183ABF7AC2E736B55A8219029E5300F6F0FB567
FE1C662B910D8AC7A112880FE663A0B50A4BCED50924B9FD409D522C93EF95F5
CEFF173F2489F4F89E7B06D64F37B54A13FAA88D839EADD20F9A893744085F17
6E43E1878F8FB2C7EE2ECE261A420B8AEDFA916C7D86A4C254E91D165C0BB12D
5D3E73DF2756AB6AB85A6184278D32B64692D4B66FE978B03C604B50A5F91C47
346DE482B3A922A190C61E6BD2C89800409EB1790485F53C020767B5AABAEF47
FD10251E69BA5F423D89991BAE6CAE8EA99AB61F08AA355DC4DC23DCE672B0B3
7D0C8F4E9E27D5F963608FD71E60E25A5F5C5E63A8C78D8C0CC6D80805189439
BD02FFA1D391A7728D51B18A0E1DDB27E711C889B7DBFB575259715B293A3D7E
844764F84B88D997BA5C7B7DC10B8FE0F01E28499677DF134EF6C6B454C14B43
489BCDA69360D03B570897C7A52CFB465919400C21CE4723124C0EAC9889FBF2
69C4301C5AD39C601FB86D4090A280F9610E8EEE85AFA74550DACD3783BC35B9
96D439E6974FA8770A4C835ED0BE381CA8423F9E792CB7C220CE3B2BCEF28087
F4E387C70D495388068F4741728D4C91FF5AD8DE5177013854B10911605F8724
56B8F504547D765E0C83A50F0733AB3264B55E03AC61818DCDDD6A2E01D1DE63
E1CDB4CDE6CEADA87D16F3BB71F5DDB909BC052F09A870AFB47F59F2E66F7E82
EE851993F1B4BD1663766E33664DAD98E133A61B4182FFB00C635B437AEBDF58
66C454CA7345C7004C20C92C38508F7135E2F9F5AB74558253BAE69FEE0CA1CB
E3C66A31902CC8BF0C2101D616205A4ACFC1A28290123A8B67E6AE0F9AB4C224
B97C475CE8C6ECB05A97223122F15F1E1EEB04579F4C9FD3DBA03EF6E49A632B
F7DE5EC45B64A1F33640C01B13F40D3F8D619DB75BBA85281C413245BACBAC11
BCE2DB0AA29186BCC078A6E546FCCE22E495799D963ECD9895C6238C883492A1
DA82310E6BF4F054EA46C4EE007BEC5BA79B849449A58453935004FFFC8F5B1A
993B41DA088B3ACA4E03A3CF8CDD90AD2E6F3C1A5C6E9C35A1E9A9D20E126C01
EC94E0B9022D8A5C00FCE5528FAC0990B3081F279BB8BCE01A9FA4A9F7E83DAF
C3744B0B13E15C370563EA2D316012826A963E9A5173573B199D8D7705100BB8
0B90AE6672AF610658FAE56D323A80A1B2BF23F543CC844A757BEDCD060E95AD
49598230971DAF473A5C5536CCD95377E0D3F0573AB3099981BE8BECF9CA510B
476BBCBFBBE07EFFE8C13D9253EA898F62B6194A7208D88EA329FAB54F531409
D8A7AAD946055548AFBF698279928D4D84C98B3D34B026C5EB3AF61E5FBAE613
B8F539A6AA8B518462AF6CA30E0754E9BB42BAE6118484C6B1397BA1AF82873E
156132BD4438FCF99EBD8C11700D6059FE3CB57C4B8F3A4704EE82629FC4BC6D
FED3C4526D034A24BA4FA16E8439BC75EF20A06D93C6D4ADE53B18ED7B145F29
61C2D8F72C7B24B2B962C15183DD6948E5DF7C4057C002E00E9FC4AD5B73C354
DD6930796B19286031E5BEA074ECDC73B19566AB43847A7DBBB831670BE19C4E
3D1358A365460B5AA814A25CF558DBDE812612974E15A5EF8237CA9D177321F9
F6B14AF21276B0F2BA22FA52163D152A7105F942DC1CB22923131131AE570FD8
EEBFF538C5795ABB3E0B74D89D40AF63F5140FEF1A8CCCD706C8A15AA0B93463
F064E2DD1D5D93B8A0BC37B8E5775D95FF09C7CF0C7C4D67BDEA77B5826903A8
F7ED93C3C2B9474FC4A738C02A9AD467B35592E73C61A2DC1F13CD09369054DC
56953B729CEC4E818B2F64AA3D78C308C290FEECB6BFDFFBC9352221D1192D11
0D083804EDAB0BDB4E39C6C5BE8ED8858AE76420DA236D8D4E7B48130E59DA01
E46A79ADAC41C9EB1CFA5C9924056F33ECDE6F29365A5745012C89C266398C83
9ED8D858AD4C773175799B685B89D4019AF331CD37FB970F7B11087373B6D43B
C6E86AA0D5F88438B8AFC334ED030FE2D062F8A73FE6DE425C2F627DF1AAFFF6
D5AE00A8D560F0B72CA1EBD474FA51A5339C174694EB86B8BF729B4B7467486C
673EFC9F867CFA5CFBB6D00BF3FE09037D981E9E7FFBBC3F896535D0DCF53B71
2677BD5BE0524DDB01771DD0AE22AD50955595FCEDFCC9FA321E9AC0B7C3E8F5
77813407E6B2FD8268CAA72CAF13C894D3B9C05B0BC65876C4F5ADF3AB9CAAF5
4975D3342D945FD736969D39526148263D3133C720F917F703C9C07CC3AE2D75
152315FBD329BA2D6181F9FBF0CD9A042E4720F40AD783221085A2C4867AB5F2
C2646737D20263D12AB1AFC59F73B0440611BFE5AB6643E44A858CD4085A8E1A
F042619D7A52600685E312359F4B5C5E8C96B4E692AE39FABED5D6DAE9A8100E
3C3D5775E29B2B409995B5EB6A88A30FB007D57FEFC2BC9C90E1772CAB23D9CE
5BB9930CAA6262AB6280CF987C7FC6D1D5F6735067D8C0F31C456BB35D31B98E
4DA0CCE1C1C3A139B68C1936059511BE83E22175FD33DE7F728402C9B3D78801
4BCFF4A793A6027E94DF79BEB0058C744713824B2832924F86F49214FEBB4B3A
E05A12F0D2341592BD5CC934CFAFE6F221DED0D9A64324E19FABCDA8D476761D
C1D072CD01B49DAA9AA7801CDB41A857C051EE2584624797EB5F467C93A2FC8F
2826148D9577ABC84793DC74AAA8B3EC74ED937E3F0753C64C578E666048F826
12346B17B147A6278C3FF95D85EA4B31E5396C4286A280EE518A4886CC9C2DCE
86D70377C24B31378D4C5CEC644A2F65ECC2BFACD1914BE727EA3E88A5BD2A54
AD1B0D74A86E6D7058108DB19D55B511ADCAB2EA569D3FDBFDEE3FC2162FB111
DC49768B897F0E93C157AAB6B168295CF1191FFDDE2C4273F95F57700A71A73C
6C9FEAE12AC083BCA92C8994B9C76714B2D40010E62BF91E5F195DC0623C1661
72A1F73B79FB5B6841B8611E8E62063B7A15243CDBEDE373D0E542B986D586DB
A09EF291CC2E8D8CB438052AC2992420B18B148151190BFAB12DE3FFEF4EB1C1
791129C526E7E93036BCE58F07389718877DA7599DE0AFF6ABB520C279386B2D
11B839AC94252668AEA04F23329A968E3863DCA84D79EF60984DBB147C7E2FC1
F46751480BFA1B9D9735160A24258E56438EE91BC72986F698E65A222EEB459D
DD3324573D3AAA86E3AA9F0E60FF67317B17035173A80438AC01D7726ECB9315
F3D868CFC958DC0863F7C2FA683418438AB25B067BF780633F2BB1146A0FF733
18128A2B2DB3EFD07706D953C66AF472DC8EA68B65E68BC7AA8584379A6F7E21
D717BAEC07B8FB8D7CB8E40CD6C4FA693F5B012D5688214C8FD3CDDB6D5B2F9F
4F43339D361AAAB592F4E5C0F6BBD7E76EFA9CA18600157E448015514B0FCD8B
218F5D6F402974C4ABDB32658491BA911644E2902EF213A594FB8E6E5A8941D3
2C44AB4E37FE7A3AC7E84A84BCB670611520F82B54B156921AABFE5731AC92BB
7183E58236D47999A1066D8D27A2581DF39D9BB24F9FB191508C75C058F8FB65
399CBCD9C9E4AA0F58CFCDF03557FDC0F4A6562E2AC409F8A6677FCDDAD61C15
42320E3F8C7C00ED5B17DE359DA187810E24C573A39EF4A1D52625DF58319E34
C4CC2669A6E5981D0FC424144FFC39B550C5F5D829E27D532FD3D3F43B670957
89A34A007D82C75B81149C64456A88F88F754C3EFCE60E6933244B839FA71A9F
CF98F4F9501DCF69FCDCB8D95117D4303EBE3272D35C4D32534685FAFB8E2FA0
27351B2E9CEFC29A1772EDCACBCE337B4DCD113B4648D8BDECFCC3C7A7D26021
EC57199E79CC100592B42C01D60A40D63870B38E4100D67ACF9EB4C072D3196F
99FB0438081DEE898D9D027742300E8669F40E28F9C32E54B383FAA0E3C33421
B8006C3CD93617E6B0B1E0DFED71B51D2BD93005ADE59DF6C91A88861FF70CF1
00E2D4D62D247C522994174EC1DAA29E4797A6EA7380E2198992383774835EC2
D3834A8C9985191EEE8E5518B94CAFA87C69E8089525CECD505DC35CB17B6D8F
433F9402B437A5D342F765C725ADD7B0D3769CA55C5BBF59EA7200D60C6AA91A
D38D69132BB3CDA70EDC5342656C12DD541669F9637AC3E4977E95A4B4BF0A80
78677867DA3E9268BFA1BA099E35FA38C2095D6D3C5B62BD22416334400DB770
9337CA0058E648347405573D737AC2C6BE8BAC4A38C458828250A8C0BAFFDE7D
4E831F2B0BAE646C3F79C8B120FBE91E1CA3D601B4325F5EB924C225C4B8F439
072619CC63D33EEE87547541F53976C86DC1EF079B38B287030719ABF9D3D0CB
FD6FA67EA6CCD740525D51D713CC6127A87C0425A51A1AD668CC571AE16D327D
5201D3128053A72765CED0D79F987D963CC392365BB3DDF7350A2BA14D36F865
A55CA2CE35711B0CA4E01108DF54D34CD192C06F63A8DF81E537B689FE89AD25
4C935178E836E5F2F3AF51A46E499F719764BA6B788CAC9590685990166A3870
F1CDB7EB08A3E82BE0C351519FC213A147583BB552E56D3F05CA0DFF5AB1BA1C
0D6444AFF9AA7F77EE0A97A8A62296A2D3EE7B2B79BF7494BDA2645D0FDD5365
C3528793C574A33D7CCDB6F875BBA9E474804EB6446E150EDA74D18A8CA65BCB
F1F480A408B68487067D0FA3014F05C2A2A68607F10BC54627C672263EDD2A7C
C63B5B731CE6EE20A873D7BD1ECF175A635822A4732560D04E5B0FF23B3F45A4
F6DD39F210719B4DDB86DAEA2CA0CF413A2B54E03280E403235E6835ED221EAF
81EF6581C6AE0B5C43A1380B4C95188629BD49122CAC98B4F567B91DD73AF141
4BEAAC5E66A9E9151A5D134D52CEAF1C1E1C0F9F980D042DB9334244F1B53A7C
D80D444A934557066D7232352AEFD997AD21C556376D21FB706D26251A2E1199
E2FB17A3F10D2A23E38AF27353D2850F28C2C1309A0CEA1FC1D27CC6A4A1E67D
D67ED59060159FBFF46E439A2C4A766B5FADE47588232C1847141D567C22A1B6
B35046B30CED1416BE7F3E83E7247ACEE7428A23D08F3DF0F16FFC043540E044
AF9386759E047307A965F5E9FA335022077991F13B71F527D4D9D5A7E2041530
16718A7EB401202DD59643BA9709D2DC29022FE4AC2173B104DC634D38019F7D
AA35E82F47CA081C407C638571B81CDA0DCC3C67E65CC5F7A2E252C8FBC051E8
D31E9489D5D761C4812F2DB69C1C1CE0809C778F1767FEC6189702890E68E389
B876697BB81DC26BC2C858BEED75F2211A01E5F86B0F7B447820B08DFDE19B16
4787FF168A700D04A7303BBC67E6A2F4D86D0A690C8DC5569D54081804F5FD98
DAB720996E76C827664C55F9C79E7412C49F5A4D5B093C97A469BE32DEB30710
283A3C02D04DE8A06DD65D6909629F782FF974AFFC810439ABC94258EA016A58
6610F633947FFAA9702E5BE4EA0F9CC831CFD40AED353FFC3E2F617807E129EA
F9B118CCB0748549A2EEAA996F4CECA9D43A2BAFA4423177AD04A61D4351F884
39C6FD7C7268EB45915895070514EB0F9EF3BE8726073C5E069241A906F0EF15
886DFB61E7EA203BE475B6AFA056DD3F3F525DA26365A2DF7F72C8813C7BD3C4
E4E674798D1931020E3CBF159A4BD8DB7165C6E429F423F250EB9E8AEB5BA66E
6FBB5338F24FE70D4B490240B0EB2D296260F873DFB28F666C3B777C2C33892B
3C64BF3BA51CA48A095730D27312083709EDC26146F75EE72B42C07DC2A43FAA
C36B2BE303195268BE490C9FCD2762F53AA09B150479161D8B2F5FDCEA0020FD
C7A3B8574A7752560FE97B8E99A12AFCCC5044D989BCAECE1D8EA28C5262CBEA
E15984ED81596EB2039CC1A9D52162CD16DC8850DE6284BF1940F241A22A09F1
0267CD6C43F4AF5D2E1BC3888224F96AADAB604224E142F3A042F463029A8E65
64460CBE4D5EE06C24C4F502E4EB6027EF4DE4718AFF4F3A1A611D47EE7B715B
F06D0F86AD768B37B886A9483867A5E3CB8A961CEB372CDE1EA8520343F58BDB
5187DA096589FE1C6AF104DC95DDBD1FA5C3FB75E5CAEB8A21B1D95224B78BA3
F554CD4624A9A77F3D710D8BDC394D0A708366442076E3AFF67832F8939E792F
C5D2FE9F15F7C116DB632E08EA421766DDF7D8336A2C40B9AB2474EAAAB62D71
F354E01ED9F550CA4D65F79C7CE47DA8CF6430457B06434687FE13EA3CF2FE79
45EC42BC2D0B277666CF8A13AAE343F37061EE8BF523D5911D09DF2FB8714ADC
B4B3957E1B8AD40C875258C935CD8B95ED77D295C12E0123F2BCB3C58FE83ECB
11E8C908C46B93419B9CC27BEEBCBE9FD950A59116A3991E3F623568C969DEAA
9E696BCA53F928B5AAC59F2D4058DEBD5BD23D6F88861882EF3B6F3B52D1E914
FF9ADD9B3C8745E15C012902696AFD064DCFD55BE6DD8DD35AE3EAC0BE9EB7F4
A37E67C704A4E1BFBC1ED40B452F92C69C918DB42E0CE8E26D554B08DC05C1C8
2B9F5C93E475FE35EEA451EC5FDD0BB5AFB31D0195D93AE476AB15324149043E
713261671835DDF1667F74010F59376FB1AEB72D08E929E1630A7750DE134828
B1FAB479D9B166D442B6640CE02C62C4CE72A35BFC80C2D85B8B79F8673150E7
0C9BB7F30A18D69C46649B7CAB04AAAB1492482AE66546A605B0A862824BEF16
4110B67B3B48AB7AB10734FA0475D4AA4CCEA042816BA9178388DAD1E007AAA8
D9E2C8B4842891CC2A72DE0E9F9C681443E4A49280213A0EEAA75957CF08483F
E4E9E59DB10ABE3EF27CBC6F12EA3B2680901393FE87AC239A6BE769550EC066
319191D8B1E41B3BE2BD081CFB9BE57954589E0980EEF27FF33ACB54F0A6AD88
49F98CF9A5A0705BA3782B16BFCA3976097402F18D4B4395CB6BE97565D8029B
ACEC133FEA8104F3C46D3AFC768EADA81344C4D44E8E0FFE0838208C8B7BDCD8
BD9144CC9C39DCBDA15C4C757395701D4EF87FAEC2B30D2A6340553EF939CC93
144138067509B89C71E9079E211423ECBCC6A9344E0CD13253E4AA887E950FBD
C8E12DEDBA491D5C2269C53E8B73549BAE43FF1AD0810A62F516AF093B9CF9DC
86A8682674E24838BF99B06FA68C91E1797DB85D9426F1F3BACF583EFBE1FF38
56DF768AFD7C810A269762B2B5C225ECCEA316CDE8A62D377AF3CE7952B654A5
1E643F7402F8B449C92FE90B70F8A88974097A0F3E30F080D3A7C08ECDD2D12D
C0BC5DF2433F9D5D1004E5B7FA82F45B585C4770C89899376CBE4C3D95D4AFB5
22477F3C0B28C19BBDACAB70E1FF207560FABBC42680DA469686179F8B0F4C80
FD9ED2073D21FF50B841774BC20AAB196F77DA0A0ABD46A72802B0912C5C20B3
BCDCC053DBF2E1D2F557415F9565E574B571A5F887DFC62648BB2A4BC7AC4033
ED365804EBAFCB96C721A1CDBCBF28F542DA8F20233E443C146F13D4D1AD2F41
84482F8AC52BF30B0DB3B26E7DFA30BE73AFE3890DACDCE885899DA1CB2871B4
00B83A849EB440CC704CFD4D843DFDFA07FE94011A0B523A9D1E757417037A8C
99D7B76F3F813991B34C2D08472E3A19A80EC7377F7EBD25E19699669E8288A6
9754ACA70F3DABD353BD867981191C4B39D8CB0CA28416298AB3F561ED23F849
9E49F9C7E201F48E65145ED7FA5AB9D7641105CF64D9931539F98AA2127751BC
C926292C9CDA9A07D93838223D73DC0B461544B85F64FAEDB0139C8501675DA4
EB1B56F8DD549BAD624D9A17620F623901F6CADF3720EF6FDB9D6C079C04AA03
C606FCE1057BAEA084D203E12E8652B31A981415F625355810E886CC7B8A6127
3F97E46816643192F6AB4CE7654979D24CB150C100C4E57732E3CB7D17DADE84
A36897CD2E3BFD4DCA94F1AE72C35F30BC55CD8F5A3B01205955E6F076894498
2335A1412A3367F0142F6AE6366206B3A7820A3C7C82741109723580D78094F9
3E1D545E59B24AD047E4AB6B3DE31AC0283A9C9E2E946420AC7EE3A0CCB8649F
DA4841D716A6A40DD1CB5C302BCCDFF75CB40EE34A5A2D023EDB7C7384467D09
753C02845F7845A9A2364B6312673CE4954A44E6A01D973FBEE068C8D6FD181D
4EFF22B0CEAE4EF9A17FDA1517E5C0A79444E197124523616E1AADC9B5AC2F2C
2F39B6017FA304EE0276DA41D5F633035D20DF7A300E7DBA63CA7DDC9AC87DBF
A7222760A2025C18D981D7D53EA72AC9D1669FA55ACCF3EDF4AD66EA1D69ED9D
4DE22DD4CFC496E06349D191F7F99A9EEA6080E3CC5619EBD3E15ED8A986052C
F9DA943C16E5291BC8426E22E857D868741681E54B45E363979E9AEFC3033B88
B33A0F7653598078AC8A87E06889C0703E81DCA4C40683601E46257A9994B419
FF5321A9027D4088F48F047557906B2443A929DBCED8059EDD081BBA10814AE0
4BB88851BF3435A752A2E070D923B9ABEC0B06BC93096A948A428277A4276987
9BC97ABECD0CF423E471DE8A603B1C3276356B421480DF19BB6DEB417BD185AB
823929A63DEA8030DFB034CCC7AFFC7D61C5FE6ADF072193D620F82FA31232BF
9D0C5C7D7F40E09B5EEA781F5AAF47C705834688EAE011902E5EF20B53E4030A
4C8B86C312084EC7BC7364EE7097DC44DC096A1A7EC97E4275F4768B71BAAE9D
E11FBE3712C148D58895411941166A6BD70DA66D69F50269FD5F0D5066922DC4
A068F35B9EC2DD64AB6E3C8107CE93DB6F0AE56FF375C8588824D9E718CC9CC8
4A94F447A97175E13CFCD9B447A3EC26AC15843B07FD610FA250C74EB3A57D8E
4506AF80B17E0895443DCAB7B96DDD18789618EC9C10C9630A75FB7F0A7BB42B
48136D5C7734B8E5E2BCEF8282AC1174EAE14F854D10F665B2BFCE02AD80B59C
5D44915F80315BCBC1B4C073945285282F1A39B2FD18115F0638511A89A1B567
0C720633241708AAF92541E013D38F56F5189402E1723E69F8C90940096CC781
CB50315788FF9823F57414224ECF515A8D8A7D851B2DC353CC1EF5C181032F94
CB91F08658DC72D7F27A88A1B114ECE41BC4D19147149BAD4D89C39B10EE59D8
D62F20CA620161FCA81D930DE49570887716F945637680C9AB8CDD837FAC5EAE
02FB73130D204D7BACCA1EBDA62FED68B4226A4908FC091F4B381FEDF6CCC226
C30EB49F9EB18B6C74A2C8485112A1E25E9DBE61822CD70E067475D61FDEB964
5BE565BC78FC4FC645FE75B8ABE0FB6847145BF80E8367E1FCD278C1CBB2D87B
35053B7E06D5DB0B7E46C2F33335CEA67C350709103312B17D16087DD93C01BB
ABEEC7D0CD007C49628DD909303E9AE1E92486028892E3C5BABD70846A54FB51
095A9B6AB1351F75C42A86C70CC858117DF19F54B49B0F6001C1BAA0F0F39F4B
53BC88305EC2719DA4101B310422BA2C179E0C041BC2131411A1E10522583016
795E39D664030587E8F37D4A83D8D6F4FE1AB5B534B082E636A9E279207FF84E
A5787F6A95C90CEED3CA99670CFE7063EA0A5EFE77EC8992999770B6F8A6DFC2
A669A49837DD1B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000
(C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktional)
@start /Fa 185[723 4[830 10[553 7[307 46[{ enclmec ReEncodeFont }4
1106.96 /LMRoman10-Regular rf /Fb 160[909 45[606 1[606
47[{ enclmec ReEncodeFont }3 1212.12 /LMRoman10-Regular
rf /Fc 203[993 52[{}1 1328.35 /wasy10 rf /Fd 206[470
49[{ enclmrm ReEncodeFont }1 885.568 /LMRoman8-Regular
rf /Fe 207[255 47[732{ enclmmathsy ReEncodeFont }2 885.568
/LMMathSymbols8-Regular rf /Ff 140[513 3[650 723 4[361
5[578 37[1012 10[650 8[506 506 40[{ enclmrm ReEncodeFont }9
1328.35 /LMRoman12-Regular rf /Fg 135[739 17[641 76[738
25[{ enclmmathit ReEncodeFont }3 1328.35 /LMMathItalic12-Regular
rf /Fh 9[650 123[578 1[686 1[686 723 506 513 506 1[723
650 723 1084 361 686 397 361 723 650 397 578 723 1[723
650 21[1011 3[1021 849 4[975 14[650 650 2[361 1[361 2[506
506 361 5[361 33[{ enclmec ReEncodeFont }35 1328.35 /LMRoman12-Regular
rf /Fi 138[830 581 589 610 2[747 830 1[415 789 1[415
1[747 457 682 830 1[830 14[830 5[1418 3[557 2[939 981
1[1079 1062 1128 10[747 3[747 747 2[415 498 45[{ enclmec ReEncodeFont }
27 1328.35 /LMRoman12-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-2331 165 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a -2331
165 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a 1328 x Fi(F)-166
b(A)499 b(6.6)g(-)f(1)g(Ableitung)i(der)f(Sin)-42 b(usfunktion)500
b(-)e(MC)g(-)h(BIFIE)p 0 TeXcolorgray -741 4343 a Fh(1.)p
0 TeXcolorgray 651 w(Gegeb)36 b(en)433 b(ist)h(die)f(F)-108
b(unktion)433 b Fg(f)575 b Fh(mit)434 b Fg(f)142 b Ff(\()p
Fg(x)p Ff(\))369 b(=)f(sin)7 b(\()p Fg(x)p Ff(\))p Fh(.)921
6888 y(Kreuze)370 b(v)-36 b(on)370 b(den)f(gegeb)36 b(enen)370
b(Graphen)e(v)-36 b(on)370 b(Ableitungsfunktionen)g Fg(f)37259
6406 y Fe(0)37939 6888 y Fh(denjenigen)g(an,)921 8880
y(der)433 b(zur)g(F)-108 b(unktion)433 b Fg(f)575 b Fh(geh\366rt!)p
7133 9847 32118 45 v 7133 19544 45 9698 v 7842 18599
a
 currentpoint currentpoint translate 0.8422 0.8422 scale neg exch neg
exch translate
 7842 18599 a 7842 18599 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 303.9363 a add def
/d 0.0 a add neg def /h 83.74792 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 7842 18599 a 10760 13856
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -28.45274 T 3 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 277.5688 0.0 -26.3675 0.0   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 7 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 40.8969 0.0 -42.85103   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 44.69359 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 277.5688  0 -26.3675  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -26.3675
 277.5688  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-42.85103  def /maxTickline 40.8969  def /dT 5858050 abs 65536 div
viceversa { neg } if def /DT 3.141592653589793 abs viceversa { neg
} if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT
0 def } ifelse -2.0 0.0 /tickend exch def /tickstart exch def /Twidth
0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0  setgray
 } def /subTColor { 0.5  setgray  } def /MinValue { xStart } def /MaxValue
{ xEnd 3.0 2.  CLW mul add 1.4  mul viceversa { add epsilon sub }{
sub epsilon add } ifelse } def /logLines { false } def /LSstroke {
 0  setlinejoin 0  setlinecap stroke stroke} def /subLSstroke {  0
 setlinejoin 0  setlinecap stroke stroke} def 0 dT MaxValue 1 add {
/cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for subTwidth SLW subTColor subLSstroke grestore stroke
/dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT
add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick
minTickline STsize mul  moveto cntsubTick maxTickline STsize mul  lineto
} { cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick dsubT
add def } repeat subTwidth SLW subTColor subLSstroke grestore } if
showOrigin { gsave false { cntTick minTickline  moveto cntTick maxTickline
 lineto } { cntTick tickstart  moveto cntTick tickend  lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for /dsubT
0 def subTwidth SLW subTColor subLSstroke grestore } dsubT abs 0 gt
{ gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart  moveto cntTick tickend 
lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true def
} ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 40.8969
0.0 -42.85103   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 277.5688
0.0 -26.3675 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 40.8969  0 -42.85103  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -42.85103
 40.8969  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-26.3675  def /maxTickline 277.5688  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 40.8969
0.0 -42.85103   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 277.5688
0.0 -26.3675 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 9515 10992 a Fd(1)8783 17245
y Fe(\000)p Fd(1)10760 13856 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 10760 13856 a 10760 13856
a
tx@Dict begin  { 277.5688 40.8969 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 10760 13856 a 10760 13856 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 10760 13856 a 10417 14142
a Fh(x)10760 13856 y
tx@Dict begin  PutEnd  end
 10760 13856 a 10760 13856 a
tx@Dict begin  PutEnd  end
 10760
13856 a 10760 13856 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 10760 13856 a 10760 13856 a
tx@Dict begin  { 0.0 0.0 pop 277.5688 40.8969 exch pop } PutCoor PutBegin
 end
 10760
13856 a 10760 13856 a
tx@Dict begin  { 5.0 22.5208 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 10760 13856 a 9514 14188 a Fh(f)36
b('\(x\))10760 13856 y
tx@Dict begin  PutEnd  end
 10760 13856 a 10760 13856 a
tx@Dict begin  PutEnd  end
 10760
13856 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -0.9267087200010348 def /x1 9.755428270191501
def /dx x1 x sub 199 div def /F@pstplot (SIN(x))  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 10760
13856 a
tx@Dict begin  { 83.80612 -2.80116 } PutCoor PutBegin  end
 10760 13856 a 572 x Fg(\031)10760 13856 y
tx@Dict begin  PutEnd  end
 10760
13856 a 10760 13856 a
tx@Dict begin  { 179.7282 -1.65152 } PutCoor PutBegin  end
 10760 13856 a 837 x Ff(2)p Fg(\031)10760
13856 y
tx@Dict begin  PutEnd  end
 10760 13856 a 41486 18599 a
currentpoint initclip moveto
 41486 18599 a 7842
18599 a
 currentpoint currentpoint translate 1 0.8422 div 1 0.8422 div scale
neg exch neg exch translate
 7842 18599 a 36841 19544 45 9698 v 39206 19544
V 7133 19589 32118 45 v 7133 29286 45 9698 v 7842 28341
a
 currentpoint currentpoint translate 0.8422 0.8422 scale neg exch neg
exch translate
 7842 28341 a 7842 28341 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 303.9363 a add def
/d 0.0 a add neg def /h 83.74792 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 7842 28341 a 10760 23598
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -28.45274 T 3 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 277.5688 0.0 -26.3675 0.0   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 7 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 40.8969 0.0 -42.85103   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 44.69359 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 277.5688  0 -26.3675  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -26.3675
 277.5688  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-42.85103  def /maxTickline 40.8969  def /dT 5858050 abs 65536 div
viceversa { neg } if def /DT 3.141592653589793 abs viceversa { neg
} if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT
0 def } ifelse -2.0 0.0 /tickend exch def /tickstart exch def /Twidth
0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0  setgray
 } def /subTColor { 0.5  setgray  } def /MinValue { xStart } def /MaxValue
{ xEnd 3.0 2.  CLW mul add 1.4  mul viceversa { add epsilon sub }{
sub epsilon add } ifelse } def /logLines { false } def /LSstroke {
 0  setlinejoin 0  setlinecap stroke stroke} def /subLSstroke {  0
 setlinejoin 0  setlinecap stroke stroke} def 0 dT MaxValue 1 add {
/cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for subTwidth SLW subTColor subLSstroke grestore stroke
/dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT
add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick
minTickline STsize mul  moveto cntsubTick maxTickline STsize mul  lineto
} { cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick dsubT
add def } repeat subTwidth SLW subTColor subLSstroke grestore } if
showOrigin { gsave false { cntTick minTickline  moveto cntTick maxTickline
 lineto } { cntTick tickstart  moveto cntTick tickend  lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for /dsubT
0 def subTwidth SLW subTColor subLSstroke grestore } dsubT abs 0 gt
{ gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart  moveto cntTick tickend 
lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true def
} ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 40.8969
0.0 -42.85103   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 277.5688
0.0 -26.3675 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 40.8969  0 -42.85103  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -42.85103
 40.8969  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-26.3675  def /maxTickline 277.5688  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 40.8969
0.0 -42.85103   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 277.5688
0.0 -26.3675 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 9515 20733 a Fd(1)8783 26986
y Fe(\000)p Fd(1)10760 23598 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 10760 23598 a 10760 23598
a
tx@Dict begin  { 277.5688 40.8969 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 10760 23598 a 10760 23598 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 10760 23598 a 10417 23884
a Fh(x)10760 23598 y
tx@Dict begin  PutEnd  end
 10760 23598 a 10760 23598 a
tx@Dict begin  PutEnd  end
 10760
23598 a 10760 23598 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 10760 23598 a 10760 23598 a
tx@Dict begin  { 0.0 0.0 pop 277.5688 40.8969 exch pop } PutCoor PutBegin
 end
 10760
23598 a 10760 23598 a
tx@Dict begin  { 5.0 22.5208 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 10760 23598 a 9514 23930 a Fh(f)g('\(x\))10760
23598 y
tx@Dict begin  PutEnd  end
 10760 23598 a 10760 23598 a
tx@Dict begin  PutEnd  end
 10760 23598 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -0.9267087200010348 def /x1 9.755428270191501
def /dx x1 x sub 199 div def /F@pstplot (COS(x))  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 10760 23598 a
tx@Dict begin  { 83.80612 -2.80116 } PutCoor PutBegin  end
 10760 23598 a
572 x Fg(\031)10760 23598 y
tx@Dict begin  PutEnd  end
 10760 23598 a 10760 23598
a
tx@Dict begin  { 179.7282 -1.65152 } PutCoor PutBegin  end
 10760 23598 a 836 x Ff(2)p Fg(\031)10760 23598 y
tx@Dict begin  PutEnd  end
 10760
23598 a 41486 28341 a
currentpoint initclip moveto
 41486 28341 a 7842 28341 a
 currentpoint currentpoint translate 1 0.8422 div 1 0.8422 div scale
neg exch neg exch translate
 7842
28341 a 36841 29286 45 9698 v 1 0 0 TeXcolorrgb 37549
24769 a Fc(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 39206 29286 V 7133 29330 32118 45 v 7133
39028 45 9698 v 7842 38083 a
 currentpoint currentpoint translate 0.8422 0.8422 scale neg exch neg
exch translate
 7842 38083 a 7842 38083
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 303.9363 a add def
/d 0.0 a add neg def /h 83.74792 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 7842 38083 a 10760 33339 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -28.45274 T 3 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 277.5688 0.0 -26.3675 0.0   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 7 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 40.8969 0.0 -42.85103   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 44.69359 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 277.5688  0 -26.3675  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -26.3675
 277.5688  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-42.85103  def /maxTickline 40.8969  def /dT 5858050 abs 65536 div
viceversa { neg } if def /DT 3.141592653589793 abs viceversa { neg
} if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT
0 def } ifelse -2.0 0.0 /tickend exch def /tickstart exch def /Twidth
0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0  setgray
 } def /subTColor { 0.5  setgray  } def /MinValue { xStart } def /MaxValue
{ xEnd 3.0 2.  CLW mul add 1.4  mul viceversa { add epsilon sub }{
sub epsilon add } ifelse } def /logLines { false } def /LSstroke {
 0  setlinejoin 0  setlinecap stroke stroke} def /subLSstroke {  0
 setlinejoin 0  setlinecap stroke stroke} def 0 dT MaxValue 1 add {
/cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for subTwidth SLW subTColor subLSstroke grestore stroke
/dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT
add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick
minTickline STsize mul  moveto cntsubTick maxTickline STsize mul  lineto
} { cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick dsubT
add def } repeat subTwidth SLW subTColor subLSstroke grestore } if
showOrigin { gsave false { cntTick minTickline  moveto cntTick maxTickline
 lineto } { cntTick tickstart  moveto cntTick tickend  lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for /dsubT
0 def subTwidth SLW subTColor subLSstroke grestore } dsubT abs 0 gt
{ gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart  moveto cntTick tickend 
lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true def
} ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 40.8969
0.0 -42.85103   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 277.5688
0.0 -26.3675 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 40.8969  0 -42.85103  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -42.85103
 40.8969  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-26.3675  def /maxTickline 277.5688  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 40.8969
0.0 -42.85103   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 277.5688
0.0 -26.3675 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 9515 30475 a Fd(1)8783
36728 y Fe(\000)p Fd(1)10760 33339 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 10760 33339 a 10760
33339 a
tx@Dict begin  { 277.5688 40.8969 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 10760 33339 a 10760 33339 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 10760 33339 a 10417
33625 a Fh(x)10760 33339 y
tx@Dict begin  PutEnd  end
 10760 33339 a 10760 33339
a
tx@Dict begin  PutEnd  end
 10760 33339 a 10760 33339 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 10760 33339 a 10760 33339
a
tx@Dict begin  { 0.0 0.0 pop 277.5688 40.8969 exch pop } PutCoor PutBegin
 end
 10760 33339 a 10760 33339 a
tx@Dict begin  { 5.0 22.5208 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 10760 33339 a 9514 33671
a Fh(f)g('\(x\))10760 33339 y
tx@Dict begin  PutEnd  end
 10760 33339 a 10760 33339
a
tx@Dict begin  PutEnd  end
 10760 33339 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -0.9267087200010348 def /x1 9.755428270191501
def /dx x1 x sub 199 div def /F@pstplot (SIN(2*x))  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
10760 33339 a
tx@Dict begin  { 83.80612 -2.80116 } PutCoor PutBegin  end
 10760 33339 a 572 x Fg(\031)10760 33339
y
tx@Dict begin  PutEnd  end
 10760 33339 a 10760 33339 a
tx@Dict begin  { 179.7282 -1.65152 } PutCoor PutBegin  end
 10760 33339 a 837 x Ff(2)p
Fg(\031)10760 33339 y
tx@Dict begin  PutEnd  end
 10760 33339 a 41486 38083 a
currentpoint initclip moveto
 41486
38083 a 7842 38083 a
 currentpoint currentpoint translate 1 0.8422 div 1 0.8422 div scale
neg exch neg exch translate
 7842 38083 a 36841 39028 45 9698
v 39206 39028 V 7133 39072 32118 45 v 7133 48769 45 9698
v 7842 47824 a
 currentpoint currentpoint translate 0.8422 0.8422 scale neg exch neg
exch translate
 7842 47824 a 7842 47824 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 303.9363 a add def
/d 0.0 a add neg def /h 83.74792 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 7842 47824 a
10760 43081 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -28.45274 T 3 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 277.5688 0.0 -26.3675 0.0   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 7 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 40.8969 0.0 -42.85103   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 44.69359 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 277.5688  0 -26.3675  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -26.3675
 277.5688  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-42.85103  def /maxTickline 40.8969  def /dT 5858050 abs 65536 div
viceversa { neg } if def /DT 3.141592653589793 abs viceversa { neg
} if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT
0 def } ifelse -2.0 0.0 /tickend exch def /tickstart exch def /Twidth
0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0  setgray
 } def /subTColor { 0.5  setgray  } def /MinValue { xStart } def /MaxValue
{ xEnd 3.0 2.  CLW mul add 1.4  mul viceversa { add epsilon sub }{
sub epsilon add } ifelse } def /logLines { false } def /LSstroke {
 0  setlinejoin 0  setlinecap stroke stroke} def /subLSstroke {  0
 setlinejoin 0  setlinecap stroke stroke} def 0 dT MaxValue 1 add {
/cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for subTwidth SLW subTColor subLSstroke grestore stroke
/dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT
add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick
minTickline STsize mul  moveto cntsubTick maxTickline STsize mul  lineto
} { cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick dsubT
add def } repeat subTwidth SLW subTColor subLSstroke grestore } if
showOrigin { gsave false { cntTick minTickline  moveto cntTick maxTickline
 lineto } { cntTick tickstart  moveto cntTick tickend  lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for /dsubT
0 def subTwidth SLW subTColor subLSstroke grestore } dsubT abs 0 gt
{ gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart  moveto cntTick tickend 
lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true def
} ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 40.8969
0.0 -42.85103   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 277.5688
0.0 -26.3675 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 40.8969  0 -42.85103  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -42.85103
 40.8969  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-26.3675  def /maxTickline 277.5688  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 40.8969
0.0 -42.85103   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 277.5688
0.0 -26.3675 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 9515 40217 a Fd(1)8783
46470 y Fe(\000)p Fd(1)10760 43081 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 10760 43081 a 10760
43081 a
tx@Dict begin  { 277.5688 40.8969 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 10760 43081 a 10760 43081 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 10760 43081 a 10417
43367 a Fh(x)10760 43081 y
tx@Dict begin  PutEnd  end
 10760 43081 a 10760 43081
a
tx@Dict begin  PutEnd  end
 10760 43081 a 10760 43081 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 10760 43081 a 10760 43081
a
tx@Dict begin  { 0.0 0.0 pop 277.5688 40.8969 exch pop } PutCoor PutBegin
 end
 10760 43081 a 10760 43081 a
tx@Dict begin  { 5.0 22.5208 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 10760 43081 a 9514 43413
a Fh(f)g('\(x\))10760 43081 y
tx@Dict begin  PutEnd  end
 10760 43081 a 10760 43081
a
tx@Dict begin  PutEnd  end
 10760 43081 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -0.9267087200010348 def /x1 9.755428270191501
def /dx x1 x sub 199 div def /F@pstplot (-SIN(x))  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
10760 43081 a
tx@Dict begin  { 83.80612 -2.80116 } PutCoor PutBegin  end
 10760 43081 a 572 x Fg(\031)10760 43081
y
tx@Dict begin  PutEnd  end
 10760 43081 a 10760 43081 a
tx@Dict begin  { 179.7282 -1.65152 } PutCoor PutBegin  end
 10760 43081 a 836 x Ff(2)p
Fg(\031)10760 43081 y
tx@Dict begin  PutEnd  end
 10760 43081 a 41486 47824 a
currentpoint initclip moveto
 41486
47824 a 7842 47824 a
 currentpoint currentpoint translate 1 0.8422 div 1 0.8422 div scale
neg exch neg exch translate
 7842 47824 a 36841 48769 45 9698
v 39206 48769 V 7133 48814 32118 45 v 7133 58511 45 9698
v 7842 57566 a
 currentpoint currentpoint translate 0.8422 0.8422 scale neg exch neg
exch translate
 7842 57566 a 7842 57566 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 303.9363 a add def
/d 0.0 a add neg def /h 83.74792 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 7842 57566 a
10760 52823 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -28.45274 T 3 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 277.5688 0.0 -26.3675 0.0   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 7 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 40.8969 0.0 -42.85103   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 44.69359 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 277.5688  0 -26.3675  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -26.3675
 277.5688  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-42.85103  def /maxTickline 40.8969  def /dT 5858050 abs 65536 div
viceversa { neg } if def /DT 3.141592653589793 abs viceversa { neg
} if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT
0 def } ifelse -2.0 0.0 /tickend exch def /tickstart exch def /Twidth
0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0  setgray
 } def /subTColor { 0.5  setgray  } def /MinValue { xStart } def /MaxValue
{ xEnd 3.0 2.  CLW mul add 1.4  mul viceversa { add epsilon sub }{
sub epsilon add } ifelse } def /logLines { false } def /LSstroke {
 0  setlinejoin 0  setlinecap stroke stroke} def /subLSstroke {  0
 setlinejoin 0  setlinecap stroke stroke} def 0 dT MaxValue 1 add {
/cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for subTwidth SLW subTColor subLSstroke grestore stroke
/dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT
add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick
minTickline STsize mul  moveto cntsubTick maxTickline STsize mul  lineto
} { cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick dsubT
add def } repeat subTwidth SLW subTColor subLSstroke grestore } if
showOrigin { gsave false { cntTick minTickline  moveto cntTick maxTickline
 lineto } { cntTick tickstart  moveto cntTick tickend  lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for /dsubT
0 def subTwidth SLW subTColor subLSstroke grestore } dsubT abs 0 gt
{ gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart  moveto cntTick tickend 
lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true def
} ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 40.8969
0.0 -42.85103   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 277.5688
0.0 -26.3675 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 40.8969  0 -42.85103  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -42.85103
 40.8969  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-26.3675  def /maxTickline 277.5688  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 40.8969
0.0 -42.85103   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 277.5688
0.0 -26.3675 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 9515 49958 a Fd(1)8783
56211 y Fe(\000)p Fd(1)10760 52823 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 10760 52823 a 10760
52823 a
tx@Dict begin  { 277.5688 40.8969 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 10760 52823 a 10760 52823 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 10760 52823 a 10417
53109 a Fh(x)10760 52823 y
tx@Dict begin  PutEnd  end
 10760 52823 a 10760 52823
a
tx@Dict begin  PutEnd  end
 10760 52823 a 10760 52823 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 10760 52823 a 10760 52823
a
tx@Dict begin  { 0.0 0.0 pop 277.5688 40.8969 exch pop } PutCoor PutBegin
 end
 10760 52823 a 10760 52823 a
tx@Dict begin  { 5.0 22.5208 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 10760 52823 a 9514 53155
a Fh(f)g('\(x\))10760 52823 y
tx@Dict begin  PutEnd  end
 10760 52823 a 10760 52823
a
tx@Dict begin  PutEnd  end
 10760 52823 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -0.9267087200010348 def /x1 9.755428270191501
def /dx x1 x sub 199 div def /F@pstplot (-COS(x))  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
10760 52823 a
tx@Dict begin  { 83.80612 -2.80116 } PutCoor PutBegin  end
 10760 52823 a 572 x Fg(\031)10760 52823
y
tx@Dict begin  PutEnd  end
 10760 52823 a 10760 52823 a
tx@Dict begin  { 179.7282 -1.65152 } PutCoor PutBegin  end
 10760 52823 a 836 x Ff(2)p
Fg(\031)10760 52823 y
tx@Dict begin  PutEnd  end
 10760 52823 a 41486 57566 a
currentpoint initclip moveto
 41486
57566 a 7842 57566 a
 currentpoint currentpoint translate 1 0.8422 div 1 0.8422 div scale
neg exch neg exch translate
 7842 57566 a 36841 58511 45 9698
v 39206 58511 V 7133 58555 32118 45 v 7133 68253 45 9698
v 7842 67308 a
 currentpoint currentpoint translate 0.8422 0.8422 scale neg exch neg
exch translate
 7842 67308 a 7842 67308 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 303.9363 a add def
/d 0.0 a add neg def /h 83.74792 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 7842 67308 a
10760 62564 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -28.45274 T 3 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 277.5688 0.0 -26.3675 0.0   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 7 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 40.8969 0.0 -42.85103   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 44.69359 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 277.5688  0 -26.3675  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -26.3675
 277.5688  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-42.85103  def /maxTickline 40.8969  def /dT 5858050 abs 65536 div
viceversa { neg } if def /DT 3.141592653589793 abs viceversa { neg
} if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT
0 def } ifelse -2.0 0.0 /tickend exch def /tickstart exch def /Twidth
0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0  setgray
 } def /subTColor { 0.5  setgray  } def /MinValue { xStart } def /MaxValue
{ xEnd 3.0 2.  CLW mul add 1.4  mul viceversa { add epsilon sub }{
sub epsilon add } ifelse } def /logLines { false } def /LSstroke {
 0  setlinejoin 0  setlinecap stroke stroke} def /subLSstroke {  0
 setlinejoin 0  setlinecap stroke stroke} def 0 dT MaxValue 1 add {
/cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for subTwidth SLW subTColor subLSstroke grestore stroke
/dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT
add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick
minTickline STsize mul  moveto cntsubTick maxTickline STsize mul  lineto
} { cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick dsubT
add def } repeat subTwidth SLW subTColor subLSstroke grestore } if
showOrigin { gsave false { cntTick minTickline  moveto cntTick maxTickline
 lineto } { cntTick tickstart  moveto cntTick tickend  lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for /dsubT
0 def subTwidth SLW subTColor subLSstroke grestore } dsubT abs 0 gt
{ gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart  moveto cntTick tickend 
lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true def
} ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 40.8969
0.0 -42.85103   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 277.5688
0.0 -26.3675 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 40.8969  0 -42.85103  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -42.85103
 40.8969  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-26.3675  def /maxTickline 277.5688  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 40.8969
0.0 -42.85103   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 277.5688
0.0 -26.3675 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 9515 59700 a Fd(1)8783
65953 y Fe(\000)p Fd(1)10760 62564 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 10760 62564 a 10760
62564 a
tx@Dict begin  { 277.5688 40.8969 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 10760 62564 a 10760 62564 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 10760 62564 a 10417
62850 a Fh(x)10760 62564 y
tx@Dict begin  PutEnd  end
 10760 62564 a 10760 62564
a
tx@Dict begin  PutEnd  end
 10760 62564 a 10760 62564 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 10760 62564 a 10760 62564
a
tx@Dict begin  { 0.0 0.0 pop 277.5688 40.8969 exch pop } PutCoor PutBegin
 end
 10760 62564 a 10760 62564 a
tx@Dict begin  { 5.0 22.5208 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 10760 62564 a 9514 62896
a Fh(f)g('\(x\))10760 62564 y
tx@Dict begin  PutEnd  end
 10760 62564 a 10760 62564
a
tx@Dict begin  PutEnd  end
 10760 62564 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -0.9267087200010348 def /x1 9.755428270191501
def /dx x1 x sub 199 div def /F@pstplot (COS(2*x))  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
10760 62564 a
tx@Dict begin  { 83.80612 -2.80116 } PutCoor PutBegin  end
 10760 62564 a 572 x Fg(\031)10760 62564
y
tx@Dict begin  PutEnd  end
 10760 62564 a 10760 62564 a
tx@Dict begin  { 179.7282 -1.65152 } PutCoor PutBegin  end
 10760 62564 a 837 x Ff(2)p
Fg(\031)10760 62564 y
tx@Dict begin  PutEnd  end
 10760 62564 a 41486 67308 a
currentpoint initclip moveto
 41486
67308 a 7842 67308 a
 currentpoint currentpoint translate 1 0.8422 div 1 0.8422 div scale
neg exch neg exch translate
 7842 67308 a 36841 68253 45 9698
v 39206 68253 V 7133 68297 32118 45 v 47992 4343 a Fb(___/1)p
1 0 0 TeXcolorrgb 48228 6335 a Fa(F)-123 b(A)369 b(6.6)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
72325 54804 45 v 0 TeXcolorgray 24746 81281 a Fh(1)p
0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fi(F)-166 b(A)499 b(6.6)g(-)f(2)g(Ableitung)i
(der)f(Cosin)-42 b(usfunktion)501 b(-)d(MC)g(-)g(BIFIE)p
0 TeXcolorgray -741 4343 a Fh(2.)p 0 TeXcolorgray 651
w(Gegeb)36 b(en)433 b(ist)h(die)f(F)-108 b(unktion)433
b Fg(f)575 b Fh(mit)434 b Fg(f)142 b Ff(\()p Fg(x)p Ff(\))369
b(=)f(cos)q(\()p Fg(x)p Ff(\))p Fh(.)921 6888 y(Kreuze)i(v)-36
b(on)370 b(den)f(gegeb)36 b(enen)370 b(Graphen)e(v)-36
b(on)370 b(Ableitungsfunktionen)g Fg(f)37259 6406 y Fe(0)37939
6888 y Fh(denjenigen)g(an,)921 8880 y(der)433 b(zur)g(F)-108
b(unktion)433 b Fg(f)575 b Fh(geh\366rt!)p 7133 9847
32118 45 v 7133 19544 45 9698 v 7842 18599 a
 currentpoint currentpoint translate 0.8422 0.8422 scale neg exch neg
exch translate
 7842 18599
a 7842 18599 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 303.9363 a add def
/d 0.0 a add neg def /h 83.74792 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 7842 18599 a 10760 13856 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -28.45274 T 3 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 277.5688 0.0 -26.3675 0.0   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 7 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 40.8969 0.0 -42.85103   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 44.69359 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 277.5688  0 -26.3675  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -26.3675
 277.5688  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-42.85103  def /maxTickline 40.8969  def /dT 5858050 abs 65536 div
viceversa { neg } if def /DT 3.141592653589793 abs viceversa { neg
} if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT
0 def } ifelse -2.0 0.0 /tickend exch def /tickstart exch def /Twidth
0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0  setgray
 } def /subTColor { 0.5  setgray  } def /MinValue { xStart } def /MaxValue
{ xEnd 3.0 2.  CLW mul add 1.4  mul viceversa { add epsilon sub }{
sub epsilon add } ifelse } def /logLines { false } def /LSstroke {
 0  setlinejoin 0  setlinecap stroke stroke} def /subLSstroke {  0
 setlinejoin 0  setlinecap stroke stroke} def 0 dT MaxValue 1 add {
/cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for subTwidth SLW subTColor subLSstroke grestore stroke
/dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT
add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick
minTickline STsize mul  moveto cntsubTick maxTickline STsize mul  lineto
} { cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick dsubT
add def } repeat subTwidth SLW subTColor subLSstroke grestore } if
showOrigin { gsave false { cntTick minTickline  moveto cntTick maxTickline
 lineto } { cntTick tickstart  moveto cntTick tickend  lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for /dsubT
0 def subTwidth SLW subTColor subLSstroke grestore } dsubT abs 0 gt
{ gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart  moveto cntTick tickend 
lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true def
} ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 40.8969
0.0 -42.85103   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 277.5688
0.0 -26.3675 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 40.8969  0 -42.85103  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -42.85103
 40.8969  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-26.3675  def /maxTickline 277.5688  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 40.8969
0.0 -42.85103   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 277.5688
0.0 -26.3675 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
9515 10992 a Fd(1)8783 17245 y Fe(\000)p Fd(1)10760 13856
y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 10760 13856 a 10760 13856 a
tx@Dict begin  { 277.5688 40.8969 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 10760 13856 a 10760 13856
a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 10760 13856 a 10417 14142 a Fh(x)10760 13856 y
tx@Dict begin  PutEnd  end
 10760
13856 a 10760 13856 a
tx@Dict begin  PutEnd  end
 10760 13856 a 10760 13856 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 10760
13856 a 10760 13856 a
tx@Dict begin  { 0.0 0.0 pop 277.5688 40.8969 exch pop } PutCoor PutBegin
 end
 10760 13856 a 10760 13856 a
tx@Dict begin  { 5.0 22.5208 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 10760
13856 a 9514 14188 a Fh(f)36 b('\(x\))10760 13856 y
tx@Dict begin  PutEnd  end
 10760
13856 a 10760 13856 a
tx@Dict begin  PutEnd  end
 10760 13856 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -0.9267087200010348 def /x1 9.755428270191501
def /dx x1 x sub 199 div def /F@pstplot (SIN(x))  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end


@endspecial 10760 13856 a
tx@Dict begin  { 83.80612 -2.80116 } PutCoor PutBegin  end
 10760 13856 a 572 x Fg(\031)10760
13856 y
tx@Dict begin  PutEnd  end
 10760 13856 a 10760 13856 a
tx@Dict begin  { 179.7282 -1.65152 } PutCoor PutBegin  end
 10760 13856 a 837
x Ff(2)p Fg(\031)10760 13856 y
tx@Dict begin  PutEnd  end
 10760 13856 a 41486 18599
a
currentpoint initclip moveto
 41486 18599 a 7842 18599 a
 currentpoint currentpoint translate 1 0.8422 div 1 0.8422 div scale
neg exch neg exch translate
 7842 18599 a 36841 19544
45 9698 v 39206 19544 V 7133 19589 32118 45 v 7133 29286
45 9698 v 7842 28341 a
 currentpoint currentpoint translate 0.8422 0.8422 scale neg exch neg
exch translate
 7842 28341 a 7842 28341 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 303.9363 a add def
/d 0.0 a add neg def /h 83.74792 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 7842
28341 a 10760 23598 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -28.45274 T 3 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 277.5688 0.0 -26.3675 0.0   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 7 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 40.8969 0.0 -42.85103   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 44.69359 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 277.5688  0 -26.3675  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -26.3675
 277.5688  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-42.85103  def /maxTickline 40.8969  def /dT 5858050 abs 65536 div
viceversa { neg } if def /DT 3.141592653589793 abs viceversa { neg
} if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT
0 def } ifelse -2.0 0.0 /tickend exch def /tickstart exch def /Twidth
0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0  setgray
 } def /subTColor { 0.5  setgray  } def /MinValue { xStart } def /MaxValue
{ xEnd 3.0 2.  CLW mul add 1.4  mul viceversa { add epsilon sub }{
sub epsilon add } ifelse } def /logLines { false } def /LSstroke {
 0  setlinejoin 0  setlinecap stroke stroke} def /subLSstroke {  0
 setlinejoin 0  setlinecap stroke stroke} def 0 dT MaxValue 1 add {
/cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for subTwidth SLW subTColor subLSstroke grestore stroke
/dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT
add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick
minTickline STsize mul  moveto cntsubTick maxTickline STsize mul  lineto
} { cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick dsubT
add def } repeat subTwidth SLW subTColor subLSstroke grestore } if
showOrigin { gsave false { cntTick minTickline  moveto cntTick maxTickline
 lineto } { cntTick tickstart  moveto cntTick tickend  lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for /dsubT
0 def subTwidth SLW subTColor subLSstroke grestore } dsubT abs 0 gt
{ gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart  moveto cntTick tickend 
lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true def
} ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 40.8969
0.0 -42.85103   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 277.5688
0.0 -26.3675 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 40.8969  0 -42.85103  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -42.85103
 40.8969  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-26.3675  def /maxTickline 277.5688  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 40.8969
0.0 -42.85103   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 277.5688
0.0 -26.3675 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 9515 20733 a Fd(1)8783
26986 y Fe(\000)p Fd(1)10760 23598 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 10760 23598 a 10760
23598 a
tx@Dict begin  { 277.5688 40.8969 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 10760 23598 a 10760 23598 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 10760 23598 a 10417
23884 a Fh(x)10760 23598 y
tx@Dict begin  PutEnd  end
 10760 23598 a 10760 23598
a
tx@Dict begin  PutEnd  end
 10760 23598 a 10760 23598 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 10760 23598 a 10760 23598
a
tx@Dict begin  { 0.0 0.0 pop 277.5688 40.8969 exch pop } PutCoor PutBegin
 end
 10760 23598 a 10760 23598 a
tx@Dict begin  { 5.0 22.5208 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 10760 23598 a 9514 23930
a Fh(f)g('\(x\))10760 23598 y
tx@Dict begin  PutEnd  end
 10760 23598 a 10760 23598
a
tx@Dict begin  PutEnd  end
 10760 23598 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -0.9267087200010348 def /x1 9.755428270191501
def /dx x1 x sub 199 div def /F@pstplot (COS(x))  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
10760 23598 a
tx@Dict begin  { 83.80612 -2.80116 } PutCoor PutBegin  end
 10760 23598 a 572 x Fg(\031)10760 23598
y
tx@Dict begin  PutEnd  end
 10760 23598 a 10760 23598 a
tx@Dict begin  { 179.7282 -1.65152 } PutCoor PutBegin  end
 10760 23598 a 836 x Ff(2)p
Fg(\031)10760 23598 y
tx@Dict begin  PutEnd  end
 10760 23598 a 41486 28341 a
currentpoint initclip moveto
 41486
28341 a 7842 28341 a
 currentpoint currentpoint translate 1 0.8422 div 1 0.8422 div scale
neg exch neg exch translate
 7842 28341 a 36841 29286 45 9698
v 39206 29286 V 7133 29330 32118 45 v 7133 39028 45 9698
v 7842 38083 a
 currentpoint currentpoint translate 0.8422 0.8422 scale neg exch neg
exch translate
 7842 38083 a 7842 38083 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 303.9363 a add def
/d 0.0 a add neg def /h 83.74792 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 7842 38083 a
10760 33339 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -28.45274 T 3 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 277.5688 0.0 -26.3675 0.0   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 7 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 40.8969 0.0 -42.85103   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 44.69359 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 277.5688  0 -26.3675  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -26.3675
 277.5688  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-42.85103  def /maxTickline 40.8969  def /dT 5858050 abs 65536 div
viceversa { neg } if def /DT 3.141592653589793 abs viceversa { neg
} if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT
0 def } ifelse -2.0 0.0 /tickend exch def /tickstart exch def /Twidth
0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0  setgray
 } def /subTColor { 0.5  setgray  } def /MinValue { xStart } def /MaxValue
{ xEnd 3.0 2.  CLW mul add 1.4  mul viceversa { add epsilon sub }{
sub epsilon add } ifelse } def /logLines { false } def /LSstroke {
 0  setlinejoin 0  setlinecap stroke stroke} def /subLSstroke {  0
 setlinejoin 0  setlinecap stroke stroke} def 0 dT MaxValue 1 add {
/cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for subTwidth SLW subTColor subLSstroke grestore stroke
/dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT
add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick
minTickline STsize mul  moveto cntsubTick maxTickline STsize mul  lineto
} { cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick dsubT
add def } repeat subTwidth SLW subTColor subLSstroke grestore } if
showOrigin { gsave false { cntTick minTickline  moveto cntTick maxTickline
 lineto } { cntTick tickstart  moveto cntTick tickend  lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for /dsubT
0 def subTwidth SLW subTColor subLSstroke grestore } dsubT abs 0 gt
{ gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart  moveto cntTick tickend 
lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true def
} ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 40.8969
0.0 -42.85103   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 277.5688
0.0 -26.3675 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 40.8969  0 -42.85103  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -42.85103
 40.8969  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-26.3675  def /maxTickline 277.5688  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 40.8969
0.0 -42.85103   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 277.5688
0.0 -26.3675 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 9515 30475 a Fd(1)8783
36728 y Fe(\000)p Fd(1)10760 33339 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 10760 33339 a 10760
33339 a
tx@Dict begin  { 277.5688 40.8969 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 10760 33339 a 10760 33339 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 10760 33339 a 10417
33625 a Fh(x)10760 33339 y
tx@Dict begin  PutEnd  end
 10760 33339 a 10760 33339
a
tx@Dict begin  PutEnd  end
 10760 33339 a 10760 33339 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 10760 33339 a 10760 33339
a
tx@Dict begin  { 0.0 0.0 pop 277.5688 40.8969 exch pop } PutCoor PutBegin
 end
 10760 33339 a 10760 33339 a
tx@Dict begin  { 5.0 22.5208 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 10760 33339 a 9514 33671
a Fh(f)g('\(x\))10760 33339 y
tx@Dict begin  PutEnd  end
 10760 33339 a 10760 33339
a
tx@Dict begin  PutEnd  end
 10760 33339 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -0.9267087200010348 def /x1 9.755428270191501
def /dx x1 x sub 199 div def /F@pstplot (SIN(2*x))  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
10760 33339 a
tx@Dict begin  { 83.80612 -2.80116 } PutCoor PutBegin  end
 10760 33339 a 572 x Fg(\031)10760 33339
y
tx@Dict begin  PutEnd  end
 10760 33339 a 10760 33339 a
tx@Dict begin  { 179.7282 -1.65152 } PutCoor PutBegin  end
 10760 33339 a 837 x Ff(2)p
Fg(\031)10760 33339 y
tx@Dict begin  PutEnd  end
 10760 33339 a 41486 38083 a
currentpoint initclip moveto
 41486
38083 a 7842 38083 a
 currentpoint currentpoint translate 1 0.8422 div 1 0.8422 div scale
neg exch neg exch translate
 7842 38083 a 36841 39028 45 9698
v 39206 39028 V 7133 39072 32118 45 v 7133 48769 45 9698
v 7842 47824 a
 currentpoint currentpoint translate 0.8422 0.8422 scale neg exch neg
exch translate
 7842 47824 a 7842 47824 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 303.9363 a add def
/d 0.0 a add neg def /h 83.74792 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 7842 47824 a
10760 43081 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -28.45274 T 3 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 277.5688 0.0 -26.3675 0.0   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 7 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 40.8969 0.0 -42.85103   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 44.69359 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 277.5688  0 -26.3675  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -26.3675
 277.5688  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-42.85103  def /maxTickline 40.8969  def /dT 5858050 abs 65536 div
viceversa { neg } if def /DT 3.141592653589793 abs viceversa { neg
} if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT
0 def } ifelse -2.0 0.0 /tickend exch def /tickstart exch def /Twidth
0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0  setgray
 } def /subTColor { 0.5  setgray  } def /MinValue { xStart } def /MaxValue
{ xEnd 3.0 2.  CLW mul add 1.4  mul viceversa { add epsilon sub }{
sub epsilon add } ifelse } def /logLines { false } def /LSstroke {
 0  setlinejoin 0  setlinecap stroke stroke} def /subLSstroke {  0
 setlinejoin 0  setlinecap stroke stroke} def 0 dT MaxValue 1 add {
/cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for subTwidth SLW subTColor subLSstroke grestore stroke
/dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT
add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick
minTickline STsize mul  moveto cntsubTick maxTickline STsize mul  lineto
} { cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick dsubT
add def } repeat subTwidth SLW subTColor subLSstroke grestore } if
showOrigin { gsave false { cntTick minTickline  moveto cntTick maxTickline
 lineto } { cntTick tickstart  moveto cntTick tickend  lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for /dsubT
0 def subTwidth SLW subTColor subLSstroke grestore } dsubT abs 0 gt
{ gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart  moveto cntTick tickend 
lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true def
} ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 40.8969
0.0 -42.85103   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 277.5688
0.0 -26.3675 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 40.8969  0 -42.85103  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -42.85103
 40.8969  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-26.3675  def /maxTickline 277.5688  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 40.8969
0.0 -42.85103   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 277.5688
0.0 -26.3675 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 9515 40217 a Fd(1)8783
46470 y Fe(\000)p Fd(1)10760 43081 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 10760 43081 a 10760
43081 a
tx@Dict begin  { 277.5688 40.8969 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 10760 43081 a 10760 43081 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 10760 43081 a 10417
43367 a Fh(x)10760 43081 y
tx@Dict begin  PutEnd  end
 10760 43081 a 10760 43081
a
tx@Dict begin  PutEnd  end
 10760 43081 a 10760 43081 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 10760 43081 a 10760 43081
a
tx@Dict begin  { 0.0 0.0 pop 277.5688 40.8969 exch pop } PutCoor PutBegin
 end
 10760 43081 a 10760 43081 a
tx@Dict begin  { 5.0 22.5208 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 10760 43081 a 9514 43413
a Fh(f)g('\(x\))10760 43081 y
tx@Dict begin  PutEnd  end
 10760 43081 a 10760 43081
a
tx@Dict begin  PutEnd  end
 10760 43081 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -0.9267087200010348 def /x1 9.755428270191501
def /dx x1 x sub 199 div def /F@pstplot (-SIN(x))  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
10760 43081 a
tx@Dict begin  { 83.80612 -2.80116 } PutCoor PutBegin  end
 10760 43081 a 572 x Fg(\031)10760 43081
y
tx@Dict begin  PutEnd  end
 10760 43081 a 10760 43081 a
tx@Dict begin  { 179.7282 -1.65152 } PutCoor PutBegin  end
 10760 43081 a 836 x Ff(2)p
Fg(\031)10760 43081 y
tx@Dict begin  PutEnd  end
 10760 43081 a 41486 47824 a
currentpoint initclip moveto
 41486
47824 a 7842 47824 a
 currentpoint currentpoint translate 1 0.8422 div 1 0.8422 div scale
neg exch neg exch translate
 7842 47824 a 36841 48769 45 9698
v 1 0 0 TeXcolorrgb 37549 44253 a Fc(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 39206 48769 V 7133 48814
32118 45 v 7133 58511 45 9698 v 7842 57566 a
 currentpoint currentpoint translate 0.8422 0.8422 scale neg exch neg
exch translate
 7842 57566
a 7842 57566 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 303.9363 a add def
/d 0.0 a add neg def /h 83.74792 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 7842 57566 a 10760 52823 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -28.45274 T 3 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 277.5688 0.0 -26.3675 0.0   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 7 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 40.8969 0.0 -42.85103   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 44.69359 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 277.5688  0 -26.3675  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -26.3675
 277.5688  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-42.85103  def /maxTickline 40.8969  def /dT 5858050 abs 65536 div
viceversa { neg } if def /DT 3.141592653589793 abs viceversa { neg
} if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT
0 def } ifelse -2.0 0.0 /tickend exch def /tickstart exch def /Twidth
0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0  setgray
 } def /subTColor { 0.5  setgray  } def /MinValue { xStart } def /MaxValue
{ xEnd 3.0 2.  CLW mul add 1.4  mul viceversa { add epsilon sub }{
sub epsilon add } ifelse } def /logLines { false } def /LSstroke {
 0  setlinejoin 0  setlinecap stroke stroke} def /subLSstroke {  0
 setlinejoin 0  setlinecap stroke stroke} def 0 dT MaxValue 1 add {
/cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for subTwidth SLW subTColor subLSstroke grestore stroke
/dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT
add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick
minTickline STsize mul  moveto cntsubTick maxTickline STsize mul  lineto
} { cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick dsubT
add def } repeat subTwidth SLW subTColor subLSstroke grestore } if
showOrigin { gsave false { cntTick minTickline  moveto cntTick maxTickline
 lineto } { cntTick tickstart  moveto cntTick tickend  lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for /dsubT
0 def subTwidth SLW subTColor subLSstroke grestore } dsubT abs 0 gt
{ gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart  moveto cntTick tickend 
lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true def
} ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 40.8969
0.0 -42.85103   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 277.5688
0.0 -26.3675 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 40.8969  0 -42.85103  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -42.85103
 40.8969  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-26.3675  def /maxTickline 277.5688  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 40.8969
0.0 -42.85103   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 277.5688
0.0 -26.3675 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
9515 49958 a Fd(1)8783 56211 y Fe(\000)p Fd(1)10760 52823
y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 10760 52823 a 10760 52823 a
tx@Dict begin  { 277.5688 40.8969 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 10760 52823 a 10760 52823
a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 10760 52823 a 10417 53109 a Fh(x)10760 52823 y
tx@Dict begin  PutEnd  end
 10760
52823 a 10760 52823 a
tx@Dict begin  PutEnd  end
 10760 52823 a 10760 52823 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 10760
52823 a 10760 52823 a
tx@Dict begin  { 0.0 0.0 pop 277.5688 40.8969 exch pop } PutCoor PutBegin
 end
 10760 52823 a 10760 52823 a
tx@Dict begin  { 5.0 22.5208 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 10760
52823 a 9514 53155 a Fh(f)g('\(x\))10760 52823 y
tx@Dict begin  PutEnd  end
 10760
52823 a 10760 52823 a
tx@Dict begin  PutEnd  end
 10760 52823 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -0.9267087200010348 def /x1 9.755428270191501
def /dx x1 x sub 199 div def /F@pstplot (-COS(x))  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end


@endspecial 10760 52823 a
tx@Dict begin  { 83.80612 -2.80116 } PutCoor PutBegin  end
 10760 52823 a 572 x Fg(\031)10760
52823 y
tx@Dict begin  PutEnd  end
 10760 52823 a 10760 52823 a
tx@Dict begin  { 179.7282 -1.65152 } PutCoor PutBegin  end
 10760 52823 a 836
x Ff(2)p Fg(\031)10760 52823 y
tx@Dict begin  PutEnd  end
 10760 52823 a 41486 57566
a
currentpoint initclip moveto
 41486 57566 a 7842 57566 a
 currentpoint currentpoint translate 1 0.8422 div 1 0.8422 div scale
neg exch neg exch translate
 7842 57566 a 36841 58511
45 9698 v 39206 58511 V 7133 58555 32118 45 v 7133 68253
45 9698 v 7842 67308 a
 currentpoint currentpoint translate 0.8422 0.8422 scale neg exch neg
exch translate
 7842 67308 a 7842 67308 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 303.9363 a add def
/d 0.0 a add neg def /h 83.74792 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 7842
67308 a 10760 62564 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -28.45274 T 3 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 277.5688 0.0 -26.3675 0.0   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 7 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 40.8969 0.0 -42.85103   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 44.69359 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 277.5688  0 -26.3675  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -26.3675
 277.5688  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-42.85103  def /maxTickline 40.8969  def /dT 5858050 abs 65536 div
viceversa { neg } if def /DT 3.141592653589793 abs viceversa { neg
} if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT
0 def } ifelse -2.0 0.0 /tickend exch def /tickstart exch def /Twidth
0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0  setgray
 } def /subTColor { 0.5  setgray  } def /MinValue { xStart } def /MaxValue
{ xEnd 3.0 2.  CLW mul add 1.4  mul viceversa { add epsilon sub }{
sub epsilon add } ifelse } def /logLines { false } def /LSstroke {
 0  setlinejoin 0  setlinecap stroke stroke} def /subLSstroke {  0
 setlinejoin 0  setlinecap stroke stroke} def 0 dT MaxValue 1 add {
/cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for subTwidth SLW subTColor subLSstroke grestore stroke
/dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT
add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick
minTickline STsize mul  moveto cntsubTick maxTickline STsize mul  lineto
} { cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick dsubT
add def } repeat subTwidth SLW subTColor subLSstroke grestore } if
showOrigin { gsave false { cntTick minTickline  moveto cntTick maxTickline
 lineto } { cntTick tickstart  moveto cntTick tickend  lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for /dsubT
0 def subTwidth SLW subTColor subLSstroke grestore } dsubT abs 0 gt
{ gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart  moveto cntTick tickend 
lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true def
} ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 40.8969
0.0 -42.85103   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 277.5688
0.0 -26.3675 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 40.8969  0 -42.85103  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -42.85103
 40.8969  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-26.3675  def /maxTickline 277.5688  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 40.8969
0.0 -42.85103   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 277.5688
0.0 -26.3675 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 9515 59700 a Fd(1)8783
65953 y Fe(\000)p Fd(1)10760 62564 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 10760 62564 a 10760
62564 a
tx@Dict begin  { 277.5688 40.8969 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 10760 62564 a 10760 62564 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 10760 62564 a 10417
62850 a Fh(x)10760 62564 y
tx@Dict begin  PutEnd  end
 10760 62564 a 10760 62564
a
tx@Dict begin  PutEnd  end
 10760 62564 a 10760 62564 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 10760 62564 a 10760 62564
a
tx@Dict begin  { 0.0 0.0 pop 277.5688 40.8969 exch pop } PutCoor PutBegin
 end
 10760 62564 a 10760 62564 a
tx@Dict begin  { 5.0 22.5208 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 10760 62564 a 9514 62896
a Fh(f)g('\(x\))10760 62564 y
tx@Dict begin  PutEnd  end
 10760 62564 a 10760 62564
a
tx@Dict begin  PutEnd  end
 10760 62564 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -0.9267087200010348 def /x1 9.755428270191501
def /dx x1 x sub 199 div def /F@pstplot (COS(2*x))  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
10760 62564 a
tx@Dict begin  { 83.80612 -2.80116 } PutCoor PutBegin  end
 10760 62564 a 572 x Fg(\031)10760 62564
y
tx@Dict begin  PutEnd  end
 10760 62564 a 10760 62564 a
tx@Dict begin  { 179.7282 -1.65152 } PutCoor PutBegin  end
 10760 62564 a 837 x Ff(2)p
Fg(\031)10760 62564 y
tx@Dict begin  PutEnd  end
 10760 62564 a 41486 67308 a
currentpoint initclip moveto
 41486
67308 a 7842 67308 a
 currentpoint currentpoint translate 1 0.8422 div 1 0.8422 div scale
neg exch neg exch translate
 7842 67308 a 36841 68253 45 9698
v 39206 68253 V 7133 68297 32118 45 v 47992 4343 a Fb(___/1)p
1 0 0 TeXcolorrgb 48228 6335 a Fa(F)-123 b(A)369 b(6.6)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
72325 54804 45 v 0 TeXcolorgray 24746 81281 a Fh(2)p
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

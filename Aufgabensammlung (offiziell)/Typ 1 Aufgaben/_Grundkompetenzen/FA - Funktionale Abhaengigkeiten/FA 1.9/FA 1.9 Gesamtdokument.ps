%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 1.9/FA 1.9 Gesamtdokument.dvi
%%CreationDate: Fri Nov 10 08:38:14 2017
%%Pages: 5
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: LMRoman12-Bold LMRoman12-Regular LMMathItalic12-Regular
%%+ LMRoman8-Regular LMMathSymbols10-Regular LMMathItalic8-Regular
%%+ LMMathSymbols8-Regular LMRoman10-Regular wasy10 MSBM10
%%+ LMRoman6-Regular
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ "C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 1.9/FA 1.9 Gesamtdokument.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2017.11.10:0937
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: LMRoman6-Regular
%!PS-AdobeFont-1.0: LMRoman6-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman6-Regular known{/LMRoman6-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman6-Regular)readonly def
/FamilyName(LMRoman6)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -88 def
/UnderlineThickness 31 def
end readonly def
/FontName /LMRoman6-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-515 -298 1647 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF386043BC0B77B47F761487099
F3EE8B97E5F18DCAE51B94317C8F4DECC130CEC55EE16A19C81D4D1668127C7B
86C63787AA273CDA19F2DCE459A6BDCED90E3C60B9F7DA6A0715D2D12F8B805A
5203A948442C2E5796D5CD20544385DB0893AB62040E1E7F33167592F1944E2A
AF140EB52E80AC868A5E53B529B98C77E46244F0B9D46A2FBA3E0040CF5A1D5B
8CF20FDE7C876B9AF4A5F6798ED83E56E985DC30EE5A3B2D5EA30F640DA2DB67
1783F69DA070954570F579C316046D8A6B7EEEBAC73F338A8B7D40470B4468D8
CD9BA8B731E8581C69A41FE873D6ECF58F4962AB44706743806BDB909276EE0E
99E10A530147C9C14638387F89B169CCEA629DE9AEBC010589EE04588A992E08
30B37AB3DF923029B8F6BF19C1C728797AEB5C0F2044753BA4C7D1437E2B9B1B
3DAE6A15672EF1F238D1AB8F873DBF5264D704FB19F5C1CFA0E5168002B3741F
0134E79412F5B0AFABBF3069460C10225E6F7BADE64F07074C9D594F6F7514CA
5B8A7750FAF214600FB248AD5E8D9FF734EE44CA79A585268A06C6FD4E294257
0F814FAE80C1A7776ACFE85D3159ED173F8C4EF0456171564E9A2E1C26464408
16B747D137D37316A340FB72BC005029A06DF8BA48E9AACDF832BA2745C448E7
9225CE3A522B46E18F5733663105D638E571758C9E8D9121EE819E4A12676318
11F0C568B81E1502A5D168139F197F7A71FE60CCB05063C6D9D8A0048E60F9C9
5CFFF69AFB554B3534796218449D2BB97FE15BD1A6FF104BF67F8EBA5C3C39B0
24ADAC78AC4FF61D5847F0A110651C32F7372F56D5E845643350BBF6D0A6EAAC
D2586F3D71442DBEB5B1B049B691CF910A78299B8A9C0B39ED96503D55AF7610
48D41BF8E781511338BAF3A2E79B98DB9E6748C1FE829C1E574F41ED7A56E8DA
4EA2023CFC69FBCDEA39CB00C8BC5AC4B184E13F3ABA4A18487B10878E9D800F
8064BC68223CA5F86E7A9AB9BAC72FFF9546B6BB94F4426E5D273581A6D28444
44D82093FB03482F71774ADEB638DB46DCCB0C6BD2192A98CC4896B52E643BDD
07F61D79F78746C5238C5504416B1E2F271280ABB91D54CC819680322EAB72E1
250A760531BD7F2AA1DE45FC978490BB69153DA6D6161F7AFD7BEC1ABD547CBD
B6BCC20BBBB289486F6C7E238C2A7AE02B2539F6DACD88AD99A2B686FBEC34A6
F9EE29616642225A5AD8C4FBEB07FE262D75AA093A73E9E0B89695B5862C96EA
1243561331C2D9EE7B65B8214E519D57A88C79B55D644CAB29554F2E31FD6843
FF7B259AD5538BD0836F18ED0DE7F01D9BD148F8279585467B15C17D2D0C33C8
24A507CB2FB6E384BA8BAC55FAF929178B7AACAE1D371228606B58787EBCCA93
4E4F469709A6476CBF11C97862C34607A7DC2871810B501018824C0E0CFD58F9
7A957FF98D5BDA3E3E034C52405A6C2908EBEBE3E29F7C6A759857EEF72F2EC4
3A8642C108D34C4CED6F7DBE80F25D75116BBDA7CB4BBB73A61F7C685A3A9A51
8734F9E4D7E801AC7DE2E73CC759AC64F3CB8EBF8B5EB56F41B247F3F19315EF
7C24C48C184E2BC4350D72B6956D0C2F54961B34FFB476B8B54F5F249AD4F434
87F61D3712FACEC07D010DD43EF4D36C3C6BFC310B412ABDC95F0615C5BC5180
C92F0640CE6A8AF3AE7EB181C2E4C11086C530DF109AB7631B321258281DAADA
221C4D03BAA1CB2A3368AB891AA0006AFDE458F28C88624B7CD1FEC6CB09AFE1
5B7C4C75C0C00F4549D250A8D8D0B82FBBF52438CCC1953B78E7D9D431A1B5A0
4A73AF4A83C1332449D33F89196645962942DEBDD82A0C4A86F0317F943CAF80
38C03C57418377255201AE91F48B7FC6E0BEA32C7762AC27D37041D63165EB3B
E7A22843BBBC2A76EEB0E1C3F1A5DED8CBC163A406C10DEEF8375D51CA265048
A748D61C4B7C040606D6661334764F75102442574818D8E2E330E2FE5102B7F4
DF3E4FF29268D62FDDDC616ADC7E9F13E6B8A5628C9C333261C279378974A281
B8F074456303CAE324705BE0751EA813402C3D640582C972655ECB16686869E6
DA64131BED44D2F499C69EA518C750370797B96D672132C82296E416D4F3B55B
FBF76FD52217FB7A494737C74DC1BEAE9A4370CBCC6A3B60E897A2A10ACC9590
B7D182BB0BCBDA4B8FD30EBFD8E947926A7AD4A39C3E3BCC457B16FD9FA2606C
C3C0740F437DF5F1B361E2AB0102CED6B56AB56737158CF03B694FC508079D3A
31ACCEAF23100219B1CF3A1F09D967E429545A65BB9BCC05055A705CC4D79163
209A2105EAC6577EA6EB40D70A6D3A73572D79A8CBE198C9F63FFD1470AEB473
2DA147B30FA99C4C8C7BD336D401F5DBFDE3DB313266068F252FBF712D4F6AA9
CA51714523FC48BFBA1E33E36A67FD71C4DCEDF3CFB6AA5BAFC7DCCAEAA40FAA
E6D4925126349DE06E101868BED82BB51E91185394F31E2C049463AE81F753E2
F863AAF5E286731902E47CC79D75EC3262338CD13F13C659D762DB6199452CC0
3F88EA12757D52C10FF38B44A09610AFDCC3E9E0EA6D89BB91F93DEA53A676EB
142FADDFD883DC4F0C38023BDA6569691729EA004A3D96F0FBB300F4030B6606
13071727F3BA34DD98CFE4972844FBA68280761E4D48476D645F86023FE852EB
25C98058B68C3F7DE5C9E739BEFBDA9EC9C8F800F862999D20CD6BB97FA50A40
B29FC17AA00DB566B2EC94DE5934CE2EF61401B1AC09C515B31676917D11D6AA
C4F958DB61B11DAC0032A4A9BD935683E85A26C1F42BEEAD417F837272445BF8
5B73660BC2B57C89B3CFF6C85E86E42A9550DA129DC0FDC4BE50D5A5CD8DAB41
09CD47BC05EC9E0CBF809328C5737D7917AABD0AD9A87F485E0843606F7BF8F2
C0F92CCA49C489AC56BB4FAEB441E713B499545814BC2B3B2ED508A5547C4B8B
182CBE2ABB754E07D88DD634787FE1DF52B38F3EED60778915269E71DB74E889
71C070FBAE2C25A7104589EF38806E811726E41351E349B6167CA5058EE84D12
58EFC050B428623FD1E621555BBCA26C986ACA69714EE285E4183ECA0F278461
1B128DDFD3B8061FEAB76A85459C6339FB76BD776FFBE44A0D870B50D5C08E42
C27D4F909B92A16E8AE2275E83777297529C5ED2573FDF8BD7D6DAC8936854A0
E9B5873E0C43A98002905B1F09DFBD253E4F8EBA8FA68830E6BD9979FD51C835
5A7EC5C1747D467FB498E88120CCCAF6A701DAC4FE774492035D2304EC4F9083
716CA7906B80486BB5C79930F2D085E30DEBE15A07B6A046946D1BAEC088EEF1
31BE9C77E57EFDAB7374603762EAAA72B0B40EAF746A43B2DA7552C98FEA1ADB
BB93C025B00E2203899B2C287724BBB8E65FE1141502C1218C55773CA3C6DAB9
681EA8787E7960CFCAF502B7A3066310BE7A115570201F827CF41845BE0BF8AF
AE8348F559D6AD28E96669BF76C5EE35D36E883E3362E8151A38AD6FA6AEADF5
82AD81A19F11688A44032481C0698FF9E0E60C0930F7AEC84C4D7EE11BFC90EA
C5CF755173A99C3D0BF412FD30352B46B6FB6D0B977BF34FB3EA2C40A1ADAA19
182C7E3FE4F4251B1887A2C605FE1895D3045D915E59246A382A2EF44013126E
974503017108146FCA11C477865B61FF0136346A52E994D5242B0EDBF68D120B
D216209890529FBB3D24651664E84B70E52B35750A4D746C647119A3C81D1CE9
54F4F359CEE99946657FE87EFB947F6EF31DCC61CDDFC39A27718813E2CDEE9B
EE0507016F7651418558D452E73137413161CDD6645A9C7DB42FDD905FF9EE5F
A98B2F04DD744B336C400DCE97D3384AFA5C0BCEF133DD294C2AA330081B6EA8
216653BA182F7FB05BFD80CDF441BB594FE01CF3180D3C3C1F0B13A98CC0339E
144825766BC7D4CA384FCD2E9256B4C11C354D3ADB93059FC37FDDAD6C78C8A7
FD6219FC44CD0E30CF5FE94C5F95054EB0CAB8CB0BFB75B710119768A161F8C2
76614552655D1037F82FE0218C4D4CD7BEBA74BED51AFB08EB16469390FB9807
1BFB9020766AFFE943870234F365EB6EF863A8103CA6089A8A29528E45C47F09
C56AD5389C3EE8DFE85E6127D09DBF020D89506CD1270C0B3EA235BDEFE3E247
B0C655D9FF7B893CC31F7949ADAFA7FD22C8F9537DE472B6C31FC9AABE7ECAA5
701B0D2575AF8A8596254E937C142B0AC9512BCF447499C2005348B848036DC6
131C1F05FE139D653820FB3EEA998267FB51CF42EEAD7BB3CF28571C437ACDBC
56D765E2C7F61226CFC5613463DCE571BF49F20E7ADF22AE9612796DEB913805
9A4C12D608FD1228018A6DF526D5C66A9F11AEC07A100C7CCF020413C69C51E8
D0541100E3DF71D501F4BFA0AE8260E23761F29F3EF6B7AAFFB00FD028B380A7
31A931CCA7A1CD78F9CEFB9B43D1AB67E0C1B90B74C62FF8FD0FCC210E26E80E
A2C146A040FB4729A47526A644743B53CF0CD6CE4EEBB414C741759F68C2C929
2B509FC3F79A0124BA95F9FBAEAAC3B3A5CC1C9744253567A78303623728AA44
9365090D58BB4E0B099DA528E5BB6426A755DD97B90D0DF4AEC960EE3BCDED36
FEC31EAABE44B4E65AC2358864B4567F289298A69F79F6981B190F26774B50E0
D246A2676F9821158D56882769E3AF7B6C0F8F856AB15E34B7AFAD9FBEDC388D
8DDEEF29E5BA5830B9E88A403649AD203CBCAB5465F18682746D4C6A28F9D30C
71556F7C9822962D39A30A3D5D4331979C914CDACD8E52AB927C4F57377C6E95
AC3B74863596FA34250C38904577CB39ADAFC1AC17B04381C6754327FA7C65AE
AC1A2839AF94903A7EB7450AA2BCC638BCB6D2318C6E6FB8AABF70FC0CEC089B
5B2A64DC911A05B7D0FBD3BC15657FCC9D561808E50151C166892AA2415303D2
ABD61EAD6A46E042F2988E6A31D07C0EFBD835CD0C526CDF34968DEA783AAB27
AD15B45820BA2C8942FB131136588242112EA1F17FD3C2604EF52210F343C793
DEDEFB0A2B195538D4B0C6FF837473C372E70836D4C5747C4EEB85DCCE969D9A
7F061B9FA20CF2EFB32200703EF58C425B9A7D27CE0BA78897210D30DA8F7CD8
5D47409E582BDD2EB2D8D505FF764C914B4C11AEA7B23988D184F29AAC5C274F
5694862641C8ED8ADC2A7166E893618F4E1CE1CEF3D26E28BDA32D12B10ED201
A9F192758B996B3B8750FCA90CACA049EEF3CF6CF84697FEEEF16F2290BF3094
539F0406AF0030ED0D0769FFA19112C97076BFF950438DC37E9700A7BCA663C4
328967C977B430B63CE6CDFE50A651EC13D52174ED5C933E8C8525F88E6CE482
66186158BE0A5592691CD1E265DB2F523B702D4D0DBA35BE10A4F542DBD3E173
15E1E0A224FADE62569408F6ED842CA727BF331033E4F074D29DF85080F06956
1019E04A19756A102E1A32153D5C6216D9C9385A18202E78D9E7ABA944D21851
498AD5DFBBDFD2AD3A45C0FC93D273C16FDC07C095C8183E89A7FA85A0C12A52
763634899F898B819309587CAE703571A817E2A7D1FE8496B76E5248A3CC57AE
914AC32F028980AA50C18C5C8C44EE90A42542106F909E4F59803685F804B0C6
A98E5D37F963A15B1C0B736ACA11C477865B61FF0136346A52E994D5242B0ED3
7AEB62353B9A1D56DABD05371F9479BFA4CAEC5CBAAC32E2DFF165186D73C527
5BC9638D8A733D3E5905EB634982BBDBE878E238A3AD7D54A0F8D49FFBBEEA2A
08DE64815E836B7C7D1B6B6FE2F8CE38A96655B073C606ECCD8C3F2C5FF185A7
2F8B21D6486CD41A80EC051E875EAA89D64FA5F2126CCA7E93636A7CCA2158B9
9A15CD40585926E5ECB3811D95422BE5D90F0E736BB7657CF2A0A5233E11D3AA
E27591284292FB1BF22EA7654C2797659EB876A0CC35E0BD79F4A14F56FE1C18
E6232BC798A227D8F8F92AFC1924FF85BF0BD5547FBF0ACD890470AA5CB2E0D6
1ACEF149B0A7B73F2EE0136A9C23EF64210422CEE9C62889C3FB5D8D1371EDB8
5EFAE402433ED36B610862F00EE394976F0A2F4870DB0C0FCBEB6D1699049BDE
AE9A5B364AC04F853C9612C58189EBF3334336824F029CF3315CDAC8483406A1
AC1DF70188977249C809CC821BC0B7A2F8AAF27E7E115BE85D71C3003914643D
2327692E464DE4CD3E76C93397F7998AFD5A64D6903F2EF571F9A24136315988
08E0F91DBA758A23E515E9F18329599819EDBDA44E136B801A216AAE5168BF1D
DF74179AE8478DFF4DB502DBCCDBD61CA5B5E20E1CFC04C7B74A171F41A35364
E573321A926C7C3DE13338F52F2C91531C92ABA181B7CF0FF955A8DA29F11753
6ED7582733A6C86215121DCF5B0716611CCEFD11F5C5F00FCEA5EE9D46AA63FF
7D4278CC27249B1329305788A6AFBF6CAE00AA6B9DA46C51F1EFB3D014219FFB
966E070D8BE5B5CD57458FB78C6ECB6460A281A80F502523BC02292E16AA3B9C
A089F7320D1B9BA214E43E83C1FCBECD57341217FA2783DCEA90AC383E444674
6FC85E9B1D817C988AE526DA4338FB27A18C3E1F59CD6063225001812694472F
7AE07866B1F040B42849BB161F8C5058DA20F5AA785DC0E77188C18435A2E7FF
BA595F0C054E96CC44F56932D8FD589EC2438A167DD3799972464CE75AAB769D
CB32014BC32FD730F22927CBA09B8CD2167352E6BA2E96F35F1E67BC40979F9B
86E0222012DCA626F8A2147F672557FC3E08A242B2514C24CD74D2A6056E9B89
886CCCCBAE6F51A33757FD8DCEA2488E7B130462CAC1C61DDD7BD36BFA9D85C9
CB0414FA7B15EC02E8C08C8A4F789EA1A232F44B216B0A7C6B898EEEEA2EAE31
DBAA343678B35948BF6E9180221EDD0ACCA578928815D319AF73A7E10B5F523A
8B2E7812E325EA858A25C26ABBC4C25E327DFCCEAC871356DAF0CB205917DFD1
A8F1216EB4301EA62211CCB8909E9C8DEC28A6FA8042B461FB6C3A5425419977
1B7A614E53D6E49EAF8E8C75650D5793750C61F2D28FD6296AE76BEC4B0044AC
2984337F2EA913D381318ECB6383C6EBBFB2B61FE04B0B13B26BFA8A80D62E48
64239BF65B841617AD96D9D7F89ED64975DC69CF20F88E081FBADA15B871D8EE
AC0EAB134DD682DCBC9C187AD9788F635D7C1D238E43779FC2850256D81DD960
1364534E0C331CAAD340B7375427190D9ED5D06C044AC61F885A346AD0BCB540
FF5D3D13C722603FD1A9BAB8481D5ED4B852061899B5682BD0A153C50E9529CC
B01112EE116B684BA5B21D162765BF1FDA0BC109AB896DE24B0A0D57D9F4CFDC
4C1FFEF87FD2B0CA2E1A287BED88AF473AECEE97ABE431A8D1B05BCBE69CF10E
B696F21934226B6174010EE3696D11291F2E3F06359FB2DF0AD948D5F373AAE4
A4752F9BDE24042B95B58726FCFA82AF11ABD26D2D81FB0531381F8800FC7ABC
5436137CB6ECF73403915F269B7B231F5D9B1F61DF7CB03421C5F46040744911
2BDFD986A3F7EE975F79735FBDBB333D136FD72B54BDA112352814FB6FAB9134
72DAB4547A50C2C293458B1D854EB79608E52F06734E2CE9B3962B4FBFB2CED0
CD7D1C12433ED9CE0AF54C73172253EFC739D7552C51C4BBEB0896586854605D
658D8C7681595D0492047E97CECDC3FAB63FC92DE5F64B6FA36C08DA3B7FC06C
7D40B03E7F03EF36CE0390DB45EA1F0B6AA0630DCBC43B1E3BE9B7BA5722421E
932D83657C904434F3CD7B4C5C7CDE111CDFEA91C7326AC7FFC2A65A633FD028
806459C9CE8EE40DBFB9338561B425E7FB8A486E8BBD8925F744645C55EE47DE
4AA52ABD988594A7EC882C32556517E396269C90FFA27C5A51513DF558A8B499
C7B6158DA671139A282357F5CFD4CEE0BB8C7C8ED352E0A1E6DF242BC75F285A
7C4D903A367CDCB74C56BF8356F94810910AB18CEE5DD843B5FE4096F520222A
20FE01B307960B1F1030F6CC9B504E1FFFCCA352431A0D5BFCFCFAD30F97D9F6
2493B0CB7FEAFC9BAF90B7025D2E35ECC22A152A63EC110EF4B8FFD3E82A1F2D
18F3F163F77EF399A73A1B5FED7935DEC964AEDB4721F177FC89A5AB13A06261
BD660253A72E63479DBFE0FB8041A873898332B8C24FA875D3E200A018C78BE2
E930457BC33AD2FE3614781E71AB4D0073D71DC38239BC688D3F5F61CB43AE2A
53FADAA5926EA5679791D474BC0B7939D43C0AA387BDC9184255A3335FD10380
3857B8046544BF2723FF4B4331E2BC38EE8787EFC7FAF8A4D10DF88C738EBDF0
4155D92D9EC67D91F7299AAC56823CD4BE926D0EE4E8CD015DD85E4004694D39
E05F5E2AEE30F76D51A3CF5FD0316410BAC452BD8BB544B57ACF2F9FE83E3E68
109B182044F27CA200B432D886A12EF6332152F0E30D38E2B0F2F1E30D973B04
68FD4F84E83950B76B1A05B4DC730087F385C524B689F96E3FEA51EF125D16E9
073543865055A37AFD20C49BF08EF65CBC703EF6ADD2DB56EAA02A6C8649E61D
7F5B5320DB4E6C7F70B76CB486438D247D0100689A73A26C5E0137C208DCF1A7
143359F8EE27AB1E0B8333DD55B109F616080F5BF29107A418F686DD27656D1E
EBDFFF78EBD97F40F1B3C7C78221B0081DCEE066E353DCCC2B78551535EE5DA5
2B7AF5030F8AE1482313610CBFB4CADB3DB95CE2C74DB09F6C18D083A389BF57
68AD942959FF0302B3225CC885CFFC8807635C4262456DD0C12D6542D9EBA6F1
12F55563444FC3D79F4B3A2E9432F8E1948F77146199CC80880EA23BF76211CD
865BF221AF4EC556835774B08B04CBF20D471B7C228958EF19C9A18ED7B135C3
300D4E6C8B686A49D427CCD0DA4E7B07C8D2140B854F2E7C3CCABAAE3D2A8083
7BF7F8C88D26D37C4A69365579571DE66F500A75420DCB24BFEBE3ADB38A6CA5
8290D557AFA6B2F76D3C2C0D7C2FEF36D9A72D75E95EC194042007DB1738809D
C388263F3562D6BAB6320CB7B552FFB89F11EA22D02AE6333848C966B1B1E30D
A2B09FB2012717AC3CCA0F72FD3DD6E6E24621FEC52CE047DAB64EBA1EEF23FD
D6D15A5E4B14C74D3856E17C875B7531CD1BC116AC4F21FDF43764C2E9BBC3FD
8F6C02E213E218294D1063180597B8C427C9B17202A03F53B88544455AA87281
0C7948B1EC866883E78C9C909A89DB039C9E9960E315CC0D5A741134B101D1B9
61CCDDA1D8C89CF7B69B3CAC447A2D2CBE22433B7494A12D6898FB52E8D60EB8
F100DC970A6F6FF1EC5403388B6EF347797DF580DA0E0A4F13FBF20B25DFF786
1AC70BF7F778DA38E54F972D6A17B932EFECCDDE3DE2B3521F190FD862092C5D
24CE3B8037AC8FDD3EA687834689DE2FE4B7759C944FF72ECE869A601FD89830
4C6EAEF3D52B31B6CBA3D9E7EA775BBA2EC97CC91D926CC76EB3300E9B6FA5B8
477E9788C5245492BAF032951F69E716001DE419883FF01BB562BF7A8CD1C6CD
40BBB35A5685BF03CA5AA04FEDEFDF24B58001909B7B03761FF2070A0FA2CEAF
23100219B1CF3A1F09D967E429545A65BB9DA9111A6D08A31D0797C7D0DF1D6D
88ADC4FF697C5CC0F670731EC605C2C85F79D5C6DD740FA2EAE0C2119F4AEDB9
BD5451F2BAC4AF89052666E690F8ACD132C6B29910190FD862092C5D24CE3B80
37AC8FDD3EA687834689D1ABC946C2E4E79D4F3AAE440A1F525EEC2713C0767B
327F5AE99A990B727C6C7020F14175225EFEA39202B10588CB9B4E44FEFEEDCE
7B6160978ED7FF4A5199B53C9F904FB174E3C63454AFB214A8944B2299D75F55
E0414E65AD6A19F8F0894C659A61F005C6FCE1A0E970036566CBD52B4A8B1AA2
57C2DEB9689E200925D85FA23439452A82E6421B44C297B1935A3A5DE94E8681
FC6842809C1CD755943368A9554B60AA09E892F91A4B3291F21C9C651669E0D2
71F30024C0488C71FB30791F330A89ADF521505BF7D84597813143C60D3D1A51
5D52CB8732BA9FB066CFFD1C50E9BCD1885D95B60048D2EFAC8D2CC435BC0F25
C44B4AE7D581455520DA75F0AA2AD71C12CA16B7AA13D89CEE02664EA934E077
7BD01EEC83BB5674DE327954754A34A9A04FE68A437B8306B8463247F1E54DFF
D17B997EFF71C0B00B951A7570A341DBF602CED898087B72FD370FCBF53C18F7
6B79AB072E704173D21582B641515FE91E1433A56A4B1C717A38CF9C88CB71E3
781E9DD1EFDE5652E31772561D5A448F9B520EA55BFA4FC1C8FA49F5377E1680
6EDACCB60F0D8085FA97FE6D2E960552337321D82B49DE32AE60EB35A8EB1742
21DE36BBA0146AB08A3DFE98951927F9C3A83202250796C33F156EAB4EE9BB26
12B1FD223DC6C8A48B36B81681FCADD2C6095F052CEC01B7D399D097BACCF6C9
E10E5C114D067892630923CD601E96E722DB1BE432987A61FC0FC6820AA22F96
7BCB97046EA3C4A9A3A97D7C031F9E8AA24C0A18B40E952E098614C2DB3FA57D
400530CA6FA97ECC263187BFD652DC36561D27A9335BBCA18349AEF42BB9A57F
831F6379060E3650CDB2C87FA552F5999A1B5575D6CAFCB00B7BEF6E47AC23B9
20F7B535193DB8FCC1FB0DA6E544394563D24D8C87FE0F2722FBAC78768C4A89
FB6E27C2FB99B97F2312B6455CB547B771F0F0E66A2A9A030A92CEC7F3F1B26F
F6E2D1797C38DF3097789861DA2382708D050BC6A2263B7F797BD4F9FD0EF0E4
68AE9691921512F7DE93337F31701157FF310056D421E594F949B0E4980653F0
1704F8963B8BF87DC9CA5CEDEBE5D0088AAD263602357ED1BE61FD58DFA0317F
A126A715D3C293274ED2C5CAD0C162EBF98632D63BC149DC1379327ACED1EA72
9FBBF3D9C2829B9FA5A211732448B8F3125AC8AB538565E06699AE5D68759A52
096B795F2DFD666A3ED9C1AECFBC3AD200383477D05545B04A54FEA1159BA81D
2F515C46229D50F7DB0820570898CE57EB2DC4F2D4F37A3B26398A1D5AD2F84F
0E1339008A3DFF0A65F140E43A7EA149580132082317DD4A19E976C084A28CCD
E5BBCAB3731366C3B74072044D3EF2EBC1CD905BDBE9C01C812B0C32F4F09AE5
4B9C67CDBCE3F58B2E4658532D7DA349A085E560FA3A13FFD612BE78D9014A90
8651C8C8391C12719AC3EB6A7652B3689830029B200A417E9CD3E5580A9B0D04
F36C41B2F672218763100EA3EE9ECDDE8DD5AB6A6510CF16E8CAA48D18DE6EE0
20AEF0B89AE754BF7F8203F0C857CFAE8A868BC658413CB9D65DFF018B979021
09935414D50E1375DC1FA058A26A17105A2469DC27876F4035544028390706CF
1ADBB96A74355655EB64342E5FB6E18F2149FCF4C0F743AA1A1A120843D3681F
9DCB79A8474270CE46F97DD10CF6C8941D49919570F2E5F06D721403053F2058
E88858EDEE096C4034B5A2C6FEA57D50A9ECF4529BF907C09445B3E47801F2A7
157FAA847DA5E22F00136F21273615D5288ABEBB427E01E60CCE30B0F2B691E3
A8C1DD510CAC176665F9F845E184CC0594188DC4771B8904EEEBCC26570D5C83
6D34EF4DEC34F23A4282E1448187B3AA4BB9002792269E14A11BA6A5BC7DECE2
0029034C88696775902DF6CDFAE2AB99ABA68FADE90898D7F48AED17DBE9CC3F
44BB85BC31F795942D5D77E3AD79EB3B6CF717E5CD434CE1C6B388B901F937A2
99F65C3217180D4BBDAAD2E96F91B4DBF12F6C352FA5F0492B73CCD90086FDAD
B941A35FC77F7364BB75AE2083C7C66E6C13CF17915C99F16A44ED8B88CB1B25
44153A1AA8D2DAAD95397883491CB46911D35870C88509B392E1B931F0E402CF
17A63993FEC0044612E8EB5CA65ED931CC5E0FE1F28D6565F3C195C8183E89A7
FA85A0C12A52763634899F898B83763908EC0A1C9AAD283809A935DE0356C702
F538EB0C2D835A9CD11BC6D7C87ADA05A734DEE08CB62CF82CFB0166F0F1C54F
38D882DDE8DEE28A07A9E0A42143E0FC979F53C42E821C769735FB865860424E
A7F5CD9AC21C7B10986B3D714BFD49F6DBF0306CED94DE945B5A67DDD8EC188F
7FDBE2A9AD81F7002A27F2EDE3459E49C27632009CFD9CFBB246A971A093D8E5
027D67A89EB217A0AD71E56421A3B1386C8878EBDFF132070DF8A4E24787A29C
5AC9DD10D3BB974C0C92B89BF728B6BD03C5A92A87A52243943EB3E77E6CC38D
EDBB2DB8BE7778936B71AE27A5FA67289DAAF80C0F5EA7D9E67929CF4142CD52
DC6214105CFC9E95B7334F9BB9C94C9D81ACD2DA6F0CD9653A11636472F5845A
F507C8EBA6518215D75034119AF139B07DA441ED1B5D45704665D5E85622B48B
EC700AF8F765FD970E1F82C2659A38F8F63251495D697C3E0E8E7CDEB23ECBA6
03CE654F0B4CB297E3AA3E9EF091E6F7D0D07D34102A25E12F04FC9F4B80562B
21C6D0B8BE94778C7E73746B4845C1ADD96ADA56EDD51EAE4683113F66F87650
90E7AAE59D8053AE0BA8DB3BCB2AC0442D6E7DA7789B74A83724CB18C0203180
8CECB597CFFE81423BC0B3D05BCF9C2F8EA64AC3C5F7CE2DD08FA2E5253C21BF
1C0C1DD432FB523701060720730E9F51B7626597A17CCED52E42690F9808BF40
C0FF302E4E863FE458E0DDE830AE5FF2FD1A26930E14FADD837552972E4375BC
3F6F857EF419616A0D2E3D646143431C318824FC3BC21E55EF5123584D5A3508
FE86CC6FD9A1DBD506B027308CF215ECA53E73C0C347A0C47DE886A1E1F78EE1
8F3B7924E56DE4D18CDC352314CAEBF065F610B00B529D079F2291FAA610FE8C
4CCD57A7A8C9F5071193E20C5358A7495DDE0FBC9B11349A03CB50C3C6E5F571
A5469121D122E16010687CCBA357EC5C1C77239733D652E40DC6F755919054DC
900685CE73A8D5738C2BC3A5CAAFD59260886FCA15CD098A1B0611374A7A0A02
E4EB602399853AA05DC6ECC02F16174606AB2770299A4EAE74166D0EC9965C87
B89B8C1DB7526B19F7F0C20B11FDB0F0656E7ECADAF295574EBED60685F10EAE
1ED416C4346753181147EB065D30A883FD14933F4B11CC112DE73301F7F888CB
67DF1D266655E2FF6B267ACD8E1FD4B60843C4A4DEB96E4C3F6F3D70BD587BE7
BAFA3EAC91AFD9FDD8AA23A57F745E383FF8BB6DC0C752C8AE387F1D4C15E4B3
D2C887A3C469F9DC2A96B15D33FE7C565961C2A7F1CD5D80B4B11525BD2B8C3F
6F760C8245A1AD9F508AF0EABE76207E935CF4233C2614BB02993C18F5228D99
AC686A7ADBD6EA7163DD1362A8CE7A17C1064CB861BFA9277E75B0A8C76AA6C9
98C9AD482CED7C243C9688305E326F5741E280311FB6537C611BA2451F461DD5
2B51651F15E9BE11CB03C9FDCFDE3700BDDAAED61CD52A7DBF4395E223ACFF1E
E359821663C771DF990F78D69355A8C1D072E20D0E000DBE4A0656BE7F021DB8
63F63DE07FBB104CAA97C01188ABA1F0AC094030E2F0216F900EEF6D6E69E994
902A4C425BA976EABF2B11775929B1296FF602F903C70BB29D852EFCF3751A5D
80A8849721E155F887EAF14699937EC5E60FFB3A13AC9FCE3CC664E6C09D19F7
D23F8A75F6D1464A7A8025262B1C95F281E0164473AE82AA9B11484D9D6F8B66
D150591E00FCA26EC8CFB1C926563979CAD433B91341797AC8D4E9842A26D6B3
3DE375C1AB93D839DC4F2D41639E03C463B9D53DF9D649C8017386EB0C9E4399
A7AFD8703D384864AF49F4EA3FE72CC66F826A3A692434D4D3BE6ED6DABA6016
F812E8D85184C463B9F9044091F80D435E1366EDBD597C5085B9AC04EDAE551C
BE68E84519D138C233FED4D6CD32DE3F8DDD32A240FD49AEE908C7972AB2A420
AA567E0BA6781213329980CFCFB18CF7CBE6C7FA3C27329FE9A10D03889EDCDD
324E112D5BEB28766C0B807B8FF1FB8B81D0B4103EBB92A3F801177BDE9BDD61
E288E9C68A020BB9427C07939EB5649DED6075ECFF58FBACC2E7AE26BB9A0546
118C9BB6E9CA78AFB3C7D87A1C043EA301C3006F857EF419616A0D2E3D646143
431C318824FB0C49362FF7408933501D25922724867F1084DDAF1D0BF513B767
87E4A2F56EEF9FB845A2F7E97795A15160D23DE3668AA3D7DA417C906CBA8079
93A9162700BC9A16725D6510F607A4139FF20EAA6FAD50724816D76FE683810E
63BA4E40BA8E5C0A6D51ED6EBCD11B5068CACB85ABF6D9FC648CD35B1E038274
11BA7AD177E43BD16802D27FC2972286F2B152BE1F52E47D6BDD0DCD828F689C
74CE0750AD5FA10FC0E6B5F36EB62D69D698EEB767B4E9FFE73FCDAF8BD20876
DF126296187D1364EB31556C2401B79B8A2E285ACE63FCB0B137685611FDDAB2
E8FD8784FAA7132BE44229304ADC8A686D6732B0207BF2EB32EF468462CCE9D0
CEB6AFFC1DB954D41CE677D750AB42C1067EDFC2807B3CE00CC05F6CA1D87A1C
83530D8ED64611BEEC2A214EED19C0949910584F7FE49B03F896E7FCFD087089
E5CCD4368BEF556A281D166D457F08E37D782E7467A552F704EBEAF9F9AF6A64
9DD0F7E5D01633F0D869255EB21B016AFD3655F66750D3FAD23810392FFC09EF
C2864447914DF3ED2C719753BB1EED9C4359774194896CAB73A2F2ACED52AF9D
066794BEAF0EB7F06C1D428B9D34331BFA9C9A08BD09FD5054C8388DA82C3566
624F6F7CAD4242AE6C63D047AAC8EF82134EC418EA69430C0CFA1EFB2B4F9BEC
48808524500F3A6571A6EA4D65079538C1F9087E6FC665136B7ABFFE8DBF1184
D3C3AA9575819DDF023FF06A5F3B1A51AE4850C6FDD082AAF6FBB07DFB6A6227
A73AA255113DF4821BC5FB991DC6B178B121D38CE79E3AD729E30028E43296A0
548A7C64326F696544F6B1F129A854A81ED65184618E121FCB80CD031A30A0F8
7D7BAF534E49D13772304484CE3BD2A9C4955C7691B72AD442BDDAD18F30DB19
0E4D004697B5BD861801D55698E3D6ECE62CE5CC9FE34A8AAB8E3CB9409F8206
F24A189E57A0B5C178B7326860AF2A334383A1C7028DB9A3509F974F409FA0B9
5E779F2E9093E016D90FE788F6D726A04A5D06B0C05E69A239F52F5EA889627F
19006CC52D9E451DC21450FD3DBB18715AF6BAA336E150E02FB2831359FDB957
92B2E6431DD24BFFF2DB62693EDC9C5A4FA4A71EA0848A9364BA6446D5BD93EE
9AFA29111A71BCFDDA20BCD6006B0309EF0926199A60E28CFF48B79840BCB88B
39475A7E1C6815544584C34DF0E22A5EB61F0C232B03C08B27866537A9CA5F4A
B3D997E3153548794D9232AA20C29B6CF38FC8562EEA94D43B47E1F7AE890D38
03E91CE2738FABBC214C731AD70893D5FAF5B4BBEC5416501276491B79153F8D
F73808CA8940A65E5F0D1CD06A704E946B53768B5F92C841F47646E5CF24EC08
A8FA2348D271D2A84CAFAB1A979AA7E43DAAFD896177F1F70EADCF7E077FF92C
EEE279D1CD8F9B064103EEDACBDC40EB2EF6C28E91A0A1B0D7A7B0ECECEB25B1
8BCBACFAF313AC51BA6360C4F0BC34696FFE3C105348362C617D60BA3678C821
5B9F542D81152BD47EB69563510C525D05E195960D0EAEFB771050039A2F1CEB
A3DB1E042443B665E915991D932209B3F4C86295911FACB51BDAD45965CB3E4C
D451B5A1D6149A66BA1CA971CDE9629C0B16424CF3609285DAEB0115E4A8A145
939599F77990E19358425614D41218CD20852B1969CE91DB3F7B7E87BD9D405F
2E29BF660674457A70FF888A59085E68EB262A88EC25462A4A9EAFE20A956D43
50D8C90F998103A821C35734F0153950E5F72FF6A8AA6940836AB19ECB89B9DA
9A93D028D28EFCB73500DFC2F30D6C47A485B062196657C6B0CA8422DC11C6CE
AAD52991D1A9E5969D76BDE4FC976074F2D623721D38E3F361A941457847C5EC
09C01622C089AB3CB216A5C27D634731F3CA55BE5D1F91FFBA4A232B68F80792
19AA89F699A8C22C30EA308E6A5C8EEB5921F493C8F5B7691CD5C39E936ABF65
80C629A7592A909A4F89FBE2E3EEFC8BB99DF3B9CCE8FA93A71128B87293E690
C242ECD53B604B30AE8D7172F3E47139FEF1D23D2F930AF1B361E2AB0F5B11BA
428CD87225C7FF28FDCD4FB898A052A0B1A3C494AAB27E0C853EBD237F5FDBB5
82FBE603D54C4AA4887AB453337003BE0392AF8359E416849A0B2DEBEF46E3AB
2B8DE7532BD19CFDD69285BF725FB229FAC5B04008CA381E09AB94F1A9224922
B4A5C23593F8765E8124AB49FBC57F1B0A7E8F6FB6C483282DE613E28E0AB1E0
441517818CFD111E32142FFB160DB6422A5884151A4054D6076EF2F506E3DB3D
67A2D10FA038561B4D714B08BEC08EAA7D1909D5833FAB8D6671564F796B070A
2B3717577FF24B2CB8D87BFCCC85B1F91277DF1E391ED325F8383B11D57D9AF5
0EBCF7152E3715510FBF60F16750CF58F347797DF580DA0E0A4F13FBF20B25DF
F7861AC15FDBA1372D5D4D2555A2E8E23E29D8C8C5F39807B5A46FC1B70A9ACD
B172BAB4BC144943B3D3FE06E95C6B69FB006A083E8592BC01483D8DE50B9A6A
C86F872ACFC9489546968514D49014716D5975AEC37D2CCA662CFC60637C65FA
FBE78109CAB35AC2730A761CAAED96AFDADFC1FAE977B6BE8BB8B73909AA1117
B78A5506192B150BFCA046A36DFDA767967A43B3D1F3FC4F591BFE0EA1D77EFF
0602581EEEDD6C8F062E3E6783AD762482408DC1A5E5C900A43B0115F76BDB75
E9FAF644E1879C37A1E08DB03EDBCDA51187777E14F63F0C62F40BC85D30FFDA
81640FC9C58E6C4A95E1027273D38482DCFC5F6F6E64E4D57EB716ECD75C6A6C
AF0F0FB5F6A73A47FFFB9D63648979AD6DFC8C619CE8FE1EEE3B9FE2203DC6C7
5B27035ECC31BF4368E12CED705A5823BF6AC2348B46BB50393DD2B0D8A303AD
186A5DDB0595138C0E3D757E8DB9B67D98219241C0DA67E5BEC040A958B14BB3
D782151402720D5B4C77D25AE31C4A75BD8C7EB02722DA8D89430EC74AF0B255
2C97BFBD1C6C0062488763FDB07939C52A5D0D17AB4CAD27D6776A05245E5663
DB78466EFF0F8E67FEBFA63628520A97B48285DA87CED8A9520D6679CBA61BAF
3ADE6EF9B4205BC43BA3CDA488E512ED42BD142526394C5103BA4718D58F167C
B6741E06D4CE5E269D3AFCBBF060F416C0B747EC5BA54AA743154084CCBF021C
EAFA448258460E39549BC1781B89BDB53A9752A519A9BBB3CC59D3FBE6A84F1F
9521B6E05D0A0B2E0FCEADD4932A5E64E2E417C6B64D84B19F7C2D7C143E287A
BDB12AA1761639E638CE9D89C4CF0AAE1B38A2837E19E5AD8A4551A971DCF562
769FC5E4767C4CE91F8896FD3FE37FA5F235AE1BA3C6F3547FF24606651E5887
FE8CD61F46FFEAFF4A66DCCA05B42F9B762FF8905BAA1B6D15269F38A2D283BF
456D5D8BFEEBCB5B69717F22A0503101F9953D8EA3833BE27127E1C489198821
227C1ACA75B845E5D0C0F7D8416730AF4BE4FC931E965594E03272CE6647F502
4D51CD78D79C802EEABBCA93CBF968187FFA00C2E8D8E14D1017DC8428791C90
0E377B78459F629FB32E5FF3872C95854381F1D0D070EE364ED35377E1DCF455
DFB59E53117FB961AD0BDD708C34E6B895AEF03EA76FE4BDD1BECB4F085845D3
9491FEB49ACAAB78D15ECF938729214C68FFEFCAC997EC286F30AD0245F229D3
687ADCBF4D6FA08D7289D923565955106A2FFAFA8C9F636D647F334B648E11C3
659BA4FA71AB8342608C30E42BA95277382833BB9C14C6EEF11BFCEAE9139B89
256D5E8FE9B80F6DB3179657983AF5CC8F3C7EAEE084A74558304627D0C03A01
2B6CB42DBC8EEF10FC8E83696D58F0CAFCCAFABB836E9C1C7887C42265DD4193
C8618501A7FFCE13919D15CF5F00684B37087F633AB4C7B25FF2D7D54B31D2D6
96DC1E52C828A7A1155E6471DA39E1D47F152AF583CAE41F7F7FE0AA3F1F7DD9
175A2945C257765C4801FB768C6188F02FF2328F7D5B493D274CFA840BDE34CA
C6B57A04D9EAE9B90595D133E0CA2A3AF2DD6D4E50A9FA8AF67CE3FE823A4E3F
9E367C4D358692A287F5074A8C01BA5518911789F7767BD01F00D086DF326D7C
A50C1EFBB3AD48F21DC7670F524682E7CE6FB4EF66525E8F15F63E8A9F64DB78
90533FDF90C51ACDDB5CD7B1CBFAF76EE833E519C3715CFF2AC7C25F0EB8FFEA
273601D1E82984B8AE31AE343F37D03920CFB83E2DEE7642AA85B1615F9CBA1C
3C3197223C9F0D4AC9F585ACD311E1BA537EE424CCE1F22EBA8031443AC094A0
7EE8CC94D559627274D5026EA0DFDE5F67ABF5E84CC6B6717E8B794AB2DBFDDF
3A89648C906439A91CFB1AA195D9F12E03463930D05A3D71E1E9830AC1A31C2E
35BA7B396815CECCA18146C96709CFF862E8552E4FDEB7767292AAD81E5B4186
180C7D70697B73BFADE926163A5780E71276C60EAB7E25C124964778296D06C9
02559B89DA648B919EB362176B83298EE2D8B405DC67F2F888ABC36137C2137D
E0D7EBBF2323C750C674154FC6CA853B13A2D88CB67CECA9A1D3498D569DE012
062C1B959357A2A5903A5BA40F8E6CA80916037DB040BCE705D91E61D6FBF089
4C659A61F005C6FCE1A0E9700362C58C9FABCC46D24DB46E33983DE9AAEAA7DA
FD44C991F74087597F21C39DB6A2CA7C80E5410BFF7EA073A18DC2F6999DB161
EF7DB88DA4B0C592385D35F705BC2A9B1075F1B1568CE34A4F7FC812BF766372
E6F0277D8604E72E2594DF545E359F2932DB2764780688C794121E4A50AA7CD6
479A34E1B75657B41FFDB8AF1C9E3D3CE95EB410E74A1A29DC16D7FC12AA69BB
C23F9C6C4B24E6F0331C3747E378ED0C634370C3BAFFA2F1F9A03CCD801C4E1C
6911750F761F9907A438DDF4506C6ADBAE868F8E3D97C83E366A89B60E01C8D8
AAABC217C07193F92A25135331AAC542A41BAA9D9B246CDCDE58236DC29CD0BD
4C7842713E95F5CBAF73AB6456DF36FF580B2F42E21C6902705307EB16D94092
A85D8BF6BD657788322EA6A7F874F53F5EC3D5A4DFBE35B5911AC6E218ED62EA
FE23AC78C1FD52C0591102D74D3C6FDD1935694B7002E61FC34AA828BDB14CF6
B81946BBAE9D2B044B3F72DD84699E5735D7A8A57091D3709FA9D5314AD7FEBF
0797C5693895A99F6E03BF0F19D8246951FA87CA9FE08235526B59964E529D71
4203D3849619EB4D842660AEDFC5430F81C552C6AEA6BB170154C777A63D6404
15B9729D98238DF0E36467F8AE46C4A0A633D4B3F8CFBD1194BA8E3B5F981868
3EA2F04EE0AFC3AE4DFA747A1706F7FB6FCB5378D992B8498043D00CFC47D2AC
1081F1A0B01B07A92A8282B3EC6B7AB485F98415
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: MSBM10
%!PS-AdobeFont-1.0: MSBM10 003.002
%%Title: MSBM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSBM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSBM10 known{/MSBM10 findfont dup/UniqueID known{dup
/UniqueID get 5031982 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSBM10 def
/FontBBox {-55 -420 2343 920 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSBM10.) readonly def
/FullName (MSBM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 82 /R put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943E919FB4E3240FEEED78EE63
0677FAF39AB2543D18C08A2B98B97451CD42CB7893DA8601CC0F45A65BEAFC64
EF72554395DA801CF2E9E3B03F65F1BD98F8C5F8EA06D7457842303C1A817E7D
69821807328AF426B9DDBC188A79A66FBB9E6193B4A3EDFE3136C6574B9C4C94
E2CBA4FE7997F949BB2DAC0D329C2AD8E4095BD18A037AC9F77B794FC389E5CD
56CC4C0B74D64FB0D02C92B88942C18B6DA84D4CF482DAF3A01E80BE483AC6ED
AE98F5F3E49BC762EF6BA937D528E751D9588B0A1E82EF0A5998150EC3854472
5A91EB983915BC1D6E2C3E615E0267B39D6937ECE0EC16162FE76676E5B69F3C
BC1AD934BECA284B89F0613B70876247D768BCD246883CFF4D819D6265302730
7E4BE6B2FFE7E91CCB8C6D2AFACDB4C5DB9688153E1D6B2DE136BF7068418A4F
2D1C0CA301B1B97290B46EE14B8286A81E709980F67382A5132F01B2D44DCFF0
9753E776AEAE2141D580E64C82598DAA6DA4057FFA9D02C3B77AE15A50AB457F
3FA5A10A3C986B22F8E154C1E564A55D3BE4487677613DCF793F7E1B57C9A925
BC57746C25FE567719A9EAA9CC44F1D0FF8F92C03132B205F57E3AFE9FB66632
D3FB3EF5BDFB9848030527FE759A5273CB81DBA2719611355F43E34F8FD7D0EC
9BE47685A2D122C9B60198A430C5F5E3F972376F0FF4BA52BAFF64095F7ABCBA
022622692231FF87514FD912B80C07A0EDCEECFA629E2734B5EFE2604E8DCB24
32A4C691DB4CCCF19EF897A9F4EA5B2B5AFCDF87AC06B93669F3007C1295E016
FF0A99324B80E37020B1080E80949525B3278DF111ABEA48E7182B6F4DE2DC90
B8D31A953343D5DB78B1F2CC6CE631EC7E3D0041A823DF2A4702AAC0F0A2F018
E5ADCD42EF2EC8AFF6F4705D30042BE7B6F866C14AEA1CEE04DFF82BF14931B8
D297C38E6DA6E587C23EF0864F69BB0DBC9C1EFBBB97B92BADC336A4AFAC6A91
0A6B158DC42E975CB5D8D2054CEF367FB112456AF50684C41F80B1E7ACAEA853
B843CABA76BDE9582090299F423519EE3AF8F83AE7F7828B314B6E36E9127419
F274E9FBF5622C5E48D7E95664D6C0C1006661038CF2C93BEF1DE34A163A2C86
693A13F4D0F052D2E183F36401F0C29862BC1B36A086524F76C7EE2C6D436A23
7009F146F1756DCADD3F70C51FDCE610E30C0F4AC538A2703423A07976ACA74C
25F4CFD6A92969E206375FB0C672E45948B0E832F2BE688EC22FEEB3E06BBC3A
272F73081A30830AE4214F2F029918FCA40BAEBED6299EDBECA01E08F27E5627
F53BC56F4AE7CE2D6273B27323AB829E2D51672A4990E3AEE84331583A99DA4E
63610AF8F10C50FE6196E3F4C1E4FC9BA6BE0ABDC81A0A7BF6A5792A97BD0A7E
7BBD31C3FDC01D734550843C8D84C6CC0B492CD1A6CCD57428F03A863E959C77
457D401028FD00FFA9BC422FD09D8B8A70446A61CB256A2FA0B59A2646D9C5FE
961894DB8B315C52008B4416AC35439E010BF90E43A05FCB2FBE8E62385E220E
588B7FE5509F1BB71150E159D01D24EE28008D4213227FE9BCAA34364B1039F6
BC142AAB19C8E9B15F0113781DF9C9B3BC145955552A901AEBA588D39D7E87F1
CAF27D315E168807021B0CD1B2CE13B611A7B5FC28DEB4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: wasy10
%!PS-AdobeFont-1.0: wasy10 001.000
%%CreationDate: Sun Mar 22 11:13:35 1998
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.002) readonly def
/Copyright (Metafont original (c) 1992 Ronald Waldi, Metafont curve conversion by Metafog (c) 1995 Richard Kinch.) readonly def
/Notice (Copyright 1998 Taco Hoekwater) readonly def
/FullName (wasy10) readonly def
/FamilyName (wasy10) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /wasy10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /Box put
dup 52 /XBox put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox {-23 -1667 1720 881} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB02CB1AAE
36F1D7B67C605A37687A9C3F7067F07673039D1E3E1F5D9B09E6A389A55EBF12
06E72531469F768EDBC4DCCA572BD608C4BA8F7EC3E5BC61C6D949C94A843E69
0622F0AAEBF5CB25A2395DFF6342106C198751CF0B33691FC18800254AC54C04
02494A0E3670008E8BA57A3CD823BF47494F2EF9244421A8A0AED84D153D7201
BB12EE9478DF00CA573F64C2474817FF401EE94BACCA8AFC16E776665C3E1E31
89AEEC906A2B9F8974BEA7160C33F0AE7FB04B2666A5B16659D6DF66A688D80A
B531D9F866F21F15D55C6FE75A8787091359698E434EF9C129EED0427EB96787
B3F25C530E3664725C63D4C5DFF9D05CD13619FC41A001275A78C58F85FC7C4A
911CC31CB426231473202A698E5715B032D2206BB361EFCBFE3E32BC0C8D9BC1
353AAEC62EE632FC8FFFDCF6E7D928F562F689406CA00C11C7EAA723B62FFD2F
5F6343AF494085662CE2CE880B04F5589396EAAA8823DBCDE56D868B9E66BB8F
10EA91AF37D76A1BF27E69C2A2ED1D8B25434C0F205313ECB8A6E039093FFB32
983346BEC569B175529DAAD1FFEC1A9302918FC947C390A86C061AE0F6522D79
2D4FE06AE4FABA59F225D7ECE2EECD4BA1359DB18F8957F551C5D6F037F18545
CC6D03EB2DCCCFA294492ED72A737588457E5B18FA4CA0F6D6D8963CA35DFEDF
31A684FC0388D416D7BF6CD9837AD8692F284F24B80CF9F24DB10DAD0C4198BC
2D2A52D9F75CF6C52C7AE0D8D4598DB750E9CC97D0FD31EE8C598A2FF3745694
29DA808141AF4D8F8AA36D7DDCC3457D5E082B2BDF7EE060296721D44B092E70
3607B2335488925E41B22D659C8F0FFEE19A7C19547A147DB851262E47E9C4FB
0A8364BCBC1C77E29A1183EF185EF35B9A5B13170730ED52D5C52CCB460E7D37
F4F37F772794BEA0DA201C99C52F8AC2E4CE7FF33F6ACB796E55BA2372E3B035
52C4F57AB5C0BF828DC7E5A8F8F00ACE0120B99667816FAF5D736BCEBF7D45A5
79C9B5EAA32C9B672D764D2F51B2393ADC71A36AC0D5CA76F3F571D50CB4C1D7
CA77149B8F0C98198919DC43890B0BBF10075D53739F7E84CEE95B40C3DB68D5
6E9847E37B7920412068C3DE2065A77281345980956AFAD312499818890B454F
5DD8C92695818BA4DAFEBCDD4D268763515CE077A64C5F3AB384A6DFD7DD9641
FCDA0A3344B3A14F82D478B4BE7BFC2822A4D67AD3FD07B11589B93842066528
1E51D954D7E6019F6921DB9B00ED303B4B8F557EAC7A0B0340A268B0DDB25B3E
BE0982129B0D3416CA5D07ADC689CAA181270B8141F9D0F60C60F156CB305E5B
E71D9A5D5FB3216BFB66284FCABF6D74564D1288EA99D3FCF6F29C3AA690A596
02C0AD2BB29A2D457C66031E5571A1454758212EB4D053F4C28FF629FA94DBF2
9677AC4B92C4DF5C7FFDE31A8F2D6F9477896C11CBA890DD464C9231B1C350E8
E8CEE17F2E0F5D10416F7D7FBC6085E9BE09E692951EA7B93A9F49CD458476E0
A380E1D122F275093ECFD398FCA6D714187CC12A2B16318F9E1D2B0E9EC134A2
C4D2674AA68D2E7EDBCCA383
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE503DBAACC843B2D054B3D7DDACD7D5EB62F3E2E7B16FF53
BB396EDB8A4B7B07046F0089F56E044B37BC6D86BD3281E84EEC46E015BEB6B4
1B3F42A7DC6C54ECF3801E5C266B6A683FD55DF3C02946DAA6596D8D9A37844C
7C6D9D856CFF936CBD583DA8259E113CE1257BE6EB5872FBF1FE69DDE14DB146
2E4F9859384B15882C6B0E2215D2EAC98DC8423EFB3F3A2D2CAE793A820A25BB
2A1F4A466D3936DBF7D6E0C043CD6D918C8C6732095BAFA7892567BEA46F08D7
8E105FB10252DC8E0138D3E7419FD02E246015A49306DA63E60F1E7307B7624E
0116CD08A59EF79E5D7A9AF1DD9809395FAA022E22AD612B2F013E31B97F1017
2423BF5A5403BC3613EA73BA2AAE3FCA5D2E78ABF50BCFF5131713CF8B98DC0D
FE65FB557F3590423411FE93B8D5FE942822CAA7A8676A83FA6E29AAADFD82C6
585E084B87185ED539DE6FD5CD5412150439080FB47F44979B7483ADE1BC4055
0DBD475801848196FF59D705A0D83B417F2B196F5BA65829D9109E395A486D4A
D48D6DB15CEB936185CED1820BC8C84AFE01CB0D62649724458D42A46F65EB76
5A04C09EA527C1F30FD1CDEE64FBB71D44E8735E4FAB04830EF0E365B6CCFEFE
B512261BC0AB1A1CCD939D2A45EF4243AD1F5C8268314BAAC66B0137E33BEE4D
E2A7E772A9ABCF891B4DE86A0B102D17FA20A3B4498F9F994594DAF5101960C4
2441F80365EB6F3F1B4E9A21148AF63CA5B2E96A887464E7E1DC63D61778992E
8BAA8ED897AA4CFEA20209BBEE4C1F8B43095A0250411E818E43A656F32D6631
AD2DDF8CBDCEF46390C91D0DE8244A12664E66DF08A43DF6624DC1A4A0BF8653
4336E12D2261D21A4223D3572F95AA45F60FEE4BF38D0D966210F711E747B22C
96A0FDF178C82BC6ADCABD8D32CD7F642D549776EE9026CA7D1CD154DFD1CD2B
FB16965C6AFA3554A1A2B58B56C629EC8E91A2F3A3A8F5F233734F57D81D1313
B766265DD47E9E072BD08FECA3A579C11B7BFAE41476047FEFDCD10CB110FB14
32946F83589453E08E0665C2E020C3A0555FDB243E3C7493A3B557A56C518348
D27ED9B9D8EEFEB9EC27D691003B469897641CEF76DFB182A09FACDCB75F9F70
FAA11B6C00C9EE548BE681B343BEE13F473FBDDFE5EB3EDE0670F1ED9A0F247F
53776EFB598FBA3AE4C7C3096A7C5A45C51AA4EA56CCFE799165E728A561C616
87263665B01BDC8E503C301A07909B2C82BF7DA26602C376F6D2C9A0533DDFEF
1C13F546628A18D4EF2D31A579BB0C55532C9C64AD47D42EA85E65059449EA20
50F977A8076D1A2DA9A5E70931010B3DBECE6837FA48BEDAD9B88F83878769B5
595A3EF7AC8C3AED9BD97009F319B761966DAFF0E945BDBC0581B70483ECE831
3159C52CD5808DA65A12570785BD363878B06C7143679A8AC6F470F61ED1EC3C
71A1F55A3C3068A83A5135562C8DB3A5D4C31CB9364AEFAA1D802C8DC7F964F0
856EB3EDE5C900F9A87CF355E21D923507480FA17DE362B0A09A335B0874F69F
4BD26ED86E941DF7224EE783CB20AD07489613CCCD80BA8B5E8229CD272929E0
1870528E3C011256250383F5FDE8B05945166F0BBBA77EA01CA92F10E98B5A78
BCE5DC35CE8EBD8727314772A52CBEB5920B3F41C2E5F87F17FC4BED89679DDC
AE383E9611FEB3194551B63A67FB01B1A96855ED46C90D2530228B8DE7A8AB14
94D9090D297BE50DB3DE9FD33908350F621F165BA29E161505F397C428493552
AC986172DAF132B4CB36B98BCA86B251440E49A37A11BB58ABFB256A65006556
0BD25A89A1217920431F844BE1969D9DAD41D854B73D56A71DD5BE4AEDDF2FF8
EA50AC1077F7833369E502C9ACBB3379AD5FD98A3A67E7A7212356E9E1D1F8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C2D1AE634032492B7023944DD1F9FD0CE2F7F4
67A41ED7A40FEA86BBD50B645BA87E3D9B98A309023373FF75491743644413C2
ED9D0848A4FA332D582D8BFFF3D0D13EE0E49102ECE2D624A0A5EEF70005594C
5E0F074DF55E0355AA33C6C0F2D5F535AE93682E855B1BDD6CE955627284BC9A
9199F188FD2CB5BE9839DD396DE541D181016DD6F0563A26851AD5EEBF32FDFC
699847D069FC2A65671D66EB451F54066661038CF2C93BEF8D83E143656B00CD
21885CEE544EA7E773049D63C65BD60F8EA4F783BAAA1268AFC408D019ADF2A2
0C75052F46FDB53266B7944146B3B7D9CA452453C825B92E606247E509F9600B
D6760B31870D69C4C15EEA09E1831354F7C4A2158796310B1E33D5B6A764A8BF
95474A18AA51CBFE9226A4FC31C9828CF2AC80B73CE2768B06545FE267B888A5
CC380114DB40B124C844BFFA3CA29E638C11C7BB98816531D1983A33A1BE7394
B42FD72BF46E4127F4F1C298D34F3811D5DDA7F33DC6E913E04ED663E84F7681
48C131B26525D173F07ADFE2C2AAF32AA5A7101270D15AA6590DA4E9FFFDE23B
9AFBDC82C3C8F14509870D004DCFF1B72D8AA0542C90E349863E8AA5EB8342C2
773CE38E1EC3132A28B15C075DA951F9AF3ECD62EBE43B473FEC1F76DA6C5508
9AF3D95E3AD5012C5ED5A9F1AE7ED88340879B2EBF04DECC857C42C1A94A526B
9938774C9F054CE6F54FB243BC6C66687CF0155E10B53A271F23B6292718FFA5
6E5DAE5894F1924E3A5BC82120DE0F44151150EDD1C65A3D5099445C0BCCE07C
CF4C82B318494F42C776D9482C86646218BDA22F6E793C31EBF5C89965E329D5
452E084D72F8219F6D0A06EE6C0F733B035CCAC9A2CAA288BD94212203C21A39
B686F88742CA702042CE6FEE1C914085E7065FB50E28631D2A286B9862B0C691
72ACB8AD4121F47D4750A5501018DB4BDD5B64DF6A6F8D30AA78C33E121DA9D4
AB827E616E7357557C23BD668FDF38CF6194AF036EB3090451311D2E0315E7E1
38A9C53D00E01279397F08669A63BE88715C699C1A7A02FF77CDEE3F0D6C30D4
059BC9F9DD82CC123F00FF7C25CAA524C8B374AACE6AEAC8CB4182A887EF4B29
4EA35FC77F7364BB75AE2083C7C66E6C13CF17915C9B7EF1487F54EB23A1CE0A
B8CB768EDF04DBF511A4639F49A908F0C231A396B14B2C655BE5952539F63A9F
8AFB0F2BABD93922C7DB78C54E81C2E4C11086C35B56160359E166BF88694D92
194916965CA4B0D9FE1F35DD53F99E96005D40B3D072F7F84ACB436A01134774
3DCDAD88BEF8B3F7104BCAA6E752EE90D2B38F2CE715C6AB21674E82E6B49A5D
CA8AEE53295494C657A9676AA0B493D7D546F9D46F5873F4E4017972377DB456
69B6CAB61314565222A1493030E61D657AECDB179D9AEE28C7CF7AD74AB715DD
9CFAA477132F828687EF2A58C54D8AB7580EE3ED58AEB83B72CB902DF6D3064D
D668D016CD47C8D086A4C9BA264829CBBA92A6F8E302F4CD994EC08C00AC6A66
C51254F7128403B6A5B2ABE4A8B54B457DF7CA439382D1E5941E62CBDE6A24BF
40246A18A8D921257BE9AC6BF7CB079D9EF5F5BAD37D218B1C3735FB7D517C34
4AFEC68F345BCEBE40A55B3DA6DDBDD8E8C6011903736F02F04C2D2EB4489007
C555A6A08B437AFCF723A8F721B0600E268AE9B589919EE6287229169AB6A7B6
79DBABC420AA6231DDD2B6A02530540DBD7FF0FE7EA3CBCCFE293D8288A3C4DC
EEFA1F3076BB941B1832E3FDBFA3335CC6D1E2BCE00279474109AC67B7D0A034
352C6BAC6788DD87665BF143F03485E11FFE1F67FB6D16A8CB93137BCE2E4D53
089C9246ADCF057578194EC0467C42F53DC0838C1917ABDE57FE1D34CA143066
E10440056D3EC28D85BB53EE04612C6A0D8E6BB90C96A90E99E7CC878C86D863
F261E8969E275792F7C38F66CE9BAB1CE577EE970A2B5E013E23CB0654536FBD
A5400F30F7E8F77C2A44865D97EEB9EFD4AB7C41035E3955A08337C981230328
0228A1E6E048CC39F0187524756597F57FCB99FFDAEF963621BBB8373366E021
ACFF86D1A71187A40F5776AF971B1A2B727DBD281F3BF2D1075EEF8C1225F96B
9660E087FEBEEBFE490C45E28A8B6DDDB556D22D3BB579328E4AD9D5C3475D74
CFC7CF7E387414E4A017F9FAE43F47C36E5544A355DD24BF3CADEE7E8C956454
650FC6D9ECFF2EAD25C3A3A326B77B817ADBF1E5A669A87C3886435AD51C11BD
77A2137AD9E2DE4CA0AC1E9AC3B8B92A16F592E4082E90DBFE87968918000FCC
C4BBB3D0F0A77E12FE8705723A5D49D049F420266F034B72EE3B707AFA7CCC7B
9DC973319C4730E532FC9A74A40B28124889243D305D4132793CDF8DB01750F4
DFB79975EAD0E536F9DE9959CC5CDE05CA9B914F8749608248E964F5DC2CDC65
AC636325718AF7EA47946CFF07C2DC0FFC04786221F2C415B3480FE8DEBF394D
18921C6015E0E9B1C3E60150E61B8B33CC90FBD867BEB880FA518D57488893EA
46C5C9397942013B540DD291372C1B08DBB589B5A8C4895D9EFE1182E11CC0E7
AE75FBCB69890B519F7B53237A6BF0906A6DFF38E77DCACD3ACCC25E153A3069
83849D58F61DBD9851718C37C2FAAC141EF01103DCF36D894D9FB2FFD42D850B
D31A8B43358DB8266AAF65EC987FC4455748C8913FC00A089EAB8BEB6F1FEB40
4E47901751F077A3443B933694631A2EBB0EA34CC47CB9695CD7C3FBC4C07402
313101DD8A026EFA8516683FA3A30649486C002BFB9868A7B499DE2304679D96
80B7C482A7999611BB127FC8EFC7A169F8CBB6E313016221878340DAA18AA6AE
A3B09943CA8A11A99510B0A8B7B1E654C8AC3E8D668AA3D9B25927B9001E6ADA
AB86BA6B2B4E28F3C65566EF5311D4A151152979A546051AF86E03D22C944CF6
67AD123F9C30FF7F2B77E767A4C9492E72CFD969120BAD216E4DB5EC85E5830B
36D54688036EE18D076090BCAB0BB0A9A811A6D2D686A31029329ECAE472DB8B
59B3D595F7C8662B9D0DCEDCB3D6B3E6F306EC12F62083A6EFF68077131EC3E9
5A693F7FA901E8967A14F6F3A7CB4A4379B0078199492AF5DF5565F71FF6D1AC
D679670AA68354B3C9D4EEDFE9BAF1A73257424BEAAC5E66A9E915E68504CB46
1EED8B00C754871F065F6E7F05D1DDFE9D8CA7A3B6FCE8F49CB09412A1F669E6
CFB5D3819D61C642C9B739E8B2D4E72B03779B8BDA6BAA1D80F1562BA19D44A9
04C99B2005FA7E0F056B243113ED93775BFEF4540A9941FF240FC0DBD2A65C51
7508D30261A45ED8C77C60D7FD136F67417FDD313469420BCC3E3E5705244439
4E46201B34B583A55D5659FCCEDC1F84E03D692B02A2B072252518FEC11B39FB
D1354C31C01450286FC19405DB16C42D1F5F66E7F073A95475E17058A7998FA3
4AAD8C78DA36221A147B7E77E6FABE66C156FBCAF9D5F433634FAF4502B84153
B1F9E5DC3B118955D3C26BDF7A0FF8FFA29F8046C929210BD2FEC7A52D3F6D51
F6E9B7E84A5DBBAB93DD3CF197130F36C41F285D3BD320E14BBA53523C519048
67D723EBAC29D8A602C8687473C07F4671206794D6EAD1708AEE4A577303F4C2
9E1240F90533E281EEEDCC3F5E4DE80BCCDC5377C969975DADE58C1A863D53B6
7DFFDE2F4865255E53C23CCF67CA8BF1B1274494E363BF0890FF5C1FBC4184F4
6743DEB35DA63A24D81C3E5A9804EA61472E099C65DBB42F3F97CDE0C047662B
E6A3E58986C54B7C3E2D69494CDB6694AEE7D63B32A6A32C93477AE6756D1F09
7F534BD65EDDA5B466A2B687F0998FC59BE4B93F47C10F45323B24F840AA363C
8C06EC0F4D58005511B081AC99000BE2E075BA5DC715D0339BC3114723F4B3A4
AF84E6A5511219AFBFABAE4AF312575682E6A86792FF4CCACD57469300172978
41A20A8A19FB0824C590DC62DE3E2570E2C36D1CF43D1AB5EC07FD02651DB256
5E849E3E89A92938B399848B8F0A694CA5139AA6D4E7C9DDE93C9C29E91C20F2
4FCFF3B8645ECC3AD0C5EA2C6E649285AAA924049F99B840F337BE8B11C5EEFE
B6538BBF26D4D1C48D353FC68A77014365407D48C1350E58ECA8C4A9E87576B9
D9EADFA0D51077ACDE9DA732031E629837AFC03E88BA830172D02040286BDA9D
17A20F6DC3C0DA1D49285766C06EA868F915E051139ECFE22AC9B84668FCB591
40148E7AF8F1D14B07E1C7287C5346F0D5E3DD1C9A515FAE8AB259EB719E1F85
0331D50EF2E7C281D7B41921D5D0686F0EC0E5329D621ACC21AA586257CB4F68
86741417E5C0A79444E197B321BB8116BBC6FC1C6C1CF154203496AAD69A05A3
349349C965D9025A5318E0151C0106A0FC93815CB4580C6C918147E883F119FA
4AF06043B901F6B601D390E2DC1104F91B54A06D57CA5360E819E733A2A2B3C9
7F15CB4FEC940C45FCD7F44AC9E6EC46819FA3CDFD931CCC6900B258DECDC3E7
7C89E363CF1767A472830FDBEF494B64F6CE0342AD2CFE2075950CC7FA4A9154
690E3F2ED8BD1AF09AC4E8A0BD65C68046193197DD6640CAA6F371095A260DE5
DC01B8DEAD9D1EFB1E9AC14A1FC533EFF5BA5F1C74DC3A24E5C002EEF9A3B18D
EB2BA9A1B4B8D8EDF6B4C901B8CCF101C98CDDF060D5DFD66F262A21B9BE859D
D27CB4B23D2BC10286C949BE73AEF3E76CF72463FAC5AA7A2799F1C34A44EC40
882529CE5E4111CBB13CC3AB7AF1B865C905F11D834B40EB00EC544A2B7421DB
DDE68976BE50D33C40B4BE66C38DD1D43E8C7B81DE412C9499615E3078045C75
D93EF7CB0CD6D034A76D32DC844CE009C6EBBF9C942C627F5F1463ABFF37AECD
69BE9AD7B87EC13DF7B665C7380CA6E660153B9FFB01876973BA7F253E0B2337
E311E3F3AEE83693A8A2CBCAF17570ED25CEE324888E6175DFF82B44B4D6E4EC
BEF48C6E2F39CBB2B53B18DF796B34F6AAE1541AB6B5EF2212B7C645986B3B35
D7FFF189EE33AF96F1896670FDE27412BDCA8D8E8C9AB3714F4D8EB623A14331
1EC892D1BB9554D345478169554349A2C206AE612BBF80F4BD0A76B801C53369
EF2AEF19277FECB255B43E04EF1076D4422E27F4227102CF7D568055B58E1154
D1959FE6E01E63EE885ACB4085A38D7B094E0DBFE40C853B5C7E05E982BBEEAD
D7A39624091AFCD32390BB9D558E1BBF66C0839F5FF759E791EF3D8B4489FECE
9B4DFFD97C21A534C8A75EBE18C09C8CB07D857D8AD958844F545060C666801C
182AF99D4A8A3DEAE2BC3A09C3D66ACBE5096E4F24CABB29604CEEFEABE9DC6B
727B66970563255A4B7C49FD16D8FB2177F2F088D5C9549097D2E55E6C7A52C3
C7106FE2658CCCC0E009FA64AB221D3C1A3F922161EFE92BBED696A77FA249F7
F830AB81B87B3FDA2CC3472D6D40775CD82E40FD77069401B671244505255094
4E73B03D45C39AB7DFC251A781C65039578183B066D5A65BAE4AB038087E4025
7C1FE6F486711122AB2FDA7F0F7BBCAEE514802AB4764D876FCBAB9CDDDE01C2
CCAEC45A0EE1B523976D030888E2A61C8D8E0168E486DB5D57149B3280CBA72B
3406153236B7A35B6B41E04B3165928EC47EA505C0871967BD941EB2111E21A8
73A404ACBBE4BE9906577760274BB4A257CAE6E37EFD447C37DB455D2F083DEA
179DA4FBC32DC815F9158905238F53B5565761668A6EA34CABAFA33A7A5FC795
C99A614B1869F207E6BAFA869CB82B6DDD4DCAEB1E2C634BE19370ABF63A7B40
DEBD85D35F58F934C08885E3A3522EE91BE71BC65549880AC6D87BF0D60C44A0
EF33D99D2B61165C824C1AB174BB19E8202B76888B9C791387CB512AA64E156D
060119C53CFC33D924B3943B71BA63CD47F5B91A075F5BE42A3BF17038D2ACCA
7BB0DF626C8123B003E96D77B5B2EA9A9AD2A517E03614C707EF610A2A93B488
3DA220360E10B92ABC0E14777F2AE5C0ABCF34C340EA150D8DD7A4233D51BD21
4B178FDBC557F60B0D5EF70270B40D4EFDAA421F4059C474F387C70B44363C27
DE6DF4AACB189CFC990D024A8719BAB42273FC4B62D766B257DB2E4947F75050
8B0076DF17958DAA05B960B44E24AADF0A1FE48F1C79145B21EBAE693DF7821E
163013D1EEA9166A03C74773CC7E213689D528C42B747851AA44975855AB61BE
CBFC96E329330745BC796F16911E1A1940D45D60E536D3DAB7BF64E87431DA1B
57E3EE12F10AA1031307F6A70C28C68CAE5A330D8FD8C5F9A35C2AD9BC423E9C
A4DB019ADE5687C1F2603A191D2292EDCBD09E0FA9529732824413A72119D248
4A2248B97E5BA59D46A448D60C4417D996A499D1C5BB0DE56996DFA7F12A4382
8E3C49616FABA8A748F021AEE2D83562536CD040168633408F8A2EBB7E183462
F00ABE5B9DE9E86E61B0482F8FF93B7F1799AE4E4B23467EA45E91A0E9965C33
E501E54100E989CF0BB55EC84C02CAB7D1892AF19D50CFF1C8E6F121CE477BC1
3FB3235F52E000916B01C3A6062F7A3BC54250B62CEF85C03F169C665DED49C5
513696E3AD894BAE642F2553ED0EEB16F43B842450F93030CB5809EF98E9F48B
A0752DFDCA4C0F491E3BEFA5424D243AA8BC7E87176773002363255E7173B542
4BBB2D32079DD408226AEAA0C4DCB8DF16CC6762B21596674B6BE12B56A9E6EE
5FBF33897F01997D259C66C27885D03D1885D01F9FCD131A08B40A3AB641E2B6
81548DB7D37F18CA0AEEC4C4A57FC7997D3EC9C30829FB8E0E5BCE6581A2C28C
351126B799284434C917ABA6FFD3B08A4B47513E1F8CDC2763558C93AC71A4C6
A69B4F18A24CDA71A04FA87F2900DF87CA692EEB2A0939B7CB793DBD6FB67180
1FEFAE1BFB4134A99CE066A90E27CA3129CCBC9A3C3E966D3F3B431634B78DBC
70A30C83F3116627B18993033B383330B1D2E211B7812E89AAC59968D7B0DADF
133520A0F4E9933000A0710759B6D12F9CBBA5AED8A3FCC9992B8945C1FA2AFD
AB64AAA3B9E53FB6EA56CCF855DEB471E057067E5B94A198A70F1492FF1AA148
9D0174E713B976F3A0B36C575DF597A3DBC35A6739F883F7465E6C0DDDD89709
09777818CD73663BAA17D591BA5E7D65FB18BC5BB7642593932C9E0DCB7C0E1B
FEC6663C275934BF33671BD55C838F4ABD354A7F17E74ED1642B917B64E296D4
E219A3597953634A1F95301454CFAAED3C30CECE4FD7CFA6E4BD0ED071182E6A
6320B2F944CC07F6E33B9528DDAFCCA9D3BB807F7B84949728D6B8C4BB6EFA64
2D9A7F8807674AE8EBCAECB81CAA9866F81A02BDF349FAB129F23E86C9BD62FC
0EE8D098C1D3B450D864B6B348501D3073C42AC1EEB4E838DA32EFF893D6315C
69652F112E6D2AC9F733F2E0D6E703C4F99518B09E9F6D1B78E72E7E52019EE8
FC129C6B63BA347C03BEF3B0585CF4539FDC66915E22117073D744C70F9B59C3
CDC8D90DAF45F9998AA0FF1D6E807E44D116BA311C9236501F2717DDAB52753B
36705655AC96FA11352E2BA87A65F8949B0B7918EA727DE4A08DE38E4337BCAD
21A297C69FE7FC09DE4E7768D68B27DA24448C15247FADD310C58FC911D294EE
7E91E866841764AF5DF566B490133D656784318768CC9EC7C334FDFB7BD40822
804A5B31B13418130BA661F22AFB71F8026DCE90794B6177A0DEC633BC444468
AE738011EF30BF68A423F98DE4F6DD9DB5A351BA579E2C5DDC983652D0E7CA26
ED1B6D0787C187D5370B60DA2F07494E52C4BB7A8DCD5321CC9BCDB0162BDAEE
9C327134B56197C411E3E29C237D404E0A2787011D33F94B6D26195584679DD7
944470B483758F4B543CA539850DAAA113F937C6CB18816AAEA2865F8267C8F1
756E5F84C7C95FDAFE8ABD88C9F7B1EC222D351E9D566EA091134A841CD91424
9FC82D9C4EF4A623C63A895FE66E14641959655F235BD056D65AE5C9B6190F3D
A6ACCD6DC66492D76B2AFB5EE9C9F6C02844D230FA17EDC57D407CB83D2501B0
D2C9E86FD7135D53B69F7F9713F521697F75F4A0116546A9D962C2261B7C5374
FE3D6DE742A6980C8C55A9DD737F2069B9F979B6D9C1403EA94C9B96CC5168AB
AD8FDEA9A92B460437EC7AF345B1EB3B7E8780F0508FD81A1EC8D91EA8100568
831EA52EC0C2C4471627FB5F2D03BDF8726BCA01A7086A3A8247773BF93CE143
AB03DA13405FD339E3BFBD62DC733A5D3BC0BE55E5C3EBDBAA16F46E6C7173A0
1C16CD6B1ED20C0AB3E91BDDA9D98A37E2DA191CC42BFBD913E47C201A652E04
39E4E2B2DB67946562D768AB4AF7040FC9F06E92BAD21A9E581370CCDBD90115
7ADAACB9347D3FD8F575230559220F6A416C005EACE2A2BE3013C13DF3E50EED
85DAD3A70626B5C9CB7934B5B0673A47B57EE28268FA3F2101AFF38BA1917A29
6C2BA33DA967F5370037C7CA528CB3B9A5AC0245FB4B4704B2BECA1FFF3848F6
4407C72774F0E9B1F0EE4F9F1687F300398E995CD0527C4C7CF4312021367191
542E945D98827677A25016C0787C70C8010668E6A1E9F94DC84E475905DD35DF
255B64B2889C780DC45D78DD134257815397BB8EB5E7A6939C43ECF80EC567B5
62F79E35A48284FA8BABC8F6A233E02A715BB6E2465189FC47B9F74D7ACF777B
605BF15540DD278DF04F7CA22DA9640469563D6E1860BA9D54EA09C0E2FCE850
7F619CDA4BACFA4A94DA60C2C9ED0CC9861ADD632F10FA1AC51B5B4094EBE388
53D7FAE5D4A8967A0317329CFC4FDDAB7414D018C8E38D17A24DF64D1567A7E4
57CB9C37832038AA1A96A01FDCEE2B98E0C1D30AF2F4B677D1DEAB83F49CF037
D75FE61F22AB20883A8D5D9620DEA594A44CAACB562DF000673ED58922C2D185
B80B478DA643F3EBED3ABC74F9DEBA8EB4657F1F3BFE97412F176E0E7716C77A
ECA32C563DD46FB053EBB67B9D376E328F17C74F1DDA7C8FF76BB8FF821A6801
02B56ACC59E2A7FA5588BF49CCF91794D9A602C8687473C07F4671206794D6EA
D1708AEE49A0BF17BC64202084603747B3DF1561E779955D2C14E617D06C6C6E
5D31AD786B21460F0E8C1C2FB569BD40510B96EB562924278CF8D650060CC292
3372C0A870FCD302A1C56E93C4F789008648C187E542A45CD9DF1211028385D2
3AE9AEBBE0D0D3F6724561ACB8D1BB8CC89389C60155C920430B9B73AF085CD3
08DE598078BF655B04B5E0EE2360D53A6C2EB0393A21C2984E95892F8AB22787
5949B30ADA383485030AEE93AFBABB827D996E563ECB18027BEBBC9E01AA7172
A8F67A678714BD90C887E7FE72E4D0DB5024B0A05421302E4430D8AF79983D51
756AA003B3E1AC0B42621E941004494669BCBCDE44BE8B9350C6276EA61AA946
5BBB3A56AAC8D14E62B83EF68B2CA51706AA0F045331EF0C76B982CBF83B4D08
4C96016C1FB79A09D0DA43B3B6D093109037249EDE4DCE40348B50AA5A7DBE1A
AD4FCBD9DB2E1289308A60706034F4C0CD6B7D8E377DDB6A4594A569CB008CA3
0E8977819886FEE3AA4828CB103799D5A8121BFD5C984F519BECDB8CF3313B22
F08E3A8EF4616E1DEC7474C77A194EB2B31352FF97719A22BFF5D31C9C6C0FF5
6F9B3DF196373716B96D37DE09B98DF4129F9E0B78A3B95F4BC521D08B131B45
CB09CADBA91F8B83C1C576806B25604B266B8D60F56AFAAB0557EE93F87FC7A5
DA5D62B266C68434F2D8702D4980EFC41B863696FEEF72E35112E7BADE4F01C5
69F3F1C3B79341CD06E983A7CE9009A72B6EC01E7B595EDA5B7C80281E3B8177
E30458C0E8F57E41C25DAA01887A51F1B973F8237718D3E3127F81D20BCAF1F0
B426EA6F78532CEE2D8976F7857130CA0932B2ACB83E68ADFBF217372686B1FE
EAC57C32764D531E3B5CD8D179AA8D10BCB5B93E04FAA62C2147ADCC67517C05
D3140F5DFDFCE1449F0E80BDCBCFCF477A2C30A72EC227B208AFA532260E9519
9F6B19286AE258DC9E2206D9705E4C411A8E86B3442888C9A7C62369E67BAEBC
7F43467AE8DA7A9CFA275EB02313C73A6CBD484908FF78EC89C3C7198B5BF6FC
74B2621802B29CA16DBAD0A2BF9A151AF2A954AF7684E8E036205B149DA99B2C
D2F337147B5D3CD9F32756E6730A8DE91A44B3DFA2C96C256084D6DA18A82EFF
BCEDB0E2DEF7ACE895397DFAF366B982B1E79D6A0D21DCC7556834DD3F66EFC7
134F543BF9748641D271234F36A01DFAC57E35F30F533077FDFA6DB83CBE3CDC
257FCA8C9AC9557F97784FBE0050F215500F281FDD7261E408B6BD71BFC42CC1
7B0608329D093E1F99904AF5A87B5FA35C5E30A79F2EF46AF98FF43B1D23ED27
CF39E8CCB15D6826F49C36CAFD8B32FFFBEF97A93AE4A722D46D42B8634B19F2
134FD1A34C8334E1CF5D31DB1BE3D60FE50F2AC2BEDDBACA731F6A6A487FB638
11D11C9A0FB9E81D6D5E001B17A8D845ECC703FF0851D4A53107D05A3C3E9546
615A0E247AB348FBE74D1EBCF15C2C687BA97D3CAC875F3B157CA31D94764FD6
9135A8315B7AA0FC2782771202EFACD33817D7BAEB7B955CAB886B6BA7E168E4
BC682C4552ABBBFADE42E309377B26CC9E0C597601F30C7FF2B337B41232EC7C
C4F97EA37953528C1F93BDCD772A1B9A9CB8C1205F7896343973FBB9967BDFA5
2EF5DF98E3BC006AB80F8ED18036DA7E2AD7479329BA70E63BB928977EEAD4E7
CE6AF5644250CAB9845A114E7114998398FEB89FDF2C8B0716B03CBE21890FAD
03789D4FD1919A0D5E617269DE9037EFB267FEC472CE6BF5C28ECC3F08B56E85
64F18556B5F1DBCFF100EF291F8767225E00D4DA958B0CA5AB955CFC82B4A73B
24408FA1AADD820F993EB7ABA18FCB0937095FE4487251BC6FFB09F35EA042B3
B551F67D4F81FC0F0766E196C522EEA61B9F3B463DEE44CBA80C234D6D7E0D6A
70DA9303495DD4B94E0C5EF66E5F4252E5511A19172AE7E16B6A483535286B41
180AD68E00DF5037586FB1A55007FA8FA3B0F5106ADF3EEBE554A6C69F8DCB88
685B93211724367BD243EF56A477B3DFBCC8AF7B6FB67E620200B2137808A12D
DDA2501C6655411A4DF2DF658F42D355F5A692939B8FF2FD682FC5F4572E7CEC
E7E548847AC42ED5C27A154765411925D03D58A22DCD2AEF5406DF4663F64F08
9393FCA362BC59A995FE5430B39CB5EC916B7051F05EF5F7024C75B312709B28
8BD7DC6DCD6FD5D40AF7CAD91D4E137774FA958C0E2642BA88214C10818B31AF
363A3D0F6A0A2483964AA9CEFF0C08B845AB92F0C4AA725A4EFA8616E5BB1DD3
BAB615DCE159D6202519CED0659AC356F55822EEFE030D080291D452ACEDC5D0
EAF8E759703167002ACA1C42FD15FCC4C0F0F5BA7AC1F92B5E0F62BE3CAECAB7
F3FB4B9D4284CEDB8F2C33B0CB171BCD562BA8E943EFC02ED8BD1AF09AC4E8A0
BD65C4219478100F6F37AFB159DC12654EF3FA2D2446A2E1FB2A650E014F5544
E46BE9C7E0B1997E6DDFE02C0150A1B87BDE4619505809407145D7148F40B8FA
1D9F0DF624614131C24CF968810067A43B3DCA0C54978C821D33E23D73EC3941
BE4A948B3490EA861BD99423B56C2084573A9C2B2158B7FF166C507B49AAF6FA
4A71C74683F2BAB1729D093C01C8FEFB74E98F68EC3A999035CFC5D318DB82FF
8FBC05291063120165B4379B1A4DC9D967DBF6AA4C54C2AC7674DCF9F304AF38
0DD6197A68A158BCE4AF264A1B9924DE9EDDB672E5CF64E5F89CA22929839A5D
8553D90DA82647B305ABCBD6C49ED9DEE46462D60DCC683C3222A6031E68910D
A373B32837B34FFDC5B57FD1DCE72532C2593550EB0DF54DF41CB97FA4ACCE1D
BA61917E26D9C375C5FA13ECA16AD1716CC234C4F66BFC107AE04DD2F06570C4
74B0B414473B436F50966B571AFE8D0CF9F0CD0870270F0F40EFC13B6DFBC3D2
85A49D02B131C784A1C4DBF2811D2A5440E30E79AEA3845BB2A1AD51389ADC41
8F07FC089E8E4F3C0AF189B9B778B910479843BAE4CC2325DD56CBD9B4B1C19A
67CD1792EBD92067A235E58A9B2C1CD3BAFB126607848A6F7FF06B83839A2C7F
FF041A1EEFD2F26607BE82827500CCB8A8DFAF9A55D8DE6C754A61C5905BCF2A
DFF0F69FF58059F1D46A13AB49D23BBBA5D38653AAC7B813F29F45071201DA72
AB4C64DDC84B9308951D2E3D03E1F9908BA092B381D31FD731D0DE9DB8BD454C
ABD34EEAFCA393AB83B5CED9B0860E6FC31462CE7D19968ED81AA3D7E7FF56C5
5A850CB7085567F6AD3F4B37851566D69AA649F97EF7E2744E56631FEB5BEDAC
D00C64C344DC67A64619757E002EBCC0DAF5E74341B83BE025EE14F3FD8F77D0
AC5F2A397DBE404BA26E352CBF1D23E685CA897AC54A3AE0F33735274F754906
B3EB804514B98E6323F36019D2A886868A864914D7D81C56574A8A37285AE962
9E2F0971906C94394D91C7EC0AA568F7684A6B37CCE936BB407B61E3E18940FF
69B61DD4BE42E6D87D8F7D9B253A17F5D00BF0F83B4EB5D4796E42FB7053D4CD
9FEEB842DF3F13C7F09BDD64FB6D29C60B05D141EC9EB0B23BA7F205E93C4A91
948FCAE03F3DF3E6963455CFB22972CD64283BC1FE52D8A57D79602D65BBA312
E072096DC2576D4E6AE1A8125BF2722D1D27172EE86F42DB020BC07FE802BBC2
897F69823BAC1B0B67C888528EDA585C83533D0E1644A0B6E3A9A1704083D27D
5690B18843ECD4207A7861F8A99DE3167E4031624F0ACB218614BE74156798BF
71A443ACADEE13915C5CA44FF41CCC2BB9ABB47FDC8EC55A24E8C329CD0EE5FD
19B8B0E204CF88D6B87D9A2D68DE168AA57C32E41FCF507E742CE254F19EC597
4DD0519E3A28C63E8E38D62A92755377D1274604BE610F4DDD3426C00EDFF203
84F08EE78F508778BDDF1775202191F9287E10FE60D71DAA0ED015633CD86E44
AA19E751F49A46F0792B732E027546FDA56BA1B42B000749067C939449FE10A4
FAB74EC7001C7FA5C9A5623B07973FD123BB57599BA20E77F7249C753F46700B
475E00D41FA03E5728AA57F99008E157FCDC9D79CC6D60881693C1A07F47AEDB
C9B65463A916F24547591825062E84BF5CAA4B01A9F7B88E15ADC59103F6A71B
686E1ABF47D5BCBBEFEF0596D5BD57D23639B1D82F04AB2B64EC307C8B69C931
284BA7C4DA696046756D986278D56C22EE022D79A8A32A4C5D3EF840B9639CB1
0B78508923FB4AF9CBC097B264D2A274CD739F6A9A8920C2DF579A8C1E5ABB7B
FBD0D1FE3262696586A92E10FB3E8D7353FBAFA30FD551CEB9D39AB195BE5776
EB8D864CE0BC36AE063F859AF326C361BE135F4E101511B9440376547482A1BB
7282637D079DB00F337979DA04BBD485BD56300DA794EF33CD04F646FB7704DF
DF783B55A6821F7861B12877C4886AE7D74A4E73C9B32EA493E60787AF090ECB
75DCE07EBC392CF0E521FBF6FC16E5879F7F58F4A33261BB8609E58A184D87E4
01ECCBF6DFD3DEF05D530F2504362B5E1C184BCC426C591BA22DF38389D183D6
4EA6EB8BBF218548B6413766DDE50E614E2022AFC909284A4D43B5C8BCD01337
232B4F684D275FEF10E1C8DD91E5EEC0D45FC02D87A629277C36A190BCE3C312
8378B8FF538B6B3F826D50D21A217D500474C66D82042A7F90731D9C02689308
3DAB365FD0BA5627F16A08E0D1A2BFD79F8F38E964D413E79CDD37FDB07131FD
C420EF525CC0B5377AAD330A6BBA324DECB086CB36468EDC8CCF17E0FD802348
DA78A504A6B8528B9F2B8D803C41812E5A530C0BCCE55FEDEF9C514BF9FBA3A8
54DA481FBC1CC4B58095CB0A0CDA692386F263A75C1F6ED625B99CC9C3E03F13
3A02139161520C5D9CAED67D9869D7CC5684BE0ADB284069FA5A36FE45E57BD5
CE0C7A57713AF055C0A0F972E8BCB6EAA684D03E7415C80F0190E33399F0347B
277558FE9F50A84B49A45525603F5B0384EFBF74859197831FFD14DE2471C7EB
E744A55D65F3FB3C7726F68EA7F9EAA01128AB74393AB3183B6CFFE1D0E2948B
24D2A7E6A9848C237C3338EDC66E14A05F7429969E4E7A93AA0159E3819D82A4
12650F50E47FB25F865D3DEDE7CB7E6225BFA71AE479CD96B4F9C3CF1D39123E
F1C1ECA9B83CE39612DD9DDC306C60835972912D1C8B91E37BFBA6D075248EE7
84444A8879B3E25D0FCADD4C7520B11492D5F7175E0C8224317BE91DD624D25C
17C01C6EB24F8BD764F138C45C7158D89312F84726F3677654FBFFA4E3A26198
B367211584805688C232D2B236F56713C8459A2E168DE7BF342CA6B772E8A981
047FBA5F4107A2A3862021528FA922836FAA01D50CBB9B12B543AF2A86A99F4D
52D5FB24F40B331D853D2C54E5123E5E2F843602DCE3AEE68D1867A3578589A9
39A0B9E63F74BBA9A961D5669B06FE50365FCA266539D77E9CB0D87B5F005F4B
13EC200A9F50780932C8A88AB1CAC0C3F2BF7937F8E5596DD6475ABEFCA36341
1DE10FE5FB70E0DD01174663D1A9F4823369F6EB3AD5A1FE45117A0C41ACBC43
774A4110300D4560985B376D7905F7302C36F97F5F502F2F1C38C2FAE86C9BB1
B0730BCBCB20E22D06AD1AAE225D5125AF91E96F7805A0CED7C26E24B09A5F46
C02877AECBBC3D94CC5FDFE743D4CF1A918C5F58DF1D364E29610F5163EEB4B4
B59F7D94FF33EA3281C5E352B4D7C4C1678904B481663DB06992292E4EE841E8
4D80C291C9516038B72D3807F541869E3AE9CC7B6087C9F370E2431E28C32C42
936964F95B05E91CF25918FFECA1314799400838672C1A994FE998985E08F174
464F63F952998C3ED886259D0FC687F3D4039E456985B3183C918696090AAE9F
6036A5DB09F7284A186924F1D302BC8A984C08999491AC75DDF4545EBC555912
35C56A4CA40CB555A4BA1A2E7D77E39C66F955940D517A38DF6F58F26AB3AE4A
670E4CC5EE275E1D42AB092C9C4216D774A36899CC66DD9E1363B2A6228590F5
F3284F9A188908B72E167E4F1573A5F5F362939B8A1306AA74484117CE5D847E
287F6268355D666B8B93E5E8FC0CC4A121C38F9927527A4AAC3ACC4ED705E6A6
2F64EF5974CD8E25A6906CAC83605B885993DED461FD91C88AD7CE0DFB5E45C6
49F44580845F08E7D77AF24E4C7549D9368741A55397560E0BA139DA8D8194B9
85A5FCC35A8891C300CCF87A6C602AE0AA7A2E4B7D327ACED1EA729FBBF3D9C2
829B9FA5A21173244F1711A2B290053C9BD61070EC189794018F1B9C56504DFE
B2132974C601B6FA29471DC34814FC81A1E1A5155CF3506E8DC4F671A68F8B02
EF2EF44976FF68DF0865B410F1FD0B769FA91A58C18B30A6F175A0A71B8A651C
05E958517BB3A5A5FD566B6AA2DCF897875CD3C254FB197537A15C10911698D1
65FB7C9105E2D68AD288EC56072AE3FA7EC77B3FDBF561F7707C46753EB922F1
FC0A02114D0D4EE4F7AC5252F4EF69BBA047FBA2599562C50003EC17A88D9339
CE85E9CFCA1E8F117A79DFEBA7463601A54E243D08DDBCB12F26FBBB8F9C43DD
7BF7665D5973D8B61383CB768E1E738FB619BBEFDFBF09F285EEF8B630C1F997
9D1EAD71790CBFB48E5B35640919767231350B5D47C251858AC5E400BC65AA62
45C5691553694350EEB94537D9CEF904EDEC7EBFB0E60995CF6457CF0F587170
BF71ED46C0118081A739201A18E0B2B745E35BAC68FC63797A999F4405E08A47
37EF3B38F974D988A0831251D31C8390960420D8FC056B04E77002CEFCCA00B4
31154997E95DC1364BAB09FF0740310E86A38C6007881025782D7534C5486448
FC86B1CD00AC242FB0ED940F14FF0DA887E39D1FFCBA9B1336D70BC262D165E9
9EC070F746F550BF0657B5DC660728C942A87295109A97AEA846C0D98A81B0C0
C4F5D74DA957171B12AF2E752EF4519CB382BC332FD121959382B860EC40872F
3E7AD19D2965572235B8CEACFD7733CEDCAA991212FC3C15A0064DA96F553212
C06967548E00ABF534D4380E4BBC05C2DC2CAF2834CBF79C38818226FE2A652A
C7CAE0A87F901C67AA1F04A4C533EE8B901CFD0AF403EEBA2C528AA6489CD5A7
A42C7C33C1362D631ACDDD73464EE2162CB9E755E2B64ED316D8E1AF7338C0DB
55745D40451FB277998BD38CED32B34BD8D1A690B61E603799AF4259822A9D16
1412B28D4DA44C60ABF5751A90099A4DAB23CE0F7F81228C82C0AFEB9A325D7C
E7BF9AD7FC50473C96BD2C5C958C053897ABA5BB7950FDC9E0867CF4C02FF926
7E010F59376FB1AEB72D08E929E1630A7750DE134A89C19C6FA49C6B89291598
B9D1A2777ACAD657DF714632F061EB13C3AB22FB3F3EF644B5B47DACE807262D
E1F17A4F2674B5171A78B05B425795DAD7EAD09C442C366C306EADCFE52D2A9D
0C4C94CB706120B5F5641CDE1F90F13FF3123E5BB8ACC107D8B722419A9C1F8E
BE330AD16FC93F75F11A545243D50635FD722C452AAE08844E0F17B9BC458258
383E94966CDA9AAB97986B5C9091DD61D23BF414A6130DD97211D95408F88F13
8D4968B8382F6770774BFA82C7B080BC0263B2EB7BA006F1E34B5A94A4D232BF
936527C3F6251DE11B8B5F815032AEDFF700B54C1B985F03669B546C110680DB
C9E1DDE716C4A59BEE2A8FDF0E16BA13E4A36F92147E38CD271718777E3C1A7B
78F1B38562E968F162D67BB5DB67595670D82EAD7A761EC472AEF355000CA370
FA7F5E34137CCCEA64CD594FF3DAB0438C65E5A1EB77AFE9274CC14073847B90
4C9A683647271CEAFB8023DE1604FD41C754EA86814BCEA499392C72D0A2FA52
3625CDD31086FEE0819C38B6BF5827A262D846549BAEB53987787AC9AF72F866
C3C8855A90E1E7FA2401AA0BE497CCFB11BB8D6B2A70A61F851EC6A4FDB54495
10E47938AFF9491A9FC027B2BD0385131861FE5B721D4F7B49FF9BB5AB5DE2C3
E4B7FBE1934BFED808777D2040627AFC82897B554DE510D2ACCFC28A01B89454
D9CFA08690CDF7574095F57BB3750F0E8061B710998E5EAE433D8A82CFB15547
B339AF3763FD0301EA695F3FD5E3C045AE9913F8DB0E20616F63B2C2AD59E3E8
86BC531628CD9FDA87188135B3D6CE0F2B1C65F932B718ABC713CD4980621804
FB1E8DF860C8E0BA637B9B1A8838AD07317657050B505070A9C4DE98D3633D96
47817EF7F9687F33316F8CB6BB8FC96F255C8A77BDCD12C56C7856D4B0ECD4E4
15CC9290C79FE24F1ED923303C6F314EC6B11679E916AABD5C467828ECBA2E18
DA662D44654351CE8F69FF905AAEF9CAE80C6547ECD1E6472A464EC20BB3F5FF
35BBB4FAFF9436A7F0E0D331C2853A204FC7DE2392905875FC28D07872F48FED
69C50C35725506113918E5F29C3C662800E45BF5E62E6968911DFAC0A37BDFF5
30845861D5E5C2EC7E59783CA4D3C4F7540FA825DE6E0B910F0CAF88E6309CB0
0AA35C1A0F1B4993AD4B09E331D14A662DA0E2251998CD0CF9E5F904300B995E
8562B37C85E89093EC89B975E7707B1F81A4C6BFE47C868308F3906BEEE44131
B11B2B14E090B2684A3378FBBAC064946EA241FAF1EDF50092203CC2B8BFAFCE
1C65F9E73D86729847ED9CF46EE6DC5B533D1C44749E0BD78A64FFD0D34B271A
A6FF9EE7A2C46B0710C362A56B696080FA9F6C289D3C21F2BAE3647170CC8B19
F95A52CE74702030A3356FBA2E66131C9991A056211D783908AD56EECF4C09B4
1756481D7AF31066A6FBEE2665CFCF412B99167152D35BC0E671E657EDD8728A
7AB062E0D1D8FE563927103137035F19D1606BA781420DA5B18BD06CD658AB4A
F27B1BDB96A42FA469C5D480386F365CAA3FBCFBDF6159181B48799F6EB6B3CF
2F126E755204C3D749FA3CE81431E83632E50C9504B72D1CEB8708B14A9BC8D4
343446B3E9F7840AC69BABCA7E75E3191311268DCD5414100311461396FA7530
D5778C6901B90454B314CBF25CBEF5D472F90D0E56DA81E3310B15DCEBA72AD7
55C31CBDECBBB7433F398F3E97837FC356F4E61ED034AFEF5F47A3E487574AAE
EF1A03C7B4ADC827A280034BAAE1E7AE51FD2B6FF49302F6A11AD7F9B27FD1C6
4ED051FC537E242D5DF700E1F43B8048C7976D3A7A182B99895369E7599CD066
F2509473D44B692114D441716C1F3BDF5A427503110493F069721799F6244E25
D178C8C76738782B98DF6D611220047126D12C4C3381446188AC97C27E089814
19E658103C3176BC183043EEAD380C9ADD597B88F78BE3410F070F1F4F8E429A
F9B1DC692F852BB697E9DE42E2782FED4ADE660578E32526B0722C162E9587F3
E57B9104CA9100F199DE0C9EFE0C9232665F5E893D8500CB57D81CFED2B00313
6037D124481DF8E5CA7D5F3F84929BA4716C57880064C84E8D514660A5434A2A
D96A53C0EADF3FAA56A5644D0D2CE6FF056175D0063735367CB9BF382CB9A6AB
ACD40887F9AD1CDFD668BCF9D9CA52DB6FEE53989AE6CC995D5060C9B13CA0FE
121D17B57524F6D8E00EC51DEF1242B2A36DB0E19710EC27BBEDDD25AFFDE220
C1630704E422616D69367A334E3AF5594456DD2B434C5D627358C39E13BFB45C
117A3C3ECDDD3470C49542080B571F18FE591920778C9B9E07A0A9C70429F151
3F37A3E0694851CB4122BE7DF35DD154CEA1FDB0B1B6BD5895E9E4A0F4070EBB
C8346527A814C2BCE2863DF83017C0C2F0D4D88B8878BCFCB349FA1AF1DDFC5E
072708B63F8D58198F780DD2D664A2CFE45D13A6D2A224D9DBC7E23F4F8FDF55
6CE902584A5B4B10FEF4D9333FBAF62AAF6150B7A28462F84F3F40AEF26EFE44
7E2C642555805708CF809732699451D71861E6001D875718B7BD6BF98026BBBE
228675A553F3A56FF81A199C054095CAEE02B02A14F4AE5073FF6E47EB223C4A
252260FB174F57DAF5DF5891AF008F869D7AF5E4EF1989FD377E91046A28CECD
F3CBB46E284416D53C0A0FB5538245F2C1C2DCBE97B8C11D95DF2B43C2C1B991
E045743BA616B668E5B7BF4C8CBF53A7FD78362CFB2AD31954A1FF65BCD44A4A
7FCA980184A9366A77EB2FA0E1CC2465A94802093ACA6E436B3DF24E7DC6AD37
137B49327871EA80F7FBC741BA050C469F1775237FDA7D6F1415A7C0E87394FE
BD561EBACC669C0E434C8D1FBB1EB0E9F429E9DBAB6CCD5FDC2F6FF94F9E1E6F
3DC25D6EC268E5C4E64CBE915B452CC7349D12683C6D610AAB4267EB6D070EE7
75A5A925F30B42D24F3975F6038AAA87704C4B218F9B7B9CF7750CA2C6E1EC6F
00CB6C62BA52D17FC66E06ACC90E439D7E0ED44D117E1C942F56B51E615267D9
FFC196AAD0B92CD6BE7B6F60AFD2657A1913E3C0A21FC6671370FC8C8CF53913
7A54C6C787287755650CAF0760C2A3EC1BBB8C5AFA6648411B5DEB230DEEF8E0
9DBE901FF4B276C5C52B2FB301628AAE6F318BA2C364A973789708B60AF9647A
C6056E17BF974CE08960470F56DAD42A7C3F77EF9B49A0E3E2DF4FEAC551B910
E8AB17977A1A78595950D017A96E86F969D73812275C91B9692F8E6EAD156733
FDA0C0AC392A2F772A9E3D9EC530266427264E1BD216D45E95601049B03FFAD2
38726AEAFA203ACF976EFF48EE3B46B2150DE67F616FBA22F823AFAC1A9A78BF
E1BBC352BE2CDD01A6B2628A48571587D75B1E1BBCBF75F661C7867AB741F3C6
E2B4CA255165ED17EC61435061398FF09688F0A4DAB5319014D83D1D46ED5AE5
F8A7C9CD76868A18498E70480E6253CA85524EB7034C16CE5166301AFACD4708
F09F9F950F6A4A60CBA577578F962CBEEBB055A39C48091E7215904B4E33DC86
FE535B622BE278FD6D3860CBEDDC58F00D3A7D2A9ABBA798E5F77B8BABBD1B13
CFF6A9570EE52997B68CEAF2FB34EF087320F134579D9E18D1E0A10A1FA37A35
0492CA1038FEA46B99D05AE5ED8E32080531D361223B86632842682BCD4EED27
66A69EF6B97655AC5F170CA8215BE167083176AABDDD13A6A87466BB5C0F60A2
779B1D7CD4882F55258C57D4A8367D82EF814BD798E1CF1338DF034CD04B4B3D
0C5F7209DBABDEF79753486AC046A20005104FBD57BCA7A9ED635F2C7F11A682
713414550395F5A21DBE11C89C293AD6CB2415433D396FB76FE985561EBCF74D
D0AADD279F095AB2975A5DF365D43F1EF73F820B00E188F569F66DEA6D6D320C
C01A4F42FEA5D9EA2F610ADB9AE7757B2307A1BB9D6797DEE31AA81ED58FA859
8C55080A06D587BECCCA9A75E08BA7279DE905753D58A74E6059199C4E3EFC31
01D7CDEA375A3EDE0435F57FCCEE637518F5812EB351B6558155EBFFC13A4F07
86FAFF6850867C9A46507B6949BCDB9A524AA0F2F3C2F479FA651F01F72A5770
5673E627FDF7020E731A0FCE134A886C645E9E28195FB50BC27AF8E4B6FC35F2
25882A033464895E2FAB48A10DAE7D7255DC83870C17AC6B6DD86F6CAA313DAB
B7CE3A054BB979C460FBA0D76FAC9701AF19072AF55CBCC48CA8861B0BAB5E6C
A14B722CB0A11F3967BFAC1FBE8B11523BF8412312CC8303017FB1F41C13A2C3
F021C73243257170617D03C8AF43172EABD8D0C79104D2E173B080DD050FC4AE
DA7BCC7AA9A891145C34BA233888D0E850B1508355B8A06D26130180B89DC4F4
6FF9216F1C43F4414B7C12B12F96D231BB07679EB2ABDE895E12261315A776E2
5795D0CC22A28B895148E53F8ACE7CDA3877D7DAEFFD70630E8FE3700953D590
A62AD8AF0F977CD9FC6A5B91EA8127BE594F7C2EE6C45CC9EBCFA1CCE5B52441
257B03344A65CEEA19D0BDE898CF328861C3CB4423FD2C0C1AFD2DBEAEE8B1A6
8DE6E3D2647E8BCBD9FE74114B520BB28C410ED9E422045F45A358A7A162679E
52850A292A04B96C1C7E293F9315774960A97E194389960EEAFFA4B93E9F3214
ECFB40BB188D37B7EF316D7ABDFC060FC257733D8D0AE4644AEDA86E3FBFC275
FD432A8A3B1ED1EC82099ADB5FDF21E5146709D0DB32D2DBF6C4CD3674C0D931
CD3403049ED2D3A304BE7DF7AF66BB5807FE288DCB967206B1397E32E2D63C35
0442E2115B8D8EEB7C0744F2FE69DDE14DB1462E4F9859384B15882C6B0E2216
F58AF94D688139DBF47C7AD4138EBABF491A61ADF480621FB6D381A704757381
6388541ED991DC598699A4358AD33F4BC399F6BC4CC2760F7973D6FE77F7AB2E
72FE8D751759B4988BC354F399A7EA0FADA7995818043B756CDC0B41C02C3363
5ADD8E0504E1648717934572F976BE7328C656F8349C249464D3D477C052773C
2829755DB3BAAC32A01F37CA6B04844C8C223DA6A67682A05FE03DCF003DFE46
7E6FD1B5291ECBF6B1AC7A25C002DEEF044DD2673B132906D4F88BF12A344579
4FC9DB3F1BB0698A83FCA0C342E95FB053CBDAB825988EF44CA9EB44765221CC
28D856E1923E8FDEEC710B6CCFF25048A503F98B23ADF7BECCE45FE0C34367B3
F10A1801F7F0D8740A3EEFC594B1438B4AEB72DD3680CDFCE4008A7DC0690662
3B750631B0E76083832E083EF17DE3C42A87CFED15E8AF8ABC55508E470D0EDD
E6465223B3ED9E26A5DA61F96B0FAE953B015680FADAFADAD02FCE8211CA2782
5EE98D1B0480BED9988C9AA3F1CB8914A1E25B2A8B2936E5EFB4DBC694919D4F
41D01894C91D8E03F68DB55090355027F496C600CC5B6E47207438CBB389612C
FB0FF562C80B22E64B31388226B5C052471F24909E5601B341D67BBA57F79554
AD8BDA842AB063B025F5E50D42E43C1483A1A4DEE85A5AD027261EAF5273A616
04934BB24ACC4DF1E45ECDB7329F90BB064E90631978245ADC0C6200ED586302
931052608603E1CAF788648D74B078EAEC719850E1A9B91CCB3EB15C6BC66610
1BAD394692F15A76FEB6AEB27F89F410C8CBAA8F91583D3768019396BFD0D25A
5ADD22C031A2171426881BBE4090D1CBFC4EFFDA88850EF4DD9314C0FEA2661C
F8688C3D53F22AA3788D9D5D01A2D4CC7AC292050E48BE6E8E6E1C6B6C5C570C
51D88D84788538D053AD12CB8CB171565D669B9245AD3AA5496813687BB41167
8EF3357786F66BE7285F1BF74E4A58E17059A66A66132D35680501A47FFD3C2F
0055CF9DBFCC96B5155C7598D6D71114D161E132C41C09521D207553B790C815
B7A0FBC152B9BE768420D36CE0BF2C4D2B57D2E4BC003F05EA7B0CD2FC041141
C385EAC5EEFE3967E0AD6A928DC1107327442930180D8F75068F7B4A4C2D2021
ED9831ABBD6962F9D2DA9E68A45526498CC56D71647B8F6DE3CA2AF29DC60C5F
34CF57800B5A9391949EB2EEDB5F8D97C63A82D271A5844B3656030E38D3E741
9FD02E246015A49306DA63E60F1E73085FC4BCF6B1BF7F26AF21C21D9B1B916F
4F603DDB68D41C5B18B92C2A5B63978E50C74C43E30C3627ABE7BBB02CB4DA42
A5F0E50DF18C110B9940DB7C6024E88505184F22557041F8215E8ED4A289CC7E
D928B3E2A2253042C47351AE879DBB7FB52F25A5A5DFA45DB0FDF9B94F0F97A6
F70EFE840959AEF3E34287BE6E17CA0E265ADB294C2C846D652EDD710B648CC7
2313AEDE0CE988491CA0FD108AC3EE99ECBF8E6C60013B38F49C5F4D44346826
64784F3AD2D60BC9BBE9368949B47A82F8DDFBC7E90EAA23B7C09C582E1945BF
8D20CABEF4F2F5A78A41E4BB1D85F88E4D0A27D4DE5AB3F44DF52033A1EE2819
5612B49E72D4167DB96B594B7F8296FCE3845ED8FAF19EF2C5E7581DB6B6E0E5
61E625B8222CC0670CAE7CF1C95954D32FBA8C1B5C69DC9941DEB2E1BD49C716
5227301081FD35432DD84B8E4AEC46F191802A97B0542A5CFD68553499F1FC77
504661892F60E5A560333458DD227E67303EFD9C3107DA232FE1FB923D3ABE78
293BF063FBE5352A658B257FABC2CF76D35FADC354CE9369D5B87FD2F798706D
5F0FD13E5C8B5F2421AEEB7D24E833F7B8BBFD1B60A4BA2299074E853FEFDCE9
480F0E55E126E1DA2032AB203D050264171EB857E3777A3403B563AA12F3C0A3
748EB7607B9877A4729FC7697EEFE344F7665D5A2A9BBBA66568E7B4C6D3E093
77D7CD7268672DBD3DD8E23B33C87D3DA3F5DB311E5672052E05C3A5CCB847F5
556FD5DB1DC80645A5DFBEDC32C58223FB032506BA8186E87CAB38570490E07C
C72DC667B7655B5AF313C621C812D51B1E22FC3B705E5CA614E2A5EAA282DF62
042E2AD35A8E69F4E4E2C393803A98EED710D6CEC48A28BD7FBEBD56D657CE71
AFBBE23902FB84991A570359B468798200DE02623D52D3FC439A3F6CEB92442A
A9CECE368DBC684B67355C6EB30D38D487488A571F1CF7A9B70097C5F81C18D3
8FA1BCEB3B9A5006CF67560A58EA246978D77D506DCD633FF85AB8335BE37225
FEDD4A7A8C44E587DAB2FCE4B01FDE418380A16AEF2B0C50CAB47B1BF00E0046
CF004AF4D76C8434E66ADB72B6710A1830B637C640F23D12147C0AA2495B30F5
8881001BCAACD3EA7DCA24FE075677C61515D91B86093F401F42165F0D52EA7C
90A979C3E5F3CD8A5CEA478627890536251C4C1011305991D623FD166DE7C3A3
DB02BE86FD262DF82DD3000D15BDE6D5431809F175C7567728FBC797A6FE0A02
E80D8377117E712D0EAE7E591BD4E62977E17551818529D91246696D3C4566B1
79C91DDAD4676EA84BE72B3F44253FBA9AE6B0AE4D83681CE09B1BAABAD5DEF2
C0ED1FB88C78B89D127E5DB62C8691ED62D06D9AD043A696400C7584C71AFECE
41946AE57589E52A9DAB9B4C133593A8B058F46A9E1B1A2B01CFE59DC489CF11
2C663A5E9BD0847C8260D9A06D9CEE4499D8C2C46D33022CDD5172DAF061090E
46E0AED83063FDF0E57BACE8CA49A14E957F2F9B03C23C59305C7A2A9D392AA2
9F99E97B1A373FCDA3775A2941761F9BEFC4C4F3F399B9DE9AC0FC2D1B071149
2679748AB15280AD4B3250A866C61B3C0EB1E4EE4997F7CBB7FFC71FC82F8D17
3315A44103BDF541361E262068E043BAFA2CCBCACE0875E368521C0D91F0A058
6FE6BB16A2789F0C4CE7806975398573D65BFE4C6B53163D152A7105F942DC1C
B22923131131AE570FD99E90CAB9D51FA9412407E10C4A4FAF36CD27DA3CB90F
3C87F58921929EE1D3B4A47E26C446E0B8F2BECEC0A1EE1B172079EF21F73ABC
121D8DB43921FF40006597DE5F30C1F8168487EEABCEA001D65E90DE02736E81
64A75D3A89E4F8417201F0D2CDFCAFAC06766BB5ADEA1F6D8AE3DF24702BE0D7
9C81597D49BF022A2D851A47A2D585D54264C1B79D2B64DD10291FE16F35C17D
22DB84BC9D84B3FD8695CC7E4D624573A635B65951DC366F76FE30350E59C78D
C9EB4AE83D1CB6E4DF546FBC914A6FF6D637462098578BCD5050EB47A9F4313E
DADA4845CD683A9C605D6577A03DE99BB78A0AA1139DF5414824E7D678C78DB0
AE8D8FD27767696A71E401C3D7EFA3F6906F0904202AB45200693D9EFD2E0110
B640E38CB4A7EDCF21655F551CAE397EA2AD7D021875710C654D9E97727909E5
054E364844F0BF03BE50426089EC7071143F51727B0AA09A3F3D68C52B226196
F0E466DB8BE5C0AEEC0AD6426CB8B656BB0015D7D80E0A79468ECE32F5EFCE7D
E129D9B8F060B969D4438A98A52B02183737B9E9E6D67871DB1D4D77D17EAA35
BD7DEF5A54D050720CEB18CA9A9F80FBA3B3EFB7C7868BA8C2224C728326ACE6
F0E8A069682E463E69702266FBCF04AC9A0CAB64076EB9EFF2C8D9B2FD80D64C
9CD389C036BEA9EE6DDD7C56066B353EFCBBF060F416C0B747EC5BA54AA74315
4084CCBDA3FA4FDC94B58708AF1E5ED01B4DF28C2D3457FD0474DB5CC7EAABE0
35F2A19ADAE898B7F06CE566B5620FD3DE463B972E55D57FC85CD2C5AFCF02DF
FB4445692A4FC157522DE65BA324640B70E9B902E9FB32F894C4CF46CF3AD79E
ABB3ED641A48ED761A1948DEC6A1270A4AF45AC63915297DC7CDFF1A2C21FA83
CC11E5D6419158E316B1476F2EF2991878E11F38FF36D1F1D67E0A154F2EDB37
43F7744D0149327F0FFB5FC6CF9A1854A07D5D3A8C1B96EF46E19E446B8C3075
E3829C39B4AC1F182581BB4BBEE7C595B123A580A6D198644049DED12F4BC685
BCA8E46F12CC16254F52A26FE47FE41504D3E851A063C6F10D725EB5F1A1B135
B5E5097E60AFDF729A535E046DA52DA52C7BA6298D3869752420439E590EF307
E3EECCBF89CEEAEC56A35B878719C1134B1DA6B14C8601446A6663C1587C09CF
B052316D4D96E57440D0CC6DB88A589F5078FB8FA0222FE0783C319F0463EB6F
83D2CECC7089DB947144451BACE59BC9FFB392CB810F15E51C3D462C9EC7FEEE
5B8D8919E0D1E69B1FE209C5F74C458E6EE3D6E788F9D862840DCA808B149025
C5541CBEB3E7A6ED52D31BE772DCF52FB024C8364F1BCF967FEE2B8088762C6A
41E086DFAC2247BE094A885352C70B1CECF6313B27FDF4F9B8788879CCBD5001
12DF4690D60640977ADB4B0441CDC416AF42E97F4B023C13C1003EA18EDB0385
156AE4BE6B40950D60CCC8143CCD4A35302FACC2C2DECD7C9BE6B7C56C9816AD
1985FB7624F5E48CF6C90693FB61F519825659E854A83D4E6F02B610E5B65F12
303AD18D9FBC392143032C90FF669F444AAF97BCA6F7EBFC2E2E897C1AD9E6A3
75D7771A6AEDB0E02641A97AA4FE6291162167E3044463FEA836F9BE6691B79C
E69FBCC268CE7A4C9CDC63226D68B6DF0E4167A1A8C656D66B9D4E2F6DD48446
BBC06BFFE286C366E1F387AE1AD4573956853E002ABC509706C00E045DC552B2
E5EA0584F2F67CA200B432D886A12EF6332152F0E30D38E2B0F8AB3C97BAC94A
1061013CBAD546F11094615907FDCC81524FA4B29058841D9821D7F955D3824C
B1754278E8DC68C652D90E472F21BBE055765DAB0DAC8449427E9AE332F79351
B2B7870AE7F5774ED4172CFC330E0BDE887CE13213738E35732216736F12E3E7
6D416DE43182306B977C9DAFD2048CEC24861DDBB8DB69386D274AE08FA30799
BD230FB37711C0E606B1CD01AF00122F9A948F59E540BBE693904A72A20A1F7C
70C68627A5356470BDE45750B503E5F7DEF09F93790003E163A166902C80C45B
289891E225D0AED56107BD6F4565A426421AB1F43F621BE4CA7FE32B90D32090
91D8931BC21C6F969288B1C3D3066B80A374C5060D0F0776BD7EBDA80080E3B3
FC1EAFC83396B200AEC477909C2A7CFACF4E2DDFA16383B5DC0B0F7D8913B4E9
54FB295B5ED5498C4A68B73340A80F1E09CDCDF1C92EECD88D1E47B33B77D76F
8CBCB04694CA8B85FFE824554C74679B25590F079D0C1EB4C3DD4995DA1A9A16
DA891583A755B987124713CD716D916EE4D7E6CEA274C554B884C3BD0416A680
5C6D9831ABEDAA3DAC056B0B53358140F209905103D3B7C48B8EFBFF3D287343
5B0B6D8EBFB873BA8A2073CBA7DE351875FF0867289FFFEC582BCF933E7EAF91
2C86CB6CD5BBDF8E304EC01A924BB9615DBB6786DF6522B4AFF4D46E8B5B6888
A7A79AE3E5A9D013F904770B1F2E9B707453F8E389274F36127A3C7B726EA6A4
E12CB39087EB7F0C524DC619994D643758B7B210BC4E6CD5B400D9440DB8DC20
E30F6CE74C17B45A78C317A54F00A58FD073CF35C9C720CAB47FDFC255742596
3BA635204E89F80CAB3A553D5D90377E831E4FD8D7385C115E229FFA8A794F67
1120ED8C12F4ABA9ABF1ADE79C00350F35CA47DF4C4C6CEAEB7DED120FBC0D19
B0B8A9EB179D36E67B902309CAE44D2D1C0422050457CD7CAC1B9E570FF69A6A
7A1BC4B569A57B23E481E1A7294BC241E15FEDD736C018E10B39D38DC229ACD9
41918B6554DFF02340FDD61392BE9B0456B6C7D348B097477DF8C6C324CCCF96
5C397AF1B7F986AD59B05FEF5314A81C8FC032C23639407AE0B9EFEBFE48EC28
21B195C3535CCE79DD39B987048E8FBE3463D34B5162294547525ACA6C964A1E
08423D9BDA91822CB3860F466B96EA9E36FFFA2C3875C789CFA650EA767834AA
CF8030CAD26310FA1CF769F4A2A6DD033D6A0D62E089BD11ED9175D5C9919AA6
516F0E77C57E563C36837EDADAAF8E7E4BAAB9DE55C8366B7853299DFF59BE63
59AC835096C78B011EF763D54AF25210BEED9B500C9865E0B01B4C39C37DE56B
A2662E21344E73C74148C1E5D9CD931083C850C04BC1F7AD4479096446E4FE0C
6A30F04308CC4D9788C0E3CB5664C60D8E524A15FD6DA78A2E05CA8A2F7A801C
7AFACD58F93FCD83DCF3EF58FE456150749B1FE01EA77F8B138F5317730A3395
1FBC2E52C454171635B983024EE9541B609278251BE73BC0159C52B60D094162
F63FA5D0D1C56ACB53340A4054B02E8608AC415ADA4D95BF116C42EED0BE15D7
28D7D835AD32523B0B4CAE6647582C86E8E8FE7C4E1BCF5B686990B321A7E540
1FA6479DC0309A89C78837971855488EB55DE08F9C7A580610905847A649E447
7773B87686F7F282F299BE01CD328B332F06CB1DE98AA4C60583906515ED174B
8E1D84E1D1C15FA740A00EFAB0C19B7B6C6A3BF73B7B845CC5FB1EFA0FA399B6
2F4D5CC32B5445B1A530B43451EBB25D9B1B174C5549F4B373D0C8429FC71B9B
7D6C21AA040297C80939840A8C9C7E6B5A7AE4F0748B43659B570FFE82B8EAD6
8AC55C6313424B8CF1189E33D65D2945C257765C4801FB768C6188F02FF2328F
7D56430286A02109B864FE34566E17B4A1A09F9BA10DED0F48F632116712218F
9741A9D0BC2BBB60C369C4183F6C281B495850B3DBD091C7D41B7859835D08CF
0AE8B3370DB25ADDB38514AC894FFC691E00B2E00D3A171F46DC0FE57F7666DC
78AB35AB252E997A735E96485E6D35B55C4472E4352768B44D547BF9351699AF
6A67D26ABEC7CC90207AB57F34C18CB75637513AA762A8A88C2E79EEC7789462
E93F835838F1647C945D3E6CD14A2D56D2BDC5F44FDE8870329E535469EEDD3F
927D5BF306F9C1B9F2540B0B17648C060DD30C5CB0C313A4105FB8830FE101E4
61A247AA390F63CAB62FE9CD5568B250327DF7FCD468EDD80A5EDFE183FB44A1
440F897DBE468AC0E2E6DD2F6E4EAF59BED2C7FC29CF8E856B73B0ABE584CE80
CA03DA5C4D5F6EF2BED73385B560AD9661080CC9FCB12F8313B7B784ED9FC070
47F367B1FEF492A69FABC3832FFB4BD8D081959C221EC21B2D1969DC66A26824
0F283F06D39F07DFB5D53908496A7C67ADCE73376A463A6F1D309528934AF5F3
A8D0648A001630B22C7E056E6943FA16EF21996C0CA3E723ABDD9EA73696D60F
A42D91290F5322A117E7E02D97FF25A6C86770EF1D9BF12BA854E37D32E33AB2
5DEB529F3AF0DB8C4997E4A9AE7A64C20A04C00FE24BD0FCF1411B8AC3A3296B
C379F0363F7B78AF6FD2A332787E2DA209C98EE18121548067B71E2B0B3F16E2
8D2B09523B5D5C288EDDDE26093CF12BA8BE68892DBEAE47087117C84DE7518A
B6006F607BA87CB29FF3AFF6895A1D32E5EDAEB91BAF1279E75BDF9A84BD4543
BB54BAFCBD9BFA3B25BB7551522FCFC8A8A16BA64FCB2475D4E942D22D6025E8
E5DB1DB679F81FB9A80210339211D91C613C32A2B5AD41792A0457CF4B9024F4
934F6E5EAF5BC200F13E0EA45103638F246EB051E930FA7ECCA0029FBCE87B2E
4E059D70DAB60921957757686A4D88547B9E475D513B978804F245F452A4CE1D
118EB5CF2774D82E9F0D00FE8E4692793347E7FB29AD6B4C23F228062ACF9FCA
5037869C2309CA9DF1A858341D91CC3B0A0C58E1BB098695731E9D3689AD978D
D793544799A1C6A834FC07FD7D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols8-Regular
%!PS-AdobeFont-1.0: LMMathSymbols8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathSymbols8-Regular known{/LMMathSymbols8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols8-Regular)readonly def
/FamilyName(LMMathSymbols8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathSymbols8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-30 -955 1185 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F035757560E05960E2C327020FEAE317
24C484AC0CD3C1AB9CF35516622A022D6CB83DEB8126DF04762C901617B35492
98158049D5C65DE86143B7F36D36233A115C36DF60D3C55816B2B0B341102AF0
90D7D4E00A7611262CCD366F870F0EE8175688261513076B608C7E160A9A79BD
2B66E2E2A89CBF6D1703854915ABEAFA09718FE338924B5AF1FBF1209786AEB0
0026C38A2C7E208E6C306BAAF037DFB0F3297EE1ABBA65247CF72D0F78A9BC24
038966CE124B94487282B69D6BC0B5E17441DA55415B5369E451E2B0D705FCAF
3AAC6DBEBB8AB0313C4C201F851DB96CA9EB49357C3C1AB73F0CA2110C994680
5AC8F0D760C03F71C92CEC2E1A3AB84813D389BEFE7E0C28FC76FCA70704BC4D
159EE8B490B95CB09DD01A4122A686AFB8B9C69381C8C303F9A3B695238C3BB4
CB44B3BBE50E2BAE63796BB51D945469BB75C69F7A758180B77CAAD2CFD5951A
23580A3D45083C8368543DD37AB49705B939804C12D4BDFA730845F7E42A6C9A
B3F0A376F44DC297393B85E8A18C45C99260BD499DE599CC0D76EBE4AA7D70AB
348FA87CA9A1000814C4FA99B4EBC35A0298AA29563B030707F3EAD9FFF7BFB8
3B347C4A00BFB392E79B79F413E67A73FBB006EBA896A65CB21BE940A0940640
34E08FF806A114ADD3FD42BB394F76CC77DD869C46DEEE20839C9A2FF73B840B
0ACF238D333719F5947DD4C39B8E3F070EEDDA1A39D526319828FA9F47F03D8A
245D8E215B37959566D26DD98185223E4FEF01676650EB4E26C0A425E6C23C50
4BA94BC88E08614769C017F6D4F14C52D7189D4AF8CDA367D8B04CA8D3F2307C
0A7A179419A80695912F456637F539123745CA8E696E250E0BA6B7C6277394E5
98A8799C29B6272613C152B0CAB05F3C7795791EC9AF2BDD416861A3D13FA858
BCB6ACF5BDE40E5DFBC1A171A7280E8FF4AC0D4C8A2199E9E2BAB5CB9131A76D
EAC166A7C449A549EA5111F1750CA2C6E1EC6F00CB6C62BA52D17FC66E06ACC9
1E6B858F9393AF9AA5E69F799E01D301B647DA57225C2920E3BCEE9D09CA5C60
F22B07F24A26DD8F4D6F9C78BFAA8D12A21531E713B80CD03A5FF4F3BBA2AD82
3BEF7DA8C97C30F1452006AA3B1A168483F6EDC4089ED02E567923AE6DBBCCA4
8C246A080448200C2A29C34AE6255BC79B73AE14B980A7C357681BB0962894CB
DA32FF2B70B21AF4D158E0F74652684A7150D0967F83E13EBBAB33588541AEEC
0DE8C53851845A44FFB46A93CEE3E8A0263882542F7F103D13C367EA8E1ABFAF
6486A9DBF6668550BE7858F5790BC87C66492C0FD34DB08EDF842E1AF58A09B0
85A9B7FA402029FE2439769D67DEBDC8AD8C861E90E5322951A2904FD702766B
36916DBA8F9C96141BBF4788FA435556B2B4E1B37DE4506ACC4224CFC00A8F83
33941A050B51B9508758F4EB2DC074D799F5116296B8822ADD743A043F9A6426
88D10767A9F99A072BD4C88CB579B34687BA4953B96DBA29F33211B12A0215F7
5F2F873E5074A7D593DAD0EDD97270FB9A87BE870321A49958B10E32850F0148
68E0A1D795937E61D4556BCDFB7F4DA63A884F9B4B07801D30B1357C3432D6D4
7B72B7D6040410C194EE5124ADFD7A40914BF569EA1F9CA8C8897E839D262395
5EDB3E97C591A3A5927DAC229EEE864B8C0F79ADBF88C0E6C41CC70D9010F07C
1CF9C05960E34FABB6C5DA4D789E39F35FE01F0B22BD9C63B3098457716D6B22
5EFCD0A960F3A2319252C7A0F73A4770E056209C14D721A714D713D5F2BFAB32
EBF815DDDE792B2556A87C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic8-Regular
%!PS-AdobeFont-1.0: LMMathItalic8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathItalic8-Regular known{/LMMathItalic8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic8-Regular)readonly def
/FamilyName(LMMathItalic8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathItalic8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -250 1110 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD112356772A65C14D49D03C7D456E5
1A27C2ED815B30E268B02FB1D2E769067ADAF25F28640307E3A89F0B04F44A1E
1392A44B8AAD82CED1539B6A9CEBF441EB81775C7EE4CC12313F31FE710DD429
4B1955DF2BF7A88E1EC21DA22A63BF63E89C913EC01EE10A0601D6FB239DF59D
2CEE7667F4CC4BAF660B24F635F981638F40E8CCF07F21F5B5FE3B5C115D1000
0E4B2ADAF7B1C53935EB7414421DB49A59F82D98D08351CB0BF0C06DE836CFD5
42D68D51AAD4069871F257AB7733F8EABD731FF9B0E3AD64000BCDBBEBE26F88
C96730B45C14458F42927E24318A97B48235E5FE200DB40706E9B41AF7CA33C5
67BF7766BD396006C5364D1E736B256538E5D163CDA75C4F419620D5BE5DDEB1
F7D7A55B5ACEA2B2EB4B78997398C7D38B3D7B5774D980C087236ACC7346F518
7607A19E85C83E2C6ED4F3FA8C15B65FC3D117BC5E3FFE33A5B7A69F7F7159CA
667D96B5D03E4C5E55FCB1F4E2148B4B8DA87567988F07CA181FA6A3C3C30A33
80AC6F4E92903C47BF489A2376AC02B00B8CD01DE080C96A452D52B4B56F9520
B85062F15C4828813D3694BB4BD3512541C82005C9AA5C065476148A4E47DBD4
580CB1ADD206D19E7D653E2690FD48B252BFECDB2C64C96F7477B2E5EA0593A9
84841E96F931F01B2B61C26E8450D5F2B37B51EC364BC2A1233FD108DFFE0F00
AE57465ADB0191B38D14E89413FCCB77A9FCAE09F59A3F5C352570F7390BE91D
178255E10C02CFB7B679DAF86EB351BDEBB8A7D4DBB9C65715A1355FC8D2C355
BB452D44AFDF7E25676F3ACE7772980137BBF6A5C4C136C45CE680D23B992D7F
7544FC9F70CEB83E2B66980ADA7E13488B61554D8CB264FA76074355F7FF6C55
FBF130009A03EEABEEFB1ABC2BF844196D67F7A6D7B5F71162E03FFD780CDCE6
720DA5752962EF6FFEDFCD9C2CEA3A186DFAC113892B6E7F1EC8B28E99D09742
86959C4335F1C11135880D99DE366FD7A9FF7917C89D789205E574FA14895D60
74559B3CBFEB1985C97933EA251CD6756B1C77F32C734B1495D1090234327729
929156E2362811B8D161C718B9A0627C4F9CFBEAB6D134A86D7D5AB85CE4A2AE
68A4744868397649DE6BADC3ADB90149ECE141CE475D08FDBDFA922A35453A43
457E83B23037E235BF847E4751D0B0182A3D7C04947E0E3E4F3E420A831F9838
2C36ADA2CD261065888E8F35A70F43D04C310E96A644C2BCDBD550CE55713EC5
88419815F955FE68538100CC1776C4B6F3E25870F14EA037FEC2B6A11912C526
129B788B5D8FE7436D805D60CF9FA8FE5F7CEB686ABE058103B8F8724D1E0557
5E343B59B631844A689FF702C74C9F6FB3CD886C4C6826CBF2ACF02EBC8A25C4
BB361B3DC8761C85CAF050F6754C7B3983D42247ADCC3F1AC39B412CD8A4E4A1
DA3863FA3C1E1289E5528AFD4D9FE3D6E034ABB0CD7CF316A28E4AB4ECA97714
283A35EED8A9ACAB99AC272AB61059A1F769FCE6FED93AC9DA1AE528E452ECA9
6E28
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4850EDCB990134F321F1FD6696F64BA101037918C9
F3EB2C616987CEAA46F6C052EB3FF6F2FB9A6F974915B82B6608CD85F75F0664
5644A5E3888713099F73E90FBC9681A6432D6944A68175A656D126AB96DEEC97
7DFB9A5ECCECE68B7C706A15EA93F5FA7800171D760667E1336DDDED349310D0
BB68B865F3E43C4275DFD82036752613F3FC722D561C0B5BA22C873A42C13AFF
73B7A9B8096208922179B7EDF55236F13203049ED2D3A304BEF0120285E9FBC3
921898A37465752B57535DF5054235CB5A713FDF779C161E40A8A8AD8074AABD
6A06EA11E40F1F4F4090C99D86095BE64A36FA8733362A8D4A2273879968020D
41EAA7F6C1A9B682B344B7DC94AAEDADFD1BD39385A57F9383AA235717AF84AF
BF5D808D32071618FA11E2F7907B9626CA16609BFEE67DB56CFE2E2B90BED39B
54D866320877A767FE000D8A3386EB1AEB2D99809C71C946EB77ED556CD01675
A5D45FC8BD04EAF80C756386291444CFC1D7F12BB4B1304696B2080A14F56ED1
959BD60C7F7F5BFAF8497205D4BD589967F17FBA10C2EF19C1679C5AACA4F9EE
B15E13977CA81B5026C7E1EF4FDDFF62E82B16CBE3D401AAFA4D973976EF232F
76C9D0C0793684D68FE95129C326682238CE9807B35B2C2C0C32F4122724C159
AA1C41DD94D0808809572A0A32125FA4D78B525B256291CA389F839797A13591
6197A48D453611484DA293AAA6B62F5ECBC9D32FD482C74A5387629E03895C5B
946117AA34217BC77B1E075A4BB99145EA55CFD1D12CB1D2E72636AE538232C1
3966FC6E07843E4FC7A8FB27BFB4FF67CD278CA322575D7590D77B4E03E63F7A
848E639AEA6DDEF55107E8C5B9DFFAA47CB3CB5A614B77D0112527C9AD97FDAE
5BC457971A70DB3421293E16959B64702BA858C1217A8B3B836A947462E0B59B
37C8CBC667F0052E653D33F067997638BDCAED6DF3A8F1793F71E79A58BEF6EC
47F700C376341D757B09A3E31F6ABE9EB9021C1A6E311CBAB6DBBC8AECB140BD
DCACE9B1E80979B7487BA2CB786018E20A5E0355AA33D6FCEF382799F62A9A8F
F8262E8DE16E9245C61CF3FFE09AACEF315932D79117A513F6863D275B80A249
01CC70FA943FF9A9F5E8D5716835F17CE3FCD6FC5EF10AC25471C19ED3B2D164
93293F09EA311F49295310B0C1AF942753C52402014764CE7026803F091EBA60
AD877E9208260AE6AF24100E2B365BF89C5B679378A7F6A67087C57B5519A988
04735147BE66CDFF2481FE35DBEE9CAC7E77D79BA760EF4C53A3C983853DE8C5
FD3F25925955F36A3BFF3454FF7B226C0F001FCBC5484DCFA46DD8D89C69C886
AA0247C5EE233C9D7DCFAAEA1E34B8938673AA6D760A80C38EFAE41268C528B8
5A14387C3E29D017EC16BE7E6918E11E7AAE31ACB6E85DE4B2B15B93B7BACB79
AC25F37A4E4D1B370E59C78DC9EB4AE83D1CB6E4DF546FBC914A6FF52591CCD3
C464AA14A393F61610D617E196C9252A013C9532C303C68553C91CE83431F239
BE883C519B643E9EAE5142F698F4B47ACE43BFE59E3AA4C8B47CA18016F95C6A
212208CDE1635F4E5271224CC19B6D47261CEBA3DB1E042443B665E915991D93
2209B3F4C86C9763861923B2F335DE040A8C24E73A0DC3FFAD5A6A9249A29AE0
C70F71EA41B0A4A505263D6A6C70BA63EB2814D31DDE792AAD7AEB4FA346EC85
0781604DBDF2EB65869969F265341938B2C7D6B979342D93A9F5A23A3CE8A015
130A0FB817DE38359C63DB215965E218E892C350FCADB5F66EB82D0813EF551E
F65992B2E24B4FC8353951C0A335B53F68A8F8286A94521BEE28D7319ABCDFA4
A21B5DE536B34845B32A34ED5CA1F3D3EE2B04DC4CBE12FC99DA94FB2648B842
54D4FB6729B1CB7E86DB55FF4216E2F57A08E04B44BB36F27129E5E93EDC061D
348F162C03BEDCDF0521B9F31D29543DE2AD436B75778C0489533F3FD5742FC8
AAAA8A72683C54B45F81F355D9D19496D0F80470D6B289B760B6851EA1A9D31C
01577A0026C7929C87160EE0D8EBC305A07052BD82AF003A0EEBF1D6FF38B526
E2EA0A91866201E08792F03323228B622E30142E47BC752EB0EFF7BE8B688A36
22826EC83CC42DCE8356DB43399E6A6918A887A64B2EEE98060E47C0F4276DEC
FDCA976E967EED2CE2C439693E2FD2F2C26823FBE781CE97DF06830FC498BDB0
73AD2CA5EC36B4892379B00A5C8564FC9A915C85B66EEE33EA460AF6141D60E3
76B4E430431F049992647E2B744E48AFD33CF5041056A43F90D0E6A47C2521C1
058E8C66894928964B332A89C5DA71AFBF455E5A68FDD4DF74A8F1572F8168DD
E778337122FBBD1485F73B4EEC2651C3465557A320A0932B65C1FF77F68B89E2
BE7D6D975EEC017C4CC66C88F5BF25B0D84AF0E70ED77B0B380397149845CE59
EEEF6DDDC9E7C6127A68489B4B19F3D15F6C72AB8DD43CA69CE0AE0177D2B999
3DB6EDD24B6A4FBFAF7245D800115B62C9BD6E97A52671CF3F69A78D19654F75
3822663BE5461EE982F36B0027977D6B3738BA7EBE8FFE3928E471DD9502DF1F
41F853B486CBF6A62EC2D4975CE0BAED089845046259EA79899713DD1E567F28
531DB889CA3267B2BE5B8178E6B7889A33771F86276E66C88613DE9300FB2099
A0299A8F743D418E1D967FA5973B33A45B38CD6A223B219D9978D3B9FA37E805
85EC0B2C0AE9D1AF457BA4830AF3BC5AC25B6E250D20D2FC1957B5D7BC7DD0F4
37F141CAF83DB0823CD6137CFABA19629F9D4EDF961613E545DBF5CC635D3B34
FD5F89F09B25F78633F8D269EB8BF7FB2277CC85D95A094415358CA9BAFB89AF
BEF2079EE97EAD72E34963B05614804C9235E28F5D93FD74122FBE17C96E57D1
934E148831AE7C815BDCFDCECD662966EBD98F467990C8FADD97AA854076AD6C
685EB8A77528D0A206E2A1040FAF2DE1FD6AFD5FD97EAAB6149568991416783E
6083A9639E040D0976F90B757C56EA7762B2EAA7055CB375591EC4D3F37E7B7E
75DCDC8A7A26B0F7D664B4981879C6981A506D46D00A4EFDC5C305A69CAFD320
D8F1E60750FC8FA17A96860BDD648B8F6DCBBB5978D4D7919969939A14CC93BF
AD50E55FF2919C76984A0072D052593675B4CEB8662342664401840FF4AD60D7
D76F9EA312D1914C5ED5658999118E99E3ACC9258CA206AB5A10743AADCF4829
603BBDCDDED13CE866859BF0F2368FA1E5CCFD4B142EE14E7C12BD59AEEACF47
70DB76EBDD3B6D382A812E19D49E552DC8138FD7FA1DB369BD5E14A95BB8F502
D1BE94E17E5C4E5596060D3C6372DC13F231A3A822D45203A98C1E8B7F16F72D
62E7D7E222146343ADA94C04927BF597C535B2DC3A08941AF3262DEC0562B715
B27C8067797C0CE920DEDECAE5D05D0B6324F16FC38E76FC82A26C6362FD9E1C
29E1A3436723D84F2220026A57015ED6DF2A26F3494B5DAD9D90CFE0F8969391
D3E234A709957CE23D39B67D7BDC6BBFD4D5C3F6BA22D3B53587CA20A314C1DD
570E0ACDF45497353EFB179C34F5EA9823AD143DF9EDC7CC8F8F8349217D1C3D
62F3BB8471B82AA52B6C090D4FF71C57E6DF36D3705E771E93F9232FEB35A8AC
6CC6CD87CD2BE91C762DF8E6D8F1E3DECF77A703341F4D5879B82F3FB8A327EF
E9CBBBE8F9B76ABA9F6F7335FDFC549E3C7E0C0F1BB457048ED47325A221E91D
C93BC429B8C6E116E1F84089E6E0A57A6AD525B4FB469D4FDF87EA7E5947AAD5
F49FF530E9B2BD87EBB101E1FB697AD8F90E85E90CDDAD63AFC6D0AA517B3955
97AAD7F22D53E867A764285A9A8EA08171D1D742344C2C9B7168C610BDA8963A
0FEA2B8B3BA7C089CCFA75E93D123597254F8CD9F1CE82E8C13ADF5D5249AC0B
32F2DEC7BE499F054CBACC04848470CD0772582077A5469D8A9CBE69D2B6F600
9867477A7E390EE3B12312F51BC904AAA4006E2B36CB4ED7FA26E7A090406E96
F900476C0235F3CD2DC38B8BB87F011E3C83667441D2CC6D52E53A0A188E4A1F
2BB16DBA5FC3793267F36783AD762482408DC5FE382A8CFB4B2F5EAF3C9EFCAD
6612AFABFD3C74BF09EDEFF078A89DCEB956F93251ED7039F922B9E281B6F0F0
DF639FD68E2FA77C25CEAFB0FFC8167C703D76BE97556669BE7279036B72C900
F620B557B7A463EF9D62B5F3E69CD7BF587492E8925F359EC5BC40D87C5260B7
A3AACED2042AFB7CB88F3F56805058FE6880E580359D48CCE1D771619572EE11
B9B064801D47F41B349D3309C0ED73E498CD7FBCAC60BA7227D5A1C4B1A015E9
AF5A7A1EB68C7AAFD6A174B76EC9B4E80F6AAB41B3891DBFD8BC7F2661AC6E39
CB510EDF4CCABC332ED5E2689A963DDFB35C8A0EECF092834CE115EBFF2995FE
A17C0F97394DCCF42E5DB57AEF5C1F15464D43E2A620D986A8682674E24838BF
99B06FA68C91E1797DB85D9247168A97630C430315D82C6BCC3463E77EF0AC2D
1AF6C184DB96F62E89B545CC8CE8B786D388BFB00807370968929FD6A842FF6B
CEC22ED954560FF7A1971E39FD551D956CDCFD15EB071898514459EDCDEFE667
55C1A3A391E0885860E8CEFA34E98C80AFB8C867AF2D6B53D89988E89E0A16BF
638A41A0157109DA020A5F14423D3947EBC612072E87FBEF1A4EF1FE73D48B3E
D3EE3493D6A4617F3885E9F571940346E1F33FAD7716A552077933DB8CBD26D3
8BCBF23B4CC377A5BCFC19948EF5E45DA4B44EC231CE55AEF07E942B962DBFC9
6A6B7DB7C8816EF57F4B04B03D4460F5B8EAF3E626D7B094035B99D96DFEEFA0
D5F8D34B7D484F76D202EB0E209464395349885F782D1F152D46F20EB1094824
C47F61502758B74D749818C4EF651BBCFB331858AA66916C83845A6E0F89C9ED
C2F8737A0C119FC35E435A69079A46C84B3CF54BAAB62AC19D25E46C51D541D2
3F9D2633D0ADDAF128E4E336E41C0AF1E31DC3AD15631556A6C760A49679FEF8
377A04BD2709C556F99D6D0A7E6D0F72BA8FBA57162992D855DC8EE829016B55
09AA74D73D0A959F75F5C778DAF4F60EDA136CF41E61F89592378A4DA9F81F10
F370328FE3678774F01B52945FC6ABCF3ECD8410335AE6CAAA4F77905272435B
F4F490AAEF2FBA46A4A07CD5622A67C4F64F4A6FB576B949B96DC704307340B6
71CB454C2C618EF44D9E5CBFB6407856406CC9C52353EAB3C79BAAEFD192FA0E
55541282EAEE8B95636805412E79E49A826C884DA3F86CF2FAD39A7166188DDB
17F8D8BB6754CE78EC3E440F31781482E6527D0E788F8B96F9181ECE959BA23B
14CA562D63CFA12F8768CB3ADDCA5046DBF783C78250251E8DA94598691F7744
07905226AC4AA63AFB21509347D8D3E30A63243E9F7DBE231C3DE32B82A38A9B
AF43A531CB447D19FD60F946A660DACF72BA715467566C078AB0E039B398A872
5A856FD9955EFF184CDF0D4ACDE9AABD3A72E0226869496C7C10E6B9410FE7B6
9EDCFAC70218EFAB51BA25F77DFA44AC31DEAF4E4A4F014CE79362DCAB88BB92
D576D161A36D8873877CF1862E8A8554278DD84A9A652307B7EF8B7DCBEDF2FF
5011A06D5C95B7A7B638AD6B9A54234FE345E1F0CE798DC546A507926985191F
DFE85AEDEDB77D9E723ACF7CED4649DCD28B7C7DBD0A6B4CDE1903873187DA86
D2C1B5D227166DCCFCD53CDA1FAE1447375F693D07ED4187C7F90629FE6E43FD
4C57C95F8F304E10ACEC91E65F8C929000F8C0C5A97E52F1BA59AA153AEFA72A
F88BBEC2E2464A45366318033884FF18C918F7956F817281F619F322A3635E4A
7B2659F02E5AF8CEBFBE4CF6E8DCB3E415B42D11056D51C98DE52FCAE577C7EF
0A72CB1F4170BFFA48734F1B1BE93686D71738FE955FD7C67F11323E059BCD0C
4E709A8AF85616C4309919470B2E01F294D6E5AEF8C55116028CEDA22379CE38
6A13FEB9568F66F15D2B2A9D775A6C960D05C94C00A2E8B33E44041B9AF54300
B6E76CCE2D6DBDEF48DCE63F3F4869DA9D77CAEB4DC19B2086EB25729A2C7FD9
A30D9E8FFA9D0A9D090B86A2B91B811FC5315A12FB600B92EEEC2CE2B6C918A7
906736E891BEC54C6F9D14DD64DD2D471F47B2178FADBABA51B0722BA091B558
3768198AF9E8856D7DD159EC22E619168753A7A408FCCCC97F38EC859BB49446
02BE875C0E8D3B94D712171A05BA383886B0E1CF667E91B25258FDA3443628A5
486A550A868D0C17E5861E79939718243DB1F1CDDB0098E54CE3F758E2C884D6
830B00E1FB1F743CA209F93A7ABCDB26BC852F5DE03B3D0A4233EE942AB48C76
966FA4D64ABB59B854532483B8ACFC184F8868FE13032EF5BD3FE9ACB91AB319
4C4A428966A6F238E524A3DDD09D807F08679755804ACED55A535E0B2C2F956C
2A008BB0749A09F2EE7F66643C53243FF660F3918FCCBC2CEB4D2B531967C4CE
5A5D7D2174EAF37344789A441B786CFE74A43B71DBE9AFBDEEF77BC1686DF9DE
D60741C7A175FEABDA8E74985162D53910DE1DA60560F84973A847723B61553B
BE1B0A67ABCC01E4432BE6C56F3CF416A851B73B8D6EFD735507D0DB5F68F2D8
B520AAA7E0F1D50321133C010F3C95A9938EF236F4147C250F6D7F8459AC97D8
22D47B761295ED92B36E27C507BA04936832B7D88CAF4503710570B96E62C2FC
5A08BA3F694BF444F28DA1C82B07BAAAE4015F53DD5994514C074D8D84A638CD
AC65918BC5B6113E9D68288A8A324AADAE80AAD15DD2581B10CC040046CF004A
F4D76C8434E66ADB72B6710A1830B017B0C95C208C3E590F45036691F1A6FFA4
90B18E3D327BD13D7D6E50620550430364C88A1DF224DD3EE5110D366788FADC
94A77124E291CB27BF10E4EFC417FDB11EDE87966846D8C0539B41792ED8CF73
1016C85A4E041C2F839E106E1FF4CFD07444051DB0C9C9843DA6DD24853B92FF
3BD138B0559D3E5887B7EA9C9C54F8335F55CF41A2585BA475D84C286D85B6CD
F0F348A9853F0BE3B8EB53C017533B7CAF2195E89F96FEAB7D91BE5CA1D916A5
D32807D9C7A87F8930DA173B4CA5A62F687C9C0E27AE243A5010975536EEF28F
9B03CA4C49221E676C84642B61E40B6E071D6710FD81A5C59D0F9224DA14A90F
17401EF353CCDAF3A9F80AF982F9E5CE149354530B11AA801A46BCA9E0AE0F1F
A32D7270BE413C71765E586AE6AF7CD6CD31FE14B6AE47262D4ED3F9DB786D7E
7370E2F18C1B074589368AB6A358AC2E23291325A17D69E6FA84A5CEBDEEF871
61DE496B634DFA9A68FFF20AB8CB392EE3D97319A0009DA311F4899F65E76D68
28EC84D2602288C29CE561373FFA666F6A4161E6593F9EF18F44FDF6D5AE00A8
D560F0B72CA1EBD474FA51A5339C13080E46112D96057F4EFAAF8BE15176E475
E95DF937A07B2C3111B6B5FA34108CE6151D158AA7D6F4DBE64EF22112EEEF4E
78760F8A25C60981E6372E49D71614BB4A132C92F5C53E102669355C2F09BED3
7AEB3A88AA0A7F57A627357FF78D906699CB9C2B43FD2042ABADEB88D9931AAE
58F63D569BB78545051C2FC0B81CC7668EC6C547C78D026D6D6CAB0A90A6891C
C6A139CEBFDD923099631F23F690945DACCA92EE9061FAC3A8E1B8776C69FB0F
DF7CCF14E0EA440A74DBD51ABBEE7629C98D586F55A14D34A31AD7C1FF486172
439C132B32E829D10EA968E2EE71E08B1B5D45156D9582CA59F8A49846E440FB
EA1B51FDF46C01D9C9641201B7CC7FF914E146486E8482D66A8185D8D8BF6576
D77A35534B63901E94C6137A4D53DAB010AA035CF61B21692C821E1A749084C0
602F6E5AE37FCE6CE1C4C629F62971BF83672BD3B315539B07CFA88C80D6E2C8
4F78C4FF84087D95BE7A2FBFB6A324C6D5B382785D566E98C4DBB4CD9644E4E7
1960139370E8B224F1772C9C9632A517073D4E8E1C205588BDD3B30A661B72E4
6589CC08EA87EECFDF36B819B07306C7D750F593CD8FB5E52B587CFF44B09B25
283E54F1D23337FA021F77C2C3E2096C4DBE15B542B3138331B41160D0D33E21
F26DBAE2550DD4ACA051EA0A00301076763C0AFDEC0335885856BBA23EFEA258
C5A23AA63C6E6AE2448E938882974856D3100372E045076CE014B84A9EA4B7C4
250D499BC563218D10153F6C7B91C2890D4A5677B231727E89E2DD4A3896E86E
61050B98FB0442A53BD7193FCD6B46682A364CEAD04F84F1F6D5C0F11B01A588
399B10A9D2B2222F868D99B6F3E211E7608581F488190A9DF2494AB6DA7F6CC8
846D68E7DB1A8706B9851843C725D6043FA1EEA841E5ED4D47DEBA710DBD1A77
2D0C98151CCB9E876C7A1ECB2FB7F9F4B2A47C2C933A00BF51115B2B0D45F9E7
F3050BC32098B9E59D5F147B1CABB84D2439BE74DB42FAFCFEF593FC5D2E9A57
D84846762D42DF4743F39B1DE3C4F8244A99D481D27312DEB6A7DD9377C1BCEC
94950AB01477110CF83586C3FD9DDFB32B18A998BF029299CEA838209B392B22
761F4B31AE2147957CACA804CD809616BE4342A5047C07E76889E53BCBC0A9AA
FB5829429F15FA1BF3DAF894E939E5EAE869C08A492318C2C88A955A6054DC90
13584E066CCC93A58F6823FB2AC18758359E92F6E5F49819178A985CF7B2AB3C
E45E29994EBA7BFA669EBE57C23DA2FB25FBFCA987D6EEB224A3CB3F59C1311A
1A7B1350FE59D7CB6F5FAD5F9323C4637574DAA16916B8CC6DC32495D5247D87
7E47B0A4043CA72EC2190940128A106C9639482E44A972B2CD320FF03F5CDC3D
B656367432F670E1EA6757CE2D6D595E7E54BAEF655255F4D58441F8BBC62072
717AFE0D18ABFDD80EE0D2A55BCA706D9B820D05B81C78F8E152C600300E4C81
D9D739DF88C655165C148CA55C7A1D7D90C64AD1B5758927CDB6327E76A8D8C8
454C7E9ABCDC889C7BD91FAF70D7420924EE41D979C33B65E0BD22739DC6059F
3AA22CFDDC29409ADE33D6640B85862743A2716B87D3297452BA7EA1CA9EACEC
454312EC1DCE08F2B0DD25BD89FE798B0A5928F74ECD5357400669B27FA40F82
6A0E871006299C864CFB316D8F71BEB6CC5282B28753460393B143D807E35B8C
DC1B3E1DC2CE2D28AAF1191EA086A1F1FB33869A00CF375B55B8906C9A0AC65F
0B082F362FC1C2780E963028ED2ECA0B7A027A91E51F2E4F72FA185E41F8C636
25AACD0916A4648BF5BEBC51D9825DCFCA5042672B00A179A12515F69D54DF5B
F9912FF91E96D469B396D9EC72DE12F979F22DF68BD1A01F8765DA500C58AD8E
E472B30B7BAD8B85CCC2020107EF5221970F7C91F092B209AE35C91CA49AE879
DDEB6991AF31FB42EEF66886F80532618647E6A6669428F89D6AD6FC77292771
41C1DE33016126C2CAA9ADFC6DB6742E6994058DA1F21D32BAEE70088C9E2696
9675F5F3B9C59D01B8F38A83E4045F3CC8D78FA910FA0E9F2D6F8DD5A3BA2073
BF7D5EE5FBAF3CF3E7189AB59B814D50658FC6F4996C3B6EBA31DD3D93D53092
B551E8B90414D80ED6F20AC78C389CE68CBF1557B048F8C9E46F213B789C3D71
B54AFC5B7A19E38845B4769E2125098176388458C0EEA49000C283DAF19CCF88
634833F3A62F55D62CB2B8E3D47892830AC5E06EFC65D5751976B74A10D01647
9767C4B72BE2093426677988F8AC9F7FCDE0DAC8BAE676CA15FB214B82459C02
6B3A1226E7BF21558D70B557897F725B3F51746691838E600146F6C88E1BE994
C9BD5DECC6A58776AEF1D0799F33FEC6EDF59F573E7EE66E72F20C1FDB34330B
A317B27B4EA46DCA5B6C5ACCE85654CC6F37A98A15107CE5E670014BCD3C51E2
71ED2FB13FB2FE1EFFCBC719BDC2448BBFC520C45818A141102345439BEB39CC
6303720135F0AF82A1507DDA1BF0CD988B67D05C5F366A5CE804B7463204E99F
0C69288C5F952C780DABFE8192A7EF6EFE726C53106E2614C050EBF77D4670DE
E093550540ED00D1727BCC092A33BEC3F2E8A2C89898F7DFE1265E57CC3DEF13
11E094B951A669BD5F9217FB0ED537AAFDE12E2D85938BA3F031B6383E1D780A
8128664A8F1773E728E2E96E73CD01019E64A01054E5E94ABF52DD9AA8905E3E
734F0C5E89F86867CC439D4798B31C7C67DBB8097F579C8A4DD8D901A5B598D7
21639E2A82FC866AB364B14549D63F4E170943189C62C9D370C182723B4B5DB5
684E7E2E114A0B3B5AC5FED548DA0E51D1AE0842037773349DE530D3C42BFFBF
3B2E8B7D560376C0E81ABA524BDAF8112E0B50524F299B22D35A62C65D2AA4AD
73D4DD656B5C082E03BA4D824E7B833E8DDF61D8053907081825CFBBBDD51B9F
39B587A1B492791D63BE8B596E67963AF1AE578BD3400269549C2DC29F24F2BC
337C53E57106BCFB1FCFB2CB1DD837885F2EB8BE47F7B389AE0DC3AC28D2EE5F
1F4A8C486D974A71CB849D5DAA6D0E2DB7A9939B29958A10424AA8ADEDFF5270
0C571B4377AD4768FBEBDFCF6B49F09839B935B1F6FDB38F081E9E8D428C91DE
71FD576EB378539566813417C2FB2F3A34AD00EA828769273159D4123E00A6BB
C6A0C2E7593504742D31C0B69DDD41BA88727A8086962463DB084346B2CEBE6D
979445443C3677D129837E6E77371195259923B996D528A128B0598F6598EBCC
C8663BC5C4480BFC02FC45F2B1240C294133F7627AEFC03821B917C5B8E5487D
C255D76461BCA90389032FE6682EB17B8A36BD2F492AAFE1C957383C991714D5
A5640E7765E224CF04CA4298BBB45B91E0281845DF8F8927A0D30078DEA55FC6
9698A27F3A9CA13674327F091804325ED9C07B4C5A856537C06F75BAB024B682
FADA1E3A01E318BC5F8CAD341C90FE154344F677A4930BEF4F9CDE56BE2D7634
00C74D81D8BB0D87E54A0AD2C4C81B22BBB921508A2453B19A9664C864AE888F
BD4734ADD05ED33886786DBFB011B6C12327592F8B086ACDB860B1B84DB9BCFC
72F740B91CEEDB54EB08384809CF652F1E602E7F256D19A9A6181DE0670915C2
69B4E77CB4ED988F593D51FAEF870EED9EBA6545141F2F7A7307D30727B94E23
FC3FB681B2482372B2C20ED895E24A946B868F9AB139E5C6357263A6075CD478
4CB7994F0C9F5DB86C3109AFAECACB2E4FAE61EA1D3E2DA8EF502EF888B7009B
1D9390AA7F42F60131BC8969A7E52BFC97C3C1CC59ED40A970E0F54FDC460E35
2F0263ECE4B0148610E480FB161356F3F5E739911B5115C55F586AC878E93ACF
92274001029F1AF4F8F96019FB2822AE4D7FFB00D18FF44D2B06582D056E9CAF
FC77013F4B7689E4DA16C4AC387CC4804F6F81E5FC81E4302DB3EDE6A96408CD
6ABE5C376D1EA08BC52A8A1CD7229ED655CBB3AB51D11BAE4ED90966EEB16AC3
81F4F07039B6F9D7E07C29D4505DD175A836C0B599415C638471E3F0B4BC379D
2173FF500114962E610D7BE1ECB505FC2988F00252CB39D769267586592927BB
429D9534039326416647B830558D3091C99DD2D487D033EE9A75B7ED9E43439B
6EDF95DD4F132248742876953526D119551A8B29CCFE9D9CF7D22DBF4E006F30
3EADF1E26987E4B9CBC486B9470115F05719FAF20F60E5D15B630ADA5342D0CE
252B637B491B0371A976F0AF6125EF2A39AC82D44CEEAB043FCEAC577BAF6993
0568678505ABE8B068AA1AF3A022D4B81AF11BAAFFE6876E4E770CD78BF01794
51C84FE2CC5D13AFE270E9035F12399AE9E99E066688884DBEA2F64527F39C38
36A94AD89F1C51FBD589F3CFD097B2F859E1B4D7EDBA8A10A7639C03B6A576CB
C040E6B64CF1B42260D9CF3306707631F5C6139DE66EA86054E2297F5414CE07
862C8FB208DFAF36E0098EBEF6C27AC845341E2066F5C28ECC3F08B56E8564F1
8556B5F1DBCFF100EF286C04D04CCC4B264DD76F31F017E07A31B99351BAC161
EE65640810BD7C466F5F433EC555E83C466B698F5C993CDDA950A1FA9F8DD16F
806D40EAAF45425402EC8E9FF4F3A56D526D19F9B74F63D4F5A8FFA56B5A2FA2
75554945462B07AB66D806FFB4FD9A6110CAD90C568431DE2825AB758638FE80
694015EA9361C2B4BAAC06004DF823D48D50A8899DD24D4DF5D873698E715099
55240312676155ED2C2E95398C0BE9BC7DC784E4ACBC3A4A098EE519E47AE9E2
B9BCE3ABE6EC68FFE98B8597A648098898F0BE89FEB4B84CC0A3F6BE1B968E6F
1750A2379F1525762975AEC0D0D84A962DD0A04F4B6B420E0A98161F8ADBAA54
FF0F25A13DAD43232F7EE4D840B43621750DBD0C5915CA0DE369A0D7112BFF6C
AE56CB9BF699D81B77BE549E5D0558E8C4192A56C55C5BED047D4387CC8647D2
90CD8F7AF8845CF78D4BE9C7F2E4DC00372532B901B18D6FC9F3CD27317AE5C8
EFEDCCED86BA6FF975E07B461AA87AABC56F78F0F213D963AD955334B2DC5A8B
29E1D5A404B8B45B2DAF636CC1011CA07C4C11B8148B8A09B5D1B4520FF18D62
6A206F1F615DF055CFE15C8FEB06A23361C0DD06828CFB7991365B0DE01F3B42
F149110E116E1CD6B5888BB4EDE0EB9190DF3F07E2D6243AD3B92E0D08B03A11
4275D2FD721D8FF2CE1C8897D033EEB585F5EC343516991E7834FDA0F1AF41BC
CD590FE15C31AD1327A7AA5795019FCA5BA02FD3A12856CB4C0AFE6B0FAE953B
015680FADAFADAD02FCE8211CA278746B3F7EA0F868E0B1E18FA0B629E8327A6
8EA20601A90B67C63CCCC7D4581D1D357E52311AF227B3E316B428900F4610AC
6A84BD327150E6AE971A7E893E368B84934414FA8A94806AAABDA31A9C1A23E7
A19F9ACDC867171A0CBCB78475E4BA09D03745D763AD531A9573CC39EA0A35B0
08A73B07518B9EA8A3028D7DA9987B6DEB35546D651A2F1E372A88C843252610
FF37D6B41BD233860D0BBFA0172345439BEB39CC63FF75EA03F6F0D8FEE529D4
820D0846736F0649DCA8FCCCB124E1FADDFAF3D59302E3889279BD833E4CEAF0
C80DEFA6AE947F58A30DC26D131752008793259254CC4305A9CC69EAFAD7F08E
177317D54BEE001D6A439BCB4B3B7895ACB7AF7EC82DC5B4AE588FEBE93512B8
6F05473C7E82BB2E21934F0657DE48B9AA26C0FA6F8742178B15884E33D4CE17
497C239F9CA2575100A33E0287C97F91021615427B7572E8051D99E2B4714126
024DD013CCE6E2B4DDF83466480BBE3C9950AA82A4653649B7CDCA11A1FF27AF
A7FF189A7C2C699D705B1AA8697A500C943F702F820CCE6181B6164A15AB2EF1
83413A4CE70C72CF3197C6081BB1F3246736CB923D312888E865AC3E7626167E
369AC65724E0E07B4940A96499663C88B604B2A8F947700A630BFD6A51E289C5
58B9F2EB0504A2F8002B1B13E2A496759FF423EA5F356DE38720E5A7B75CF705
6EA47396E7867482FB5CF1C600F30F1DD52DC3204F710A77E590211592D6ECBA
2DBE36B22710938B33114D55099F0CA84BB201CF67874034DFD97F007D9B4B8B
1E39C378B50A2E0882EF028429D811ADF35B869BB210E44A57178893AF229268
DBAD7FC100F79EEE03CF3D9FA900F836ED755E2513F957B1F1153A1459F6287F
E5D0DAF43043794EF59D717625D3A2871510FB3661D8B5F4D9120A155D32DB5C
681FB5A563D1B10C5CE008180940DF9F4235FAB68DBC3D2AB337BDC8CB205DE8
7280206EBD32BB042F46824DA25035F90EBACE017184658A4E7A74EE6C22C273
7A810763C90D65A27D4EA53FCBE67F188553AA98F8F2F93797E81B488EE90CDD
AD63AFC6D0AA517B395597AAD7F22D53ED6F3B115844FDA9A2D92ECBCC9770D0
132628D7CAE18B4A8C6630C0E0ADCBD3D1F3B66962A7C6579DE0654DF85CF8F3
752B178AD1EDC212E7FC06E86F8C31DCA9696AB3CFA1891DD8656751732BF41A
130E71D69709DF330F5B72CD5D37950BA2906B425FE477E6784429C162C33B84
A4D853451C8777DC1D69A4CB894806BB3A779935CB46463F4570CC1FCD2159FE
FD3AD2474EA252AF193E5E9B30FD11F04D70E268F1D4B2A237ED3BC56480C696
1D4C4C4FD241EB727D31A472767F83290DCB8BC01CBF67436CEDBF502C4013C1
C4FB9A746085189D60E0AFA1B871E3F89A7E6D828400DB7B46237C8452CD70A6
7A06DC1EB3F2B3C58FBD1B8C3709864230E03923EDA8E2FBACB8D3C58CCD07BF
CAE08D822EBF4AE525349511B5CCE0192445743E064A53A585C8FA2900DA8587
7AE16BC30D56A0B208DA546903B801BE42F7A1A7EBBCECF6D1E6D060743F7452
363DA1BA69C72DBC6ED0505F551F95DDE3615B9F1E6134534A315CF6372D8765
0A8610901321BAFE2BAF5CF065EA8A940B85D730BDBE48722C05644840865AE2
A6D6ED89EB2816F6F5D4E9BC5560F2A9F926A5855D4401FB1F62CD6C9CA9EC7E
BB364E9B25F1235800DC8E790D62F3EF215E559F88EFCCAA7A47C5F3D0C74526
2B88DDF05E7E3C1682E8EF3FD142C6CA069465E5A64A0E8A150835751C717DAF
FA95E9EEF1C6D4E507FE6C285D244462E06C90DF1FA02936603C9C5F76C2F907
1A4BF4FFF2AFD7A0B06B3F26FEB8176942BAE47F67EBB46550B21E66E656235F
280A1CCCBCA4D5E8D2744EFE51763A6BBD41A7AD83B227CDF38F4D57AFAA7CE3
1278DD472D9F6EF7A841D89700FA1D36869D8E9487FFFB4C55FDEE648948F92C
BC5FA902E2B06FB12AE869A75ED6FE1768B8E8BE31F533D311387E66CF24E5EE
4ADF486DA47F265FF8FC9FF028AAB2FADBE49757CE99343D1361997B367E27EB
09E48873CF999D18106C2CFFD8EA20EA384D74D11F9273358E7F80EE28862196
FA78D778FEC5D66460D04955DFEA71460082A33EF32B5E1A22FE803AFB2171FE
5A3E58B2FB78175775D23A3EF1DC48BD8BA01A6D096129CD99FFFD3CD887190A
640D2FC177544A6C425CABE8D56D747D1F82D049A1204A3C3956E05DA1D289D4
70C53FBD6E3F72660ABA533B24B46019AFA3789E28E1B6C051A083AF51CD07F3
FC7709983AE0FDC895E95036D231D49E66C1BBFC76EFDE548AD1BD6E794ECB47
CB9B8C88E4AE68E21535FA1B41FCC74614129FECD357C3BE8A068C9B0ADB6BBF
5B9EB427971BED47970A13775BE150A1F755087BE7632AC6D2E920AA7A5C51B3
7937F9DF00DB0C9D4F0432AB3EA1F5D8579CAAE0CBFD02AA25E4E522F0FE739A
9E747AD286D01FD254E83FBDE2731167C1133DEE7EE2609E8397C2DA3E0F382A
4C8057DC8128494F7BB8B5AE2D6FF99C5A65AF5D9F1D5A2F357435AE71B1DF40
1FC6A3C6139D58E9D69D6D8FD76C832D4161AF4BC99B0FF17722847C88C9C0A2
FE4804ED676411B1B59EA10B24B85C99A5E98B5C458F88AA854D2F15F7AD81CE
FAFB7B4EF64B20C24ADEAAB40D5907656CAE0CA0780CD30024E9602ED96C5227
060C7CB058DF3A612C3ACC7A0DB82796146E427215C73BEEF20E828A46681B6B
DCEA7E9DEB25E3E98734A0CA4A814D824EE4CA5383C6EB8A88F78F9F4A0FCEE7
B11A31731DE6B46EE9D1C3D61DB4186CDCAF7F81C1D6AAD4A849E20FDEE79F24
75C88FCBA60569E0916E6B555B31670C7044FACECC830BF9FC5C3F0662F3C701
390274F4A233B7C21EABC56271E0D269951DB21251B3DB82E6E6DBAB14516A2C
4CC67DEE79BBA52020FF8BCFDF1D312FC0FC0162F47FB4D8D9034DC4247BCA29
A7E1CBCEFF5D8A901D7FD1EBA71498638B30850CFBB6FD875ABAE3E6DAD7E057
361D7CA62858038F620B6E69707A56ED2CBC816B173B81C2DC5CE79ADDB3BCBE
DB9BA7010946BC4F255BFE1A417E0FF4C08301FED5FA7C1D39D91FE5E58F85C1
B910730712232EBEC664CFF660AFF07584101EC6DE00B9162A5A6DD3213F938E
48CD6AE713823592ECD6F8B9F183F8410DC2497E106EB459510C147A10D3EB1C
61131EF486B32DA4780B476699C1ECFBC59693A4E1DD1053E53B061904782C36
6E8597A536E39D2723748C0A1E3F5390E3AB6E91476696D3F5E0AF4AA11E8052
19724BCB5C87F6541DA16CD6316CC18A23723BB19C1FD74FD12D112FC2BB60E3
AB70FBF2CEDBF093D02FB419CDEAA8924DD923B74F252664C67A0830B7AB31F4
0AAA23EC01EA99F54C3412436845BDB2CD3EEBA02EF965C9EE83E9D8F8205D4B
2D983D610DA0963B04997FB69CDC7D869C7DE7B43510E96F0598FFC4996CE3E2
D1061B5FE59EBEB6D90F3D7237DED0BAB85CB10149D13D96E433258F1F3FC25D
CD72A09D1FD94828856791E4B5E2E06E3394ED8C5BBC67DB7B789F923B041DA0
9BE32FB5DE546EC4715A48578CCFEC07990764E1E5BFE0657DD74ED4C6C2042E
E92FF43EA6C6F70657FFC86DBA609B785ADABA6033A297EA3C8C9C8CD4C52D80
E83E0BC1242EF89D7602F38FCD0A3C36F5DBE4EADDB96F680B3E202E28B26102
2462719D39E5C3E07395F477476C3634A820A6E376B97E7197B407EA88BEDBB5
A78D437C824FB7920317746D1350D09077A599070988F86A2E0C5F7A79828BC0
FA2EC4EF20F5120AEEB2DA5DD0BDD47B0F2B3180B1BB816741363C98E4CBBC23
E412A426C6DD8C5E6F98497B53718C835303D72D0A80DF2AFFFB17FDADBC105A
3B27690941222C1DD01828BF658E24C6F323536F47C8A7AC8AF1CCCF44C831E1
0E34D73AB17E56133CFDA05057E0A8E6222598E49811318D7C8E13BF6842D560
88C3A6F4DF4DF1EEC1AA66A9AD859805E3255BBE920F5C6C0945FE359E0BBE68
EBFA2567BB4C4DD5C64BD28DE9517C0A69875E8B4C0F5FA35C2C450B592978A0
63795998D060A8771B359168E864167F30DCDED885242E7E4E60A39D160F3A2F
D003E47BBACED49E361AE0E3FE6CE1628B5A7B86839EF2629A233026CBC938DF
14F92805DF3CEAB33B62D3BB0E9EA252E2CE66E9A3EDB0EE13E0382A0D7198F5
6645E2F958E0FF8AB1A36D7345753E7BDC419B24A1705E3F0D710BD29E035AC8
985263B62CA4E8EF621E605C5EDFAB46B0C28C3C7E832B439758AEF369E13E50
9619ED4137B7A391C471E7652804A1AEAAD976CE3A0BE591C3EBF2CC4A4254D7
01F34628D3C5BA1792A29B4FE833C10CD0854D9C53FDC93292517B21357B8338
233A044E8AAEE91E1C8A867E2D2A25DBBC9A1CFAD956C2694A376805EC51AA29
54E3CDFF35105AFA06A5F9CF9DBD3807B5507AD644B9F5C14373B4FF0CBE2C4C
8F27F5A661E2FB0858B0EF05B3E536EAEDC48015AABFBBAAE24296F5254D410A
E8C1287B3504B34CEE84A544651C25DA852890BF51D254E16A731F67EC8EB7F4
8ECF582BCE050BAA177E9E8F862B5F887A2B689EE4D8CBB4D40F3661EC58732D
7E03DC6982B1220A197516A13D16D3CA44099545795A6E62188B190602A5DC39
2035189EF4C0424FAF1586A822E566E65D70DBE3EA7A5E04D5AB8934367903FE
5CC5E754415570218AAED6588E417E777E60B43C8CD975BB7A6DC2D3A4957FB6
A6B32EC7A2B5E1F6B0DC631E00AEC621C791315A8DA673BAA9CC73E117C9327E
5A7F2725B16362AA7D891A824CB0B0CACB71FC0FBEA9A466B4CF8B039627E9E6
1404598857A0EF6294E1A44885E70899F5260AD1482F5E7D7B319A275E097477
25A6458FE108CF72BCF6AB164ACD77B99E248507F146B40154DAA479DD2715C4
C2CEE1F02C3C92BF3BEA2F271684561F9742380EE8DF0026663246BAFCD579B8
F6ABCB35B217DB07076D4391E9000D562C42A71D850BFC630778671C731B581F
095D597FB1A109A18F9FE24560DEAF91B5A6874BE016DBD6E6AE4501B7CBFD42
B6519F7F308D6B3D4F69AC89E2E85762F257AFD93D4D6B8A7B89081B58546B4E
AA8BC4B4E7CBDB628B76AEC972E60FE4020B310833E5DFFA274DBE736E141DE9
7754B0D4229727DCE375DB2E7F8BD0B769FB2C8D1F2E0B411B674294B0C3BA90
EFC0559C9E31164D4555C4D8FA71D2355C78D30FCE6364E827B864E15F15502A
D61D345B05FA0ED74FC77E5013741301029A9B2BB453BC721C8F989103E4F6F8
A25A31E864651CDCFEE7AA209D18690F5583534D7B8680D0D386D9FDBE55ACE7
3C96E18535EC1F79D3CAA28C53204C204D2EB3FFEA2A72E9E2DC30CD25AEB8FE
D2CD60E51212DE1692C760627C77958BE121FDED7ABDDBAA027CDD130B8EB981
3344DFEB87F1AC0D55A92B7D4F7701BCEE18177EAA85C6499A66A1CBBC864067
A3B641E7560B1CCDBB6934F4F9153AA062DEF27A0ADD44E6AE702FDC9D380FDB
2E1120AB36D0011C53E7B33D2614E6C539745A8EAD7949FAD1621F065D19BD04
BCE541112E5EB764DE44B5A11FD48D2FAE8D670ABBC1A44AD65E6689EE00683C
D71999F56D3CAB51C82990E68D135CC1173F9BDEC322179631BBF482DD49430C
E9242611D91D34C18EDB06EF601A8756F2E26484D75D3E33562B20CBF4B39990
615571FE3128EBA0F2DE6476671548B8C31C22431A9C4ECD59AEABFE578B580A
8EEC1269505242A7E1C9CD1A26C0F9D084716B4647EC18C8FB317876B755536E
E103CAEC815A720C780794868BCBAA6BC4B06E2257F6EB8031418C83E0A8AAA0
F61F3B73CBDC5275BCB2DC287840236DF4AC604119029F54CA51A63AA157C785
43FE913EA90B9ADCFDC0891433C5D0492320802356F7DBFA2691DBF56AE7F2C9
0A2EDCDCF3A9C34E907F880B846211497A07CE34FD18D09B5B215EBA62055AB6
1D6CAEAEBA7ABB0A9F8034D332CEEF81D6D743757511819D607E64D2281707B2
B856FD4C790954714ED528647DC1816CEBC5A9CC99882066467CFC5022A48711
4D2C6931E3B1E2BCB60472E2C0E445DDA03536D075A462526DD5D645EFFA78BB
4E33FA0F4C9393FE8A21CA7718D6737F6A4749DAD56EF1881B07980826575DFB
1CEB1C7AD5D09537C6527028F3C0AB9A8E0030E94A792CEBA2012CB5ED525D1B
A2FBE567DA5EB480DDD08DCD511D7312A4C58EEA4A988A71538B22B4DD47E616
BF9C4B168E3FF9F5EE9ECF5DF99B09EB907213FAE7229E0E97ACCF4F1CC2DE2E
78D956067156D35BAF85C1847814BADE233C5D0BA52020FD834D2324F3ADDF55
29AFE8875E335E3EEBFBDB0F04B473097C12E8A94F08CC5A477200D4276D6B96
01E87181457C109CB31DD1201ABA85411E7A4075CCF445C09BD4972DD7207A57
C0996E240D93D250A12EF7F0672F96BF51340F745C987258CD464A2D8D25ADFD
34E2051206BE8FE1A13880B927E4AF9042BD1AD972E7BF5EBE3B060112EC6F4B
087B582CCEDE1ACF103B10AC59CCA94949ECC8FA755F748F6B03DFEB517B2FC7
CA919BEC8A8F9033FF2942402FAAA4B0CE6C24A17D3A727C0D591519AE169E8F
A1F66C2F88C06355C6230595BA6F592DC2FBE4E931E8A25EB1EC37B8DE5778ED
0C6BF6E6AAA7D05866E07730DFC7474E776AB44F7649C9EBEBCB10DC30E079C0
95361A3BA643832BA232E1A7C0319771FFDC022B31FC9B82DA4EA4038E4A3D94
3D435AA1191E4DA777E790AD62C635A86F03520C093F470B8E89BE2A8C90564A
7F92E9A6BC8A7EED438B2D25F11875518DEC3F9F9B4A015BED3A177243338077
DDAD96BA700D8637E12865FEC1F80734C14F8F8D31B1B2C357FAAA44467CB218
0AB7FB7CAA869D7379996954F36C5C09FB4CD7AE6BE2B39F39A03E1E7C633B55
4E1B88BEF060FAEA29AE728129662C35679D6C23DD7CD0D0C087CBD4CF106204
4C7E62282962856C431A611F530B3AF54F387A2C30E34911C7D95499C4575598
4661E4CCABF35206ADFC5B36D05FFFB73BE6F4554A4EBD27E131C5BDD1B577B1
86A1BF3BC3FBC1A1EDF2E4F848D0204C9DCF16C794106C2237F3A5EAE6735DE2
C4F5B27DCBDC047B3476CFB14BFEA834B4077ADBB35E0F1641F6E84009AEFD55
3036BD08972B9FA0860D592F09BA5EAF03A49027300EDC49BD5A00DCF72194A6
BA0C42589038689E087833576FA355045ADCBED88BEE0108E936890A5FF0D348
452F9ACD61AA34CF61F43A459CEE41C82F17A51D2FB78905CBF19F10DDB795C8
FCEC4DC371F37B035E635419505382A62B35FA16C620A1FC88CAA356DE2C6AE6
027D1CC0CF725345DD2F345075D899A7B2C61306E8469E23F5CC55793C1C2385
8136ABE324DE6BA83315F52D4817E1045594406B1DF4EEF43C87C7BF4EDFD6D2
0705D5D631CD0DC7981EADA9F3E35460D5CAF822C9B7CCA8513070722C45002B
9D96C9F16AF48A47E145AF4EAFCB3DFEC11CD95583D6E5C712C679CA3C93DB62
021467C3990D7AC7495B7C6DC6D266439974A2B49D6B48A28F29AA1CA98EAF69
C91C958D7CFFFABA2DFB0D65CB405EBB0C0E3EC9C2AF2090FD00CED5B1A52126
FD5315A06DC35643341E7806E99D555C9DF68443465FA72696DE69D22369E338
8C63C2A408BAF7C49AECEBEB6BE91B76EDC4F398C2D46A82C3B240CC99E5EF3E
9ED4D2B1F245E01C1F36626E3819E7DCBA9450A2B91572A36FE626BEA809DC1D
7D0AFB52BD7BD06B3C4648A3177C324ED9094148BB33DB26E3E436B06A04B309
EE9E4936FE13D6FFE686B1CFD0EE0B6B7F873F7E4A94C98AAD776E11669B81EA
A99EF9150B8D39695D096825DBD55E99DD2186F38CBD6E817BBFB2638E20DFF0
F6C95F368E6B1CB2531A2392EA4950D391C8D8D896B9CC3DA7C337C2829334FC
A587EF30A7DD360BBCFF7B3349E611C2ACA9C92F1C8CA094712CCBC6F8A3A1FC
FFD2EEF59E1EBC6BA6A6F4F09BF04A772DAEEF6981647FCE81F4E9441865A440
AFDC15B0AF83201288C6EACB107A285D165AAFE3C8E2457238C0B25C4EC60A2D
CA433FF49642C96F6D3C578E85ECB0F0E48FF45431F902C010DCD2321874E4A3
F60FE56476C62CC6317FC53961F9160AB9C65A9DF4F15DD95A30191596015600
8BB04B1D0564E11886F99582A135CBC8A224020564ACD57274D02745839B612C
388CE23FD2C106377C290CA32C05FE1B64A565E17308B1B6EF97A398A3574B16
DAFE75BA1E4EC0881D058B5C2100B9B0A0DF61A899BA3DFE76197505D201E3AA
F865BB0D9AF19AA53D55D9704D6A805F71E5449AFC13EF4E624A56C2BB0ABDE3
A60D9166347F920C345265F9B6CD985F701E7AC74580F3755B0736045AA440F9
8BDEA301BAFE4483E13FFAB16D8F9C238A1176D704C3FC230E477B0B0C5D9ADB
A4A829097583B1C9AC54F843055799A8E10F293DB16D18085BCAA06B9C035375
70721F6BD83A33C2716532298C52188E0DB5CA45552F8867037B2180897707BF
B898F1C6B68DF63229A3A1A11491A2342289D09E73E5C9AFA027D1EB4202C88B
699388CE74CAF0F8D8BC2C68D559CE9765D7536C149978EF7C79F589BF197572
C39262B28404E233351500EB8689BE906BC12D27079862EEB6CFF4F51DE01DDE
96E2017CE50D01F699FB3A4609078ED4C65D8E80AFB9FFD03692B957A6C35991
164ADFBB0208A83E16FD42B6352EACB93C1F72262B1FDF036BE3DD736B9710F3
84699EF1D23C2F4756E31CF24F672EFB4F1F17E71006B5EF500B699008A2BBE0
06709AF2C662B9D9748C3B57D3ABCBE0027B43EF52462C754CB9F6CACB697060
3C886A6F8151BFB286EB4EDD5F31BACE6BDDFF6716D141BCDD4FA9D6617B76A4
2C661F2A720B37C4B2DCB7F7A15864E73339C9C22B20F991BB4E32ECF1455DBC
3E902F2AC3ED51A3B369322701169522EF0616289C27C15172924DF6DD96AA1E
3909F230124BC887C5BE55ED7976C07CFFA8AB3F11A6822FF5A5CBD0F7BB6708
B7C7F17CB31872FDAA67247276BB3732EC7219B0B24D17C3389E8D504DBC19FE
3E48CB0F0E18D6D262AC49CA2E9DAC4E5ED71EACA23D867BBC1D80030AB9AAF8
A89DC4606E76DA69023649E43CFE82E4F6D74AA3696DD13387024C16456400FC
8819217B195EC6E4FAD1F39E803B20AD604E2FEEA5F5A4BF996E234AF26AAEAE
82AC6B0A5F7A74B2634A29FC13AA745F62F0715C86545FC549445D7AB62A4759
E916A1E40B22172C0DCAAF41E9A8C10F92B6B41627652652D8BF99D7F2106227
00A69E4652C1497E01BF7FD609F41CD5D1BEF71E412EA89792B7B20E9AC853B4
280A674618084D22805D397E01EABAF8DD287506184012BD1A8CD16DAAA9B17B
4EBECEC012D40F9A0526FC94A2D3254A737BCEF202D9F4FB0387D8895A37BF24
0DFF74A2F754FED1D9ADED600804B7786C25DB408637E18847234F5123B210DA
D86B6517A40DEE954090E79D1B156E50676ADB21574CDC21A4E33DF29F18F74D
04DCBB1C1FF12E5BFED5253156E3A76B45CE9382EAF5125B49D7D326F49D00B1
7CD9434FCD4D15ACF07D05A04B2A36FA46AA5CBD3DD8C1CD5E3E5B2E3195AF5E
F6F7DDD758D466939A23D7A779E813657B78B7EED0FA25EC72DE57358227EB31
144E2AC73FF8B95D9E35C7E32BF8AE25428F43451655B3618A692B32A2F30F00
C12E462897669521918D285BD3281AA4852CA0E64AAAE3705631000B2F0657AC
EA7DA1CF97D66B6A0DC85AE3D04A6A25697B3DAD19756E472D9E694603AD85B3
FC7C8FF6D4D54EA958954C2115A034AAF603EA3ECE763D3397ACFE15F309204F
CF98BF1C00080633DA5B5BFD0D397834DE336D4ADF987CEA2CF16EA47042013C
CB6E0CE90891206BE1C925CB5E9FF1D5CC0912410F15F73A83A344CC86A80ED4
3F84EACBA814034088CDF9F9D241148EBDF565A7448C2AFD005E5C2F4F441A39
9D11328DF9A4483F2B071D9ED9EC60165DE651ECEB4E2A3936EBBDAF21A2B77B
3B62B39E0A3D5F58452B6AD936BCE4E3229B3F7CD25C53EE96B01D541E64E592
F7AB497F246128C351A04109C55313AB787C4F9DFABBE38ED4EDF643FEE696D3
B96E9D54C748FD1B7BAD8441FFD17AB0FDDA84DC197F0D51E28100623BC9E920
F3E18122D9B0F78E928E3B5D838615E18D79E23B34A5F9869DD15187C07058BE
075E7131EF33CE14EF4B9B9904A1E3D69239F7B5CB3504CA65815F00B9D9E25E
0FEA6B6D35EEB4074108EA5E1667640406EA9A29CD39817C71FB4E3ADB8671D5
C79C3E65B5E577CB438EC54686ADB097EA0162023411FAC3FA51FC5A4CA7A973
94CE61440E514A3AB33413FB84F35B3C0016089A6C4D67EA0050A781015BDEB6
7A0F5C70BCD554C23A55968EBA1D4B6247EB1F764E6DC51D99516B2F835306C6
922DE78E9257E0AFA2EF109DEFF8D67CA6426A637238198D9CB0717D846042D6
5714A505FBC2F9E451F67DA341A370F080F66A824C5711F84C3AD53122F87861
EEB3FA7FF4A407766355A1E2BEAECB27AC7A411BAB23A8BB6AF75B2E0903AF6D
630DC6F2532EFBA61D0CE72227D1DBFC47FBEC2A59D9EE46F3336293DC8C26A4
381B06E25699E043E8B1F9ECD7A10532CFF83CC4AA25A63C757D4309D1E6E91B
CBC76BB36487D719CE462FD4A6AD7941A5C203D032118578020F66A9C6B62F15
03B215598F008D3FBF41F5AD714F590226C6DE969AEBAABFC1CB3D5932FDE0FE
6CC0C876B0D072EABAB7EE4E9E8A4338469000FBF31BAE9C1864D168921FD077
43DFD6EFB60251144EF6DEA5F6D5ED1D709A3E55867427C5D16E24A48651DE43
746AF8BA0E5DB8140FD15BA07D19A483BA68DBCB1FCCC5840BE8D55EADFC83F5
1C109C667285E6DF353D141668D361EB443BF34104091A0C1E303470EE1E8AAD
274E14259A48571AD68A65D9ED512D024828F35A805DC0E555CAA49C4FAAC5C4
BBC9925B98CC9178F1C644D40CE07A4E70B37A6A1EC2541B1B248C6E80E61771
0086A3583F6CE4CEA059615777C4CDA67FEFB85950DF860D9F8F476DC3BCD287
BD357370990FCF7E64D44D11E68D9956CF5FC080FBD8D4618050D0248E9B341F
221AB3744E7422762428D4F36F0C8F4ADC49A1F8F40F33C53666E35F60BF94F1
0C28976ADBB674BC51833FD726D168E25ECB05552D07896534AD7BCA233A7D21
FDCC48F92986F512BA50B384757CDC3F750A55BBBAC8AAEE632092CF95DBE49E
4A6AA5B52709A8FBA2E4C924C0DA8E4692793C76EE852DC29BBFD9378D8E8982
75EEB2B9BB17486D50F90F820B317A996878BA057984BCF056A9D38B3AEFB10C
0BF854F520D57119A0D31F9156538C90D4781DCFDBF47174495D57A3C3214235
AD16A3FE188CDB03A2E99114295D078430219643760B05EDEE87BB5F180D6E39
62A5C8361E28C44CC7760546ACF894743F13D0DBF19AFFA9659697A6FAE9FD18
4FDAEE2BB532708738312865C1F737A68E65035E63CCE8F4B450CB5D21097D72
90777354D146E8BE26B3297B75E73D446B752513918E6AFF3A56AE8E61291E2C
87EE328FEB0692AA736F0423A58D5E157C136E3B74037946A4396917684E2857
9F7C1380DC848FFDACF1A6A2DCE39EE20B959667E8E8BC18DAE2CEEA81D5F80C
7FE1875DFE85A8EE682F45AF2C2372D42EA0ACA4CD795591123900F1EACF0056
E7FA26FC0900215EC34D0BDA6BDD5326FE66ECCCCC22EE7C96F8662BF0EAFE9A
D88A249022801F1DF2A69888D9EB3B56C45645D085918B35831FDF215FDB24AF
6090A62E078D15C8E77786830A1AA4017115CBA8F4CE7DA9E7A942D874C383FD
D7C2DA22B9CF2228D7FE67E63F80DBEC4BDA93D5F6E40D8926CE710B5857B87D
FCF85D95A91E938B80FFA7BE37E8A4A621D08846ADE751956AF6389A79CF7987
A54B49A45525603F5B89495C2A872A3218D4E925D9BB9F614AB503A14B386816
D030079F71CC4C3CD746D898ACA992119586692518858C45030D6A529D20C64C
41B6BD1F16D657CE8F6405AAF7B532647689F1F2136657C025AD24664C9A250D
21ADF8079B77685637DD988151C61409D1448212FADCD4673958D4D4F1CB3CD4
D6AE55A5C48AF26AC8013015CF0B915E39263AA9F03B21C1F45C87C2CCB12B5E
0C13106DE9470F037FDD15E6113A181DCB5104577F63066F93A2C3D785EF35C1
37E1F5A9C030CBEA889B4743E548DAF26B69FF8D6977A0446F6FA88A5971DA9C
4C781D51AEEC690CF237B5C9AA6C81744861352351811FFA1B07C5A04E5C5434
D732318AE791EDC71A47F2AB39A55D98E182823F680606DDBCC23EF879FE4006
982A696BA4938E9E6099DBEBFC449D714658C7DCFC64990E4DBD9F1895C6D812
D54F0BDEB4BF318AA500918D930F4A3CB3E73C769A2E9637A1924EECCB7FC391
AACF2B06AFDF2A5060EFE5FCE7DCE754E95B1B108FFD900B65C9BF7C84CA9E9B
59AD0D6E9AFAA51EF6C23A5929AF1B3FC5D973408F12F02CB8EDDF6CE870E720
C4A65C7AAFF1AAB5EB6BBB58BE6AD339C572D0B9CB60F3DF74DE4323899C637C
C86D15F14C4B08FC9AAF420CCF146994842B91A9AEBF21A6B5EB84E7D0850954
AAFE86C5A3A4BEB17C11463A393EF2F9C04C700FBB29DF2FB5DE9DF8545C3BA1
82014CF26B393DDCF887B705F6FF3F9EF5007D6DCB2A974E04CDD34141696BAE
8F8DE783231B6199BF01F74A6CD04E80FE8CE8FC240F3323EA950F9D99D8CF40
F075F70A8BB95BF5C290E4843DCE2EB53F27E3CCF025DA1D89448C6CEA3141AB
D2913C1D14C6D345939A6D5F8AF115AD6BFCEB369124A410B3CF88A30C747871
0B4F4022EC7F9F22AD4A42BE9C33BE0390EED0A63AFEC3516B02EEC172C4B22C
68FD70E972EE164F6BD2127F47880DC9D6FC7D9011A8DE68CCAE80B0FFF87E51
4ABCF5B87853A39056EE444F24A7256E1A20BB902AA55B520FBE8CCB7360F575
58C1A66144F836F8EC13A5A32A91CDD341E13F829FD721111B76580BC4A776DD
86B46D526B0F88F5D96F78CB5660A12C174AF75DF1CDE0A18C94817F54639ABF
18D5FC1F918CF632FAC74FB90060ADE4AD3717E0B88211B2BE593501EB2A7935
F77941C55EAF6C6860FE832725C58F4BD57D5AB36EE002567D486CA080139DB4
9E21A29C10FC7E2D2A25DBBC9A1CFB97FDD9418704F4A9F56AF893982DDC8629
4D55F8E60631A2132B0D7E412B81D64C6FBED324EA5FD4337E49CA2BA0498B0F
5764DE9B2222F92726D215EB37EE134DBBD239D9DC5B7EC36B9CD8A4A2BCAFDF
92EE50089F30F3C4ADE4D307305271D998208D241892453F5050DEA499563C86
523C08C94F417CA515F14C81EC6D3E8D09061E486AF7AAC9D9E2A7DF304A5DAE
F6ACC5EB9A1288148F10FD983A30CE48C203957BD600A77CEAF1040455744A2F
1AFB4ECDCC3BA85A857933CB03955E102B6EE7B37D178BD4F446E4D329F96224
8790D08734277E0B5E3455AB13869B502C9586CE5BDD0B6E9EF1101EAC06580B
7892B191F52A6E339EC90324A6622D0F23282E63CE45DF7361876A760A4D5A7D
58A46954C305A1F2136AC74542B942B0A4077A8CBF348028F9AC13394951828F
C9A6884CE957FE1896FE7984FEBBCD32D7E6EF3DE0313AE234D589B2074C264C
5D2E659D0F4B9B7BE0BE197A893B6818DD0CDAAAD67F1C43F8454EA7BABEA8C3
C4B55FB42D5A4BB5A14E1217960A56E41FB7F566D32F17BF59FED023089B7319
8CB56F38BACF5044D989BCAECCB52024E6F0C83089B39ABF01C9BDA302A7C5CB
636C5AD6C1EFD108277C1B6C547F34B4092E027CDB9142F80316058CB6FE2052
561C22720C0C887CA28ED2418756DB326FDFB224F732D3078B1B3929C500A301
D0A66A59C386D2B19163FAD9C80028810E1C87E025FDA71FDBDD5928EA3DECC5
CF8BC3C2C454F9E31C71A08EF5FF10CB8DACBE7AC4B2E75614FBF82E869039B5
673F1930BE95755CE002BABD134D78FFD40BCF3CFD3E5E9EE6BAAB8867C0C35B
0E9156C4B91881C47C4A16C66B0D46C0A52511DA28AEF946F3A58A92571AC7FF
8166144A602FAE78B968D1B8C6C9022814F58A69A8643A1655DF6C848C3B02C0
4943C78DB12F3951CA19DCE0F3992DCE431A289C14034157D57D5C5D6110DA76
A2BE32CC58D40F3CCA1BD956A7F62E616642225A5AD8C4FBEB07FE262D75AA09
3A73EEEB4D0EAD193A55D17766E680F2D445758324D4264B3759A87813157D0F
0ADBEC739208D41C02C71A920C9DCD373F0690DD2DDCC634D3D634D7CC061951
16DFE7AC820F43D266B9B4E40E5BCC6F9D38A98AEC711A55C6C0DFAD611338DF
879046140A7321DAE9492A006E84D21EDD3D60108F5DCEDFA01A8BDE3627F4C0
D0549930A964A2BBE03BB9702212C1AFBA2DD0A8AA9C1A8236EA8E1A89E537BB
558C59E5F15A39897CC447F9B24BC29FF47AD7B3ABA0EC3BEE0FA0BBE12C963D
495490F7D4F3C059CECBFBF7F20EC5431691AB84C4CE5C7C1E25C98E92979341
A8857C6032426D3A1369C68F60F3C8EE3A7AE59C665CD642F51EF1EBA3461739
550A8ACBCC9D71A8B51C803FEC81A76D1ADF92AFF7204C8F68276EAD9BD57567
6466A280B5A0EDB695DBAE92136F6A7719DCD2A9FAAFD57C7ADC8703F0E5F3EC
7D9E93A728711DD00B4648DB1347F42BAC73E40CD5B38E81DF6B37608043C88E
4066CEA814469DA421FCC85EA632F544082BBDC9B77C55B4D4E68066D9B85B61
07B20EDE98DA5E4D2BC78E7946ECE62EC4A2B4D21F2CA54442AE3B48EC4354A7
647FE3B1F974170B733ED9E4FDC226DE0295CA9530FC9AEA941B552C93C18E41
E627CCDF3F498CA25084B8F3F8F2614882C88512C1729002241F5B08F85490E5
C45D2E2FF32B18EE5C2AA56A4932BC59F31BEDCDB789DB82221D6B8988052A02
4415D7826780E13FB469F58292292680AE74E926ABFE77774714DB8C1519922B
A5841AF5ACDCB7E102C942C99E5E58EB63AB2045E59E4CFC48893F77F9B016E0
6CF6EEF5F271475C6453EF0CA429BF4373EC6E22EB6BCCC477C9C7EB7622FA3E
A58AF99F5DDDF2561D97638B8A4993D34A1E767264E04450BB7006B4F65699D9
E45E323C65C3D953D33B634B115F653A26842C9832772C15EB82E86734FF9C26
9FA1D202077B05A079E7C728D8AE95BA9B6113D7D60CBA4BB5C191DA9EA3C171
1253704DEC246CBED9C8527FEE12DB0E65F1E3966E182433B405FD0DDC423BBD
C1A7A87D5A0258CE2084F898D7DDC519A39FC7A296718FAE4750A5EF205730A0
99200013EB2EBD50F06AB8EC6C376DE69992301BE533739ABD8852D5378E48DF
FBC68DFFA56E486AF3ED9EE1D3B4A47E26C446E0B8F2BECEC0A03E9F62C5FEED
1FCD70B4A6855EB47F9B316B43033E0887C16061A03BB006F5A288F5F12C04F4
9808AE502CC0A034E4C1CE180A756A270B1E453DD546ED7366E60DD5BFB0418A
0E4E57B13B956E26191B12F8E56F02C1F6FB52CB79E494464447C41600901470
C1A368D1E366436F24CEA23034877F5B8407CA4D60EF23865F75EF689F032977
09F90704DA1CA6F5B43B2FFFA927B9976CC897417FD21850C81E31DC424E008D
3648C230C8DAE6E410E16CDE32B98721AAC2F00DF496288F46F21FC15112897E
DC2C1CEBA3DB1E042443B665E915991D932209B3F4CAC145D576562031411962
9F3C11947884D1E3DD1A897241348CF215ECA53E73C0C347A0C47DE886A1E1F7
8EE41175F4E1DAEF68329D5CAE9EFCFF9CBD88553A5DCAC970987985ADFB8907
49BD3ABA397C3A2A1A10E546856F000384457302EA142903E9DC875FF4E9AB82
B5698E310F3F551D586FAE57AEB962FA815DED693AAD1B25349EC43DA3811A83
F1E546C0CB164AB7E1A9FAD85863CEC1B6C58479A1DDB40393AD8FB19F5603A3
9BBE63FA0DF79946504B5DD7292B4C730C54CFC343FC3939C6F0872C28108F7E
4893C1E43C84313C95EFC4EC9085EF36EEC5ADAC118B4117710A761B2D72AB13
6AF3C7B2FA5197F6C30C97D68E7AEF9DB598A30FFA6727E2193BEBEE9050B2C0
92B1175F139CCD692C12AFF154F91AF6647BAFD829244AF2BC290824B10C3779
A1D30401889C7B6E99D5EDBE2499BF00635605984A34F5C2E7131BCC5C2E719A
CAFAFB14A938263B3881CB742A6B046044C2555FCAD7E326D972090C12718A2C
C91AD8D259C090AB727F6A3F7C7EBE4EFA3D8010E994BBB4DBBFE13B37FEBD5B
1DFF3EABED38C035F0E2CA059BAB2CA579261DF4422543AAE361AB984D30B39D
5802420903D879C3E9F161DC5B92B760044D41C842816A59F024B8BF7B58334F
98D78901B2EE7D582D640F8E3949256159D127224F9DAB4671298B251247B5A5
0EA4C439F9AFFC28C6684C1D94C34D958CC6513CE06BEB151E771CE3D85A58AE
48B09B6DE42D88B0BF01380B8364E61DB23032736B224A9B0C456200949A0173
0B02B696AEE312CB054E84BD3442D366CC01BEDD930B207CEAFA7F48E7D337FE
C7836AB3E337D1905331FC51820C9C23D80E4614DB94C9D754C36E160AF9CECF
5AEC60709AB329E4D0744DC2F3EF68DE59428D533DB0EDA646ECA3DAE616C2BF
0B27F6E7217DE4104FE0A01840CD69EFB369B36DE8FF52B2FB7CD725AD8E9D55
35B4916D5A0986BF2EFD5FC2162ABC444F9668DC24F86337F88C41B0FEEE9B29
F90765C554219A606ADBFCE4FCB74F491945C6DC7A50CE63C9BD96C914FD964D
66A9361B76B59E77119E591868AA46CD11656333BE6D6F23795550FB9C592FC1
DE8D0DAF510C5EF83D1C082F1869429B0A2626B6321F9B1E2C6389787DF69C8F
4A7585B89A4D0D88C44B0FBEE28181CF84A31EB19D18E5691781D029CDDD348F
EAFA5A0766771EF3A74EFE4492AC0F942F2E60E1953536AB81B2E45EF4A212D3
FA7A1F3D5558C43EB70348E94CF762927CFCCCD88665E98C1BC618595736444C
EBD8812921A8D790C2A2F66AA66FC814D30A746FE6F4FD68DB7EB4C18A9A7997
E2E16D0431D1899A47E6E69EDB17BC08CA1B092D4F20BE1AA763786E32E5C129
BFF10F485B8221483C2AD47B0ACA1FC90F63A53996AFE9580C5338EC127B9D91
0ED59D59AD0E0A5AB5332867D2027B198F10D6CE739F819D0063777CFAE13BD3
7E99D8D07B2B98AFC291295E54D9575FA52D92E22F2979332DFDBAC8235B7A07
AB6EA7623204EF31220B8A92BBE5306C4B6FDD3FFDF715BAD21C5178FBCD712E
C46352ED1B976706A6AE560AD6A82C3B0D1A0C1B1EFE2961140479458987FFE4
4E8010F5D4D89E2D8F87B3B8DF640A796F4BE9068BE20BDE45E6C67C0FADF9BC
511CAB6DABDC2EC9F4D778E7384A27AE6A8DDC59877A30CB9800A890813A2F36
AA7254E72150CE7458840B7ABF905A86E2C6C10C1694F3526F0BBE8E4F5D2B92
6A50EEE9BFBE93365ECD78449B61DC92F358DFDD1D97F6E73FCDAF8BD20876DF
126296187D1364EB31556E83CF599D05340C6A561DF3A56C054235CB5A713FDF
76D989A89B6E813D9223A95FEC0D35641FEE00260B500829D5402813197CF8F5
95F1555AAA669C28B477CE801EFF47B5A6B6E1AF4FB0AB0CE7F517E28F67D1FC
7629668C7DE701AC15FA42F2F264CE7F6AB1E98B37C50A1020AAF16348509F62
171D26FB81F609EBB3AB4CA8A2C00F02D71549DE0849C7F3722A2E41B4F6044A
14BAC70A04CCB4C093854AC741B5D7BB35B6AE08F0436A6A64F8BFE75DE0BE2B
368F46AE001303C0A8AC16718FF465FE7C2844BF832E4D54880BAF264A443188
410A24D8175CAF404032DF21CBA457DB65770C16EA31CFF99E4A9932700C0D7D
36755706C2751B3FA5FD95D94B09465F2161F6EC1BEAFBCFDD9C8B335E025A19
848C2AA2D92FBE443764E6A62177C66ACAAA20500A09579E6499E2610C564183
F2641C90D3BC9C9C20473D6FAEBE75DCB093CF8AC1F7D725BCFE2C8B959976E9
C8560FED00219E4BF36A724D7F414849B63D419F4B45BB0314872613A822104B
A2EC72F0C22C0236C3DCCCD0C800997CCDDC5E8084DFFCBAADFE1AF8356BCEEE
BDF0605A719EDA2CA8C0EB98038D0ED98EF8676427D7751640ABFCB806EF9E81
7831A4F3FAB31D67F0D6371CE3DE837BB767216538F5C9874CF2A69E800958B0
297376262EE003C7DEAD63620945B22BC73737C3350C83B7284C1FAE2C11B9D5
B7A5DB78BD0BD78C97949EAB8569BDA184E9D00BCEB5345709E0843D17534DDB
E4703D69AA77497B22D88FB097ED9F1E31EC69362F6A3C49786123588E6C8E0B
5E98B27A93C71B41E6B69E6AB2844EE7762579EE0E65314F930234B86EEEFDB1
3E1ACFECCA4B730B4F352793F6E838F14A245A55007B7865DF7FA065780BC86E
79A1B774C302ED447A5F1D5D643E01ACF498BE9414B41C9A59ABD50D4814D9DD
CC1B7D66974DB00809A9A3AC73D3E7B5FAEFC540FA499A4E289A48BAF1AA451D
2D53782FE6FB7A928DF0CD388ED138D9BB4480ABCFA0B54EB99FDFDB4E0A76BB
8581CB84D0AAA38E1B03E56F779FBEC972E383758D612268B74D839D558115A2
DEBF8CDAAF3BBEDB05DE5BCB73C7BDB04B58C348C4421CD919741ECA9308D44A
93D148900E639C474B4DAB0687C2E3254A4529520AA0E828A1025966B0323E9A
1A8A878B5E21214B74B15C762ED20C05EF9F3CE1AADE1B4F85C195EF97BA4A05
709B99A7F47DBD2AC46DEF2A1566D36ECD7BE2ECDA1C56407A554EDE8CB0A688
E7E4263866CD683D9E2833DDF7F0F8E5B487EDC7D83F1066154A874EE1812B3F
153EF6A94A8FB99389473C15C3A757B955E78C723AF0006FC35051881AC879D6
FACBC3E324A8EC04254236B88E80C4653E80F24345D5E739CB7D5B6CDEE2FA89
E894B8BE09C0940B8F9D3902905686130329D236480FB52A8804790A03D98CFC
064B649842C8EFC7CEA6075FE46AB5DAA8B2365B94C73C55521869B5137866B0
716A37761FC5D82A2F84F7370ADDD1C99DB7683A1088BFAC63980C768540A8BB
14D390F350DA0CEBF7927D5E2A7CF0FBFD1103DCF36D894D9F3231B8E35DA45D
E92B5FA8E77F3241AD5C9CDDCA615CF63B7F5EBB84447B363874BE6F51C42FB9
B6A9C4362429C2FBCD39A24463D3E0AD638E902E175AD3FD3DEDD4C85EE52173
79DB414EF33D9EA624858251438F05B3EA1F686B35F0072DCABF52B0898EC770
FD350CB7A63316DFB790028544CCDCEF246D7F67E6115D45759B4ED416899EDA
3FAD039B3A378098088CAEAB0975329109C6A52C4D512B80752200BAA2223CB0
0F8596FCDCD85BDAB9EDEE5A57CEEDF7D8FFC0B38D15D2EE807CF574D5CAE264
46BE700A33C0055740E0932E55C42CCAA23DE753C7B05268ACB4D8529212CD44
73D22D633CFAF4907DDE965A3959752BED492B8DC2BE2AAC7E8D1F0D615CBD7F
3E302E4430D8AF79983D51707A4D8D3809A6BD6549A52A6AE38C80AFB8C867AF
2D6DCDB70C2513F3E8A5A080D9ECE69F8E6598B835A0B93886BD967940696E55
B08B672A1198A969E63C67EAB9C8C32F7B58D743FAA09D61785165234195B9E7
6C94149A3F1B3673EF99111BABBBEDB83B50CB2D6E44036DA3DE4A6D1327FBFA
2B95ECCF029A6B18A512D30CEB0B6ADF80FBDADF39DCD0C86F718C6C635A0204
8DEB6A82E53214FAABF567B339693C37800066259F265984D499C146289796C3
FC04DADAF780F833774D5A12D615A95494D172AB98284A6F868D9A6F9B9AF931
3EA573A67B21D64A361CDC50F0E3789B23C32C98A79CDDDE01C2CCAEC45A0EE1
B523976D030888E2A066F4D28E55D02C0E2FCC829A1CAA087A14C454EDD954FE
AEB8D3DC4166B43FCB76037521F55250A24E50C945DAA38313E872D9010FD0C3
5C588D3C9ABA07A5C9869454EAFB171D608636FC9AD91DF5364EE1C1C2B9A521
09B864FE34566E717B3A65E58E9D6098E7157B6835A28060ED8A24B20B31F115
0A888E4B305ECE271F555C5DA906B3B538C0212207B3CB6494575BE7C27F44B9
9EBB6713BB8306E5B5A271722ABA70276A7C5E9B160FF1F21DD7F145CDBA1300
0EDFB9BDBBF9D2DCBBCA2009B9BC67129F777CEB99C1BEC6A13835B688B79D56
6F17C754C58BF1775D61115E8B7E9432C43E1101F497F5E4B884F5EA43672526
783A7D6FCC9D816852D5C351BF1456B1AF4BA063CE6B333D2FF4BED9620EF954
7592558767041EE4823E86D2D048330ED45EC3231BED6F014A7B7CE4D18AE141
9122ED14CF25014FC7DA1A9AB3C09DD30928904494416E3DF1D6C9056C46238C
6F9CDB39DD03203129FBC6B353DA579B3FB674863F3E57F890B955358A57A2D4
BC94024D0324AC23DD7438A7FA3B3D360E533A52B2C2508060C27B49AF1E89D6
8BA37B24339190D125E58BCA454CBF078BA4F1C73CFDF561DFD810CBF197D55C
E63F12950167935869EC0E7A6E07AE23F42736A00B539A1B3D810EBDDDDED6C8
1C898F050D215B6555B32B69CB55983BA444F1B6A11A2B9F771F61998ED4A65B
374EE14ABD4D9064245FD0D20797E6267C688490F6CEB331FA03DA5E7C9B6F7D
4D9156673E92C0BBEEFFFB52CFF48DC639DD9A89D4B210ADBC8868F015395E7B
EF91C97ADB86AE079BF5ACD30A86AA97C66EFC62F8CED7E75E4A4C72088A7A79
FF6DBFCC7CDF1FD116EBF582A3D80351CADC60B733E50FA695EA1AB5D2428E43
CEB5C4BDA5A093F493F51B52788B4525A50DC84D5B6F39E58816C7A84839C069
CFBB069C10AF0037648FC91CFFB79D7910F03973685DD97F036BD60D4E316A83
322B02124415DA5CB7FE994C3506E6C02DD94BF19831C5ED609E3E4DFCD5EFA0
8E9868B20F475C9BE97F13BE288931FD635A654243F2DB2D8BFFF3D0D13EE0E1
730F5951F5F4605A66D92A94E8751E9404BA9BE83220B8E3F3D97094ED2C21EC
501C3F055320126651F8DFC958971A0300CD40614484D72FA30DBA036F9049DB
87E07F9157EC143450885FCBAAC540AF3230EEC282E8E3DB1369783A83EE1F04
0861C19B95474217BDB214742B280AEF95FB492D5FEF92E0497A7E2E1627BC84
CBC737D30E9EA0D4849962B182BC52485E8DE3B310E8DE4864B56B115A9F309C
62B2299AF886F2A6805837D5B87A7E3F932B6B55E0AABE2DC8A0F28958C591A0
4B5E38B5070938188B1FCEF36B471EFC1BF86C556FCD164D3D8825351D4E587F
EE6667EDA6AF0524CFE1AD0CF5F14DE7029566695B0449061F3B568A9C7C97AC
BD374A408E0E51C7D3D65F75841A85F608A67602001D21B547BE27F6F81FF57E
44D274A166071D85D21F30FA0C8E8FF75B230623DD99411103ED0670243CD7CF
B345FECC32E48176EF394A19DDF4178F9A75F3504749F206ED797BAA3658B8AD
58435B34B1D7D501B561D3E1812F2C3D3294BFAB55819D89E6E3F5C318A35C09
69011F465FD4483699548992C6522649274648B6D218EE5A97A183022ADC8E75
DD413871CAAB11C9262D553D7CB130A57CE629F307A64B286C02409330317B4F
C830F541532CE0EE578A72B91953C9E8D71DA9064EA03C78343F8C0BEE14497E
290161917C553E3C92EF6EF5B452A9C57BE668367955F6408A0F6951FDECE16D
C97E99984009138939ADCC265C01B8B693840EF15076D542F1B7856738060E58
570A966383AA9F7CE59375525369CA6A559BEF0CA3307C3787BC304E49C27874
E0BDD9B5299035A87E124C4F2E9107BF28D8FA0786B28FAFD19C449E201F2917
0A6F3174D8876188AEE1C0B9BB4BE6F66BCEF2C09E12DC0200F05A5726E516E2
BC07882391D097750AC8A9FDA3BE3DE13EEBA9C102C40045692EE3B52643A0DE
3E63EA4819368DA3D7DA417C906CBA6B4E348BAE8BB73ACAD05B6341507793C2
177CC6EA3092B883926A3D55C017533B7CAF2195E89F96FEAB7D91BE5CA1D913
12BDCA066CB26AF884F5A45A2CD6FFC4E89462512B46719F047A7E78A23BFEFB
A98C3A36936E1F32C6911B3DDF0BA877513E40D609A55A320DAF818B61076C97
B538587334FEF0674EDE3CEE4C9AD15E78C8EB0BA7461ACC865A72BDE112E4FC
3275710B1C5CFC9E95B7334F9B397564CCE4F778CCD702FE2421A7566AF29195
C653FAA93C0FCB605793174CD8FCC760BA051B0D004114699B23A83B2B1FA969
05DB6FA04799E3C1DEBCE99AEA7E08AA43398D3138DD772AF97834F949E9E390
91FE140E11023534C14CE937E8E6D9D3E913D2464F82095A0971E509B3C92C40
E23C5082EF633F1EA518E3C6986CD794BF5C062CF6FC368D03BC64F6FD7664CF
C1B5EAB9F109C36C918EFB2765D93BF8AB5034C7DEE9B9479C71B2DF8F9B51B5
3AAB1AC13FAD789423AD776CD4BE2E825E025BFBBBFA05E430EB61F14717F33D
C9C719B3C63C991EBBFB2B920F53AD8C3FF13C1D57D2FBBB75E592D4DF519608
83545261594ED6F276069D112752C8FE8475DB17CB5BEBA280B349347838A4B7
9FC462E8F9DBC207EDEAA7893CA1381E9054291EFF528CAF803BCD9229CAF529
4F67D484D422DDA928828944EA65992424FF1FCC9672A0A8F0563F84C9F631F5
EADF19ADC4A52035C3B257C0E0EF035A2A154055E7B06095437FEFCE303D23AE
240CF5E107C7BFB5A201236044AA023B4D600D6A202EA8F1C8088B5EBFE49F9F
7D9C0D121DE3EADD1EEE08889EAB8A5840A5783DBA6D24D959DAAC5B82A11E2F
97105003EEA435E01486606BC3FE3D2C43A7B1F50BD8E96F7E1FC6CD4C2CA2D5
933EFF6B7DE5E5D9BCD847931F483EABE957C4B2F686ADFB7275DA19AB46D2D1
786C7695D02EDC8F9A0D2BF48D45C67C4EDED39EAA141DC1C532B08839FAA8DA
1B20A64BBE78A655075EDBB6529C9100B1D878DC25209D2EE111B00986F04850
E36D640242A7F923270AFBDF34A6E5CFAF53CA537C89E49E824E06E3FB59DD7B
691BC5FAE6B1CCE9AD9CFBA87AEF446D032ECC2941C54C50D263F6BE846E9868
871598A7C1F64B8EA95374FA370B98AD86B49DA3A54C2CACF806869AA6C920F7
186234CE7505B432C7035CE0E9EE5DB2C31BA3728A75115794E91D69FFDAE8FB
03E0629C0957F9D50D5CEBA08188A4769F668770924390FA71DA286B7AB3FFCF
100AA55A0D74AD9C73BBF381E97AB5D5124DC4AED6B50356D1D0EB3303F97B66
5A2771F6E22A8E777A41F8B79267D749AFBCF651BE1ED1D7350C7AF22C0A8AA3
E2ACA75E6A5D383E173D95BF2DA1E71CA6B0441427DBFEBD1F9132B8C51F0792
BA092813F73EEFF628BC8F9A3130207B04656C6A054BAEC74ABAA07EA12A7F63
D247DA1FBE36D020F3110148FA57E40A8BE922D502DC08277C1B6C547F341598
0A7FF1ADE903F9F076E30C5B5FDBA7F83BD2216F258893E8BB74CB357380DAE5
E6BCF0A0FA7A5069E7721020ACDE15B7F18F2D96157BD8B0133583E6CA6331C7
8A009F938800E660A9D842BD8F54E4E965C6E3B0B2CFB8909ABAE3F69DF6C217
3659E0106B89849CC37366EA1F95B0F84050431FEE1FC9E27187DEC15CC897C5
D4615E2EF131A72B2FDA6DD3949878DDF09041583623283405E7F508501E8CDD
16961761BA4F46C8C2E73BFA49E3E7B480BE5DCA020B766E6A3B489B69CDA725
02DB1B3C42F201D9D6E387E9C43A867C4FCA195F87BCBB7C4564FB54FC6CDC18
0770554C8DF970EC3B046666C4AFD0D3E05177B43C8DB2B6FEAC584308B56255
6FF3DA6FE31F91C6ECC2BCAE648C60305D7F510A05B9B8E5F686536D81A73FCC
467056D2396FA540A119C5DAC55FEDA13A3BA82A35FFE861FC41844634AAA87D
BFEAD8072AB9811C77B69C3440EFD4BDEAA747E0FA256A192BA2EC75B8F31C1A
52ABD0DDA4CC70C5B17FDDF8600968A300608A20E3CC55BD886BCA50A692B750
E01AE8F253C529BC62A34111B3983CACDE6A49D06BBBB792D13ACD7BAFD5A76C
FE4C0D3FE91CD29A9A7DB490111ED1E6017008CD8CA34E0FFEFF44A0B1CD6434
115EDA6B22AFDEBD918C176C7BAC7FC167A0E5CE18889C5F66A2B01C231999E9
493E21992BAFBE86426FC6B8CCE39A468C732D7412F47F08023AEB81DC5F1365
24A200F8ED59ED2F902EA03AF2FBEA22D61456E974FF635C8FC5597CBCECC3B0
24F96FAAC374C64F35D8744A61441DAD725DDBDFCCC400C1E399F464F2B99C10
F38173C885C5D5EC81B65809360329ACF5B813C24A8DB32506F5AD6BB6063A49
0484EA4953CB6211D946FF97E1B6E500A5D81A503AA8244A278B4D3C7307739E
90E354899D0D2DC8C1C71A67F2A1F46EB68045A2D75631964E159155BDBC78CC
FCEF9A669EA8AF5C48D1ADEA47050A93A9ED85AD222A233E664BDA408FB150B2
3A113EB2A0B0008057D549D3B0AACDF7C91742D551D7321B3A433BC1643C02F7
7C4CC9A5E82B214AA99E1741F699237D060CD1ECFFB34D36BCB83F393B43104F
D0B58642160AAAC54C4FE7FD7242E518EABCB9266AE4AAABAEAAB40A0D0AE04F
CA781F3C47C0A4F9A31AAF141604A7FBBAD963CE82BC44DC8769D478A9C0E643
42118FCF06E64AC1706C6A5F4082B0FC7BE3CC301564F7085292073594E3D8E7
8FAF7343A81E51AFAB8B137A963E720AAB2969831744307F6AE524978F8C6D38
CD221BCC55C376CD8380197A7CB61850BF571AC5D4D743640E5920FA18C40E22
196925754302D466A5F6581BE0376AD2C43B5AAE989528E1770027DE014B1F2C
00C537A79F503BD937C0BF9C0ECB625B902772E49F27AFE2F59A2E8627EAC0C4
C3086AC3E3A0AD7664AE6020D4E8A57FB381EBF4366C8CE21C8C0855BF9D886B
611CC4121CC9E69DB926470C69E7861253C4F8389D86AFA206A5A6FC9D9192B0
3A578FBCCCACC1AFA451BC5128FC06942F07333134DC525C1939E6B09B258DFA
9DFEFEE8B235F76695967A3AFC331EB98D7F964D40B6AA41691A5B25C3928588
656B5B69AEDCA50BCD327AB6BA7CFDC4A9D262A3188F1DAFE898C82CA2F3032A
2DF613FF5D0D58BF77AF454E2327F5790DC41282B05E3DF2329B7C9B5AA1B18E
F4517870CDDEE0ADA4D9A1CF334773FC74B332F951B18B5D21917806E901FD2B
00771E39FA322C2668C39B5662876CD2EA53009B292BF13E53C342018F82DA88
6D00739ACD93D62440301398564E2A20BD7E4ED07B43B62E89C4ADE77A1B09A5
2DA497D161D65A11FC6D50AE1D7B689E4D0D01C5307D2C4FC516BFB0E86AEEB9
7C9509C9294C86FA380456A9F76B1CBB0DB3298B55E01263F8A2DFEE32296426
BD6567F782DC8D02D23C868C19D10C4A2E327989A7808B535D099878B8423752
F9E229F3F8AAAB0C79F1F47E99B417D1397F0129B91F111DD557D7106A9F14E1
A6E48DB136D45CC7CF49728886E9A83F7817D3BA0E2BB98D19F039148814DF69
E3F07864E7C2CE0D74D69F04847D552711E74901BAAF8376193AB1042803598F
218C5EF4F1CA8BF0B3FA0DA5F24204B024547D9A380E4B722466355882BF4177
D5462DBDC99296A878AF8429C0E8465BE5719BFF136623492A4BCB081CEB359F
269C4126D6B2CC3600F77A24DB09715D2661AFA36973F0D609DCB68A19C5BF44
9CA64DE0C93E8F0409105B0219A49723352C157E238E509D2CD0B199508C8E3D
DC6F9D2E2848A12849C93C85FDAADCB7103C432EDAEC1800544E61B081388C83
2A338328025838DEDC4FC1E20A83DFAED4E0ED08E4F6A22D9F2B0C4BB4F66666
279FE66BE2FBC28BEA7CA1D56E4A1FB59BA801D75428F3D80676C17FFDAF971A
158848E809DAB39DDF7524FDE58D49483C48EBD965342E1AAD38F39EBCF1D254
856AA9E836E8DE6B55CDA4E658B2568880D62243606652CF56535AB51884EC83
E8806F26C65F18F2F8549CC79BBC8863D02E7CBB7C76DD26E2EB2BF59648F9D0
8D22BAFE1AFBDC18AA850BF5D3D34C1EBAF76FB2A45A790D983063A6E37D9D8A
850F16404A00402D9B3B2A480C367523D4D92FD96B367C35B39A61EB6C4F0BD3
A5D0B6A6512499A2A51CDD41CC9B2895CA4C1C62678E04AD0508414E4318AE17
082F815F9DDCE0EC1CAE5B722FC5756637CB3300A7F90134C8AF696C222D32AA
5FDE3BF150533C1B2E0EF3C9F555B914D597D45C6E71A3655CFFFABDAC0056D2
6E3EA85A075F036946FD5E2EBA50AE2B5647CB5CD00E2A43601A13406E04D4D4
29CD84052672CA40AB6E75F81F8DDD1C05BDAE5CC4857D7786988ACD1C34BF60
7389C6EEDC9E5113374B68132A3057D2311DDA8A4EDE2AFD14D6138A89DC0257
61AC2ADB758F0DCE74359115185048D810566A77A06243D8375ED0FA51620A7A
BD6C854317FC7EA8827DABD5A26C1EA200F33F424DA1C77FEC788010A5C9E707
C9F474F46C7238DBC39DC832ACE7D6BE7168B3867E8B8AEBCE08A69F65F969F7
20777EDE8FE73EEA95A09C7B64F4E72CB48D44A08782661BC417AE4E95260CC3
423FD37E586D416C98DB002D0EAB068FDA9D4EE5A66340D6693112E17476602F
3DEDB85C1BAE6E986E56DCEA02E4D9E2223648DF125F9D651787FDE862E1067D
5C12BD17FE03C2E145A0CB7C5571DF67A614A4AD9ACE64DFEFB3C8C103C00982
94274FC26497F43ED3C53B499C7DC3E4CDC29592F4BFD05C5AB5CBDF49122410
2E621748A4C8069E1B8E41649B9048499F713C81B64EFBFAC4E5EC1F4664F063
904A520020FADF362771A136700139BD2029D071CFDA14216A86FFC8552D2186
6AF2DAEA473C6E028D62D173421FAB42A14006D55AFE8F10C3B8743F356D8C3F
F8BCDF919E2842E0AC5D9D074E34E609F17D76AB91E507743975BD7A633CE7D9
BD5477BC422C79DDBEAC1108E6633B156AB2FC8D7990904FD5F36EE0AB4395C2
6502D210D114FB02E7DB98DD79501F79BD9A9D5E23377918BED20C814957E6A4
9E82BAC12A8852F15F4CE6C129D87DF93C8ED5DD2BF5B0F01D12FC679E6A551E
4F4A5EB633CEEC12BD529C3D812745825DDBCE3BF88C079F9F92AC9EDD79CC8A
834C5DA72F6A3BF7729DF2F4DDF0413214386BD0A9276FCB6A1AADA6DAFE78DF
A8205CD006D950D314E820CD17521208EB8A7278247B2F28207E5452F72BA787
65082B58D7829046F1FD661720BD672AA25B4969875A9416058F2F76E4D615EB
F5AC9A85E279C1F86F5AB93837354A7AAEC3DA42570AE788F93A98065365C267
603D36D6AF985B2948300337BC420AC8D598E7B42377EBCE412B8CB1DE4E20E3
3F1B7ADB256ED796AD65EEE0ECC953723ABB3E1E55F8EA7EB85A1FD4D40518C2
2909E89543E23DFDA51D40DD9B52137C77EF9C1377F6B6EB7E2C2DE7B857B8DA
54395A3934AE8456A2FDB269928EE5CACF4C3FF495F0D3D3190E27529C9B6B9B
06A66F2D181C26EA86856F79A5849BFEF85A06685B7AF7ACFF6E79EB4E13948B
2A22EF62BB2A05C077778E7936B8190ED033764C0CB1A925F8C072A6557666AC
0F4A7DB3BF5E69DDE72B7679DCDCB0D717139A3A7703949481F7FD45F760EDB3
7B49AA0B771CC3E6C893EF8E23281E508AE84F4B095C6B8D4C12CCC164BB7856
32FCA75971DF3F07445B5C9860532EE83FAE3438820FC0F2C0D0F0FBDBBEB26E
95843E597D10E1EFF951AD05FD314E0991761DF71485B6C472D995615BE9354B
849EACF6F6F9C003D0BB57A7B3AA0B5B6C0F2308A0E1FE1936A490CDE1643842
959F8AE151A5DAFDBD9A1675B22145E225CD082916EBCE5025D4DC8FE44489F4
89CFED82DC1D8247A2343A68738AD974DEA9DB7A7BE36748750914D012D597A4
278C645F876AFFD7BA55558C4D8DA51D1A844417
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFB8DD9B92CCD508A09171BC12C8ACA32FECEB20
7CAA1C2C81ED075E3EA7E712D95FC612CF97F3402658E90924C75CA278243C52
D4E02E8224F197E555143D563819EB1ADD2248C18E02E18FE3DCF624E37ED993
3C7DAB05959E694040B7EF5F92D80AEAC2CF58EC01BD61D7CB962C4EA678C5C0
62593DE423E11AF90918CFC6E1E8F9DA428296FF0C92CA794AFBE2067C46264E
EEB0AB0FBF2EDA1A8420EF654A1D4E0A295D1DFECBE39D9FF712C85C748311C9
CB8695716F72FD4F80E77DFD7E01E9FB8CB1F2B5971940EE4E7B14727B086F27
E43E6E3EA6EF0DE68E17C9C0F050085274ADB56BAAF193211E48D1B82FE44A59
2A9F5FB13EACEB54AA027C1B87380F9EEF9D500DC327702B132335FF288ADF62
578F30CDCCCF826E4C4CB57B5D5B537BD2FF89086BD0C4CAE557ED66306DF3F5
BA9D1007C869E8594D4138161162682A719FFCB1A982A5CE8765E2681E64B8D8
4A7CD7504E58CB81D0EF03A3EEA97D43741F54987AD65FA54A1BD682F7EFED16
D35D034F1AA5CD4EB628353F1FFEBD0CEB905F10C183245F1B733C17D3B854D5
3BA686CF4088BC6C0FADF9A6C05BE3499567E930F710682B8954108AB7B126D8
255F1A0F1BD08158F94077D191F62DD73838E0CDBC99204AA6AD1309BC5668A2
A524C6D1C68B4E416B248A6FE29A67DCF4E1CBFCE603260A277AEB7F75627333
3E84F341637A1BDB292EADD055C97A12CF0B915E39263AA9F03B21C1F45C87C2
CCB12B59066B6DA2CA24E020A0FDDCC0498D74594AE3ACB0EB4CE7727EA32222
07E864C7F39773638E3BD2FDDA11C79177AD0A23CFB7F631E00CC979AD410F81
3119C0543E091E4820C12FE47E3154789E02FE363C319139350F014FE8A785A3
F66FFAB8D8C9E7E26E49BE5FE558491D1A57B150A5B386F7ECCC0EE8E31695A3
36BCC7BB9F7FB26DA3444238CC33E2791CABC1DCD0BFC3372E1DE72D93AFD1C8
E2635A5E428AB33E24E81346D13A9377EBEFC6206D372675CF43235722B50C78
8C4A02867C68BD8E5FE9A45653BBAF2A5DCA560DB5BEE7054FB8B0A13AB598BB
C481A3240450D1453A1CC1054A06B962B7E28A73BE0B2713DFD32DEABA293EEE
AAA8C0409564BB1ECD1249588C18D01D8AD4E0F0032FD811ADF35B869BB210E4
4A57178893AF229268DC5375F01AB676E600823FEC28C30D2208A868EC0D01B1
4845736F9DEE02D06634547729442ECDC50C90989CC881C3D8E85B76FBB10040
F0DADEE5ACBDBB43307A30FDEEE5F77E621B130E4B824CE23100BC08DC65BDA3
46307E3BD497D7F1E2F51B557FEB6AA32E84F5E55E5C12A81B73F370431F3842
A1B0CAFD4ECE7F0DC8E2A6D644CA8735A4E96445BA9CEBB627718F858DC051E4
3963ACD7E7868CAA4488EE815D40E28CA54C83221810546F0009F98531353C9A
8EBFE7DB9C9A120C2A4E2FED0E63F90B8DF65026707BD39B489E54425A5ED877
73C6B3A8ABC8ABB13ECC3B249F1878A8F76D59596C63BCB936321589906AB242
14F3C046A1F210FE287A8192CBA7D2A89BBE7A7B2DB6B1E19224F04262D6403E
3B41787E1449587E28093E66A9837BB94195E3A4A5C17DE6823755F59BB9E3A0
52F69C7808FB657D9270933D8B167D2575CF146336BB1C76735BE5CAAAEDBE98
C69F89E7E71474CFC7515F73F86727442EC24D46F92C99498946CAB6DED8F5DF
0540063DEC2EF3F83AAAA3F4F68A8E892C3D0529A466C6A310A6101223949B01
79CF7DE6B550657C91BF3116EE7F85B0178B3227810D99B48361133B54A6DFDC
872745DD45766283944D7293D6FB1B42BCDDF2F241AB267897BFABA39D0F2725
E0DBA7C8CE305DE7C1B59DC2184872FB99578B809358856E4E99B28E138E2DB5
85CDCCFBF2B46F01012CC94E2FB30C1E4411918E892630F2AD07EFF1919E9BA9
0194E24A69649F0DFD0046D2EED7AF90313E70594EB5C354023BFA07912408F1
72E39AFA29111A71BCFDDA20BCD6006B0309EF09261B7AE1C67BDE0D385104C7
C0730BEF94DF3D9BB2161C7346FAB11805152716480C0984BA13A8433ADBD629
229C446AF84A690F56A09A84EBB1CED5515C36F2798A89689BED966ADC9AC306
D01B6E24DBB2CFFBEF205FC921305B45B1B8FFDE2A09CF6301F485C8B7DC2E56
82DCE3042DC9767C407C0DB4D0FD1A4881A34FA0EEE7810D69F2428045CD609E
23CE37791362950FB435D1899A47E6E69EDB17BC08CA1B092D4F20BE1AA6BC4A
9DEAAB1B74EEB7B908245CDDB7A093C1AA307DECFFE53A1FE54984DB1360E320
862F2CA6E0258507C6D3DC1DB94102FB88F631211557D3A4F79A8E5FDE69B1F8
4E9FB2EDBFB4B8853524F58D4E1EB98EEBEF1B6C2D330B1CFC47ADE896255DE1
FFA8CC1A09D26342E89B9A39149E124C564C5251F613393060892D5A51B78BEB
3E44B78C50316C61B6FE484CE582EB7FBDC53D9427FE267051934E366F7C7B2C
ABD2C65921B5520C6F70C1B6E7AF8E11BA4798C1DD2EB7D4F962028061B71099
8E5EAE433D8A82CFB15547B339AF376E9341FEB9433AF21E8D84C50F75043419
1ECF16684180B65D9CD4C8CDC57A0BBC0598B3AB03652A6AA459894E119B5356
CED765F73F6935478D5133B9E761430A39CAB0DC109B02A80626A9ACD7856ECE
4D6569F5D1D918A30005C31F177816336B74AF8B9931BEC0CAC75380C714BFB1
BC100B05D19D7BCFB18CDAFB0310935E6C7EAC6B9A8134C4E8F4969C9268F7A2
C306146CEC5039310EF1F4ACEA1A40014BA27BD58490D24B7885E4084932266C
621A42B8A3139CE953DFA9687BC439A31644BF123DA78DD615C4287ED7DD43B6
79CAF0EB2F9F428C431683A41C2C61A429E3DC0D87D76AB6294CF8CC9918A6A4
6873A1769ACCF25B59CB4365AC451FE1D956E1254970C706438805E25284C7CA
AE679F2B7C58BE9909CBFCD273EF5617183CFA64757627D2D567877FDDED97FD
7C9E73DE4D6D4ED370EFAAB4E52F30E55B902ACC35DE87E70DE8EDFE7D803CB9
B4F8D58998C2ED6B93CF62F8E991B754899CE46B900DC93C5A58EADB30BCFFA3
A71EF23D13FDAFE72642854A3340E64896CC6DEA0F7E3AF4C39EE4E68AA31889
A372F02266FE65ABCDAA308258FCDDD13DCBB18E462B56F956B94CE97E870122
A0A46CCFD6B4158BE06C768C73F0377CE3F21E030748189C553B9F62C83765B0
149330C96EC3496F9F2F9B289307D7E0C33BCB7023200FC3221F12B5FDE01011
87BBF9960E56CAA899438C90156BBF2B14596F131B71830D84172E7CD7C05B25
85A53C7CB0DA5729FD6CA218A1CB03FCB945FC24376A45F2DE0C21378769921A
72E46589CC08EA87EECFDF36B819B07306C448777163A723A9E71F504DA5D447
AFE8CFDBD88089FA4802F449B477BE528C3667F06EC5479B0824B87C47EEAF1A
0A23941B8257A2A5EC3F63FD62DD09890F4DF33AA1E70376A9CE8E4B6C4211CB
FCF9709AA29144F3A40001AB98BE816619AC543753969AC5B540ED39E51F5869
98342686761A7C070EA75140331D7A0DD5731F0E395A6CB0412028C2FABE2E9D
C3B57F412A5CC05FA7599948E6B8B50BCF16EF9825F6B20090E4D6280C528375
4EBCB42B38B7ED6634AFE0B2C249699E212509817638845B5604BB526053ACC5
C0FF6206B2953C9350E57657B374600DA75FB8D5B00DB7BA78FBFC5B95E167C6
CFB9A2275128DDCE62E56BBF35D257EAE99D627535F8E5ACB4A4D3E1E6D9D24F
9CDD9F80028D37C9CB4067A28D41E879AF98739929DDADA413EE35894A6A5B14
CBB136548C4B00E47FA77732DBEA89E10E98CAED50DEC8AB2536A447F7D46D4C
63A99114EFD23133E2FB8243221A2E8AB1CB892DE716CA34CE544502ABC9526D
F48B0762B57F8AAF2E120D5DCD70D140B498BA43863C45D94E6642DD04CBDC31
0087B2FC75CAD18883113AAADF162B023352069DD1BDEF229E16DE8D008A4CCC
BC317B47BE42354627EC77B91564A034FF2F3B60508154B08981B62A2E9974E0
E9A46A3AAC7F87B1FD8620A5A695852F2FF71CD16FA34635B526265F1A635254
75398013F04B49F67164F03610FAAC41229306EA37B9DF6E8DEB1C6C2BDEC9E6
EADDEF6E99BC482289181D89CF74F9995B40E5C55FBC81DC7686AE740022F764
C49FE9B49A108931E3CB077A9C53C764DBB47C789C795E97A537F013BC2BC786
BDA32DCD5A856714ACD5D2BB98B011650B2A5D8B881D6854DA373B002BA279C6
0649618BE2D9B1E10DECA9090F66F089E4D7C6D8087016FCB998B95F194BC9B6
E95BA14850E251A4EFF1C66B148E036AFB7FF007F18AAB4CAA2CEDB34F65F327
D58731A241E11468BBA16BA3494A4E80FF16410385FF17A1444B2D1596343B25
64124D648B1E0955CDCCE027BC9F127F79622FEB3A6781181EAD3F02101364EC
FB540C0B2473F20BF05A8315BBC31178398C4DF5CA482F899FBE7654F08D93E0
29994A566CDDC866CD6A1CF5DA076F94B31AE4EDE8237218A12D5E9DEEB9EB26
7CE99EEF40ED1A5A247FA60A89A2EF6AB95CAE1FB119500650FAD0C18B03564E
B61A0D261812A3EDE5BF402542BD215541E3A478F0933EB129EAE44484E084BD
DE7D2CEEF5E54E2CBE14A20F56A27B70B9C7DCBE9300AA2826EF2D6E38C9EE32
60EAFD1C1B7E9CAE9EE810B4C7934D08C44E8A3EDCADDF8FCD6E289C19A7056D
A716700F391FBA6480099E8276173D443884AC0600329C607B7521B1C1C0F575
F4A979FF04F1B3C17864FBC8B92B77DFD068E53CC9111E290624DC39FB79FEFA
C07D2DA7DEC9642694ACAD9C980FC6F26BBC4B98AA0F9624D8678DDD10596E3F
55CAF2F4419B78FF39B929627428C3A6736D8777332C017A9411BF924DE0E40A
24B0E1B797094DDD8EA17A7A281D007F1F6EE3CB17E0FDB167D05506A96F7296
047E208835176F3154E8757A1C21857556EE412F4434E8062A9F9101ADD125A3
2195B8CB98C9B19235FE35E0DB6F1FBF31ABF448C9261B75BF1EB61260DEF86E
BD69F26D77A20B25BE10094D4C196E26034F2577471EF7CDEFD087BAFFC6C93A
F8FE338E70387B4F1BA2119F24E0AC14D6C89D60DBE2E17850FEEDA72C8A882C
F268AA853D036C7633EF1DA737CF40C5F170EDDCB3B5518E28C971EBFB43D842
99D336736B15B05591122AE51D1486E1F2FA31E9C9379F2B3440AEB83539438B
B83563DD61FA39B66B4DDCE39F3E590823590CD7C75BBE8B58EDC2F2ECB1E684
00C6706D29DF0BCA1B5C649CF209DAFA7619F27D165264869A4D5EC574FFF640
76FD6BE210178957E86D8B7303BF3EBF660879783E563E5FD42AFA2E2C523957
8183B066D5A65BAE4AB038087E40257C1FE6F484941D7387A2F92A69CAD3FFA9
AE559D3043D7128482D9ED343F64C6CAC65D8218E75ECDA7292A0F2FBB4A60FC
7025B92E55DD5D5897F13EDBB3356F9E2B9DE1FE09288B3217E226202117CFBE
3DE2C6DBFB0BB25BB13A128CECEF9D4D51001EF6E00C9CBA158724AC4352EBBD
4085CC2897C588A09FDB14647F570BBEE55DC7F2AED102A1134FD48A8C8480D9
137F359E6287C5369650A06422FB0B3B29ACF32F3DDCB4DF8B5AC385B0E99329
08C1050CB6DB39BB10C1F4D149305E6D442E7D8B58020A01C8A417B670A41F2E
B01A30F2AE8C73D83360E849EC83AABD17E084BFD0A3606D42EFBDAD44BB98A7
440207EC9597D409FBD1E6B2429DCC30846293BF3060E9CAE54A81D21AAF3BFA
BAFE773F095BA4D5A0F9607E25DC3137296CE1D8E2B8FB0DF6B5FB6D5C415495
635BDFF798B08041C566CF1D783EC7B15B4330A37FC9C1BF23CE45EF19471FC7
2472E528053EC041E396333C90480C82F2B80E740D5ACBCB0882F35AE8A3E3B1
FE3903A941EA20902C10B0C3E73DF25106052700653849C02805E1C56026FA71
302E87A45A22ED99B04853D66E5A22B56F79FEF73918B7CBCC65CA7DB3E410DB
1AB7AAF9B483A4DB3B333B158517971542915D70737B3F22C6A831A9821624AD
61DC8A0DE77A1F4BA087E7E54F4602592AEB49D4AEA40B81B7B653D90E146B6A
AA318E165C8353C9CC1F0927D73E21ECE52D9C3EA6DE3CE70352D2ABEC8E3DD4
CCF226A6829DF67E37A242C5E0FDF6AFCEBB0621A8ADE7553CCA3725FB707ED9
526ED054C471B82AA52B6C090D4C6C776B5610954A6E5471F8D8344C07DB8E45
BE34098668A5FB9DB4D49F3FC041809ACDA455C62A76B51D730D8B124BC6B76D
049B17736CD9E28DA73506142B6AA54FDFAC9050332212CD062A6B96FB18552E
DB51B991870A6E579DC68B52DF7F950CE1BDB15548CAD879752198F3A2141F1B
77DCD2B7DC83E662C19DDE6A5207ACEA1E0C78CBAA7A47C5F3D0C745262B88DD
F05E7E3C1682E8E90674B781EF298DBA6CB1758D22EE8A7680B01DAC100D3748
CA1BC047117E5E9AFBA7839CAE44964C974F08DB4C947F074F5B3644BB3F93D7
F96770C73499AC0AFC3E20F0BBDFA01502C9A1C30E9DF357529D99BD156464C5
D64ED5C7BE1C1DB9852E09F62BB22A3A51BEC8BB98DE63D6763E8225E9ACAEE7
9D813C62B96A7CD2247A269F53AC59E3E886BC531628CD9FDA87188135B3D6CE
0F2CC637A8F2EEEA4C05990EB23142620576551DC347BCB2302D5D5FCBBB04D7
7DC4955E84168F9AC6EA2E25C8C38B8A36B337C6925E0CB5BD963CB791E28CB5
4B37655D9DC3BCF1F660E8262CD10AA45C67562303483314B5B71B07C7F8C598
D226227FA8C178C10D90A2F26A639CF016B843ACE6B352A0B859AAEB15A52403
FBD562D284EFBCAF3553CC5A757FA50D53E6AF18AF09A1B9C4792EEAB445547F
698E0DC00CC722B65CBD277C5DF3B4B1275090B71A4D4B3B7961171D67F8F6B2
6EBA8AB37B5C35DB16D8B776255132DE99F3F4B7530A72C49503FC4D5C84291E
0740415B51E89FC1E4887D1912C7FFB218D23A08172BC11116C8028E77D0FE5A
DDEF0931C9EFBA2B76B78F6A90C0E44F8236F55938C3CE5A9EEAA8379EE7D879
D13C3E2D204512584029A7E941946AB7D45710ED4396C6C9816137832A56C48F
C89066B9FF63B80A84B36F75AD6D455B580A4BBE440839A54B385C9E4571C466
AF1C084F04AF31AB83EAEDA618C70F735DF746994341A37D17E8AE636315CE9D
47B1A020296D23FD0A59D6AD28E34849187D767EDE855B520ADFA07DACBEC45B
BF0C25F00DD94C798C8CF098F26C8AF48B458803BB26487C1391BD9A5B51F33D
505FE3ED168109F1F39AC5C3357E48CB38906275AAE8D8CBE9ACD7740ECA4A47
A985E2E16051FA4178F6557DFC8FEF287CB787EFF59E86B4A72A199F16F2C24D
D5A6AD833A4BA6F96FE67FE603F3DE0BC536C9A2A04B73CB2E4EBCF70184C5E1
D9C9E3DF6D0AB7F44E679E8518074632F6BB0639E2AA1DBBF34708FDB8092FE9
343274DA68CD751A72052D4FD983EB8C149E081333B2F0E0A54134F91D7B4ACA
E954658CFEB3FF04F3F9F42C57124BF3FC0BA485E050DF883E4B2767E236BE21
9FEC94EF94D9F2096E76F1C558F40812444C6F0F4DA995C8C03162375AEF5BBD
6BC3B250625E4B5C2B2BF9879F853460339AEFAF4FCC58EA396431BD4F95BD5F
6DA31DDC13D860842BAEC5EB5C217FC685C06C5AE447C991137584534EFDDE0F
7BBB3FAEB89D737F9FDD69B4EDADB476A1E588A8C8499A8917CAB23F00BC124F
D93096D1B365B754E3D03ABC8B3DA3F4F6C2DB54682F72DFB7E665EF36DBD3B8
9455CA9BFE2FE8ED26203A2B353C3C9C7AFCAA09793C8A74DA25396CBC1484DB
565607911498AE56FF61F2AAB48F1B954211AF0A38D6CAB3BCD6697C7E56C29D
62A325714D3FE8C3DC019CC01E8738CCA2596AB05857E4B8F9D6695EF332BD3B
AA9EE551A4B142DDC13600318F45CBE1BB1A6E0CCF1CD79182D3B235B457CA9F
B713822F634A96C5D1923710DB4B98B063FA07A5FFE26234C70FF6EF6CA2A853
FE0F76AB1ED5B97A1060D13911F4AC44FA5358837F7CC6ED863F0FCCE5F79065
D7AF0839F444CFE8AC2F2FF46DB2B95247BD8261F39BA12AD5E50433EF517BD0
FD04C73FBF1058A8907ED43B4C144BDAA3C4E6BE9637FC8BD3E94D6257BE1B7B
FB179A4479EBA92EF2EE4E7B73DD295274E1D416F7AD7338FB3116A3CFEB9E33
8EF0D7B0FA721D7D11990750232AB90B60DEF84924B838AE79C6689275697225
1698C73A825EAF77F8C38CA8468E616771E6C9093D7E3479B0DF3F3160EA2059
B5F7BFD55E90340B4244BADD57DA5902E2C08D00E814009234E2A36EFBD854F8
68BC9301D33D0203F8D1F59EBCE526B06B610DB1B028D29F838A52AEC3BAA982
56BFC6A306ACDD86AEFA6F4F2AFCE55BF27AFC96D93AE476AB15324149043E71
3261671835DDF163EA8D3DA7CB1F0514DEECC225301813E4ECE6D689B0A04229
04F28E6DD3CAF0134F9E19DF8F5ABD86CB0F8CDD3A059F2F3421FF99BCAC2D54
03D67B0DD5ADFC6174D559534155A42F6626A6E7CFC849FBFFBB17679ABA8C34
B1296EAACD7DA7010ADED0D6A83F04F396CE83F0549B1168EB7DA7468011420D
BE034D5AB67817DA21F12130B85DF957C636987F2ED81971E9FC729AFC1E778A
3C062A85C2282BC39C571BD45057FD09085730695ADEFF892B4307BB163A248F
9A2052CB8980119F3F2EFECCCF2C04B55F44FC0D155C1E04055D6F81AE5E20A9
E98ADD7649142C6CC2FCBD09F82ECF0716F5378A8C51C139D72816DA8B61E413
EDA36A71E7B6110CAFAC612E3E67F979E774BA9C7A580D605929D6D790A34084
7DD751CF51F14D89B269A940060FB0B603D3A2A6839C1C36A3CB55707A0663E4
D7346CE1DD000B51AB4A815FECF291D3E8F573EEBB83E6F9DECA82BEB3F58558
67B2B884E4A9A334BC95558E4C1A9D0B93E9A8C0D83CB8354B69357920BEE4A0
4E464B774D6CB4588DE10B3DAF9F7E546F6AFE62D85E8D25FC1A0039346F9156
82672DE85AE82551277388BDC62DE6FD1A3DB14805DB66731CE5CE34765A6E35
825C99CB7AFE5A873340B50AEE34371B1D7C90AFB517178C9DFE59CE8B036E3B
067B364E0F77D36DC299ABF128FE2511732602A5885A6CD283AD3C1C87F360F7
BFF771183B302FF55667390AF2E314BC8E0EF10504B5612395461652E3B2D6B3
BCCE3F5D699B3E2227DEF786D7BBDAA2A35EB13FD17790793B2B4A9E06AFC15B
8B1E7C3534BF816D19A02789F1E1BE623EDD5DAF54733EB1AD965E8A5A3ECEEB
F44790D57FFB857764A8EC459BFF61D9A893DA0177CAB77BB183F54581052B66
D6CB569F8C51F03E409DCE0717779DEA582740E49F088BEAD6E482EB87350926
910860A95DE4100D2A9BA91424DAD1802F2EC862FB85A143D7B299223ED85252
02C31B687F2C19136157C6D83B33313266F1BA8B9E065A0E64509902D75FF0EB
AF919567B7A1CDA5E14FEDA66F60059ACA0ECA3D597FBAD8C7EC31F3C1C46E5A
E79F74B3589EA1C34BC2A4827253F72CEBA7495FFD2989718F2A54E5D0EA1719
ACDE43012A2AAA1F71550220B035B6AE978341404C817414D0579308612AD113
219204CA43994CAA4671A6A97BD8C6807C21360D0C3F7742F47CBC2D74EF214C
0B15C50A9B5A26205F096D63762A9B14F267CE0337485EF58E37EEF30EAB487B
6E7AB230EBC988C382F594B4D4D4B92E6AEC4A9F07841FF93433615B89BA1272
6F5B01CD5715C6432452ECEC048DCD14814E47DC1226F723CE25814E30876470
F16C5E8F87F74CFB89CA99219C25478E0A63F78F3460EDD4F64B4D2A5B3E660A
B83C0CD1BB032CF0DDA97FD7C35218928C48545178CCAA9646C6C89D2FB89665
3CB3AF6C9466BF2240E2A71EBEA84FE2BA8B2BAD7C2F670BD9087F7531490409
D02F3D87BE05852F9C004219582D45949B8C3A7907A725B1DBB3F1A92E0A0456
D103AD819382A9EB1E201AD6F522AF0386A30A2693B607A67E0AEAA7E969E420
86DC576CE06532479E48E7E905FB5E8F9FC3DC5F258FE3C18E7464AFBB0B0757
2E4E438A2F1A4E37E0909724BDD52F4D4B98C4AD8E1A1528BD444DD1B0EFDA76
FCA43DA6DFF11E72D5BAA35CCDDAB44EBBC0C71C3FD43F21DBC6904AEE4B01DF
4F1005122C3B92BB93F4E9CA79A797C3A4F27AA9924D6616FC860CCAA3402216
64068B6E7C7CF2E2432A65BA21DBEB0A83FC660BEB3F1A3357D218276A5D0FA4
EADB3616CBBE98428D5D811FF6FE99AD7ADAD0922C1BEAAAD9B337968A02FCA0
1148C302E8E3AAD1DD61DADD7A1FD82F0C2E744CC3B65AAC7C04E9646515EB8F
EF55DBF964A5C2AA9623B8674C8259A681E27E2C4AE26093689327A256571CE9
457E795AB6B63D78163F227F1385113B9D2A2F0C56DB55B7317231C2B2F371B1
559D8BEB245FFAA7955250F08E8F5B149E8F97D25635B98E9B51FE570826C75E
64296714597A74010F59376FB1AEB72D08E929E1630A7750DE134C6BC13E5AAF
A36ED9F7A8E5D9BECFBE4384E04B0D6FECCB0244DB29A8B801321969CD052FD6
1493FDA211564478C68C592E158DACD4D9005B983760C79C08C12658303A3F51
1EBE5F047EE68288BF3DE1225D981C287FA9BE1B690BA0F8059823BD2AB80BC9
DC78BD724DEDA7987A6DD44876D3FD2B0A21E719D5677DB0E64C7650DF6FDDAF
6038DA9D24DC1978AFD87934AF5BFEAC00EDE5DBDE3D585DB595D29361F8253C
26C37E09B4F87056EDD8C90917EEEB978E51957475B5717AC1BB4AEDD87AD40D
D35C3449819CCC9366AFE79A48A3BCA95DB66E5D14FE0A8C3FFFD51B5492DB49
BF8810AF0BDC54BB1D08740818CF45A63A694C8F8DC44FBA5607435A619684F5
02CF60F00AB8418D0C93AC7EAA9DF793A62FC3E0C50F55A84F67D932B8062860
39E75042D590F24D8FE9F50D35EC6FF30384385CF7C56DB4A483D83D7CDB2BA2
48A366D5E0651560A4BA2299074E853FEFDCE9480F0E55E126E1DE7E700FC3D2
2EC26F9B2761469B0EDEE8BA22F029985C6F5C6E52567706CB28468A9A6AD9F9
B873F1845718FCF81B2A15BF986954219C2577014CE55CEE9E4D5B2FC43C7447
A9605D5D86CC06E8029D4F57A392D2738F846305E8F3AE5B5E2BBC2F802F00B3
A75DE53FEBE1B7B9272A951A047119B40830A39909494E86AEE21694223DF5E4
A7198F31E2B8282BED7392C7BE2B61691EA52F310E0367BD918A9DB9077118A0
42EB52EB7800276E7502D8CB8A68A46889B0D2DAC7CE9E40D84F17B6ACCD8743
2BF87A6B87D3297452BA7EA1CA9EACEC454312EC1DCE09A40896B78BD1D5A73E
157AECB9F3F59C0D736946734C6DF70888665716037A35F574BB08A82641F363
6C82E2BB16E686C92C60EA329075C30D3F97A3214A478933678E9C5B2267C747
BAFD5934D95FBD2640BFF7E94C4C260BFD0FFF9D966F224AA72C22207BCA2267
52B21D21999E31A3DA1E51A3282038BBA7F7FC70987A57EC73E5A6B9508B48DD
49577EF2E015E8D9C0F64025C76E0550BC5D75F5C40F7C7768A67B861D5FC288
7F1635AACF2782022D039A8D49085ACB83B160C466909F562BD4C26A26BEE741
ECC847467858898AD528633F477B739EAAF07A516D86CC678FF6D5A199877F04
81B1BFA806A353E3270334E0880843F700FC1F6065FA37F248AE52A1FBA985A3
1F28AC72D636AE969256DC91944150153C99FBFF35539B5E3CEE76DF3204AEC1
961F654E12385D1EC21D1831C177FAC71FD55A5490C89142F2844CB7E6352B01
A07303DE29B299AF582319835E23408E414CE2299CD46784E6A7AE912C213D0F
380112FEBD737CFF6C1483C4520BA4A4B904A4031C519E155A116C14F576AEF6
6E86BF55B83AB07C8875DE7D96261C02AF3B27E36352F8DC981EF838587C80FD
855F1733F50F636A4C7426584812DA63B5F0B1E400E9F96CC34E7E2C3CCF88A5
17FE6F9C5FB51F8737E0EC21F7CD596D42A88458B89786C2F6D96AD2D415402B
06C2CBB2CB91B45D00DF27E5A47692A30A7D13527A7F3FDF0C07D30FB6436D58
753F6AE969F7207578FA40B7457C36BF9A0846A0C5007E8D72ACF2D32F854BE1
642416405BCCE8D41818D663AFDC9CD1C81B91D658B398D4C89F58C854451014
68001F40721E8DADDCBFCD8BC92D0D26A7DEDA6FE09F7DC39F9F2DE66A66190C
689A73A26C5E0137C208DCF1A7143359F8EE27AB1F3639B4C997B3FE3D863BD1
FE2D56BD513E5BE907EDBB61A117B7F1BDB61AE87F1906CFADE3EFCF095AA187
EE498BC5455C976C40C6E24D239FCFE9CAA763CD150D404C418B12590B6EEA0E
1A19CD139622317F5DFD2EFBD95A7589BAAD70364C33665F90E24D35581DA77D
776D1EEB96F837A3A2F5C501AF422A313B47DCEC7A019705E05AC514331F7A91
B4F74898E2FAD14576F81B1D688DD8F61B1E4450C0C994D2FA8F4EA0B31BC626
75775A139B54949665078867B4A024FC24B16AB6474F370F7F61C7A430AB2303
FC215B5B353C8B1D386CED0321AA1103F5F4CC57F15121A5265A4B316901E61D
0B6A13CBC0EB3B038B56DEB99AC4C60BB469AC2C2CDC1E415746055916E409D0
85688DEBC02A6E020EF5101E41C289C854F7452F28FFBCEDB0E2DEF7ACE89539
7DFAF366B982B1E79ADC6523109832853C664B53C4ECDF81B0004DBE82B86F5B
A36A3B2DE83040B16BFFBBEB73850E2199B8D101C85CBAF179EC5881CEBF7EBC
3B30AC8AEB18B09AC7183771066ECCF26590A7894CA6F91AC2CF4A1420693935
9518C6B25D2C97192E8E1F0AE8D3882052CD47181C522E1F417F28A12064034A
7290750EBC897F11987CE12AC4C09643CB0B9D921B4A6980F6B22FE3C7B7CF63
57CCAE079ED34837B5A08E55E6319BE14383542B9F6500CD29B4760D5B4C77D2
5AE31C4A75BD8C7EB02722DA8D894241446F05FD5DB3815F144E1EFB2D400AD0
25F1AD7295D531787D2C5D4E00A09F155BFDF971B5A4D0AC102C2CE8A28E1A82
794BABD4D8814B53865E03C0C0D6DE7B16FE54A2CD42AEA5FAB6694A64B334CB
750BB6A4D0230ADC13EBBF5AC7571B0778C0E9D25358DA06B20DDF35F409AF15
997127DFFA9ABFF8C858A51C83CCCC572024A6243D6BC209B8D579F6A057A27A
EF243C4B389CCF9382BA5143D6359D3BA2ED407299B5C9E361C08AA256350ECD
82F3B38BD30286E0A8B3E42F7CBEC366E60C18416B956C6377E02A43FDBC78E4
627ED79B16862D939F3A3000659AC050E7001000B2C6848457D632AF0F1DCFFB
6E5F5F586F3A72BC1E72A5F984E7235607EC39E49ECCE85A8E75B8B18D8D9B9D
2227C7649133EC6A81002AE7A4E697857358F58A400549BAA570F95B97AE0BC5
7BB244A80105AEAF034D50D17F2A2913B639720FF4675597704DB7721A0FB87B
BE7530ED3C037A517E7F4D92C7AB7A2B373039EBD068D131C7F302A2F9FB65EC
CCAD4616927004178B7B2CE55A8F36653841CD79FD3514557D69140D6E7E9813
2DE2FD992965837E604A8B2C51E4FA23D38F0387351BEFEAE26D641D49B7A349
0F09BF16B8D179FC176D0735CAD73632F8EE970DC0EBA43D2C700A1D58F29F7E
F1487F54EB23A1CE0AB8CB768EDF04DBF511A3BEB1869F9D5F0086E13F8C3349
8D55FB08ED70950200C50B7E71F8C21BA46E833E6C0DCF6556C1CC6A1C88ED2C
49C1700E8AC2E1EE384B0F6907DA0232BF5153AD600D17DE2777D5CC84335A77
6EC13A25F0B85F0EA2FB526C4A6975188599D789CE1B95719560247100F68FEC
756F7AA110B22AE36B9518755C2FAC2135E89AF71192E8CC3776F553A88FD966
801A249712B98F8F6684D7361A1286AF3E4083CC9E64F40A500F045A27CDFAEF
A66D28B966E7D491B5803E4E32D24FDE0B7C56732957AC35E7CEA2C1AA00C6C7
57576EA0E4C8F0F14614231A275836A622235EADEE4F56A388398B1E3B8EF7D9
F110CEE189C26CAAF7990882F149552ACBF1101C0CC34540AFE14778BB219B59
B3BB99066BCDDBD6A90DADFDC11833C934EC4E446C77F005D897D944251600E7
A6B304DD76E088EF97077EDE26FD1456F4EA599CF4C4B22F65104F6D0D96CEB9
463A89A504AB57C377BB062C02225DCA03E6485C035C6247166107D6C1A4FAF9
AE46BCF6A6475B4197423EF9DE9959CC5CDE05CA9B914F8749608248E964F913
5155384A2C0EF7347C378B111AD792A90E38E1552BA4D6E36C5AD7B56F4A5D0C
F8FE219670A817942121C56A6E64555EBD682B2A587F38458944A0E355F989A6
D77EA1E24367EB14A7D28DAC9A22E2DF55C42D244D9DB91ADAB25927B9001E6A
DAAB86BA6B2B4E28F3C65566E2DF0AB84140F348449C01E851C4736321D6DFCE
20133ADC7C1C76B14667721A220ED3DAAF96F20E29D2F08BB07743827690BF7B
6E45B4F8674A6FA270F14B4944F276428753AFF93D541651CD027D5B23BE4FC8
6005E73CF2508994E2244B800EA15AF8C16B9B8329E91644DB1EACF0C0C781C4
F4C411F79B1D23A87ADA31D3A48C7190B618659D7D0B64A40FC4773482AF8C73
85F80E163B9463C38F611AF4987F7203DDCE93170428CB54EFDA16BCA724284A
ECC3A2904C546D6F2ED297BD3D3A359F69CD6D9D92F5265392E03264AE22D81E
75A04AE68344A9F152859C697E93BC968A3F78C8604FB03A0AF394E19A0E50D8
A50838734E691BC16C50353B2441985488F0E70612603E3F0722046046DC94B5
017D456E865FB2E416C4E91494CB6FB74220158EBAAD27211EB43A348E7E1F83
87334F443CE79BEBA97AE481AD4AB1DC86D8BDB89DADA068799547812B285C06
A7820642245A91B895E018395581C536C3CA5680F622117252D1D72A6D9D057A
413F73C7FEA1993B5020F8574CE0C8B6FCE43E382AA3BBE0CAF9620ED0ECBE98
14BD19184B2C0F3B04B2D3ADE2358EEB27274D7B30DD69E1B2C3CA70F2F79FA2
9543F526BE2A04C6309DD3E47CF1FA44EFBAA756B02E839A6105021CA9B728D2
7C8018BECD829ACB6C3D9129E976A2427E1611066E0025917D1BDB7E9E37AD93
5833B94133FD5C6E5F76EBABE1C94999A54BC260661FD4DCE55956FA246836DD
DB17F52681C14DE689A8C6F2576DB779DA5064C8743100C8DA1A4DF6C8B7B019
CC31279CD27DDA52E1DA4CB052C16E049D2E6645239263D0B6E6419174661478
75F99B35930AAA74A477AFE29B1DAD0E6BD33735C477FB9BBFF2EB908D91B245
11AC525E15EA2EB389640906449D7A0A2979BBD6460F393365098CA717F915EC
27ACD59D2F35DDD0320956D2148DC7C2D7EFE859F41ED2661FFEFE5493FBEA5F
B1D26743416B6D20BA817AB49C66552CF7FEF8C99C29BD310590E1B613AAB89F
20B39C67B801932612BE59E8C4EA4B47A39D9D73EA96FEF2811F36BB337D4E9D
38D33E46E3F79F2BC92D811CC6DAB392EA379D23BED8DCA6132D76C53B78A28B
C434AF4C963E047E7CA794F2C7E845FC08034E600A9A20EDAEE67F65EBA7C2C6
1AFE1C7FD58404CCF6E173D56F8D3D3CCEC06A27BB12FF9B399DB1AF4BA9A570
5502F55E4CCF7160C54F7BC202236296A9052306639F4672E90E3B9DDE5FB364
F7BD728B86D3BBE1E37BC2104E79747402361416DDB4C1AD10889CB7851699BF
FD28D02FF638853114464CF170F3EAFC1572D2E56F2F0F692831903D20979257
C35CA8E92DCD33C7DD73FBAFAD2A3EC3AD445193BEC19A3ADD031C747FA67225
34BA34991AF3F1BF309ADE33C2780E971D3952648BE3ACB42BEC6D5B5DA0CAF1
9B5792A3F832853CB465BB8B66C50948800458912B40D3D1C93BFF447255A99C
CE4EC0E8B418284452650AC9F595D065353A0D84229C2226465DBD27291A7AAD
14E946490AEED2FF28FF48234265B4759B50D24BD711DAC55620DCFDC63493D8
B9EF33711947B65B0C07BB7FE129E074482B62CA26EA8970DCA4F35C139CBABD
4FFCF1E22865F11E640D484E5F57C00B1336A8F61DE8919B9F5A5D3533D903B8
948753E873822FF2E1C8DE9834854FF2955EDC15456438FED1B333FC882FEA17
CE5ECA50FE1EA7907A9A79564DBFFF9566BEA8DFAD1CD13FE4F4BD5FE272043A
59FBC65D5C5FFA73F59AE22BC7A9DE94C8D7D03ADE5D6DC0252CA2E3EFEDE150
916661FEF85C14B05424C0C51BC3E784E53A157C5192135A7055198A66789574
CA9DE18D9CD69BDDB4707F7B2C827516C1A6B49353FB7457EE57EF5908241374
2A4CD1BB78156D5809A689085E5EABA02F60389E94F86AAAF2B7E9E315B157F8
BE66C4AE3F0F649948253EC51D98A20B1C4150AECE1B644EF4F9B15154D3FF75
4428AE15D0D7F8837386F411D0FB2C1CEA22C286B7F058E8F48EBFC36AAD3511
F899A93419E74B4EEADDE0FE0B5D86C9538B9E3260EB814969E2E48645E1F5AC
047A8204F464CF29A60BA4DEAE3FFB984843DAA8E9420BDA882054B68A169C3E
54FF994669E0E0A4CD33F1B71EA3C7C787E612AFFBFDBB75E53941B46165FF34
0CEC0051A4EEF6A495823192E78065FD6060A0F7D8ECB4EBAE515878A31F197F
D069F443133F6271A817B670A41F2EB01A30F2AE8C73D83360E849EC87FE9711
CE71D9034EE8704CED9534746FB31E330BE53B043CBB36B38CE86196A8838829
AA72E7DAB35155314A35C56475A9CC8CC6267A6C8B55512546ACE6437740E677
EE22A40C38BB1F69F691122BFE48E6FE4003BED0D4270A59532C46091584E9CF
7759EF3E2FBBC0EE740CD2622E599A513A5A5F8F39BBA8D08AEB6465A1FB1258
980913106DE9470F037FDD15E6113A181DCB5104577F6303D8AFFF0D1623C49F
3A52C4EDA18B7B6BE5C494D3BE6EED741DC2B9D578DAF502D940AEA08876BE07
1C01DBADD0EBFBC4FF52507C34739FC6E798467FB71DAC5EFFE0D7BBC8114201
E03961015596BFDCD08FBB40B1153AB6626767FF1A48838221A3FAB6E8027A10
873C04482CAC5129F1D102860A54D8E656ECEA88768396EFEC282DC3DA70208D
6884BBFA2D4ADA174645BF47E448B703ADBAAB9F0DF2A0805C9B140D8CEB4474
0442AC4891051195B0B6624F3DB00520FF4657F7D127A24EB69B4ADCA04C25DD
A90364C4462F8DF7B588398EA6C9D82EC5A2888F03FD399BAAA3890E4F95DAA8
3D88BC9BF79C0F2F5A0752A8DC4E816B78B9EE734118C991282B1240D3E46337
C1FB2DB53C79D16B085D8400FFC9324014BE2A1D5CF3A0CC22E480CD066D1019
6C05A0EFD97EE57F50C5A59D1EC020C2C04DFC9F36C8253C4346DBC11A9D851D
A3A8E0D478DFDC64095D442198D9D530581F1C40D357CB03A7FBC28AB07B83B1
800E41C9104A62A074B44B977A4E4A9974A30FD61E80F89DE77282D37856765A
2E3980461481535061B2CC994D41EF6AC07B567DA70D25CD23C25C7D0B103312
B17D16087D670D7F854D5740F601C12493300841AF0F3A67E1E6093BE6DCB400
BDF8C5B29940B3CD12C56C7856D4B0ECD4E415CC9290C79FE24F1ED92BA45398
9EB7CE1FEC9D31E66BB00C09B952A829C5F56AE313967A0B57292667588D0A60
A045AE5775EFA566735F30BF915A60F7C027C153000E975E7513D0156C73F7F1
6C034A24BA4FA16E84B73917E43FF456B5C435C17071907E4739469EFE5675C0
FE6A19FEC026975039D81B532DE5BF0DA704808D7B0878A09BF1DCA721854AB3
AD69C48B50DDF960297D39DF2B708BEF605075EE12D7754830200D0EF7CB139D
07454666A9757CAF11889CBE919842FE4D30A9DF8ABD4B79FF6BFA7B048F1F20
3BF39512086211B6ED4A0CFB76CF072638DC21405F5C12971456BA64A3519849
2E0C81D7EC5306E4ED168682A02519583C8A4D3449A80F06DD05E185FC24E756
14597763D2683A5DA582CD0C910FE12D8CD6A6C6A3E4A1518E2BCDF099DA7A65
D2DA2A30960687F2DCF03E8EC3B3355440F8790D36B3FC528CCA877F264F9CD0
A9842A9410A0895DF75E1D19AFEEA0B92BC6D1851F9133071CFF77F6B7BB47F5
FA2D280B99D60757CB814F513009C4F8EA0E7C610D9815F6C9E2E43707530FF4
46F58B37C73CF2857A7ABB31EFD03F4B11BB195452F6D1A1689A2BBAE0007448
F08E8852AA459B4B19F3D15F6C7215840AB673F35C1710F16152A964659C8624
1FE188A2B151D9D4FBA51E499C40A5F15786F4013542378934CE6745950AC10A
8C4A87987B83CE610E61CF5F7C8B1546B7A57002CB5631ACEA320C6437B07E0D
6E591ABD90B6D1A3EC389BD83EE4E88353D85D994B25A9E343F133B43FBA30C5
2CA8A503F3FE224D15738C62BBA2C6AD31A0D44B1E9FD3E9E8CFBC32E32A32DA
E19CD9401354E70E1ED37284DDD65E8228E905026C46238C6F9CDB39DD032031
29FBC6B353DA5799579598B01A786024211AB36761C70E58AD2500BD0372EAE8
348C863EDE31E97ADF14D9F180343DA29EB6D49764B29141484BDCE75BEBD9D6
B46ABBBA618BBA0BB81B21C9AE3E8EF86BD5CBD90AAA608A3F65C0FB12D24CD2
86BDA10A436108F0D6B87BFF46E7E197D8541D72B9E70E255A281B2437BBC429
5CCDAA8DE64137227F139DC666BC06F880D67F16B316CBB5CDF1977988257A0A
CAEE781ABC1DDCDBC1B006CFE5A032B95CA40F19FE0EEEAA2ADC08162D9718D2
8BF9E906D959137073313978F2D5E7E701893AA6D9E4B7582ACD74AC46BE3E81
61DEF94EC7C83D65D86376FE392900FA19FEFED037760D1B21CC82451626B5EC
47DDE14A666942B10E15F853CC86DAC167AB448B9CAFFA4BC15B304C7446A71A
59F056B37F038E68455B580A4BBE440839A54B385C9E4571C466AF1B55CC04F6
46FB7704DFDF783B55A6821F7861B12877C5B1CBD6D3328DB47A624C0296A8AC
D7D8A62118514F9B7FBDCC8BB0867DE7CA55C54DB2D6B2CA2FFE02B6E5138C47
FB94BB66248014CCC738BF6E4D58E1E10A9648D4EBEA307F56725A45128EE8ED
27C7E7BA5EA1A04E90C7D88600D2E83D1E720D03106898433420031B98C0E76F
EF91C951381D9B54AE9092381AD48085761D7AC6A2F33FE7BF1189B74F71D864
956D63E797EB97023ECBAC73653FA3F8FF2205525F1BD257B57C0D292469C015
D85942E1C24C48466ADB7CE834363B8150FD58BE2A16804A4997ADFEE6E00F84
F822BF828C4636E80170B3D870EEB5E235C61E8556A2D58B28357C8A57EAE9EF
8D735BFB4715B7E2454D0F598F0BF61BA4085C37E9B93E79D1D9B0E845355120
13C74769E497F5FAD065CAD27B9EB2020C908E91E81B07A92AD544D201D7322C
9156B30A6056497FD3351D7C0F6F281460A76377D15113D005A1B66901FCCBC6
9829663359171CE6F8F94F8270E1C017E33650E24F353E423A9254DC034E6F5F
37A3D8279178B99FD3875BCED31F207E1DB47B8009A96BB72521D78213984E0E
177E9C7360E93C5A09A5977245779264257FFA0AFA05C2842C534A411593D10A
747F88319A809EAE7BCE9A7AB5B1E77B1B8CD7F56186183BB1EF5CD9063DF88E
60ECE319AC80193A8EDB7A58018CE9051284534C1F36D962ABF33DE5A6612AE1
2C94846951749EE3C9A2EE605514EC228BB66A22545962DDACC28AF52ECAEA85
FFD7C022053AB5E774464120A2090199B8A322D4E4B9F225EEF68B8281688882
693085432C07EC72C6FCD6B3EFF627203630AF2BD897DB3C7DD9D71FE2402759
53E222C1AB7FD8AFB2C629CD2B0512E17CC64DA35D43C4A831D03FCB1124534E
05AD6F4C749DF90AF06D25C8878E0AE2CD2CB6A8F5D480878EA65EAFB3C60AE2
36D848BF0FCAB713EDBFE54E4BA5BA08543D85A37CDB16D9BEB4252D67C718C2
A4595075C1818F6A1AA8F9BC84226287AFA57C086503BAC3DBAB76EC3D8BF52C
1ED0608B2273DCF4CB3A1CB631AFA51A23677CF06FBD07C632D409DADF45FD19
3E6EF5F8491B730E6F3509F43D146B66C6AC37133B518FE14EABFFBA280CD826
087D821A0DDCB63267A9A7701DD5EB7677649A26D94F03F5EA9956DD46B5F299
87154433CDDF37C40FBE2DFD467CCC73F5E1E9809CE9BEF643C2568A3365B3C1
540A2FA5E1DB9DDD2FDE4C295151BE1F1C9C1A407E38BAF13CD2B3CC3A3A5AD5
7EAD62A642F7BC52D0064D626BA54AAA0562F00EE394976F0A2F4870DB0C0FCB
EB6D169903ED4724723A954072436EDF60F30CD8AFF952E9BAC603C235A9D7DC
4D9416C47C0CA011F85308F5CE10B99E1B023E824D1B64CCFDC1111183811EC7
8038D8521F88E1E46C231350953FACECFD82FBD821919E3542B33690DA59D859
C51EE7A31E4510F5196DF93DC22D53B21CC59EF5E3DA0AAE2511A0731F4CFBEA
451BD48C15D194B7A0925481FA6EDB08674679A39EC0A7F739BC533CF7684AEA
10F0516B499942E56EFB6139518D822DC063095DB8763961CD892B5DE3777908
625E1A91DDE6077E98045C38450ED9E422045F45A358A7A162679E52850A292A
04B8BAA71A1D06D2FA9ED0B02168B32F6CC0FE765F2AF96425EEE41EAC3D35A3
AAF9348E13F1671DB099C4BA12DEB2C7D2C704581BD389D4C24C460375FF69B3
4D18EFC59636E9C7F8A9A62866F4E857F4EA7D25CC8749B07AD56F952B9069C9
1EF0CDF28573B5A46E82845D720CDEAC7E9079E9EA4FE64EA87FD6E64BBA672C
3E6A26B4F69ABD5228ADF4F9AC7621009AA271E0B41B6C1C6DA424F4E69290A0
78C85A84003435A91198648A941C64D12E8E1451D41BEA93204E6AD3AADA6F24
15A8BCD5C987B17D5F570A966383AA9F7CE59375525369CA6A559BEF0D5763C1
D7512AB6E16FAB0A633BD4BC90EBEBBBAAEA60A61E4B94F0D92A7A8A44160BF7
9651F0E264F81770C69C2A178F33BA78DF24F7346872E84795059D0A12F0E79D
D00A9FB4D7BD59E92911ECD5FC0D9343070BC392C6FF76BA32CC1704A1B7852C
077028B02958F0BAF81A04C5CACCF74BEA322B4845273B067CE1A9B7933BF8AA
212A5A80071AE2173470B43971818878DEB47C542509A9066C03C51A1A194CA7
1FF4DDDF5FB31C974FC3B57BCC10CF0A0F1770DABFA09730FEC742F9287F2792
B92D69DFB3B31F1C72FE37AE784561BFBBFF0182B969C8B466D474E73962888F
4872924DCFEF1D58B9118A1924AD8823E9CEA0F386D14195BEEFB3B9A269A587
593874C38B96EE3094BC95AEE6F1BE238B28F879C77F4A5C066EDD265C940ADD
DBFCAF37BA2500213239F12DC7E00B6615C66879D91DADEAA25F850083BE6CC2
6AE7437664AC6A98EE85B34A9A5F22879FB0BD63A2938F9981B2C52892697497
5F2499F50FA04347CAB53A5AAA7A2C22B671497C9AAE53C60DE5EE3A1E09CE2A
3246B9B5EA106E3D12338EC81D16316F21015487644B55DDA2E1146AA3CE0787
4FD5500C5FD4773525A9E12912D6B2A265DE09B43DD5272067C545347BF5F362
D403F91BA1E5BF9897E0FD98394A944BEBBE20D5795B41C85D883A7B825C2C63
2A45A8A619393CE6696FE4CF5165DCEEFA72DC1B32802595FC8A458C082BE1ED
19871BC4F4EE0CFB5116452A0583C7CDA275AEEF2B2CF35C073278159853E3F9
C4721801295766162B7BA50B9C4156A24084CECDF954E6508FB2866CE2EB3DD8
8426FB22EA87B5F38C119934FFA997C487C43CD58E4190656F7B352E24890560
FD20035A6FB8530E9EF89383C06A6EFE56864309B5EC0B1550029198E9E9F0A8
79549CA69DF4EE05AA2A5F075D57D8FBC08387EF2A58C54D8AB7580EE3ED58AE
B83B72CB902F538B6D5153870BDF50F61ECB986B27E37FD67F41027A5A2F1CEA
6F1F25312B41B125B4A46DA4550DB20C261D39AC844B996C9EC9203DF2ED2DF2
9C2AF195DBC923700981C5F5D55CA10F93D53C35497F93A5550CD9DE284722F8
FCE549F4133677FF06C973F989BB2DC8F8D2F0BC870CA2D0B0D46E0A05899D4D
1DA41A4FE88655F94A91F7A876708AFEAB29E9A7CBE0BC90D0E45B0149324F52
CEEEF248413B9AB45604C2037E471BD24485A77247B614E056C02723505DACC7
92086E18039526155ABFD0D65D612E0AC6E2DE0E5F9094E55F65DD77E8263B96
7745D99494FCFACFE9D03B9851FC8FEEBF287171660B9696015A69BA4A04B118
AF10776110E318873BED624E3B00DB455D1B321583B42DE5E0F9AD77BC7E6B1A
6CFBD3FF8AE2F0786C7F4EF8C2A5A242E84CFD4DC50ADFEA0C2E12FED1CA0C65
0C18287C6E4392ACEE9A1C8FB7FD9390F4072F37B10826AA7F8D15F5A74F536B
4F63EE567921FA7B005AAEDAD9D7CEBA399B3FDFF494D78EEF9EC6AC0826E99F
51EBF66192E45DF1F3899D636D518807D029E0FC354D9874CB4B618C65A2D08E
2F14862E3A62922390E1889F9CA029306E7E1E4568AD6F06729E1FB63B8B3886
CF88A7DD5419F12E32DE866604580CDC0B07E9FAFAA67755F81B3E69FE843FEE
F0899DD0F8C2F957399FAF825FFBEDACBF098A54372F2BC0BE39C9E243742CC5
3B20B2FA8508290E2C6D80A6AE0478021E111AC732FA0120B1877C6951F86EBE
AFE1C5725C894669FF44C8BFA89CF9FBAEAAC3B3A5CC1C9744253567A7830362
372E5EF5212EDE3106862F54A3D148BD88425747EBD84BF01DD06B761A5E4734
0C37814FE1FB817C7C68A5AFCE814BA03EA9F973E3F4E5F1A14EBF827DCA38CB
F9A44C73E3054BC981ADF1AA24A40520A6C06816598772E12C1F54F5186A550F
AC789DC46BAEA1D028891BCE072BC40599E587E8B93EABBD24983CAA7C21FD1E
44B7C3DB34900CFF47462A68A28CAFC810C1F1A3A51DAE21CA6F5EB4FF329646
3F528D5160C7E9F656D93EB214E1FA04F01DC2C6F15BD9566477F456E5395426
72B0D2AF645AAFB04077D440BE21B75A75962A0675857389A433E787DE991A19
617A6DC6D266439974A234EFCD5B6E0E955587621DA810E08997786BA72E91BA
1D2759753E96A327B6C114A5B6872C8C9C6213593ED56FEC6D5E9E8C3F5912BA
4BD3ED625CEF5EDBD37618D207AC9D2AF1C72C5852CBDE88CF595927081BC530
6B48BC1B97A9612FC1D0DEDCE26DD38CD0DB6335FC4A6B27E683A4B83116D297
C76128AA0CF27C1433A5B21C85C42294C5C5DA468B5307F0F0F9155EBDF9AB2A
053F432A3149B7BA168CA488A7C8F2A630D1B50C8AD964B732576A4881AE9CEE
27DEB4026FDD86F859C51A3605626B70FCD6DAA30568C75286BE9EE9B1A2C060
1C57F5B7B1717C456ED996C6B9DE9E1159AFDC804DFBA4D875BCD1C5A160EB35
A8EB174221DAFF096246849EDF70EF99B1C95A296106DE15CF1B4D743634DB5E
B2C1EE447A160AE2CF655A2941F1E48A71BC01CA5CACA1C98CC87E8404F41256
B3DF22C3C0E1650CF2AF1DE1F40487D51DC24E7D4347285682450EBB6D47DA23
67A369A11ED316CF1AC2294E853433340952C7F1E54D5EC0212C697D91FA63D6
E5955CAA4FFE0F06DD5A0C90BFABA39D0F2725E0DBA7C8CE305DE7C1B59DC219
7B35BE60C5CC7E02E8BA2137CAD04FC9B35F0225CE06E6F5F211FB7FC8593B44
6AF4B63916C86B2A9DE768BD8E3A1B5FA03C76B92004AD4FF5E2A0B60B0152DD
E9ED15EB68C155DFFD1BB283F3C5592858EB2D297AA93C055CFCB2813F3E8130
E33961FE59835F21DC12BA218780A5A6A0FAB8F42D90434A48E3F4993DDF5FDF
93C9E21EFE746214FDE117584140381D43F8F39618E4F57281998D97BF97B72A
12C91CBBDB13FF3DE31109B39281A3A2DE349F32AF7261E19E0B78B3EB858A93
2B26CE562FCDB42767D27812497EF6A45BADB374BD1C3CC6D8482BAF155701DE
02B1C3A9A93CF961399ECE1A897788B2B23EF0ECF516B4E2977709EDBD3DB7AE
516C55E742F598B4B9140A5364EF1F6F3A8F40FC28A8F80062CD6C9CA9EF8D5B
4FFDD23B55D05BBAE7F649385C4CDDA9A382634433CBC9D2C6BF444FE9559A1C
D46A71E1847119E030D30776ED4DBD5A2DF213D85A56B1CA85DEA53ED0299C1C
2C1EFB1C157CA626EC056A68B66C652833CDCF08803A5D0344DAA7CD767C726E
7BF288414284CCC3E6FB3DB31EC1858B0891E10C66EF859E5866B19808EBF054
38B9C5A297F739879F1507A6001113B11FCC641D676CD124BBE66287672778A3
BE351E58E961E816262EABE2E3D7E768B8F9BD9F4C10B1CA1196BC062E04A4E5
BDC05841A723BDDD67D0110B8331410F1DCF9E65E7338B42FFA5A5F8CB3945F5
86BFB542B229FECFCD917788FCB6F16EF60D1B1EFE2961140479458987FFE44E
8010F5D4D89FDFEEFB258BF9752463E3291529C0420927FF4C547AA776CD861C
6F7525577AD946263CABBD7656A1F5BF1E103CF93C0DD6CE244DD9B337968A02
FCA01585BABE4E6127C9DC4AD6EF6EE0D15AE4C65321DD0ADB8700E6F49D4494
A93081D9EDC3E6F33C0CBDFA4AAB10EFD2763ECF666139E66CF7D277ABA5AAEA
55AA79008640B603498A3906733A92966C2F11E260A5524656A9A0A0CB214AD8
10A3E22CBBCDCC9538BB8AA51657E0899F1723A90CB01EF65416294CAF223673
F451FC750AAE04876050E92E971F6A42046019E11D040BB87BBB7ECA6D7070EC
6A87416143682C4FE94904E5F5FC71490ADD5CC34BDFDA94B1438B4AEB72DD36
80CDFCE4008A7DC068555E6BFD1F3E8D1F7B13351D44FB1513CBB22AC8F22E33
AAA89275D3947828C6A9675B8FBB5ACFB75A80A168C6AAE8217A7459651CC8DD
6791A341BF41A595EB76C6C567A0539A035AE3749991DEA439FBF139A16A5534
2834F92738BD6BC724446933E8927F3AACE64BE6623CC75E74878FFEAF3702A7
C45E4B09188CFB4AC98BD8AEA47D89D629C49699BE537834825AE7B8A4467748
8AADC68ADAEF0E112CC860A42D5FB50529EA6CE284EDCD95D88ADDF46A74AC94
A09D60E190C548172D2E1D8F21295E6C0563A5EC278081506796D4A5CE91258B
1C760B7B24934B6B4671E42BF7C669EB92D9D974D5E29D6F1DE7DEFD01BE337B
CAEB58D4B2EE599A6F6A9747787AB8FF415A4BBB4AF81F71E37E6A0C5A09FDEC
8D3678C1FE53DDB897B389B6445A99DE978B0D81E4BAA92E8B121A1E1A04E893
2A5E64E2E417C6B64D84B19F7C2D7C143E2878CAF2F210793730C8E519720441
6FD5342DB3EFE5D9826106E5679AAAAC1804C8AB2084CBBB299ED351CDCCFC0A
735927A1468C4192AE8D8799A91A9EB19EA03D4883631BFC7012142611205589
FA4C2263FAF831B150E9615BA43E7E710108A7D53A4021CFFA25B6D7FBB581F1
58E22E137E896DDFEC3016130BE8F3E7C2E2C0DD5267771AA827C9A1EEEAE389
0F6E58D8C19D6F90AFD127A50E098A590E4D63BF187D8A93FE9F8CD6208492E7
A448BF4B4C63CF0C68AC833BAF4B22B26EFC197D4A893A5AEB6EB247627DB6DD
020C5B28A5F5867F1D07E70480CDC1A5036247F8F1C697A6FDA6211191D8856D
A7689FFA345D31BB30841E4EFC9ED1858353AC4063789B6A407EA26388F912AC
640B01F85B3B1CA9C3242781610A7D9AB6519B473F5D5D911F077A97BC333DBF
DF76A4A160238518C50D908A4EE7AFEF5FFA49D59C844204CC485B2C6E795EB0
3850ECDAF201BBABA430326604E56F26766AB54A6BDC7BC2DAA299201D951426
6A731C48B879BAF823745D6D43EF0BA7FDC43804D1B4235D8A4C02D3F7CB6F4A
358631F1AFD8CCF42255F33A0F71F5C59075B9BDCEFC4B659E93BACF45D1A498
4579F501A6AB5BEEBB25F619D67246632A04A14A7EA94BE0AAC62FDEE87E5394
5816B7A1E4B6764A0F87848033CD51F116ED75C3B58C7B93A5357D715FFA30FE
BAC7155B1E4FE28B0DC8DE04B043643319E48BC58438C6183E00F67077D2939F
24A13BE4C74F78384E7FD399CC47BB2F48CA5FDFE743D4CF1A918C5F58DF1D36
4E29610F516FB436F78E4E2174E4CA868698A7B0FF83E348376C235FE8985512
4C58E6471FC04A203EBD502D6C566B04255A82BB27AAF2426421F0093C603BD6
3827E28F17D57CE60091FC5A0371FAF14E7D7542B1B42D692328847E728A6BDD
31F576F64475E62FBF30074B701B39665F4BF41F69D56ED71F2662826D9A1865
668783704E8026D233E705AB5C4F2DDA808D365A7468BFCFBF7E680446F888A9
F1CC3A8642C108D34C4CED6F7DBE80F25D75116BBDADE2A54CBC728EB209FB5A
0BF3C85656D645C92FFDC31E79C6432D4A78712F4606601ACD7D328B95ABEE16
B14337A179D18E171F04F6E164C2CA9F56BC5D4E3E633D60C6EB6CCB0172E299
B1F6353CA60FB57A0FEF4F937EE9FA9C4CD65561E2E5608200B86DDC18C5C81A
4E75F8EEF896582C61017A720161EA2CE5BC374CFFC9EDDE8F98142B0E13F3E6
B825F861467649D10B4872EFC2B256A1C1D84D2CB53F1FA77EA74787017E92DD
E4CA70E9A40308B61A11D9B9DF27ED6A8E4E5C370542ED6B9BD96F7860B5FAD4
2B86273D30CE80C424CB288CBB7155E850CEDC95D7B9804A7F49654F2B9CC5E6
F2006EB0C32DF29D81A0FD4BE5ED75D83C8174AB99A32FB1ADEB641E165EB322
1FE1F3BFE28ADE72E1F7E45D55CA2034552666DFE7D5D94966CBFB46E98286E8
AB5BBCC5A8C431D8D7B220B033126AC26EA984A4660F22D390595911A900FEDD
4D3ABB86A7B1E2DDDCB2BC12801C4A8ECD0B107CB61341CEF6C18B52DF7F950C
E1BDB15548CAD879752198F95BB659F845681D61D02D28B185C9F052844D9A5F
91C6D8AFF0EA14F929D5598F4437AB944A06B5EEC3343EBDBBC872CFA84BDF47
71ABB21235F26ACF6B9807513FD4540AFEE246506B981C4C25D9FB5C08D065EB
272EEEA43D654F888EB2B5E2F8CD8F21B4A6E6FCABA356F58CA4959D605D6577
A03DE99BB78A0AA1139DF5414824E7D98D824B12E020C9DECF71C7CB5B1C295D
E9C0DE56949CA6905DC5CE4093E2F1A817C538EA4F64E96C20699C861C0558A8
3970B2B20819C87E06075DC32A70F10CBCA5201CAFB22E52F8C57F195F6E6524
13F527B2581AA0561DB3F64D6A0AEB2C3DDAB25909FEF00778D7003A85E904DE
41B35C4ED46D104E5A8928286996E80992529537DBE75F0705BE16EE2E8CA3CB
7BD913A9FF9C2E549536B3875FFBEDACBF098A54372F2BC0BE39C9E243742CCA
261A60A772848CD279AFD9FA3FFC6A1B269DF1B24692E01205A76CC4A6F6FABD
063ACE8A01DC45383306CEDF6B1DD84E223D306718D250574E4602EC0964E1E2
8AFA12B688D61276F94706B29796358956C55E2AFF9E1DD0699F84EC735F63CC
8A90417E80E396349CCE3D47F084C95E8971D17B6C14D5B2A021154D274B753A
A96964CC6355528E6E2C07E9AD472351050F942D4323A5ED11D5E0B35A7B1204
741A6C9845338FB9046C95CD41718836E7FF97C27619BB4DE3C72336A0079B6E
8D1359A7450C8F0045D6FBA477667651DABD08368A6487792F13685C59BE24D6
F350C447D7E64A7670BA35F435403F4EDB445B75C893FA3788B37E4CDBA2A5E4
342791D3BB7FB78376B78655F278DC7DE38A568EA347CD4BB1F5B760138E005F
FA7134D15B8097A9E4D7C9B95069644487B786A62AF609849C684D1D8B5EB7BF
6C237D040229406853D8A5D641364774C3558E5C217DE9D190CCFC43044AD203
2CB63DBFB8E2F70A777E892F5B7B3356C458A75A8A669BE5EF5E47FEA5F815F8
BB34053893A30AEF68D9ABFA4E344BAA350695605D1CC27874F3A6AC6F98C5CC
CE2449D5946139CFF840D7178D7F1A78DC089A3769E800C31AB4CEB7429779C0
646655FF65654219A7EE3C6FC754E7662455513BA6CC0A8390F6CB3FE2C4EF66
B96A59CF03DF84249910564C2EA938D98EAED0F515A064481F053A5284EBADDA
AED1A55A48480F808989CC62D10A3ECC613913835C8B7D0D787977FE8ED7727A
643CD7ACE57AD9C26AA2888265CA8294E9D0381BDC95BB17ECC394304B3BC586
8CA6472A452B6D1404BE30F89E4B972816AA12340D96C5578D689A8522D84C26
79748AB15280AD80C0315320C1044908F5DBBD68527B297EEC7383722D5F5329
F9A8E1FDFC65773A6BA86C814BD2353F423E4C985BA2B11E92FC5E6E11AD8A02
6AF02B8082E79B41E819439C584F23A55D5D60E75443E29CE91EA1937E177513
D286AFF4A32D5049F6640D7CE5F7D2B2EEADA603C5E2F3FB60CB5048E195D831
77ABF401ADA6B06B718C5EABFB9B5572A0D8C841130D3DB8034729B4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic12-Regular
%!PS-AdobeFont-1.0: LMMathItalic12-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 833 233 0
%%EndComments
FontDirectory/LMMathItalic12-Regular known{/LMMathItalic12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic12-Regular)readonly def
/FamilyName(LMMathItalic12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMMathItalic12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-31 -250 1026 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD11234369CB38BBC21C40020C4E57C
950DC4A5CD271B5530E91DBA55EA1A3BF584D9405556EF9C802B109FF1EB2B0F
C350D7F091E7B613B08574EDA3BF27099BC2EF0E503A4C4724614A73AA054756
A503BEB31E3FCD96F733D0C5815847DFBB66DE4968A9B389FC00C2146C4FF68E
076BA8B3847A3D8237D36A6BBDF0096290F1BCD02CC66B12E0070215D5D8306F
406DF7590940DE35CA0854D3609249AEA4EE9D3D377A7996C1CC2E940132A90C
F633C774985DCAE8E9353607B9059DD211265A0A346B1A062D80C64B5802A750
D9FEFA3C9920A3DE942C65BD08060AF33C91CFF62930F65F9A42F70B83B0E077
E169BF7F5D84F15D59F8A74BC2EE4A7F3ADE36F38C3A661F4CC9826BF73D7F02
D3CCC267927CAE22B5ED695D212FC3B669F9BE369B7A8D325C3FB9D552F175EC
29972562517E91E7B8D570612CC50B1A5CB6B94D030B0C60465EA21631F7A30B
44A47143D0C2F942B5D76384B8C3F2F197BB3646CBED3DEECB6513D3AD460F49
4BB874969A3663617EB537E75C1C1BF92749F9D147080EFF78ED285C315BAFA7
D78B7B4B8B7CFD1639EA303ACE986EDEEBA9350F92529C47EA7689779BD50CDB
D1B3A68B383B54B51F4FD77D6458F15AFDAB471DEA9909CAB29840091391F2EB
148588D02607411F2E802B9CDDFFEF1C1FFCC9EED0405371651ACF30808E8C57
682B734916EE806703B2ABA2F6910E0C75BCE10A94FDD1ED3E4FDA7857341427
CA0A4F7D30151BEB8E3D351E1E100A8A75959D11122C83A5C0C4C87214413B25
A6BFE44A42D446E9C4AE61BBACA076E8D7A574CBE1D26CE1AA011CBADBBEC510
AC62B4B219DB7004CBA39059014930D43C04A454C2DC9259A5CB694336732534
E91C85C0BA6CB89BA225013F5D4BA685200505C07E64B2D4D04910AD36F7607A
1F49CA66CB1799FF62F4B6004A6F2F81BA6E4B03157AF42FDB192340DB65AD2F
2D3AACC0EF280C59CB7C3428A021D3A862C1D10BEF7FE76CCC335F6DDBADAA9B
42A95778F78610F6A47D8A5A322D01FD4258D7617C68ACC07E8FF81098FF084D
9E44B1D059C53F7E34F0239798DB5F75ED2150480DD677F5CCF1CEEE63581875
FE81E991C81636CF4146058A2C52D99BBF39FB4C7FBCDE46F1D9E6E73B1BD662
B3C599792AD669E0F7CDF9C65F94E887C1E8E92C01FE6E9CAFF32E32E5188F32
9E2CDA61D7589E2C45A6B2402D0FC042A5607135E49AA6C62D9E16913710AC8B
7BCC2BA91249B0132981E7111A7668EB5E73730A4F8DDEAE362890F72FEC17E5
CBA23CCBA7C46C9EF97EC4CB14815BCA0DADD12A385F9D7A4389763F947FFB77
CFEA753712423B28D47966EF4C5B9D54126FF5CB4CE96735E2A986AA0247C5EE
233C9873FBD7F0F6618C375D1EC39D8686AD760BB56A3307FE78774A8C3352BE
5A1EE8E2F7F61D7A1F039756185623D191A74180ADD57A83A291E0736FB6176A
DB72B6710A1830B019063F2795E6016CDD809173BEE45874A85DB28D11049324
09748D22CDBE6D976A33A49ADD529258DFF1AD334B4E1C21A5C64E29DA8A16BA
35E920FAD0C6EF0C660B41F45BC90AA671464AFBB8A486483FB09DA8A1B2EED9
A6FDD167E6BB2A0C026A24D6AE64DD2139C552AD90DD319ADA71091ADD8741C4
9A78DA1665CF75241C9BA5DDD500A5A2D431CE6A471373F3C18DB54BF789F87A
4E818A6C8B0E844933ACB5535B95901A97C57776025123C2611A7A1CBC068B1B
7B069652D66CD401D3BE7BE92557E0FBBCDEC02899F55BBFB82224D0A736D327
29D399F25B84D08BFCC1A94E07D752ADF516A4FC5F7C7E4DB9555647677D5B3E
A4B35F6B1C4C99B59D6BD94C91203DD39A29CE50F3B48B6AA0816290EC2505A5
BDE5D6B4D1A566DA5913DF08F881A475C97C1D4D6BB4BFD77E50631119E597BD
A49576C12A3E2AF5DCFABFB73E415214B651705AB3AF01DFB356AD1BAEF47A6B
37980C709EBDD3A97357DD63DDF4C4F6CBAAB933DA90A4A5BF367CD0E8B93039
1C2FEC4C928AF65CE157421FDCD437CC1DBDC1C8E0767AC86C35F98E0FC0A30E
177F605FDCF2BA7A0CFADC6CFECE9BBF5BC8DE04A9693F8DAE96018F81C8B015
99F6811306D168A9E62F901A41B5EB821150D0D7148D781940E108C05C71E773
F108DB7F018176DC23B757BEC96473B78C70FD89B5C7658E7105B8DAE2A1802F
1265520B98D31D03B11C9C5D24A05809B25AAFBF0B66FDA8F2B984177D4DD9B0
22AB060DD372BB5BF2C282600B659D7169E589855D65DE33A74E38C40171099E
86B1C7EAEE1B61D563074B210E477ED0C9969629D18AEE99FBD0AEF4182C67DB
CFBAB37E828335CA7EC35948EB12F5D69C3A4EF35646AA81A14D0CAFD7EF39AB
1B996D1DD216CB14E165C16D56197832C2A6993B1B5820E1C257B18C32EA2A70
A6FECD532ABA4DAE448657C1AC07C40A7C00AB1157BF5EC39DF6661ABCA957E2
771C8CA81AC31BA105B48C7CF9A3D62790189180888CF1DE2F0A09C9839B1118
4DBF7AB280D1C1A2888EC136AACA9BE610CBE41D41EB632983F4AAF1EFD3972A
19C21CB67EDAFE63B4586DC27137B984B7D7AC7CE2521F5237F8D90CCAE0EB84
D5A1A07338A9B494D00393E16B713CF2C75B9AC5D8E847A1694B7C8BCF531AFC
918378CE55E375F4BBF8FA258619C65A395775C9C2088302B71E7B89E671A186
D413D7FBDE7AA59C41E3FC5F299B56CB70212565626C5878CE5E11CED8E2B0CC
22AFF09B4980F9BF959CDF706B2C357AC611970A2A064AD32508D27D311B45B6
1B24C7E48A21CFD98B49011AEDBF75E317422271905BC21AF9F82D9D172522F4
2C44D27B7ECD8A92B9ADAEC875DF487BC1BD18BD564463577DDF925CB4953FAD
47A021C9262641D9B93169C7A318037FFA7BFE6E902F0FD26E41459ABC60C681
A56E27BCB902A1C4DC155FB364A5901D5A11AA816D430B0462A53CDDA0D94E29
11D6BF8D7E344699D5A907085CFCE32B07D1432AE9D4333A94D707D85AE08EE4
FDC7F81EA2D455E6B7C387E80CC0678E33FA4FF1610CD46B772399F2C399FBB0
4C2A596026C5A3CE395E960D6D5329DA36D5909D78EA7202F83D5694F9E99326
AF71379249A03027BDD5C17C97ADEDD662A78432921D0BEBBB4A6ED177A1D2F9
7C1B2CCE0B17892E6A2A6819F9C924B1C4FFA25CB3D473E50CECDCA86C0743E1
1EDC471A97451D2BA4040283D6B07E1E72C63372D7CBC268654B322570E470A3
6194FAF39AA652E75AAFEA53E185FCDD09F6F82561DB3F40BFAF869EC9AB4B7B
D6F7FA3EFA63D81AC648EFAD89E591721AB039EA012AA960AA2A6E80C6B4FBC9
7F1F26859BC5F7B43CC758E1C6AF5CAB11516915EC3680E5E4C06C18FFB12046
591BE95FEEF98EBAB52FD87ABEB92DC8D18271BFB35899AB4093489BCA00759C
9F6BF5DB0C32D5666A00DE81620091526102532FDAC0C899F0A35E9453A26F3C
583B08C16881A82E1ACCC0B22C88224C3EE16926EB97F203989303132FDF019F
D3068C278555725C45337CD6354673E5ED69321AA3D0F7A4A39695C41F238312
B9DCB0BB0EFFE9B40CEA5614D84EE1FD7CC710EE0C422FC3ABA98DC54D51F69F
5746603A02F61874204A701E1E92D27AEE0923C6B4840AD32B47426AD4D5E231
8AD4CF83B603E8FE9E7C7D93E2F80DADE7950CDD22B80910306F7013A5BAADD0
0A3DB8670F8C9E3A132F0D7DCD5A9D260699C800896F08DC1D16067A80A51CA4
4623471CBD8BD3AA7C58CDA5D725D5F7E56EDCA1814AF3E19CD39CCC30BE2A08
1B9FDDAE97E7C84D6FEEB20BCEF8A8A1BCDDBDD2959F4586B6A4A42776D1786F
51E25A924AE9B7CCCD642ED4A4DB679EDC13BF0BF5500EECE334A01BDBADCCFE
71AE626ABCFAFE37AC2A7178D40802345A052A8526AFCF40F8116BEAD0470D44
9E3ED9D4044AFEB426ABB4DA252FA6EC2CBD7628DF0AC1DA7456A0ED50B329ED
72DF535532F2B58043639F49CD21277616809BF35BC9A1516234486D382779BB
3D2757573656577A7D50E32C3AF41C92808349E7194F2521B3D012BB7452FB8F
53B4AEA08D0F9742841878BDA3F3545F070D327D839D1E36155EFF652CBDFFC1
A6E1DC0660CF27C4F9B015D91BD48172F8F0C6DFC9267DDE811D8F451634472D
A46CAAF3316F585A1E077ACAE6F6543843CEA3AD1F600183B35B2EE7857E1015
DCE1DE7796C5B373D6D6E2A9046A49C0B1C78087140A974A137FEFAFF77B03FD
68F1B97F3546F5CB16A7BC7C9025C3914F09A8F4A6B3861222D6E162E159F903
3DEFC036B34B1D91A014B1A496AF69E0C20817E269C5253803F6134F08773A81
F68F5379C61925D7E8E65B477932BC50871B8EAE9D3318148BA5E7E25ED57878
5143E087DD23BE743D282271EF9E248C0B28EB35FFF9FD4EE6A3A121E29BC2DB
C3CB2AF43A213787FC6B78F589FE470B1B129F1F6299CC0C6AC52719AE4934CF
EA753D8F02A20479AB1BCF5F99F0BA116265015D5F70922A2CA6C33B0F482E46
00F7AAA5C1B88D9CF9684C697C20E63131274414A7DDF65BB8EE36EC51DE6320
A05F532BCC43BD6991A97BA000A70D4FE2123A68B0B36CEE502DE1AECC8C1746
D45C45FA1B215D653E7ED73119E2F4ECEBCECD7E2F3C97CDE326FFC4D9C266D5
5CE70FD237EA2F97D67E07A220D184698FA2E029EC3A5FD535ED84897FBC7E5C
A8A614B1A3DA174B5E92E92CB7FCE088F3A447CEADE9519E63D46DE1B5A6EBFF
F01D371F8FE2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E752429B985F23EBA0C9875AD055D8B1F640D10DB8F40BBF062F476691
EDAA1D05C5591EEDC1B75251BFF8576F1C9CC5C0E521392A2F0D5F869F8AA462
B3883A673A976328E1F0DAA22B80CB7737DE2537E7B54F5E1643E30046E87CF3
8D9A45A973757BC16CC50504033125D2A68A1C97CA095C56B3D62783960780B3
1693596869FAF5692AA8FA6643FCD7F55E72948D2DC55AFC5016FB2C48AF9D85
192393C682B739EB43CAD8C3FD4053B2D53CF911352E2BA87A65F8949B0B7918
EA727DE4A08DE07B71365B8F31103159F65D30A7A318C1056BF638CD20BB56D8
6F22ED3EACC46F750F405FAF96268E80A409CD8AE0F36B68AA8C5FD2E0E871DB
D2628AEC086AAFC9F04CC93440E1A8B0ACC1DCADB778837360339A25C08E3B0C
E768240F0E8CE9FF939E4B1A6365664AAB69761B7A9C7B95BD29B09B930B0D82
F2C39F9BC0B94E56C48DCB22D8F0CA6C633BE68E5977EB3D88103E4230C6A08B
B4FB0CDEA7D44636102D47AB90B92FA42243943EB3E77E6CC38DEDBB2DB8BE77
78936B70FAE12EB1E2913B766CA2BAC3FA555CBADAF2CBF6B7A216FC93470554
2C841542BC1FDB26DBE389CED193E28A19CE9CBA64FCEB47C4D9C7891741E0A1
23FBBE971ED93F797C02EA830678317452481FB78DFEFDB25A3645AD3979D2F4
AA17C624CAB35B85963C6DED262AED5DE92278F31B2E573FD86696D98800443F
32CF695BC103A3ACA687FBB3F42AF9C89123C719005844588667C3DA28AFA523
BAEADF7BED1F3B5D595DF571540D0855FA377DFA6880F525878D6A3D1980C7D1
05554ACC5D07ACEA1E0D27664F6DFB6EFF878D0A68604565D0BF75FD8BE023FA
36D164B7BE25F9F811A466CE04C2CE5A774EE3288A245769B7ED30FCFA10230A
D6C9E809341BF5E55E58F3288F7298D62092922F07027352BC7C9612CFCB7018
B3394AF7EE7076395E67C3CF9B71BE069AE6C6C412F86A496E7C77173A0CDA0B
CC46683C239700CF259CF668B9F5C990DE3196B84BE792F51E17583FD4A83178
989638A37897AA769D74E0B3A299DD94B314F9BAFA7217AC70D8D9D02544A545
F6880EED34399A835514CCB97938F3E012AF4D68C140C6CE231015D93CEFC522
CF56EDA6F3147B3861904FBF8BEE6DB3D2E71479CD3A02BE03C555B0808D40B9
53D2EC56876076A116EE7E81836676237F88C519F8DBF39EC35FE41D78CF1665
E3FFD09C78FFF428AC27BCF0318D0849935822699E31F5115E7854A22F46951A
51F24526F7190B18B313DC58AA2EAF631A48ABE394668C6F1CE9AEADFB56116F
FB38C388F96143BA870537CC8B3E5F2DC39F9B930ECC63475BBB8C5F9A45218D
E05C4E6F250F6E544D6011F65EF4808D3D0158097CDB6E280AA402229A6B78E6
AC615258668BFD3469CD663592BF1214E5EF1C116C4DB47B805E2F60771168CF
79CF10DC2DA8F2BE94869AA570DF2AA5852113C51CFC85C1E41516CE412CB410
BD026231E22A9CD0F664D76D385CC1170476B17BCDA45C640C583F16DA207028
0C58570A966383AA9F7CE59375525369CA6A559BEF0E05F11CA9C72A278C045B
1D2572EC08DE1424D2420D550177794FB3DEBEBE9E4105AAD34FF119AB2483CC
A034A95AF0B24B801710B398D9E9A95138859A819011423AB5921DE8EAC56ADB
58FB18C27A41CE503CAF2E7EA6F673ED5F34F1C1D20B609A152EDECFA26872BC
3C8C802A1517D9C6FDA3474591F19D573EB051F551990D0331B2DEBFA31B5010
3F6332290E522C15C69352124E1051A715399BBD1A6D3704BCBBE1FFF89E56CF
9C3EF605898309C7C3D20DFBFD10DF5FA30F409A76AE8021045DC09C95C9AE4B
4EF735A5414D985F6F79100E7045B930267F0EEA9BE820E13291132AE91118E4
7B8432BD1AD7A9CD912F2BFF83A2C4705A26FCBB7F8E45CB2FD9AA2EA98E381A
01BA4C4E31747123F20A0A721766F9D9A6769FF80B400B1EDBFCAC63CE15283E
72EC447BADD5BD58B053A11BD770399E31FB3B3D856FBCF6235BAD1F0D38E26C
3518FE6411F2A5FD4809C085AC2D60FA311DC99B9100C1A59CEF4C877053161B
59682BF5F2D85F2DA7EA0FE603D477F6E80DEAE0F250811BCC646D8CE2956C78
B897A5000D73AD32BD99B92E6E63BF8D79777859EC0F7FAE47F5A0CA878106F5
5462D3027DEA15E36AACC0E7349C8E60D6F2439E2D50DCB9D96C6C20D11266F7
913970C783EF6D587F638339D1E89A4878ED27E515FED0D26FEEE69602B2BD58
D146C077FAC71FD55A5490C89142F2844CB7E6352B01A448D4BD7A06D8EC0F00
E69984EC55E0B487FDEBB3F7FC3F4093CC6E13B87084E461E23A4D6862F0EEA2
84DAEA8343FE913EA90B9ADC7D025C2B8EA3689D75AA38B5222166C447B82E75
52DE05711B3883394BA9D683C161A48059A0463B17F3DFE8A73B46E913B99D2A
38E7FCC667A5B810B665519E7E1450E00BB9D0279537763ACA5F131550E83404
04E208B9C0B0A118F40332BDBB431AA70981E77AA5E5E76F43E730D9D3D047D0
B3EC66EF1D37916398FB8CE955E12D8A89ADEB1AE1EDCF91BD788D8F261962B4
3870D5928D160218A297BBD3BEA22E12E9C4197D0F3835C0942AD6487F5C9B20
C9A597910685A9BEE4CBA868D352ADC10A564782DF3BD57758FD145E769D4E88
BF43D19050DA58FFD64EB7B1D37BA13752B6C966C7A1397D80160687245269D0
F27E87B2186D931D624120B81967E58ABF5DD66AE39640224A518BF378B5CD26
761D1ECD916FC625A90EE8A7E00080300F0A05D265549982D56614814E10FB25
DA53070C2BBB4411D9608F4FF0B2E171820C734BD20399504F034BFE4C20E7A3
1326783358CF8D4FA48C1AB81741FA70BC0E0A4BBD104C7E5AC05CE49C6375E8
9F0EAB2B56BBB89144CE810C78D8CA02BD7CE2AEF79E27A7CC1D6B68A5B9F504
BED3487D1424CA82B8CC60A0156706987C7D0DB913F1BBF8A7B9A275E3345BBA
213B3DF67C4111E9564B59B724BD65916BFEEFE9BF03AF9D84DD2AB94847F33A
3AB3757D2C8CB688D50EEA68DEAD0613A62C3000C037092ED0A93F8486FDD39C
FCD0E8A6224BFA03E8C6D73F4B8F480327701262285C527828E5E203F328AD95
5AB433987B229534C53061C3350047FB20E3887F514B5897FDF225685D18D679
9DC141B7F6830D6771F1A3CAE655CA173FA57D400530CA6FABDCCB4325478D0C
93AC7EAA9DF7605213DEAF94C7281D9AC68D884E15ACA3BA68034F897A2FFC1E
F76FA2A69CEE7F1E9543904F1773969F65553C3469FD85B2F2F89F0E547BFBFD
F62A3E47DAA4EAD6D47F0305CCDB297C320A48A3655FAFC810CEC6F6D68ADA4F
AB5DD7F61DB94072B0AB8F1ABF62A78E43E1578DEBD2D05109DEBBCEC64AC700
4C28C4F0A5E3A003423B9958C73D306B2B4A7C67A95F8B4E737992642BD3701D
39FFAD94524A7752560FE97B8E99A12AFCCC5044D989BCAEC863BD15CAB7CE63
0194962E4183C3838D9401260A743447DF953444B29D7CB004560D0685F73E87
72FDDAB87125F419F90D165EF1C2A06A9B7500C6AD185B4115777C6BF9C24D88
653589B431FB84E4DDB650C2F783594DE6123D3142FC5C99973AF211F2A2A05F
5A756073B85FEADA4823BC1467EF2FC0E98A2BB28E5933E2F6E50D3580C547C2
54FBBBDC95998DEF2EA825E3BB2AEEACC0F30841835121B7A7D7A973F2EF67F2
795E6DD8CF55B9823AB2B15ADC328CC3AC493DE8C2F022EBFA14A2976D8E3559
B5FEDADF4E23A07F6C0E1387DD54F5C8BD071C4E9A716737B6BA413F846A887B
D1B3B89EEF73565F3D0D2D1E40E4C2811D37C9029692DF8E94F6FE39474EE13A
EEE65EC0E77188C18435A2E7FFBA595F0C054E96CC44F56301F6CFD2A7A42C7C
33C1362D901AC2B0FB255262754024729BBB2824C33C2FB07B4AB0E5BC4EF204
E240345C69F37D577CA917AA50C3BC9004C8FC0A5A8E517D39211861EFE9920B
3939DD770974B1929E48E48EB82274BCFE2E9D5D484DC7068B77CD864557E702
E4EB0C301062DB793BF0C98D7468E7D2C9EC10C2B121966B68222EB067A7E3C6
F0549768364D1935345EF4D1D5F8C6AE3C09162E8A4FC6CD4741B38836CB599D
F98A2468DFC2198D16044BBA796678C9ED23D6194A5CE79410133D40E5604C95
80910F6742AC40A7CB3E08E73FA1E15DD6E1179C390BC240DA061C9D539B20F4
FCFB72DD0EF634FB4137D55F76088819802AC0ECDE469085BCC3A24122DFFA52
6840EF5367946F3DF67C10B47377A99EB96C13C332632CDCC750FE6081ABD0F6
4DC19BE13680CC29CF0EF52F885E21F4CDF14F8A5BE651118D4F2436599ACD41
A728EBA6AA858A62BA34015E2E2F851AF557C8CF9586F5A809952F25B26C6557
DD62C2B52388A1B7B84A5BDD57BA0C39ED94DCCA571CD82C6E0BBE3DE5134649
8CD7D6DAC8936854A0E9B5873E0C43A98002905B196F919D54550933FC4B7290
C8C71C097F48AB5C03B5D053459D7E0ED44D117E1C942F56B51E615267D9FFC1
91A694BEB12CBF4EB3DFDA6A81788A92B5AE75375C8E3BABA0D234C04500AA3E
2F28C4863E4C426DE4581143A54D0EAF501057E3A9FF7B3D1A0671ADF319AA50
F054379798BC3C38137A81D75D5BE7E359EA0012AA5588403126BDDF5FC2AF9A
36305E36C2A2DDC690256D2085B1D4CB4BB93B1E736992E995B8A4F38FF8E7B6
0DC1EC1B6C746B6AEEC9D5B0D1C9641E59CE041594E0396A0BE7DFE162363F66
C0DDD904FAF6AB01A82A5E230905B36A862A8E30DE59B50522C8AEFA5451F931
870F2A99727DEA6C228DEDA6C25A88C4897BB9BFCE16CDE9E5F075FE4516E1E9
02D53E24B71DD4F1CC13482C48FD1456BB3B6710C69F0ABD2C8E0CD7C3900863
69D35D3E5A083C3E86374A2EA8847CEAAD3690C5D7BF9EC7DEE3705643B5F064
C6A8ED4630A58A2C74FF212B0A35CAD73632F8EE978BC33C8CB05AC2BCFE82D3
29D3A95F82D98F5E335A3E0F3980CEA094E6903FF9BB24FF67FD9F8598AD4F75
1527050258CB8B3F35F8ECC07BBB7E68F4BCB0B429D4AA25A2EE0287CC9B31D5
DDCA74AEC3B0951BD68B348D9C3656853E002ABC509706C00E045DC552B2E5EA
058D326D17411EDED514F2420EB640B4AF9CB0844D53C5BF81667E78A1837931
98838A2416018B583A55803F83CDACC6647227DB9302337CD98D1FA385DA5005
A64EA3E34E0AE3F5B34DAE23DC67DFE7BFDA027A952ED903E7B54769B3C48544
FAE2FEE14143654B5371B4E2EBF9784F8835D49F4E72B78BB5DFEDDF9BA465BD
FA74F2FF3B6E50CEAD45ED2C0C24E1B13B03CBA0C37EC251BD452805722C04F1
9A3B3C950F5252385EA3E898611BA9C4C8A5E0A6AD4E40D06FDCD6EC46527591
BFB94442A0146D8F93A35D8AA216357D0F96B8C07983FFA8FEC41B589A018331
D25E5B0F594F5C418739003766FB193DD7B97DF0F9A11121F9383E9A4D7A4220
2DCE9AB3649C01936660D3CB62D4FB6261D9D30EB70B6B0E91590635EADD02BC
13F010CFFDA00810855BC4D8EFF39ABAA0D3138F5E51E6484AF6EECE850DFFC5
2F6B458208BEFDD79BD8C4C6E6394AE72B8A73A9D1D8F443AAE0A3F0C050249A
333A1F83E14DFB045589F3D6D1DEF71CD3173441F1C3E12B9F46F91C415D6C8D
7FD5678AE5C1B8ACC9DC66783428D06E458F96BD48CCF7CFA30A7E12255939EA
6CF81055E5330CC27A4CF7A4C462D94D7EE9B48626D5D425D0D6058151285328
89B5CD42F763105DCAF788648D74B078ED080E3573D61FA865EBB3E287937147
C9BE9926DAAAE76BD43CBF626B54567266EA2F4411EAF07AAB49611D7EBD8CBD
F1F5449C2169315824D0A6BB0AD8D5662A85EE619178100F6F37AFB159DC1265
4EF3FA2D2446A2E1F947B15B3081FED4A12C27B85CC6A3E545A312C95C6F2627
0159823B33BA57612F379BEDAE5DE173B15C5200882F03A1FE6FA61A1B3F4468
7041F37ADD6989E85FCA21B588ECBC54F126834654AD20853F11A6AB840852C6
9B0516458463E8C58580DA921CC84DCA9C4DE27B681970483A2A2E8BE06358E0
BBD553D9454EA8BE0A8587039B95A5A344F9EDCDECD6B5F6907657BCB470A304
2A3655D5DDFA9138E7C6E4B118CC665F4B861D3766A2414007C963C65C70BCBA
DAB10AE54A0DD44C28DC4763D04D61EDBD52292E6028414C7FCAEA0A7E62E4DF
D5645313CBAE9A863ADF8127F1FC35DB9CD34EBC684818AB259FFC315839277E
B107BBD3E6EB771574CC29C1415B4811FCBCC2EA6AD5BE04886842418EA1872B
C169F92A89067878C5ECA2BE88D881CC03929299117F82FE4F8D747109F2BC54
9621EA8FAEEAB5E745E5CAF9DD3087C4764D41F0F503DDF0F46C7CA67023CE05
2E3296ADB222FE2151E375731F47B6018CF32DB1F7AC0478F0A9D13C11D38542
D397B3D34B2D59D4B2A379AE1347C5A1FE39542C99525549B30ADA383485030A
EE93AFBABB827D996E563EC2DDAE9AE9D984422D428200823D674B1893F03384
89663E033545AFBF576377A48059E6DECA5D00BA874DF5039207DA39BA7C9692
6AA7769E7702305CEF74EC07C03AC9B7D8328977A2F5D9D63813A994A1F9E8FD
54E8D967080E1EA0527DFB9564EBAFB4292516657B11080A1EE01CF75C43A202
003126983D7E5049DB20BF5BB1E2D14E3985D2D448742631A0DD067F416CBD96
D8705D5108615DE881F53F51C9B0807122846CB7C7A03548AA0505F67A6EAB2D
85E1224B6CA124989F106D85DEA26E8593730FA3F6156B914FC6D2FAC6B2A4B0
C95CDBA6575225199CC9AD11D7A028153A308601BB35995950CB00A5EC95FC4A
76220272D548D05150B173C7EA7ED2705E70F62B7A1CFAFDEFA9CDDE6ED5B7A3
31AF7237DCDC2483E367DD892F6347E5FC21295B65E2A540432B97CD7F69F767
A67AF3BAE02C93A4D410EBB91EB3CB214F4F214DFD130D697972BB11E9F0FF45
52233B804496666ADAA0D84BBC6A705A9C77B52181F10FF86D3D7B07DD66C717
D9F02BA4C1F8B3B06D204AB5CC3944DEB241F1FD9A5FBEE5B1F2620B814FA2A2
2A70A7204D9E9FA8728D4BCAA70FB527B440C0CAEDC181359BC2D4AD8C286AE8
F24B4C1AC770D3C56ACF5456D1E1C30B2506930DFF22B41D6C75698D18ED153C
F2CC4A73C3F5D62536119B5F7E15A4207DEF9096D27D3D6EF2322CC7D54C426D
3E520704A5B0FD809F2C02709DE350D3E39C9D5C62A298B8BE48AAF79E7C22E2
D14BDE2BC816B49E850ACF32FFBFD9E8DC9D45873D43E2E654A41B44A22874D1
9630E3FE3A991D494458B14D051F8573328804790A03D98CFC032242FC6E2627
C754B79F4601DE1B6FC0D6DB7692A30B21BD669D367C6FF13C336537B67F2357
95800CA8EF1DF18B65A82A1D003242430EB6FF1DBE8C3D96F2BAFCE65EF058F9
C71DCA9348746900FE665375E9C805A494EFAE4CA9986794B83227FD4117B279
84A141A4B19E695AB476FEB72F3EFC3DF5F9C35B0D6BD335FECFA17526833025
71A60B1C9951D8A457A4F1CB344477D7A6516133299B927170DB0EA31A11EE76
34FD75CAEAA480F411AA4C4BCA1FB7AC7E65D5A5D8C5FCFDB41707B035520A5A
B0BF40C2A15E2F739D73D4931E3263E89A0CC83FB6A41EDEA073E552117442D8
02DF52CEE62D333C8680E45FBBDE9ED6E7F01E5BC22E802FCDB0BDF1E2A8A533
CB7D6E917D674EE5C046727F6A3F7C7EBE4EFE700BAEF06637586AF5185655D7
1592270DC46238DC0DC4515EA969F0A1407C8FEDAB69BA3EEE3097D5B123C627
7CCC673FAFA4504EEC448C29A8F93B36FA63BA313949DE5CD8790A1CFD6359EB
FA90EBE9B7BF54177F19A68ACFF812AD00A931626533380BECD9A77158110E3D
15561DD6C244D36FB6F2A10673088AA9391CAD3D4BAC7001265D89C2F898AF58
91402BE5A4F09743FD2234D37A9E63527CAEB1EB68F8C5389BC7B4DDB1BE711A
8FA47CD65AA53D6253DAB94B98B47A204F3F6E7362DF98165B69189829176033
2FF8D4A862142B7A895F9DB67F41582D0C817460440E9BE7D223D4E55C35805B
79260E90985DA5E5B2F43DE775602DE15585DD5741BF8FA5615C67DCE3740E00
9C06CE3A8306780B31793DC3588A170E5A20B20B7C7E7B74D4B52F2C03FE2C63
B1708B7866DD9E8FD9C6F90676BEF9C36E083C0034671A4E268BBADA4583A16C
3C57DB5F72093F76F9FE0B6D85C50D9B2C4875701BA03B7B042C7E63292ED9D9
954D71AF0B943E3C6B83B82EC62BBD305B6488B4B726AC41950EE2F482555BF7
40EFD19B8552B70046123162295E5C1B8D5B1F8E0AC21F2EA065FA879F533C36
4C054BBF7F35F0B627DDC5FE2AA948AE738E07D7CC041AE13DDC40D378D93B05
6E4D96B1E598D949CC0520E4BC324C436303E25F013D1F713C24FA7BFD9BC3F7
7A89F8EE67FC86A86A4DE5C59198F5124711CAE1F4208DDE790812C4251449DF
EC70677B8B3BDD77FCA2B98631869511DD652656AAE94C7E3F4E753906B3088D
008D7E2A999F4ADD8CB19C27CA6B1929BCF6F52BAD537EB57E6B7B0934D43B9A
24F5A9BDEA3D6D9690B071FF90E75A9BD114ECEAE9E2018FFE5B97E3F9B57EC4
71115E3B32A41A879A41C90FFD91A30625AE7C9E1E3501BB5D739AAFD4DC3147
EC63E3179574E6CCEE1FB1F6773117ED1243332FE1E3FC91864C8AEA7916A726
F924AFD84BE27CC51890A13715B7B5CCB828EB08D9A9538E1F48CCB869DC2181
26956CA9B66DC23FBDDBB5FC550068417C156478E76014DF9C546D9201261AA7
1B05F2E629B6BCC46BA91937FA1C7D5A6E4647A70CB32D9A9EA2796070A56B4C
6445370A3F1E0AE7F74F1BB33955864E470E9A2911FDA4C818B0A3812B714D90
25814369FE71C3906B189C2DFE3DFB24004666BA8435FE10EC622EBE16E77DFA
1ECA64BE4C153AC91451F122BDD5C724CB802334CB2B38ED365FC4E08FE4C042
56827F2B19FA865D6FB094DC02259344C0663016BCCED66A698E664B6E422EC3
0DF812D8CF9F07F4974D5CC9278E3D3982E45D21DE1CBD7460D2C4421C6507E4
DE22C24947C312EFBF84019CB8AAF309253549DE00B8A092ED646F3CBCF00FFE
1C981EB0122C3515BF2776B5B833FA120AE7A81C64AB2F20E7735CFD4B13C2A8
CBBE519A8F57C6687AB3639219910900DEF856C43D283247162C392D23E1F183
C1602259E6390F359CF18F039F3026354F553B1FE5366C26CD0F254CD8A11ED7
7D05FCB64F261AD82C4DF999CDB8524EA0501EAEC5D21617E9E56D6801FDCB62
45E566251AAFDD0A84155B62410DA5D9D10A21CA8B7001A24B5801BFF9879441
A81C2BAA74E95F79507D65838598D01F66D7743E3C1CB6D013DE4A201A150213
ABB82438AFFB084C8D099A75D89D6A89E962E01BCEE4B41F30351159C5FAB596
0A2E3E913CC7EF0A07843E37CFC27442EDB3DD9AE5B2B077C4245513CE965D1C
9B09EB62FFC06C3233AC20FADB3505BE2B8C29DB3630B72D102AD6B2DC9BE98B
8A5013F998D83349B69E4DE0A3A861D52D8CE2EDF98FA2196ECE13CB4F39641D
55BAC02180697B632E70F6162AC51A6AD727D9CA308F7CC9136C4A2697E6B205
B84A93E0E8625B0B20EE9956DD46B5F29987154433CDDF37C40FBE2DFD422C24
88533E687A6A893A3EF3E520891FC807DDC7F0A785383FD58807C44B06016EF5
E2670A911AE147CC5A975F2D227CA2099AF1EAB3652298154CACC3799A460355
1CD8693A9561AD2C3F9B967073ECAC4D16FD02C19C53EA68FDE62754AEB1E15C
555EFBA2673C30B5F05769588A51B7C7DEB9B2DA73C980DD021A3E7FB37914E7
F6865A5857BD7887CB412AFD0CD0D3B801F1D8C20804D0BD5A355BD413124FA9
5DCDFF496A3CE03FF9EE1C4293A042586C7D5DF306BD03A705FBB8CD4CF8552E
C4AD3377675F361966D3B408BCDF573B3399BCFCD4EEBBF072C05BB0528537ED
B6EC99C678D7B0BD195F64242395E6C807B7D00E12CC9CA7119808470C816ED0
40C9568CC2EFE4A607C3EB4A6C06AD5B42B5D23573EDF7798A4397FC6B28F7DF
B72F5895A6B90B644825822602693C071225D0A59742608FFD38593C0B0B62F1
8FF86AF9B2A5B3E2A8E7AD8930C9777AD0ADA879F80A06360EF0D88095025D7A
154E7FAA68EBE49A2E3A88820DBEBB45ED454DF0B009FEC9F8CA76F86848C234
80A51EC039AF5DA58C53421D968C241C486AEFA944578E2AA1237A2A3B90C01A
3A170BD2F9696162D5E63E7E88115812329ABCADAF9CEB29E09A792E33194C45
11D355D6505C4BA5C2B8C70A6D14DD9D06240C3A8202B516B85B1B6F95770B36
4CF19DEA920A1DED65833D91D80B3A2E74C601B6FA29471DC34814FC81A1E1A5
155BCC63FEB9B8699653B19211BCBB496DBD14540A1F3ED4A0D2D2289389868F
BB2765D46E6C083F24CFE6F8EA718DC0BEA9DF0505C07E64B2D4509D1270CDBE
FF01A02F73E4AADF530E5F627D5E2622D22B75FE01501A8E798077F3E8FFBEB8
4FF65D8ADDDC0995B117009E9EA4FDDAA722C42CE1633636307C390FEA9AC478
5AA1A2B368D882D47B079F4B1FE2A89AD72D1D1AD2BF8BC6B31E4ADD66037947
0F5503B71479FD9AC22E7818EF7BA8071981235D3BA315FF9A90DEC4F7AEDF1C
70BCB7143D09AD2B02537883C68E63FB3ABEE97DD7FFDB55C192759CA1522E84
352848F0D8B554898FE557F69574567035ACECBF269F28F1D239185EE1A37965
5DC7A53D88C875A3ECEC139011AB973D1FA615381847E0D9C2C341F89804D41A
92F9E9A685CFA82CF91854D0CF8296ACB49EA77AFFD22E1DF994BC1D8766A4FE
FD11336E9464742FB50998164536E80170B3D870EEB5E235C61E8556A2D58B28
35797C7E3595FB04365CD4B4A5FF216BD8534C4ED6F449EF054923BF1A75C78A
77CE2BB4368A7C8F48639FC3A0B47C30FA6F1C1F12A645A8906E524CAF38F561
3DDA0C40452B7BC5198F13F6752484F5267DF6BBC18AA3D72FE1E9AD1EBB1FA9
612DD39C767B8F89EFBCD72A65F33BAD7A6FA660FCF496AF0126C34F7ABD2844
2FA10081266BFE61B392213A1665DE12954F43E5359A69CD68985E454EA1BFA0
254541A3FE4712B1D0739BEA5B0586EDC6E7D398A4A3259B2FBC52122E797484
9DD398C044CB32F899B28978BA54BE9B8E6527567AB46EB843726BCB26A472CB
E0F562A8FE056259BFC7302C7B37A24544943A9592385A58EADB30BCFFA3A71E
F23D13FDAFE726428548520A54B9E98555507F9422DFBAC2EA874D558B0F46BE
400489026F9112209530A35FC6145232C379D553953D4D6E37B73BCD2097A238
5344CE80EE7389CAF1DABBA08F26D1F1BBC9C69DBA334DC3F9D142055B258BAA
0A3343328794AD2EF7CF6103E545E449F08C2C5000002DEFF67A83794C228F06
268D28EE4DFC8498FFFE101EDBBADC899FD965FC5F9B44032D116A0664FA489C
07010A4D19BE24358EAC006A594AFCB839778FD0925E2DAABE76AFF3895D35F7
EB0263EF32316CD4DF45E5F9969A64D2087BF2C952C95AFC8907C102971780D4
F48B74CC49A8E0F290F346F585A48F89006ADDE2E437DCADA997D6EF8FA83F21
F171B38D2554D7D0F73C71CE4123BA815A541228816D66B7BCEDBE1DD0B5D560
DF7DDC6F3E2CC8DF4B1974A485BE3CBF2F8211576162D806F8F5A1C1D177D775
17283D56973D8E4367392BF6C1150DEBF459D1430A1156887D508BCF6743C363
A295839A2006DECA4E4019245FC498CC9E2C9F57EF881D478600C807DDC7F0A6
DBFF186E0CF93660BDBB489FB5C5BFD22467E3B7B7EE237B9B568E4D43485B8E
C35101546D1C427FC2343D5A450F1F02A00C87824C930916890A7F87C68FDC79
40E1976C329CF3D929D1CBD7B767B02D64F2C1E338E66C7565A73178989638A3
7897AA769D74E0B3A299DD94B314F617B0AA8636673A031C4EB0CBCA8FE2C5FA
3DA9FACA8F6EF0477B3411533CA4B6BCEAF16DED024D6F0F00ED5F43BE417CD2
272ACF936CBC4892BC05F7CBBF38C5C71CE9508502215C8BA4DFA1E72BBFFA5E
1F1070AC2FD21827701F493A3471A97B87D1E05B7A9A4375CEB76B08B3D1567A
2F0F53E5FEDB788C961BC74FFAE2E26DC36957118C184CEB4720D0667DC444D6
342205506A827D221284F6EC43320D24867624620D636BD5D74B42B03888331A
120B3C03CA447409D52B998AFCEC2BF71E56683ED7DB6AE6CC86E8B493367C1B
AB3BC0C3405741CAD56CC323E27EFE633C28A2F142B8069EA0BA7A8CE3B177F3
E2FE657D20899EE8C2CD56668F756DC5B9CF1C87BB99B0F572ADCD6196E6FDF8
2F6D92A3F11C7EA1FEE81E0CAD6E0176F8C33FEC0D845F72BE9148067BB63A96
7715BDB13196C1F9E3792DEFC7E4FD896A6BF9C11AB86FC57D870C2A898CF32B
AF2418E0A1FA6E54E2459EF6283DCA26FE46A3E94D1F36A6BC7EC8DB829A20CB
5E8460B6A006D9A1DBBF135E5217684A324892695EBF5FF93645912252916866
AC87F7EF4F0B7D32F036194F88BB05FE4FDAD91E52FFDD417F70C6497495901E
69E4E11B9A33C0F9F52DC619649FAF3BC7D3F0867D1B8D78B9A9DE9A12964E20
4506038E76EC13C6264E69B55D1971CD1648A3EA84DF0DA98FD84AD4180E9931
72DCFF4F82A8D7AF737C90793784480596E2853A9922271DC7E6EE3F0F61381D
F448337E748995A74E9D3DE60DE90966B9A2828B34A8439098D4CA52DEB18C09
43A39B48A6A3F499993F122A7C3FF2C0B823742B9547BA97B2B014E28D06053B
074A46B8BD32FED7F47AA7DBE8B7B8B305D5BA7EBC2EFFD73D7D6E5062055043
0364C88A1DF224DD3EE5110C01C88B995EEB19420CEE8E6B3A012AF00EF8A7E8
79A0699422B5ACF8839490203560EC53F1F43913282D7DD340F1D17821A60CED
6694F025FED299C4C7F8B077C2DCA5451621FB80D7F5A8C0867333FC6C5021E8
3D0FA04C35C92026F58D771229C2A3A491455426500E410A707DC8A906E2A104
0FAF2DE1FD6AFD5FD97EAAB6149568942CBFFDB730DA86C9CA2049211DFC67FE
F43680759C51BD922511CBD3F7BEF02A7AE18CE511645F9E76EFE6A4E5142F7F
563FE06CE01D7DD7C58AB1CC518FAAD04036B921F4F438E85B8E1227FBD0ACFF
B73441EE4F938CF5B4B167211584805688C232D2B236F56713C8459A2E1688F1
8C8FAEF2476515A41387CA09174006C8F2125DB17B3D9DFA26A2CCE2DB8A2564
80528D81018CB12244C09C7F04BD4B435A2949159C47091A0832D4CEDA6CF080
3DA32AC59FFF274B4E1CA95D4E35208026AB554031EA626676E2B23333ABF27F
E159FEFE89CA6E88F43E2C896DFD2200ADFD140853F2198A7B94581352748E70
B4C8D884EC1E317C38738BD6A91FDF9E1CC278145AA01E784F4B7437D9D11E55
BDAD6163341BE08A9EBD674FA753327D5C551D372AD585BB4189795DC7DADF2A
16E3969C22EF1E99918B82D8BBDB1DCFE65325453720F02A01A0A01EA5EE013E
80D4E092D8B192E25D2306A9907DF8E4ACF178BF91230BFE3F36B8A0F98A0CC8
00A501580CAF3E682DE610C064F95504C55B0B33BA921D3E005374767F5F7CE7
5AE288A81702B5D53D7FA71F20E220317B969EEB12F0F3C38F09982D6B98C3B1
29D4EAD3497857296A37B24010735A44F6756D5C26BCF0BBCD7D2CD30B6875CF
574645944506E6C1971441D40B4705A4725AC38C758E1929708A7FDC84284E65
9A64424C224F213FE622F66193ACAEB8F43BA217E6E3C8F19577F6E400F8E6B3
AEC96C5154A211D8F0B67EB861F1B4CCA12CF4B2481B3AF7941839F600F61C14
247EFF780BBA3E5198D37CEBE65321CC28D856E1923E8FDEEC710B6CCFF25048
A50101B31594306DFE612047BEFFD06259B256CD1A08F62F59701387CB512AA6
4E156D060119C53CFC33D924B391ABFACAC4A7034BD05D83CFC244D7DB0CEC69
1FA2A16ECAD386E57CA1229401BF634D445C93FDC157796BFA501BDA5E11432B
F54C80E629F3306A5183BC623F91A30EFF36847B83AFF2D45661D8895227166F
7AC9B7A2D6B0685B5F52A799C9520C13DFDA4E1D95A677CAFDA9B34F82870B33
FF636E46D8D00FB39ECC497F82E037AE6F79722F24E6F0C83089B39ABF01C9BD
A302A7C5CB636C5B8EBCB663D03AB336534CE24C80F654A39D2C5D50CA53100E
FD8CC5EDA3BDC42B5E3363A031F994326E2E2EA92C68256FCBDC8CABB9120CB6
FE9C2A2F5E9385BA8C8D970BE96B57C6BD029C1FD1E5EC6983AC6A3611A50469
355C547A3094786A8B0306926BEC3DB7FE51F547AE2231A94B2E3BD35634D69B
F594B4985F9921A8F5693E165523E107FE7B8A181D56098BBF17532C933C63DF
D348FDDFB28FF3B7381972A2A314542D041A7F548020D1E13D577E99942B3C03
C01091F2CD93AAE0F435AC4FE8C59460EBAF6E9A2C69F153AE233488B2D41B81
2A11DD57D314821961FF7FB9CDC8E87628938D6D0D86F3813393C32D4B7752E4
61D1634D57CE39D8E1DB5CFB4C451D361719C66C0FAD7DFCB05E178555E23144
70BD7E64EC7F6DE2FA790C5036965090789D4F09309A682485948E71D8AA8E18
3D32A58D3C67AD87A413F6D9746B6BCFE2EC884A6062D88DDEAEF972E7B7FD99
889CB9DCCD3FC71382614E97A63FBB1D5283638A1D4611412ECF92AD53346B01
9600E200BFCEADE1C3F126403EE4357A421575227243A3580AD2166D5588B879
53B6F26F9A59A24C096740FA39E0BFE3DF69B3BDFEDA4AA2F15003996D966AE3
36690BA3B1DE132F1BF1D98869BFDBC9E1DDE716C4A4ECA5EB3D4641288A4EAF
BB2D88DBC81C63A31172C84CE34A34A31AD7C1FF486172439C132B32E829D10E
A96E906AF8AE583976BB788E9B26324FA489E2DB14A9C2E1989F739929DDADA4
13EE35894A6A5B14CBB136548C4EABB7D0FC6951D6EAFEDF7F0219F677F101ED
C73965156AB1684B67355C6EB30D38D487488A571F1CF7A9B703274D1D2BA57F
515C4274980E7F675A7B7D4DED551FEBF9DA9B74149C5F5242D3CB253C36A84C
C837D76B2BA6F55B90969E28179AE774047799C5B210BAAAF8270E06A679FA22
4A7914720E92784C5E7013ECA0861430BE51BF449D78D26D45BEE77B40CEE6E1
91449727385DBF13AADE5FB886582579C4C79A9FA5263AD720200C8B45797B77
8365EE6D09B687A7BAA7F4034FF97C512C2C654E48B5F1AA329748EB92925841
6A34D1F24F412C71012BFCA5CDB0DBC05574F7670085AE08BFBD0425E1C1A554
2B64E59E603962D53EC890318A5A719277FAF74DEED2A577A9A853C1E216348A
B87B18A4184C84556C0476B9692A3E158A14C9BD02E00781B20C4C6894BDCBA1
0A671FB87D72AFDF3784DC26B85BDDEE6500EE00260B500A8CC9C3CF9CE8E8FA
F564CCA85F904153788A60AA13D40A3098CF87A13A3A9771054905A58B78CAD0
93CEBAE417DA64D57B60C7293CF362A457B088E51440ACAF6ED0BA1BD39D700E
23CD325C78530B4647F4462F88BEE48CA881A6FDDBAE549A9D225505734F3063
FAF5573603F4AD0332C417D00267153A360C9C943DF4CACD39316509457D91F3
EA13D00DD61E17CA2CF77ED3B292249722253DCB14691F49A35FCF65E75B62BC
421FA4BE651A89EB90E471909ABF20831F14A4AB4C1EBECE6817C2445847672D
9EE2017AAC954B475794CDED2A909378B4CAC96DF22D89C52616165A957C7320
A3EEDD3ECE213A88ECE07F08A33AB3174FBFC6F9C7A1C152730C1D8440079B22
D86C901AA39F43892E8A048D4852F109980AA82C17FBFBBC7EB2A79A3F6940C8
4FF9FB6D04779D33BCC238170CEE768BA5B6BDD6D1510EFB6BEF2419CAC27180
9AF6881F745EC71298D454AD31AB998F5821BA8D5EFC849CF2523466F8951DB5
2E0D848C5D9668F6CC33A669943B050CCEC5C81D68C4D3B152F038F5EB123E99
8F8DF8C5DC9FAF2BD300218B871B0C664D7D358832DC2EBF75AD9B3A8FD6DD71
A2E65B910EC926E163DF0C8E6BEF608ED8C0CCA1AA89BC749FAC260C74D8C46D
BCAF08B28948BA1CF20A7D9742A313808A4E2A5376A59551151B1DEF75DBFBD6
BA74C8CBB37C2C32F5199ADC2EE2DDE571E719017EA98F68A6A758651C9C7836
06459035B1A053A0CD7F5587106448F5DA78A50E7335B7268462171BF8B3CA5D
4EE6A4D57A2A7CBF71C2C69ADE2720F820C268AADBC7E205C4B0C7F6B37DD8EA
873AC7B461E0FB63D7C1CE62B8FF3464719921759EB7E16817CD828E6DB40B86
A47A27C033E27BAACC781BA725867D8C47D291939025EE8A893CBCA7253321F9
7335C146E8728C97F121DE22257D3E0CEEA4F621863559ECF18A145787095ACA
9E34C4D5D19DAA3659E94AEA1ED089B745F46FA84293052772E25640AD5882C8
22D0A62EA4BF4B9815496EC6249D1BCFFBBC1FD5A2BFA8D7220899B0C52F69DC
8AD513F477F5B1F3FAAD22EE97E9ACD739C7FB99F84A0DC099E4029986351A93
3945B2EC7F97F85041AC99375704512FAF6441EC6B325E9AF8F564D7B8E1D54F
FAA48E1B1340280E3BE72BD84C5F8CD8F7990ACE1D8060C4D66045C07AC66FDE
C8191328FA656FCC9ADDB20643C331FB93604EE80D2022F43BED8BF8F8BBF839
90EB6DDF34E806EC15F27C733167B2CB7DA20C340ABA91FF0B3C926798375E3D
0DCEE7B30CEF41E2E467ED1598A88BD9A718EA0E0C6AB850B537681C8A183D51
15E1DFA15C78C8B9BF6418872E1A7179F318313A4B22E0F8352610BB50602212
42312E0F84FA676F6B053070FC80322FF2AE994ECCF6D666A0631BC0D90BCE13
357A9C33F2B88946B8FBA556C78CD9A8CB5BF65FFC82C93B688C629CA4E0E6B1
A6E4517380D6A21069AEF6AC0280E232C2C6FAB88AF40A5A3083845E02E4DFE5
C62A3B9235012BFDCB90BF44001FC9E1A38DE892779F82AC7F982A37E102EFD1
1035073E7B4024F1E2FEED95938091A6D9A98012BD1A7E7A692C50016341E715
7D4CA3BC6E18BDE97677C4420AD72BD1848632F164C3C48167E1BDE4C469FF16
A95EFFEE256D8A498D60EFC1F43AECD9843A38C6849B3F80E0579035A7392E32
4E11E1B054FE92E594FDC7C0D4075CF54B00AD99E6688DC14EA2D04B43E74E4A
4C57F143F1EEA780EB8975DEDEE759A2BBCA40C811B9D857CF8E510421C678DF
352FE7DF150D49DAC406FCB523E307D6F3EF5B4069BFE355A488D16644FD19EC
823AC0B12484B990904EE25F11578DD6C01B4DFE6692ECEAF76556FADAB20FA0
C9EB5311F14E0EAE435576678939FEB75F5F79A1260B0D4C9F379E2E2BCC3492
4522E5E57EEEC0D6CF2397824CA64C2FE592D3D2562976117134B908018C0C1D
6B3D0516FA6B8A956FAFF497D0A06EED0BB145757AC66E68407A98B49758A0C3
DA787252DFB2A88FBB6A50B2170A3683C945299505C8D1E6E9E14ECBC7453C2A
4E824433934B7CD807067BC59154AE995A6EC2BE659752A87B1A4587FBFCA22E
5B52B15876459EE3E0A81E7E7053AB47CF3422A28B02719ECB4BCAE80BE45C8B
8DF50028B3D138C47DE997E59C3AA92C75F308C9CEE6377DA6340E1F2FF7ED01
C3D1F36E5627D9B5430407301B6B285854F9D9740EE5292610FADF04B4DFCBAA
05A978845D3946BCC044D0F3B58D299E6D6FF277C3A92F649A515CF5F1C05B12
37C7D090F5ED1A3DDA29DB81DF4C63C939478D23E48A74F2C72F7E683E51BC4D
0556B70F5C3235BAFAE14B1DABCDA48C53E38830CC123F96188F8C3AA5DB91EB
15A555EF72EB2FFC982B723B03C7DA09254CEB1ED7FF0B042077A440906B3A5E
3552727E44E15B0E20F80CCA3F0CCF48453DFF5D8A63C997E746782F8952CE64
DB1A2CDDCA6195924F735E288084E4CC0A31174D1FAF31BF270584794879D000
F09BC260857D89332C547D80A6E00B5D1E7A93291A4F51A2DE387309A776A41C
777BB65764B2E4FDD6AC85D4CE908AFBB20948CAA98571E34DDEAC3F005C2479
AF6E3ECB544654C43CA7BEA5B305B1BCA2F2E2B63C2CEE2DC1118746EEA119D9
804673924FC20C14B617A5E3052A639AF351AD71750A793AF049CDBACD76F8E6
DB6C19A96D1D48EE4A4DD94D6443467C61CDFECEBB633047A71B47C10DE60A53
9D5318632ADEF3B53DB505146C9ED531C8D4E6311566E7D15757A855E152CECC
3A0C691340C0386A6DC15BD2B6200102AA4547EA96D7A239C59C75D7EE91759C
3938D9B4B29AEB82F0D52651AED12E5D6E0B4AC574021A20B0824BCACDBE3FFA
AE34279C77AA381C56776D27F95AA3699C2AC31EE36F887D0CF61A575444B311
80850172140989A9FDDAC13FEAF57217EC230CCA301F89A1016CD4B9F2A1CE46
3A36F540B77EB94DD1BB25D299CF802693CFFA52B2759825CC4836DD015B037C
08031775B8A3071249FF69DD34A0A93BE91F9745A63AFEC3516B02EEC17B02B1
5F64E9D8CBBC9C0FDC4E1CF1B461902FD93DBC0D7F761CD182488177A8C8F976
CF5C51A6C359759C75A913A4D0EA726F37F298CA0E62C7FC57FEF5883A944605
58B7B286148B0B2C7F0CE1B0047D3F363484B4D38E4D705FA30020531CB6144A
2335488F6DF507ED89F4910F60A54F8B0C89FF42E8D7F537C6E8F80D643FE1F6
842A12ACE2C2A7C6A8B0EAE23787C01896A15569B1399AC522F6FE012FEFD781
A1C8714E87DEE3F0D46F807E5F85BB3ECCBDEED9E4E5B5433523F1041FA72AF1
DC9E0059D8B80003391CBCF8F739F5C9D2112EDBFC622CF8AA012136C2902593
E9D5DA0B04C863DBBECD30D6F2B0435003A83E4FF3BF6D0ACB532860A47475C3
065F247F376194D68B6EAE333A05478372606C334C6ED4CFB28898040067EB31
96E4EFF89F66AA2C8B5DEEF74DED1D3FBA5D2686568527996089953E74BBFBF6
485130530E9E8231F43AB56A939CEA08AFA133FBDC57CD092B3196E0828C097D
E4B61F61188A78DBAFBA196652FBBD2686325A25DC6169B2C81A8E5D91FA3585
6A8A7D1991897C4904DF74D18A8CA65BCBF174EF594812E849D6E5454AF47970
7A651E8B0FB5B886111E4913F65D28D29FD1FFEC9624170E1B554D5833833818
FEA5F5ED726D425789DD14673AB886FF1FD4C383E278AD4CFA8AD9F76CBA1C68
52B842F1AF0ABF711FC1341573B32448C580B2C9E074B1AAEB28ACD9CAFBF1CC
B880D75328940A7768F267E968FFAC3E4D363F8865241BEE979F68D560ACF141
4BFB9CFEDD63B543F77216CFB102C677042923D302BEB0A56744230E209F25F3
EB78DCF158C567E3C11BC5503BF584C4D61269FCCA065537BC8AB47A33900622
0706DC806409EF7E5BFD966C2815E1A1DBF36A5587761AC21F5ED179AC834CCD
CD90581DDD1531352E5989617AC3E4977E95A4B43F758F9F5A1D717476F03A0B
13346E35B91B68BEE26396454772DA6B7E17B3E0B85F8E350352F22FAE4EDA36
733FA7A7AA74B2DC8E5E95B0E91B3C0E979152F79D538BF7A2572E623F1084E8
ED8D968949942121F7B1165F3ECC155511F4377ACBB0EF69EEE350BB6AD4AE83
43DA1C74EFA4FC737834D15EAD8CAD4CCFE92F79019521AA7072575A309B88A0
93555A7D35BD9676F71B57619324C5DCA1C100A67C02DCB0675981A56FA0927F
46E013D95404D683AECD04F92DB8C5C9A847A322BA7B268D603A93332ED87B69
BE4BAC020797D5E3448680DDFC3306C6A665751620FCFF1F546A1E57A900ACFD
2B1881283941395223C3F9F0FE606458D156CD8AA55C89ECD547D0B2CEE723AD
30471E29C10450D9107993487530C8819C59314AE2664E1A4E3A110EEB5A4C76
064EBCE5E03024F368362FE59BD594205D384F5D84FDD97FE662E770A3215A5E
D05A89BEA819DB4D2DDD24588B787DE2560AD460C5E7344C45D63DAE3B34F993
075F257127079759EA83EDF65D76487A959774571975046E2354617942D643E7
118C6FB8485C3B49DF8D5CB26E31B6D85AB75FD346019D2B86EB21FC2BC6F585
B621FC39F231A8A65F55A3BA4CD7BF56A6A10D9865F5D96CE5EB7F65E839755C
E9BF46B2FA9FA69E88D7DA6D06C402C11611D1065B9BB1622FE17AFE68C97DB2
F3CAD1818781481AF9636B9C6CFBEF56D06901B6D50B4152617EE83DAA0754B3
7C04157C5B3A431744F42A0C29572FC7989EF633878035E6CDD2C2EB9CDEEE78
99BDD986559F24C6F4809D3F6D84C530D25FB79B99AC322C021122E962CD756D
E48DA93798FBDD034F40FABA9D9051928E228A72250943C0077A9A99D901FA2D
E3EED18713C241E544BBBD498F2C6E5C057C4FB2DBA1F689A8AADA8E85309734
547289815B3A76358A5F0144782A92D6BC1D0ACA627B86DF07A7C6B7D1C318DE
2C1175847E6393F0DAB73F29F079AD0A7293D1C97727F8CA8AA2856004671491
76EE154BA8F59EB49ED3011BE4B671644BC6CE326EBA2E78732B959E630BB95F
9A4EA51FF4EEF1670D3FFA7D69E651EE22BE3819D5B339249611E181155E4718
57B179838E1FA42744D58492DCDBC25A147AEFBABF5069D68726CDCD35E09212
C17E56D9397E130563D504F108DFC21519A49BBE3F20B169C966551150795D79
78D277D9A29A3B03EA96BC30446FA34F89ED1837E82CF473864DF886BE2C21FF
7BB347D45455A0628C7EEC034FAC9BDEC7AD1230772D7B98333D5398A8246523
8CACDB45939062EEBC9D9886DBE502C21F102EF7D5432136BD7382B8EEFE65C0
4084D6B99CBEDF6FF5C1DD8A828646B387F68D58FAEE3816BD18DBA494A40837
84BFB6962BFAB080EBAAA2EF75C533C27CDCE1FF17D6AD160C1F5E8325C7AFEB
FBFAA59853ECE475C6E0F7C1BA733071B21797F202D9F4FB0387D8895C958045
32E15124C570F82A7214A884199C66B2C9EF41532F5028E905C518E634F676CD
4A7C6A27BD79C42046DBF496D8EDD5F7DFA82187774E433F53358F7E90723BB8
830D214F0A3398DB97F58D5794B01C2EE074D00CBAA5BB20501C658A089B955D
E303D97C9B1729C90C6929AEC2009D38FBC89195D18E37F09083C2B38C0AAF5C
FDD77D652B19BCBBB4781EF1822072028862442589D7BDCE9C4CD17E038702D6
93857F45329E03EB630256582B951EC7E0C5569259529F1C869A2B108195D49D
0006966A828C77DC4ED68C27DD8346EA1CF05F787B2B565746C211F30813630C
7EE7DC32CAD3D46FF350F44198BA633D86B968AE9300B1CF1C97817430FB999E
8D8FE13B389F9E31B1A24FE57842FBF2902ABFEC9E87FA3AA17A72F88856AD0B
9AC44E361DE0B222ADFC97C98DB8EB83364D69F1A9FFE572D1259509DFB6B64B
8E69D8D96A008619736D966715015951961979700EEDB64315CA9820CDE8790B
3E8B0B7CE60AD42DFB9734998549A06038BEA31DB56ADD0EF58DF9EC8B9C7ADA
CEE0A2DE8EAE11D142CFDAEEACBFA60C382ADBF38E014355B3A04A4BAEEF1D9E
288CC946C4F57560192A98D6593FDB4AEAA456ACCF3F2736BCA85C496AF32E96
405F154E56AA8603646E55F338CF9583AB7C4710F2F932E1351459DDDDCD4E6E
0EF6BCA9F2B513799FA952F9A3860094E161A176DBBBB63FD90F2E3CD6E98381
6766385FA1F1AEE941D71BD74833CB42F7971264162BCDDD88D28A9D37D1EB18
2F0772719B6F398DB7B747DB49CD87E766AD4F85AE991C1AFE48B9DFEAB18BB5
1AB2BE0E617E16C8EB5DC77BCC4A6F06AB900C87ACAAF702E5C8C67CE0001BF9
E7E9EFC137FB99DAF3E91ABBB3F9493CDECBB95864DAFE5C62809FB225E6AA58
3E880531430481C819B6E1812F7FDF9F26AC92282F42DEE85FCBEB6FB4ECCA10
51DE773CFABCF0680B88B273DE4B68B85C6C6AE9C30C290E7CDFF8716EF39D24
346879067E55ACE8AE7A60F55D91BEA204061D8694CFCE2EF51E829D6552059E
B2DE488265B21497B0BF76344660C151F83FD9DFD38E5B7A7BFE559A5FAEF330
D9ACB450EBBB430EA78C4FC2D4E9C449E1475DBC00969FF873875A20251EC1B4
759C59A2CB5645DE059368B5AFEB6756F381BEC822DFBFEE21F856681561CDC8
C66D40D84535447E58528F035FFA5B7481050ED9EF7A99E3FE103AB285C8A64F
1591F94EF054A7FEFBAC66BB7BB9B715C44B89D140A00162F1095FF73B3F4E33
551889A84B387426BAE855954636232D039AD9FB5F1EEE61001A3541165FA052
D77DD8D645110694F9F2A5CC79AA69A3DFA1429E1FB4AB4A7D14A0345BE093AB
C2C0712203DA0D37BDDB647CD512DF6ABD1A2E76F973883B39EDBE7E9D2E3F85
6B2A21030EE8C59AACCFF6A5E5C559A637424DC59853EDF694D2348257C518FC
964BA4D7C14E690768E99D5CF5467F2CACFC2F38D03B9E889382C51196F6D663
E3C65BAD3C844D63CBDEA6C45620E41F5993F3D19E0224DC175FAB0F02C689E9
F64F80B02B2B38E8DD1E0AA1A401CAF4EA40816B2D8393EB36C6C338F177ECD1
AC125C7750D601B2CADE508A7521E2720C0477244CB023CD3BA8357AE816A8B7
D1D7B277FED74CFB2B2E126C1F1BE440789E9D7B7162440F75FECF1D29E4DCE2
34ED3F91971685C5E593EA1E2245CFE6254268185679589BCB4208A14A6F0A5C
CB4CB6928ECD96B320A83EF5F8EA548516980B3C29536DCB6D816B53B4538544
4EE30D969A1F0FBEE795E40A62C9EAC215ED0EEB650262CCC5BAD179B447D7FE
5C6BC5A0678FB65430FAD099A573D384496E0B053D25AAFBDD441F7139AEBC59
5F5E82AA5C04912F8E9CB0F84FBB8EA3200E3F69ADF949853808E163160A7C24
CFBB094848B0FBBC592094E92386152750B09EB5155622223CBF84A4FD63188C
4075C00167E486248EF107C5861DD61A51A3590C50FFEF722E382CDD254C8396
2376E894621158C22F176B30163607970B04647E765BF891F2F7F3C15296DDB1
3A3D8F34A84DD42541141BEBB389A7BAF7DEFB9CEC1E1B34631245B0CD0A89C7
B57E4A1C327E86BE3330CD1A5EEED203F62B05856D5DFD6BB5AFC86E45225931
C102F27DDA7E73EE21449B74855CA0D79E03086E183FB95F360FED53F1A1E6E7
CE34EEA1D0BC8CA8085F829B9F9E0B4E360140E2EF8AE58083EC634A18AC445D
88D9659B81A1793927F359319269D099DFC375797678988274CE2AE002639D31
4CFFE080800D231C05DA3B72EEC9C1B38F428A3ED9EE95AE9F340D5A00BD0E96
C682B067F1525DC438EA0076574A376BBA763A38265531BD241735EFDC419077
B3882F31F29C2818E70F7ABE0F5DFBB48002662AF720242D74012508F26A9B87
49DAA4ADB83E0DBC4880639A5CFAE60C5A52EF7DBDDC2BB4988068260570B288
4738F247821F243E8DCC7B199838F447ED0267B378F6D471D546608D763570BD
F40218ED0825049188B9D91BF726AD3DD3D93EFD327B11EB2BCC6A8A934B046D
CAC7B33D41C113C72504C0D11EBC83A3A560C1F5AEEE1105D5FAD92D7FF29648
95A60717CB0CC86779019CC01E8738CCA25E5F938345E379567069E9C9B740B3
8BD45B3751ECFB90DA8AB26ECEB21A1007D6F0600E6791BA1EC07C6CD733E989
F0A1B8BB3F6165335C2E2D45A67FDA34DE10D9921958023DF0022CA7C9CD80CA
B127B16D47DF625C0A7638CCA3A28980BB285CF77590ED40C9466E4448D37139
5F99586C39DFF466874E9B51775561D0503929E227FFE59888A01436ED63CF07
4AC40957BF04DDD4CFDEADCA35197032D2AE627228E4519E9D23ED670D2D221E
90A7EC314315071B203F061EE6333D916863F8FEDA96B0CCB8EFA9CADBBD761F
EEBD739D3940235E8393AA4F8BB0DCF7F0F8E5B487EDC7DA959AC61A41F2B4CC
CA221C3A72AB7584D24400671CD7DC9B52E7F1E520E0F0F50C287A850CB8F474
F37399F358388C16112776678BB400C75DE3A3E70D68714FFD8D5F449BFCA976
76A0BE66C3DC66AA65B67B6294F4F8C89986509DE66F112F49E63A16F60B6795
CF0D93839AE1C50EE231AA18D6C51D9DD3D307ABF939BD3783CDF91267CA5CAD
227A5EEAD3076353157A3B3947CF3FCB3A753E4C784457BFC547B7CAFFD798D3
2887D078E7F78FD886073A5B338211623CB5D6A5B08187792D7DBF679227959E
04CF082DBE1386640593491D634AACE4C4952FB845BC4480ABCFA0B54EB99FDF
DB4E0A76BB8581CB84D0A3C75CDE681DBB192993B553048C58C55F0E420DCEA3
B7F3968D2279C49A48C6301E226CFE1D3E3239CADEC5CB4F6D9EE7F639C8B27C
1CDF04115FA459787E0FE495CB5A74C96A7C7E77FBFB92183A182F9A56C4A9F4
086440CDA606BF71A39EF59C9E976C5F562F31C628021C6020EA3E80036CB393
65B733D8759590CB8309079CDE35D79817BEE8EE8CCB1DA1A852152D4BB72DCA
67ADF52927BDE600E86A9F06566377D2DEB19ED6E9217399E9723A3C4029A003
6DAC1B61DF980A934603781FCAB7CDA4F6DDBD1044FD8E7BFE56687F0B6F2CB8
92EF176844B9F14C9302959895287EC821ABC58E38EC9F0B780C2988095FC3D4
98C0915BB7C8B0E00212866BA7ED46F2B0994068C2F9F083F990F219B61061CB
F7A1ACA730BA1FA90CFD3842A37D080E676BD3C7924910E3E4F6C9BDF0DB9B92
EFA6D7AC75D6C0C7C27BC90F131614E6607DECE6D95A2B7A44BB698210EE7CCC
F06B3FE91D12AE88814DDFAA3503BFA63C9D1F80F97B5B0D1A55372FE6709B59
AC41BD4E25623744BCA85F944CA2938FD474019BA359F7F38A6D94C11A030BB9
8FB9C5968B35E4D496E63195374AF98B9D1466C936C0C4403C71A36FEECBB23E
7D2774D28AA4C902E61EAE2EA28F6657C76F77B64D605695615950B45A65AD67
A9C27F016B4990CFB9B733DA40DD328D8B9C93FC4C5790B5723F7008544E38C0
6E4DF82F5D9A0C3273A90D255DE732967AB4A04D83164ECEA734E43C233821FF
BB28D8700496F34E5476AA8D5DD07D0AC4A4C11F01F9845CB74FE68998664E8C
6408A0F1F093896727728E75A691BC13288CED896F36EEAB8E04F77E4D31736F
FBB8834E0E8CBE3C9E4B8DEB86DBF2BDB3408DE3592B6A1EA539908336005304
FBC18BBD7E61FAC043BD93C6A1EF31232E892DB6586240B3BBE50A05604B7EEC
3F8D353CCCB94379F0E8574F24ACF879C3B5E9D52BC136701D0C4F7211B5B5CC
0A348F325F3E455317804A1FA0372E799AF99DEB62F1FB386855F555961A4767
C97ADD3F8EF8385B45D44B09A9615DCA767BB4E6E77D3EA858F51F6DB1ADDCDE
2CC5B74EB250DC57590516D7E3D2C6F6F14002325BF296E8FC6D47EF710DAD9C
F6F20AB35A8949CD86E549C66BA5C8EDD717A9A54A30DD42C05E4104CCFF117F
F1AFBFB99D1DD443E0F90CC36D65D873A6E75300429516A1ACA2BA4A8638B076
3B66ADD8CE5671779B8BA454C841832A456CCC55DE18F73107F5545B3AFDBED6
0D3EA2F81423D30DD613AFC306E48B967253105BB2A689D9C05CF8ECA2B28490
A8D9505AB06AB808EA664CA9F1913F5649AF34F2669D1E8731A458EFDACBAA48
397E97284B8A8C849D61C4782A63ED92044B80E0D7A1352D7D4274677B103477
A191271205766841F0E7130339F48FD45D1F537AEA1DD857A6AA2D8D1E791D90
6B5F5A971011655A6711E609D64A01C9BFD0A320D5F807D084B19C0A002358D5
92FC36D03D8FE57928267D5EBE3C2CA614D7B2CCEC832D418F13716A1A428FE2
5827EBCDE28CD203D5591D96916997E012A6475A28951D854BE94C8A3B2B41D3
4D57C92BD86EDDA325D4D34B30CA286013BE6B35AB339ABB48DD4E40E0EB6E14
9CCA7713C2DFE45CA6AE6961E7DE6E547211BB0160372E4C019A993CC21C1C78
A8800AE691524E1C6FB25F41A15D8BBECD6445EDBF0CEF41E2E467ED1518D82B
08130625B70FFD8EF3FDBA6E4F0859AFD74E72167A3D3BD86F381ED2C3DCDC8E
9125741E24E14E3E74A2796BDF8606B932D06B75ED3D7C3A9742F8C5D2AF2FF8
8BE40D53E49DD66D3C3EBE3AD161C03E8F8192F4605E1B060F654335981217D9
81B3FD8695CC7E4D624573A635B65951DC366F76FFE0BC4F4BD90D4EC8361D3D
F55B5BF4BE1765CD19CAB759706DD226AB585C11A08A3E33D5F5D10E8177B9BD
F9B6DD2CDE818BC760F2F70D4299CFDD901A774C95C25F1F4CB874C42D6B9471
82B09A417B7C6DB24C7EEADBE71380BEBA54C4132BF0DC2484458DF1F326D4F2
36F6B2CD14A87A4CB9224605AD818EFBA08772CFA9A886F45E0910FE6D397C7E
D3128B298E1EA6E3E3EEAF3479A051858465B8D22AB04A724D111D30D357BEE5
AAE7326EBB02E8AE6F08538ED0236F29B15D84402D50AE82471678329B836285
D98C602428264C82E8AED7E4AC8008DD87A39914AD3DE63CB597CAEE7712A920
D1A1F542DF2E62582BF4A17E92DFB106520F5C74630741BC6EBD360B8066F347
EE1D6DB95461595C9938581921663D3F22FEC52CE047DAB64EBA1EEF23FDD6D1
5A5E4B14C749E1759D0B801D30B1357C343256FC54BFA3A7FD94B0B10A27569B
7328F74126A18BBC64373ABE1D3994E5D70E2DB72B41349BFD4D7A8A810EBE98
D90110688EEEF6E3D4CCE9882644C08081ED48361530BFB60CD436DFD7A74045
EA1843CFC35BA7048BA6CE8FAB816DA633D4EAE5F2AB5F1EC097F81267236982
34387F8989CE8136CCA6B7211BCDB9E4BC20B238A746B9EC5C70FE6FFBC75B1E
FB97D83796CCDC98EEE867F9A80E55B2373A3D2B2C3EDF3471F87DDCCC4E95BE
054185A035D11FCE8CF435BC210621851001B6A402E3A07D0F204A3B0E229641
FEB9433AF21E8D84C50F750434191ECF16684FC9D77EB716ECD75C6A6CAF0F0F
B5F6A73A47FFFB9D60DF2443FAB39DE2D2A4C48E0D8C4E450024909E5601B340
147238955795B8B5F0761CF5F602D773170B7EF67D5E47ABD3D68FDAF7F8756B
84668463680AA78A41E4BA695D11E83F9D6F40978896B8F7A0B472D1F9FFC68F
78D5D832B98721AAC2F00DF496288F46F21FC15112897ED98A195AB6AD13AB3C
CFEC63A901A9B3B9A5C5F4347475866BBBBD4054325297D9E372D2E38E5AC885
C2330C5387383B908D8923413B4763CB439B326A162FA0CE6D72C7152ECD2DE3
23917F5A2060BAD080EF07F572C5818BE76CF9396E67786C02334C0CFA8EE5F9
D0F7F90CE680FF95012701B060002FBE2AC6DA74E7ECB2ED339DADD6F39274E7
E8B2B3B84C5D16ABF11C28ED46A45A1DEB1C93FB1AEE54042F3750D1F5B0B466
7C5ECA2740832377757AFE7029A450898925DC05626F4A91630F9C4A607450E8
D5F7B876FFB2D3EEEA923362331B0F3D9C0D5EEA845C2B79E4C82718D91325BD
CDFE2F960F9C8C581FB0737391555A8A575E542EDEC2D027465D5064A6DC3D8F
38F525793AF97A9CE3BF875DC5D845C884413A463BB3A74AA02ADFAB59DE70F6
79945611D8CCB8AC705DBF49637BA1D16BB08F5F997A8523C412BD8A0B47FE10
694A836A645D52C01CE8C7FF03578C4859B55B0365B2F80FAA3C0CC50C7A259A
F32F4C81D9B39470D9993CBBC830C725E9A9EE151663032EE1B2834670BC9A18
AEECAE94BBD7756CFD54770E2A8D81BD4618D916A30EC70F1829B5286103B7E5
29108C25F0B0A3F808E890D1582CB6B12B85222C6861BDBCCBF5B17AA9F218A8
0D732FA5CADEADD19D99093B81444B8B9DD5A72FD601B4C221253E5FF8C28D67
6727C1AEB519DEAD1FCFCB2CADB6C79670CFD4875DCB885EAD2CAB2644F1E25D
F5F6EF5B5ED6D0D012E6C40FF0C0FA109631DB82CE149A89C4155F316DD36ED4
A688023BF4933D7B415FCEC04738328542C8F9074006CD33AEAD858BB6A4448C
1243A03DF92D4F5D062D4D4D5A6E66BAE16BA7764D8D8582DFD200384EC136BF
5F5E9616A994F5C939186F31B32068A8F8286A97EAAFB74ED53B96D9931193F4
61BA2D4D7ADC50A3B5FB6DD121A5B794E0FFCE1FE52E5A46C49A663A888F8F07
5CE6E532844BE64C2DC872E0CB9A9D72170B2BAFAE13E0B4D382439AF172F4D0
3ED7B859085AB38822032B0931D2E29FF7AF32CC38F4F4E6966227C54BAF3349
15C17CB8148137CBF8B8E42F059715079C80C962D5D7BA579A1F3249E6694A24
DA005C84176455BA74C8A97441EDA12DA4AA9C9A46A036505D0E6D9CF486DEFF
CBF4370963DCD8A78A20C7E32793E2DD2811E6B4C14F22DF1BDEA80C8D814CA3
3F508ECA663F9689E630D0876FE4FC476647EF32FA9963844163BBACC25BC2C7
AD157D1C68D877F9C7CDCD8839DA1968122EEA8D652BE7479621A99C4CA4FE56
0B0A5B4E0F7E975F0A6A6B0914482B2CA100D46D3C95C8FD7909FC251378DEC6
CAC1670457E00E1DB0091D58D003A9F5E0CE1DD74F1C6081D61317763D0C226C
1EAD6F138EC1501C46CB5B5152192E8D337A77D60A3BC58495AC8B3F4A263F48
263C27AF5E0D027B46F86C3BB701396892C857A51A8D59DE97F8A01E890DA500
847930E530B4C997B3FE3D863BD1FE2D56BD513E5BE907EDBFA302E4BE6B9E62
3761D24C0B7CB02DD90DC8A2CBBEB9F44D869D9218AA5429ED39CDE479313C43
8B3B763A563251E664DF07AA924EEEB715A1D84E8F594621E32EE2D2813670E9
1ABB8EDF5FEBD36C6E600300261D453EF3794BEF67FD4478202ED64C368EF2AA
C953EEFDDB599B1C0042410B82411241A1519E550B01053081BEADE92D2E498E
8B0B29178C7AE024E79C6163F8A74C8738FC3DD1ABF153D67D08A17B497CE7CA
888BA8717853626F8FFE3B3713D0D24D5FB00FABD415EB4EDA15C15D794AB11E
E10C5DE4997A9FD2E324E8B75BAFA9673F5BB3CC348AC52F4BDCD0AF5BADE8DE
FA9BA347858D3BB8EB28A7C6F669AFBDAF347977AF68FFDB416935BFBD2531CE
D2EB8E159EB47268AC750EEBA03C709E38CCCE6A37BA89F98FFC461CBCB0423C
AD02879BE48352613C1C0598DCE6245908215940723D876C98E527CB63807C16
E86FD0F139DF35DD23B1D1851C7B20492EEF32EE770B0C8BE3ED8F1783C42382
A1DAE6040C150F8FCEE87A7483F92277B32B4863B8E33674B9E53BF531136A5E
DF9192965ACA98E06316C60E07287BC2637653261B1EB6D2277C50C1E449F1A6
B9658F3F9A7A03A9C18EA6D718885F36AB8B9BBDA8C46D7930FD982D182E86B3
CB63C968430895741B98CC3156EAC929609451258BDE7360066362DB24465EFB
ADDE9000098B88E159C757A92D105F0E5A10E99F49AF7077D4FABB76E1DAFD60
9402A15A08F6D100226BDA3ECCACB839724B90FDD915FF0F863528DB72E90CEE
17AB457A7E88D94943A49C2FFA892D362C124A7467F96C603FA96532FA00F88F
CC7A95AB5E44EB877C6F49E12E2C52010B061C7F0254FD0B85AAD7CEC50BB444
FEBF41F14796F1EDE6041ABA9018A36364CE91AA02E15BBFD404C73D283DDD92
B0432BECAE3F51B3DCC1AF6BE1976113FE9E1C781C3CBE645A0F2B353C392C7D
7400081EFE4EDBB7A447DA4C99661BC83BBC77655DC7D7D114B074577EF9C645
314BAC0C5D26C1076AA31C8E8942107A8F045E8F36708C383AB60E0E8CAF02F1
0163A0C0A9E13517A2D91CCCBBB8753F92B3E0CDA5D26523B84A73931EAC3360
5FFF98C7D011DAF6ED1AE0ECE6A43A7C83B9DFC8720511E9754F3D3E68B5D765
2489FAE2DBD9A8C910C5E2D06CDE91DCFC11A62A12FE438DADD9C22F85110D1A
C6C295F7C15919A586A0C7F1A0AF91A866DC636192676396BF025CBC117087F0
702F0B228D76EE3EF3F92FB5D0D619980E73841F84F59E0500496E84FD5E9A7E
48B4AD6D550B6CE0190281BA4CEBF16ACFA4FD94730CDF2E9CA1C3981F3B8A7A
AE82B7642C9DF1E1024D89E14DED3AF9D85D052DC85A50080668D9F648ACE56F
31BE53E33D8B62E7C32A29313EAAB849169FE98FF9B3CFDF3CBA594B6AA5CB3E
7D88CA425CCF064A83F6DE23CBE6A1E7EB0DC78B53F3E0B671098413E318D9A0
B75C53A9D21D5330E4D7BF1E656CF55B9F5AEA07AC8015D417881D7788ECED18
EBB01D8637EAE8FFFDB7356D21257EE38B704E3ABD2C9AB90C293E955B2445DB
79C0255C80F2EFB117C81808DDE499B5BA7BE0A37EB3D69F4B68CE7A554563F8
DAD41590775AC2166849694DB55D87294588F5531467F99BC64AB6E36E4083FF
7C2E59EB91AC0D4D032ACCE3241BB451011087111B2040FB6637140B19EF6CBB
421011ED6D31188689BEF2C02ADB8277A8D7AD7FAE19BEFF9474E7B45B7E0B67
9C0D5FE02EA12E5A27798FC3EE9A3EBB3966E4E775DEB5DE4C2F6E8F2D03E84B
FEEBA5AA77C19171B48E9F5B5B57CBBED7FC04BC28FC048562EF023CF0DFBACB
775173CD25A255CE2269CAC8E55A5CB2EE8590A3D15A7909F0107730378F7CBB
FA3387FE25CFEF435292714A8F491E2BA9116F52555846D993E48925F5EDF782
71ED4545B079CC5CB03B09A1E0F4E76D7634AB97167A72810BFAD7E53CD1441F
E2F5A3B451290BCA5D541320D8DE8661038642B1246119AC8D529BF3F2FFCE33
41212E7F76255227DDCA3397338DE5C961B3AA70DA22E24F5D5F7DF0EE67FA66
B9D23E40724FA9C3DCE3C2B9DED6CD9D11622AFE0D8637C0C3A49EEFF019DACE
6FF4D5BD4090843BCAFD80CED24E2679399DEAA3C4BC196A6630E5D20931E04E
6D20D3AE11BD52FC2907FC7D7B2D7B37514E8E77CFB4AFA2E3BBE8E8134F7F93
A3B0759E3C725F8934D93526739505232486F108053A082AF365FDE86FA40B54
4AB03C521CCF5E9DD8D6D3A5DB1E28A4B5BEDCF9AF7F440AF4E086412ABE0FE0
C8BA6B1417DDA84325C4BD172D181EAA3E7C3A2A384C92029F39B1BE5CF3D750
7B22108DF071E04D6009F314570BD06FCD655827CC511B0EE9FF35EC5739AABB
6583196A09DF798FC040A55C1EB73F20F525BDA23B3C3874901580FBD10987AE
903B8BE25A7498262D5C9578091F53E88750944AA1105951D105D6573330E2C1
648E402EC73D406432314E4E6D3FE183BB774C211250C43FFB185F599B18CDE3
2F1E825F6C50AE8837D62D6CB3F0B9E70D33C9A5AF8605160D259331FD5E77B3
B63088E9F9B721677A8C942404CD8541CA185C2F38E6959192C6F2F6C635A2C1
7CBECEC40386F0488798DF940ECE80B6479023DA0394E3CCA13502D03B122C21
6793D1AEA02C1033D9793F00C5BD05B748D152049365FCAE9A259683BA62A513
2CF549382EFA09C29290665BE2E26C6577104F6CD1E56B59747A1FDFE7AE75FB
CB6669BA5DD3B94BEC96107E64F621BE09010CB6F43790A9CCFE5E882A0052DE
76A475D72276E2C6A8C48223624D3870139A282357F5CFD4CEE0BB8C7C8ED352
E0A1E6DA36A404C11E61AFD0FE88F2DC433122FC7D3E477B11BD11B0E895EC60
DAE2069946A78F3C5E8968012F3DBD887655A42B96F99B310834A0C6D4689DFA
05FEC986E9DD69621D483A8F014F9C8D45ACEF050918FA0CA1E730EA02BFD1BE
7E6673C82693474B5C5C897474CDE9629C0B16424C54F24A48E2F95BBD3FB185
EB544F85E9FFB19DB027107A9028EAA9F61CCC446F6FD2D7DD0025C54865603D
03DFDEF92CED537D185E877BEADF0CB8A905F6D2CBA67AF5F0CCAB60E2E55E72
925778DACCB8EFA3625287484D2461D76C97A11FF2F2E848A2B5654511CB5E63
C7B95C7C264DEDD19000360451A64828CB103799D5A892B5605FCB4E1C8E5995
AEF15EC7BC26DC1B8FA3FE145B7399D93A6DA8E263AA0E9F720CD3496E09E24F
E8A56DC7811E1DA6A7A14086033357D5CF24DF1D064C45FA7982087DCE0BC0E3
B5ECF4793CF87FD37655EFDC4FFFB8C6BD9C362D3F179B989A04E77A95641625
1D58FBB475A4BF76C4056DFB27F05337E6823FADE22F03EBE70E2AECA8163919
0941E4C208C4BC52AC9CBBCB8F21B2B1677639BC3B376783F91238C54C528FFB
4307B29E7B19FE5B6A5A9999ED95EE4ABFC47077A4A6A2EF9FF71AE265B6A487
F14B9D9A5B9A54D9FF344CFC919FD3A4470B4AA45E305655EB64342E5FB65BFE
E447F45438E74E0E7869BCC61424AD2D268E69621E7ED3B0F23887A1827A34EB
6866650B00DCAF38B873E1B29027C1C3CE2C626466352053DA54737AB989F116
00E43D7ECA22A13FF52824D1424C444B9D6F7D3E92A8D1573DC3F7B72707BF09
EB8CA7C7FBBB509541CDFB17660E1A9F3FFACA55A9F6FB6F195BD8669BEB04B8
07830D89825CFD80F99AEB41A9D335D80C6CCD57B03845424BEA5AF5052A0AAA
EB23269A076A0AEFD8E4D02F1B615F649AEA96C20EAEF69E100E66170D48C7A2
3CCA7F0A3EFF96896BE6F710938D4DAFE4131E0A89EA50A0ED6F1559AC779E03
2B2E8A25F168B26B0B3405EDD9B3330207B273CE99A369E2DE02D91F222E2CD4
FF98DCB75A3A72F9E059B3591758B27EC04CF9C27ED5F5D3CE882521839ABF6C
7AA2C08D15E2AAF698F05A0ABE03BEC1E517C4CF8A479B815B206DE1B50949A8
E8B06A56AA83BE658C4E7E9883E82682927EDD894D9F5C53BFAD2AC1EB6429BB
60F7EBA1F1E249D4C9CDB335A216E56A81723BB6B76B4C3C8F2815B38129C1D7
E60A63F91BBA138FD3C85773ACBD92D1BA24E033E48C46DFA7683E6F6F44D976
20D034824A71F84CE8AADDA9351787053B4833BB632C249A6EEFAF6A1A38264F
75FA59191777EEED20751A8EBB4608326305124469A7C1AE4CB0FD382E2600D3
9CBA19BA73621D97F6A3941CDF2D4FDBAD0BCBD032540960B850BA9C6FEDA5EF
8B67781A5382F155370B55CBC74E41E64931FD31BC2301C2B38FD9302AA8438C
52918E41D477E2CBD989B6F1C0478692CB7AC11368CD74C7021A84E722561F11
0A73DD4A53314A004AC78A944CA081BA9211C022FC765B50138690CE1F210D93
A86952D0301F4119CD594D5CCEEADEFC6B64D19C820BA08794E5ACF635EDFE7D
5303E8AF65AB80EE6DFBE6EF805034459871AB157F0467AD7C9864415A32F29C
3C0F1EF78B346B079140C4C3BFA77DB2B343DA5EBB67D92B7C035512E2712C46
2D5E973358BE41B2329A4CA1453828C7D26527ED751770B75B039F751547B4F3
B971FF796A14D8DF5D8741F26EC385EA650393D94E3749D85B6069D53CBB8641
85A99D6587A92F1847364F4AA94D147D5C6699EDB97DF199549D543FC36E5FCA
6111D9642F031830C44F310B316CA13824439FD6B64BF03A46E1CD9C8F11D617
222CDA8EFA89AE685DC92627BA6D0C518CD86131CFB65EB33A6D917FE111B268
EB02E8521038E0414D462EFE3F91433510E0F60D405E7D811A9548BFCBEEB1BC
4ACE2D49E38F98AAF6C37CB01997AFB177F44B54FE07821F8BE3B4A1E66AF161
B6EC4C57C95F8F304E10AC4D1510760D8AB0E578294660568140BFD1E08BC90A
CBE74EEC946B4412B0D3DC9A555DB65E5D63EC8737D2C367105E7EAB0329E1F1
5174DF4AE9A3C04D315B508D7F0923FD378EB9390D9A6990C73B74977A01ADCA
A72324FDD10F83AC942F26ED46F01ACB640B783D369858BBFCDC0CCADFEF0E81
482EC3123838570B75DAC68B0E356028B8A27CD9B05CD45F4EFFD8613B50B2DF
ECE3351D2E547CE977A1C09E63C0F6AFD3AC346CB5D01E5299F83E0D5A6F55AB
ABBAF04406B09510179B26854E460A64D1FB9146AA258606025AC89B7154978F
3C7B8629A2051A2DB17E5D5A2A65C07D4F068005E0F4CCEB10763C71ED6D1007
E3A989C1BB845806C60B69D546FDA83928B3BE98C1A74A4B02C9AA03C4F93936
C0D29DFACD18B6ED79B376B8B54F5F249AD445A0532A6D831047C9C0523F81AC
3F16D2C9662E4EE2FFCDADAE1D21A1E3B63BAF6B285A4CB005B46FA31BD7B6CF
F00E00BCFD521A43609B7F90ADFBE71ECF339DAD492B61B4EAF21EC223B20BC1
C22A6CFFD80703E5F58867BCFAC54584C232AF4401036050C11DE522CBDD1FA0
41A665BB17C8D07E57378C1EC6FAB4BAF10C72A2891B752359BB28E241D466C0
2FBC61CDCCFE3E9D55D0CC0057E4133240C63BB4CE032B8052CE881AF14BE5B3
099594B64371775D0397ADB7B33E2EABB2C3F0021E46CA77856AB4C9DB990E3B
337A8A693CEC92A2446E26B084A78787ACBEAFADE064B0003BDD8465FADE2196
78563BBA8532C43E1101F497F5E4704EB62570055B6C40F2575194AD45E03656
41264A2EBBB9310ACA9E4EF6E9506640F6EE7E53506023BE73EB9FA89C2581A9
EF84FDBE7BE3561D4C619419EF655B1C391BB735307C52C12A5656C7B3AE2908
D96AB88BD41594B74E5AC8F0E327D09E12FD0751BF59B65332DA0FFB8F45F617
CA1D63EE07A92E1EB4B574D922CA811306C3963F9BBBE814B816FB619BA04FB9
64477519B29A58D1758816777AB80BEC0291093BFE5AB45349CB85A912B46974
0D30015F4C0A239570CA2B9DE0A280D4871B8F7EF428149365941F774F8CB15A
1AFDA561A4449F86F2C4D1B121C26B51C5EF9D23911AD6161DCDD67FFB740529
3727A89CF8341F61FA0F9659583656158048B8042746177504415873BFD2C45F
D1A30675706B4E5CD4FCF7BBA7086FD0CE4E0A65CC3A0B76C03F37CEF94FA424
CC979D80E81E346608A140BCFF7475996136621EA265FA093B59428853E323C4
494B928B7677F7329AC35365B0A4186D8CDC9BC67213EE748E8BCF0AEDD41905
610EB5F95D6F12CDA962AECD5ADB2D2314556AE2B8EAD46FE8E75F5B39D100D8
E60C6945705C9DCA57F60E28C4A8FD78691A024AC67C4B8BF5FBACA3788C0AC9
CA4CC94553F70FA2A791B83929086EC55ADDE7D725
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000
(C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktional)
@start /Fa 205[406 406 49[{ enclmrm ReEncodeFont }2 664.176
/LMRoman6-Regular rf /Fb 173[959 82[{}1 1328.35 /MSBM10
rf /Fc 203[993 1[993 50[{}2 1328.35 /wasy10 rf /Fd 242[1594
13[{ enclmmathsy ReEncodeFont }1 1594.02 /LMMathSymbols10-Regular
rf /Fe 185[723 4[830 7[553 7[553 2[307 46[{ enclmec ReEncodeFont }5
1106.96 /LMRoman10-Regular rf /Ff 160[909 45[606 1[606
47[{ enclmec ReEncodeFont }3 1212.12 /LMRoman10-Regular
rf /Fg 255[732{ enclmmathsy ReEncodeFont }1 885.568
/LMMathSymbols8-Regular rf /Fh 135[530 120[{ enclmmathit ReEncodeFont }
1 885.568 /LMMathItalic8-Regular rf /Fi 143[1107 57[0
3[886 28[1033 19[369 1[{ enclmmathsy ReEncodeFont }5
1328.35 /LMMathSymbols10-Regular rf /Fj 140[513 4[723
4[361 43[1012 1[361 8[650 650 650 4[1012 1[506 506 40[{
 enclmrm ReEncodeFont }11 1328.35 /LMRoman12-Regular
rf /Fk 203[470 470 470 470 5[732 43[{ enclmrm ReEncodeFont }5
885.568 /LMRoman8-Regular rf /Fl 134[634 739 12[676 3[623
641 603 676 1[553 683 34[1012 1[1012 361 59[{ enclmmathit ReEncodeFont }
12 1328.35 /LMMathItalic12-Regular rf /Fm 650 2[723 5[650
17[650 105[578 686 686 939 686 723 506 513 506 686 723
650 723 1084 361 686 397 361 723 650 397 578 723 578
723 650 9[1336 1[975 939 723 2[885 1012 975 1192 3[469
975 1021 849 885 993 939 921 975 6[361 650 2[650 650
650 650 650 650 650 650 361 434 361 2[506 506 6[361 4[723
28[{ enclmec ReEncodeFont }64 1328.35 /LMRoman12-Regular
rf /Fn 133[956 1136 2[1136 1196 837 849 879 1[1196 1076
1196 1793 1[1136 1[598 1196 1076 658 982 1196 956 1196
1046 6[1315 5[1497 4[1616 1682 2041 1293 2[801 2[1353
1412 2[1530 1625 7[1076 1[1076 1076 1076 1076 1076 1076
1076 1076 1076 598 717 45[{ enclmec ReEncodeFont }44
1912.83 /LMRoman12-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-2331 165 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a -2331
165 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a 1328 x Fn(F)-239
b(A)717 b(1.9)g(-)h(1)f(Eigensc)-60 b(haften)716 b(v)-60
b(on)717 b(F)-179 b(unktionen)714 b(-)j(ZO)h(-)f(BIFIE)p
0 TeXcolorgray -741 4800 a Fm(1.)p 0 TeXcolorgray 651
w(Es)434 b(sind)f(vier)h(F)-108 b(unktionen)432 b Fl(f)15558
4999 y Fk(1)16084 4800 y Fl(;)221 b(f)17307 4999 y Fk(2)17834
4800 y Fl(;)g(f)19057 4999 y Fk(3)19583 4800 y Fl(;)g(f)20806
4999 y Fk(4)21767 4800 y Fm(durc)-36 b(h)432 b(ihre)h(Gleic)-36
b(h)g(ungen)432 b(gegeb)36 b(en.)921 7346 y(Ordne)430
b(den)h(vier)h(F)-108 b(unktionsgleic)-36 b(h)g(ungen)431
b(jew)-36 b(eils)433 b(die)e(en)-36 b(tsprec)g(hende)429
b(A)-36 b(ussage)432 b(\(aus)f(A)921 9338 y(bis)i(F\))h(zu!)p
0 TeXcolorgray 0 TeXcolorgray 2683 11119 11212 45 v 13894
11119 4523 45 v 2683 14480 45 3362 v 3391 13203 a Fl(f)4032
13402 y Fk(1)4558 13203 y Fj(\()p Fl(x)p Fj(\))369 b(=)g(2)295
b Fi(\001)g Fl(x)10407 12721 y Fk(3)11228 13203 y Fj(+)g(1)p
13850 14480 V 0.9 TeXcolorgray 13894 14480 4478 3362
v 0 TeXcolorgray 1 0 0 TeXcolorrgb 15636 13300 a Fm(D)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 18372
14480 45 3362 v 2683 14524 11212 45 v 13894 14524 4523
45 v 2683 17857 45 3334 v 3391 16580 a Fl(f)4032 16779
y Fk(2)4558 16580 y Fj(\()p Fl(x)p Fj(\))369 b(=)g(sin)6
b(\()p Fl(x)p Fj(\))p 13850 17857 V 0.9 TeXcolorgray
13894 17857 4478 3334 v 0 TeXcolorgray 1 0 0 TeXcolorrgb
15691 16706 a Fm(E)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 18372 17857 45 3334 v 2683 17902 11212
45 v 13894 17902 4523 45 v 2683 21235 45 3334 v 3391
19958 a Fl(f)4032 20157 y Fk(3)4558 19958 y Fj(\()p Fl(x)p
Fj(\))369 b(=)g Fl(e)8662 19476 y Fh(x)p 13850 21235
V 0.9 TeXcolorgray 13894 21235 4478 3334 v 0 TeXcolorgray
1 0 0 TeXcolorrgb 15672 20083 a Fm(B)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 18372 21235 45 3334
v 2683 21279 11212 45 v 13894 21279 4523 45 v 2683 24622
45 3344 v 3391 23345 a Fl(f)4032 23544 y Fk(4)4558 23345
y Fj(\()p Fl(x)p Fj(\))g(=)g Fl(e)8662 22863 y Fg(\000)p
Fh(x)p 13850 24622 V 0.9 TeXcolorgray 13894 24622 4478
3344 v 0 TeXcolorgray 1 0 0 TeXcolorrgb 15709 23461 a
Fm(F)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
18372 24622 45 3344 v 2683 24667 11212 45 v 13894 24667
4523 45 v 0 TeXcolorgray 0 TeXcolorgray 19701 11119 4567
45 v 24268 11119 19421 45 v 19701 18240 45 7121 v 0.92
TeXcolorgray 19746 18240 4478 7121 v 0 TeXcolorgray 21473
15136 a(A)p 24224 18240 45 7121 v 24932 12979 a(Der)378
b(Graph)f(der)g(F)-108 b(unktion)378 b(hat)f(ge-)24932
14971 y(nau)319 b(ein)g(lokales)i(Maxim)-36 b(um)320
b(\(einen)24932 16963 y(Ho)36 b(c)-36 b(hpunkt\).)p 43644
18240 V 19701 18284 4567 45 v 24268 18284 19421 45 v
19701 25073 45 6789 v 0.92 TeXcolorgray 19746 25073 4478
6789 v 0 TeXcolorgray 21524 22135 a(B)p 24224 25073 45
6789 v 24932 20144 a(Die)365 b(F)-108 b(unktion)364 b(b)36
b(esitzt)364 b(k)-36 b(eine)365 b(Null-)24932 22136 y(stelle)395
b(und)e(ist)h(stets)g(streng)f(mono-)24932 24128 y(ton)433
b(w)-36 b(ac)g(hsend.)p 43644 25073 V 19701 25117 4567
45 v 24268 25117 19421 45 v 19701 29914 45 4797 v 0.92
TeXcolorgray 19746 29914 4478 4797 v 0 TeXcolorgray 21515
27972 a(C)p 24224 29914 45 4797 v 24932 26977 a(Der)289
b(Graph)f(der)h(F)-108 b(unktion)288 b(ist)h(sym-)24932
28969 y(metrisc)-36 b(h)433 b(zur)g(2.)h(A)-36 b(c)g(hse.)p
43644 29914 V 19701 29958 4567 45 v 24268 29958 19421
45 v 19701 34755 45 4797 v 0.92 TeXcolorgray 19746 34755
4478 4797 v 0 TeXcolorgray 21488 32813 a(D)p 24224 34755
45 4797 v 24932 31818 a(Die)434 b(F)-108 b(unktion)433
b(hat)g(genau)h(eine)24932 33810 y(W)-108 b(endestelle.)p
43644 34755 V 19701 34799 4567 45 v 24268 34799 19421
45 v 19701 39935 45 5137 v 0.92 TeXcolorgray 19746 39935
4478 5137 v 0 TeXcolorgray 21542 37824 a(E)p 24224 39935
45 5137 v 24932 36666 a(Der)434 b(Graph)e(der)h(F)-108
b(unktion)433 b Fl(f)576 b Fm(geh)-36 b(t)24932 38658
y(durc)g(h)432 b(\(0/0\).)p 43644 39935 V 19701 39979
4567 45 v 24268 39979 19421 45 v 19701 46768 45 6789
v 0.92 TeXcolorgray 19746 46768 4478 6789 v 0 TeXcolorgray
21560 43831 a(F)p 24224 46768 45 6789 v 24932 41839 a(Mit)756
b(w)-36 b(ac)g(hsenden)755 b(x-W)-108 b(erten)755 b(n\344-)24932
43831 y(hert)433 b(sic)-36 b(h)433 b(der)g(Graph)g(der)g(F)-108
b(unkti-)24932 45823 y(on)434 b(der)f(x-A)-36 b(c)g(hse.)p
43644 46768 V 19701 46812 4567 45 v 24268 46812 19421
45 v 47992 4800 a Ff(___/1)p 1 0 0 TeXcolorrgb 48228
6792 a Fe(F)-123 b(A)369 b(1.9)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 53180 54804 45 v 0 TeXcolorgray
24746 81281 a Fm(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fn(F)-239 b(A)606 b(1.9)g(-)g(2)g(T)-60
b(yp)60 b(en)604 b(mathematisc)-60 b(her)606 b(F)-179
b(unktionen)603 b(-)j(L)-179 b(T)605 b(-)i(BIFIE)p 0
TeXcolorgray -741 4800 a Fm(2.)p 0 TeXcolorgray 651 w(Die)434
b(nac)-36 b(hstehende)432 b(T)-108 b(ab)36 b(elle)435
b(zeigt)f(die)f(Abh\344ngigk)-36 b(eit)434 b(der)f(Gr\366\377e)h
Fl(y)481 b Fm(v)-36 b(on)434 b Fl(x)p Fm(.)p 19394 6431
4777 45 v 19394 6431 V 19394 8423 45 1992 v 20103 7826
a(x)p 21454 8423 V 1680 w(y)p 24127 8423 V 19394 8468
4777 45 v 19394 8468 V 19394 10459 45 1992 v 20121 9862
a(1)p 21454 10459 V 1716 w(3)p 24127 10459 V 19394 10504
4777 45 v 19394 10504 V 19394 12496 45 1992 v 20121 11898
a(2)p 21454 12496 V 1716 w(5)p 24127 12496 V 19394 12540
4777 45 v 19394 12540 V 19394 14532 45 1992 v 20121 13934
a(4)p 21454 14532 V 1716 w(9)p 24127 14532 V 19394 14576
4777 45 v 19394 14576 V 19394 16568 45 1992 v 20121 15970
a(6)p 21454 16568 V 1391 w(13)p 24127 16568 V 19394 16612
4777 45 v 19394 16612 V 921 22220 a(Erg\344nze)358 b(die)h(T)-108
b(extl\374c)-36 b(k)g(en)358 b(im)g(folgenden)h(Satz)f(durc)-36
b(h)357 b(Ankreuzen)g(der)h(jew)-36 b(eils)360 b(ric)-36
b(h)g(tigen)921 24212 y(Satzteile)434 b(so,)g(dass)g(eine)f
(mathematisc)-36 b(h)434 b(k)-36 b(orrekte)434 b(A)-36
b(ussage)434 b(en)-36 b(tsteh)g(t!)921 27702 y(Die)497
b(angegeb)36 b(enen)497 b(W)-108 b(erte)496 b(k)-36 b(\366nn)g(ten)496
b(F)-108 b(unktionsw)-36 b(erte)496 b(einer)p 32595 27702
3150 45 v 36216 27654 a(1)35744 27702 y Fd(\015)p 37338
27702 V 3647 w Fm(sein,)h(wie)921 29694 y(sie)434 b(eine)g(Gleic)-36
b(h)g(ung)432 b(des)h(T)-36 b(yps)p 17282 29694 V 20904
29646 a(2)20432 29694 y Fd(\015)p 22026 29694 V 3583
w Fm(erf\374llen.)p 0 TeXcolorgray 0 TeXcolorgray 5328
31066 15832 45 v 5328 34150 45 3085 v 12919 32848 a(1)12447
32896 y Fd(\015)p 21115 34150 V 5328 34195 15832 45 v
5328 37454 45 3260 v 6037 36251 a Fm(P)g(otenzfunktion)p
18750 37454 V 19459 36156 a Fc(2)p 21115 37454 V 5328
37498 15832 45 v 5328 40757 45 3260 v 6037 39554 a Fm(Exp)36
b(onen)-36 b(tialfunktion)p 18750 40757 V 19459 39460
a Fc(2)p 21115 40757 V 5328 40802 15832 45 v 5328 44061
45 3260 v 6037 42858 a Fm(linearen)433 b(F)-108 b(unktion)p
18750 44061 V 1 0 0 TeXcolorrgb 19459 42763 a Fc(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 21115
44061 V 5328 44105 15832 45 v 0 TeXcolorgray 0 TeXcolorgray
30427 31066 12763 45 v 30427 34150 45 3085 v 36483 32848
a Fm(2)36011 32896 y Fd(\015)p 43145 34150 V 30427 34195
12763 45 v 30427 37528 45 3334 v 31135 36251 a Fl(f)142
b Fj(\()p Fl(x)p Fj(\))369 b(=)f Fl(k)341 b Fi(\001)295
b Fl(x)g Fj(+)g Fl(d)p 40780 37528 V 1 0 0 TeXcolorrgb
41488 36193 a Fc(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 43145 37528 V 30427 37572 12763 45 v 30427
40905 45 3334 v 31135 39628 a Fl(f)142 b Fj(\()p Fl(x)p
Fj(\))369 b(=)f Fl(a)295 b Fi(\001)h Fl(b)37614 39146
y Fh(x)p 40780 40905 V 41488 39571 a Fc(2)p 43145 40905
V 30427 40949 12763 45 v 30427 44282 45 3334 v 31135
43005 a Fl(f)142 b Fj(\()p Fl(x)p Fj(\))369 b(=)f Fl(a)295
b Fi(\001)h Fl(x)37800 42523 y Fg(\000)p Fk(1)p 40780
44282 V 41488 42948 a Fc(2)p 43145 44282 V 30427 44327
12763 45 v 47992 4800 a Ff(___/1)p 1 0 0 TeXcolorrgb
48228 6792 a Fe(F)-123 b(A)369 b(1.9)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 48355 54804 45
v 0 TeXcolorgray 24746 81281 a Fm(2)p 0 TeXcolorgray
eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fn(F)-239 b(A)717 b(1.9)g(-)h(3)f(F)-179
b(unktionst)-60 b(yp)60 b(en)713 b(-)718 b(L)-179 b(T)716
b(-)i(BIFIE)p 0 TeXcolorgray -741 4800 a Fm(3.)p 0 TeXcolorgray
651 w(Gegeb)36 b(en)433 b(ist)h(die)f(F)-108 b(unktion)433
b Fl(g)481 b Fm(mit)434 b(der)f(F)-108 b(unktionsgleic)-36
b(h)g(ung)432 b Fl(g)48 b Fj(\()p Fl(x)p Fj(\))369 b(=)f
Fl(a)37612 4318 y Fh(x)38631 4800 y Fm(mit)433 b Fl(a)369
b Fi(2)f Fb(R)44280 4318 y Fk(+)45068 4800 y Fm(.)921
7346 y(Erg\344nze)358 b(die)h(T)-108 b(extl\374c)-36
b(k)g(en)358 b(im)g(folgenden)h(Satz)f(durc)-36 b(h)357
b(Ankreuzen)g(der)h(jew)-36 b(eils)360 b(ric)-36 b(h)g(tigen)921
9338 y(Satzteile)434 b(so,)g(dass)g(eine)f(mathematisc)-36
b(h)434 b(k)-36 b(orrekte)434 b(A)-36 b(ussage)434 b(en)-36
b(tsteh)g(t!)921 12828 y Fl(g)481 b Fm(ist)434 b(eine)p
6729 12828 3150 45 v 10351 12780 a(1)9879 12828 y Fd(\015)p
11473 12828 V 3583 w Fm(und)e(es)i(gilt:)p 22072 12828
V 25694 12780 a(2)25222 12828 y Fd(\015)p 26816 12828
V 3583 w Fm(.)p 0 TeXcolorgray 0 TeXcolorgray 4237 14200
16923 45 v 4237 17285 45 3085 v 12373 15982 a(1)11902
16030 y Fd(\015)p 21115 17285 V 4237 17329 16923 45 v
4237 20588 45 3260 v 4946 19385 a Fm(lineare)g(F)-108
b(unktion)p 18750 20588 V 19459 19291 a Fc(2)p 21115
20588 V 4237 20632 16923 45 v 4237 23892 45 3260 v 4946
22688 a Fm(quadratisc)-36 b(he)433 b(F)-108 b(unktion)p
18750 23892 V 19459 22594 a Fc(2)p 21115 23892 V 4237
23936 16923 45 v 4237 27195 45 3260 v 4946 25992 a Fm(Exp)36
b(onen)-36 b(tialfunktion)p 18750 27195 V 1 0 0 TeXcolorrgb
19459 25898 a Fc(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 21115 27195 V 4237 27239 16923 45 v 0
TeXcolorgray 0 TeXcolorgray 30335 14200 15562 45 v 30335
17285 45 3085 v 37790 15982 a Fm(2)37319 16030 y Fd(\015)p
45852 17285 V 30335 17329 15562 45 v 30335 20662 45 3334
v 31043 19385 a Fl(g)48 b Fj(\()p Fl(x)295 b Fj(+)g(2\))369
b(=)f Fl(g)48 b Fj(\()p Fl(x)p Fj(\))295 b Fi(\001)g
Fj(2)p Fl(a)p 43487 20662 V 44195 19327 a Fc(2)p 45852
20662 V 30335 20706 15562 45 v 30335 24039 45 3334 v
31043 22762 a Fl(g)48 b Fj(\()p Fl(x)295 b Fj(+)g(2\))369
b(=)f Fl(g)48 b Fj(\()p Fl(x)p Fj(\))295 b Fi(\001)g
Fl(a)41530 22280 y Fk(2)p 43487 24039 V 1 0 0 TeXcolorrgb
44195 22705 a Fc(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 45852 24039 V 30335 24083 15562 45 v 30335
27416 45 3334 v 31043 26140 a Fl(g)48 b Fj(\()p Fl(x)295
b Fj(+)g(2\))369 b(=)f Fl(g)48 b Fj(\()p Fl(x)p Fj(\))295
b(+)g(2)p Fl(a)p 43487 27416 V 44195 26082 a Fc(2)p 45852
27416 V 30335 27461 15562 45 v 47992 4800 a Ff(___/1)p
1 0 0 TeXcolorrgb 48228 6792 a Fe(F)-123 b(A)369 b(1.9)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
31489 54804 45 v 0 TeXcolorgray 24746 81281 a Fm(3)p
0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fn(F)-239 b(A)798 b(1.9)h(-)g(4)f(Eigensc)-60
b(haften)797 b(v)-60 b(on)798 b(F)-179 b(unktionen)796
b(zuordnen)h(-)i(ZO)g(-)-2331 4515 y(Matura)717 b(2013/14)g(1.)g(Neb)60
b(en)-60 b(termin)p 0 TeXcolorgray -741 7823 a Fm(4.)p
0 TeXcolorgray 651 w(Gegeb)36 b(en)443 b(sind)g(vier)h(F)-108
b(unktionst)-36 b(yp)36 b(en.)442 b(F)-27 b(\374r)443
b(alle)h(un)-36 b(ten)442 b(angef\374hrten)h(F)-108 b(unktionen)442
b(gilt:)921 9815 y Fl(a)369 b Fi(6)p Fj(=)f(0;)221 b
Fl(b)370 b Fi(6)p Fj(=)f(0;)221 b Fl(a;)g(b)370 b Fi(2)f
Fb(R)p Fm(.)921 12360 y(Ordne)489 b(den)g(vier)h(F)-108
b(unktionst)-36 b(yp)36 b(en)489 b(jew)-36 b(eils)492
b(die)e(passende)f(Eigensc)-36 b(haft)490 b(\(aus)g(A)g(bis)g(F\))921
14352 y(zu!)p 0 TeXcolorgray 0 TeXcolorgray 2683 17793
16634 45 v 19317 17793 4523 45 v 2683 22929 45 5137 v
3391 19660 a(lineare)434 b(F)-108 b(unktion)433 b Fl(f)576
b Fm(mit)3391 21652 y Fl(f)142 b Fj(\()p Fl(x)p Fj(\))369
b(=)g Fl(a)295 b Fi(\001)g Fl(x)g Fj(+)g Fl(b)p 19272
22929 V 0.9 TeXcolorgray 19317 22929 4478 5137 v 0 TeXcolorgray
1 0 0 TeXcolorrgb 21086 20819 a Fm(C)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 23795 22929 45 5137
v 2683 22973 16634 45 v 19317 22973 4523 45 v 2683 28110
45 5137 v 3391 24841 a(Exp)36 b(onen)-36 b(tialfunktion)435
b Fl(f)575 b Fm(mit)3391 26833 y Fl(f)142 b Fj(\()p Fl(x)p
Fj(\))369 b(=)g Fl(a)295 b Fi(\001)g Fl(b)9870 26351
y Fh(x)10455 26833 y Fj(\()p Fl(b)369 b(>)f Fj(0)p Fl(;)221
b(b)370 b Fi(6)p Fj(=)f(1\))p 19272 28110 V 0.9 TeXcolorgray
19317 28110 4478 5137 v 0 TeXcolorgray 1 0 0 TeXcolorrgb
21044 25999 a Fm(A)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 23795 28110 45 5137 v 2683 28154 16634
45 v 19317 28154 4523 45 v 2683 33290 45 5137 v 3391
30021 a(W)-108 b(urzelfunktion)434 b Fl(f)575 b Fm(mit)3391
32013 y Fl(f)142 b Fj(\()p Fl(x)p Fj(\))369 b(=)g Fl(a)295
b Fi(\001)g Fl(x)10189 31161 y Fa(1)p 10189 31324 406
45 v 10189 31870 a(2)11078 32013 y Fj(+)g Fl(b)p 19272
33290 45 5137 v 0.9 TeXcolorgray 19317 33290 4478 5137
v 0 TeXcolorgray 1 0 0 TeXcolorrgb 21131 31180 a Fm(F)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 23795
33290 45 5137 v 2683 33334 16634 45 v 19317 33334 4523
45 v 2683 38471 45 5137 v 3391 35202 a(Sin)-36 b(usfunktion)433
b Fl(f)576 b Fm(mit)3391 37194 y Fl(f)142 b Fj(\()p Fl(x)p
Fj(\))369 b(=)g Fl(a)295 b Fi(\001)g Fj(sin)6 b(\()p
Fl(b)295 b Fi(\001)g Fl(x)p Fj(\))p 19272 38471 V 0.9
TeXcolorgray 19317 38471 4478 5137 v 0 TeXcolorgray 1 0 0
TeXcolorrgb 21059 36360 a Fm(D)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 23795 38471 45 5137 v 2683
38515 16634 45 v 19317 38515 4523 45 v 0 TeXcolorgray
0 TeXcolorgray 26430 17793 4567 45 v 30997 17793 14038
45 v 26430 26581 45 8788 v 0.92 TeXcolorgray 26475 26581
4478 8788 v 0 TeXcolorgray 28202 22644 a(A)p 30952 26581
45 8788 v 31661 19660 a(Die)434 b(F)-108 b(unktion)433
b Fl(f)575 b Fm(ist)434 b(f\374r)31661 21652 y Fl(a)714
b(>)h Fj(0)637 b Fm(und)e Fj(0)370 b Fl(<)e(b)h(<)g Fj(1)31661
23644 y Fm(streng)1132 b(monoton)f(fal-)31661 25636 y(lend.)p
44990 26581 V 26430 26625 4567 45 v 30997 26625 14038
45 v 26430 31688 45 5063 v 0.92 TeXcolorgray 26475 31688
4478 5063 v 0 TeXcolorgray 28253 29613 a(B)p 30952 31688
45 5063 v 31661 28492 a(Die)346 b(F)-108 b(unktion)345
b Fl(f)487 b Fm(b)36 b(esitzt)31661 30484 y(genau)386
b(drei)f(Nullstellen.)p 44990 31688 V 26430 31732 4567
45 v 30997 31732 14038 45 v 26430 38786 45 7055 v 0.92
TeXcolorgray 26475 38786 4478 7055 v 0 TeXcolorgray 28244
35716 a(C)p 30952 38786 45 7055 v 31661 33599 a(Die)346
b(F)-108 b(unktion)345 b Fl(f)487 b Fm(b)36 b(esitzt)31661
35591 y(in)1012 b(jedem)g(Punkt)g(die)31661 37583 y(gleic)-36
b(he)434 b(Steigung.)p 44990 38786 V 26430 38830 4567
45 v 30997 38830 14038 45 v 26430 47869 45 9039 v 0.92
TeXcolorgray 26475 47869 4478 9039 v 0 TeXcolorgray 28217
43807 a(D)p 30952 47869 45 9039 v 31661 40690 a(Der)g(Graph)e(der)h(F)
-108 b(unk-)31661 42682 y(tion)775 b Fl(f)917 b Fm(b)36
b(esitzt)775 b(einen)31661 44674 y(W)-108 b(endepunkt)780
b(im)i(Ur-)31661 46666 y(sprung.)p 44990 47869 V 26430
47914 4567 45 v 30997 47914 14038 45 v 26430 52718 45
4805 v 0.92 TeXcolorgray 26475 52718 4478 4805 v 0 TeXcolorgray
28271 50773 a(E)p 30952 52718 45 4805 v 31661 49781 a(Die)434
b(F)-108 b(unktion)433 b Fl(f)575 b Fm(ist)434 b(f\374r)31661
51773 y Fl(b)369 b Fj(=)g(2)433 b Fm(k)-36 b(onstan)g(t.)p
44990 52718 V 26430 52762 4567 45 v 30997 52762 14038
45 v 26430 57747 45 4985 v 0.92 TeXcolorgray 26475 57747
4478 4985 v 0 TeXcolorgray 28289 55711 a(F)p 30952 57747
45 4985 v 31661 54629 a(Die)386 b(F)-108 b(unktion)385
b Fl(f)527 b Fm(ist)386 b(n)-36 b(ur)31661 56621 y(f\374r)433
b Fl(x)369 b Fi(\025)h Fj(0)433 b Fm(de\034niert.)p 44990
57747 V 26430 57791 4567 45 v 30997 57791 14038 45 v
47992 7823 a Ff(___/1)p 1 0 0 TeXcolorrgb 48228 9815
a Fe(F)-123 b(A)369 b(1.9)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 64158 54804 45 v 0 TeXcolorgray
24746 81281 a Fm(4)p 0 TeXcolorgray eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1599 a Fn(F)-239 b(A)717 b(1.9)g(-)h(5)f(F)-179
b(unktionst)-60 b(yp)60 b(en)713 b(-)718 b(ZO)f(-)h(Matura)f(NT)g(1)g
(16/17)p 0 TeXcolorgray -741 4907 a Fm(5.)p 0 TeXcolorgray
651 w(Im)451 b(F)-108 b(olgenden)450 b(sind)g(vier)h(F)-108
b(unktionsgleic)-36 b(h)g(ungen)449 b(\(mit)i Fl(a;)221
b(b)398 b Fi(2)g Fb(R)34472 4425 y Fk(+)35710 4907 y
Fm(angef\374hrt)450 b(und)f(die)921 6899 y(Graphen)432
b(v)-36 b(on)434 b(sec)-36 b(hs)433 b(reellen)h(F)-108
b(unktionen)432 b(dargestellt.)921 9444 y(Ordne)374 b(den)h(vier)h(F)
-108 b(unktionsgleic)-36 b(h)g(ungen)374 b(jew)-36 b(eils)377
b(den)e(passenden)f(Graphen)g(\(aus)h(A)g(bis)921 11436
y(F\))433 b(zu!)p 0 TeXcolorgray 0 TeXcolorgray 2683
13217 12209 45 v 14892 13217 4523 45 v 2683 16550 45
3334 v 3391 15273 a Fl(f)142 b Fj(\()p Fl(x)p Fj(\))369
b(=)g Fl(a)295 b Fi(\001)g Fj(sin)6 b(\()p Fl(b)295 b
Fi(\001)g Fl(x)p Fj(\))p 14847 16550 V 0.9 TeXcolorgray
14892 16550 4478 3334 v 0 TeXcolorgray 1 0 0 TeXcolorrgb
16688 15399 a Fm(E)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 19370 16550 45 3334 v 2683 16594 12209
45 v 14892 16594 4523 45 v 2683 19927 45 3334 v 3391
18650 a Fl(f)142 b Fj(\()p Fl(x)p Fj(\))369 b(=)g Fl(a)295
b Fi(\001)g Fl(b)9870 18168 y Fh(x)p 14847 19927 V 0.9
TeXcolorgray 14892 19927 4478 3334 v 0 TeXcolorgray 1 0 0
TeXcolorrgb 16619 18776 a Fm(A)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 19370 19927 45 3334 v 2683
19972 12209 45 v 14892 19972 4523 45 v 2683 23335 45
3364 v 3391 22058 a Fl(f)142 b Fj(\()p Fl(x)p Fj(\))369
b(=)g Fl(a)295 b Fi(\001)9317 21107 y(p)p 10424 21107
740 54 v 951 x Fl(x)g Fj(+)g Fl(b)p 14847 23335 45 3364
v 0.9 TeXcolorgray 14892 23335 4478 3364 v 0 TeXcolorgray
1 0 0 TeXcolorrgb 16706 22153 a Fm(F)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 19370 23335 45 3364
v 2683 23380 12209 45 v 14892 23380 4523 45 v 2683 26713
45 3334 v 3391 25436 a Fl(f)142 b Fj(\()p Fl(x)p Fj(\))369
b(=)g Fl(a)295 b Fi(\001)g Fl(x)g Fj(+)g Fl(b)p 14847
26713 V 0.9 TeXcolorgray 14892 26713 4478 3334 v 0 TeXcolorgray
1 0 0 TeXcolorrgb 16670 25561 a Fm(B)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 19370 26713 45 3334
v 2683 26757 12209 45 v 14892 26757 4523 45 v 0 TeXcolorgray
0 TeXcolorgray 24451 13217 4567 45 v 29018 13217 14197
45 v 24451 22619 45 9403 v 0.92 TeXcolorgray 24495 22619
4478 9403 v 0 TeXcolorgray 26223 18375 a(A)p 28973 22619
45 9403 v 29682 21674 a
 currentpoint currentpoint translate 0.62637 0.62637 scale neg exch
neg exch translate
 29682 21674 a 29682 21674 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 184.94283 a add def
/d 0.0 a add neg def /h 108.34735 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 29682
21674 a 35414 17971 a @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  0.0 -19.91684 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 133.15863 0.0 -51.7842 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 19.91684 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  -28.45274 0.0 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 74.8872 0.0 -33.46014   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 133.15863  0 -51.7842  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -51.7842
 133.15863  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-33.46014  def /maxTickline 74.8872  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 74.8872
0.0 -33.46014   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 133.15863
0.0 -51.7842 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 74.8872  0 -33.46014  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -33.46014
 74.8872  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-51.7842  def /maxTickline 133.15863  def /dT 1305270 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 19.91684  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 19.91684  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 74.8872
0.0 -33.46014   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 133.15863
0.0 -51.7842 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 34169 16051 a
Fk(1)34169 13846 y(2)34169 11642 y(3)33437 20414 y Fg(\000)p
Fk(1)38329 19316 y(1)2679 b(2)h(3)f(4)-16584 b Fg(\000)p
Fk(1)35414 17971 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 35414 17971 a 35414 17971 a
tx@Dict begin  { 133.15863 74.8872 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 35414
17971 a 35414 17971 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 35414 17971 a 35071 18257 a Fm(x)35414
17971 y
tx@Dict begin  PutEnd  end
 35414 17971 a 35414 17971 a
tx@Dict begin  PutEnd  end
 35414 17971 a 35414
17971 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 35414 17971 a 35414 17971 a
tx@Dict begin  { 0.0 0.0 pop 133.15863 74.8872 exch pop } PutCoor PutBegin
 end
 35414 17971 a 35414
17971 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 35414 17971 a 34366 18303 a Fm(f\(x\))35414 17971
y
tx@Dict begin  PutEnd  end
 35414 17971 a 35414 17971 a
tx@Dict begin  PutEnd  end
 35414 17971 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -1.8199999999999994 def /x1 4.679999999999998
def /dx x1 x sub 199 div def /F@pstplot (0.49999999999999994*EXP(0.39422868018213514*x))
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
19.91684 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 19.91684 mul gt { moveto } { dup -1.e30 19.91684
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 19.91684 mul gt { moveto } {
dup -1.e30 19.91684 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 35414 17971 a
tx@Dict begin  { 67.14848 34.6554 } PutCoor PutBegin  end
 35414 17971 a
915 x Fm(f)35414 17971 y
tx@Dict begin  PutEnd  end
 35414 17971 a 50154 21674 a
currentpoint initclip moveto

50154 21674 a 29682 21674 a
 currentpoint currentpoint translate 1 0.62637 div 1 0.62637 div scale
neg exch neg exch translate
 29682 21674 a 43169 22619
45 9403 v 24451 22664 4567 45 v 29018 22664 14197 45
v 24451 32066 45 9403 v 0.92 TeXcolorgray 24495 32066
4478 9403 v 0 TeXcolorgray 26274 27822 a Fm(B)p 28973
32066 45 9403 v 29682 31121 a
 currentpoint currentpoint translate 0.62637 0.62637 scale neg exch
neg exch translate
 29682 31121 a 29682 31121
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 184.94283 a add def
/d 0.0 a add neg def /h 108.34735 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 29682 31121 a 35414 27417 a @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  0.0 -19.91684 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 133.15863 0.0 -51.7842 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 19.91684 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  -28.45274 0.0 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 74.8872 0.0 -33.46014   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 133.15863  0 -51.7842  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -51.7842
 133.15863  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-33.46014  def /maxTickline 74.8872  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 74.8872
0.0 -33.46014   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 133.15863
0.0 -51.7842 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 74.8872  0 -33.46014  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -33.46014
 74.8872  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-51.7842  def /maxTickline 133.15863  def /dT 1305270 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 19.91684  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 19.91684  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 74.8872
0.0 -33.46014   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 133.15863
0.0 -51.7842 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 34169 25498 a
Fk(1)34169 23293 y(2)34169 21088 y(3)33437 29861 y Fg(\000)p
Fk(1)38329 28763 y(1)2679 b(2)h(3)f(4)-16584 b Fg(\000)p
Fk(1)35414 27417 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 35414 27417 a 35414 27417 a
tx@Dict begin  { 133.15863 74.8872 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 35414
27417 a 35414 27417 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 35414 27417 a 35071 27703 a Fm(x)35414
27417 y
tx@Dict begin  PutEnd  end
 35414 27417 a 35414 27417 a
tx@Dict begin  PutEnd  end
 35414 27417 a 35414
27417 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 35414 27417 a 35414 27417 a
tx@Dict begin  { 0.0 0.0 pop 133.15863 74.8872 exch pop } PutCoor PutBegin
 end
 35414 27417 a 35414
27417 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 35414 27417 a 34366 27749 a Fm(f\(x\))35414 27417
y
tx@Dict begin  PutEnd  end
 35414 27417 a 35414 27417 a
tx@Dict begin  PutEnd  end
 35414 27417 a 35414 27417
a
tx@Dict begin  { 47.23164 31.07022 } PutCoor PutBegin  end
 35414 27417 a 915 x Fm(f)35414 27417 y
tx@Dict begin  PutEnd  end
 35414 27417
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -1.82 def /x1 4.68 def /dx x1 x
sub 49 div def /F@pstplot ((--2.--1.*x)/2.)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 19.91684 mul } def  /ps@Exit
false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30 19.91684
mul gt { moveto } { dup -1.e30 19.91684 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 19.91684 mul gt { moveto } { dup -1.e30 19.91684 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 50154 31121
a
currentpoint initclip moveto
 50154 31121 a 29682 31121 a
 currentpoint currentpoint translate 1 0.62637 div 1 0.62637 div scale
neg exch neg exch translate
 29682 31121 a 43169 32066
45 9403 v 24451 32110 4567 45 v 29018 32110 14197 45
v 24451 41512 45 9403 v 0.92 TeXcolorgray 24495 41512
4478 9403 v 0 TeXcolorgray 26265 37268 a Fm(C)p 28973
41512 45 9403 v 29682 40567 a
 currentpoint currentpoint translate 0.62637 0.62637 scale neg exch
neg exch translate
 29682 40567 a 29682 40567
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 184.94283 a add def
/d 0.0 a add neg def /h 108.34735 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 29682 40567 a 35414 36864 a @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  0.0 -19.91684 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 133.15863 0.0 -51.7842 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 19.91684 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  -28.45274 0.0 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 74.8872 0.0 -33.46014   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 133.15863  0 -51.7842  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -51.7842
 133.15863  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-33.46014  def /maxTickline 74.8872  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 74.8872
0.0 -33.46014   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 133.15863
0.0 -51.7842 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 74.8872  0 -33.46014  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -33.46014
 74.8872  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-51.7842  def /maxTickline 133.15863  def /dT 1305270 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 19.91684  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 19.91684  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 74.8872
0.0 -33.46014   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 133.15863
0.0 -51.7842 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 34169 34944 a
Fk(1)34169 32740 y(2)34169 30535 y(3)33437 39308 y Fg(\000)p
Fk(1)38329 38209 y(1)2679 b(2)h(3)f(4)-16584 b Fg(\000)p
Fk(1)35414 36864 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 35414 36864 a 35414 36864 a
tx@Dict begin  { 133.15863 74.8872 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 35414
36864 a 35414 36864 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 35414 36864 a 35071 37150 a Fm(x)35414
36864 y
tx@Dict begin  PutEnd  end
 35414 36864 a 35414 36864 a
tx@Dict begin  PutEnd  end
 35414 36864 a 35414
36864 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 35414 36864 a 35414 36864 a
tx@Dict begin  { 0.0 0.0 pop 133.15863 74.8872 exch pop } PutCoor PutBegin
 end
 35414 36864 a 35414
36864 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 35414 36864 a 34366 37196 a Fm(f\(x\))35414 36864
y
tx@Dict begin  PutEnd  end
 35414 36864 a 35414 36864 a
tx@Dict begin  PutEnd  end
 35414 36864 a 35414 36864
a
tx@Dict begin  { 66.01056 23.90015 } PutCoor PutBegin  end
 35414 36864 a 915 x Fm(f)35414 36864 y
tx@Dict begin  PutEnd  end
 35414 36864
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -1.8199999999999994 def /x1 4.679999999999998
def /dx x1 x sub 199 div def /F@pstplot (COS(2.2*x))  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 19.91684 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 19.91684 mul gt { moveto } { dup -1.e30 19.91684 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 19.91684 mul gt { moveto } { dup -1.e30 19.91684
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 50154 40567
a
currentpoint initclip moveto
 50154 40567 a 29682 40567 a
 currentpoint currentpoint translate 1 0.62637 div 1 0.62637 div scale
neg exch neg exch translate
 29682 40567 a 43169 41512
45 9403 v 24451 41557 4567 45 v 29018 41557 14197 45
v 24451 50959 45 9403 v 0.92 TeXcolorgray 24495 50959
4478 9403 v 0 TeXcolorgray 26238 46715 a Fm(D)p 28973
50959 45 9403 v 29682 50014 a
 currentpoint currentpoint translate 0.62637 0.62637 scale neg exch
neg exch translate
 29682 50014 a 29682 50014
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 184.94283 a add def
/d 0.0 a add neg def /h 108.34735 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 29682 50014 a 35414 46310 a @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  0.0 -19.91684 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 133.15863 0.0 -51.7842 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 19.91684 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  -28.45274 0.0 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 74.8872 0.0 -33.46014   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 133.15863  0 -51.7842  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -51.7842
 133.15863  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-33.46014  def /maxTickline 74.8872  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 74.8872
0.0 -33.46014   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 133.15863
0.0 -51.7842 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 74.8872  0 -33.46014  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -33.46014
 74.8872  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-51.7842  def /maxTickline 133.15863  def /dT 1305270 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 19.91684  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 19.91684  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 74.8872
0.0 -33.46014   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 133.15863
0.0 -51.7842 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 34169 44391 a
Fk(1)34169 42186 y(2)34169 39981 y(3)33437 48754 y Fg(\000)p
Fk(1)38329 47656 y(1)2679 b(2)h(3)f(4)-16584 b Fg(\000)p
Fk(1)35414 46310 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 35414 46310 a 35414 46310 a
tx@Dict begin  { 133.15863 74.8872 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 35414
46310 a 35414 46310 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 35414 46310 a 35071 46596 a Fm(x)35414
46310 y
tx@Dict begin  PutEnd  end
 35414 46310 a 35414 46310 a
tx@Dict begin  PutEnd  end
 35414 46310 a 35414
46310 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 35414 46310 a 35414 46310 a
tx@Dict begin  { 0.0 0.0 pop 133.15863 74.8872 exch pop } PutCoor PutBegin
 end
 35414 46310 a 35414
46310 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 35414 46310 a 34366 46642 a Fm(f\(x\))35414 46310
y
tx@Dict begin  PutEnd  end
 35414 46310 a 35414 46310 a
tx@Dict begin  PutEnd  end
 35414 46310 a 35414 46310
a
tx@Dict begin  { 41.54118 46.60533 } PutCoor PutBegin  end
 35414 46310 a 915 x Fm(f)35414 46310 y
tx@Dict begin  PutEnd  end
 35414 46310
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -1.8199999999999994 def /x1 -0.2
def /dx x1 x sub 199 div def /F@pstplot (1.0/(x+0.1)+2.0)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 19.91684 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 19.91684 mul gt { moveto } { dup -1.e30 19.91684 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 19.91684 mul gt { moveto } { dup -1.e30
19.91684 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0.2 def /x1 4.679999999999998 def
/dx x1 x sub 199 div def /F@pstplot (1.0/(x+0.1)+2.0)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 19.91684 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 19.91684 mul gt { moveto } { dup -1.e30 19.91684 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 19.91684 mul gt { moveto } { dup -1.e30 19.91684
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 50154 50014 a
currentpoint initclip moveto
 50154 50014 a
29682 50014 a
 currentpoint currentpoint translate 1 0.62637 div 1 0.62637 div scale
neg exch neg exch translate
 29682 50014 a 43169 50959 45 9403 v 24451
51003 4567 45 v 29018 51003 14197 45 v 24451 60405 45
9403 v 0.92 TeXcolorgray 24495 60405 4478 9403 v 0 TeXcolorgray
26292 56161 a Fm(E)p 28973 60405 45 9403 v 29682 59461
a
 currentpoint currentpoint translate 0.62637 0.62637 scale neg exch
neg exch translate
 29682 59461 a 29682 59461 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 184.94283 a add def
/d 0.0 a add neg def /h 108.34735 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 29682 59461 a 35414 55757
a @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  0.0 -19.91684 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 133.15863 0.0 -51.7842 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 19.91684 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  -28.45274 0.0 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 74.8872 0.0 -33.46014   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 133.15863  0 -51.7842  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -51.7842
 133.15863  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-33.46014  def /maxTickline 74.8872  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 74.8872
0.0 -33.46014   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 133.15863
0.0 -51.7842 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 74.8872  0 -33.46014  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -33.46014
 74.8872  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-51.7842  def /maxTickline 133.15863  def /dT 1305270 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 19.91684  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 19.91684  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 74.8872
0.0 -33.46014   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 133.15863
0.0 -51.7842 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 34169 53837 a Fk(1)34169 51633
y(2)34169 49428 y(3)33437 58201 y Fg(\000)p Fk(1)38329
57102 y(1)2679 b(2)h(3)f(4)-16584 b Fg(\000)p Fk(1)35414
55757 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 35414 55757 a 35414 55757 a
tx@Dict begin  { 133.15863 74.8872 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 35414 55757 a 35414
55757 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 35414 55757 a 35071 56043 a Fm(x)35414 55757
y
tx@Dict begin  PutEnd  end
 35414 55757 a 35414 55757 a
tx@Dict begin  PutEnd  end
 35414 55757 a 35414 55757
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 35414 55757 a 35414 55757 a
tx@Dict begin  { 0.0 0.0 pop 133.15863 74.8872 exch pop } PutCoor PutBegin
 end
 35414 55757 a 35414 55757
a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 35414 55757 a 34366 56089 a Fm(f\(x\))35414 55757 y
tx@Dict begin  PutEnd  end

35414 55757 a 35414 55757 a
tx@Dict begin  PutEnd  end
 35414 55757 a 35414 55757
a
tx@Dict begin  { 41.54118 22.70518 } PutCoor PutBegin  end
 35414 55757 a 915 x Fm(f)35414 55757 y
tx@Dict begin  PutEnd  end
 35414 55757
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -1.8199999999999996 def /x1 4.679999999999997
def /dx x1 x sub 199 div def /F@pstplot (1.3*SIN(2.0*x))  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 19.91684 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 19.91684 mul gt { moveto } { dup -1.e30 19.91684 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 19.91684 mul gt { moveto } { dup -1.e30
19.91684 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 50154 59461
a
currentpoint initclip moveto
 50154 59461 a 29682 59461 a
 currentpoint currentpoint translate 1 0.62637 div 1 0.62637 div scale
neg exch neg exch translate
 29682 59461 a 43169 60405
45 9403 v 24451 60450 4567 45 v 29018 60450 14197 45
v 24451 69852 45 9403 v 0.92 TeXcolorgray 24495 69852
4478 9403 v 0 TeXcolorgray 26310 65608 a Fm(F)p 28973
69852 45 9403 v 29682 68907 a
 currentpoint currentpoint translate 0.62637 0.62637 scale neg exch
neg exch translate
 29682 68907 a 29682 68907
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 184.94283 a add def
/d 0.0 a add neg def /h 108.34735 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 29682 68907 a 35414 65203 a @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  0.0 -19.91684 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 133.15863 0.0 -51.7842 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 19.91684 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  -28.45274 0.0 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 74.8872 0.0 -33.46014   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 133.15863  0 -51.7842  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -51.7842
 133.15863  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-33.46014  def /maxTickline 74.8872  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 74.8872
0.0 -33.46014   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 133.15863
0.0 -51.7842 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 74.8872  0 -33.46014  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -33.46014
 74.8872  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-51.7842  def /maxTickline 133.15863  def /dT 1305270 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 19.91684  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 19.91684  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 74.8872
0.0 -33.46014   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 133.15863
0.0 -51.7842 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 34169 63284 a
Fk(1)34169 61079 y(2)34169 58874 y(3)33437 67647 y Fg(\000)p
Fk(1)38329 66549 y(1)2679 b(2)h(3)f(4)-16584 b Fg(\000)p
Fk(1)35414 65203 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 35414 65203 a 35414 65203 a
tx@Dict begin  { 133.15863 74.8872 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 35414
65203 a 35414 65203 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 35414 65203 a 35071 65489 a Fm(x)35414
65203 y
tx@Dict begin  PutEnd  end
 35414 65203 a 35414 65203 a
tx@Dict begin  PutEnd  end
 35414 65203 a 35414
65203 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 35414 65203 a 35414 65203 a
tx@Dict begin  { 0.0 0.0 pop 133.15863 74.8872 exch pop } PutCoor PutBegin
 end
 35414 65203 a 35414
65203 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 35414 65203 a 34366 65535 a Fm(f\(x\))35414 65203
y
tx@Dict begin  PutEnd  end
 35414 65203 a 35414 65203 a
tx@Dict begin  PutEnd  end
 35414 65203 a 35414 65203
a
tx@Dict begin  { 36.98865 52.58044 } PutCoor PutBegin  end
 35414 65203 a 915 x Fm(f)35414 65203 y
tx@Dict begin  PutEnd  end
 35414 65203
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 6.499999998917529E-6 def /x1 4.679999999999997
def /dx x1 x sub 199 div def /F@pstplot (sqrt(x)+1.0)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 19.91684 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 19.91684 mul gt { moveto } { dup -1.e30 19.91684 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 19.91684 mul gt { moveto } { dup -1.e30 19.91684
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 50154 68907
a
currentpoint initclip moveto
 50154 68907 a 29682 68907 a
 currentpoint currentpoint translate 1 0.62637 div 1 0.62637 div scale
neg exch neg exch translate
 29682 68907 a 43169 69852
45 9403 v 24451 69896 4567 45 v 29018 69896 14197 45
v 47992 4907 a Ff(___/1)p 1 0 0 TeXcolorrgb 48228 6899
a Fe(F)-123 b(A)369 b(1.9)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 76264 54804 45 v 0 TeXcolorgray
24746 81281 a Fm(5)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 4.2/FA 4.2 Gesamtdokument.dvi
%%CreationDate: Fri Nov 10 08:50:00 2017
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: LMRoman12-Bold LMRoman12-Regular LMMathItalic12-Regular
%%+ LMRoman10-Regular LMRoman8-Regular LMMathSymbols8-Regular
%%+ LMMathExtension10-Regular LMMathItalic8-Regular
%%+ LMMathSymbols10-Regular MSBM10
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ "C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 4.2/FA 4.2 Gesamtdokument.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2017.11.10:0949
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-mathex.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathex[
/parenleftbig
/parenrightbig
/bracketleftbig
/bracketrightbig
/floorleftbig
/floorrightbig
/ceilingleftbig
/ceilingrightbig
/braceleftbig
/bracerightbig
/angbracketleftbig
/angbracketrightbig
/vextendsingle
/vextenddouble
/slashbig
/backslashbig
/parenleftBig
/parenrightBig
/parenleftbigg
/parenrightbigg
/bracketleftbigg
/bracketrightbigg
/floorleftbigg
/floorrightbigg
/ceilingleftbigg
/ceilingrightbigg
/braceleftbigg
/bracerightbigg
/angbracketleftbigg
/angbracketrightbigg
/slashbigg
/backslashbigg
/parenleftBigg
/parenrightBigg
/bracketleftBigg
/bracketrightBigg
/floorleftBigg
/floorrightBigg
/ceilingleftBigg
/ceilingrightBigg
/braceleftBigg
/bracerightBigg
/angbracketleftBigg
/angbracketrightBigg
/slashBigg
/backslashBigg
/slashBig
/backslashBig
/parenlefttp
/parenrighttp
/bracketlefttp
/bracketrighttp
/bracketleftbt
/bracketrightbt
/bracketleftex
/bracketrightex
/bracelefttp
/bracerighttp
/braceleftbt
/bracerightbt
/braceleftmid
/bracerightmid
/braceex
/arrowvertex
/parenleftbt
/parenrightbt
/parenleftex
/parenrightex
/angbracketleftBig
/angbracketrightBig
/unionsqtext
/unionsqdisplay
/contintegraltext
/contintegraldisplay
/circledottext
/circledotdisplay
/circleplustext
/circleplusdisplay
/circlemultiplytext
/circlemultiplydisplay
/summationtext
/producttext
/integraltext
/uniontext
/intersectiontext
/unionmultitext
/logicalandtext
/logicalortext
/summationdisplay
/productdisplay
/integraldisplay
/uniondisplay
/intersectiondisplay
/unionmultidisplay
/logicalanddisplay
/logicalordisplay
/coproducttext
/coproductdisplay
/hatwide
/hatwider
/hatwidest
/tildewide
/tildewider
/tildewidest
/bracketleftBig
/bracketrightBig
/floorleftBig
/floorrightBig
/ceilingleftBig
/ceilingrightBig
/braceleftBig
/bracerightBig
/radicalbig
/radicalBig
/radicalbigg
/radicalBigg
/radicalbt
/radicalvertex
/radicaltp
/arrowvertexdbl
/arrowtp
/arrowbt
/bracehtipdownleft
/bracehtipdownright
/bracehtipupleft
/bracehtipupright
/arrowdbltp
/arrowdblbt
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: MSBM10
%!PS-AdobeFont-1.0: MSBM10 003.002
%%Title: MSBM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSBM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSBM10 known{/MSBM10 findfont dup/UniqueID known{dup
/UniqueID get 5031982 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSBM10 def
/FontBBox {-55 -420 2343 920 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSBM10.) readonly def
/FullName (MSBM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 78 /N put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943E919FB4E3240FEEED78EE63
0677FAF39AB2543D18C08A2B98B97451CD42CB7893DA8601CC0F45A65BEAFC64
EF72554395DA801CF2E9E3B03F65F1BD98F8C5F8EA06D7457842303C1A817E7D
69821807328AF426B9DDBC188A79A66FBB9E6193B4A3EDFE3136C6574B9C4C94
E2CBA4FE7997F949BB2DAC0D329C2AD8E4095BD18A037AC9F77B794FC389E5CD
56CC4C0B74D64FB0D02C92B88942C18B6DA84D4CF482DAF3A01E80BE483AC6ED
AE98F5F3E49BC762EF6BA937D528E751D9588B0A1E82EF0A5998150EC3854472
5A91EB983915BC1D6E2C3E615E0267B39D6937ECE0EC16162FE76676E5B69F3C
BC1AD934BECA284B89F0613B70876247D768BCD246883CFF4D819D6265302730
7E4BE6B2FFE7E91CCB8C6D2AFACDB4C5DB9688153E1D6B2DE136BF7068418A4F
2D1C0CA301B1B97290B46EE14B8286A81E709980F67382A5132F01B2D44DCFF0
9753E776AEAE2141D580E64C82598DAA6DA4057FFA9D02C3B77AE15A50AB457F
3FA5A10A3C986B22F8E154C1E564A55D3BE4487677613DCF793F7E1B57C9A925
BC57746C25FE567719A9EAA9CC44F1D0FF8F92C03132B205F57E3AFE9FB66632
D3FB3EF5BDFB9848030527FE759A5273CB81DBA2719611355F43E34F8FD7D0EC
9BE47685A2D122C9B60198A430C5F5E3F972376F0FF4BA52BAFF64095F7ABCBA
022622692231FF87514FD912B80C07A0EDCEECFA629E2734B5EFE2604E8DCB24
32A4C691DB4CCCF19EF897A9F4EA5B2B5AFCDF87AC06B93669F3007C1295E016
FF0A99324B80E37020B1080E80949525B3278DF111ABEA48E7182B6F48833E9E
B7BFE6134591C923F2C91D77A132347F5F471F1139B9938E880CC5B3409B3385
9FE870D53EC343C11C946BB9B5FF1454AC7D547539FCBD3D77D83180BB4741A6
90189230B9B61C6C54309B61623636F98871724F9A85088E44779264257FFA0A
FA05C2842C534A411593D10A76CB09C8FB45E6E44703FC7A51D81D3C1E8F27F0
3AAA9F00AA3A998A0C661B72E46589CC08EA87EECFDF36B819B07306C38AD155
60CE44A39581BD6B555165091C5D4107149E976E2488EBD830CCB0A350C695E3
ABC1069A94F16744A6F2D97BFD4E208EB2BFECD6B74C35310CC3567F94414FB8
334C42FEAB58B02F67E9CBC1855FE7DD7C1B142979D80DAF96A3F3517933574B
07E1CAD5FEEB9AD584935A58676976DDD2B6E118FD1D46453894775B2DF1F871
924CE2C0479EA8C8C337504C1F456B77CD97DDCF704455215B860BD0241DDAC2
F375DD996474504545DD2C1B775E4CAEAC1DA45C79223AECA9329513ECA625CC
1C5FC3AFB291A6B75A593BA8B9CA4954AD9069797717CC0B929BABA88F67E4E3
691AF74A94E95E6AF67C7B550FE44C63FAA5B404457CADEA896C69E5262430E9
787D1CB2FE11612EB29CC828ADD9B2585FB30DA75565D2D87C4AFBAEBA55678A
4E32C9C491BC85622463D65C0E9723DA72D45C6893928AC6364278958FC16CD1
F7C31DF8E2DC3521CFDC4A1218F6F83BB3974123A362B879F4A7F4F84113A514
3469766791AE6D34BA5058A534B06FD147A2003BC9217289A93C5FD02EA25058
5D1D0C5CBBBD31AF86DE7198706BC7B22AF5E15A27DA30541A8DD534DA895517
EFD347C1B0BEB3D33CED9047C473A7ABD9E68F03E176745F59449B537F8A8BC1
3F149C3D94CC01BBC61D9DDFC8CB1C2D3F0A65354054433B2A57E23265677D37
989168AF0874D0D8EAF987BC4A15F80B3A1B1FE1855C92998C5E466522F23F9E
FD77D816658CBAB9131893E6F3C64A7ED38F4DCBF7291B6D7A360BFC79086819
4D35709FD0425F4D6E66251ACFD3FC990F6B69E2E1EF111C312D6EF7E4FFA2B3
15D200DF39BF923747351FE56D3D574A24B7AEC29044CF792D4CA7F2B6D9AC0C
62679B92C0F90D0B3D453EA1013FC138E71EFC4EF8F9AAE35F11A49414815E8A
07CAE9E8B59EFBC26F389D8399
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE3B67D0FF6359D1B6C1C6DA4220428777EA791A503CDE266
386B24E0D7FC0C19F54D39D2B9223D466810564615CF6EBF5A75BEC8F6DDDF38
26F6A75F7C9A433ABB0C95B150D21DBB43878E3EF527976A3A2433047A05623D
54F22D062F633C08A3EBDF22FEFA476B92D1B05B8667CF563F5CFD60228D5707
0FA2674ECBFB8D84E1693A5497D4575DEC4114A0B80027DA61B2F65A6CF49F39
F1E6E57FFBF72587943DFDB4C686CCC01181F81BC2BBFEA4004735CDA5679294
06056F5CECB8442177468B9F356502F078780BD13566C142FA2EC263EBF4FF16
85861EAB031E3DE1B422815B48DC4E32616CD5191CB807695651516115E903ED
F0546F209BA96E196DDF8B65C13AA2E342DA59E1D3DF5C0E365A8F4493C842E7
CDFADDB8787BE835545CA955BD28A734B7A23FF7B05AE2BB7A82E7BEBA844F83
25E0BB66E6780B22535B9997EB3E9E0F8D2B7F1B8C488558487197831D98B9A5
3A33F3294414D2BD12A184CCBFC6AA72E74708E32B8DE6597AF67A83E0A01171
61BAC88886ADEC5DEF5A848E66ED5BC81567FED2B2B29F357A8EFE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic8-Regular
%!PS-AdobeFont-1.0: LMMathItalic8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathItalic8-Regular known{/LMMathItalic8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic8-Regular)readonly def
/FamilyName(LMMathItalic8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathItalic8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -250 1110 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD112356772A65C14D49D03C7D456E5
1A27C2ED815B30E268B02FB1D2E769067ADAF25F28640307E3A89F0B04F44A1E
1392A44B8AAD82CED1539B6A9CEBF441EB81775C7EE4CC12313F31FE710DD429
4B1955DF2BF7A88E1EC21DA22A63BF63E89C913EC01EE10A0601D6FB239DF59D
2CEE7667F4CC4BAF660B24F635F981638F40E8CCF07F21F5B5FE3B5C115D1000
0E4B2ADAF7B1C53935EB7414421DB49A59F82D98D08351CB0BF0C06DE836CFD5
42D68D51AAD4069871F257AB7733F8EABD731FF9B0E3AD64000BCDBBEBE26F88
C96730B45C14458F42927E24318A97B48235E5FE200DB40706E9B41AF7CA33C5
67BF7766BD396006C5364D1E736B256538E5D163CDA75C4F419620D5BE5DDEB1
F7D7A55B5ACEA2B2EB4B78997398C7D38B3D7B5774D980C087236ACC7346F518
7607A19E85C83E2C6ED4F3FA8C15B65FC3D117BC5E3FFE33A5B7A69F7F7159CA
667D96B5D03E4C5E55FCB1F4E2148B4B8DA87567988F07CA181FA6A3C3C30A33
80AC6F4E92903C47BF489A2376AC02B00B8CD01DE080C96A452D52B4B56F9520
B85062F15C4828813D3694BB4BD3512541C82005C9AA5C065476148A4E47DBD4
580CB1ADD206D19E7D653E2690FD48B252BFECDB2C64C96F7477B2E5EA0593A9
84841E96F931F01B2B61C26E8450D5F2B37B51EC364BC2A1233FD108DFFE0F00
AE57465ADB0191B38D14E89413FCCB77A9FCAE09F59A3F5C352570F7390BE91D
178255E10C02CFB7B679DAF86EB351BDEBB8A7D4DBB9C65715A1355FC8D2C355
BB452D44AFDF7E25676F3CB3A677904DB96A4FC7509374E544FDFD4473683CE7
52445AD38E6F3AADA886EAD97F34E1B4DE04B482145F39350CB3BD73F6BE22FD
F714EED60CF92C851335C54AC440689A9CFB00470F98FE893DC9FE736A73D749
8A032F336C94C4C3C0F4ECFA9007FD8BF48AC4747D6A07A1EE6BECB17039FF93
8277AE848F2424871BB26E5F9963F3C6022BCB476ACDDDC00930BE769752504D
9980BC8D8085015695A4B206D94F9FBEE46F6B6338DD6CF29695F529C5D7372E
F249FA9C5B267A504E92D83012209B6A453DE2357CA4D18096E23B75C676FC8A
17C8047C7BDA301A3FDA7F3A8C08534424CE824EE2C0C5D132FF52043CA1090E
53F371F8CD2081A7DCF6C4D23EA8159ED1DB7774C23B6540540B7E0F3A7B8EDB
F4AB33DBFA1F4D3247809896E904F3EEAEE288CF33160E6231BEA40513182831
E33921DA5D3F2E4484D88CEF40CE313C8754B85231AF98893672C3DEF7A733E8
39622CCF9361593316FCA3E6ABE035F2A19ADAE811C74EFF3A0FB759F08DB739
0B26AD5250D0C6C61C210C8E6721BC5514E18BFE38E0CE79ADDF7809B2196708
B412205FCDBD5B08C6ADFBC2E20E1B62223A7A2914E413A00A993F5542355968
3AA301FACD379DDDB1DAF3EC66FA0B727FC6AE134C01819BE812383102D906D9
36C579733D7270243C367AFBB76001E331CFAD639BC4A5B134D08DAF80F9403C
AE2EFBAEFD9CDDB5A1D5E9BBCF46FA3AE7DDF8E169FA4E0EA83347DD892B5A16
3785EC96245A45B4ED6B5BF9F0750DC176964C0089676139B95B6170A1856367
EE3FBBBB32173165363DE21EF673A9FD8F1F6D3906315A09B88C3910BC113A41
10B17E7A2D7E4D7B9F3C55F19F4663A1D97FDB790547FF23C860C2CFDCABB5E6
428AD036B21CD754133A2722778B45B63E3700A128E7BDDFFC28459FB0A22594
D4F72E5FB7E0ADEFFB8C9D1A6570919B3F4246DB26456DF3BF35FC83A46006C3
564370618F60AA3A85021CD0CAEC1E3AE9A2BAC620ED2A12432CB1FD2351BF27
F03DCEF58B7EAD68370E4A0A6FDBB0B23809B9A42F9ABF48FD69D228F722EC13
D6CD3D48CCC712D8FB65A4B85073FA7C70A3FD3F1508DCBB9F314375CA2826E8
82D4FF6143BB5933AE882A540B806AB197B102B3BF7DEF41CA3B9DB089C0995E
743FAA61D49C79DE4C9A09A5DE47786C8929492CA2A57E6524BD91E1F1638D68
35AC99E993CA45692C4749F00856F449A37259EB7338CD9BBD4D6A6C511D65A5
02CF8A6A26530A92BBE9D55F80435B30E583F53718ECDFD0BFC09153B90A002F
A840FA6FFEAEEE59420ECADFAEF80EC2B697928BDDBA32D6066DBE9F9F6A572B
A8BE7D6136C56B8AC3CAD293520707315B7B6D5D19AA32E09D7EFD0F229B2CFA
3C96246B36D399345F7C174BA730CB58E65C0B30BEF7F044473060C047A5DCA8
A63C1D7462EEF63349E1B5A1C4FC665D79AA32670DFE257FBB9A55FA80EE0B21
5B05E1D829BBF44C90CBC9C93A93AE21039986E27AF406E2DAF411198505526B
0D17BD23BB25FD4F79F6AF4BF306186A29502F894F48D395BAB7BAD72F71A026
CD359AFFCC3E73F6BEF634BFBE1A3302C3C0544755F2D0FADBE2BCFD0DA870DA
49765296DC38127FAE211D946F9201CEA52A380FE5B0CCB5380CFC1A59E27A6F
6E6C1AEB192DB95D93A8357AC2E1AC49DCB371AC94ECAA43E37958590CB618DD
13
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathExtension10-Regular
%!PS-AdobeFont-1.0: LMMathExtension10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathExtension10-Regular known{/LMMathExtension10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathExtension10-Regular)readonly def
/FamilyName(LMMathExtension10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathExtension10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -2960 1454 772}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA967B9A7DF802734736F3D61073FD
8ED62BDFAF207E10687AEF931F44AD55F9C3DB174637A34D867219978D9D1BF9
C733804DA26B4CDAF23436F0F8EA2308CBE3665ADFAA59A240036663D9ED945E
8C22B3621360BE02DBDDCC3BFE082CF6230F8C83FA4B6357682B7A7DF35F166A
FD3F889D853655FEE984B52090BB8D6B7EF8DBF3B1D022B6586235B32899053B
0718E16BEE7E146A4753D6E3FD6C4B6BD9AAFC2AED5748E193D28CF6A8391414
41971E41C481638DBFBFDE2638B65D10FE5FCC35EBC520E3520F0A0EC8FDA853
597F3C2E2F60B8DFD431DB5B1796737BE979C821EEB58BCC28A92DD60EEF767E
E861765D087BCADB269D7374E766D4C2328E711F23B767CA5D47241039F33EE8
0DC9D02C1D4D91AA0E59962090F584084D29E26056AD0E2B1FC4C1257DF003B0
748DEEE2A30AE53AEA24FDC43AF62A66BADE0B3557F9F4CAFD659CF933472AB0
8922041D5D0DFC41603EE166FDAC7C89DA8D63EC1CD0E2E23E45C5C81A5663E5
C6952D28B285A1C349378D5D07B5BFD7D742DCE097383EF86C667BB651988158
47B4EEBB5E1C035CE74DBB3D3FC9D00DD3D28DC0853DDADFB3C7E642482047AA
87EF5639DA5CABBEEECB36123995B88946D1D7AF48D7C86E718E1153F8A4093F
79457700C6E57A6BB805A2386ADAD90E2DEF9354C8785D11DA504D44CB3B6118
C74E1B7A174BA2664E6F25EC8AB818169B1A250D9725677C72896D4CD4A15BC1
EBA98BA918D1ADFF45ABE8C162D93331FF301D17DC8998230B8C7918089C70D1
65F57CA3361018FF92DEFC60063E1A6926B7780A75CF71E1DBEECE8BB1295F24
4E7AB8080FD30DBECAF8DEBDC436B4AF98A2328B7EB946668117CC386E257083
7C0EDE2A2FF6EE7DEE7168B436A033249C8326F5ECEE6C952EFC6D271378AFA7
90A3AC4D2C99F23AD08C9753D7532D4B1BA3170AF923DDD58EBC8E8ACF16C2C3
5D2C311ADA85F37120427290A229961ADB1D5023BD93644E4C23176BF787664F
CF245203C8C3E557669BDD382731E334C06F4B6EA145D5DF351211A0511605B2
8C540290A08A304CB1279FEB8FC14062F495A5EF2072B2957D98A1AB2E4B2A21
6F53829103F9CA4A8B6EB5766A44A7EAE4D5967EC3646F54568E9FAB28736D70
AE87CA7F3E445B1F49315332AC4AB47D53A418206CAA262848C9197CBD2CA0B2
23F528853822A88782EE48FD9AAE7E228A0221B135A53635F2F150996E352CDB
B668CF81BF4D84381781F9D23A30F75A62F4C02608C24B3F82FD3E0B0D31BBBE
4A7144001E374A95FC5F4A53F2A72F1F8C8FB6C64CB689C55238D37913F4AEF5
58AF88D970212C07A08B0045DCF2D53DA48EC257F16D8FB0B820B128497CB794
6B63952050FDD2367A9F03806F5EC07DEBD4BBB63185A4B6463E6916F907FF4E
ADB50AC323EAD88C23FB646E0364107525BDC08AE2CC6EE811CC110CC87545CE
B050037726223C2A2724976400117A6667D579A061BC6B690AE27A697A48B234
C37155C75A7B6CD5D59594F81F8F8E2924B5C5FEFABF8A4BAA9A1EB7D73D0748
950EB00873A8DE35C672D1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4850EDCB990134F321F1FD6696F64BA101037918C9
F3EB2C616987CEAA46F6C052EB3FF6F2FB9A6F974915B82B6608CD85F75F0664
5644A5E3888713099F73E90FBC9681A6432D6944A68175A656D126AB96DEEC97
7DFB9A5ECCECE68B7C706A15EA93F5FA7800171D760667E1336DDDED349310D0
BB68B865F3E43C4275DFD82036752613F3FC722D561C0B5BA22C873A42C13AFF
73B7A9B8096208922179B7EDF55236F13203049ED2D3A304BEF0120285E9FBC3
921898A37465752B57535DF5054235CB5A713FDF779C161E40A8A8AD8074AABD
6A06EA11E40F1F4F4090C99D86095BE64A36FA8733362A8D4A2273879968020D
41EAA7F6C1A9B682B344B7DC94AAEDADFD1BD39385A57F9383AA235717AF84AF
BF5D808D32071618FA11E2F7907B9626CA16609BFEE67DB56CFE2E2B90BED39B
54D866320877A767FE000D8A3386EB1AEB2D99809C71C946EB77ED556CD01675
A5D45FC8BD04EAF80C756386291444CFC1D7F12BB4B1304696B2080A14F56ED1
959BD60C7F7F5BFAF8497205D4BD589967F17FBA10C2EF19C1679C5AACA4F9EE
B15E13977CA81B5026C7E1EF4FDDFF62E82B16CBE3D401AAFA4D973976EF232F
76C9D0C0793684D68FE95129C326682238CE9807B35B2C2C0C32F4122724C159
AA1C41DD94D0808809572A0A32125FA4D78B525B256291CA389F839797A13591
6197A48D453611484DA293AAA6B62F5ECBC9D32FD482C74A5387629E03895C5B
946117AA34217BC77B1E075A4BB99145EA55CFD1D12CB1D2E72636AE538232C1
3966FC6E07843E4FC7A8FB27BFB4FF67CD278CA322575D7590D77B4E03E63F7A
848E639AEA6DDEF55107E8C5B9DFFAA47CB3CB5A614B77D0112527C9AD97FDAE
5BC457971A70DB3421293E16959B64702BA858C1217A8B3B836A947462E0B59B
37C8CBC667F0052E653D33F067997638BDCAED6DF3A8F1793F71E79A58BEF6EC
47F700C376341D757B09A3E31F6ABE9EB9021C1A6E311CBAB6DBBC8AECB140BD
DCACE9B1E80979B7487BA2CB786018E20A5E0355AA33D6FCEF382799F62A9A8F
F8262E8DE16E9245C61CF3FFE09AACEF315932D79117A513F6863D275B80A249
01CC70FA943FF9A9F5E8D5716835F17CE3FCD6FC5EF10AC25471C19ED3B2D164
93293F09EA311F49295310B0C1AF942753C52402014764CE7026803F091EBA60
AD877E9208260AE6AF24100E2B365BF89C5B679378A7F6A67087C57B5519A988
04735147BE66CDFF2481FE35DBEE9CAC7E77D79BA760EF4C53A3C983853DE8C5
FD3F25925955F36A3BFF3454FF7B226C0F001FCBC5484DCFA46DD8D89C69C886
AA0247C5EE233C9D7DCFAAEA1E34B8938673AA6D760A80C38EFAE41268C528B8
5A14387C3E29D017EC16BE7E6918E11E7AAE31ACB6E85DE4B2B15B93B7BACB79
AC25F37A4E4D1B370E59C78DC9EB4AE83D1CB6E4DF546FBC914A6FF52591CCD3
C464AA14A393F61610D617E196C9252A013C9532C303C68553C91CE83431F239
BE883C519B643E9EAE5142F698F4B47ACE43BFE59E3AA4C8B47CA18016F95C6A
212208CDE1635F4E5271224CC19B6D47261CEBA3DB1E042443B665E915991D93
2209B3F4C86C9763861923B2F335DE040A8C24E73A0DC3FFAD5A6A9249A29AE0
C70F71EA41B0A4A505263D6A6C70BA63EB2814D31DDE792AAD7AEB4FA346EC85
0781604DBDF2EB65869969F265341938B2C7D6B979342D93A9F5A23A3CE8A015
130A0FB817DE38359C63DB215965E218E892C350FCADB5F66EB82D0813EF551E
F65992B2E24B4FC8353951C0A335B53F68A8F8286A94521BEE28D7319ABCDFA4
A21B5DE536B34845B32A34ED5CA1F3D3EE2B04DC4CBE12FC99DA94FB2648B842
54D4FB6729B1CB7E86DB55FF4216E2F57A08E04B44BB36F27129E5E93EDC061D
348F162C03BEDCDF0521B9F31D29543DE2AD436B75778C0489533F3FD5742FC8
AAAA8A72683C54B45F81F355D9D19496D0F80470D6B289B760B6851EA1A9D31C
01577A0026C7929C87160EE0D8EBC305A07052BD82AF003A0EEBF1D6FF38B526
E2EA0A91866201E08792F03323228B622E30142E47BC752EB0EFF7BE8B688A36
22826EC83CC42DCE8356DB43399E6A6918A887A64B2EEE98060E47C0F4276DEC
FDCA976E967EED2CE2C439693E2FD2F2C26823FBE781CE97DF06830FC498BDB0
73AD2CA5EC36B4892379B00A5C8564FC9A915C85B66EEE33EA460AF6141D60E3
76B4E430431F049992647E2B744E48AFD33CF5041056A43F90D0E6A47C2521C1
058E8C66894928964B332A89C5DA71AFBF455E5A68FDD4DF74A8F1572F8168DD
E778337122FBBD1485F73B4EEC2651C3465557A320A0932B65C1FF77F68B89E2
BE7D6D975EEC017C4CC66C88F5BF25B0D84AF0E70ED77B0B380397149845CE59
EEEF6DDDC9E7C6127A68489B4B19F3D15F6C72AB8DD43CA69CE0AE0177D2B999
3DB6EDD24B6A4FBFAF7245D800115B62C9BD6E97A52671CF3F69A78D19654F75
3822663BE5461EE982F36B0027977D6B3738BA7EBE8FFE3928E471DD9502DF1F
41F853B486CBF6A62EC2D4975CE0BAED089845046259EA79899713DD1E567F28
531DB889CA3267B2BE5B8178E6B7889A33771F86276E66C88613DE9300FB2099
A0299A8F743D418E1D967FA5973B33A45B38CD6A223B219D9978D3B9FA37E805
85EC0B2C0AE9D1AF457BA4830AF3BC5AC25B6E250D20D2FC1957B5D7BC7DD0F4
37F141CAF83DB0823CD6137CFABA19629F9D4EDF961613E545DBF5CC635D3B34
FD5F89F09B25F78633F8D269EB8BF7FB2277CC85D95A094415358CA9BAFB89AF
BEF2079EE97EAD72E34963B05614804C9235E28F5D93FD74122FBE17C96E57D1
934E148831AE7C815BDCFDCECD662966EBD98F467990C8FADD97AA854076AD6C
685EB8A77528D0A206E2A1040FAF2DE1FD6AFD5FD97EAAB6149568991416783E
6083A9639E040D0976F90B757C56EA7762B2EAA7055CB375591EC4D3F37E7B7E
75DCDC8A7A26B0F7D664B4981879C6981A506D46D00A4EFDC5C305A69CAFD320
D8F1E60750FC8FA17A96860BDD648B8F6DCBBB5978D4D7919969939A14CC93BF
AD50E55FF2919C76984A0072D052593675B4CEB8662342664401840FF4AD60D7
D76F9EA312D1914C5ED5658999118E99E3ACC9258CA206AB5A10743AADCF4829
603BBDCDDED13CE866859BF0F2368FA1E5CCFD4B142EE14E7C12BD59AEEACF47
70DB76EBDD3B6D382A812E19D49E552DC8138FD7FA1DB369BD5E14A95BB8F502
D1BE94E17E5C4E5596060D3C6372DC13F231A3A822D45203A98C1E8B7F16F72D
62E7D7E222146343ADA94C04927BF14A36F7C6CD3036C8A458B0206B8ECADB54
3A5D3439C772AB771A74EB93E3DAC78B1A952BCB3C63ABBFDF9D4CE1062912E8
AD848E38C44DD649CABF3920190044586297064AA5C2EADC5E6EF258AB1B3B5F
DEC3BF362B5871B3187BE186AEF93732E6BCFDDC80F39F89FD0202CE49BBD3AF
7E6E68A775B21757D17CB5968A3848CB37BDE94E7B47ECE15B865346D956FA91
D2C2028FD59C9FA4D0AF4F4112CA0619B8CDEEC8BBB19BF3D842055A2EB91FA3
06BB15DA5CB7FE994C3506E6C02DD94BF7B2A9E3BA67931A5909052548D3A596
A6C6C6AB77CA6ED452F6254E6A4D3B38558C6287C81A6FCAD90C568433B94EF1
752C33E6FDC967E75503D554FA90FE87FF6A5171666A96BFF33DCF1124A4E0DF
06126E587E8F5ED4F126A88A174649A0504BBF5BA6C59C6BE0B2BF3FBC775A29
EBF0CB1EAAE307ABC4843704F548B688144D1BCA6DE17CB26998EFF0586FFEA4
8A8E7613D946B09DCF303293EB170A5BABE36FE01A3E5E6CC4607A9EFC33C311
E31025A26E62C908EE4B189B637F88F5F712F452B52B46F530C68DFAA3D4CB5E
173274F4FD6236B34FB80BADA2CB9227275456CF68C74D591478C3BBE529B40A
E65CA72F9AEA4E0604D3A33EE2CBFBDA1D46AE862E3CD9A86AAA228B9C47E3E7
8C0B22D2600D5CD55A311F4C6B0A13F56BB1A0E289C7A999A4330CD4CA8DAA5B
482EF4968D2279C49A48C6301E226CFE1D3E3239CADEC2A2AB2B8FDF5CD52C65
C27E8681CEA83A39DD8F7B7E040BCEC6717F5D94FBA532977DE4721520D9476D
3BBCBA9CF9D58CCE004BCF212516296D5EFE0E2EA6E2FD72E8928798D1F27F9B
D39E7AE32E5E256AFF17F7CEEF7E57BE118761334720113FF02B2C734749091B
E71BE45DA4B9D37B051AE1826675A5F7CC5523D27FB37B08E03DB0B885DC8F75
DF47CCF6216626AAAFA4DFC47FF9D123C1B805F2C5920C97B1584B7E0051107E
E778B10EC2C521A35DFC9AB1B3116F6B641F000B5D48C4D4DE24CADB63BDD945
C10E91E5C321504EFA0E519E0A66A000D54974C3A0C61AC47FA55B4AC8FEB1CF
9ABE6EED8B94466F87800E14FDB46BC5DB2969500C8A735DF316A6810C6CE004
F901644D3A8A062AA13A9AB0B05CA3B0D56AE6D5FC1E4CE9448CD7D00E32944D
0FAA5292F033D1466D78EEBB536527D13E789C4D1AEB51A8612828DED34C63FA
248EEF7B364809128DA8C316EA1F04077B139B5F1AFB4FDC94B58708AF1E5ED0
1B4DF28C2D3457FD04727CA40F5C4AA381B8581DF3F82578AC6FFC9216A06EB8
20BDFC8917685AE00CD44944A77ABD187E2B5564601C2ED0C6543054D141EC9E
B0B23BA7F70926598057A217BD7A0F49DBCAA5CA6A35153E1C945BE650957AD9
A2ED31221E15D71B42383009136CC91A8E901BFAE877E4EB59F3F56C6251F345
F4642D12EA28AFB297DE661883CC13A06C357ECFE273105CE6378A2ED913F14D
20C272D14060533E1D27266E3C05037F1D2545E9FACD008B4ADB50EB9F072039
E9CCFD7C11602CB8D4C3AF2F849B7FDDD76A8698A73A0D7A6DCF60694968D157
963F05EFA90864CA6025F40F9B6CECE72D7992DC7BC4F5D001F82EBFBE58CFDD
A4B050DC465D3A003CEB00A07240B96F47F1E55E05DFE160F931B38C1B6DE01D
CE214039661FEFE4192FD10084DEF54BEAB6227878AB001472B32BD540B24672
F7383C63A50E379B80399771B0B2912C8BE0428AC71A76D0CF3B56813A153011
2D5351BFF8576F1C9CC5C0E5213FD4FFFB839DEAEA332CA6D50B5A6E3B5AE6BC
CD2299ED9B20CA3EF3A94D8C644ED6BD661F18503319391C9C06D702E0FB197A
63850D6845242D99FA33CC4EBCC92A655B28FCD2A85F71763090740F78F24201
9C349B65C2A3923427291F2D47B02EC7F91571FCF8978A464394EA84D11628DA
357F0E30D9AB91D1F73B6AE9F49AF2051EBA08B25DDDB1F2F0DD388E0CED067B
792A1170A1A5CF42917E84825C7F2C49C6B55ECDFCAB2B87D00D84B6D0D7793C
83EA001C76B681675F5E4400D758C423D376E2C21703E8728B9458990C791342
6DEC6B5C057130D3F2F0D6603BBBABB95F57397A31C93330A149C5D9572A20B2
3F05FD3E56E171C25804C38478DFD3C9EF826C2CABED787041CD8C4B451A4376
6C89DEE2E639514CB1CF6E1FDB9B4EFC52D90EA1C3CCD41ED86ADAE9C01123EF
AC501D428FA08F195038907F9EB5901BC338332AF14A0CC411F36653DD40C4DF
8D976A9561F7A2A4AAA27D75E805BFC6A7CE34EEA424D6A82F291EADAB367D57
E124AA23949109E15CB4DF774A63C6E75A7426A7632B8B4797AFF20DBD7E0BB5
ABE6B5DE82FF252600C67408DE17270D5949606E08F30998D4C5AABC95068BE7
A9DAA9F9DF7A25E09C6375E89F0EAB2B56BBB89144CE810C78D8CA0ACA980883
F53F8CF6F267B35795C7626A32B6E41849E79164907EA4205A0BC3435596988D
1C67406AD33743D1EE99FE66AE9C9FA63BE71D12F01A00F5DB8278A0A9110892
279F0DDCC564D440B4FF85F92448D42014DF2B20F5C6533E87C968669430A2DE
4A125D6F0DF7C4807966DA7BF1005C5B8BBDDB702DCA151C8064D9033EA065C4
4A5C918BF295AD636946160DBF3082857F0352DBB2319286383BDDCE027F1E09
11D11159D19295A351BA9BBD25184835EE254A19F24544F83FFE128618BF04C3
75EE7CA24092D1CA9BE1635F769E2AC1459B0B3AC1DC1178D4F0A2521772F4FB
EE308CEFA450C89764BF440ABF0FEDFAE2067C46264EEEB0AB0FBF2EDA1A8420
EF654A1A3B282E04CFB576E4C96F747EEED83CB0931C2CB7FC123056FD5FA3B2
ABE4A8B54B457D7D4CB028A57711C814DEEB4AE84E9DC3199F44F26DEDB1C48A
BA276DD024C2A240B49774F8273B5E984EBDFA715F388574193F68E42CE70C17
651465419FB4803EAF74920BAFB89889071729076D7550215B4385D613DF0A5B
E5666B20E804831A4790D7877935CD8848B7C20CA00865892DFB085E6DA81158
34CF091A73B2031BBF74C3D3095B2DB5108BEC9C46CB95FEF4DC311371C5FA50
EF20ECB3E3080FC6D8B395542D5E4649ABAB9CAD4F891DF034AAA2F22EEE5AAF
118E236AF7235208A75FB8D5B00DB7BA78FBFC5B95E167C6CFB9A2275A69F4E8
DAB9DECBEAC369D71E76447BC024B5BE2975777069195FAEA379B9222DDA32C6
7BE4C5F9AAA6971F332538B7ED6634AFE0B2C249699E212509817638845B5DE1
28E1E6CCC05F61819E9D2C464D0E3D7358A6A00DA08CD95905FB83958C19FE47
5DCA7075938672E207A1F172C05B74F523248B1E8A05F9174F51D45EB4EDF6B2
8F79D03EEF6C753F57E34AECAB0CFEC7B07A150D7151E61B97771C1687BB8C20
8C8A4A69B76313CAC04F35C7BABBCD10408AA78A9A1D1C8ACB7BB7DDF90F0B10
B976609620A88021B70DB89EC4B9C642582DB27E6C1A558975B11F7A6F998AE6
E072B40F17243EDE31995D77233DED44BA8C5B968401A3CD81976D2140ACC6FA
3F605EE8324D66AED77FD6FFA5346A760EBBE54E36B118D248182BCE58EA9F01
5D31C4AE041FAB38A00EEA61310B34A43869071283CA52467F731C2C1AEF9578
1283E70978F0323B9D4C70072FB9419F120777D4497FD4FC6A0E50AD955AB433
987B2296E3994081BB4F2EEA849803EC5CB2F410A3E395046CDCD338E9015120
1DF7794D747B3DF1750F1A32DD6B38F76BBFAA9AB9E3FDBE3B65729C3F5B6B2D
41C54C50D263F6BE4E847828EF874F28F29A4D580F6DEA635B0822CA65801E9D
877F10F7C8C0EC1938FA3F1051B1D86F85C68C3795BE36AF36B47F9852704AD4
C76C0EB176E73C609F8D0E1B5ED58FEA3576D0928D1A4477569210EB8C4212CE
AFBC79B61186AA832CA5F290E2FA9637DD6898F67884BD71EA0645F89E12CBDC
9D1BBE98BF1F3312B4ABDCB2CF777595158CBABDB642C986FF5C74F992A78703
081772B16091B3FB2C085ECACBBC2AC19A860AC497B2126955553D214FA3C5F0
785D8A1D9A71DE94A6C86576516A7D819A37332AA4BA88CC27BF0EC78AB75D63
C8632FEC264785E63C14B5AF665F53A61AE075C6005B59B995C39DFBD7CECA84
4184CD94F793B265532EE83FAE343882AD0796D5CCBAA6F264F12650A1ECCCD1
B930A2439EF269055E7E139BDF6ABC485E318ECFDAA3BD67CD0E79370BEDFC20
9C63DAFFFF856ADDD7C110A54A3281F18C95B000842FC9F9DD099E6596290A1A
279B6CC8C3AB23EBE6039BAB8A426FA570D53625BABFE9264F5D3CBF4731F9A5
3A6D2A30DB96AB060CB42764B5CD8EC4CA5721502C01B0F8C42758E3E4F021F6
38EAE46EC3A24B052F04C5A67AE11CFF8367015CFE6A67F58AF408E42E54331B
4367D478A2DDA733ADDA1A885A427ACE9890EF519FBD740A4E6663380089C01D
19FE49600B28E6DE6DD5630777328F56CEAD97662877713EB1AD965E8A5A3ECE
EBF44790D57FFB857764A8E6A99FDDDDB86B8F6978F44EAD1E6C3FCCB186BBE6
C336C4AE99E54D87C8AE7446DC3A74512FE0F2FF7860EF5EF6C52F7E494DD907
E1E6DCAE815CB66FA5C1D463950415CF697E663CDC1D96F5D2CC48E25A6CDA73
EBBED1001F8902DC03744314190ADB284AECF61BD33F6D563F1029C4A51B6910
7F2018C9159E5848B3062ADBE21E12643EAEF7E0D15FA8B7F3681A8E456403FA
17AE6E23981338327D6ED9D184A4C381186F39ABF5F9734A2F45D89DE657CA05
73732111C49593202B094E60F2C49ECF497964783458BB337F0E6842ECA112AA
918EC6DCCB7B5F7ABCBA1F83E068A57F6C29B69E80D20566E3FCBB1B1D351A67
5AC373BA2CED4836EB5762352090ED320B9F9D22F16E4018B6AF2527875748BD
A11054E5E94ABF52DD9AA50D2DFAEFD098374854AA3AA151BD54DECE76FAEDD3
A5703998E988F4E0E7C56C93EAFB9C7745EE9FA75E292B2B13CB3A32A712343A
A5772845A518108C5548A8E72496DA1A9A16DA891583A755B987124713CD716D
9164F21C2FCEC9B7C23EE02FD19C327134B56197C411E3E29C237D404E0A2787
011D33F94B6D26195584679DD7944470B483758F4B543CA539850DAAA113F937
C6CB18816AAEA2865F8267C8F1756E5F84C7C95FDAFE8ABD88C9F7B1EC222D35
1E9D566EA091134A841CD914249FC82D9C4EF4A623C63A895FE66E1464195965
5F235BD056D65AE5C9B6190F3DA6ACCD6DC66492D76B2AFB5EE9C9F6C02844D2
30FA17EDC57D407CB83D2501B0D2C9E86FD7135D53B69F7F9713F521697F75F4
A0116546A9D962C2261B7C5374FE3D6DE742A6980C8C55A9DD737F2069B9F979
B6D9C1403EA94C9B96CC5168ABAD8FDEA9A92B460437EC7AF345B1EB3B7E8780
F0508FD81A1EC8D91EA8100568831EA52EC0C2C4471627FB5F2D03BDF8726BCA
01A7086A3A8247773BF93CE143AB03DA13405FD339E3BFBD62DC733A5D3BC0BE
55E5C3EBDBAA16F46E6C7173A01C16CAE868A34BEC8C10EEC880BABF8E9D94C8
981E46F9F255E15E6100C6EEA08FE1A9A08D7E08055E5B922EB54F760E262351
B93B0E6FD807A859AD9FCD5879179C639EE24A1D4E922593B8D115267A569CCD
715FE50EADC647E4730E8575200F70D3AE26F23322B5F5B1AD9F6612F92A6A42
485387E9168CD6120B8A1B03ACA50578F6F433B13D7BB6A37006BB78A920C3BF
D46F9AD39C9FCFBCEB343EA4EAB4D57D768391594AFF7153A7B5D44489DDAADE
0826ECC576FA95412E2A7FDC96BBDAF34C4254E63AB1601A34DBE6CD348E56F5
9A92AF56CAA782B3B18C3E2FC60563D081F110CBB181C03581AE7F5CFB6E2DFE
755B72B4368D643CB7D82BA474B175215A540A6424BD9D3ADD50592B708EB41E
3E01F5978AA3DD52017F42DAADEC173B6288428B7A4C806115E27EF216FCEC8E
ECF816434937BA7ECE3B966FA4A35BEE2036FF9C5C423973877D93540E890C37
971E766FCFF7D74C648A9DBDB12D83DB67E8ACBA7603ACDF0BB64DC77FA78F87
D3790D5DD859C957462D5D23EA6F98E14C1BA476E026953949028A6B7992FEBA
1A226A65BB5D731DF9B8BAD7447C3818B182A6C022FB24247D78344F561755B3
CAAB8C3F498D0AE331A2DEF9D4E3C06BC4ADF8132B31E232E38AB2B0CF3AB302
9E31BA333586646EEAD71F112DE96D8A5737F03BCE6C4646734B007435751050
B74FE7EE23AE4194F920986C6CF3A993077C0B2501E3EF7D998C3497C382B1FB
BDD8DCC67CF1CABC23E8D3B4E4A5E7C6D0F9A1A863B355EC5C22D87265D1F6DC
6001FACF0317AEEE642A92A6A970B689A7AB37D6EA71B3F412AD4EC3D83D0BF1
564C00C405693F2833649209E2CFB5345709E0843D172FF799351FC374D17627
41DA285A6C8A7BBAAE123C0FF35F09A6B82ABDC83BC519FF701189DF9C9C59CD
3F21C861B8A93035C65743BA8AA17A1D4F89C3686AA1B5D41486A15BBD2062BB
6BA266250C1BD54776F9FFF730731E0A54525E2C91A8525079B97D9FA6FE5B7D
A4A263813AA06A0ED16D2ACFC90A1ED23A88CF1DEE3F583DC78DFA7BE3BED36E
B2C52BA18EF531DE09B52B7093D785F43E2F9DBF65F096C011F520E7C4764309
B158CCD2D78FC0E44DD8A05A139AC2C2C6486D2660348916BF68357880C07383
65EE6D09B687A7BAA7F4034FF97C512C2C654890C15F0AD061C6AF98B2DACF65
80A8C88858B7BD05ADA1A4940A93D2B35C606E33F6BEC374E0C45BE51CAF19CC
76908E38558FDB9D8A2E5157FB5FAF04DC1F399CA1169BDC7F104FEF092A2CC8
07FFFFC7383D7DF262CDD5480E97BB4606EE953350A75AD01DA8E2D3A9078F1D
76243E898F2442AF858196ADD0AB7EC59A2AF20174A8457B12F3D607619CB08A
E72CC5BB3A34201F0C67EE08D56AD4741F99ED5FA1982196402619D4801254FF
382CF18147282729BF9FAE0CE3CDA5671A9D3CB95CF13242FBA0351FE639313C
561BB821C5577F7ABE974FBB7E39C19BF2C5D0A0310A77FAAE497904F8FA721B
A44EDBD260753B64030759472D938C84A71C114A56219C30C6C52A33B45F9C7B
9361F7C7F4EBB939F46ACCC32D844116388E7C2CA43C281567835CF037ACE479
77E95ADFAB38E1D71D781BD8282FD2969975CDB303737E0920E40B8CDCEE93DD
CDF5BDEFB5F08872C77BA070C12D9F8AC94E798EE0EB746B23CBA21FA2950324
0EF2A29E8C65D1E4D244D4BF573DFDBD61A080CDB93C6BA9E501860EAD9EA1A7
CE89BCBA746C4D9789658488E28072C801E84D391DCD5D08268EAB44BA2650CB
FC0CA9B55CB9BEF46A456E34EF002FA928E88DD50AFD9740758FD5FA9848B8EA
5564BD91E07D49C8224435F88F91BF13707378AD2ADBB4BD729A2F49DCCDD5C0
58073F7AFFACC5153998C91112C266328D8A85976B5C34C57CB8F2B0FF268BE7
9C307A9854D74B38DC81C8628AF18546E746ED2F6A34544A54A56E887E714891
1BF9C48FBDA96A501D98A40A2409A4459BC9CF7B2BA769BCBBE17E81F552B605
26D00A9804A8F1FA82E223310845A025D7B189A5736FAEA8123F4FF7600EC58D
C7AC4AB2E3EC2E57BB179CB439C29C3C1CD422C605740A8939487E26BB9233D4
CDED6A7F63DC721E0041BB3DDC3172FEA590380549E139F7E7FBD6E0CACEA82D
14FF523AB281897C7199E063C8E0C194FD0DAA5FA394260A3496C4C35E5FAEED
E6A3DF250EA0478555769EC2C44150D849A0C7D966B2EE653CDDB8E7889279BD
833E4CEAF0C80DEFA6AE947F58A30DC266B0B7418E28EF59F2D856C879E4EC84
FC43B261E1B0CCCEFBFDE052E2961195F6E68F0D83A62A5197EB748972D6DB80
4E973A275571270A612826B0E61253F8DDF4AAC8C51CC2CF1FB9573924D8613B
E48CC4826515D0226B1DC0530A838346B7C97C616E393DAF3553A53281283663
023545189BD8A3B135FE7050A6DD93D6CB6FECC4ADA2D017EE7E574B862576F5
EA495F51E1B3A86090EDAF7ACEEDCDBFE9250FC166EF726FC65FDA29EDFB3AD0
15308C419824DFF97F4576D8511C2D9462B373C59D8AA6CC5056C324BAA2C791
9C7E116629E963F00FB88D106D88F55E0C54691132BE1A965A3DC333680B3067
FD34D02B600D8B39B05462124E6FEB38CF8A39E0BE144B6E10A2650E7E15D5EB
486CD83D388C14987D638DEDB57048A5053AF9B9A07F8F3CF06897E25E09B759
4DE5F86443F38878C811EC38A21692F9B866C0A59D9D736D429C30540BC50881
826A306E1DFD7A9290CDCA4A16FFE88A0AE351FB514D0FEFBBF1F53606B8481E
CD5FA685C548E6888F67901B52715557491B4DED0A19A1E6464D99B6F76FDEE7
75B1D22F68706617693ED26521FE539E4BD15B63783AC9A3A8A50D9E4040DC6A
DF8979C2C77291AE9B69976101B7018BD702271DEE3CA37C242494FFCF394E3D
298571204AAAB9118DA7E7DDB94E5EB10375B52714F9AA0A304C84B6D6F5045E
480119476362466410CD8D288824FA57C0BDA3244FE421DA72D24C3581F7F1AC
548B9D5356746074519505DBC4F8AC480362656BF7227A0A4AEBB699ADD32B46
88C2AA21BE4F05093DB8CAC2DF738C04ED3F5E1479C3146DE0D27EAC3EEBE036
BF4F9C9A8FC032DA85A0F4F3096CAEAD2DDC50101AC80E3499C8266D47A4F690
7CFACB8177745EDDF7099B6A263BB15AFDF9275F1908B0453B07B419015F1BD3
EFAEE4207753EBCCDAA30204CB7959E437397D97A33B2F074210778FD31335BF
56C3BFA9A6819731D70E62616DE4997BA78024867731416D6C47683F3A0F5581
8B8E00270689190554D4CC6391D45B0A6CD0716CA475D96F399FCB8C9DF6CDA0
3C46B2C8DDD315850235962879E04DC0D62F8D3FD540BE77E249546AEADFCFDE
52F22BEF34F7BB1F5FE06F67ADE1CF852DD818F07DE0AA5CFA497E5760A70CB1
437E9B37D21481BB42DF9F34C5E80B618FA651FEB91CBC12F033A1D5D20EBF85
30E7129D0A90AD3EA1E36E447E30C9175CB81DE744DB504B894E49F4B8A39D42
9AED24FC837517D46350DB7BA8D2BE949439027BA8471FB0F0E6E195CBDAC59C
6559274CED2B0F61820249B13C55FC34E864486842B6FCA421949403B6179D3A
010AE18BA53F157BD60FAD7449153823E9F7778158B67FD4CAD352A48A918EF0
FEB00E6F5C40FF92A66704671E545CF2B4B95F4CC83D93AFDE394A7F95FA260E
A13D49E3343232D1B375B38AF2C8B806A072850E729076811B5237847BF9C10E
DE96B37089A1D702D5541B68C59A1464DDFF3E699872CDCF4C4A160F3373FF47
D707DA7220F32A377E02A4483BC8446F5E8F38C3A65A16FA152620B61326992A
0CBC0E82213C70F8FAB28C4E998ABFC56EB2BEF6F4CEFE3B4245E981074B8637
A89EE47EAF9B93F8044376A5067970D22734B027285AFF2C77E0E26F3A507008
F2C5920C97B1584B7E0051107EE778B10EC2C5231514F2DCA7F1FFEA417A55A9
19D4B9734D9FB7982A54918F62796AA4E86A0917C4EEF9B96EC85F7F61CC55FD
3217CF0A0F1770DABFA09730FEC742F9287F2792B9286FF9D9FC648CD35B1E03
827411BA7AD177E43BD1680573423BC4B80968AD1178A8DDBF0175562C2E450B
9BF788AF448B9CAFFA4BC15B304C7446A71A59F056B37F056DC7B1C926563979
CAD433B91341797AC8D4E9842A21E654DA479E3876BC9388C67A6B10685E9921
C7901778BAA604961A7DBF1AB5613C04521104E0141075B747F1427343D5331E
935F94F2A58AA9394588881EF3502D2774492C289B000983EE6FC9812487758B
EC50CE0C7C1DC31154002A2DB1C9F9FF6A9DE9A3D778A6463E16EABD2AA603E2
F0198DA96155E68E8F6CDE3F99D19B442950D7E8C13999210CD4D7694F73F26D
672A7BE20500304F1EFE79C61DC5E6BD7A0BA4E864DA31832CE3B41664892B46
07B811177772757A5E242E9C1DFE6BC19A289A930437596318B3D710351EBFEA
8ACEA7817B9F50285AB2594752F257E3733A7CAB1F0C21D28BF8943342542298
433B27FEF845B6BE5E2D7E3FEE447977657E7523CFA8C820BE36B22710938B33
114D55099F0CA84BB201CF6787453C57722A7FAC52BA1B67DA2B7114DC06904F
068594166EAB4EE9BB2612B1FD223DC6C8A48B36B81681FBFF5EB665507B45B5
0783C0B7F2B149EBC1EBB02C334270A982794DDEE77B66101DA8FF6A94D45653
A3B1316AF38192954C67F3EE4D176E0A4B84C9F47E5E871C676E0A4C3E713FF2
C1B9B9B53E7C2AB98E9FAE78A702967406880182863FF2526FF4A8F358E419A2
E076C7A04387A6FD2DCAC6A4CF31407A555660E2681176CEFB2BCA11008C352E
7766078FC2D5E7D65F806E16AEF21B9D499875EFA3BA6E2B1C6378EBA79DF538
CE01B814119CD4EE3D136D2650CBFC0CA9B55CBEA659247E6AA58C7B3A65D90C
4598DE6DF2AA81DF1E7CB247D74BA02BF23DF52B4D11FAC152CC6A4B2E4116C2
E082D585D80669DA11F81BF32F6FEE0C9B3B76B029D389E1ED9C96AD4984EAAB
559F0DFC79032569A42DF9805DCF2D84A0DB18152D56A72ECE236FD3A3914574
309A34B52B9A84DAB00C9C40F7C6953CFF071E1637F543AFFE6717F0A3661C09
1D322D3FF1357B446B13C8880EF56E7F55379066FC8C4F948986B1F80EFD950B
74E614A5396528C9A0F2E38E993B049CBB3FA17829C8A8DDDD4D7B45CA1BC047
117E5E9AFBA7839CAE44964C974F08DD28E72F01985BCF3D9493ADCCB3711D7D
6290DD4760DBC2C97F909B8B374E4975E93D9FD32DFA0AE84699D182CB1640EE
4E7B14727B086F27E43E6E3EA6EF0DE68E1A6787537D321DB5621BE2BB042A97
301D2FE70F509161F2312EEC50FDDCD73F2E287FE61B3AC6E94EF7B3A3B7DA12
38E83705D3D364B37D0664664C6FF0AEDEFB0648BF7C3BA414B0811D271B835F
0FA0BCC20BC41DBD5848607B2D1FDF88FA9735C944C04B919B7BB6A60DD4DDF9
39F6665064591E6A4369326788C031495BE1EB67717053D58F57F16B0103D116
CFBD51821884D526E8D6153C5BA91F6D0503AA0DE9C012E610B9840E263707E7
3B9E5943A4E04D0DC15BA4F0C1D12F27F5DE5E37A07F94AE44C9C6763A9B8675
2AF24A305C366150DFACB4A332E09778374C15A410AC5AC35FCB375E20BD3D28
3BE2AF904D9AC7DE43E87335570FA82647AAAF3DDC1CB2A8C54125A9B41FF3E3
ED205BACCB90673A73051FEBABDEEB25246FEC51BA0E3B73895A45C136704094
A97F5F335EDDEADD3D91F1056A41B007AF081136D50948561FF5E7C59547C32B
303AEA6B90706004ECB3764B6430F0C5C4916B24541EBC87444676534794CEAB
380B1E461C5432AF30621C7A7102779082F718B9B616E07B5DFC25F6092B4DC9
C5EFE56334B137F76A3EA01B7F2FFCD4DEF3DC9ACF7F1631B3523DB565BBC3A1
EEEB82FE503AA70CA72A803A794DC7984BF444AC5EABFC1DC00423B420B435C1
F8C806B601576FA6F6632B53FE0BFFE23BD5DEA90E75EBEBCAA59047A04C729C
5B9AF95E715EA4D3F84EE24C324335A3E633C73A4BCA1399C9CD243FA385624C
D42625616836B5BD409CC94D3224E75B5764B9DFAA97EA454B7FA5E63A210996
CA6D433E064CF168DB1E5CD0A7D6635234157E7CB751ACA01F7DF1FBC7452B5D
1E789929A97CE2DBF2AB140A6C836B871222A3FB9221B79CC93EC5C4FD07D631
60D57E81C232AC4877088B9B84432383997DA60FD0438E4C4527B0F3E12D1BEB
96398CA437E97FBA9321657CE59AA81C0B0A6BC9DD687A18BA25D37CED0CD4E2
167E12738FD10561A78DC0187569098950EFC78B50506C6E40DC2BD0DDDFB684
C57458BD2527808DCC5C70B4B0F8D3B08A4B47513E1F8CDC2763558C93AC71A4
C6A0E2280C0ACBD5FDAD9448B616C1A2AC048C04EC131FAECAB3ADF066E04C09
553BFD0FAF0F00AABFED9BA35367B8EC45A1E9807DE85363DF1E379460259D44
CE01645E6983C215CE71B98086E3722B28571052662AE666F720DE77BA928FF7
D401437FAA45A7875DE9FBE63BEFFEC238EBF60F40B1065F435BE8A39EB454D8
8F5BC45BA81E9155A7FBE874AEEF98A27529B4143660ABFB71018B1DC566A4F9
65AA2AFB5669696B08202B034852C673ECC5668B0AA9A46B3F762BD799AED8E8
A2C89898F7DFE120A6E61C4352941A09AB5A195A605234B9D3F08D50F8E86A56
2CF3FACDBC455F5007030A8DC866FAF4CCC70AADBE30369731F5B95646684EBF
41E264D943C1929141E33B9AA702BAAEAA4853054622B71E68E8EB85702B4460
EC12D146AFBC2F6F95E7917BCE1DFABD5837A3B800C3D49F59D600AC85DA22DE
061E1197C67D23C540750972B6F2CB6C59F6CDB65E8DFA20E207F4C292142A91
119FE2C8744459588E1FF9B83B1D150FACD6220AB4C16B5B4BB82D6D916CFF81
8FFE2CC01F83EA98BE54CFC0E391F594D1016D3148C03F1841FFF2299A643EB8
A0D6FBB8AC07A7825599A84902F52A3C014E31A1DA981815733D0C9508C9CCFE
D520C6DA434A1EF745639317FEC14FD88AE9DB035E4D967DE253AD75EAEA5347
65A05D8A70011FC23AAB27DA2FA6BCFCBEDD0856F6ECA6C3C2EE6A678F30A02A
AC7D255A03196221943C23161ED82C6761E194A96BD609BEC25EA2E79B98DB9E
6748C7826A23E1F8636DA73FCC4F5A8727EB388F61C5B8D2F899FE68BECEEC0A
A3E4A0CD6488C4127E5E14CDCA6D9D8D05E7FF3A625A926C0044888416694DA5
D8C4CBA34BED416CFDB270E0D100980B23AEA05BA25A7554F0ABFCF0AD7EBB56
5B21B994C1A341F0E03B7EE3052C44A78B7AC019A2F475A824EAF3174CD5E7DF
1A7CC98AFC8AAEEEFA2F7A7332E87D46401B14C4BB58F77B3A9ECE10CBF47C9C
A2085160F6C60E7AC50196891B89A3A9D52D18E5837CEE2F52F3E027D617C5B3
1EB0F9645AF61F114AB8422DCF62F8AADA1BB020F326C794489C6C78A9E0D59E
61721EA30D1F959A117F17693AC67F97942560DBAB749090871F4F588CE0A76A
B91BCDFDF6D544ECB5D736810FF4F3CD7A5DCB3DFFD850D2D7FB7276DBF64D30
5114AE68AC5BA55334BFBBBAF74ED45ADF950B14E236C1407634A260111B81EE
1F01E009DAEC07B24346E13E36E490BAB7E965666F9926A41196D957ED353FA0
5F03BD235D77EEA473A766A248E446EF6B05331818C22FC41DE39083C7A95CAC
56D728B91ACBD2B376294F6F6BC120A864A51365F9607DEC1614DB8B4162440A
3B1D9FA404BE89071B7F6F46C7FB7650C4B65D3684350377B141E43C4EC19A0D
63112E274F9D79539ECE65CAAD81B406E0401285D6645237F56A45EB67966E9B
6F104FDDFF62E82B16CBE3D401AAFF4576EC6A17B6FF585B561BD3EEEA43091D
20DA7C739CDB3E494A5417E1406B87DCA32D6DB60CA582F8CF59A61C7A96F9EE
D323A12235241F49BF50AA32796B120353AFCD3C38F7A39583751CEB4F7E70B7
18748F781346043DE0470F7E345EAF45F644691275C5464593A406FD24FFA9A2
3BB93F16142A1C7374DC1F7AA87886EAFB6664383638D6E273E043AE2888ED34
5F7E6EB57D050C1B8F1C5CA654C08645F0BE1E2540364E31E082937689B9CB27
C6C0A641DCC651277B50D27E9FC08C7DDC56257D8ABDB539601FD66F9E7981CC
9926709CC0F6038AF592C4BDF2AD3F2F247089D673E7B5390E6B3388BBDD9BC0
7C4177316869F95810CABEE0F11A758D56643FB432F6A0A50C0FF935D578BE17
8208AA73DA69092792AA9FAE7BF4CC144EAA558DDB129260472992D1407CB2BB
FC6FC806A244653AF088AA1C3CF5D7AD51DACAF4C1C4B560B17AA47940F57E91
89CE7E45E1B9AEF7D50AB7F7F608424E8350251F51C61E5B9A3DEEDF2865142F
E8D1300B8C0BF7FCAE1A015F1402E25F52E7EA80E6AA3F52F690A167D33BF110
DA0191D78DC4590CF23CAE145407E93218069800C6DA1A9BE66E9B2FF283E8E9
F843C6EA20A0A5F5F7614FC9791585849DB13A56355CD25928D778FDB7EB4464
BFCBBAF47F6562375C5168055C9B21F529F6B21CC4FB8C0F73D91D655D623A7B
E3A44DDF668A06BC3B8B6C929B6B9DF3C043F299E7916EA79A40F79850DD8C07
7699A9C08666584EE564C3D10858685FF22D79E3375ED9BB6FE1D1F699E703EF
9298C4C6C32AAD52D980E86EA52D5CC5AD76808EBDD0A9BE521E521706BD647C
35FA291FAB3DD1E1E63A7D80600B945CCAE60903D75CD251701B242F82E2205A
FBF3D4BC3AA94E45B8054A69D359D7B3020C65DB8A3AAD3AC974D42E088AE14C
CA8E1BC646597101B3782EFCC86B8265A2BAC65F8E9CB6EE55A708772E85E9A9
36FD2EB5FB2F6AF8CA4F78AA867E777B5F8E314764691EA4C3B9CD918CB50CB0
B5F0A0CF81FBD960E732A823065AA11220B96D3B78EC4EC264E3AC12DEEF02E6
465CD922ACB1DAF4449FDC32B440ED0D8DB2631D405F80F2BE63230A3A6282ED
11E59D700348A5F8081BE7A1DE2B9B70203B3913F6C35545757AEF0A6BDC79BF
AD102334CC76B23664793A777F17FF7835811042BAFCC80C54046B651BDD2AF7
AF1F2CD8BE8864907C158B9463D3CC6A71178B214484A207BE6F79EECF70C02C
E8A5FDF7C0532F83722EF748CCBB85C23B172D8789BED24ADB9D670892208FEB
6F156528C713DFDF96D9F7652A10604CA6B157778A83AAD52EFF0D52D7937FD7
2860037370A50FE10A68D56D2125766949D364FF06D78E51415C1BD6694F203D
C7EC6CE32D227A9532AE852DC6535B2BBE6757B9B29A5ED1EF6243E79654FDD6
5D6D798871D0640D0ACC03CD2BD48F18EC823A5D4876E00A9198372A3CFC4AA9
737766B93C26701ADC0BED906AE74957ED22388C588BEE997829E2CC8537A036
334346E076C89F6CB8E35B742CD3C3F3AEBFF264EDD3E2BC72B48693FED19367
37981946BDE5BB05C12D5757B94AA341700958B27FBBE9CB09F5D6117B89CDB0
D4443B2C5DD824CF59C17B11C6E2DCB6131D51896859D0E7E2F2DE7780B3D167
C2DCFCF8E85C7760297ACE4C11A0C8BA0FFD71495D6478437C7C2E520070772C
3C9151C874A5BD55DE020C1F969FB850A8DB7C502EEA77771336012531566F43
0F1D6567ACB5B42D2CE5306A5A34160891E42552302369DF71A9A1893D7C6FD7
1D45EF7E008748D514E142D7B02F17A079DFCE8EADDD42B1EC8A7AE133BC1BD3
C226F06F2FE3D40190906558CE9E389A179CEE550132FF6952B01DECE8562249
28D41C28A62A5261E60B7A0F433348C4A2F931B19C5EC770C8A621F3F18EE54E
D33CEB36CC87DB0323EA4794F91CB93CBF1FF5A2BEEF8A8EFCC84F58309D6560
41D58C14FD6E83DFF158C0FEC1785D2E1CB0131081D39739B5A215F917B33CD1
8A47664271D9DF9F96359D28E56B67DFCC116C058520D2138E1208027017BD0C
CD663BD63641D2DD37356C915ABF2247E91F5AEEC0B99C0BC419A58D02CADF39
FD4A6111447F36D761B1025F7EA9570060F29322EF59480B0BCEA800C421C5D5
0A7FB52848235780AE206FC749EF788BD3E4C5F7289AFD55E39D614EC7A444AF
CB1F00CCF8D475B7EF168B543BB870A6B0A27C3FE0952C8436D8F3FB9FEF662E
80DAF00FA5D6704780155DE717246CD6BCBA7D3D968B9221F4EFCA1DB14EB559
9F982A0C06F149FA6B20E2C54C7C49E4E08BBC2C0E3777080657DEEC61986280
87D521AC9BF3A1B518D2CDD67136E496807A247A9E2A1749E57F9C5108CD02E1
61110EE815D0DA4A49A53A3A42969220E0CEC0CBE1D1FACB5243BDB0AF57E49E
7C45DBDC12ACBABE313456E1231CFB3CC4E2F12F1FB6DE616809BB7CEBA64388
EDBAAF5A3E1C9CB15BCAA828535E0EDF15AFFCA0536600A360CF5B5512A85F09
7D134659D368B470E3294B0D01B73C2A707B45D2DE1068C6CF0BF9318D410826
7D1BE95C55B294A9880E30F7AF1EBF694D06956528BAF9AB902A82D8C0A6A397
EB14D3745091C4F0E78C78504ED77D37BC13B02E1AEBBE69727A9DAE132747E9
6E2C62001C2FC86B2C319091FB1944279C1978DE28EF9CD47C1CAA5CFD900457
27CE7DA4F1AB567430DD71F12744F9E845DF2886690D8FB9386B7D4A85B3521D
6381A3F303298548D8C5BACDA96E293F6E074DC4DE60E43150BB3CF4EA4E72EE
4D37703143151E8513D9979AD86D4A1B70B3EF1C8822248E744A078983063BAA
D8AC96C165F590FBB0FFEBC85378CC6A0BD81E61BBEFB5A1D2E5C345331B43E7
1E51E589F23243B7356973C2FBABFD298DB7DC2F6A861725A68D85F5CAD378F7
4BCFFA1236943D285CCED622794DAF44C4795139F7966CEA68EBE7C90F355690
DDF4286B353C65C159CC3E55016A10371268175A8100533E55F8D7490B34C2DB
C978C2DC54FFC6431F11084D2248818C28438D0512F7C77FA590146C12677425
005D32E05A0635997288AA244B3925AC7CA967D33F22F7133792FA609E8620A6
5F4AAA7A8E15FE0812DEF5DDD4EFF63ABB930D45973AEF0CFA7DD1FF24AA8673
9FD7DB91967163946DB98C7A8B8C8367ECA28073A953A7428F28CA6FC859BBB8
440376547482A1BB734E397F911C34150B85ACF4262B137D9E0FAF538F883E85
26D5B199A3CE1C65F9E73D867218A85438333F2C8C0957F55B9B85C629BB2F4E
A16D19C773DE836CFC0AFA2D5D6759CC95011CD574C30CEF959B279859E74B01
12231DFFEAE03E84C0AB46F69EE4EA7DFC36306A9340CD545D67E5D9202E0933
AB0D65903C92655E96C039698DA2B51EAFE1E8B29D6D7FE0E16791BBC940F86A
2C1469769932A190455C680F7C9911E5180B59AD5C1B122B4A592993E2578C9C
9ACBA82872FED492655DC0C80BAC9E502D76BC9E04B0971DDFB546EB1AEAECF6
7604BE8B92A6348405A060C46A94F16EA0F270F570A3E2465AD3D382DB5FA00D
705126AEB6A95C9C4889276000FB70C01FB1A6E086A4E5CFFD7AD19577BC0704
1B903BF1CFB7B5DD285EDBD99500B569F825CDEAAED7D2D76FA1C22F6B867A0E
3165BE5EF51A6A392BB4BC98DECCC5DDBD36BE73C548787102890E00C76499E7
EF4FCDA9A1B236A4D4A22E3F39E34283C3C83414C334670CA9214DD1F14194E4
164AA14B35ACBC491CDD9C83891E0B309D4D35B40E0DEA5EBF879E2E993845DE
19D0CD0CF843ACA6A2B6B79AEB4325BE1B73AB7806F8B5FF48BBB984BAF746A6
B124102E3E79FDD9105CC80D07137085C70F00B4AA2A3F38FE549D727FA5CFFB
F9B68E9FBC392143032C9072134D2FF2498E1BFBF3482DEC90AF8DB9DCE1CE33
1057B3DDE7BA3495E08E30B2C6C80DC41BDCD1FA5B3C2E168E832108026E3944
7DB61434A3CA8DB013DE2376A1324B6AA871E59626271EE1BD5F247042CE0AC6
BD8A7B0891E0FBBCF3CF34CAC9483C82E7FE4DD9EE467FDFB65EF177A44FEAA6
2F64EF5974CD8EA524CDF1E3ED294F9EDB0FBC45D941058ACB0700DD52480D29
4A6464CCCE4E2FE98A1C9B6AE9A36B15A3B7BBED74A29A5907DE3759B2285A96
1CB724AD1C3B4F4A98D2562A08FCBD1DD198023E985B78FEAB139545716A963B
4A9498E115098EFEC93D5370B05FEEFF8434A405C1A2E7250CAD226225EC79EF
F944246DF8911317DE4C75D695826A4658433737395900A64CB18DD6F7DFE62B
1720EFD4515E010663BCD3BD86D29316BBDF6F2427267E84EFB59598C69F6F86
7EF86DE95F31449EF355650C284961104DE93A543BFFD51B5492DB49BF8810AF
0BDC54BB1D0874081EE0F53E6BCFA8B089D94AC24005F838221BBD4E5B2EBBD3
177AB074ABA81AD20E8FCD6632F29A9531FD37FF1DFF8F96FF19CCFCD70EB2AD
B0D749EFC29530DA40F1C7512949AEE4D52F3BBF8A81DAC964AFA192353DE9CE
1FF430001538441EE856C8744B342226551D31E9C93E83A7847F030360B21EF3
3DB7962F0E602C1A952F5A6144B026496BCA736ABD004DAC3E25BF7D4958F866
C69E3A9CC5C1C547858CF9A15C4403B7C69C7A4A392290691DBA3D105FFA49D5
9C844204CC485B2C6359C9CE8EE40DBFB9338561B425E7FB8A486E8BBD892268
6697919179FCDE51DAEA400AAF8982DD653B0A77903F163E2BED41CE8DA5C50E
9EDFB70047B6D2CFA4ECEB375053B3A955FFBE9EBF4BDAC587E59837487288B5
5CBBBD76DDFF2B9DAB14A41206C3350B9DFC1DEC1CA5710F2DA37F85D67CB62F
2FC7701D35CF7AD04BF3CA9B041A6DCA1255A05DC07343C220FB3E560D551C0F
CC6DA95478CABF51327B13448BE05861E4C8D9E18639ED43925D28EF77FFDCEB
B8F3932CE6368A6117591DFC01C6D652D129C20A516793A730CFA5F3FB92C654
5F5C1FAC4FEAE5EFC07C2339F07D41F8076B2A741C86FDF58C841CA6B2249375
296A6C7D8991E2D2BB4E21ADEBEBC0A49A0594D1CD925DDCC26C53A369DE3DA6
F894898E4DFA4731CF21A50D84381418E55DCFC758A9A5DE0F60B7620D42711C
FE2D177352281FB0FAC2F212EA8B9AE9DA46C43490180B87CB3B0326ADF30A3C
A4DB1B59730359FEB0B1C2049CC344B0234DFBC9E9A538A15DE3F85B8761E56D
2AEDE3ECB3811D95422BE553DAA1EBAF8B93A0CDB4443A29920326E931475754
8284A7C51C783083371CD1D82FB0B53C7C7222675F1706721388AC52D28693C7
9ABAE25C3098A8EC8B601E11176A5C6BB4F72FA6C1776C77A6E9123E49ACC3BE
331F1280F25BAD37F5FCFC5E919CBEBA77ABE65B97C08D76660E7CFEFBBFEF27
CF5CF6385F3940C3BA0147BAA494802FCA4F1C330C0EA23EC12502C44CF96881
0067A43BBDB9333DBBAD6E24A1990ED85F213DF9CCF088A04D92452E5109A15E
8497B21DC02491A84A50859AE587FCE2CC95F04213DE8335B2EFF7BEFB557F10
932BE2461037675E08D434035B362EE212B1A88296ACB49EA77AFFD489F07A25
662CD21C199544E9FA80DC62D5D09F9D65CE9A1A9D067FE7D92A8CD4A58FDE51
DA3B8DB62C4BC7FBD8004BC4AC8783E757EED0CE31914E344C3AAA57CD5E7983
BFE4402B1A9C3003231E3459E34CD51938B0FD3577A2D9E9BEE82BD8D957338F
2C58A137B97EAF5D594C0563B50B1A4D89006898D019FB9521FD4D6EA0180F85
22743A035B6F906900399BC707F7B14154B67B666B84BC164518713BBBD20E12
9189FB1A1303E4C6B641210AA7A444428DD0A5804D75FC0AD708A22BA5008552
75D63C80F212F910938FB0857DB9EB8325CD2437CA13F58727B56E756984E8E8
3C75330C4210FF745EE51A8B39364517783B19F26393EAF60897896064761EB3
304475E524EFAD438A22F578CF16C0809474D611522E42438EACB09809CF4419
424F32E8A94721D4EBCD3EB0F2AB9D741FB8EA2532AB78F4C2C11D5E999D8BE0
D17418D501E5D15611C23156D887248E38052EECFDA41F569085D5240DE96467
242CD24D7E2CA264F74BE85150547AE767012426C2ECA79858D0C758FCA1DF77
E368106AD923C9AED886325B19AFD46F6695153F1A30638D22228B10956578F2
F72FED8382CD07F6B122872E6A35F12379B1113D1443319F3E95394DCCF42E5D
B57A6FDF30BDE28BEFF8D6B4AFB6067F645240C84E7856751ED82EF3FA15EEE1
15E84124A4A9989CAA3CDF90F2D70277C8C799A300CE5A211595D36692CF9F08
F6BE34C09127C82C064702B68E567572FAA9BCC1EA1E0E9C2118A055DB5AEE49
B0519B6A4A800FDD3858D573B71358173E2F8582096F612CE4E07E0C6020FEC8
520BB228B10B840F1F168BFD3F2BB160D5215BF47B93599C503859D9ACCF6FC5
228F78DF492C8FA839198F9DBB99823825D0D26D5591ED72060BF4B4947C99E1
B7D6043FEC3CA31F1750C8C86BC7604D84382347522297D1EF900E8D1A360CDC
69EB0AFCE824D6275ABBA8F5B93733B92768191D69433C427EBFC14C67EC12EC
A650670FDC930ACF10490317FFB83C801DB9D655AC9551F10922392F1BD4184A
1D2A24663AA6A96DBD57E0710C7318C152697C6F5465C4B6AA76761346D2464B
67AEA933DC7DC07EC2D6DA9C1AEDDF02B02FD1CB0AEF45CC4CF552D838C60D9A
C6364D0F6A00D613C4A61B774FB88191D9665106F8FB60DF824809DA78841186
1643F5F8EC6E4420829F53A25F5EB169DE6654375FCD7D96EC2279D43A7D14F9
806D271662C095C99A614B1869F207E6BAFA869CB82B6DDD4DCE380B9520A0FB
7EA04CC88522F0FFAFB42ABF6E443CC765A3D620CC127B35E5059CAFC3C43233
02D2F0A662641F5FF87BF624EDA854D4E210DAD699F71F93C56C033E406B443D
E00EDE39342DB8EA365BC986D85BE556D58C3C2778159BAF03B6BE29287F5711
3C87FDC28FF184CB16DD81AB4088C3ED3FB83FEAF6DDBDCA5A693F9407AC5DDD
10BE0B6C475171289E0B41D55A19331CDA93CF358AB9FC23F12BA3BAD27A8582
599A2B35D9B0961FC49DBA6673C77A32E7DA74B77F5A2FEAA24C767BBF7B31BB
A08BFEC22DA4B8DCD5F5D42B4B080DAB17B9701EC8DF61202CB30F429A534DE1
2606A4DA80A96108916544992405DA239B9A64B227B653CC2C248FEA2B775B3A
DD091FCA09231B23EF301095C6E99EFBBD9E22E46D3E61F8C996A63AA3D616B4
47B0D88B5330C5C79BD8FE214DC47D57754E554406536773F863158E984D7AF2
C51096CE76869B6F0CCEE710FA37AA25DB02F29B1BF10B785F23EFDC00D16639
E5658264492D93104F08110639CA1A051621EDB9389BF0BA95B2A29E90BB4820
B6AEF318B1F51BA614C3581AC12FD0983C3BF578078C86E9D2025950BAC74EE2
0B89596FC8F4FEB2C582024503754847E28D80D6B2AA8EE9E9BE9A4B975DAC52
6521443621CFE03CFFACD89E835A459BC9E1BC7F215B52370999331404958318
899A8593AFE260F9E5F5A40A469C0464406B7A1AE8614D907B41D1DA4F460189
CA64DA2D8AC35DD10A87853E814753EEE73AD08E20791CDD3CF827BA903093EB
249F19EF7CDAFA51827C5774CF4579CD65573E89FE3A8E5023E70F173C76B823
03478C615156116E4CD422AC9D8BD1B48F1D72A2B817BDFA5D5B8C3697C5E8C4
2609BF167C5E5745E7C61A3DD54D3A5B4657E0E91FCAB1662E24B981AED3D4FE
8283F7B649063AE40987476FC5D8F85A82FFE945BFD4D45B8035C6218134FABD
44B311DE6092B65D997EC963147210602FC06FF2DFBA20BAA2AD4F426E594CB3
5E312710D48AD36C39363F810189026F9112209530A35FC6145232C379D55395
3BEBBA13F95EEF8F1D23575A3C84CD3760AAE7D6885417912F798C2F7EC4992C
1B5044C152197BEB399437F35F984DC566CF1D783EC7B15B4330A37FC9C1BF23
CE45EBD15ABA3FAD1E46371B4494A48CC3535311FE6DB43D776B8C889765C4A3
1A899598D22EA55DE76735D3C2DABCE3B007D3031D08A9591029380209D4C769
FD636A4A1D0E321CB31625AA4516F5233C786036E12FE856CA859E09F0F69805
D7F406551EB25401D0EFA54444F33A7E90064BD7DBAF63B26994A33D9C71CE16
8740D6EEE121E7FCC0147056575EDAFB87EC8FC79288F04D926730350C6F6842
8A5F1EC10162CC80D1CDC12201101F004DB32DA55AB66D790A65432809623B75
0631B0E76083832E083EF17DE3C42A87CFEEC8F88AB4B56F00251395F767FB69
8F733380DDFF11760B0ECC919FB1211D04CCAF2BBC827A2CA8FC1D6F293EE043
CB73B31B54F16384D54058913521F90293851FF8905A340DB70968FAAED1226A
949C78D176733CA1427F058568A6A6489E6F8F6BF4D8B55F6510AC7051F00C25
D4B86E57BCE6DFA8CCEB606A23A0CA7DF739F61A753FD6225BD6D4A5E82E55FF
5D7EDB78839E4755817DA8DA11805E50743550AA16B2AC817C9CF4CF2FE86775
69C646EA23E3965C361C01B659A9C7F1304E4339C03DD0D4920B22CC4B59A5B3
5DA763F6822154BACA2352402988E5834A5A1DB5D1DD433D4A20BC1DE434C902
C3D5B2112E0895DF70327ACED1EA729FBBF3D9C2829B9FA5A21173244E58CEC1
44DDEC907CE0F426523EABE4F77143EBD6C7A8A13B8243E619D151D290E50A0B
6EFA9BA5267141A99733DCE3462A23C16667DEDB79E9843E83BDB5F1CA0D86B7
9D2944FF73D158749BA41C0B955CAA4FFE0F06DD589BF0EF114EB424AC335873
F8D975787C66391782D0218B63C217A56E0CA6B71CABD04CDA9871430AFDC669
386C241F2AE1A53B8930EDD52B9831DF222A20FE01B3079109BC454A381DDB9D
BE2A0A4A3F3584D7AB06A2D217BA29BEDDF633841D3591791B44B44BB2667BFE
8D461243F61728DD96505692E2A8301E200970E6416B3FD512C84E2E88C18559
602CF6ACDAABEC7D1BD64AD1497454E52766AB7059A58215514B0FCD8B218F5D
6F402974C4ABDB32658492627E2D1DE8C9A6F35977B13748FC54F228DFA26730
8F97126303DF6A79C301E00600AB38A00EEA61310B34A303CE44074C3B780587
25777666DE7703EAC3383DC100EEB27DC60EB70B6B0E915906351A51C78315F4
0CBEA3DD73A79707B5DE543821F7E8FC3FD530380EBF4DB4B1A4DAE54604FEBF
2E6A0EFCC909AE705AEADF3C7CEC9E9E9C1D03E2D3F1A00256F0C575C80EFD06
38B2AEB2B781B81524C55AD61D570FF734478D12D87AEC2BA087CD2F5D319461
CD1E1B89C57F5E3D2D8B768C979F21C701637372B20D035258FE8F780FE25AD7
F6FE9D642464F431CD4C5AA463BA71CE104B5258765688123980E751FEF2DACB
35DD3500870A800C8565B296132360328C69813343BC72C56F354015EF87FAA6
ABCD9C1BEDB1B128A344B2D8E03046DBBB6593D6E911A9350C2EFD5AE89D2C31
FFFC0AE8932A64567DBB5F5B12A5FBABEC2FBBF498AB96F55DA6D35FB7CD91D5
CA9C4F672C37CDED2C60E4232862C16D1DED415A22FA5FBC8B632D158A299E13
B3FD58F627B164A6E78E1BAF9F030772112A25AF16F68150C378455FDD227E66
0311139FAF321A2AF2256EA0675264922F9A98E6FBC1BF693D168F9CD580D7AD
66A2DE7D9CAFBA0562AB6D2E1E6662EC122AC115B0E99873D98F53A5C694F5BD
A0B80F2C931BF330814434F81A3EB16EFAC41D22D1BF4B1A336D18BA30B7AF5F
9FDA955437BB09F0F49265B094B2BD6C1C7E3032C7B1D38819E09EF6F613317F
ADA774CF372C96BC96D4A53CBF3C90979CF3FFD6DDEB397255E7B111E7D3B362
3C852EBD565BD0E7A358E20CD65EFD31E311592F6565136FE50002D077F38D9A
45A973757BC16CC50504033125D2A68A1BE95DB11DBE0E749BBCAD61107F6273
E90DDA883A59F6C492F5241B4557418A1528BAE9EFA0140545252B0FC880DFF7
362FEE6359841860CBA2B0199C215A80A8CD395F9FC5FCDE1B0D0A363BA265DE
7538E270C4823A46A81CC8B2ECFFC8ED4B6445C9E33E6FE3C3CBD48D904A98C8
56E6BB4D2BAB94F2A7EB2B5F75EBB0D1BB13FC226A7F3FE390001B600BB327B7
26927DAA9CA89033BBFECE063768C3B08BA647BC6CF4B18AFBCBA9CFECD8327E
0FF2A4DD9AD740E86307B5EB04221E4CFECE640E51DF29504E315799076506E7
A2B130571F4485B78F91A06869BEBDB2B73A6A3C770DAFEB7C19098C9E2A55C4
0D7D4947F8501B061371500AC7FA2630BECCA0318C70A5C9F034ADCE3E7B71D7
6A2178C62F0CE4C289181298784833003337D5B54A61959872251110F28FCBB4
72C0CDDB434F3E5B44B4AF59507B2F715E7E6192C2668524DCD39ECB46AE0013
03C0A8AC167412F8EEA06448573251000E288A01B4745B506C321B40943C2864
4372B18F2BC2AFB8960B08CB90390BB6ED04CF5785F965B59F60D1F3E7EC485C
31A487F845904EAAB904DF77E9CF0FA1E09BF24F8CDACF7FA1C6FF8AF6320D75
0231B552FB90F122BBF24446797CD20753F196A12A09781F4BC06848F7FFC83B
65840A54D9B875E95CA8168AC76F5EA4EBF6C85D6EFCF162AE6FB10B46D24D26
81ED3F340F67447CA5D6EF8EB457679BCD8C8FD93E3CC34E053C9A36AF283F46
27184F0F7E49D3292370EEA77864A23542D6D63CCAED6919305CF2531B8BF1B5
2354F72ABCC7E39ECBA0123B8A8C8E90991C3BE21A8C8AB1B6879A73B9D49874
E45384B2C998AF85DB5EBCE675FD54311CB1468157175004039A75239C4DB990
2640D98D228F5875366EDEA7D0E827563E8545D12267B73080D802BE7341B5F4
E5D108C4258B51D4327FDD1B8EBE650416182DDFA71E8CC04E9D81404B3CAE4A
EF0089EE9796714030A777F8CCD346E745577A9A5B785434AC932B08A0865F62
659CD92D75C3AA009D14C05C74F992A78703081772B16091B3FB2C085ECE0077
C8A04DF761B712FD53BAD0206AAF7C9D25D99E4018F641E49E8816E1FF70E1F5
1F027A06DBB5236240497E688E478603573F9FFDD42D1DA7BA6D125B96B6B314
C29E276CC51C86FEBB15424B17BAACFAD06CDD3378376FE3E2D75CF5013466FE
35AA58ADF2B8B7B6E2C0D54C2EB8D4A9AAAE446B812E7229B7DF37679EAFE108
F1CCE2BC1FED6E36FE5832C57D791807E57976263B50B91E5F1B3D9119040E59
8853720D321B480536463124DFF7ACBDE3E03F7063896D3B578B26E8F84EFED6
873046F14E850D30BCFD2B6A49A29126CB5F9429BA905766ADB2EF24EA02CF97
B1D8E1021F51CA2D8CF0A32C0D5915969AF272C2D35D0CC1788EF4EED64889CE
E429FF52C11BBD6561CBC1DCADFD21E94525C80567D643672AAF9BBFFBE6BBC6
066BD96E58A9E2F58E923E18A2D26976D77A35534B6390EDC2DCCDFC038A7C57
F8803C7ED3C22DD5AADEA97C9E362CAA752F7B3EC507CC8FC37963147793EDE8
8033181EC9C3F188DE5EEF09429BA3DD40DE855B47289C449B6AD8D5F1D55710
2050EA1E2B596AC1DDC11E23572F8A2F5CAB5CA87E7A66931BB1B17E54866C1B
B1FB0AFB847EEB0EE2F324AB0C9311325276526E4E74BF091BA45A674A52FE1A
BCAD2C032514A8BDC136E1AC3E45E737712ADC7A9B1A4C8F01E5693BCBA645B0
7E11D8AC59AE55F0F7D5F69B03EADAB83A4D8C332E2221AF8F6F4A4954501CB9
C5DA177C020699005F6C0D10D78585740BB798449CF3F052059FC54715439CB3
65500795122379B1581BBC7422B826BD9497A3B908EBE9A2B47EEEE8018439FD
1AEEE185E48454BA5C3565C2240486290BFF47B6B7E6EB4C170E76EBA9ADB7C3
80AA542C84CCE976ACE4E88EB38AFB037A9941AD7942419D17343DA6AA648F4C
78EA7E21DB0F7154C14F4E8C2DE90865168B0EED71E90FCD9529AAA8312DEEC3
53D1C287DFA607B874FE44C499544E9A63B97F1803274F4B965D440267933B8E
B2AB45BF264FB98951FBF72A357C0098265EDD8DCFAA7F25EC0DDF6B8AF6C5A2
647496CFF14ADC348B1150E3BE7B10929E6A931B294ABA70FAB35113F6019FB3
106449C438A91B743C8016150226318D4086BEA97E9B6B1411199E252D5E1906
A2930B434E45A0C624255E2F2BC4442033B199DE84C7175D9456CE55632C5D9D
06CD052ACEF5FC0751DB33F151340FE33FF57B094B0267D6DB9B078EDB86CE7F
419AD3E7A600CCB5DE4956F39C8C9EE4C311EF9941A1871225866E12E2B87190
DE9336073D59FA7958AC9BB93E2BE97037023BD77C5AC2AA0D276EAA1B1F1382
9E41C922DF981188F09E377CC2D26638C738AF4EECDB1B8AFA3CE25243989845
8DD29BD62701EE31FDA095E217C8B0811C892B7C1A1635DE9AF69A49FCA65B5C
AF7420A3B8671C48DF7B405E91C992AB914AC32F028980AA50C18C5C8C44EE90
A4254217C942EB63913019CCB8D949E25D7DB43EF32CE21205CB143DD9D4E123
EE90AEB355314E4E38F3F4C243CAD31EB849E538113E5BC6BCCBCE4D0F09A5DC
24D41FDD14AD2B6E531DB9D7ECA48701B5D4511FF86644AE56F46390796760C2
5E80658F0CD842A0503F8EF5442C290FABA634CACD674B510C09A2BB479C57B9
143F8C0213688E62A6CDAA94F414ABCA46ECF689BA685F1BD831B4271EE5F650
D0F43F9A1290E91C463895BD12E8A831DAD661E18EE36D28074A54E0785BD51D
FFE90077736717DED0EB29F51538DDCF25F9748E9C7C49CDC758CA99C4B06320
66545777F048D317210A6791D432094998B144BC6FC2C53194081B7ED0D12F09
4EBC9F3A303E146D5B42D12B2884ADECCF655B4BF53F63A48CFB5D68715D1FD9
4DDC2F82C763F9BDE48548D117EE226D3BB14588211393ADF539820E79C08613
C6069C64B22F44641B239224A7554D77CAD3FF8AF4F8CD3B277C289C864D5A50
6397053840C0109C325E5820D3C9EF826C2CABEAD4934202143D72C13B747461
135CBEC72D82A7C1602CB5082AFA3E5BEF8D7B942444975C89293EDCE4112DB6
8E29D079A35B39296D48E85DDBB67BBD21E4FD09D999F1CE956E753851CB3588
E22936FBFB63A58300298B16C4B0F4A56DE196CDE1258B3797F51DE7D002AB3B
FE077175CFC5980329A197531AAB5F8EC42E5A582564C9975BCF5D507108EC02
D50C0D87C31A11E0231DDCFD8B19ED46A99B6DEAA787FA4E224F7FF959945AC0
B31D21CE32B6CF9846CD383D3857F11CCE7FFF92A66704671E51C70A75863E03
7B509120874BA14374056EE741F16B16B4CB86E269959C04D04EC6CCC69CEE84
B6C03F006BA1C786579E12FD4EBA5CA8AE8B9A3DA30C1EB2B45BD287605D22C3
247D5DC7F6BA5601CEB6D079B99125C11116C8028E77D0FE5ADDEF0931C9EFBA
2B76B3BC04839634A81ECF5A229D2B16EF77A39178507E41DC9D5D157E3D7D98
4B3A18E67565DF40F36DE7E0D03DB887F3088BBF291BE6E26B116E95010248F5
460A037E196494A16D0A51E9E599E2558DD70A36B6AA193D40E57350D3CE0DC8
6DA1643350894C7C28DD9F5D563DF3E26614D02E7AC89B65BB87CCB393E05FCA
B103BBC2B5D47D83BC9A9D10DD17453476BD275C751FB0E9271CAAD9E4D4D1B2
3983C0D8A7C9DDC28ED6221612A20A3068D8446AC990E62B258E26E398918A03
B37FA4B666C54EDCA5A198767983ACDC2D2F02720E9EF083D3E979DD3D75F67B
1634145D4BB438DCDDA7F91DBB1C8DC8FC6BE36CA3C0092DFEA68295A90FEA34
059F842002D97A1D85375600B7C95B6FD047603E302D3D296FEAF54D457AB450
6105FB578072A741653B6DEF9E3743BCA13B45EC9F67C86D365EA341A8D8D75C
8CB049A7E29C19876AA0B1710A3A557995063D32BFCA6FE62733221A178B0138
92BC8D162B8210680952D8626EC38ED66F5BA40968213B2BC6EA2A33391DA0E3
D26C56EBDADAD6016C9E9B185FE30DC2A4C400489FD7E62377D1F89D241E20B2
E31704DE5CD76002E64188AFF0F169DD8A6443513BF22EE8585789A45E1C2CD4
27E206BFD16653650D47F1B6B6B59D0F1D13A9B8748DE5AC568DDFFE6810A177
9ADA929D2D489EE48531C0E140672C644575DCA89D4704B1635D969A5E0D05F2
B4E7E078A628BF98C75A55B4D9978E93FE8969F2C64E0D04E7A061B0A1A42667
DCED2DA7546D2A60525DC13209A1520E14517DBFDB13121F0796E257FD38270D
1B1EB4F3C3D6F42B3E0B712090B7D85FD0000CF90B569F751361768EF810C05A
5CF385FF18BCF6690415AE872823D8DDFFCCCF5CA7B2A7B17D163C42C5FEB387
AF7BE3FEDF65E84A150C563DC1FFD3D1EF05061D80B5E3C87AC8A76D16591A32
E2C44A16E5CBDD29930856F00BAB4302BB272DF7D1D680DD3E54B888E4F1B7FB
089DA26F38BC76823F5B4A01F7F3A86F55FF0EC9BF7AB97E7B9F607188F0F660
1C0358D1A827FD059DF62DC7F89405E165A3FBE9874215BA460C2645C50A99F0
58DE70A3C16F8CE40F74F7CA2B58D745B723A196F80801C400F37D9F913322F0
B461336A449C87184F081BE4FC920915ADD1CAF234CCEE71ACB4497F66BCBFC8
52454446457A97395E80B0B978A58EDE8C24A09EF714E4BFE0D7A1352D7D4274
677B103477A0E2FE0E54D3E6F6B2BDA855EF11E75D72EE35A7F1FC8D7E8A7C09
94D8043C4F35B031A2C87D47C2C9B9012D3548EA7CC125626F95A0A8DDC7F1EB
4EB81A7AC291413C501BFF78E7BDD95906C31E33AC2E1F9EA80951E4920AA68B
BB7B946206E88D274DD8EEED230B27E0DF64F4D76A5E3F80666F77BCE8BCBE2D
8EA485D5BCEF24DBBFD388AE4D7792103C7BC47A4FA41BBCE3123CEA0B4E0F03
8B15595B87CAA83F23083A881333C2C4C1C60D8AFC81401CC563F40AF416C079
ABB23298CF7951A9685E7147AFD434318B94021A7E5A5BDAFFCE9E833D47C83B
C55DF53C545CDE1D2EA1E6F348C8714ABEF7DD9C5953ABFA381D0F9F5B279256
E80136FDEA6DFEC2EE9F5D1BD504FC7B41B5ECB18FE1E11BD752238BACDEAD76
AFACE52905136889C940637748D0B4665096947EDB05BA4C153BF2E86068B75D
69A6017BA88646BAA9D6F087E87B82124CAA4A183A406871B25B8F34103AD33E
79C70C461F4F4DC5B5E31FF1FD1D491F1419BF36A9CBBBD91E2B1FB0E2487E6B
157525363E1ED15520097495048EAC353425A5CDD1B8D4BFCF8453C4D890D7DD
D08ADF8BCF20C3AE4B4CDA4DAE90B44EC082C36934BDEE62E99B2C5CD6875C63
4D9ACEF68ECA80DEC81A3B612DBBC52FED8B439F728D188C2A7C21AC4202513F
C31FC8D802F226838CCB64BE12367732A1DC87E9352A8CA1EDC755E5D64FE4C7
AD117137DDC1A13F7AD8BD899F9150D97CB969AF3E7D6EE63090EEC569D8FBEA
F4E5CA52AF81F8FD9A2EA828B6D49DC8D8F8898CC2493B42431D2AE3252FA663
83CD370CE208AAC25A0E32F30EADF2050B71A79B87CAF6C58F596DB80B4A8BCA
33E2CA12037F3F4926F77B0719C6F45FBB3B6B73E80D855F5EBFF6A5BCEC484B
5053A41CE071D9F7F959365E6642C9D6103231E07E3C86893838D7F8D11482A0
DFA99F57C171FBC4799803791AD425EA62AC3112B58FAB45A60654591AC4B148
425FA3AB99C2D6657E242BEBBC0D9C6CCDB639869DB9B644F90BB2B129796ADF
C7E958E434402D7B35FC32C14EF01E208E625850CD18B3174AC4E4B00BA693AB
9974D376E97C40B950CA43B39FCFCE3085E4EBBE1887EE01FB7364EA0676A861
BB5FF8B74EE25981C24E8C36BFA67F751E09F1B0626F3B6FCDE016EC75788308
3D7F28ED9663385F19626AF346FBD5F50796B79DD498E95E04A726A98CE753CA
25CB103919C95EFB4E1951963FF98ABC1F5DD40FFB0644A2BE90C36DA268F7B5
8E4FBA7C92DA29EA6D32CFB211C49FE7A53D7D807E6272CD38C921577A05168B
A16770B47D01CEA50E0D6555854323FE00320EED77C3C1F75CDEBBD4BD866647
D52BA254D2E4B701609A2DB73AB1B045CF5A585471FD2528CB9881A8D662574B
39AC2376F3E8F14DB832CD33E7EB920AC03641019D78EFA23255E21A6CF7145A
B813EEE9DD560DBAE046698A6D73A2886B46C335D058C31B5E7D2F56B14C0242
8C11623487EF308B4437F95534A79EA5E3D73F78E9ACED9637C539AE998D80E1
FA29B93AB1FD8647270B7E6AB646A70F51417FC07D596530B22A7722E3F8EF38
A0E0691CBC23262A3846A894BA679E8C35184F061DBDEC0C752E863F68177E4F
68BA72558261B16A9F2F9B289307D7E0313EF155F30F515BD33B184704878410
8E3F40EB893FAE09CCA6D8FBBB10124FFCE47A0BBA283F7793DD611F3CE69BCA
75A31AE3041B4DACE7613634A2550356E8BB601D6C4B2A3DF30AF50B62E4E2F2
836A2397BA520E686CAE8E9320DEF5363899F97A96244E500D429AFFF7DF7065
992BAA82380A30AAF391B39B079C8F4AAB2F0070F8E0972FA3A8CC593E472B57
D335EA640390C353F464EAFB984ED9535EEF0550084F45AA5BBE4DABB07F7BB6
4332BA41E584EEA50F61F4C70214FAACF4DFEE91E68DD6A7471F79E4C7B4BEA8
7D0B1CD0502862CCFE1FD43197B1C7953BD8F4DA1AEDEC773BE670761EC472AE
F355000CA370FA7F5E34137CCCEA66AC36E8062A9F9101ADD125A32195B8CB98
C9B19235F81A5E5222BA17142CADA9701D80C7C70A0E50B4D1E4600516747443
630B04990EE1BE9DB5764A580222B27334EB18B5F20B5D4A4856E5013EBDE652
B37E911AE0E16A56967BF19773B66A92B751F8427D4AC3CE5993E1767270DC70
F22F8738FE52A7252C221F88F1846293F4F56B0DAFA1AE22778230E2D5EB6497
E5FFC3F42F921D984C9B3EEBB1E7A05CF22CE0A8FE40F401BE961183024AA9EF
FA1AD30FD0099419E94B1EAAB833E4E31084024D085A92F0055EBC1063DB3004
BFD2C201228C8E1B5FFE8D1F5E584EB7BD9EEAFCF80B400B1EDBFCAC62105690
97D2E55E6C7A52C3C7106FE2658CCCC0E009FCC85E9515C0F9B01526D9D71A74
E6AAE2A2CAC831229BE625AC44393D0244620A192D8B6CC5B4109F23C162FB73
1E1B8251B6360349280A13BD6C8E8850E4AF1E00070743B5DC9853D2E92A2FF8
59CCDCDF658A9CA1CC4770DE46188D2D23BEB5FFDA1DE16B63C471FCE09BE830
6F9410E8D0437E3D78470AC107240D0F8A676B928A8825E01B914AC181FB6936
7F86B2E33EC141830DD778D8ACE45A8DE321415739C6C99E286F5CF48CA69B5C
3106F8EA0E079A0BF04036A9DE9D655E0C12AF3D689CB122F346BF26D4E14F95
B195112310AF3236D00F3F5349F0DF8F420C6EF39603570115F93666E2682A01
8627919C399A0000C7797670C855A272AE474AC19FFBE37B6495723BE5F44DCF
B56541C84B3A2CF0D16F8009E372AB1A71413DF077D07D4EBB4464D558EAF164
3384A79C5B910B8BA346F6816EFC5EB089C3D08FADEE076B40024CFEB04A5CB1
A6F5AA7679583735E46E37F1FBC38659465C36DF942FD20A09242519D5D2FAFA
9A12A26AE4E92B4C308F078980D2B610801BBAA499AF93576476D8AB9050496F
AE0E9C5707827306FAC9435453EB63C4D1B3104F14D82E2986BD24A600EFAAD1
B2C96DB40D99DDF3F2390566423DBFA0B78A1E5A4EDBFA16E43F5848E822087E
C3B771F4D482815BF4DB53A4204CD832E8760584F744D469443EAEA0FEFC45B0
7336226761B1419FD820901CF36D215465881438B9B820202F868CFCC8029513
23E20F11B762DCA5008635DD352864B9838764F10E2AB9CCADA33D971AD09BB3
6898C67029A4B2138BCDC7876850F1ED81072ED869FBD707C7BBC2F4A5ABD94A
7E6B384CE01C44A6352BF197B949FC2908081E3DA7AE134145C9002757E6B10A
C9AEA8135814AC2D1A6FD440ADA8B04FAE97ED907BC5FAFBAA419E7B778AA533
8483F6917BF64EBC95354AD1FF9F125B816EFCE2D2FD0487F5B6784C9E13F079
5427F857EE0194E96D5D77B470384C1B54F20A8F6BDE45BD0E42B177453E5FF0
73691B1F01BA93E019B016BBC2CC924455429910B57BEC0234C59554B511D50A
0E650776D732D9E79E647A139C58314596AA821274758D06844E33A87F360C77
7C579671575136BDBEA606DF2AA2D90A31901FA42F113242DF90F3D3E912FE45
AD733A895545F6553602A784E91F4ADE78DC3DD9D3F31B395620B82B32FC4A47
B6C882E75386ED3CAB0C70CB414F066B3C6DC77AB6330790C3A1FEC7A4475873
D13CEBA705CB4C473CE780FD624F122CAEBED8D8B295E596A4602E9562712A97
2508C0DAE101B80C9B84593B2202B91BC4CD9DEB87C8525953D6941C866856D9
CE093F65BDD5FDB8BE4594543B5EAA3F929E405BD85589053ABD6D504B0DC392
9EE6FD6DF3E85B0879EE1D2465D33CCFCE68AFA5B6475350446BAED0AA841843
FFDA7C680DCF5E6174DF0933C74FFE7265CFE896A231CCA58933740658B95197
2F9CC7216F230DC1644D39185B2B55F501958B3E8F7EB011E1D624EEDF2A3AEB
78CCE20956F159142DE59AD26AD1D7D878DF1744F73BD5D493F8420C960DDE72
B9F10BF39224F46D826E60BC1C20352404C5EC57CEA6C6B83C6CE568B57E4332
F3DC5D5EEA30A77B46221AD98298A1FA1E5DE87CD709FFD3CF51CCB75B653722
E2E60AB8D3EC1FE91052A3078227F75D6B3A2F5A8284AA2F09AE522DA78C3F5B
FAF95CE8F213D3F42EC9AE9ECF91DB4C6C6057FD1AA615B1FD4252DB7DECF642
72880C28467105E1C5587656BB081EE98DB6F5590B6C1366F6AD6AFDBEB3951E
C353A646165B620388C0E46D244F95D93BCBB6EDC359E616B078479633EA8FAA
9419CDD2A7CCABEF62F895667DE60A07B0E453F321F1FAECC8377CBBB0237535
96B630EA5C5027FCDEFF3562054F7B732725C02F758542B2F7DD9C5953ABFA38
BA55E3D25BA5A6B0D5816ECDB1CA9235C1444133D74751F81E03B285AFC3D8A7
68492B837892CD53B3D63C1CA9CF8FDA44F78C65F46AEF1EA104E96474B9D26F
67197DFAE9789A8EC84D16D5012936004A2EABFEC773C6DAF7974CE6E31C4CD7
EC36BE4637EE0A1D0391179FD995458465920065B274C49FC6EDA4CA02544FE2
E03D6BF4F0CDC0F19C8D0285CB04044EEDFDFBCE44D237D91B90AC56BD458D9A
5872529CEB36923F31341B9D5BFBC36BA63579B36B8823A261E9627F9BFA3613
1C5231E8DF26AB585C11A08A3EDE98BDB5113FA4CF3BAC330BEAF0CC0F6524CE
AAC7536FFC0A6B5C49984214EE9955435766B21C259EC0B0364CA32761D161C9
B3F2A172DB0D478BCA15D348BA42B3DC32D11792B89E646366945A3DB00EA748
20D5EAB99DE3DBAEBB1E5911AF7580B7C77EC3427DC3976C93C00997C4C702BD
DD59A720C614BC292E6F788B2C1330BBC8F9CA89522CCA9966331F8E01C30B85
B8D2FC8962530A98376B348503465D9CFB9F4EBB6D66F94ED723E8202A074013
18715AA7D37141F3329B20468790C112A0BE74A9DEE62957FEC07CE5BD1BB6AE
A4914B72350D110CA27552AA3F4F956EECC478A55D3AADC8945C0E3DE2D35AC4
C4AE76FAB9A59D7DD5A09529251B7334C2492409A1AF82E12CF4BAAB21650E48
53120808D5DAFFE353929EE3FDD940C72DC7E1F35AE19237686BCE36E9225FD8
57DEEACB0B403A01A8A06992D385CADCFB7609FA711706B62E46A07DA30929C2
05F8EB8D0A50E3D3A3F4CE36A226CE3CB16C80C08FD58B8358DD3CE28B9B46F0
F5AB884FFFF9F0A6E93D403E6321DC7103B1B8E4625B95DDE1102249FD6BAD45
ED49B9E13B3B31226325A27CB9F45D968358E9F9688E42C00EB48D1D4ED69043
F652F59B11DD99ECFCC4461B595CDC644F99DBE7485CA8BD0B3D0801072DA450
ED3DE2AAF6079A55D481A69D708E78FA54B46F50F1546FDFD9799646156E1491
2FF6E7A57F73173E1017FA9BAF9975AF9CA7D5DD8F584627ACE9DC5A4D826820
8124A394310DD801611B1E0F54446819A15B4EFFD8613B50B2DF876E7AAAC55A
CB7CD6367B95EB9A41355961D26FF33E8D9FBCDFC1B6147BF76D2F6BF9D11963
B0B13628669550F66898358F509809E621065D284831D777219DAFD0E416EE22
D090DE30AD65F1ABC2BFD288F79E35A916A6FC02B7789C14BB6382123F90DDD4
9470DF12CD5BDB7499953E3A79CDE45069759FC5F66FABB10E833F588FDA7A92
BA09D3647751F4ECB3E55C39D6EAA68AF32DE61A113FB5D5882F227F5E5B2FD6
C5931A871340644722F07C0386A2256F2F2E9421E2CDE66BC6BA989E2D42322F
9D05B44124F4562404BD1EF12269DEB449629E6BC8C2C0F62009F0EE9F16C584
7313FE4C3F90434FC25A69499D4FD0FDB0357BB52380687571CA6A4636D310D5
422E948CA4E1E0F09A149E272077F15D8D7EC40537F2FC80C17251ED7EC8EA58
260F7520BF73858B3572EAABE76326F0CB6BFD586ABDE919F2556550310A1540
E394F0B10B45D479677B8D2445E8A68A65E3D21889DB2B0F6845C57AE52F529D
1B741275ABE312EED8CFF3ADF41A24D9B74A0FE91A4E0D1F47AF7DA3DA71AD64
BEF216428CB79E943262F2E6EFB2B595E6084BBF834913D966343AE1C94EEEAC
1AA84D62CCBE05A8950E36E9073B373860B31A919A0AF9EFCFC1D9F85D800B3B
144E9B4815C0D505BC4418A177232BF5FBF1DCE9D3AC811D5DB7D5F6ECF3F8A4
F7E0358F85BFCEDB3174BC30CA8EE89BD42D72649904BE892C2F8F9547E3CD8B
D70D136A92E02AF94FBAF809693F9282B5A8761A9AD2B98506D2966D6CE4BE6B
40950D60CC5E642F1202AE22191EC5E98B652C8CCA221085951C86ACD8C34C25
46F4224052693A91E68A8CBF51CEDA9CBA3FBC93CB3F63B76AFD5D3C2782FF15
CF820CE41DE15F8C90009E981B65FF6F06EC30C74CF846BEFD3637BB26E19DC8
87D09A50BC9F547AB08603AA21438D980DDB945D612751B1BFED65C2C918C4EC
1AE58C0881935B61973842A40B40EF1108B629E81060CE07BEF0D2117BFD3A66
35E70AF19C1186D58B00E1410AA59FCB549563EAC8C59ED6C0FF9ECD6F8E418A
1DCC513DCEE42087F0B6262FA6B9121B5AA094F2C9123D72278F0C2C86681F17
3AC1B806A3672034687E73F018D3307A98F4874B351634884E1ECFB31EF44FBA
CF9AB5EEFF5EEE051AD097D277B8A4297E147986EA0CD82026A0F69E338745E8
C178420F2F6F2056A156C25DD76C84A6F19C9985EDD8728ABF85309EFB6EEBCD
561908704EA2BA2A8C394C8EBB613750A34C3F62CD24E9CE17111685A9CD7B88
7D72A8A083F55BDE6D5A5B1BF4FC97129873C1FF8D0601C2CB78FE8DC4C8445E
E9A1362370B0534F13591BAD7D738E79590212E3A49440233E685159086FF57E
AE46FB3BCA1296CDEC1CB489F9DFBA0CB091D4C127B09E174EFBE9BA410AB130
D2FEA8B93F82EF46D296713DBEE1288ED5A89B2D9F32562468B987B729419AF9
574B3A035D9C55414DBEFD7F9A354A8CFFD545BD7CC74D6D6DA02747831F037A
11683D4FBB57C2451FFDEF67FA97D52D1C6B7E593F689E55F550FBA1931EF3A2
880B460F38C5CEC7497DB9FFC5604B82B3D2515F9D525F7C6550B041FF8C2B52
E341B959C15CB63E5FC4E08FE4C04256ABCD6667D015A11073E55DA6804E289A
63F74A2A9164EEC61E78D938290B739C478381B64742B85EE5EB31C96667911F
C14EA257644262BC59E2815CA75691F69B912FE7D0BCC3E26F91B62556FB62A6
BF796C9B23320E5807BFFE51F550C8923F21BCDC45E7E7CDF323C6A00A7008E1
E875E31CC7B3DDB59B488A00C554429F725AD252AD4B9A9DF3891D02E102C903
707E8C595503963E85B21631FED475F6ABEE4A0F87D60D7E54A0326A0E66A45D
BC1BEE2AD3E33C5BB518F744C60DB94461E30D693B4A31F8E3021ABBFD30FB12
A66A4D71321DB5621BE2BB048ABA6875EEE44116BAE84C38EE275A5C893D5F01
F1E19471EAB32CE33D5620B9475EAF516AAB475FDA9926BF9BFFA8068E67286B
546C88628945AE28A85EE0D69B2360B9BFA07F94510553E88A52964341147D0A
C7F3EA4F9616751A12950CC5CD18C4B3189E80BBD6C2E571
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C2D1AE634032492B7023944DD1F9FD0CE2F7F4
67A41ED7A40FEA86BBD50B645BA87E3D9B98A309023373FF75491743644413C2
ED9D0848A4FA332D582D8BFFF3D0D13EE0E49102ECE2D624A0A5EEF70005594C
5E0F074DF55E0355AA33C6C0F2D5F535AE93682E855B1BDD6CE955627284BC9A
9199F188FD2CB5BE9839DD396DE541D181016DD6F0563A26851AD5EEBF32FDFC
699847D069FC2A65671D66EB451F54066661038CF2C93BEF8D83E143656B00CD
21885CEE544EA7E773049D63C65BD60F8EA4F783BAAA1268AFC408D019ADF2A2
0C75052F46FDB53266B7944146B3B7D9CA452453C825B92E606247E509F9600B
D6760B31870D69C4C15EEA09E1831354F7C4A2158796310B1E33D5B6A764A8BF
95474A18AA51CBFE9226A4FC31C9828CF2AC80B73CE2768B06545FE267B888A5
CC380114DB40B124C844BFFA3CA29E638C11C7BB98816531D1983A33A1BE7394
B42FD72BF46E4127F4F1C298D34F3811D5DDA7F33DC6E913E04ED663E84F7681
48C131B26525D173F07ADFE2C2AAF32AA5A7101270D15AA6590DA4E9FFFDE23B
9AFBDC82C3C8F14509870D004DCFF1B72D8AA0542C90E349863E8AA5EB8342C2
773CE38E1EC3132A28B15C075DA951F9AF3ECD62EBE43B473FEC1F76DA6C5508
9AF3D95E3AD5012C5ED5A9F1AE7ED88340879B2EBF04DECC857C42C1A94A526B
9938774C9F054CE6F54FB243BC6C66687CF0155E10B53A271F23B6292718FFA5
6E5DAE5894F1924E3A5BC82120DE0F44151150EDD1C65A3D5099445C0BCCE07C
CF4C82B318494F42C776D9482C86646218BDA22F6E793C31EBF5C89965E329D5
452E084D72F8219F6D0A06EE6C0F733B035CCAC9A2CAA288BD94212203C21A39
B686F88742CA702042CE6FEE1C914085E7065FB50E28631D2A286B9862B0C691
72ACB8AD4121F47D4750A5501018DB4BDD5B64DF6A6F8D30AA78C33E121DA9D4
AB827E616E7357557C23BD668FDF38CF6194AF036EB3090451311D2E0315E7E1
38A9C53D00E01279397F08669A63BE88715C699C1A7A02FF77CDEE3F0D6C30D4
059BC9F9DD82CC123F00FF7C25CAA524C8B374AACE6AEAC8CB4182A887EF4B29
4EA35FC77F7364BB75AE2083C7C66E6C13CF17915C9B7EF1487F54EB23A1CE0A
B8CB768EDF04DBF511A4639F49A908F0C231A396B14B2C655BE5952539F63A9F
8AFB0F2BABD93922C7DB78C54E81C2E4C11086C35B56160359E166BF88694D92
194916965CA4B0D9FE1F35DD53F99E96005D40B3D072F7F84ACB436A01134774
3DCDAD88BEF8B3F7104BCAA6E752EE90D2B38F2CE715C6AB21674E82E6B49A5D
CA8AEE53295494C657A9676AA0B493D7D546F9D46F5873F4E4017972377DB456
69B6CAB61314565222A1493030E61D657AECDB179D9AEE28C7CF7AD74AB715DD
9CFAA477132F828687EF2A58C54D8AB7580EE3ED58AEB83B72CB902DF6D3064D
D668D016CD47C8D086A4C9BA264829CBBA92A6F8E302F4CD994EC08C00AC6A66
C51254F7128403B6A5B2ABE4A8B54B457DF7CA439382D1E5941E62CBDE6A24BF
40246A18A8D921257BE9AC6BF7CB079D9EF5F5BAD37D218B1C3735FB7D517C34
4AFEC68F345BCEBE40A55B3DA6DDBDD8E8C6011903736F02F04C2D2EB4489007
C555A6A08B437AFCF723A8F721B0600E268AE9B589919EE6287229169AB6A7B6
79DBABC420AA6231DDD2B6A02530540DBD7FF0FE7EA3CBCCFE293D8288A3C4DC
EEFA1F3076BB941B1832E3FDBFA3335CC6D1E2BCE00279474109AC67B7D0A034
352C6BAC6788DD87665BF143F03485E11FFE1F67FB6D16A8CB93137BCE2E4D53
089C9246ADCF057578194EC0467C42F53DC0838C1917ABDE57FE1D34CA143066
E10440056D3EC28D85BB53EE04612C6A0D8E6BB90C96A90E99E7CC878C86D863
F261E8969E275792F7C38F66CE9BAB1CE577EE970A2B5E013E23CB0654536FBD
A5400F30F7E8F77C2A44865D97EEB9EFD4AB7C41035E3955A08337C981230328
0228A1E6E048CC39F0187524756597F57FCB99FFDAEF963621BBB8373366E021
ACFF86D1A71187A40F5776AF971B1A2B727DBD281F3BF2D1075EEF8C1225F96B
9660E087FEBEEBFE490C45E28A8B6DDDB556D22D3BB579328E4AD9D5C3475D74
CFC7CF7E387414E4A017F9FAE43F47C36E5544A355DD24BF3CADEE7E8C956454
650FC6D9ECFF2EAD25C3A3A326B77B817ADBF1E5A669A87C3886435AD51C11BD
77A2137AD9E2DE4CA0AC1E9AC3B8B92A16F592E4082E90DBFE87968918000FCC
C4BBB3D0F0A77E12FE8705723A5D49D049F420266F034B72EE3B707AFA7CCC7B
9DC973319C4730E532FC9A74A40B28124889243D305D4132793CDF8DB01750F4
DFB79975EAD0E536F9DE9959CC5CDE05CA9B914F8749608248E964F5DC2CDC65
AC636325718AF7EA47946CFF07C2DC0FFC04786221F2C415B3480FE8DEBF394D
18921C6015E0E9B1C3E60150E61B8B33CC90FBD867BEB880FA518D57488893EA
46C5C9397942013B540DD291372C1B08DBB589B5A8C4895D9EFE1182E11CC0E7
AE75FBCB69890B519F7B53237A6BF0906A6DFF38E77DCACD3ACCC25E153A3069
83849D58F61DBD9851718C37C2FAAC141EF01103DCF36D894D9FB2FFD42D850B
D31A8B43358DB8266AAF65EC987FC4455748C8913FC00A089EAB8BEB6F1FEB40
4E47901751F077A3443B933694631A2EBB0EA34CC47CB9695CD7C3FBC4C07402
313101DD8A026EFA8516683FA3A30649486C002BFB9868A7B499DE2304679D96
80B7C482A7999611BB127FC8EFC7A169F8CBB6E313016221878340DAA18AA6AE
A3B09943CA8A11A99510B0A8B7B1E654C8AC3E8D668AA3D9B25927B9001E6ADA
AB86BA6B2B4E28F3C65566EF5311D4A151152979A546051AF86E03D22C944CF6
67AD123F9C30FF7F2B77E767A4C9492E72CFD969120BAD216E4DB5EC85E5830B
36D54688036EE18D076090BCAB0BB0A9A811A6D2D686A31029329ECAE472DB8B
59B3D595F7C8662B9D0DCEDCB3D6B3E6F306EC12F62083A6EFF68077131EC3E9
5A693F7FA901E8967A14F6F3A7CB4A4379B0078199492AF5DF5565F71FF6D1AC
D679670AA68354B3C9D4EEDFE9BAF1A73257424BEAAC5E66A9E915E68504CB46
1EED8B00C754871F065F6E7F05D1DDFE9D8CA7A3B6FCE8F49CB09412A1F669E6
CFB5D3819D61C642C9B739E8B2D4E72B03779B8BDA6BAA1D80F1562BA19D44A9
04C99B2005FA7E0F056B243113ED93775BFEF4540A9941FF240FC0DBD2A65C51
7508D30261A45ED8C77C60D7FD136F67417FDD313469420BCC3E3E5705244439
4E46201B34B583A55D5659FCCEDC1F84E03D692B02A2B072252518FEC11B39FB
D1354C31C01450286FC19405DB16C42D1F5F66E7F073A95475E17058A7998FA3
4AAD8C78DA36221A147B7E77E6FABE66C156FBCAF9D5F433634FAF4502B84153
B1F9E5DC3B118D98D114ECEAE9E2018F0D336D1EDE66411760A864B5EECCF351
82E14D08DBFB5300E4E62B2539F6DACD88AD6A88F999587D5C4133259680F103
89782A5BB392862BEE8310F8FC87A29A241C880C6FB84C5662274AE08FAAEAC7
6955D3D5903D85F35CBF763EB9175BC2E878709782CBA731A8EE684592E8764E
BD619491E7A1654F2D89A8999588AB53D334C1FB8CE7C6CF5884B88A33D98EED
B2F50F32E1E3EFD8C9932797A4AC74ECDC73B19566AB3D137E406D57A6508682
5D1904C7221057D644F616DF2BF5ECB2866D6317C9BD700703DADB9EEC88B89E
5D79A84438B248F723A1B5EE0BBD792B783E0E46FC8481CC9FDD035D3F31DDA2
9F1C35F212F6315CC620EC0118A7769F4517F8EC42A55A21F2525A8CDD9D762E
DD8A41EE4E5F20022346CA7C8EBF4325EC599D755882E751A70A0EA84C1DFFD0
226D540527F178815DA109C80D6CC9DDDAEBA47FDE40DDE9C577433F1C3461DA
816138BBC8B8377C92187B7CA87D55C524317DEBDAC19C8635B0769DBBCF11D8
5F0A910BAD5709B63FAB599B648BD3538B5ED20A998AEF49C4B5909FE549B798
B496C226DC16A18A9DE48105A39B71263B7C3CAEC8AC487A4BE1DA4D789E3678
003D274FC07F7FE1882981EBBDAFC05F74815937CB048E4BAD2281EB809E2182
46596A46D6570A9BD7D364486F30956C3EDD05BE74CC57E6AD93A6A8549ADEEA
0BCD12E44E4CD8C6953A5C3B4BF27BA8A317BA18287D24161B06C11B130AB753
1988FDC5064461993AA7285727B30A737DBCD638B5685BC4904F45DCF443C4C1
7FF6E0A4C6D75CA5AA9DBDFFC35B8399330235BF13206A3DA1E0083C6CF4B205
301FE5A2F54624315981DB9E59213A178710F75BD51A52BF0D97B34C9CC06CAD
4BEB4AD7FFF18C7394625414C4E20D63B967BE9C9E23AB6E54C9A007936D326C
B050D58F8A7F8780AF8CC5CAA2870BA9C8F9D06EC93285487121FB3EBFE72A4B
9268E1F3D065E8BE49F76326D2D0D44CCAC8ED86576612A466C00A9A0459324C
6426D134C1090F8CBFBE01DB40AF670FDC930ACBDE1671DA5B83052A3947A20E
D609E706465267C2E85FB1C5BBC9925B98CC9178F1C644D40CE07A4E70B37A6E
5761B12AE869A75ED6FE1768B8E8BE31F533D311387BDEDDD91816A84B5A0E61
B4A96FAE7439D74DC29EBEAF447D0D5ACBCB0882F35AE8A3E3B1FE3903A941EA
2090217A46E5CF24EC08A8FA2348D271D2A84CAFAB1A979FACEE40882529CE5E
4111CBB13CC3AB7AF1B865C905F11D81EE9A15E7C355D0EB24E751C1E6709AE2
01C72F1CF2698672D6AD3E0F12CECB7595C5E680E31F06B8DF89D73DAC1B4EA2
1D07C4D7BBA3AB19B14F1490E5EFDC849282C0DC11E591E92E88BF0E7927B92E
17E7B9DA23ACED132EEB5128796E46CB0AF4B537987C2ED552B37D806E93083D
AB365FD0BA5627F16A08E0D1A2BFD79F8F3DD7E45E5F18BEEFD51455661E67BE
C675BB4B5754D6A9C741D02916CD5AAC997080A8224755C02404518AA49AAFA1
7A9A9A38708DE19204584689F539BF6C809CF54BA33BD15E1346BBE8940C2F9B
E4BDDA2E4322C052851170D8378055819967C7CEA6C17BBA5AA16E07F1E26F07
A0B6E1CA3B29D0275E10F95567168AA785FE3341FE46336FA631EE7A4E09E690
D33ED76B14F692FB22F192D1978211C0CA001BE9D46BB30653430174D252E3FA
20771017FD8754EBF42AB7EF205B52EAB95E8A590966A1F561856FD959CE669D
97E45834FEC5C90ECBF4DDBA641A6647C7E9A7149C40D1DA8536AF51BD018774
7CEDD0E10C7E1BECA4FA8B0D525E849E59E7B75E384FC1EC7D7DBCD161772F52
2AF67E91EC2B4B1BE8C704194D72A79D33E0E5E7B76996E1D85CB9B62BDE07EE
8346E30F68FEF27E30F3F663394D8D17FD43129065C91645DBBB7C726C098D95
9D339DA261515C42555EF75A03385FDF6C7F50EA68C0D453945F999AB6082714
B4EDAFBAA48EE80972BB1BC7279292B2722E1893A8FBC3A7C56C8995076856C7
4CC973934DCE0AEFBE747888AA5472E4EAE9451A3174C749CD28214D84AA201E
7A8E6D59B712B2AA3D7D29741D6A52EE169C6D6044F0629A5F980593A1A0EBF7
91CDB3B7D78A82D9D6D54932D5495476440B9864E745CF9BB35BAB672AB65D77
01BE2C4206934FBFF484233240D2BA02D3036E3C56FDFD630C2E836FE1207E40
25C67F094C508915ED127695D6FC07A26A872BFEB24F4F57A286F58E9C1E574F
41ED7A5668110C3DF3982180C73249896717B22B54C2F289AAC0EEA7F800BC86
CA8D7266B48F0463541489F56666025C854B28533F3D64DEFAD5F854062C5BB4
ADD96BA9E457869E5AF4F2FBB24CEE0500E488CDE73C09892E3E65EB28C411BC
79646781C45360692F33F9A307656223A0A4E5E873DD5728751331DCFCF17664
A2B8410228067D8E5DFEBAE3F022EAAB02B6F04692D487B9909D602F361AE260
78080DF8F67B12B9E5ED432452F440BC614981CE23B4D968C5109FF036F8FB9C
1F86352211F2BBBF036255E83C9F847EC2351993B593246CC6E5F85E045FE750
DA4A9B403FD293CC436A6C1B655ED8657CECEFF08ADDB19E494C72ED471DF04D
24CB7C67CA2A599F1F4BA039BBB26179F2A72599892CEA27D5E0198485B603C0
1A7EE919AF0954456C6920F880D678A6FA8FA13E04D067B55F84954495EA3D40
E267077FCF978D2316D2FF5F4135E7EA3DB921E6781272F4FA16063859EEAAB0
8B10DC15E69E453EA75EEDB71F25F9A93315A6731CA68A63CD9884449842FE79
7BA7E2F725EC61BBFC6618040999A51A732F4D8D5CAF173FF8AB5A6F7EC35410
161E7A841ADCE046C2079EA5BC0A9AE90D064885720BF2F3CDE7FFC1C95B5B28
89ADC7DDAE3704E9999AEB57AA3DBEF8671AACC34F3E4C8B7F07ABEA1BAF7FFB
BE0D3CF1E4E4489A47D23E91AE3911DE781EA571925EF04B3BF096B274A94FCD
5719F163517FB66E333A265F3A4E975A340EFDA6FF45D81E5DCCB9C26B9FF9D5
C6C3B86C38CF5F8E1554E4B6108B1BCFB5C7E9E70F88F0BC9116C0E58457A669
12291DAA0915E7D640105F39CD8082849184A8EBDB90B1167333987F7D42A76E
9C5FEB663621049928B01E78C6FC5FC52B1CB9BBE02BB81976362325F058328C
5153214F7088915CF9F72252A0612528C72CE09AA133598A0A66EC02085C18FF
F27707F3209B25170795EBAA968FD2BC7F2F2489CB63B6620D6DB3CF13A0A5F4
1929D75D3B1E711CE3A8AB8445DC7B165B09D14E7456D7C51CB856383D1AABF0
209B70104DD63E938B026DDEA892BE5622E14F961290BA90B74ABAC8CCB9165D
B9A392D09E79AF518630C4F063E876A35D628105C71449E90BD6EA65B8E7DDBC
69A7F7EE5667075BDFCA7BB9E0C33618F76E5C0AF797744A09169D3B1D3F615A
46B30CED1416BE7F3E83E7247ACEE7428A23D08A357D3403BF73AD979877DCDA
412F63573818F678B2407A99FB366D2E02D65D54DEE623100F6E46490A01F563
BC287EA471E902433EFBF02EB5929FB24ADEB587312D3FABC61113AB38B1C20D
59F97D4DD6E50186F11C5AEC3FEA834B271794C994A3F9821E4E9B9023B08C7C
E8D0F6728D7EA6F88FC4A0DC6D2A471A78F98EBDC2A986102301BFE6916F0FA7
D61E2C568760194B2F17CCC2739A67DE698C9484AFF6873BEED3F9698D71B919
03E04F1F6735683140701ABBD926BB41B1B531E491065D57658BDAAC3AA54968
13687BB411678EF3357786F66BE7285BD9AADE0826ECC576FA95412E2A7FDC96
BBDAF34C4254E2E02206E93022A0609D842ACA6AA03E96F8C117951E660D9AAA
9C14A35280EAFE1FCB0328B9C4263703BD6A188C39E2045D57945A929B28A9AA
2C21E05D767DB0D84FF552E8F9DFC8C9093A07D46B3102148B03F0B16A43CC96
A65989A7AA9AC8B6930AE574DDD32FF4BD7C970E46A68BD50D1DBCBD3EBEE7F8
CCC05E4104CCFF117FF5E54D110CEE64FEC112E525B7397893AA3D939EA7116C
24E636DBD3B89455CA9BFE2FE8ED26203A2B353C3C9C7C528A6AD12C95E35E48
F94F97079164273D164E13819BCD653C300F52896E5079721BAF2348D62292CD
5E21C1855ACD94C2BD0401740C0E41DBEFE21209DD13BB4B097E83CBB8EB5318
37396EB5AA7BE08E08FEB6872FD53012F2DCA7F1FFEA417A55A919D4B9734D9F
B7982A554C842204654A5104DA365956B096C1DF51E9B76BE1D022FE13B1C5E2
DE5B1C88FADF22976279F1B8285F5EEC89CAC9ADEF90506454D1D85D87CFFE8B
6BDD781F814EB89F3B305E2E4ECE098AEC270F112CADA74CFF4BD78FEEAACB78
25E2156387ED859C90CD6F29A21F72B102FFA021ED51B9123DA0DA1143CA9AA3
2E28424B735BDFE8EF29D73D5AECB9A0B0D0BCF4999F3780DD65EE0692067B14
9D0DF4784054908CCF7590D5D6DAE9A8100E3C391C751994E0CECE14F76A594D
3F32391C040298C4B93ADEFF1AA784D08CFFD37CA7DC832D75FDFAD81AA210A1
5BBF76A3D20B11E908D9C6195D8D3E9BDEFB663D035CBB646155A090BB954BA3
546BB6DD46E8206C04B7C529083ADA7EBDF5C56C2B03F6BAB0D5AC4D24808941
E5C7F4F83A7B3D47542FFF5987268E60E7FD64B017EC6A8CB6E083E57D0E806C
B7D13B81CE15C720390C3EBFD7DD10660FCE72F40947889ED65C9A6EF5A6CC38
CA586462C4970DA4619E834957CB1CE9106A9B0A113ACEAE5A69A692EE304763
BBA1AA81F9D74B24FA7EACEFBCAC72DDD098F25A57BD3B18556087D7A042518C
43DC9DC3A191601CE9873BE38030E36C24CE003E222F0B231CA8545E6E3360EB
A156B0767661AED97F88AE5958686879FCBD8C5F878A85ADF68A6975BE0CBEFC
B2C3C34A650FE131C798933A7CFC60FB3DEBD2430D668B3D174C7CD69633A3A4
D982D414E23FD2ABC31872B05C171C7186F5BA2399EA8B7EF5CC9B9D0B17C5A2
FFBC6CC49221176A15E046C86952599448EA77982CDE7F785031558DD0ABF07A
2E4F9CA5643FD07D8F6E37275108F7168F45BFB5024C875828634D6A4D485945
A5459ADB92E9EE5714245B96CA498A597D69509DCD6128A931638A04C43BCA56
2C95A0A8159F603E3F469FE2227D126A9AA1FD2CEDAC61D7FEBC092B0CBD2223
900A5A4D8EA5A1169936522382A3D94ABFD82D5167D7A4C7C44F78456C84DAF4
76A00A93A116D2EAC98DC8423EFB3F3A2D2CAE793A820A25BB2E4EF8208584D5
DB0E5C30E5A42DB22DD8E13A29F907AA1749E0BFEF4ADE6C53BED1C77634A0FE
FE1385D456D32B106222A84D10CF5EE66EC13A71302C6786D05D41939B2D86B9
F997DEA662B7342EFDC90B3BCAB589A886426E2DAF1BDCB7C0B58C7B93A53503
2CDE1AE6FDBC621BDE7F67FECD4A17063BEC1E0E723CFC0B77BB85D026CE39C8
A5D9B970AC4A2E4272544E80DE70C728F23CDA3101616BFFFBB3A9B62A77306C
5939C0557EFE61648E12A39638FB42AE591FE504A26092FFC600A6F211107A58
9D047118BF18C3723024E23B5110F745F2E3EE3C0F379E76451D99AA82119E8E
EFA6990CA142797E0F0C40C15909BA02E8127B1D6467EEB315A7EDD981F68F15
ACE1C2701F6C12F3FD5543301C74127BD385D9EFB01B024F768B5B88A93A38F9
3B29D9CBB5278948DD3AE550B3D8CBD6A090B9572E2881A8D9E124441C61D8B3
624F4EEBC57CE06AA9A9C2805F46DD32AD65FC6D24A091A75B5745DFEEF5C116
2900B5F1EF594F0203803F39346F9156826750A779DEC0047602E7D4B98B2FEE
876EC79521622318BB6960F7588E6392FC187179D97AC659ACB1B0C3D46B8C6B
8C53ADF57D33E98FF1385DF5F7CCD561DC7ABC388F4539424239C618F1DAD25F
3EDE0435F57FCCEE637518F5812EB351B6558151A7B51ED58C422A119E8C6BB4
71DF05580FB2BC843D930154059D8D3F20870038B6EA3C5E41A3E6E6EAE70E62
059B73CFA7ACD6ED9F9174F0C5658D20FB0D8E059A9FCDA25AC0244C26ED6EEA
47C3FD8D9159594CBCCB611C419B088DA06584BE2E6A1DFAC98532A65305D47C
7232689C78B4EF39EC5CC133D14C2E464C13F5C41C3C5F811C330CAD1BCD5F7F
BC20299D5C6FC1EDDFCE777B796EFAF21AA014C05AC133EB07E27FBE8323FA2F
FF9F864A2AC6C82B9F5C93E475FE35EEA451EC5FDD0BB5AFB319CD8B22EE690E
FC3058A33A87D0409B34925087CD091FAFB67901F18B38FBFF69D3FCB65A9736
10C405074CE17CD0727985D1D1F0CF0362D02534F7BD45AFFEE4A2344019DC0A
339C30FF7F2B77E767245B54A28F13A47567691CF2D7F75A473610D33CF75390
04D607E594F585FF18BCF6690415529D6F25380792B81E45A27AFD62C31DD41E
6CFEC9B323648D1111EBFF81835631AD6C6FB88D8E7E5C905DC51B3345749C0F
3396B9CCEC6870E828171F79838E9B0409FA1F644FE5B7CA424D1640502E4BCF
582C6C5A69BA3C34DE43B531F84B485EF8F360082659FFD6E8B37B8AADD3CBB1
CE596A0A4D093163E531B3D50F257CD9427A23258B4A00740F47DD5A381E9880
69565F7FEDD9E4F1A76FAC74C2492E528D5BE94FA2DD0036C9CDAD908BDD8414
9AFFDDCE09BF6427B2F8548CFFBE68A456A57159BB74CE9AA7E2465DF8BB1911
87D14A7C115F8EDC205DACF00BCE930F6409136C1793AAD1ECAA2A39B0FE6EED
7D5B536D9846B22B75BE321739617F870A36CCB457C2ABE940D44DB17131A820
C6179A8F984CA14545537AD905D0E50A525C31CE5BCDAE757E052FB41B327D78
05C7DDC488A1BB87169A9B365C4C2E32841D449C841D19AEBB6A5817AA99274D
F957210A401145ADFAC54E66A508FBD0C338ECAB53C74DC4E883803F2FB7FB3B
E50D86A02109B864FE34566E17B4A1A09F9BA10DED0492EE86161560958B8918
6135E2ADBABCAEB14B34D2A181B566CC044347E34EA72ABE84E54340FE82B7E0
A620B5326F81951039E754F9244B8534DB448ECCC2B849CA0F9D00089C771A6C
C556491A618D5CAF173FF8AB5A6EB326B6BECBCD412A7D6A0F93A57C39E2BF0A
9AE90D0774FDFCE5D922BF421C98205483BA5732F4D5EA2A93E842A2159F2B9C
855330787B397D3C3A6403B9A767AE9DB545A11576A752939BD09C76AC1C3382
4FEDD5F0628C95961A815E4FAD2D456A7C66ED0717513555CEDF1054341352CD
67B72011F58CA17FF178166CEEBDAE9B26342CC1D2A2826D86251C297802A5BF
4C9235E20FDD51237213F52D9703BC1322D1F2C581CDA9C922E6588D3D2FA727
918A77E7E68B876CDA3AA9BB8276C9CC602D4654DEB38E8E649766DCC5F14A44
68A7FF64A67AEEFABE4AAFCA34766751B540B5AB0A2F50FD97666B5D8929A96E
6D27DD8B231EE59CFB41B40F31107967746D5B3A5CC23BD0FFB24E731EB4130F
755E6A20B9E4CAD41C13CF3178AF9EBF109095E342A3598B2B5C7AC6112CF380
D176DD6BC6658BB55B14C0B0D4D107A3EE7F23D1E763D760B0241102646DE4FB
EA6DFFE2645458F781186DEE74ADFAD3428690834D6302CE4E7669223B8AFE23
F85D9165C80A576EDAEB538240395AC0D3110CBF8F774728E4278EEC55AEB085
CD07A0282F0E245291E60AA9A4EE1AE4B05DE49C03FB70AD74949C41999FA96E
8674AEF974C204054B3D7DDACE1E5E5306671CA0A088959B2A2CC6AFC2FEDAD6
C697F64A09333B2039FDA78228FF7FFF7767895FB02F823B2D59EAD7AE0F38F4
D5A3E177398EC3818A40FF33932A8BEB99FAD0258D018F94E082E1BF47A7193D
DB0209BF0C8268455B580A4BBE440839A54B385C9E4571C466AF1D3C309F8D42
C2A174C3E0F92D268D63B559A404DCE765AB2B2CCF4CFBA53477316D1F4EA0CB
A36C3B9A4D6E6546977753771F4B609B835A6293782B98DF6D611220029CB339
FD5C68F4C39DBEC8BEEDA86F09129C65CF388867F09BD5A8404282D7AF682794
57739633DB5CBBA6E33ED5012C5ED5A9F1AE7ED88340879B2EBF04DECC857D09
B747627DB6DD020C5B28A5F5867F1D07E70480CDC5E3906D39A70A2F3F1509F1
D9C57BE8500B09EB7F877FC526FD62F7D2C81EF13236C981A08405EC3AD93FA9
C9474520B96D5030E787961D72D02C195C669E792C0DF51A408B138DC7662E3E
C0039B8FD2ED53A9B2D2762E140E467E3200E0E79FF355914F445B8F63509B63
4A40D0776837E1028862E19D26FF7E13EAFFC05484B0011D8C44DB0C074064AA
534A2AF512C1F2BC5BEE9F21801512D43D1E8F2E42D4D0358B380BAE915A183A
8FBFC7A56F68BD8A21751D1FF032610410865DC43C4E9819F846DF6DCB8F5EE8
5448A5C3CF596D7D80257890A6B6D9CDBDFF755C56613FD2C27A6FF7D30EE720
575B4FCDBB2844FC3280769277F5D4878326B6ACB123477906B1BB4664CDDD4C
7A901957507D4B848AFF203EC104AB6EF99A37848C3DD68C5C8F24ACF262A36A
8205C68AA0B892E2BF5F9A0FF17722847C88C9C0A2FE4804ED676411B1B599BB
1EF50C7BFA2F130478C2A03674870F9FAFD22BD2AFAC279C581634E789A5C10B
C1E93488DCC273143E753F339AF53A317A31B5CF413C5A6BC7DFE8BA9D7BE47A
CCA1F635FCDD6169645C59195984192F994AD63C130BC3B3B3E30DF03CBEF982
14DBD2BAA5AE04DE16A0B6C9E4971AA5ECBC5C34FCBD8F76C58F12192251EC2B
1F9515CE1738BA2C25389A4A4289945B806CC14F198DBA7A8C40F0CFFEEFD6DE
3A2FD816398A08E4D6C40A823273EE935CC0E77188C18435A2E7FFBA595F0C05
4E96CC44F7D614DF194628D5FBEA6CF56D0F5346B6B6C1DA1DD8DAA5130053B7
E9268CF93B9763BA70C77A82B01C2B1746D8EE32B1C20CD382EB8EEC29823334
28081F09F426B95B679528D757CE24139474F15CA1082CF6930F992BFC83A5E8
5C6B452AFF11328F2850865F3F667F1F0B59E213D0C6086BE4372789A5E4A8BB
E7C909E080E70BFD141E306250B44907874A1B286B7DCE0D4D5B51864B341A6E
A836B73CE97C83E306D223CE7774FA5AF973D985C7878398D4756D91BE85315F
65F184B284179E82B79A40C0EE4728C176E3F39C3548B5A2BE25266587B52BDA
27CD232B078A014AF3BB404CDF3CAADE7A8ED6135F0B1E534E90C81C890D0E98
FD06C7AA912A719A5C01D1DB797E0948CE7EDE034DCC44740002ADBEA1F7EA19
CCCB844D84A0B3134990EF215B151F5214A44C79764CC25ACD32002BDF6C594C
CBD796BB15E26398DD34FAB24DCA592797669A41955B2CBC66708F9896D69F4A
05EC13D27E922B1A9F1C30D13BBBD899E1113DB8E9E10BBE2AAAF5FF8BF7AB62
17C9CB40AD1A30249D5301FAF2F3A859772B79B8FA81CC9559856404124F851C
DAC202F133D2A7E60CD45EC3231BED6F014A7B7CE4D18AE1419122ED17572A5E
B1DD447832B4E1DBA7870A949E48C9DA6B47BC37E05A6AC021E852C3A8F8B27B
D5EEB828B2BA0301A83922DF4B5AB8E1B0DC311FD77D52210EB2073CEB06E37E
88FB99AF0D7FA4DA1316C3C5279767142D132F62ECD53E860572E77BAFCFBDBD
48AFE79140EB33D4106D96323A9BCEF75CA4EB317A628F42F7EFAF5804FF3858
929CB4424BBB2D32079DD408226AEAA0C4DCB8DF16CC614DC0480A7ADA9F3D89
9B52E1872F216D49235790239F4CDC30938BB82D3A6C8A7A5067A7C564BF22F7
B88704B25F6D7A8CDD807B3CE00CC05F6CA1D87A1C83530D8ED4E1D833A1E4C4
ACBA7793B1FA243568C3DF17E4F251A7B04C189249BF0EAE8BDB05A6B27B6C63
082606B8066E397BDC7B8D4D86246B3091906127EA8E50EFCA34368DB4A7E403
16FF7A74B59798A8AB7E8D07D3EBAA998488D4F6D2FA07D508BF3F6314B93496
2984C7FE400CCF422886EEF6697B45A72783A186DA89F02F2C8CF8BC732ACBD6
03C74D3C8F83DB12FFA2FEC28A987FA54B40D6F8794B336C400DCE97D3384AFA
5C0BCEF133DD294C2FA9EE0A796131EA6FFFEC99F667783B39904AC4A1A00B00
22D9A5930533FFBFA7D3873F8ACB0692B310ACA0DECAF08F9D12E6298288601F
1EC2134C63CC7C4BDF7752BBBFFB78D744C9ABFCD095A12C405F561BD9FBC456
DB82E7E51A8BEC4A742712F00B16A6798D6760D9FEE553438756D88A6443513B
F22EE8DAC46B440C7190054211993F4A4BDCAD32202C7F74C30A4646D8726DD7
3FFCC34B511BEA23FE2041BE9D41C128CE151FFF0B0DE1AAB553AEC7DA8C3E0D
42D357AE25A878133A558079225EA60C6EAE48D77AFF7345B8FC52548179C62D
839B35D9951284F8683A835B98A1D4AE5D9CA434A535EEA888124804EE03C7DE
AD63620945B22BC73737C3350C83B7284EF064CA420943F7F3276BCE10471634
7CBBB915B4185461293FA4C55FEC2B062491590FF01EF0F36E918D98C8AF7ED7
2F0059E35DFEF5A8F444C41D300E540D53723E9099BBA1F76ED06C85C5B8042D
50FD4A7194CCAAE06E87DB6F992B460A7114E13F2287744CB89B862CE68A4777
5F42428332F2357E23D066595826FBC6EE668580DC1EF917C6F616E761C946A6
48F86773E5929E1BB1D4C629B5C0EF3570BCAA8F5BC021A509F222730CC663CD
9E624F8803F18A2569F67BF88C6CAA306AF4B343BB10D0490A5E0E4AC3B8712D
1CA44E0FFC78679BCFC1B3B34536D4766C8D058CEB08DBC89FDCFE8294323310
73236BB65F93C16412F1D6DCE02BC7B485CC108C6321EBF1C3F9378B3D4321C0
4AE86EF9AAE55767C0809544F5291EB5C0C372441BBA4ECE8E15F552ABEA44EA
8828FB7DC6D8E260FAFF76ED5DFCAD3B0F3C59A4D52A0E0346357CE6DC768DB2
F8314DFFB54617007C1984D443CB98799D8993E91A896BA64439D3A6C4DABC66
89A91795A2DAB9A8454139B2226BA59807A4E5B3CC008C51C13560F147927EF7
1665EEB52FFB958D70206769D0BD38632F5A005EA82907D82BA5229E9F8D232B
A28D8F7C27EE92923665C555BA5E53124F7FC666801C182AF99D4A8A3DEAE7A6
69D979C33F36A5E3BE297EFDF302D8E8D5CED4481E91171D60569ECC2EEFB7B6
B0263B8B5CE6EE63CED9FF7F8F1B645C5CFE109AC7A355699319C74C3F859B9D
4E9D6BD050ED7C5513B0E7960D957E19837FD227B352E96CFD711C90B4EEFD97
AE5D184F743ACE50A98EE53C2067B122282F1FB1F986A5E62DC37AC584AA7417
28166F7CE1ECA5BFC73C09D36274C91F1149C89024DA3E3E052F714F5744027B
50DF95864E0159B477B94FACFD9D615C5FB2A10AB693413B1AB7A35B65D85708
9968DD4A6F3DE738237A8AA3D32BF8D6E1ACA3F8030312588A121A1AACCAD6BD
84A5074B5832023E809B80408BB9B61C2FBCE100675BA045A8D89AC58B77200A
09C675E4537952B03EC78EE9659D0042E7EFB30F910EAB7E9A77A16718C87CB7
86AA6415ECAAE9802FA36E4096D06B36932CDBD6805FE456A79A38623745FC7B
C778B3765D421C91580A4375416262747ACFFD9C16129FB088DDCB10080AEA9E
54EF36829B0DF494ADDD3500D4FFA3CCCFB7A3318C90227BC61C29D379F2DDDF
33386D5FAA4C18AEA81E98D522C39BE1302FEBB6C5A7E2509195211FF1A494D7
7247DAB89EFFEF7EF9EF46CD604D79D4F83161C24A1CA22B6615DBD7F7BC33B3
4BF3EB64D8B41E63A28E978DEE0029EB069C2B6271FD736442AF38A52EB58A59
D7A628A053FBD2A97B4D2CB1B019FC4EA512311094E29D5FBAE517D7868D9E0C
4930379FF87D4EFAAD7ECB317449821D2F3BB5B470642E3F575F4CA3B9DA9E2D
C2EFF49CB82C4F04DD3C883396E0CD2FBCBAC78714A00E89C93A77C018C9C227
22EFEC6BBCDB14DB7688A8A314499D796C66911DB4E80FEA80DDBA9FC089627C
5E37F1402A7A751504D445F8F69CA4B90D34988C1C1AE72CE581E82E6FA1DA8E
C7A3C6E0901F595D24202DE22DE3D1C72ED1053D6956299EA698C1A77EDC8CB0
25B10C08A5B355BFF2B23BD46BF9E112781D53309A054F063DFF43BD4DC965BA
A1B9614ACB308AAEE242535AAB0A8E3EEE44C3C856F8E73B50C20B037EB4C97E
392E3127F87268BA44259CE21A6B9E368CC0191FD3EC665A0F563B55F2738B16
DD4EE412F3AC9421A46A3FA3F6BE1B968E6F1750A23798471908BA4751D30E41
266E6EB98B56C4E16D6B61184CA7AD97F434E3524EF72D4C5EE0DF31808CECB5
97CFF99706EF901997FA7F292F76A8F584E39836743766E3833B307E02A4483B
C8446F5E8F38C3A65A16FA152620B11A8075BB691459DCCCC211E44D10C0CE6B
2EEAA9BD1E8B41C93A3C6D20B40CDED1AADCA60A7E22E14EC36741D667AC72CE
873D9107FE0A031605CF6872260A0C8088F00ABB2058B6E41092F1256C089210
5D3C833F5A6EC82AF54D801972EB6C8B045A9CA99C30AD6D43E6148CD247B2BB
4B2C4FA45409B5EA00262602C9D87938B75EF5E75DE31ADAE0B467F3CDF0CDE1
2200B62FD55335982286AC1F6F8AE4A0BDC673CEC32191756A9E98F4877650AF
7AAA510FF811AFF97366C6142BCE4473932308A1D3A79AAE7678E69728C89FB9
F1E995FBD15C97D2CF680E6CE3FFFB1DB6A72890DA790C2691A7456F566A8359
7F761BEDF6CF4B28799093DD8F65BA55CF0B996B1649ED26C3463D664FAF1E15
D2819ACC236CE307310AA50B8CCD95279F0DDCC564D440B4FF85F92448D42014
DF2B24CD2B69FE6393EAE0E90E7FF7BC2333D4E0215D5201E07C065C3CF00E04
542DE83914234E64423B9D418C4404571896E222B0F0964D1FFF7A18A4EDD38A
DCDD0BC6587AD52A8C6771364CC604446A77975AA682A1E37C8778D9700AFB76
53B6B48F2EA618E11E28F35CCCD180DC49C91B821961FF7FB9CDC8E87628938D
6D0D86F38133921956943E33FD627F1A45160CD3D048416BA31CC103BB083FC9
717D85D4C4E2E941026C25847C739B6EEAD718B6C1DDA28F18BCCEAF2AD29C82
6602033327589A7E0742EAAF8B3DC1745A32A56D84A8C913CE0EFA7FA8708F55
9DA23BECCE71AB67639EBC8E9AE584A9127874891145937FB45D698F452B7BBF
72046547BF4519D1FF13FD0461C400F5C62E9FC8B9E84BF464065CC9706434B1
263A23DFB7E5EE5315C3163A5E658CE844D4F0DDB7D17B8BD48226434DE576FD
76BAB100EFAB81CB6F355F598F4CE83E5141FC64FF28F1CA6D4F1BEA1C640181
9082571546F7D075BD8D36F3DE102AF8DC9875C222FBF9C92909CAE0570C5916
F2EA99E13818D23C61043B5881BEA9CC35A07B1CBD85BF493182D44236C93F93
9FFC5263B08CBD3BCB319FC0FE2D9A8CF214DC85B763C354E8017A793F8C441C
04A64A0C41F8C9F34807DEDDF20BB1BC3097628F1B02C9134BA366936CDFD7FC
D6257906262C8CCBB155F4D67B93EB6417582B7D7B8E44EC96CA2888B52BB07D
76B43450F22F40CD7C3F94CFEA86A00D25806CF5BB591E6BF8490DA0C23DA2F6
8B499386161B4BD1FF7DC5569E0B58AEEA746AA0E2543FF09378E5799447FD77
46AE04E8C4F911B346B8EC57A4DA26D80D31ECB291CD0D9DD425B395C44F55FB
1747C520EE3600BC5A557BA5F5DF8F7304AFDDF88F35E1F428DBE74E70427663
4A229B6F0A724352B2DF600A2268B35A13531DCF1743D16F07D45B8DFD10030C
5BFD9FEB992196F63AC3417C56BEBC056BBD534984BD9B8D746C1800A4C8C647
055A0B020786D6A0CA26D77F403C06D65B7394BF1FC7D06D3B8A43B6CFD10F1A
79C610ADE46912115330743692D0D962AE4B5982B409F49232A61A6549D974FB
FA88369D0F6C6DE89E1ECAB22C58A1678EA936F6804E78DAEAFCF6CA47AE056A
A2B7755C4BCE15B185CBF6F362C146A2D6F8DEFA97743B7726D3CAE5BCD397BA
1FDCA43DFE85DB40925AABF0DF9B431F70B6C431AF283A075F482E564C934A95
B19DFAC99E611405A28A8E35244CCC8904BD6D7CB9ECF09337AC26BBB0E45CAE
C8BE479279364FB847A9AD022C5D39A654085018252E9C4B700945D09871046F
347627ED3AD4456E3A67BF5BB49920F6FE6620D699A35C1BB8A9E7BB776B3710
7CD588225511FEBE1F1650DC3103670CE24780821FA1756569ECFB83ACDC2590
7DB411DB5B7BE48A9B9A437A12F4D60FD0B5888117010BF4D16EA4D637174260
A2DF58AF4C523FC0CE23DD0880FA60583509C50DE3D7C77FB860704EBE8C24D1
A37A58F1C9FFB37751AB5F9D5F7E685C44F5AFAC1CC00F6CBF65CB6DFAA856E6
4BDB00231392BE88421A29705AC4145D44BFB889F83B3CAD005996A6309A63BE
BA0FE32D773736BB32FCC219DFFAD9A7F7A6CC1703EE06340147CB1E0D1D8636
8BA2A93A52B79D8B1509D1802CBE8673267B176135495743403148569D974143
6D2B084C042C45D76FCA46C1C88BF1A9550F9DA16C9668315E9262C142FC5C11
E83F9D6F40978896B8F7A0B472D1F9FFC68F7B78F96C9D322010950F09F9A3F4
535F3093FBD68E47B7D5C7EA88F549F4FF7DCDA5DD6F5ABDAF12E0B10F8807E1
F3C4370E3FCE02D064A643D3F64AEE679B05EBAB7CADEB5334D964597367A2AD
10641BD2BE6FAA0021141C9CF6A708FA4B252278EF66FD1C374BC3CE94A6AC6C
9A2794E6BEDCFB274DF368878AFC67753AF2865FF57A96CD867E4210AD2F2650
5C4358678136F9138BF9CFBFFF98677E7B4FA073F8C2773883F753E375BAC4FF
99011AFD4EB78EEC61A78FC4A4BB250C32DF341069BE376E12E3A610444699A3
027C8F1D54FBEA8B0FFF206A39C863C12D3BF5E09DCA42065F40D2F0D0D986DD
39DAA0B29AE75B3C2CBF46DCA424152D86802A1F60009DD590E147474B65F378
1031103CE0C285B0BE95D3207AA2EE5CA1F3D3EE2B04DC4CBE12FC99DA94FB26
48B84254C26AB586FF1FD4C383E2785EAD36F41274FB0BFF99BB137C8DAEBC28
D7DE5CB57A30F23A2859902409CD482CB3C312189D77F70AF8035C331FF71F13
0C31ED8EE87F477AC06EBC444ECDA998E774FAAF6542A07BA30903CFAA88DD18
3A9BA8A1038D30AA55448002D45C2966E150390B7DD1A3E592F6277A502F55DB
2014F85B34A86831538951D195174F7F303C0847DDA07E7F790F33B1472B081F
3F6141244FF7D99E36ABD64BFBCCB6005B3C6058CA889E7EA5889A4CC9B0F228
4463FA8ED2967E007A024C32226D9EA08B48360A2E97A53C20BF4C061D7029C0
F8C58566D6FD1DED9D5E462B6BE1A8125BF2722D1D27172EE86F42DB020BC07F
E93887E37DFA97082369335AAA53A4D891DD3CA40653D79D3A45928169754EFD
6DAA3219E5AF8DFD8B263DB062F8E8817D05A4BD642DFAD8B91BF0B9EDAC6988
63266E24CB550F1E9C8349EAE8AD6E578A32F60AF460C54679C6FB2D34FA0F4C
9393FE8A21B7ACD4E74B101230BA9C6288A474C5A960434EF2824246CD354238
CCE05E6E201026C84C9D5F4921A745A22930063FAF04FEF05B573C213883D800
CE53362BD718CC60FA110CE0CBC5C9B48C66ABB379CC39EAE12AD364147E09F1
D792EB27FEF0C6D34A6B2CFC15AC03C6EA433DB58B34158313A522D5A3314916
81A9B6F539C319B57B5E601D38A24E65CA484FFEB39E22C7A214114E03231B4C
20F53559244315837D04886178EC3ED9784B07073F213C3C4DE2357BA0E52C2A
97EFB0D86DD9BF2F3AB34DE24D16AF015C34E3581EBA032C3EFB399326E705DC
06FF7AA54AD78BD771E01F15B23E59C215E93A3F5018417C37FFED36B45A45E0
0F29406853D8A5D64194339EB99785EEB018855ABD530F1F6510D8F19ACD02E0
4943BA7EC7F18E90B1F939238E660F51BE2D39031BCFA0FC44652F478296A32E
A8850FFB2E2C40027CE453FF25F616394E35FD56873EE1DA1BC8515504217D0A
2BB8C6FE4E8C153C3C33B9A02E6762E5B37F3AA9B2AAC52EE3D166AF861CA450
989206182A6184ABC5B38D3418B6046FDD4A75364C6A59E9D0EFF43B256F7DA3
4209919A6F2CD96A90F7EF3F6DDF867C5747396512501B1F6A6438E9C1CEF1DC
85136FB202B9A33D47ADCEDBCE265B6A223D0ED3DA70C143CA4F4B21EBDB9E1D
C685AC8E76FAF802C174E1A50B703B5A9586C03FC96B17EC772C1D183F91D837
DAC94609659451F83DAA63284282BC3CF3A9129FDD04F9A09482ABEE624C5401
43A6AE75EC6D1BEA06C3D620E42B1456D65942F8A06312DEE5BE664CE124E873
F86BB580C18F4362C2DC3F4B6CE97F86C9B88F2B571F00DA3F3614DE56FDEB2E
BB08E1DB0711F92D36CEDA5AE3479C9577FEC96345A2BA29F9E9001B6C5DAAD8
C4E041822031579A9C80D2A4FFB6DA671E9340F9B6DDE0B37E2B56AD421C6218
C453ABB7F16963F954230978BD23BDF857215D9B2DE05BA12A080F4AA55E527E
64B9FA87B6CBB9AD96CF0DEC60B30D9618F631B66355C40937313BBFDFAE2F25
0B43DEAE745D2750583EBAA36E82660BA7BE222FEC51C58D0E6FE841D4CDAF24
0C096EA124FDA5B87D97FEE3A170D269A864B249E97F6C22EC02CE64CE9F9DBE
52947CAF49A78FBD5BD44E2590664FBDDC6FE2646B6845D9D4835F7F320720AD
C336A4AFAC6A910A6B158DC42E97769D57AB2CD7C66645BE24D02AFF56B18D6E
2E1503E9DBC77A09C0BAE5046C5D4FEF3F5D38202A50A8BFC143D41CB5812430
4970551456DB7A2B0360FC4050EC4873D7CEDEB4DF62AEBB23C379F7BF6BB007
A80DB38459990D51873792BB3FBE3DD3B24A68BF22AF3E0C161FC5C9BF9CE3EB
285CEEE8DE1A4A14F7A31C414CD32BAC6AB82B78983A4B04CB32AC29F10F9DDF
62727B80673D6BA889F463B3721B91E3B18B10A96E8ABB5CFD28CA18CD9013B9
75112A47399274FBC801C11E798CEFCD58591F939ED132423567EF0BAAFA416C
0AD7D6AB86E6337264858167881C14F0F2278479E7168F2F4E058C0177456811
B2D1934D1B0371A976F0AF6125EF2A39AC82D44CEEAB043AC38D86521305C031
3797A2C620963D6704C342813C735A1B1675AD9477194EBAF6C8B76ABF790F2F
43535E5C4A7CCBA5014D0B5F8B328DCFBC8F89D6584BB752479FA40C7E15C855
45D86BCF6264762DD405C3042D8321B6F3435D63D9A96182E60BC6720B063FF1
F0435AEFDC023C0C14112AFA7AE0B52BF9055783FC2D668127F480DB722E014B
646C4EBC7B0BE5614A018F10B97F7BE3A270405594D3E06C17B47719E26788AA
322F7368911F6BABF3E4989AC38D1EA3503922CBD7B1B5C7D2152683D4FE7CC6
AC4B33741066D8931BA1BFF50B10519CDB5DF1C3843683898DE0071DEFE16785
43C6ED2505E3ED7565083022A07F2DABDD90859F3DE0E1A1CD2AF407F6AAD2DE
8B745EA3CF0414890044719DE77DDB9171BE3366206684D3DCBDCA5537ABC8C2
B536D34997B66CABD6F4E0797A9901190821CED580D11C982698DA51564577F1
C359F434C23E419845DD7659065F37C13BB30C35D7A9275A8EB9AA8C268F8C3A
6F8571015B9DC0B6E38EA6FAF47FF03DAA420B4698866F8864562F3497556260
B753AB46AD79C52B6DD075B71B397D729EAA00CE1A097E529511491BA13543F2
89B108A61F2B9B09CDFE5866948199CA27C1838AD39F67A5AC5B5FCF3A211021
A15A328C151D5598D5C19C3D235C7A9EE4B4D7B5CD62F6203C31D9CAB21566E8
B86A2C510331888F63D113F9572C0413F8C790BD5DE8AEDB9F8AFC0E3313DA73
75B4F00FB401D2AA2D4BB0E6A5EBEF6F7B0BB69266D0FDC747F0F89C2635D595
FD984BF646362B00E9728B7CF7F5E85673E4B8C4F424D594FD70091FD11121DF
7AE2EF505C0F62F05F7ADD40E35DC6B547B2454ACB0D6C1425ED88CB67D86683
D4002BDC1BC3A174551D21AB0C92A062C47655CB6CF1DCFBB1785F137B9F180B
318DDF2BA288287128A32087B29DBFEC3C5FAB7254C33E346DD0FFB7AE3E9853
993D1B34ACE0F25ECF30A3C903C30297ABAC30EE74060BE1BCD51B500B94E958
73D7C8C2C3C9DCFE5DB3743D73F39A7785A0B2F313EA4AC685E2DF864B987097
F447A890A1DCF9BB4FB519579E4D516DCA06AFE312988C0368F9F90D9C4536D7
1DE4847E1DF0047DE922C36FD17FBCBCC657ACF0C00272C7BE8C807407A78F07
A5578BA7BE6D9C5EA81A9FDC83AC5354B22B08A78C0157DB843CC75FCDAA40A5
C9A5623B07973D777D4B30B38F39870841FDD91E749CCFEDF6E48B9AB76F5296
D0BF5E6784149C85FDA1FC19AAA54C49F6F0B271BFD3FC68C8E444AD667F9BD7
57CC7D708592EDA8C2841FFAF569047B3FE1143CC1040F97CBD3AE8040DCDF61
FA212EDE3106862F54A3D148BD88425747EBD84BF1CE03DD3716B714C94D0F93
76E878ED733E90EF3EE62177C290E62B258E26E398918A03B37FA4B666C54EDC
A5ACB39E476E36E9127419F27469DD3BA6A1D826801559FF1AACD2E172719053
9E12540F013DFDA4272FCF1194987E76EF634FA96FB94E96DC2D0E437E119950
277E7BD9FA8F6F08F06BB44BD9534030A4D4593C5356214C5BB9FEB561998935
167338ABDBF7E8DDAFFFC3D0003ED03F908981092DBEC6563E7F0586F5E38926
18A1D6D531B746317DD1752DF6AF33E5A6F2CDE17D845A3706D05A72DD9988E8
9E0A16BF638A41A0157109DA020A5F14454F57098F96088C5C98E7AF24CFF8A8
308EA440CD6717CDCB03CC9D71DA601D5CC37B484DE55BC25BBBB53FF0F205AE
F06637586AF5185655D71592270DC46238DC0988ADAA1ED3F498EB33F599A9B3
77084AA5BBEC4DF7F09A62D7F3EEEB60A6554A2CEE9C22560739C926926B7466
4B52F65CD9EDBBF10DF518D2436969674D4C79B5F2724B5A09910970249C242B
5765DE750086910D16FD2BF022E4E636DDD749286B80A5C22474B49FC5C093A8
2642926A5C51ADB5595B333A06C8EC4A42C6CD98A11CF0FBACC252888EFE008B
E5C4F7292CAD13420A57E20E97FB03C991E1E74FE7D7C9328425F99572DDADF8
D7D530501D27E4DDB392685584B5BDC9308F35A246EFDDB2C8E731487FCB6196
341BF42F6AE155BAB4264C11021748F94EA7E04CA4256EAD3DCB103B9E31342B
7A47EE9CA23A3A6E739524DA99E494D9E1FE8EB703797B611CDDF7DF791BE32D
FF3E48051C4F3146917DF98C40DCB82C0393450C519E5C9C7439AECB922F531C
2ADF25F29002B26E9D29EB54490428B5A48080A0E95A00D0F166D1AA1FED70A0
3D20EE9159552685785AF28FF9035EA3B088A9A493153C95555805F13A46336C
D2171FFC355965BDD13772A36E6529B303BA1340739846C649BBE1B4C581A0A8
8010BE3AB1624D36C6C0F3EE53F3F6B2182D887C923BA32E6F6BEEE4ECC054F7
DAAA741D8ED7C089B43602D09F650AD3AD3FB83EEDA6DD6D62A8602A97930822
4438D78ABD60567F307D6EC471F99B03CC7B5E8140DC0012065AE75FD5A8955F
09EB5CFEAF9C0DB75F5239E010A274C8A03FE77410A768936DBB1162F16ABBA5
0F261F3B2B341622FF8A2E7844FB047452524DE681D9A7E3CADD03AD9BDD2B9A
CFC3FF359CC8667D7887C9BDB503D1ED617AA502EECECA267DD00B5CF3957699
F87206A02F34475D18938FA04BEC5E4D82B4F8ED76029498FA0DA08AE2034CF9
FE284E3FE099F6E26C81042F6633ED49F8E7FF131B91F0D100D51A1D4DC5F2FD
717350F364CAFA7C07CA79BB59F0996FE71CF6D1E942BD364946D6E615EAB58E
98ECDD495C31A9A03517B4161F2D412B300306CB5E11A1DF57C36C6E9EA13C05
60C3C8A14A2B367FF14E72129ACE0590E1B613AAB89F20B39EC22CBAC11C7FB8
10E57E992383B86188E2691DEBFDEB2BE96F65281C6D23D511F2C11DDF3FAA63
64C632C8D3232A12077C473AEFAB9D2A0AB18FCF5A40C9286D0699E439765A6E
35825C99CB7AFE5A873340B50AEE34371F675424D8C0FB19279F86AE6C8C6B3B
5D4AB4CFAC6401977B223A52A656B1A57D8BDB3D7B62537DA14915258F8CCAF5
E0141EC96BDBB7F712CE93ACE28EE2BFE7B059B36334D5DD6E0378A1F7D1A254
FAD9F125B2599B59AA5187128A0A15C6653CB85BF452ABBF5E8E9D8CCF2FEC3A
C097030D4647E13682290EFFF7F72EA59BAEC0A47269052BAF29D0DE3BB87997
0E71C52EB8BC75FDDD1945EC4AAE0031885DB8D0B72A02E7FD4C3EFF42D9E05C
4C0D044C2D37475078B1996A964DD7A632B0741C67B0A07436F0988FF39084FE
11179521E18BC7CF33EE9EB89C72E328E0B2301D85F0FC49AD0DA112E199447E
0C516E61FE29A0F681BB7C42AB16F3DC305839233A6D79FF182537855E3BC495
EBD55052F31B47841D36838D978E748E49718DC369D9C0F1A3DC5248567195DA
50C4BDB1AE450A5F9F79BC1AAD0208ACB0CE04316685304F5492599460E4A5D2
0F55666D0C1357B0953D8E9950803E1A5C81089B6CECE72D7992DC7BC4F5D001
F82EBFBE58CFDBC2B1FEC57D40E71090768F6529B0605F51D06628004DCF5DD6
84566DCF0B43A0B0F975DEAE2F7601EB63C399159A7FEB183A562D7A8C97E9EA
E1CF330E84EBFA8D5F529BC885B57E332C596821BA1085657B06BEA8DE8DD639
E973F6F1600D97DBB9C267800C9BEDC1D4BD7ED61B37C879CAA59A78A1B95EBD
BF17095BB094346C851EE67ED6726C12D454EA7881C3E568D0E8F5DD1D4B3029
596AC1DDC11E23572F8A2F5CAB5CA87E7A66931A860AA99576BCE99708E6AEA2
77BCB8C31065CC45368626798FE62CC19143732487FB28A99C314DD32EC80217
74EF463774DEDFC3928949F19EEE06C1A0E5BE179E3B93EE2EF67B28A1DD29D1
0C7BEEDAE714ACF1277D793879DCA249EDD7F3B676F5234572A171201028E059
DCBF9668F74A68D04C38C598D8626BFED7CB672F132E065FE9206B6174010EE3
696D11291F2E3F06359FB2DF0ADCD731ACB4B0345276798F1A8805EC0D382BAA
2D7CCCA48EAB1BAEB952053C409CFAD43A877A7C420006CE3E9853CBFFB6FAD3
E1E05C7DDA076F4DEB286987618DE9956F8591BDCF0E009CC38FCBE921D7D2D3
D877B0447943A24A7A7FAF6FD2A332787E2D4D03C34258DDC4D38016D9202FA9
EAC9D735A9EAD4C689D1C554BC73218607845C6D26134F0C58BC6A3690EB11E9
D916DA3E2FB8D776BE3F9223A872333FA09E9272AC6E10BD85898AE491E797A2
A346307E3BD497D7F1E2F51B557FEB6AA32E84F6970753435F46538BA5C30C18
5DDB06A284AA5034CA2C6BE02D9B04AB97510C130D8B0F9E0F9119FAC6A39571
0579BF1EDDF0880B1CD099FC69F102DA10621ED249A4D6F7FFF2647F18E3C361
5CA7AF845DEB226DF86483BB4495B71FF1281B0D67D4D3CD375C79603EFA6E08
301ED20E9B6E24A3E27A49CE8CE993FF1F3520F40D36C8A23980BAE1D9711F4E
4088D6466B65753C25713CF4D68CBCFDE9A58163F8D66A425E637DD4790CC8A4
85CD0B54E9CFAF101CDED67042D64FF3624B53DB291BB2F6754960D068DAFAE9
DD385505F1A589408EDE0C8AF384BB206CD7CCD831A22A1E9FAD62713767EED2
FB2E653B5F28EDE500EC515CCDAEDE21882E47E460D491A0CCA11C866CC356BF
B3F8338A8C6AD163C0DF5E0BBE039E05E2833378762504B26C46413E6D783882
51FFE0BF86DCB132C9BC7D2FF01704C9C4F5D509D9C3917237D7D9A9A9E39661
AC586B9C4D03526F4C9FB31628AE92D61AC83A80D1EE1AB160F537F1FD0AF513
405D71A1206B2E906EF1099DA1BF5D6537703968A74D112B40A94279AA581FC4
FDB124B11B6779CDF2BD8471A03D56FE7C722619CD8B47106750B3A07635CA9B
4F60CA8D75878FE4BC40C0ADCB09448C465F7D5694259ADF92A39FAA53198AFE
DB046404E51D612EE465B76AC51841B39F02662AF720242D74012508F2683393
C223B978D0D24A03FAF6FCEB9A99B7DF7107BE1383E3F153EEC4FDC93D0FEEC7
24C9AFC18168AE7D0CA39D19D033F435DF5E4E4259D1B6F2B5548B9E62CC5452
748B9AF3403565B4A26C6C28C08567BF5860D0930D7A6EB3C6F947205DE82F1F
269661A95AC6CA56E7E1B0F6791CC44793F22D21EA39CC104695A06D169F15B9
2FB0AD9497FE30F301D3BEEAB6F9716275EB86A05E8F774CBF29C2BA6B2E0C81
0759593AB1BDB8C2F50C4E8BD6037A8D4806BB3A779935CB46463F4570CC1FCD
2159FEFEEF43A10D379E53B1A29D111E262726B0303F33072ADD8628417D9962
ED08A7961E7583EFF349B5AA436EFD826568D7472DDFD8AB58FAA53C19513758
125599564D119528BE85A25FC2EF78FF074AEE2D574F2F1413B4C6B15E199839
75F3244DF4FF6E2C0D7CE9384AF4BA7A0E2D756C1B042321505CB0CEE9FB7E02
5E2D00DFBA1D8FDFC7CCB0D78AD8AACAB446B96DC3801FA8715FC91FFA1D6456
4498C221EFEAE6B514EF820ED6185E535DB5B40997EB4F7092710495D7A30239
E7E76EFA9CA18600157F7690A17CCED52E42690F9808BF40C0FF302E4E863FE0
022610CB3B9B3029C0186C862CE6D0ED3BE5D5861FFBF1FC70382359AA316232
0D340D735A86A08EADD2C913B669057830951C7BBC506AAAB6B13F7D2A91DF1E
4499CA1260A14440DB21AAA7719EDCFFA927B9976CC897404ABD3539E8B0B205
3E697EC96B4976567F1CD02EB3653A65A5097D8FF96CE8A5C8F9FCE901131D57
5196D492BF1648C8026F8DC0E546617BDA4097FCB8FCB635C4ED1EEA50355B7E
440AA3A095CB253AB784665F15469E994A218FF3D348B1ABE83933670E5F31F7
7CEDEA655260D3928911CE0018EFF1617CF8604D911FC16B928D9640F3F54F0E
2EBBEC84C9D839CF9231D4DE942B7951DF1AF728EAF6D102545F537C8C10AA1B
CDDC57296986480AF8E55FB00E1622E84621E7187CA47E7FE18D5C5D18497765
83CEEE28EA85B42F24249A929520F0BFC0D0DDE7560A293A0032D6CF19AD2181
1FD0A4E11C873E88DFFEB7E1EF1A77DFF0D1E5B9EF8C1406A58B14B398414921
E999EAC0EB2BC5CD3AB101473EC3D862D62A6472020DB602EA4C4B3A668FDF5A
B0BBB0D489F4EBED7726AEFA354DA8A74C8B1939A6DA38FCF89EA2BCFC54BB19
612C2521CB415246288A003AB850F59ED62CC812B1A69017430A12D26D2489C6
239BA362E5A3B9F67D361BF47CEC18CAA778C4875E249580B771CDADB22DBBC1
715016ABF527C1425C9328C360FD1FFE12027F79F212F19C2A521D3C2D8BD8AF
3E5EB9BC7BE18F5EB7A440C673D62513B18B4FB86B2C028864FE513626833012
07BC5711AF703A3ED46FB053EBB67B9D376E328F17C74F1DDA7C8FF27218C4E5
37FF9D6CEEE5278FF99CF84193B36278E44191FF2037152EB582AC94ED5B10EA
FC22C750752A6B8BF5F24D86071B06BF6FE1B4C2BDC611BA31140569566570B9
A5C97B6B8F4763D21E005D89FAEBBD7D8B06F3F18222A4865E3562D7A3B0B344
14144629AA8E5986E3389C9CA31ED82CC4A183ED86D278180D66D97CE9B52FEF
C3C960B459D25F8802020152E5FE51543C5E421C4497CB392D8FDD855B94E527
11EC27C88BAC6C68007CD2BEBFD553C8ED0FEF53FFB91E213252C58D39514E9B
F5435F3FFEF3E610CEE0821C68FB994E4EF6DCE7C566AF44127C92E71EAFD312
1D857793F033E18F604C6AE3B80F40D5B0066B051DD9E902E81F262602C9D879
38B75EF872D835E5084E8F8E2DAB2C25D461E2DBAFA96610EAE72BA08E4CF7C0
A37BDFF530845892F586A0FEFC3949D4F5E668EEA42B2CA87C45E2E79E902336
B019CFA1802EF7FA73AFB86595273E193C8CB5C9FA85D117825A1595466DD4A1
542B74D7A7D21A08C1D99B7719A3F0E4A1776137664AB17FD0BB8F00C319455E
D2C05DE5DBADDAE7385F40448804C7541E751789DA29A6A2A2574BF892347DEE
8E7A09633AF7B2E1BF7F476299BEDB3F7858FA73ABB05B2C0D67A5BA16DCDF04
D3134C21C5E2B4451A2B4A1D18473D9875FCC119196E6C192C61C6E96F276FC3
4D2809D0D8DF0356D99ED3D2F61EE74ACD7931668EE08BFA9F8F776D88FE9C5D
5EE77E5D4C4D5B05FC33F83790ECFD7641DF3FB94289E2AE608FB8AA268D00B3
5AC89644588FB8BCA8074A36098AC58361B710998E5EAE433D8A82CFB15547B3
39AF376E95CFA18ED7B135C3300D4E6C8B686A49D427CCD0DA440C87ECEF9D4D
51001EF6E00C9CBA158724AC4352EBB404D53BF595BFAA794784EFCE151A072B
9B711F0F159C8A0999E7CC878C86D863F261E8969E275792F7C38F68A5D5015C
E08F99D3CC6FC472E5FB314CFB957757B3AAB18D07C3D70161F0724055E78899
DDF3BCC34D14196124D6441C2957D3FFA255A16DCC32BB7BB54CE2DC59D9C386
17A3CECF4206E3629520D3AE254B77057D96CFB988BFBEF8EB957F817C5699C7
293E47DAA4EAD6D47F0AE936154AA4FE17289B0B15C33C2BC0412FB08CCB75C6
5F8097E08D902AEF183017A7CB74293E4AD26F24B204EC72E0D3B7B02416DF5D
ECABAD45B2A40449444EEE34A923562A80CEC3AAC0FBDCEC158492DEDE4D3B78
F8F31A5A92ADECF6E7F3706A4B080171BF62DEF89CE32FC2649522985C27941C
58E4F50B9C3FE76D28074A54E0785BD51DFFE90077736717DED0E57B70201E00
34DCFE58B45A71D4E9FDDFCB897B46D6CA3B180C7F0FF1BD5EC09D14D8B95EA5
0199D5D3A5AF2842F73603BEEAB3FE7CE7A9122E39AED7A194BE43CCC0852A88
50466A1FE663624FC26E88758AC01C1C98B564E8DE16E83C7C6381716EA9FDA8
379DAFA5415D1C283F1107A14F2ABACB90A87376E5CD9F595A712C05C5ADEDA2
CC9BA997ECFC11B62612EEEA9E08BB45A93A475EB42BD57FA9B2F62B5E5B84B1
6072EDAFDA40B773C76275695785B9AC04EDAE551CBE68E84519D138C233FED4
DA02F4CE357640B13B0C57532648A5E341E6E376A63E806CB4EF5E5E1F853052
970408E1B96714C7B1D4F806F384F144176BFD7625B80223C231FE14896CC19E
2DB36B05ED60FF37AC5021250FBD02B7D5DCA774B841330A2533E8C9B15F2304
5E29F807987F3637173FA779ECF22A5582B4EAE5B353BC6D9643E64B8A3796A3
043842D5E10EEDF483E279574CA2D0D685C7D7F56248A987EE709797715314CE
71EB6B2296682F1C9796565869F375D0999B64E7EAF4E6B898ED0013F4688202
28E5DB7AD2D64A4C9BF61922F5E5FCAEA07EA280270600E05248DE1C2A0494E6
A583E4ACED15502C9F238548A869DFE590A2273406E9821DAAFDDBC082E579A0
CEA35BB065A7171D07400B0CC22E2F8A222371E8B83F8053C9B5914FC368A801
A77A7A281D007F1F6EE3CB17E0FDB167D05506A96636E05DCA91CD03E726B1EA
1DA0D2D3A0C45ADBA0463E4E67547439FD6636485328F382567FBFB835B72F95
4639A1F7D96E1339E870A52661736E23FCEEB2667DCB4F9223D6088610650D18
0C99DAB65FFE5F8B3C783D0712BD7E809C75D22373802023DD465F60E5E5492F
17615236A9F47F997C4288AA1C8CDA5E3C6F89AD4B03098087BA5166A7210FFE
6617ED0227426D5B1352397BC54B1CDEDFC453FBCA9132C26716B73584C049A7
86679CFB55B7709E62F397DAEE458E60E6058ADDAA14EA5738881DF60608B810
7BD17C259B723F956B5B147E7C0D6AACE15D6B3EBB1C0E4AA0EA12349BEC2C02
17289E81B36EE6E3A25FFD6DED41E0AD41690F22866F0EE5D39073FCD89E2BED
5DE92278F31B2E573FD86696D98800443F32C5778D772567B5B1997AD2FE0801
171A58B943DF0EA5A61185ABAB0AC230DCB02818AF9A164918DEA34758E04978
F084A117617CEF422F7E209C19161FFCFAD9CBA9FF7EC02B4973BAB1985E2650
F843FEB3FD3E1D20E7358F41CA96422B2E61CCC0992B66DA0134AABBAC1D52CE
0A152AC688F4EEA5FF81D57143DC7B82CFC5D59A963032AB8F3FA38A7FE2C0A4
73C2EBE3E92978F1B5342389168082911F331A87935C5B066B5FBCF534A7CA8B
247C8C222ACDAE23B09086B283EAB47F864A103E9BA90A6860DC939EED5F506B
848C9E5CDAD5C75E65AF2ACEE79613DD66EA3EBB0C8DE4F716EB9C9E61F3CEAD
C5B3B5D0561EEF396F36AF152DA579DBCEF69D0667D7B42D037A7ED650649A40
D11682BD8E89A906205DD3B2197CAAC740FD0C1660A5FAFEAF6CB2E1A293EDE7
4DC8AA133925455CA3356BDEF9FEA5C5F23C5684B84A6F0891066BE41352945D
0CE5A8357E026EBE90463F3EE3EB2E2C047969678D363270D7D254671EFFBCF1
263A973A694289E9A585296F85483FE343D5F808F8F5A15F066FA89D3250D674
FA29A4EDAA8D6DE00251DAB3528F5343027BEDD938CA49163CED5EDFF811C840
903A577AF91902271898F712CCEA3DFEBF7674F359EC637A4AC80A663CE21627
68B220E00C5C4A096D6CB31A1933166DAC9D028C1D90565B66249041EF50ADEE
049FC7886F221B19731DFB4F87A561D50E9DBDD63471EBF573968915D9E59A30
6FC26BF21B4724F36810B208EA468E9E8D742049016DBF2EBE1EEA0AA155948E
A91FE36A1385EC95EFDB36C1B9348BBBC8AD59B3F6634AB392641832663F9B41
1A125CAEFA01A8445157919AAC44DD0BA706DF296981AC945C682C618368A040
1C5456071B3E5E09BBEB1222C44ED0610A00861817A42450A2B9275BE973BB06
E726DBE5D24F7CBF38F0D85B662F492C3D20A1B5D727A676BC0100DA8EB506DB
C39E3A5922FFA2456A87125569567BFFACA6E305F985C65F420F61E3624031B7
DD990EFA1F91B74E1014F6F7B0126F2E1EA64E16A7D4F422FCD08DCA1D9905C0
604FAF1997B13E61E1E47F743D5B5238F109F829BB17610EE6B18E72E1F17FA0
6F01D3F5B99D2C1F58068A2DEE209BB24891ACF9AE694D26D9FC54E67F8A9A63
D556B256C48E8A76AC6C4A8FFECC1EC18B1D25F37D6478CEBBDD1810026ED762
4D7EC364DBDC86814DE0ACCF98639A6A7554A6F2C99881B09E0304048E384BA9
1BE0F152A67932897477BA5BFECD0844D119E8459FAE96C091543F35DA66FAE4
12C6715FFE5A1D13BA6F13181529878991B312B3768B6463517666F4AFD4F828
FED165487DA90892775A445645D17550DAD8A763F1BF01A333C6B98217612EC4
A240B79D76796FADE95368B7A6B2C596AB16CFFA3F66FAFB4CD28F88FB2FEC21
862E9C30B3CF51F58242FD9F87C4723EC983DAD4B37AA85B5D306B11311AD86C
01CF09B2BB5C8E3249106019D81985C81273A614410325E3A6C30828E5895478
7A0E825F1E663E996DE92A0DEAC38D47CBF9C6D0EE921695905863C640AA0B14
DE6F140B5950D2B961DC9E13AC9B0704C8EF9F5630D094ED29E3950DE45DEC94
6E9D310C8749E3E74C6C39C27805FF4688112D972D4DC060A464F28496418A86
F9E219FB67BD3AAC52ABD2E05900A14F94C646D2048C8F00324EC61296EEF4B0
4FE9C564F7F032FFEE10D3E43540BB9669C3B9E1CBC07019475E77ED41E8E1BF
7E9CB02F2ED322DD2E49E4C89E290E60CC81E812D4160541741166E3E0B25192
723BDA37C2D720E853171B0D16121A45FB2583D29C29754199BCD6ADDAB31015
8C62D9996D05E53E3E044503712A5DA5599851647CFF7C73335BDB3EA8D947E6
D2A9A08057D2CD3CBED9740103DCE7C96C19565195CC7AC77BE5BF70077A2A50
E3CA4362180DC31319D07D25E664720380D806
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols8-Regular
%!PS-AdobeFont-1.0: LMMathSymbols8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathSymbols8-Regular known{/LMMathSymbols8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols8-Regular)readonly def
/FamilyName(LMMathSymbols8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathSymbols8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-30 -955 1185 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F035757560E05960E2C327020FEAE317
24C484AC0CD3C1AB9CF35516622A022D6CB83DEB8126DF04762C901617B35492
98158049D5C65DE86143B7F36D36233A115C36DF60D3C55816B2B0B341102AF0
90D7D4E00A7611262CCD366F870F0EE8175688261513076B608C7E160A9A79BD
2B66E2E2A89CBF6D1703854915ABEAFA09718FE338924B5AF1FBF1209786AEB0
0026C38A2C7E208E6C306BAAF037DFB0F3297EE1ABBA65247CF72D0F78A9BC24
038966CE124B94487282B69D6BC0B5E17441DA55415B5369E451E2B0D705FCAF
3AAC6DBEBB8AB0313C4C201F851DB96CA9EB49357C3C1AB73F0CA2110C994680
5AC8F0D760C03F71C92CEC2E1A3AB84813D389BEFE7E0C28FC76FCA70704BC4D
159EE8B490B95CB09DD01A4122A686AFB8B9C69381C8C303F9A3B695238C3BB4
CB44B3BBE50E2BAE63796BB51D945469BB75C69F7A758180B77CAAD2CFD5951A
23580A3D45083C8368543DD37AB49705B939804C12D4BDFA730845F7E42A6C9A
B3F0A376F44DC297393B85E8A18C45C99260BD499DE599CC0D76EBE4AA7D70AB
348FA87CA9A1000814C4FA99B4EBC35A0298AA29563B030707F3EAD9FFF7BFB8
3B347C4A00BFB392E79B79F413E67A73FBB006EBA896A65CB21BE940A0940640
34E08FF806A114ADD3FD42BB394F76CC77DD869C46DEEE20839C9A2FF73B840B
0ACF238D333719F5947DD4C39B8E3F070EEDDA1A39D526319828FA9F47F03D8A
245D8E215B37959566D26DD98185223E4FEF01676650EB4E26C0A425E6C23C50
4BA94BC88E08614769C017F6D4F14C52D7189D4AF8CDA367D8B04CA8D3F2307C
0A7A179419A80695912F456637F539123745CA8E696E250E0BA6B7C6277394E5
98A8799C29B6272613C152B0CAB05F3C7795791EC9AF2BDD416861A3D13FA858
BCB6ACF5BDE40E5DFBC1A171A7280E8FF4AC0D4C8A2199E9E2BAB5CB9131A76D
EAC166A7C449A549EA5111F1750CA2C6E1EC6F00CB6C62BA52D17FC66E06ACC9
1E6B858F9393AF9AA5E69F799E01D301B647DA57225C2920E3BCEE9D09CA5C60
F22B07F24A26DD8F4D6F9C78BFAA8D12A21531E713B80CD03A5FF4F3BBA2AD82
3BEF7DA8C97C30F1452006AA3B1A168483F6EDC4089ED02E567923AE6DBBCCA4
8C246A080448200C2A29C34AE6255BC79B73AE14B980A7C357681BB0962894CB
DA32FF2B70B21AF4D158E0F74652684A7150D0967F83E13EBBAB33588541AEEC
0DE8C53851845A44FFB46A93CEE3E8A0263882542F7F103D13C367EA8E1ABFAF
6486A9DBF6668550BE7858F5790BC87C66492C0FD34DB08EDF842E1AF58A09B0
85A9B7FA402029FE2439769D67DEBDC8AD8C861E90E5322951A2904FD702766B
36916DBA8F9C96141BBF4788FA435556B2B4E1B37DE4506ACC4224CFC00A8F83
33941A050B51B9508758F4EB2DC074D799F5116296B8822ADD743A043F9A6426
88D10767A9F99A072BD4C88CB579B34687BA4953B96DBA29F33211B12A0215F7
5F2F873E5074A7D593DAD0EDD97270FB9A87BE870321A49958B10E32850F0148
68E0A1D795937E61D4556BCDFB7F4DA63A884F9B4B07801D30B1357C3432D6D4
7B72B7D6040410C194EE5124ADFD7A40914BF569EA1F9CA8C8897E839D262395
5EDB3E97C591A3A5927DAC229EEE864B8C0F79ADBF88C0E6C41CC70D9010F07C
1CF9C05960E34FABB6C5DA4D789E39F35FE01F0B22BD9C63B3098457716D6B22
5EFCD0A960F3A2319252C7A0F73A4770E056209C14D721A714D713D5F2BFAB32
EBF815DDDE792B2556A87C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFB8DD9B92CCD508A09171BC12C8ACA32FECEB20
7CAA1C2C81ED075E3EA7E712D95FC612CF97F3402658E90924C75CA278243C52
D4E02E8224F197E555143D563819EB1ADD2248C18E02E18FE3DCF624E37ED993
3C7DAB05959E694040B7EF5F92D80AEAC2CF58EC01BD61D7CB962C4EA678C5C0
62593DE423E11AF90918CFC6E1E8F9DA428296FF0C92CA794AFBE2067C46264E
EEB0AB0FBF2EDA1A8420EF654A1D4E0A295D1DFECBE39D9FF712C85C748311C9
CB8695716F72FD4F80E77DFD7E01E9FB8CB1F2B5971940EE4E7B14727B086F27
E43E6E3EA6EF0DE68E17C9C0F050085274ADB56BAAF193211E48D1B82FE44A59
2A9F5FB13EACEB54AA027C1B87380F9EEF9D500DC327702B132335FF288ADF62
578F30CDCCCF826E4C4CB57B5D5B537BD2FF89086BD0C4CAE557ED66306DF3F5
BA9D1007C869E8594D4138161162682A719FFCB1A982A5CE8765E2681E64B8D8
4A7CD7504E58CB81D0EF03A3EEA97D43741F54987AD65FA54A1BD682F7EFED16
D35D034F1AA5CD4EB628353F1FFEBD0CEB905F10C183245F1B733C17D3B854D5
3BA686CF4088BC6C0FADF9A6C05BE3499567E930F710682B8954108AB7B126D8
255F1A0F1BD08158F94077D191F62DD73838E0CDBC99204AA6AD1309BC5668A2
A524C6D1C68B4E416B248A6FE29A67DCF4E1CBFCE603260A277AEB7F75627333
3E84F341637A1BDB292EADD055C97A12CF0B915E39263AA9F03B21C1F45C87C2
CCB12B59066B6DA2CA24E020A0FDDCC0498D74594AE3ACB0EB4CE7727EA32222
07E864C7F39773638E3BD2FDDA11C79177AD0A23CFB7F631E00CC979AD410F81
3119C0543E091E4820C12FE47E3154789E02FE363C319139350F014FE8A785A3
F66FFAB8D8C9E7E26E49BE5FE558491D1A57B150A5B386F7ECCC0EE8E31695A3
36BCC7BB9F7FB26DA3444238CC33E2791CABC1DCD0BFC3372E1DE72D93AFD1C8
E2635A5E428AB33E24E81346D13A9377EBEFC6206D372675CF43235722B50C78
8C4A02867C68BD8E5FE9A45653BBAF2A5DCA560DB5BEE7054FB8B0A13AB598BB
C481A3240450D1453A1CC1054A06B962B7E28A73BE0B2713DFD32DEABA293EEE
AAA8C0409564BB1ECD1249588C18D01D8AD4E0F0032FD811ADF35B869BB210E4
4A57178893AF229268DC5375F01AB676E600823FEC28C30D2208A868EC0D01B1
4845736F9DEE02D06634547729442ECDC50C90989CC881C3D8E85B76FBB10040
F0DADEE5ACBDBB43307A30FDEEE5F77E621B130E4B824CE23100BC08DC65BDA3
46307E3BD497D7F1E2F51B557FEB6AA32E84F5E55E5C12A81B73F370431F3842
A1B0CAFD4ECE7F0DC8E2A6D644CA8735A4E96445BA9CEBB627718F858DC051E4
3963ACD7E7868CAA4488EE815D40E28CA54C83221810546F0009F98531353C9A
8EBFE7DB9C9A120C2A4E2FED0E63F90B8DF65026707BD39B489E54425A5ED877
73C6B3A8ABC8ABB13ECC3B249F1878A8F76D59596C63BCB936321589906AB242
14F3C046A1F210FE287A8192CBA7D2A89BBE7A7B2DB6B1E19224F04262D6403E
3B41787E1449587E28093E66A9837BB94195E3A4A5C17DE6823755F59BB9E3A0
52F69C7808FB657D9270933D8B167D2575CF146336BB1C76735BE5CAAAEDBE98
C69F89E7E71474CFC7515F73F86727442EC24D46F92C99498946CAB6DED8F5DF
0540063DEC2EF3F83AAAA3F4F68A8E892C3D0529A466C6A310A6101223949B01
79CF7DE6B550657C91BF3116EE7F85B0178B3227810D99B48361133B54A6DFDC
872745DD45766283944D7293D6FB1B42BCDDF2F241AB267897BFABA39D0F2725
E0DBA7C8CE305DE7C1B59DC2184872FB99578B809358856E4E99B28E138E2DB5
85CDCCFBF2B46F01012CC94E2FB30C1E4411918E892630F2AD07EFF1919E9BA9
0194E24A69649F0DFD0046D2EED7AF90313E70594EB5C354023BFA07912408F1
72E39AFA29111A71BCFDDA20BCD6006B0309EF09261B7AE1C67BDE0D385104C7
C0730BEF94DF3D9BB2161C7346FAB11805152716480C0984BA13A8433ADBD629
229C446AF84A690F56A09A84EBB1CED5515C36F2798A89689BED966ADC9AC306
D01B6E24DBB2CFFBEF205FC921305B45B1B8FFDE2A09CF6301F485C8B7DC2E56
82DCE3042DC9767C407C0DB4D0FD1A4881A34FA0EEE7810D69F2428045CD609E
23CE37791362950FB435D1899A47E6E69EDB17BC08CA1B092D4F20BE1AA6BC4A
9DEAAB1B74EEB7B908245CDDB7A093C1AA307DECFFE53A1FE54984DB1360E320
862F2CA6E0258507C6D3DC1DB94102FB88F631211557D3A4F79A8E5FDE69B1F8
4E9FB2EDBFB4B8853524F58D4E1EB98EEBEF1B6C2D330B1CFC47ADE896255DE1
FFA8CC1A09D26342E89B9A39149E124C564C5251F613393060892D5A51B78BEB
3E44B78C50316C61B6FE484CE582EB7FBDC53D9427FE267051934E366F7C7B2C
ABD2C65921B5520C6F70C1B6E7AF8E11BA4798C1DD2EB7D4F962028061B71099
8E5EAE433D8A82CFB15547B339AF376E9341FEB9433AF21E8D84C50F75043419
1ECF16684180B65D9CD4C8CDC57A0BBC0598B3AB03652A6AA459894E119B5356
CED765F73F6935478D5133B9E761430A39CAB0DC109B02A80626A9ACD7856ECE
4D6569F5D1D918A30005C31F177816336B74AF8B9931BEC0CAC75380C714BFB1
BC100B05D19D7BCFB18CDAFB0310935E6C7EAC6B9A8134C4E8F4969C9268F7A2
C306146CEC5039310EF1F4ACEA1A40014BA27BD58490D24B7885E4084932266C
621A42B8A3139CE953DFA9687BC439A31644BF123DA78DD615C4287ED7DD43B6
79CAF0EB2F9F428C431683A41C2C61A429E3DC0D87D76AB6294CF8CC9918A6A4
6873A1769ACCF25B59CB4365AC451FE1D956E1254970C706438805E25284C7CA
AE679F2B7C58BE9909CBFCD273EF5617183CFA64757627D2D567877FDDED97FD
7C9E73DE4D6D4ED370EFAAB4E52F30E55B902ACC35DE87E70DE8EDFE7D803CB9
B4F8D58998C2ED6B93CF62F8E991B754899CE46B900DC93C5A58EADB30BCFFA3
A71EF23D13FDAFE72642854A3340E64896CC6DEA0F7E3AF4C39EE4E68AA31889
A372F02266FE65ABCDAA308258FCDDD13DCBB18E462B56F956B94CE97E870122
A0A46CCFD6B4158BE06C768C73F0377CE3F21E030748189C553B9F62C83765B0
149330C96EC3496F9F2F9B289307D7E0C33BCB7023200FC3221F12B5FDE01011
87BBF9960E56CAA899438C90156BBF2B14596F131B71830D84172E7CD7C05B25
85A53C7CB0DA5729FD6CA218A1CB03FCB945FC24376A45F2DE0C21378769921A
72E46589CC08EA87EECFDF36B819B07306C448777163A723A9E71F504DA5D447
AFE8CFDBD88089FA4802F449B477BE528C3667F06EC5479B0824B87C47EEAF1A
0A23941B8257A2A5EC3F63FD62DD09890F4DF33AA1E70376A9CE8E4B6C4211CB
FCF9709AA29144F3A40001AB98BE816619AC543753969AC5B540ED39E51F5869
98342686761A7C070EA75140331D7A0DD5731F0E395A6CB0412028C2FABE2E9D
C3B57F412A5CC05FA7599948E6B8B50BCF16EF9825F6B20090E4D6280C528375
4EBCB42B38B7ED6634AFE0B2C249699E212509817638845B5604BB526053ACC5
C0FF6206B2953C9350E57657B374600DA75B6B271326A2E7B313EB4598DD7FEA
4A5D95437CBA46D85A5EAD76FEA956126B3EEC337FF78D906699CB9CD7B4012C
474EB33D12DFABB3BF569214525DB9B2D4B34136FDF936F96FFC813FE16DA5F7
9B0F2B3110B1F8C90170E014FE8F31A5FD35CB74EF0FA13C6DA74D7264618562
DABD7DB8E7F480D0521581902848649AD3EBE39E618667C59EA499B7081A0844
B6DC10555D27819E6CAA1CE453A7A68EF1A3EB2178BBF9B9BEA9DEC679DC10D9
E3553DE260FFD590BEDC71CA9AD4AC12B09E86D933AF49B4CB901556E63BD639
1B3C3C3C80C46745E1CA7983B9E80168018E04A84AB47C854C73FC58A393974C
1AFF488EBB29B293905951355C4D4A4F65BF1A72956515750DED0B87A8D3282C
72C634347874775B6F29EB873134F6BCC2EBBD3703E9619F762D64128A18C957
22E6C0DA907A17868AACF3229C176FC26BFBE255AD62737D234986AFF04FF03C
1DB4D1F2D9F60CF2E4DC5DAF88EF3517A2D91CCCBBB8753F92B3E0CDA5D26523
B84CEE3A0429655F8F25C89E65074A52CC6047885F4105DD62F1FB8CC7A4CFE3
22EBEEE15E3395B062B933EB55FA589373CE26568F78981B480F688646A5C8C5
63B8FAAF19A1F6166685C3FDC27532C931AC8B86E81FB0223686074ED596FA6A
922B662575F23B53B7C6B245AFE90258E743F284E22E30D2B418CAE285AA38F9
FB436D39371781DF4FAAD1CFF3BFEAA81F5D11DD76BADDD8122A4AA44B9F863A
DF8127F1FC35DB9CD34EBC684818AB259FFC3C7CE34C9DAEE69D70D010C70540
3B359BDAA5B9ADD10F6F7F2C19136157C6D83B33313266F1BA8B9E065A0C831A
47D767D4558876E85ABB0B8396FEE0C3327CFFEE23D0D7C24466E5410DD289DF
78C335D2BE90B5C581D536596D97F1F463EDD0A9C0118790E5780C0AC27A05B6
4DB13A023A3E5225E0377ED38749AE1F7714AE5E1D649A3AFCBBF060F416C0B7
47EC5BA54AA743154084CCBBC2A47037DDA09D9601412F731039746C1224A29D
191D9E221C06A7EF3CAD09AD5ADE65A51B6A915CA708D66C3EA93A0BE63CDF0C
D9A4546C9325291D11D02F4C2284918795A5B6E6CAA4CDA0371D452F65EC9097
657F51E83FCC22A30D649B80CEFD9F6FDD51AD33D3DB732FF26650A90912822F
9E77D8AC13393AA1B04DEDDF6C37B2D1DE50258300B9BB455AA872810C7948B1
EC866883E78F23DC9DFF60701F4F7C66B61198F8066DD493031D1A5EF91231B4
470B5A034CBA00791EE592FB4DAB538C280A8047F6290E265C8A88331305E67B
EEEA9A03950593605886E125446E5CCB325BF943C3D7F32D49651F5744A27DCE
6004208003A95DA1371E2EE456CC692DF7B71EAEFA2ED09E82012484AF7649C3
FA87A3AE44D93FB7A0D1A7A08A419AFFF7DF7065992B084D567645EE4D2FC29A
888E5E51A42920248E4BF77A7876799B1FD856AAB0EA73DCCBF7FB5979EF5F01
2CAF413DABCB3290E29A0CEE18F02BF93ACF5E651F75F1C47F2699BD0DA86F7C
5E18E1895ACE4B125EF346F608ECCD4DCDCD47DD7717EBC78AE3DDEAB5333174
18A8E967F635ADA03D2EFF80D463A521EB069C2B6271FD736442AF38A52EB58A
59D7A62D97171B45D2A6AFFB7E617C9265B466295CF70CB228FB295850D653FC
3FA379FB4FA0AD9F83269A99D550366B880AF05F913C074EEAEBE390144ECA2E
ABD1ED2BB6C54FAA70C9BA6C6794E3AC06D503EE876C915252EA75E6FA113380
E4E2A0CEA310D96BDFD883642BDB55525358ADA70C5ED0923B060EA6EEA5B735
D0D62E41842C07B79C0E8DC56C55084EE590D2BD58FD9784BCDCC3D498B69CD1
D7C24466E5410DD289DF78C335D2BE90B5C581D53AAA27CB98A914D22E25B41F
E35179D5E020790534D6BA1670B6783FA8DBA0D35DABEB8E162D2EA2ABCB6CC8
DF8E44430383881E5ED0F7F184DBAA9A394D0E08138E5B80D224D4E8FD6F8BD3
255103D823B86B712CD58FC2FF2C9B963C235A59BC191B84B9B6A2D87B85F21F
39F33AD118513BBA722CA46E21F697AFBFEE1989A09F9F9F7F29C1E0C0F28E3C
C64BB4933D3AECC99FEC69C3B047482C0D6F22E851DFDF1315C0679C0906D77A
B2144E810FFE3A942963C9B2584CE14922AAA9E3456AD60EAA44317BAA8D81C7
33BA78C0DEB8D1A2C9BF7CFAF3F6C87EFC09B43D790D3E80AE0EA0AEE1984C59
0DB7EE142C2444A3F4DFAB0C651407A58102F825D9534F2C1768DE55DD354014
B4AD13F8F95AB9B462F7A5950046C9C4A8CFF3CC3738D894770AD27F2BAA1A8A
C49D55D311D7B27E77C664BA4DA424125D1735CDCF888572C3D4E2F0230BB1FD
DAD562E249FC2F1392F7F378BB1754A2E80DE0D9FB55FAFEE3CCC1C812E9FAC3
31FD70975E3A0C72D37207D8A6034994F5A338B85C4ADD0A28C7A8FB765C4A04
DDCD6E0E7854CB47132679FBABF1DF31D16F8FA295CB56D75A836ED366963BD5
7A5FDDECE89ACF7D2EAABC3C655C247E6AA58C7B3A65D90C4598DE6DF2AA81DF
1E7AD672C058BC13013E94942CDCF8E20DEC5CD4696759CC337B6514AEED350F
45EB766C4ADF2EBF18F155CF537A97C212FB23022E75D57D24147D284196D0A5
17320294E3C7A3A1A1BE80ED8FF0A9C509420006D2229CC525B2E21332AF97ED
907BC5FAFBAAE31FCE73C77BFD275F6CD038A6DB9EC1FB4AA5AF31A16FC07D58
F6AD35B345BFA1CF7B0E9545795A6E62188B643BE9FFFFF69BF0E7C694E07807
E04F51013AA2E2215C03ADCA175FED41854EBA64EA1BFCA7B9ADFF7F4ACC6DBE
671126FE078F52AB62DB59A9B9AD1018F245F33A42CF224F327CCEB361EF2E2B
DD7DB751EC8C146E17EAAFC942F80C2313118CD80744B1160919C81067D75442
072E34982759C289C8F929334930B4AAC76A132C32DCBECD227134E7F747AEFB
6809685156270A536E5DC0236DA24612993121152E7E72353B4E4A19BC80F638
158DDC1B6DDD5CFAA56386D2232E51B3AA708541C4671738A1E0CC16CC401640
5B0F10C340F24A30B1C3E6AD87C7D4424486F4D2504B044E802A8B30DF26FC38
1D8D871D0D96566F0E4910D17124056A1F0AD7E9C1807ADA0EE65BF63372B918
2E8CE99142953DBEE0C0104B1292A1F83517BC28709D3864CA389D6CD1041740
7AC6A0DDA1E77D37AC83F0991A4EB1258E47A4E04D0DC15BA4F0C1D12F27F5DE
5E37A07F94A89276B909954466C7032C6FD3DE6ADE20EBA3FA90A309230B93A5
B74FF64283F15EAA51DF4C74CBB662283EA2C98CCAA3F64D2E64AB21C48203C6
08CCC92CFF820CBFE005BB5D4B098F3CC567E9DA9952F5F95048B505DD5C1BAD
049517C3A95D471EAE9D83E664D7CEF78D51D427D2A9126B689964B87ECC23E8
3F19351612FB0B1E70D91934375C410CFB8AC6C99D8665CD7E1CF880F99229AF
C16232CEBA6D7B35526797A8C94EA0723B3062409182103B078B6D4120137695
A8BE5DEC8383E556D1067F2D10E43F158978ABC35805453F84CC5EEC991A5CDC
8C33DBF86934B5368C099B59A7114410C608C749D1B7D493E67EBD9DF99EED9A
ABA70EBC005B7E807A854FD70F27639BAF68211DD20AF3D34A3498F21B00999A
CC476DBE2C5E7F404E59340CA51DBFEADFF2D6856FA15A36EEA17FDFF093D02F
B419CDEAA8924DD923B74F252664C67CEF45743658D8D43AF001ACCC0284EE83
D6B900DDC00EEB5E881FFE9B414C45B06FBC491330279C671334298D0621D516
6AC107F3AA081661CB91E004CEE7220A24C71BBAC196A23123BB399318B4D2A8
36F88D24D6FE3898D6D1C76D8F8E2C75D7460CE135C4E1D0349033D576ACDFF8
68AD600D610E32BDC63998EFFBD8BB34D2423CC6282C145F3F0029A07BA8C929
7BF8B0B016EDCAF80B9043EB61A3BA3E78F64ECDDADF68975D97F94EA8A698A5
CA287EBBD5193878AF0D3EE755BD5958FD3632E670306CAC950F8A1F66D4720D
DBEDC0E0857B057D019BB4C3C1C751481ED7C692CF08BD1EA6C5B30BE280953F
B8FFF50082E28A8D951207D7C494A7B2784E050A11FE8B1CC619F387E700EED9
D0956AE651C28A61DEDA9859E01101F5604685676CFFF64C9F2630CABF2F83D1
37D226BD5EF6EE8EE1EDC4194F1012D8BB958B6940681AEA50C7C8964FB0F377
23C0C4BFA4DFE3FD4AE99F5A8595EA873728E2C8B6D05AA6861E3ABED84D6761
ACEDE777F2D3BBF85031E42B976BF76149CEE298FA46B57981087E31FA46D2C1
91A16ED86E07D8E45FB322FD0B3D25692D2A0E7C4DB93BAC55016AE065951347
39401B0D8ACDA770B340277CE3950462318057F893A50B1BE89222348D7F09A7
FB9144E9162A946DFAAD95EE0B346EBBB899F1F37A0F89D4DAC9B7B0F3348A1A
FAAE48BE88E0E16B8E376035D6D75C10FB83D7B0EB9DCE189314BFC6A128924F
34C083E289918FCC37040DD4771C1218921FD978D54413617494E68E34391E25
42903355658BD278E67696161CDE14626D101B4E117C63F2E7A60627DC40CB9A
B1634701AD9AEAF5D11607A783874D716DC73DB1CBA45D33E0076E992C7DACD8
026D7F4C5AC1E5D796C0E5A79C61B5BF586A0FFF6BD2983A840B68D656FC1584
2D694DFBC7D7800CBAA90F3BF0022E66A54BE1059BD5D224B674AB4D2AD930F7
F724A305C4DB7BBE9E3E9D166FE9AF6147A8BC97C6834B365C39F4F5C39DC16D
F38ED4E2751BA59C0E9D7A0546E34F8BF633F656FE32F1FF453232617FCB7419
0A46165FBE654065FEA56AD83B17114EC5A7245AE7DDE6217581860729E94F76
212E186FBB34B7174AC5294A0D142C13027301D54E815921B749E8FEE0AD1803
E4DCADDBA121E96EC75C62DFE3F9C3A21CE1DE2CADAEE76E1540527E73B23D9C
B14BB0D947E557FBBA38173BFD22C8F111F56D53ADC64547BDBAAA2E3F29539F
B7F8E16596FFD4151B332C718B173639302937C26AC08DA98886993EEC7A8FFE
EC357A8C415C57CD2B4FE22AE09DF3F3600FE89631FCCFA1C86D5643C24BD5E0
5B7DA8C435A28EF529B15DCFE08B3574C57A259F5454A017C6ABC65E4BC733F0
35FDA08CC184B5BC0E46E0963399EB3291F47FA0A05D57215EF9299481BF0E90
0A54D9B875E95CA8166B84CCDE9FB92FEF1C849740C8C0F00248BE459F80EF06
7A8069A068E7AF13A23EA57E8FC91229AF428F3F75B7DB930EFC2B1B3E835432
FF900607AB5292ACE3AA3E3C9EF2EBDC85F22E08AA5E8F73A090F636BA77FF93
6714A4619D7398892A2560403D15CE94158D9E0A16224C80EE6C9152843B5D9A
3073EFB7C783F938B9138E8C63731B795DF38545036C32DF179C9C72477DC4AB
924F985E05B278C46FD719E9EF7AAA945647A6E362F71DEB775597402FE0EBFC
FA9D92F96615A5922333D102DDB3F48F2ABD31B3BD790070B2C4CFBE1A6DB647
2883C06E249B776587432F5AFD700D89FDFED2693BF145E4A55AD2EAD722B6A9
406A69EC3497D2D84B19F68EBF7125FB02920466AD921DE262F020AC43AC01DB
8BD67102E1322FD08D6A1FD6BA7B596708B8642BB1BBDC37026546E6537F776B
C7AE9B8A49116A09BB7F320F0CCD98F2F7DF378E1BABB747FF18681ED0ED8129
43063FF6F488822C5F8D2F556F685C99D13E33BFB7FC73679A38ABB22E10CD76
A882556090D3FAE75852C3BC7CBDBB5EF23FC98FFDBECC7BFED3DDAF5E31C8A5
4A7A1AC26C140B3B0753E044C784060F6366DC230AD073B3113F6A4435539795
135E468F1B89A230D7F1405B0467027EC1E27BBEC48D51C674C819F2BCB72A57
757B2CBFC6F5D915C260859C43D16849F29E44779264257FFA0AFA05C2842C53
4A411593D10A71D2EDFC48E0BA8707B4D7F7F5C3509C0908A0D0063175D39132
F4F4AEEF704A5E8F6E9AD1631F9E304203D296F4D82EE4D976BA9A90F152D68E
756C29A24A789A87ABF7065175CA4F3CDD7CB1D87A11B6393F8133A84721D9F9
171D61D7971649DC9608442D234E87B1C39D7B72329654850C6ACF3DD244C32A
9E4618FF40C490B27180A05AB7903FB71AB68FAD4E316BD62804CA36D4619D88
81BE42A1034C34F4D728E9E820131692793929CC3D4196A186094A7C7E0DD5F2
3035C5460DD417E0B3ABB83B8833A2AF90EC2DC348618B108941053DFA51F0A4
95337AE048E770072ED026236425D096E84DD009F55A48C44EA029E5A810D6F9
F78F44E6284817A248BC4766A7C2E504537523358DE4A06B547EB33806C4F943
CC8F1342F845C151B62E028C3D50BE01FC9CD5D5F36E28DADB469334B60C5894
5E6ADB0C8D23AFA307C8FE29500285533AB7CDB0D34232E15124C570F82A81A2
DF13EDEEB691FD48E705F80B009ACE8C8887E7F78087F4E387C70D49A0503DC5
2AB23298064AE0D1352C83032739BDEE2639DF94198133C3903A22F039CACA20
1AB53CD6DFD8A090716EC6C0DE45078DCDD901074A7DB0041A57771D1E94A269
173938DC242F0812442BE56459CF58BB905440E0ADF465AA599C0B0869BBBBD1
4E58B7FC0DA6E544394563D24D8C87FE0F2722FBAC78768C49DAB17BB6C4BE1C
39B7DAE297CD9ED4A59FE7A1E816B6722C6BC2F91D9E724CBBD53982E2FE82CF
72A27FA101C2A6070046E22E14FF27872C329C64DA64F101A4EBB3E12D9E7B76
642DD67B231032EE27DBE7A958CDB98642880850AD921A5A247FA60A89A2EF6A
B95CAE1FB11B327396D5F83D54A389FC2172DA93C47D22E22208EDB45534F09E
CB07AFDE14287A32E1F9046A37CDCD838852B2A039F1DFE9775FBAA1495A5727
19400771332BF0117106F088F10DE2078E17FA0A86A5017656773E7A78C61557
B9C11C290EF9B8E5AEA2B840DFB40191270EE3BB9F959D9B7C6C2CE48910D180
41571B8D78EC12E8AA4F627DB2E861B6A448F6772028DB8B2E7A2F78DE222F68
73C2C3C3F9B01526D9D71A74984522CAFBAF6CD275B742D67E1AFAEF79266015
8797BACFBD7CD6FBB41FF7BAB0790F7159438C42FB1CFFCB08B0AA19301D76B7
450D4FDD42654223C32BBDFDDBA1C764174646AD7CF22491D5FC5031E42B976B
F76149CEE298FA46B57981087E3035CEADC5693A284FD65AE53BC897EC7BA644
6656F2AB1DAA4C0CF952EA0D9C4176D5ACFBC48D8A48074357B3298C26AF2C70
DDAF438047D9DA1E8AF5F4C16E56A03037B51E02A128DCC9D51903ED585E1581
310C8DB07D32301CC74156D1C73DC64C377C8A4BF7E0E3A0E93D890DD0106D04
7C31F0AF1C2FD75C48023CC0FB7B49A95CD0CED5367C4DDF482B946E7D76B706
43D0BA5E14732681350D9C4D63AE6E85DDBE826FD8145968FC237F12812D7492
4BFED808777D2040627AFC82897B554DE510D2AA6B29A1F6AA8CBB9B5DC32EDA
308F149704EB45943BF2D0CFCFE2E0FBE21F14EE8754D0547D6A39C314F2E83C
3166AEFB08395942723FB853550238DCB92FBB00A1B5B7AE47574A11C430C62A
DD6CC6FB7D092E77F9848F8F133DFA6D2412BFB5783DB3C0F6D60E34BE594B65
D76B155E7E6C88D2697B5AD4FF8BD03161544EBBBF2A1D8549EB766B8E2272B3
FEECC7E148D5FDA02F3A6FFD57952C6B74669C7D9712D975674948A0C76CEBDC
6D0CEE92612EAF4EC556835774B08B04CBF20D471B7C228958EE6827692FB97A
0DD77737F84F944EE4F182641F051987B470A9A853C1E216348AB87B18A4184C
84556C0476BE50CB2C73697EB452E0EAC3A4727E4071C660682B4DD491C419BE
E7F28684F2C4E0FC0D4D59A75FE8DFEEC839FB3116A3CFEB9E338EF0D7B0FA72
1D7D11990750232B6BC61B2733F80AA1938F0353103DB83CCF9143F3A1A25FC1
32BD31F29F0681E5783F91AF0CC0EA7062B322BAD3C04DF2E82AF19552D766E6
52B80E10105FEC8DBF267BEBD2219D8FA49A6B1525AD2D1F56968D9CFA81E057
F008E10F28A51822A85F52582848C4324241222673064F3BCCA1BE7B257D8041
C6E9DEBE123998F9048769253FFE799456B6E5B9BF421E82415746B363938E88
CA30E4D567B68BD03129DFE6B47267A2FA06A0A045D56CDC2C66B754E3D03ABC
8B3DA3F4F6C2DB54682F72DFB7E729238308C0EC5F43DC92B39BC4B2CEB9827F
51E088BEE84F0EAC9889FBF269C4301C5AD39C601FB86D4090A78FDC3A61B057
2821BBE055765DAB0DAC8449427E9AE83CEC2CBB0F5EE165832AB3CCBB2ED933
04D80108A5DCEDBF829531FB2A32A4C0367F3CDAADB9A370228BDD707A5CBF06
87ADF56193C9D6D357122AAA06C55A90405CAFC5E4287325A010FC44DCCA752F
57806D70EABB20332BEC817D05A4BD642DFAD8B91BF0B9EDAC69886326687EC3
FFEC3019C77E70F4D2F5C6D7F44664C00B6ED73698D805B6D7853518F8522B9D
5C229C89D59664FF216C6A67F8D9DF3E4AFB32361ACAB13BACD3E465D094B649
061B789C1C478C407682B48DBE953B8C0761D113BDCE3E6BB97034876F7C7632
A189CF44A025208FBB70137573E138F16D931E1077F87886858AF74DC1D5C7DD
BBA2481A3333A9B31EC7C2C99EDC7BBDFA0CE085C7CFD4C0AC1285F8E759760B
CF5D5152D45E91FAD6A3E7B3FE99CB3C5E1C317DD3AF44E46800FED97CA40252
808F6AEC70839BB14C7D4FD2C4E6057BE5F5C51A24200272625653B01C85412B
F6F5AC854ED369FBB53441591ADB8D2D994711BF6D56A1F0B72D203A7C5FF301
7508DF9821E7D7AE14BA3238EE22916DFC64E9156B8CF2C80FA0840E8FB914D0
E86241AB753C32214F6A8B3B924B6F0B44384C63CD23D70AAD5777DD46AC20C0
D02790EE255ADD6567F59AF6B696839CE77606FCEA4474578526F290F5E3E84F
BD3CA5719BB456D1AB80B6C80C550CDEC09BDF5E10308ADAD0C42A26913DBA29
4CD25E3BBB2FA53D9825348E24246EA73EF03626CC1C0ADEB130863434670C74
8271EF35BF4133E260320CB39E191970C0F0E81DBEF15F134F9B660EFF434CCD
DC96CC25E9F54CDC9E19D9603BB6A93D8EFEA9A41172D1D82E14B0037ADC38D7
A95B1CA9F0B89AE754BF7F8203F0C857CFAE8A868BC658462797316F6A01DA72
24B06AAD1687DBC419EFE2BDAA099773FC7EC5A09403556AEB400D68B231A3EA
D2EF737B1971921741A4F2D840D0F744A1470A7A67AA5644EAFFD983C9197C34
1105B044E7AA81165FA1B97A103553E5AACF0062627895DEECB32E5BAD12A1D1
1EE312E98681F4D4C76D424DABA50B232A8254B034F051838810E004BAD11C17
C7949D74660C459ECD143ECFCCFD9F43D0872B4E25F7C3B591FB74909EE16F53
AB0F444AEC233ED5C726E2A993E726DD72DF4CA18857A3BD1BD163518B55DBBD
DB77866DAEAA53D1D80ACE9C3B873F2050025DD47A9CB1D0192C7D2330D65F12
8C47B2481B73BD918ABF2397E6E9F1316BFAADBA9135D64A7DDEC789195D7563
E0EFF2B4D90FFB8BE2F427D339D1EEBAAD58B0946C6926F13DC4B76DCA2AE368
6F7DFA49F81BA6B221FAB4FA67D091A04004D2AB894E7DCC7BD80F2E8E13073B
30FC32B57DC325BEDF738EB6D550863099C9AE6A1D3DBB5BB7F4F240C9426E90
F57925E6B90462A69B5B7B8D3A9A81B9C92F57789B62A14E6495133A1B3B110F
97D9D17DB56D7B6EC1C3314567C88BE2A4333B1E9964BDA8C46E287B98F739D5
5E1AB926E5F1230538D96AB2484EA11C47338B6E89C99A848AAAF1BD143560B5
59176CAF28B78D9C7A3C481BB8C9F53B99E7228ED76DAF61F3D5E2E4A17D90AE
341ECD71D05287741F6A99089C9BA6489E983B2A4E0340610A27244970757F3C
25CFC3E853E2FEAD8C72144FD3EE6ECB3F8B59115379A09AEAB66EF716591CE3
5A9A501F5CD99DE77FB500ED2E8F5FE7FE5D7AD580FDFE62A9FA3A22300877CE
F345E6A7DF0D81E0B7E4012410C843955AD0B93F9203462F95B302B8CFF733E3
70D464D63141B1EDA0E6FFD1D82CE4D084352E97F0930DD27EB45DDACBAC1620
BCE641230920C23A8013455F4E2CD0CC8D66FEC329D81A7584A5D001C2C3E423
50EE4F2F7C6F4150C4774423E8C99C28166E5FC3BCE52C110091E2FA2302597B
FF0F12D7DF5CE219716715073172190C701B91AD54984598F2AD46FEE3D68A0D
0886AB8829B53BCB319FC0FE2D9A8CF214DC85B763C354E8017B2D6FE644D630
3E71757A8D901A868000B4A48732764932E6242CE5BE6A645C2653FE55D062B7
86BC3C6651B31122ECA9329513ECA625CC1C5FC3AFB291A6B75A593E3D12A2BE
C0D54AB4B6D20E345CE6C281F4630A7BA2B58607A2D369E9DD9EDE9AC14E4FD0
9695BBDBD7994FDB35C5E458C370725C45D5CAA5AD4EEC414B8DD564DD7F5D08
4F814B77D3B6731568486D5A0CD6BB356544510BE20BE1AD4B3E9909F220E99C
367B96C474DF3C2D253F9DCB7A4589A0257051C54716D2440C2CF4262663EA21
6D29A0CFBADF5B6E4123196031705C8B89F0F7E115CAC9E4A605BC8062E675FF
B48A0D1AB9DDFE6A5A10F02B31813B86412505B6FCA5AB5BC8937AD9FF4898D9
706F64004DE7F40568FC538A0EA2E76E1F62790DA67887A9CCDBF093D02FB419
CDEAA8924DD923B74F252664C67A0A944FBDA4B3EF695BC512E973F4736851AE
BB3A3A4CD3DFB898D079614C1B7F05AC96A5BADCD03553A596557D8F00A9F854
2C98DB691FB17E10342EFFE68AB510018ED7043C7A287733031776912B98D449
008C02ADD520AA45C62BE1B20F349525DC3AE759E21AEED1C09E800EB1AD0DB0
4821702D0F93FBF513D7B85603C8A0F37E548174985162D53910DE1DA60560F8
4973A847723B6150CC469E52D42C8B3806FA06180F1EFF5CEA5ACE58B4544EAD
9C73A170572C5DFCC89C2AC26815E0BCCFFA46DF3A00BE32F96FEAC9DE382AEA
0E3AFC6B2254ABFB157B47010714F6F7B0126F2E1EA686D7693BB1BDB187E148
5AF91C22AC891A13A81C3D479855407B719AC4CFD53BA029891E8AF681EEAAB7
2E5F3A5976316C481FA61C4295051CDC8414D5EC6418DB8179EFF78049A3C48F
0C0374C00CBCC50DBBB4EC8284631410D4156C420D073AEDAAB2CDE3633FD159
C855C4CC46FA71B56A2DA46A21D05CDBEFBD8609CCB13F0003D6E058DD67BCBE
96D74CD7A6F592C81BEDEFC264408C6DB1AA29867BCF8BD9D7BD9309E6880407
EE8ADBC6FBEBB247D772B3A60FAB4F71B7A09444BC6C666BED4DDD31720C2077
25C84E675EBC26F583F329C433B95DC6920785A326592D07637DC90B7906C027
72E22C605E9F3240A1971AB1F757694CB3A8E5A15E9A006F8EDBEB4D0BAF4730
0B80C3F944CF3C1D8956310EBC62B5AAE1C61E6A8BB6B315DE7285F1C1C23AE7
A5F5A4BF996E234AF26AAEAE82AC6B0A5F7A74B32846561B4413C38DA7401609
733F47D9990B238122A95523160A6ACBF9C2DE66992CF4DAB3368A64C98FAB5D
93DF8A00379FC4B64991B4D1FE7795ADD2B571F1196A1FEC67E397298427A0A7
A59C4ACD748A13881C130EBB0AD8864E1C505E451409F058BBFC0301087271EE
7DCA9646056D3EC28D85BB53EE04612C6A0D8E6BB90C96ABE2D5ACF89FABF737
E42204D7CA411E72AA4240AC015884EB30C9C000F6505A7C5AE95D9E3450E72C
99406ECD9808EA1CFB78F69F2F4C1262A94F8E3D2ACB0A383AF28C354BD22B82
E32D8BBF1504F8232EF00DD2F3FF5C4868EDFA7D105F375EEB7585683D08F1DC
C78BD17C2338A6A609FDA9208916C644A7C8263F802B6D2B8A73C45BA68699C9
4A7162FA00F6E05E273B5DB89549315DD15AD9CA3BF8D4CFF06C5B946E21D0F5
A799CD011CFFE4C95A60612755143BDCEFDF9812CB59F95F25C76E0550BBA4DC
59ABF1FAA17C5B39F4A20A3DEC19163D7C748C43B33C0CA22F253FE4E3D1E56E
432F655A8C234A3016668E20EC7F2BA3E5D66350AC0FBDF769E54B11A5DFF777
068CCF595927081BC5306B48BC1B97A9612FC1D0DEDF05CDE50C20D2B4169ACB
7B7FC90ECE99FD80496C27174AE0C3C52DE79214EEEDB424D767D0C64F1EBEC9
9C7B9C47E4C03D01CF167B0D7BBBC53023A12C5B3581D8F53166583741122907
F0A3DC00C10F078073E90FBC9686BEEA7F75AF8CEAE50D32464FA36AEE0F3896
A254B125351B5DF203CAB41F0E6C48E1704F311F51451DD607AB3AB682C58106
F3A667930EA8EB9092F0767F0D690399C766B673EFFDF8F0815D7853C6F61278
341A10182862DCA51D411A82FEE238CB19DC5407033A584AE22BB73A9341D38B
1EF6BC34AE92E91E3DBF196F7BACD52EC4D75F1F18FA11E2F7907B9626CA1660
9BFEE67DB56CFE2AEF6BDBB7350D5408C621CDED6AC22293A666201A11EBE968
6B895C8F3034F885A299EAF758FAE0CE78634283778E9C7F438CDF8944DD5A06
583A75079194054F8C01A6C78EAA7D1909D5833FAB8D6671564F796B070A2B36
6EDE5723EBB35773DB0933927DC21081E67E5DCF4E45334DD99AB786A3D5D0C5
AC216EA68F8F7D3A5BD929EB453790B464964479A2AA279225ECC22FBD3944D1
6276BC46A74DA16147589A2D3DADDE9BB1A63A4047EA20DA56089E9DAEC1E964
3545D179D97E7159C9710FD0AEAD6D23C03CD003680E92F0D10F566B7D87C01E
D5E6E499B7B83B95A95C52C13894C9156315E5AFF47E4041A45E57AC8C93AA8B
50BBA0F69C64A315706D38591372BADBFBFB4330B8E71F816068081D325833AE
DA96C0DA8C36DC87966846D8C0539B41792ED8CF731016C85A4E041B6337B64B
7D1A70D83A06C101AB379CB47D6A72839E770A0ADCA647E66B811F82F08DFAE1
979E9ADB992C57D613A88327C3AE4393C1F3EEE76365A67C3B6481CF7F0D9D46
1C91A7D5DD8F584627AC4E6D2B4CE0108583463D74500BD933A54CB39EEB6372
778ECF5B6C0C2F014F43B38058440D82194CDB01A2CFC41133C69AD75946DBFC
C748AFDAC96839397CAA9C23D0F483D155FB93C2941214C2D4362865D0BDD0BA
6044D3F5A6FD23AC4CE9B33B14DB382839AE8C789A6339F7D36DAFE163824896
DC28210A0D274A7CB5AC380B1B2006B28BD56725C2874401030A5F9309712901
FD044F3AAB455EB7D85772D6243D160A8397B5A160648F764407E576569F1014
CFCA5DCFD92F563A806FB4EC884B26DCAA25E29F413C3847ED2E0F52C74A835C
5A785E9623F0D483091D6F95BE42F08A3B28787BAB2D5F893EE00D41CB48E35C
E9C08D0BDC344C70D5D669EF4E794EF6D6320109A4205CFD1917BB1CFA80C0AF
8782C30F4FBCD5010D94DDA30568C75286BC3BF85A310306982406539FD83FC1
2EBA31479C7175C0AA1AE5CC6C35511ABC869432C6AE3809D7AA9B4D6F47B6F2
481AA6A33920FAD9A7F7A6CC1703EE06340147CB1CAF89339AB2D94C2709E08C
BAD9A1926DD364A1D0A4E68D75EEE2C3353D6C8B4E84FCB8FA302C68CE685294
FFE12975EC0DB26EFDA3A69D86214A71153FF97E5F7175E0BD4C2ABA9816226E
B744128F41014C24426A003ED5DD6C3E637CC8580098961CD6EFEBC99973D557
51D40F332A29D194C16B0DDD9A95990FB45E3B2D0748BC071FC691AA2F776075
4D8ECEA334EE267256720D6CE4B73D307627ED3AD4456E3A67BF5BB49920F6FE
6620D699A35821CFE17E2DA671A7FA88213B596074FE4D777E02B1A7D10B424A
89E22465768238A66AD71FFBF5C9832C603CF5D7E61A400BDCD15EADBEDE3875
523CDFFF0F39B7441FC2EC1724DBCF6E42D06B418F7CC6D43D433449346D9761
01B7018BD702271DEE3CA37C242494FFCF3F645DA7FC59B541513CD6FD08039C
F40A1F5B90A8BD1ECADCA2FE214955FAA891C7AEC18EF33485035BD4C47EA645
1BD30E3554F65A2BDBE89B6F6BB32B219D9AD46321E7C671EA573815316CCEC3
91022209479592F06BA64BE08D6598398CE326C2456D1E107DE6170983DCD307
8016D4DFD4FF3B18C26A2199E10877DD58E13BAE54045B86D2F5370A465FB06C
300DF81A50AEED70BA5C0FA9698333D899B7176022C6C28FF0534F323D017CA8
EF1D24E6F8DC956BC118567857EABBE95512C8A4B70B02E0337C16ACAA3EA98A
B2C46A9B2A4C8EA940877B0DDA9140C4E646BE61289705369D116B52AA526F6A
1C00FB05A67CB36935DFC63BBCC0E1BC5DE74900614160090EF1DC1CB0740B3F
A1B24F6630F31E90651D2B891B54B03BFBB05D94BC32BBD9B63477E629422A5F
487C494894F6BFED08A0AAA58FC2983315F8958915067FE7062BBA9FAE457A25
E67407D800B810916A7AE03DCEBF228D6B9AA2302F0E88AD035258FE8F780FE2
592ED35A82AB818EFA495DD7323A51ED863301D74D8DF7CD81DE57903CC06647
2B224E826AE08871FB0C6781B3FE6701C98DA905D4C3F936AB8217A6702C16E3
ADEE0CE8AC41C5DC52AB6337FB9DC5D77D26D75AD448B254C7F8A38BB0204ECC
15FC1B770CFA27C37105B70EB45F47522BD93ADD46CDD0C1DF4B83A1EB775861
645239EC6EC6B59F4713A7C980D725B3C0CA9868A1B4B066C40F22F2334343E0
8EB001C1E350E571D93F96910C91BDEE18E063B395DE65253D305D4132793CDF
8DB01750F4DFB79975EAD0E79B4F1BD1D7AB84C2DDCF5DA974B2068488AE47A9
F07F8CAA187FFA24144AF9A62F7A0EB816225009664E3D8F6FD9F90240610A27
244970757F3C25CFC3E853E2FEACD8CBB223F173BD86C842D1C9ED10B006C949
8D723A68B1D60FE747739A0C92EF6EC74EBA6CB20D0AC3FCCDE0BC8E84D3DE06
6D920D3EDA7BFBCCA8E99A035B26D05D07B44B24951AAE3FE9FFAC261F75FFB1
4D1B7AF74C5AEC94F4598A2881D05D396BC22D59563F1CF0E9D525899FB3F030
DF6A706763DFE99BDB8D71628D73E5D98F9100EABF64F01F8DCF96B73280CA32
2D9738A734B3708EDEDEFE0778AF6945BC3183868305BB1A2C53CBB430D352F8
914EB0BBE3CEABE8F64213766C0DC8C0B02AC199788159BAEC05660870FD275D
9BC41D39D10CC2D94F6F01AAE2BADB3C2BF8BBF9F07E996E67B1730C0D64D471
BDD24DCEA030AB369295D6FC8E3FC4F897456B01E45552BEAAFE36D398530A04
FA0598477BF73995AA4C37BD8D5AC97935DE4D96DBCDCC8FEA15D0A83A2201FE
D8592B8B420B33630F15B50318C6045977231D86C8BEB851B96CD7BF88F9A17D
A1E607ADAFE8D8460FC48FB39C8126488FA258BA955BCEDB3E0DAD7D09451AD9
CCED0E89320F996E99C8169897C479F86CD53E8CC9DE6B2DDB148E81B1F6B9E2
B122EE72DA5BD1C45D2C5729767507D93B8C0D596E109FA863D411B0A68EC14D
BD5769EE77792DB6ECF45EE986A2FC4D86071B06BF6FE1B4C2BDC611BA311405
69566893A950A0D4C3C5629CE9608BB7E77F5201C8A046181EE7B3F9F2B5F42E
39023760290E41AF5A67734E96DE61B0AC3221535F9925211A055311717C3A40
790CE64063DA94EB567660970F66F2061328F85AFC287E9C2421C5FDA41F9C13
9DC715445893B54729A788C762262751C6AA721387CB512AA64E156D060119C5
3CFC33D924B390F0E57D3B39BF4BEFFF935B48590EB00726C0670E760F002E2B
A7B2A56B2C172B4E14AD845BE9A914353F9B569757A5AD8F1B52BE124FAFF443
C0A979D48F768640F3A7999BB3D1C77BF9ECE6A91142D95593EF9FD51E984FF3
10C1B72D6702AE620AF391022A8ECABC9E50D69CC1C819A3C091A04B5E38B507
09CA21A207D8D6093365445B9145ECC6C24DFDBA3074D24F31FDF9A7724A5FE7
1BEEA255531838D8291F5649AA863B0932F0902D5C9924BA1C9CB55E78F4C53E
F59F31F46F00263AC6D30F976B87018F2F76A016A74C68DE88BAD308F543D5D1
FA6081F767F58B57A49E76733940A014513E18403A76A8AA87FB1096E2CC9240
E9C69240725E11E51DA4BCA6304A8C64D2771F67CA490B4C76C3A8C971004000
DE38DA7BD7171FDE19B2407F893D523EB78490504B686DA3FBFC65D4012B3FEA
B06663D976949A4F1EB43F699756F1197D8B120E48C983DB51F4FC23E3107BA2
B08ABBB932D5E6A03F957B7C64E89BB59C4ADF037704B5418FC765D3EA63E5EE
B2380E4AB9E6E655AFE1FF2E3E4751A88881FD5D5E7CBA740B6A4A544179C5B0
D8D193F9850E9A175C83CF70BD90D19FE47DCB4E86744797709CAE17E12419D4
535D0FEE85D7AA225FD64BFE21E949617809FB8B2F24322AB310F16A60F884A5
889F5E7FEEBB536527D13E789C4D1AEB51A8612828DED34BB38089252E8625B8
3749A64A7FFCF96007AFA65AF4FB75A53942A9F9A0D2322C8B3CBFDFDDEFB738
6767ED53B5D7DFF58FFF4C5A60CCF5DD51CC3DCE518DD210DB1AB515DE25F2DC
4906B1A90BE3AADD483D833E4AE962A37D7EE988906AB267581833A721D10998
9FBFB6129F8A7620C66EF4C4334F3A36B38D3BEB8C026EBB7426ADD749433094
0544C98629759FC84B3963CD70AE9F83EF36E3EA220160E8C12C651C3A03D4B0
676B557DBC7D3F343AB0752C9F48CEFE2CE45347A828CD50AA3E44C750024C6A
ADFF9259B88E604D4E3018E13D7E08A231AE5E966D8E84C6EBDB5B2C97057E98
5110E3B9476F2EF2991878E11F38FF36D1F1D67E0A154F2F800F5C80B4635620
0BACD8C9385A18202E78D9E7ABAE4BBD920BD5657F0064D24DDE0E0560100742
C0C991B59E10E040B0E9F0247510E377C6F0276C212CDDC0543E43D2705D73C2
CD9A14C5396873DCE47441B413975C09D7FFD1CB8EAD24B2F8DE2F54038936FB
2D9659D413E4CBEFF07C2329CFC7F3BE8C6BE8424A13F4E0C9A5C6D68A9AD70F
36330A4787B95D7A39E3BD486EAC834805AD4651E0EAF9DE3500921A7818FB31
8487A712CCC0EE9954D09F3564BE4C153AC91451F122BDD5C724CB802330F160
EDE41F4BC6C5A22531D514910BFC8A7F035020F221F2A58F097CC13CA9BC695F
782ADBE50737CE43B15D717F9B56DB8E3B0C01C6D753284B657F3686E07C885F
330357B4A63862D65AF4E8D4946157B02EFE0D82006C0953A2702BA7542C4077
1F1475B919C0E0944D0E294A42743B0136E0B3C29DBE7626520C3D5B005A6B6F
CFBAF3D61AA9FF33CA9F9C8E6FF154326F7C3655261C4AD986D12979ACCE3F57
8A0B968130EAB268E561EACD360E57082DFEA68295A90FEA34059F842002D97A
1D8537560AA8F8924A0DCC610F842E4E30C1104F859AC97006C0EAF36B0FAE95
3B015680FADAFADAD02FCE8211CA27825D3E0F01017DB6D4137018EEF6C9BF62
5A1596A7A3B8C4F6F852DB888567C1C1717D06FAE23DC20555C129BA4F31F5B1
53D9B8820A39858CC4CD4324737ED9957FDDF5C21ACD68ABC3B289208E41AEB7
1171EAF17A4FA9A9E8AB1F3C41698192EDAEA808C1FCEEB0A101C52F7A08208C
D31C1E93F5F396F67B8ACF439CABFEEACA48453F0538BAAD27AD91C44C28F1D5
79989D8C3B5D6AD116426EAB123F4FF7600EC58DC7AC4AB2E3EC2E57BB179CB1
94B11400BDCF7A4BBAAC2CD397686834A6BAB96EE0F340CBDF2EDF2C3F52D349
47E0964D0E8E89F6043C0D2BE9A5E9E4AEA452AAB51A81874FA8B3B9BA33E5B0
AD054A393500C656827B3B49A5F4F7357F9C88B45034BDCF6675BB8A67802696
8855B88283552DD3CD9831BE0D747E36462098578BCD5050EB47A9F4313EDADA
4845CD69EE5AF7BFF995DC20E067EE6B3F7DFE0ABCEA24D63DBCE317E7E4B07C
12A28AE03BE53CEF9894EEBBD3459DA51E9693873150FC6E903E8E0A2D4CB9CD
1CEE0FBECE6A41C70B473C32A5DAF8C0F963BCA758B2A02CF70A46A67A2E656B
80578308ADA3B73C7D92DFFA19F1A79AC9BDD7C37C63DC0AF98514E4E9108C72
F149FB68D5412210AFAF615D46739F6703EF4361A76E29179861ED74F927ECAC
A9DE2920DA192AE301B081C6063682C616442D3E70C81CF264F9F7439027A711
E3278F08FDD23BF1D5F06884F07033488B1949EE5029CE15CDE30FA4BFECD72F
4A5EC0212C697D91FA63D6E5955CAA4FFE0F06DD5B3B1527B753DEDB0BBB7D3F
03768BAF8691733BF4866B408F4806BB3A779935CB46463F4570CC1FCD2159FE
FF9E8F0B501E62C497A8C5C173714D063F26C9D3A7343E794166D9ECB58F8095
D33B8396AE9B26342CC1D2A2875056225C2920E3BCEE9D09CA5C60F22B07F24A
26DD8115F65F182B68A1B09693ABF521BEDA2EF6922A1E6C069B061D853369B8
ADE0B18E8DFDE785893B5EFD6019A2014F4F469709A6476CBF11C97862C34607
A7DC2871860D2183BAB18CEA58D596BDED31A69CE0AE0177D2B9980AEAED9DCA
69DC5C39CA964621F6C5ACFFCD25915FD537A6DF9E2735C05DEBCF002CAED492
199BA948790DFCED8F009240062B2ACF099A261036CA2B9A1027B92D4E666C8D
E787D6307DAAF074C46A04CDC40A94BA8A94B61B377DBF7662293E382AD209FB
49092F3E1234B3D8EF2B5D1846F239D6F7BC4BDEAB3579B57030F0E4B1F2BB06
42CD25DFBDD6CE0B44841C58E8E054B9BC7419E45EC84EFFF6D42D0B1804227B
1F17190B56EBD27CEDBAC9BE4B50BFD0B62B8429F77FB1EA332C7A1CA8B004C7
3184FC41779D50CD9F54798AC016FEBAA4BD6A933BBEACF75D804FEBB379F0A2
1B75F34987BA586C6FF368ABDC475881CD029984DEC1EE34F30E77F7C3174AEA
A273A079D5BD5B57E3D3D80C06EFA0CB7B6606ED644BCDB9A47BA7E15397A39E
769DF23C1D07FB9A61DDB92EC67EC42C6480896B537462AB0B27E20C9D3CF8D2
7B81A55DE3F63601F11D2A73FC722BD5C566036CFAC5397F2A5132DCB64601A8
76A328D58784A92C4BCD75A6E7F80E84757D7A127C82353C2086E551C702935B
B5111089F167B793DDF6E3C7FB4EF007EBB868DA7F878BDF6355C623059718DA
A3D0AF39AA1445BCB4FC25289CD86001319CBEA90CF37A8AAECFD1F72BFF12AB
00F60F9980CB3BC380FCF7C0DDA7C7C36002FF4DBE9029A1E79BD5F165EDCCF1
EA7E4DBF2975364992B3996EA3B4F30C40106141EEBEFB7156F487D03CEF1C43
12CF8BF51ECD810D5C249C182D15958A21EC955C2532B1A884523A0634F67D86
30321B52D8BE2DC7029117D29FF0A396A4A4AB4BB2CEC3DFA392412F82723A5B
16FAEA0A235897E57D9FA6F817BEAA47CC87EF9BED29CEAD50C3030B6E9C2D91
2D0075422833AA7F73D90272AF096968AB75F3F1EBB30B5DDD654F4233FEA246
83F2370B1ABFB841B44E5800A7AAE8E4E57B5647C78995157B0DA66D1A34FAD9
C47BA0C27A8171E9045467FC5DA356DFF298F0E2BF9E46CBE6493F758D66E0B1
3BCC0C763CDD3627A3737DD41477A8BCF7CC0FD3895A34B9E6434393BA92AEEF
4724C34EBD9DFDC64956FD2B3476FC2357E9D9D6F967C5983037BB6E9EC571E6
078529DE942340A40AB1CBBCCDACF0046027231237834C0BF9AF326F201D889F
40D7AB654F3C24E9BC96FB786FF82303C2CC1B26C78B74DA6A52A4DE356AEE06
2F9B11CE71D9034EE8704CED9534746FB31E330BE539AA86CDBD8B600FFBCFA5
C1900BDB11125CE2C263BE3344A162A0C11DA4175B9F63832FEDB75A7C3C1703
746057E78C27637894C238949AA8D43875080E51A9730FBF859D92C164DFEC11
5BCDA359B58305C56E941651E322F60FA679945BCA6A71E4329DB73E7F290987
87D96D8C7D9D5B51F33D505FE3ED168109F1F39AC5C3357E48CE468C116038BE
B06DC30ED8E89BBDFE4480A36CD4F92B4DDCE447DDEFB6092A54D213F2519554
C19369F0F95FF2A352495290E6DF4302AD80B6BB6EC73304F7A0711FFFA64CEF
6CAC90369FF71A3EB16EFAC41D22D1BF4B1BE040A597FD8B9EEA191250917554
1A94B56EACA704380CD08928BAA632825543D0F6A5C94630E63411A6ADBD13FA
8010692458D1034D72FC882D95B42EF3C49DF426BE5310210B7563D3E69FBCCC
5924146E5EEF76A3EB416515CBB494457AB6FEED1B5EAA0BDA5226BB7BA94964
44A4576650887883B3C9AC23E217F48154FD6CE1454A0393D7E8418BBACFC660
D888697296B7CC6581024CE1B3EFD240805D78448DF7E49A11B2F211A64EB78A
90B19A51C704AB28B303E724D97FF40F7AE36D6AD94AB07C03B9B357EBAB1A18
9F424831F6578541FB21A36E4C6ADBBC34C4BD614EA7496D58CE8BF62247CB10
F893048D583A4FC2FD02F3F6970F6306B22213A308C0C5BC5672CF2BB136C75D
E0FA273D40D06AC07B567DA70D25CD216940814E1FF110E5BA8697379A27707A
B74F4D4C6C1769FE00906E74846306E52E324E00D300A78B984ADD86F1753AF2
22687DB9CF10CD88109B0AA050F06A64F754256FC04066CC198989172D7838B0
9D7AE5CCF00A362C8A302F706283C7C60A1D9E7E1FD69388281F0AF776D1AB01
1F0E8F77F70B14471CCD1E40537D50344486533F7298E845568085B976442910
80AA8B87F7B0E297ACFE20C61A737C3C3B405D049314F14D6FF093684229CF7C
674FE245E7B58AEDEE8CE96DB6DB9FABFFCDE8B4D3B0A1AEAD28B3B4E057EDEC
637353C7D47BF41FBEC8804E91A0134FD48A8C8480D9137F359E6287C5369650
A06249367E02A4483BC8446F5E8F38C3A65A16FA152620B2C50499E293ED6015
2108652CB1D729F35FA2851C69A6D0AC9B1E97A66B2E9B937B85A69977BA8352
BB68ECCCD5BADEEB358015D82061EE67F3FA4770B91AE7D909E4AE1BEBDFFF78
EBD97F40F1B3C7C78221B0081DCEE0635F1589E9ECDE57FB0FA418C674FED3C7
68549F666DE1FD69AD27AC7E1E20250E3AAB09E78E7F66CB3CC2F58BAA55E587
3D64C726C983B33756ACF3FE3AD85C6A571D4BE55EFFF31273BD8C22F12467B6
1057FC53C3BC05FB8A3A18FC918C2004F0D54E717F3EBE75C50C5F7E311F57CD
0E45B6AC7F41EEDA416B03695A7A04D5A51CB2A4CE4114EBF66B06D640012D10
8ECD3329117185F2DCCB44376C548AE06C27913E3DF2FAB630C7A12F54553381
D5ECE2D516B08001738F1EC4FC0B848E039F729778774BD3B8C8131539566D7B
C863F004227E862427E6DBDB64501D21A96FA3E5CCCFF9C85B1EA2962F9F78AA
A52771F52066D6F8D2701298CC9FDA7928F99CA135B6980B3C5BED0597A28415
00B51C672DDD9181CFAC6D5546FC990DD73AE60ED0238395CB9AB4941B1C526E
7233E93CB638D822021793F292636B3F8C7B2A0D353F370B35862E306B7215B7
DAA42865754B22A9306A4143F93D6E86E029C110955C6FEDAE7B54D6D13B903D
2FE2D30282A297ADF2F025114B9CDF03235CC9C0D34D35462849197ADBAF25F4
6810C824CDF0112EDAFE5FD522BADA5AD584FFDE080722FC86D503092489A7A0
FD2DA444B57766998E83E5365136ACF7F9D099F66AA8A0584DF6C03FEDDEAA41
5F87B04DFBED3D19371A766262D2B5FD05CD54A65347488BCB948F7B43A5193C
C00483AD75BC0B89D1561CB28638D1D24AA9F358AAFF93B9564AB0883DA79F26
6F540642EBA7AFC8BB260F79189A85CCBD703F65363DE21EF673A9FD8F1F6D39
06315A09B88C3FC8A91AB621533F6A1938E812BA39E0756E167FB5AF50729011
A8DE68CCAE80B0FFF87E514ABCF5B87853A3923C28A781E14282982C1AD13479
B6178D281CAA541FD7CB5828328970333D68C7090E454AF9E45392F1B4CA7607
E4330AB6BC5E2CECD68B9981B2BEF1AED8D00A3AE130C913A0A5F41929D75D3B
1E711CE3A8AB8445DC7B13C917FEFA9CF7A9F685F2DF496AE239D43135E3E160
861B0D1A55F20456933FCA64CC1B060E260782BEF6721C7DABA6F1ECD10284A8
D126A68FC8E8810CCF5AFC45F91FCE02BB1A8598FC3ED021147E2BE3B76ED366
26C93B3B566AC84A719DE7A70642947F38B33B5D36C221BE886312C33F871D66
D40597E4F20CAD0CC21D2C3A11820C0BA2260363C23854E958D05EC0626BD6F3
67FD211F774E7E8E20F26CA64199D2B76323794E1E12FE6F8C7D477C25A84529
7214868CF511A1B5C054CF08BB2A159901B6BF9FBB38F80F74B6BE30324BC55F
8CE7F024251BB5DD3A1798A1A62A0A6F8E820ECB5FE4ACA6A493180E0838E120
6B17216756AC75CB0A6B8FD43C58490E5807F4FF81DDED690D96080BC8A4AB8C
FFE1809DF7903F6847D57A2285834C049877A4729FC7697EEFE344F7665D5A21
59D5AD5AA0468323052D1205BBE6E794D7FC7861CE2BA51D46D47B9C7A7991D1
BAA8A61764AC5EC0B4DC2D0A3912E34090D278D7151D59D40D28184F00034AF1
BF7B57BE2D07493302A5492BEA01CB223FEA3B6CA4D0A79AC03A3416B7D94987
07C04E9115D411FD74AD771B5C96EE1606AB2B516787BD4341B92479E72AACF9
ACC43D30906442CB14BD2C5658C938BC685FADEC8C6514A72C0F7FD399B8A043
27DC057B08DB8F80AD718FE0C9DB97564214ECF573EEBB83E6F9DE39BD6CC376
158231CA2A9A41AE0031885DB8D0B72A02E7FD4C3EFF42D9E05C43CBCEE5D0DB
E738084795BA938A28FB17FB62CFED0835D88FECB2EA11E76136A8BEE3EF6F42
974E0BFBEE0F5012724863FD93CA0F1CD26CF593A7326E022BA9CDF2F0A7C6C0
63294A1C509A5A29792615890E71699CD9BFA522EB9C81D18530F6EB1DD82657
C2A33AF6D3A21F6C8132DD03C6BBE435301DA72DB88F4D08F308F191D0D6CE21
D0AC6F2ECB274ECC3FCCA3ECFEC8D3A6271DD6C27CEA2D32409DF97C2A92B344
7860814C9098D9EC60165DE651EC614F6696E844A143C63DDB86478C4B70F8BA
C1FB7FC9191E173820EAB8A5D4733FACC4C52CCB460E7D37F4F3FAB67FF5C6BF
2301522ECAFA1C5F5FE5DA048E15F885C0A3B24E090B54A955BFB36FC3F3561B
1CA13FDB336BD4F041E9FE46C75BA737BED70C1AEA9C0ECC5E1787985544273E
CCB27B5D111A970C458DCE016F1773387D9D4D851DA35FBF5CA18BA13017E405
2A9D64B50B488945EE7D39347EAA6B23D44BA418E8ACB8B4E56AABF265FC35C7
0118E421AD66D3A3911C593E76EFF0223DB9ACA607BC3B849C4C417FF9A6DD4A
4B5390076A43C82C91B982B19D7AA8B61516F4B26E422A0DCAEFA2A20B54EE05
4AE15F26A7304A9A97BFDC0689D7925003BB63C46296FE532C382FEDCF04C56E
A69213B43CEECA12BD18993C155047007662F9E7F4A2B233012B5ED6C2DCBC74
2C4B8EA64508AF6897483A26FAF195D837E0B2E643F33539F5018462944E1080
6234E1444F469709A6476CBF11C97862C34607A7DC287188E54113F6E2DAE85D
8EA07DBF0F7CE8AF45BCAE8E072C6C25B0DDBDD4CC852F53207B4C082D3C99D3
064637F48F4D62D57D3887204302AD80B6BB6EC73304F7A0711084601BB4E92A
F0B9183F250A60A7950B3939DD77097DF7B39505DCBB0ACE93422A64DEE8A600
7303A2EF4486810CF6CB86871B8015310B7CCD19092E38926AF3577F20F5AF20
3B8009E97A7707B1CCBF6FFF66EC1EB87143AB833E36999482BF45A003B819B9
240E0346C843AF0C43991F83FE1FA0A1A4419AB592E0C0708320E8D6C7D22F22
4DFA1F35FC4E652068FD1DB8B1111DE5EDEAF22CABA60EAAA554E64ABF5421FD
338F17B562E955B4EB2270670F6572393B8F51227D876CFA92E57CF66198F1F9
431F4DE34AECE622C40AD2D349F0A99EE75CEDF13ECBE5B9F25D592ADB01BF6D
D128E980A062580B9FA11EC643AD1F69B53EA2D57539AF4AA1C3EC98C65E8BBA
085A7C093DB6FA37293C93A47D7295B6A9F8CFA1FDC8B7CAB104F32FF3156C1A
FCA7C5BAB3F09769CB0CCA5B1CFA6A01DC0EDDAF6682CED52E80C827321977F7
865D10CE97CA2774F2773D826276ED2B262075077004C7AD97187CF449C01794
2811D5F9BCF1CCA6A445A75C92ABB4411AB26F33DF25E960682F3C22A1B53C2A
FD10D395E36081D1ED265E96EE2137072516133015E992A70B2357F3F43EA858
CDC79EED15AE8ABD71ACBA23B26E3D17D41DEB9F5AD6FFA10463FF01279F3191
72E380341CAAC7984BF444AC5EABF048519A65F780A78E56CA9D874106924BF0
0029F54ACF6800C960DE81273E2CC87AFCE644D65932A5F34BD97A26CB0A604A
CA1C6928D445F67623AA28DBE2955BBA699CCAAD77072FB9419F12077754BA38
54A60A3676CE51E45C0DE6141FECE531A950C0A07C88F66C2C6D8FDE64CC1F55
7E34D6F3B792A1257B9FF5EB18BB80A6425EB7F5032AFBBF507E6262226CE73B
EB52C2B8F5123551A1717B44CE41C30BB402DA4D3FD3FC0AF52F2190F679BF49
494CB4FAD1E78E9C6871F23DD7DEA7C7D956560D8081B01DFF4721707ACC1E45
E4D50FA5D878A7BD6CAB57C4266472A747A459E1A0206B706274CFB2E5004AA4
2091E3626641060E55159270B4794F9C0945FEAC295D1D6BA5868039AE3772C8
2AC0ED80F6BE2DB24C560241EEA57041BA5C17D447BDE4E8E99C798B79938346
029F805412F24FB8073894F45C12281C014770AB71DE0DF3C61211B4F48018F9
CD3A99F46FE69D93CD4FC45C2058AB4D7A18CCB104811EC1D8F7281292C76E15
F2CF2ED682F2EBB5340D9EA7C809147B2E99D2D866CEF51473F0EC0C9F34A5B6
8E6233A63A319F18567DBE1AAD4FCBD9DBAEAEB35EE0BE3D91559D6CE0493425
92195A276CB5C7A58634007621BB68E2773E85B876314C30C65DFDEEAB6E164C
29262A1495B67C57D23F7E24E2AB8ACEF3C5B5C29686A93925A9CB33481C5975
F11973D8E4A559476C4B58760DEB78D410CE0E59E870D431E80A48FBF2DF0715
567FAB985C4FEC6FC1A7B4CA556845CF970625497424C701BAC2359171AE113D
BBE65E6CA92545EE6F65D67086382427D63F71F418F7EC6A21C36EF0361614B3
A29A4052B1A382AA2EBCA45FE0F1AF34D7D03DC222B915ACBD4F3CC684EDF71F
9DD27FC981026EA47CEE6F36BBE70A4D448D69CFA5DE38010875F7883B9AD2E5
9333A30DD12D6983FA9D951AC773933A0F5F89EFCA29DFB23B20F0962F2D37B7
7A65914F1A9AE5C98D1897828C2120BEA9927D9A7806C24D283DB18EA8EB86AF
DC9ABE29065001469C59BF3BE7351F98F7683633D38EC5437B47F377E4595784
EB02BEBC5683A50B2F77FF623117E9549061382999211A36282B7A3EA50BB084
666129C81294F8943F1497F397697A104D3408735BB8601C2C381003CFC1E39B
FF55CEC11DED7A155529F4B3A62EB1DBD682390C533A0575566059F5192ACD4C
5714CDF722E11EDADE3BEA3104486D04F2B4BEC342F88B6D49B21959EBD5A4C5
C2C92B01BA1FD587FCBE8F4C7859F47C8B5F5B2F155AFA481F20844A19DE43EC
CFA04E0AAC3E1F4A8809C51ED43C472CCFCB08592C43F1391EE135DD10F8224F
2692DB68C3073C4CCE0125340184BBDF58E2B82CC16F0D60D091AF05B3B756C0
FE2C3309AFE0984A74167BDEA0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic12-Regular
%!PS-AdobeFont-1.0: LMMathItalic12-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 833 233 0
%%EndComments
FontDirectory/LMMathItalic12-Regular known{/LMMathItalic12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic12-Regular)readonly def
/FamilyName(LMMathItalic12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMMathItalic12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-31 -250 1026 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD11234369CB38BBC21C40020C4E57C
950DC4A5CD271B5530E91DBA55EA1A3BF584D9405556EF9C802B109FF1EB2B0F
C350D7F091E7B613B08574EDA3BF27099BC2EF0E503A4C4724614A73AA054756
A503BEB31E3FCD96F733D0C5815847DFBB66DE4968A9B389FC00C2146C4FF68E
076BA8B3847A3D8237D36A6BBDF0096290F1BCD02CC66B12E0070215D5D8306F
406DF7590940DE35CA0854D3609249AEA4EE9D3D377A7996C1CC2E940132A90C
F633C774985DCAE8E9353607B9059DD211265A0A346B1A062D80C64B5802A750
D9FEFA3C9920A3DE942C65BD08060AF33C91CFF62930F65F9A42F70B83B0E077
E169BF7F5D84F15D59F8A74BC2EE4A7F3ADE36F38C3A661F4CC9826BF73D7F02
D3CCC267927CAE22B5ED695D212FC3B669F9BE369B7A8D325C3FB9D552F175EC
29972562517E91E7B8D570612CC50B1A5CB6B94D030B0C60465EA21631F7A30B
44A47143D0C2F942B5D76384B8C3F2F197BB3646CBED3DEECB6513D3AD460F49
4BB874969A3663617EB537E75C1C1BF92749F9D147080EFF78ED285C315BAFA7
D78B7B4B8B7CFD1639EA303ACE986EDEEBA9350F92529C47EA7689779BD50CDB
D1B3A68B383B54B51F4FD77D6458F15AFDAB471DEA9909CAB29840091391F2EB
148588D02607411F2E802B9CDDFFEF1C1FFCC9EED0405371651ACF30808E8C57
682B734916EE806703B2ABA2F6910E0C75BCE10A94FDD1ED3E4FDA7857341427
CA0A4F7D30151BEB8E3D351E1E100A8A75959D11122C83A5C0C4C87214413B25
A6BFE44A42D446E9C4AC88F86B07C1097F9C5C5673B88582CEA8CD622F9B0C79
E463DF7F2F4C6640FF3852BEB520F7B23D8A22E7E601EF9CC6D0A2E6E82E6840
65B82C6A3A6692811E2B4F57723AA3A6E27076A2F63D6CE1FBA7ACD844E732FA
02797B386F2EDCE9FF9F84EEAD17B366D678E61C6176FEC09C94B74DFC090CCC
40AE9DA65E5DA02E7A7E8A840B45B752AF11A279BA06F821525DD0F477831176
84C80B29D318260FBC314986223F9EC4DB5B0EF2EF5D424C6DA581B49C709E1E
98149FEAAB15DFE7F94977CD2041DEBCB1FC8F4F3B288515CE43713570027C3A
C603C44D8AEA1F9821E0124F9AE3E5A1EA6D1C6304DD03CD20842B335D7FA068
735311F96609901AE3F757E6936FB0AFC41E8504D553FFC1556A37F78DE79AA7
B72000C7B2DAFF6236CD773386E362EC7CBB1284132F1FC2EA71CC5D2E2A146A
92B5ED12F71C8EC58BB4C207F5E12E9A87FF6ED8E4AE72E7FB4BF0253679DDA0
C7850A553C7C1F7CF3A69D7ED78AEE7A900DC7AB539750B476A9D5A1CDD4AE46
261FD41D059BEE4664BABF616718A6D39CC6F3B254793991A8B7E9FC23E36D55
9E4FAEEB77F3C3256EB11057091DF6015793701DA3A8867BE168CFB9B5D52529
CD81FFC45E2E99E588BEDDC15FE6965ED77A15A1811149056B35E0072A94447B
2B96971E35DE1AEB670A4FB421D079F3741B296A58F0D5B4E47DECF583B40EC7
8AB75D63C8632FEC264785E63C14B5AF665CCC741B8F28EE7DB9F2761DD12FB6
0ADA0247C9FB6C62C1D1A24E7B41EBAD57574D43E06E13690F831AC50BFC95EE
0653382141E52322B25F345E5A426C787DF084A117617CEF422F7E209C19161F
FCFAD9CBA9F50A4178A03A3D1129C1204E95D0F19C0E9A42DF896D9FCF24D571
EF958527CC1DF6AB5C1ABD2BB2058BEBB50861CCA95504DD63423BF603B14459
B7C691BF6EAE3ABBAC55FD47082DBE00ECB6C5C0F3CB6F2433FB0784544DB1A8
0833D0831D0F1B5FF1501A1E6B6B33416D9F69AD04218758F11DAAB9D763A34A
791B13260BB0ABFA6979C0AEA235474A2581C01C4AAF34A4F7C14969F073BEE1
699F55E90CB69B74A7E9FD538C48255D891F5D5EE25C7E2E642E6FEE5FD39DCB
F8FF3A61C80C2F509E9D70AA5F53D9B25887FF2C514EB58BEC9ED315FCFC90F2
7B64DCD3C7F53BF8015C7AB23DD76927E955326F853328E714351F6675401EAF
E76B3AA0D261128A907DFDA464BE13E394137C72D6D48029DD6DDF933F1ADE66
31C3022206061E02503044CBE0DB9F6D20846336FC61679C7EFD3938553AEA0E
5C9FFBDB00F2CE7E0B5688C86595E9202AD07BFA556B0591C72234D2BFC53539
ABB453D48B1365A5D224684719CF076685A4EEC2F789864C19ADC6BC14562280
D9CBC580369FF84ADFB165D56121417A2229F27C7537EDBE1965074D983E7D38
5092E2695EA58DD5CFE02B7ACC58A2487ECAE9A3D906DC1C6E68A3FBE36E8EBA
665C58C8E1AEF4B6BA1C18A06E9A47D297F08AEFBF169F883C651EDD1152CC21
27B3B49439AA1334EB46EB8B52054B98D8DC5CD7C4BC7A9E0A51A0E616C09072
2A50144A0F6C5E11194F3DE7D2794F6411E08F490EFBB7D936CBB2DBF43C416C
FF4FF1026524C5C0268F36B083F1B786D2B2D93DD7DFCBEAEAB84F4FE9D38DD3
4DE273D864CBC03BCBDE3D0C5A65FB9E975BBDCD5B79B427FF2DA5F66AD8B1C5
51E048E2470996BE7032BA42DE1E6A73F10BA6C33D15F25AC69CF7974A44AD53
F8FB789A5F6EBFED3AB040CE057A585FBD667339A0F3497E5618FC39C1D41DEE
E636FC63672F22E544CD3C022677D5155FEEC5DD9A002E2B1F6487F325985680
3DFE6CE2504BE98FEF976EA719D2C9663DEC529B16B61003A22AE938E3555659
F05DB9EF5A0E903822E18287020825AAA3A7F18E59F8DAD94141E00D15ADE0FC
E5F12C0CF660B11C7F1529E8736EE2732904D988D5D6AC6C4268141C1B001B1C
C9DFE91DC11550D7C9928732950B92FA85E839764D781C43D452DB786E290974
F9FA2850DE90156203697EE102128D1C7344354D115A4C08B4FE529E1B518882
D87C59A680E4AC0961E3476E62618E97BE3993DEF6095384D79EDACEA06FA8D2
F2978D0E85278B3590EE8A6157A69B3575AA9E53815B436E81365AA9424DBD32
D523BF21162CB0F7194728DE829C646C8E4F84E72705021ED57B2AC0F256C7F5
2CCD0F346199250D0284976453B7829F0750774EAC474C0DADCB7D51BA089B91
5002E97FAA713F83CC559B7F7D61A134C7039B45013EB0873A9A60791443432B
6FBD659510AB43EB4F46C9FB72F12A0BCBAA60A120CCC84CEE91B7EEF94F905F
C9CAB076F67EAC11679449987C92D852B0E1AC2DC0B8B960F713D80AF7767E50
CB5F41F8BFC3FD0D57D065C64D218D9EC8BC5D2B6C1771F262E98B27A5C817AC
55AB2D8DA7FEFFD03A5DF7C3B40364C2DAB625E6E387E1C45050CCFFB6
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80387963D6DB3A9847A9023
B62FE6444FB294948D9305B66F6D595F962E21A13F7044016E1F7B2776DC8DF7
A1BE35332A4E5099310672F0F273EDA4B0BB042F46824DA250330CD0BC3BDF0F
7A571AAE80B6FB14AF0C37CE00142A9692811CF7D067CA7DE1A77CEF2637193B
C60FB9D2AB703D58E41B08DA208FE08B4C0C2021698816F41632F88633A93383
0B44365FABAB1A0323DA3A5F6B8521EC2BB124D772B9CA85EAB222E7A2BA6063
9A27F09F7EC0494AE7680BC389A1D78C6E2E6F172BF655B8138130F18B83D8AE
0C5BEF6F915697207FAE5DFA482F221D218FE10A5CD04F1526CCE72033B3723F
7B3A279F3291925B9A3579ED72125D6388D072BC03EFA1554980E13B37FEC33D
F3B23FC7BFEDA3E15F1326B7A7A5FE7216BCE081EF42F0846374B50FFD3A8DA5
C99BF5A1B462BEF910CF31255442BF04AD58670F7AD427325B4998F156F54D51
D76CF525A89980FA2E5D15C8D09D13B0A98AB430342A8C76E4521EF45EF1D37E
D339149ACA27758B1E948987F3F4A741EC8E155787439EF62CE27FB2A049346C
8F1199E124CFC45A5073C3B6353A0004D94E1EB83F6FC35164F4F22EE107FE7B
8A181D56098BBF17532C933C63DFD34DE8DE7C36EFBF9DC5D83AB2C543CC844A
757BEDCD02321F1F7CE694477F749F82198FFFDAE1393586EFD57BABFAD681F1
56FE238B89608E63C7EE1A84A1CC11A7A232F44B216B0A7C6B898EEEEA2EAE31
DBAA343541B2743ED4EA226F3F70FBAE2C25A7104589EF38855054C5AEFF1640
292FCBCD73A9F93A2AD55F57D780BC4D72186ABF14A12B8ABA67E37090F3A56D
06FBC16C065ED42EC037F2FBC40DCC16E9E68985E1FE9D35CB3E28E86F108689
48EE507B47172D7B52B098280231078AECD4A3FE4EA0EEF3F387D58915979287
5668FD45BF775468462B9AADD9F8F969E3597218B4944BF61C6DDA0377F99919
7F2C6F4864EAC69C58860B1DD9A9C56259182E8F03D67D8056E2F4A2F841BF7F
D83F2957FA19477F075D6BA27C1AE9B4D41487AD6A0A188EFDCF0426BBC9B42D
A784D7657DC828448814EB159950185ABE396DAB606F499E45D95AB16320C06B
4F625F5741DA37E29EE8DB602A670CA6E94C8BCCF83DB0AC7B39632F0D440758
A9BA49B6BBEB3D840D306FB8997B2A3620283338A9BB2A12B3458D45683EA3D4
9DC880FAAAF8C23E3A1676C3926651F5B3F8666E369D50682A921BA05E680BD6
760B31870D69C4C15EEA09E1831354F7C4A0BE99A8A506B9DE4D054F3B943A62
1AB4A04E5063B299C3EAAD652E6D5E754B9ADE46841E52DF90C3F0D068D66CAA
90EFB30BF9837AD04D995C4F9165B1EF114572E5B63CCD257C0314F99E0E0E74
769685BD6C67EF0CB68510666968335DE2BEC50F225ABA2C96965A456FB4F4C2
EBEAE439306822F44A5CACB22DCA7BF949C5368C977D4BEBCE7AAD6ABCEB874D
8071ABD4CE7E483136F29CA63D63D277602BF420FC302D910C06E9A7711B75C6
AFECFF846191F4C6B573815A3AA97EEAF8212E793EC734534B91EE4BA27DF637
084B38822D5CA4CC37C9B9102D403D472EC4F0BC92833AEBC40C0D2C2C1F0040
9F1184AEB562C76E6C7FDB710963CAD0BD99C195B33629A1DC0ED7C05823D166
CC26110E1C1C30FDD85ECD84A9F9D3445ADBDDADE18CCE4A5AD87BC27392D7A1
01E273541B8FFD8A9F88AF42844C0A785600D9FF31D2817C2ADD3A675E31F93E
95BBD7E14B89EC68F4328916B0033E155AAF48909C3572F02DCAE8484C13F7C5
DEDB4EDC72B4042D30D14FBD0F6B6966A3380F67C084786D192891C18FC29F0A
28EBBA62BBF3976782EE4B45DF434B01660CFF3F8DE5BD4EAF1CBA3E0C58A710
5830C2BA44D6D06B280A0010871AD97A31979E71EB80DA85B9AA0C6DC537C626
900F8EEE4A82642D30067D42CE88A5A5C7792D8B9B07AE61797E86542E15D9A4
3C1B3AB84ACCE6EC1529E4B13948F568CE739D1DBEA0F7EBBED6B1E29CDFDAD4
63427256D2922D6FD4BAA439460EAE7EC87A8402FFA68E2C22A6A080AA60BCA9
D5851CF3203E8B4397F00955FA377DFA6880F5D6F64FC185A3BC3BA69CAE451C
29E535A2435C3C00C5CA23DC0CEB40DC2ACE8153AFF93D541651CD027D5B23BE
4FC86005E73CF0FEF13F6C5D87F9C357CA8E2424585B9D34982C57A0C84106CC
175280FBE13452439FA35772557A6FB3D2032F63D2963F1A9473DDF625CCFE23
BD3B633398C0290E42E414AFD7F129264124DFE255F254FD477654C630B70D9F
B1F4194413443589CB22C4BC470838D8FD1C087564AC984CDB10BCBFEE6A59B9
B374617B001E74826FE6FECDE716FFE3E1FB5D3941E7C20440AB5455E08D6AFA
00CEEAB630FAAA9F83522F456EA9EE1B6C22465827E8A0B730236A94304A0FF6
B67A7C777A1E24E9A65FF1BFDBEACDA9E8450DCBF620E71793F03005C43AD6E3
025AC73757826851F98A6AAE8CCAF8786AEE3E1072BA0CB35D0CC6E61277E23A
E3D35A9206DB8F5959CDBAE62E726BDED2B572EAF23F87D1B4E33DCD967D167E
9F3016A6529971CBCB06166030EEF983EF3324975110269F38A2D283BF456D5D
8BFEEBCB5B69717F22A05D4DBCA920BCAD87F68AFC4596DA515B4EBE13E39449
95F00E10311791747231C40A3885F028D80A83C9008BAB7BBB73A8C475477E1E
085902458C96E910707AE5853D94BE904F870B9858C36B4B055C846272F1F180
3181672697BB545B4C85DBAA4CF97F37FE6C3D806CEF3D36CC0FD6ECE0EF01BC
D9EEC871AFD57FD3D52C9C446AF84A690F56A09A84EBB1CED5515C36F27721EA
F34D51025EF8B6CC482ADAC3FED84C85ABC9DAB229EF0CD6495A7D1F18FC4E18
4AB0138C55F58EEC09CC7231669F79EF6C4527DE148B31E0F553FE1D4EAD022F
158043BEB6A6820566EAD71325D69BF346055DEABF0EA6EC704BF556C274C0C8
15503DB16E32D5E354887E4C92240A17C421F46E0A3F76D92989550474565A71
54A43D5879042740352282BB0DFB808529AC467D4856A8FE1E3057ED9B6CCA46
6A3EA918A1E14776BB68783B63BADDD3605467881F7CA534E4490EB962DC733A
5D3BC0BE55E5C3EBDBAA16F46E6C7178A955FC4DE699B0C84C35A5F80594811F
DCAFB9194005338A531A7A874DFB11A5F1CA109CE8784A5B2BD49BC7D9899CD1
C8BBB6BE999AC3384E76924D0A6D986685CAAC6DFFA20748F95FDDC8F878D765
5957F1D1D4A6A3FD057F51ADDF7DC9BEC731AD6040FD9B804FA1443EE9BF55D2
1E90C0B112A1DFE4C1984FB097B3F395007170982DC211E841D87FF88EE386C0
489B9079103C36DE7B76EF634FA96FB94E96DC2D0E437E119950277E7C8B4878
4457BFC547B7CAFFD798D32887D078E7F78FDF6B9E1C56F4D928F66027A6667E
D51E045924E18F0722303639778B44311B287E25E918991187D441F2AA90E1FE
74E5C9E739BEFBDA9EC9C8F800F862999D20CD6BBE65A80B7AD6A8E69ED9BF06
3C97F2FC7037C6298315114B9E7D6C89C968D989CF9A31E6B8F55EC976386C42
5231A9BF769277F5D4878326B6ACB123477906B1BB4666A6989CC7C00A69D770
C6CA0EB548FA1E4795007691AABD54A1BEC1F1A6A1A5A5BFB54A1BE8C704194D
72A79D35593F31906127617D2AE1B888EA771422EB425F39647895BC653F199B
D875EF9720D177DF67BD2772725637D514265C27BFF26B3E844A9641EBF34B49
BB6272F1F868D8AC43A659829BCD60A999E9F3E78F6480C3C8B62971D66D10A4
92BAC74F574E5AF7CF7F368502B037399AFDDA3F4BC399F6BC4CC2760F7973D6
FE77F7AB2E72F981A3C28CC24CE9E9CA5619AA7464211B4E23A6D022E4E233C9
A1809435FEF402FE317FAB705146DA13AADA0A39D21213A3F657C407EE3E0453
45C84C58014E8D0E416EB53C8C730543071E483CB9B1E4AC5CFB2C9F6FC1E428
4D2243D0168D1299CA31BA7512761161DD1DCAA6F59C377BA8F002C7161E4072
8734478E7C279D48E8721B0D82E9AEE5969D76BDE4FC9793ED75251492FF6F7C
F02F70CC7E73AF1340FC9C9BC239B43E079AA71F5CBE503B14BECFF1BB19B9A5
D5B9C67872C428C403F7D726F00CC5A5C44633862B102690C8358F467953E4B8
3456C246AA8402A3A91E0607C4F8DB087EE271E3F5095BC7DC06B034D0EF5ECD
F83AC32DBF4E006F303EADF169D42B2B24B37BE3B14903164D507ECAAE990D78
0E912ACF4EB2C17357D4E115CF13487F83C49AD96E150D3FCA38C565A40EA84B
FCB92557F30779AB4F3DA8D10DC35E177259F34C2EADE01F1DC12B1E324F1710
B2047B88355EC78DC9EB4AE83D1CB6E4DF546FBC914A6FF03AAF857F875A51E9
BBED3C9E9AB2A8A79B5A871AE31E07CC5EE45742EAA85F1CDF8D9A1B907335F9
DE0709F5A724A205CC15503BC31EF6605F4FCBC99AD58058728BD3DA5CDAB061
1B3248836DD9E54650EE2D2F3EB9248CFF10B21C3C156261EE11B07CB6818BB1
70AD1CDF997F07C4ACE1BC0DD381CFE39B1A502005580FB2BC843D90FE998C91
2521569844012BABB5ADF93891FC191896A5FE3E7287CFEDD75B4E4105E7A667
E1F13DE61F3DBA37A349755ABB7172E970A6A9D7AD2F437A6A02C12A14E7ACC7
40F23D12147C0AA2495B30F58881001BCAACD3ECDF0BB769A0C994938ACFB5FE
28CCF0070BD6EE627C1BA57696AB693CE5116775D7DCA52B8B9D95AE23A9C62A
79C4BDDFAC4FC1DA6FD8ECE760A9CA10CBF667B8F0173F33C87D3DA3F5DB311E
5672052E05C3A5CCB847F3FF0AB48D6D36EA6EC30EAAAAF1C7F054CCDD5814AD
3F500FDBFD5615A35253D968BEC1722CE2A13645590B008FC6B88C5C7E080127
212E2FDEC1CCAC426117DDA7D6CA0A259DD7D8F3B3D6F433B5D663ACB77850F8
58A12FEE33B523A27F53933C6B62D8AA75F2D6D1DAEE7C768CA6CB9AB789ACD0
FE5A2F6587BA6A0786B3CE8903141AC00EC327702B132335FF288ADF62578F30
CDCCCF826E4BAD3DE834E58BF6CEBE3F905291691FEFA90A3DD115FEE93B2261
C2AC17638689E052D2D56E9C5A2D6B0820E4B3C87AC8A76D16591A345AB27826
16CC460BDD35D4B557C8F981FB02668AC5DE573D52D6236B6364753FAB6F4BF4
D7B3DDD1F4882245DF931E9E1B6C465AC9FCF64A0D204AD90CAAF7A0B9449559
4710F7BB631D9C72CC674134A226B66760F4607752DF8677C0397AF9D0BAFA2B
80D238B270655735B6887D8E063E13C6DE822ABE5DDD5B38C3BBF97AE7C6C442
5883165E85D442D6F6CE7061ED60494281C0ADD4A7DD834FF84339766A71803F
19D1E087BDC369464D94FB0989B9FD978CF788A9C76A951E7456CB3A98E11D1E
34B5F0E54AA8A46781181EAD3F021013664547C96F9D1A13D2FCFF3CE50FC323
C2FA2DE3BACBB63782A8818520EF438C5EC307A166CC7FB9100ADA3AFE74216B
710655E76CC07CCB3A4A7094228B0127757402E833D849BBB4CC5C7C3CB31E87
4A1647684B190468BFB7BA8725D12C4C3381446188AC97C27E08981419E65810
38FADDD463346259844571401A131E488A004961B9D7710E417ACDDEFCF6B67A
066C20F6F3E491E8148E53097AF5C204F7C7F0879E6FAA3630D313E6B7BE70C0
2F2AD0D463F2CC880FBCDAE2DFCF164BB944C5F227B5BB9656B64BF013408AD2
90A34B2C9CC0F6E3881AEB9427D41226905096240AD78AD226ED88CB89791423
9C1FB716160FBE4124E048782F415DA100ED3759D056E3F40CBD377FD6E20D0A
086B4D3A1CAABB2AA9B600F70DD36FAB80F26A701C26CF967D8A0B2087D1106B
5BD8AC6A3F9D071FBA4C4973E7B8593DEB808F23B98C0AF44B17A42AC343BF3D
2AA01AFC9DDFC00BE5437460ECE5F073B6F1F63A92B60163D42E603DF5ACF388
2D91085B4E047C7F92AF7461811CDA6D6215BE299711BA9543F0A89C4DF01C43
A24BFE5463C9619F0CED1CF6BA1E216D1A74EF9C325E5820D3C9EF826C2CABED
7697BFABA39D0F2725E0DBA7C8CE305DE7C1B59DC21F2610CFB985BD9A4913F4
40E3EBB41BC6D5E3D3027542FC60365F3A29A6EFCBBFA10436C2670E973829FA
6208040EB9BA120D8DB54879A0463788B5F261ECCF0412977456C26E96BB76E3
60801E608E05496BE7619B8C69F42E8A51F65DF4EB0148F58684E8DDD4641B79
CE028D512D01BCB54C2D535A0A6A48E0941628A53EF7B1ABA776139DD658D343
B6CF3CFCA0601F87A6CA1005416A0273277FBDC2CF7A4927D841354301EDE00A
BDCE8BDA33BDABC8DDD11BE570572282F244A01498B59AAD06E09E5F1FDCA19B
BF1E1FF19BD0B3277A85DEB4062E5D6F6EAE1E4DB410CCC9D2D4809175713005
5257815D95644A1D850C4F814B77D3B6731568486D5A0CD6BB356544510E78A1
5B6AC074B7425C2118FE177FD6094EC7065BED405254359E2893B59E81369BBB
557FAEF2B8883F578DA553A1E604F5C5C0F1B1EED3C5AE4E1DB6DFA510A2F186
F01DB13E7E6749927473B30C646208922179B7EDF555B8513C364C054BBF7F35
F0B627DDC5FE2AA948AE738D5DA7FA0EAFB07C28E80FE1BE4890F4ABE1BE8433
E01BC2CF623DB3DC17E5BA3907257B07761EDD4E519CC813AA3B800A47BC4CC6
B35EE6EEB1428D26EEAD4D6AF209E9298AAD42D9AB73076F309317F7FFBDABE5
6B4CB2B3406199E907FE5C491EDD336C6F661DD25A5D56725C74A68652B52AC4
336C801C993E8901D31F55B80BAD84A95161D8D5634B7599362FDC9BF590AEE7
5706CEFE4F1C074E500C6D063E85E7BE4B10FD2C6715F0FEB765A98A503E5329
674DBCC6C47CE082B6883552A1F042947C2944779B8F097FE7CA2FB77367D40F
085E1CBB4665CAA4FC4DDB110A7AFEC7A69A6C7A74320671524A2972BC504F7B
D9AD7ECACCDEC3F43EBFF73010E7625254A0EB74F63C285E2D52D69BEAF07B03
F7C8EC8D25C8D12B6346BEC24FE59880303D59BD65B3905C86A50983300D3372
FD9E8B12B4D67F8499B32253F5584C994060D3830085F5B2B4D380F11A63ADCB
57F1DFADB1116E4FB81DEAAB0CB008421D1582EA2092955A7BAE80380D6CFDBD
82D34A78EBD78B3998FDC69F612F39ECCC768AB03B0EEB8067F8B3A8D2C6AC69
3DC999B4B6E2491256DBD49728AB2F1555042E52D5BFAD5C5C059E431CD83EEA
8085E3337E32DEED5C9FB49D27E293745205FE2394005B5E7B238C5B37AF0CB2
0D02562B5FC3415855EAFBEF4701909913270E0060FE23E1DC78B87FFE6D2250
5EC7C1DEB88CA5BE13F85373A8733C0EDCAC4C90FCAD1A887E071087DECD4DB7
E551DF7038FDB818C5F2D8168C9EE225B6AEE9581D5E83747F36CDCCEBD9E786
21ABDDF6149ECBC35E7209149B2F24EDE6231391641F9401FF961C4A20C8030F
0785D9EE37B59462003F3356AB44A01ECCA686AC8E76FAF802C174E1A50B703B
5A9586C03FC96CCECAAB5CFD9F86253ADB37FA874126F2328BB5C8627E60DCDB
8453CCFADA24266BE73CA1B36B4B2F2784D24F8EA309FDF7AF81630306D67E0A
AD0DAB78243E1B814CE59709E51366D4768350919E6C0DCA42AFC7E0EEFDE9BC
A64E5800D626CC47D247CC610668FF164EFBF2FAB08964AB1B4F59F97F2A13C2
67EFF9D7CFD1A202580A25AD7DD6C9F82415A6493913B6F85C089DFFF3242324
71F90DC7F94604002D6AEBC8E4F8995AA5159E80FF68EE81AD0CFDA85B3EFC1C
18FD44FF2BC993B88B9FDA9A88A19294FFB25645C229D79B653C8924EA89BA1C
CA966803DE5D6DB3041CFECCC768588BD38F0FE2F105BBCE99A877C937FE4AB2
C6596ABA6F44E4104996B360A0A47A32CE8589D0D52DD944C86245BD9D75B49E
E17C674DF8E0D6ECD341D45C249533277FD8F9B93A877CF541BCB68EA9101270
D15AA6590DA4E9FFFDE23B9AFBDC82C3CB019ED4ACDAD318A82BC7FBEC9EA785
3CBA4A7DA5DF270A79EBC71B33F0B065EBCC731CB2F06F856541DAF494881319
DA06CEEEE414994C63199351A0FE860FE1A87B2E2B931E76266B15CC8303BE2A
0AD1AA715ED5ACCF101EBCB9928FA04BEC5E4D82B404A97DC2B00BCFCAEA6026
34A9043906742D7FB5604173241EE0C7C6A83E5EA7C1EFF3A92E5909A8F0811F
E2758B6161A8A960546C2566373365B9BA55EA06912BD6A44BE069F990585122
C903DCF858CE686804C3F119899F5BB3DC8DE39690B59C4D0A5C6247166107D6
C1A4FAF9AE46BCF6A6475B4191956E127A85D3D37535EB04FDC8F5D9F4C52681
5BD2B80F793AF3A361467D0F4BDD30DBD01665C86A6AFC2A734E2EE35305FFC7
1211EBB0E78F0DCE9A1928EF6140FF3716622E4A7A73B41920BA2F51F6627DBC
1F119BA6B4854D126038CD221BCC55C37620632553EEFE7F587C8450F7733659
F7942BD75F3D839477B4EFD118CAAF6688230371CE75ABA0286FC31EBB7B819A
E455CB993EFA46E678C4B37430AF88A3F85132DA00251F5A4E3AD99E44506D83
9EABA33EF369C5B372666E36BA4EB2F17EA485D1190698545847359558542A92
D1957A9655B65706692EBB782EE17D8B2225DD8537468D380D92E1739E47154D
776F2BFE4CEB6EC3DC2047E83B6CEB8E578476FA68A1613ED40825C75260C7BA
8A5A0847661FEE0F6B879B0056E0EA0612B985AA1BB8A7F709BDBA6705D80FBF
09FF2F2D225A489707EF7C63BF5C6AF68FC04C371C2F515DD7D77DC9FD54CF21
F2FF33F31B275B5711FD6B227ED30D4C233FDC93CB79DD476026C29FA3779933
221D89B00F916B01C3A6062F7A3BC54250B62CEF85C03F169C60B50476A8D3D6
84C0382B6B7D81C888A16012044DC21EA96D8651341B0180318EA6F8F74453C8
2F5F25F7B08BE9D16E320913DE0F6F5038EC5FBFE0A25EC67059955232BAD831
20E618BBA0C7F201C3E6822BF981212D178B55416A0648184969E1B81E56D064
B91B61206C2FA9077770096F2168B6852B84A789872053E9930701583B663D1C
B3EA16BD2E6D4B219D019242B90623603F7AA446B762BEF166E7A6ADF80D431A
9D08243DEB069B23D41D4C6A589F5D13EE6DD1FE21A151698B81ED2E44065F98
29376AB867F43BDC4F4A59815640F7F2CC6C0C6036B1526E7D21FD382B793BC2
8E2E7BF13ACAE544285F8323A39E45932A6FBC54655EBA7CAAA851D44167822A
F1D7550E5E7E677064F1C1291F0B78C2066811C1B72D6702AE620AF391022A8E
CABC9E50D69CC6C14F25F58B6C3937F7A3D8165EDF4C74CBB662283EA2C3D29E
D2F15D083CEB170CBA8F1D210044B6EE67818B6346D9352178217879909DFE3C
012CF2809984881E5097CFB47EEBBD07669E815625BCD3E38E09D1CFA5C82547
A2A7E8C3BCA79544B1A2F756D81ACAE235A58C64DC192A6AD7AE02AA5AA63822
53CB2BA6EBCCFBC26B35BC9362B2BF4F2CBD38692849D404F31FEAC213FBEA06
EA7A6AA72A3CC8C866B77F225EB04390858BFF70300B09A4EE7BB3A026D50C7A
88DF5F480147D87DFEFE463F761E82F794BED5E77E07C36E69E259E3E3D4156C
9152A645DD41015FFB7FBC2006AE86B967B6497622B1B4778CE6DF4CCBF87525
7FD719D237283F6AE6A12B1CF5E83FED42485D8916D491301D6F8F9E8864D2E7
440A64DACB07E588997D280371E1F963484E44ABE6F9233C10F32603AC30F30F
499CF5DBE572B5844AD35956702C9EAED6CEE280BA2961683B84175001795D65
10F607A4139FF20EAA6FAD50724816D76FE6856925EEE41EAC3D35A3AAF9348E
13F1671DB099C4BA161D788CBEF1E61093F3FBD296A585E75488BB0051C79DFD
23E04BE24E0A032DBFF705A9DB4ED19128C657C8098ED5BB7691BBF8C1F6EBAC
483F34131776C9B68E5403FD61065D26EFEA3434E575BB99AE54E259EB9FC3E6
0E60177E357EA977B02A30B9277EA6F673ED5F34F1C1D20B609A152EDECFA268
74120F40D4C0196027C17B8EE71D654F0E33C5E5A80544B45E6D798871D0640D
0ACC03CD2BD48F18EC823A5D4FC4DBF79AC2200622A13BA8321863578E15C7B5
9E6BDE2E12D67C4856DB7836D1D58214E74109B47B0F8F4DF29BE1A8878F02E0
B498DE9C1A5F110347B7B612146B5B37E2C21094A0FBFB4ADAD5356311A19FBC
6D656A4ED7ED28A844A8C1BAA6F0814A94CA3CBC21146CB0A5B4AA0AA585AD45
7EB21EA14C919CE9F13C2BFED1652493DB852D20F2DAB3612678BF24A2450F6E
99DE896F7F3E4566C3F3C7C84F3D397E25A739C61C084465A5E6E28BEDDD0707
14F6F7B0126F2E1EA686D7693BB1BDB187E14F2073FD5F7B547B77F81BAD985C
73B05A79D3C8661A98D419D9AD0AB05C576853FED0FD74C459D1F1662445F14C
C7533F09A4B36CA6CB9A4F911431C1BDD2C8142EAA55F3215872715967549F66
5E4D31FA89D07F9F7B71AB6050AA5979D22020F251DB7C95C09E89EA1F66EADC
36ACEE7A5FA47B1E218EFCF1AF6A6DFF38E77DCACD3AC7DD79201BCA43019F62
AC6FBAD2A4F2C83E0B909AD58C38AB3DEA6BC301B831BC479C0295E4599BFC78
C907C452CA574645944506E6C1971441D40B4705A4725AC38B4B716547F63EEF
3C0ED308218EB19B25DF20C182AE9FAE57326041571E6E1FC8DB900F977CD9FC
6A5B91EA844DC9DA972B35EDC8A6EB58E6FC06BD6957EC65834BA1EC23BB9A05
46118C9BB6E9CA78AFB3C7D87A1C043EA430446E22C61E323845F40614C39B45
3620EB9D20660B38F1AB9F24EBA197C783B2B6DAD6D6D9CD9C8E87EEF9F1D16C
6C6E5D31AD786B21460F0E8C1C2FB569BD405056BFFB7B901E2D1CE638FD0D28
0DBDB8E20C47C78329048798A66A0CF1DBB35482658BB9D32B03BE83E191E15B
EDBABDC5FCEE3EB40454892CE429C3ECA8635B7A03AD664E97A63FBB1D528363
8A1D4611412ECF92AD5333A3F6EE8F6219D0882DD96CFAB8653D43BE4C4CCC09
1FDE2E86BB3061C215420F75A9D089C7BCDEC50559B8286BE1FB51D65779019E
678CC8BAFC026639CE00ED9FD45DA90301E4D98723B5A14A5EE325D1C4CA5023
439ECE5C41C40DA56736E66D332AE7AE9677BBF810EBCC680FF6312A5F9CD719
74101F6C389CABC69B231B033132675F491DF54AE6686EEB06A17DEDD6A14279
D75334BCED770B613C32B0549273DC7789E792F012CC10486C74A0677546FAB1
1805152716480C0984BA13A8433ADBD62CB1E890E5287537A5E25A047E45CBFE
8DEC8188DFCB36779371FF52D9B99EFF6E2AC36895C02494F1D1E7FD1E67116E
78539970EFB2D13C855D11D212CE13ABD5A532810C851F0E8333769BF901868D
3A942347330560107DF009DFD0995D0085C514658D7A1084DEA5C3FCD95CB0D7
AD9A6ABA0DA27F8DF4AF87A547BAD7095BFE6125C0DBE051FED4CCD2D249ECF4
B22B21842C8F86DB2D0533F3F0194CCA784A02F5FC193EB3F202D9F4FB0387D8
8F0A107878F218E82FDFB74799A272873190E505039128552A16AA125501337D
3D039AF45D8E99BBD874DD44287C2E93E959A12F6B06B8223991B3B026AB632E
F0B411B0397E0398E95CE5FDF7ADB2965D6181D0094FAE8250FAA70258759141
9E8DD0EDE59C74B491A0F78459504BBBCB1F4FBF6C97AEB8FC5D0821D4070F65
BEBD55BE6E060A458C9A4495D2062DA1D8F6684D096AA1475909C97B50AC962A
19C387672A4D101E1BFB07CFF9F57758092D3FA07816AFAD23482C4B5B829303
BE97BA56FF7B58190D3E1F7947C49168E23A66FDA1F9EDE6A6FCC1F86EC7118A
704F46F8D097D53AB04E673CA6A7499BDE0603EBBA3AD6DC4CF005D393672AF6
5F0D015C86E975DA6391FA6656A0ED50B329ED72DFFF1413E660A1ABCBB985D9
4C1BA24A0313720ACE3287858A257253A70692227236DFCD73B2B2A80AB7B924
F1BEAB9F601CDA2C40EF963904CFAC6A5F3EF9A9280384C5533F7843E6670B24
942AA8D40B40B3B362AA3B778C47E857E4C2AC635DFFA6A0C3FB2EB988DB6254
CFD706847009D7C0011294084601879CC948BEF8AC77069D64A294FC4B927E16
F3C2234B031E2E9A6A644510454A0A41DEBAE7BF7A16F17D759AF71C2F1DAE38
62CE6FC4C59AF4C51B407D44468B5FD193E6BBE6D10EF49349387EA298200DE1
9882B5A3078ABD23D1CAAABD63C49E665E9E9B22418B330B24A05050D7C15004
C087434725BC971971CA9533168304814BDB4DCED07ED01BFADF46DA47A77998
C831CEA17602D948310081834EB15A74B25E1E5E8D234DB91B8EBCAF26C58E60
239EAADD0D24164AC3F8505DFC7A4862BCB5663879F5A92C8149B0FA58B4F610
1E49A6D4B8224C70E80B487E324D3D0624F94540BB17EE50DE7F287C29FD4118
705A1FEC0452DB032189B0081F505C6BAE09E9DE0EE55077AB3C26FB93A62D5D
FEA07A0C80C0A828A47BB4D1EC1E9D95B61F2140D5CF62135B9B4EAA4D3CADB5
8300C9D765B3FA6EFFF40361ECC45C4D38BE8911C50F424F49A71061ADD6EC63
340C61C5592DD07EE3FFDCEE81CC1739CD650B2CEBB80EB68DBC5D82F253F83F
62958792DE8886C5917EA8C3D12C66A4CA6D951C5831F822FF7C00B2E7A7C849
F280C7BF46E448EC325BFB498F92898B71175FF02C58724CDB27DBC1BEF92517
B2A7265C38458CD34CEEF0FE8FEDE01A7AAD5D667300F07CB025187FC28E7AEE
127E914C372C6E2DD84989E78792EC3F50C1812A925B3BA29EF6811BA54DBC15
8618BF04C375EC9EF4A7097BF4E9BD06720985FF7083FADA4920BD3F152D1EE6
54020F34D2E4564D557FF2F59C5E6A27F6FA01367973BEA16D73BEA8CD5127E5
BF5701F9D4D8E417008AC5687E9369CF0DC708EF4585381F74DD1E8BE9F6E3E9
CD0B1575FE3C1246D1C4905B82E9D446F1AB2C3BDE349E53C42E821C769735FB
865860424EA7F5CD9AC21C77D9427A23258B4A00740F47DD5A381E988069565F
7FE555A05E957A0BE481889125A9F918B0D589B3F75137A3595C5F190746E586
B04C7AE2F0FBD79C74C36ADA93DDF3CDA03C46B2C8DDD315850235962879E04D
C0D62826F2A2521772F4FBEE308CEFA450C89764BF440ABF0AFD83641633EA61
D047A202E5D0D13E64A5822CE3776B7882CDBD8B600FFBCFA5C1900BDB11125C
E2C263BE303829ACBFE0C0E5F2D242B83CCC05D2B4BC05B37305ED78E98AE9EB
227FFEC63AFAB6C4C03FA6A71FC346A14E0C2A3D8DF4024EAD5CBF3F5EB4F2B3
52F6A9FC7FBC28928F67117694133A3248571E032FA87046115B708300FE56D2
C05DE5DBADDAE7385F40448804C7541E75178581D64597FA6BB6730526925E87
CEDAC3F2F69E73F8108A7CC02FE9FAAE87F5A611B1D378B62358BF5E25F65281
0DD9C17F15D490A70F55BE1A6C135C1123CB216D72D6A018A88CF79B4B972AE6
F7325F973370C589B66EE8E96A150A6BE7D5B70D927B84BD24A98ECBD21CD3A6
2BDADD8B61E413EDA36A71E7B6110CAFAC612E3E67F97F8743BCDBE88FCF29C9
84876BEFF75AFC65947B449F234E0DBACCC9B5C71D0890A63667CC5AE766518F
978EC2CCE959C755DDF36379673B7F8CCEA983FC111C488188153393B78D5A80
A6327A35B2741B0FBA3CE446FC361326825BF77DE0552ADA3E14BC0B82F2CC37
AE635B87652A957B430996030C42BCB6B3794F51D6F7DBCCB9A3050B3115FF99
555E34634B52F0B8B83EEF5CCA51B264045113E44B9DFE0DEE815B76EE3E932A
702D09248172CE8B2E5EB1DD447832B4E1DBA7870A949E48C9DA6B47BC350F9E
9F33DE6B1D442AF96EE9B4EA9012AD3D9EF3C1751F9C2C7D246C6BBBC779F84B
6DFBE0E673604D21AD141452355A421A62C9467B96A3F5090D33C6D91CFE0195
CC0E8BDB022B99F26C5F42A789D622CCE2408EC84F1A114E75CBD4DA333EC359
0B836A47CE86DAA6BC0B8B79E19344CA2E9C00B041913AFEB4E45707032333B2
1B84AED7EB3AF8B955FD3EBD100CF8869DC7CCA5CF8B0BA0782D42FEC131372A
2D75A4AB18ADF4ED2688529F8A536BABE8C13BF3FEEF165DE8C3E9109949A8FC
60CB1C77916D6F2508D429C62585777EB9E6E9DFCA889F03C8583C08E9D4AB85
6B9CBC75EEEF8D77DCFD4CD6F5A57F0D4687597F21C39DB6A2CA7C80E5410BFF
7EA073A18C1640DD5882CA53A2CF19DD076C943E28A9601946489EB29C19F419
99337A57A67302CD793D3CE49CD8DE2762ACBD8D8D7589DAF8148D380D77F8E7
DE4DAE00D18C97BC17C50F9B0A3DF60AF84E3C2F621C38C0CAEA89B22237BC49
BF2C28599EB66F071FFCE3410C547A9B74D2111F93C220C0086EE913D280C698
BCDBB8CED18AA5245C8E90D926F9C979230DF7CDA80DA5853EE294F2BBD70ABB
BEF7BB00D53F3FBD24FEFC0C19947A45ECC6B9F49E7AE438FD5CDA0708896FE9
8C08DC323C912C5358431DEDCDF84D69BD5B50DB0379832507E2D44391785BDA
365EC53754CA811C2667B98729EFB280A85DED082F6CB3464439F59776D65F0A
6D9E5088AD245098A9CFAE5B4269FFC85B224108ED3708C50B070833B9DD6E94
F1A57A29CC1FF888A9B1E40D31C73F5B4E253538C5E0D0672F037D53FE85F8C5
6A14109EC81E903522047C2CD466C90E7286C43DF1DB154A97C0CC38585047A0
32B327CD2138751354830444ACC1584CD6C80A8D3A743D5E41F80348072F6349
2E44D2391EBD6625AEEDB22442CCEB8404B32BCBE464DE04A5F35FF4360739DC
FA181DD539CB07B8EEEEF1C6D4E507FE6C285D244462E06C90DF1FA029304BAF
78C09E13E90690A80DF614F24E9D390EF7866FFDAD942A5D48969ECA35BE6060
98953C01ADE80BA874E2B006480769434E9BF13F872380603A47CE5A30AE425F
04C8031D505D69DBB5F5AD46B06CB8429E2CEF1DE6C3D535B437B7DD011061B1
EF585D7190F2C24F9A9A1392CFF0C8D2784D9E8AA3E3A3438942BE3BF6DF3D26
FFC2285D5F195A0D61A2E5CFC76D816168B879E23DDA5E735D31AC92BB7183E5
8236D47999A1066D8D27A2581F5E8846CE7FA79049B46B4EA196068CCE29BDE0
2F74CA36F8CD74B1477B93807D36B8C8B29B24B3EDEBB7657C072E08B1190E19
1E921521A4BD6E4A678BD8857D176A408C8FC8AA1C0A2E529502832B329B1EBC
55089A05E5E6B4C64FFD7AF7096F8D035234C4E034396ED7711A95B891F00C8B
389DC2C5A575D80E56E93F96FF799BE3612E19A6C042AC6847F2B3291D30D4EE
B934A0173199B6ECB7B38376ABA7407CC293D890A2BD0ED6CB619DD55BCD91EF
15C2A291A8A4132F4D574134DF09895804413E37CA4C9FDF536ABDFFA429B820
A82AEE9A73D7DCF7716772C5C0F3F1C293BBF681F43E8C4790E17923AC043F9A
3C0DCAC9C79BE3BA370215A15953B841058296B4C08996C58349BEFFC4449F83
2807549F2403488CF289787BA4FF81169C5D1ABA0AB0CAF5BF3FDA754EDA86BB
9F9B22ACEC6A28CEECD551D569C78B57FFB59A6F1A07D63B6C3299BCA90DC4C8
D46023FD1DBF1523CEBD63655497CDB2F38EDF33CC72BA1C6A8DED997E502BD7
1B368B07837C0E94AEEC901DDEB541604DEC0FE90FA0685AF8F30EA06EB43DE3
BE2530FB83F8FDB2C2A73ED0D6C2F1B4B4DA12624B76F586D52B66A64F527007
46CE527476A2792C3EF61F720CE7F7788599AAF3FF46CE5AFDA109C2811D1F30
41B13A105DF8C41F14E954B6395B87FE58684F8CC7A4AFBB516DABB825032720
23C7822BE40259EE7E6E346555159AE9BDA259B2CBABDA42EC70961D0E5BE6C0
7887EB84556F43AEDEA439FBF139A16A55342B563E55D24A4BD23C04CFE4EC3C
5E8F62FB9F8B01DC960213DB422A70738EB12DA190F7B72410A4102A2610D2EB
2F15B888AA1B72CAEB43EC552D8EB71266B2A14EF8964CC252EF5265C22ECC20
2A8FFBB8DB18CC895FBFBAC878343C569D1AA0196F093144F540D43CCC67B3C4
D1437401EBBA6B25E10C0EB723040FB4C500B084FD4D3BAAFDA459B8B1C94B66
9E639F2846DD412BFE1842CF5A1FA83B5164E8775E5CD919269255B906DF4D36
390C92ED73C332C7A02D7E0C589A549787F995EE004B5F0642EED130FCD7700F
A74B710E3FE668EEB96C3B9817F4740F18A90A6E91A9EC9D54A895ED2151A9CB
F0B38D6DAA116FA312BD7621152899F4B5FD24B0E8D03EDE1D442961F4A3C461
D93DF47B1310556883CEC750C615EDCBCCDF39878C6BEE434017BD459FCF89FA
30E0281A08AB3702629EC62742978E851C43E8F57015675079DD259FA99567CD
44C46F6C6AD2CDE7FDB1489B650E8D7BBB9509E8DF9E54148C74D9602158EC0B
2AA4AA04B13617297FA294D29DE594324EED7BB2585B150B070648EA4D8F96D9
22F40D5F466F92D5F2CD27336E001A37D76BE0063D037D5FA1D9323EFB18041C
17993BE8A172AA504A661233FEB238A85D9D7947F283C09A0FBF2D1814BB0662
DCB02072F310BF328DF6F085A0A038088D08F40540FE7B4E409E3DB91B83091F
BE31985BCC92A4A20389DAB6A15E96E4F8C020AC9F7FCDE0DAC8BAE041ABF2F1
C45331C30D2D0F083CEAB1020D895E1277A82FEBF1537E31B2203ED9BF9F14DA
012615B4BDA7F8B9CF4ED59B649DEEDE2D060E6D749129391A4B806A542F9420
65B1E6F246B4CC52B8425996B6192D76AF60107349C2B89771C7297EE958A22A
9C6F2C2E3EF5FFC9D0AB37FED06B29DA5649587834F2B4A1F6FCA3794C2531CF
8ED29989A7B964B5716E6FD4D280CC6077E56B81E969598E63B47AF73A1024DF
A2E161FB63601D9A3210A1FC8324D5FD6E41AC58A59828D774E9EBBB8323E57E
38B0FEC268E9B7B72F833CB0EFB3AEC61AD11AD73C6BE59C9C8A0540B2CF607A
E636D11D1F7C8D816E0D7DA53AF8F5405C5F13EF38D9FAFC324EEDA0ADADE999
F725B0C2E91A22F2A0B010589D741E2B1D49227BD1009AB5EE468CC5A5C5D9B1
62980E2BCA61729C49AAFD69B227E99A3ECE98403EB3FC8DA8BBBC374E602D71
EEF218C1510B8371D5B7758A43F98F4DC4792308CDFE2779CA6A28C586E3084A
4B117A591C138B430C2D10CE6A1C7B8253A2DF9F5F7175382997B8DDC1BC31FF
9BB31C292003A4128151190BFAB12DE3FFEF4EB1C1791129C526E7EAE4FF5E5B
A039D6BB9BDD1A78E47684A3C53CA307ABD7CA32C36022EFAB437A48B1D7B2E5
B2D9E2935768B184941492454C7669C9B96D0089EA127B4A5EB38E31C7FF92C4
006E04619B81578C0EA3C3A72402DFB9B35C8E557DE0DB6C19A96D1D48EE4A4D
D94D6443467C61CDFECEBAB3D8C7BC445E500C128AA2B10494823BE831209ACF
69F75B2E0903AF6D630DC6F2532EFBA61D0CE72227D1D8631998A08ADEB2B51F
D97C947F3CAF4A17CA0F8BE63FFDBF36B10851B0883A211E7D47163232E7A7E0
C1AA5C5B77CC31277502A7F715F108E9EAEEC7BD4E46D9AAC7A1A6B2D80BF10D
DFE93377FDD5CE1822AA5743EE8B913FB6B439FA1A1D33D5553550B223951C2C
55EDA090FC0D70CE56717623FFA836F3CAD795BA60D695B7B8FAFC8D26C27C69
87F653941314F8DA247325E00F6BAB526DE8BAB4B9BDE5755BC00415739DD7B8
85F3D4D1A0DF6DD22A6A57ED89C7614DF9530F0EB20ABE3EF27CBC6F12EA3B26
80901393FE87AC2398F19B7A33D1EE6F74FFBDD658513660C7E94D13D9E8F45F
E2C82368E361D4034E462F659DFFB64C404825C32FF9C23D616143FFB85D7880
5A95B8CB191C775A2DDEB43C79035827B86DC28D9CA4675C45994145E4498BD6
018114B6A4A08EF3B0E69614C2E3867B9A1DCCAC2A7425C75B9126E0FE97F086
0DE7195F04660FFDACCF0188F6833D1C974A499D3A21CA0A3F118A34F9B22E16
B4E445F1F353D0D0C8E30FB123B848A6BC424607389F7D429DB75C1323DBB8F0
0DB4C55C68E580B670F433D94FD41146CE0711D2679B6146ABF84955079CA19F
14DEC2BCFA2EE043CB188FF81D4181A7EAA080503F9516A06262EF17CEF3806A
39140CD5073A6E046DA695E4F744253BE77B846C9BEE668BC55CB057A516F7CE
9C3786830C57EAE0585F0E658DE2D96CE4E32F2AD8BB9DAC4D03C298AA9CC651
6DC7A0660CC2B0B3C78EA9652D67840CF7A94171E466E55C00DA09E33D4874B4
3A3D1C2B921F208C2AEF18EAB42529A1299D47EFD1F774F2F20C3AB595773F02
B5D41FBDED8FEB58A06037A79C3424E56971090684F5EFCA127055FB69CEB9AE
3082F13883F9D1E650416A0648184969E1B81E56D064B91B61206C2FAE0A8B4F
D41C738DF99235FC8AF7B0A7FC07C2E6FB4A90540293D872EC0ED49AA31FA3F9
9FD0F232A189C31B214238872FC5E500D1B53D2F524D2E2D716E60135C2BE9D9
F9DD449F5A90FFC859B867112AA77C4DDBF8ADD2D4E76EFE2B4BE4369794970E
A2AF2B83CF3541CB9E3226E9F356DCEE9C03E2CB7289A51605671FB74C5DA296
7E453EA6AC9AA63C2672EF797C6B569D71D404C93037B06DD775397C84467898
9C902067EC814CC8E1B2E22882829376BEC979A67E1B0B621CD8572B3C627732
DCE0B6657F1F3BFE97412F970231680D6ACC6F5A1C5ED9A05A870D87221C4449
08F2703D8B9F611C5220710553C0D3AE15AF3A9C7FC064280F6F2699EED3ACFE
EE7A7C170508FFB3B3F6EA9ECE3189AB0FE2817C2A7A1D01761D3A68F525B5C5
83D92FFD5420F6D2453D8ABECB1D7C4616037CAB2A0E2D0C2E65D01EDA2FE3D7
7107295ABE5CD82D909F74BD77CA96971148F849BD4C24C7FB99974CB7CD5EEB
1155F0AA13FBF0CF6A9FB2508E9C6F6DB599E80BD5BA3240DC9C7305BA54A498
AE3D226CAFDE7B38B78B08C692CA384365CE3933924DA07BAD71891E94D3D262
DDCE224ADD0BADC53CBF939792B6CD340BA06E12F284DD1B24059505F6ABCD74
EC8EBBC0C484315EE4F179CAF44FDEA5A49D7DB9AB7276ECB2E1CCDCB4AFB4C5
FBD1264B9389616BB3AC97C7314A74472E0DBF3BD641350DBC75E287D39ECBDD
16625EF820F0DDDBCA6B429C9E7907C73EB0A7CE7E7203A0EF7C10536D39B864
CA58D2AD4270056261FDAF491F78BA819DBCDA13A8D0B66AA0C3A414381B2879
ADABC52E9DB146BAA3DC8E2F62771E97D8B1A6C15ECDFA08B09CAF326930198B
56A6912ABF0FF3164CAD302F374E692E5D8BF978C0108B6206F2A77737BC6F10
3E8BCA407CD12EEDA9362C31D4FED559A3C08733CF5E36C1A5FA83E50FB858BC
DB610F7B838EAE249CA8CB2D8E033C89E1F9CFADD7001DB1AE100601FFA0AD39
5DA7495FFD2989718F2C32A2C179FA272A70FB2947504ADC434D49F59CF0EAA0
5B19DDC232DA306F6F29C43472FDCC1CB26D7B4D25608306B8F37DE282B5B606
2984CA5731AC4034A3B9A911F5CCF085B2AE0423DE309A360FF60CA82A8251BE
5676A88F4723504C746D801C6BE04CDE0D28488DEAC62731937E9F15196F9653
441D5D99563AD6A015995764F5EB86636450213305DB72BB08EC68B273FDFCB5
0CBBF7E922E370C4180BB4037807BDCAED84914125D3420A48A67B6437A47A20
2722A696D85BD72D83AE1C137F31D562361EB9EEACB9F90278ACFA4E0B72D4CC
6F9931920545BBD4072C94918B95025CA689F4B67F62D15DA24E8DCA79520F4F
DB72D121001BAE4419B2957813C88DC88FFB06B300935D7C9C8B8A04CFA89C79
5E5179C12C1A64E1CFAD9C249B5F03C81C010678250CB05AC81DB68BD30486E6
49648A17A86EE5F055136DC51E1508766CC19ADA50356598C1B85B5CB6A9EF94
6101137B4E5AC11AA63D59162CC5A6D29B7FCCF9F8115FA459787E0FE496FD79
99E8BBEEA87AB0EB9BB4847820280E3E8AAB0E81A301DDFB6E414EFEF92C8A7F
3F960EFE4F4A0B174CB60A583A08CE9DF5E1B22F57278F775B25C89E2419E056
0922187B30C6CE886D528FFF10B02E7A4A1EABB29BAE08654BEDF96B4DC925E8
C00BB3E642A64685456B6BAF629AB8085A0FE533A5738EEA4132F47399C1A4F7
38608FF311B283A38005483ACA84AEA633BF9F1138F304920E9BE01A2C1D7C36
B9A3381E4BC5F590A09BB05188D368F7BE4E721D08D570FDC4F5DF883C6A2A9C
FB9862BD6601684C70D35566FE77A32BDB929C612388C83ED727B5BFC009FAE0
B6364C164319055DF4B81282E0782EDD5F5B323295E95D869765B17F7A9B4986
0D3EDED3CA0B29DC5BFA8A81B22AA3FBFBE9BB816B42EDF445E9984AD71187BE
7E1F89FF2C32A2A38E539D9345F4B58F6B8E3E370C11DFCBCB774CB85404E536
6F6750325BEC19B126E7DDFC4291FDB46FA6ED242EE5E5798F598B3167DF0594
5BDE248AE9DCAFEC76F1A9F3E0FDE04A374708AF8FCF3FB4B7D6F5D24E1E0F89
961171AC847ABB77AF40EA5FAE1C1EEBB6BB7CBD0AD5633645F38705A9B01BC8
69FDBC4831ED9760C32C2FCEE435745272FFE8FE3D126BBC9280471371FAD4A8
62142B7A895F9DB67F41582D0C817460440992B347336EC4A4BE51FD2D46AAF9
49735EB63C17C621275854C7E604231E3E61D172E87A663E50D8FE49510932B4
D1D1B0D502750247BB25006F466250647F37A36C3B2D0805CBA53C94A3B9DB6D
D7E8E5C58633403CE65D0D30F4EB28AEACF36CE4FF5DF70424005571C54D1020
0D56638057388EF68AA94E9E0F12D7E37541D121F7BDC1D61FB3F840D73461A0
1DB213F252765190C14F86C9923C32FDE6C967ECD4DF9565244E5E2DFB6BF5F6
47E2C7945E4CD6E5C5F4942B949CCF06E5F3B5303979CE2F103D64700FD6F6D4
F4FC37AE95065E23B0CDF7E58929642CE11D43A53FCA5B9FCA74CAF553F83A32
35651CD3877E589416D470904FB24431119A267658B8A8B1F686400AA146A6D4
51BBE858B367FB7F0FAE6DA91D4BC4CB4307A1188ACC0C841CCFDD2E70DC54A2
A26B1D78582A33F532481524A8AB039F23C5B62994AF67FFB97417CB8AEE8E3C
008C70583C53547C266FCC8764025ABD321F25418074615F774B7D86D91C9FA2
FE4F84BD87FBB390B65362AD2B23E0A3481F951D83972DECD70AA8987112F05C
939A6FB071DE9920A8CD622F9B0C79E4635A10CFB39EE250AD0FE0C1D95EFD6E
89E70322C72CB26CEC6AA0A9196E604BAD9051921FAB9ED7F964ED314D50CDC0
6341481153D90C3927148D0ACADA4E7EAE558069849FD51D8ED3E300037D0CD2
D1AF397F0E3B5C98F740F969E30382B8E87C01B504A78F07A5578BA7BE6D9C5E
A81A9FDC83AC5354B1660664C9CF8A5CEBF01707282D962FA171248D2CF5CC90
03F2C1DB42C069893A6C31F0A44812EB0380609944AE895A62492E44D2391EBD
6625AEEDB22442CCEB840563001B481165B32528BF3209DA0DF713EF4751FBBE
49E46717105A2469DC27876F4035544028390706CF1ADD107271669DCA948F18
341306C3422922BCF391BE9C9014064006CD33AEAD858BB6A4448C1243A03DF9
2D4F5E35918651C8C8391C12719AC3EB6A7652B3689830029D887E3F7BED77FC
223B3E7945603D6015EF45983A3E06F725FC0C7682845F3E4266B7D327312EFB
770916FBAD4B17D420CDFB43CD103ED7A1B9C2E885C88F882E29F3100558A839
70B2B20819C87E06075DC32A70F10CBCA8475AE95B6B95517D685A8FBEA16853
877991059EA435BF30143AA22C166F6DAC8C06E300F09378E5799447FD7CBE75
FD2B74C3B6E8CBBA695DFE5377CE6DC583577CB81DF3C32DE6585AF05D5978A8
0BDDD4BC102242670CC5C48BF610DD49CB958D9BC26A0E4DE7D92234DDF8B275
24CA1478F618FFD1B11E93F60FCF85715718DF7FC981026EA47CEE8FFB0EFA46
9E23050DFB3F2A072F126379A165479BE72057F0D6D0311BF204A258CD0FB940
FBC00A9912B63DA88B3C465E434C7ADE8F982DAFEC0540D68A8B8B619F8E4388
DFA59CDE4FCC3A38F4253C211D48B2FBE78445511983F329A4F1068D454BAE20
86C28F9F06B04B10594236EE9C369FBCC2E1A51D4579DC3C6C89918B4E4FE00F
EFF73A7513534E05AD6F4C749DFA3F2AFA531D86B55D62ACB72C87FA3E519DE2
B123A8B7E1D87B521E07D0EFF27ED0958D68E1005AC36E91F29F2BC5611F8229
FA8029BCA40DC784EA9D87CBA5CBA0CFA815C79669A05F1E190166720490A124
A76A808841FE81D39359DB5975AFA443ABCACEFF8F837083F21026CF303DB053
CF07E39EBE6FDA6BADEF5DF8C41F14E954B6395B87FE5926EBC43F8661F3F085
EE06633C8A9D62411E0C7813C6E1051660E8AE443837A2E5276E15E31A9CC66B
827E186C2C2AFDF226137440909566CB411F6EAD662D6BD1259AB26519EE8B3A
333B63D44EF29D334A64C61964CEF3E4F77334D4FF67A04277EE7E0EB69D7639
2B84CF4114D188D6FDE612C8F2A7DA397EA2266945D9077600B03A431F9869B8
78D12E4DA9E19D723986D7A820D03FFBB8834599A54215A612318059A2530963
3E4AE80EFD99CF23CC120413052422AAB7623343EAAD0FD0876298219E22B0FB
A3FD64F87EC796250F9C996FCB8560802A81FD22BA994816E0F467BAB90BD0F2
276B0510226F8E34321E3FADFD7E2B2575116286D1C2A40545F973870CBC02FE
72A3D5FE4C5AAE4166B724651DD36643371D0BAA62789E36680ABAEAAD15FCC0
DE88213B28CA601D37EFB8720625170F3F9DECEC62F2E7186C23BFD0F22C7796
245BFD58BE2A16804A4997ADFEE6E00F84F822BF828C47E3C21022F919263617
63B86FA081E98DFE93C6030836C0266D47A4F6907CFACB8177745EDDF7099B6A
263EC38F0B5642AA2ABE187EEF62A1777E4344B7C25FFD5E4606AFE8F01873F4
062143E9C9FD2F0BE561270269EF54D0FDDCAC0EBFD5554A7B98FE3BEE0512E2
8CFE62B7986C10BEF2DC54827C9E0AA1EC460941BA4064658504CFAE58C074D9
2E1760785598B4B6E2491256DBD49728AB2F1555042E52D5BFA9025B3B73744B
F88042FD98C304F826E7F6B188839B467E670C50932846A633BE80AE05B2E22A
559AA56CB399040A291CEA6FF83BB6D3E225780F2D9BFB580B3FF06981708E61
9B5116A10310B9B180DC2074E44FEB8A3AC1357834C33171533EAC38A2303969
F4228CB865C0A7CA7D3C3A6403B9A7675DC69ED861AA0478A6097536768EB5A9
DF8F572F92BEA924DC028D183288214AF1E38C533CE73BE753625DD6DDD88162
91EE7725531A82AB7B2263889F1266F35A1D775DA8BD6974D336DA8A04CAFFE0
A670030B0854D6E51F9B15AFFBD9EBE9140A0A0C3EACBE81FA48B0B29A5F1BB5
358AB36FAC1F47417493588BFC22C9130C0B2913F287B3CCA268A2ED0354D6E2
E96F17DE324F9355E51CA870B61EEB3868AF9010BDA5FA646074CF55421C75C3
F910EE3F677B7440252EA8374AC27F94E7DEC936D545E9C61512DBCCEED22733
C4FA131A51FD0D4D032ACCE3241BB5004B1D296DD7D44B615A6CC13CA8176337
9F634CC44C8DCB23563696AA89DD0D5AFCDB99843193FB23721F1CC312DA6666
64A2DCDF4356ECBF3325A2494B23F4737E190A39667CE20EA7A111A44349F0B8
B33192412734251C7A4AF14BDDFA8D6D3FC5443CE593AA974149E3687845D596
015BDB5FE4894C1BD191B3CE90932A12D5803A9DA6F49C7240F00F556EE5E9D9
90848F9C630F52EB49F0AAD4DC11543D142814F3181969EB5260A0331CF30B5F
89CBA01730CEBC7B562804B51CB0FEA11ACDF09E295BE10F6BDE5E30A149C5D9
572A20B5469BE07D09E3658C6D3BE9945C82EA3ACD90B905875C03C8C15A00D0
B570D3FFC6C760D688D7FB16FBEDE6E8D8A0162CA84C7CE497E990FB3E7A41DC
E80636D9349E126C289FFFEC582BCF933E7EAF912C86CB6CD5BBDF808B528B4E
E47F166EE0323CA9B4F300B6C7EC73C3C63C524263A5BF99A91C2996CA8B2766
4FE3CB162661D6EDF7D071CBB107D16C3B6E85912C8309347BCB3C08C522B570
5D78441901F4B7ADD76CAD5E9FC494C124E3C03453942082ABDF1D98D321AD5D
EEC530F346EA452A2D61660ED595633434F375A47C2F3CBAE944C96AA4E9E3A5
ABD817AE1624A14774AC845AF65A54CE36C42B22AC76ECE7686E4E8DEB9AFB59
66925A79293EF846EB7DE76BE0D3026F19A2F1C3406D3CBA06FB78D45AA402B5
EE099644E30CE5DDE591CB23CDD252A60FEEA3CC3D11A56D1CB957F27AE487F8
CE779A546E8F49CE50FF9DEF3B4A4C1BEB3848EAA3477349971D4289A675DFE3
9DF546A3BFF3244C90733BA17E41E324299E8A99B0B72E990A1D84831236FB6E
9D0A187E10B32E357A9FAF092F7C3D4B36042FEFA70953AB89F716DBBDB7835E
97EB66928F45EA8146164441267E541AC9056B3F574FEB6FFE88F4CC54A25EF0
35A2EC4540055822238CB8CE62255BAF0145692EE3B52643A0DE3E623B821319
E978B1D0F72CE3FE6E2CE6C38341B5C9AC26789A70F3673A81D12C8BCC675DA0
06B588323AB7D62683C5C6FB8B9C8FAFB6D655E956A79A38623745FC8B101884
F68405F0BAEBA0D3B3748911736EFCE5C80AF2B817ACE0D3F9EB9B8773ACC5B7
4331B027B86932D5DF98AA2A1F02B7155E76D0C80E31B39CE0EAE632219CB335
6A2ECEE5118D86CD0DC85A9A53BE7E1C068357EC0490767A6AF4C4E67B407B21
5422A6F409D59C3093256D0FCEBF315BCBC1B4C0737EBB623F79B3C763CEF083
51FE0C28AAF68F401CDFC0241B4712D56B35AF4D88C8D352A48A918EF0FEB00E
6F5C40FF92A66704671E51CA912078225E88DD550A9A39D14B929E9D406FF4E3
5AD28EE90DAF81167C915DBAD71257A58D05C830C380E7C68A1418A9A85F6703
7061D4533525344C1C8F490EC502908EC4853FCE7AC34FAA127A4CC96437C340
404DBD9689044B71F710D0D5A3B77A6480E972405F29478D36D99C5BD8C57AFA
EEF72AA4BE2B64354B49FC540F120727A0A106D7EEF1A86A0E9679C3CF402247
5A43347B004B9A6C8CC83673C8725DA52A528B5F2D4657FAE5E544AA24CD46FC
03CFA907F518764D601FA8C50A7939034D841FC00ED9C333D361D528EB1214F5
D246CE62DCA8132BE0FCF7FF5E37F4F6E510DCD8F0D33CFE7734AA15DE36B9FD
AB2AB6C31EBFF53CB1041DDA059BBC1CD1305A3BA4B31B29DCAF24FFBF31F6CD
BEC9F61F64A1F45434CA44F972054541E505202AB45200693D9EFD2E0110B640
E38CB4A7EDCE7E83AB7A471BB817133799E5AF19B25596A888D753090E4CA689
CC99E9238B1E39BA4C4FAE1BCBE074D111AB5F969B1C5F1946460795E0B5295B
835DBFF1DB3688119BE666589C64259AB1F7B4D89A563B3E7BBEB30BBE14ABF9
34CB42F82042DA49406B00B1E3EC7B94785F492ED09925170795EBAA968FD2BC
7F2F2489CB63B6620D697EE41889B11C0D31756164B01CCCACD5FAB79F603BBC
78A0F9746C17417F19B181A9A4D24632275E02C080433EDA5EE8DEC82AA77763
238CD20B1458410928E48795C915119CE0E39BB063A88EAC1C82C85174FC32A6
1B787769985079D60CF71131977D53267B76B59DE1A9AEE59B1BEBC3E1D081D5
8DA932B5F899117ABCBD30416E874194A234CBE5B988A286787570D4033AA66B
7A56C9D859C6A020DB3FF6C7E5F6F6C37353D2850F28C2C131412235D5695E1B
8D43FB421979DCB016E5CA2765235A965B6D79D5B248F2812B349367EBF83D7E
1F335DD1165243D103175D288DA1003B76C9A185EE6A8152A311982808A37A99
8C561ABE01BCEA8D861E6EA214481C40C55335BB614830B33AEFDA5E40DF2388
62E45E699A220D4AA40D03D5DB93CE19DEB7C60644ACCDB4EDEE8DBECF6A06FE
1D95ECFE48911B4F84FF71A7A260E60CC675EB067D4E93EF4D2B88C75F569346
AC2B878782D12F9091D3FFCD776A189D0C954FF3EE09787595D81BC7EEB5750F
CCE9912B34040061729AC4D74A7A206550FADDC77C9F54982909CF872FC95647
95593A72697DB76C3F7611DE3631FEA419BBA8067C6D0E964143A0906762197B
8F410AC27F36EE9B552645B83D67BA54D4C2D3463B820649F717C4718C0547FD
9B19E74D0E18F6908E4528065A6CB2A1A79E3CE4232E4A1335F1966DE7C21DF3
51097B1572DD6B19F8454D63D6D7B882B2A0852348DA855F0DA35F059D8D3F20
870038B6EA3C5E41A3E6E6EAE70E6704D330CC44607478B88A6E8E0467C0F7C8
BC7CAE6400AB1912B9F617176B028A83256009A9ED0D82BD08A2B0B66B8969E0
2CF94AF76E15717E215513F8A8224D0C1C10005FE7B9CE6A7410E32401A3DFC7
09FEB708BBE7A3672B950E197F5859B790B2955ADFBB6DA92D7C19D5DC687F20
29FE2439769D67DEBDC8AD8C861E90E5322E487CE3FFCEFE1D9D56A1660DAE90
B755958197A3351066167283CACA75B3E1991251AF9DDBCEC84F40FBD93EA5EE
4419A6A18C8B8F25C505F2EA29120E4FD48FA46C977B3F7C06E77B80A9643541
BF259CB9E3570E3D3545BB061783D0D9946272A072F8B085AC5D934920C6ED82
6DADA4910C4C98E05D5313AA0122DF71AB6B4097497EEB38F021923AC5B37314
539BB425959637C0BCE46EC223C08E0100F8DF5DACF00BCE930F6409136C1793
AAD1ECAA2A3D8C1BA08469A82C7A8E07AE34ED232229CBF201624561731B274B
FBF372840036E3D1E71C93111F531B0D8E10BE6388E57AE9B7B392D167B63BFD
C1102565649B536B29F72E5A4865626A8F6A5D715D381AE5AA868F8AF9BADA15
F2649242E3474C67D33954451C352AF582A0C260B5FB7F47C813999C3C595AFC
86CD0B7BE65DAEDB30533D46F772B5E5698FC7DBAF51DC2CBFCE0781919E01BA
BEE19E62A2BC0C99138A50E5C0F57977D929DC9CC774F6481EE8807D5E58831A
67F6AE848602F2D51A2D5C4DDF6DF8A0E501020DF9EDFC6C54E2F3BF53451C87
77DC1D69A754A5CBC8D9D4BEC17F17889B04CE21D724D77EDF67F3CD364982E0
F489D72EF60183D8F2A79A3AA765C18E0280C268CFFB45E6E44703FC7AD68DBA
A09BF4E38DCE8C1638CEFCB8A59AE9FB7ECD21F133B000DA6224A2584FF34541
3E6D78388251FFE0BF86DCB132C9BC7D2FF01701A9678AA23BD725DB1FAA0FBC
7511E663F2C7D77B43BF036B336804C9D88F0EEB0C993216CD336AECEC76C697
A3A6F1ECD10284A8D126A68FC8E8810CCF5AFC45F91ADE250D608A5737F03BCE
6C46DEC2C16B9ECD9F19A19F4A1DE20C2D5F29453ED6F495B14E73BC4EB41710
462E9EC916E8CAA48D18DE6EE47F936A8ECAC7D4E624353575E13D49DD5AF366
220D2EF743FB7121155B13ED556A5A5134B85CF61DE04C9E9D1B6350EDE5D276
8687CC471A1EC7186D318D849C05B5E92F3A5481D3784C82D61881857B6101D8
8646B6AD21D84AF63EDF2077404782A8E4AD2DBA43865DAAC65480B312C2D858
607F50C15E06E5205869C1FEDA857BDF143E1A0C7E8E4506AF80B17E082BC829
17D167A542ED28A9B3291260CA94CD5BA274FD970913528FFAFDB945DA898FFC
D9CC0F4FF5E1C1F3F7A9F60367C107FEDA7E0064434F7E6C4B9AAD2C8716CE9A
B3E1007A4CF6A0B098A756AFB05D546DF68D995036387E9468143A26AF2CEB9E
359BD9E5E92EC8F6A19066B51C2BADCDBDEBD3DC879377A13C5DCB4A7FC08F88
42251411D6C67C93E29D4217A1FA558FEFF0485CAF90627DC9C590615BC75305
4E1A5ECE20913D3B458713583686ED98AAC7E66069D56F6579693CB65053BF56
062972DE5B53438C3838D7F8D11482A0DFA99F57C171FBC4799803791D660236
49E43CFE82E4F6D74AA3696DD13387024C14E96A491ED0063B799CDFEE8095FA
36EB42FD653E61555B287B71FBB12FD0D0C256B298DA8C6CE68DAE295DEF3E58
57A77F77AFCCCD82CFC289D46552563B36DA5DA9050F8394FCEC5A6398F275C8
32B0315453DAB180934D4AB9D32A0A2D720A8E05B319FEE63118413A27AC22AD
4FADF1F0718F4AF76BB096965995963CD7E3DEFD43B2B428FE08CAAE6ED03713
8B3294CD515DB323465DEA95A929C73BD597BC4AF5366221DF88F3A15D9619D7
17EBCD44410D324D45238DD0FA9F678D4929D69D192707B1BA6A2970ABE2179C
4CBFC016A8E893C28EF549CA3C0F7C816D1AB9B5ACF682DDE991AC8B02549785
2E03BC071DAA2D826BA44AEFE84130BD4D15BB2EC8597057E4EDEBCE7A94F307
64033929A8F36278575777299697480D55F7475B1D47008C871F77FE5B882AC9
B443AF67DCE9D17E2F3F853F5E66A31AAAAFCAE6A03034E2281BEC8D06F7B2B8
932308234FC559DD1F7D85A7CD3BB80421FA781D95EC909024A822946BF8F810
235FFA7904418684810F196A257F9A4A5F752E9A7CE92289F1D8DB442575753A
6B6285957717E9544817BDE8B421485DA123FFD5100CE49AFE854D6CD69850B6
B3D6BEB68C1ADB6FAFDE46DC92FF8F7970CE5AA07673EE6D007A5B0E360136BA
BCADC4F5D068191AB265D0E83C4F5E200BBC6EB1AD492EC2E938F27AD2302963
61EE6D09B687A7BAA759F63DA53E187CAD892952A412B1B6E9510792D4378FC2
6E4A7A6257BCB470A3042A36536557E6102528C39E8FA4E174E173851068178E
96CC69A1345758AF4783C8C30F5816A558FEC6D2BB5876328864C9C224830CCB
AFF25CDAD43BEC7AAED1F6BAD964197FDC6B9836841BBB38EFA28DE86728F795
9E81800355E907D237ADFC10FD811857B3884EE07C774FC3C46E6FF193765CC1
28CFDB88C6D93DB82004DB8D9E8A2F161A38FEB95063954F86C8AF21A16EF072
18D080D765E4DF9A51A71C4260FCF217E907C79DB9CF3744EB03FEBA08935FE0
77982985D6FB660D65C6BBE76370F0389AB1DC905D2BEB7CD8A03BCCE2C44B2C
415BEA7B5EAC41CC092D15E2CAD34912C41094F704AD4A2236651359D3942F98
C02657D0FB67ED16C6F8AA81B3C82D877D1A368F54911091A94D2CB46CD22747
FD308450AE7338B33D7969A92EB33FF057B5157B04DBADF56C73BB31E5B67765
01D8038DCB2BE189ECED18EBB01D8637EAE8FFFDB7356D21257EE38B72295985
EF99E3302B40CEB35592BBEB7BC05AE1507F8615B3A7380941CE0C6A4629A5F6
2FF768EFD891834AA902F44E6E4321BDBF12DCD48108E909E7D9AC7D0D8762BB
B630F65CDF2CACB2EEA5DA025B49FB7C908675CC8DF7A5A366371996AA1FC4C6
F7FA0AA41F08AE0D5B30BEFAD83FDE5ACF3EB0BFE5228B76C00058434E3250B7
9F8BF889530A80ED96EFFA1CF7D6C027B28DCAC9EE735A4899E7DEA2193C30C7
36473BB23C5EA0CDF05C62FF4BB23B656701A930476B878CC54F294DBD5F0DBF
2A9BBC9DB71D6DB1ADDCDE2CC5B7F02CEF5DAA78A1F37F4B8189E5FA947F6382
6D67520A9BB8687BDA378B4444C7BBC0C2EB2F8DB5E31465076BC484450D76D5
E9849D10D2B86083B0267E52474998E3E6319EBAB3D1D4F44B243E879FC5862A
BBC985191135F0156722F0BF1DFACDE19EF8FE6D9582A7DD2A35828301408B25
709FA7CC2A643D327E0D9010C431E2D5BD26ED30F5D86AB32DC91F693FDCB56E
BE39D3DE9B6F1F6205F3D166F2445E020BAE6EFB3CE6F97C2B2459661177AF96
749D92671386A21E66A59A82536D1CD6C2A9FBA3652C6E0D159E93947F8D023D
A774E16D7E5DAE98149F21B6B04E2DDD4F302D921F18A237CCCCF8383C30B055
48B1F41944BA5DB7FCB6081B9F31D9240DB41D9462B94B79BE20AABC77E9583C
7D0E15CACE0E6A101E1F33F816E94AF11C425956BA86135725CD6455A5246AD6
CF95E9E5AB692083FF8A32E5B3CE7174FF7671D2CF25057CBB8AD3E8E901899E
F89D5170035CAF87A51C45C3A8FF8EB115A25E26F5175A557B23B9848E85970A
175390A398055E91026B224A7A73B41920BA2FD1CBC08AA931C7F98D646B2299
87199E5E7725983CFD8DEC4835471C06F9042D8FA65B900E2E467ADE672F7142
71E704C8F7037F43990A8FC1AD1B5CAAF4EBBE737D0425F98DC81381E23D7FD6
D420B053AC8A90251F8BE10CC0B36BB2D4BA9AE639343B97C90F5A2263EE4FFC
CF9A5CE528878A5298138DA9094B31C4E9C1977B8A758FBCCB4FB971C86E81BD
7CFBB7315525061FF23D2EA079B51EB043112D6DF1DDF5407BAD75CE18EFC10E
B2C98A01F06592871825EABF67B5B5B78C2DCB33354C16609A02C482B190C7FE
B04EA98D9540FA148E1902B589B6B2F7B41D89621EAD3929CA3359883B3C793E
604CECFA38A350FAECED94FA7EC3467488684AEDD3A652320C17BBC2BAAC7CD6
9552295529C8FB3C598966292C84AF5690ECE78CD8AA43B99AE250FDDAECAF6F
10E72240EBB8E118E867FDA253BF1540D0D09A7C92EC21DBBB2A73045A5A05D3
74326A16F17251360DA36EF072C8099CDDB5F3D53CB7D93B5CCB71D5CB4350A0
2E6CA2882DA139D5D6DE717022275CF7BA02A576E0F459B1E50939734FFC1DCD
B3AC1F6B62D0FFAC6DE6C74EFB312CC36FB09FF50E90E286C70D792CCAC65F91
D363DFEE4B9B9D28AFFBA28805ED24665D2041DF5F8D7217B59F1F8A146D9401
6240A97D8773935E6D32F466FCD8FA80E100BD47CF57992A19A5650CB057A7AF
75AED7A9C80DFEF2FB5E4F2604FCA0E4A1A4063C1845417A05412C2185568A0A
17E43BEDDFA2508D98DDFD7DBD657B19FCCC538E9FFD01B58EF9624D931F6219
9F7C0DE4FA5EFB3A37859737472572420C22A2A12C7740A816A03FBF85312959
4FBCE9D4B239A8DDF7AB69F96EA84EFC0CB980B78296A1154DA275DCB847B671
CBCDB210A7B3C438816C190439A0CD836E631E174DC620450F9F66CA0B8DBE45
ACCB39C69135360947530B26774647372927D8E3C9B1A14F4F94306C400DCE97
D3384A5FB135C02EF61FCA231EC3D1D1464EC78B6000F34CEC3A4194ACD2B2CB
D8FE16D953EDF0F9DBA2A4DC9B3BDCE8776919C22EF29C1409710CBBAA84922A
ED1FD8D4698B124E79B655F355C3C732E1A56C158044C2EB1096DEC775FFDAC2
50A102E7404C1D1F6AD9B043ACE61A05B97A93C3B1EC8031EEA1248EEFC2ED72
6CCBDC8CABB9120CB640A7AFC823FBD26655DA323C655088DDFE8E3732F06215
B4E00B133D143A43FC412CD709285316E371D5012BCCA4119CF21F787B28B581
4FA24537139BC2937AF2B1EEA5888CA956DDFA0A6E2FB28E31CEFCEB60613B74
D8268D9E72ACD485E7A4BB316F9AA70CEC4B9A451AD3E513F71019CCD4408635
9AFDBCC55F98908507D274958538044E5FA8DF3F67A35704105AC5EE1E57518C
58E51F1AA402DDE5295D8DFD10030C5BFD9F4E17D221AAA067CF4C528869CE5E
31B8EC83B827C5806291AC99B1C5FD640AF5BA00F981B4AB9B46708A00664EDD
789D5AA471E5765B0F7CFD5B4B252D9795D627256DA8E07D7D757946661020DB
C4EF591ED11590775AC216684982BBBBB0B3CD60D46AA6F3CFC829031F7A9F0A
B702201407032EAF37948DE945754D013C105E7BADC88192204DB4FE6478EA2F
176E19A154D612FF4C7DAD8798A00AC4C85BEAC22F780D395E15943D0A9030E1
1494504DAC52710F0582F10234D83F00E0E79FF355914FFE2C69558551B1AC08
0FDBCEAC5FD33BD3A1648A8867BC0BF7FE4019611CC6CD55442739E14A4F1185
CB8B29D491745A667B39224F0F71707292E5C5A6EA04FC248D83006B01EB370A
AA42F59242EBD7E043C56710E900FFFC8BCC3D8BF50766746C14EE44EB3E52EF
08B81E56FFE4E53C3F486AD162321964D23F17AE5B49F601CB5512B4D9197FBA
488EAB0EBF77FC1D8D0FEC2D2C504947DB3177571D2C8FFB341878FEEF32B357
C5A6779C80980C93D33ACF2C513B527704F35D27AEE9260E98198D6D712EDB3D
E9D23A02F98D3983A345D2E4321B18204D081899ED00CFCC2229C48EE3BBFED8
9E7F99053980139C7EFC12BAFD5FDD62C84F007EB91A5D9BF6524D8CAFED192D
26BC0CCAAA91530B13A464D7ECFCD5AEE496B20FF85B1E847AE0A7B20ECADE5E
1B92F538
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000
(C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktional)
@start /Fa 177[959 78[{}1 1328.35 /MSBM10 rf /Fb 205[886
50[{ enclmmathsy ReEncodeFont }1 1328.35 /LMMathSymbols10-Regular
rf /Fc 145[571 4[320 105[{ enclmmathit ReEncodeFont }2
885.568 /LMMathItalic8-Regular rf /Fd 175[1168 80[{
 enclmmathex ReEncodeFont }1 1106.96 /LMMathExtension10-Regular
rf /Fe 194[1012 19[506 506 40[{ enclmrm ReEncodeFont }3
1328.35 /LMRoman12-Regular rf /Ff 160[909 45[606 1[606
47[{ enclmec ReEncodeFont }3 1212.12 /LMRoman10-Regular
rf /Fg 255[732{ enclmmathsy ReEncodeFont }1 885.568
/LMMathSymbols8-Regular rf /Fh 194[732 6[470 470 470
470 470 470 470 48[{ enclmrm ReEncodeFont }8 885.568
/LMRoman8-Regular rf /Fi 134[584 584 49[723 4[830 7[553
2[553 553 553 553 553 553 553 1[307 369 45[{ enclmec ReEncodeFont }14
1106.96 /LMRoman10-Regular rf /Fj 135[739 9[776 7[641
4[683 97[{ enclmmathit ReEncodeFont }4 1328.35 /LMMathItalic12-Regular
rf /Fk 3[723 5[650 25[975 97[578 686 686 939 686 723
506 513 506 1[723 650 723 1084 361 686 397 361 723 650
397 578 723 578 723 650 6[795 2[1336 975 1[939 723 2[885
1012 975 2[1011 1[469 1[1021 849 885 993 939 921 975
10[650 1[650 650 650 650 650 650 361 434 361 2[506 506
6[361 4[723 28[{ enclmec ReEncodeFont }59 1328.35 /LMRoman12-Regular
rf /Fl 138[1196 1[849 879 1[1196 1[1196 1793 598 1136
1[598 1196 1076 1[982 1196 956 1196 1046 6[1315 5[1497
1196 3[1616 5[801 1[1691 1353 1412 2[1530 1625 12[1076
1[1076 1076 2[598 717 45[{ enclmec ReEncodeFont }31 1912.83
/LMRoman12-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-2331 165 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a -2331
165 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a 1328 x Fl(F)-239
b(A)717 b(4.2)g(-)h(1)f(Skalierung)e(der)i(A)-60 b(c)g(hsen)717
b(-)g(O)-60 b(A)718 b(-)f(BIFIE)p 0 TeXcolorgray -741
4800 a Fk(1.)p 0 TeXcolorgray 651 w(Die)494 b(un)-36
b(ten)492 b(stehende)g(Gra\034k)i(zeigt)g(einen)f(A)-36
b(ussc)g(hnitt)492 b(des)h(Graphen)f(einer)h(P)-36 b(olynom-)921
6792 y(funktion)406 b Fj(f)548 b Fk(v)-36 b(om)406 b(Grad)f(3.)i(In)e
(der)h(neb)36 b(enstehenden)403 b(W)-108 b(ertetab)36
b(elle)406 b(sind)g(die)f(K)-36 b(o)36 b(ordina-)921
8784 y(ten)433 b(einzelner)g(Punkte)h(angef\374hrt.)874
11330 y(T)-108 b(rage)589 b(die)f(Skalierung)h(der)f(A)-36
b(c)g(hsen)588 b(so)g(ein,)h(dass)g(eine)f(\334b)36 b(ereinstimm)-36
b(ung)588 b(mit)g(den)855 13322 y(W)-108 b(erten)529
b(der)g(T)-108 b(ab)36 b(elle)531 b(und)e(der)h(Gra\034k)f(gegeb)36
b(en)531 b(ist!)f(Zeic)-36 b(hne)530 b(dazu)f(auf)i(jeder)f(A)-36
b(c)g(hse)921 15314 y(zumindest)433 b(zw)-36 b(ei)434
b(ganzzahlige)h(W)-108 b(erte)433 b(ein!)2683 35289 y
 currentpoint currentpoint translate 0.64961 0.64961 scale neg exch
neg exch translate

2683 35289 a 2683 35289 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 293.95552 a add def
/d 0.0 a add neg def /h 223.8817 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 2683 35289 a 17079 27523 a
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 163.90414  0 -130.05138  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -130.05138
 163.90414  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-70.16022  def /maxTickline 153.72148  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
0 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
0.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 153.72148
0.0 -70.16022   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 163.90414
0.0 -130.05138 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 153.72148  0 -70.16022  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -70.16022
 153.72148  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-130.05138  def /maxTickline 163.90414  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
0 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
0.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 153.72148
0.0 -70.16022   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 163.90414
0.0 -130.05138 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
17079 27523 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 17079 27523 a 17079 27523 a
tx@Dict begin  { 163.90414 153.72148 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 17079 27523
a 17079 27523 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 17079 27523 a 16736 27809 a Fk(x)17079
27523 y
tx@Dict begin  PutEnd  end
 17079 27523 a 17079 27523 a
tx@Dict begin  PutEnd  end
 17079 27523 a 17079
27523 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 17079 27523 a 17079 27523 a
tx@Dict begin  { 0.0 0.0 pop 163.90414 153.72148 exch pop } PutCoor
PutBegin  end
 17079 27523 a 17079
27523 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 17079 27523 a 16031 27855 a Fk(f\(x\))17079 27523
y
tx@Dict begin  PutEnd  end
 17079 27523 a 17079 27523 a
tx@Dict begin  PutEnd  end
 17079 27523 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -4.570792985132227 def /x1 5.760579952472768
def /dx x1 x sub 199 div def /F@pstplot (-0.062*(x+1.0)^(2.0)*(x-5.0))
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 35223 35289 a
currentpoint initclip moveto
 35223 35289 a
2683 35289 a
 currentpoint currentpoint translate 1 0.64961 div 1 0.64961 div scale
neg exch neg exch translate
 2683 35289 a 33196 21672 a Fi(x)p 34782
22167 45 1649 v 1711 w(y)p 32531 22211 5592 45 v 32531
22211 V 33196 23365 a(-4)p 34782 23859 45 1649 v 1373
w(5.06)p 32531 23904 5592 45 v 32531 23904 V 33196 25058
a(-3)p 34782 25552 45 1649 v 1373 w(2)p 32531 25597 5592
45 v 32531 25597 V 33196 26750 a(-2)p 34782 27245 45
1649 v 1373 w(0.44)p 32531 27289 5592 45 v 32531 27289
V 33196 28443 a(-1)p 34782 28938 45 1649 v 1373 w(0)p
32531 28982 5592 45 v 32531 28982 V 33196 30136 a(0)p
34782 30631 45 1649 v 1742 w(0.31)p 32531 30675 5592
45 v 32531 30675 V 33196 31829 a(1)p 34782 32323 45 1649
v 1742 w(1)p 32531 32368 5592 45 v 32531 32368 V 33196
33521 a(2)p 34782 34016 45 1649 v 1742 w(1.69)p 32531
34060 5592 45 v 32531 34060 V 33196 35214 a(3)p 34782
35709 45 1649 v 1742 w(2)p 32531 35753 5592 45 v 32531
35753 V 33196 36907 a(4)p 34782 37402 45 1649 v 1742
w(1.56)p 32531 37446 5592 45 v 32531 37446 V 33196 38600
a(5)p 34782 39094 45 1649 v 1742 w(0)p 1 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 7666 64862 a
 currentpoint currentpoint translate 0.95488 0.95488 scale neg exch
neg exch translate
 7666
64862 a 8099 64862 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 293.95552 a add def
/d 0.0 a add neg def /h 223.8817 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 8099 64862 a 22496 57096 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1.
.setopacityalpha  fill grestore grestore 0 h a sub moveto   EndArrow
 } def /ArrowInside { } def   /showOrigin true def 163.90414  0 -130.05138
 0 ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave
L  0  setlinejoin 0  setlinecap stroke  stroke grestore /yStart exch
def /xStart exch def 0 dup 2 mod 0 eq false and exch 2 lt true and
or { /viceversa -130.05138  163.90414  gt { true }{ false } ifelse
def /epsilon 0.01 def /minTickline -70.16022  def /maxTickline 153.72148
 def /dT 1864679 abs 65536 div viceversa { neg } if def /DT 1. abs
viceversa { neg } if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo
div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend exch def /tickstart
exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor
{ 0  setgray  } def /subTColor { 0.5  setgray  } def /MinValue { xStart
} def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4  mul viceversa { add
epsilon sub }{ sub epsilon add } ifelse } def /logLines { false } def
/LSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def /subLSstroke
{  0  setlinejoin 0  setlinecap stroke stroke} def 0 dT MaxValue 1
add { /cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for subTwidth SLW subTColor subLSstroke grestore stroke
/dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT
add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick
minTickline STsize mul  moveto cntsubTick maxTickline STsize mul  lineto
} { cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick dsubT
add def } repeat subTwidth SLW subTColor subLSstroke grestore } if
showOrigin { gsave false { cntTick minTickline  moveto cntTick maxTickline
 lineto } { cntTick tickstart  moveto cntTick tickend  lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for /dsubT
0 def subTwidth SLW subTColor subLSstroke grestore } dsubT abs 0 gt
{ gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart  moveto cntTick tickend 
lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true def
} ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
0.0 153.72148 0.0 -70.16022   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
163.90414 0.0 -130.05138 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW
mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale
} if gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1.
.setopacityalpha  fill grestore grestore 0 h a sub moveto   EndArrow
 } def /ArrowInside { } def   /showOrigin true def 0 153.72148  0 -70.16022
 ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave
L  0  setlinejoin 0  setlinecap stroke  stroke grestore /yStart exch
def /xStart exch def 0 dup 2 mod 0 eq true and exch 2 lt false and
or { /viceversa -70.16022  153.72148  gt { true }{ false } ifelse def
/epsilon 0.01 def /minTickline -130.05138  def /maxTickline 163.90414
 def /dT 1864679 abs 65536 div viceversa { neg } if def /DT 1. abs
viceversa { neg } if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo
div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend exch def /tickstart
exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor
{ 0  setgray  } def /subTColor { 0.5  setgray  } def /MinValue { yStart
} def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4  mul viceversa { add
epsilon sub }{ sub epsilon add } ifelse } def /logLines { false } def
/LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def /subLSstroke
{  0  setlinejoin 0  setlinecap stroke  stroke} def 0 dT MaxValue 1
add { /cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul exch moveto cntsubTick maxTickline
STsize mul exch lineto } { cntsubTick tickstart STsize mul exch moveto
cntsubTick tickend STsize mul exch lineto } ifelse }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave false { cntTick minTickline
exch moveto cntTick maxTickline exch lineto } { cntTick tickstart exch
moveto cntTick tickend exch lineto } ifelse Twidth SLW TColor LSstroke
grestore }{ /showOrigin true def } ifelse } for /showOrigin true def
/dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon viceversa
{ add }{ sub } ifelse { /cntTick exch def logLines { gsave 1 1 DT cvi
{ 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MinValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul exch moveto cntsubTick tickend STsize
mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def
} repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart exch moveto cntTick tickend exch lineto Twidth
SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse } for
} if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
0.0 153.72148 0.0 -70.16022   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 1 0 0  setrgbcolor  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [
163.90414 0.0 -130.05138 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 21250 54231 a
Fh(1)21250 51082 y(2)21250 47932 y(3)21250 44783 y(4)21250
41633 y(5)20518 60484 y Fg(\000)p Fh(1)20518 63634 y
Fg(\000)p Fh(2)25410 58441 y(1)2680 b(2)f(3)h(4)f(5)-19733
b Fg(\000)p Fh(1)-4352 b Fg(\000)p Fh(2)h Fg(\000)p Fh(3)f
Fg(\000)p Fh(4)22496 57096 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 22496 57096 a 22496 57096
a
tx@Dict begin  { 163.90414 153.72148 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 22496 57096 a 22496 57096 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 22496 57096 a 22153 57382
a Fk(x)22496 57096 y
tx@Dict begin  PutEnd  end
 22496 57096 a 22496 57096 a
tx@Dict begin  PutEnd  end
 22496
57096 a 22496 57096 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 22496 57096 a 22496 57096 a
tx@Dict begin  { 0.0 0.0 pop 163.90414 153.72148 exch pop } PutCoor
PutBegin  end
 22496
57096 a 22496 57096 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 22496 57096 a 21448 57428 a Fk(f\(x\))22496
57096 y
tx@Dict begin  PutEnd  end
 22496 57096 a 22496 57096 a
tx@Dict begin  PutEnd  end
 22496 57096 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -4.570792985132227
def /x1 5.760579952472768 def /dx x1 x sub 199 div def /F@pstplot (-0.062*(x+1.0)^(2.0)*(x-5.0))
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 40639 64862 a
currentpoint initclip moveto
 40639 64862 a
7666 64862 a
 currentpoint currentpoint translate 1 0.95488 div 1 0.95488 div scale
neg exch neg exch translate
 7666 64862 a 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
873 68847 a Fk(A)-36 b(us)402 b(einer)g(der)g(Nullstellen)h(ergibt)f
(sic)-36 b(h)403 b(die)f(Skalierung)h(der)f(x-A)-36 b(c)g(hse,)402
b(aus)h(dem)f(Punkt)769 70838 y(\(1/1\))620 b(die)f(Skalierung)h(der)f
(y-A)-36 b(c)g(hse.)621 b(Die)f(A)-36 b(ufgab)36 b(e)620
b(ist)f(dann)g(als)h(ric)-36 b(h)g(tig)619 b(gel\366st)i(zu)874
72830 y(w)-36 b(erten,)485 b(w)-36 b(enn)485 b(die)g(Punkte)f(mit)h
(ganzzahligen)h(K)-36 b(o)36 b(ordinaten)485 b(gut)g(ablesbar)g(sind)f
(und)921 74822 y(mindestens)433 b(zw)-36 b(ei)434 b(ganzzahlige)h(W)
-108 b(erte)433 b(auf)h(jeder)f(A)-36 b(c)g(hse)433 b(eingetragen)h
(sind.)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 4800 a Ff(___/1)p
1 0 0 TeXcolorrgb 48228 6792 a Fi(F)-123 b(A)369 b(4.2)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 0
TeXcolorgray 24746 81281 a Fk(1)p 0 TeXcolorgray eop
end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 54804 45 v -2331 6795 a Fl(F)-239
b(A)717 b(4.2)g(-)h(2)f(Zusammenhang)f(T)-179 b(ab)60
b(elle-Graph)715 b(-)j(ZO)f(-)h(BIFIE)p 0 TeXcolorgray
-741 10102 a Fk(2.)p 0 TeXcolorgray 651 w(V)-108 b(on)625
b(P)-36 b(olynomfunktionen)626 b Fj(f)767 b Fk(mit)625
b Fj(f)142 b Fe(\()p Fj(x)p Fe(\))695 b(=)24405 9216
y Fd(P)25573 9567 y Fc(n)25573 10430 y(i)p Fh(=0)27372
10102 y Fj(a)28055 10301 y Fc(i)28431 10102 y Fj(x)29170
9620 y Fc(i)30171 10102 y Fk(mit)625 b Fj(n)696 b Fb(2)e
Fa(N)626 b Fk(k)-36 b(enn)g(t)624 b(man)h(die)921 12094
y(F)-108 b(unktionsw)-36 b(erte)433 b Fj(f)142 b Fe(\()p
Fj(x)p Fe(\))433 b Fk(an)g(einigen)h(Stellen)g Fj(x)p
Fk(.)921 14639 y(Ordne)j(den)g(vier)i(T)-108 b(ab)36
b(ellen)438 b(jew)-36 b(eils)440 b(einen)e(m\366glic)-36
b(hen)438 b(Graphen)f(\(aus)h(A)g(bis)g(F\))f(ric)-36
b(h)g(tig)921 16631 y(zu!)p 0 TeXcolorgray 0 TeXcolorgray
6434 17970 8208 45 v 14642 17970 4523 45 v 6434 31478
45 13509 v 7143 20673 6792 45 v 7143 22665 45 1992 v
8024 22068 a Fj(x)p 9599 22665 V 1545 w(f)10949 22267
y Fh(1)11475 22068 y Fe(\()p Fj(x)p Fe(\))p 13890 22665
V 7143 22709 6792 45 v 7143 24701 45 1992 v 7851 24104
a Fk(-3)p 9599 24701 V 2506 w(4)p 13890 24701 V 7143
24746 6792 45 v 7143 26738 45 1992 v 7851 26140 a(-1)p
9599 26738 V 2506 w(0)p 13890 26738 V 7143 26782 6792
45 v 7143 28774 45 1992 v 8068 28176 a(1)p 9599 28774
V 2723 w(2)p 13890 28774 V 7143 28818 6792 45 v 14598
31478 45 13509 v 0.9 TeXcolorgray 14642 31478 4478 13509
v 0 TeXcolorgray 1 0 0 TeXcolorrgb 16457 25181 a(F)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 19120
31478 45 13509 v 6434 31522 8208 45 v 14642 31522 4523
45 v 6434 45030 45 13509 v 7143 34226 6792 45 v 7143
36218 45 1992 v 8024 35620 a Fj(x)p 9599 36218 V 1545
w(f)10949 35819 y Fh(2)11475 35620 y Fe(\()p Fj(x)p Fe(\))p
13890 36218 V 7143 36262 6792 45 v 7143 38254 45 1992
v 7851 37656 a Fk(-2)p 9599 38254 V 2290 w(-2)p 13890
38254 V 7143 38298 6792 45 v 7143 40290 45 1992 v 8068
39692 a(0)p 9599 40290 V 2723 w(0)p 13890 40290 V 7143
40334 6792 45 v 7143 42326 45 1992 v 8068 41729 a(2)p
9599 42326 V 2507 w(-2)p 13890 42326 V 7143 42370 6792
45 v 14598 45030 45 13509 v 0.9 TeXcolorgray 14642 45030
4478 13509 v 0 TeXcolorgray 1 0 0 TeXcolorrgb 16412 38733
a(C)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
19120 45030 45 13509 v 6434 45074 8208 45 v 14642 45074
4523 45 v 6434 58582 45 13509 v 7143 47778 6447 45 v
7143 49770 45 1992 v 7851 49172 a Fj(x)p 9255 49770 V
1373 w(f)10604 49371 y Fh(3)11130 49172 y Fe(\()p Fj(x)p
Fe(\))p 13545 49770 V 7143 49814 6447 45 v 7143 51806
45 1992 v 7896 51208 a Fk(0)p 9255 51806 V 2551 w(0)p
13545 51806 V 7143 51850 6447 45 v 7143 53842 45 1992
v 7896 53245 a(3)p 9255 53842 V 2551 w(6)p 13545 53842
V 7143 53887 6447 45 v 7143 55878 45 1992 v 7896 55281
a(4)p 9255 55878 V 2551 w(0)p 13545 55878 V 7143 55923
6447 45 v 14598 58582 45 13509 v 0.9 TeXcolorgray 14642
58582 4478 13509 v 0 TeXcolorgray 1 0 0 TeXcolorrgb 16370
52286 a(A)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
19120 58582 45 13509 v 6434 58627 8208 45 v 14642 58627
4523 45 v 6434 72135 45 13509 v 7143 61330 6792 45 v
7143 63322 45 1992 v 8024 62725 a Fj(x)p 9599 63322 V
1545 w(f)10949 62924 y Fh(4)11475 62725 y Fe(\()p Fj(x)p
Fe(\))p 13890 63322 V 7143 63366 6792 45 v 7143 65358
45 1992 v 7851 64761 a Fk(-3)p 9599 65358 V 2506 w(2)p
13890 65358 V 7143 65403 6792 45 v 7143 67395 45 1992
v 7851 66797 a(-1)p 9599 67395 V 2506 w(0)p 13890 67395
V 7143 67439 6792 45 v 7143 69431 45 1992 v 8068 68833
a(3)p 9599 69431 V 2723 w(2)p 13890 69431 V 7143 69475
6792 45 v 14598 72135 45 13509 v 0.9 TeXcolorgray 14642
72135 4478 13509 v 0 TeXcolorgray 1 0 0 TeXcolorrgb 16439
65838 a(E)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
19120 72135 45 13509 v 6434 72179 8208 45 v 14642 72179
4523 45 v 0 TeXcolorgray 0 TeXcolorgray 24451 17970 4567
45 v 29018 17970 8497 45 v 24451 29394 45 11425 v 0.92
TeXcolorgray 24495 29394 4478 11425 v 0 TeXcolorgray
26223 24139 a(A)p 28973 29394 45 11425 v 29682 28450
a
 currentpoint currentpoint translate 0.33345 0.33345 scale neg exch
neg exch translate
 29682 28450 a 29682 28450 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 193.00116 a add def
/d 0.0 a add neg def /h 258.3249 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 29682 28450 a 35138 19697
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -56.90549 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 143.71335 0.0 -49.28781 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -28.45274 0.0 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 179.25714 0.0 -79.06776   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 143.71335  0 -49.28781  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -49.28781
 143.71335  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-79.06776  def /maxTickline 179.25714  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 179.25714
0.0 -79.06776   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 143.71335
0.0 -49.28781 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 179.25714  0 -79.06776  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -79.06776
 179.25714  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-49.28781  def /maxTickline 143.71335  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 179.25714
0.0 -79.06776   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 143.71335
0.0 -49.28781 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 33893 16833 a Fh(1)33893 13683
y(2)33893 10534 y(3)33893 7384 y(4)33893 4234 y(5)33893
1085 y(6)33161 23086 y Fg(\000)p Fh(1)33161 26236 y Fg(\000)p
Fh(2)38052 21043 y(1)2680 b(2)f(3)h(4)-16584 b Fg(\000)p
Fh(1)35138 19697 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 35138 19697 a 35138 19697 a
tx@Dict begin  { 143.71335 179.25714 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 35138
19697 a 35138 19697 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 35138 19697 a 34795 19983 a Fk(x)35138
19697 y
tx@Dict begin  PutEnd  end
 35138 19697 a 35138 19697 a
tx@Dict begin  PutEnd  end
 35138 19697 a 35138
19697 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 35138 19697 a 35138 19697 a
tx@Dict begin  { 0.0 0.0 pop 143.71335 179.25714 exch pop } PutCoor
PutBegin  end
 35138 19697 a 35138
19697 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 35138 19697 a 34090 20029 a Fk(f\(x\))35138 19697
y
tx@Dict begin  PutEnd  end
 35138 19697 a 35138 19697 a
tx@Dict begin  PutEnd  end
 35138 19697 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -1.7322743598508545 def /x1 5.050950296152423
def /dx x1 x sub 199 div def /F@pstplot (-0.21963237539494698*x^(4.0)+0.8677942523696819*x^(3.0)+0.051838123025265116*x^(2.0)-0.035588504739363716*x)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 51046 28450 a
currentpoint initclip moveto
 51046 28450 a
29682 28450 a
 currentpoint currentpoint translate 1 0.33345 div 1 0.33345 div scale
neg exch neg exch translate
 29682 28450 a 37470 29394 45 11425 v 24451
29439 4567 45 v 29018 29439 8497 45 v 24451 37132 45
7694 v 0.92 TeXcolorgray 24495 37132 4478 7694 v 0 TeXcolorgray
26274 33743 a Fk(B)p 28973 37132 45 7694 v 29682 36187
a
 currentpoint currentpoint translate 0.23357 0.23357 scale neg exch
neg exch translate
 29682 36187 a 29682 36187 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 275.5465 a add def
/d 0.0 a add neg def /h 224.47517 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 29682 36187 a 44998 26778
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -56.90549 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 137.18106 0.0 -138.36543 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -113.81097 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 139.46906 0.0 -85.00612   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 137.18106  0 -138.36543  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -138.36543
 137.18106  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-85.00612  def /maxTickline 139.46906  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 139.46906
0.0 -85.00612   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 137.18106
0.0 -138.36543 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 139.46906  0 -85.00612  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -85.00612
 139.46906  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-138.36543  def /maxTickline 137.18106  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 139.46906
0.0 -85.00612   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 137.18106
0.0 -138.36543 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 43753 23913 a Fh(1)43753 20764
y(2)43753 17614 y(3)43753 14464 y(4)43021 30166 y Fg(\000)p
Fh(1)43021 33316 y Fg(\000)p Fh(2)47913 28123 y(1)2679
b(2)h(3)g(4)-16584 b Fg(\000)p Fh(1)-4352 b Fg(\000)p
Fh(2)g Fg(\000)p Fh(3)h Fg(\000)p Fh(4)44998 26778 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end

44998 26778 a 44998 26778 a
tx@Dict begin  { 137.18106 139.46906 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 44998 26778 a 44998 26778
a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 44998 26778 a 44655 27064 a Fk(x)44998 26778 y
tx@Dict begin  PutEnd  end
 44998
26778 a 44998 26778 a
tx@Dict begin  PutEnd  end
 44998 26778 a 44998 26778 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 44998
26778 a 44998 26778 a
tx@Dict begin  { 0.0 0.0 pop 137.18106 139.46906 exch pop } PutCoor
PutBegin  end
 44998 26778 a 44998 26778 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 44998
26778 a 43950 27110 a Fk(f\(x\))44998 26778 y
tx@Dict begin  PutEnd  end
 44998 26778
a 44998 26778 a
tx@Dict begin  PutEnd  end
 44998 26778 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -4.862993431852368 def /x1 4.821364230872313
def /dx x1 x sub 199 div def /F@pstplot (2.036396829830273E-4*x^(4.0)-0.03435153174824847*x^(3.0)+0.20040727936596606*x^(2.0)+0.23496245079719755*x)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end


@endspecial 60184 36187 a
currentpoint initclip moveto
 60184 36187 a 29682 36187
a
 currentpoint currentpoint translate 1 0.23357 div 1 0.23357 div scale
neg exch neg exch translate
 29682 36187 a 37470 37132 45 7694 v 24451 37177 4567
45 v 29018 37177 8497 45 v 24451 45361 45 8185 v 0.92
TeXcolorgray 24495 45361 4478 8185 v 0 TeXcolorgray 26265
41726 a Fk(C)p 28973 45361 45 8185 v 29682 44417 a
 currentpoint currentpoint translate 0.23357 0.23357 scale neg exch
neg exch translate
 29682
44417 a 29682 44417 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 275.54651 a add def
/d 0.0 a add neg def /h 243.47855 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 29682 44417 a 44801 35598 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -56.90549 T 9 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 138.9624 0.0 -136.5841 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -113.81097 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 163.81686 0.0 -79.66168   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 138.9624  0 -136.5841  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -136.5841
 138.9624  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-79.66168  def /maxTickline 163.81686  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 163.81686
0.0 -79.66168   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 138.9624
0.0 -136.5841 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 163.81686  0 -79.66168  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -79.66168
 163.81686  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-136.5841  def /maxTickline 138.9624  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 163.81686
0.0 -79.66168   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 138.9624
0.0 -136.5841 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
43556 32734 a Fh(1)43556 29584 y(2)43556 26435 y(3)43556
23285 y(4)43556 20136 y(5)42824 38987 y Fg(\000)p Fh(1)42824
42137 y Fg(\000)p Fh(2)47716 36944 y(1)2679 b(2)h(3)f(4)-16584
b Fg(\000)p Fh(1)-4351 b Fg(\000)p Fh(2)f Fg(\000)p Fh(3)h
Fg(\000)p Fh(4)44801 35598 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 44801 35598 a 44801 35598
a
tx@Dict begin  { 138.9624 163.81686 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 44801 35598 a 44801 35598 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 44801 35598 a 44458 35884
a Fk(x)44801 35598 y
tx@Dict begin  PutEnd  end
 44801 35598 a 44801 35598 a
tx@Dict begin  PutEnd  end
 44801
35598 a 44801 35598 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 44801 35598 a 44801 35598 a
tx@Dict begin  { 0.0 0.0 pop 138.9624 163.81686 exch pop } PutCoor
PutBegin  end
 44801
35598 a 44801 35598 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 44801 35598 a 43753 35930 a Fk(f\(x\))44801
35598 y
tx@Dict begin  PutEnd  end
 44801 35598 a 44801 35598 a
tx@Dict begin  PutEnd  end
 44801 35598 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -4.800379050412337 def /x1 4.883978612312344
def /dx x1 x sub 199 div def /F@pstplot (0.12222222222222222*x^(4.0)-0.9888888888888889*x^(2.0))
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 60184 44417 a
currentpoint initclip moveto
 60184 44417 a
29682 44417 a
 currentpoint currentpoint translate 1 0.23357 div 1 0.23357 div scale
neg exch neg exch translate
 29682 44417 a 37470 45361 45 8185 v 24451
45406 4567 45 v 29018 45406 8497 45 v 24451 53591 45
8185 v 0.92 TeXcolorgray 24495 53591 4478 8185 v 0 TeXcolorgray
26238 49955 a Fk(D)p 28973 53591 45 8185 v 29682 52646
a
 currentpoint currentpoint translate 0.23357 0.23357 scale neg exch
neg exch translate
 29682 52646 a 29682 52646 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 275.54651 a add def
/d 0.0 a add neg def /h 243.47855 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 29682 52646 a 44801 43827
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -56.90549 T 9 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 138.9624 0.0 -136.5841 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -113.81097 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 163.81686 0.0 -79.66168   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 138.9624  0 -136.5841  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -136.5841
 138.9624  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-79.66168  def /maxTickline 163.81686  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 163.81686
0.0 -79.66168   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 138.9624
0.0 -136.5841 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 163.81686  0 -79.66168  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -79.66168
 163.81686  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-136.5841  def /maxTickline 138.9624  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 163.81686
0.0 -79.66168   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 138.9624
0.0 -136.5841 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 43556 40963 a Fh(1)43556 37814
y(2)43556 34664 y(3)43556 31514 y(4)43556 28365 y(5)42824
47216 y Fg(\000)p Fh(1)42824 50366 y Fg(\000)p Fh(2)47716
45173 y(1)2679 b(2)h(3)f(4)-16584 b Fg(\000)p Fh(1)-4351
b Fg(\000)p Fh(2)f Fg(\000)p Fh(3)h Fg(\000)p Fh(4)44801
43827 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 44801 43827 a 44801 43827 a
tx@Dict begin  { 138.9624 163.81686 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 44801 43827 a 44801
43827 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 44801 43827 a 44458 44113 a Fk(x)44801 43827
y
tx@Dict begin  PutEnd  end
 44801 43827 a 44801 43827 a
tx@Dict begin  PutEnd  end
 44801 43827 a 44801 43827
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 44801 43827 a 44801 43827 a
tx@Dict begin  { 0.0 0.0 pop 138.9624 163.81686 exch pop } PutCoor
PutBegin  end
 44801 43827 a 44801 43827
a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 44801 43827 a 43753 44160 a Fk(f\(x\))44801 43827 y
tx@Dict begin  PutEnd  end

44801 43827 a 44801 43827 a
tx@Dict begin  PutEnd  end
 44801 43827 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -4.800379050412337 def /x1 4.883978612312344
def /dx x1 x sub 199 div def /F@pstplot (0.18072263607102043*x^(3.0)-1.7659687557021606E-50*x^(2.0)+0.2771094557159183*x)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 60184 52646 a
currentpoint initclip moveto
 60184 52646 a
29682 52646 a
 currentpoint currentpoint translate 1 0.23357 div 1 0.23357 div scale
neg exch neg exch translate
 29682 52646 a 37470 53591 45 8185 v 24451
53635 4567 45 v 29018 53635 8497 45 v 24451 62372 45
8738 v 0.92 TeXcolorgray 24495 62372 4478 8738 v 0 TeXcolorgray
26292 58461 a Fk(E)p 28973 62372 45 8738 v 29682 61428
a
 currentpoint currentpoint translate 0.23357 0.23357 scale neg exch
neg exch translate
 29682 61428 a 29682 61428 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 275.54651 a add def
/d 0.0 a add neg def /h 264.85718 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 29682 61428 a 42303 50177
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 161.52888 0.0 -114.01762 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -113.81097 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 163.22295 0.0 -101.63423   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 161.52888  0 -114.01762  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -114.01762
 161.52888  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-101.63423  def /maxTickline 163.22295  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 163.22295
0.0 -101.63423   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 161.52888
0.0 -114.01762 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 163.22295  0 -101.63423  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -101.63423
 163.22295  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-114.01762  def /maxTickline 161.52888  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 163.22295
0.0 -101.63423   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 161.52888
0.0 -114.01762 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 41058 47313 a Fh(1)41058 44163
y(2)41058 41014 y(3)41058 37864 y(4)41058 34714 y(5)40326
53566 y Fg(\000)p Fh(1)40326 56715 y Fg(\000)p Fh(2)40326
59865 y Fg(\000)p Fh(3)45218 51523 y(1)2679 b(2)h(3)f(4)h(5)-19734
b Fg(\000)p Fh(1)-4351 b Fg(\000)p Fh(2)f Fg(\000)p Fh(3)h
Fg(\000)p Fh(4)42303 50177 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 42303 50177 a 42303 50177
a
tx@Dict begin  { 161.52888 163.22295 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 42303 50177 a 42303 50177 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 42303 50177 a 41960 50463
a Fk(x)42303 50177 y
tx@Dict begin  PutEnd  end
 42303 50177 a 42303 50177 a
tx@Dict begin  PutEnd  end
 42303
50177 a 42303 50177 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 42303 50177 a 42303 50177 a
tx@Dict begin  { 0.0 0.0 pop 161.52888 163.22295 exch pop } PutCoor
PutBegin  end
 42303
50177 a 42303 50177 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 42303 50177 a 41255 50509 a Fk(f\(x\))42303
50177 y
tx@Dict begin  PutEnd  end
 42303 50177 a 42303 50177 a
tx@Dict begin  PutEnd  end
 42303 50177 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -4.0072635521719535 def /x1 5.6770941105527255
def /dx x1 x sub 199 div def /F@pstplot (-0.0625*x^(3.0)+0.1875*x^(2.0)+0.5625*x+0.3125)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 60184 61428 a
currentpoint initclip moveto
 60184 61428 a
29682 61428 a
 currentpoint currentpoint translate 1 0.23357 div 1 0.23357 div scale
neg exch neg exch translate
 29682 61428 a 37470 62372 45 8738 v 24451
62417 4567 45 v 29018 62417 8497 45 v 24451 71154 45
8738 v 0.92 TeXcolorgray 24495 71154 4478 8738 v 0 TeXcolorgray
26310 67243 a Fk(F)p 28973 71154 45 8738 v 29682 70209
a
 currentpoint currentpoint translate 0.23357 0.23357 scale neg exch
neg exch translate
 29682 70209 a 29682 70209 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 275.54651 a add def
/d 0.0 a add neg def /h 264.85718 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 29682 70209 a 42303 58959
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 161.52888 0.0 -114.01762 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -113.81097 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 163.22295 0.0 -101.63423   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 161.52888  0 -114.01762  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -114.01762
 161.52888  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-101.63423  def /maxTickline 163.22295  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 163.22295
0.0 -101.63423   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 161.52888
0.0 -114.01762 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 163.22295  0 -101.63423  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -101.63423
 163.22295  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-114.01762  def /maxTickline 161.52888  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 163.22295
0.0 -101.63423   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 161.52888
0.0 -114.01762 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 41058 56095 a Fh(1)41058 52945
y(2)41058 49795 y(3)41058 46646 y(4)41058 43496 y(5)40326
62348 y Fg(\000)p Fh(1)40326 65497 y Fg(\000)p Fh(2)40326
68647 y Fg(\000)p Fh(3)45218 60305 y(1)2679 b(2)h(3)f(4)h(5)-19734
b Fg(\000)p Fh(1)-4351 b Fg(\000)p Fh(2)f Fg(\000)p Fh(3)h
Fg(\000)p Fh(4)42303 58959 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 42303 58959 a 42303 58959
a
tx@Dict begin  { 161.52888 163.22295 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 42303 58959 a 42303 58959 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 42303 58959 a 41960 59245
a Fk(x)42303 58959 y
tx@Dict begin  PutEnd  end
 42303 58959 a 42303 58959 a
tx@Dict begin  PutEnd  end
 42303
58959 a 42303 58959 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 42303 58959 a 42303 58959 a
tx@Dict begin  { 0.0 0.0 pop 161.52888 163.22295 exch pop } PutCoor
PutBegin  end
 42303
58959 a 42303 58959 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 42303 58959 a 41255 59291 a Fk(f\(x\))42303
58959 y
tx@Dict begin  PutEnd  end
 42303 58959 a 42303 58959 a
tx@Dict begin  PutEnd  end
 42303 58959 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -4.0072635521719535 def /x1 5.6770941105527255
def /dx x1 x sub 199 div def /F@pstplot (-0.125*x^(3.0)+0.375*x^(2.0)+1.125*x+0.625)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 60184 70209 a
currentpoint initclip moveto
 60184 70209 a
29682 70209 a
 currentpoint currentpoint translate 1 0.23357 div 1 0.23357 div scale
neg exch neg exch translate
 29682 70209 a 37470 71154 45 8738 v 24451
71199 4567 45 v 29018 71199 8497 45 v 47992 10102 a Ff(___/1)p
1 0 0 TeXcolorrgb 48228 12094 a Fi(F)-123 b(A)369 b(4.2)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
77566 54804 45 v 0 TeXcolorgray 24746 81281 a Fk(2)p
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

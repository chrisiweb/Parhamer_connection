%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 2.1/FA 2.1 Gesamtdokument.dvi
%%CreationDate: Fri Nov 10 08:39:17 2017
%%Pages: 6
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: LMRoman12-Bold LMRoman12-Regular LMMathSymbols8-Regular
%%+ LMMathItalic12-Regular LMRoman8-Regular LMMathSymbols10-Regular
%%+ LMRoman10-Regular wasy10 MSBM10 LMMathItalic8-Regular TeX-feymr10
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ "C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 2.1/FA 2.1 Gesamtdokument.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2017.11.10:0938
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: TeX-feymr10
%!PS-AdobeFont-1.0: TeX-feymr10 001.001
%%Title: TeX-feymr10
%%CreationDate: Sat Jan 5 18:49:54 2002
%%Creator: Thomas Schröder
%%DocumentSuppliedResources: font TeX-feymr10
% converted after April 2001
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /TeX-feymr10 def
/FontBBox [-178 -195 823 877 ]readonly def
/PaintType 0 def
/FontInfo 12 dict dup begin
/version (001.001) readonly def
/Notice (converted after April 2001) readonly def
/FullName (TeX feymr10 Regular) readonly def
/FamilyName (TeX feymr10) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/em 1000 def
/ascent 800 def
/descent 200 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 101 /e put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3166449D69AB0542CB99558019EE
97CFE9FA87FAC14B55E860B5663A3D528CD3784FC9647A2EB72CF1AF4E31964A
3073722CB69FA5370CC5D9CDBF105662CA6188C1B3BFA7658F71EA5765A0D152
E60FD5E1DE3B99CE70C03D8CB4F775B5B17CE9573F5046E61444C0DAFD894CFE
E17604820BBE5A8FA11A10565933C0A8320DC5D116C780706E315C54E72426DD
AF1E6786D883AD182ED327CBB03C39C1A2602471C39296B7681215EC4F0E0E0B
264FBAD453DD3B112065828DC04E265255F9FB51F5EEC233C6A752ECA0246E0A
A2BA69049BBF94E6C8F510D29A7735AE4D122DCCA7B22929270D51C3F1E68174
E38AC54D6418690C765264C7897AD12A84B2C5269A6BFBABF05C20A37C94D927
81FD24D7817897529ACEDD9B062949D02FB9B0E1B2D0BF765675BA16EBFC1C7C
DC437BEE4D9FAC437C6B9E5B0C00111499A90E1BD29C52263829FFEF1946619B
1C81623A436D2FBD670D126855C400F38CE0C88122C60EA0D331AA9636B27218
0CC9B0EDE940FFB5EBCF83EDB330F8E83C7166452669E04F2E95A7718ADBDA8F
F99C2DC815F7ED17655111692621430D077DE661F297A8B6A33FECC10B3892A2
4F8E139F3E446CC7D7F5D64E4DBEFDAD72AECAE4D64289A3E2BE0212CF4A91BF
04F60B14E7522795440054CCBC40C49886656B6918198778A498EDBE40AF4536
7F96E77E40A9D65B1D5447D2596B382447AB5549A11BD5B765F9133E1C5C3071
32075009D2AC8147BC53B4C07B14D548E0F914E600CBF320E1639435733D7563
0053CC74AE3E7F5B9741E8CCB3DAFC411B5F846FC583B7771A7088B1C9B9613B
86FBCA1EE9E8263406C1894EE246BE87CDCAD2BA7ACB7030E45B0866062055D9
EBF7F562FAB6190196A7B8AA1B61F407B2BE0F537129E27376C8DDC7C6416358
384B2A676AB3228144586258F2B82A5BD9AE9E5442462DA626088BAB0C29E8A8
0EC75BF6E5E897761B5D095E2A8EDBF2CA742F3BF155B4DF28110FB8B7FB9A6E
9229F9D0B47376BE7AE5CE6A6AD32F50B62023CB32E8E0CBCDE2110AD8251854
5F8934CDC91E522248E019A6DCA06A0C2D005D541C6ADFF72812F474050C709A
5ED08B5F83DA1FD76037AFF77515188E13073B30F9A49A970613659071E0A130
5A4DD21C42ADFC1DF8CEE802CFAB2A75B7460E9F46DAA8CE31D5F287D3163B98
5966C073653074E89114B1B8A097A43E58DC5E49AC1F70F04A922FF9955F9FA7
20A6FCB10A2670BB3F44D959FC897BA487147A0FFDDFD368EB1A41F4CCCB619B
A362730B373EAC754EF5CE2692576DE100E10402670F41FD38F11A1BB43B7F42
B4BD7BB5F4322C4A9D04BBE445358F4B59B1A5C85FAE03B06C950485E5B304E8
BDA4BB926C21E17B3EC2D4DBC9353CFB90DBC6976B566C310DC801A28907CED3
2126B72E26578DF77022D969D09E111BC1C489E88E7B0315E926B0376B085BB5
3CEAF925AEF208D454C49A6B239924FA18001BD1A7D3EA4E7904830A6A948A79
F50CA56EA772D92627A8380A37F3C30845647AB612D5F6B5CB916996A0EE6697
BC62B6266F4314BAAD796EF51EB965F7C30C001F16442E0CB7A6984B78AEFC46
7D6938EFB347E3287600228311BA24326714E77F1932B80334F933C2926274FA
21BAAD0605BBC9A01BDAD6D5ABB885A4E651B8DFAB60487319C1C386CE6A17CF
CE6F1E639526FE52759F1C88A2B52EED4B93C0AEFE101EEEE8C108F389F9D1E3
205904304DCD3F06198594F313F1BFF10CE7F410ABFE3BD5F47CC3D7DB91E197
AE2EFFB9015482D6C79EE33D31EBC91E7797ADADAB7F682F72DFB7B0B0B6AE27
CDA9C0538E1246167FDF86008881E9F917291B498DFD93885C05A1AC6F3A7C11
57128C3D6CA767C80C7AD866074879C24CC063341E85B910ABD13E4BBC7A48B1
53E24D05C43CAC6F3337ED734614EA91EBA620346F23693C7FAA9F488FEEF7DB
E525E547787CCBE1B9824B1CF0B92007A8884194388AE40560BE9D79CD4DE9CB
96359F98E85F2A49F75B7B66C6444DB0ADF62964CF1A47855F8C4688F95EE5A4
50C96A072FB8069A59B20CD2FC703F2F90D3AD1BAA56A93E3D2E2F33C6E2A7AD
258451B1411DD8DBF07CA0246640732F5ABE58B44AC29D9EACBB671334A141D5
FF7CB44C5D629EF4C3E479B76B6A11B47AE63003DE140FB162E88854291E52CD
218D3E70E007E24FEDE321E5814C501169EE40269A4130721A95CB23F48C32AE
DD7B0B4F6320A76DA8A605679B0863982D6B3D4903CD8184B2B829CE9FCBF77D
6CC854455B66AA88CA78910178F748BAD7A4F32521BA7CACB879CFC719BFE2BC
13CF49FDAEE217C53CE31DAB6FDCF81ECAA2E72A2CF15BD84D275BE55251F82D
C8A19F36545C0BDA65AE10E063F5E05A8DB056F7A41D4DB694C98E4246E3B38E
230D155F7ED10F13F00679BCDF5604F46E28FD15B81B55471B8262F8A2F72AF4
E5387E41E401274B350EEFA6C4F03A1E6E4A6B16E528088EA3C7E0299E38DF46
D345559937225879790AF29198B2FDEFE6FC99C66C69959F3FF98F67C07CE90D
F2993F8732E88A77355D4A186BBC8C299C85DB3CFE829BF9F22AA8D3BD63F0D9
CAC57A7CBE25193B289D8A9A614DA9202F69ABA8FFB96F4281592634A7FC4A21
456B69BF77848502657B7B934003418D2BC937720E67D4890E00A199636842D3
DB74B2F004A6E3F3EA6972D62C62E5D4F096AEB2F194E77B656822D9CFF41D2A
7C14F16D7F07E90306AC87B528175244B92D6C10024132A3A1FC2FE78F688904
3568D0BD312C635BF2C024B53B5624F8B17BEEEB424E619CBE804E24E6EE1BE7
3F159A72AB7ACE1C0347278BC542E4525E503DAB0127B4DB6D8538634CC60BB6
7851F14F0753BA3838ABD61E83ECC39C427E62AD4293F672F8E7C2A49B534F60
E877F23EF5EE0E849AEC5F5E12463F6F05D059854D701CE420D546867EE7E6C8
7CD2553F33682A0BF985671C6433700CA8FFB638E7C7BAE78BDFEFAD10DC5846
AFF08F08956041F2912B4D70FD34495C96D3F9B091293B9C738CF5C9563277EC
3C6863C4A69B09E4DDD525D77FD06C322DAE13FCD48A4EA7B1B6C8F0256FC16A
3B47A4BF0DA1C49EF53974B4BF01C9BF194CE7EEC2C3AFA9E4CECD8C4029CC6F
377E4269806EB0FB78AA812F1513C2CEFB8F50CD18615EBAC10976BD12CBC1CE
8CCAD0333D455C3ED1518FD7F80539AE63A5045D34B982ABB471ED8EB18B50D3
1A150C82182B6C31CC9B161A87361A6D96B63CF0D97A286090DA8CB72991B175
EF3D690C64D9CB5EDDFF5B00B7C179825A1794CA054B6F7A8CAF03DFD7E62F10
CE5BB34BB02E50AA4DD4FD704F147DE3DCEBD3B1DEBAF3483E01CA3076EB19A5
FA2A8815CD360568A9A05176CF4111CB27C54BC8B4B991853982BB7307283D8B
93E5A2D6DF853B6E17BEF7C06A182456EB73D4A1B77FD58A853B07B04ACE12EE
D04046A4E977A39963B144EAB63C7D27F2EE65F677B9892C999BC81B3BBDA70B
E7FFF8E673275F9B84D39E641BA990B9AD160BB73CC391B6C36A7C1D68438243
1606D2298D58EA3879D2CAE2D285011E229372F7FA98F55556F0C4007621168A
A3C1F9A9DE81DA70AB287ABC70C4BAE94321D94FAD2DC3754CA39F689C8221E1
6E7E57EA41F552EF612080D82122D5733CC48978F6BC62E40728DCB3134F4536
C33E222D0E79486EBF9A506F92CCE773BBDF3A764B3793E96393DB8EF1FF0FA1
F3801274B7B982FC53258A752D43261486A2A94B321D90C9393EECE5B3CBFAAB
D0BBA6E49ED462B20AFB384AC2D3E290BC8FE7805D5C0B0D37F04586BDC8C812
686C653A47B40A803819C86FB0C8EF10AA1344350972910363FC0E3DB49A5D75
BDBED15C823E1E870E2F0EFB93A856F3A63E28CB7ECBF17E444B271FD92157C5
8727745CE16AA9376735A8B02F2CB426BB91CCC365CEE49AE5C9938B08DB12B1
EEE55B954D3694FA0AEC0836883D86F6EA4E10ACAFB7CE5D16F858F6DFF1246F
B2135837B67DFE58003AF012885480947A19B0F90980366EC245AE6D8D33FD30
E080775680F701952B697FC8FC07A014B78DEC48017E46AD78EF6EE80BF81760
B2ADCBB63D91D25DCFC77F2B8867BC0092BD9DF8EDD0F7DEDF2458F1F938D05D
DD4C3A7D4B3008EE86F787EACD7C687B6BB09D362E814AFBC75209C457A19F37
C9780469DCD173C5E5BB7C88F4A8FF1E664AD95E1F5D005B4F15416A320366E4
41E5CE5C8A53B64D290AC210490EF404D08C7C93531FF8CFB841AFF5A0E5A8DE
1E25EB0D03018A76C701E737D941569CE252FF92E3C0A05798F47B75B501B03C
D92B56739CF0D76A13E06283CB4F55177E3D6B28C265954DE0EC80A4CDFD91AC
A2FEE87917A4C63BCBDB24928F99D4836A62D3793411FFAA4CC7B12C934350E8
0C241E5C83E1BF8BCE56FFB67F9C7970CD00D64E7CF92F0A9CB5E672852960AE
8959AE74D4DE18D69B095F9F83C2D98F5D6D14B13E76E4686B85A3B606479B6D
F3B52D950EBCFE01639F6B0D9C205C947D60F2F0540D0E8B1B78AF3C5376F94E
D5769B92FC21082A872ADC4BE261FE71F0EA2422B17EF9C0338F63F4D4BA4AC9
D6C76169A46B500885E2CFB8671C053163F186C242F539453A72E3CD4F416A30
6C7A154B28FD021A13A11C78D113E65FAE2A6602D55510502603AD648CA7C698
E61A5B8F3689308EF934594FC5EFFDB86BED8324C690350CB92005EA3EBBB9CF
83EF65EA37BB27D684B89F18AB93968DBB6D0BD835EDDBF6F9425AE707A9E732
7418E39DC60A6EB89299E14D62AEA38D7E1ED70829196DB28D4906BF73574AB4
5DCF1FD068BE2B5B597021EC43C0396D5F172A723556BD8937D6800A6CAA33F6
A061415D49DA0ECE5C1959D9AA8513D8E616BEF8C9411F93E9FBCB6D2637AEDB
B0E719D54E5840E6F71109A5BFB26839255C305080216C0FD2477BA7613C8198
8EB16ECFFBB6D745422204786A17705DABE8FC123005E476FECEBE1C3E240E66
9EC0C64922C42D88A87D2D9766DB3E6273110B2F9281D80F004D184E9484EF54
222058917A0DFF5AEDC9213979C8716488573FC308948F839BFADCA37353F9F9
C7FC6FF049F4DD9DBD476228E880E779C7122C3823385F85F86DA752C3E01A8F
8A103A854A8545E4109BE8AD304A60B54F124EF2A6AD3E5E7EBA6AE533E22954
261017699960A1E27D714C2E2D370FB1449ED84B4169EC1057AC8AE70B3962A8
2A16D2F5EC8818734A52C2211FFFB785AC27000B218464AAD820DCAAB31DBD3C
2F0ABE99FB90E8A188E9E95E3320B650E814FA72E425FC6D0B5E245330843CC3
DB6AB767C90E8EDD41E12FA1973E681A7180A3917CACA630FB0BB7A62FAAF292
EE1F836E10730B4797B72E335F6C291A3BFD7F71EE335C3A6233735DB2A379D7
4D1CC655A657023C0B72C819D778F70D9654BDF7C3DD44B733468029F6DBC37E
1D00A80D8D9E7DB37593FE4C2AF5E00949062085BDB51E9448A41DB88FC7401F
725593E1E2281E1F880F829778EEE4197E71F8E59420EAE7964C98BDA67D7224
51A7781696EE91A0E6138EEA37EEA66A29A778841BAED8A196FA2C9DC4DE9BD6
4915CDF114F441422F0FE6F6DFC899C05D171FC0E370C9D27025B9407AFBA04C
19CBF35CBA1E6328BEB3DC8BF3F27EADDDB063543BBE32195A9AB39C791A053B
9D6B918B1E101C98DA8A4EB26FB47BCACE2863C768381DF68C4C8033BB3BBEF5
E93514207A5AA561F78B3F9C70C691B40F4ED7449650276BAF866B77FC16D797
B91398B1797FC8A8CB148D5C234F59A7E4E6F661431598B68DBA780DC8B34A19
AF4EA912CB694B86D5C7672E57EC16F21F87944F7585ACC0847A31E2777D0068
69A9C658B4729A5A2DB08E093EDFF069067F02F93C4495F9F171AB52A1A5BF64
C71D97FA60A71E3E705E51531028D02B1AD3E8E032AC8E599DE4DA19227401AC
F79915BC3230D5D90FA77C29DB133FB7B4ED7B0D7BDD3B018BAB38126626BE19
57BA72362A12E23AB2C4F2C20CE67ADBB39FCC59111A7A0A61ABB82CE1711D0C
193F0D086B49494669F901CA6013B32E0160B72239DB3C2E229535BEF14DD08C
A8E603EF0B6A5D6FD9CE8EB6DEA304E959E394802B82E7C4BC31E75E1CF077A0
6F520EC408B4237E2C5D41DB0B4395D891BCFD008BDE2F5936C9B7D3D7F7F9D9
06FD7B552B784F7814AE16D8351899FC23B6772BB69B5BFB57D118FFFF07511E
8C6E994823E198A79376EF3E24C11B6FA1F6DEA71942741038EB332490625EED
2F92A7EAA26C64B36C180E45C35457FEEF8039855872511C30AE0BD536024FEF
2E0F40D53EB1845EF5EA9E10FD5C63E01D074E58590F0C8112BC26F1969F9C24
6A4027E715AA573228315FBE916274AE6D17F25A21DD9629263D6D83E1C5E6F0
D0A42464C558BDB4FDBF9201F57C808EDE384E12A8235EC30E90CCA8AA3C36CC
C09C6A6D74F9A30B50CF7D4ADDBFC902F6A006AACD90582B29ABAC673E1C6D67
3A70B27EEDD61AD0C422B387CE691F8ED807C137C5841779A540211331282F9C
2997E5A81A6BE710AEC12B347D9238B584F24C63DD4A34D620644424F315D15C
C710ED000B0D28DDB19A4D99AC1E0E5589B7A6F7B2C86F2F7FA4CB217F201436
991656F10224C5AA8341E6658ACFBCD76E73AFAB6E5B0FC14CB8AA60A1E845E7
5AAE0C73DD9F872EE3D28075C27156BB8D803A64E4126866360A54D16EFA11DB
13E7E52C0693982399545875D6ACAEA88BA0A3474783CCEF9A4B65EE64958091
8951AC0C438C2B0413761A253A43579B0B640FDD1497DE8C21A0856E475510E5
142E3842906AA80914CDE9402E4B37D2A6E53BD127D2D3AD5149AEB5ECD8CE0F
A7609D35FB71A5E542B436D5C7D71A4CB29EE71D11E0C2769C4FE6E728D24E56
A0169D3676D3B731B35E37C70B8015A53A9C15AF4F78D0FBDCE03FDD2C3D52C7
5D852346EA02BAE2FD29487245DE75FBAB597E741336005E4A549429A51271D6
5CBCFF634640DB0D056DD5EC6D5A7DB00E37F666CA703105ECCDBC670A47CDB7
48FE6D422825339A8CA5AAB0B1235F8D8BD2F5D6A3515FEFD32540521E20DA01
A0141AA1F8B223BC02156AE4E096FED912A6C33DF4E150052091700123102EAC
E6AE38599BA0A0CB94E1099475C28A540D3EBC4EEB382E906F6B4A1CE6940F16
77D474945B0DFDB54731F85B138577CCA34AD3BF8B7677378DCCF3999EEC8E5B
5BE10FE19D636B006E7D7290A3DDAE1DCFD312C2726B08676AC7B03A9E5BF580
BBD88C779EF23B655F9BBBC31F4D54BCD94E4D1FB85ED55AC4475DE0DF309494
49CF2BC0A9C60D7DE24DA0C0AB8F50953F4DCE4B2FF8E60DFF1EA75F4BAD4B11
3C735758AE622B81CEB5A8F845B2547C6A43812D4ECF9C9E042425176A20004C
2C4A815A38E237DA4ACD903D32B7F9844B2E42AA7F5A5008C4CFBB51F2A20C24
C4EA6D69F6CC5E79CC490EBDB8A9D4AF6103A6CE3906449DCD35B922EFBDE023
3D5ADD67F4F5BCF49D61F67FB313A8E2F92D29A0B15C6792D299B9510A5DFA30
56DF9000191FA35C2999FDD7132B3EB5E95020B032C8EE2BB4543DAAEA0DEC97
3133A99719D7ADBB2678384749B7E1ED994548266CF51E5DA1E7D78283F24197
0EB74E258585FACA9CC47BAFA7AE9E116FC4A042404FDEFC6D20C8510CDE6796
BF13356BC9A3EDF5DF353F6CB8D21EDF5EB9B50AD6BE2804F23B1727C373DC13
E4B7B7F5F1A0333C4BA7842F4E9F3D067DA11B64EC3D1EA2AFD82DAF0087AD2E
0876AFC12C5777A2743F938C01847747CC7525DE041402CBAA4C45F273A75DE8
528FD3BC80427F9E3AA1EAB57E9E2F625484D388DBA06AA511B556E660B7C58C
232E6191D34214218E9C35838F7532579EF7430063A099A176DA59B024B2CE56
FAD58E3E9AB280F49EFE8B13EB67D91B6BF3BBA8BD16CB5EE0B3FB9BEF37503A
F4114D06702D250FD78E921D8ABD0BA3647C711CB3FF3CB1EAB2DD7137A9CA46
4E545382727CD0F1D75102D7BEB5737B3D3009136C2DD9950F1DEC8859F21328
330224F695949BFE58241CABC4D378ED409FBA824D76C2EB94A55575E0B44B99
5F05EC9CCDC503CEA55FA4032192CEB9D7160B024084A468FCE4AB2F876A1B22
2FCE1702E00029F29A50C636A6C59226685F2B7F885CE26FF2D2836BD9C03367
13420C1A8BCFCB324EA9D26744B77B4BD9099611FC2209A53321B737E518950C
751B2F929CFD04EC824A2439E9BE1C56A3A02420C2B86C24BB936C7752DFE88B
A682B788BF0113BC92352E873AFFFC279F2F3ED949F3ECEED537F134E3C8A2C0
13BE80DE36288A86E93DB390E241AC83B926EAE86FFDF45E037CC3794DDFF403
DC64962FAF85B9714D399C221E36A633C0BB26EE127EDE93B54A6C34C1B1F322
7503847E9CA4622FF6CEB1E9828DABB65D66D658349E0404BD3E7871E3952C91
81DA87EC0F40B008BBE4253D7E8E7EF16C916674FCC41131B68BA2A9FDB59917
8206CB366282C90FC91B59C8A0FBBB26408CD0110EA1587A07E4FB09130E5B0B
852C429A88461C2C51F924B919B8C4F98BA8BF058EACE6ED42C208AAC866A1CC
DB9FBF4227F1CCD9FFAF49713AE4B85EC34FFD123CC49EA507D36DD69F0072CF
B01CCFDD0BDEB72A427A0485F0FEC84B315C854A341951CD338D8B4E7A77E3B7
41ADBA8C621DE2AEB91E65A0D3E1BDEBD508A0CB08F4C4E57D8481592C817520
4B6BCB5196CBA074
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LMMathItalic8-Regular
%!PS-AdobeFont-1.0: LMMathItalic8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathItalic8-Regular known{/LMMathItalic8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic8-Regular)readonly def
/FamilyName(LMMathItalic8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathItalic8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -250 1110 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD112356772A65C14D49D03C7D456E5
1A27C2ED815B30E268B02FB1D2E769067ADAF25F28640307E3A89F0B04F44A1E
1392A44B8AAD82CED1539B6A9CEBF441EB81775C7EE4CC12313F31FE710DD429
4B1955DF2BF7A88E1EC21DA22A63BF63E89C913EC01EE10A0601D6FB239DF59D
2CEE7667F4CC4BAF660B24F635F981638F40E8CCF07F21F5B5FE3B5C115D1000
0E4B2ADAF7B1C53935EB7414421DB49A59F82D98D08351CB0BF0C06DE836CFD5
42D68D51AAD4069871F257AB7733F8EABD731FF9B0E3AD64000BCDBBEBE26F88
C96730B45C14458F42927E24318A97B48235E5FE200DB40706E9B41AF7CA33C5
67BF7766BD396006C5364D1E736B256538E5D163CDA75C4F419620D5BE5DDEB1
F7D7A55B5ACEA2B2EB4B78997398C7D38B3D7B5774D980C087236ACC7346F518
7607A19E85C83E2C6ED4F3FA8C15B65FC3D117BC5E3FFE33A5B7A69F7F7159CA
667D96B5D03E4C5E55FCB1F4E2148B4B8DA87567988F07CA181FA6A3C3C30A33
80AC6F4E92903C47BF489A2376AC02B00B8CD01DE080C96A452D52B4B56F9520
B85062F15C4828813D3694BB4BD3512541C82005C9AA5C065476148A4E47DBD4
580CB1ADD206D19E7D653E2690FD48B252BFECDB2C64C96F7477B2E5EA0593A9
84841E96F931F01B2B61C26E8450D5F2B37B51EC364BC2A1233FD108DFFE0F00
AE57465ADB0191B38D14E89413FCCB77A9FCAE09F59A3F5C352570F7390BE91D
178255E10C02CFB7B679DAF86EB351BDEBB8A7D4DBB9C65715A1355FC8D2C355
BB452D44AFDF7E25676F3D6F6BDD983146333DDA29DB81DA54F44DCF5364857E
A20DB59006F78BA077D29ABE7A537D2358B1DC13AE97ED90F7D1AE27A1CB55C2
F534E2B546BA5531AE88840CAA741A57ED1F4587A72E74AFA15F15C69046ADB1
B3B6C392AFD856716F96B850D6FF61144F6A9E51CC1B8A86A35087D4A3A37081
D7529F94493EB4739C267B8C54B3A1FC2146237C1D110D4A10112D496250647F
37A36F59299DD9529CD003AD4E0847689E519FBB2B7796420D8EEF6ECA04DF85
390E261B43A555BA97B9F30C18F4F39F192B2A2CD3C1D68ADB1867509CDA93D1
CF858DE8EC69D57E5A7BB2741F4713569CDA64AA18018935D81D1ECAC3C42C4B
6105C3B521226A3AA2ED3A5EA5FE176CE753C04BCA19E4C4A11ECC428F62886F
B3AE8EBC12CE6421C3E633443649187C8B38E5EE9428E1E533FF1260DD242EED
B955A9E3C2F73B641A68A0EF3B9E26314B306649FD15D7B593CF3F02EA2E6627
C292001D28A40628F89D0C92DE66489694C976E71D9214BE0875849A35084581
5873E4D6FF4EDA98E456F41F67A7063A2EF9ED5AC30A07BB8768BA4B23707BE8
C925BE37F7B4C8E511C95D4B61E15A9B84DB541D8D299C5C5F56DD69E7635073
B64FA376773A98E09E6A816DD71D80C3D80ABCB006353330E36963118A600F83
AF3F1902CB9FEDC0DCD19B1871455394437C3A7B477AC27F75850CFED5BDB2F0
71EB6873264F76A5963F0D97E0C4887DEFAF1A5E5016CE039FC62C37DB28EBBF
F30F651543A11127279FFE3AB5F06E440720BE08EE3F85DDAF46CC4190F93B9B
749C6AF33D323C2211D5ADB7AEC6905E1E94099DF34C4CE52D95FDB6A8E7ECA2
A07D4200535F51BD082591E896938B584450D9E008CDD0202DB1B3CECC4CDCCA
F87401373886FF9BFE508C3A751057316CFDC6729F65C26996C69E6486DEE35F
247C439B8FBB6A187926694EC48CB03CF1EACFD31FEE3C7AFFFF0C5E0BAC7583
F21FB6E4C8D2975DF55D9CC0ABC55E08BC81772751BDFCD4A1FEF82C144BA8DC
FD22EB1EE626D143E2530483ECF9EC3055FBEF738582004DC27F7E8E3BCD4513
9706F68286959C07BDDBE793C16F9C0CFA569344FE06F0B093B14CD9DDFCEEB7
BA24A8294C452A3E6A6E801FDD83FFDA10EF926255FD030246AC687884A3547D
A00438951DDEF3CDA03C46B2C8DDD315850235962879E04DC0D62F8ABEBB427E
01E60CCE30B0F2B691E3A8C1DD510CAC115E06D26A9BBE52E1F8AC594D1FB97C
C66F87A5FAED84AFCA8D7AA9FD3459A7A0E1D38EFF958AE17E8EEAAE67A7B343
8B6BF9DDAD0CA0F208E714887CFA684183E6C588A9581C79E063E6F8C16CCCAF
7D31955B4348874282130A00501BE511BC18F5756C90C15124CF46DFECD56D79
43807E2BCEBA9F20657F3620781A6F8CBBA7230D13A315D8A15EFC9D6CA122FB
20F73C7DFD73D704B6A470A77746482B51619B1001652734C842545C17FF7A60
C7125F3FFA9505FD190CA38A4AD685925D5E43CA9AEB873FC529D428C37FCABD
ED9E6DE990EBF8B64509C99E367989E9AFB0002D3164706C5E1818C2C8C582E1
3D3963FCF7943DD303EF2491F4399DABD65069EF962BFCB8A697AFFAF5F03013
9A27A7778F0559ECD8580C285103C020AFF7746075138BC9A3DDBE05310711B6
C61235255C0EEEA6C09AA34127DDB616B6779840DE59548E1A97FA50AA810970
F89E08CCA10480640F8BE7F4EFA9CA1B4BF9EE055B9BE09635786E4DDB7E7CD7
DAC270263599DB16689BD6296D86BE3C55CF273CF8F14D0D9C083EC6E7DF07E8
43FC508ED1696B79C04845D404830BA04A6B2455D8EC55669C55AEAC3B21C43D
69196221ECB2A97B6DA37CB6E12C2A1BB9EA1FDD11BE45D2FBB05006F5B73603
19F89E084CFE6F8436A20CE20766F7EEC84C7FE390D134694037E04CACDA820C
9B8783DEC2FC3B04DB3F7513794CD2501341C4CE0AC6F524A327B3B525CA5787
6CBF09F114BF0E59224CE775163F195FADBE1056D7FB45AC2E36DBB907335426
67D25363E48983C3C2A574B37FF53F0D55858E9EA87C70109320450FA2979A81
D2B27003132D5F1CBB7FDC3F67F66B03B27010B23B0EA369F379A9EB74E6E26A
D5E98DF60CCBF8C7D84CD29874C51FDC110C40935B783B246987CF54915589CE
77748DF66AD63991DAE1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: MSBM10
%!PS-AdobeFont-1.0: MSBM10 003.002
%%Title: MSBM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSBM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSBM10 known{/MSBM10 findfont dup/UniqueID known{dup
/UniqueID get 5031982 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSBM10 def
/FontBBox {-55 -420 2343 920 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSBM10.) readonly def
/FullName (MSBM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 82 /R put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943E919FB4E3240FEEED78EE63
0677FAF39AB2543D18C08A2B98B97451CD42CB7893DA8601CC0F45A65BEAFC64
EF72554395DA801CF2E9E3B03F65F1BD98F8C5F8EA06D7457842303C1A817E7D
69821807328AF426B9DDBC188A79A66FBB9E6193B4A3EDFE3136C6574B9C4C94
E2CBA4FE7997F949BB2DAC0D329C2AD8E4095BD18A037AC9F77B794FC389E5CD
56CC4C0B74D64FB0D02C92B88942C18B6DA84D4CF482DAF3A01E80BE483AC6ED
AE98F5F3E49BC762EF6BA937D528E751D9588B0A1E82EF0A5998150EC3854472
5A91EB983915BC1D6E2C3E615E0267B39D6937ECE0EC16162FE76676E5B69F3C
BC1AD934BECA284B89F0613B70876247D768BCD246883CFF4D819D6265302730
7E4BE6B2FFE7E91CCB8C6D2AFACDB4C5DB9688153E1D6B2DE136BF7068418A4F
2D1C0CA301B1B97290B46EE14B8286A81E709980F67382A5132F01B2D44DCFF0
9753E776AEAE2141D580E64C82598DAA6DA4057FFA9D02C3B77AE15A50AB457F
3FA5A10A3C986B22F8E154C1E564A55D3BE4487677613DCF793F7E1B57C9A925
BC57746C25FE567719A9EAA9CC44F1D0FF8F92C03132B205F57E3AFE9FB66632
D3FB3EF5BDFB9848030527FE759A5273CB81DBA2719611355F43E34F8FD7D0EC
9BE47685A2D122C9B60198A430C5F5E3F972376F0FF4BA52BAFF64095F7ABCBA
022622692231FF87514FD912B80C07A0EDCEECFA629E2734B5EFE2604E8DCB24
32A4C691DB4CCCF19EF897A9F4EA5B2B5AFCDF87AC06B93669F3007C1295E016
FF0A99324B80E37020B1080E80949525B3278DF111ABEA48E7182B6F4DE2DC90
B8D31A953343D5DB78B1F2CC6CE631EC7E3D0041A823DF2A4702AAC0F0A2F018
E5ADCD42EF2EC8AFF6F4705D30042BE7B6F866C14AEA1CEE04DFF82BF14931B8
D297C38E6DA6E587C23EF0864F69BB0DBC9C1EFBBB97B92BADC336A4AFAC6A91
0A6B158DC42E975CB5D8D2054CEF367FB112456AF50684C41F80B1E7ACAEA853
B843CABA76BDE9582090299F423519EE3AF8F83AE7F7828B314B6E36E9127419
F274E9FBF5622C5E48D7E95664D6C0C1006661038CF2C93BEF1DE34A163A2C86
693A13F4D0F052D2E183F36401F0C29862BC1B36A086524F76C7EE2C6D436A23
7009F146F1756DCADD3F70C51FDCE610E30C0F4AC538A2703423A07976ACA74C
25F4CFD6A92969E206375FB0C672E45948B0E832F2BE688EC22FEEB3E06BBC3A
272F73081A30830AE4214F2F029918FCA40BAEBED6299EDBECA01E08F27E5627
F53BC56F4AE7CE2D6273B27323AB829E2D51672A4990E3AEE84331583A99DA4E
63610AF8F10C50FE6196E3F4C1E4FC9BA6BE0ABDC81A0A7BF6A5792A97BD0A7E
7BBD31C3FDC01D734550843C8D84C6CC0B492CD1A6CCD57428F03A863E959C77
457D401028FD00FFA9BC422FD09D8B8A70446A61CB256A2FA0B59A2646D9C5FE
961894DB8B315C52008B4416AC35439E010BF90E43A05FCB2FBE8E62385E220E
588B7FE5509F1BB71150E159D01D24EE28008D4213227FE9BCAA34364B1039F6
BC142AAB19C8E9B15F0113781DF9C9B3BC145955552A901AEBA588D39D7E87F1
CAF27D315E168807021B0CD1B2CE13B611A7B5FC28DEB4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: wasy10
%!PS-AdobeFont-1.0: wasy10 001.000
%%CreationDate: Sun Mar 22 11:13:35 1998
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.002) readonly def
/Copyright (Metafont original (c) 1992 Ronald Waldi, Metafont curve conversion by Metafog (c) 1995 Richard Kinch.) readonly def
/Notice (Copyright 1998 Taco Hoekwater) readonly def
/FullName (wasy10) readonly def
/FamilyName (wasy10) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /wasy10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 52 /XBox put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox {-23 -1667 1720 881} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB02CB1AAE
36F1D7B67C605A37687A9C3F7067F07673039D1E3E1F5D9B09E6A389A55EBF12
06E72531469F768EDBC4DCCA572BD608C4BA8F7EC3E5BC61C6D949C94A843E69
0622F0AAEBF5CB25A2395DFF6342106C198751CF0B33691FC18800254AC54C04
02494A0E3670008E8BA57A3CD823BF47494F2EF9244421A8A0AED84D153D7201
BB12EE9478DF00CA573F64C2474817FF401EE94BACCA8AFC16E776665C3E1E31
89AEEC906A2B9F8974BEA7160C33F0AE7FB04B2666A5B16659D6DF66A688D80A
B531D9F866F21F15D55C6FE75A8787091359698E434EF9C129EED0427EB96787
B3F25C530E3664725C63D4C5DFF9D05CD13619FC41A001275A78C58F85FC7C4A
911CC31CB426231473202A698E5715B032D2206BB361EFCBFE3E32BC0C8D9BC1
353AAEC62EE632FC8FFFDCF6E7D928F562F689406CA00C11C7EAA723B62FFD2F
5F6343AF494085662CE2CE880B04F5589396EAAA8823DBCDE56D868B9E66BB8F
10EA91AF37D76A1BF27E69C2A2ED1D8B25434C0F205313ECB8A6E039093FFB32
983346BEC569B175529DAAD1FFEC1A9302918FC947C390A86C061AE0F6522D79
2D4FE06AE4FABA59F225D7ECE2EECD4BA1359DB18F8957F551C5D6F037F18545
CC6D03EB2DCCCFA294492ED72A737588457E5B18FA4CA0F6D6D8963CA35DFEDF
31A684FC0388D416D7BF6CD9837AD8692F284F24B80CF9F24DB10DAD0C4198BC
2D2A52D9F75CF6C52C7AE0D8D4598DB750E9CC97D0FD31EE8C598A2FF3745694
29DA808141AF4D8F8AA36D7DDCC3457D5E082B2BDF7EE060296721D44B092E70
3607B2335488925E41B22D659C8F0FFEE19A7C19547A147DB851262E47E9C4FB
0A8364BCBC1C77E29A1183EF185EF35B9A5B13170730ED52D5C52CCB460E7D37
F4F37F772794BEA0DA201C99C52F8AC2E4CE7FF33F6ACB796E55BA2372E3B035
52C4F57AB5C0BF828DC7E5A8F8F00ACE0120B99667816FAF5D736BCEBF7D45A5
79C9B5EAA32C9B672D764D2F51B2393ADC71A36AC0D5CA76F3F571D50CB4C1D7
CA77149B8F0C98198919DC43890A7D49B0A6C7268E399C6C68B6ACC0D1E9F5B2
931BAF9EEEA6ED985835323E85D72C6A607A99212BA2DDD24D57809EDE36890C
F8121121306593CBADA65AD9EDED7740C9A2F402E3908B54CB4AED249AE575AF
E64C76BA802490ABB489275E5A3F2B926955B0D961A0B9B3AE205C074AA695C8
68FC2F6997531FC328B8FC65BB06C17B212C8C06D5127A14D7989D24912D1CA2
1FF37457E65829B6E1C65A09C1A101047DF20ABCD57E067A7298091C88C4B587
84409C67D00F7D95FFA0D125FB938B5762D912E1C0E116AA0593B1231FDF3BB1
498BA3D20DF13C7EC6D40091B789C9FB7CC872BB73E6B9D4ED8A555CA31581CA
0F057B10C7A8CE1D7CDD4FE2D5332FC533158B8CE6CD3E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C071D06D71D60CEEC9FC68AAC0ADD1DD74B262
0156612EB4B21A3F4ABD34403540C124221FB9DA5EC6C7229DA9A1D033AB828E
9D80023B2C8E68FAF7A38C925E0587A1CCE432EBBBA598B201F5AD036BE7C8AD
B8C411BC79646781C4519B89DA648B919EB362176B83298EE2D8B405DC66D81E
C655DFFD1BB283F3C5DEF1495FF97C798C213036AD02BB07FD42EC5932E79727
ACF464295E75CFC635036CF27FFC42DC2919CC167CA4C2E673040B7909AA26E8
123B3D9F176F6510B9526E94D4E38E62F8B9B96E2D2D51BDA2FB7C6992B79CD8
3E40292315B0EFE711C8FCB37968B8AE1BCADE6BD8A3BA1009B34137B90D924F
B2784C9E13F0795427324E80C175BC99140171AA2F40784356690DDB982F55FE
EFFCF946C6DADBC6A907C7DC28850415D9AFC1C8A868801B990CE2D26AE40CB3
4EE0281A60063AA71E48DB8A35E05C2BEA1ED5BEC68717E95B7597AD7CACDA2A
6A4E8808BDF0AFFBA31BE1697149D7BACECF4481DC61CEAB7476A2E00CD8EFF1
37E476FE5A098E607E25ED29F4BF3409309145BD0530C8A76E85F59EB0890ECB
A12DE954F33220ECCE5E9CC4B52E97089790D08FFEEA7D143DCC7C07BB2694CA
6709EE19C11515E6E967043F9162C39D9BEB2767B7B31EA068C594A63173F7F1
67F3D6FE97087D19F73EEE205A47785EF3C453E6F77A08AE9F93F4060DD19EF6
6DA5E780DCCA30F180F8DFB0CEC4602AD1201C63D91450E7B5F44AEF32087A03
0D933A941134E74040E6E7E797E18AF57941DDF7DE2072ADACCD3BF8D4CFF06C
5B946E21D0F5A799CD011CFFE4CF0F571B4377AD4768FBEBDFCF6B49F09839B9
35B1F7AB20DBC872DEDA90B79F113F5A4BE581DB49C5EB8C9033B8050C143424
1EDB333D1DCB862DC543CE420CC26EDF9639E4256570975B25C6C1F06CFDB2FD
9035344017BAA39283C14E3AE66A14DAFFE2CD87485598645C39B92C18AAD014
7814BF27C8FA6DCA0BBA0FFA552B9FFDD54BDD8C7F84484031FFFC0AE8932A64
53D2632D9379F30231361D03BF91F74904C7106B6F8EB6ABBB29858F65E937CD
E31D67C847719779DE0B34CECE88A8F9A12D46B8FCA50DF4433B0B8AED6A63B9
E6512B667AC78A09A780813B1FF02AA967B12AAFAA0AF1B3DA27604A975C2DB6
FC1854457C67C54DC08DB989CA3267B2BE5B8178E6B7889A33771F86276E6DA4
F83033522871198AB3E954EDD88B5059BFBB42AFFC2738CA09B628CC646123FC
9C2BB8B9149CBADE7A7953FB4FBAEB6078B410935DF7D6D5064271899313C4E5
0DA12BF2F08521A17641A2F5541EC8419514939892C0E353FB1785CF9CB67C88
AF752C2A0DAB509A424DDB9649BD8A846E6BD3D374BEB6B9DBD5C10FF56E2000
AE4AA5B339C187F52630B52309834F266D778C720FA9BD9CBC1F322A39EFCAF5
85107BD5A5C188A6409352766D80E77B1270019E0EF57F31E9F13B9483F070F4
86122EE08A4870456161458B6C93A1602A5EE583461ED91A90CA5B743636AED8
1E5142CC0A7DC998CBCF84E39CE3B141286A5994C60855979B402FC1C092EA15
1A6F3762571629775247A6AC65DEFBCA10A51ED614E0C7FBC7335681207464AB
F8C4ED5B883E7A4D01199AFC3C88B0E2AB5FE014A84377451081CA0390DEBA75
7BEA45FA3171095052B839F7A2A9E41737F4A4CD704E8EAFC757116FE3012E01
AEBF584F6B34EB3F9C4B3893DF4E25B71CA17D427219E0E2F3F7ADB530841948
1FC1CD966965C72E9490C31153E2A0DAB73629A1DC0ED7C058AD150C4D5BE6CA
FCC7D71907232339F3FCD771914933CABF613F0F9FA3E206172B0B4ADD1D9744
00A8C2642147D4B652A8F1A7E5BD064E369FC591D4739533513C202E9DA91CDD
1581D1A58898DD6564B1710A88AEF94B888C52681BAEE1E3EFB4DBC694919D4F
41D01894C91D8E03F68DB550934E5D783537D2B57CEFE23ABACEC756F5D1EA5D
A74192035D2304EC4F9083716CA7906B80486BB5C79752270821CB12BE7ED0FB
9FEAA580CA187AA3C9475070809AF6881F745EC71298D454AD31AB998F5821B8
2070122634D5A247EE4D8672339B1D90113137D4FEAF3CF3A2456A8712556956
C5A48721B1B1E140ABFF7793081B2B092724FC0F129DE772236556BEEEBEBFB1
FAB1037FB0997B367483D2C8C0D44E6111CEE2EF443F84FAC7710AD0368D542E
8A629BBC3C6E2D85E984AA01B575B37DD1D9B0D453E3A73EE7A34FEFA5641BDD
67E694671B6250DAFA3D85E0A78E946C78E33A284D4F92B73D7AE87B13F108F2
C4611CD948F30F56B984E409650E9CDFFD63D996E25E5C0E0FFE02BBE2237537
8C945F31C26697A7ED159B529276995292581CB9B29A54F4F4B2D472C74909CC
47C1675DC6FB9A932C0552F8FBE17F4D8771BFC6109E6D709951694157B3CA9B
1F3952D101D6CE60D1A0A97C99EDB3FAD64BBD337BB747424BE88E67FEA44610
51A1F65159650D3A2FA882944E6E8DB113CE928969F6BE3E3B8BFB71302E87A4
5A22ED99B04853D66E5A22B56F79FEFE917A6F436B823B1A2FD914DDADEFB5C5
CA3A43E348D017CE2040752BF94A98902E608264DED8C3241F06469FE18C377E
448EDBB0823526BD66B40F0519F047195405629408224D070207499DF2F43E7D
52E442E3B6E9E3B08F88C9961E81373B96460077464C7DBE6C7C7887BEB3F685
B182706F5DB4C7C4BC2FB81A7D040EC5A04E5C5434D732318AE791EDC71A47F2
AB39A992EE304763BBA1AA81F9D74B24FA7EACEFBCAC72D673540922501841A4
F7EF18CA86AD20AD76325914FC0197DA6D7632947C4AB3AF2133D1A1E2719511
F62BEB9C879E76B74493C7D5EF38E01CC031CB4CE13C2EB6BA2695E1AB97260C
39A7CF8F690145893081D526990E92C1FB18CC4B968D70DFD13C6223FAC9AD31
2E1240ED981AECE8D13DC653D59255F868EF158EDD781E9D02889907B23F00D4
F6A0D9B74E591BADA348B09E22B1A783A8EF2AC87D34B6407522AB33411ECA4F
6C765C85ED1405A5F27B28A16751402AB278A8099E29940E719DE1E109E5BEFC
2A4098E77020110C37A90B5BDBE279918B0B31E08031DB686D518B4CBB8A4D0B
EBF6750A452A7F706EA676E3B3237FC5656B29CD5A3A04F82AC871B526CC28B3
A61D985EEB3610FCAA433B9C6D4683C512F0FDBF3EE6FF552D7BF0BBBBA37050
FCBE3F164189FDC8446ACDE8D0D4050278151B46E56AF826A0C2E9389C2B8BB8
E38579D281D5142944D3322E1C66D456E4C5DD727AA41FA5B369D5E10CD71832
A7DD40DE855B47289C449B6AD8D5F1D557102050EDA5F1641EAAFDDBC082E579
A06D8A3A323458808BAD0F4B8A2BF406DBAC4C5F555EC96E760C8245A1AD9F50
881DB475F892F868823CC55D4859C09148529FBA57A392127B68F5366491D1BB
097D8FF4A71966D42DD988F48C8A1F4DE0449E6AAE79500C42B4EFE4936D0D00
0FB339115493C16412F1D6DCE02BC7B485CC108C6321EBF1C609633933A576C6
B0758D49F3155D448D505F73A5206EC1C8886F5949790A7E4B850B6B8E31EC18
B7321E63AC75B6588774961F6B7D313B850AA4B368E48DAFAA5693CAA236E150
E02FB2831359FDB95792B2E6431DD24BFA8F2B51BC21E2E5AACC0CA211F50A13
075ABCF9F440CA468403D939B91520C652F1196EAF1BC975E26F8057F69CB972
E976F99070AD3FCD958C1EC54B3994EA142AA0615EF7BC00D85F75BF5F32B350
E2CF46BA0E8D0120BDB54910E5C27A27B59664E856EDDE290103A0D490FD76DD
09B152B3AD1C4754696B239D4B13935AC19769600943C7343A5E7A06C9115395
DC2F92EA95E5ECE5A08EDD16DF74B6297EC0220C91F8BB9AFE742FA96456E131
7D41CDCE88A8F9A12D46B8FCA50DF4433B0B8AED6A63BB5FFDFB8D48D04F9849
2972699B5667C0D2D206F4785DE20A854E1D4C655A690689B7B5A19F8162E5D8
454B7A1CE94AF723F47C6B168CB7269CC802B14545C8448B5C260C6AAED5FB23
2390D7239C22534FEE644AE96C5718EFFB9DF1AC47CB3022D3751E6B7123FB71
403E154150FA4A14EE2CDC8F0BD084CAB30272E8F065218BA88536F138B94AFA
D750F6EA9BB43271084CD876A14CEBEB86283BDB500BBC0F9E152C30059054EE
92951E4A202AB409F7D16443DE00ED69C1FA674BA3664F8BD00C08A27F475C00
E6AABE35B01B991AE910B7DC821CFD8A6B5C7F4B116E78065CB219C926D45163
EBF6E81EF0C38076871283D64FA5F2126CCA7E93636A7CCA2158B99A15CD405D
4AD290CD8F7AF8845CF78D4BE9C7F2E4DC00372530C64BBBB785117A8AEEC190
9F49C82BAD55AD174D38A74582CB367BB50ACF8FBB2C8A2EDB17FF267D0F21C3
5BE42CA518272C9F9FB2DF0780C957CF1B9734E9F49C0E6EBDB5D24ED5D673E2
6A25811D4BCA9D693EF8ABE784D2BE46DE1E57E1B738ADF6FD49E6A53BF48C6C
2A73026234D3719C72C2FB8B8274AB54A6853DC6784398A6B994BE424B6E9078
6C303D590747608AF3CDD6A51B5612DD5D49E1153A25EBEAC76FEC601CF4D10F
65DAE3EDBF9A163BEE244542BFD2849D498C239237ECDCB23458C7C3B9395C7F
900C2AC7BDEF8FB9D4574698BC8D4E374B34969A885A0A4AA26F19F8348EC621
89B42297868AD2C3E80D95C41FA4A5AF7A016D3C773E040312AA0240DE24C7F9
D662FC2E59673DEF563AECCABF724C09CEEB5DCA64FC6D24A091A75B5745DFEE
F5C1162900B5F1EF5A7102C27DB1918679E7E354A5DABF897D9C8EF5A14FA8DF
FA3A7B3D47542FFF5987268E60E7FD64B017EC6A8FDB4BA5AB5B5B58046899C9
C5993E7302C870678DEBE8FEF3F2438217BA5121CC668458620DB3D381D56770
19CDD612E5C0A267BE4F707ECE93B3E1E8BE65922315729FA5513AD13B562C5E
E145AB39905815D6C3E8B60AC5C1D4D7731E2A6B122C6F57790C42B0368AD7A4
99EE5F029AA6F8E302F4CD994EC08C00AC6A66C51254F71280CC722402E200EA
D4F6F489DCD61B81CDB85804A5EF00CDB09D9C2EE4F3D571285E319A78F90942
1C31359DDF81F38F6E8615BCD0E6CFFE077688C365888921E45608C868A0F6F9
D726CB2CD81B49A9F47C12FF76284D3B07E2C2E788036B4867F90D40C1E4FF74
60399F1F08F98A05A579D00D1ED5E8A86BE9DC1CEE3FCB03B9A0E4BBB81C849F
AB1A6089E9807455A5DD78B2EC3090E36EDF4D19FA6BBEF386127BBDB53D25E6
8448A975CD56BE0A93070F848850FB9B3B0285C7FADB28A3711C06273B79FBD2
A509FDF7AF81630306D67E0AAD0DAB78243E1B814F745234BA7CD57325B5A34C
C3F984018DC9653649786481788A6F58ADDB87DD0D883AF60455753850A63756
5EBCDE76329F5626E6328EBE3DB5770A4C3E21341C304F38845FE70E091803D9
D14037AC4AA8C4D17EBB62ACEFE5344982E0F489D72EF60183D8F2A79A3AA765
C18E0479B0255870CD61C8CF7AA8DE567D174EC90945404C5B928EAF3E8DDC1E
018442474EC6B0B42DF539EC1557722299347DCFF0347BA4273054B8062D3DF6
FF094944AE472D60DDF6CA62288E4E780F8614C7749C9406325C82715C866134
637DCCE4848D2B051B8E0EC7B88872E9AE68BB5DDC30F4A61119733F6F6DE0BF
4C6437A849A661B6A233B1C24238BB910C11D2A8024C89FB5DC745489AAC2570
4C61242B4B1983A5D0B134C8052495CBAA9D2E2E014641BD58F0EC389FACADA3
08A1723A5C2492BA0615B0222EDD152AD19C307118AC0086653521EA59D676CF
C36AB586FF1FD4C383E2785EAD36F41274FB0BFF9DFEADC612CA44A7392D8E79
1DDE1DE818BBF26CE3BCC2569F5CE6DC91D4F8B7800A05DECB300CD7A8C38D77
4C1DF436013901C9671F77F34A63F361C5579EC5E00C5A8E2FC97874F6459EFC
C1760E9C6C78E60CC0152340DA6F26C67B2E10B620750E2C44E5CB9DCE747E29
6F7E716E6BB12B699A2FCA90DFB3DD730D96D100DC5B1BBB1632D7015235F4D5
1C1C753EEFDD6ADCEB45DF4D00713744039C43B860B5A9C51AF0BEF11CC8E85B
067A402342896C9B3BAAA570C4900E12D720F2812F28626DE3BD3F3426B82718
259AD02CDB518BA4C4AD8F261CFEBF43857EC7A543ABB1E059247E276E206CB0
0BED125C8F78A665901F80068C9B0AED83074C6270B177BAA18F1975F43E9160
8B75D86D9F7C1E986C2DDA71CBF33FACEE675B943764AFE71B5A359C4A092916
3E8EF660794518DA4307AA5B38469000FBF31BAE9CE8703754A099D21B332D3C
A19A842755A79DDC1E281A8C34A969B80EDC946658B7579B5BCF07AC8B45C2A8
3664140E70CA62DCB3153CB4A8E46F12CC16254F52A26FE47FE41504D3E851A0
665AB60BC0CE5C72512D196F8D1BC0B3FC12DA2D13F4B9AEA2D017EE7E574B86
2576F5EA495F51E1B3A86090ECFDB57097EF73BFFD5E41E8AB6BF105F87986D4
95940A8B4A29E4DC974554DF975D026EA92FC09DBD65783663CAFE414B6F8C06
F00A26631D7FCC4527109F177093E7432F5FAA6CA14F1654ACCFEC8FFC127488
F604E972B695E9EF18F331A58BE4704E5130FB4984C3FE2474E6CF0935F90B79
7221D94774689E83E5406F5D9554C1284249C687A6CF5A6B4783F54267C48710
32ED406DE854CD5E243C0BE4656E35FA02FAF5101E1AE6B7CB286C9DB979D763
FEB468FC7AA2DDBE2E708D27D89164B12BD8BDF0418BEDF018EA67683158D1B7
73C6EF553EA897D5F2D53E75902E57D7C4E06D7DC83F1C557ECF5DE83748370B
00EE03A3ADB919976D4DBFF11B246AF9C2FE922A8A6F8CD47656ED2CBC816B17
3B01048BE9D1E4B54ABC0396D5203D088ED7A1FC7CC863AF414AC14AC2D75E5E
EDEB706CFB2AFE24EB580E55BD31B793E4065CE83795F047004ED88F5C38BDA8
7F5FA8880517429B9C4E5FE980448EDF3BD57758FD145E769D4E88BF43D19050
DA58F5EDC7B4AA76BD8CDAF0B8639BD5D2C7552AF5415B7F35B957F02B962930
D3D0C3AABCE7BF840A7A035F2CC57FC978684570CF6C8FDB960B9CC6E9435D65
77D1CFB71D362BAD7280AED8771C6EE2F7E2D86C5661CDBEBB354B84249E93B7
7A0E409B4D5E17600E1E43F5EA1F884939C0AE467119F1E155676D10A8A35955
BADB667DB10180DF404F43A166E2E533F1C050D35CE4AEE92C35EE391398EFCF
E19EDE2E31F837DF86F1800F59C89EF6401112AB73434A3938E1970D8EA3CD40
C7B8FB44205899626FBC269C25478E0A63F78F3460EDD4F64B4D2A5B3E660B64
D293F803C670E243F0B0EB1C548746C08C7F4FAC0D4A7FD8B7369AED2AE9A79C
74C0FF0E0B0C1AD3B59BEF79753FDA3E929B52F207382364B1C62AE8311C4337
297E030CC0CE93ADB4E2FEB60E28FF6D4AF0010D422AFC137F2254FFF6C2929F
CB76A235705EC088049C1F1B0E78FD2D357BBBFB0E12CD481F96252AB7402213
DF9BB4464515CCEA5FE4C0CF761E921D7D2992EB24625547D54E3F2C644ABABB
47914DF3ED2C719753BB1EED9C435F2D571BEBA4F76A0AD5DFDBA6EC952A4F37
948B63263FA4097587802F6C66C3BC6E9DF45A22A24877E4A4499697D46B779C
8609E85E4BCFE84319532B3AC9D62BD413CC127C8DAEBC28D7DE5CB57A30F23A
2859902409CD4FF43EF6A99E9FFA2DB4113C12AB9C616F074276C4840A546A73
0D24D8518117AD200014839545B1078F38D7284FBFC473C510CA28AB90147613
F0EBC94C3EA0001043705336F16E783FDADA674B361F951D5152C0011FE0BEAE
51286E4979DACD3F5A953BD9E918D5E46449525A4A597FF0F091B2B4794752D7
EE5D9B94524DF768ADA1377760AB1ACE2D780F5624CF53DE046A36EFB35B52F0
566623440D7F364C4030648BC39783FD7AE189510DB572D01093BC4C7EE0C09F
389FF828AA7585F9B7FAFA718DAF925AA837B8C0B647161E5C322CA820521400
5D234795C9DC1354D1C0E5ABC997C64F3C84D2C3B7581BC9566EB6D012B6B784
F740B8E0B360808C984DEC73EF57328A2347BC752EB0EFF7BE8B688A3622826E
C83CC42DCA4A26C504AB95C5232A86199FC1295D8BC52BBA9C5089A346CC5760
009233FDE0B38CD4EC1D07A9F817ADBD1AA6D303AAF94D5FA688675B55D40FA4
3C6D97741D9FE4C964FC6D24A091A75B5745DFEEF5C1162900B5F1EF59402CD5
E4D0C3953C9493D87F46CE4E9C7A543364A9B82B34154924F4739C650A8EF8D2
38C73BD6689A0657D8427446E44E2F5C77937234D1D6AFCA63944D3FE5126940
8ADA00FF11BFB205B9A42EC1F50B435E4D44E14E22056FEA071D0061F16D8879
6C4BA0C670D0E715ED9333A0FBBD15F19CBCE5F93259A6C4A8CAD50B9186BF14
62D3AE2AAEA8A45E9A29BBCF83E95F0C65B2D60169538EDFAAB935FE3468186E
CD90E2F15FDBB395191E6C4659910683768F80764D94FE8A746FD06C08F15F97
3A528084C73A3416B7D9498707C04E9115D411FD74AD771B5973E6D0A573A1FD
2E01CB1197990EDF8444CC83F1AF789DCE5C7F64567C9D80D1829D7FE5F45647
ED6B99C6D96B728840A77AAB12DF037473065B62E9F3775CAEDAD9508FA92283
6FAA01D50CBB9B12B543AF2A86A99F4D544B8974F01B52945FC6ABCF3ECD8410
335AE6CAAA4F740EFA8AE1742B115F4FA7FD8E330D0B86B191FF5B038A5D0C32
91053A42460468F6A1700953700663A85229385FB9BC726979DE858914A95826
CB2A8F0F17773C8DC86EDDB610CA36C8A6051774DAD79E4E3DD10CA06A919430
0B6FF769550AD34A047DDF4DCAD48C79C13C76BDB9A98E254804C9126F6A007A
D697659D0F4B9B7BE0BE1E74DE179CA649DEDD316A452509D2804B5BE0F6C5C6
EF94B0FC821BF1E02C91C149EBC163C14366CDBF3C81F57A352355320AB4F3E3
A84E4B60EC6CF57A1A00F90F224190D7BFAFF83C13AF40E46F7154198D7BC2C6
F10586634E82705468F167630971BC01DC641766DC254D9E9B06BD62DEAA105F
CD48375C11A3207B5A381FF8E1C163001513CC382BDC172026981E9CD05FD8DD
83503D108FA0BF72ECFAAADAFEE78E1D8D2B9E94AF57AE0A20570A74D0C84155
353C360C86120BE8A6A2B0C9D6550784FB8929369CA329F6A6D89A7066E845EA
FE223A6D26B84EE6B6ADF0D9950A195F64FD3209C6D47B46B7708F855E501D4F
6F9B939EE1663FD02D1E1D74F22C4DA4143A4D523E32A0A371A51F64CDC4E06F
544F2055F67F0ACD4E9D99C47877168E8977CDA919CA86D82794F04E7E98644D
98246CC6E5F85E045FE750DA4A9B403FD293CC436888B75949007FB2D0557A88
D362014EDFD3445233A03A005D3F670E67B8FE790851B16E71241433FEA5650A
3908D0B0BD195F64242395E6C807B7D00E12CC9CA711980842040899809A443C
00042C681FE3F9BBDDA09127551CC4780E971D3952648BE3ACB42BEC6D5B5DA0
CAF19D34A8BD8E904BBB589CA901E79BBDB311C102F70F1D2FE7EB3609B14BBF
10E66264FD1E6EAE175987CC0DE53E3799F86A71F96165AA3EFB39B7B13C5FCC
011F38E349AF6FB76AC51841B39F02662AF720242D74012508F26C7003A39A3D
65A8CE04E1583229836D0DD8CA390CFD14E80FC0417C7EA00C3BF24A9F25D40F
4D6755FDDF7FC12E90F2281180BDD1263A9AEDB29E4CEDC083E9A8818E4F0C86
5FCD780F40BED45ACF63A6B1CEC1CBCA4B0B8145DD941B8766A1D28C0EBF9178
9E2B42D978A47B6B18BF0134F12CB398D097D7FC83EAF094FB08A17E36051178
8A42A3D87ECC5243915C0BA12EC2F8AD6305A2F219F870D6A1811AD7326AE12B
896F411E09C15B0506D1F805511965AC7FBF7EF0A2AE13FBDCC2812207A6503E
B00435B0B6EF5E5E1F853052970408E1B96714C7B1D4F806F889EBE1F2ADB31C
432B7A6B88F7B26F555A751CBAF82B795CD0F1BCE51275AA635695BD883B2F6B
22C897D136C06546E80EEBD1B06127A7E7797B41DBCCE9E48F09ABAD8E116038
BEB06DC30ED8E89BBDFE4480A36CD4F92F872474D1DF235DE89D464EF44F2C92
97ECBF2840EC61A315630066630D8595A47913D246893E3D1682833519113716
D1DAC8CE1540946D3EA0CEAC72D968371521CEE81C167C0322F52C3B92C29F8F
D050130FF7C7D8E436ECA4E5227FA99FBA99942BD86CE4B46FF5C69BABCA7859
A876DA0B21819E209EFB5641184DAEAFF3FC3E99ECFA3D1376C47B399F2136B6
E9A563BB6CF6EE049BC3790CCB1FFAFF2326B40E27E034DC75E7E797B53DEB54
9C6D3C6DE98769691F9CE7ADA0F5D6C1AB83B98945A1FB9CE7E2D42213218F2A
CBB2F5361C86BECDAEEEC705F1F1DC687857D57A34CABDBE4B0D8667BF0FE54A
8E67BE8E0E51D90F63043196BAA257EDDD055A37FC3D5A6F2AC7D97350CEDE8D
8720A80DB951D1D9FAC8ED3EF4D4B03D5D15AF4C6B62C52FE635D7DBE1DEBA46
03B10AF1715EA3418AA997C16C2988EF7E0148A1DF74DA038B947205ABECE765
A6F5C39C5A27A1661D9C192421E79A5C0E3632C09A62F2A89E84964B2B68602D
92E9EFF00404DD0A2AED5D5C4A91CCC4E24C50984C346A441E0D4C268DD363A3
82E750152A94A0A0DABC97B4B2A944138C5413B08F8B757A68BFC53ADF8F88D7
F4844A8FA4414EF339406E166CD727639D26DD574C550AA3864CAD2FE404C29C
FCB9F734AC514A3B200ED1151418051744E40FB9C87F5F56E3EA0BB5CE010201
005AD0317780B06EF63A07D938C2D114FA43CE0B06A5B8FB130A3936C4504264
CFF299997BDAE4EF14F9E60E487517C8ECCA81ED1DCF6536EA8AEEA67912F19E
B02D56869F7EBC6A93EEBAC763AF4A2556E76F11E21940DED1DD6815946798BA
56470026735A1C33E62D7A8D23C21F63B4642608AD851A31DB1359721319B911
DB91692758F1907EC08F5E8ADB0E9A092174032BB57DF31DAABB7DE1EBAE20A3
8DC804C230E228574DF9E9896FE3FF392A00DEE04E3156C97F8C103897DF3058
6958C707F0205C3F9872476833B252DE228173010F59376FB1AEB72D08E929E1
630A7750DE134C6DA77B5CEBF5D03BBC3C2FAA19D4E7C58231807317CC077DFB
EB40EF57CD4DDFFCE7B9035E2CE43776643E402FCA886F5949790A7E4B850B6B
8E31EC18B7321E63AED47752547DC27269C1904CB0CD0160136BEE30A0B65D10
BF4D7CC2F28CC4EFE8A891B2A31968694C04BAA55BF3CFF37AA1D0570FF3D683
011C315D6B938837DF75D2AEC19BC7C0F4C7A421734301813921B971F6B6E7B4
1F58302FA1254A1FE3C44528AFF1B6638CAF87F553DF1F0A84DC8BBD23B356B7
A1488750A4D98DD7966737111A6B79BEF479A567BAB3764282DA78B388D27A6D
EC10E1B914D4201B9A4B4971ADB498B74F8F86EE5D21DBD34CDD4E03E5A41ADC
0636AFFA3A9031A7D52AD383ADEFECE76669BF76C5EE35D36E883E3362E8151A
38AD6FA6A56560228EF0C0B8703123FB2153DED6B9D4555BE6678F63311F130D
EA693AD05F6FCAAE4BFC1F60C355698E356465F57F984176061723F228A13B73
04F3254E39EC3E810060742A7B748BAD4C7AC5DE779115C57BF3DC3E66A13B29
3409C469920A5E60BE73C36611705DF0DE76780DC2934C4287B17F5613AF6A08
21CF81AA3BD93F1BE08D614D0CAB75DC0396E0802ACCEF1ABA9A1CD9797E0562
5080815C62AA5706D772C8E0F2A3303895C92605AC43CEA7CA7D3C3A6403B9A7
675DC69ED861AA0478A60C98204C5747F1FC0A88D9E1C5058E00713382AA8099
89562C3BE6FA1B3C3155C4C2C9D9B6784C80119CB77D9C30A1FAB83995414E9D
3900926FA8087A61383E01E64D3344B5A6B6E1AF4FB0AB0CE7F517E28F67D1FC
7629636842E7AD3ADC6C73336EEC461C81B8128C629EF0E86EAE03D5EC474E7C
E6AF8E5C9A33F4E490CCF8636921014C5E850C6ACF3DD244C32A9E4618FF40C4
90B27180A053D6567A2F0F53E5FEDB788C961BC74FFAE2E26DC36958C619EE29
BCD29A724AE4024D5B5A6A25612F7378744512C5BB5DB4DE1CA9064368A00D89
E04C07B80303E089204A1ED054FAEB7C41A0858354B42706AECDD9AEA1AABCC7
00A5D6C5B7D1CEBCF30EE34E39143E5676CA9EB5A3147745E7DDE2364F639260
77121FAD39A304CB7BD67738778C600E9F7FFF00B5B895884BFBC020895A26A3
8AE6A350169601AF4CCD120E7C16E6B195372FAE49A9212103B3BC5F55E235A9
0201A826568CF2C21EE1C54D4CE496E97C50334C156FDD2F9219C86854E96B7B
C3A5B87E38409DA085A2924AFA002FA83DD86D63E9FF50B21ACE4ABFBFA159B0
7ED5C93D976CCAD20691B072DA28B696A9284A1DAB3BB85A734B583B3E2E7960
9CAC4A2A0D12DD59CC296BD8D69AE3E4FA2CD789ABE07054E39695AF6B99D5ED
BE2499BF00ECB6C5C0F3CB6F2433FA5BFCB2320F6AD8E6CFB0D2666679C13A65
E1D6872B1873FB09BD48225E110640A81C7C151D784EF671B66930A143948E27
E1F2FA81FE54BE6C57EF8C2B2E460F086265E1AF2573482AFDDA9F1D252FCF3D
CCDCB3A72541318543A028C9C9DCBFE53223D096351D214B3DC904C32A71036D
0A741AC388F04B00DE2653B18C99512BDA16157E02FC97731F1B39A4924822B5
265773A5E86A17A4185EEEC3C4AC7AA8B27CFF05C5E768115C104826CC10BC78
22701F493A3471A97B87D1E05B7A9A4375CEB76B0F1827AD916E268A701EE540
4CF3ADD7D79A33AFD79FA05F287659B8D7B2924AF04D875E139FEBB73B10C153
AA656370D0A0C5489848C5FCEE650ADC55C703E9AB03C4C817DEF45CDE086413
5B202DBF7983071104BEC1B29A1DEA1E99918B82D8BBDB1DCFE65325453720F0
2A01A0A015630066630D8595A47913D246893E3D168283351E1A7D6609D033D8
0A82CC481EAD70AADE0E2676CAC461FE45040B5255F62BD2B6A93C68B79E9026
102990E062B5B058542C45F05748B1A1A133EC7DFFCC255E05EB66D60ABA9EFE
F377E49B7A134356A0994785F9078D1B8B97E8E73F801263DB7DC7EBCDD9B3D8
4D1CD5BE08DB019DB26819ED22A9E83B7C851AAC3FB59E4C7FCDCD4BE50BEC9A
4878ED27E515FED0D26FEEE69602B2BD58D145143D2FC60563D081F110CBB181
C03581AE7F5CFB6E2B1E4009215DEEF49B959AE6CB67471140028BDB77F8E0D4
EE0B2C0AE9D1AF457BA4830AF3BC5AC25B6E250D2CBC6847C10CDE73950A2DBF
81F7C3B10A749A1436FEB673921A195027DB020897E28DA4C2E24AC43738F842
045A04919A108CCF28ADD9B2582CF6C3178700E56D15B63611A51C51B31574B2
FA8A71BA89DC8F6F167C7C0336FFE6DC170CBF5F561E004C322217D2A01680D7
EC23747CA7156E5CE91FBD5F44F0E247D957956045B1613112CCBB7091B33FEE
92536D6EAC29F1F7D265EA9CBFF5415AD85E4004694D39E05F5E2AEE30F76D51
A3CF5FD037153F66F8765090E7AAE59D8053AE0BA8DB3BCB2AC0437FD14A2941
15CB01446379D93A84DA7DDE692830CEEDBB812E26126498DF01A8B4E7DF01CA
E49DE944C25FE5771EAA9AEB426146DBAF38651053E5EAE46AF5F5F19491F679
C2F3F3CC8C5E5189F8C986AB3EE576DA9DF54E80CCF9A71394B4BFA8CED0C416
64DF7B5BBB015C15EA34DB8B90F2ED9FFD88F15A1BAE76C6EEFC79C130434BDB
9F865580E510F180C63CD039D399B1D9C4208BDE9841363695AD2F8B3922A609
7DA81E6A3D4B3F340503E6D9DAF82EBA11D53BEB168DAA474049FA840261F7A8
A976812A938FF436B01AB54EE1CE32BA926E34A8F8C31D8643EF6B051FBBA7EA
E4D5967EC3646F547C1BB5DC530423DD7C44A82B622327EA30ECA42B8CB89314
E8AE0CC7634258E1A49C6B865B75EAA21C02F7007978FF715B59DB48A55F4E05
03D39165A53031425C5E1F37426ADB7B3FFA6D2412BFB5783DB3C0F6D60E34BE
594B65D76CDAE5693B2E8739D9BD57A4D67E09514EB3A1D2DCF490DC1EB5FC03
C43BE397E8115F3A0C322EFE02904D82B3032B82E7C310D4934710441F46312E
AC995D35324DEB1A832126F491688AB4FFC28B25F44AEF8261BB77AFE63D26EF
D97218971819C58624089FE39F416FB3FC681F6312B9BC458258383E94966CDA
9AAB97986B5C9091DCB1F9B280BE8D374A8D48A10B2713DFD32DEABA293EE9A1
77F5C40F7C7768A67B861D5FC2887F1635AACF2785AA6A7EC9D666970F39E1F0
1522BF2FCB6B28C527C32DA580A7A619EA936D0B6239F72579B0E99370DA9C9A
EC6822571F3B782893E1631735FC7FEF8384AEA8C2273268144A010CABC53339
E8CDF172B872311C783A8F2BED76B849B93DD14AC40A4E4226F5ECD3DAEA01CB
2604024F955DC5CE4093E2F1A817C538EA4F64E96C20699C8A54F090F212398D
1FA9D5FF8CBDDFAFCA66543CFB72EEF26CC3F3561B1CA13FDB336BD4F041E9FE
46C75BA73BFF8D88C56FFA843B1EF3AACA3FCEE17C7835239CD82463FB4A243F
8C74C0035ADA5BBCB0E724AFA0F51B8E2EDD6E0ED16D2ACFC90A1ED23A88CF1D
EE3F583DC78DFCE980BD40FB1344156DE7712A41673F44DA2E1E7D41DF6BA988
0AE784071E6B3E2101F0B663DE14DB1ABF8B7951914BF2E9C684E2C80951B24A
AACDF129B2BB843A35322415E37E745F1478DF48659E20919F519EC7B7BED843
F35548CFE3266DB0E088F48DBD44C379EFCF03E929E6C390138AA7A9BE8E9EA7
6D1DED1866D5010782042200B3914DB7477F4ACE3E01C310717FD8D10B05176B
2D990696B3D4677A6D2AED73403C90884F55AF936438B4F0B1E942537CD9A3C0
6DA77812BB4EE9929C9CEE82C265186552E9231CC55FAAC46EDA9984444FC750
9374E11C1651D0A365FAFC66389761F5436DA107749746B5118ED2297F5A7BEA
B0D625692F612266A93EF535C72093AAF178BF91230BFE3F36B8A0F98A0CC800
A501580CAF3478CC65C774E5244912470606D852A39CBBE5E41174596443BF7D
A121B8C73AFB3730AE0710CDBBD49719043C0432C014E7CC244189592FB944D4
03458FF43F071C38FEE3A811F2D67B799250CAF11120873098B5138445288FDB
AA54FF0F25A13DAD43232F7EE4D840B4362172F75AE64ACD2B72602D2A8F76E1
3CA240865F625827B5B14B93CBD317817EDCC1726036E156CDC649D036DA3DFD
DC31F576F64475E62FBF30074B701B39665F4BF41393BBF474A9CFA2EC28FEC1
3422167D2F49D7601A570BEA14B7C813C7EE435E6B39AA70A9F61CCC446F6FD2
D440F8B6F47E9C8E5C2929BDC7EE14F6D868464493DF45E9E560FB40476AD6E7
850D0E405AE6523DC0CBB3604025E1F18331E151718268DE4D626FADFD70DE44
B561BA1BD4626A01C282FEB8B53E2972147D9EBD179E3D9F1452AC0613F8DE36
1C46A55BAE9F54A1BCFE5626C854818C35B88DDEA6D3A49A83886DB260065E42
3B426EFCAD8639CB438AEF68DB0DF2F2FF138364824C7D41C3B93D9A5B6B2091
FB0F74E34F73B119BE0CBCB087ADD6D2804D2B798B301739E51DD451D8071BF1
B58C840313AC91D346479D38E0ECB73664581BA1552F680511B5FE3EA89500B8
23A0FA5A18321056A36750BC67D3CFBBE3A4B914ECDC45179F7225B6871B570E
BE05C9D95D8F947BD7D9F6D539E4754CD2C62F1790F8A442D94ED07F5F983965
896021A6B8466391813B9003AC9B950A22EE900DA9B2A80B9BFC4919F2483E98
68E0D59E613B99092C8C0FCD223E4499C14B7B552BDCEC37E745415462F2538D
A2D71EC332D6C13A8A7B92514B6CD803081AD247BD97FBE97DEC3941BE4A948B
3490EA861BD99423B56C2084510627CA5DA18A0F9447DEAC39141E4A8C8584A3
8E57441EEA00961DD0EDCEE6CE7F6AD035A435017F8EDC6CAB41EA6234C70FF6
EF6CA2A853FE0F76AB1ED5B97A1067B820BDDF5FC2AF9A36305E36C2A2DDC690
256D2085B52886DC399FE1D8CFA559C93999700F1189021D601510F9AC22E36F
01DF05AB58428703B5F8FCF7156859F14E61042D5A147F0A784F0C5A4E1934FB
A251CA55B73D7515D4048EA67AB4E1DD05CDD42DA117D5956FFE7111F53C8D8D
F395CE9A836EFFBC02B41CBE8D589CF50BA27804E8971CA26B393A98569E59FC
7A33A9F31B1198C6D9980B7C21ADAA911578E0CBDBC8FA2043BDEB19CBF070E5
82307367F5F9AC09ACDBCF4AACF533C80A39605C9702070CC252B957DFC1A97D
522C07B0F972DB969DB77637B6E22C2CAFC254B52413A107BF5B596BAF902B8D
63C8A18E045FAB03CDAA01086862BCEF11AF66D26B9A0D11530C6F70C1B6E7AF
8E11BA4798C1DD2EB7D4F9620F1C42678C956D013FB0402EF2F6C3B06EEAFF00
FE2602F07B88E183809095E88840F703E9BF997E8A6666919D00D517CE6D9C2B
C0DE6516B649A4DC292CA2AB1D7823261B7B7EE08A4211AD764B9A8D9CAA0D1D
E3106460BD438275B8B18D8D9B9D2227C7649133EC6A81002AE7A5918BD0EF50
FC3859C0CCD704BF425C64379E8F07D1B21CEAF609047DB5AB1D11EF4A587E56
9A48CB419390489F70CBB069CAE6BC5F117865AF3389F9B24A1D21A9CCBCC365
9E3AC8CA5DF66DDC7933F828D3CF9ABC2827A6200222621DEACC953EB5D4EE5C
195C81DEFFBE1E3A195EBF7787BFAFFD9A066C4CEAE0ED581BC5A9037A4D15F3
200B13F44F655AD6FC40955A3EE68C16EF312027D054C0D88996599333FDAEBA
AB30E04E3C78DAB918F9559C31EBE12912B39338A6BD32CEDD4E8A51C229D309
11AC105F799840538DFC9B186642C1FA978B5AE2733334BB5EC0151CDDBD053D
D22218B8B0B71E60CCC50CDD5C6DE465C7932B3C509D3B02172583CE1449920F
9A073DEE6F9E6A6A1DB9213C2142AEEA0B692ACA1E819ABF89C01007F28C5A80
F4BD3C2C515EB5BE01853F7F1EA8A3815901DA3DF606E424677807FED4146096
85E975670E68DB88850EF4DD9314C0FEA2661CF8688C3D53F22AA0E1A26B1F9A
C6202BEA5AD2C4142CA7D8CB954B8D0C0C2BE2CB8DE317F7C1449E4F6C8AE7D6
7AEE9BE9CD45EA51767A0C5ED8C8CB4191E950DBCCD311A20B14B4177092A52E
3F29539FB7F8E16596FFD4151B332C718B173132660B0ACCF1CA0A25AB10E00E
4D5A8D0C3299FD3777981C789FD4BBE40DF2F03232480D73FE00AF577494DA7A
B6FB78D744C9ABFCD095A12C405F561BD9FBC456DAD7FC9C900C91E6DF15400F
35F789CD093396F0E34A66267EAD315CAA69F4DB314DC26ED5B60252DD152E0A
11AB38A0C98C9BB1216EDA7BC3094324CEA4FD5A9518236B742F3579E050C9FE
A8E1EF4F3252FD330D163CF0F35CAFC0D61E05B8B32000D4F6A0D9B74E591BAD
A348BC61386E71104202FB3F677DC4F398E82228CEB92CE0B5E695D536274984
B73FD1A0039F86E8489003F84951DB86742C3EF61F720CE7F7788599AAF3FF46
CE5AFDA1081D3E544F7F4FE29CE4952D5E50B1AB34F96DB9F031C7920CEC9A16
4C369C237DD28FC4BE2843036E872B2A04C4C2DDD09A780E3211EFB72BC5B2CF
545D57AB4B9C46F8379EDE9399E5B127D646FAB0A8612DCA1CC8DA7A3C5E33BB
337D4E9D38D33E46E3F79F2BC92D811CC6DAB2EA0636869186AA71F0C1ADF3AA
8290123A8B67E6AE0C769A5E8CE27B8C4B6E8B4F056867F1C0B014E2B65B58FF
1D647BA03560E06391BDE9A02514DB9B144641A5B2548D2909144C30A00A6E01
0B4220EBFA66EF79E0BFA03358E9F753AA892BD9A7AD14F509BA49C6320EFB42
1B3B10694FDED4B3EDBE4FE9C3DFFA5E45C08D537491AE24293BE475B6AFA056
DD3F3F525DA26365A2DF7F72CA78CAC785BBDD2D86B42FF91FCE7E06435BB294
0232870251A35518DFB99CA7E44B6E03DABF8ABB73228AB478B849E58ED08010
8F18DB3ECC698AEA11E32B5F743B75E26E66A24209E1E34EAD17A0AC81EA7357
571737966E650CF2D73DBCB019395239FC111EC0ADA17A90C19A43D4206E2B15
F0ADF54FA750FDAF7121246123CFD3141C81FCC5C5305259AEBAF52AA9BCBBA8
C9636E63A0DC0690DCCC7AB8828C02B00920293556311878D421BCC9FFF72437
7740502EC30BB318289197B74B960686FA892002C19B3221F02826617596B585
5B28202F696BF41B341A01D47A5FFCC91ED4B7E13900CB00E970CAAABD5E3101
82F66B217FD6CC9B23CD9DBB08CE4B28C377375572C513E842F42BFBD3511F4A
DEB1E990D07CD4D46A5703E09CDA5B195BF1CC49F81022023B083A73BEB9A932
238BE4D2DBFC52FB6837D0AF6FFC27B43A9CFA3F57E9478D3251ACCC0EA722FC
9DCF37794E7186404D252F9A0289664EA62E732C4BD3A421E8F13A717538E21C
8554823E5377C82C08CED9509AF593CBCB7B0B261E24DFD30C40B6D35742A408
FA77154EB77D6F52481690604E0614F792804C8C32AF13165D47FEF1D6AA9194
0F93EB95905F74956D7C9B33DF636E35011FF6D197C9B8FA15F1F8FAC9AAB396
62E6D137560A8363F8D0B481C71ECCBF5D498496818C244467171449C73BABBA
B53F4CDB1197769BEAF49D19F0841D5E8EC7CCEAA4D28DDB3E14935B8CE43228
548E00800DE1B6C627488ECE138724E2C9BDD46FADABA26B5433D34C2AEB0760
31841EA02BD6006B6DA2CA24E020A0FDDCC0498D74594AE3ACB0EC7104EA49C7
DA55875A3CCD94F522EDFCAE0CBDD9C92A04E49DF56331E837562DDFD2B9A20C
64458327A48F3351EE3B21017973B3B0C45734AF5241C5ADA1387512EFB6528D
36CD1DCE4AB6E7671F4276E6CBC2A4EBA4E6ABD17B534BD65EDDA5B466A2B687
F0998FC59BE4B93F43805FE0EB7A4A5B00AB550C451413A237842D91C888C4F7
6414E6C277543D4AA0D04B945257A16BA754214E9256E95A6B429C3E4C9366A0
32CDDA2F0B0340F42BAC73E5382A5F9CD71974101F6C389CABC69B231B033132
6254BFB119C6057DBFC2B0085C818FDDA774EBDBE7A957E1602DE3DA6F20B595
7F6F748928F9156100AF21730FDF1AE10EF475F585B2E615996C11BDC84BD9EA
252474D8F9450FC341D125DA3A11FF534B375CDE3CA6DD714223D35D69FB6BB5
17B593AE025E7DB76E3B3E083DD36D72F6A3B64826CD95F02199EFFCF454A40A
C29D2907B15F8C6AF233C3C2792A42338D892C8E1C2DAB56438F1FBD0E63A5EC
278081506796D4A5CE91258B1C760B7B254B34AE37084F9F621C590DC9F91688
A7F5806B6D1EC164588C020522D7263EAA89B3ABF870834A682AB8809F82277E
FC2083F279926A360E4B995EDD16A401B12A1C0D488AF24BC0B83C2D2429E576
E97C39D2034E884EB9BF9BFA200E8DDCA68FC9E9478D07F4C6EAF1D37D624314
BA2AD28316C66821F40E54E6F57FE832B12306953241F8F05D06EF7BE0D60FD9
96223903C9A02FB433E08EDE786CFC2B617CFE4D6E5B4077B438642E42F89BD4
36AEC67146942DAFE5DDFAD97B5EE4B04E0B479D31CB771B40D48806F82B4B5A
A65A7A9B6E99FED552EEA2F20D725EB5F1A1B135B5E5097E60AFDF729A535E05
1501D8107244C8E2C33EA2B27F97F5F7C5CD526CED2DF28AF1814B5845898D29
7A6A791205A854F67B54A58AC1D5D57F0DEA2E45DFC9822A4CB5B59E51E6B799
03D29C1C63A7964CE23DD2F5563D5AC32CCA4ECB7E39D3C74723A53E54044AA6
A13F05A35BA44A62A5EDC245455943A3DFE5422C5E45E5D0CD32FF862402772B
16F6E7154C570048AD99925459B26B502DCDFF0B2514EEA06C4D3BE4D8D2EFBB
235EFEFC8FE8B2D6281A9F1C30D13BBBD899E1113DB8E9E10BBE2AAAF759287C
6F4150C4774423E8C99C28166E5FC3BCE52C13E22A5EE09FF45F2D070A7FF539
1AA9BB2001FF87704706D141BC860829C1FC5AB7FD0E50294C91E426F122286E
F473301DA3F5C5D300555AAC9230CEB38F253DB2EAA39E117FFE2DA4B5BE5CFF
577D6C74AE6F4D4B7A8DB95D4EDA2C386289EBD7CCB6319582D7B0F7571F47A6
67323B2D8E5C8C129AE6DDC88039288277AA477D07BBE7D570327ACED1EA729F
BBF3D9C2829B9FA5A21173244DA052356338CC0F8950392B6C66759DEAAA6C9E
414B784A95EA7DA862DC3D3E6426D42279B1853D20A31C612CB246B36F01C671
0BCC3064B3896E28AE7389D260CF07655CBE427F4C91C807F1A3B23B0DD937C0
CBCED5F160717097C94BDEB5DD87563AEA655AECECCCFAEE257464E2F26DF464
2CD37869BC08F102BA0EA2EBFBC82BDC7DFE1CF990C5349F494200A88FDA22E2
4F5D5F7DF0EE66CD58CE0C9013DAD8E90216B044810A668F1D6928EDE7C4ACB2
916B86943E19CD454468FBB4187C77274565235EB9C1764AD9D987DEA4536807
2750CAD0C9ABC3F4960F03A501C5BB001FF37B292301F1244DBF5A2C79B9B609
CA550922E73CFFBE4201AD7462760440A2317E38B2995775FDCB5F12391781D1
555E66E0D67549FBF0833BDCCAE990AA8B26441324A228BF89C162EB68EA6DB1
574BDA5274485AEC7B63B1A63307494907D3050FC9D556B01E8A90F3893CB2E0
B4C75A713F443B08792A50891CF476483DD8451FE4FF72E37B03CEF0E2DA4C84
2ACF7C33D5F487598CE1C576AC85423EC679AFDA95EF3F0F9657F4161F425FC7
831B3FF7FF114C014E1DA800226FFC3331E33921DA5D3F2E4484D88CEF40CE31
3C8754B85DDB68BD9644EEEC6439D7AD0810B5407E1085B1D510490E597C17BD
16A11DFD7D48F4FE71A6869C42FCF442B648AB6C761AEDE8AA97262EC0173560
C8F5722743E02AC7620BA3B1DE132F1BF1D98869BFDBC9E1DDE716C4A642869B
B77B93F37348E5E9F121810229014271364B9050801D1F3041B13A105DF8C41F
14E954B6395B87FE5AD8CB90B1E0B6FEEE1E3DF06973DBC08C1F72289D2F0DFA
19A971CDE9629C0B16424CF3609285DAEB0115E4AA069D84EC735F63CC8A9041
7E80E396349CCE3D47F08AE65138CD662779BF9273B7F448B79D76EF0ECDF6D9
3AA535986D70C6D02EBA1FD4BF2EC6DCCB7B5F7ABCBA1B4B701FD053FF0F727E
E7A62C4A4C0C8D10A93430C7FD647B873D93D17B5F45A358A7A162679E52850A
292A04BA1ED15A0EBF2C8F288214125072AE15C467502382E801BD0EC484A189
2E79A94AF0B3C21C166DEAFC24FFCC9696E826E8C364FA71301D51FA54830E23
648C1E0DE52FE77D3841B9FD401A469962DF6BE268D3CEC78F0CDCA08E3A714E
15A869A760D44D5B355836833BD1FA7CE1F62ED81160B6A5A4468B2B2585EEEF
01CD882063EAF15D3973445ADC0F6EA36C6DA9CBD276DC4FAACAD5A1706F843E
857C6FC2C1E3CB2BB26E7000AC331BA4ABC5112BA320C636173D5D9EF4C45B08
7BC34E8F14FCED37AB55EB94BED0241E39A771747F79A79D9BFE1996455980D4
0DCF76E7D4AED20EB63AEEF38F8BDB6AEC7B662102EA88663237E82970FC0EC0
32AED2A2FD2D948114EEAEA1F50C497704AD5892D7F2E681EB1EA12AE2DC994A
212900B3DAB9948677AF0CBFD70CD2844F5601EF69F8182D757B66970563255A
4B7C49FD16D8FB2177F2F088D2A4F66A44ED8B88CB1B2544153A1AA8D2DAAD95
397886DFC855A5FC36A7C291A47A69E9C57AB73343F5FD681D5BEAFB5055592F
74B91FD7F78DBAF995F1D86F8EC129FA664F8841713DE784371B9FCE178F9A75
F3504749F3C67582004AB0973A5BD735736D9A2DBC7AFD01B46325492728A57C
D458DF6ED9F8FAF6B0A70F46877976C12C6528BA7622E2E44E7C653774029E70
9393A4F8DDC885E8102ED56EB6794BBB90FBF34BBEAF282A69007BF67B5EBC83
8FC0B5926498262F418310539EA4CFCF5990D005D60E8D0E067E2A3D0BE8B2D3
78E5E3EAAD4EA0CAA974517C1141A7903C924ABA53A4B5C7C390F436CB4C0A1B
56984FEAB4F519600668E48BE0C7A590D6C817424D3C384650DA926F24CFC1AC
7172514CF1F4CC942F4B98E43E8B3D4321C04AE86EF9AAE55767C0809544F529
1CDAA0CE9488C855936EF155DC90A020CEA122A36D71C5FBF0007D6DCB2A974E
04CDD34141696BAE8F8DE78320F88DEA6512A0AC1CC00800832AFE4B841DD774
7062821F3C9F82169E5FE0D613468676A21638730B3AB634985E739DD8E5D987
95FB0A08C894BAF2BF8E26A9102AD655D5D49203B02F840FB06091C8BA03B62C
F71D52FB4D17ED6234C70FF6EF6CA2A853FE0F76AB1ED5B97A1064276E76E333
BF24A5894AA474C9F08EDF66B627B992CC0698D646AC1CBBA7BDD35F637D616C
7003024B08E527812374D2950015F2EACCA793E7888C26EE723E78F3CB3E539B
89DA648B919EB362176B83298EE2D8B405DC651A522C2D87ABEF72CEC76681F8
FF7ABBFF2A12FDAEBB2F12AB5978361D83B9D6C514372866A572B31491F9BD0A
742ED042F0A9F8DD7CBEBE018E1F056476FC098BE08AD2F4571771532737CAC4
FE269D52662BDA70D7019DA708A2A4254B80C17134D2308CDFBC3BF32EBB01BD
6D00B71C87B8BC5CF59F64B790DADE8D58756157053F86F4A129B6D09B560FF4
3A19CAB380E2ACA02B1F4DE659CECD29C31F9E8C66735C59EA38E3BCACCC6F85
A6E451B6D459DB33A4A8A1BE6742EB71BC09CF1FCC9E7E83A7E83F5C91D4689F
7553DE7432E5B553BD7AFC2D8E6F339A46E1917DA885DD96133A5CE1A290DBBF
D88AF285A7BBB711D0E9CBD331ECA61B000C13A681B5D7FEFB9C0D8A97CAB9D5
1FA9412407E10C4A4FAF36CD27DA3CB90F384CF8AB617BAB11A3A5EDA03CAC5A
C431C893607DFE852F3BE5F7F9BF42EA170FF2EA98485424B855AAFFF82E47AA
FEDC471ED6488AA685D04243BF460051DA59D4B269BE8AD8FD28A9EF8EEB25F6
A230DC6AB0708EA9048247FBDBA229F6F44316033FEB0A4244F4405709FAE17F
AF63980C768540A8BB14D390F350DA0CEBF7927D5E289AEC1BFB8B6DA74EE3B5
F2D77AAEA3D3241C59C9CE7D6326FD0229D451A1EF4160C90D2A1B932C5284AF
F153351CE0730E2148AD363D40FC75EB3F94FDF3A7307A67F7657E96DC43141F
02009F1C1931DEEE7AB6BE273A084E4E325B88AC132D54A5A908B5F2A32F3896
0F407A2FFA629095B531FC4DBA01FA187DF959E597FD86C9DE4966A66C9F2C85
01A2E9324D5E6F0F1294E1C0AC67EFCDA8EDA5BF150E373526CF55A76CC97FA4
7FFDD7D8913791DD48E3DAEFF4E3760A8B0E1D0641C7768CB7980CB912D457CD
214D05982AE778AEA1330D4DDD264FD3C872308F2C21B7CBDECEDA8B484FD4DA
121C010A40A2D04B35C085CDDB6DE033212209872667423B22D9891D718E11C8
1A7F567B7814B47E09C2B12838DF827ECE6D24315E612F1A0E540B3911A7D284
91883B928672AF8E7F5F27F67C9281DDE7EDA445CEE41C9073FBFB6DB15CED38
94DB7F3E6174779CDF1D7FD2815F9092C346805F08F4653BBBABB95F57397A31
C93330A149C5D9572A20B495FC41E49E8816E1FF70E1F51F027A06DBB5236240
484C56E5567ABD3D9951F55183CA0B9098477F133CEE759D8359A5FA8DA61D2C
C4A2247218EC017302C9A10B8B217BCB06520983CC6741DE803E5B6EB1E7F551
7A86048D4A0645BB84A6B098DCC8D21513741301029A9B2BB7E29428F185FCCF
89BC0778B174A9FB4F5872BE9544ED37FB1E796C29E1E4453B45FEFF5E341613
DF5E22169BD90D12DCD840C0DB82DFEA436DEB4794ACD823CA8A116BDFE44465
D651D2236F883F1F42ECE339B694B19D21A3B201C0AF945259EF364631E8E8DF
511894E8900D786DF564EE95F42A411D26C48562C814D59494554390A5B534FB
16636516C6190C9681EF5494CA7A44222AE28E49BDDDF620002D182AF8045FE3
24CAFE784CB873F37AAC5ED2C00F79A4F0E84F0F996562DA5BB51608D3FEC3C0
1D08BBC8AF9626B1DF061FFD64D5E9727ED81446B1BAEB0D9443060D79DC3EE6
5E742ABA451A2E501EAEE1004CCD483BF1AAD3FAB74C2B69537837A2B70DC090
8DDB4ABFD82D5167D7A4C7C44F78456C84DAF476A00A96343D7C8537A5FCD099
50C59D0B79467CED736D9EE1F82F58620615883B0E589EE3A0E0FAFC9DC93DE1
77F14F02B3C92F57789B62A14E6495133A1B3B110F97D9D17E63E0FDAD510D72
1956F7200EAE8F93ED95AE429D7CCEFD9D9BB24F9FB191508C75C058F8FB6539
9CBCD9C9E557DA75AB3D8F141B95F3251B6DABD584F17C7524786CA53B78C328
DE953F3494CB99CB209FA97A20E05E027918A67FE3E0F8CC792879EBA47B6EF1
6E2C6DA9D1EB5100CE21181170BB05CC2CAF62830C2C50EFD34C4EF05D228D07
CDCF8827EC04177712A79AED14FD6A58590CAD14A92B83EF282429D430CE35AA
150D692C3EA405779F6C395E1CE48D9D7DAC7D581318D98098F86960E14829CA
617A7737256C6A801B16C8ED115437A8EA8CD328F1BA64E9F096EA448EEEC367
52787F85EB045535E44A641FFD86F1A234FDF8ADEB552B7E7E10AA577ED3D559
049144E28A8B6DDDB556D22D3BB579328E4AD9D5C3475D72601CAAC1A9F7E87D
D609A40C735DA40E068D61F2B9B0414B8F0156C0BEDED15F61B43914C6D17D10
38335DFB13DD913ABEE28BFA1EE081811FEA1AE3C2AA46C5AD8DA264298E5767
D6881C64BE717E10AA577ED3D559049143D4EEBFFFE810F076D00710C302B4E5
E8AD40D6C17E325BEE543B7320DE2F49D840FC89CB8AA5D5C034614B31D18FD6
9AB6F539560F9E8D4C9AF6C8BC23B0EF11F37FFCC8BD8C4F0B6AB3CB42D63190
91FB1944279C1BDDA556B74560FE64C1C440D1C866159D8DF1A8F6BC59A16C7B
47B88DEE02EE578910A18CD1827922BF5BB095A776A2C5CB23494F45B1A378C2
334376FB34610D1A4AF71DE347DE8BD4C3C7EF12F4BAEEDA8DD594F9FDD3F038
6FF6545DD7B4C68A3F79464C1D64E30219493B2269A1DE208282ADF04ED5C226
4211DAD907074BE3AB545E4845219DDA8FD87341F337F112E6E649BE407C85D3
D2CFE41C4D4A1F2D1CB9276400AFF35CE170D31F2B166D2A01235AF50043582A
0BB588897DA22D5C20F8A2C7C95CB1E55F731368F373A67893FEE2BCE0512797
88C2BBDD81475211B28D9A614446CEE225D117901D017E0A380089CD031A30A0
F87D7BAF534E49D13772304484CE384526A09DF38B3FC60F78AF509D7B448A0D
A42C5E456AD713694C65D2484218CB438C2B9FB81757802E694B726851A966E9
3490C7ED6E46D8FE97C313D83D481291F7BA24FA33EA39EF3D2AFE9349319358
1479A70FAA733BEA5E0E08468693268E4DF9E0CCAE59FC2A788EDB10196768D0
23D6BD1C2CA79CAD7F0FE9BAF8F71089C3F94FAEE44631388A38FC1B81A193DB
5D59CF092C82E0B5AE1F39CA85BA749C7CB1687ADFFB0B83A7838452A6F18291
0CE6F49D4494A93081D9EDC3E6F33C0CBDFA4AAB1FC2970DA4619E834957CB1C
E9106A9B0A113ACEAE5A638992C479F86CD53E8CC9DE6B2DDB148E81B1F6B9E2
BCC86ABE5811DD097EB0065B1E01ABF5E2D8428D248B1B0A1132A8DA2DDE3EEB
17C167E15736CB60DB4FD58B00CE00AF066C2169DF9B3D0654FB87EFBD4C7B75
3F6E88E8423D1E060B20BC8498014FC6AF9154768BA86963E006ADEE6D7A1161
558E0103D69F95627A6E45609919178CD5015D613B637F19614B32D3113FEDDB
8BD432AFA87F26F693CC93AE903B04DC70CEB126E37F9B68DC215D667243EBC8
97ED2C6EAF713011776BC1FCD81EF9A291438D48073CA60ABA155F4A03A5FEC5
A8E14E5A17FF6BA44447C98400B39FB9D00B7880E7DAB1639CA2A26D53F630F1
FCB2560AD582DB153772FA61136A0A5EF8DA1E9300A2D369E9DD9EDE9AC14E4F
D09695BBDBD7994FD7F9A51C6CD3EBCE191B0F1897F45E676D2D16E9493A259D
B7DF7AC21D9B88457317ED0F6CF9FF5A2907997EB82C15C082CC9D5F9EE46468
3A6649D8EBF57C89305D25FC1B1FEF198165415498597436449EE0F9445B4C80
696678204E90FEAFE0A407C7C23BA5F5E684764A0FF3119B626A67B0061808B1
AA8A9F4E87C682601AB378DCEAF01EBA7AE208615F5D00DB8AEDBC8209595969
EB322C601A8D700072E3F5010A9141AAFCE6733B371BF3603FD6C2816137832A
56C48FC89066B9FF63B80A84B36F7F9C83605DD868C8F663872B230E921494B1
29F80EA04146854D9EEB4034FA39274D2EC964B32F3FE6CC7D57F5CE48E4912E
5431C06D2C1CEE39D5413C110EB25E1205995293762A7A83FD2F1415C012F74E
253D45C14DFEED6FF6A9F6A5EB4F570CE4ABE7C8A1852095D045E85DAA4BE53B
26AE30EDCB46ED7952DD4F10F3A2F4EA315404C8E04A5A873CA0A32864F262D4
F64C91525C1DC028495987E737091B05A3BAA49FCAE6E32DC9D1AED22C2EA725
FA6748AF1F586142B2524A8EA76881278EC54549FF754E46BB83E4728E1CF8E4
497211DAE158F2DDB6A860F0624618239067AB0D70008BB2ABCF06E283F5507F
6333B37A975BE804C5563DFC3C67C8166A935E2DFDC5653F8CD834A1E8AB45FF
E334532FFF6EE351252820E234C97E96A5687BD9F33D193276CDAA152C0C5007
91C762581B3E498D5EC423985F63F7BA5EA703122EF3B1696DAF841B6693BB70
A7AC9B290539B172E2F22DC62C9855FEA8779B1D7CD4882F55258C57D4A8367D
82EF814BD97304C3518422CEF3C41D748B5A07A0EA50E3F6C38E0C13FE30AAA0
7C0CAAA57932CCE22798816FAC800F99054B041CD28CED6DA01287AC96E605DC
58670265FC8FA6BD03DD67593CC09B3350E40689A5BA6F5AABF3E70533868D72
0E28A4055091ED6C0F733B035CCAC9A2CAA2829B9E161412B28D4DA44C60ABF5
751A90099A4DAB23C36BE2772C1D183F91D837DAC94609659451F83DAA632524
8CFDD49BC425FD7D7EE5953A40F8BCE27C810BDF9963D15FA4283F9CE523D03C
847131EEF1D6A8C20BB052FDA9FBCEADA2194F7BCF7AAE569CEF156BEC782E44
6B2A3DDB53C4C24F3408C19817F0CA102F52A894B559D265D856CB17517DF95D
8D5E51D994BACE39AC902E200BE756716E15A3F345F395F32CED2CB15B87902E
04E19C09209B93C6D340C9839D58A365195647F6BCB28B5B171265D2C5490FCF
C21CB7024E2D8F4807D027C96D69F024A529E4FDD808777D2040627A5F4BF8E6
14FCBD870B67CBC48B6CC5688CB047EBA45F170F697E22B2A18E87EC2FB4DC73
752C89EA423A179B77342E366773F2D5DEC1FB3C7B344507DF936A19ED319C82
1BE3E8EED5C48B888B802F6C66C3BC6E9D748332D74655C7992458105D1BA286
5A52C5F4D31C4917A92596DABBEB1928532E4F497C5954BC12FA428A10857D35
B49AF5976972FE4E64245ADB6834824495ADAB8157D6F56BFA6DA0DB6915A9C3
21DE19CB262905235EE0AF42A48690647B2E835E7ACF892DCBAD677F212328EE
F599B0A35E042269A9C4C3F2ADA2D1985C85211AFD2D810F5768CA47F9728AD6
8E52B5971389DB71AA4AB9CB38D2E9F15FCDAB2E629D25F75FB061D828F2BFB0
6CA814AD93DB76476C5578E5CCB30BB1D7D4129D8AE131229F406CBB99DCDE2D
9507407BC016D0B0CD2F795D0464C9E334DEC573E61A9B752E8869F9F4011DC7
021D34FDAE0D6951F120944F679A2F9A3E46D77F396BFC9DE708C2AFB5967FDE
32BC77530DC353B3CCEDE3119B91A719719C6D317FF562DD096DD0A3EFC494E5
B642D674172BF8F3E5E75E2890C12B6AAEBA7855CD28A4884E0C99A95F819AEC
23F177F11CD02925F54CEDE04FA10D9B7516803EFD9070DFB5F96B80FD7FE20D
1FD09789F7C7007E6B1AF5A8F5EF2CD04A4EECA469B2A6246AE685A6044D3A9C
EBEDEA5A8D3E4AA152E5432BC2A3E320AECFCD68551094D1001C6D1A75CD0EA2
2D849D589FBD71A844C34793F87E35A363E14DE497CD19B91CB92E669C8751A1
D3C5C417DE391A82F969C55DE88DA79354B160AF878383043DB5A9012127E4C3
22040F87EA6AC9F60265222606BBA53965AE74AFE4077461CE13614CF1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE5020D74C7714FF08F5AE00F69DBED351708B1C760171CE5
5D0FE3BC5F6769FB19C7951CD5DCA774B841330A2C8CF59CF458230A1642F956
21D23843C4332F05F5AF14E70EF052F02F7E3F51D6E7D68A4FED8D2C4A733AA3
8973CF4CDF768C31E35C395C3BF67A79F8B1AC292F38AB2EF22A87A8ADBE2C55
747D7AF3101C5F1A2A1BF6C0E245AC583FE784CD69B918457FC63ACB5FA24E41
CAE39AA9386736476F5C0BD3D01ACFCABB35BD346B884B97EB5F467C93A2FC7F
82A0B3682C1D7B0CAE0165D6FE43CBD8FA5C85EDCD122FAC36F59FDA7CC4EFE6
1F9F8E88832737186037F9E5AB161B8A2090F5569529861FAEFDC91E823E0A0E
A92E7F1118BCF413BD355CD844D0F88C47B267EAFA1585B4ABAAAB9BF885D233
DE4656E4CCC1AC1A5762BE48F5FA88A0020AF17A438014B5902A55EE220152C9
0348CF590A07761415D2F53A866C95D4A6848E2BB7970D176670F90765843635
9C2461BEA57F9CC512BDC51EF25496B2C2253AE85AB38889B26761BA509C7F63
8C6CBC4BBDEA74FD3B43A178C86F9A97423815F5FA2C09BA590B8371D5B7758A
43F98F4DC4792308CDFE2779CA6F20ACEF23FD8FC11F483C0CDAFE837D984A76
1286C4DC5088F5DC4B8D59F781ED48736CDB2D0B9B51340F6218CDD622544552
9BAB6B88481D111091C2CAE5E19903BE5F2C90E79E2469EFE314329B4653D49A
0C4443075770A91B2AAB03B33ABB45A0C22C491249120F6D6784BA8E9E1BDE1D
E49CA8078E716ACFC56247BEA146E10516B2AAEA1179D951CE9BD051F9323250
9E52940756E59CA4A375CE1613358DB3061D125AF6741D6656C98B1F13580C2F
BDC52C98F920CD77B868E69DDE797D6F4E0072FCB2A687156FB7496E839044B1
D5FFC9BC33457C2C37B25358D12727AAAD72E74D67C9154F75D97AEE6CBC90BD
3134AA1484CFA586918F6CCFB9076E3D36DFE9DDB392685584B5BD1C76BCDB39
127FB7B4FB464BED85DA4CDA5ED8C470BA5B76B22D093BBF07F73FF5BBDCEAC6
93B8D643D231EEC34E65CF2F765628FE826574F0F0BB39F960A0A63590C1E03B
6E6ACF8659CBA06FD67D5981ABC431EB97CAC6901029CEABBD3785CBBB456DED
C775AAC582EFA5A0D994D27767EAECA7582BD2B47B128490DB98FF9401981C33
53F53C17A67DDDD06D0017B39B9A8C5882E168AEE56063AFB461ED9E7E1A0C7C
DACFB4440891678FA0B8E67022F3E49AD8F46BAEB340CC9836AF2BF69DFCC4FB
45B8FEC8FF99C43BB47231
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFB8DD9B92CCD508A09171BC12C8ACA32FECEB20
7CAA1C2C81ED075E3EA7E712D95FC612CF97F3402658E90924C75CA278243C52
D4E02E8224F197E555143D563819EB1ADD2248C18E02E18FE3DCF624E37ED993
3C7DAB05959E694040B7EF5F92D80AEAC2CF58EC01BD61D7CB962C4EA678C5C0
62593DE423E11AF90918CFC6E1E8F9DA428296FF0C92CA794AFBE2067C46264E
EEB0AB0FBF2EDA1A8420EF654A1D4E0A295D1DFECBE39D9FF712C85C748311C9
CB8695716F72FD4F80E77DFD7E01E9FB8CB1F2B5971940EE4E7B14727B086F27
E43E6E3EA6EF0DE68E17C9C0F050085274ADB56BAAF193211E48D1B82FE44A59
2A9F5FB13EACEB54AA027C1B87380F9EEF9D500DC327702B132335FF288ADF62
578F30CDCCCF826E4C4CB57B5D5B537BD2FF89086BD0C4CAE557ED66306DF3F5
BA9D1007C869E8594D4138161162682A719FFCB1A982A5CE8765E2681E64B8D8
4A7CD7504E58CB81D0EF03A3EEA97D43741F54987AD65FA54A1BD682F7EFED16
D35D034F1AA5CD4EB628353F1FFEBD0CEB905F10C183245F1B733C17D3B854D5
3BA686CF4088BC6C0FADF9A6C05BE3499567E930F710682B8954108AB7B126D8
255F1A0F1BD08158F94077D191F62DD73838E0CDBC99204AA6AD1309BC5668A2
A524C6D1C68B4E416B248A6FE29A67DCF4E1CBFCE603260A277AEB7F75627333
3E84F341637A1BDB292EADD055C97A12CF0B915E39263AA9F03B21C1F45C87C2
CCB12B59066B6DA2CA24E020A0FDDCC0498D74594AE3ACB0EB4CE7727EA32222
07E864C7F39773638E3BD2FDDA11C79177AD0A23CFB7F631E00CC979AD410F81
3119C0543E091E4820C12FE47E3154789E02FE363C319139350F014FE8A785A3
F66FFAB8D8C9E7E26E49BE5FE558491D1A57B150A5B386F7ECCC0EE8E31695A3
36BCC7BB9F7FB26DA3444238CC33E2791CABC1DCD0BFC3372E1DE72D93AFD1C8
E2635A5E428AB33E24E81346D13A9377EBEFC6206D372675CF43235722B50C78
8C4A02867C68BD8E5FE9A45653BBAF2A5DCA560DB5BEE7054FB8B0A13AB598BB
C481A3240450D1453A1CC1054A06B962B7E28A73BE0B2713DFD32DEABA293EEE
AAA8C0409564BB1ECD1249588C18D01D8AD4E0F0032FD811ADF35B869BB210E4
4A57178893AF229268DC5375F01AB676E600823FEC28C30D2208A868EC0D01B1
4845736F9DEE02D06634547729442ECDC50C90989CC881C3D8E85B76FBB10040
F0DADEE5ACBDBB43307A30FDEEE5F77E621B130E4B824CE23100BC08DC65BDA3
46307E3BD497D7F1E2F51B557FEB6AA32E84F5E55E5C12A81B73F370431F3842
A1B0CAFD4ECE7F0DC8E2A6D644CA8735A4E96445BA9CEBB627718F858DC051E4
3963ACD7E7868CAA4488EE815D40E28CA54C83221810546F0009F98531353C9A
8EBFE7DB9C9A120C2A4E2FED0E63F90B8DF65026707BD39B489E54425A5ED877
73C6B3A8ABC8ABB13ECC3B249F1878A8F76D59596C63BCB936321589906AB242
14F3C046A1F210FE287A8192CBA7D2A89BBE7A7B2DB6B1E19224F04262D6403E
3B41787E1449587E28093E66A9837BB94195E3A4A5C17DE6823755F59BB9E3A0
52F69C7808FB657D9270933D8B167D2575CF146336BB1C76735BE5CAAAEDBE98
C69F89E7E71474CFC7515F73F86727442EC24D46F92C99498946CAB6DED8F5DF
0540063DEC2EF3F83AAAA3F4F68A8E892C3D0529A466C6A310A6101223949B01
79CF7DE6B550657C91BF3116EE7F85B0178B3227810D99B48361133B54A6DFDC
872745DD45766283944D7293D6FB1B42BCDDF2F241AB267897BFABA39D0F2725
E0DBA7C8CE305DE7C1B59DC2184872FB99578B809358856E4E99B28E138E2DB5
85CDCCFBF2B46F01012CC94E2FB30C1E4411918E892630F2AD07EFF1919E9BA9
0194E24A69649F0DFD0046D2EED7AF90313E70594EB5C354023BFA07912408F1
72E39AFA29111A71BCFDDA20BCD6006B0309EF09261B7AE1C67BDE0D385104C7
C0730BEF94DF3D9BB2161C7346FAB11805152716480C0984BA13A8433ADBD629
229C446AF84A690F56A09A84EBB1CED5515C36F2798A89689BED966ADC9AC306
D01B6E24DBB2CFFBEF205FC921305B45B1B8FFDE2A09CF6301F485C8B7DC2E56
82DCE3042DC9767C407C0DB4D0FD1A4881A34FA0EEE7810D69F2428045CD609E
23CE37791362950FB435D1899A47E6E69EDB17BC08CA1B092D4F20BE1AA6BC4A
9DEAAB1B74EEB7B908245CDDB7A093C1AA307DECFFE53A1FE54984DB1360E320
862F2CA6E0258507C6D3DC1DB94102FB88F631211557D3A4F79A8E5FDE69B1F8
4E9FB2EDBFB4B8853524F58D4E1EB98EEBEF1B6C2D330B1CFC47ADE896255DE1
FFA8CC1A09D26342E89B9A39149E124C564C5251F613393060892D5A51B78BEB
3E44B78C50316C61B6FE484CE582EB7FBDC53D9427FE267051934E366F7C7B2C
ABD2C65921B5520C6F70C1B6E7AF8E11BA4798C1DD2EB7D4F962028061B71099
8E5EAE433D8A82CFB15547B339AF376E9341FEB9433AF21E8D84C50F75043419
1ECF16684180B65D9CD4C8CDC57A0BBC0598B3AB03652A6AA459894E119B5356
CED765F73F6935478D5133B9E761430A39CAB0DC109B02A80626A9ACD7856ECE
4D6569F5D1D918A30005C31F177816336B74AF8B9931BEC0CAC75380C714BFB1
BC100B05D19D7BCFB18CDAFB0310935E6C7EAC6B9A8134C4E8F4969C9268F7A2
C306146CEC5039310EF1F4ACEA1A40014BA27BD58490D24B7885E4084932266C
621A42B8A3139CE953DFA9687BC439A746147F456517EDB169157DAD9D8AE5D7
EF2661E266C5C812B03E2569E0F138C2D58E38EC9F0B780C298874616D09E399
6CBC81BF2A98EC7A9A573A79CCDB6327D0DD0F821F886FB4496ECCA78FD1A2BB
CBF0CA1255799DF587CE66F042F7A5179B55075FC89BDC3302D01D7138DA0828
4C8C35A8E26752CC2EA8F3AC2AC68E70946C3E8F46B9C2DF790F79269566BF9C
9A6E54EC87BAB7D34EF99AD642B738312FC6F300093EBC7669C934250A5CE240
A1171441D03FD75811F371B3895AA29DDC6A984C0E944711C77542A66680C933
9C7F2D5A30471C6693CEA46EF483D1046E1A9FE6EFFA27CA8C9ACE821AB92B0F
5D9DC9D0A91B93ED65003BD0C4D6608A6236426C7859229DB42614A54EBFB4DC
8097C0D9B0FB95A5A87CC9FD874959462454B5D439C456BB55FB81B09E3FC5B3
26D850A5DED9EC17E11FCFDC544B2885995B5EA543CD7E8E17FCB8B4ED57D7C6
1B0C70972F86F67336647589FB0EA874920BAFB89889071729076D755021533F
B886A9483867A5E3CB8A961CEB372CDE1EA852052312ED4484491532ECA79ABC
3EE60C00312665A8DF22AACCF0CBD84EFD9EC148AF4245BFE780E23BB321DA56
DBB416890407B39D34B68BB61B00B146D2E8F794C1546CEA6E037D7CD767AE50
843AA610583CC318C66E25ACE786FE7B406E5F1F232517AA77DD3875AF98FB1F
E6FDDB6323E23AA93628A6B5887CA2263BF3F5A696EE86831C603B0AB1442AFF
5FA6C191F7A83C324AF0629A269BC5E6602B15D0B8881E6F37D510D53C60AF3F
6159041212131F18BF75E71B5B6E7022B99AA55C94130C7A4AFC72E016B43A65
AA522E7EF3FC6134D5F715878D99130DE16A3ED40825C75260C7BA8A5A084766
1FEE0F6B8798F96EB458F2E1ECB61B6A2C9887A5D0541AC711EC68B79C2CA3C6
175D4A90F08ACA408540796646E0DAC8220792B3FEB61999671C1DFDFA0919F6
35FC2CB139762BA4D20490AAAB168B00EAE492D1EF564F9D4A077B526322E8A4
4E42451F694443F3C4E2FC9541C8344D3575996B2C50A6E3D62384F9ECC1679B
6514C107D7B3A613F7287269594865E9453E9B6EF227867D9CF9549B3B5E2A6A
F748308BAE99AE06106D90DE65FFC15685F8CF6DED13F50F406270CF873290E9
9A3BD506A8578376F788CFB65E372FC69FE9FD47150A0CC019FB7BF22A3B979B
EC26787BAB2D5F893EE00D41CB48E35CE9C08D0BDC30768CCB856C1CD7DE9E9C
0848692C38D1E3016BF4B4E37EE291081DE21AF12C1240C57540E73362D1F9A0
904081FD330AB6BC5E2CECD68B9981B2BEF1AED8D00A3AE7ED338B9E18F72045
7A4AB35C68C07865063A2AFC57C5F2062F908641625F5C1C0C6A364E3100A357
D10632538A2A0CDB6AD680DC773ACEE840A11C866CC356BFB3FEED65526A133B
8800E5D9734B24E017A2E354045A20128E1705A76CC4A6F6FABD063ACE8A01DC
45383306CED62F67716BDE9F3379CE9878306CD4905832A6D7971824A12374A0
CECCAC565C16B53C7C5E1A202F5363892C77B74A200C9DC2E2179D79AED00A2D
FDA9B22773F34FFE430F51DEC9D81F1FFDCCDD178A0CFDE0E7E46CF99B117B55
B3CA9B1F3952D101D6CE60D1A0A97C99EDB3FADF880821AF7D1CA940090DB589
20B9219284D91DA3BD4A61CB3BFD0D14217EB9F2CB21F0FF6087C7308074735E
E35C87F51AB5DDF2041BCC6827E45A0370F0F2D6FDB8A1FC5066E1BC3F1D7B12
B234F60899F20EFFA823A8ED6489E6A04A0110DE316A16B9A8A6E831396813D3
F551F18C2D70B0FBD115BE7EBCE816AB40D2ECDB17E15F2AD8D3BAD0B94BB1E9
E4397ED46382B7F8A62CF533D4295155716F96B850D6FF61144F6A9E51CC1B8A
86A35082D9ABEB8D2DA4B491536CEF9D1E9F4FD8C0003E6F23293B82B65EE0DC
F0830C02BEA2CAE21DFAAFB537D8D9F0A74B63C9D0A6A9BFAA49F87C4FC0A724
1808AB8A4938BFDD1B8644456D6323286CEB879B3BDB928141D3E5403F1CB5FD
773C8B9DD0042C5E51323CB81A8EDE313FDE90D905B45223A6504CA4D48826FA
E6756223F2FF5B5167ADA7EEF2D2CBFFA77D88827236660260C19CA8BAE9DBBC
7A911F54C201E4F627816CFED662D19C21824CCDB8F71DD18800B7E40E164074
33FC9A216DC7AFCE1C5C7F7EBB14725E4813E05782683C877C7EC4C86D6FD378
06CD3E28E86F10868948EE507B47172D7B52B09828010DB7975266138B7C5168
19F07C1F01EE32CDCE87348E9A967B430996030C42BCB6B3794F51D6F7DBCCB9
A30006C7D60C7E1AA2761AF25BD01C501409DC094980FE3A0D2A24B429285A06
EBEA61BB134055B25332C4F2AFCD776ED2ABDCE78D2BDC07CED874A173236473
98EE737ED7C6090E857AB029E6C75123998FC42D3E0C3F20960FE90B3CC6EFBA
5BE1F043F38C1E3B3CB2173152213DF78D7C0934B29652E763300876BB073367
A61A91B741B3CC4B68E496316C1FCC57968F790C5E7948B72C4AEBA496FEA882
575B6426A82F101D8FEB1CBF633184CB857E6D5AB42F92904B4D0DA750DFF2A8
3A30B03BC1DB36EF6FAC16F69FC8885EAD2CAB2644F1E25DF5F6EF5B5ED1E80B
82B3BB7F5B0B954E7078DE3E31D8AE65F9EA55FD147FA2DB2E8385C7B35F69B7
D06F576D7570D2B23AC1D7040992123A276F3483AB90D7EB79A87E6467D40C46
F878C63E035056CDBBB9F4DB89659D42B100853BCBD4D0A15071AAF8079B7768
5637DDE51E631007A29FAC4FC89EC53A42AA58F08999C1DDDC1F129EF7813073
EF9409838CD519B1F9384DAB415A394588881EF3502D2588589B5ADD4C1F23B1
6A9440ADF2974910C58F6BB26C4F58D573E5546629028DCA3154FD567040DCD5
C54B9234618410808685806BDBC524F3914FB3F945E0A8B3D0BA3DB62D680AE9
DF1C22D1E205B546D86FFB6D567AEF67B112126E2ACF3642047B54B09D3B31DF
2790637E4375815EA4ABE99BE732D6518A5B8365DB72AEC255D01E5F51974F8B
80E5501D8F33616769788FE84E1E85CFE56E137BA47C2A14D106F554978FC07A
154765411925D03D58A22DCD2AEF5406DF46611E216F8B9161510B36B230EF3E
93590FA686661BC2390E19CD3DEE77F3538ABB1119F13CDF297EBD29C3DD1888
F0FE99AD7ADAD0922C1BEAAAD9B337968A02FCA0132E033BED6E64D0BD1E9C51
FE0264A18B16E899EAB7FB6A5D283005D97035874D2B9AFD4D3F29B4B1E6EDE3
0FB077310016F5279CC754F3D13AD666CBA8F8C56E27E4466907B099BEC7CD38
699015DDFA5E32143ACCD729EE43B417EFAC4D403595265F0306D9CB3B26CB5F
05EC5FBA7C19AAC361613A028572D68AB9D20F3ED4130D20DB5FB364F7BD728B
86D3BBE1E37BC2104E797474023611FAD7AC43A659829BCD60A999E9F3E78F64
80C3C8B6297958A634242E698BAEE3C5CAC2DDB333270F9AEB92A892D0578C34
519695EAD030B18D2B1B928D2CB8CAF6B4484B03FB878D974AD04A770977FBB2
C31C4F8FF8BB1E7DF55CBD0EA7805A438AAB424675C45984BC321B8331096342
44037384B36372980DE4F1819DC2B4F825D7F6AF5BA3889A9481A39115215105
5D2B2B9DAAA7D85A7F1D36345F3BC5A90CCE79572D44A07DB50823C01E2F535D
FC2C0655A9A103406D8CCCF97174ABCF4EBF022831694B2773BA052B475D09EB
09469D2BB86F7BC232B842C924ADC1B1AC7AAE6732DAC6E6E6F989D279899F03
7BCBD7DF2830E4F2AC7BC9A0512C5598CD6A8558B8C483AAE9A856CB690E4D9D
6B4452C138A84B53712BD7B639625938CDB360066803092C41828FDFFC40EC76
529B3017997B118F9C0019B318CD3A83CB0A1E8891BE5F6A0C940C93A5B74FF6
4283F15EAA51DF4C74CBB662283EA2CABC19388DDF3C5B474F5374D80D469AED
90BA08D8A72E3547B40BF4ADAD86EF5BEE825C3F850B6EE405BD38D761485512
1FEEDC70965D0185F5E174F0758420612108EA4A58025B1F47E53E0B124A48CB
687FEC13BC7E48802CC39BE1302FEBB6C5A7E2509195211FF1A494D7743D2BCD
9E84D94956A1404882E6A29731FFADE7B187078C481987BA74CE27B2C4557D4B
04E7F771105122A7F30165F29EBD4570C70F7860B7D7E3F1E81AEFECB5313C2C
C1E66069D56F6579693CB65053BF56062972DE5B56E950AD3B58BA187935BBC3
7DCC97D12D866DDBB2E9D6B02D4ED0A53C6BA6B301D3F42EEDB6BED24CEA54F2
A86A1887361F7897A2D28A562A935226FF823955C3AEC37426299AD32E960DE2
CF2E3C9CA94D43E219F06892F0F79B02434ACE821D263606A374B64A01E25C9C
7B71D4347CD5D07A9411B6E88C18CFD9B234CF2F2D603D0260B53225714419B8
C988456CCC24B81FAD59AD71A3EA68BA6A9A900EA9398CFF7BF2CB6AB91D17C5
793A8F9EDC7858C953AA3EA5788239D1FD4176B9C310D775443680BD38AACCAE
08206EABF5E61E8EB6B71AA4B19F8037836D8D8AE278B7171B945C5AEDEBD3D0
8153CA578EAF17D2B2A7B7B9AA763F56FFFFE98E8B960C5B942238491264EA29
AB731DEEDBE78843300158908F77C0AC759565A2314109D6F3AB7D037E509C5D
A4A954235A57F0F59EDB31F78C17CB202849141A1F5FC0C086DF025BD411A9D6
5745FCE585256923F98A70DE5036BD9C54DEDA6D88F609B0AA79104E10420C3F
67E491EA298A68097564A90A2DA6A2A2574BF892347DEE8E7A09633AF7B2E1BF
75521FD6C2925E38CBE6CCA897724AE8F908EF485539C45C6CF62652F79150A2
D35BD4580DAC8DFCB09C9B2F0F3258476531B36AC6458551956CA08156AF9C33
D3F197E87AB3C26371305DCF1687976964235049BD3E3CE70137A7B7FA82E8E1
5F366CE98A40838258D452E731374A7FA2B08ABBB932D5E6A03F957B7C64E89B
B59C4ADF07B4FA90460372E170BB98B788972C8F37277FC53686C2D27FFEB476
65EED274860C3BF880DC2F6C80CEC4A92BF9FA09EF0F76FAF0533551DD2C8C2B
DDCB8A5F93239B9DB45E600F1C9F40AFDFDFE2E7C19B6D1E0F9382BEA9878AEF
1CF8DB5AA29D60B224C9B8872CD9E55B2E3AE3BD97E3D9D52215AA05E690FAA7
3EC216783CC4F106FDA563F8DBA452AD22FF83BD861FCD07E1302D6A3AC105F2
8EE6A2CFEAFA21AE6C39FDE40B9D08EF1ED2E41BDDA53210944053DAAB56B107
5A0C3832220752D104FA14EE869F741128948A218EDA86F30574CAEBB8230076
EF42FBA55397E2CC27E11DCFA24B47253A03A99363DD7EDDB8CF9B4CC3BF7B29
5FB8E3918CD673DC3B1859B9B68AC9C092EA151A6F3762571629775247A6AC65
DEFBCDBB07BE8D8CFF4DC312E6A454DCCDF83FF2BBC7B17EFC05DAD545F7DA47
1CC77A08633A53B62B760DF589FB2A1C0D78314EDF4F4361872DFA2C65EB44D5
CB662BE0B2839CEAC16D813DDFFF35ABD92E13ADF85FA7B62AFD4348B8790328
14BBABA742ECE84EC3C70C8281FEEDE824560FC686802E49EDA9528B7D8F8724
EADAB1EA2DE9F76DD4113C25175B14083CDDB3ABFE914A9AEED19BD22F6E09C4
198C7AE63EE63D34A6E5E6483031F98EF3E460553709C60CDF17E6D6E4E78CB9
D61F3FD30E78D7EE3049E2E505776D90A2D1A68B51C0B83856E9927C936DF456
4199A66A432D5FA8044190358D9A42B02D8D79081A54EF4F7251DCA4D16C84E0
3F2249F606EE1D4DCF4F15301A634A43CD2AA417331E4921194F6F9B939EE166
3FD02D1E1D74F22C4DA4143A4D5C2AD9BC331525A4BBB12EA7EC525CE0D7F6D7
02247E93CC25E56B176A0786B3CE890314191082273187F24F9D209D78E0A2FD
3FA71C28EDFC157CC5F6750F1A32DD6B38F76BBFAA9AB9E3FDBE3B65729C39A7
D5C90614F22E02626ABD343F3AC0A9698AE84CBA2D8F5378FA26179EA32176F2
464A2652C19C8D31C9300E613650121894B9D280C4F16906654393ECB9D74206
B1466753DCA4A6667BB22C841A91A8AC118812C9BB0FB24D2166D5DDD4EAE075
395D7BE3CB0DFED4D966B2FD281DDA37184E620C8C9F2834C6AC70503BFBF3F5
EDD60A8269CE7950969557336AC8DB3B61E01D64D56E8C4CBB401937D3114220
AD0792429566BFF55537F41DC5950A76B816F8896C4BB18C575AADC6F5886763
3981828EC2EEBBC3928390F72AB65858B8AA6F0EDD3A3763F5A8F68A0B93B9AD
CD647D79A3E56C4B5AB275FD52B825F9C86582DEA06C1FBCEDF42069D00CFE14
02347AA07C49D2672C513510C5F90752F7DD417E32DD6EDD1689FD3081EF84E7
86D3F04F8724EC003F8E8C117DCC0D93D513E04AFD9BECE706135D9789ED8296
F3959B3D87FE3E4E2B176AF68025E0C72F52165A0DF06D6A2ECBFB29FE4D5CC6
EE8458FEA2FE94385B2AF841D9A755FBACF6167862A987D153AEFF6650578358
B43FB420AC4CFF68E997B6F7BEF0C52DB9469CFC0E9E9A6D7958D9C8465C0AD1
28085AE31D620480D82B5151EABE7353E18FF6B1523DB565BBC3A1EE19170598
C4E94B5A82490F5F3EDCCDA8B1329836CC6136E0B2DC8292E36DC444F34DBF0A
476985495B8E94E473052F20C5E417A6AFF317746B50613961F9E542A99E1E9E
AB27BEF2BCF74FB29855ABBE60E7A2F5DC169BF13C56D9D08860763C7F8F92DE
AB54453E6A4C7B7F667C14A284047744C14EDA3CFE3DC73BCCC0F2F81D7ACBBA
A1B71056D018CA5CDFEA1929E0FD99044E1B7AFA7834A95FE1307D53A8436600
3FBA0A0255ABDEB555EE5EA7AD4D7782A8387E49B8F03ADA7C7CA74633545ACC
6E1B0078A6D40CF7C7D8E436EE1C70047BA88646BAA9D6F0E16636DA27AB6AA1
6C638A6B48382CCDFFEDE240D483420C8089E81DFB3BE958C865B2B9A0705095
755901A327881880298D9DB49E020D5A7E6290AB1C4B10165DE8C3E9109949A8
FC60CB1B458121246F0C2147B13D704C0067DE90B53D9163DE8672BB96AF649E
3CC9D18701E91F5A47FF6E933E21F0F0F9F31D06A6F3355819580C478B6E2A50
9CED4243271F069DF61D27D3FE8CBB25636F48E6A41F205D04A802E45FD0239F
0F41E86F2D4EEB998520A57985CEEF4463EC7CD398769ACE9F56B1616DF4B6EC
47260A1A82EDC3B258C45EE70F2575FE3A0DEF48E5C9008EEA4F990890CFA24E
B5BA14B6722F4521E7C552BCB2882C53BDE88CC55844F1A036864BE76727743F
9266BFA212BD428B67BDB8FA30947DAF090BF54FD4E7B01311521458871B0C8B
D1AAA6452B05A9E0A4D4AC85DCAD1DCD36CB4D6288560DD839B975287260E0FA
E00E1369F7ABE64B951812C84BC29D13B78FA281C6953833F378FA3D5B296449
28DA32EAD64629BDED7F973655A8047BAA8166A39AD81188A0BCDB316CE04AB4
08327D5BED24A373E6CD0A8650EDD6F01D290275630A7BA34D7C65622708FB34
3B1EFDD4C09FFC7E49DB8929F2E3891248D81727E4DDB392685584B5BDC9308F
35A246EFDDB2CDEB75F63F693DCA492BCBB376A278F2D4AE601E817965E370A6
CE358A3A3368746A027350A9FBF947BB7C46F0C949D8A718026FA6E3BFA81B90
3519E95194C314334242A37FE3E0F8CC792879EBA47B6EF16E2C6DA9D1EB555D
555A07564A9D3C2275458700FD01CB5E99962B8E8CC2D6A52E0210B9848E6FB9
1C81497FC1AA96D6B4817323D6A88E851D672F598789D1EE0B99F19132698163
478C02F72EBB0DDC10C55C02FB02663AA47E2BDC5A51A03F48BD32FA0B0816A0
C7C6B4E3C8CF98D1B82FD0AA19633433CAC268C6BB20D3A288E01E2B9173557B
D09FD610F8281F6F34EE241674A3EE2645DA90652D589681C60C4FCC6A8AE100
116920383B0A69281E3DD8A266D484D28CC30F9DC21D974400A8C2642147D4B6
52A8F1A7E0B77D82D6A36B6B588ED0ED38C61CDD2A8431D15BFD53F1FA3B8DF5
3EE8E41302E597B15C2F640CA86F2917456CF5D301929BE09F85FBEE99D21B51
2779E121066B46DF8C2DC29BBFD9378D8E898275EEB2B9BB17486D50FF253FF6
7EC9FCE378C4940303BBD456FD31D028BBB565B96FD4E4D1FF377A5AD37C15A6
173CCBB15CFD2FD66605EB29C5526F99362C7693B01E7ECF132C62BDF74FFEA4
B0CF559A079F2FF1C3615FD8AF94F0747C51AF4683EDF97728F3068203896C93
1C86081B9870A584F81C6C24126DD123FAB23AA37B36092D3F6CE83BE0B858CE
E312A4C003B01CB922571B8E5E7DDA3913705D4DE85889C1086133C916B97604
9158408EFBBC55FA1B1F3F3E031B7169E8089525CECD505DC35CB17B6D8F433F
9402B197152704622AA4BA96347B69E844752017BD9301866119490253B6CDC9
7E1CC04D2640E97679ACEA830AB447B3B980521CA52FDCB634318CACBF994B41
4731F0AA40D28BE3700953D590A62AD8AF0F977CD9FC6A5B91EA844AA2981BA2
64E7B739C4088A25F551F578189A3285E5F32C9C8A8FA9E7F90D27E38DA7BAE3
3901AF57C7DB9106933246B30E960A439F315C4093F4AA8854274B18E9808EF2
FE36B36F9968B5CF9FDBFA11DCA0E08D087C4D099838554A169249B307AD318F
9745E6A9DB8D45F1EBAD4CAC35152F1EE78072533F8900CC3A1869BE48305CFA
07531605C233BD19F3DDC54F3DA89A38A4C935C8D023CEA0AA6B857291BCDA9B
6705F0B062A78EFC65E27CF5C83361C2AC17638689E052523D7558A09FE3BDAB
6A282D97A07C671850972D3CD9AA74EE5B605950611393C08541403FE386DFAC
2247BE094A885352C70B1CECF2F9DCA91DD007AC7D759CE74D6A9F75B373FC70
31B45B179B10EA85E741412DF41F4C59FEB8AEF11EC7D1484A695673D7CEE75B
91B36DB3081871CDB3987169479C468004344921545DD99DB567D5486DF8C298
64621BB2A03883BC623D906EC7632CB075B9D013C9266B223C04E45A07BFFBF0
CCA7BF4BADB8D4AE414A1410886EFF8D56DB118E81068DBF528C83F702F2EDF4
E45D0FEB7FD43B1BCCBF20560D772C14FED32A6D10966242774A0E978AD35C01
AAFB04FBDC7B4B8770D3E62C7EEA9759D337AA2628F08079CB5D0CE2CEAF2D85
E987DD9FBA00895D87DC834505C606643E0ED45C2BCCA0E3448730FC94AF580D
C139ADC11FA69DDC5020CC3C14EACE61BCE6EC7A9E3B71DA8E024D71908160B1
EE7C648F246AA8FB60C78AC2398C16112776678BB400C75DE3A3E70D68714FFD
8BFD9E00BA27005CD6FDE60CC49B767DD3BF6BA86CC368E9D29C6BEDD2A467C5
8639DC0E0728CAFFE3C5B6A3B3FFACED0E119E5ACD18F96868A8BCC914FA5EB8
2DFB0B03138E86C15426E4FA49EB9622E45801FF0A29945D6FC7A2D65314D2BB
69D35F3F089F755BA04D5D03A83FE10DC51DA0C4BD0F9DFA45413DB1BCC3DA8F
5A3D194C1BA4490251325AA04438BC14D47CD354A980A539A617ACB9C702EADB
545806ED3373D16487801F7A6CFE211D8F914B49D4602BB869D5A85CE51EDC81
601C6FCD650275C9828C9B2131051DBED189118B9279A11243BF04609FBE1E06
9C0B0ABC6B5C2A2B08E8F5AE4C1E037041529A9E53CF6211D6F89B3F9D78E0A2
FD3FA71C28EDFC157DF84D2F45B211A00225A607A5E867D601C60088FAF1AE5D
D970FD1BAFA2CFDE8A20546520EF3367BEBCD43247960877DEC27C2DA43A8176
62FDF1896DB204DCF51404875DA9CBAF21DC1BFC18242EEBA6A5AE45421B52AA
31DA19DA81D0885196DDE3331E23EDE760BBEA210077CADB81C773C3EC8920EF
E16FE5C7A72657A80F1CFB288E5E944D65E08722DCE6A5762EDB87EA4AD820C3
5920172BC16F63F51819C4206CB45D52E88EB1C042E28A6DFC1C6D16681FB947
7E2A1243CB87523D2492EBC0F85F5DF63C333529F06FDFCA1636023C3B45D998
37E560B854446966D0F4316983578CC350251B4474B677CEB6C248127A35AA5C
7691B72AD442BDDAD18F30DB190E4D0046924EAC9BDEC7AD1230772D7B98333D
5398A82465238D57CC64D9EE4D3417DD8BA249945228E14A389F089207FFBD60
3600E77410A768936DBB1162F16ABBA50F261D5685560A2465A0565E91E89D13
35338DDC277E410104CC34ECC71B411C533A5CC6E235B63CEF024C8BA29293B6
34CCD345102C54FE2208132979EF8740F922F120AD44F28BA8080801F9BC7611
DCF9D6AA4A8651177CB856C986119738E420E03ED77D9824DAA20B84FAA9A2DD
D4158E9AF332256FCB3EA78A9EB74B4B091BB5B674B00964CC2272497284B49F
D0B1A273C1EDA6B778AF995CC45FDBC6DE448491EE057D1A0892D6FC840E3AC7
988F2569B887412982ED98260DB84337892A232A3A1E688B8068D1DB3717525B
37D33DC7D4DCE62BC5140AB590C15346B95A72B52D8380C5112F4CBCCB78C3DF
9F8D82D9EF2CD2E03261159C7F50054928B9493CFB72DA0F5B5B75A7E3C6A182
18DF587BD534F0297E3615F4E68DB6BD2AE92B0B1D5F1E1C12B0E61751FE10EF
24A0AD0FF9FED81C2B83BB3238BC779091D87E5D195DBD7CFB9AD96E1004F968
AF583ECCBE6FE0329A031820D4D1DA9D11F02ADA84BC6E6DA0AA29EA8B96B98E
9CAC0F97387B731F438F86AA00411D4359B3AC5E1A129D34E4E1DB2ADED17246
920EC84462A1C4A7008885277DF6688E3873FBC7A10EF4BD172958717963AFA5
FCC1C753E473E21EB8BE0C7C96BC7BD5C0274440824A95B61CA0427E6CFCBC31
3ED9F5F9B0D028528F61F0B77F668BC7CD4399F08141D19BC64AF0B2552C97BF
BD1C6C0062488763FDB07939C47EB3D323D3C90009A4366F34513C6FDB2A0232
D1BAFFEA22CD6D7EAC386165819C19C75470FB635CB7271D8C8FE3DECE61CE27
31FDDF7FCF2AEF7CC2B1EE7095F485BCE6F793CC26242D918F052AA2F06CF217
8D997C4BAE6D8646785C0C82A208F4F8F34A3DA698A69BA804B9A8B27DF80902
AAFD2B6018DD0680B43A5AE7900B43027FE37891837B822BC091A27912F60DE0
2E09F6EDD7742C73BE07D03DAA4EE95D353CDED25EAEF73162A697698F8925BE
31F7E98BA78C2B52607F5AD63067BF47432AF95BE8E7504AA1542D7B23D36C6B
AA8338AC2D98DE543DC31B759E557505A1366EEAC1142E6E43E7C50DD0AF354C
ACDD111DFAF08A68119DC69C2A9360CA05073141CE21883E3595088CEABFB137
634D2AE8694C53BEEBDD14126B4825CF63C13B40CE21656E37A0FCB6836AAAC0
7BCE893A76FC1FA1CABA526EE65F6439F9FA6F27F763634C662A001B2D429D90
F2A70FB18CAF8575273D16EBC3E54475416262747ACFFD9C16129FB088DDCB10
080AEA9DA70289ECDB306F226579871CC67279A95F558EB0BA035576072FF7F7
722EB48E8F701C11FFD1B7F263ACEA49BAB119C6057DBFC2B0085C818FDDA774
EBDBE7A95500883E675C5C28DB99242A8330E9DDAED388DB7A0B4FA03C84CA36
F6027A26FF421BFCE5DAB2D853767FE8A7418038277FAD0E908C48A1B8FD98E4
EA36D07A87F9D6C0E5D31A2BB9B1494A567EB5016EA36C45F006BF7BECD97F89
0B6847370B5BC9EA4EA774B0595D87C2F5FEDBB500ED2A188680E41CEE552DF5
5A235EA7E738E9BFC10DD4C2B6ABDF8794929B68C055789F3E9C32180B57AE8E
CA4C6DA654AA4124D577D774A217D4897A261017117D7C5C55AAEF32B582FE54
F0B93A85F0DFC1C267798F5718CE4ABFBFA159B07ED5C93D976CCAD20691B072
DD49D3965FD79D8348CE3C1F8B633847DE60058E645058E425653878A1F10CC1
C84D2B69E1136A43B9372388E591DDE333E185F4E23E0A66DDD15BDED1FAC380
B91F8DE0F875032BC8A1930CA75318F382399E28AB06FCF0065DE36F91B4DBF1
2F6C352FA5F0492B73CCD90086FDAA14AE0CFC2742A66EF2BBB6B29D16487C3C
FA6F892AF5C05879B5224D3BB7D31681D75354427E16368E1BF924A8A0748B40
5513A645769B48F4B3C4262F57BB6A235DE12B38D5DABBD8DD0F6F9FD27FDA3B
150A099993B56B83709540C46BDA6AAC09689487F5E0EB021CADA860F83B7338
75079EFB568ABD139F70C1EA8869611D9D4D5CBCD692988A989C16915E134A47
A4A117A55B66ADF5E53F82A191848F9C630F52EB497E89B5F145D01D56694106
9B76780164C5A1F030379CC9E763CF518CF9E2DD473EF2D166BA507A1EDB1316
16EFCF91246FC75DE3D8AFCB7CA1B7CA84EEF0FAEB46F0B4B88192BB6AB1758B
6F406C357F05A6BFEAAEAC4737AB470623102FD547652082269DEB7CCFC1C840
AB18CB9C2773ABC9DD5B1A5F83AF6A90C0313FC09C2F4991EDD9FDFDB76A9F08
5962FE7F1251D652C1E371D57B511B52A4DB8F69D76C3BBB447074D1103036B6
95EDB12D5762D8075F69A145829864608FB4D78854124B117B2F35A1E2F724B9
928D3272F528B238359944962E09541FBB7A00956D1ACA7D8C2350B454C620B1
E6D5B8288CA707E7FA2C69204A46083988A52547BF7B3C89184B4B6AA619D660
B1402EE393F12610C83BFF918FC60843D1751DD0FB67FF10DD87E3187B485D84
58FF1D6A46682D801AAE769BE7F49BD6526B9B1584A4711E28698C37F1DF9A09
03B2FE9462811FB9AB1961065826D34C38C598D8626BFED7CB672F132E065C48
463D49DBB6803FD753A9E426992ED6BC8BEFEEAD4ADA8477F6552EEE7B621ADF
DE8A66A223AD7465B8FE6E531D9770EC0ED49AA31FA3F91F3F32707774DB00EB
977C5EFF7AFE7DC3807891D039AECEAC3F500A09579E6604D10675F1D60FCFB1
B6D26AA24377760FEA6FEE94FB119E8EB366AA299FC67178BBC57EB673F38730
E2C28D89F1B4B8DD91CB69558534CCE31AE7E157D0B060877F9FFCC4844A5984
1C7C7682105E23A374BCA91885E744912DF3620A245C8A5B229AD308A71FA00E
007F6BFBF96C927E23E338A655247C509A950BD2C3ACCFCBCF71FAD299F22A14
34E7D661083C7F8D02F91CCD580EA19FC26EB49BE412452247B0D8CDAD32D698
2637028A7DB25BE15F0AB1195D2F25778C99A04E82B1BE8D3870F6E3002F6E79
164A87AB4CED4A848913531321E4CCF342930683CE8B995EEB19420CEE8E6B3A
012AF00EF8A7E879A61719EA286FE90C2E836AC107BC883A33507560FEC3ED72
D91546DA4EFC75CB69B897C9EA83852D31F31DB5D0DAA584E4FBE6EDDFA3B58A
343725C742A8ADB8E2490D6B3B48CCFAFD2392C817B8F7FA666FBE36129A3641
9CD98EC0DD45A62C8B6CD6D07686293565232BE739AF0B70E5046A4A17B5C3E9
DAF063B335EECF830F146463EE85354BAF0C4AFBAE8CFD73A596F7C7AF437B8A
D4F2F5AB3DA5462EA74965A151E84283C2FFC9FBA8B7F9D8DA8836A078A4716A
24CDF975CC7EA03D80D1B3F78C5A27B19C016CCCF8AE794B156F8A765F5298B1
2F090260981F6C38AC8D43CDB3A383FE182EE89A49C28C2D635A298D6451C6B3
D02964A9D8352191AFBB572C2D61BFCA954964BD918A9DB9077118A042EB52EB
7800276E7502DEE57228948FA48884514D67EDFE7911E4EEE0C0AD432443B8B6
36C43D2B50F1EFE12D2352A8DFDBEB066F94C0F37AACAE40009D0682CAF5DB88
E408B799859A65C143CF499E5E03218E29844B569E2EBD6271DBA6A5B619FDD5
8DB3FD8695CC7E4D624573A635B65951DC366F76FC5B4C11DFDE03CCC5709F6D
806CFFFDB6FDF9361520D4422239A888B8FC65FD9DEFC68C0C2B37B06923F120
D2DD250D693391DEA7CB26D4A418E48A2989167B7DCE22F1803545AED50CDFCF
7246DBA338D269EDA4D6177AD9173235023D5E0F563059F9959F021413C8DC61
3D035BF22544BC8487EAEB01B65023A6FD20406E7E21859EBAA5AC022E22AD61
2B2F013E31B97F10172423BF5A5407F54179190726592F5D4BCE6738CC357F0E
B6F73D82D736703874D4991EFD61104D18E85A53B73A1FA96E48942DB6A0146A
B08A3DFE98951927F9C3A83202250796C59F8E61D57DE5ACECFAE9F3CD33E155
543275D8C75FFBFE827E47FEB12D4C3841165CE7E2B5F9CD05544030F7BD81F4
954E3E9F458653B6CA43CE1F9164BB0FE39FBDAB233679C8C3675A673E6E6554
D774D715491E2407ED9F8154824B719C8B575FD784DA7688FA287F7069D4808C
D9D7C18DD6A189304A5B5BD93348951B354102F98A86E317AAC4CEB41D8964D4
FCB5E4DD511B6A9D5A0C7973AE8E183D32A58D3C67AD87A413F6D9746B6BCFE2
EDBF4A89C4EE9C0C48A72985276AE70079BAA0ABCC95DAAFA46637704C683E6C
590BF2EF885BE65A9F57662C7908E0A47D4C92EC61C5342099C27D93A79D9C9F
278146FCE5B34B8CBD7B6D29896E8D1807150C2282F119071A2E23A9B9F38145
F1DACAB2F44A3C82D04E639C8A3488DA9CA87BC9F910524EEE46F14F2E5DDB7C
197D9B33CDA2861D1EFC1616B16091EDAC559A220F29084DD86CD873EA8E7DF0
9B18829BE2523F89F383D270C1312811B1D3A29D3668F7FBE41F4EF6A81C0F9E
BF9A4CF024C1D10194D7EF3EE7745D6460F94622AC516E9D777D6C65386C7E60
7E26481C02A184638BF92CBA44AD89CFE59081E3EB0AAAA7D87D8EAC69E3C8B7
7D780EF389B8367EC78E45BBE693904A72A20A1F7C70C68627A5356470BDE95B
95F19198D5EE9A7DB22D584FC7B6F9C35C47D639FA4FE1D6B6C4C7A6F71524A3
FC7E01BA3CCCB302F2F1DA611EED5AE7BA60B9974A0A2C7449C76238BAD444D1
29DD1673129711D3BA7C52C08E87AF023C833F2E36C296B4AF16F3A921AD5E65
45C414346FBDCCF69F29187B325AB3AC6F537AA03AB6FD0D5BF4C9BC3213A5BA
19D27374316C27000C17941474D1D90B1B2F2A74D00F0E54CD8D56C87234D559
4796765CBDDE8E2C7662221E2CBE5FDB8E63580BC6F3F69F041C7D00EE39ABE1
F010512D099E6991007574B51F1790EA75B813598D80DF5253EA093841444545
D7177A3F0A1E7CEBBF7EFA1DE6F11F14A2DAF8FD6991020450E767F2BAE509BE
09CD82AC7E689BA197B396CD462AFEF719B98A3B71E2A4EE7E20EF246C6E0A3C
23DF8013D65769CAF3BDB6BAA50BABE2CB47D7E251C0724CB34C69B407CEEF63
0162F27380860A97C486B629AA0476D37F812FED3DDD7CAA05A8DD97A96471E4
C723CBB45F0FADA7995818043B761F41DA28411430C42A3D1366F57F0124EE7C
8370B7A96738A152186EF35D59BB974980F8D0478935C577AACE253B118E0F3F
CD26977D99755C786C272911BE7935015193246FBFDAB3ED718CC8AFFDE2BAAB
56D5937DAAC2D54DD4EDC963927D1BA8B8233AC009EC59392B7E3FD59E27B303
7FD1752DF6AF33E5A6722A26ABF5A82FFC70D5688069D3A61089A2911C7D6C56
6DF75C3281ACDC131428CBE0BE100FC2D83D762E93668C0619E6C0CB4C42F5F1
0BEDDA8DE50A06B0937C0610026DFD8ADD7A7102DAFDD18952F92018C388553C
4C1DC0A7037B5A91A910B6AC680A894F4CD10296D1AB863C95186206F7453C17
4D514A9C4125B5A1A79E3CE4232E4A1335F1966DE7C21DF3510978F78875D415
94E6DDDE2D44C7385CC38494DCD832CC94C08F0492155ADDA8E704EC5CFDF86D
3B00CA7934C296F9D359945ACDCC8DA70D5339C919D9954FE91E079DCBA8B8FA
04C041A0E29BAC5703A83039CA96985A76B61AAE665224EDE522641BB0C9DC62
EE166334B9919AD6EF2876532B64A356B32A047802C9BDEE75029E991753E678
D013B8AEDF306CCF2727CAC4A13B4ACA339E375F376B7BA9CEE602E9075C5E50
9FBABC9016E62D7D5AC2A95EE29654E76C73BFC3C79DD8311101317A71126DA5
1BF79CD3F931EE74FD4C57FF541D5C0C6801DEC72AA27C0D07FCA99A425CAA46
5C3DD484429CAC1A913AEBF5534817AA98B4675FB0576610A37B6F951FC4064D
8B66466CD36ED4A688023BF4933D7B415FCEC04738328542CB13A1A9860D6947
05C9FF3140A3CFB2BC5B409DF1132BE0E33CB1AFA9A96D3518E5AD9ED32CDFF0
84D1C0E486D2692E95C0C01CBAA10C0032E8E7384836BDE8A66BD16AE8A8573F
F718CEF0E2EA461EF974D242BF0ADACC44912DA6AF1374FE190DB63D26C2FDF5
7BBE1AAAA2DB9D72EA5789B071CF0454074929A23EC014E6F3D1E6E16C437158
C1A66144F836F8EC13A5A32A91CDD341E13F829FDB1B828D9A9D731D50FAE5F3
22EADE40E7595551D64A26F8E88A895195A237D07BAF94FBD27B57EDF49EF1B2
AEB576250373D8383DF96225FEFDC9FAD48952E040A9272C791CA321B950C8CB
71565003D4D310E335A36E7C35A3D8279178B99FD3875BCED31F207E1DB47B80
0A5E490C578D5760BF6A389251D6969B8AF3AD360A8CC7BD125A4054191383E7
7E963DAC466447028F139D9C69ACA0863023430A727D50DFB8D021C3FA1F371D
C668BBA7D956CFCEEC3CACED14896D6034D50A5444881CD327929D3D0EDA0F4F
7211B5B5CC0A348F325F3E45531783DA2D7B74316AD3CFA839A3F2726AFF3A2E
092658E4EAEFADD3F6744C6E2D6347C8510AC6D67E95F2077265301E34E44C4F
766F05E081E7342D7E663CDC1D96F5D2C871B19F17A2833AA4ADF9716441435E
BF99988A74903562C1A1704AFAB43C3DBC5ACA4D4A6E297AEFA273D2372B8C3D
EE1DDAA413B13CC8A55D7299D8384FD7174491CA7CA820ACDDFB68FE4D98F675
D87DFDBBB1037ABCAFADD389C7D3CB3FE2944C3A15D5D70DCD8AE0F36B68AA8C
5FD2E0E871DBD2628AEC086D338FCB856C1CD7DE9E9C0848692C38D1E3016BF4
B4E42BB4E6EC288621C12EFFE5CE74ABA28C8C578549FF7607B2B99DFB0390AF
00C19FAB844F6F01AAE2BADB3C2853878F64D74606B0E9201EF0CA8F67CCB7CC
009C8F39A0346BCD82386FAD5FEDAB9A24D99EB12F66F5579AD58DDDE9ACB798
88AF725FDD44F3B23F8FBACF1E5FFBEE80D30BF179A7625A65F55FDB5407D4C7
BAF438865A206F4B491AA6F1F8523E200FA546107734B276D7DF579E7397D532
709F7A5DC180608370FEA2F20521FBF9165DFFC907565C3BD36DBE762F324E4D
140B511B4CF0FF6DD812EBB89D079C9C14C6B804D8D850A0FE4BF80988B2D039
266A453C68C647CE8EA12552AB0F918E093F5862B2FA6987D5E004177EEEE391
AF71FF491ED33E9402039E776130C300F527446B86B890191854FC5CE6CFD00E
835647925B84D116EE6F2F9709187151998AE9985FCAF4B29FBC480B5C94219C
F2BBB1ECB95924D935B166D33C18F71276003FC7A5BA8C7098A366617D3A5D54
515C2A9FE9C711057F23D8434E33BC9D3A37D5D5F83EB1D6CB6DD459E4B345F0
54E3B3AB936E79476B76026814E9C82CEF53BCB54BEBC6818380E332691677BB
DA711E73F6CF45F31613A24A30023BEA9A24B3DC1D0E9012C6B763746FC0A2B4
2143BC174C525BD73755C017533B7CAF2195E89F96FEAB7D91BE5CA1D9126928
21076B58A9D69B6A72F68743A3C4DC4D7CD5BAFE10F73D7483F24ABC0D95B1C6
A9DB9E8F2A4877942849E59D933A7CFC60FB3DEBD2430D668B3D174C7CD69637
FCF43C439B95A48FA01DA34B5C399EC8874F529E4AF1C94C5C47C34D835DB493
AECF6389494276FDA4925399C6786D72A2A2F6210324DF3F0DDF8297DD30D76A
CFA6E789BC3D2799234B4CA0D09D1FD373A0A1698FF3E496A6B7EAC4A4E3D0E7
5D66E142864B587A06D7237D768A9B79C2C63001A415D6978EC80CBBE250BA05
62AB6D2E1DBF4B8AC85C7E817DBABA0E78F36954E9922286067C26B9F6437283
9A4469119A8D00AC98F7D6AC1A5FF96296D4ECDE7D4739935BF6BC6F9751B294
4306176F7AB22BB055256CECAE9184C1E3851FCE2BA9A86A1DEAE13F977A0100
B13895988AD2D1F4DC2FB40840A0CA3622577953DA479E3876BC9388C67A6B10
685E9921C790177DB8CA06CC4E7CAA58228247DBA2B741188B73332A47C0CB76
AC0B627131B95E5DEEB83403092489A7A0FD2DA5720B1E582EAB8DE294085771
87AD5BFFCBC7EE740CD1B05D0EBBC4131B9CC9CF26A4C6E034E26D6BBD97BDE2
F1002109A61C15F46FD36A71D990776D3F735A7DD2B3578A26A28904EB2D5986
B5BD875EE980E0393405F62B2D7D287A622FF3C96C68D4FF66F28DA43616D318
5497DD7693099303B190E2F324EC5843EBDEE418E3B02612EB9BF36D1C39D5BB
3DE3F2E6CD6304AF491611D10817885209475754B009F47BDB7C2E7E3701A665
15C7199391D352A5F3540201F53393DFF9FD4972DAE07EC372501A1493419F16
DEE7887AA1DFC931389878410A4339C97535A6E4F812454833BEF05947F6414A
FB850BC9B9165DB9A392D09E79AF518630C4F063E876A35D66DEAD49D3AE53F5
60771D493F83C8EAD6D875F8B1D7A4F9044EAFFD8C81AC0484F0C03336ADBFE3
56DDD6B35AE10D7AE8A23C751014185DE9AFC917F2D783A0838DB3CCEFBF687C
2500E3DAA62B3FF0C184955E04FC32A6CB70D96B0B0340A268B0DDB25BD184FD
79C57C9EA994EF534EEF897355BFF6E213E8B7FBA1F6CF98CFC60EC534F70199
1377B26AC761B1A938DB70C841821BEFA38DF9E8C94B0BFA4B5028811DEAEF9B
DD2CBEA2CC1E405650966D65FFE66DE483011A4F305AB1796BF596B2722965E0
6BA80EE9423004FE6A5544CF02B59DD72EBD81EB4DE6CAADDACB20AB6BFCBDD9
5D322B8478B7485BE9C86DA39A76956749691B0E9C8A3CBC66C2FA69969D54CC
AAD12034429C527700DC510B038A5771255F6E67094E19DA2839DCE0708DEDC6
3DE2EF7CF2190F7D626A4EBE502583121CB197AB30EA21AA31DB296FAEA205A8
3324D3584CDB9714A6250388F3565BDFA45DB0FDF9B94F0EEFC15443A458EE44
8BBB24E1B4315DD460FCBCFD1E8711A961D132593CEE2A2134790EECA1225C71
C5B04CC28621572A68C9F0BCBED39633D5C6FF4E891186018DFC13B79A295B08
EEA8FE00F666B8FC1B0AFBAC5DE1EFBE831583BA485A88D8AB7374E485E944CF
50142B0C84B72B2CF6E0D55D0D712E617802976F8F223C8ADDCA895309C834F9
F3752B178AD1EDC212E7FC06E86F8C31DCA96968D3A11D1056E8D567AFE76F96
4B9F717BD287A94CF9C80F43E160BAE1ADCAB72565D3820C5DC08A716507690B
BCBB9C0C800002B474ABB0AD5818B78949101079D6A7DA8491E16FF3F53DF9BD
09735AF52FF877806442197F09EDEDCCD9DAFD1F0008AC7E75F54402B816557B
31413BED0212866BA7ED46F2B0994068C2F9F083F990F219B07E7539145E1191
730E2CF1B8B86DAF7D7032AA640FA4B7E6E0F98D758E1F58080B91D193781C39
D765EAF078B4D1A2586F816E62D99AC2321C69C342BE1D9DFAAE817D668C5260
5AEACE5974C1F4376C7C4BF4F9BEF341C5B2664EC539D07D70AB6793DE8DA153
690D735DB41805D142C72F4A20A32BC4C9ED58F7FB52BD7BD06B3C464BC9A66D
854E9A5B2B808890A43D9E7F59104AADCF79732460E6F02589CE8192748B2852
0B4499C079D5A6DCF4FD67976D71E22D7C32DD6A251141C84EDDAF6793DADE0D
2B190BEA781C5DC9096EA7552AB60D7A00A2D1EE3036FFE2B0B9FB06E184655B
54E82FA19C6ECB9CF4F23FC92225DBB80C3B25D069B2D7B0AE6C673245C688EF
D3258B4FD7D591A617EC7403730DC7FDC3F6298C4728CE3E9DE52B2BC3CFD181
277D371765E3F5FE73B7D1E30AA1078F1D76243E898F2442AF858196ADD0AB7E
C59A2FF2059DA4E29707C31DCF1707AA6583AFB9A309EB159CECB3AE1ACB7E8F
298366DD491B6FB178C6D6B8F8A8AAFC815D7E55560DB1D261236A9754D3989E
1B31830CBB730B03279D7E2F2A9CF549FC86FE0E0B595F2DFCE912C407202AB4
5200693D9EFD2E0110B640E38CB4A7EDCE705BF8C1899BB3199B31F30DDC4241
6A75061A2EA63582EDD7A8605CB9B576F4A07C53B4CB1B91F60C618B30759872
0732AA1A19BABCCDCD717140938D234BB2DE96A6F7FFF6DB1FD83F056774CC7F
2283B249B0754796031740FB7194097660500901B25812F7A25307535F51B9C6
E3A0B90629040B2BB97622C5C5D8B3E64238578C1DE300AE2DECA9ECDE88EE04
FE636A43B6B361AAD79CC5E443BA832436D1EC34DAE7D9BF5033533583821D40
C476CBF201DCB485D18FBD2E0FE571BD1EB145FE7CDB51AD405B935961125F4E
43D88E7B92DCDCB3F560C5391D6393FC5A0371FAF14E7D7542B1B42D69232884
7E7284BD5482D36C0950531D1AFFC94017D741EB32F0C45B222BA2A924049F99
B840F337BE8B11C5EEFEB6538BBF2021DFEA54F207742D31C0B69DDD41BA8872
7A808696202AB3B38D6ED2FDB24C6EAAE0DB49F4B1C4F1C38029CE63EE7EE029
A0C0B16FBD2D0C35AC8DDBA4E9FDA6D4CA738BC94E798EE0EB746B23CBA21FA2
9503240EF2A29AB36B7B6F424CC20A98FBB384FA3452AAAE1AF13B4929CBEFEF
D5C01936F03C32E26E9752568586AF8F68C03CE7F91F523A2F174B13F64268A1
8E8E77FF6F775ECFDF9B0B7F579C8A4DD8D901A5B598D721639E2A82FC866FA3
57BFA7E3B2B839838BB87C04841CDBEE459B73A918AF06C0880C2DEF08A6B185
F274EEB557DF134CA24FD21000E26324132066549F95CB77B32D6A4F639D0B81
EE0E6E7DA480959E4F8348015D1F8D9591F91F6A2A228D840E57D52CC184BAD2
3950B28C3C59CFDA8181333CC7EF3A584F29947E1B61CCCFE7B78395D5A3CF68
27124B0D6487F94AFB2E17AE9036E1B56EEDD029C6A53E94FDA12E86CED5F6B3
16FB29634CAD38F0B9C8B1F4A73AB259EEE0DC257C002B5FCDC1B9E7775D3F36
5C784524E0BB5EC0224E080DF4FC740725418AD8CCEA562E4CE72ACC8E9F3D67
907B4050DD4313E4E95EF702B6CAB223B208068E4E3311F4288E56438EE91BC7
297A8469F567938D322533A3913ADD50592B708EB41E3E01F5978AA3DD52017F
47C773E1741043EB837C589B4CEFAC955BD04F4BCB9D5F8C0A6FF463473278D3
831B545DB05487C88DB06E31E6746B3EBBA9E6A7D63C4EFCBBEAF27168074F3B
AC5697A87A2C3AF121144C3038D3B4F66E0D1013682B37DB13E99A56A47A1D4F
89C3686AA1450F23A5EBF94C4754EA159CB1D3D27326EC057B1883DCFC095CCE
0D9202E191CA68F10954DEDA2F6264B06FE833131E80E20D97F5FC18D8C09D64
7BE595260BB70C631E70BA8FCA40C0D86318F5D9FCD676BB03B407AAF88101D7
E9CC89CBAD30CB4F51749E55267744E046627E381FF09727EFEBB52E592A93FA
D32B83873EBC8C23AFF4F13A96F3D9F1762CC6BF4A8E1D84E1D1C15FA740A00E
FAB0C19B7B6C6A3BF8E8520AE15B9882BDC14A6567C19ABE55F8186365B30F3E
E02CD43B910C9CC062DE49266623AF9AB4BB367E926B94C0B83559BFF38F4162
7BD8FB32E62B80EAC9889414280801E1B884A635A73EC67F26C4A36894C4120C
6ED47AACAFC11E3D0B5706C714796D160A4B66F25512A73C738D78731864CE42
3FDF8BF943D93C7883CBF286D63B588F8353EF4E66581A53F55A8163B88BF112
61880B3026F475460B79F2A04859ABC68254D63423CA65D6445A2335D3765789
42C226789972FCD53625BABFE9264F58342F67A0B0EC105F70BED7DA446A3AA2
FA4194F8B3838809C4E5E9DC24349F29614784C3339DBF4C4D4D9521AF322CC6
5477008F94133D944C5672FBBDD96C888178E0239B9245DA7EEB851DBA2D895D
AF932C488BF2869CD82C1E2074B7116C3845EEA16B5282A7375B3C445C6178B4
603192E5E9D8452B79FF383823BC168252F57DC15C24014FC7DA1A9AB3C09DD3
0928904494416E3DF1D6CE0EB2B7D7775E395BA4BAF7F82F0850D4EC408D5FDE
9FF42393213B2A8644DAD9715A037C5A88EF6301255443476CD4A84360DC9B6E
CB0543A5143464DF9B406DA721D13372563DAB6D3481A92A83B4687F352DBA80
7E1945DA8CF495BE97E6FC940B9B2F00EF3607EF9D22EBA9CFAF5D7567AA2883
12539283644DEE44E8532B2CD417D1C1F2EDC7FF839307FEDFFEC8F435767AC0
0997A6BEC32A11220E2AC39A160EC8C9E5E1AF7D9449E79298C26967A42A4BA6
53D5C26C224A560EE958725486FC899CA81C5A4188D50BC8527BB8FD0C18F1B7
B4C6F79EB0049A3D40153608AFDA850C48AB8977B7C0726022D0F929F28491E0
EE47BE4421A95E6B02E8C66AA06F9C88B0A5FE6BAE4E133DC1A8FCCF41B71CF5
82343250BA953452E4572CF594905C3FD4C715E5ABEB13BC9070879B0FF21856
DB0D8A9C662F1D8DE645E9AD7B46B7A28A5E729A827C14111F36E55302A176E6
F63445CBEC6335DA7EBDF5C56C2B03F6BAB0D5AC4D24808941E5C28F6990C269
44439B59CDD0C32A0411F64D448641380E55392F77DFB04790905077BBC7B59C
5C42CAB2E88D2590C36F6F97012F4FD7BE86ABD340C9D85B35D5952208A9F78B
DA91F62FAC2F2E1F29EF8671804EBF3DC944FF97FEC206ABD08FBBF7AB6179CD
953A54B7E44D6F9506B8423261A49D7F42A3FC5A51D3C1504EA4A2CC80D36EC0
611DB7DFD41217DF50CFB858513602932B3D0D35319E2C674C07B0C87EA3885B
C505BB0A5E9E08EA3A9FA6483A5FD23A4327D12507EAC72A7668ADC14FDD5CDA
FEEC5907086772F4BE1CBA7691480D037E3132FB971730371FFAC10F5AFDC7F9
B3E00D753AD1672D7DEB8646E417217FD59ECACC94B7272DC613F965E02F1CEA
F8F4E9B794586A9CD11C14D25342DE63682A24C61B97BD5D4AA0E355673A6A7A
4A84C8D8AA9CE2EA00D3BA5057A7323AE9C2D18348DE00561777DD1CB32951C5
1D9BE07F40D9B4C2CE12CE8C5A07EEA9557D495AD158E9C22EF9384AF0562C85
694CFBDDBFDBCB94A0D0218E0038DCB47B5C404D62BF45C7F684E59B9AA6628D
E75D836E4E6764E04DB26128FBD189C68EB6ABB709890C0C31AA1922FCB9A6BA
94EC16802DB8ED8C15960B4579F73A264BC10A55DC4DB309601C4181DBC8C580
ADD685C036262D20D6BDE27B65F9176558D8B65362F61FD87D9CBE17EFCD0C6E
1D1FFE3053925EFB1C1A29059487E759C55444346F51053A08C551220E93385C
29C2E8B766535A164585E4E10F21E5106285F4FB6D3AABCE86C6EDC25F1C04E7
9B685971E34DBC2CFF4FE924AC9063FF903274B276D293489BB97B6DF2152047
53DE7C4A3FE2B2C0CCB981B4BB62B6863A4CFAE37F715EDF3EA5A33679FA74F0
0845BAE801DB3611D794FB1A1D878BFDBB49FD8B745BA8D1E0553E0BE93F884A
17BBB0741AC2E477F3CAB55AA729387C6E48EFC3641A1DC59A816C933FF53195
40F942DAF6C658893DFBF0DB8BEA767880B7064D05A0FA2B05A0FC41A2679431
25A76D7886A4E6E5F674F6A81CC6DE9BE82279CF5415640D5F1DCE22B7229605
912EA5DDDF29B22F885988C306058ED73421F9D738DBD7BFCDBDE3D7990C7022
449B767AA3A9EB2E5C2790F8B1187402AF07ED3EBA0348F6096E77948FA1E14A
0D55A9D2E2A2D987262A9B5E86CB221DBB189D80F8A30ADB02BF17027B22A231
C117758E55FA838B5A690516DFC0F64025C76E0550B80B8CD835221447A44807
B5D89D0FE464663AF7A14D5673A73774870E99EED3D74C0EDC41BDA6D8EB06A2
0E395206F294CE1BC740EC90A0764E9027D61CE5938B121AE65443A6A69628B4
0736B1AAFBADA2DE6F39CD59913ABA03C4FBCC772B77EA42792FC42F4DCB37AF
47A894E208E183E1D37D9BD147A2D7C0D6183278FE8A4C3B716BF5A381058317
B975E878DD5C996A014C998B467A6F5AFC7A4831E9033E6406E6904C934DDF10
25D0C7DC125D57BC27C29BC53A08B1D1CAE774B553E08E0993FAD164B3EC5B2E
52893108C4E1ED45BA9EBE4037E2007327F2F2897EA84E32B9D21CB37C994B16
6F747A7AC47A9D2F4A10FCF32787186F2650B1FAC8FB551AF6500A26ABC849FF
F0E9969FC293CBDF7584C79A400005EBBB793A0B71577BD408C15C2152DC52D9
027BD4E1FA2439F3AF1B989BD9CBB3BEF08265F3D767F11EAC15CE6EB800D167
45C5E8F74E77818CEC06549E99AF5E82A2A9463279CFFDCB820EB0DD10EA2986
34FAFF21E8C8FD3D1247F6B05A5E7A47526378D488DE309608289200A649B80F
E0359DDB6BDCD292EE0320B1B6AF5E7308F699FFEE5B7FB9F34A31386F07D66A
BC40B5D16833F75F1E67BC40979F9B86E0222012DCA626F8A214762C26AD7280
AED8771C6EE2F7E2D86C5661CDBEBB354194CAC030E18A42C47DD0FA1EE3521C
98714EC451AB5461E3EA6FC1C0132B5FC4AEF8D13649C25047D5A37CC93D75BD
93C1F87AE8E2EFEC6049BEAD2690BDB45E16C1DA0E47BB833B0D91A874F95B68
C0CAAAC8FAEBA2626CE044F6288DBA2E17C19C9270E74064381314CE489521E3
B8CAB0DD9BF9D336F25E5799BB341C0177F10D973F6FE0F4620A7A8F2CF6EA77
EC690C25AAB024108A1E5964CD3D359624D9BDABADC859E42CE29B85E12C0102
3E230481F42A504E56A4ED8BAF6E29CAFBDBF11307E002BF1ACC7D1D0E4A13B2
62BEA658AA67B8FC1B1350787555D4FCE87B674B174DC6CF1ED0FA43374E288D
C93DAE2198224B0BA4B135CC8709B34137EBE447A68F1A9E84C2051FDDF6B44A
2552C20E9C17F1F3478D685F972CD435374957485E52C2815090CA3B1221A12F
749E5C419AA6EAD5201AFE350331379CBFE17C14503DC1AF1FFF39B25EC95761
E9DA0209FB87B7B7999137EEDE3829DA2D5638FA3FD96375E2453943787C3368
062D1F5A5E234C6821D3ABDBC8CD3907AD5C96F7A59C33C614D69D0A618844DE
E9C0E12E312EB7BE30841ABCEDCB449BD2EE1432409A548C32D0D98796983B27
AB420F87AE56750278CF3405435A09C1257CF1B5DC9D481BAEEC11C8E1544DA7
72C65C29E5D4372F8BDDBE50C0CB02AF1476F0150B88C0A6DA3C2D5E44022CCB
56D3894724CF9F0BD77C9459D61FC212A9A03F9BC4CEF9EEFAC5CD94219D7E2F
2A9CF549FC032DC11E3ED551BA31E9A6125134B7FFE9C2DBA7D7113E6DDEC41A
8E66CB9A9D72170B2BAFA0D30E9C43B860B5A9C51AF0BEF11CC8E85B067A4023
4BC1C98288519739BE3029B530AB99921E6EB29842A5BEF52EE6821291164B14
DA11FB16C0E671A610408294DA48133A21012A6EA10D9C8D741BAD7871776B6A
4EE936EB8C938441914BBA7C438FE51384A6985BF414B9897D2AFCC8BFAE20FA
24FAAEA5FC5A2EC5593D461538C1134F543BF9748641D9DCA66334B97295BFA4
099D149EE93FBCC6272AF549B678A76A6B70113D5EE7B15C46E393933D2C0C9B
6E55C8CD1B1CD90195F79A0A30F5C3E3FBCE53E520C96C0E1FF95BDBBCA637CC
D068A86773A3FB74D01A7D06D59725BFB8CB7AAA479AEED2F233B51BF3D9A2A9
1F226AF6CE3966ACC336165402863E27C1A4EA602F4C370C2628C44CD984AD93
56402E391761E1DC4C45CE37AEBC396E39786D70A4D5AE25DC5718B8A52EB4A8
A622A2FA90F0C09AA9F70F32F4D03BE9CDFA1C1AFD08F28E4F0FDB78E92C8738
3A5CF1546572770BBA3CB09E41AB8CD2113717323D60B99AE719923C6AE3C993
B61EB38EF3A1DD23A3C951D9913C2247C71F1AFCC33E2B5451ECFCA7EB8C9FB1
54491D1A57B150A5B386F7ECCC0EE8E31695A336B7DADFD8277B11607975CC29
FBB8D7229DA29624B70E88175591F5C6DA1BF602A2FB59F293CFEAD3E55F65BF
26AB65D14CDA7A270CD3BC6F03C3D6EA421CB281F2ED321B9B7DAA6D6A68E024
AD9AFC6B069C4A04A2599C3EA0A82F4DCB37AF47A894E20DE0F8F3707F5EF270
A816607F8403F17E0CCCDE3FB45EC1FAACC2E51ADFF04D1914C16905FA3D14EC
4A5D42391DC94309654A5840E404B4981876681C93A5101713CC605539B5390E
5C2798AC191D45D2355150DBA91E26EF3721C1007923C9DFEB1C184D206E5620
50E7E338708656BF30B0F9F25F51FFF1740378B96A92032BBFA8077123CE102B
080BF2C2DA460151FF5A791A58640765469ABCEA2F547DDD9ED1B220497B6328
F803F48A9DACBDCF243835FC939CC80884F5FE605A76F435F2BA2DA4EC207C1D
A42B88E26C3729EBE78E5BE272B3D2E1C1EA0BB5494B3A4940817CD2C89CEA76
020B823C5C3B84720D1BD2231BFA95D026290BE84B679A4B2D4DA19EFC184009
81B86DA1514592AF255F5A478D815AAF17751823917BCCB330A619768AA01C50
D464CB9E15CE93C237127218D9DAC186016C79F1E030BA8BAC3D932BD9D47C0A
7293C13389E8E1984D3027D3A55D103528A79957F0EB402574A67FDBA1E9352F
AD219A8080E584299FBC139431F5BBD04E8B18DDA3B40B975CC7CCABCFBB10F1
55B4666FAB5A6426DB949C6351CAEC142D0781C0EC0ED8D6D0DA0873CF411A01
B85B08BA500CC188AC4809175DC8778A95BA414956E9AC4C34FC220FA02359BA
8C54D3F134AA50F763C25B8EFEC25A4F0E5D9E57D501C32BABF1E88086FD23E9
68EFDCCFCDAC84C3FEFED3EB636670413A66581ACA50B98A7F25F5232A76837A
8360A3F4DFFC471CC035B3C5C9F87B96477EDD43D1BE88E31C3BA77B468D01FD
B3BE1F562CE9A762CC0BD22F240BBF2CEAD5C9E793C378599217F589B6040419
44B937F00F295CA7E8F00A36FAF7A456A2F0D5D1B977F4F4C22437FA6E17CDE7
C5132C7AC01474773706FA87CFC4E55D1214914B27C1FF580BE4E3B5C28122EF
D48583EC72F07F6705C5BAFDF10BAD03E94DF67762ECAB79A87D55C524317DEB
11C132D10F5178BB56D0B20D18D4FA63ACE71264FC8ED2AAA1C3101AFE0D1448
3230E799A1E53296008C8055E466D501E728C37E40836D36E024870AF0967000
6AB0B95372392A34BA66B9ABB1393756422F3149D33D9E3567B3169B5B3A8AB2
76816F3074620231D970C62FBB4D38C8B6CC089E0688F99E03DC19BB7EC5221C
E7DB0A55ACBFC709C4F54E726E877C30C9CAC13BB7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4850EDCB990134F321F1FD6696F64BA101037918C9
F3EB2C616987CEAA46F6C052EB3FF6F2FB9A6F974915B82B6608CD85F75F0664
5644A5E3888713099F73E90FBC9681A6432D6944A68175A656D126AB96DEEC97
7DFB9A5ECCECE68B7C706A15EA93F5FA7800171D760667E1336DDDED349310D0
BB68B865F3E43C4275DFD82036752613F3FC722D561C0B5BA22C873A42C13AFF
73B7A9B8096208922179B7EDF55236F13203049ED2D3A304BEF0120285E9FBC3
921898A37465752B57535DF5054235CB5A713FDF779C161E40A8A8AD8074AABD
6A06EA11E40F1F4F4090C99D86095BE64A36FA8733362A8D4A2273879968020D
41EAA7F6C1A9B682B344B7DC94AAEDADFD1BD39385A57F9383AA235717AF84AF
BF5D808D32071618FA11E2F7907B9626CA16609BFEE67DB56CFE2E2B90BED39B
54D866320877A767FE000D8A3386EB1AEB2D99809C71C946EB77ED556CD01675
A5D45FC8BD04EAF80C756386291444CFC1D7F12BB4B1304696B2080A14F56ED1
959BD60C7F7F5BFAF8497205D4BD589967F17FBA10C2EF19C1679C5AACA4F9EE
B15E13977CA81B5026C7E1EF4FDDFF62E82B16CBE3D401AAFA4D973976EF232F
76C9D0C0793684D68FE95129C326682238CE9807B35B2C2C0C32F4122724C159
AA1C41DD94D0808809572A0A32125FA4D78B525B256291CA389F839797A13591
6197A48D453611484DA293AAA6B62F5ECBC9D32FD482C74A5387629E03895C5B
946117AA34217BC77B1E075A4BB99145EA55CFD1D12CB1D2E72636AE538232C1
3966FC6E07843E4FC7A8FB27BFB4FF67CD278CA322575D7590D77B4E03E63F7A
848E639AEA6DDEF55107E8C5B9DFFAA47CB3CB5A614B77D0112527C9AD97FDAE
5BC457971A70DB3421293E16959B64702BA858C1217A8B3B836A947462E0B59B
37C8CBC667F0052E653D33F067997638BDCAED6DF3A8F1793F71E79A58BEF6EC
47F700C376341D757B09A3E31F6ABE9EB9021C1A6E311CBAB6DBBC8AECB140BD
DCACE9B1E80979B7487BA2CB786018E20A5E0355AA33D6FCEF382799F62A9A8F
F8262E8DE16E9245C61CF3FFE09AACEF315932D79117A513F6863D275B80A249
01CC70FA943FF9A9F5E8D5716835F17CE3FCD6FC5EF10AC25471C19ED3B2D164
93293F09EA311F49295310B0C1AF942753C52402014764CE7026803F091EBA60
AD877E9208260AE6AF24100E2B365BF89C5B679378A7F6A67087C57B5519A988
04735147BE66CDFF2481FE35DBEE9CAC7E77D79BA760EF4C53A3C983853DE8C5
FD3F25925955F36A3BFF3454FF7B226C0F001FCBC5484DCFA46DD8D89C69C886
AA0247C5EE233C9D7DCFAAEA1E34B8938673AA6D760A80C38EFAE41268C528B8
5A14387C3E29D017EC16BE7E6918E11E7AAE31ACB6E85DE4B2B15B93B7BACB79
AC25F37A4E4D1B370E59C78DC9EB4AE83D1CB6E4DF546FBC914A6FF52591CCD3
C464AA14A393F61610D617E196C9252A013C9532C303C68553C91CE83431F239
BE883C519B643E9EAE5142F698F4B47ACE43BFE59E3AA4C8B47CA18016F95C6A
212208CDE1635F4E5271224CC19B6D47261CEBA3DB1E042443B665E915991D93
2209B3F4C86C9763861923B2F335DE040A8C24E73A0DC3FFAD5A6A9249A29AE0
C70F71EA41B0A4A505263D6A6C70BA63EB2814D31DDE792AAD7AEB4FA346EC85
0781604DBDF2EB65869969F265341938B2C7D6B979342D93A9F5A23A3CE8A015
130A0FB817DE38359C63DB215965E218E892C350FCADB5F66EB82D0813EF551E
F65992B2E24B4FC8353951C0A335B53F68A8F8286A94521BEE28D7319ABCDFA4
A21B5DE536B34845B32A34ED5CA1F3D3EE2B04DC4CBE12FC99DA94FB2648B842
54D4FB6729B1CB7E86DB55FF4216E2F57A08E04B44BB36F27129E5E93EDC061D
348F162C03BEDCDF0521B9F31D29543DE2AD436B75778C0489533F3FD5742FC8
AAAA8A72683C54B45F81F355D9D19496D0F80470D6B289B760B6851EA1A9D31C
01577A0026C7929C87160EE0D8EBC305A07052BD82AF003A0EEBF1D6FF38B526
E2EA0A91866201E08792F03323228B622E30142E47BC752EB0EFF7BE8B688A36
22826EC83CC42DCE8356DB43399E6A6918A887A64B2EEE98060E47C0F4276DEC
FDCA976E967EED2CE2C439693E2FD2F2C26823FBE781CE97DF06830FC498BDB0
73AD2CA5EC36B4892379B00A5C8564FC9A915C85B66EEE33EA460AF6141D60E3
76B4E430431F049992647E2B744E48AFD33CF5041056A43F90D0E6A47C2521C1
058E8C66894928964B332A89C5DA71AFBF455E5A68FDD4DF74A8F1572F8168DD
E778337122FBBD1485F73B4EEC2651C3465557A320A0932B65C1FF77F68B89E2
BE7D6D975EEC017C4CC66C88F5BF25B0D84AFD6391E81ACC544000E97C2E4598
BC30968ABFE8C2E76FF1EB04BB78E7BB3975C777E2B2B1896643B51D2D25F3DD
96B454547AA6E39E704842B17E1E8EC5B2286FB19DECBD09D239CBDCECBF8458
FF1AD9E18F9789B2DB9FF2CCC0EEC5007E8D72ACF2D32BBC4DA955E93C086058
929DFFAA13FE99C45BD3E6D13E2003F05703B4ACAB454C6CB74F0D9C95D628A2
62AE0E744AE5D671CDB05E4E8C74D5A790AC0553B856619A14029B25D522EA41
1652D9A54F1D1B22718DFD7CCA5443327F61192D3C6863DF4ACB9C745D059C0C
2180824BAFBDE47BB46F54EDD7D7FBE6BCC41760E7B2BD1AB594E30D797581F5
A0E81AB0F7A6DF463EA4D5F9F6C5D3CD3A1EFE3987BBCDF5458684C134520E0B
2FD3B7606368797241B5BA06E19BE70F4334B48EA578982D5FEB53407BC29192
867A19DBBEAB1696E0E2C1186D0798C1C3A319CBA04421D3BBFF8D46AC997C8E
D678DBBECEC95B1E3EB16DD6D24FD2977DAE76EFB3687808DA0E9B042362B27E
CF0A649BF5B205854F9BF1F07A7DB49C5C9C8318DF97F1C3266753287FAA1AE3
8EB626E9A41CDC6BE62BC7BD4BEE941EBE1E65D96A80F79FDE63FC7D2A4A9E53
638F6962857CE95295B3979711C27FEC43D0CFA62423E3A887063653C1293AAB
F2A0B73E2D277287B0DE8906A1834FDE86D04C3628DA1704EAC540D5161E29D8
F48248F12BC8F71E5D13743E21673B750631B0E76083832E083EF17DE3C42A87
CFE2764E7D35BD18745DE29942902818A35E1689C4D588868A4F4DBE2FBDBB4E
975D99697D88EC5151E72495313A6E550D7779D1096790EB7D8991E2D2BB4E21
A11351ABBD5DCFEC68DCAC37B0D0BF71F72CC7901BC68E436B33F38AB3F01559
BA20D2E193824CE289C0F38693B95AF5F77F5E0A6E5DED0D50CB22A6C47F2559
2E2E45B8C16F89907FB0750C06CDDEF2505806DA10E1876DC7599F3D316C62FD
CE51B2C79A29F579CAE2CAACFCCD12B5C689DBE39D8078E427A56E50CB6451F3
F8FA688FA1B9F01286896522EA5CE7340AC94828495F9C16138EAEE72D20F59C
BA547FF680AA60D19C8AA1FEC02F8FD178086E93CB802BC120A50FFEF98BAE57
4017D615ED576CC0D880E96436BD1E06EA2B1126BFD0E224937759D156AC73C4
94C1BBBE2C4A91F4049C97D03FA54726D97BF750A44BC5EB1C9E397E5D2764C1
3544FD3FF04EFEC96FAA5B32B60456344BDB08C929F9453553452C97E016C268
C7EC206E4D672D1306407D69F633E5C7B79CE97EFA36B2805760A0315EF59D1B
19CEFCF89BDFCE2464D6436096BBAA101F7ED5E4ECF1BAE72C82F807CEE69B55
232560ED0B2C0AE9D1AF457BA4830AF3BC5AC25B6E250D291249089212E7CD00
9AA2C7F4C9897623B52692B023C4F5E0D2201CB19819C28263893057FEFFABA2
CF401E5E4E828D2F9A6B78E6AC615258E663C9D255FBECA07BE6F8332A5E1BDE
D74C9BEF3D01A082C36934BDEE62E99D8DEDFDAB154EC09FEA182E84A9AE7F86
E055B41B578E1515EF4D055C70F27EEFBA0B3376E05F26F0B3F3342C6F2DD9BF
8AB95F39D796E529135152807D4763C82B0886A92187FA260ACC7877E6214092
DCD8A43E34700DB9BF0830C7C3A5B210E9C2146CF7BC017564A354E842B11386
E5A57822892EB49FAF7E0D5C9B7C3D6C40D5626EF9E750C7790D7A3ABBB15A14
7F504B18841177E551FC4F6A4CDF352FDFD48E76C5737253FB5D2AE0F3AABA28
D197E739C1A1EC70760EBFCCF49C7D65C9DC6D24D6DA288C9EE68A76F7D836D0
AE73FA5299A63438F727A09CBFCFB4CF3D13A7D2321812C81B5AB9FFB72F006D
C41A8F2B8CA0CF190BB8B893C1C1CF3FBFF392EF05FC450805C5DD2A8E4F4C23
E114246FC103EB63B58F37CB992295363B9409C8A7916330905E72BBAC052525
3132E5A119E5C6E328F787072CCC9A2FD87287C8720AFC48DE03B577BD767381
341C584E2217D2F9F9B7CB3FE4F067F9F68D7637DF0982785DABB8684A5525C6
D23E6209368056BD3BA58D0F6CD3D13C09284AFAB3CEC3067578D72FF30455B7
E6447D19E2611C39EC0DE9AA9AFDBF25F7569316ABCBAF5B9672FF8D90BDBFBA
0CAB5050168125FDBF32EA37986750ABB9B541D3BD5DA3CD187427D60391D788
E0916A91BE57020406D0770CA932F2FDBABB8BF813CB9DB27CB44AA47AA0D4E6
48240D8DC00141148F1ECA353AD07C46D076DE76A585CC2F1BF70577B9E3B6FC
B6764227AACBD15214654422D7C886130A2BA3AC50A5A93D31607964E58D19D8
317B77DCB4ED0ED2D2B38AE272F20B3F66F8B1E65BC0EE614B5D11D130D46FB0
53EBB67B9D376E328F17C74F1DDA7C8FF4DB36C3CE850B36BD310D1A184C8807
AB43ECA2ACB6CD6266B2CB7E8ACD4842C053D712A351CB4AFD194979890AB29E
EAE0A9D4269639BCA4454072A6BA5546B48FD61007E164E75799005327DA99E4
94D9E1FE8EB703797B611CDDF07707CBEED2908CBA3FD3A288E01E2B9173557B
D09FD4B204A50091FEAF534CA528E5D88EFD8566893F56B21BAF39CA6E436B3D
F24E7DC6AD37137B49327871EA80F3BDA21344A531AC2163E04A69A25F308923
16F9E4699DEB171F0A0F1BF2485E0491EA917ADE4954D0B1E1802504671C951F
04D6B0D0E599445910CC42F926DD71C9A46C2D86BB3061C215420F75A9D089C7
BCDEC50559B82AC15A788DB113A3E347B57978DBC344FF1C817A7836AFDDAD6D
859BD71981310F02B957C55D77B1D8DBDA6BB21731E6CAEAEE832EAA7D5B6BB5
D9D2D263B0C712FEB9205D452D3B835ABC68EE4F0A91D2B720BB2C5A1C9675BD
13571013AB6B2BFB92089431CEE0931D3D2FB8641D3C3B18FEC9D5FFE44F8C79
1C47B490C8E3D8B586D52D2A7ADE479B9877082D321C9FCC928638FCC2FD5B04
E5332EDBF7A3D1A4667CC9A1D236D4D282C85ECE5BC742C2BBAAE58386D7A6D4
D54B096463E1F3B65E79B96932A6548D31127A6FF5F873691F403EB1351CA800
EF6351706E27D43E3102CEC57B8A586D3FF862999D20CD6BBE60B0BBE81C7658
FE0FA56CB08449AF3A89725CFECEDEA22D6AD172CF9DD1B8DC9E23D1751721FA
293BE262D6D4854EF062A55E990D90A532C82ACE33BDC0E2A514CEE73574BDEA
10C3DA37A73F99724821E1E756D3DE2C1FB7EBA3B883E515D1C4E5829166B8DB
BB1DD9484629533A54D1054B1D220722C9E3E541242CBAE6B1D0A098D922EABE
77149F7CDDEFDF6AD4BC9BF80F3188A55927B13494BBD37161B684E307550C1F
557F6C61D3B4B6B0FE1B09A2A4254B80C17134D2308CDFBC3BF32EBB01BD6BA2
D4FB58CC51647721D4F7F3FB37F36472F6B02B8A87D131527348574CCF9343AD
DA08156FB1E6117FB21C2C3027F4413C0DFAAD91E9C3A38989BCA560579F6436
CA69AC6B13AA52DC9F2827BAC12E0E45B310AD8C11FEB8A3282D2D868F92B845
9BCB9EF09ED7B52B92B00BCC6ED3C9C43A4C530DB3EA06EF9672983138D71393
3F6765EA45EEC0E9A6CC520FF3C45B5D1F4889E4A1C039D6CFA024A0CCC2D98C
FA8E2EA9517AC5FF1A9E33AD527956391F91373F67E464D8057C5EF17F1C3EB7
2CAEBA74FCDB0935760D221A457E0EF8D3509E39837359BA3562E0B72086E8BA
D5B6494BEDC9B9C7B6A0D6E6D116146E8A99F94F0BAA5B6F3E6DBEDDECE52870
7A7A31EAF5A8AEDD210B1CDEED78BB0428971CC9818FC947D8975301E5307BAF
08A8D70AEE51EB0ABDEEAC94BF3611A6C3560C814AF98E4C6E81DE8EFBBDD3C3
55E73E38FF48F0FC3901EA152D2A94C9E3F324BE1B44FDDD59827A252CB81BAF
BF99AE54E259EB9FC3E60E60177E357EA977B02A321E7A676183ABBE7DAEF971
70046518FF27E67EEE2AAA760D1CA48A0E546835F9EBF4B1C5281438A99B6FB5
A74471BBCE14C66D2373AB02BE7341B5F4E5D10FA38E37953D3E96DF82E861E3
165A1986B9FF4D679B9187446FAD6548D0F2F3DED95068DD374600A6ACF8B4FE
9ED5B391A5D2DF077AFD30A9EBBAD493D051B6F151CCE21CDF95DC2A70940F14
56407029EC3B54E7DDC902E2CE3DCDF8C80B693FBABCB73C8C730543071E483C
B9B1E4AC5CFB2C9F6FC1E42343CEDFB38717C0D90AB406A2F62CD9027E5A7B4D
1100278F47D393DD4DB22595437E8DF94EEDDE8B7549844CA55796201DD36642
B5A8BA107BAEA2B7086DC2E483DC7AFBBF6160F7565B29F582493D36983D2DB6
47A1C90043138F02A0BE0D5852C4AB7901FCE4F35A3CBC22989E29BEB0A16BD1
224B46A3C56702C50A9C7BEF4D41B4475BA5117DB4AAF5E9560B1EDF520EDFE3
3FEA9A5A35770CCAA600831DA69A9A20A5150E250037C2B71E87680C90504F90
371BF4BF97B103D6CB8A2F8972427A47CE65C55791AC67DF9ADFAE7362EB8615
5ED051D38CDE37A997758CE0433307E5B683B5760D5B4C77D25AE31C4A75BD8C
7EB02722DA8D89443D43B03E7F03EF36CE0390DB45EA1F0B6AA0630DCBC439BC
6D3466701360B64A0E68B3E4ACEFD98F22E80F8BEE2316DA55C31E3FE7541B2D
B7C9E5641428336BB88CA9B4CE70F9F9E81159520DC45679D35E06C8A1C712F1
8AEAD520CD0E02D3BD8695B3C1D4229FD5F78A6F181352715048D2036F186F32
D75E105B6DA98E8A1B13FE085965C4D6CEE647700DAD2DA776EA703E6EE873EC
0463952087CDE8DB8724D14D4DA223CDD16E6515EF0693628FAD1DE2640D98F4
4524D7CAA7F566EF2ABAA3C91F1A7C31BDC1C6F261116B58B2A5527C21CCBAD3
E56801279081E1FD2141310CD8C90230E865801A5A5CEB0A2011DB45A65DC618
52339A38D7BC9D8529FD28B5750B821F52981EC5E5A1861BE4DB32C5573D9F11
323AB2EF05A0CBCBDF2A3062F218582C59B4973E4E9FB1DCAC3ECD5F32317201
DD80D2851C59D58E117B85CC17F7BE4DC4D8F188F011DB32D5B5240EADD9B21B
C2CFB46A86BCEE35C20DA6CC8D6FE62BE6F81EBF45FDD41114B05B436C0EB79F
4198FB57134BD4E40FBF297E85C3F343EF90602AF6CEFD1C825402103D93B51A
F7CFD55078E91239015EA66B2C347BE7C6919C2B5834B520BABBEDCEF16CC103
47A7974053DAB9937E5FDB670E295524876CCE41E4D565CB53E7B1896BF003AA
15D377F7F4332FBA5C0B57BFD65D0C55D2E264F74091CDF78246C28EE58208E3
00720EBCC416441356F36BBCF98C89DA493A6A242F68978510E84D5E5795A34E
65694436761182BA6D5F35A8F1EE797BAA3658B8AD58435B34B1D7D501B561D3
E184B6F3971478ADD828089EF0860DAAEC478B6249A125B4EA89E60E21B8690A
03412DBC4F0EA8A1FA28369F37BFA6A2708C4D920B33344A403951D22E3EE0E9
AA13A1097B3D9123E213615F5731C48C50F5A6771D14EDB3211423B821C63D01
8E27F522B4E9CDFF569366433CDCF9A3CC69C76B1FDDD77025606132D020E394
D87F89327718289E8224DA597564DE4EA7499E595B9C517AA0A836E7DE771780
1BFF29280E8DF8D728D7E1456BCA6134F4914151CF1F2FFDC112185C67779833
3A695D5AB39E036A9E0522A31ADD6285A4922257987DF4A4F18A6EEFAA6F8DAE
DB4BB096DE59622A2EF791B46312F7CB19B8E75860032E94AA7E699152CA8A97
9DD0407F40E90051C930E8D4C6A8FB04FBDC7B4B877020F9F25F070078C18748
70979BA9D9DD8E44DAE7A9269B8EAC895F0644E4601D291DA0FD530547493888
4BC113E085A2864463E3F61A1A2774E68248FD3B39E84D5F6B36133B9FFA0C36
F69421DB01C2FA0E8F7A4A531DE9AA79F2DB2979E48AAD6DA7B1773F521CC8EB
6810EB222118B1E2D6D029D3D0EEB71DA2C9D06352268F65A681E53B67F590AD
3EA1E2BE6A264C784356690DDB982FA9190E12A90B3C6D4A4A49F234764FAE73
AF91D62328EF718ECDBFAA8E0536F6DCE3BA7E3EA76768086AF935F715CD0F8F
E73C8D6C39E9D913191C0DC10594C65B670BC55081FBE0CD879B9C6CAF2883D8
9EC65012257DA5064E0F3EA0B1CB2A23400A779A908E296AADE1C27B8F6888B2
0CDF4ED4B7F2CABB6AD92A57657BE4BADBA11C52E735C2C981DD1A5100885045
1D8B7790DFD1FC31D5878E3D6536EA9B9EA11DD00B9888DD862CFDC0F7B12308
9A4524CC7CB3DA0D395ED00077D90755DDF6C0280A4876CD9A2EBC2699F110F9
068CB26E8171A2820119CC673B84AC595B4E3A2CB974AE74DFD4500F7D6E4978
3E9FC958D3954BB4737612EB3DF1778B7E4FB07ECE69B6C047DEBE3E904FF1F6
CAB4E417925B6266A8D0897CB066840D60F155C759AB85379DC3496DA73D0D40
2F3CAFC7DD736BB0C4879624730571127BAE6FB1A37122677ADF4D17A7689F02
B48F1A9015B70E725D99A55B6543C2AFACBAFD2D9DAAF0AFF6D93413AA34217B
C77B1E075A4BB99145EA55CFD1D12CB1D3ADC9F352DFF83B4D7FCB6B79C54E4F
1776B782CB428ADCD948E55FE0FC7F464A0B2D3EF7B704F7641BC267C2903DBB
AA82C5904BD2170921D4B2CB846E609078D2CD8AC825E8B2EFB8E28037540840
84CF308B047CD439416C5F3E725306177D891088643D903CB61F15D3F92F35AD
D40C1928CB4060F09B4F6A42D56CB1D814712E390883785F869B47A1F3CA12D1
7EAA496445DB01602443B9E258842B769850D291C9D92C836531BC2351FADCEB
23F610DF1E0034DCFE58B45A71D4E9FDDFCB897B46D6C0CE995CB596CE9A764D
8FB11597FA64C204AA8AAD5CA1B0E3AB32A13A3DC4FAE0E34E485C31FB2952DA
D2A612266F357E843AA41FD2A7DC0244ABB09915FCE4DA65A26950EE727ABAE0
56847D34333235890AB5EC44C53F590A8EE2EDF98FA2196ECE13CB4F39641D55
BAC0218069754B35CAC050E3F02A9636E89EF795734A43944A7226DEA2CDB394
95A13475B594401F8BEA9ACC2CF2FE7F15FA0F6D0E7801038F92981250C3BDD7
7F02C296953F4FE7A1126E5EA0BB33407C56AD63401DD9A62024FE72EB89AC19
523E6B184E1293F5E245E294E058F3B1FB5B825502DFB2AC0BC79B34B4893098
0213FA0E2C36D1BC7D1B2FDA9CEAAA07D3BFCE05B6A2BD017FA8AB3942D6C681
10F5029011D8526850A8606A7EF26357BD2707948AAF62D02E4F50981EB928B8
0A1FDF5A8C7652E807631756B1FB6B8C70DFD54266CD3DD128179D77A03F9E16
44D156AC32164826652D22B20BC90EFF98EE86E6D392AD188FCA5ED5CC9D1A8C
F9027A5F84AE6F9F5C92B363F7868151FE610227A6926E2123BE874F7E5D8F2D
938D3CD79461408ED21846E10838205287C2E819202100FBD51A9BAE076457A0
A9E830C0658485CA60F044D5736019D131ED8B94E2FC564DE99C447C35DFD39A
585CF5BF6CB7E33875B819AE3100331FB89E404E2E01C33FCD5CC5E5DDF9B6FE
E71DB7A585DBD471B7ABDCE13D9B38CFBBDD8C63B665CA594A4AEDF521F97B1D
CD31713A7D8FEA52525C57362D690147FE7029A450898925D8C08E8280F33838
E2F2AE7F5B6C6E203C7DD014A4C1E890D110B31377DE3B1B91161DAD87FCFA64
C784BE8968101A50925483E81E700BF0027810B8AA12D24935FBA135BEC32936
57EED9EBFBC4FF52507C34739FC6E798467FB71DAC5EF8179055F2557F29EEE8
4D0D1410A9669D374DAFE46B1EBF2FD09F038D0ED98EF867646E3844ED0AFCAF
6216724DACA6F423F51056DD1DA6B246F6CD3C4389E300E22293184DE0449E6A
AE79500C42B4EFE4936D0D000FB33AD6ED02B2AE8F89259944B1272B1259D760
D7B237396C37E8738D242339F3FCD7719149C0F31086CB8DA1949C7AD4DAACB1
EC98EBE448CC81B3445B02E27AC2A2FE3A14C5CA57DB545BA0522C34F16F145D
933BD426559E2E0419506D9E406F260743AD5CFBC453A35828852681322F471C
D1662724734F5C948A22882BAC405187207AD799C1260629F7829344F4E51395
ED67AD441581D7A43EC3324CFF3DAB7E10735803104F0C2DB640246CE903048A
CD0C8D9673FE24348EA1AB5E0FD14B7DFB4AE346574ACBE4333E0446D2C2BFFF
326683C4B316F25D54E963659BBD109420C68E825EB14C8D5C3926CD47F8CD3F
CB12D0CC866F1414B1CD06112A853D45909298E74BF76A741DB0628FA575A775
185AF20453A685A329867D8165CE82B70C6B443BBADEE02CBA8ED26D3288E2F0
160FAD0FE07B2188A293F0F5F24E141E414CB9DECD58EB2544350BCE56376867
A7D95070749221081D1C75F39C3FDED02C7B5394E5358A39E15973377558FBDC
1A5043E519706BA7F342ADA852FBA0EDBB5401458A9F79AC191B8E09FC386D4F
CE4089AE77A03CEDE934367F083F6561C939669E28B55BC33727BD2F2E8840F8
D2AEC81319FFECEFF0B5C6F445770FE26060C6A22A08CC5EE51D63E06664FEBA
FE8EA3EF4CB5DE7BEA261993A02BC2A06C3291DEDF5015FA19A652288838277F
AD0E908C48A1B8FD98E4EA36D07A87F9D1DC5DDD5543BA15221D9716AC3D4CD2
AFA8D9B404C04D21971005065A79F196279087A3105438B41F2A3488466FAF71
2D30EBD40C7BECE058645C6876A647C19F9C6848808E00E778E246B3B724F0D2
4BD01A301C9D89D9E50FA69B4B308A8A510FF245BEC7B3004A57E094DB56BC28
69752EE4D03A6FCEC59387A057AA11C9B137D6546F37BA207602F4AB2DA5543D
EFDC3618004C2526B70DA7D3E56D5E78373124E8BF78ABA7C50551A09B5971E0
3FEB9417BA30602EBDBB815DB995569B3E9E6F95C41DEF102655C5ADC3F4798C
3EF4A56D79AA6C5EBEB45D3AF32BB53B79B89DE7E561195C6853D22BF99D8599
2FEAD3743390B5E5EF775D62175B6409A678916CF881217B8348F5887B80F896
60C0D86A22BE594113A00F62F7A579FEEF84AA06551912A89D32739D0251FC76
12E03A72D9AFBCE64E93013C35939AD5428A4851926CF3F0DC1CE20D4262847E
B62ABE8AF75C28AD7DE177C8B7C24B02BE2C38010560A3FA40B336DE442C6BCE
EB9A2E83824A18D289046A60F63C71833EA694733BE69FE01A114E444C1F097F
6AFAC7606ADCCEFE9D524A135B483BC8155E7DAD9D85DD27CC7D9729CA797ADE
18257AB2DF361B2AF95849F3AF9E42B663611349146D00A2A1EF97E5B5E4C753
FBF42C1F976B0446A60F14DA4EABA5139548EA09718566B9DE86D04C3628DA17
0EDD4309215DEEF49B959AE6CB67471140028BDB77F8E7BF150FDB681FF01815
01606A23750D6CCF87F65670B740B505857737320021137710209806D7C3E773
9FF0673493BD2F7FFE6009ED344479A8615C2F353A540FEE61A49222E46D3E61
F8C996A63AA3D616B447B0D88B5336FEBA2E8521474FCB68D8D460A41B61369B
DAF603292D260867CC04960E6059F6BE26EBF8CE5452C6167A41DE1D66B203E6
5CC1462B7C3E811E4FBF589BFD5C15D964194FE3EF30AFC0D06BD5518758D36F
783EC76D0124C9DD8905F542BD304D2D1798BABD827BC8A689C3C35079F77D7D
0D910CC393BA92FCF7952A708C0AF94B47510F1DEB89F7500B393E531E77C5D3
8E2FA764893C508079E102B46F002A6EEECA27573AB03CB34BBA039100AC6312
3233CAC268C6BB20D3A288E01E2B9173557BD09FD616974FB2784C9E13F07954
27324E80C175BC991401730D9DCEC05F698D0E71E9DE151465E0D790578EC532
FC5CCE566C43D5774F18A1AD10A9187C32D91D47628C123A1146FCE4E987E770
A4A7512B5276E36EC3072C6DC23EF745D9A4531606AE86CEF0D876894372B84D
03D1BABC949B12F44E4113E500453BF785898CDE9DB441287993FF99307C50C7
D8E3C246E698C6593F110D2B1C364259B487F02003C375DA26BB94765520A357
7B7F8EA6A1D364F41BA87B4E08CAE59E8303C56509CEE4C3952CDE84229A0E06
E6873997A3490967DCFBB99FFA480FF4A19B98DBC3B5EA0EB4722F6C9DF6925B
33E3CA232E5EC2F971AA80D08B77A40CB972E74299E2558DD70A36B6AF1E2F6A
D2765B2D3E2804A6BACEA3B04BBA7E1930694E526C1A523D4FCCF54A0886B36B
E8F6E9775A927F2EE7AEAB6E2FB6DA0EA3472267A89135EB528CFD0877E8D6E7
56CD447ACB8FAA2F5A7CE0F51CCA3DBB2DEDAB06779462B7575B1CE1913A21F0
6F84ACB4D05C25DBF15522199A82636E0CF7CA8A8F0DA2D83DFB02E49524B86A
2C7D065D47B5B0A3725EC5101252F708A3F3B5CFACD77F3FE84F7113FD6D52BE
C23C21EC0C0FDE2375719E96286AE0290A173D71588A0C196A8EF10AA930D460
1BC0E2CCA7BBEC86703EC4F9FC142E94068ACC9773393CE624CB1CF384E27CF7
F81F43138381D177F93F8082CC9D54A522A5486A550A868D0C17E5861E799397
18243DB1F3A5E5A94867E63CC03ED3A5C17C70BBC9515DBB6667A5DEB05DBC8C
1F90FF30BDC97107DD0F2BE9148FD403D0EBE49D5A4C763EC2A172263718D3C0
B2DC97F50E034CC5F2B2629EE272DF9530A35FC6145232C379D553953D419A75
073092C7AB9D34C66DFF94A30B87D8EE7D52C594BAD04102E568DFC9326B4998
54BCB7C7CBCD9F9988D8C632BFB654B8EC5201F17A7C3397C6BF0D4B077C4C83
2CD90B7D89082D383212838E3FFEBD5FBB076BD9B80DEBCE8C60473C239DBA70
10D3C9B6F79B12C6005B99EAC36EDF9639E4256570975B25C6C1F06CFDB2FD90
353CEA2A697F4A8BD9635311108D162F9B7210012EA350218DD31335BF56C3BF
A9A6819731D70E62616DE4997BA8B073A253C5266654D1AA1FDD19A24674F7A8
D5A62E85D04749E71727BB69D19BB4A978101C0CB1DBC3E3A5362E63BD50C964
A773F0EDE23CF1142BE165D39AA88D35FEA7D91843189C395E9C3488D3413D3C
3313CC1DB91BDCBDB0134E6D6083277D8ACF36FF0BDBE4146ED2D3C1EFA49DF1
07A7F4743E37FF5A790ED6B92B62F1651E1DCBF6C40E40D52AE03B6290EA0AF0
3FAC93C2E1D6566BE93DD8C872A32D175EC93CF8721B7ACDE3255CA12877DAD7
729DBEC548D2C42A9F225184AAD4E80B65440D9C5DB5075C0AFBDB5FA0B27E7C
E3787FED70B0431D30D6E8F2B48CF2FFECC694D26D54D22CC042E184BCC24CE9
E69B0D02A840424A84EDF65562A18C3204A5D5FB6672528E5B64EAC7FEE09C6B
193C4E6E66142EF709DD5837E6147B05F6AB7B9E2AE33CB7AF75D4C6415B9B58
B536F40ACD80B40A1D1BDEB7192045D6581689406DE2C8799A0B3C29536DCB6D
816B53B45385444EE30D969A1E5A5CE1C283D4C056CE60A6415C9AF0F31275DF
573E4B4FE36688DEA3B2A11DF0545AAD134494AFBEFD9D51E27CDE94035C5AF7
538DE81B5B4A7A4AC5F69B87DF1F859D56A7F96392D67FC82ADA13FC4493F50C
F3D97EC8E2F4A88D24AAFA39C60EE153A0B74660FD4FE0ADF32F585047E4C274
7F40513D3A7383D7F877F1B45D9AA70DDBA73ED6741E9B6D0C8A568AFE964E12
08B00085E830EB8DD38196A14A56DA1CA78A8AD6E6D26C929E072130DAF46895
43159BC389C9D5F00ED21E48CA79E025C3D54743A3B0CFA14625FBF274F3789E
7CBB44B4956AFF8512D795E77ACBDE9908C3FD76A18AFE052E929369E76CD017
089645873DC47E51E1E4C8769E697B5D7EBBF108ACDA4E402DBB7F245AA757A2
0EFCDC763E8225E9ACAEE79D813C62B96A7CD2247A2699BE72F2AAE40B06DA1B
FCBC00ECC3E237DEA8C9802509E30D8E8E2B3D65611110CF0C3FA0AEF50E284B
CE7CD227044DB7B2CE3368C46FA4EE69FED5C9ED874D51401C8DDAFF1E4AD161
C1C1E17AF3203EF8D033328E19749F769FC9E465A7892D5DFD4B654D2973AAAD
8001ACFC1A551E1E8AF54803847BC15E9B1C1C9CC76581A50B6A6238484E8DBB
6F049C331EA174787ABA8C3EBCA6A4A7ADC92E9557A09245577F997AB5022480
252D5611A19657FF8B8049F20E7ADF22AE9612796DEB9138059A4C12D3FC80FC
F2663644C985191135F0156722F0BF1DFACDE2464088E27861E466EF78AB158F
3D371257512495CD7EC03A67DF287C8B2340D731E4495446B5AADC2BF18D3CA0
0EE1D06A7681885E81CB33E66AACB290C2630834AC504399D475A3FE5832D62E
EE9AEA92F8ADB5811033475374E04C9E37D08F89E84B1DCE7F2A0BB0078EB6BC
812A277ED6396F2DC0C27737DA383EE310ED0B6E1698F8B5ACE77C767901E679
43792F7344FDEC2A1324ED7813B197D7E8418BBACFC660D888697296B7CC6581
024CE27C24717444C8E2C33EA2B27F17185FF2C992D480DE340313265178E459
59BD7D3CCA69C4BCE2D5E9EC069458DAD826CD19D97B0DD0851E102988B46906
6B2139F4B0923BDE3D087BA39A395D484A78488C59906FFBBB859EDB8D0A72A0
EB1FBE7B70C8CE0AE57426572795B0826AC3625586F5EE36BAA962D733EA6B1D
615D235898F90D134A30ED82E6AF4E94FF0D5DBD3054E122389437002ACAC6EA
24B0C9920CC4A8F933F7D7E71505B73C16EAEF3F70FFA817B23C61D4F14E8B98
9852D64623F4601D64D5310973223307E3DB8BA40126257E05B20D494FCA2AC4
C4020F9A3ACB1A35E9C925F073AE621438F040B622DA4868DE70486498B92E1B
DC92B07F0291A079E3A0399BD4D5CA41D3ECC3F6F96B20FC6D9B28410C34B2DC
68CB0F03583DC0C2243A6156F1482172D4FE5EEF5CE4940828058B9D01C8BF7E
6E9FFA648B82ED73FCAF31C661B026C23CA77371212539DF21215258AA293797
4DBEB542E195EAF9D49EDF6190BCA552DDBCC0BCEDB0E2DEF7ACE895397DFAF3
66B982B1E79AD9DFB4C4E35656CC9F8DBC6622F6729EB829951D29163C6A0ED4
F0A5D956F69B4B2ECB5B720B5CEA5B78ED3D87BFAB08AA5B3C84D8953920B3F1
ADD578A1F95BF4F8BEC0B3075EDD207C35BC17DA8E255C9216E000486D0A3253
31DDE304F2498F905D1D74E554B61CC07CBE50377BF6DDB7E68AF105D2AF9B22
A4875ACB9DE099EF4FE27B57C4E875136FFD709A15AB5222CF808EEF614A4178
04CAC2B96879AC6792E812426A33CD78A844120B5B622DC64A4039EC9E30ED3D
823570774FE82475745461CBF5D08F54EB151A227A6A71F3D480BA152D4448D4
AD4EAF0E0321EFCC75626861C86A9C0BA0E70C944B3B21C19E2ACA82B8CC60A0
156706987C7D0DB913F1BBF8A7B4A58B13EE7A35359AEC1D986B41FA0D94B8C5
CE3985B199750AFC75BAB14B817CE2AD91E5FB8C735C681B612E5DF167F9F68D
7637DF0982785DABB8684A5525C6D23BD281908FAA63F7A90AC16BAD16D41CCF
CB9F98E7642F004C4E8DC80DEB9A7AD2B328153B21B81883962192FB1E472521
EA9578696F57047C7CE41C119A58C91E9E8E2ECF44044625B5863BB09F2D2E49
EC313FAE1D5F0AF0EE92EF2E47BF9A56F67AA753BB877A43943B39C97B396351
6946EE4A6A798BBB0AD17A196BED4DF3FB56E137B70E8F48B73AD4F981DE9411
E74CF07A878D6A153E6A3BA31B8F99529304D21F8D7C111EEA926C9D0A3CFAB1
92B212FDD9F873D6E707FEF189E66F0A062DB683ABD17A276284F0BC4F03FCA7
27D1CBDCC7A4713F8765B6C6401E89668ACCE0E42BD7F2F7BC416DA98AD468EE
5ED28F18C387F9B9D590AB32A6BDA110F86E903A0363F1E10942836FFF31001C
FC51402AB278A8099E2C38EACFE7DA6DEB238A87FDC41A647D79A3E56C4B5AB4
DE9DF8507BC9058ED16528D28E5063BCD4D58E5B1DC3EEC7DC88C55D29847B06
8326D5EB868F2518796BB23936503567D85D0D276ADE573F915842932FF1ADB6
61F00BE38FA1B5AEDC25D657AC2C6C1445F7D90481E3D277EA0DB51BC9DAB423
EBE4BCA92DB922E33078E9FD3448362FF953C97D479D5D35D7AC317BC3BEE120
4378B0FED07E1F6671E196383A06AAE280E2E39BA12D0095BBC01DD388321095
B42AFEDE06196C982A66D7558F1164672CA5EC05C0A3E05C2D11AAB52F1E6C38
CBEFD3CC105D25A559E32F187B9F08DA546903B801BE42F2BA8B1D3E8BB16E3C
947A01122115555CA3F811BCF36FE3EBFD0A3494D636B7D4B9CD1BEB45C5589A
B4462F340EA7E6F25C05E6EF668D3490F8763530DA2E8BBB96786DA0A6063B1D
BB44C0560B55D7B5B0E1FF534A435FD01AD6F53EFD4CF8F048C942B09375EFDB
7CFD0ACE9988306686C6F52B27CB9416E6AE3B6E870904B54F3D50CEB59CAABC
C004DA454C7CA0A9E4CC3BBD07493C85D60681EA810F6743831C69F25A6DA43B
174B8AA4E7C976959C40F4854F714F88DDB2CE4CAC7B24D4424B516D63BDE030
FB97CEC33EECB240CB498E4F91045E3B2B70EB495FB83742D60706705E64A21A
C4B4BAF19A339ECFE3DE89D2D073487E03DE3240279ED1C53F57D7C95F939FEB
CDF063D6F62A481CC87B1D30E5F141952A6DA9F33CF37BBEFB07C11A8ED5E4E9
00C85E9EC52B225678A7F17CD2BC40B8531110CEC02DA155E26DA85EF712644F
3B72BC7A2DD91F771E4C7DF311A67B229B9720422050E36D5E8225893216327A
7F8B69ED9332D4F8EF85BE716555E6312C15CD718D06415ECE919E0B98A42116
B2F0C5696E8DDB7148DE412EE2F71404BB43B1ACD6D1AC0DE978B49A17A6399F
50BC98195ACA9F826E68EFC67667720B6BA3BFD44765F305C92F0C46763A0BE6
92D47598441E7011C41A69566942EB2A3F2BD73789B3CD654E2E45D721A38D05
E1FC213842DFC2EF3B047213AEDC309C0E4F9CBF393C57827795B9165D45F4F2
43C98332BDA13DCD0EDCFC656CA099DA256134762C7032A12CFEB4BC50514FC6
31D1EE329CE8D872C3DB6D33232B3289D7B65F14C222BF2213055DD10C67B235
6925DB3EF41B507AECB52FFE4D0AA98D5A145B3C1F36E201E4260F353FC0E0C8
EC1130CFAAE9BB385E1CDE1D572863F5B19F38D1F0CB9EA474CD35C9AB0D0648
8600BEE64228990E5903759236C962B8FF35190EA983F5EF1FF5EAFFE626737B
61D07A82F8282010EAB7C3820DB1BE328DE9F5A7B42978813AED9340892C46CE
BD4FCBD58370A632E21321007FF3150BE444EFFB84779750A401A556D5E77558
C3F7927A49B54BB558C8FC387AB2A5A9606A582F6A33853EC35A3CD4D85EA86F
7EA7D2F3289164059FD7459C74805C607AEC526E883E2AD4325F01D3CF8A3D00
3E5C220CDBA22B4CC97B02DB1B4365BB8BA28F707F0FBD631DFFF84F1942DFED
97BE2B60FC77DA42F1A8B40B04350B2E9295A42F6A8BD1249F968B0D59E6CC25
7CB5621933DC5929F623CC2170D28F57EC257D589CD1AF7D05FAB4DAFF5F4645
694E7F5C5539B94675081F41AB0D2F42CFBC5D279BEF87DDC58727E5CD8655D5
512962AA7267FF8959C405C7522BB9D473A73DA6FD9068B05AD84C25489864A3
99D0E39E17CC1A0BAA4299546CAFF672FF2ECB829FF9DBDBE3D9A6E916ACC3A9
7ACDDEAC266400CBF9629C7560F7300BE5DC5E72A24D162E8737246CC03234BC
8682CA9A9022E74156F3C65BDB5F06D7E35782739E054C83BCB7D3EDABE460F8
BB8E6D9928ABE371E76E790A55A0E31842F288F7DF73BCC37F792082B6DCD262
C4CA3DA220CB320380F01E5A27AC93A9620F24DFFCD9F2CCD28A4803E5942161
43D5774F18A1AD10299A230F7075C779494FFE84C26FCA573A74DA0DF44786F6
434DE288B55E62BEABA71305552A518D3C957C0153EC245D9A4A45171A3EEAB5
C556E8B3272D81966E048727359B90AB535CDD97F31ED52E36ADD4A1F2780AAA
DC4709CC3A3C2F89695DC898C7F725A4356A4C6D882C4B76390743DE0DAD138F
C9EF5BD63A9186E34D1710C011EA1155AF6C56D17DA5BCACC3DA7E27C6F49CBD
1C772CD9296200D3946BFBFA4F7248DE5534D229DF77DD70C4C4C288AC7519C4
039D2EDD44670B96D90C9A8AB863809C364E5DFEA95F4E8E10674272A29FD2A0
D2B953CD84FAB0987B16D6E1600C5025A0E81CD3CB8D4538B06D0E679CAF4C49
8E4E64A2FDF5869B19F299DC5C2E3AC6313CD31C085965017B3E70D7363CFF6F
25E1890DC38A200216C9D25C0B2D0BE642898F058A063F2FF1910A3BBEDFC360
D7C8B052084E3D7A569C00516C846CB94CC3C3D49254DC87A9C81E9DAA549372
EA79AE70C001DF32ECDFF02FFB141C9777BADEC674F2A8ACE261620AA95755D6
941EB85166FB6E7239E803DFB2F944CC07F6E33B9528DDAFCCA9D3BB807F7D6D
7DE59824E5308F85563A98DD44DB8CC9662BEA42BEB6AF5A93CA99C221EFEAE6
B514EF026F692602165D5ADFE4869A69851E40708E38B318F7CC10D7F976789F
621D43737A80E995A178926101A6C2C3F32E8C53E143086A61013B0CEB14F5F5
1363B96700E6369AB120D8C153CE5073978DBC6A3A035F51B95D167BD748D1E9
7A50B109159017ED608851FF28D61111D3C7DD40E72F950A0F88F38626EE4A63
9E0F2D03B22EA421D14A0B49DEDFA9B15A961EB62924F76ACBE006DB83EC8118
D800F3B2A7B5EA03E16B204962BC68AC4BE3ECECB2B83F5BEEB210E4A527A465
3A9AD94639D51A32D3C48E1DCCDB1C4BAFB90A5A7F223F4429AFCA6DFCB8296E
5D23995F4709CD6526BB505FEA18A0BE7042DD6D47D1FEC26A500E004EAD3A74
F5B21A02872519D99E517D2671C20F0177B9BC7544FC5FCCE2F3DF521A9DEF73
691427F6504F592AC700BA6B9F53DE60C8631748B93E642A1E0E6735DC7767D0
074135F1F53E7A2E9A64C5A0E024A9C35C1E78CF1665E3FFD09C78FFF428AC27
BCF0318D08499F1DE1BF626E20D6EF04EA845A62B1D3FCDAEB97FCB750534A74
CB21C97593030C440A0293B3635C737022E0FA6973FB82C54EF433D4C5793658
A207FAF681B8872D6010B29C7D46EBD82EDC03AAD50F68B1C3D1D56E2B14A71E
CF892A87FED0DB3AA8973DF8DE457C9EF92B2FED734DAA4A242652D17F2E9922
D281282267BF54C85F2D9F9D644522BC1E22E56DBB5C5C335F31542FEB1A7AB2
695ECF4ACCAFF8F2AAE4B0B3B89FE45BAB0D1B1D6CF406B504D8C6807C21B6FC
DC06B5B35B91E40E91196D5801186E14ED3077525DAF3AFD9AC8795E06C017C8
521D70461F4F9046C3CF53A019FB478E547D355E792A33B6F7F613666A6B8F1F
763636411F9EB8BD1B22642B50EEC6EC242ECF67A54CE0ADA3D6EC0F9F6ACF62
F1D80D00914EC65AE4BABAB07712A7B763645D1BDB1786DA473F4D197927CD7F
48E70EB7A5CED3C996C9CA08B8E3448A5410A4AF7A9930DF2642AA47DECC815A
F5235EEDF6EFF88EBBAAFDE2D783144E025B070E90505B0D5FC1040F6488DA8E
487DD593B4752DE7ABC6FE8662658BB43DB697FE761382C76B69332628ED3101
A3F4A9745539D33041C318BB887FCE46A958CD8049CB0C1287BB1C73D20F59B6
86F857B2FB2F403BECFDA213F673CB2A5D1CE3C5DCF36ADC01BC0CEF9A75DB02
8CB5C3FE3ED912D718FDEC58CFEF8DDA92176BC10E92F884D53CAB3E1803BB8A
9EF83572E25E00C5002571C16A2D9977C88E9678DEB599D953B9803336701702
B57E17D09D3DB07FC17CC813C3C414998ED9A73877E80C4D4BF1F122388E09B6
946DF37503B30A9C71A8C23EA2E1EB0302C214E7D6F7E62C1028938627B5206F
1B0F805624D0F3FF6DA7F1750CE53BD913487A929DEFCF0103834714C42B1C0B
53164C8FE3E6617AA502EECECA267DD00B5CF3957699F87206A02C91A837A958
39A181E6E55835DA3E81C8846980EC5C122A120D80EC88EBC3CBB32CD8BF51D6
E38CB457C3AC8FE782E18ED707EA781C5DC9096EA7D5D9BBE2850005775A581D
35A5D9BACEE2E4B7FBB3D291FBE8262C4B04D2361E72BEA348CE9254990BB0DC
1E3855839C2BC3D64FDE821D4C1095AAE08F98B64800782A0736AB4850C7ED6F
8FB920E58884FF99BCDD75CA2DFFCEE762594598EC58C97E8F29490630128A0E
0A5051D78A1A9CB6E483763D6F1B6C38D4480B21D6462C88463EA735A8A10E0D
BD3A30708340B572E0919F823D977B6725626A4A7DF8779AFEFDA5D741E3A9A8
E2288659C0122702423F1716887AB6071083BA088EF630DC5EA1C2B52F3C7DB4
15B03D8F6EEB523D6D7DF2C76BBB5F60BACACB28BBD2A8053D02791F0408CF0F
3BE0B880782B325A0B3CF6332BC43B2DB03A8F968B1440C691B17A5D362E0297
56E3F385427891515C58A249DF52DD08E9F2B12F2D7F48B383E56F17DF35910E
A28AD48608F17C721417558685DAA133305D016E582A9938C563A25B01A0AFFE
602FB142BECD9EF133939C9AE02B05C97CF8811C3B031683157B6E85598C2DCE
CF8C42CC989CC8B30347A6C0BD36A0380B3AA5DDC16909FF4E7BABD7ED62925C
5778CA96BED9F6305450C4A820C8777C308794AD2EF7CF6103E545E449F08C2C
5000002DE9DC854759407D6989B76A91534C25E94EC789A48E9BACDF26D4EE9C
9F37353B62D0616C3A2AC7181C8C77C0DA1C5CA6968183E6DAF2AED34B206F4C
A57B2CC9DDC8919FF0F5CFEF524ECF04BC87152877239BF767FB3D64D857F87D
5E1065AEC63A2D549B6F908E3025A18C4E2AB184AC1F44EA6022439C11BF6B8E
B19F831E2AE7219BFE341207F12B03968966A34F5891EA31067C02611E87CB76
84B4B2C51F1414CD3DE00E9BAF2C7BAA29019C97D03FA54726D906264C82E8AE
D7E4AC8399909CCB8DCF23FABAC0975AC9E0B2AAE6D72088BE6EB5995E3C0690
6585C15638397E7F5E4BD9FBABC4C690AFE951D95BC02814C4A3EB4AB7D07DB0
AB13C633741112EC2B6E32D8FA4A07936D8909339EF852F771BE27C165A398AA
8BF8A6B696B05FFE0D0263598C96F09B02A3C989247B02E5DB75B1683103305C
5A43ED712CBE7C35C4BC4571233251666E6A9AFF653C2FD3734F9C7724CEF049
A97F439393AC4BA9F2B4B8E959E8877C908EC9C67243B29E58C9B86656C5F1C8
B98E2250014139A0DECCED8C8C8D98937A7AF5F2E125A657190360093DA55F32
024F3A30826A7E64AEB96CFD08867BC4B40895A9EADEAE6F039771EF3A6CF3F2
5BF7CB0A1A94328AD09648140547AAA48C1C9369AD020DD85B0A0D9B4ABB5219
64FF4563C36ACCB3DC3788E2F8A37454243A72793C4ABA0CBC7362B39AF6A07B
F36C2BB741A216A5D153B87013C6DA1146A2238862E45E699A220E7242A4ED3E
E42458BFF881F4ED4F4D5B8152B9917A23208FDA03C5C83BE1137FB6294E5747
AF7A96E75454B63E7A60CDD700F88C4C679CE7730367475C40ED58FFD389F47E
22FBE13EE500835D79D57E9733DE2579AE2C5D8CAA4F21ED02E225F47CD66F67
6FC6E20C1BDF3416808F7050888A1DF8DA1DBDF920B4CC6751382E0FC5769C24
AB417605A847F6718B7468344F17D2BF698DCE1075D1C33920DD0490100367C9
95D213A101BC3D0E63098D1C2149FCE3D14F57F987566C2B8C83D91079238C2C
778E65A3C355E1A1706DAC4F88799EB9D0B6E11CE72C7DCE7A78316130D1A50F
5C4AA381B8581DF3F82578AC6FFC9216A06EBC7E8A4270B6DCCE34CCCF4CFC65
5D3F838B079EC548DB39E2E3F50919D9FA5D9767062BD1CC345778BA75D0A7A3
30F4315AFC556C29FFF4791B2B66077FFC062796EB3529B37C75ECD7ED97D203
74EA9AF001DD9A7E9FE1B7C780A056D02AF5ECF1BC92839F8A94209345B53EDB
CA5C8F67EC1011EF0A7E4BFE41314FA52F07944A216DD2226F568BA8A3E67E33
B7E8AEDA7134B5C5BD7B7D8CDD9EDF3860087C6DFD7465D9CC21EAF4BCDD1F80
25CE906077AF1BE47E5C22E42A4971D6DDB7DF335A94CFB2A3C4489BBC10B0DC
44D60BD1585222D4F5EEEB12C2565E2A2D3211E4D5931CDC2DE9C4F13E833E87
535CC99D54C8A825B1661A99E3BB1BD135EF04646F20B0CD8A587050852282FF
D717AA242730B78858B60AC8FD05AE9A2B172916AC24BE7A07CA2A360575D509
E7C00B45080A7A191A11609A8F12563F5E4CBEE748E531E91A7F343496F71198
41498F1FD91B6EE783897B4AFB0B04B169E56E333F7C8D09721234037AFAD148
9387E9A74C5A4A10CA00609DC41B13797502A0C52D82740AD335199E88448782
3920908E23E6C11A20D3682BA6B84DEC9FF799C2CBD97747E9C073C5540BE233
94C9F2D6265BBD153BA17710E773E9F9C0B701890C007E690F35018218CCF428
98C90DA24D1DEA9B60EE201EC55AB36C8DE038251035F1FDD1D270825B0EF286
1760F469D4E608481E853CC710141A10A0374AF59FF5CD12A4CAA374550A55B6
CB4A316825AD743AF24B4870DF42B2DE7D2F8B8552DB87DD0D883A0661A56765
01A9B3ED5E8A3AA04A152DD4015799AD47E0D6E9A037E45BF2D310D3AE7B58E6
36EF8DDA06485F72BBE4B57302CF723A803C9ED1600DBF6B50CF37228BC684BD
A7DDDE646DA888261DA22B1CD76B3D4A244E3AC7424BB2CC8EE6C44899633FD2
E401CF66BCB8365EF29A3CB8A8CC5115E3443AEE8FF128D4D0F3F5F8B3A84365
3470E3D7DC65563EA3FE9F4EE8BCFE06FE25778273E4DDCEFF63E3E9153478C5
DD71A0C2D24AC1480E437CD018AC70F4F2CBDD52A11D6FCA3F1FBF99E4E00836
0AE098E02A6B17B0593116BBA293C02937B421BDFF8D46AC997C8ED678DBBECE
C95B1E3EB16DD6DFC7BC7B556E1B63D9A188961A3A85840DE7A4F49184BFEED9
B8DB412E8819C03513E7D531A17E4A994C2BFC1DEA6A0B040DBF390D5151F948
6636E3F90FD7F29753963A349D69FD2E4B5E98DBFEC7495E8D9B62BE6A5F3308
511DE497726BE5E32E0E8CBC71BF265131EBE0F523F174D1B87F8E5A06CB2F03
B396D8F5255B327EBC88C3F36121DE0957AD1610C7FFED2F5728DEF8A11596B7
43B9F395508FF98EB4FDBD35D3984D8F1EA7AEF6B7E8EA97B20FCE9CE9303245
076271E6DDFE5C2963790C04091E472BD26B7A8C1118849F7282CA0290FFCE15
3E0E16FD7A109F1BEA6807D88F914DA590913A3C198905DF5B006006B397E2D6
F3E1134C08D691DD5D99B61D5CAC79805BF1963D039B56B484B347FC2BE69E4A
2200780B8E7BB46589587D9FDD7BAA2FD31C6F2DB0FA2E44C5ABD5F0A4B36C9F
7A2710D03F930A24FEAF183D76050D2688092E6CAEC65A89CA3CF4BBCDF56AC6
9127EA4CB49A374F2A0C163A00AB3B6C1DE4531980F54777E37337534BE8EA33
D99738072F938B6566BD816C96D704A30F5494AE4D6997ACBF8FD0BFC1F174F5
F594BC6A6EE67ECA3E09DB93FA90D0CE25DE3CD9C3E697EA13C451BA373B8BAF
E9DE406B9D2E9EC7FEEE5B8D8919E0D1E69B1FE209C5F74C458C8F0610871AD9
7A31979E71EB80DA85B9AA0C6DC537C62AD892871815B23E59C215E93AC35286
4E44F6BBFEFC4743C6E19FF1FAF2EE1231E964DFC72A1D7AD8C62F979B21C5BB
179CD2B0412AF4D90E9277B02A0C4F5B781082A94074431B85254DC48455B417
83D1D9FAC8ED3EF4D4B6D0BCC642597373C612E87B273DB68A4A83F1390445F0
D78C67443C33B97B28C87C6082D9E03E2570951103F3053DA76FE4BDD1BECB4F
085845D39491FEB49ACAAB78D70924D211692ACAE9C6921FF443AB0516ED2050
40CCF8D6E7BE2D8AE752C7D400943E899991C4F1A948DDC58A6C449F2961F3A2
D3E80ACAC364C6C8D6EA1B82DE793FB87D3C2CEC2676EF2FB9501BB43350D7E9
CBD7FBEB2AC28E0D5477D01B514C17ABB26B89509DE66F112F49E63A16F60B67
95CF0D93839AE1C948D05A5C944E26BD2C0F0881E7DBAD7A9023B62FE3CD1ED0
6344F73CA4963E8ACEC1D74254D65FAB990CD565412F278A80983D72DEE80A0E
C9B800E5A51FC089829BE021F02AAB471C64B31554A2A4AD630C5BE6A0BD3BDF
C3DC30250DF7AF694E22BA4A3041E9C3855C5004AE6C0AD4C64DA15F0FE86B4E
AEF7D2F96BB74F5E3F01C4FD8DDC8DEB238A2554A092F98E081FBADA15B871D8
EEAC0EAB134DD682DCBC9B6FE8C9D73F2C768710DA5E40DF238862E45E699A22
0E769E3D0EDA0F4F7211B5B5CC0A348F325F3E45531783D5381676C3926651F5
B3F8666E369D50682A921BA0584F528361363AEE238D66A94BAD615F1FD662DA
E00DB2DB15A15A90500C579A5F61209D9A1F503788BABB313F308662C9D15D14
6B1F79468D135044625266E58B9BA8B59832F1712CB1BC050DE2A0E17C431052
3B30CCA64164E545D9313ED52413254CF201D46E88DCB43F4A7B64C009502027
355E8E1D4322B08F6FDE74D0D4C3E04ECE78C29C5D2C143659635D1346069AD7
B3852FF3D884A0DD5B2ADEF2D93FD2968EE0D4403EE4AB6A382C1304C53830A2
62BD1BDD6E104A1A2E2D3610E6A28F13501DD2325BF951CB3739D8A3CAC11575
AB509A4F8089D3752C4D8262B3A6BCEB0F4E6436B4D6BBD6E3CE599CD23712AF
F80F4580649DFE9A7B2952D41646CE1185155FCC58282FB23867D928A14FC944
68128D6786B256E92A5B16F4212BA513BBB9C5DE48973B6DEA41477BC101780A
1DD8CE08BC9CFD4C466847FEAEE0AEBF88347D5966A35557DAF14A4FAE614038
55815D8F7987AA445AB957A6864A7656C8B578CD64BB9C55B200F32F5B40DFC5
33F5B87A0D016B3A67CAC1CE1953C9CF7330BDA54D639F5525DE50E591558687
3A3879884CD192E08A5B895E273F944C2BFCA79FD81DD23EA21AB3C9AA9D992C
5A7316255B6AC311E62664A82C6E0E831D654EF67A8BA22EDC904662357120CF
4727EBC4537DDD5544FB0D7B4DFE27B6F1ED01C71C3E498D5EC423985F63F7BA
5EA703122EF3B16960181205A534BF1BD6181A2E7D6E3C886A6F8151BFB286E2
0BA9C5B92A11EDC335D079E6ACC69BD64BF071A2E105B6C7D2C704581BD389D4
C24C460375FF69B34D18ECBD5F13210AEC71AED98317186244404D4812EB1E27
A925B1AEEA36BF55E7669038BC12FE40176C417A05E5556E393B12F20C29AB8B
417E2D6012394FD6A58906B9059FE35A35B6F30647A37158E140941DBEAC2DBE
E7F0024CB880410512A75943772B5B3DE7B323A1FBB96BB181337CA888EE9842
B22F0BDACDB84A9EB2781A8F98CC3027FB5FDF10633BF7561F6B69B4506E20EB
6CC0F8E2AB6CEC10220726291C61DEE77A9C4C3DFCA53597E1F2C8C74506EAE4
734AC8716AC12110E8418AF3631AB786187031F9F13C37894D054AA38BC5095F
322AE1B521B693B384A10FF9D56E2EBE0C3F8E456870FC6331BD98105B719F3D
822F13C9DAC3CF1E5DC7C05F1C789700418263E108E0238475EC7295EEF3B6DB
4D360AF3707E2C0B5AF9167D712B65F9AC44A3E14EA0D1E60F8E48F5BDA5D89F
2EE4C0CD303404ECFD4FEB93F67D42351277E97D14EBD29DABAA846C4FDC6DFB
03FBBF0147AD66584D167185A1FDE0D6DAF216DE0D90C20DEC2516678B0CC7E4
3E676816DBCFD791A2C4BCA6B90B4A5C5E47F999DC291B0F002A0ED75F70D8D7
A6DF940E23FDF870E2858CDBC2A3303985957586758AAE0DB68A07DEF72DE86D
4041A1AF04BBE1C14E225AF63F50ED7799609AE871DAE4F8D0361EB398CDC3BA
A5AFF4F8032A501D346059981EBF2BBDD1521282E1B628606711423149D9F393
F5EC7F62C273D4A01E7E14E573C039463C85D6D80D2E3F6E3D9B0F29434DB16F
7DABE66D76863F16000383F5E8A0C4DA36DF72C244FF08470E9514B5D3FC673D
97DE2921323902B987A9A668D9F17BB605B7D1B93AF227C080141F4C7B86571D
1EEC0AFD83A8D881438398D6ADB51AFE9B73054AE10CBC9D3A107876C1FB91E5
C18A4E661EA30107B2945D36AB6DFB6175551FB7A270D64EE17DC7F3212B3F61
BF588C33828CFF80F379CEC0D328B8167A4B3205A5FE0DF57C096B5161C1C34C
12C7C994D96B48F746C96701DFBB9E88872974E2982572E4CDF1C6E5BA5CBBAA
F733DF941BF1D0C366A056D041B5F2C74A612BD655B38DF603DB446FF3C76817
41ABB6BDCA12EBFFD4384FC57CB4689FC0FF8C018A0B57DB8FDF8A6088AFEF5F
D1D7F8363E5D0A84FEB1D72110999B1647582D91BA6FA0CFA8861BE3814E029B
634133801105A77651F118824F6CD00209EFB60C1AA696826725FF3BED2602A7
8D170CDEE913E76ECE88A9D0FF52B869142FE488F9EA5CFF30111D6400AC3CDD
3D6F2D1CEA22C286B7F058E8F48EBFC36AAD3511F899AAE48128445B70136A2A
C0183E491A446F5B45973A1BE1894C0B3A87CA25181FA445D47DC3B5C07E8B22
4A3896F9A31F64699F7A1BEBAB3A5FCD80292FAB98809A68163F5A294ED64C65
6EEA8A46BCB12CFEF4FBF5EBD18C5BE8703DCB70D690515B24E944B34B5524FB
9D4A8EB84608A51A34E3C34534FEE3B4DE8A7386AD40397A7F90DDB58376A1C3
DF65A77D01E7ED8AEBF0168BC75C90B196E2D8AB134C855AC3C11E892E4C422A
552B7D8102FF09352105952FA4B80CCCA6788AEF25264822AB4D94FD51449F12
F98269C8DA42FBA1C9F662A35F3B172E6F155A3DFDFA4B81E682210B8C1297B7
797C7777994857032EB2238A70317676FD89B0691A20D159323429F0F95211D4
1289EC7D601922D31685A209C7E1DD959DC6DF7A3F0A5557C1E0913B055F591F
8F2E8A74B365795F7147603C6C1D3B6F61BEA096CFB1380FD318AC45D3E7C059
9DC31A539F78BD73D380C57248A36AC7D5EA77FBCCC27038B123C93CEE51CD43
DF392C8EE04B018261CEAB4272DE162F83C602AB5B51125D7C67F1244DBF5A2C
79B9B60C5FDD2778F1181D774D8A4CDD0A5787C961FE2354A00C3A32A2E0C159
A8AD8558F0492C877728077FD3D31C27169F30136A183D5FBBFB99E6DC473EA5
0676892AD1ADC866DA8096FD6619510B27C45466D1D9063C68A38368F125AFF8
D1382A83DC20215D1C6DB513299861753A0961785426BB5693D3C72A5A7A559A
9D87185308121C400FCFAFD468738CF17CD6F92937AFCBE3299D330DF9CAA596
E5D5010D9E878E5B53AC5F3225C04838B81829312A1F33F6DF8EF298786806E9
159B3578C98AE81C073AD4F057F15D92D7D997842CF3CA6DFAE437D0740605CC
C91D7AB994F67882B0D6E75FAF1F0E4544181A230EAED3AC70BB13512D0D0E85
27291F7399ABC18FD94CCF8DCDFEEE3692BBC923F2093D2A2758EC48370EAB4E
1F133313C15B58081E32B98A6F0FFA516E4D70785055A9EC85F722E84A6DCE68
E410DE483B657DEFB4927A1192DC8E63BACA7AFCE0B64337627FB52947E30ABD
93644E4C25E64FA27BCD3ABDE16A8320A3DE7CF8BE67751B687B091D76BA9C39
DA1968122EEA8D65BE9EFB3BF6A879B4BD1DCA77C47A85FD4F7F0E4437B479A6
E6A0E1F6DEC3A5FCE8DCCF921E85433B6FDF5C4349561CBC7B11A459395011B3
A13BD144BDFAAABE3E3F9A2B1635540CB4A3187E69B6A7A50B07D3BA3EBDEBFB
3D4A7C9BF27639C90E4C0A54771197D7EA4E42F4DF541755187B8B6CFA81BBB2
DFE16C8D0D68F676C32E2D807267794000500618AE559DC886BEB2D27D8ED7FB
312FC415A0BA6147E665019E949D6BEC3691240B7BE921ADB832C9E94C3F9327
21CE03E624B24D44ED1E3D3F761928CD2D8CA7A1B133A3092E8460B4921D3608
C16D646A7B27917D3DBFF4EE78A964725E759732B0AA259C59AA0E7A51AA15DE
66C03ABBF322BEB4350CE3B1F6940FD7ACFE9100BA664132305692A3B52BD9CE
9F0BC113D1182BC8155334762B53E3BAC5B7B68216D0C7E55968954C33F2E0DA
833DF8D3E36685EF1FFABF746C14A74783C5E6261DA87CB1D6E623D1BFFAABF1
9003B0D12632E65D311AA087227D783A0BA41DD693AA5276475B876CCE452389
A6FC5A51E7F50385C4A11076467D5A11AB8455BB81B1612A308C95735248E060
86236B396B37CDFA5E11A20FA4962E0CF1D9C4E355343E288C2F8E5742DB25F2
B802371A518687F7CF645239C594AE05DD21F19215BC8F6E45759907C3E14616
874AD27FE89777BBAE47CD1B4DA6C965E474C1D8E9C4E792D5F6A3926027C477
617E26684F9188AF7DB440F45FC2E60732B6D1DE5FEC3C8E040512B6F0839D52
031E1F6BCA34159A31CB89E77C773B8AC4046AFE5F9572F752234150340F527C
AAF72F1C762605D7B5E882EAF80772C87D3003A3F252780ED76337619F86AF61
D3F832564FF8933D86DF754D79490550D652C8B4485DDEA36CC2E020A6AA5043
413B79C801017624986A3EAD369E37830C76A10A61F1ED2387628C679D2DAF9A
0DD8587BA20E0CCADFC9489CF6BF32D2A22F79C5C568736602AF9D374A8DE158
4B6778DF99C00BD14118D5DE42D0CBF3C8DB8B6CB34ABA2B37773BE4C61A9AAF
B8B4DE9A68B1967CA98D2A89CC343CA00FE9D642CDD430B43E39CB726BB0CD25
79403F44673D6230D5F2776ABE58CB9B13DB857C0A6824B389BFBC7D550144AF
357A32CDCE079C1047F1E55E05D804D2F096540F72A7AA528BB009E0FC966D03
BF5EC2ACD821ACEA37046A42AC0058159FDCB85363C9140E4CB61F4B7B267AA4
26CB14F48BAC98AEB3F8B9963204D9E45FBFA66F0C8BCF4546F726B067536E8C
95FE10755A44FAF53C07D83264509CABCCEE8E00C87A38F9EB162702D1F6805F
67A6E522F24A36225FA99B2832AA0EFDD1827563B43C707482CFDC699D1C74BC
900CF64220D8B275B1C748A138ADD3CDA10C632E9DFEBD9FE4B8A795EDE2BED3
05AB863F5E66A31AAAAFCAE6A03034E2281BEC8D06F7B369BC89CE4D5F421F35
EB45FBB288DC84916FCC7EBC0F21D61252CA0151F9E81830DC09F2194C3FF160
B61092F5CC02C60D7B5C215AFA1F1B9709B9AD6EBD37331DB4068BE99D304F82
B16B3597E8AE55B2E4452A0E61D91855CC803FAAB9C2F2E6F6505171BB881564
34A7AA42A0AE3D1375227FFF91BF3763DE9AB3604388A7422185ED035205A6E7
7500B275B2C1EA3A45F41D2EFEC1C8DAEF79F5F1E8DD468DA18A3EF9C185CD6E
DA68951673D6384E6CD12944F86D178C9DA8D26976D77A35534B6390EDC2DCCD
FC038A7C57F8829A7FD4A2E10837B4D590E004BFD0BF079BD6A3E188DB0C4ED5
93A3E78D5CFBC2D07CA0ECA1F685797EAA779D83A1AAFAFE2E4E537C86A2EDD5
B21E328A19BCB93697B845D254B0F9C1787304D67AA4B0F56017059AF27F652B
12B08286D947413E48F70CFA41C190D9CF2474A15A766C9C67C95A518A4E514D
B0410B1E140095EF2FFA0C13F482DE121A580DC892423613708F967186E5A629
E68CFC950C9A5CACCBE31F5E8B7CC0959E57AA87570349F2EAAF5E957195DBB9
6DDC4785E9818A96AF2AD4F47D84B51D8C3E4B86EFCFF1C0E19F4369AD260BA4
EB95810281EF3B5503760EC61C5A47ADE1BDA0E7CEAB875470D9591CB04F5DDB
8B4928E27CB78278B9A9DE9F0459DCC17D90D3E1489973BED751C1233E6D4DF6
00BDC705CD552809BCDB1E2A9DDE42E266DBC47A19801E837258F5608562153D
D6A09E462ADBE677E6F550F939213EA9147745E7DDE2364F63926077121FAD39
A304CB7E6D585AA514E2FBE104EE4883854D41397F03AB5045ED6CED6376511F
4192AC54B0EFE7477480FE8140DB838CF1B49A241429E288D42084CD0AEAEB8E
ECA6DEBBA5ABB133B4E25AB7CCBB2B62C63BB47356336AFDED786DC4D0E02F1A
EFAA8A7B2B96971E35DE1AEC29F1B6F7430526ACE47406FB016249A334141B4B
1E2CE74C6B43EEF7035544EB76199525FA7D80B4A7D80DA6A6C6A216EE8C2D9C
96FF0A04F2EBCCA2467174529C5D6E5D3F31906127617D2AE1B888EA771422EB
425F3963437825CAA524C8B374AACE6AEAC8CB4182A887EF4B2CDB3668628618
0F113767AE8A0232761307B3E6EC87F82A83414C6E4127AB9A549A1C2676121F
FE37C74CE40E685F059FC54715439CB365500795122379B1581BBC742F3122C3
B1AE04709B28E38E80485BAC718F97F2805DA566CD2C4EB718886E4FF6A9F8F6
EFAF9552AD1D7CE464A0A31524504F0ADD190335B8308F651F1CF2DD2A52A914
609F800B029BD90F17CE6C1979178A8325A78644D42EA8C22307F655D2B604D7
7A609B503FE568D7FD59BA1F9102D5A13492C763050D8E3ED64E5E1E5623D5D0
BFE8BCEB3E07D6EEFAFA9B374E36996C3A6F2897DC00CB8E601B345BF60BE49B
21B0FAD6E856F327386C08F5A847BF2F00A36E1CA7F34EFD7CB7B46D46171161
652415A6787BD592A865F81614B6528A472D29209ADBC81A3F255D718F9A0E65
67CE54466FE33CD366B40B8EC028DED1E115EADB7459D556556675A92AA9FF93
76D830B674C3502E30D3961246C43475A270250401C1AFB74F50F04C160CA074
2BF5F58621116044E9016A97664A264A332B1ECB59DE2BEC58AA32D686022D0B
3DA06897350B2EA4EDD38ADCDD0BC65B8FAD094040F2B528CD48CD2F8B92CAB7
44D01CD4CF23901089EEA715B0E16D639A60595C6A783B34BB6F0720AE8472B8
B21AB1FC26A6D947548C4F2C98932B9F66FE64B311D16A77A401799D65079F76
7F68BA44B66A8461C4B9C92D1FD382151CA37EA407BC8C9B9034EB7994DDBCCE
66F7D16C0B52D99ECCF8971C7FAB1814A8C1675923FECF1EFD1EA68B2C8BDF68
4F6FC1099B918334B9F135E423034393B9E43AE7FEBC4673907CD83428DB80F8
5C4E6E27806655D93EE99C369A736E9A199D356ACA9B402E3AC3E9847B5F8AFB
4BF1A5B4C84F1767B2F118CE15E6B9ACA39743D90725B633A59202F11B5F89A6
967942A943FA206E05243C0686BF1BA08B92BE96C91FC97966D31B2911865C03
E42E7694B2E7F47D34C41F3068DCAD45139273E37C21EEDB0C76F2009408D503
AA01337F2852F14DC1E88E322A1CB00E360F6BAF199A05E5E7A95CB9B9D89CAB
AF27BD4EFA6705D45EFED7A30C3CEE434832604D7EDE8305E49C68022461B90B
91436F80B2B0AB72B72D74D84C1066C34E8B3A44C5A4EFFB389BD8A8DC372D43
2F29B522FD421AE0CD4D25A3C6BD532C0B4C644842861248043572D767A306DA
9E93F762653CA71C9BD82D057A9DD47D58A8C945BB5AD34E9EA6DF7F29C55430
A3208B9F3AB843F1F1B7FFB1A9B4DC58565D31318DDF05BF42F1EC7E2E35BBFC
367448EB7FE9D1349E90AB58CBFAA79D596032FCA7120F8F3A8E42134F1B6B0C
248D56F247AA6DE7AF32220AEE7C75A5BAC24E9E43AD56BA6B5B915CA7445230
4A74E667C1C278B677DE3E822E02D8B0CDE82E9563EEDE7B8CE4A1877F8905B6
510B6F6E1D1301EDEE91D4149D298C63AC26EEF70CFE84B3BFFA10EA4B6F4455
51DBEAB698898B8C456B760EC883DC7C18994FF412C44BDF972895EE541BD1EC
657ED5D3BD43A15CB7EACAD18A671631D20EF5FC381131B7C4C90E04DB61386B
56A4E5BB70E64EEDEF0CA24784A1DB7F945DA3C9310C947B5B51C97073905D5F
48F6F789FF4E73AD9F901D26B6949F50AB0402644E83479EA265192B41D8F3E8
1B47679FFE5B2A51660FFA663695FB3C03D7569D309DE3ABDFBBC18F8AD0F278
41AF31E9B33E727A251C11D272C8EF577042E5CD7B1915D54F074C450B18C513
BDD76497FD98077B9C7DCC5B62AAE47E6B8FB0144A861E53B3DFC6938BD8A14B
44A3EEE8ABE0E207824D81AB21C8AFCF5D4BAA6A1A7C52F372CB9CFAF7DA3CAF
003473DBA5C03B5BC0ACF563222B030E422825AE97E6CBC48364EA7260C016F1
E9FBA93DBD2F07F252BFAE546DF2262B6F53ACAF8F7238BA4E404B7D6D1E7D82
6EE73DBEE0069466A1B3D42D3E6BB7E2FD58A489E7E4CC16BD11D4922C16189C
1C1BF9047BB71EE344246B41D3F5719F7941EC91235F9F1B9276992A3011D630
8004E984242A9ABAB575909F63FB8A51EC8ED05EF8963BF4EAB2855B92B6BC2F
56A60B23421D557B77FADD1EF90B7CFA17D005097668D76F7427FAB4FC42AFFC
275F1908B0453B07D236B2DEED7A21A8799FDE34D04147A0F0D0C27AC7E8AC37
0B8CBC09F55FCEA035A44F0B2E88C0BCFF66208816797FDE4323899C637CC86D
15F14C4B08FC9AAF420CCDB415210CEFCDCD40CE7AC49715248ECA398462A4CA
D2A2ECC862F72DA1E5709B0314603710B04AD8F1767A4B357345812C8E9EE7A6
22F66300B69C5B27CC34FCE0742B27C11D46982BC42D9DC23475C397D456E05B
2BE7B894DF7FAB9E5AAF17B17F5FA6400637C669D9C253AFD2061F0FAE09F2D7
70AE5A599A9E029FD89F3A7EAB26E73803C83FC4B18427F723CE25814E308764
70F16C5E8F87F74CFB89CED197BC7BD5C0274440824A95B61CA0427E6CFCBC31
3D2F21003A0A5CB77A33C0E2B00E5F7579AEF49A3D4F27DE54F4B9CBCCADFF68
03B31EF9A85BAF11F98DF053BAD625922123E8519202D572C83569FAC88CAE97
BD823F93AB6A22FD705D30042BE7B6F8013B0FBFA1580300735A79B9C48BCF50
FF6D0B2B43AFA5BDECDF39E51507B12ECDD92E85F0FF4067EBD927ECD3B5E032
0C672715B6FCCE5548E3F4DF8EF298786806E9159B3578C98AE81C073AD4F107
EB825097E3E048679849A829F4171A1515A6C5DB94D8429E8D9049B9D26877A3
9D29FF6AACDD72D4849AB1616E3AE476ADAE3DE5D771C66E86F97387D4AE97D6
EBB43FF2EA12268DBF4409B841B034CB23828A19AE93174D846EE73DBEE00694
66A1B3D42D3E6BB7E2FD58A489E1CCD48458246B14631585122452AA1469B0C3
DBE760D70E818E8D945FE492C0C783EC9AC7A95C0832ED8BBDEEBBC6F9947D61
3D7508533669497454E52766AB705B0D6320B663F5490FF79AC9C6851E779043
D6DDBCE842EFCA266753287FAA1AE38EB626E9A41CDC6BE62BC7B35FD7E72636
AE538232C13966FC6E07843E4FC7A8FB22B72FAD93A64F1C3FE99DB9F05E99EF
17921821671843EFC9A5F3712EB3029E680F91DC145A4F7FAAA554106ED019D9
AD0AB05C576853FED0FD74C459D1F1662445F58380720839AD6ABE1A0B43184B
B79D88C960053AD6CA74DACBF2B0C7B5C121106509D05DEC17ACA6A6C95DBE54
D3067BDA5D3342CDD7550D827866DAE34010EAFA98DA7503D50E7C2E9454560E
5BDE68CE1AE6340946D23E446DA0FBEB5F020C83DE3F3F0722046046DC94B501
7D456E865FB2E416C4EAC7AC59EDE009D49BDFFDAEB9856A46D359FB4E1D5D06
3D5E023DFDF9ED71D4E41598D5D59389340D67B1EE8BC6463252AD37B8C0B647
161E5CC0D32595BFC22A47644279357292FEF76BFCDAEEE949DAF5EDA9D6CC04
687732AB7F082669E0B2838F1D8B26E038E11B221B46958EAD8C44C5814AE35F
97C6A4E22E4DF8C516EDCABE56305EF1BEE77D5FE31CC58C9BB1216EDA7BC334
E7E075B88958DC5D9523EF231B6A362F2C5F9E32B8831205810AB8F74AA464E1
030949DD5A59F95C9A005E086914B46F3FBA4C74E9100BA2BFF2B3A16BA7B4D1
3CA91F2D28912DF333DFE05DD3C98688C1B8088785EDD9C1DA4F9E9A3C57F31A
1B749EED8F720E28A4055091ED6C0F733B035CCAC9A2CAA28DB887E486CAB5C7
D0D9AF69A89FE5F8EE5CCB4A2E5475035D460D7E1A708B7D0EFB2B5FF55F9E45
71C466AF19F93AFBF1B082396A17F0870204E2DD1FB9EBC9448B8D09351B5830
2CCC65CB916CBB6C5996C95C98B340BCB2E6F00E3530E2B903B64F1AFC905D7D
B85F544A47035399CF0FECF8939B041A8223FBBC9371D1D672EB3B04BCE50F6A
AED5FB232390D7239C22534FEE644AE96C571E85DB4CC83FD73A6DB7D18CEC44
CDA8E87EF74592B6FE45256E76CB6598DFD42AA22CFB939A914FB803C324848D
DA36A224FEF55B06A6036ADD54CDC87F9D25876641B61412A41EC3DFB3D0E6ED
4EA7270F783D6D43AC0067A4E5F52AC5C3627A231EDAB2CE032DEC53C70B6F33
308F5F53E175546AF3EDE43B3579C6242B5F77096510AB5211D948A2E4558DDA
8F9D7F73D5EADA82638B45CDF942C8ECAE8311822ACD70AE170C427D588B3829
30BDBD362178217879909DFE4218873A9EFFBC8C1AFDE5BB2E29C656DC948BA1
C6FE0E315FBC9E7D62CEB6E0B43921FF6A17FC7CA55744810D7B220C09346EA7
AF0DDC35936F094DDAC8C0660DE50B947D74A2915C23B05A4CFC1298A016E4C3
E0F2F0D939DE6FD5CD54121584885BA3F927A24236E32C364161998E83E53651
36AC566B2C0DEF6D51523984C1F68B258B251066818F676D0D959F3E0E82A848
A378CA501B66F70C323C2C14858932B8700865792CB7ABA260909A7110C580B9
E843762296D2BD6AE0FCA66760484C428852190353595C18DF61E94DDFA1D365
470E800F59AA2886B196173DCFCFBC8CA608C755886962E767E0E844F18E09B1
3C38E06E376282C9E6795DF3999B6B929E4A99F6FD88036B7574A430C0ECBCD4
7725E419D828D2A5D344FF731A67F7C7A54133439604854B8A08070104E018A7
F975D8E3F7CBBE279F544AB66557A21661F88253ECED5980396FAF0CD40AAA3D
9813EEC31201F240B5ABA03EF54047BDD7533AF9A3D66A8411EAF12307A58C74
B1F3513C93C7EB2528CC2E16CF8F35EC94973252B73C77B33A8F556FADB77D21
FF65F2A0D98BA694011E44673AFE4802C70911DB769018A368DBDAEB79EE7EF8
1A7EEFFEDF5CFE1A1481EB67B769DA379A4F7AA5676C08828D7C1CCB98352BD4
5089B9947A9A083D6C752A6927C97918FCDFFB7BC74E3D2E701B996AAB659898
DD66F7FB5425E7E816F85FA496645A8E9B518BB1481E664585026067CB819695
0B920B34DC1D02F0DC75AE07E0F688CB3AA105EF13006A116C825F1D4DA26E4E
8EDE9493808E38B48C5B238FA57F02760851BE2D39031BCFA027E808DA0E96D1
0A1C93326B328E63573DCC21EF21200DF13A8C16EB4498CE6246E81DD9602DDA
1B8ABEEBCCA3DD06564395006F532E9227C04AEB823DC9653C27629C24DD6B71
08120C28B654791DC8ECEA5883050D0FB58AAE5A1EE4D24F5B9972AC6A90F6A2
82DD4B7E03E32347C7F990F613651F8EA498CBD71DAD38C0EF448D7F2881630D
07B42502B2C53F069F5FD60E51B379F37529A9FE462A4C63F53D495FE8F75B4A
7C18FE47890BF31A08C23145D56FDDA9875020640556CD2476FFD27B992742A9
3B8C67DFDF48DA9EC660E951671D495105F64BA2544380A2D7B02382A58B5FD3
45A93B2CF06DE88A7776E7AAABEF5E25E491837E847E984692DDDF8B7C3AF74F
D27B246F6B8BDCF9D7A8B7A8B8D6F9D420A8EB7BDA6625587276839F5212F705
C7E8E1DBAF8EF98BDE8B8113502EE2C1B66BB69A46B28E7C14F88CA0CBA6DC87
CC429A804F56D5C5CCD247F66B2742E55BF8C49BBC9B15E0C35E3E42A3BD8172
1075B95C2595E480E91429E1DA692CCC8E6C468239E5AD399EC8B07A310F8671
5572EF216C0E3C473DA0A956D6F6ED37BE0172AAF8AD6095D7E8230E68FE51DB
E0716FDDD7A872D15749FC0D155C1E04055DCE50683DA701E0A001D83D16A1A3
9C43F5942B66571366BF29B6DBF76B201A04D20C7A190A8F0C2157A55747C183
2F34597C02A8CB9A8DCC7C290AE7D77264663958F064065AABAA5250796EBA2F
8639D75B34ECAB6E9EC4B2E1F68A7A1E194F5CBE7AC1B277D5C5D8351FDD1DAC
D022E49C17616C1C6743095D172BDAC397A3C5DEAF7590AAF597740C42B83CA9
55E20247D1A12B6B3309C2987CE74C1C400EF2F21A0492DFE930BB525FE69CCA
AB5BE5F240E84D21273D4F509A8974A776A79B66BBB2ACD8A074BA008C15B60A
26878019DDF0880B1CD099FCC7A373B8C5BCF51991601FC15DEAE65E8927AED0
562F0272359E4BEA254C0E81DF19BD45AD5C9D67D8905E9318FD885CA4D541C7
9ED96CA66089A2FE75BE410851DB4BC9BAD7E40734866F346565AC5F2C69A88F
CCD784EA807D6891ED2D8A5A42882D218AFFF15C020A173B06ACB2AA608BF14B
BA59EAED5E178EEB4C039E9B29FC615ED70E12B114EFCB258A4208674FBFD903
EEF9A46C5101F6101309566984E063D94A3C514077CD0089788D39AAB57771E0
BB4CA8D4AA137D675ADF45AAF0A591A95E94EC63CA29467681F6480E6B2C82F0
AF3A1EDDF7E2AFA021A6B521839070EBBEED5D8FCB87C82CD9E7879838348179
992432BF258013E878EE91A31244B5E18675CA3F23158369211B8D4C6F9508EB
2859C037B9A6C38E47DDD20E9C3A0D3BF4DCBCC54955334CFAF4EF43F7C78C5B
4FDDE29ADA40E9B72BA061F6F1F4E7D5E753C461016C6C362B7FC358DCDE5998
E5D851FCFC28216959165C3820F3A9A956E78E6B46FE166DC0193E8245F22373
40C90E42D44662814669FC1837C3609E94C70E893C0170DCF9340F82F0E079F1
C78C9586B13F720E319B220C3CA9D236F9F2CDB06AC43504B3186C206844A6EB
E40887177E32CFFA272D00B5AEC9D979A8295EE68793757C77366D0D63A7125A
DED1FD166E09C8B23C97CB6852FDB90FB89670CE9D2FD0934CE79F1917533620
16840676DE914AEBADF6ABCF983FA518EFFD55A7EBA758647CED5B3140FD9B42
A8D53BC3975934D39C18DBE8F341DF5A622684A2129889BB5857A7392722F32F
844E97EBE7B9C5ECABD8412EE373D7A7A30B73D395E1D941320B0218F5AF188A
CE153B765AB590B7CC3133492A367B6FDCAA1493A3CB56165279E51619DF2D10
AEAD1FB3ED1D7D78C1591FE0BD0B4130270CD87997A1B6DE54F4E81AA698A387
B74C1AF990CA1B852D6117A81A31483DFF00179C41CDD34E702D9FDF0B7A9C56
11541187E64A2473851AD2DBD098BE35801105A77651F1182E624C27D034FD27
25B3AD43B19FBCF3D0E87FD7B3D2349340595AB89F0A46B4280DC87FF01919FF
900D0B66977F23E6660D24F9C7420C626A0ACCB5CB7A0ECBC7A8FC66B8E3A617
336CA0F6255B6DA405B50093AE77341289AE9797133BDD0EAC50499FA8F71EEA
B2D7EDD01B9296D8D2031491742C7BBDF9F552559094A5DA0C19B07F2BCCC544
47B4B2A2474A61FD81C1082AF81855ADEF5C4343E934E05B91B1743B847D263F
801A9B40FC31F19AE82F459ECE281F3756A6287D6F6C32423D8EA4B032D287E1
801BB02530E7189EBB89FBE22084246E7891544738C9295BCA85F42620EDA0B4
F576C81B870FF7B0785AFF2A4095A6931ACAB601D16F077BBBF5BA9F8C4C46B6
6BFF93DDEA053368B3094FF029759A1B0271EDBED9E51624B2BAE41A275BAE27
16F2C249F906CAA7639A5064453B64BFA28F8EC92097873BA3E8A228533F5B37
4F69C486AB2AC449B04F9B89F084113905D5D8423A4B836B017F583935CB3796
E1C12F3C4032548040BA9E0672257A60452678953324495D38BC8D05DABA9C94
14A81FE338245BA2C0E886948AA6CBD94D56A0A82D2EB6AE649B4EB010D6FA78
E9C51D9B062489E70BB8077CF543A02533A894D72BA58E50D3DEEED1827AA200
2B7C01E599569C44FA8B4F8CBC00199B1E2691E9429F2227411DE3D7D510506F
106ADDCF689A973DFD43E4E6E0EF694A95BF5ED607B3A55B6D3EF6DD8BA03123
0BE647C72C1D45E2394E18B8BE05093BDA6E57AD541DB284EA7770AE39C8F92F
72F0EE5D5D2143D2051F4C3244C21C2BFC1D53FD315F546EDE6C9BC514BE56FB
8751FD6C5D513A28F71F1352FCD2A08493FA1EFB046354A839E09D667902257B
06B1275F6CA0753F3AC479D6D127924D263944F89BAE1BE7DF4B19FD9C0F3601
8BDE30910656E5A092A9926FB8BB5F6E691E607A3B1C17AFC34CBF11F7EA8493
FBC8D516871FF0FEC5A6F02491A4398F807B63BEBA901A6A19A8EB1AAB264024
064D876C7BBC8C48F3EA9A6048C69B015EB0BEEDB82386E52F0DC45E90CAE289
4532FA0F8D4CB65222063804FB645CCFCEE8A7AED8E9ED30FB1634A42817A742
9709B29FC10ACF2F0A621E6653475B1AFBFC33EE728A19A4CC861D3CEBAED02D
4F7FBEB5A25D37E8EB6379B1C2DB6FD46BE2EE8EEE3DB0E98F92627D77C61036
771E91B9A8DCFA8CACFC932F821C28ECD4340F26D635C1F4AAEFACED3C1B2379
4D5915915D0DE37C31D36BBFB5BA258462B2FAEAA7BAC2E215E6E60E73E25915
C9F370F39068BE9CE7CA52E6DF397677569E8CECF39E36C0FC4F1D640D6B858B
365F313DE8AD9C35AAB8BEAE047C93F217F851A9E2F46598C3F4F33970C16D90
DEFBB3FC2D17BB6D093318C11A1485422C5E37709DB321AEA5AC315F92CF94D3
A5FE19F67075EF010960E6A1904AB4DC7357861C00C8FE40E8AE360BC5DCD544
F710E8854B90F8699D221982DD087ACC849BFB537D4D4E0707AF354F03CFB88F
07537A1F3F783065AB29039B4BFE176A3161A37332A1166AE752E0FD5E083CC4
7FDE0736942404A8E6299A0E722664996DCE8F000FA771CC7ACC16A4B7E58627
242C75E303F4A255F77E0B2736D022018AD68A0CB92CFA8D0ABF61F8F2196BBE
1215D432AB3A61FB3C87314539ED4AD0BE59B37C395C5FD1C07FBFF160454217
CB82BA0F84C08009CFEC3F32498CC872E053F881D80EE4850A668174CDABD02B
5DA23230E22A88A27488BA741B460D161C97AFBF19C38B1A434A543DE9B0A48C
F64BF8F22CAB47BE682457AAEDBA55AC484DF889BA8353828E976947C1FC8400
7B5E8D6FCA5234C1F2064BA782E818BBBAC76867673765A3ACC005AC3062C4C5
73E1A4B986AC60ABEEB526BF323B60636A81154412DF9162977CCC5582FF87FE
C6DD12CFC619E39FCA65BAA4A3C54467F9E2C9A03854CD26975251323DCEE7A9
9B1BCFC663F3B0F5BB41331B6AB8650FD5C8177EDB3E3A75E68A74D909B8861C
2B5AF7099D13E73A36CE51AA482E1BF5953E88771E7B725379BC76A035C799B0
90C6C6F0798AA3B209246A37FA8AFAFBA4750A025280C5F551BAF949EDF6EEE4
6C0A156A92C5062DB40ABB99EF8070489EAAC30F98A3D250E5F82A58A2F51627
CFB21934CE02113E87D8C9C5A9987E460C49ADA534798D0EC64FA88AF922E0DC
FD79F22FEE7E422ED71AC9419D1F52BCC900DA73C91942B8FC0B5D8575997D6B
8AF54F1CF0993A5EA9A41D2AF1D9E63B90F43B374D702B78ED4FBEC2B8D0CF76
E8580CB687225D4AB604FF0878100E338B5BC06D2FADB6371BF0AB2C732EF75D
812AA48A3314C62781366567F59D7061C343569CE15BE964E32BC42F61AED54C
970F4A8CB57817FD46E1CB25BDFA9FE51A58F853609063687DBA87C85A42A556
F09E653BC57E1CF02F7CD123916EE9EF8236EC73D653192E99A8CF3526636080
3A6405ED8AC00EBBB9E2489E1AE396F28C3C8156951BC116F58CC59577C35DD6
FDA3134F386973145B016D30B202DBB6BA0B3885AA17837CFEBAF796222D0C72
AE259AD5470A47BD2A606708608DA6F0E93EC7DEF508F204392A9066A44EBCC6
D5E0CFA35FCDBBAE7A067E544EBD58040901F03C5D62652557E531C02F7BF2BD
2012DCD722DC1B092F916C4554ACEF8F60827A1BA86981BCBFB84FA980E06FE4
7653EA56E7C1D6B3E2FC8ED9C2FF4C36ABF02D0F1D0679538F697BAFD829244A
F2BC96E2A58613221E0BF5421DF79279756FD3EFC84C338472F335D806C61FCB
68BEF324FB5355B04A11D43408DD6A04154914C00AC95A0CD7DFF736FA42B8B3
2C5AC535AF37FCB1D28FC6B4CF0008880A166335F8AA22B08475975ABF98792C
CA1742004D56B8484AC8C9D51FD197A8B13D0594AAC64EBF6FF6D678D30BE812
9B554DFED8FC5F2236544BFE6E0B7AE7FA79CA98D62B1B218C8B9504D5935ADE
A75BC06E06299E222B340646F4C6D5679C6007D7D21CE513018E6123FE055431
9C4DB76691E3B8FA326BD2EDE7C57FB11037C3EC89F823C91D1C12E9FEFC3998
937F6175C3152258DA33F7057FE92C6F73B9117526704A519B352F6AFAD35C3A
ACED288BAC48BBF3886C00C62DADA6B00ECDDB71DBB2A8839337C6EEC7618DD0
C7FE09AB1FC42E3197664158DF1909A32CBB5DA5EB58BE3035
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic12-Regular
%!PS-AdobeFont-1.0: LMMathItalic12-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 833 233 0
%%EndComments
FontDirectory/LMMathItalic12-Regular known{/LMMathItalic12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic12-Regular)readonly def
/FamilyName(LMMathItalic12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMMathItalic12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-31 -250 1026 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD11234369CB38BBC21C40020C4E57C
950DC4A5CD271B5530E91DBA55EA1A3BF584D9405556EF9C802B109FF1EB2B0F
C350D7F091E7B613B08574EDA3BF27099BC2EF0E503A4C4724614A73AA054756
A503BEB31E3FCD96F733D0C5815847DFBB66DE4968A9B389FC00C2146C4FF68E
076BA8B3847A3D8237D36A6BBDF0096290F1BCD02CC66B12E0070215D5D8306F
406DF7590940DE35CA0854D3609249AEA4EE9D3D377A7996C1CC2E940132A90C
F633C774985DCAE8E9353607B9059DD211265A0A346B1A062D80C64B5802A750
D9FEFA3C9920A3DE942C65BD08060AF33C91CFF62930F65F9A42F70B83B0E077
E169BF7F5D84F15D59F8A74BC2EE4A7F3ADE36F38C3A661F4CC9826BF73D7F02
D3CCC267927CAE22B5ED695D212FC3B669F9BE369B7A8D325C3FB9D552F175EC
29972562517E91E7B8D570612CC50B1A5CB6B94D030B0C60465EA21631F7A30B
44A47143D0C2F942B5D76384B8C3F2F197BB3646CBED3DEECB6513D3AD460F49
4BB874969A3663617EB537E75C1C1BF92749F9D147080EFF78ED285C315BAFA7
D78B7B4B8B7CFD1639EA303ACE986EDEEBA9350F92529C47EA7689779BD50CDB
D1B3A68B383B54B51F4FD77D6458F15AFDAB471DEA9909CAB29840091391F2EB
148588D02607411F2E802B9CDDFFEF1C1FFCC9EED0405371651ACF30808E8C57
682B734916EE806703B2ABA2F6910E0C75BCE10A94FDD1ED3E4FDA7857341427
CA0A4F7D30151BEB8E3D351E1E100A8A75959D11122C83A5C0C4C87214413B25
A6BFE44A42D446E9C4AC8B64E3DB194682A30A31E9D23ADA7D5C0259E2410A72
D9504CAEF21597965D669100E95B8C450A3845A54352DFA15984693F8721BE6B
C8436111546A70C5B35A2390E5D3C43E8295CF922FF601D611725D0D5D9EB2DE
CAE11F3A66BA22F94DE028A8861FBCE564DCF89B36A5F1C621F0088A5E41311E
9B82067883EDC8BCDDDFCB6A87C2BCF37B79B1F65339265C3BDC27CD99AC7D74
8CF26DF4B25B62F3A47B378A341378AB1E9AAA88112469298B36645A69B98423
DDA04A18DF5410EEECE859A081B2D1D4CEB9E40FFAC6BD2F8303F58AD7686B3B
2D3EFDA6667CFD49D2238D55D45C48100D47604525BA0852326DE98A17CA12A5
67CE98C02760C521F44824D1B8EA2E10C8D15A57F5E7884B1F63ED9B541446E2
14AE6FDA6F0EB66522C36B257335EE0539B9E15D0BF27D8D2083E799A8BF81B4
D1FC7CBC756CA4ABE99BE732D6518A5254C69BBBB3F049FE4E20CB2F1FAFE9C3
D0241E821EC6D5B52F2CF79902518AFCBC03673814866E05C160FADC9454F3BF
6E3E3E92E174A38E5E90E92BB23F551378BD21CE4AA6E46E93A632174371F4D2
4CA34028E7E245CE2991584BB7997B693AFECFB56A60D19EFED7D65E57DFADF9
23F763A8F3E79EACD5C3AE21E8E0E5DD154396C58C3E0D42D357AE25A878133A
558079225EA3E16BD3BC5C9FE406C4A4206D7C38DBDF053965E431E30B763EB6
6BBD39341A2145850696AB7958858AFF92138F9804831E71871BEABF82C3E6E3
5C9C8745F20E73FDE400C7E7A7EDA8A65A9E3679CFF2A83F7C00DDFCCCCD64C2
B9BCD986C1B4AF91878B710942BAEA44C03D2A1C718D48E7B3208A91D2089B87
EF15130BB552BC10D167988C81065A6869DD79699485B918F3ECA9ABB8AE7C2A
3B02D7E1F1676AFF58869F047479A49E3E35416B3FC184BF83273CB744C2FDC1
3CEAD856EE64DA25EF8E97E7852D96E5E2E5D988D566417E5C380DF1F0DBE75C
B6D949F4FD9B13336CF530E2226CB06E3A55DBB277BE6F6843281B31324FA218
188690ABEA124901050F289DAAA7BA5107A8AA394576AADF162B023352069DDB
BDE2DA6E0C14D9C4F8923CB92D66832908806BAD98EF28DF62817311B63766AD
FB7099864428EA3587591962DDE4EEEB70A7FDC1BDBA17DD1D2F853285E4CA4E
1A158E799D50610BA45F2003568AF44E2EE4DF2B734FD72535354246F33B2E2F
7F4DFCEAC871D46DF7D165C4D4E6B00BF84FBE6428597412531988959E07A697
AF52D0FD3F35390405D6A9D16C8682CED47347AB01B45966A9F6C2FDA093CC4A
456136B6AD2D6927C2A05133861783867EAA0867AD50B7ACCDDA8AF992D4DC1C
9D7573936FFF6BE7481A49FAEEB2946B73DE763AFE9E8F9B0B086AF6A2D5A1DB
2C46D865C374DACBDD931BDB0C83502733B7A37A96E3F73F4DA08E55FBBF3D9A
4A8FD42BC14069A0D1AB082289B4F53E9DF4B4703CCD2BDAF43A3B0D4E2F36E8
3FC0A98C308DB54479BDDA8DC6941C7A2D2F89632EBED7ACE792168D969CAD09
4BE439E9187571C5953D9936E8B2BDCC9705D1EC618CDBAD3E1BA19FBFEEBB40
6B31DB03347A9895C16BD541AF38DF23BC5CDAA21E398E0D1ED4ED88C931C8EA
95D278C9E43274740B961E4F38C77359B1C58D4119BDB72C3A1C2C8B36EB8808
941D1F9190538F68EFB71D0D5026D84EDEF87BC4FD37632CDCC750FE60816104
0596BAC02077FF465DD793AE71E05359F636F506A627864E4702B51F8CC1624D
87218EE409C938B53210AFE3DDF143CC3D66BA601819312BD9CB0D14906AA877
9D97953C571AA4CE2EA0A112BE2A9316C9199521DA6B008885A1CCA9F7C3A7FB
AAFF50AA785451CFBDCFA0DCA32BC587F0C2411F7F5841CF1A1E4F1AEE82B7F2
05D36291A0B1E7B84F8988F4FBA9A05BCEC69BC0DDEE4F044777EA35BE42624D
4782C7EC62A1BE7137AE09796FC1B0F67F8FB00626FB9DF7EB79928FB4A956ED
2037E92D8EF12A516128FBC3CC17811F62446743F221C861FB4BD1C4865FAED3
460D1286B5D42AF052ADE7B735B40AFB56B133896F148A822E1046F54D102098
1FF809EADAAA66DD6E02F42891DBBCFF180E19FB5B7A6C9F8A693C8A1DFB4129
B420818369C7C942DA0953ECAA8A4642DF8470CDDF45C76BD5AC6D4821545551
ED8D50ACEE903D6F7A1FB0ECC7F8A6EFFD030E0983327E6989B76A91534C25D6
9B145E8F46773AC33682E0A91126A4835675466478CA658794C7E84FDAEC73F6
4B40DAFCDA8750AD2985D5DE2C895E919768AE54E9D0F4BE442FA0F31E67AEDF
8D9B8C0F863060B75D5E768AF5299B6D5BC74D38D5BF28D48F5F14F5270847C1
73D98BFE435D43CC242B3C349DE37A90AFC6881653E7E9C34D74F2639A7062FD
60A9D5294350020A6E2A29F463DAA9EFC2E65A3FDBB81BE48D92B0B0176C817D
F4988A251E25F24EA1993B84C732C47D21DA07C023E531EA276574CA09B521B1
D60F89F325D6AA942C8E6821DC269A7F25C9D524A24D16594E85B2D1F4A9BF9F
20A1188AFB4074773D8582D93BDEB4A607B098D932CA4E617838775CC5F238DA
3D0BA2FA183855DFD09EB07369A1A02752EAE2FC819CA6A34CC5133A68DC8B0A
0E2197CDF1A1D4D81A87580D6CE62E0D6335D14427D1F94BDD0FF9C5E39E0029
53C02C51EDF8C4CB4A0C392FE7A72A1F71A705D46AAAEA10B0050DCA3D2F073F
1C09904665B703DAB08D9D5DF60DACF1F3FEB40B33B02FE3B04A368B9D5C90EC
9872E4C8AB2846AACCE90DBC3A378BCDF3E0F67D73FBDA92145A13CF6DDD7122
6F14A7F3FB57B7768C9939D013DD0ED92C1C35077BD36E9061C8271614EB3A7E
FB5D66FEBB7231CCC93CE25B93CA46A6D2163A0E9E35FD247E5A9B4ECF19CAB5
072B99290113DB23BC2F0104B10A6421AF890B10F98E5F03620C3467393561D4
E252C61A2294409CA467A16EE2A1F4C1C13C752284A9F0E3AE6CBBE174D4E87C
C748F0BE5B4AF61F86AE8BA4AE07993B44EFBC09C99A8F0C4044897A445EF30D
7F2CBBBFFC6A76BE866112FAA6428DA859E5A9A6AD29BEC5C118AFAF8575D901
C9EFEBFE00C92B451C99360F2FF1296EDF0DDF23B3E9BA325A5B240E75B555F9
5E30F42940E3003BF1FC7EFA502F8CDA3EE73DA0E3A9776CEDCC7A65A759B0E2
C3B896C97D771DBEAA176A965D6EA74FB20A7C6B1C3355A31C48B3C009A32FC9
BEA900C0D477BD4943D7B707946C31C7480D033C98CB25E8719CBB3712A8B3F7
C67955EDE53044811E5A1310505360B3B4407604F4FED9FDD46AB107B9E0C765
9B1812712364B113B752F2331F7BC32E3190EF4EAB2BA16CEBF2C13199586AB9
1150D1F142A4C7B5576D5909EBD09DC930FBEB9412019D5ECD3180BC9D47EE03
94A03D7707651C039F8ECDDB7C5F944D95E4715B45D9E6AA5ED754CC12F75011
707B743B9ECB2B5D39FF8031F29AA023040C18C3DFBEA03F0C9EF006ADF46EB7
7AD2B7B4F8B00DE68E5CFBB39811AE3D30E6E8FB248FB885EC8080A834109902
7CF97EDB5917B7BB6D065A07D92DACB52ECED4C72FFB53066CA1F1165EA160B1
115F088FB797D88D1076CC92024F0F477AAA7F53E4C68EB0213E24FF4AA72AD9
11C2907C459B57DAD5A79CBA49914CF25887505C4E660038B25CCCCCC28067F6
B4EA54AEC3B4548BECD2689F21A8B49B401939EE9891E933A451D4374081E1DD
B498B3CB7B6E3F1580A1F95EF51C42F6F740DC3A61445591B0D85BF11F6CA9BF
73B0796B5E04D757ACA16DF5465C5A96E3CB9D34031D3D10EF2F8C73A47E3DBC
3570BD9178627C69781AC5648156FE04EAB6ADE77B410F668032D4032C4D1049
82DF7BBADA43A209AA3A9B6984FE44C1BD278ED7BAE559B92189ABD7F4C7F2A0
18006E7F91078A273169319BB7902D7BC01410A984DFD10622CD9EFC4736C0AE
086E172BB92363D1EC40E4D4E8EB172727B873AB977AC420FD150FB7110F7656
D6F057D6739C32CD1DD10D7DBEB4046096430E261F396D63088568CF58A4F1D2
448467B6252BA3AE56A101B6F2055DBFF86D065B4AED6DDEEF8FF2AEA94C3F40
86AE72BAE52D35E4C6E66F4A295031124DC0EAF610F765607C58241FC80C6E1A
0FB51B2BD032D11F8F2021BE88CBBC5F0345519536C10E3CFDE833A12468BE7B
706C39C1AC1E1AE77338F7A45BFF8F3EFB6B77D8D27729D20BADC11FC8E87AE7
D7A2B7A734334A2328D86DB7AC23DC0F61E52484DC1E9C92D87FC7ABCE846C5E
AEB4806D9E9E4832E32A932EBAEAAD98FB04449A35DB0BBD838CB540087896BF
D71C1AE70B46DA9324BA6A1BE0E91D699DAC302834577D9DEA4B3242639822C9
9E33790ABDB4015AB64ED44E4136004BB5B0B5E6F9ED0E3CB0701AFE17AE072C
7D364FD0BD97914B634034028D3ADAE1AADB1C4FC69CACA0747B0C5995E8C9AA
39E2D08464011996C19AD0D68FAFF1AF62A48B5B8B5943DFA74F90AD633EDC8E
0785394F234ADD45F1A583BDA3522C846121015CDC4F4D353D55B1A1EC0DED61
5C3954BEEF9D059B53835DE82D9F73B5B64BD063FB9AADE9CE1088E9FC302D27
E4072764CFA8A2558F6D98CF8F5CD55198AC9CDD384D8C2DCD4C66010D92E034
21646D56E8D698D5EDFF2DCD2C8CAF36827F6EF9725CB326C650542012A3DF19
AA293AB2C710CEE15B03C90298D46A2D6FA78C6E1F69AC4827AD7BEE83E65433
95CAB051D77B0ED784BD59C897F5B0BE4B7DEB1873CB203202EC23F70E4FB4C4
47601263AAF7E921DE972E0A7759FEEFA2BD924A4C8904AD653EB0FF18A376FF
6F7288C45B2D97941FC745CC5AC4B30FEE6F78D02F8743DAEDCFE632E7287FF0
4524E712179D1E781CA3BB6B7B02DDE530CB18E5C5B0919491BA2080E79D7DF7
20A31A7A5686D0E2B33FA51C19A73A88D2065571DB182EA36B86D0CFE597E3AD
13E07D7F5D923B52FA610A7305B0F621259CD456CAC381FCED0BE63F3F978C6C
765FA7840E3CB86D9866553C489E2F64087218EC26F60D21100749C714500C66
5924DCFBDED5EE586A526BEC7E29F695F4C7E1EC851D368C10D5E2786C14E20C
2CA7232D4E7529B581C85D990802B34E3E5790895FAC3BF127B1B55E7AF423CF
9452BC9CDC2CABBE3ECF535EC546A8CD335309B119CEB9BBD5BF5C4B2D54DAD7
F17D24E57B53EEF4501BED9F48CC7F18EB0562BC00982DFB54134564AA7232B5
90E349D4A71848E44EB9C25F557878F17FB26E83DC0C44D4A18506E99D6929FC
E1BB3265F50BA8ABA99AE83A30230E9E702923796639FF43C3A46112CBECC259
383F2794F1B2B5E7F046553DC9CA20976E1DF4F823674F9077C4E435B665515F
A0A388040EFF78F70424FC5093A566FB709D740DEC989B4E4FEF0EE76FF01011
97BEE48E38B46CAEBF3830FDCCAA97B5AEDD8870D5CF81CDC965660E2816E70A
B0FEBF4F39A1F4872285D32B48F5194EDD05071315250F1934BF56DA39A125E7
B6C3CF5095F8C6A431CCD3FA244650E4B09674C47B4CD1457E4D821AE05760D1
62220EB758EEFC99487891BB92EEBC2AA01160456FB193BAC1159B7A2F850B0E
5F132DB096
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols8-Regular
%!PS-AdobeFont-1.0: LMMathSymbols8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathSymbols8-Regular known{/LMMathSymbols8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols8-Regular)readonly def
/FamilyName(LMMathSymbols8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathSymbols8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-30 -955 1185 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F035757560E05960E2C327020FEAE317
24C484AC0CD3C1AB9CF35516622A022D6CB83DEB8126DF04762C901617B35492
98158049D5C65DE86143B7F36D36233A115C36DF60D3C55816B2B0B341102AF0
90D7D4E00A7611262CCD366F870F0EE8175688261513076B608C7E160A9A79BD
2B66E2E2A89CBF6D1703854915ABEAFA09718FE338924B5AF1FBF1209786AEB0
0026C38A2C7E208E6C306BAAF037DFB0F3297EE1ABBA65247CF72D0F78A9BC24
038966CE124B94487282B69D6BC0B5E17441DA55415B5369E451E2B0D705FCAF
3AAC6DBEBB8AB0313C4C201F851DB96CA9EB49357C3C1AB73F0CA2110C994680
5AC8F0D760C03F71C92CEC2E1A3AB84813D389BEFE7E0C28FC76FCA70704BC4D
159EE8B490B95CB09DD01A4122A686AFB8B9C69381C8C303F9A3B695238C3BB4
CB44B3BBE50E2BAE63796BB51D945469BB75C69F7A758180B77CAAD2CFD5951A
23580A3D45083C8368543DD37AB49705B939804C12D4BDFA730845F7E42A6C9A
B3F0A376F44DC297393B85E8A18C45C99260BD499DE599CC0D76EBE4AA7D70AB
348FA87CA9A1000814C4FA99B4EBC35A0298AA29563B030707F3EAD9FFF7BFB8
3B347C4A00BFB392E79B79F413E67A73FBB006EBA896A65CB21BE940A0940640
34E08FF806A114ADD3FD42BB394F76CC77DD869C46DEEE20839C9A2FF73B840B
0ACF238D333719F5947DD4C39B8E3F070EEDDA1A39D526319828FA9F47F03D8A
245D8E215B37959566D26DD98185223E4FEF01676650EB4E26C0A425E6C23C50
4BA94BC88E0861476C6BDA40AA30151943B874CFB63DE5620A7A8F2CF6EA77EC
ECDED0887B6C00B24C7A463FC10FD2C2F18D67BFF9FC9E621DB4AEBA91880FDA
C1B255D3EAB46E6243AE85845FB84DC84256134A55488B1A6B00C672C13F4D70
9C289E50F5C1D8EF063ADA63F3351D5E8B2A5BCCD284480B0930FB24143DD785
1B5539E97DAEBC0C57E6CAD4465492780B560D7A64F4AACF00DD611A0D4AA2A5
9BF972145C6A25C355CF276F00AD5F5E4EEA8D2788534B0E643A05643E8A8303
8029E832F016A7F41B9B176926F360586A5C26C99195A6646B1336FDDC2FF0E4
0D5A3A2E5B7AF64A3304B9E86E1BAFC221A8165D453AEE422EFF10547CC2E44F
566E8880D7B62B55E06213C9491954D1A8509555EDD6F3AFA775472B61C784BE
8968101A50626A429AEFCD373482B35575207D2AA2476912EE771037F8D51B80
31B5BA4FA023A643AA617DC3B38D8B3697CECC8AA4F174F5B2C1124A9CC2E373
ED1F6F3EAEBD1C8C533E943977A590361A53953D75312631D6F07794B1D85325
1462B649443CE79BEBA97AE481AD4AB1DC86D8BDB89DADA55F2D1AE640852657
EBDB5BBF685EB2A4606DE426020640D534E795EF9019F887473996793F6FC92D
A11EA37B2EE094302A297311DA3110A873E6F7DF8F113DDE6AB0E182E5162DC7
0CD52C99C5542185168CA1F712BE96EE3F15292DEE4B72E4FDC197E724033F7B
B9128F40DFF15856EC96F5C3BA6E6CD5AA138B168C23814295B0BCA199FDEBF2
CC7849276A1AAA5F1598EC7A9A573A79CCD04CF98E4C6E81DE8EFBBDD3C355E7
3E38FF48F0FC3A3DF5B4891F92369E9379CE45F6CBE7E3178917EF80132FC8FF
0C7E7C01CED707EE67D626949BAA454CCF3DD58FD7DFF7B255BB8D78045C6F33
68050136CEEAB37F705812FB77CE978619015F83689687231C03FEB091AACD0C
096AC82B79642D2AF6CEDCB5190340A318A5F66CBDB3D64C3E9E49ED75D95704
9B85E0F168D4D12950FA8BA9E1FC687A5056FEB861893A67198B49D5704BCBE1
4EA52966BBF2629035D0209A74C21D10B0BABEEAB1C52E626749175FB4B267D0
D6F8C04CD391EFEDE4224FD7CE35E7D5460EF05BD7AA8B7DA39A26DC8F9E6003
B2EC15444EAC35A6E054D213D0A6FE97C994ED2EA14FE6FA12DD0D4E6E52A32B
048D621B04296FE74CC3CC0336E26E4AF4E9A6A0BE3FBE05D453553E147AC46A
2F2F1F5ABF0D0F03D78AE6E30F27C037FF2BB6C0229DD7564D4BDC48715E8499
206DA2C42BC1E19DB531D2A35036D25CAC3FEB287907389CED035FDEB68D4F69
6D170E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E752429B985F23EBA0C9875AD055D8B1F640D10DB8F40BBF062F476691
EDAA1D05C5591EEDC1B75251BFF8576F1C9CC5C0E521392A2F0D5F869F8AA462
B3883A673A976328E1F0DAA22B80CB7737DE2537E7B54F5E1643E30046E87CF3
8D9A45A973757BC16CC50504033125D2A68A1C97CA095C56B3D62783960780B3
1693596869FAF5692AA8FA6643FCD7F55E72948D2DC55AFC5016FB2C48AF9D85
192393C682B739EB43CAD8C3FD4053B2D53CF911352E2BA87A65F8949B0B7918
EA727DE4A08DE07B71365B8F31103159F65D30A7A318C1056BF638CD20BB56D8
6F22ED3EACC46F750F405FAF96268E80A409CD8AE0F36B68AA8C5FD2E0E871DB
D2628AEC086AAFC9F04CC93440E1A8B0ACC1DCADB778837360339A25C08E3B0C
E768240F0E8CE9FF939E4B1A6365664AAB69761B7A9C7B95BD29B09B930B0D82
F2C39F9BC0B94E56C48DCB22D8F0CA6C633BE68E5977EB3D88103E4230C6A08B
B4FB0CDEA7D44636102D47AB90B92FA42243943EB3E77E6CC38DEDBB2DB8BE77
78936B70FAE12EB1E2913B766CA2BAC3FA555CBADAF2CBF6B7A216FC93470554
2C841542BC1FDB26DBE389CED193E28A19CE9CBA64FCEB47C4D9C7891741E0A1
23FBBE971ED93F797C02EA830678317452481FB78DFEFDB25A3645AD3979D2F4
AA17C624CAB35B85963C6DED262AED5DE92278F31B2E573FD86696D98800443F
32CF695BC660D7704664695A83680221C6397E36FED57827D0CEC45CCE9134E1
20F85C107CE5E670014BCD3D09417B18667B975BF873F4BEA9022072655ECB43
9ACF13725A79EF90AD4FB0073FF142CFAF4290F2BEFCDF56CE9AD3AB8669A691
21B16C33CD949DC6E4C614B2D1A0ED127FEDDC4387DDB2E10EF3FA3985EDC86B
243368F8CA936A6B93DE729493EDC6FFEE039CDB833C0CA3B0223A63BA100BB2
B4714AB955DA07C374F097906ACD908F1A8355BD40273AB986F80E6021E31427
AEF512224950615DA2039D4EB3B18C87BC21D80345EDB06493E9849967F12E63
19295F104EFA71C12917DFE9B08B5473DD51A322ADB72FBD8794B3F51A1EA076
A789F59B3D595DD347079EA1554A4608FE9440AAC9F04CC93440E1A8B0ACC1DC
ADB778837360339F16EBBF5AC7571B0778C0E9D25358DA06B20DDF35F40C2314
035F52C165A49120D5332A136461B27E1D641B91CA52CB6583FA4C6F64BD28EC
6F839F95D74E2FACD9500D776DBF675838C2E27A9A1C75D9786FB52F7B15A017
61AF688C996E2561756B8F923AE34B82BCFDE515AAA95D76089B8C6D8CBF4863
3095FC397712BF000B4F2852F1C52ED15534409086E06FD6BC39007057B13EBC
E5D8E8EB108C21F7A32F8D0DE181A612268EF75CF1AA6A436B3DF24E7DC6ADB9
39B89E2924D0A92FCDC2AEE877BDC9CC108A18629F0D64BA727A5BC21B42B5F4
1E8F864AC5FCD0977D31EFCD46CFD2F60DFBD4B1B7E0041EF68AB5AF9B946FF9
36607E3512ECF70AC43BB1D4751F57512749F002E1148BF99DA5CA7EDBB00B60
E26CAD17086C48CEA3FF695D5E829EE6473F0C657F7655A674B43152DEC8B2E9
36E490A4D367D68214B348BA51DF871A83CECEDDA1F3DA646B38272829C49B77
DA56D8C3459AEF9356949ED2BC8CA8085F829B9F9E0B4E360140E2EF8AE58083
EC6DA4E70BE9D053F69949A8E464ED478A8E037FB132781E4D3BA60B95605DA5
5C67C5F6EF7AE2049EA3D2EEE67F2FFC49FDB8B4BF1A5B55899A71BFFBC96D20
CF2025F12147C5C8D5E39937B03356D453D819AB0EECCFE7DA6DEB238A87FDC4
1A647D79A3E56C4B5AB6B245E707523349225E6B8EB758ECEDE8173B87B4AA14
71C5FA50EF20ECB3E3080FC6D8B395542D5E464EAD1953BF60A81E14EE323080
F4DBF77A197944E1DCF0738600BFFAE3E467BEA9BBE6258A20D9E32E17451282
4E1ED5C40D3C40923DA150C493699F0E68263CC98B61749221081D1C75F39CBF
B348CC853CECFF1489C53CEBE1A6915BA90065A1A95764E697057F013763621B
17F36B310B47B715FAAF668FB7F142A6C7682F1CA89CECD0A14CE3BFFCCAF634
AE7A1DD365AB9D3569F5A96C3FD32EB201189D07FC46F41CD2FB9B1BBE515CE2
23213D98659912424520237D41AD0A00728D89D92DEEF30B110E58570A966383
AA9F7CE59375525369CA6A559BEF0CA0B802D43F883E1C794B9D3EE9AF8A5CD1
0A347EC4A862A6F0B3867EDE0A050EF258A7F49F5081F1FE098F53AC01525217
1C713B12582F6D29ADDB80A225B11738EB3D1BA708653BEC6F7AC682EFC32633
1F40C5E8FF16D3AB8647D6542B4C6CD77F4469A676906BA6AC776BDA43E4B128
3ADC30DB82832166A9202C67C70817F41B505FA0B5F906C537EFCDEE4C69AFFE
F891072A4BF938AF76A97EDD40B7F6F9D15E91CCF9B8B2DD85257EB6A2C747CF
7113878FC1B094729613788FD31ADEFC852D2E598734CDCCCFD8C05DDC3040E3
87C62F0DBAA9DC2F6628F61497ADF417AABEAD37062A126B997B7696988A9F2B
3AC897A10789DA53D2DF6BC8441AA916C8F02240634E21A4E79A7C8F9062C2AB
821ABC614DA8C5DE3657D1A80350032D19862612D6C80422A4362A89E46F7DC9
1B557A4C8683B5295596D591703D3A1C188354695617AF56DDA1FBC56DBE898C
9AF2FF244463C0DA21C717E348E0BE63120324C3F420649F82D4160A07270010
141602C3A6572740D06F3AE476ADAE3DE5D771C66E86F97387D4AE97D6E59A55
4057B9862A120162EE8B3F4E8DA71604E6933F27729A2C7FD9A30D9E8FFA9D0A
9D090B86A2B91B89AE3479CA9B27527C68B896EDB1FAE22EE3B71C15A10C1971
0517916D0CF980211650F7FD1D657C3164611037449E390AE607F3790491D6FB
BD58617B4FAA8341C4DFBAB734E78912D306347C0DCDEBBF156308BED3E724B1
5646DD2FDEA523D863CBD4EE16455CEA2C0BEC9873A424C98F8E905C9CF80FC7
24E5A519BBD1CFD777EFC9548086229ADAC4953EEEF78155D1AAAF6A197A1B14
F0A5EAAB461B7B4C814D7591163219389B0F4E74CAF6C646E9169D885AF04A62
7278E243314F53B604C87763D8BBACAE4B22606DF4F87EC63BD74CE9504531A6
AF606FEDA8338FEBD91498B806ADEAF525CA1977417B0C7399B006B15704D390
8A4CE41B89961BBB8CB8F66913A9AF650EBB1B131913D29467B7517D809FC549
0B8B4529805E0E448D4568D96F6FF9CD9E58D823E58184669CDAFF2CC298AFE3
98A610ECCC716F622A9652257CA414AFBF1CFC2AE1E6AF5D19D7ACEA02800973
AE1F7D563C43EC5901417F40FEB12D4C3841165C93E441288916FA8622E56DBB
5C5C335F34E93B2EE95EFEBA3F61D35AE7A0CCBE266A5CA609525EA685DF1D3A
FF4BF6EE7D367C652B12B08286D947413E48F70CFA41C190D9CF234520FFE9F9
8963FC566AE808AE20CAAE74590B3DD20E56344AE5BF50A969796BF3E807C04A
3B0CBDA9FF1FCA427B0CCACAE3F78F40E9A45653BBAF2A5DCA560DB5BC07645F
9A00BD4D219AD9426EB21FDF7EF88482CF7D3056AFC17907788ECFD84AC599CF
9C38E918B17E14F876C34FCD483BF1AAD3FAB74C2B69537837A2B70DC0908B60
2471C6FDF28FA577B39003387F79289C663EDF22003A3B3A68A6510AD6BD87E9
BD0F7E93A67159F5E757638511CCDE33AA193D61A35EBA7F7E101843E35DFDF3
E38B88D834A1E8AB45FFE334532FFF6EE351252820E23D09D6DF44958A1F7695
ECE82296DF0D272C713BA3B611AE1EC74744F93ADF8FE08B4C8BDE976D18C8F6
69EFAAA30BAC0D4CC63F2B9EA92EAEE2DAD39F2ED647096CB2E31B4C142F96DA
119C69C5996462FC72D92AC07B10999E1894A2A20522F49ABB23BC92C8F51D9E
6A80F6C97F3A415D53BCD1CC1DE3427418EA4DFB1C7C768210D594EFCB9C4C1C
C4AB5819C7F03FF5FB6959F7A8B3B1342466BE847F79289C663EDF2200390378
6AF28077E0118B0B97025CF645B8AA67973974CD6AD664EEDE7C2C23119D75A4
7EBCE1444A72114A8F13DB333E91412B40D901598DD421E35FA94ED414B21E92
1D342892C893F53A317A31B5CF413C5A6BC7DFE8BA9D7BE47ACE0501C8BE926D
0CC551159531DD06E4D7E02762A656C0E1E51F22AB20883A8D5D9620DEA594A4
4CAACB562DF397D4EC0D5C540614DD882127AD674DF737129BB809BAD627C9DB
FE5ED4D2BA25631C93EC41596FECCBCD3B3E872A0FBA35589BACDEAAFEC6E0F3
1862296F17D9EB25762022651F1241C6E2B89D5A96BB6DADF878EF8FF5E5DCC6
19E83AA5F2D8120ECA4EED74ABF85E3E44D28B083F329F33E30EA714B955D213
A1E7DFE51ABED171CB28B04D6F4B62DDE3812AA8D94831947CDC43C756A23824
E8462B357C57195B410F7428C9B538574609C27B61C683F46933B7194FD9F3E4
EAF4D145E30BD9AF179FD6BB624612626F2BE1339F28FEABCA020520722A4B1F
DF72DC37333529F06FDFCA1636023C3B45D99837E560B8513DD61CE02A1434E7
D661083C7F0D6DA400957FA097F2B0F8F584F3A5C6F09F0EE006639486E6AE74
7AD188303BD2B1592F80217EFCCD59E2F43F1A225A568F8A7210E2EF1A77DFF0
D1E5B9EF8C1406A58B14B3984149279C004613B278DD1D33787E60D405A059A5
E081E6A953D19E2FE4D85BBC15DF0448A6610E1F7FAB897E1D4B3B752019BAE1
F9E731B65CE2E464DC4A73AE8610F898B10D8BF3B38BD30286E0A8B3E42F7CBE
C366E60C18416E274A1625FF8FD008BD4402918043BEDF77B840B2BE0DAB531D
232D35EC5F35D5AD07347B69DBC55E6DD283F3B22FAA306A89B60E01C8D8AA2B
2A13F17B8EB838C38C2307D0866C190439A0CD836EFF939FB12FD026E09A8231
1A3967378BF839C4F64FD568AC79BBFF6BE6ADFBAA78AF88F41EF68172E0D014
ADB90F36DF86FC1BB235B2AD2DF2C578A0542C90E349863E8AA933E2C5EBBAD8
01177B0EFA57AA50DD92177957725305D42DE9C6B614926E7F86DB5424750CEA
579D039411C1E91001090A4A7DDD0BE985B6EA0D59D1D2749D40D952A27047D6
A5FE3549CA0B44363C27DE6DF4AACB189CFC990D024A8719BABB8C254985C61D
94A34DE3CE77631DD3B380F4D1773806735BA2F7BFE00578BB6C18A3DB61A9E8
4B41CC5A699F68A7134195810DA0A805C3D76CED5BF450D19F2C6545B7E98A6A
EEF370856BB8DB4B85B9A843FACFE8DF1F7B0A6FE5451EB86BA3578589A939A0
B9666FD413DDACA0393957CB06557E417EB5CCD76AF2E031C2E1719BEA95A88E
93D136EF196DD59BC538502D18ECA4CAE179C9CD6222EFAB776B3382F2F6B0E4
5E4BE3E27CECE324917C5A99F4A3249F0AFFC4FB38AECDEA912516F3828A9480
D61796904A574229FA3F773B665ADFF0135A65ACB5311765991CFE5E712702E1
BBD57A1107F0AA9727A4EBCFD903DF37C6973532A76031EABCBCE4FFD0FCF3B0
B3B7A7E6E1AF9432DE2332DA1C884762EEB3EF660DADA9C04B5EBD29A0979105
8DA1F21D32BAEE70088C9E26969675F5F3B9C64E294FCA748915856FE50D442B
EB8A77F9298A753B46F5F1CECB8F3ACFAE9D36CB7E06F9DEA2FF2EA4BD68A679
9C62C31ED9C57340228B575A7FAE6B90F523A529314ED45BD22A141FBCD329DB
E1B0C05ACA0606FBE486E6B4F79EC50CD4AB4487B613C281562B5809D6279767
2892E72692485170342BF3F3D2D06B0A82D47326D14E817FF8C3EFF9588CAAD1
E91F54ED7059BC1063DB3004BFD229E6A1E22554AF326DDB4A3EA43C5D42182A
2087CC39A4D9B855AA0BC6B2582CF5A2E0D8558D54219531226ED1669D0FFECB
6894E20FB150FF90B4DADD8E3D4CFBB672948D6CE6FF549C1799F619F386660B
5E09415511DF66A8E831EF43CF2298F0E148FAE011FE8040A6C037E0080DB960
70BBA2BA8470065CC23358698AB2A4E7319B9FF1A7480F80EC4A178E591B7AD5
45C10EC243BAE06197E7A600CCB5DE4956F44F0A96040C1A6741E56D793ABDE9
F34D71C58EF11F607867B75667FFAE77337151671A462E91C0471ED87CBE8873
1C76B14667721A220ED3DAAF96F20E29D2F08BB5737C7EC61AA529E09D262A84
1CC9C1CF25413ADC7FEEC8F13D75F725FF498C30ADAE8FB6E33CA153EB711DC5
3ABF29E36A29B707A51A697A4D8A360D401719C5FDD40423ABF617176B028A83
25608946AAC90B2AB081EEFF2575AE44172D12B6548A0EF59C6710A1C0E5BB40
6AC1CB1B033DFCDD9145F8BE5CFC2D5864EEDB8AF0E5CF883FF63485DD79C77B
D0256D6B5B7FCFA5E7F8BDC7A646A921BB85A417BD2D7204CB6ED99662794202
DE1BE47B1D376EAF067769C89D42F6F34DF5F59AC591E015E61194BBF646F51D
C5F7F319DB8265CFFB6ECCA09D6157FBD30A7F80FC9B4384EE6F9A1528F7E58A
9CB23E3EDE43B8FAE43812D566927F29AB24C087E0F89EAC202FC8AC2E22263B
84FE05778A419576E82A56E760131E50759E3F8799C8C9C5984F546EA3EADAC2
A3EBC99B93533EFDA52D11F0F4FF29D43DE342018E67F6B116ECD19D0A6BFB00
C5DFB99BD8677BB3AECC0277307A20B641E77FE6A154E70B6DBE472F83389D74
C3B83B7437FB44CE935864F65786147AD18E43156C122C3E51DB8A315EC09704
3E3E62415CB260413347F237931F544C4DF2A77D8EEE236EC31267A3547C70F2
D1BE06A26EF0C7E2277A8A5DAA355DE4B122317B671055921CF2C5C11A3A9A52
E09A006B8124A80BBF26C266F7EA9F50CF9A75519684785B73039B66EA4D2CAF
A5AABCC225ECCEA316CDE8A62D377AF3CE7952B654A51BC10CB608160740F68F
4364E12D55C4EF5739C8802413904CAA40EF5C7609B7B8A5E1768FD239F48D40
50677028CB63E1A38F66095C6055909723606EF8EC352745F2524218DD087768
EC44A893A7EECB6D95C35BB87DA2B2CB55921FAB9ED7F964ED314D50CDC06341
481153D90B7191189F1ECB563D4909081BBEA2BE164FD761EE98B9A9476E50D1
7FD2084FEA4387B1F76ACBF8C8B97DF06B3987CE90CF308FEABD6947A9C315C6
57AF20D77D0053F964CB75E7DAECA154625D290753F8A8446BCA2EBA9FA52428
0B99D60757CB814F513009C4F8EA0E7C610D9FF5AF4E5800D626CC47D247CC61
0668FF164EFBF2FAB088B45308A2C0A24EC521CC6C63EE16D0C2DD5ED0582942
E36C36EB87559E5786B43C7DDF00B856C14AC12D7501EED52593D50162CC8BF5
102058EEF4143FB5E679166C59F06712270221C5934B0D240E1F647CED0B09FA
A7834F6DCC041E7E81C908F5110F0B3DE8582E22D221142CB330B758336AD62D
A94C1E3381665948141CA2FF95EC304694FEAA8215C8A850E276853BE186DEB0
299AD75457E41EABC03561CD9EC3C5AA7BC90CD779F458E7BE99F8D8D67CE49B
563FDBE2628E8A7357B9C86BB64C2A8D1A532A1EBD4C83EEFFB1EE78A607C037
732BD5972859B613755AA32928A75D24097BC06D801AA613EF09BCB258EAEB56
20FCF9193E043F816F5EA15F0585A83F48D761E5F9F515BA246763382FE6339F
EA2457831A92A9B47AAA6B33894EF46C08DBBE4486E7038C3C3492C914860E06
521EC9E8056810DF095BAE26B394E8356F6C295B3A746BF7C326962724FDACC1
7ED3274A1E87749F6B1B714E6460ECA45E0ED12DD7400920CD2E919FCBFE2EED
CFB12B2C7034A18DD4178062E8D1B5FF84783F3F85772FDDF94E78D4E1FA2439
F3AF1B989BD9CBB3BEF08265F3D767FB0C20F69FEF9D270035F96FA9C8CC081B
EB7063357DB83D773FAB7DAC397C6B87F9890C273FF8D268877C3A38F5C7312A
CFDE8CACD53D969020B1B90028C373D3448E0BDC5117D4303EBE3272D35C4D32
534685FAFB8E2FA46C293F0CA1107593EDBBEFF3B1CE24118DE186A57F82D77E
8D5B63DBA5EEEFCF837941C0D95DA093EE33DD22BCACAC6B2846EE54F18EF985
02AA92FFC6F099B300D758C423D376E2C1667E40085691FFA140FCC6C598BCAC
F8A97102819863E2A35E9A4E9A5B2B808890A43D9E7F59104AADCF7977784EC0
185B6DCCAA31E67DFDC33E9675CCD879D1FC8C81F6F217372686B1FEEAC57C32
764D531E3B5CD8D178F9EC1479CD3A02BE03C555B0808D40B953D2EC56876629
396221A59C6AAD10E16FE5C7A72657A80F1CFB288F00412A0ECE784F633E3161
FA6E6452ED50E0454810807DB21CCA6555DA1A22700A87C2999DDE579B60444E
AC7448667967F1459F18598E3CBAE1DD000B51AB4A815FE1D26171F3EB972479
D537F63B50E8088F4AD38D692048FB3B82895FAFC35A80F855645E134C36B2FC
CCD0B5AE874EF2E70FEB9CB1F837A1BDBDB68D0A2B5ABCBEDAEE76F4E31B08DA
208FE08B4C8BDE976D18C8F669EFA9F6AAB5AD2ACD4E749734781021CBF8204C
93E1E8BEE88D506395CD7C83F9931A79990298B08DA5149E3FD6C8596A458B9B
B3FCB88DB55532D949F5AC0C6827F7D5AFD0D54C6766BBF044D93283569A7239
56E8BE316942806E42609B14C8D1F96356661F43F7ECB1CF1480CDFA72360A00
F6487CB687830972BFB0D20CE2A288EB98831990CD43239F322B3428E32E833F
D988D566417E5C380EAE51AC90EE56F9DEE0666C2484BBCEC64AC7004C28C71A
E3444AEC48A331D45080FE3B3DDF292C70474F1D9D169A35F71EF07D9740BCE7
F7351840EC9E4553B37EFF328F3C49DC522636D5B7FB6EF764097A17DA725C3A
F2AE03D8EFF137E476FE5A098E607E25ED29F4BF34093326DC57226948863D54
02710A02CC77A9841880181CC50E9C9A5E53D1C1C1E4306F83CA58D52A369E8E
8645AC706C4E34DC85646396AA84DF28CF38994138E0F4E0A4A71D28AC2595BD
123E8C062B8D1A9E1E0D8BDAF66CD91976C7FCC9878D2F97D0E3E98DD466CCB4
EEC3E1642D2A5142F8164AD43CED97BCA410D5165A37BB6A43A3DDF46E48D535
A3E9111D9AC4C4AF100F18777DAC2B883F0B2BB6E073B24129A4F2E37A0D3B67
9006094563790CC22C4919013CBC2E56C7D347615ADB8DCE409A9C000235904A
BFECA2AB5A68771F4A5D68600ABA10050A1DFDCC768878F88AE90E87FD781289
145C5A7EE90370BAF7C1B52A067A884BEC6465A5814897382D314F415DDB8B9B
0D8D847664C29F8BB65B115E46DCD767A0377508BAD0A7CFEAA913B935BA91F1
682C8957F0825B00E1EF6358A8DF8CF7B4AF6BF074A9EF6D192C203726EB1A87
50DF7E7961AC02510F5B6EE04E45B561E9963F12E34090D278D7151D59D40D28
184F00034AF1BA02FB91BB4E32ECF1455DBC3E902F2AC3ED51A3B36935B9F59C
CF772CB5742104AAF7F6B37234BD3256784F94A5F758E4E877FF83DADDD46307
2AF184A4C3FF125A00E95FE944D47992413B4D7D1EB9E03780803A4FF311D468
9D60886FCA15CD098A1B0611374A7A0A02E4EB6022EA5850D017A96E86F969D7
3812275C91B9692F8E6EA9D311417028F03D8138000691D077DE4BE964AB5C97
C19EE32BF30706C80B42BB37178508EB5EB02F088194A73A2D43FFEB446FE889
E03A64359BC513D8C384449A72A1AC1AB66FDF43144DC4CD991A73F7F8F8338E
181809C0F9E0CB6F56A0476B5B0CF6361BE28DE2D87B5599FB82522EAC2159B4
9C1DB34B2567B50D0B0F2BAB32DD9E75E82E44D4BEA662E8F935DAC85C030E5B
6842159B2E5BC8ECD8521DCE96F73171A2DC30E799BEDE4F80E5CF50E44B9D83
19141D0F653085F7953F411544E56FCC098DD1C6BA94A6B454A752FBD1D618A5
DB1D28EBEFBBBA74C9573A48E8EBB5E063D975B7337FF348449C01E851C47363
21D6DFCE20133D6462BA31F96DBD7DAFDE8ACA844DD34A2EC1F5C5C7750348BC
DEDE568BCE4B97C14DB45BBBABA2360BD53527CB1A3E4E4894BB92AAF0AE56AF
9ABB385D300EAA72C30CA3CBC8D9D4BEC17F17889B04CE21D724D77EDF67F705
10350FED48DDC2782659F1F50E85A8AC196F341FA509B5140CECAD52A56F1BFD
459667449FB7D3A09203AC46C60FBE3A63A34884DA9097C0F903F0F05E0F77EA
591BEB83E1862097BC700681207E93E45BC33ED9222E73EF8B9100E693C1BC59
04C3D7311225F94FB7236008E5ACF52FED8382CD07F6B122872E6A35F12379B1
113D12EB7A58935BE5A9105C3164B47223A893DC58A24D65F074508A847E9323
2C034664E2C43DF499BE3810C38A4AFA2F2CCECB4F6E7B5B6B3B61D5858256AD
27D93969EECE381CB620CACD3A22A7881910197E470E7277AAFACB0BED1ADB86
28B9430467A2B760BE974AEB670A7EF503F6A429B2195F29379C4B88C50DF01F
591763F16FE1D3A88DE82AA89FB909880B99D9CA7FFAF13E7F2BD3FA0B0D465C
14BB5FCA67D1E215EAAE959E27A01DBA71BB6489BD4A90398240DF656D5E8EA1
872BC169F92A89067AEF2BFF09F1D5F611E8AC05D2A5D0599EF54054B02E8DD0
2AF97EC724BEA6F27CAB18306462FC72D92AC07B127AD2CDAF240C096EA124FD
A5B87D97FEE3A170D269AD6EADB93736F0919FB6A34D45A3CBC0646C7C6E8008
138851615960AC334A5E3CCB2F8DCA630494BBFED0BA2A391DDD972846D95B1A
BF923CC516EC029E3737F188D77F7EE8ABB9E3A838DF0A05417C570880C2E5A5
7DA124A15ED27DCC025700000D152E42DB1C1ED509438C43FB99D056CB17517D
F95D8D5E51D994BACE39AC902E2000C7C43B29B8EF5B8C6E1FB46E5C40B1D2D2
3D99FAE3018BBE0288B81EE909C1C6481A61401BD72C146D133AB3CBF4BC806A
41F7F1107728BF1E9A648CFF974273D18E6ED91B8637A7FE55DF98DCBE9015D4
A4D35B006CE68A0C382FC60563D081F110CBB181C03581AE7F5CFB6E2CC81455
97150B847315C78C3871F7DF0D5B8BBD40BB5AA8E31076149E59A402E89436B1
80E0AA2FD9ECA512FBA94D5552610BC305BD5820C991B6B5C2DB79A2F24EE683
C9EB1242BA411A3A0AB79B9C0734CEEE5D35F910A75A1ABE13802EBC5EF7908D
61DC74260707B3A973CC43AFC2BE532ED012C3EB58266CBEEBF4BC480B72EC09
A99E846384818A44E541E4E108DFE5E342E46BD0F0A7165BE3EA9261F7BAD646
B373701920ED850951D88D84788538D053AD12CB8CB171565D669B97B19C9807
118332CDDC0D88E7CC1CA9CD67F3BF4F3FC29F4482A21BBF80EC93F7FCFE82F4
DADC600746F71F33FA110A5364EF1F6F3A8F40FC28A8F80062CD6C9CA9EB4ACF
BCF103B5061001C95B734AD7A72ECB2295CF26A6CF081D9A942543FDE90924C9
DB3A5D667E0AF18066F4341B91660D4A48B117D5D4B19467429D32609EF1C4A4
7719B76787E4A2F56EEF9FB845A2F7E97795A15160D54F1AE4EB78C1A95CFEF5
D63253821A866F13CE96048BD0AFF831B4ABDAFDCBE21A288FE0742AC6A3429F
C1F0114DEAD6C66F4FBC0FDEEF00257025305004426EFCAA615992BF062FF54A
1B7E31792F05368499B19687E504C73E143B9672CE2B4E3FE94448F0A8E288A3
190A2F8C559D3DBFD4613BD0DB2A70E57CB73CEEE6A51B72B5252AA92DDB65A8
FC8069D4D1F6A44841B901C02800247BC21CF6647BAFD829244AF2BC290824B1
0C3779A1D301FF8312F52CD52BE66F7C48F312E43FBF677426C6D0EB7A093637
1F7864291A3B3F753DEF98426130A132BE5029AA2C17F569049E4A119632C476
83095845CE52815739F478ED2A59D9EE46F33362634F9758827B199FD07A2BA7
F3B50C42D174AE261DBE2EC7E045A26989E420C0C4B2323869724E5B9B138BD1
ECD3D5A132DCFB75BDBF836F04D305815128532889B531170C4B10ECD0C976C5
C57820ED677569C646EA23E316AEE1EC29BA8D4A7B94E934337ACE67CBE6928F
02D2A44F53D994C4322E4F598E8E3DA314C3781B6AD8A675B3985D96DD31C832
B487C229DACF326AD2F36FD2EB62CF4C2B70796A23BE194526228DDFFA015BFD
11310CB2B5A43C34CF9EF4889F681CC75B4B830993FB73790CF101C3BB9BFDF1
6CE4981F1641915FDA3D82FC347F0D24314DFB378B7F001843D008D536AEC671
46942DAFE5DDFAD97B5EE4B04E0B4798CF5134B80411532BF225203554760231
78043584B70DBD6FE1A99350025F131D697CC0ACDE8CCD15659B544BBB23F5EB
442BF47047FF186B26AE1DCC2AA5081B915E56CBFFB6FAD3E1E05C7DDA076F4D
EB286987618DE99114DF4D5E7C7227C76F79C4261DAC82AE92065F2FA5D455CB
60B0E1AD2F8A011E072D55C073C6294F2D41197981998324FE2647C4AC2955B7
719019C977EC66869BDD232350583EBAA36E82660BA7BE222FEC51C58D0E6FED
4282B8D87F1908F94927BFD060CC594E01D7232A2F3A5D633042FC09D14C99A6
9FCCAE3D3BAA6C3EFEBAACF76A15F66105F277E5B6745FF4A5CB0EE90FA42E15
29473934C12B31833685258242CB84997044CB1395A056C613A0F862FA731D18
CF33BBF61F01565E3C825B0D6147F8D54BB1847473B650C674E740A1D13FE576
14EFCABD2FF940209C939D8516182CA5F0966CCBF971FEDE25E116B955F1528E
E862FF17A34710083C6F7294C927613C4470B1F794D067F16FD0E651C72C2CC8
CA56302BF10D71954CD0A685B76DC472FDE853382AA3BA671B1E88EB0CE6376E
E46E7E218A3868A1F35192B6A29EBC2AAB197639CB4D8216D136C4B20B960655
74316F2EE82417F46E1E5EEA9BC538502D18ECA4CAE179C9CD6222EFAB75F965
00FEC0A6D60143CC3D55F1DF6AAF7C9D25D99E450A4B1C34CB4BF88039971CBF
0B811DA5D0453701393DA06218D7159784008721738B5C8C1DF1CFD26F72EFA2
46C5F438FA558BBEF71C2FE003573A03979A10FE8BD2360D93D102D0E6B37E7B
AC1AB2770B68030BA4F0E1319A864E119B5356CED765F73F6935478D5133B9E7
614FDBED2C0A1565B1A11ED423ED125E3A51070FF30756B565D986FE951954F0
1AC80A442A6A85E1184C2837691F38B0ED01DFD581E9F3F68DC6F44D503C2338
95B9C859283DBAAD27AD91C44C28F1D579989D8C3B5D6AD116408D52873A91A8
C256CC17087E43475627CE5C40467BC363EBAD0DE2514FB118396A7A9C3D50F4
5DA7B7AC84DD73566DDA5E76C3D5400158C27289E20C373A057CD51324DD7CCF
14E0EA440A74DBD51ABBEE7629C98D586F53C624FCDD9467958904FE0CDB65F5
2BA057443EC42BF59750C87FE4B0BDCC2A8FFDCA2EAEE85FDF40CA19B78DA9B4
0318C6045977231D86C8BEB851B96CD7BF88F9A0475F9FE3C31201F240B5ABA0
F455DBD4F8C7D91BE31B4ABBFF3D5179BA96D4C42B0063B3407F3CF897C932F8
CB4B418F5582332AFAAD3A3B0832C2CCD40CF07EA3AFB35F15AC46157BE30A84
5EBEBB3BA89C638A1DE7017B57D6E6728CB0B554648DE5126DFE050330418FA9
307FF2A6E168E4BC682C4552ABBBFADE42E309377B26CC9906B15D0D47122DFE
26A8DBCDD73750A5C1FF6B34CFC70D5BFC36DF24F2008D619DB75BBA85281C41
3245BAC931FC5063AB7EEC2FC100F126DBD977068AC186C94D6C84841E70814B
1258131811877B96009E065BF365311048C2274748358A86D49F4C14AC5096BC
97BBF995895999470A1CF7EDACBF098A54372FD87C81890EF1BC046B7B3D8889
2E04B807BC62ECCE310D8B7BE92FD439DE9ADB1786283C4EEC972AA3F26BE495
BF8CDA8EC4EA0DB349480E8EFB87400379BB84FED0BA2D44EC60FEB6206FCEDF
ED42B55590F3325DC1E5F9C834EBCE8613DE9300FB2099A0299A8F743D418E1D
967FA9EDEAD5214EBAB9C299FA31AFF925AB8F21B25AD1B103508BF135BD8E49
1D8F710C5F31260C5AD761E6DF3CFA193E2BB2178486925CDAB6942722DF2212
64996510C902C866404597950BAC0D203EB92A675FA67E1BB58F9EA8BE3C53BA
5C3565C2240486DA75E4C949DE048D1CEFBA01B5418FC765D3EA63E5EEB2380E
4AB9E6E655AFE35F74A8043A2240FCCFA6434B1639A763B4DEEE7EFB16C6516B
2FB989FFAAF363FBCD811050AD49BEC1A5CCE0C2A629B2195F29379C4B88C50D
F01F591763F16FE1D45B0E0BB80EA0AEE1C117EA3E79D5ECB5C4F6FC227AA0AE
9F56A4886DDF3A2EF39DE412F292588D074C0ADFDBB02A6B97F29081A7E0DFCE
422739C0C58B4ADD86BF533F21DA9CEAAA07D3BFCE05B6A2BD017FA8AB3942D6
C0D447F34E6F7F433285B53255A22EA2E4621836C082372430BE9F30BE03B0B8
FE5F8EA006251B9E33FFEBB1BDB2F7D00194520C58B60B6356B9795030499818
774D161D5EACAA88BAFEEB7E3C8132122B802045C00FA6B8618CF10AC01C286A
E887979C2FA424A13E91220E40F11D638B31559C8B61790857547C6FCBB35A79
610367CE42EE1CF118F21548D17AC5E87463E58BC4780AF14EBBF2B9EB90FB0B
EF17F7C10D58787200C749BA0DFA1F5940EE41C7BC5BE08D7A1E06DB3CAEBFC7
1039C0B59D1078164A089FC38C3033DCDA518AB8E4A92179B2E316C109297D4B
6632FF6D53076BCA820F31513270C66D023F34D3405307E815E95AEC89927DD9
7CF502E051A1FBF647917543D5331E935F94F2A58AA9394588881EF3502D209D
608A3D911E2C01E031D302E8061FD13C0751886DE501C9C15CEC31E595A1B827
67599AFA9009C828C52A756F293A9A9D3BB4A942CC07D024B75698D60FB1C802
27D9B633FD5C536A261B9CC6A56073F9B7838E062323522240A388179DE4D224
F19182BA7A3904C7E08495C350138EECD08C67F3631AB786187031F8CE09BE3C
A4554FAEA417E42BABE0C8DFA45ADE77FA6D67D51E3194BDA9CF6C6CAD374FBD
8DB58EF1E81CA38B3BDE9171BE3366206684D3DCBDCA5537ABC8C2B536D1E890
7FB40FE2F0786E979497CF2A3361B379302099EAE8944971173E8A833359F485
70AFB66310F41FD95821D6F93D0BE349117A823BD36306F6BEEDF2905FE1E074
D5A67FED4B8B1946C7CAEE37D8B823953AA248937D5C198D0E322F11492FE2D4
693CDDA5926F4D6643907C7A8CC815FE185C146C3B2548A3018AAC559F33FC92
78A54797CAB8E1FEBC2FF6ECCABC763FF7C995738B082B31C4B6000CE1B55B2F
5B035ED70817E8C999AEF82993A38784C0A2D646078C22F4E1DE97D35E3A9F12
C5C922E9EB48D10C411FF88FEDAD541EB1711A5F0493F2B71BCACF19151BD829
68B0B15A5FFB4EA63944C6C33736FAF2703DD9D5639E3D24E6C41BE139B76189
0E3FF013C7064299F61E9D66510A1A86F80719F3D684436EDE35AD63A7F6B950
2AC23422D42CA4924F5E285F62582DFB8EB77CE110A41FFF797EE8CB26F5F87D
22BC1766A64775822DFC6748FC5864733816E1508D5C8D60B37A148CE5D20591
E3DE9078DA819E0EB14E127B9077A75A8CABB6F9DB068ACB6507E89B97158EAD
F677C788A0FFC3EEB38AC8B9E777B75520F5B6993A26C20A2114E2BF2E1C37EE
3FF47EF9C0A1788B0A8CEEFF080E5D1129031466E747C3EF71B03BCCBF26142D
B2FA5FC7D31442097396CFFAF131BE9C77E57EFDAB7374603762EAAA72B0B40E
AF78AA5B4FFC51223EDBF645427399C7CF99FCAC032AE640C9212BD5E585FE02
F29A08B5EACDAB0EE66B29B2BDAD614BCA014CEE8360CD7FD187D37BA0ECC072
DC01D1E77675C23BFAE33894F91CBD0F266A64E2DA2CCA925A1F0B101CEA2675
9D32C793B8E0EB5F1373FC02DB71531C22473EBEFA7B6792B81A2075653FF934
CEDE8C4E43C470F8A203188104BFA6572D277F42AD8CA3BCC1F7BA145ED1A88E
C464DE1643ECBFE1CF7A129439DE216BB52FCA2EEE67D6B91B3DCCBF71D6220F
FE330D50BD6C9AB19D2824F59F0202027B1C21485F880314EA30C29F6DB7ADEE
0450E4C446AB05EEF670C724FF608ACD7BEEF2D1323B9C237CA75AB937CC187F
B151B3C3348EA03256C434D86F7A16A6E7897548951B1EC2C728047E0C591656
F3F129110E8E3CD68BD23EF80D75DDA0FB01581AEF878CD9AA68B4A92BA7CAF9
AB6E01A8629F62BE6E063FBA22ED5F79181FDA44B3A9650901C5B66324B8A030
7C2DE4416E51C9A60900448E47EBA25EFD2D5622ABF387C475516D3F8634155C
370450CC281B3E03E43FB82F8BB0AF4CCCA650EA7674FFD53A9377EBEFC6206D
372675CF43235722B50C788B935221C8242D03E3D85EBB3BE1A6D4EBF7A9FDE0
E88CB57E201F827CF41845BE0BF8AFAE8348F559D6AD28E520544FF3DAB0438C
65E5A1EB77AFE9274CC14073847AEDECB9592241DD136479A65905FD0062C91D
FF7349824BEB2FD439DE9ADB1786283C4EEC972AA3F26BE495BF87D4F45696C5
89BC74CA556158DA32EAD64629BDED783932FFB476B8B54F5F249AD4F43487F6
1D3712FACEC6187B393D8BF25A041447594422EE7133B35425BEB5C7864DABFA
40AF27A8ABB0CD62B2DD3E5BCC55A10C9DA39E99E2D992B894D6B5DDE0B48449
F2574B3A6445D5CF9762AC31B4E2486947D277AD58C47B897E305E04F863F86D
6C7ADF812AA47B8278309D9A9DAF81013AF578624D5ECFC7AE202B11ED183232
47C803217447BD861338D2E4EF0CD9E7638D441BD03B4BC203B6A598566B2D18
B85EB5B536297EF01CE44377A888C43338F02A56F9C3C06D89652C203BF5B479
D45437E5DF57206671B6655F60EE45900B48D114719BD5B3596D83C949CB111C
F2B8138EAB21356A5AD24A193B41929A7D789F44858553FFCF7C0D78627BE50B
A6C7BA3180E93439D0CD9346B6C0BC1CC82CF212DBD33F9B291A176BB2112B7F
F8F321B472CDF53E5153EBB9B20A69AF9C2CD7841F44B3A378919D97A242989D
AFE0E9CEA442C682BC435A4A81F18D6E9C3487E1210B201CC1341AD8CC0CE01C
20050C454E290DEF1193AAA614D2581E0CCC9F842CC1D72ABE460DF88C738EBD
F0415368FDF5F4A9F00549334F6241719682760C3D4E77591A520E2FE364BE68
36FC6AD9F1BE788FFC6C7550E4DDF013057C8FEEEE69FDA8E17FBAB04D98EE6F
78BC21FA06FF18B1C8D4B7DBFF037C5E851F0DDD92E48D6C035268F307618C0C
270112B7F0D9BC9956062E8D9074F7884376F0EFA16CDF541E881CFC7B78F492
B97D35753AB05C7B8BAA0DA8094BAAC36433CC0D1E692A10F24C93D7F9FC8D64
D951EAB018462BEBE17138AA07373412B44023BA4E20481EFE79C61DC5E6BD7A
0BA4E864DA31832CE3B41664887DCAF0CA56073465C30981210962424D9BC090
DA2B21F6C372C8A1AD023E80872307E08B2E69946CDDC265400AEFBDAB2B3676
4F168B760D8B40C86F0761ADB5A9B66313DC6C1AA2EE5AF2694F6F4C25EBF82A
A28E0096928556C4D51CB220ADCB140D952AC1AC71863C4D81BB409E22CD271B
FC889404A876C3A36C5D1FB34C22715A9FBA7772EA5F0A52F2E59B888A4FB4F0
DA38478CB9DC621871A254B52FE6C5C390566C23ABFAB9763A23BDA70BD7B3EC
CC2A88B057773FFB718AD1ABF225710A7C92DEF6DFF655DF7303EF84B7F57576
EB9C0E9EBE26BA68E7E51A0A3CE9C882BA0ED26255DE38CD8FEBE53F5B3C8AEE
AD41010F085067C86CF24EA758D57DAA70FF612F0671C768D97746D484937782
BBED964E959D603EF3ECCAB9C0260B79CEF543D62192EC8C4766216E038AB621
66CBD52C8F379596487F57C8AD12C8885B4B6660C35DF34D2875D4E6E83E7854
E73F44EDBADA936AAF646FFED24808E85FAFD0E15FB5ED8EAE1CC2C70CE502D1
6A143FC283D7102EE1EF1ADE6EE37F564A56087DC4CFFAC19A21055DF5414557
996E07FF530B30F15A5C91B053C5BF16704D292970DE882E674D2C6744A1793B
C26BE0CEB128A2971BAF6054D38BA09873CC7D4D1658B46F93BAAAD915F5F29A
B605C1E09742946817B23461DA90F91E923D1C3230ADF6C6570305EE38F262AC
0130117A623C5E1848AB234612FDC5CA3B782A0EEDCA800923461E0FC2B7C00C
CA314928780772064C176BBB96AB8964DD488B22B34774E715DB75A5E43BAF7D
6D9697DEA48B59D371113079ECC7D1C92920E298565C72526BC9B04EE9FC9E6C
6FAF8B4BB8402F1237A1BB0A596E546F0221B7DB82DC3A0F128215052AE95278
7CCC4C06359FB4799EF0B9F06940995772D6BD6597275D4531A66DD9DEBFCA16
3C19FCD64C76560A94F9AF673DE529EF5E26334893DF31ACBA9948AC8713EF65
8C5D725004C915B5A5C3BA99CFE617259AF5BD508A5CA935A36C5D25FE6FACB8
98D648EF8D2D4339EF9880EE463774DEDFC3928949F19EEE06C1A0E5BE179E39
3436CA38C565A40EA84BFCB92557F30779AB4F3DA8D5498D36B337C6925E0CB5
BD963CB791E28CB54B37655A7180751FABB0C767D7D6063025F9C6C9B2011124
93DA0F28B9DF4DE8696F9C9936BBDF91868761CAF9768240E03B552E6ECBBB6A
8A97F0EDFE5EA0C2D6790DAE30ECDE52E48A8F35207EB0F21F5EAD6BEE5CE31C
2235E9897466EC68CEE398B0C99F18C41A708DFEFDFE8A45889AFA731461C074
60ECCF0CBBBC51B858D1E914FF9ADD9B3C8745E15C012902696AFD064FA622C3
C86B1BB2D743E29506A6B2A612239DF389F7697E75A274E3990DF25D88067CCE
CFDBFE75F52D2032C86F467DDF328FE1C6925884EDD2049ADC2E45DD3BF0F2D9
46DB0FE6EC50B444E7BE8F8EEAA651DCCEC032C7FCD8DAE337CEDFE0370280ED
092373B09CB3277CC99D08300251E472B08E45E59E72D9176DADB1309B179EBC
64E36BC3E39A3183D0C9E9CD6EE5E14AA63956D18B97D41349585C7A9312E9AD
C1806DDB553DA3EAD292FD945578D84949306E3B4B92B0E482223E01DFF30102
687FFF91ECD5088FD2F1D5F0EC2E16A35AFA6AA49C28E7D4A55328F11A17A8C3
79325531E13B795AA4363414C3BDEB6D268202542D0921143CC3675F464291FA
5B4115BF04A721B6B0C7DBE12AD235CF4B6F44EB32765F986C6D48BEDD6E83D7
1702F81B03CAE8C1661ACA1EA73C0CA9EF077E4C529DF67808DB27AA4A3F79EB
0E438D907CFE113BC54E6060AF0B08EC7293818A09CA74B4B393117DC4B73FA7
190DFFC8E260F0FDB0599B67031E2A827C4234E69FC53EEA74BA514A6EE6685B
E8B214DC913487B5463D5E81A9EC3A7D5F3595F1EFA8912A5ED1744D95E2567C
B1C2EFFA64B2ECAD898A9121E02F330AAB6481AE2919A38D19CB084ABA99F090
0A6EDC7DB84DEB6DA73092F21F04F718009DBA58BF426C4DA8C5B997A491F8A7
91216C6FA9A62D337FCD128A18A354641A3B681657DABB52BB0DF3DBB8875FF4
1E06B73D6B92C7CEAB400829E6F649EABAF8BAFA31DA0FF3BCA08BE86A783BD5
E0935B9AE0C20F25A9379E3924A31EA86FA5CB543D9F6B89968B1A85A37F0332
A65BDA075009E520AF0CB187814BA35F623BFBA0226D4118EDCB23BFE102A471
605524FF4C61702A5AE32D07C20C474842A18A7EBFBFB7FDEF3D3E5E253C569A
12CB71FCBF7F53F9898AC9B47C7EE1DEE82169AEAA49DC26AE5708853B9CC5C6
B1A91BA6FE1FC601D9AB46967C1AFD8C6089C8B21F1E43BAD08CC0B325BA32CF
C181C3C1461479D489B8F6CEABBD6962F9D2DA9E68A456DCE052D29A7B5FC5F1
741A5546D8E1880561D166C5D10185CDD2C3C8C4A6A8D661A6CC8A1F07F8F4CD
9BDE31C9ABE211A057549489EB815FBDE1DC64691C3E5A6DD4B4406FB4F4C2EB
EAE439306822F44A5CACB22DCA7BF89D34A511312DB573060A7E73001ABA76E3
95D789B1987135A51399B09426778C3D7509F65BB0335F34E652C8885D38169D
89743E3B1E049606B2DA08058CF8BF3BC50F1E34C7AD55C2E5F6F2527577D8A7
806626F3608C27F7CC3E4063A03B7292AB84A23A48FB199C447479581FC4FDB1
24B11B6583FB584B12D02747FD308450AE73B6115C106422D64CC276D756EC57
F8AF3A14692227829F5CB88CAC235438113D07F8F4ED1CDCA1826039814B1A71
00C2284E074F5380411428C608A4176DBEAE56EA0D2B9887C6B51B8259C22C4B
BEC1933DC2EE59728D8BC6C36E34C5C39B65E9F05643AC1F12ED6D2EBB83572E
83EC8D1BD1053C2B9B139786738DA89B6E813D9223A95FEC0D35641FEE00260B
500BBA9402F85E8FBD915B7BFDC6034D34867EAA26B7D6E79CDDD469BCF5E7D9
2A018C076EBF2A0EDF69647EFC3AB170EC73A702D6D29A3BE59B9E27EAAE2E1F
EE1CBA5F7B9A27C72D56F18733FA1364B20CEE5DE5A5F38FACE7171A84A6FC86
4A32B7A33105DFC52D84BEEAF652A4077203134B55E2930F09CB1EF829E1F901
129D38A656B9CA92A64F1C3FE99DB9F02A2B815B0FE4C7EF58153F3469BB534A
CFCEA85D62873AF28EFEC19BD1C68E9418D3EED322AA6A95E5297D0A72C927A2
2410283E3FFF8587B99F2EBDFC630BCF07816811EFD13757418FC4589D53D1FD
B86FD62E211FD70D462E2DE9663CBE4E7AF5D3EA65C1DCE899FBC366C0C1F4D9
44F811571A62375196357193569516DA8A59F5BEDDD9296863F46279D85E4AE2
BFD687F8117DA5E047FF65201C667912F605356708C389D5A658E92E7820F7FA
342F19169E65C09705E5A4205FDE40B027E8F0881F96A62F071202754B72759A
FABD23DFBB6EAA8025431E451FC91134A081039F912F14B7EB8680748DD21E69
D99BD0FC2DB272CFEDC17E5BCDC7F2A7EC35525F1F6073E77A7EA791A503CDE2
66C99B2C709AD0D3515147C816CD35272A16819160FDF002B6F817AE83088E07
EA6790A9BF0B25A0D2E9159C1D1E2C62A7F11D62DE66D8B954458AD78A3F9577
879C528DC5AC128165A09E7B1094F7F174B453019BE34A1E8BEAE004282AF9FC
8A56CF7F52FAA1056B66EC8D738D2CF9777D4C4625E72549B331F99B219181B9
FC346A50372C582171A4AF21CEED3C3DC4BDCBECB6FE7AED268986B789FF758D
29DA2A03176C99291D425B9F7B20FF4C2C324A8AB1A87E7C92105FC83184494E
1EB909124379E63D9D00667C4D200E9E7D3869B4A9595F50F8434FE56F010374
6A2808E070406EC2F206F9AE791EFD7E015A9FD73403C3D60F17DA0CFE81D326
026931B09CD9F5C6D97C995FC71DEB9203837A873E39F8B9D30B9FCF3DB9D0A7
0B7E78D8E3B4966BC90B5D08ED4E29D7DF6D4D9072461F746CC81E5043A04BE4
1F18B2CD19AAC871DF4CCABC332ED1A26FF29F01A195663FFB3A12350EFF1802
F7902BA9EFDB5AA584B6DDFB19C76F04830C97283D3ABA9773DACAA524B17B5D
76CFA114FFFA612D040236EC9B69341CA7D9E54976270A5A2172E47F02826CA3
BA645D2A0B468F7926200D0CD10303D9780BAC34C9E9D272BED50269A5CEDD1B
3EB3B01A1E7820AB58B14A8C75B1EB597E0C16BBDCC57A0C5A652ECB03E1B8B3
7C4B7F1D0204158D6707DAFB474B1044B166C62E63CAB2C5248F1B5C28FAC33B
B8320B8D39695D096825DBD11483A023C049F778514357E82EC809E055FEC457
6DD0D88344FAC4E34068475EF1CE4CEDF1C27FA95EDEB3CDE86475D6FDDF2DCD
175942E210357AE13607CC6665083092908A392C7773AD0C84AE6D189ABE85EE
1068367156D306932B2498566D619375ED92FA687FB6CC1694548E1317DF6A2A
25F7F00EAD80BEBA175470843F85B4ADCF52AFB4536AFC7CFA67015952F4208F
E5716B7607510914BB07AF5848FDE8CCFA3D58395C0ADA5647E134A0736C4BBD
B95C957C170CE6B6157739613210578365446976B14914E36F0148ED3AFD1489
BE0EDD15F266D65CF40F49EDD5F0628C95961A8F32361279F05A83875AFC6B26
D51A3B0CA6FB879BF68D37620C1F0EDB8D4EFDBF8D33481C97E862757999F19F
D38AD01D28D346F179A129D73ED7BCFA5825B5B5B1803332E19DBF11EB726EE4
B1733FCD50FD46178004C1FF0F2606AE7022A330AEEA29C5526F99362C7693B0
1E7ECF132C62BDF74FF88CBE721FFCF844CD634677ECF986BF0F0A8B9003B60D
2F4B2CE9702D46F1E2540AF32E036D91B34C25C85EC5F3E3599F300BF86D11FD
96EC2A1663985CD67DB51147A71F9D2E8CF95E179B0DB54301176D48661DB17D
104C4E4B968EBD436B0D4B6CF9B669F9A7F62612578C6FEF928D7AC66A68EFBD
CFBC4F218191644B651EEE82BE5006A9882FBB41BAE0492453CCA4D8F337E78B
F1AE94301E1E141A7A0837708522C0E823F1813D566D7267410151BAD34089DB
8C63B91A7D5EFE48D47293CCAF8B1C9CFDBA8E2C1B10B27B393B19BD1522EB9F
F705577936B6B59E943262F2E6EFB223B25C16F0A20E27F57F5E9F4696787665
56ACA88EDAA1C1AE97E95FF9D6AC68379FDB724D8EB849189DD4D793A94EFC1C
50B811EAEB33FE8340AA9A61DED2E1DE62B8ECE240DBD1DC8BE385DE1239CDB2
4429E459A0E4F7E359E0C58EA928A31F2D803F35D54F9EE0AB443A4F47906A71
37D3243635BA0FFBC7A8048E0E4CBC31AB37DC39F71D10D3FD2014B5D514E240
4A798E91328CC44716A664BEFD551C0C9739B1BB0A27112054E2AE3F87D2C71D
DB21EED43A3CCD973B1F82C5DF338587F60BC69A48CBB93C98E04E0892E82CC7
F091E192304D8BE290A546E97A84A025880635EFC8C41C2EBB71F33879D310C2
E50A296290CC56A3DBEACE4D999517A3AF0F51074A37CF90BDC4B181A0CC52B7
E5D6252058AC6A6269CB2BE26C35016C946182491DB55F1563FBE7041543F055
52F50AB2051C5C62CA13B65EF9EF7BC53AA53AC83A730D8E84D96C58A8FA419F
310A36F65BDB6C4B5F87F25A4B7DBE1AC033124EEB917618196D093FCE4AF2C4
8FD6F9F5A089BD7AC2AD0076FC00536C0042F38563DB941345D30FD3AB1212BA
3A9CF6B7E3520EC4A892B769A302EB317CAD778BCC11667A590DF7E3EA7EAB7C
625F2165FD8AD2C7F470E48D216256B057ED2C599B423AC51B24F2313F3398B4
923816841083D2EAE1BED5DC111286EF517780172D12AE96F5D55D2832897033
3D68C7090E454AF9E45392F1B4CA74A535EA8FB20939EFAC81F69FEC9D92AEF9
53CD07A63E3612066F741D1858EF35C722DEA4F0B30901535E7610075D488893
EA46C5C9397942013B540DD291372C1B05B3B437D75FB099836FE30BDE75442B
231546B2644280BA61AA203E215E10BD1697B62E199B50193DDCA689F1B6DEB2
5927B9001E6ADAAB86BA6B2B4E28F3C65566E38F66E3115F1CE780310E83A90F
29E6D56D9F0D1201773B4CAA4C9145042A3AAC758995A7355F79D06964067A70
A369C60F7E720947950F2AFECF78C15AF1FB203F7E67C32D51276F4BB7E88D9B
2556169FE98FF9B3CFDF3E1C180EB43F0E12C2EE8285E41F5E39371EE40A46E2
31BDA4CBCC9086AB4D09E359B41CF74AED5B75C01085EEE0F23900B6DD28F30D
56D1DE308C49927AE04C0CA35D5BC00CBBC62A28EA9AE7ACECFFFB3A226AE4E2
51F1F8E2715F61423DD2C022E5141779DD5793EF2D2F1DA1B289CD0BFB75B710
119768A161F8C276614552655D1033B7741C747A6B5D294CF4D47AC12F1D9282
D2DE0F808E96612F39ECCC768AB03B0EEB8067F8B3A8D2C6AC693AB589C7C125
6916C49537FFC33E9E616DDC025B272C5ED5A5AA4A5EF425A6A412DBD0F20CDB
4D1DA9E54AAA3E888C4C0974C5EF103E8B871C72619E1925054A3840B8D74712
670E9B0A3DF60AF84E3C62A70A4048C94A82BCCBDADB1A8692BDA9FFD15ADB5E
0F55D1FF608D295018DA5D37AB1BA26CAD646B0E815F744EB687302A9285E7BF
C5DD939B6352CE8710E4F3D6216529956520012FF6DC6C558739DDEBBBFF6170
BACE74C20234F2F5229ADABAFBD771DC292FCDA019EC65DFBCE76C4E92590027
8C6C485D0A6DA4A267B12A56BC42393BD44E1BB49B24AB9157BBA1DA686C5C1F
6C0F8DFF469123F0B438CFD4D30AB788008248EDCA7D6A03A858ECC4FB9FE245
94371E68F0303ED45E236B2E68194953C2999739A4549546C68F7EB3AD92A8E3
B416F60B902F48979F8C3C01E7D208440F3138251647F3EFF443E84F3800738F
1FD5DF0C1062EC02D3FB2DC00EFB14E74DEC35AEB1B7C0D54F378528135CF19B
956734A9805435FF9B6454F7D3D16AB9E1B59954F3CE341548A348C48D19182D
79249080AD244A961CCBDD2937B00A9EFAC8828C25C7DD412DB8410C0151D97D
9F9D8268BA4B23707BE8C925BE37F7B4C8E511C95D4B65363655DEBAB6116D53
BF50D681063EA6A439F193E4F6CCF3BF3075F4BAC0137BFE9F3A9FD49770A678
6CD5B720CA2B1BB6C11FCCB9708565DDE5047FF8489BDE53DB27FCC3A68CABE3
508F62EE68DFDA4BDE678A10433A58C550DBEB37050E53DD4E6AA8EE1868EC97
A9100D21331F5F77CFA52B22A941B3A6E2A2FC1BFF764DE0045F203D7D7D0326
90907A7C3E858F279C4F87B0EF573AFFAD674005611A86696A7A3DC4DBE0BAE6
5DA45028C30503C0DD0D039E3340CCF44143E1EC624937DA0405157567783C96
1E27EB92E71FE01F6E7DEED6A5943EE4AC259032EBC8D03218C7F5A3EF102367
293B7FFC72B6D9F05183B3F20D15C5FC1822BFED3F154290E260A08980D330D8
5D3CEF127DB53383AA2FFAC31D3058E6044EAFD6C427E38E430E37B4681B2FFF
55821DA4B42857AD1008814B0B7E8F600CA820DF8B4BAFE515BCC974BCC28E03
026BE1DACC8E1D5988003939B47C7F2BA1E9C7AA614BB95F84D290F194336A9B
C8BF850FE98F950A83D03203205E20DCD7AEC3F41D89B78CC92B7F4F363D466F
23463869E3095E39958E1EC99DD11820D375EB9335D7CB6267EF13E1CFCF2A34
86F91D980CC66EAFB9E1E29EFBD9F0198C07B86D8953C1C2E9F820D2B1C9B159
8BAEF7CE0226917D674ED0E320BE31F7E98BA78C2B52607F5AD63067BF47432A
FB3495EDDE2F6F2B8DBE85E4FFBD1208E5F29EE4BC9F71D362A66169320B1DD7
D20FF3422A07AAE009E0FE679390FACA8819B884CC1C2DD52F00DD8DE869A1E3
C173E18CFA543D2364737FB4FECD4A17063BEC1E0A2162924AC2337BEB55ADB1
106E0FF4863C43F7B4CC4F0F47AEB22F4E871755911D8FAEA73E35EB7835FA1C
68B856F7BFF995DC20E067EE6B3F7DFE0ABCEA24D63DBCE7653623993836A94A
D89F1C514097A618ABF61BAFE13738D1722B2CDA161EE42013AC72779B08D33B
FD23E448F34690DDAB2D06EDBC676F7411BC31B97A5FFF84A6E42F44E9F5142F
182D1D02504BED42472B74E8F6E1B541E63C52A72EF30480BD30F59B2EBA3B7C
FAA89CE01362BE0D4E4B52D4AF3FE8E4A61F72B5E30860BF17AA25DFF3042014
C90A648BE27567310050AA78816A6C695863D4905D4E668E91418FBF2D493AF9
F83295BD847648CAB6E65DE6827A0ECC31B8BD2417F9EEA3F1B13BEFC1BA6EE5
E770D91AA68F3D8E6D4201D706D2A176118B4A8090483E105209B766D53A10FA
663E1F749408649F305FB5F045225C94BB00CA310B567804F8B0FA03C8150F7D
4E9E31D9909A1BE97F1C2552B4285EB47CE6062AD03EC96E4A47FED33FE4A5F1
41846D550220A2F6C4CD8E8ECEDAC09DB111F037C462D94D7EE9B48621E80541
95851A0A7FAB1BB9286229CC3069BE68899BA9DEA1A593F8E07F69906E7ECCCA
4B02E89E47DE705EFA5695AA1DCF6B0E4DCB2DE2BDBF0495BD0ED7DD0EA7E3E5
1C961CF0406493C97CDCDDA1FFB9497706044BD057C2F0C9E0B918F2C930241C
04D300EB044356F9276A32717D456F357A4BECA4C186EC7E71D38C71619D2649
B5AEECE6001FF06D696256C396AC7C316EC4F8B5EA3FBBBB407E0ACC56E4EB5C
A1F3D3EE2B04DC4CBE12FC99DA94FB2648B841A64803FA06B7065EFA3285D927
651C376B59B33F6482164AD5C18FEE8453579EE23F1785112E31C6DFD8E9EB89
F45B585C4770C89899376CBE4C3D95D4AFB522477E057F08A7D3282D0003D149
F5A1DDC4B45A789DAED77EEDEA90D5B47B51E46E9D7222EC41C6440D6FBBC975
5653E43DBBDA5CC4582CC32378F8735486A45A6FAA91966B4331FEC05449AD7D
0EFD880F2C87E3BEC4ECFEB38C54546904DDA3251F4E73F1620840A50217A861
EE00160C5E7BC06AA5D1332C771D930894AF027F02990C070CE9FDCE51B2C79A
29F57E314F69DAA10D9AC7B96C817AD352B5C4397872ED1E0AF0A0CEA9E7A9E8
D9AFFE49AFD568F517AAE9AA5E1BE66F4E811C58BD3A3C1B47EA135377F86ECC
12B42AB034C92EA2EF84CE95E719106E59C421D7534E48C018EF87486FBA5562
85CDF549243B2365325A3A4F028F88CB295A73BCEA52B0C480AA4A7B456EED70
3C27AECEDCFF8A488F44430383881E5ED0F7F184DBAA9A394D0E0813896FE455
EFDABF1C2DC348AC0AE6777F679E2F62A0A3E9A8A85FF382082B46F42D4E1672
B2076DD7714172F78AB6BAD4D1AE02E5474D3559A88CC1D71DD4372EE9DBDCB1
FC4382E4302DB3EDE6A964FBB99F8AF170A5FD7DC715DCEE423436CD23775C4D
332125E7560EE051264415330D153E78C8A0D18742F50C722BC7B04C8D4CA414
710AE128438AFFB0D852A933DF4B672F4AE01822A91011CC74FA4FEB047C4C38
BE17A0DF30ECA0B7A922CE686A41C41A59635E41F205738A68D6A1959288FFB1
32E1B1A3979D582ECC1519AE9ADF310873A7AB10FB68C6C9804946FDADD0C775
79B66FA87003711AC1FEC98D24ADD5D040A1B325E948E6D7B435E67F69AD6794
433A6A50EAEB261E696CD413485DF93CADCED318B5FA4219894446D5E3FBE028
D514C87A680A7A532F0E53AD0E8F534B0F36E5B0018C20AB43FB4C215C95659D
D7D7207A98EDEE27653324215D2855B6955770F81C522441AA686405FBEDB4CA
29BC51FB2BC0C62CE1B3FEE159A7BD1A26DF8C89D9D97E6C129E8DEA517A1935
BAAFC740CA3BAA14A2A6ABBCE5B9352F111F3A302DEB9B8348691532437A3658
587DC9AFB1B259A7B19DC09F1B11167E7AB4A2C62B23E03259AD33593BFD7389
91C6FEF6FCE4C848E41EFDCB5AA1EE1DB0E3AC051E6654ECBAA781BA7C365ED9
ED2AC7FA6B671EF58A2CA29BED473B7FF71C9EE4FD24E8529619DB28AA19A9F7
ED44C7E47297A730643098094075ED2215D60DF7A6CDA125975275E715426E4F
01CB1E5F4CC8301E21825410E2B79BD3AA2790C44ACFD09D2F9DB69CBA2341C2
7F62B3115DD2B82641C7D4A2FDD0DDF0A49EBA55FCB561998935167338ABDBF7
E8DDAFFFC3D0003ED03C0BBB235E8499D8A4C847189A9DBD4C2AFF9649145BFB
15DF1F827CF41845BE0BF8AFAE8348F559D6AD28E783423C25F8D3E3D79B6AC7
1A3913971C253B5A055B911FEAD61B1D07F60234951FF68AC24D6ADFE3D9C2D6
FBCF525C5D95792DA6BF1C6E0DAB55FCFE8EB2D6CF6BB80421E5DA8ABA286865
8526B74727FCB164F21405F98BAABD8F081E9E8D428C91DE71FD576EB3785395
6681318AD81FF78077E0118B0B9702ACED9DB6F1156B5FE389EBF01F39FDFB1A
509696E0B6120F31B270AC3872FF0571205F719EB9FED0372D8DF6347D6C2035
D0033980C05BB71E8431E347AD04A68708BD021E60E011773301CA0477E524FB
C760A5E32C937F5E3CB308188BDFDA900480BD689CA4F326D85EEE2E3F8B537A
08E6EE8D270015A2C4DC01CB803F2D05C45153263938B07D116744856E689A47
9CB3A8BC081F33CB010E523E0A10586DCEE2DAA656D15984FA5449C175E21F2A
240C06340B99BBA57D2B2073D1DE4A57DE917D2FE41273FB635CB7271D8E6E5A
37EFF572CA73E4E558E2B016B13DD10CA06A9190F9D55B123B7FBD24DFE37E30
6818D06A0B4EF2F9A8ADD553D80244BC4D6F73FDE34846245FB19B5036E5A40B
A2B8577D3098BCE77E3ACAAC49AE0FFF2957BA9610A874844FD59D491DAAD25C
E8A47AED7DFF73B314E40003C5962ACECD068ABA3B0FEE759D82A5542CFC4A77
2D88E2D78ABC9F8E875DB7725A36C427C50C33943B6F21D7E354B758A3ED81F5
06337B1557E44C36771D1B98B28DBB1B2EBE44E19FA0FB17A49D37AEB700DE11
773B6432097E8B431ED8640CB015F6CD3E4A2D87D6BEE02E18B9CC597E3DB99C
7D38F60DF05A3E1811E198D306F31DFD2FBD8999EC28EBE10442617829C58627
F62C3D65846C29F5FDDB145500D77A97A8BF392606010F944ABA543918837CDC
7A964E28F583EEF904EB6959B1D3A3976651C3D53127434DAB18D387013C388D
3840182F35ECB41E53F6239617DD0D36AD7CD6CB000018ACED61872E8BE6E3F2
FE99AD7ADAD0922C1BEAAAD9B337968A02FCA014DC29D09E82012484AF7649C3
FA87A3AE44D93FB7A0D6A0C04E0013A3F657C407EE3E04D31D176D7E47789DC1
0C2D002467C090EDAA4C18613F8F91E616AB868D005A270A3871B713A4C153A3
2389F0345DE59440BEA47C001F3381D8039D07BDF69F6AB567ED977E8B5AD928
F44C0C004115AB6ACFF86C5B057FBA8A473CF7B639728B2D6423E136DD02236D
F72F19F149FC00B2DDA569C6CB8C239B60BE3D172E2F03F5649A65663454A8FA
ACC1807E575EA8E8446A880E4E1263408B0DE3C9364C6FD78068A7FD1DE27FC0
7620C1DC2380054303FBDFE8F33505AE7C55ADEB92554FB42621F061E55CB649
3AE1DDD067F152B486C16FE7B82DC191365103F27EC65E777C4FCFE93512716F
15A036FA09D383749CE7FB7E4F833192525F8D0116F4511A411C06A05C51319B
0B1F5603D01750BC683CDB379E8C374FA53EEFAD183275E0BC3537CEB919F48A
51B061B72719C1AD14481B2B5150C63198D61A3611651EDF28BC4240CDC4A307
90A98F2ED8F648FE2285E3198F4719D427D5DC734AE3AC5EEE66D8A844273423
85DA617868348DB64424ADCC33E9565DE8528FD3BC804279D810139CA93C9B8C
01EDEEE3271B46771A3374FD4E574C2E7C3FF2C0B823742B9547BA97B2B014E2
8D06053F491044A2EE08946129664626F0AF9F7E546F6AFE62DD5E8BB8AF17F8
8A4B57DC39AF18BF2D4FB1709E1B050AAC44134BA760C94AA948FB1696F98AD1
B410B9B180DC2074E44E3DE639D45886741463E26AD685C330FF9B4020A256C3
147C5B73E8F285A967624AB240C4186FB5E4720060CBBF3B0A3AF6193C303919
6238404C70ADF03B54407D48B14D9B4238067509B89C71E9B881551E150BAE5E
AA9AD2C25080169F7301CF3C4BBFF09A901AFEC0709D6C3DEBC91430A6DCB164
2F75E025ED7EDA420A3AC189CA35BC3D0972EEC0BAA7EBC8A05043E18E63517F
B66E333F2C74F7413A88828AC205C816FB7FED803064219D4267CD8AC6BE2133
004BB7CCB2A35D5C9B4D8E318D1623B71AEA60FF8A176A0D72ADC1049FE87905
407F0165A83CECBD7C3784383C0BB1F3FAFEE9DED80C0842C8898B240D60B870
3754A099D21B3328368B0F45687480ABE94FC10E58E85D3F17430C320B0D09CC
0C09C86486F508AE91D36AB08E7214960AC4ED73C6B5C252C70009F7197EEF37
0EFC7B4B855228B62E6FD05DFC8AF9FAFF60225CC50E503D2905CFFAE9EAF0B8
67D780E94CA387F4ECE353A14E82FF7D86251B59C66F7F40DB00FE7A2187D256
2E08382F94973EE4F7F6CB9520075921A324AF9C66AE82CB8620D23EE3FB0891
33D6E515273DBE4B8238DE0E763ABE4E4E278A576572400ED4D211173A079443
53796D86AA5E2EBE64E9F096EA448EEEC36752787F85EB045535E44A641BA459
EC1F94D869B259DD936CA24930E7085F7B9D4A95F958F9C71DCA9348746900FE
665375E9C805A494EAA015AE8E74239906528C72DA8431BA410DE548B62768F4
3BEC95E1EA1AEC746CA2670A1AB63F6EEF2B51E681FADB56999D5E9FD505CB2D
368D0F4BCC5D71D81727D97498FC29FD565D68BF89BD37A2E4A0B6BE71A47B68
657170BF1A66D0126713294E13C1A4571B8A9E6D98EE599891CECD10A54A3281
F18C9543719F90217B8FADECBC6F3632A4A77CEC2EA60645ED4604487008618C
6D25A98B64FD45A16A26F5B8E1ABE5009BD17D8A90C4108819ECBC2794DD9D32
CF139FDAEBF847CED7829DDF6E7879DA01A0822B5B6BC6BC5BFF4FA2D0B91DF8
6C4F13C9E8A202B11F6CFCE4C32DF0656E3D825A60E7AE908D2D4339EF9A7954
59F2054FAD9A3878CFF50032C9215ABB00DB89550CECCFE7DA6DEB238A87FDC4
1A647D79A3E56C4B5AB7619BAC88474448B26091BF6EAB240A5A85971093E114
AAB9FEA818A9334BA7F82041E7517A3B6FCD69192ABA21DCADA0D9E78E54D266
7ADE6068986D1E79CC4B29252DC798648560D837FB67D3FBCA7A93A80A324815
24AA0EEBB98A6869F882BDCD3130822B4C9F05C103D6A4AEFF1EAFE270E9035F
12399AE9E99E066688884DBEA2F20DB1407E9C9CAA758C3C211F663C3DAD02F2
E55D298280628423FE23278F98D87173A9E686234B6E8B6A41A2008DB4A5B330
1CA9B795626F48588DD09D1AAF7BD6756F69AC7302F6B526482E4C9257CDC556
314D5C972D303C96B8A08F9A9481A3911521513AF56C39F7BBBCD07184DA62AB
1C2046438A99F43D5CAB2219BF0F5AAB4267EB6D070EE774F3D392CD19EB683C
95C33EE383A6E9C1A8D63DB038AEBAF237BE13275482B0C4417204F047097E04
2BA019EB049176BCE99708E6AEA2DAA1AFD2339366D0828E820061859BBD7723
947A571001F21F513314B4EDAFBAA48EE80F2966357CBBEB0FE849E292D6FACD
30C2B77B8D1B1F403A1C366AB5E4C086782916D3A4B02817E1581E488A004961
B9D7773B59651C7387DDE6F1AB98E7230F6B7D0291D44E8078E1176ECFF709DD
6ED93D942CF65E691018CFF8D23E9FAA4A9BF079A64E39E02C98CFBED9D1B87A
8DC71DD685A45537EABD8B2A042FABFF483882103582209E9DB25C13C6E9C0EC
C6F912AFBFBAF1389BAE45B2989DA00456D218630796D4D43D238D59123F59A4
689F02B48F1A951EF30D725EB5F1A1B135B5E5097E60AFDF729A535E0463B7A9
3C5A22632DD205AF0786A79AFDDB23227CCD9866CC3E59AC014D4FB55480AE37
1254368CDDB5880CBEB4E8EEF44A34F5404C7F799FC22BD8197B11E1B0AAD725
689792475E20A46B230F55327E35FC4BACFAAF15F05ADADC2B388DDAF66FD4ED
E710B8E01C10FDC551ACB0F710109CF830861756F6EF6AA7804B492DDA742E27
760152BE2C86DD8CAA9E18C093BDD727BE5CA54B9CCF4A819DB8C5D400FAC327
5DE7A1CB64B5D1B5FA98029D78BA025AE1633C8085ECF572713053E922283847
29609264077EABCD7390AFEB6F7F9E63B67CAA86A37E9103784D330C0F2C86E9
1CFA91B0BB51FF9580F378E3BF2E5FB2F729D33E4116A07568EADD071850FBB8
8222EBF0B9E103C44D6886ABEF80DED110C70F6F9A899A190D8DC2B972371891
201AFFD3004A0CF285B3BEDF0AD31AD80F1AB9DB0AAD09C439797D92E1120186
B88DC96CED6B11D989F137F5D721EBE79A621FF37033CA412EE05A459BC81F00
5C2E1B7E7E577631C7BFED397F59BEB40AF34E8D22C8E12F61C371D29A74A310
287E56CD446FA24B1DEB0FC4198C7AE63EE63D34A6E5E6483031F98EF3E46553
44BFB889F83B3CAD005996A6309A63BEBA0FE32D755C952DAEA7DF82C1709D96
CD3D475CB31F758C0B8E416975A03FA57080AE5C40688DCAF754A276F0A1DE4C
A6A0EBD61A9C9A71CD02986992B15F4CAD81E8CD4B2A1A43D36EA65B0C82EFC5
7F42E20CC880EB0682B9BB4148467B76197BD3E2B31056F217B2D2577894699D
623A5B737CE5AB5C71E34FA6D58056F128A7C92B3EC6DA517E09AD348B74E553
5A3B9031B0CD6163719C3A8D6C39E9D913191C016C41C386B31888C6861BE650
1541E8D60284ED1CEBB75BD566104E12AFBE22072AED3EE1FB4E3367DE4D1072
D9AFCCF442DA7184FA4656976B7FF26205BF61B3E6373D0BBFAA072F4BEAA261
0EFFD7A796996D5BF8B24AF3824894D769372E2A5BE66DEF1616EF0732CA90E0
4B9F04729F5926C8ECC327CD61048C91E1275B828E8AEEE398C8B7069A4E7384
1EFE11F01B9F8137E262F48BF900E9A5C83F6ECE77593BBABC8E1328AB11B4B2
E3F7FD996AC53D92A333F048D8A8404282D7AF68272DAFC863E1588088E43661
29252250C36CAB111123EDC93CB7D22D504C13E310B0CF9D5BEE01681E66D047
192E782E7BD1017E91F32585469293F55F3E6B184E1293F5E2FC971BDCD63C3A
B7F0D8C5B29F7170B36E5DB668DA33C6205DE87280206EBDF002FDE1747BB0C4
AB363239006A57AB18A25A1DB059E6D1F946A8D7B67621901F08053758271CCE
336F905CB39265A39D56270FBBCD3307AE22EB2B96FC87CBB42226A67831A189
D49D50AF4116C0E245231CD2A9231AADE364278019FC952FF8D47DC82CCC73F8
7907E339A1C9997BA9F9B9B0DDC6420C3A7BA109FEDD18301D909DA8ABC729BE
68EE0050CFC7482AC9E42919978B8557C51377FC940D04AABFCE02AD809CEA30
0BBC60ABB15E8B5D6C25D8E2AA470762D071D293F191007B02527DAED752AB0B
EB8E4F8DE6A873866FB359D9B481CA8DE91B64EA034AAD1A2341CEC9011C7C87
3F1665D2E9C33662BCC92F44AF9E5DF3A37BB68D3CC825D0A695E09B4E955060
D61D01FB447F6668961A00EBAF3DE4F3A232723B26FF28729CC0A887260C5D8D
91A726065DB371CD911C4AD6378F446210484C1AF9247E6B9D1C4BAA6BA0F417
6ABEDC0D93437EB2EAD0078336848136FA691A443EE88ED7871FF5D04D6B1467
DB62B24A7FA92A267CCEE5F40A5436E122CD0C35E178C8DAFDD91B7986273D77
C5B5514742965FCD5A5DB6A7C22A01C976F5DBF8E1DAE83739DEFA1C0D6D74CF
B581E31A42902243B83D0834F7AE89768BA10A9BDE278CDE827D4ED0AC2D0749
3302A5492BEAC397C8CF1812DD28B629FB2C1BB23A629EEF00ACEAA7C3765A5E
A7B4B957BDFCD4A1FEF82C146A2E3AA60EA9A8A846A4F269E33D036FF9CEC0F6
737CA542181A2BB42D8881EA422B54EC6F7EC949D2229D1BFD78309D68F59775
AF16FB8F1FA8CAC1EA9942E1BA2AB36B9306836131B133E07E2EBBDD4EB94F0A
478F809DFB7646692587274B9999BE5493A253645CE99CB2DC8231A8D3EC19FC
3CFE5B127726DEE0509EC49AC3B2F7E23DF363256219E0E81D3544B65C409CAB
06F01B650A5C0AFBDB5FA0B27EC634DE690A30E0EBE38EBFCA48A96E51948E12
5149FBE1B078DDAA6B27C43333FE102123F3161607BD204EE1DC3D1F9EC110E2
4111930AA892C102A9301AECC817E2F956EF4148F4BB61218A79F32C129722C8
A2A82DE04D9486A8CCB9BEF807490E2D3DE53E09137702A51785BF4FABAAF183
C61089B52997D1B55C3052048B9E3193479CD829FF596951B58A3E658A469CE8
E9AE43BE38AA3ADC6C73336EEC46A0AA68EFE5F0537CDC8E5DB793DF8B5E3752
FCEC993CFAD12090F0A7BF98C5632B31D9EF1F2348A180B9A547587A16C1107E
C9CDCAF9CD68021B7DD339A1F2AB6AFC80B1EDF1DA4CF868C591921457BC3622
0D2F9A51453C5F6CD535C7714CB5DABFC769220C08163DF3E02FF675BB2DECB8
A2BCB6DBE05F32AD2155FFC0D91C2CAE65EDFC0006A369FD1E7EB3F6563FA17E
B3E5832E03197D73C5E146BBCED2E756ADE3993C420847FDECB667D6F6111EEF
2918E231E77014FBEB4B6C31DE61F51E8A3C84ED14B0E2890EEF49608498F0F2
0740A7ADDB07E9BB80703E1D84D82DC38FD6296AE76BEC4B00AE0EADB8CDDA63
5359438C85D39DFBA9D0CB9E38B15AFAEA40E31926A89E802634C21F4D41C954
992412AD863B524C5BD2D8AB34815DFDBC31458E13788F2F534704070A05B7C0
71AC93DD9CCC8A2F6FA29D67FD1245D40DF8282A66FE4B7DDBBDB85AB6E7C46B
41DB93F37A7BDC1D8AA02414C2FF6258E9F6CD794D250CBD53FDEC747BC0CFEB
C994460CF57381466BA9BA285117848A0E0AB280F71DAE9C037B2D4CC1BB0CC5
107705ED6D32184318D8652522D63DE00BB0E20E6420BD6418F5D846F2220FBF
86A674C505032B8EB6779C22AA1ACBD14211F4F1ED4C58184EE44E4004BFFFC3
28F44E8DA3D0215333C55A2288B168F638852C012BFAEEFB9B76D9F3A9068D32
ACDBF63CBA45EB0B866ADD8C40B6BAB9FCAE00558F60827A1BA1C873AD4B9000
9543AD03C9EE5417D1DFDA1D832167788F20E9D482C94FFCA78CA36FA3836F6B
3E857220F83F0A2D70A831F1A1C0890FCC862C3879584FB96D4A27DAC95936DA
8AA56C4493B166979575562D292871FDA2F36E09A59D0DEE26806815F033A1D5
D20EBF859B4B55BB727CD6EF8D656A0C7951D1A183E107A16794E1AE6C54BCA1
30C0ACB47BF1CC0D4E406ED219F33785ECBCBEBF2EC829AC402BCF68359CF9A8
CE96BA897706E6D1D9507D9C13EE1246196868231D3D531F19D20D265FE8A68A
EE2E8DC31D7ED8009C1A982972EC88E337C2A020A29EF38C14A7D3A56E8EFDCA
9B930E0A4940BDFAC593619BFB1A5C66B524E04B1E8658F368B79BCA3E8333B6
0C3DAFB5C99406D4CF8DD2A57B93515404E6BF2D2440731A0099083F9ED07441
45952787261A3524EA3A0040388FED7972E4D747E132596733023AFD12AF22C4
CF2CDDF89910094CBED95EBF91F73B1F0D50FF571FD1CA1C614BD785BAD4E6EC
8DC24FDEB0B8D585801648D071C083C61A2CD68E05A5BE79E1B7C3BAC14F33BF
9787B11EC5CBEB76DACDEFCA55BF5BE2611FE955E700F3B8DA533DB7634743C5
B7575695FDA5CF931B244A4E2C3C34A924089A1878AF0758E40DAE23A9276D75
0A396D534CCBBA9C817CF78EACDC6076239753E9E067551843B3C74D435E90F2
361C34A48D7254FD6F6317C9BD700703DA7AE94EDB5191E1EECD07AE9E9969BC
97D0ABF0D0892B7F95D13B7A36D64D906FC01885D57364D8CB6B15C104868DB8
2A960D83F18F5BC72199A9F9BFC4FC49733F36EE58684C7980B5DE08964621B0
4352A52F5DAA8B4CBB4C36ABF06754730B40ED34B4632A0C44C9FFA0526CB58F
1DAF8509DAB765E13446F12E7C8B586F80F2F6B64467D4DC096524231D2176E5
4DE310059674EFE3EC3EB7FF108B766727A31EACAD52D03246C5FEBB5B687E93
76C6374944D3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000
(C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktional)
@start /Fa 154[966 101[{}1 1328.35 /TeX-feymr10 rf /Fb
153[452 3[403 500 97[{ enclmmathit ReEncodeFont }3 885.568
/LMMathItalic8-Regular rf /Fc 173[959 82[{}1 1328.35
/MSBM10 rf /Fd 203[993 52[{}1 1328.35 /wasy10 rf /Fe
185[723 4[830 14[553 553 2[307 46[{ enclmec ReEncodeFont }5
1106.96 /LMRoman10-Regular rf /Ff 160[909 45[606 1[606
47[{ enclmec ReEncodeFont }3 1212.12 /LMRoman10-Regular
rf /Fg 205[886 48[369 1033{ enclmmathsy ReEncodeFont }3
1328.35 /LMMathSymbols10-Regular rf /Fh 198[470 470 470
470 470 470 470 470 470 5[732 43[{ enclmrm ReEncodeFont }10
885.568 /LMRoman8-Regular rf /Fi 194[1012 2[361 1[650
1[650 650 650 650 650 650 650 4[1012 1[506 506 40[{
 enclmrm ReEncodeFont }13 1328.35 /LMRoman12-Regular
rf /Fj 134[634 739 12[676 4[641 1[676 1[553 683 15[1030
838 4[1107 1[574 2[842 2[931 4[1012 650 1[361 59[{
 enclmmathit ReEncodeFont }16 1328.35 /LMMathItalic12-Regular
rf /Fk 241[470 13[732{ enclmmathsy ReEncodeFont }2 885.568
/LMMathSymbols8-Regular rf /Fl 3[723 5[650 17[650 105[578
686 686 939 686 723 506 513 506 1[723 650 723 1084 361
686 1[361 723 650 397 578 723 578 723 650 6[795 2[1336
975 975 939 723 2[885 2[1192 813 1011 3[1021 849 885
993 939 921 975 1[614 3[361 361 2[650 650 650 650 650
650 650 2[361 434 361 2[506 506 6[361 4[723 759 27[{
 enclmec ReEncodeFont }62 1328.35 /LMRoman12-Regular
rf /Fm 3[1196 5[1076 17[1046 105[956 1136 3[1196 837
849 879 1[1196 1076 1196 1793 598 1136 1[598 1196 1076
658 982 1196 956 1[1046 11[1654 5[1616 1[2041 1293 1685
1[801 1[1691 1353 1412 1[1554 1530 1625 9[1076 1076 1076
1076 1076 1076 1076 1076 1076 598 717 45[{ enclmec ReEncodeFont }46
1912.83 /LMRoman12-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-2331 165 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a -2331
165 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a 1328 x Fm(F)-239
b(A)535 b(2.1)g(-)h(1)g(Umrec)-60 b(hn)g(ungsformel)534
b(f\374r)g(F)-179 b(ahrenheit)533 b(-)j(O)-60 b(A)536
b(-)g(BIFIE)p 0 TeXcolorgray -741 4800 a Fl(1.)p 0 TeXcolorgray
651 w(T)-108 b(emp)36 b(eraturen)374 b(w)-36 b(erden)376
b(b)36 b(ei)375 b(uns)g(in)19571 4318 y Fk(\016)20097
4800 y Fj(C)471 b Fl(\(Celsius\))376 b(gemessen;)g(in)g(einigen)g
(anderen)e(L\344n-)921 6792 y(dern)433 b(ist)g(die)h(Messung)f(in)14635
6310 y Fk(\016)15161 6792 y Fj(F)614 b Fl(\(F)-108 b(ahrenheit\))432
b(\374blic)-36 b(h.)921 9338 y(Eine)408 b(Zunahme)g(um)g
Fi(1)12646 8856 y Fk(\016)13173 9338 y Fj(C)503 b Fl(b)36
b(edeutet)408 b(eine)g(Zunahme)g(um)30646 8815 y Fh(9)p
30646 9028 471 45 v 30646 9796 a(5)31470 8856 y Fk(\016)31996
9338 y Fj(F)181 b Fl(.)409 b(Eine)f(T)-108 b(emp)36 b(eratur)408
b(v)-36 b(on)921 11330 y Fi(50)2442 10848 y Fk(\016)2969
11330 y Fj(C)528 b Fl(en)-36 b(tspric)g(h)g(t)432 b(einer)i(T)-108
b(emp)36 b(eratur)432 b(v)-36 b(on)434 b Fi(122)25430
10848 y Fk(\016)25957 11330 y Fj(F)181 b Fl(.)921 13875
y(Die)434 b(F)-108 b(unktion)433 b Fj(f)576 b Fl(soll)434
b(der)f(T)-108 b(emp)36 b(eratur)433 b(in)23280 13393
y Fk(\016)23806 13875 y Fj(C)529 b Fl(die)433 b(T)-108
b(emp)36 b(eratur)433 b(in)36032 13393 y Fk(\016)36558
13875 y Fj(F)614 b Fl(zuordnen.)921 16420 y(Bestimme)590
b(den)e(en)-36 b(tsprec)g(henden)587 b(F)-108 b(unktionsterm,)589
b(w)-36 b(enn)589 b Fj(x)g Fl(die)h(T)-108 b(emp)36 b(eratur)588
b(in)44345 15938 y Fk(\016)44870 16420 y Fj(C)921 18412
y Fl(und)432 b Fj(f)142 b Fi(\()p Fj(x)p Fi(\))434 b
Fl(die)f(T)-108 b(emp)36 b(eratur)433 b(in)17256 17930
y Fk(\016)17782 18412 y Fj(F)614 b Fl(sein)434 b(soll!)921
22950 y Fj(f)142 b Fi(\()p Fj(x)p Fi(\))369 b(=)p 5204
22950 15749 34 v 1 0 0 TeXcolorrgb 921 27487 a Fj(f)142
b Fi(\()p Fj(x)p Fi(\))369 b(=)5337 26964 y Fh(9)p 5337
27177 471 45 v 5337 27945 a(5)6236 27487 y Fg(\001)295
b Fj(x)g Fi(+)g(32)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 47992 4800 a Ff(___/1)p 1 0 0 TeXcolorrgb
48228 6792 a Fe(F)-123 b(A)369 b(2.1)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 31420 54804 45
v 0 TeXcolorgray 24746 81281 a Fl(1)p 0 TeXcolorgray
eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fm(F)-239 b(A)794 b(2.1)g(-)h(2)f(Graph)g
(einer)g(linearen)f(F)-179 b(unktion)791 b(zeic)-60 b(hnen)794
b(-)h(O)-60 b(A)795 b(-)-2331 4515 y(BIFIE)p 0 TeXcolorgray
-741 7823 a Fl(2.)p 0 TeXcolorgray 651 w(Zeic)-36 b(hne)626
b(in)h(das)g(nac)-36 b(hstehende)625 b(K)-36 b(o)36 b(ordinatensystem)
627 b(den)f(Graphen)g(einer)g(linearen)921 9815 y(F)-108
b(unktion)461 b(mit)h(der)f(Gleic)-36 b(h)g(ung)461 b
Fj(f)142 b Fi(\()p Fj(x)p Fi(\))416 b(=)h Fj(k)359 b
Fg(\001)315 b Fj(x)f Fi(+)g Fj(d)462 b Fl(ein,)g(f\374r)g(deren)e(P)-36
b(arameter)462 b Fj(k)507 b Fl(und)460 b Fj(d)921 11806
y Fl(die)433 b(Bedingungen)g Fj(k)414 b Fi(=)369 b Fg(\000)14439
11283 y Fh(2)p 14439 11497 471 45 v 14439 12265 a(3)15476
11806 y Fl(und)432 b Fj(d)369 b(>)g Fi(0)434 b Fl(gelten!)p
0 TeXcolorgray 0 TeXcolorgray 6725 44386 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 301.42514 a add def
/d 0.0 a add neg def /h 271.17456 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 6725 44386
a 24521 29194 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81097 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 140.66385 0.0 -160.76129 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -142.26372 0.0 T 11
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 133.9388 0.0 -137.23576   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 140.66385  0 -160.76129  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -160.76129
 140.66385  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-137.23576  def /maxTickline 133.9388  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 133.9388
0.0 -137.23576   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 140.66385
0.0 -160.76129 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 133.9388  0 -137.23576  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -137.23576
 133.9388  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-160.76129  def /maxTickline 140.66385  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 133.9388
0.0 -137.23576   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 140.66385
0.0 -160.76129 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 23276 26330 a
Fh(1)23276 23180 y(2)23276 20031 y(3)23276 16881 y(4)22544
32583 y Fk(\000)p Fh(1)22544 35733 y Fk(\000)p Fh(2)22544
38882 y Fk(\000)p Fh(3)22544 42032 y Fk(\000)p Fh(4)27435
30540 y(1)2680 b(2)g(3)f(4)-16584 b Fk(\000)p Fh(1)-4351
b Fk(\000)p Fh(2)f Fk(\000)p Fh(3)g Fk(\000)p Fh(4)h
Fk(\000)p Fh(5)24521 29194 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 24521 29194 a 24521 29194
a
tx@Dict begin  { 140.66385 133.9388 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 24521 29194 a 24521 29194 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 24521 29194 a 24178 29480
a Fl(x)24521 29194 y
tx@Dict begin  PutEnd  end
 24521 29194 a 24521 29194 a
tx@Dict begin  PutEnd  end
 24521
29194 a 24521 29194 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 24521 29194 a 24521 29194 a
tx@Dict begin  { 0.0 0.0 pop 140.66385 133.9388 exch pop } PutCoor
PutBegin  end
 24521
29194 a 24521 29194 a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 24521 29194 a 24178 29351 a Fl(y)24521
29194 y
tx@Dict begin  PutEnd  end
 24521 29194 a 24521 29194 a
tx@Dict begin  PutEnd  end
 24521 29194 a 1 0 0
TeXcolorrgb @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -5.650112240961741 def /x1 4.943774160227248
def /dx x1 x sub 49 div def /F@pstplot ((-9.--2.*x)/-3.)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  49 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 40092 44386
a
currentpoint initclip moveto
 40092 44386 a 1 0 0 TeXcolorrgb 873 50362 a Fl(Alle)428
b(Geraden,)f(die)g(zu)g(der)g(in)g(der)g(L\366sung)g(gezeigten)h
(Geraden)f(parallel)h(sind)f(und)f(die)921 52354 y(p)36
b(ositiv)-36 b(e)434 b(y-A)-36 b(c)g(hse)434 b(sc)-36
b(hneiden,)432 b(sind)h(als)i(ric)-36 b(h)g(tig)433 b(zu)g(w)-36
b(erten.)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
47992 7823 a Ff(___/1)p 1 0 0 TeXcolorrgb 48228 9815
a Fe(F)-123 b(A)369 b(2.1)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 56088 54804 45 v 0 TeXcolorgray
24746 81281 a Fl(2)p 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fm(F)-239 b(A)717 b(2.1)g(-)h(3)f(Graph)g
(einer)f(linearen)g(F)-179 b(unktion)714 b(-)k(MC)g(-)f(BIFIE)p
0 TeXcolorgray -741 4800 a Fl(3.)p 0 TeXcolorgray 651
w(Gegeb)36 b(en)433 b(sind)g(f\374nf)h(Abbildungen:)2683
20948 y
 currentpoint currentpoint translate 0.60742 0.60742 scale neg exch
neg exch translate
 2683 20948 a 2683 20948 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 157.1947 a add def
/d 0.0 a add neg def /h 152.87312 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 2683 20948 a 11090
12573 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -56.90549 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 81.2433 0.0 -75.9514 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 28.45274
T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -56.90549 0.0 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 77.21869 0.0 -75.65443   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 81.2433  0 -75.9514  0 ArrowA CP 4 2
roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -75.9514
 81.2433  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-75.65443  def /maxTickline 77.21869  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 77.21869
0.0 -75.65443   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 81.2433
0.0 -75.9514 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 77.21869  0 -75.65443  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -75.65443
 77.21869  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-75.9514  def /maxTickline 81.2433  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 77.21869
0.0 -75.65443   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 81.2433
0.0 -75.9514 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 9845 9709 a Fh(1)9845 6559 y(2)9113
15962 y Fk(\000)p Fh(1)9113 19112 y Fk(\000)p Fh(2)14005
13919 y(1)2679 b(2)-10284 b Fk(\000)p Fh(1)-4352 b Fk(\000)p
Fh(2)11090 12573 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.669395099408567 def /x1 2.855373615189992
def /dx x1 x sub 199 div def /F@pstplot (-x)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
20084 20948 a
currentpoint initclip moveto
 20084 20948 a 2683 20948 a
 currentpoint currentpoint translate 1 0.60742 div 1 0.60742 div scale
neg exch neg exch translate
 2683 20948 a
2635 22940 a Fl(Abb.)433 b(1)24758 20948 y
 currentpoint currentpoint translate 0.60742 0.60742 scale neg exch
neg exch translate
 24758 20948
a 24758 20948 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 157.1947 a add def
/d 0.0 a add neg def /h 152.87312 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 24758 20948 a 33165 12573 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -56.90549 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 81.2433 0.0 -75.9514 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 28.45274
T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -56.90549 0.0 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 77.21869 0.0 -75.65443   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 81.2433  0 -75.9514  0 ArrowA CP 4 2
roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -75.9514
 81.2433  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-75.65443  def /maxTickline 77.21869  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 77.21869
0.0 -75.65443   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 81.2433
0.0 -75.9514 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 77.21869  0 -75.65443  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -75.65443
 77.21869  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-75.9514  def /maxTickline 81.2433  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 77.21869
0.0 -75.65443   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 81.2433
0.0 -75.9514 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
31920 9709 a Fh(1)31920 6559 y(2)31188 15962 y Fk(\000)p
Fh(1)31188 19112 y Fk(\000)p Fh(2)36080 13919 y(1)2679
b(2)-10284 b Fk(\000)p Fh(1)-4352 b Fk(\000)p Fh(2)33165
12573 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -40.83916 77.21869 -40.83916 -75.65443
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 42159
20948 a
currentpoint initclip moveto
 42159 20948 a 24758 20948 a
 currentpoint currentpoint translate 1 0.60742 div 1 0.60742 div scale
neg exch neg exch translate
 24758 20948 a 24710
22940 a Fl(Abb.)433 b(2)p 0 TeXcolorgray 0 TeXcolorgray
18911 33791 a
 currentpoint currentpoint translate 0.51694 0.51694 scale neg exch
neg exch translate
 18911 33791 a 18911 33791 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 157.1947 a add def
/d 0.0 a add neg def /h 152.87312 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 18911 33791
a 27319 25416 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -56.90549 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 81.2433 0.0 -75.9514 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 28.45274
T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -56.90549 0.0 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 77.21869 0.0 -75.65443   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 81.2433  0 -75.9514  0 ArrowA CP 4 2
roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -75.9514
 81.2433  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-75.65443  def /maxTickline 77.21869  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 77.21869
0.0 -75.65443   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 81.2433
0.0 -75.9514 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 77.21869  0 -75.65443  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -75.65443
 77.21869  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-75.9514  def /maxTickline 81.2433  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 77.21869
0.0 -75.65443   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 81.2433
0.0 -75.9514 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 26074 22552 a
Fh(1)26073 19402 y(2)25341 28805 y Fk(\000)p Fh(1)25341
31955 y Fk(\000)p Fh(2)30233 26762 y(1)2680 b(2)-10285
b Fk(\000)p Fh(1)-4352 b Fk(\000)p Fh(2)27319 25416 y
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.669395099408567 def /x1 2.855373615189992
def /dx x1 x sub 49 div def /F@pstplot ((--0.5-0.*x)/1.)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  49 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 36312 33791 a
currentpoint initclip moveto

36312 33791 a 18911 33791 a
 currentpoint currentpoint translate 1 0.51694 div 1 0.51694 div scale
neg exch neg exch translate
 18911 33791 a 21468 36336
a Fl(Abb.)433 b(3)p 0 TeXcolorgray 0 TeXcolorgray 7967
51422 a
 currentpoint currentpoint translate 0.59264 0.59264 scale neg exch
neg exch translate
 7967 51422 a 8401 51422 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 157.1947 a add def
/d 0.0 a add neg def /h 152.87312 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 8401 51422 a 16809
43048 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -56.90549 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 81.2433 0.0 -75.9514 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 28.45274
T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -56.90549 0.0 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 77.21869 0.0 -75.65443   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 81.2433  0 -75.9514  0 ArrowA CP 4 2
roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -75.9514
 81.2433  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-75.65443  def /maxTickline 77.21869  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 77.21869
0.0 -75.65443   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 81.2433
0.0 -75.9514 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 77.21869  0 -75.65443  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -75.65443
 77.21869  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-75.9514  def /maxTickline 81.2433  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 77.21869
0.0 -75.65443   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 81.2433
0.0 -75.9514 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 15564 40183 a Fh(1)15563 37034
y(2)14831 46436 y Fk(\000)p Fh(1)14831 49586 y Fk(\000)p
Fh(2)19723 44393 y(1)2680 b(2)-10285 b Fk(\000)p Fh(1)-4352
b Fk(\000)p Fh(2)16809 43048 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0.4 0.4 0.4  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -2.669395099408567
def /x1 2.855373615189992 def /dx x1 x sub 199 div def /F@pstplot (TAN(x))
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0.4 0.4 0.4  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial 25802 51422 a
currentpoint initclip moveto
 25802 51422 a 7967 51422 a
 currentpoint currentpoint translate 1 0.59264 div 1 0.59264 div scale
neg exch neg exch translate

7967 51422 a 0 TeXcolorgray 0 TeXcolorgray 11342 54853
a Fl(Abb.)433 b(4)p 0 TeXcolorgray 0 TeXcolorgray 29609
51672 a
 currentpoint currentpoint translate 0.60742 0.60742 scale neg exch
neg exch translate
 29609 51672 a 29609 51672 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 157.1947 a add def
/d 0.0 a add neg def /h 152.87312 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 29609 51672 a 38016
43298 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -56.90549 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 81.2433 0.0 -75.9514 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 28.45274
T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -56.90549 0.0 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 77.21869 0.0 -75.65443   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 81.2433  0 -75.9514  0 ArrowA CP 4 2
roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -75.9514
 81.2433  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-75.65443  def /maxTickline 77.21869  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 77.21869
0.0 -75.65443   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 81.2433
0.0 -75.9514 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 77.21869  0 -75.65443  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -75.65443
 77.21869  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-75.9514  def /maxTickline 81.2433  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 77.21869
0.0 -75.65443   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 81.2433
0.0 -75.9514 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 36771 40433 a Fh(1)36771 37284
y(2)36039 46687 y Fk(\000)p Fh(1)36039 49836 y Fk(\000)p
Fh(2)40931 44643 y(1)2679 b(2)-10285 b Fk(\000)p Fh(1)-4351
b Fk(\000)p Fh(2)38016 43298 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.669395099408567 def /x1 2.855373615189992
def /dx x1 x sub 199 div def /F@pstplot (3.0/2.0*x+1.0)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial 47010 51672 a
currentpoint initclip moveto
 47010 51672 a 29609 51672
a
 currentpoint currentpoint translate 1 0.60742 div 1 0.60742 div scale
neg exch neg exch translate
 29609 51672 a 0 TeXcolorgray 0 TeXcolorgray 32977 55103
a Fl(Abb.)433 b(5)855 58674 y(W)-108 b(elc)-36 b(he)614
b(Abbildungen)g(stellen)h(einen)f(Graphen)f(v)-36 b(on)615
b(einer)g(linearen)g(F)-108 b(unktion)614 b(dar?)921
60666 y(Kreuze)433 b(die)h(zutre\033ende\(n\))d(Abbildung\(en\))h(an!)p
19368 61707 7648 45 v 19368 64512 45 2805 v 20077 63567
a(Abb.)h(1)p 24606 64512 V 1 0 0 TeXcolorrgb 25315 63441
a Fd(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
26971 64512 V 19368 64556 7648 45 v 19368 67361 45 2805
v 20077 66416 a Fl(Abb.)g(2)p 24606 67361 V 26971 67361
V 19368 67405 7648 45 v 19368 70210 45 2805 v 20077 69265
a(Abb.)g(3)p 24606 70210 V 1 0 0 TeXcolorrgb 25315 69140
a Fd(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
26971 70210 V 19368 70254 7648 45 v 19368 73059 45 2805
v 20077 72114 a Fl(Abb.)g(4)p 24606 73059 V 26971 73059
V 19368 73103 7648 45 v 19368 75908 45 2805 v 20077 74963
a(Abb.)g(5)p 24606 75908 V 1 0 0 TeXcolorrgb 25315 74838
a Fd(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
26971 75908 V 19368 75952 7648 45 v 47992 4800 a Ff(___/1)p
1 0 0 TeXcolorrgb 48228 6792 a Fe(F)-123 b(A)369 b(2.1)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 0
TeXcolorgray 24746 81281 a Fl(3)p 0 TeXcolorgray eop
end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 54804 45 v -2331 6795 a Fm(F)-239
b(A)1047 b(2.1)g(-)g(4)g(Lineare)f(Gleic)-60 b(h)g(ung)1047
b(-)g(lineare)f(F)-179 b(unktion)1045 b(-)i(O)-60 b(A)1048
b(-)-2331 9817 y(BIFIE)p 0 TeXcolorgray -741 13124 a
Fl(4.)p 0 TeXcolorgray 651 w(Eine)449 b(lineare)h(F)-108
b(unktion)449 b Fj(y)444 b Fi(=)395 b Fj(f)142 b Fi(\()p
Fj(x)p Fi(\))449 b Fl(kann)h(durc)-36 b(h)448 b(eine)h(Gleic)-36
b(h)g(ung)449 b Fj(a)306 b Fg(\001)g Fj(x)g Fi(+)f Fj(b)h
Fg(\001)g Fj(y)444 b Fi(=)396 b(0)449 b Fl(mit)921 15116
y Fj(a;)221 b(b)369 b Fg(2)g Fc(R)5322 14634 y Fh(+)6543
15116 y Fl(festgelegt)435 b(w)-36 b(erden.)921 17661
y(Gib)311 b(einen)g(F)-108 b(unktionsterm)310 b(v)-36
b(on)311 b Fj(f)453 b Fl(an)311 b(und)g(skizziere,)h(wie)g(der)f(Graph)
f(aussehen)h(k)-36 b(\366nn)g(te!)p 0 TeXcolorgray 0
TeXcolorgray 8370 42925 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 271.71466 a add def
/d 0.0 a add neg def /h 206.89194 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 8370 42925 a 20365 34969 a
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -56.90549 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 163.3519 0.0 -108.36276 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 135.01898 0.0 -71.87296   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 163.3519  0 -108.36276  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -108.36276
 163.3519  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-71.87296  def /maxTickline 135.01898  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 135.01898
0.0 -71.87296   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 163.3519
0.0 -108.36276 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 135.01898  0 -71.87296  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -71.87296
 135.01898  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-108.36276  def /maxTickline 163.3519  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 135.01898
0.0 -71.87296   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 163.3519
0.0 -108.36276 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 19120 32105 a Fh(1)19120 28955
y(2)19120 25806 y(3)19120 22656 y(4)18388 38358 y Fk(\000)p
Fh(1)18388 41507 y Fk(\000)p Fh(2)23279 36315 y(1)2680
b(2)g(3)f(4)h(5)-19734 b Fk(\000)p Fh(1)-4351 b Fk(\000)p
Fh(2)f Fk(\000)p Fh(3)20365 34969 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 20365 34969 a 20365
34969 a
tx@Dict begin  { 163.3519 135.01898 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 20365 34969 a 20365 34969 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 20365 34969 a 20022
35255 a Fl(x)20365 34969 y
tx@Dict begin  PutEnd  end
 20365 34969 a 20365 34969
a
tx@Dict begin  PutEnd  end
 20365 34969 a 20365 34969 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 20365 34969 a 20365 34969
a
tx@Dict begin  { 0.0 0.0 pop 163.3519 135.01898 exch pop } PutCoor
PutBegin  end
 20365 34969 a 20365 34969 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 20365 34969 a 19317 35301
a Fl(f\(x\))20365 34969 y
tx@Dict begin  PutEnd  end
 20365 34969 a 20365 34969 a
tx@Dict begin  PutEnd  end

20365 34969 a 1 0 0 TeXcolorrgb @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.8085226694288887 def /x1 5.741163459241477
def /dx x1 x sub 199 div def /F@pstplot (-2.0*x/3.0)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end


@endspecial 20365 34969 a
tx@Dict begin  { -91.61699 66.95529 } PutCoor PutBegin  end
 20365 34969 a -172 x Fb(f)20365
34969 y
tx@Dict begin  PutEnd  end
 20365 34969 a 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 38448 42925 a
currentpoint initclip moveto
 38448 42925 a 921 46910
a Fj(f)142 b Fi(\()p Fj(x)p Fi(\))369 b(=)p 5204 46910
15749 34 v 1 0 0 TeXcolorrgb 921 51447 a Fj(f)142 b Fi(\()p
Fj(x)p Fi(\))369 b(=)f Fg(\000)6370 50924 y Fb(a)p 6370
51137 500 45 v 6419 51905 a(b)7298 51447 y Fg(\001)295
b Fj(x)921 53992 y Fl(Der)617 b(Graph)f(m)-36 b(uss)617
b(als)g(Gerade)g(erk)-36 b(enn)g(bar)616 b(sein,)h(durc)-36
b(h)616 b(den)g(Ursprung)g(gehen)g(und)921 55984 y(monoton)434
b(fallend)g(sein.)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 47992 13124 a Ff(___/1)p 1 0 0 TeXcolorrgb
48228 15116 a Fe(F)-123 b(A)369 b(2.1)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 59459 54804 45
v 0 TeXcolorgray 24746 81281 a Fl(4)p 0 TeXcolorgray
eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fm(F)-239 b(A)717 b(2.1)g(-)h(5)f(Lineare)f
(K)-60 b(ostenfunktion)714 b(-)k(O)-60 b(A)717 b(-)h(BIFIE)p
0 TeXcolorgray -741 4800 a Fl(5.)p 0 TeXcolorgray 651
w(Ein)429 b(Betrieb)g(hat)g(monatlic)-36 b(he)429 b(Fixk)-36
b(osten)430 b(v)-36 b(on)430 b Fa(e)f Fi(3)221 b(600)p
Fl(.)431 b(Die)f(zus\344tzlic)-36 b(hen)429 b(\(v)-72
b(ariablen\))921 6792 y(K)-36 b(osten,)434 b(die)f(pro)h(St\374c)-36
b(k)433 b(einer)g(W)-108 b(are)434 b(f\374r)f(die)h(Pro)36
b(duktion)433 b(anfallen,)i(b)36 b(etragen)433 b Fa(e)h
Fi(85)p Fl(.)921 9338 y(Stelle)449 b(eine)f(Gleic)-36
b(h)g(ung)448 b(einer)g(linearen)g(K)-36 b(ostenfunktion)449
b Fj(K)543 b Fl(auf,)450 b(die)e(die)g(monatlic)-36 b(hen)921
11330 y(Pro)36 b(duktionsk)-36 b(osten)434 b Fj(K)95
b Fi(\()p Fj(x)p Fi(\))433 b Fl(f\374r)g Fj(x)h Fl(pro)36
b(duzierte)433 b(St\374c)-36 b(k)433 b(dieser)g(W)-108
b(are)434 b(mo)36 b(delliert!)p 1 0 0 TeXcolorrgb 921
15867 a Fj(K)95 b Fi(\()p Fj(x)p Fi(\))369 b(=)f(85)296
b Fg(\001)f Fj(x)h Fi(+)e(3)221 b(600)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 4800 a Ff(___/1)p
1 0 0 TeXcolorrgb 48228 6792 a Fe(F)-123 b(A)369 b(2.1)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
19674 54804 45 v -2331 24976 a Fm(F)-239 b(A)895 b(2.1)g(-)h(6)f
(Lineare)g(F)-179 b(unktion)892 b(-)k(O)-60 b(A)896 b(-)g(BIFIE)g(-)f
(K)-60 b(omp)60 b(etenz-)-2331 27998 y(c)-60 b(hec)g(k)718
b(2016)p 0 TeXcolorgray -741 31305 a Fl(6.)p 0 TeXcolorgray
651 w(Der)385 b(Graph)e(der)h(F)-108 b(unktion)384 b
Fj(f)526 b Fl(ist)385 b(eine)f(Gerade,)h(die)f(durc)-36
b(h)383 b(die)i(Punkte)f Fj(P)550 b Fi(=)368 b(\(2)p
Fj(=)p Fi(8\))385 b Fl(und)921 33297 y Fj(Q)369 b Fi(=)g(\(4)p
Fj(=)p Fi(4\))434 b Fl(v)-36 b(erl\344uft.)921 35843
y(Gib)433 b(eine)h(F)-108 b(unktionsgleic)-36 b(h)g(ung)432
b(der)h(F)-108 b(unktion)433 b Fj(f)576 b Fl(an.)921
38388 y Fj(f)142 b Fi(\()p Fj(x)p Fi(\))369 b(=)p 4836
38388 15749 34 v 1 0 0 TeXcolorrgb 921 40933 a Fj(f)142
b Fi(\()p Fj(x)p Fi(\))369 b(=)f Fg(\000)p Fi(2)p Fj(x)296
b Fi(+)f(12)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
47992 31305 a Ff(___/1)p 1 0 0 TeXcolorrgb 48228 33297
a Fe(F)-123 b(A)369 b(2.1)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 44741 54804 45 v 0 TeXcolorgray
24746 81281 a Fl(5)p 0 TeXcolorgray eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fm(F)-239 b(A)696 b(2.1)h(-)f(7)h(Gleic)-60
b(h)g(ungssysteme)695 b(und)g(ihre)h(L\366sungsf\344lle)e(-)j(O)-60
b(A)697 b(-)-2331 4515 y(Matura)717 b(2014/15)g(-)h(K)-60
b(omp)60 b(ensationspr\374fung)p 0 TeXcolorgray -741
7823 a Fl(7.)p 0 TeXcolorgray 651 w(Gegeb)36 b(en)433
b(ist)h(folgende)g(gra\034sc)-36 b(he)433 b(Darstellung:)p
0 TeXcolorgray 0 TeXcolorgray 7667 30574 a
 currentpoint currentpoint translate 0.90872 0.90872 scale neg exch
neg exch translate
 7667 30574
a 7667 30574 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 312.98016 a add def
/d 0.0 a add neg def /h 205.998 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 7667 30574 a 12139 22385 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -56.90549 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 272.57733 0.0 -40.40283 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -28.45274 0.0 T 12
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 132.0207 0.0 -73.9773   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 272.57733  0 -40.40283  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -40.40283
 272.57733  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-73.9773  def /maxTickline 132.0207  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 132.0207
0.0 -73.9773   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 272.57733
0.0 -40.40283 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 132.0207  0 -73.9773  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -73.9773
 132.0207  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-40.40283  def /maxTickline 272.57733  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 132.0207
0.0 -73.9773   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 272.57733
0.0 -40.40283 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
10894 19521 a Fh(1)10894 16371 y(2)10894 13221 y(3)10894
10072 y(4)10162 25774 y Fk(\000)p Fh(1)10162 28923 y
Fk(\000)p Fh(2)15054 23730 y(1)2679 b(2)h(3)g(4)f(5)h(6)f(7)h(8)g(9)
-32332 b Fk(\000)p Fh(1)12139 22385 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 12139 22385 a 12139
22385 a
tx@Dict begin  { 272.57733 132.0207 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 12139 22385 a 12139 22385 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 12139 22385 a 11796
22671 a Fl(x)12139 22385 y
tx@Dict begin  PutEnd  end
 12139 22385 a 12139 22385
a
tx@Dict begin  PutEnd  end
 12139 22385 a 12139 22385 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 12139 22385 a 12139 22385
a
tx@Dict begin  { 0.0 0.0 pop 272.57733 132.0207 exch pop } PutCoor
PutBegin  end
 12139 22385 a 12139 22385 a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 12139 22385 a 11796 22542
a Fl(y)12139 22385 y
tx@Dict begin  PutEnd  end
 12139 22385 a 12139 22385 a
tx@Dict begin  PutEnd  end
 12139
22385 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -1.42 def /x1 9.58 def /dx x1 x
sub 49 div def /F@pstplot ((--16.-4.*x)/4.)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -1.42 def /x1 9.58 def /dx x1 x
sub 49 div def /F@pstplot ((-10.--1.*x)/5.)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 142.26372 -28.45274
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
42313 30574 a
currentpoint initclip moveto
 42313 30574 a 7667 30574 a
 currentpoint currentpoint translate 1 0.90872 div 1 0.90872 div scale
neg exch neg exch translate
 7667 30574 a
921 34226 a Fl(Gib)484 b(ein)h(dieser)f(Gra\034k)g(en)-36
b(tsprec)g(hendes)483 b(lineares)i(Gleic)-36 b(h)g(ungssystem)484
b(mit)h(den)f(V)-108 b(aria-)921 36218 y(blen)433 b Fj(x)h
Fl(und)e Fj(y)482 b Fl(an.)p 1 0 0 TeXcolorrgb 921 38763
a Fj(I)473 b Fi(:)369 b Fj(y)417 b Fi(=)369 b Fg(\000)p
Fj(x)295 b Fi(+)g(4)921 40755 y Fj(I)104 b(I)473 b Fi(:)369
b Fj(y)417 b Fi(=)5941 40232 y Fh(1)p 5941 40445 471
45 v 5941 41213 a(5)6544 40755 y Fj(x)295 b Fg(\000)h
Fi(2)921 42747 y Fl(o)36 b(der)921 44739 y Fj(I)473 b
Fi(:)369 b Fj(x)296 b Fi(+)e Fj(y)417 b Fi(=)369 b(4)921
46731 y Fj(I)104 b(I)473 b Fi(:)369 b Fj(x)296 b Fg(\000)f
Fi(5)p Fj(y)417 b Fi(=)369 b(10)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 47992 7823 a Ff(___/1)p 1 0 0
TeXcolorrgb 48228 9815 a Fe(F)-123 b(A)369 b(2.2)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 50465
54804 45 v 0 TeXcolorgray 24746 81281 a Fl(6)p 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 1.5/FA 1.5 Gesamtdokument.dvi
%%CreationDate: Fri Nov 10 08:33:31 2017
%%Pages: 16
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: LMRoman12-Bold LMRoman12-Regular
%%+ LMMathSymbols10-Regular LMMathItalic12-Regular LMRoman8-Regular
%%+ LMMathSymbols8-Regular LMRoman10-Regular wasy10
%%+ LMMathItalic8-Regular LMRoman6-Regular MSBM10 LMMathItalic10-Regular
%%+ LMMathExtension10-Regular
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ "C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 1.5/FA 1.5 Gesamtdokument.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2017.11.10:0933
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-mathex.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathex[
/parenleftbig
/parenrightbig
/bracketleftbig
/bracketrightbig
/floorleftbig
/floorrightbig
/ceilingleftbig
/ceilingrightbig
/braceleftbig
/bracerightbig
/angbracketleftbig
/angbracketrightbig
/vextendsingle
/vextenddouble
/slashbig
/backslashbig
/parenleftBig
/parenrightBig
/parenleftbigg
/parenrightbigg
/bracketleftbigg
/bracketrightbigg
/floorleftbigg
/floorrightbigg
/ceilingleftbigg
/ceilingrightbigg
/braceleftbigg
/bracerightbigg
/angbracketleftbigg
/angbracketrightbigg
/slashbigg
/backslashbigg
/parenleftBigg
/parenrightBigg
/bracketleftBigg
/bracketrightBigg
/floorleftBigg
/floorrightBigg
/ceilingleftBigg
/ceilingrightBigg
/braceleftBigg
/bracerightBigg
/angbracketleftBigg
/angbracketrightBigg
/slashBigg
/backslashBigg
/slashBig
/backslashBig
/parenlefttp
/parenrighttp
/bracketlefttp
/bracketrighttp
/bracketleftbt
/bracketrightbt
/bracketleftex
/bracketrightex
/bracelefttp
/bracerighttp
/braceleftbt
/bracerightbt
/braceleftmid
/bracerightmid
/braceex
/arrowvertex
/parenleftbt
/parenrightbt
/parenleftex
/parenrightex
/angbracketleftBig
/angbracketrightBig
/unionsqtext
/unionsqdisplay
/contintegraltext
/contintegraldisplay
/circledottext
/circledotdisplay
/circleplustext
/circleplusdisplay
/circlemultiplytext
/circlemultiplydisplay
/summationtext
/producttext
/integraltext
/uniontext
/intersectiontext
/unionmultitext
/logicalandtext
/logicalortext
/summationdisplay
/productdisplay
/integraldisplay
/uniondisplay
/intersectiondisplay
/unionmultidisplay
/logicalanddisplay
/logicalordisplay
/coproducttext
/coproductdisplay
/hatwide
/hatwider
/hatwidest
/tildewide
/tildewider
/tildewidest
/bracketleftBig
/bracketrightBig
/floorleftBig
/floorrightBig
/ceilingleftBig
/ceilingrightBig
/braceleftBig
/bracerightBig
/radicalbig
/radicalBig
/radicalbigg
/radicalBigg
/radicalbt
/radicalvertex
/radicaltp
/arrowvertexdbl
/arrowtp
/arrowbt
/bracehtipdownleft
/bracehtipdownright
/bracehtipupleft
/bracehtipupright
/arrowdbltp
/arrowdblbt
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: LMMathExtension10-Regular
%!PS-AdobeFont-1.0: LMMathExtension10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathExtension10-Regular known{/LMMathExtension10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathExtension10-Regular)readonly def
/FamilyName(LMMathExtension10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathExtension10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -2960 1454 772}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA967B9A7DF802734736F3D61073FD
8ED62BDFAF207E10687AEF931F44AD55F9C3DB174637A34D867219978D9D1BF9
C733804DA26B4CDAF23436F0F8EA2308CBE3665ADFAA59A240036663D9ED945E
8C22B3621360BE02DBDDCC3BFE082CF6230F8C83FA4B6357682B7A7DF35F166A
FD3F889D853655FEE984B52090BB8D6B7EF8DBF3B1D022B6586235B32899053B
0718E16BEE7E146A4753D6E3FD6C4B6BD9AAFC2AED5748E193D28CF6A8391414
41971E41C481638DBFBFDE2638B65D10FE5FCC35EBC520E3520F0A0EC8FDA853
597F3C2E2F60B8DFD431DB5B1796737BE979C821EEB58BCC28A92DD60EEF767E
E861765D087BCADB269D7374E766D4C2328E711F23B767CA5D47241039F33EE8
0DC9D02C1D4D91AA0E59962090F584084D29E26056AD0E2B1FC4C1257DF003B0
748DEEE2A30AE53AEA24FDC43AF62A66BADE0B3557F9F4CAFD659CF933472AB0
8922041D5D0DFC41603EE166FDAC7C89DA8D63EC1CD0E2E23E45C5C81A5663E5
C6952D28B285A1C349378D5D07B5BFD7D742DCE097383EF86C667BB651988158
47B4EEBB5E1C035CE74DBB3D3FC9D00DD3D28DC0853DDADFB3C7E642482047AA
87EF5639DA5CABBEEECB36123995B88946D1D7AF48D7C86E718E1153F8A4093F
79457700C6E57A6BB805A2386ADAD90E2DEF9354C8785D11DA504D44CB3B6118
C74E1B7A174BA2664E6F25EC8AB818169B1A250D9725677C72896D4CD4A15BC1
EBA98BA918D1ADFF45ABE8C162D93331FF301D17DC8998230B8C7918089C70D1
65F57CA3361018FF92DEFC60063E1A6926B7780A75CF71E1DBEECE8BB1295F24
4E7AB8080FD30DBECAF8DEBDC436B4AF98A2328B7EB946668117CC386E257083
7C0EDE2A2FF6EE7DEE7168B436A033249C8326F5ECEE6C952EFC6D271378AFA7
90A3AC4D2C99F23AD08C9753D7532D4B1BA3170AF923DDD58EBC8E8ACF16C2C3
5D2C311ADA85F37120427290A229961ADB1D5023BD93644E4C23176BF787664F
CF245203C8C3E557669BDD382731E334C06F4B6EA145D5DF351211A0511605B2
8C540290A08A304CB1279FEB8FC14062F495A5EF2072B2957D98A1AB2E4B2A21
6F53829103F9CA4A8B6EB5766A44A7EAE4D5967EC3646F54568E9FAB28736D70
AE87CA7F3E445B1F49315332AC4AB47D5296FC1D3B96A166865C2FCBDEBAB3DB
6CDE74F5FF556BC9358EFD0B43F697D889D0331D1EBEC40C00DAE0BAC2DAD9ED
755E5FFAD0632FF3D5CE92C7E1D0DFA7642329EF410BECC288F0C4D1D0E6FBDB
1D2F7DC87DCFA3E12F6EDC2CA29FB19DE4183834020D1D5EF3C8297647447CEE
E330B23D8B1E1FF228FBFBE9C3CB8228AF6F5670423AE730740E6C8729B71F3D
32DAD5793A80FD1B6F3321CD3296C52F9330B735A0E65D7C343B1A03451B3A9A
19623C4B099EA0177F6CD6CB3BEB1F72FAC3A0D0989E1ED1A2EFA01D70A9C4C9
29F4BDC03FB1E4663874849B532BE5D89A4DCDC978BAE505BFA5D94B9F85270E
EA10883403D78F8ACC16D78A071DE8BC0EBFFDC300D331F427017089C77550E2
CF35E1093D08837A23AB0CA867D97DD34218260D2B6B9A4E247A71B41391B55C
0237DA0E25D4B4313CE372668A4B6BD7362B99A641E690E301E06C561BBE6ECB
41B1FD9922DFACBD3C45554A6F59E19BB0FA6BFBA035C07D0D10084CA3724040
1EE3312EAB85F8AAFB0991CB7B5831AFA6298E43DD37CFE29072A6C9BFAF41A2
FB4DC4F80E20BBB9C959B78F2599E4068E7E7F3F825C6C28562E37D841F7165C
7E17C8FB438AE8E402D11CB5AAEFFDAA439F668494BBAEBB53B2974E20BFC9C7
3C2D56B0AF69956685D2F7B9D7C0DB95FD
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C071D06D71D60CEEC9FC68AAC0ADD1DD74B262
0156612EB4B21A3F4ABD34403540C124221FB9DA5EC6C7229DA9A1D033AB828E
9D80023B2C8E68FAF7A38C925E0587A1CCE432EBBBA598B201F5AD036BE7C8AD
B8C411BC79646781C4519B89DA648B919EB362176B83298EE2D8B405DC66D81E
C655DFFD1BB283F3C5DEF1495FF97C798C213036AD02BB07FD42EC5932E79727
ACF464295E75CFC635036CF27FFC42DC2919CC167CA4C2E673040B7909AA26E8
123B3D9F176F6510B9526E94D4E38E62F8B9B96E2D2D51BDA2FB7C6992B79CD8
3E40292315B0EFE711C8FCB37968B8AE1BCADE6BD8A3BA1009B34137B90D924F
B2784C9E13F0795427324E80C175BC99140171AA2F40784356690DDB982F55FE
EFFCF946C6DADBC6A907C7DC28850415D9AFC1C8A868801B990CE2D26AE40CB3
4EE0281A60063AA71E48DB8A35E05C2BEA1ED5BEC68717E95B7597AD7CACDA2A
6A4E8808BDF0AFFBA31BE1697149D7BACECF4481DC61CEAB7476A2E00CD8EFF1
37E476FE5A098E607E25ED29F4BF3409309145BD0530C8A76E85F59EB0890ECB
A12DE954F33220ECCE5E9CC4B52E97089790D08FFEEA7D143DCC7C07BB2694CA
6709EE19C11515E6E967043F9162C39D9BEB2767B7B31EA068C594A63173F7F1
67F3D6FE97087D19F73EEE205A47785EF3C453E6F77A08AE9F93F4060DD19EF6
6DA5E780DCCA30F180F8DFB0CEC4602AD1201C63D91450E7B5F44AEF32087A03
0D933A941134E74040E6E7E797E18AF57941DDF7DE2072ADACCD3BF8D4CFF06C
5B946E21D0F5A799CD011CFFE4CF0F571B4377AD4768FBEBDFCF6B49F09839B9
35B1F7AB20DBC872DEDA90B79F113F5A4BE581DB49C5EB8C9033B8050C143424
1EDB333D1DCB862DC543CE420CC26EDF9639E4256570975B25C6C1F06CFDB2FD
9035344017BAA39283C14E3AE66A14DAFFE2CD87485598645C39B92C18AAD014
7814BF27C8FA6DCA0BBA0FFA552B9FFDD54BDD8C7F84484031FFFC0AE8932A64
53D2632D9379F30231361D03BF91F74904C7106B6F8EB6ABBB29858F65E937CD
E31D67C847719779DE0B34CECE88A8F9A12D46B8FCA50DF4433B0B8AED6A63B9
E6512B667AC78A09A780813B1FF02AA967B12AAFAA0AF1B3DA27604A975C2DB6
FC1854457C67C54DC08DB989CA3267B2BE5B8178E6B7889A33771F86276E6DA4
F83033522871198AB3E954EDD88B5059BFBB42AFFC2738CA09B628CC646123FC
9C2BB8B9149CBADE7A7953FB4FBAEB6078B410935DF7D6D5064271899313C4E5
0DA12BF2F08521A17641A2F5541EC8419514939892C0E353FB1785CF9CB67C88
AF752C2A0DAB509A424DDB9649BD8A846E6BD3D374BEB6B9DBD5C10FF56E2000
AE4AA5B339C187F52630B52309834F266D778C720FA9BD9CBC1F322A39EFCAF5
85107BD5A5C188A6409352766D80E77B1270019E0EF57F31E9F13B9483F070F4
86122EE08A4870456161458B6C93A1602A5EE583461ED91A90CA5B743636AED8
1E5142CC0A7DC998CBCF84E39CE3B141286A5994C60855979B402FC1C092EA15
1A6F3762571629775247A6AC65DEFBCA10A51ED614E0C7FBC7335681207464AB
F8C4ED5B883E7A4D01199AFC3C88B0E2AB5FE014A84377451081CA0390DEBA75
7BEA45FA3171095052B839F7A2A9E41737F4A4CD704E8EAFC757116FE3012E01
AEBF584F6B34EB3F9C4B3893DF4E25B71CA17D427219E0E2F3F7ADB530841948
1FC1CD966965C72E9490C31153E2A0DAB73629A1DC0ED7C058AD150C4D5BE6CA
FCC7D71907232339F3FCD771914933CABF613F0F9FA3E206172B0B4ADD1D9744
00A8C2642147D4B652A8F1A7E5BD064E369FC591D4739533513C202E9DA91CDD
1581D1A58898DD6564B1710A88AEF94B888C52681BAEE1E3EFB4DBC694919D4F
41D01894C91D8E03F68DB550934E5D783537D2B57CEFE23ABACEC756F5D1EA5D
A74192035D2304EC4F9083716CA7906B80486BB5C79752270821CB12BE7ED0FB
9FEAA580CA187AA3C9475070809AF6881F745EC71298D454AD31AB998F5821B8
2070122634D5A247EE4D8672339B1D90113137D4FEAF3CF3A2456A8712556956
C5A48721B1B1E140ABFF7793081B2B092724FC0F129DE772236556BEEEBEBFB1
FAB1037FB0997B367483D2C8C0D44E6111CEE2EF443F84FAC7710AD0368D542E
8A629BBC3C6E2D85E984AA01B575B37DD1D9B0D453E3A73EE7A34FEFA5641BDD
67E694671B6250DAFA3D85E0A78E946C78E33A284D4F92B73D7AE87B13F108F2
C4611CD948F30F56B984E409650E9CDFFD63D996E25E5C0E0FFE02BBE2237537
8C945F31C26697A7ED159B529276995292581CB9B29A54F4F4B2D472C74909CC
47C1675DC6FB9A932C0552F8FBE17F4D8771BFC6109E6D709951694157B3CA9B
1F3952D101D6CE60D1A0A97C99EDB3FAD64BBD337BB747424BE88E67FEA44610
51A1F65159650D3A2FA882944E6E8DB113CE928969F6BE3E3B8BFB71302E87A4
5A22ED99B04853D66E5A22B56F79FEFE917A6F436B823B1A2FD914DDADEFB5C5
CA3A43E348D017CE2040752BF94A98902E608264DED8C3241F06469FE18C377E
448EDBB0823526BD66B40F0519F047195405629408224D070207499DF2F43E7D
52E442E3B6E9E3B08F88C9961E81373B96460077464C7DBE6C7C7887BEB3F685
B182706F5DB4C7C4BC2FB81A7D040EC5A04E5C5434D732318AE791EDC71A47F2
AB39A992EE304763BBA1AA81F9D74B24FA7EACEFBCAC72D673540922501841A4
F7EF18CA86AD20AD76325914FC0197DA6D7632947C4AB3AF2133D1A1E2719511
F62BEB9C879E76B74493C7D5EF38E01CC031CB4CE13C2EB6BA2695E1AB97260C
39A7CF8F690145893081D526990E92C1FB18CC4B968D70DFD13C6223FAC9AD31
2E1240ED981AECE8D13DC653D59255F868EF158EDD781E9D02889907B23F00D4
F6A0D9B74E591BADA348B09E22B1A783A8EF2AC87D34B6407522AB33411ECA4F
6C765C85ED1405A5F27B28A16751402AB278A8099E29940E719DE1E109E5BEFC
2A4098E77020110C37A90B5BDBE279918B0B31E08031DB686D518B4CBB8A4D0B
EBF6750A452A7F706EA676E3B3237FC5656B29CD5A3A04F82AC871B526CC28B3
A61D985EEB3610FCAA433B9C6D4683C512F0FDBF3EE6FF552D7BF0BBBBA37050
FCBE3F164189FDC8446ACDE8D0D4050278151B46E56AF826A0C2E9389C2B8BB8
E38579D281D5142944D3322E1C66D456E4C5DD727AA41FA5B369D5E10CD71832
A7DD40DE855B47289C449B6AD8D5F1D557102050EDA5F1641EAAFDDBC082E579
A06D8A3A323458808BAD0F4B8A2BF406DBAC4C5F555EC96E760C8245A1AD9F50
881DB475F892F868823CC55D4859C09148529FBA57A392127B68F5366491D1BB
097D8FF4A71966D42DD988F48C8A1F4DE0449E6AAE79500C42B4EFE4936D0D00
0FB339115493C54BA1B0981AFE60C32AE5AEA6F1BA42EEAD2C89312DA8D4EA9E
4728E8FE799616C7F79EFAC5C4F5BCA65317E45DEAF86873DBD525C29DA1F2D3
3041FFA2445CA658CFAAED3C30CECE4F2514A132C95F5CBCA3A139F60B929FB8
72EB89B9E71EA6161CE4DC61D1F0FDB69AC593886BB0459536ED20609422AA71
AB51589A018331D25E5B0F5E48FB91D15C10357563DFE608A3CD20A80D08E270
1A520E35CC383CE5CD307D419B5EB603FC44D6869D4A1731673EB4D084BB1534
7693FC31907FD6094EC7065BED405AEAFCB4783DAEC99BC7A3A82EB333E78317
ACD72DAA3215E2C2823903980506A9F523F673BA8CF49FF629186E5AE8335042
BBEBC8DCF193CA3D40E5337359272C890DE990FA8A632DA2E3BC27F9476CB699
295F324F6901C647D65547A0EC71D4169ECC5A9AF15C361F4CA0CB8ABF336E7D
8DAE03CB25E6664A35015FC9684B7899AB6E46C2AC119FEE2CCBFAE53B96143D
E8C23DBCA777AC4E842F3A5247CD38F0C8DFC61D9996A8FBF914209AE12FA680
17DD0820EFEB02CDE5BF84E5F1E8C8572A5A86D808FF1497362CC036695A3B1B
CCFCEDA9577FB496F376710C86A02109B864FE34566E17B4A1A09F9BA10DED06
0F5AE4AD3C94DEA662B7342EFDC90B3BCAB589A88641B4C53C0D65940F2D3916
FE46C254C25AFF36E0A79983B5D27B079F4B1FE2A89AD72D1D1AD2BF8BC6B31E
4ADFC2A90B9A7B70258F993C87F2C75BD72B5278CF84E2A883DCF21F61FC2EE6
DF51A16B4969B5619E2B15FEDB0F7B5D8690F5323C48054E47E3F61DD358C698
35A31914818EF301DB98A91C6F34AA573BDF47829A0BD0C1FF5D6BAC2210992E
8C115F926BB8BDD04004EDACB8E3A599A56D93AF6603E7BE95D2B9E8B9F50EFE
02A94198A795EA3AA8F36F17AEA7B3CF3B80E235C0C70C895EDF6B031ED3CC1A
7DD250065F3ECA5C4583845A6E0F89C9EDC2F8737A0C119FC35E435A69079A46
C84B3CF54BAAB62AC19D25E46C51D541D23F9D2633D0ADDAF128E4E336E41C0A
F1E31DC3AD15631556A6C760A49679FEF8377A04BD2709C556F99D6D0A7E6D0F
72BA8FBA57162992D855DC8EE82E1FD21984D255DAAB15D2530F5004F063AD76
EE2FA09287295C79AB17E0EF4C7AFB5ECDAA96392891C296D28D5263EE631BE2
0CC1F6D56A03DFB8DF16CC64DC2A4BA25C78CB3BED5E7AD9383F870121370795
8220C6EF8004033A4C316ABB86A95F8FBDEF27B9FC1AD3259CE2A9E4027A59D6
FA0607168B4145A22A5CDCA376CF8F657942D643E7118C6FB8485C3B49DF8D5C
B26E31B287804D9E5DBE8300564D6210CE95546E90A839440D5347EFC3DB1019
7E7C1F9FA4153F56D8354C28DF9541B60056F95693A5DC3207DBCBD73B067552
BD50DC53426FA7629E8518074632F6BB0639E2AA1DBBF34708FDB80ADF685477
F1D1B294824781CD883EABB77A8D8A93CE85F961413148C812BD4323EB029D02
1211373CD1ACCDACF821F97F498371BAEDB7B887A8C6479AECBDAD3753FE1D35
BAD23DA4DC7FC3B4C147A3CA6B939B4B19E81AB223EBCA7E622D460701760E74
95135D6EE1215286E75E64E9F4333B259C51DB04F83FB8A8CFF5EA08B850563A
283BFD9FEAA5AA98B091AECE8681999D7C8CE7081C63CC2F99FBF847E30932EC
89D7AE31C15276590ABC46672EEF02B2AE8F89259944B1272B1259D760D7B237
396F4F3D80745A2E1EE8BB1E2717DDAB52753B36705655AF3B0E97AB1E6E22EE
5A58C7B3B5A46A860FA2AF035F558B5970DE1368D2F20663BC22AEBB8393C4BA
41857657A780F301DB98A91C6F34AA573BDF47829A0BD0C1FF5D6E3E3E23764E
9A5DBE640CA98585DA2A4AF9DE5A50460EE4626641060E55159270B4794F9C09
45FEAC295D142BA5CAD6BD84A5074B5832023E809B80408BB9B61C2AB51D8CEC
6E67F64B36C58C36A88F60969A764BC3650C9F608A3D911E2C01E031D302E806
1FD13C0751886DE01BC4780E971D3952648BE3ACB42BEC6D5B5DA0CAF19F96ED
F6BE77ADAD22FF83BD861FCD07E1302D6A3AC106A2E43A7E81959D74397B05AA
139C11D8E49A593F43BFE84E32554E529BFFDCE98C901A79E3E0354517C3D95C
E9C02C72E8CDDA3C6402606AD16969621B7B86948DED33D8870DE90DBCD8AB39
72CEF5BC502DB98B9C81A16F71982B56E3D30B195E00D83250BCB311128B7FEF
549C4E2A1FB5DA9475D34528238FB664FACB2DF3175DD6744B6F80332CA317C7
C7F1E95469943D8FA54558F298E38B7C47A25EFDB18D279D752527A0A701EBA7
3263002176824B16E5192FE1E7C6EF0989162AA88D31807317CEF7334C32EA38
CBF518502AC8917F8C0C4DDE1AA36C332BB853DF3C8BD16760A91B02D5E8D679
C227DA8E3207E226A8165D453AEE422EFF10547CC2E44F566E8880D7BF75598B
33B68992E7A2F38FC0102D37B14D7743D97690DE073F312A8B3CC3ECC121A487
2C7A2E643F42D81DC81DB094A39F0AC8535F07BA31C71CA5D158A149F9312B73
E4D32170A9DF0ED814B56FA36CDCE4CA26E456B7F80E01E965F2ADFE1F47E8AF
B7E2430FF5C29D2907B641B4829531FB2A32A4C0367F3CDAADB9A370228BDD72
D36A310B38B163A986ED841B89F943386A45621E129B313186B14136429634E4
766722F56E044B37BC6D86BD2B25404BBDE5111A09F2F70FA32542FF1E83E1FA
20A5DA57D8B97288C1771381D3DAF5B148F098CEE2A1576FA4E08BCFDD164C8A
2DDB6E607138E02333C892AC77F693FF450B0BDBA1789FBF48822B33BFC5FAD7
3A5F027F88EDDC45179F7225B6871B570EBE05C9D95D8F947BD0742B90BF5407
FBDD9646E0166601B3481A982BEE3ECAE668C682BA7058FF2B516EE6A1F62AD7
88D7A56D82E27037A9D4634A52602A4A406CEC3E6B836FA313F76E5D3BB8FDB7
30DA86C9CA2049211DFC67FEF43680759C5753F9AF573A9C560C53F4EC10F01B
24BD3061707FE66ECD490C249247B1EC843A51C18F15B98E16EE5DFB6E5EC238
5A2B60667E25B40CE5F8CFB9AF2BCA1DAD558C1F217EF746F550BF0657B5DC66
0728C942A87295109A90C9155DF0BE682193E60B2B5FED8BF8541250B992E39A
E2E7E3C936A06A609F48029307D8249FEAAB72F6E1CC2C7A3875079EFB568ABD
139F70C1EA8869611D9D4D5ADFC1463D664FAF1E15D2819ACC236CE307310AA5
0B8B1F887BF840312068D7236450B39F6F363E3AB6F8FC5A8BDDBA070CA8F456
2F321D000ADC343E2B1931854355DD892B5A163785EC96245A45B4ED6B5BF9F0
750DC175E04BED0223734E5A7F68B96A1184091D122ABB1E3895721160D7C2D3
174873F55307E929B392CE3475109E22CA5A270A188A7649D8D1437039443AA9
46A7630D1877A6697C2FD31E9717FE5EC1A550EF9E2FDEB0F43558C7981EB189
B81F8D1BA098074266404D32CBE9E1B8220BDC4409274CE1CD02D148724B2561
AB1E54A672AC2EF7F6BD91147CE9E15E1B72BD078B9B595DC4936FCC0467525E
BA8965CF383F4F4AE6DA98D1611D05E59ED9BE06C7BA2AC655DCDFC20968F5BD
12B078701E01F539C74A0B5D6AC9CB4E4BC1D7C2248A8F6E5A7695FE9B0A14BE
253B4345768F4A78E26D7BF1AC08BDBB8351C7F5C1C66C9F9BEDFEE780E04042
3DDC5E3B4876FC8A9E07B69FA56A32CEBA6D7B35526797A8C94EA0723B306240
918211E0EEF0934AD0C63700B4526A98631477A19FE5E168BC242740D8C45888
D4A0CF8AE610E7017E11E78CF5E7141AB9009DC1FB985090CA164DF0AAE5DF99
7D62692FFCF574292909EE79FE294598B8493F9991DE93CAFECF7231EA8FB209
39EFAC81F69FEC9D92AEF953CD07A639CB7F9A7CD9CC027EE23F3B3BC61A40EA
57044322C232BE97AA1DCF6B0E4DCB2DE2BDBF0495BD0ED7DD0EA7E72267A508
FBD0C338ECAB53C74DC4E883803F2FB7FB3A3A802092EE50089F30F3C4ADE4D3
07305271D998208A83D58F3BC00D46513F0358C43A22C413D9A6BA6B3E100EA8
03E2F0198DA96155E68E8F6CDE3F99D19B44295188865207E8C79FE8C1E98BAC
BDDB68AF7CCF8E9071B691DE0DCDBD7CBBF0BF03BE50426089EC7071143F5177
610D4C2683129C912ACDB47AECE3F9786E47398891C3990700F3123E5BB8ACC1
07D8B722419A9C1F8EBE330D7A360FBCB6540E7EB3B2ED0460F81AB38B9240BA
E845D47A0BD6760B31870D69C4C15EEA09E1831354F7C4A16212A067BDF0ED84
C9A5735368A09CE46A5C17CCAC557BB69FD42494D5D2B9C1ED812F3CCEEC1BC0
79E837DCF4EB4E495547C25D2893E35E24435F55A2D66CE9FDEC1A5F81FA219E
49C2F4D2C8EC80D9E187F9E15825F57826DDB17A35CF2E4C380E50E1797F8558
26EAB926A051DDBBD93F907D31D6709284C86F0542486710BCF518C1B5D1E6CF
23E0D97980F20EFD24A6644AA26EBAF342B36AEFAAAC0AB3727E59F1642789A1
765F02944B8E689BF03404F5426F7148BB8FA709AF1344271173529372AF6DA3
83511770EAC39ED55DADB32778CAE943CE6E928C9521FE45A04F184800733B13
440F514AF796BCDD85974E0AEC9A164C369C237DD28FC4BE2843036E872B2A03
163F0CAD1BCD5F7FBC20299D5C6FC1EDDFCE777B796FAD72EEA5713D78F437DA
E50160FAC28C1C21FCF83DE1B5516CB04C7CABC1D37D26ECC85EC180EB8EED1A
6E85129293842B429B1AFB33D68BC88143F92B5D64DA3F8DBFB0D329C7450A21
E4F97C8FF528ADC2F97F87C592935C07955C1F1B0F125261DA0D2F7312CE5B3F
3A1DF65DD60AA679945BCA6A71E4329DB73E7F29098787D96D89D74796C6908A
EFCAFC2C9DDFDD855116AFD66EA16F96AA4B9F040771F86CE98994E113749F20
47C28A0906100EF57663A483AA7375C850A31668037014979D53F051CBE5D246
FC0CAC7850013FB3F1B075D4754A82A584DF54EDC7C8DB59B77CB7A8592B7CFA
7D097BB4BF8EECC6634A8112ED925C55E4B0DF0E5BEE4B29E5DA8177D46930E3
E90AEA7B324350D5926BF3AAB7CF462B8C46CCC43F2AAB8ABEDEF76AD7F14CB4
16CC957E016A4C72A6A2FC3DA24AF084E7544D8A76154942ACCED03A7785D88F
EE716F2A7D77A990393CA5CBCA996BE2E5186292AE634456B428623FD1E62155
5BBCA26C986ACA69714EE280FFCC692113CC15C94DDD294049748B473FD5F4AE
9C321F8D3A7609539BB1E313BACC161E4DFD3BBD84E1216F1446F95F7E0B679C
0D5FE02E0CF9AA45628844A54275C0E5894655E7B06095437FEF27B81EB14663
E3073EA68F60F1D5B1A01C9D57853580E6F180343DA29EB6D4908FC8959EC547
4049A693CBEBA4E07CB9B5D8DE5E0B1C2257A8DC4E816B78B9EE734118C99128
2B1240D3E464E928369FA93FB926139676774399E370879B537E40FD383EFEF0
2E3CF25222317FA36FFFFDC8DEB8DE95405EC7DE4C780BB7B6AD8195784DE96B
ECF95B625F9BE81E96E51EC9602D4654DEB38E8E94225D8F864E791EA66CE3A7
B80CCCA6788AEF25264822AB4D94FD51449F12FDD58B76CFA594F3223C22C504
5B028700C8710E6F425220C975AF0249835F399A5539D63AF043C136465C5C6E
DD6AC0425D8F374CC51FCB15600FF7A49A4104BC29A0D7D3B555652AD4E14D41
04669F132B4584E73C21F2C83078F5D96EDC72B7B9B4BCC12F4209B1951AF23F
F685C14584FF171362B3551FF7356C84CF0F2434A53A3873E1326AEFC575FAEE
1B5EC42CDDC027C7AAC514A42B45A190590663C03DB348ABE792DB5E7DB73311
A007ACCC65F1BE0CBB445E9DC99DE3BF32B95CA40F19FE0EEEAD46783F79B52E
24284B8FB0941BF71DE5A8C04AC209B2BC1057E1B23131263F844B18EA91B956
02F465D1AD4EB85656E66D39C6D94C1DFC732A196B89AF8000D828F0B96CD1B5
C4C56944521E76439B5DCA7732A29F37A08A140F8C0036E35125E11CFB8F1E39
7508BCB97A2A87578E15D147311B7C07C17737878305488298DEF3FCFB79A08C
1884C223247C65FA99AC139A69ACDE989B3FD5A2D5C0A6D3663AFF2DE36A2249
BFD2DF460161D3EA5C1B998A83F2F595DEA5468CAAC2B78E5A1993F2B6373BD0
E80C86A751E25B22ED67B8950124818EB258558D55DEB25473A60B53D4B46DC4
CE9B9FF1A7480F80EC4A178CF4CE94A7EEF8762859353E43AF38D0D4E667A801
66DE5FBCEE3580C618C1814F112E445F32C0970817BC4050803AAE80CE06895E
ACC815D11C5043C96E89E9C036E84F31BECD3B9F74A6B21D04D33D8D6867E328
F1F84E503F30CC012322BF86C75D542DF2E2EC862783E843F9628CD09328D96F
2191AEB4D4ED70395961900B71104E33D18C699CB21CBF1E702A43C212F7FDBB
168337708E78CDE23E82878404BE7530ED3C037A517E7F4D92C7AB7DB46166D3
F9D51BF73E000254A8671C3523CAB620C1D56647B6CB1AF0CDE7B27ED2707252
504B6C74D1B1215C450ECE4FF7677CEE2603269D5F288AB410ACA8C41E7649B6
6330C265A5B7F41D915514AA0FAF252C2D470BE8E487B5C8A276C074A1F51A8F
AEF46319AB90126937F49345B442931D89A2D64E9CEFFBF0E3792A219D478D91
59272C789B363F4B77BB6F513F2D1CF82BE364B0469874C6EB4C3D782F2BB7EF
F536480AA43F0D960075B6036943E3EC779A517C4D6040629FA35ECF5F72BC11
EC5003D3A2FBEB95AA878584A8ABDF1E8CF78EBE55ABDB3BE9C60DC252CCFB36
274DC69EF2D60CFF2873563D5F829FAAE46F12CC16254F52A26FE47FE41504D3
E851A0670AA04A36A3BD6DFED9BC3104B7D31460E3FA77DE5FE016DB36DE56AE
7E663E81752C1539A5613325DCF159B32F71199029B3C52A85E3A069D5265B78
DF1E8A68FD35569FF3BD8484D4C450FD2CC53E9D5D933D8D348873F7A02DC5A4
062A9DAC0FEC368B11CD07341EAB622A7559CD4601AF33637D19547C8D92E24C
1190A50E8DCED4C7B578B8FA81CC9559856404124F851CDAC202F133D2A0021D
5BA5ABB98A5D4359E63E7B5982A26F1ABC0F7843685481E40BEEAE93DB98DE23
6DEF8BA32A536C00BA8999080930FB24143DD7851B5539E97DAEBC0C57E6CAD2
FA699ACC80B728B77A07EF96201F5BC9187B8716270EB91BC97E629FD0ED9D49
87C1C3F19BB1DF75F985EB18BCA8844B267B7610A6D157EA3ADA7CF63EAE1CDE
BED0C8CF6560508A7BD68F0D6896FA97C1DE35DD2DC448E17A060D578CBBC23C
7B47CFE6CFD6EBAE3E24A85D002445BF81B4BB62B6863A4CFAE37F715EDF3EA5
A33679FEB21AD1156AC74542B942B0A4F70B64F7A89EB8D38652FB57A729387C
6E48EFC3641A1DC59A816C933FF531910AFD36D4E7369C37B8761341D2763A1F
F764ED045DEC3F74111957D7B00FCF5F246C5AFD97D7F7DAEBF8092DFD40519C
D63CE8E38A742078EF5DF4BCEFC85437AD3B3AED02EF14AE8BD323700B083E6F
B9B54FF40B63FFE88BD7FA6074CD669B124A8333FC4173EDC8861F00421BDA29
947272ECDD4FCACAEF0B0D408990758FE70625209BE1245C285B171DAA6BE705
FF575048CC768BB8F138C00B63BA4E40BA8E5C0A6D51ED6EBCD11B5068CACB82
1BE08A1B06587ED0BFCD31833B1EECAF947E67DBA7060CF90D715B1B4C7A6B38
6466E51305470160FFA5A9FCD721692FB97A0DD77737F84F944EE4F182641F05
1987B79A1615938B81AFA5C99B02AB37CB7492A3032BC29ED513ABFE8E6F085C
4FA6A856A3B0FAE27B20E1DF3B80BF4B5911464BA2D6CD239CAA9B28146CC516
ACD809E764C8DB3BD7F80C944959B74FFA0CA674B3A52B5E428F6A5529408AEC
4A8149338459F8BEE4E3EB8047907EE0174E9379E76128411F6F62DA21245722
95D7FDF91A1B0837AA7F80FED4EFD79B47D31ACAB7921E974E0F025141E0E37E
FD447C37DB455D2F083DEA179DA4FBC32DCAFF9A18635F0C806A7F79AB1668CB
03AA08FB060A2ADB1D7FC295EACA3E7EA4F5ED92E78990A082ADB3A32F0774CD
B0A4428FFE3F0A1088EA71BD2DB74105301D0957D57EE4D15D0E8C5B0F468202
F91976A5D9C8BDB5514157F1C88F69F5F803FC20B59D8A94F59777FF203C063C
4273C41CC2B831FAC8B35A70EB34886F37C2D18213DA6D79F0231FD18090D6EE
761B5AD3510CB3E47EEF53A23BBC9033481E0B0BF46B0980D70618A821BAD346
F807B68B77266B06B756BACEB5FCD36A0F153536DAD78AFE7ADEC90B959AC3A1
9FA9D0303DAC5BE0058B7AC46EFC13F30FFEA970858E80ADA63052023889668F
4C3E84553C56AE4C8E2478A28257BE4461BF0D5737FEF579DD93DFA22A948E88
B3B323E0DD7E5B229A8753CEACC4610765D2CBF708EDDB1B5DEA54A92603EF47
888C851EEDE853AA9F0EF60D11E54B7BA0471056B021C03FB2A2D2262AFC1467
A7217C1C887F89586F84CE132D460067CEF74BB5AC6ED2CEDE02799D369A0193
3B7A77D835694536563232D2B7C11EF06056690527A4EBD1F1355C3BD6CFC4FF
B40C1CC5E799B3728AF8D6A742D6FB17DCAE007D8E2C41A2EF916B6A2EAFB651
D0E490A79CB8484AE4B453B00318B966EB78912997CA884D714876239501D7F8
9D32735ABD099F2B35842AF2A6CFB7EFD6B57700B114375B3A18CC1B963DFC1D
7F5B9FABC9B989941219026BE888DE73CD3E463B692A4B59BA7A760DD7A81CDD
A23CD0707F8B2CDBA530E9795CBE691C141A143280C65FB2AE0253F1E002F576
583BF8FF1FEE3ED0DB577DA27E45FA577E9D4B958FC9C413E5FDF7E3F203BD2D
3299DCFDAB3D314077FAFF599A6162779C3F18AD0908F75EE8A4B38C1C582F30
C6DF5FA2097A078ADFACAE547DA5926B3D5C9A7A59226CBC34EC86D2CA91E322
14DD857E80C33FB4286BC47DC77742A8C011C9628BED9C7AD8647A15BA064C8D
BC0B9A1993A9B392A4FB76D29C0565E070600C36FA9FEB325D9B4567CE2EFECC
ADDC8A013BEBF580573F64AF5AA364DDE7579E59AB8F63B4E0D1C4D5047F251B
4AE34CA73B1499B395127BF2453FB7F04A266A9662CD00305B894723028E0529
C6B747E58310BBA39C615BD9DD02347E6B3AAE64A949E5C87CCA39AE1F17BCA6
C77E1A59B2C119DE916B29DE7054ED785232C74B7B92C5138A7307297BF2B08A
80874CF0D889281F4761B0DCFE61E56EDDE14DB1462E4F9859384B15882C6B0E
2214137472F7DAB6811B1027FDA86CF66E032F1B0D4946100FCFC2BE23B43458
474D510E94FCE182C53165413E1FC4EC239B58976F94434C1FB78334D81374C3
59FC481521A3784357B8E3E7B676414CF22CD112C8DD5A99D30F55D7EE28DF2F
0F6174BED2CA19D075A462526DD5D645E764B114853CA1BF1C54B28F3591C1B0
5ACF3D46952ED60024BBA20AFF928DAE47397075327EED7195DEE9EDE5DF536E
CA77341301986811B7C76940F64EFF4AFBB062D33A9D22D14C37AA9EACFF7CC8
1EF9860D5DA595CC6778A7F06A3C36A4C792D168DC61B0E00C91D60564524D7B
1F773165050913614F8EF8A85BE29E113D06CC844D519A65F780A78E56CA9D87
4106924BF00029F54AC39F6331A4A81BF6562ECE87586E03C99C4FEC726E5D5C
D4281510E8B82A5E5CE852D1AB080F8E3F97843B172D926DE310DE9062984F69
51B5AA2EBC98536501922111BACF45C80493B3ABABB911186600AC62FEFFF4F7
754935BE18AAC41C860B70833B92CB7228AB2C8F68D03B6326AAE61A8AF0431F
373DF8E1A969C52A99052A4D3A2FE770C9358686071FF45FF489BCA0F4BAA4D5
D965566BCD23CC0A112E0565D1E1920094A0509510A0DBD662C731340D67F8BE
C315412BA9A18E9744CAC5F1C047BDA803928A286C4E76A6B2EAEDFE2FDB17FF
267D0F21C35E0E6977AABA48CD601358BFC654F3C7516FBE690A67828F56C593
686101542A0830ACA6918C86EE5D21DBD34B2EF84D336A889395E771CEC29602
496D2F4CC3005863B6DE09084927E0DA3DB454B1BED8CD3EC75326188E28CF53
4185E66A3A161EED1F99B8496A9FCFAC13492DFBAE8110E9811B2898D889A581
451395C7C58186048384504A909B92A16E8AE2275E83777297529C5ED2573FDC
622D7D4307DFE77A4B16D1848D485679E592C1AB0CB02879C5C4AAA33FCFA22C
0A4AEABE4D4DEE308AC29CABBA411987C715206297C0971364CC5B83001B0789
5F0D8126F67F4A68120DDA56FC6E466A3CA47F0F2383A60025C5D0C64D459276
BF2D8F25F13137C7F1CC459CB3B3E945760E98EAF5063E373A084CD6829DC18D
063618B2C9C5C3C3F9B01526D9D71A74984522CAFBAF6CD275B0F8470DB58184
D56DEFCA7213829FCEAC430A54AAB1C27135F14DBBD172CCE6CD2B6095B0157B
9B295F244E6197FFF3759E08318611701B27F723F3786A03BA85152A3C6A3620
836DA8BB5CE31BAA722DDB36BA5642CE4117AD1D6B9E368CC0191FD3EC665A0F
563B55F2738B16DD43CF81342B8A5B460CF17342B3EC42F3EBB3440E2E602354
F10D0B89AA2077894331ED25BF6955E13DA0B4DE3740C28682534E57DF995F87
B37C537FD5D25484B3B641C95A5D96C622B04FCDDB40B675F081053377364DE9
9FFAFE6D22E975678C98EC8A9069AEC8E237722DBA55BA4214EBF66B06D64001
2D108ECD3329117185F2DCC8334D331FDB4CF16123266B94843C4586F7B0914C
F4136BAF49D0A85D7764EBB31166A29307F6343DCA5AE9814FF8EBFD456F7784
4FC27438F6061CE0C155A07D1064B66DAFAFB39332B22F2C43C3AD99954E96E3
9B52434EB13675C377D3C5C7267BEFE151C52A60427176D702F257ED71B2803A
6BF70C74D8EF4783865CE3532C2BFC6208F2BEDF5E26A4CAEAC397152D34458B
281D8EA05D6583D2796F440720BE08EE3F855A597B65071E7946D81D3FF2F85F
8CC4417D0D02BF2477552010705ED42A0896ABD62805E2042E248A874E814B3D
78F46AF4F001A3885AB7E7C4F285F9BD614A00DE6825572189A19315AD3976AB
880E5F0AFAB2498FE1D79954BD53619CA37601FAEC649E37E9038CEFC41BA172
055892C47614A9035E7CD93575C377D3C5C7267BEFE151C52A60427176D702F2
54590A4A2E016B5FEADE1A79C0AFAD4A873434BA54F6D717AB58F78A4BE43408
C7C2F6D4465B31BDEBFFA59EB012DB2B39A9370330D258EE8515E8CBC0DA34E7
9D8085F8BD147086881CD9C9335856F5F195FCAFBC3813546176EEA6745F62F0
715C865422128A163B6C6AE0D98CA8116AA0AF078126540BD2D435D0AD6CA923
3144A0545BD34F7449237157219D79611E52DE72B51F2BB650628AC5E429F423
F250EB9E8AEB5BA66E6FBB5338F24FE4F9C3EFD3404FB795EC4D0857AA5D6620
C95021DF41F3DCF687067554D464306A44A49AF8095E431F91B8EA9B312FC277
BE315B18312C8BE99537C3E44E721A361BED6541FF9AB02AB229B8D20C7CCA13
1B23CEE3EA3747DDE3939D38A4E5DE096705B4034226D6B5DE97BBDD742027FE
22B2AA7037F55F05E547ADB16F56669A201DA41C1DAA9B4E66C8E5A03D5F1D98
DE47AB51DD77014C2925F4F0125AC8AB538565E06699AE5D68759A52096B7958
42B6283A0129D49E7E9AFCA904B37EDB25A80BF2A04235CD244B0A88652F5A1E
C5546FD4DEAA2A82A209E244948D832C75AC8BD1ECDD9992E9F8CF3DB923D549
EA4E6D98A6FEDF3B2BE1E54BB8EFB775F1BCE8B6B9B0696233F5AF80CD6A7427
3F5204CCD208C109EE75EF233DF172A38D2174B4730947637701EFBB2FBA3063
483F9E82D2336227E1D03B98C42383BF31B68F6A6309C9BC0124812E4286E9DB
31983877FBC16B4E5EC481D8E9EF87B4C4C108E799E71AEE8C115164BD9BF92B
1A79C9C7090465E9A00FBC634995A712AB2E112E3E6AABFC1D6F293F9EE845A2
ED6C77763127B0725900DD92FEAB15171D272BAF7200828B2E085A16B4BB005B
30C1614AEAA2AEC112F30B3AF57D9EAE465FBEF66FE82623DBED8135D5D1E2A2
D9811D78900B7D347046FF9C2A9DA7AEE1F42E36FADCE69D1C31BA552A09B302
16F9A60D1F58E74D0931CE5AB03850ECDAF201BBABA430326604E56F26766AB9
8A5C51659EE74A875CB811177A20A894351D75B4E76BFF75C71D425F9409954D
F168966159B2A302B801CBA292D1C07EB52F3849F14FD66B8A34A64B53A37CF3
00EE316C982A0D58ACB2AB0B6D52C9A745F440BE173AB90CDB8D5A62492E44D2
391EBD6625AEEDB22442CCEB84056435B2419148A456405A6BDEBB44025A835D
94E3FE7ED4898A10D61824D760F2B86372EC36424D8A7581AB38447347DC26F8
B6F0422F3340A01614CCC41D40D27BF1870C1EFB412C14EBB08548C09B8594FA
27E14DDF887194960B9E3222121B24B97DB7866E8CE52B81CF44DA54017243EB
1546BA7FE32409951CADA934F8896AA6037462E2444EA33B01A22F873D195661
CA3A1BBAEA7BCB4D93C90C0E83A3C7BD7646FCB6C28886EC210A1F84DB25137A
35AA5C7691B72AD442BDDAD18F30DB190E4D004740C567EB0F86531E771C74DD
3701419E5B08ED32C290A30B02CF572199F74645C0D9B4DB9DA965633F5DCD87
B03DBADCE87FC499FF9DED0E6C8FD6715B5797EDAC56AD49F59AC389979AC060
DCC4606454904FB9E7BC9FCCAC1D1116278357D8659BCC81753C2906EAC08FC3
FB9AA3D2A83ADAAE5427689ED559EBE5BEE0A331DE6080DA757EC74FFC5E9B1D
2F70A87D381F424FC2F34BF902F401264C69EECF460CF82F033635EB5B3A4F7D
F718E0EB68A4F615AF7AD898C9CCA5105A687B74DAC1CE89B910A9B6D2C887A3
C469F9DC2A96B15D33FE7C565961C2A1C0E5FDAF8955FBC699FC847F077A8104
7021DF46F69AD1EB8532A8962EF0DB618EEEB9F1CACEBF7299500D3C3520DA9E
6E7040E6A0131184185A428C37E133A909D02EA7CC5DA03D0AE482ECB5F7AABF
9749CF4B5BE79087218032FB6D3C67E6A4D8646298E229C517E89E253C6E46CE
01444ACD693258A53F98DB0DF475C8D74928A381F1E74BB27AF07B164374998F
867ABA7A5DFD196AC274D49269CB03F7483407DC1F346E0934D208422226264C
E8AFE6E870382132172F06F105BF2DB51EC3DF2714104F031BF8D85907DFF284
9E4C3C7B62E653903867AB470C9661EC12974B4B88A0AD2FFB4491A03346BB7D
A151B13D4957485E52C2815090CA3B1221A12F749E5C4197196D48244E65F7A5
4E14EA3DEE4621E32EE2D28136724789FF2247D8C7EBBE4E95D9CF6F8D4D204C
C6D61EDC66E28B7CBDA7CB79240357C0AF60E817427A9126A9C32B377627ED3A
D4456E3A67BF5BB49920F6FE6620D699A53E1F1DF8D844BB4719549E214E3759
8BCD577141B8DD30BFF42B4C55ABD3F432E2D3D9A96182E60BC67208F86C7C42
D48B75DF9890529FBB3D24651664E84B70E96397DF3694BD7EC9430C3C2F7970
B696DA577C21452444F02CB398D097D7FC83EAF094FB08A17E360511788C24A8
415B5BF9CC780D7FBF21C20D5E8BD8EDD3011931835A50D4CEE445EBC7F8251E
CD7BB67468D0B7F04516FD1D7DE759C6BC99788940F8ECCB6AF7ACD21613127E
9E4D3E714C90B76219991D21E34C2E2089A27762BAA33B1293BC4C7EE0C09F38
9FF828AA7585F9B7FAFA718A1A97CDBFC25ECADA33E3F6D66E6A404512EA0650
22C9B033A8F72733B7F3B44F48E78519E114A8BDC93D4009C2FDB56199893516
7338ABDBF7E8DDAFFFC3D0003ED3439C567438C6CC6F9A9024949B47ED2EAF15
2F6F7F69115359FFF6B335C54700A78C7C9605BFB0F0379CCDCD04AB6D9BB094
26778C3D750976876ADABFD96E5F3357C75F219EDD29984942CE3E5A6990F99F
FDF77D85D434E47B234D7EE7AF00BC8DA24B5DBA872B606D8DEC5A9707EC0438
83C3FE759DC1E6400EDEE1D79081462E37052BEDC79ED55666FB6BE037AA2EB1
0BA574F4485259691EABEFF092AEB20C9A785CBEBAC7352F57C70ED2E462B4E9
C21D45FC95F4483FED80420E4BCD787F6C1979B70F7E1FBA9D012360110F4C96
901E634981F74FE0DFCDBC13E320FC6896E2F408B840D4FB9786E782B22828C9
05CCC84E7AAA3C6A481246858A42684EBEB008B52B29C6A90BC9C73264E94622
6627968FA8AD8EFA4530AD6F44F7DDB1F7B334E90E1996E4C2B83A5863391C91
A7C0989A5FE68D9DEA3C0DBCF7C332C1413109E975BFFF110EF785C8FD1E8D1B
ED5B24BC6E9028702C35FE1AD1E9021EB5FD773C8B9DD0042C5E51323CB81A8E
DE313FDA5D5D53B2285CB5F6566613FC427B31144927ACE6A31737A4451C9BAC
E4A515379938C91AFD5DA7E08065B0AD6DB135554C9B7F8041AAC5EFE5279BBF
86B6202987505155954F393FC406C0129378B091F6E0E0C2ABC7FECAE4053D8A
001880D27C0F7D73029F171028FDDF8B55093534B853E32D9E7581D407EBE3A4
2FB15333B8666884BDE2736D81497DC8EF0FD5AF6AFF636A37A47100775C5E54
98ED8BE24F858C5E39311E6F14614753089F8686A53448D308EB9EF64D89D5B3
75D6426C7F6AB266B9F07627BE18ACB755DDDCCDAA8680E8103F24F901AD90FB
502AC0AEFFB80624427713EC12DE43B5F289F4C4058F4A02629C8B367774518F
D062DADB5D39353D4B378FB0E472F835AB5CFDE59E1D7C42D5D5C8C5832EEDDC
1546675AE16824DD84B6CA375598B6C439A2E90AFD4DF4A1B5C4BF78895E49CC
6FF69C287D243D1823077D76731EC605C2C85F79D5C6DD740FA2EAE0C2119F4D
770C87CBB418B5B2786E77B69ECA81864B4F28882C72FF1294660CFD380BE8DA
45A7FD3452FC17F10A319F40A9530D41B177BFFBD9B94C2C008FF74A20138BEB
2D08884FBE15A3A7CC5114AB201F66EE1B03ED1FB7B2F4C948C205B5D3394AFC
2E2FC73EC0D8693A9561AD2C3F9C45A11865DFDE675D073F415271514ACFA19D
2B9D2E2AC96435A959D465B74109BA1843085C27C269C751AB2BA3806B1AA19E
70A1D92D48565DB08347E934C223F5AC7AC6DF29B22F885988C306058ED73421
F9D738DBD7BD6FB97DC49648D46F2741B3A91D9032F24ED8F7853E89233BE277
C79BF6BCBA6948FFE6410BC7E74F3FE437C52417492CB8924E2A7A8B42B02C25
CAFE2EB3E9292F3C7665F7FA2E48176AB5869BC64A0C6E9B0626C45A3FAC6596
5B5CA2F739C797029BAA9D1FD7EE9405CB29E408AF7879FEBEBB6D10180E9B5F
6CB91C8ED4E24B5E8CEC7744C7BE92DE482C8FB5537B85222094CC28A53CBD93
1708EBA1C8F911AEDE793A435F04B0A8BFEE7C64ED52697E41935285DFDCA777
CE731DE6B46EE9D1C3D61DB5C544718297254186940D6305C96EE2B9E3E7C9A6
22D69FC020213AEA97259581392B9BC171B1AE1279F582DB4F6DDD82D1A1D297
D1973E6125FF805E17D38C76F5B75B93D3F8B06202FF8DCD698B56544751347E
9AA3520EBAC3107D887716F94563768073B8C4238F51C1E63C2291DE5D3D709E
67CA767DC3D20929B797E1AF1E95D49009EF9F94B5A63D96B1F47E96AE5F10E0
7D9A75E9F4AEA23ED8F3EDCF0B1F51A01691E505DA03AB3799AC275F4152B06A
1720430E0DE1278C559D42176DEA4E100EA4BE160CAB27A95C5FE00D11D39530
3092E064F9EBB05B0F69820935161A714F070388531C5BB9B3676EE853A00FF5
714B61218B4D73F8A9777879C585B192D0F6BFDE2444D8A718026FA6E3BFA81B
903519E95194C31433474907DD9BE9DE529BB4585865A00FB122EF507C2069EE
1E0EA99529639EAC0FB9701025D55BD054E058D3E91840EAAE969B7ABA98EB37
CB2C2A8EA5326178611E1418BFE3237AB288B5E6B4F9091D3510AA88179260F7
A7B77DC3ADA4918075715B97A463CF3E66AF2DD3D0BB8F6FBC4F95B19DFAC99E
611405A28A8E35244CCC8904BD6E26F9E5E0F97FC9B58B6A605314F854A16AC3
011DA8D59DF2203DC0CF7962A86B26F3ABF024EE4AB886ACCDE0D5BBAF141F7E
199B3EAEDC39FCE7F2E6DECC06679D6709FDD826F07FD80AEA7C4AC3EE02903F
5B7B060C6689595069E21E7D342AF58232A83671F46AAD2F828F82856724157E
72588478BF941F1F733A6DDD81CE07ADE6E6B2935B26BD94ADD389BFC649DA7E
FA94B7DA252B4BABEF2C617F5933E0247210E75072857A64630A7BA34D7C6562
27886DB240ED7408441F0DD36F27746C9DC827B1E08975F998B4C43E15A84E7D
EDDC618CBA1EC08E9F58EBD80322680FC4456E2E0FAC9AA767FDF75E42189D55
0A9F9807D58480946C9E0ED103AF606B38272829C49B77DA56D8C3459AEF9356
949ED184DE998BA0614001C00F5D36C5A8CBF1DFC11F715B1D493FF67B93BE90
9C4403FE3258790FF1B3FF67F4C95AAB61BFBC41465667F5491A4A41B10FFEB0
4C92757F97EFB8DEEBE8D06A555B642D686CB0F0DD3CA419BC2D3777B20A0D81
EE204F09E4ADBE5BB5BDE8D8B0F73B4A0F7770F104130515A28DBFE7F9A83A68
54EE28FD1B2F52B4795ED0C0A9F051084E452C075130628DA275FD4F4A71C717
60E7B2BD1AB594E30D797581F5A0E81AB0F7A8BAF7CE9ACC73F75B045E923878
E5F33D28C98CD7E3DCF5F3817712C7BDF4AC84CC380D71C1ED8263707E8ADA88
DB39DD517431692EE1FA1132ED0087D8EF5E30FD815FA55DA2F68346CD40AE6E
3A628D8D1151137A4BED2F10EC351715605A9EE21CF836572E2BFFDD9A56E20D
B3131B9869B878D12E4DA9E19D723986D7A820D03FFBB8803E6583AD867FDE09
2F721A2EE6D3DE9636A134F63AEFFD1DB0E3644BC9E155CC43B0320011EA28A2
E8285E3C1A67DB7096EFB1F419D84A061BF099B8FA36670B130E6AD2A9E4FA7F
BD5CE49A470899F4F83517B5AD2EF25BDBB89B89322146289CF3DD0F870D526F
BD75977C7CE14D9453E9207EE1F683EE4C2E93F10DBB8ABA0C945E7692BFAA22
84F02BD11FDE0E5BA107C68B49F80BC01BADB29A33344959BAE4CB57E6FF0CAB
1468DC84FE0F3AAA03F72C44BB28674A8BFBF0EB1AB5858D30F85D2BDA1FD44C
9571982039742230A411A843F1A39E0E6902753DE7F5E54E2CBE14A20F56A27B
70B9C7DCBE9300AA2F8C6CBA86A8ADE9327E54958A52991F50800BDC90F76293
F88AB6EC4502F736F76AEB861A3516C023DD8E36C4DD3D800A39AC561D5ED025
A2448EDA8A35B55642660550D9179CA649DEDD316A452509D2804B5BE0F6C5C6
EB473638E2040E429B59000BA012AEB09790C43C27E56DD7A8BB02D26465A3B7
C450A0B6C5ECDAD7BAA8CECDD0990E5C3080C3F839C9292D8CA28B507641AACE
2C46EE001F431DAB4869A982293003C83BC5371513272676E09DA0BA59945F0D
1E677AF88B804A02E9BA9C877122736564E007FE240976397D06E1E409013769
EC79E2F708DA1AA8486882520611165AAF3711B005AD3DFBE56FD1010C92424B
3BCF60A5112A8F05E7258AD6BD59ECA9277477643246468572F84A6C7DFD02A5
8EB57540F4BD855CBC028B70E194489B1FD064E515CD8EABBCD4488E8BB1ACB6
2522F3DFCE5D81CAB26B366D771C3ACBD8019C4A342BEC52B478206ED9F8FAF6
B0A70F46877976C12C6BC4233055BAEFD7983E8B82C7DA405015C1A44F3B0336
BB17B03410E59E6C7C4ACBD209E5F18DF65430114DC5130EE0D8EBC305A07052
BD82AF003A0EEBF1D6FF38B0C6F73EE7957AA138B65BF369F7716494BF36A317
D80B2E19A5006A049FD3B35074D85BDA9A615D5C3243063397A70D335D41F593
17F44A60ED73DAB72A2F1AC1DBD34C872DF421458EEDDF98DFDC51AC170E4C75
8D505523E5FF2B32BE0179DEBACAC5A6DFD51F6B5047857685781D6F2347D9DB
0CD7293EADDD2502C915E2823AEAE2114035362B8538FD37ADF93656AC446841
4C1DD16FA4748DA642299C4149A5AE4E4FAC9D0702671BE7D9FC28C01AA73ADB
4AEAA456ACCF3FA9FD5C0D7DE2197E5C92F4958EEF981516AFFBBC84D27BD1AB
D686D1351BD5AECCEBFE302F1626A0D040E4A1CAE32175A0D741E384B4D1C074
EA2B71F11EE71DCB66501BB4E9E340BFB3CA74D8F847F7245D182B5C65AC04D5
E62FAFECFE7C1FD1BA4A9829EB54490428B5A48080A0E95A00D0F166D1AA1FE2
546AC84A719DE7A70642947F38B33B5D36C221BE8911AD865047F3FE90097893
7F5C97252EECA5CA374B61B48F0463541489F56666025C854B28533F3D64DEFA
D26D499A6FF390554547263F60381EED4B36B3D0F2C4A084BA9117411197AA29
4D99144EF52364BBEF00969C98C9E57BE3E3AF28807251F21C1EC7472D56ED0C
13A964E7D60A6D3A73572D79A8CBE198C9F63FFD1470AEB4708A96D534F0FCDB
C0CFA816443196F92EBAED840C4919534501AF33637D19547C8D92E24C1190A5
0E8DCED4C247A4AA4BDFCD19886D6B2B421F7C057DB10F0445DCD34A592305E5
A491A4E8663AFD3492B955E7936A451691F8C126621B61ACD5AF2E7C680A1992
77F14EA2931D0A28725892DA7996380563BF7A3B679EA85FEF772477C49BA21B
D8CDA5E62DFB940A1A24F3D5BE6CD45CCCEDC7D52D05A0FC41A267943125A76D
7886A4E6E5F674F6A9CAD7C3D98B00B67B9CE1D0D743B5B27A58A5F889A5F13B
5A23B661222CF49872856674212EBEFC4A56D4A6280A85CDD2C3C8C4A6A8D661
A6CC8A1F07F8F4CD9BDE33A6A7C53CCCB0EE0D9E3C57823F8D6B050671E1ED55
FDB93BD9D66638FDA8BDD4DE1F10153D551CCD7325032BA6613FC9AA1D2E76F1
29264A99875D3CC1A3F0416B6F5C328DD742A0BD67804B5803FB9DCCC6342F21
C85482B339B493A1170CB474788AA95A9FAD29E710D4161FAF00DBDA73CFA3DE
C72E83650F240B54E88E51C0650398203405B812FC8512AC127BBE2554524D95
8A0024F323655FCD17F1D2D44E015B5FFC2A9FBB35BD31722B422AFF0A86A219
3A1BF363855450A17C8992099875EB2CE350CE0EF4AD2D5D52433741A0018C54
C0761615331EFF4F97911FACB51BDAD45965CB3E4CD451B5A1D6149A658E2BFA
8755702DF94F34D4071E65B1991419335CF5D00FDDAE9BDD7E614BFFE78D6286
46C32C1D95C0DAD9F7AC5E28330B2FEA765B68E59E5DA2FE5DF61D3D56C1B4DE
F1161D0B6036E7F654E1FC0D9A9A3FBA49EAA38A1839358B9D5D8E49B96021DD
868DD75EB6178DDADED3EA072F5414163239CC2D55123ADE1F3C61E0A3F6A9DD
3B77B005ED6236857DDBDA90D1726B85B85B9671F25506C85745A2BAC311AB23
8997A26E8C3183CB8299892D369FA93FB926139676774399E370879B537E40F8
C9C5DF2EDF2C3F52D34947E0964D0E8E89F6043C0D2A3FDED94966CBFB46E982
86E8AB5BBCC5A8C431D8D7BDC3AF110ABB979B0295FBB55CBA2B0D731BA72CAF
5501171071C4795A084EB7CEB7B465FD9380A16EBBC716482EF0DAD029C877E9
7221B1424E32836D6CA28909547F9C9DCADCFDA1CF32A9E980DC7946713AA2B6
7ADE09E7E2602EC78714CB01B1D8CA5599BCAD944BB557C31F555B9FBC9B865F
A98786E84DD5EEFB812AF7063F24522658F36B09BF829D2168CDC27B077C1A3E
64030D40F357AF8395771DFFCF89E918F1702F5867DF3636C4F5C2275BD205E1
ECC35934343FFF768A9C7C69C1DCB4086F18D3395FD237E4F663A9D860D38443
A0264CC224DF908C5EF9963CADC84DA9CE87D81D4F2306F0F4CD8882D55BF7D9
9FCA3CB6695C4BE1E0F6F82FDAAC5F5F221014E54A4D7AC2A59B07C199F94E3D
08301AF343C837324B9F5589C9197C341105B044E7AA81165FA1B97A103553E6
5BEFA493F99CE2D3DFF0982549271B429927D4775BEEE9771E4E3F32A4B1E22F
EFF347BD3FDAC64590A3E6A8F951BCA1A931511C21DB33BD5F7188AB430B481D
5BCEFC56F10EC2A5B36B8A1F0C6CADA9B905F3246AEC0CFE90D885257EB6A2C7
47CF7113878FC1B0947296137880FB578CA6BF14A5D39DE3A7ABDE2A6F2F91C5
C4EAFABC8B3AF3CA55BE5D1F91FFBA4A232B68F8079219AA89F5E7D6E84915A1
45A7BCEFF078B44C21FF3C1151214C28F255F87299638173A4543C6DA77111E9
03F1534FB379980F12D3A1E0810B01C554FDBB8EF9804F5C2EAE78A4BF88EDC7
1AAA864703D23D07B54DC25FC77760FD5A714D5731D8AB5D752D318EA148AAF7
9E7C22E2D14BDE2E51CA883E95575A8B730A57721EE9D678A759A85F77BAEBAE
D1090A3D9314EEBBBF1EA746C7D21AAFA482B4A88D71C66B0FA98EAF74A87B9A
EC2D29AA0087D5166078853F4109D6F3AB7D037E509C5DA4A954235A57F0F59B
494443DB29155D93CDC05BC0FE45B681C73C50BA9A4783DF7682461E0B596099
7AB5022480252D5611A19654543045C985E9FA2045FD193E6EF5F8491B730E6F
3508CDCA04F00AA75074F6D0C73A32E3D18B0D1774E48FAE18203274D8D5208E
0F04BE512F0E4295CAF659F0A1D7531ED2BE7E5CF1C6CDFE4C69D926F9C3A768
E5D8E1847AFED22F04286271B0B047E7337B66EB39E4F675D2EFBD65DCA8D0D1
EA25C291CCED6B43B67052CD04D314D8EF1305BA96AAAFAB4EE639125A66B00F
AE35137D917F5F12D51EE1D8B35EC2E6B2BB0314FD0E2835FB97FF4DA4611EE6
616AEC4DEEAF2899107FD5EFB2533C4974AE8F047F8130CAA0B8EFFF57F7B76C
620AD57C33296B8B2FF962921A8D17FA331966743BB807BC62ECCE310D88E8DD
4AF36B6E54543B4114855461C83881CDF494C2B6924151981FE1313ACA0F2937
1954548294DE90C4CC29E58970819475E9E4A53BA6CD4FEAEDCF8266D724C7E1
CE9D6CD867606E45BC24E1077688C365888921E4560EE3F7A4AADBCBE3205CC3
5CC5254CEB2975B401A1E45E0EEA4BBDF3709EC3E06DA87BC5EA364369A76A04
252382FE62C3DDC13D65906CABB3759C7499D65461B684A661C861DA00FB8EE9
82EF8B90CB80EDDA85A8D52C7F2F3EA9C616CE73F6320E7FBCE9F21123F70792
CF315BAFA88699C94A7162FA00F6E05E273B5DB89549315DD159250B69B7FE6C
C9CF1C0C94CA8B063A6E51A2EBF371263640413FEE760A8C80ABA4CBCA4C2650
9E5A8414F1DC581B2346172F1CAFF7F85E5BE5AB201A23C3C162F1134FCB15FE
185C146C3B2548A3018AAC559F33FC9278A677D97322B6D8D15EBFFC5673FBD1
F0E09303F8F6B662E34E945C60523BC0392B050B9540BDA7E41941A3FCB6C277
EB9554FF0F25A13DAD43232F7EE4D840B4362171360C1B4A49B2CC4717EACDF3
3AD11FEF95ADBBE87B2F6150EEA89E89E303F37ACA22B9666E68465B1504FD37
D1C906A954347B214FB68EC95F368281B3C95CCE251A46B4967EA0E4C588F40F
4683C2295FC0C58D564A2A4C4A7DEAB1E85CC06BC191CF2668634ADC3C6AEEA4
E81474B8DC6922EA5CE7340AC948DAE1C16B7E0F2202AD5DCF681741ABB6BDCA
12EBFFD4384FC57CB4689FC0FF8DC7345C7335F1B602CF8A5D6BB3E21369276C
1B1A19625AFE4330C584BFE5F7EA7494DFCB3128BB928CB1E672FD6C33F17030
AAA7B0A2CEB87A0360124FD1504C60DB82F30F4EE3D8ED6F50AE60AF3E00B6E5
24774D439912032F9B918E8AE8B2EF2E39529212B65E7565AC5AF026E2C8EEFC
C10F47FB671C91A7E12A8BAEE00B6C5F3449D1D291D0CF9CB9086D116D56152B
CE329695FE8A830F50581BB92A1356887584B94B00DABCEC84A5888BA903B9BA
E0A6D72DADFBADBA62C969C40E5AD567F556BF4F1E23701D12DC75C643BD3644
3DC1E1D1AD087B2E4300AE2F90BF5407FBDD9646E0166601B3481A982BEE3ECF
E6683620836DA8BB5CE31BAA722DDB36BA5642CE41141752F8731AEFEA2FDD6E
298D3EF702D657FABE1CB5046735D513E6E1B82614FA1BA15276039A09CE60CD
B0153749EB9657AC7312FAC9897F56ED09E02AA857C6FF514512BD7166DF1E02
BF6E5037037DF1CA63B9333E6FF44C608E26E1676A8CC9AA4B720B9068649C2F
BC1FA4E18E908936D0F0342EE72FEA3514606A3B03A8BE0F776DC926E1067D62
7362649D82A5C3A57DC5041B1A13FD2669B698E7CDA3D88B9B026AB9A677D0A1
3C4AE52D0011F1465ECE48BF9CBE57898D2E641D9DE2223F4CBCDD09AD8FC496
5F27BF8327C9FE55B586D057A5B67F972974B43C459D3ABB1719EFA24171D3E5
08B67D68BAF10B9EA138BDBAC2EE943566F917B7E3C6B26FF7C075A884D32A54
00E4721133F3D8831697F7A4F802E76BE91554C89D116132739A1B860E1085D8
1B74D5EF66741AC5D98872CB14CD5A761766615AD383C46FD9C8BC16246C1253
C213AF8E8F1399304DEFA7B2A404D973D05F42D3E371304227EC703D42B4C106
4DD7F86CD8B83ECCBDEED9E4E5B5370AECA48C587ABB5E85AEC0EF0315D9CB1D
677979EF1B4E96BD0CD5578D06C1A14D5C47C34D835DB493AECF6389494276FD
A49253976684B93E2CF26F6DF07199C03BA5466FA3EFBD7F77EEC0C3BCFD26A7
241379C2955D9BA1921169B16ABD7E418F7AAE15086037107F01113E6543EB9C
F74C27306219D49057CF1B92A145530344BD2C906FED03F633F3FC813623EE4A
BA3633A9BB597D6161CBB2BEDFDF7850C36160771994E0CECE14F76A594D3F32
391C040298C4B930E8E5CCE19FA7B3BA9FA1400F1A17B257DE3F0661DD7573D4
8B9126DDAF9B52DB3F3E766420B22AB9AA33458CD9CDBC417DBBF9D784583F56
2C0537A0625C655CE745786586AE482F58808AA83A8A330F84DEF708A7F73C52
A99646C6C89D2FB896653CB3AF6C9466BF2240E2A7157F5540732FE2BA1F6ADB
2A95D564B19A3035E27F66F381A714D696EF93DD9F32C5BB3CAFFB9ED72DD806
2C57F8BDE22F32BD1B883F76C6FBC44FFAAC5290381463C8DA9BCAB854010A9D
F87C786FAB2366A812B1724431E29844040ED5D4B9E13A466FB2F8ECBC0C5201
9F5526508CE444F9AF47CA876366076CA0FDF190DBC42371036E60D19234451B
B972B559AC50EE733462DC6CDFB7D0DDEA11CF08D885343D6DEF53574FC70B3C
D1D2048FE03525AC42BE0A650D81D9F7079793D6FDBFDDDC1EA9AE9C1F239224
A7554D77CAD3FF8AF4F8CD3B277C289C86436E496FE804591317688C32F948B4
7DA046070E46E4B1DB65F1EB94DB2F0F49AFBC11E92052F10FD3856029C57633
95308C247A99C14559D37FD917AD0A376543753EE095887309E014F82B805C37
AECF05FD413220403E4166E46AFFE3CDE50F7693D5A4D6BF6BA810B780AD3D72
6C843AA1918277F6EE607C917954B87F2738E49E191428E5ADBC27F1D1A6D28C
2DFD8FA0571D0F96B18F1901DF9FE1568A318FE982BCC5350CF122388E09B694
6DFE105543D27ED225F361BC0F8629F97EA3E4A864AC9AF3D5489CEB8ADF3FEE
B11F09918F66D3E5B19628F781BC77F1B6F48BA251E00806A73D03794DE47B27
9943CFA03753D809F9ACE1C8167BFCC77AE8415C0FE2858FBA0498089A7699D3
E78FE524DB3779672B3EC31810C745086682CB84EAA176025BA9473610A41FA2
317A4C2D8A8D16A10AD2733BC68DABD124EF2BBA9219D082CE150C3270A3353D
128AC01DDB12947B1E56023418758E8F661B2F071B4A49B2CC4717EACDF33AD1
1FEF95ADBBE87B2074957817BF9B0F2BE120B0C0F663659BBD109420C68545FF
5673390D853D8277AB6758D68E11567ED38212B83CF8BA1EAD4F8A7B6449A558
A82E8AA3E93ACD7D1F05142C4928C5415701C857A11F142810D4398EBA906D6F
4F84C0C27724A898AF21D7A419AB432AEE4C6824DD63128388C8F9B3A4201D68
4F65C61CF3D6332E8B40475F9F5D8DE27E2C4AE26093681317A44CBD39EDF11C
CEE237A84694E8BB270EAAA64F49DD53885F0706E80A849BDB8BA4B64A9605CC
14BCD0533218430388D518D74C6FC9BEB69122C0F9820F0132F1DD1CB650BD9D
5D55131497BAD850BAC248E82834A917D9BF2C950124B1A9AB0FA3B5A2E5BE04
8D114592497620CF40869B81986DB1E4E7C2BDF442E98A2024147151C2CC5A38
AC8D0C3AA9857D3361E2FC7482924FAD702AA9DED448A36066C2EEBC8DBBC84D
F80DD5B50FECFCAB9AC7528E37244F2B77A43F8EDF963E5679BFA9B537ED9697
5A1A9A8E96304887EC9ABC7354DB0C96B4BA084B85C5789E0599FA72840F2D4E
75C8F782EB89F8B0985434FF17737A40F3958D611A46550632A274DB28AE3270
C547FD192ADB3F9FE8F92C2F7645E5E7ACE906934A496412539F735BE500EC7E
8B2C361A16E6DC15AC81DC2F60AA46311D7FD607ED479F94EE2E392F6E9561D4
ADE7847F54843D5CD1E68CD9E668AB6B7AC4296BCDC0A490117F37A4D4303F6D
99B50E39FC2AB8A4E626B6706F4467276B078EA80E5B51A1E2EA01072C7D0086
20B5F96B1365365F7D711C7049B9A421F04F7B73A352A7DBC1D373C0577FDFDC
B71B7188A464927835D5B57EAEB7595CF7F61478B84B6D0F74B439F89B11C06E
3B053024E259C75F6D533E39783CC9E0E8402265F088863EDE31E97ADF141642
9B0006BA1376BC04498D6D8589EC7A019B18AF32363BC6E16ABCCB39D94AC520
3DF673C73EA5226D3C60C6FB12D9ECE1E63D643FD6C63FBB8901708E7F7B2185
3906E339F0CE2F156F481E724BE9D56F12ECA196D2BA67BCC8778D05F08B7E5B
4489D9F2FEBA9B0685291D57179BEC7541D16F3E4CFF57CE8FB489DBC5787592
909EC6684FEE6A248872797D7FEF08DD62847B98C51E2C500D92559935E703BB
856FA607C037732BD597289167165DCE4530256C8FDE73C42BA39D7A1B0E3B05
A6A9209A29E95516C2D4FB99185672D4249E6BA324F99CE4D39B337AAE3B64EE
4CEDE3661405240878F7CBEA40E476E2DAF7037B35A0E41BC15C4EE6DCD31B60
1E294DF2CDC63772C2FA2887FF619972676627AA9AC1B11539FACB49D3B5B9C7
A6EDC457FFFDE28E5C1CFD766C36EC7C49C4A21F7036E6B867900ADCD96C5A0E
F234919A1F4436D2FDD137783AB93AD85758DF1B02D3906D0CDCE3CD03D9ECAC
C334AE5282549D2DF22CE9A081774343BBEC6D2D33097D8CD752445A574B51
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic10-Regular
%!PS-AdobeFont-1.0: LMMathItalic10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathItalic10-Regular known{/LMMathItalic10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic10-Regular)readonly def
/FamilyName(LMMathItalic10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathItalic10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-32 -250 1048 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B30E8028C685C8FFFC2
3C0E2BAF712D9A4BE80B6E38C9F5A449DD2DCD493C0A130001F01DB02EE2BE50
8CF3C1EE0898661980578B4396FB3179F301761100231D260FCA63E74EDCCEC8
08E4BD0AB6545195F32F881C99FE3877DF3BC94657DAE2BD20767AE9DA7D582A
DF256F4A52C57F9D228B3E1CC5DC93FDDE8E791DB1E6FA18E0B9B2423868792A
2BC90B78D9F9640524C758D0FEFB713A9A0D66350CD78C8FC945A63D8C07C8FF
5D66E1D7D963B7567F270FB876D2FF1E76F1FC1AD80246E413D337A718699FE7
EC080448FCCD4B5AD8453287D86BC727C140A6B2C1F62439396AEDC897D546C6
F8241122821F88FE9BA1342B044AE9A33CE496ABD5D7F76B1CBCD331A08C6DD4
37A78E15453AE3B1AB6664CFBD92B9982E6C0F5AAD267804425AEC523A184899
3A2D0259E64F914D353ED128EA5774EA6F87DEFDD1BCA35A413EA5D75E42E3B5
66539B7414AF09F23C1DAEFD913327B6CBEE7B5F6258CFB98B288A2A2019D344
E9335FA5D1887F0A3E6CD430AA65E3A59B396F035C7E84875F5A5E374875FE5F
2B49567A6E8C851A51D8BA4F6AF388BAFFF88D02B166F37F0CE1D4D4201AE26E
047084E2ED3E3662B60089E355AEFEB3964748C5F836C437C042B64BE3AF79DE
75AC4E7255CEC0F20E6D9400D29BC8D9BC2FF1E08D8E020F33BDEA08A38A5E90
CDD238866C66BFEF1B3B61F2564CCDD80BD048586674B94291DB7268CF59686E
D95927FBF8CD3224572B687E01791F40D51A230B9F12EFD86A7F90A0978CF220
FA314AB43197FE6E7C4F22C4BF4C4DF7ACC7EFE7C6B152984BE0FFDD1714ABB9
CE834B59B859F89231021E34E2BEF6C78D5697E25CB5D72D2A5F8093158818EC
60233DE494228ED13DC8AB6685A5332341BC02AB2064AA00FBE26BFD27263C04
461327FBAA2D88B6D1477815F4188980ECF40CD3AD1E29DFA34769ABC993DE8A
AF8A0E27487EA582D55886C3B2F6DED5322AA7F265EF97187DDAE8237E4A34D9
C496BB1C04588AE85FA5B209321554AF2252858B319283FC9468887C282A8537
29BD1E86B7A26AC1D3470F561C13613A73572D79A8CBE1180F4C4E8BEE8EC0B0
14E2B65B5E8054506521227674339C79F366B6CAB4CB030073A615CD431B3DE8
E976AA00381C839090AFFC5C4FD59672140465B77C5EBD8D4AA4CC5301982586
82BA540FC6F55ACFF8DFBB285BE2E3F8D48E10D096AE21862F38387EC0E564DB
A9F0458FE35C6B73EFCE2CCD06A30F9D0788327205B0D8AD49EB1DB9088C4951
BAA4BCE7064C5A52A8C7FCF6451A6A4640AD49C951F19C97A341836FA85BD751
C3774EC538D7CE95E2C23154552CCB5169873F8548096D080F0F822858D294FC
F3F4E7B879A22B808A6813DF803DA79A758CF20A9499BEF18A9044282FBDD0A9
257B53276330D899DA10F3C6A9F9C31E911E653E82701FE547F41B7905D8BBB0
4CB1881FB149E8DD309D2C7490E80E92B6F241F0DEC1B48DDB69FD81AD6B2B69
36723E4142FEBB2807F053E93648157D6C21A5434310F30CC0E33018B243A051
51156E2DD28707789B87C4A5BB49FA694F65F369C270EF678548B9ADCB241FD9
0F604ADF7117D4DC8958FC85519FD7F73121208E95BB9AD39F1B7428F70B68C8
7857F765FB4B1EC40683645E2DFA6F6346654F7411916C7B7D1BDA97E3D5CF5E
4754CD0482AD02E5E5E08B6734A89B965439AED4F6E20342859D62FEF03DCBE6
C5BFC959BF6C49C566A1870B6703EEA046999720E57C1D385C3D02B28C060B95
5B433FBBED2E0852A68822566D2B310B64050CF0545EA5CD4F4B5DC4CBBABC89
1C94A108F6343402DB5A4DDE92A322D7F1BCCD3976FDFDA3354B62F6655F0F9F
5CEA57CE202002AF3921E725F32B1068BB57DC349739406C83D07068B17047EB
15718DF7DA2265849EAE9EFC995746E920FE3F79E2272482B0212B199089FF7C
84F9693ABB21B392C7E023795E1665DA9006
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: MSBM10
%!PS-AdobeFont-1.0: MSBM10 003.002
%%Title: MSBM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSBM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSBM10 known{/MSBM10 findfont dup/UniqueID known{dup
/UniqueID get 5031982 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSBM10 def
/FontBBox {-55 -420 2343 920 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSBM10.) readonly def
/FullName (MSBM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 82 /R put
dup 90 /Z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943E919FB4E3240FEEED78EE63
0677FAF39AB2543D18C08A2B98B97451CD42CB7893DA8601CC0F45A65BEAFC64
EF72554395DA801CF2E9E3B03F65F1BD98F8C5F8EA06D7457842303C1A817E7D
69821807328AF426B9DDBC188A79A66FBB9E6193B4A3EDFE3136C6574B9C4C94
E2CBA4FE7997F949BB2DAC0D329C2AD8E4095BD18A037AC9F77B794FC389E5CD
56CC4C0B74D64FB0D02C92B88942C18B6DA84D4CF482DAF3A01E80BE483AC6ED
AE98F5F3E49BC762EF6BA937D528E751D9588B0A1E82EF0A5998150EC3854472
5A91EB983915BC1D6E2C3E615E0267B39D6937ECE0EC16162FE76676E5B69F3C
BC1AD934BECA284B89F0613B70876247D768BCD246883CFF4D819D6265302730
7E4BE6B2FFE7E91CCB8C6D2AFACDB4C5DB9688153E1D6B2DE136BF7068418A4F
2D1C0CA301B1B97290B46EE14B8286A81E709980F67382A5132F01B2D44DCFF0
9753E776AEAE2141D580E64C82598DAA6DA4057FFA9D02C3B77AE15A50AB457F
3FA5A10A3C986B22F8E154C1E564A55D3BE4487677613DCF793F7E1B57C9A925
BC57746C25FE567719A9EAA9CC44F1D0FF8F92C03132B205F57E3AFE9FB66632
D3FB3EF5BDFB9848030527FE759A5273CB81DBA2719611355F43E34F8FD7D0EC
9BE47685A2D122C9B60198A430C5F5E3F972376F0FF4BA52BAFF64095F7ABCBA
022622692231FF87514FD912B80C07A0EDCEECFA629E2734B5EFE2604E8DCB24
32A4C691DB4CCCF19EF897A9F4EA5B2B5AFCDF87AC06B93669F3007C1295E016
FF0A99324B80E37020B1080E80949525B3278DF111ABEA48E7182B6F4DE2DC90
B8D31A953343D5DB78B1F2CC6CE631EC7E3D0041A823DF2A4702AAC0F0A2F018
E5ADCD42EF2EC8AFF6F4705D30042BE7B6F866C14AEA1CEE04DFF82BF14931B8
D297C38E6DA6E587C23EF0864F69BB0DBC9C1EFBBB97B92BADC336A4AFAC6A91
0A6B158DC42E975CB5D8D2054CEF367FB112456AF50684C41F80B1E7ACAEA852
EABAEAAADE1EFD16DA13E367A6FD05F6C5D61A321B185BD0D596400C8422C933
BF332800160813A68AFB7152FCFAA4AEB9B5B81AFC43E9A300ACDD1427BDE5B8
0D5893CCBC0591F9F5CE793D0E1F724351C5C5C9A3A1CCEBF7FF3714E6583082
A36EF53DEB9B1B1A3B7727286F9D44570BD8EC91F9F0FA8582A30E6C46B3B7A8
3DDA07BBFFBC518DEEDB5696E3C8D0FC88E54BD0FC54C60DAEA0B344BCFB186E
E214640DAEB7F010A75680A3C15376F4F7D0B2E42110941575991A64DFC40439
39C3BC080A089F21FA3908F12425FDB664D6BD53DC1D31F58E2DD0AC3264B0BE
1D609D058A09F8F110AC4CA81D9A737B3CA879CEF1F4C1BD0D8B544FDAB25C64
686BCA1A7BA63A455D3BDE025B5DC251AE1748B790BCD307FDF8341B4706FB26
D62AE2E4D33DE35A8EAEBCBAC4C90704498E500DEB4C2CF96C331A60C8838288
EF65DC7B65B4591B37A14D09A5CA4B607FA077160ABA270123A72697AFDE8DCF
CAD3DD1EBBE5E79C53C00D98603E14A0B61FD99C4A6D8AC8138B2C0FB6C7F03E
D13E4D4407A04B727E8DF0B45697DC409EED6D354D17449F769AAC79E028B9C8
BC62E59A72F2999AD5EF909942C19F6EAD23F35F97E5713B2F358847726D3FFC
C0E7944696484EB8C25B51A882CC9A041E4E7D45DE9958C2F8344716C0BE99BB
61B87E74152B25C8069EB5036FFAC3DB4A8F9F407AF8F40634E326C360762A4D
AF354F609B6DA61C429791600D3A5FE9A8E128EA357F21BEA1AA23ED92EDEEA2
91CD4AADC45099E62D0EDB437B3A2C03D34B8B7D370D36ACA398451DC17A8C76
E01E537D1CD1E229E6ED42EE703C1FFB852ED974325012D973A6FC079EAF9617
31EAB278A9FF15D1A397B7541239DF020EFD56A0D5CE62D17BC0D92406697044
A2C322D9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman6-Regular
%!PS-AdobeFont-1.0: LMRoman6-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman6-Regular known{/LMRoman6-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman6-Regular)readonly def
/FamilyName(LMRoman6)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -88 def
/UnderlineThickness 31 def
end readonly def
/FontName /LMRoman6-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-515 -298 1647 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF386043BC0B77B47F761487099
F3EE8B97E5F18DCAE51B94317C8F4DECC130CEC55EE16A19C81D4D1668127C7B
86C63787AA273CDA19F2DCE459A6BDCED90E3C60B9F7DA6A0715D2D12F8B805A
5203A948442C2E5796D5CD20544385DB0893AB62040E1E7F33167592F1944E2A
AF140EB52E80AC868A5E53B529B98C77E46244F0B9D46A2FBA3E0040CF5A1D5B
8CF20FDE7C876B9AF4A5F6798ED83E56E985DC30EE5A3B2D5EA30F640DA2DB67
1783F69DA070954570F579C316046D8A6B7EEEBAC73F338A8B7D40470B4468D8
CD9BA8B731E8581C69A41FE873D6ECF58F4962AB44706743806BDB909276EE0E
99E10A530147C9C14638387F89B169CCEA629DE9AEBC010589EE04588A992E08
30B37AB3DF923029B8F6BF19C1C728797AEB5C0F2044753BA4C7D1437E2B9B1B
3DAE6A15672EF1F238D1AB8F873DBF5264D704FB19F5C1CFA0E5168002B3741F
0134E79412F5B0AFABBF3069460C10225E6F7BADE64F07074C9D594F6F7514CA
5B8A7750FAF214600FB248AD5E8D9FF734EE44CA79A585268A06C6FD4E294257
0F814FAE80C1A7776ACFE85D3159ED173F8C4EF0456171564E9A2E1C26464408
16B747D137D37316A340FB72BC005029A06DF8BA48E9AACDF832BA2745C448E7
9225CE3A522B46E18F5733663105D638E571758C9E8D9121EE819E4A12676318
11F0C568B81E1502A5D168139F197F7A71FE60CCB05063C6D9D8A0048E60F9C9
5CFFF69AFB554B3534796218449D2BB97FE15BD1A6FF104BF67F8EBA5C3C39B0
24ADAC78AC4FF61D5847F0A110651F4370133E3968EE80FF9C2E54953EDACCBA
2549852043B5A93B09ACDFD025365A4F8FBA3FCC4DB60700C22ECDF23E95E01A
4C7B87E4F5D46CD2AEF5D46CD2180E4304BB80E17A83397A677D32DEED9BC850
B4C056641799994DEBD48FC73D616143FFB85D78805A95B8CB191C775A2DDEB5
FC8B803AC7B461E0FB63D746090AC3E759366E115437A8EA8CD328F309EC0960
36351451AE7425A26CDC319A31BDE48F68B947574C1DB2834483C460A5B2429A
D49BD462D9C9F75FBA92ABD47A5EF18C3A43B9B7A3D1EF1AA43A6A68E4D42CDD
2484CF47C0FB3A68121F424FA4B29058841D9821D7F955D3824CB1754278E8D5
847116509B7D3B960EE375F1DCCB4CAA1CCCDFA0E61FE01518738F7E6B887898
261117EDC211226EB3A9E0B251FD4CF4FD2543B7E6F394D3D262DDCE224AD9CD
BDE8CDCEAF38C0BC9E406A35F44C6B412ABEC730D9DE3716C5B0A87BC7ED856A
77E3AEEB9912B64A5298C2F4552CECF63C84F805508C4A0CB98910441699B722
2BE7727547825EFBCA21408C5F84E3E7781B5BA336E0CF740BE6D85F8F6F8631
BDB1D0AC05ABE2EFAABC930F472F93E247E29CD9852001BD2E16E51AE3E1A77D
4B05540EDA577F3759A940D23E73451C967666B5EE5CC6EDDB55CFD4CD875072
FF79F4ABDD8F935A11E83F9D6F40978896B8F7A0B472D1F9FFC68F7C2F5EB1DD
447832B4E1DBA7870A949E48C9DA6B47BA581F7D24C5A0B90A66F0FFC044D1E8
0652D0836E0FF5980A50D39360DC793D9C260F9A68379C031C3F363054F84888
CA17948C9FB31CF86E555B4815AA6C826666025BB984A519FCED4498E4A4CD61
BDDA5F652B54A3270DFE501ABDEAB9327E296740F0DD9B42A45879E285C8E0D2
DD61A71643555DD007B6477A05334C6D7D079DB00F337979DA04BBD485BD5630
0DA794E86C9815AB3FEB37E78106CA0A3441735AAC9EB49CCA33DF4322929D86
32C4BD136C89169D45718A88BABCB2844362B0652A6345C6EC83DFEFE0994552
32455B3CC14F0D2FE83F60403C598F8E360AFD7C3A3F37E771BF49F20E7ADF22
AE9612796DEB9138059A4C12D4A8B8A37DCC221CE80014F807A53945E21FB479
4956F9E37B87EAE0447EDADEB00764A38DAB429277B779104D1360C711A40FE7
FE508CDB795A3BFDCC677893634CF91C45816B9AC1146B1BB7AAA74FF92F4273
B18D515086F457B5AEBA634AE5C75971733044D64738F071F82148EC95F4E53F
D20E5A2A4479D59A73A9D61F3E4E4894BB92AAF0AE56AF9ABB385D300EAA72C4
388B62E7C32A29313EAAB849169FE98FF9B3CFDF3FC9692113CC15C94DDD2940
49748B473FD5F4AE9C34F0554E0BAA2290B2082F996026ADC420C676AD59744E
3D1C8132F311B70AE10E12E863CF044F38542BB9CEFC017BAA8166A39AD8117B
F368B91934BC6F0BB1B2E7C4F285F9BD614A00DE6825572189A19315AD397814
2E2E61CCC0992B66DA71D8BE22836E6DE06A54674E34DC85646396AA84DF28CF
38994138E0F4E0A3F1604049D39F50717E4670442DBC451B029ED37E22709B8C
11F4DC6A1EE18BFA4AEB8E8FCF1565480CC3C141D6375466FA0272B67393DCBD
86FE4CD039BB44D2BEC68717E95B7597AD7CACDA2A6A4E8808BDF0ABA0997D0E
DBD2BA7C8586E942973B8ADC21BA304ABB619E86CEF1C8D3D84C9892F62613F3
FC722D561C0B4D707CFD45E588F7F0CEA7717976FBB04E6A3577A2141CB8A8CB
6EA47F3B1F8BB5B13D7B90A4F95E54057A005AAEDAD9D7CEBA399B3FDFF494D7
8EEF9EC6AEEC046812CE43B02B9A8F4A127E7C98CF0C088786119EB7E0E7EB32
C428F531FF5E355D691E098D1FB67AEC40458600B1A87AE31E65B7EFE7B1CB02
5613E53340E473C1D5495826470F3A1F450D1AC2C81C876EDB818BA0919DEF1D
3F443A32A724A003C23DE44D0A1774265B27B89FAD2A00A0F8325EF3029125BF
0C973EE91DB8A81E4164F827F359A4630C2955964D0D808BE8D16D2EBCD7AD30
50E68B2F5B879433A41FCA23CE3D342D8157822D42F334B8793F13FB6797C5E5
249834816FEB195E5FB218CCB914449B44FB92C6E63D1999EE615767510AADA4
364CC2035DB3CD08B107110C866C7FC5A1A8A411A597335E6BCB62888AC8539B
369E5FE68D9DEA3C0DBCF7C332C1413109E975BFFF13E7D0BA8720C1A7936015
028480F2CE7EE814B92E5BFEFF479612753E3B373D0E5E288AC7CC5D3A751095
4895B6583129FB837AFE9E5EA65226535F722426F039917C6C2E033240C86703
508D2380278FB9B8E12B455199E01A4C7B87E4F5D4EC84E9D21FC68D0D1359FC
7996DB1B6A97E165EADC6CE23BD6CB9700745AF7FB6DF76A2251C779DBF0649F
15D26FD05EB16A7702D79D42364FC91AC88F98EE11E8609E02E01CE344598BF6
B0D1B1310C75AC850FB4C642FA3710C2C9905F224C87890C9DA4E53930BBDB54
CA2AEF866BDC2071045C3D71BAB3CF386AE54D6D57ECEEF7A86A51787478FAF7
EDF2347DFCB070CF8E3093B06D0B80CED641940DD7A92B277C63B178F5E81127
0F2F4E4FB0360E4923BF1A75C78A77CE2BB4368A7C8F48639FC3A0BF18262068
E043BAFA2CCBCACE0875E368521C0D91FF9ABF781BD5C69282459F75ADA02D7E
D5D348F7CB99C78CFD41D054B08B9AD11A4F25CE3652A01C7033683D9A1ADF85
5A6BEFC921B4896D04E61B913B6C417E0AF5A4EB59A67192BCA9ED8B4D70ACD4
EFFD55C41DD3831AD6161DCDD67FFB74C773637429CB45EB3EC279B505D8299B
2AAA7A05FCEF74AADC754D33163A47C93361B58F38ACBE8868CC263D0793FD51
0BEFD0B8DED7C00CD9A60AEBBA3FADDCA48E2745359AE31AEDB60F54D334C1FB
8CE7C6CFA4536829527A871675F108B3A973CC43AFC2BE532ED012C3EB58266C
BEEBFEAE16F228285B627BE31FE6BEC3F374AE853CB3E511385FDD62F98D8CAA
ECD64C7D8468DA6DCF2767A73AF89279E81D9CE04C5C360D7677FEFC0BC3255F
01003FBC34C53EEDB7645170A6A6B6C1A85D0058926158D713B29EF1F9D60352
A41DBE68A7816F315788F094FF4AF02F686A3D22F12830D995534A8D82E4B822
F07B115CAEA24F19126C17DD16A3913F27F12C896BDE5C6BFFB9251338B976C4
056DFB27F053921193C59DB289A4188A942F2D2D868F92B8459BCB9EF09ED7B5
2B92B00BCC6ED4FE1BC82E285FD99B6CC9808D4BF6C5E91C51725CC94A1958AA
70AE9037BAF2779ED8034237F25540F71DF81701B07933495A954F676F7DFA49
F81BA6B221FAB4FF6EAB642A91F1947AAB4A780D034BC00B16D7C4D77CA1AAE7
242CE5BE6A645C2653FE55D062B786BC3C6651B6A1CD604A45763B67768AC526
1DF9C7E081A7F60049B5EE91E7C3F3F02E3B8751E078517F614A52C9CF58B49C
1D1550F2589FE68B29179A3E97A3F0B35A3FE8DF5B26B0E8BABDC5FCEE3EB404
54892CE429C3ECA8635B7A013061A8BB2B0EB98CD8674AB5A33FB9835B0D1EB4
B6F550DC77164C5F6B43342A87FF745965DC919A12B63D7058BD4F4BD90D4EC8
361D3DF55B5BF4BE1765CD19CAB0F92A94AD2E091DD7659A4DE4DE812FC92035
4999BE909721075D1D40A984E6E75ABA2F4AF1A7D59300C44EF44E7060A9FBF7
B5252C0274C581A2005CB515170BEC2C09C3EEF80AF06A0B3E3A704A3B79B914
B6737628E56BCA749F4720DE9195E8559ACAD8346F7BD9DED0B9584FED157922
B29CC828ADD9B2582CF6C3178700E56D15B3AB9AFAA3E9D10D4B47F75D05CE2D
81DB06B129721A9135C29F9C2C2C9C3FC2897183D705A37702223D1466A03D24
67AD61286FBBAA4725D698612300458A151C340BA68A9106225ACDC6D829F002
A20624B2659A7011A9657AC8B869C2FEB82AD03AF067FC6D600734F59939234A
15ED0A6402505729BEDFA52397A053B37ECC29D2E0AA06A2BF72DB85657F4A35
58D4585AD1918E86DAACB86054F56F7394088DC50A1C1FC14A0F8E5003D4703A
071AAA2FB6B31D984F0072AA303D33D5478995B533818649CC62032B5D3A3F48
0437323E1DFE2E69212EAA61EA27F9EA185D6B4A80C1BFA827E4F15E623A96FA
4C467943C618A5E35267223F46AB148E74D8D1B986B2EBAE55077A0E54BA5F4E
CA8379F7F7BFD9CD497E66CBE3728B6CC761E56E90A48FDBEA688E80FA438D78
057EA80AF988C8767E67C90E0CCB24824503570117323252722787576A552F56
5387D8D2176685B1A58609AEC90E71132EABB4AF737A7AB1D63393DB4A3AADCA
389CE1ACBF20AE2FB1EB4802C331780943D1C667EAC9A01B6176AD76F2D3E88E
98A5679207C76C999903969568B43673A80D0C5108E8116E5F5C2F25A54FE587
E55C037EDF4C9BC1D95FD0DE382839AE8C789A6339F7D36DAFE163824896DC2C
78FC9DF1F980D05D8533158A7D1941871D0016ED45EA05983F88B9E7E3262FB0
36E1F51B26BFCAC3915932A9CD8EA9FC589975823965AA4D2FC6AE27B27A17C5
10EB9072FFAE0685C7C24E70ACB8564454277C41C28075ABDC428D3809A6BD65
49A52A6AE38C80AFB8C867AF2D6B55B800BE51509F685173FC157CA62976128D
48E72C15E739FA6D2412BFB5783DB3C0F6D60E34BE594B65D769B6340202E77B
33EC7CF4718DD267EEFF4C0000F2F317ADB833E0D0DDA4D02A93E18795A8AA1D
4994D871C6C5B81488F425782658BDAF63E8792D79340D223C92CC01B7E355BD
A077E525640CF211E7A3B8DB7BF746E85C18EC1FCF0C423A86C57CBAE8F9F82E
65EDBCCB17469C47E7B6B66DC8BDB8552BA01AEE38E1205B077C2F2C646FEE57
99A02E0F53322EEE450F6DC39A4F03032CCA7A8320F6B01B4C39C37DE56BA266
2E21344E73C74148C1ECA7D4F858CE686804C3F119899F5BB3DC8DE39690B59F
D2708ACEE9F19DCDFC2F1E54AD17895F81828655204581AF0B98038CA5F5DFF5
D325975F280CDE4402EC81ED6EE1D304C8D933CDDB280F05DD157E37A6EB7BB4
51424B682DB6CE16E840BD0577CD58A2FC5B7D170AAA239E07DF91A1C10223AF
53A16B1DCD7C5DF152E571C9E7318117E3200AEF170495FC898F22ECC3CBC849
8CF1AED08F797E67C90E0CCB24824503570117323252722787576F4CF1A672DA
6A04C28C460DA2A483E9826D8813326765D2A528C6A92646975A56E261E3C169
37CEA1C949ACC063FEEAFE31C8A721C2D46AA00C10681BA9970D09F1EF4676BE
5E02D7DC4613C87ABA83D059ED0635D5874A3671EC6B08F2A0B3374650DBA970
A8893D25DCBEDF56ADA1D011C03BFC4D497466C7F09105A287FB8C8D3083CAEC
5B4F7B332E904266FCB27950759D9DF1DC35FC7A9C4C4799419A851AF73C1978
E6ADEA42A238CF1150B5BA091FD30CB05C0AAC0D6FD8486C034DF78B77054829
D7A079D7BD85B9A80845B563220566FEB8F341AACA7DF6DA060ACF1112FA31D1
0565B2B293E7A6C09E2E8FBD459825415B084F754454ACBF44DCF4961F68DBB0
644E77613C9E96ACB55A77DF4812D900F42AF9770E51EC98088D8FC81C7A93EC
9FC3BB5BDA3619E904570286AF49CEAEEAAEEE0AC1EDF4DC2F53275011EE991A
A96DDF4C96A9E0D8E354195A2563759DFE0183C8D67B449516EEB59F22B42BE3
2D7B1631DD1E36137B9C75F2C99248D4FB86CB367BB50ACF8FBB2C8A2EDB17FF
267D0F21C35BE86E068F98C3564F42D2F7F26014DE37C4DCCB6B30860F43089C
0A6E1E7B4D9287CE71718F81073EBCBB4386C5F4957F220CDFF1BA5AFF56910C
49B957170DFE24CEF8234658524B0071B5582DB34872C321F5D6A82C3B0AF842
D748E7160373CAD07AAE053155493BC317F89A8940552EAC2159B49C1DB34B25
67B50D0B0F2BAB32DD9D471FDFBE9B4D20B0BE8BBE3C1A5459A27799E63F136D
C58DA8682674E24838BF99B06FA68C91E1797DB85D924C037C275BD496F93E01
565EF63E388BFB5372277A752C858F67901B52715557491B4DED0A19A1E6464D
99B41FC0AC101E91B84180444A0A928894F8FCA116CFFFF88C6F1C7BF34A0E25
EFB2AD7503D23492E7E980B2C4324A4918DD087768EC44A893A7EECB6D95C35B
B87DA2B112A3E5F0257A53249617F3F4D9F5729FC7C25090211470F9D3B10BF7
FE4019611CC67279792C59C002037F13240A333B2039FDA78228FF7FFF776789
5FB02F823B2CAEFB944B42D689B020B11D38ADCBDC1AD716F75A2C6565B6D04F
A90E615D06A805EF2EA704243FB382621C005388966DBE3F4C2EC9888B56E962
41D345CBE471FFB3B78C4FA50EF1BEBA5095045ABA7952457E62E4081D5CA62F
44DC287DAE5C2DBBCA73CAF31025A3FD47B8B313E59528F2881E4C77381AE42D
708DF8E5C93474AFDFF39C78E4003E7B7FE30D31721B0ADF552294F3AEAF6C9F
4EEB4990475FC4232A38D8F3903D81C9A329939DB5396510900CD5D522C5E9DB
C5C59AF4C51B407D44468B5E2614DD937194ECD03E78CBB916BC57037DBE008C
F0CCF784147D8580979FE5FCB204DC95F10D6E5571D4EF121855C1086E047F04
3F4D780E9A34C3E671B402F789C9F3C869F0FD12D2A1FA3458D37F8CD2E85194
7683E050B6D2E4F51FECC9351B42923E388B70E7C41B77DAE3DB6C579E3A28C6
3E8E38D62A92755377D1274604BE610997CE121BDB9CED994238C39531CDDC19
7EAC2414615E79137C52F372CB9CFAF7DA3CAF003473DBA5C03B5BC597E5C182
CBE1F42E739B6485473B414FCCA4D5C10FF38CCCA54DA33831938E9392DEF759
4DE827864CD1D0B2F50FA679945BCA6A71E4329DB73E7F29098787D96D89D30A
3C961F55E64983F69651D5206CE47CF745E42FF494201D7BF2AEE8664D6AD229
D31B6E7713609222EC88AD13BD745CE175B921697F9D9FF0803559FEA2110988
23531BE96D98F0401D2545E9FACD008B4ADB50EB9F049AABB576738EB12DA190
F7B750529BEE0764347214528AE43CB7EBFD4F38C31CF4FBD46EB44215D6E646
EC32B1031A6A54A6805B7F680B56CED7F1984220443B845A9FBD9CB9C38B9396
02D8F7A3F70B39F1723B8E668827FBD165657C485FF7D48E2C2AA8284ED768B1
555C02AFC9FB543ACFB65DB1A10646D0762B400B49288C480351F7DC67048E5D
A26AC7D0ABD2820C2F4E7B76F2F0D593E7F8D1CB8EAD24B2F8DE2F54038936FB
2D9659D413E08C97C832D3A03EF24ECB073936A0C035ECDD9681A52882BB4E55
C113EB226EDBFA60AF43C7D37311FA695AF97F91EA727C3FD9D0C0217C057987
87881D07CEFE01902B0D0F7D8913B4E954FB295B5ED5498C4A68B73340A25409
4DB0024341A7BA745D8F3DF3DD0D5AB028F2EAA1AF13F4F8F96019FB2822AE4D
7FFB00D18FF44D2B0659D8818C847E21917F8043CBFAD9A3BADDFC68DCCF67E0
FEF88AB76E205570691C6063359CE9DBA2E3ECB7B59435E44A8B4AE46E1C2BDE
A679FF899B2E62D89D132868CCD003AB7AF9961F0943FF5F02016DD6F0563A26
851D5491A897AEC52D74BB6747FB9CD5A633DF53752834D3CE0EB2B7D7775E39
5BA4BAF7F82F0850D4EC408D5FDB7470CD59E8576E72A8186570F0EBCAA0CCCA
D7FE46DAFB0044DB29A8B801321969CD052FD61493FDA21156452D2865572235
B8CEACFD7733CEDCAA991212FC3C15A7E8CA6E083C0034671A4E268BBADA4583
A16C3C57DB5F720871CFA9672BDF5356746638CDD9FD68E308DDAD15D5676372
A863F05EA4BFEEBD5DEDA74B52C8EB0BA716FF6C6468BB98385F009C20BB8434
DAA8EC8FC416BB45F9DB9C98773585EA5E4D316AEAC8CB4182A887EF4B289F0D
3573D61FA865EBB3E287937147C9BE9926DAAAE4C59ACADCFDA1CF32A9E980DC
7946713AA2B67ADE09E2FD2209974B99C3A0363AA5CAE125EF0F3B74E35560D1
6C07063DFA0A742BFAAEBD91144D26AFEB983E71575D89DA575AB19DF8CEFDC0
FA2A5EF2622F879D80738E31D04524CDC4DFD91254F5F7DF55FE68CAE7989878
5FA31D557C86F93742930EB43CE5F45809AC88B5FE9E89C2EFFA64B2ECAD898D
39DB7D202BB69739202BD31EDAA120CE54ED0DE7EAAC5065B4F48C0B7DBD8AD9
FF3B7B5B4A1B7CA0542072597BA50F8F45B3B08141DD5CDEB790D76C36E9CBCA
5A955285C130E0EF728A401986C50D3DEF377CAEF216A5A795DD63F3C6659BBF
4D2971663D0AB84621F15C186C06199CF885D233DE4656E4CCC1AC1A5762BE48
F5FA88A3AA47DFC0FAAD37018CCA129A4897876302C02AD8911B3371DFA6452E
0BAA0519CB64DDE6282787A7F448D78DEE9271F19E6331D554E6829242F1E05A
A1A3BA678F42355A6F1123474D93C05C07B8689FC4885699E4BB766350BA721D
100516CB839EDAEB4DFE011D1947F0D4874EBFFA5673390D853D8277AB6758D6
8E11567ED38212B204347BD00B461544B85F64FA6D6130832DC718E26691AEFC
1DD6435FC6A7C2B91B672FA23D9F875C001E76ED42D71E62DA447AB71A060B51
99BF7899D41F602E326BF53E4F91B77B22E158BA172BE33861E18AAF3A48C72F
9BD37EB716ECD75C6A6CAF0F0FB5F6A73A47FFFB9D6414E7013B7D984B3A18E6
75655F4CAAC54F1F933DE269C0DF2BE55B48962C844CABB7BED489A190D1E853
9853C0DAA181E59ED9410F4D901B9CD2061595FB27C9B1720C97C551826A537F
BE9B5F897B957CDB27ABA4802F0BA02D8DDC0144E7C1BB169635270568E060AD
7BF221339567C68F6B8CD63633DD6BA618557B6798E9F793E6C866B334A71EC2
3B34833BD3B6BF56210B6FFF3953D0944D30855CB73E7A7A981C9CF9174322CC
22362D93433F8D716F159B035A561C376465F9331E5C7BDD1DA502EB95C716BF
DCF80180EE6DC71C01AC6AD353810CA7938D83B174577EF9C645314BAC0C5D26
C1076AA31C8E894713849EB6F8AF8007B3F27A59C82174638FACDEA968C7A123
2104B287170D086BCAD5C7C2BB9C184A5F3F9186E7F3B1D843EB1118F160769E
D9844B47A8A2CC08811B93D94B01FE7AF62D56594BD31845DD8EF67D1D889703
646420B074E222B6426D8AF577A5B7F2B019500E8FBD9E83B2C925BA9BF62903
24C59F30816B248D320852F6F0BC092B0CBD2223900A5A4D8EA5A11699365223
82A3D7D73CEBEDF433870C0523C3C8A7F3AF5DE044750BF9BA8D07C3D70161F0
724055E78899DDF3BCC34D14196B1E24BDDD67D0110B8331410F1DCF9E65E733
8B42FFA0B337AD7CB84CD7CC7795A8F1E7197309DAD0349A9659540C28723810
DAD7CE08EB085D29AC7925CE02513B4E614C0862D035E6AC70E1B1B5F02E969A
DF6CDE36D67EB79A6BB67B5CF26F8C6A61D41E773D3D0004057BF9DE91B80648
FAD40756621200E43834B0CCA28532BB1E7CDD3327289EA1C3C455D8E7D7F669
5055586AD4366A741031698AA060ACD6CBDA8D00D12D8F361B497A5239CBC501
43E098CA65841533DE0242731B79A1A82CFCE9E49B19F5D32E2386B247139DC7
37A0C0E3D0D1237B3FD2E75B2DEB5195839A638DE491FEE467F68D25CA5115B3
81E6D61A9C9A71CD02986992B15F4CAD81E8CD4B2A1E85BE0192A4B722775DB1
D43ED534CE92916843FD101A6FE4D552944258F3184E28421EFBF0F6600EFA1E
7D08A1D454FC01407126D3973FE22CD3AC4F6FBB0AD7B96D842474D1DF235DE8
9D464EF44F2C9297ECBF2840EC61A089DDE23DC9E3DEF6471946061D0DB6701D
0563A3792A1FD51E5460CFA0338DF1F5726862FAF91505153343C3BB0884A7B6
0DAD17058B8E88AA568ED8E38E0955579FE200979E292B3B57E1F7A9FBAE495A
2A25D5A813D1536D5471C3ED727BE7E559B6E54B0C7A64D4A2C86BEC799E6806
C49C1636A77020753AE9AA57C1CCA7866F6543CE1B25AFD261C434D1D4CF4FE9
C907B8468C530A546D701A3B92313C397F0A208ECDFCBEE936D0293C010457BC
056BCA70A7E3B757A8130BF3BC078B17590D62EE62126F8F3B0DFB89AA1D0FA3
717BF3CD52E7FC86C8FE3A9FE76321F3DF1B8D279AD66877E0B05E0220FB8FDF
41ECD551DD326E58FE258D0E268FFFDAE1393586EFD449958C91252156984401
2BABB5ADF93891FC191896A755CBAE3F0F649948253EC51D98A20B1C4150AECE
1B62EDF28AB0B03187728AF15BEF6EBCEDDC19B9F7DB2512B6AC7FE21F478248
CF21986DC483EC4FF27307585A474DAB678B23A7EBCAF98097861710D733B551
0790EB12F5FE80B60089D4C18F187D265E8494A80BDB1FCB3ECD6DE46267C21F
A581E86060A00DF7E387FE4360955D6F814A0B72EC09A99E846384818A44E541
E4E108DFE5E34573DCA40F5946D9266E07CBF681164FEAF332C19BB771979FD6
A842FF6BCEC22ED954560FF7A1971E39FD57F8460A1AEB659C973D52B28D6CA9
2DDED5BE33EEE8268324F6C902D9715E9D5EFF5814A8F3E1BF0B7E35DEF6A9FE
4F0D2A2E9848262290D7F8E5AD77A3AB32CE9C79E9F9F074AB70369ABE28B707
8F57A4D6313458E50D05A1E91DD6435FC6A7C2B91B672FA23D9F875C001E76EC
92FB6934B5368C099B59A7114410C608C749D1B7D49233688B150E779FDD9DB7
3AEEA11615E7DEF726AACE340AD9F2EECA199594CF093FB8D49DAB28DA0EDB94
63FAF413BC1FA14F1FE0237FA942F76F1157480F336F73452C9C15322A392131
FB96C14CCBE65E59BB4D23F82F28E6759E924266ABB0F5AF2002DD17FB094011
08241414A916807F8AFB0BBDB5417E6D852FF038407BC405811993C856601474
FD3DF4947137BDEA68BE33B1C86B31E1EC5E2E7ED6AE24C15111AEE8B0120DD8
E29CC460BCFD5BAC82C941C2774AF399F6E93075A7A0EC5AC289BB9A3C004C5F
FE6777D6E374B40FC2ADE40888C5DC808B63EBED348D07AAF2D7F7A790A0F099
8C80FAD9A265F84D5031EBE0F523F174D1B87F8E5A06CB2F03B396D8F523E783
87EEA92C452CE44D0E6A37CF3696FD8206E691FCCC9FF002209C1C76C4C64695
6668CB64B378A98BA5F5DB1F67DB7096EFB1F419D84A061BF099B8FA36670B16
90CB69F17E9E3BF1E15EDCC29B7701969EE4D07BC78F07D63D7D6E5062055043
0364C88A1DF224DD3EE5110C0D94DAEE6E66D20397C46FEA9B6EF288668FF3ED
3835171FF4288E56438EE91BC7297A8469F567938D322537FA0A8B5CB3E29020
7065992B084D567645EE4D2FC29814CB1D7082661851B3D94D71719C73B320DC
91F4F64B9B942A7CE1109EC7BBE8E5B7AA2CF43FA2AB8EE4213DA7C6C4277079
D25627DCD5E40E3E202D7176934072863EEA862AF354FC6CEB056DA1425749E4
65FAADFA4BF11DD6766C8D058CEB08DBC89FDCFE829432331073236C67785257
36974DCC85E7CAB9173DEBE09BB23B6885F25CDDF3C2DDC16FD131C7F302A2F9
FB65ECCCAD4616959B80FA764F314AC16BB1740C1B9A34534A154E2B04009136
E4115E6073611BE138AEBDDA44E8D1AA9ACBD47097BA31643A74F5D36BD72480
8357D4FD1813801BFDFFEAD8D918A30005C31F177816336B74AF8B9931BEC0C1
8AE73FE1F01FCCC7F5399762D1BC994E94B6179B1A7982129C594986C30DCAB5
11686A2C699385B3CD763CA12281B1A5C2E93E324FF5545D0CE8972C2431411F
730D16480AEE8D2E2DBB374BA8B0C30D5E782C9B7DB4551CB68D0918B52AE133
CC3977DD3448946BD058A0C86C7B26309AD5A80DC8A9A5AB7918FAB070E18406
BEC009B1658A7A314C04B7546244474F513F8F91E616AB868D055C8B11CD6EBF
9453B2F632E36A15B373FF3FAE535328CA8C0544484883A0F02FB4B3781CFF5E
1D1550A313D6A7835FE456A79A38623745FC7BC778B3765D421C915FDA50CF9F
04A95ADF3F80F3C4CE59FAF95451251659F4FAD3B928D141B5A50A3F5E9A303C
99A80E76CF38AA5B4C4F8D3809A6BD6549A52A6AE38C80AFB8C867AF2D69FB1B
0EB44C2CBF703208747659F0C260A6B4FD314B9A936D089493E3B7C7A3BE9AB3
1FFD0D9227EABE61529552E426955F25BD3D4181C84D03DEE36C9F7327962802
9C83A000941FC5F85C754D5132402A0A94EA3D0E37D4DBCD22AF7C60C6CD394D
7C4BC204610D3A92541054C0574496C4587DF29768E6F31E94A1C96D41BCA87F
4236846933F03C778A1A810DCD869D660DC33865B7E7C25A8F933A0E69D24DA2
92AB092D52FAA80F47282D973F48A92193487C2944D35418E9E9DAC3479D3309
DE69137DFBB7833E98F45B76D98F7F115A67578C90CE30A316B6D535855E3BC4
95EBD55052F31B47841D36838D978E70BDDB5116533BAE1B750318362BF85D9A
4FED0550257C16C0F488A11DF9E9251C0554FA532AE3CF6B4CC492912397B565
5117DB31B989EC2622635377629CAD8E550923A84F19126C17DD16A3913F27F1
2C896BDE5C6BFFBCB03C94DFA8ECE2B7374827AE168634FA007F8981ADA54F05
501654D663389C4B5A8891EC5F847FD143664560BC4C5FF77A0D68AABE3A561F
9B19E9E4F465753B660F494EE3BD6829B0EF25EDA2814492016AE68E31049842
FC608B1612C379841BC04CA5D5C9E7B9326E24A0D47AD9A7FC20C44470BA5BFE
CD08F2E9B0678F1C75B4349B10E0C822E7774D2E36B7DC679E91F344E2181C96
31F0E06FD50B7F3208C3AAE0F19541EC977DFB9A5ECCECE193800E322F11492F
E2D4693CDDA5926F4D6643907C7A8A5891F445DD18C42150008FFFDC9DA85E46
A319CEBE22106497041C6BF0D15CEBFD453284869BED4F94E7563A22D9EB3820
144C7EADD2B7564578EE778AB577C5BC1E44C3FA9956F75531F04161B2C21F34
CBE80DE64145C23FC97535A6E4F812454833BEF05947F6414AFB850951A3BE1D
DB72B79483DE686E68A33CE20C97AA3D34B75B9B69C9CC6AA7EE629D85ABD5B7
B3158D44150D249200D31492FDDAF610CC80CD098D1E968B18EE09AF09D593FE
3D0A62701D18826FEC47F867C4FC966D23A12CD634C1FA9AB34BBDD9983E5D44
1DF74B89E58514FE8D5100151D635CECB8442177468B4A69E269481F40D0047B
25617D002082B89E2DD0885CA956529EA49D7B9133782E80CFF57472F27BC0D1
11482C5E2407F0458D28393284DCBDB7835E97EB66928F45EA8146164441267E
54185239D9D66638FDA8BDD4DE1F10153D551CCD732503281837C4897D51AF17
B9562670633526DA154F2FC6BEEBC0DA2A57657BE4BADBA11C52E735C2C981DD
1A51008E09E7576B43654C207F12B1FE9D0800C9DA440F8F4DF5248637C3BC95
98A1164C54C878B02839FBDFB30634D2C908A201142248276B7E4F8924750C83
61FDB1FA328EEC43A235F6F3C221A21FA27814F2945BD12376C76382F3C9C3C1
7519E46F82998324BBD0131B32482D403D243A54E251CEDFA01A8BDE36275E76
D3407C62A81FAFC5A6918FC0E56BDE223615AC1316EA2FAC998F9E08DF976658
5D049BF9B0C16328F8992A1287FBE4016ECACDDC72CCFAC8BEAB0F3CEC7B118C
A007C99ACB3A8CAF71B0FD53F0FBB4B98CDD23C4D7A4185722A4CD1DF2EFBC64
62DCDCF81DB674AF26BD3389F8ACCDF1DCE3D915F0FA21593561B3F793D4ECDF
9B17AC4E1A9871B927051015616FA105CD31AC2704D9CB29783F12C090F7E38C
A5F15406029C0EAA200C1BB9070C7F6833CF29BC0C5CC42B68D8F370F21DC097
78880C3CE4E08BC8EB4F995A09CD0E77B6A97267F4C63D4093BEA8A34B315CEE
932B40ADA36F26410CE158403B4CFB64EB4D80157F57E05097732B4DA0F2F3C2
F479FA651F01F72A57705673E627FDF5A0598054506521227674339C79F366B6
CA9EA7CD06B8D0DA8E969FB1F684291242494E52311C02C8A34C0A5B3C13F380
2AF740BD9C765861A95092B7CED26EF1639CA2DD130E71A587A3935D91E2F1ED
F54D76932130618C8D76D20AC022026C6F2643128B9155F977871CC667463212
4F6F9B939EE1663FD02D1E1D74F22C4DA4143A4BFA7B3D22F58FAC1115AFF937
E1A8502296281BF8389A348484028006F3F3248B5454ED6DC729CC5070524D1D
B08A192A26EBA06EF157958C1BC00554409AD56FE7142D333CD1D23D5C8E17CF
1B43A482C44FE52E57AF48D3E9B3D32C3D557ED2F6F284CBCF8856B2A22E72C0
C525500347775505F87BDCC02101AFF38BA1917A296C2BA59D189CFCA85A1AB4
7D180AE3AB5EDC9A66EB2152A3926D74DA3E0E484D43621E697DAC8CC5B7F6A2
587F0A3ABCD8C3AA3F46E30A2EE663C2CC64E2DA3631AB809AE250FCB0B7661A
99E3BB1BD13565961B1B3760EE57E29C8BE8F4333B259C51DB04F83FB8A8CFF5
EA08B850563F1082F302DF65A337A60C1F7C2E743954A17D26C0DD1FC6719E6D
DFBF4CC6E06F7F4E221AA17F75D36F7194C41BC7659CC291CD5DF9CCDE6DA0FD
3C77D56D063AD44CB7970DD572CD605F5E64FCB19D176C24DBEDD2808DB3D785
BF794EA774CAD2ECA4581BD58ADB6AB154DAE7900B7D1A5831CBBB712BD4433E
492B5FDF3908E6BED58C9765976D71E22D7C32DD6A251141C84EDDAF6793DADC
A8DCD7CC7C04DCA33030F187E88F3A42403FD4606192DB1E65591E8CAC11A84D
FE3F09633B0FDA064321595BE68894E2244B800EA15AF8C16B9B8329E91644DB
1EACF1F12425A26341AA5AC2DCE2E64092DCD8A43E347008B7D5A184688CD0FA
CC7802A28ADB7907E056D20AEC2ADCB43DE6F84089E6E0A57A6AD525B4FB469D
4FDF87EF60080E1EA0527DFB9564EBAFB4292516657B11080A18CE326D18DB4F
C12F7A8E9820207DF26473C9C949A2D6059CF772992C5637092710177BA2E331
993DF752B5F9DA8A06B993088E210C91279AAD5922A3546551F93A06B3BB0227
2B60FFDF4B8A791B5B54E5E9D98BD5B3A86E909F1A18CFBBB502CF3C1C33D64C
241B9F161DCA2420C4E62A6FBB9EAA77C3E1CD4050AFE0CF39A32316087A9435
4D471A4D7A6449D75188F3F600D5FE70576EA42629818DF9894AACCF6FCC5C78
714AE6F776AD12743DC8846D4A70232F0EF82F448559F8CB85DD9909A74AD696
B4E706A3B47E119413DD9556FF4172F1B18271FC2435C354C3F09D46C1354E5F
C1A63D9D5B91BB6B95C298D03B35B604E4DE22C24947C31261DFE88A93AE4E6C
759BB40715E971D4F9F578518E37E431CD2798239CC4C949013F16A197425EE1
20A17F7791554750299F7A6109C5FB6761886F19B5B15D74CB098F56CF1CB341
A140660093A3A260FFABF332DD702AC4030A4AD4B5F9F13F05973139BC1471A2
E5D6D0C62F0ABC86BEFCB1F65AF4CE77AF74BDCD3B48EBBEF3576781FBB7D433
B58368D34E5E37B9E2FFCF9AB319C9F3BCA04911B77B657C0E6ED908335A1687
C92D7BF00C6F8129E347C6489FD4FC798ADB86B0C865CA2BC270E4E404F8A08B
6EA22077FDDCF0DD9D585ABA5B3216B772316E03AFA5A27E6F5EE3F77F4D523A
7A4D01199AFC3C88B0E2AB5FE014A8437745108009D13B449B4A055214DF69D0
218549440B1C5F19476595E964EFC9B18C7002F76150B70E79387F8C338AA7CB
A1F3E799A32B23859A4CDFB52C22ADB4DB30D313BD85B3214F6127B0F5A90B25
E1B529E86B0B4656620B937876139F8A8EC00C8BD6EB20AB66BC1FABC48E4ABE
10D7B7E8693AAD1B25349EC43DA3811A83F1E546C0CB1649868C14720C008F4F
FA8D3075910926C632218410359E389D874F4F719293D0B0EE58BE36458AB3CC
02002C46A704E345E7CBA12017897EACD1FB64C1F829392A430C1CB8E88CFB0C
AD53BA7F20DAE648EE34DC7CEC39CFC55A9505206C3C604F4F02C815605D0AD2
FE07CDA8A9F8F0DD0C048753FD98816588DE9C8A2C78E7C8BA614F66F38F9383
79CAB93ABE05747491570EDB80902B818F3E52B84BF6A1ACA730BA1FA90C0D7F
09B3DD6A5FE918CBF88B2CB98B7D817311B63766ADFB7099864428EA3580F26C
C4D4978813067D64E0DF70541891615BDCBF3B5FFB74AFEB695F8C92EB33721D
D3B41058551019C4E12555C4926B0116F86F88A7E9660AA8253D564A36E96024
8C4168E113B6C0C725E49331DC85507BDC697A1C20A553A349DF9D95D5D24C4B
6B2795D94BDEB015C731EDFD27F3823CA2D05633BAEFF23046DF458000AA7477
BE93D17A85E0519FB0B6C5BDEEBB9554D34547816955434DFCDD0733C148B5A0
52196AB08680F5ECC44BAEB2FC41FBAEBEBDB65521D0010402575DAFFF833C4D
59C1941D6160B8FE78D5C3354C17511541D364CA8C1F27232312DDB771243735
43A2C18439DB2227247B30A41C72B88361E10B8CDCEE93DDCDF5BDEFB5F08872
C77BA070C12B23B2C6FF837473C372E70836D4C5747C4EEB85DCCE9246271769
E060E6EB754F8E89B075418D032D7BD972EA6B859338F8D6BEC3B63C5E9999C0
6B34A79E0D131D233FD3CA93D8F5B1DFDCB271329400CAE5B90560D4FC5A1154
EECD0CDBA01C3098332FD8CE6C0A393AB1BDCB88B84A418C9D3B15FB9ED1330A
B93E9A8D466EDF09418F46892F4FAD459D4943657ADD842FF3D6D1143830B378
A3EEECB91EC67FB176F2ED906086FB7518C7167965813AC101434BE5D692FD50
2589F7B14BEE15894121E8CB7971ED4DBD5A2DF213D85A56B1CA85DEA53ED029
9C1E8516B0C02E9F97305FC7E43A31E0002A2F803A30B1202AB55D0FCB8A5F3E
321815C3C7AC714C3DC89D789252A42CB2F981BFA79544B1A2F756D81ACAE235
A58C64DB60FD25EEDB5A9E09F469071BB0F203F5D8ACB7A816012ECFD79029B7
6E3DCF1C4DC905B3C3076E3F280F64C2876891EDE485802931868EFD8A968006
50CD537ADA00FBA19788404DD7AD11EA68A4363AD77A6B5360E8005B6FE5D830
1F3BC9C51D8042417A5D8F0C6E0B44948BF6D96C7D3A1266DAEB075E8B6DDB0C
88B9D0D892843E1CF271C5E81A4646F1256D3833BF0C91AF256E4268CEF6732F
54BD0836444A93A1ACF2699CAE72345EAE6EA356CFF8DFBB285BE2E378FC46E5
80326593693FF10CEF344B6E823AB1D4A0B23A8C455BE6EF471BB8E636373B42
A81058C34BC3F8E4098C22E5A050397513C0DE16A6711C1164328D3D72B03A8D
6902B2DC12DAC3EB3A44304E2B504D7A6AD4EEEBAFC8BE35B06BF8B30FFB31B7
E13562E68C1D259FCACD70F0CCF12E488A3F223A11D29BA6688BB258CF46775A
A9581DC27BEA9D73FB42FA666B3B2D3EFDA6667CFD49D2238D55D45C48100D43
22C5D0C64D459276BF2D8F25F13137C7F1CC459CB3B23FF737C9AE0B707390C2
CBC0C271B9B304F156053EA3D391FC45EF437AC7DCBB01FB056C2B3A50DBAA4E
7CF514344704446D3A12157DE158671515E8FA0324852EF8A2AF55FF06BBF517
28AE6724360C97CE27BF0DDC5513DB7D794E0557D90085D8AFC0EC6F43B313FD
8B3F70D2305B75F7D7C33B34562A5AF707A6DDC41F982FD30A75B7044B7BC486
BAD3557C8A5956F4ED1B59F70E372170D01497A1B020389DEB8841CB34E59B66
0CAF50371D68D895316F6A01DA7224B06AAD1687DBC419EFE2BDAA08ED3B771E
C35651395E03113FFC2CED08DE4689EFEAACA2B75B542A8D06A25135505C220D
D1A84EE4A8E900D059328B9F9A3F4B89932B9982C8D4F0302A61C41E33E51F73
ED4FF4B0E5BADB6E56F7B4B3B9513B8FBC8E3A552AB1614581292DBC5376334B
89E7A9716DBF430CA68E91A576773A98E09E6A816DD71D80C3D80ABCB0063537
098E1F251F863683A1ACFD7164EAD511A3BC74169097C458D6870F268F04A186
65F01C9A647943E6B1F15FF5E041707E41F4ED7522693164D8A8853C695C665F
4569E46B1C796EE0F1E0B755D519B3F91479510A09A9177A945C37EABD8B2A04
2FABFF483882103582209E9DB25EF4AEBE1DDB72B79483DE686E68A33CE20C97
AA3D34B6ABA57DAB38EA66E305A8046E2428CAFCE7E6EB689A0F6D212C683A3F
B192661D2DD29E79A902F9009F9884399F075BEA36DB498347ADB252F07933A7
FF22E3504A7668BE174AA8DCE7C0C96B7E9DB8281E563D8ED7B65E461B87259D
502AD8C09E7074568257177559D819BDB2C5928B94105A85920BD506F7D93E4B
0C95231827D743E89BB609034EAF37E97C820EBD82B6BCE600F0EF9A78F1F8F1
AC0A5CA501EAC3EFF381B3DE6DDB05374C2AADAA24486F9A831BA1179B2EA360
29C9135400776E2A65C4A068C3B5092F3E1234B3D8EF28C892BAFCF313178E02
D3BFFC709F92ACB6CB2BA47A597F361370D560276298242DDCFB5B93FEED8AFA
E28D566645F0E22A5EB61F0C232B03C08B27866537A9CA5F4B63398F52B884A0
74C4C4441015E906C4412AAB326B5079F51771072FF46EC2F7A7F271B49E919F
88E7581062681398851C4348C3109D0671951505993DFCEFAA29DA2CAC5FF375
6A44F596F7FDB278CFE05F885E3AC77CDEAACABF509848CA84C2B35ECC10DE1D
4A063CE605C925F03282F2F6B0E45E4BE3E27CECE324917C5A99F4A32057F1E3
96EA1B598CDC2B459A81B19A090AA25E8D003043B781E05300A295431ADB8341
097EEC40F28EA5744D4A66F93C62461F32B8A683D919B5E13A2C0F34A122D348
A1642FCAEB99606BC079F3230443D11313D6EBB935E635A12D0216F822CBAED2
657A1913E3C0A21FC66710ECC8F2B061733C8D4C355955D7C8C2D6C002F68E91
AA65674C297FF9C638105CA4DA0F8986EB1AED17F3C26B0B98BD2D073A400E7C
A0B870EE6EBF02A0707CEABD897B416E5152EBF506F0D50391833BBC2230B8BE
AA3ACC2968AC71CB65CA8AD5869CC9FD7C4C194AE8D5D20A743996A62A3DE425
B3402318FFF3262ECE08BBD9573C7D76F4FDBA6E4F0859AFD74E72167A3D3BD8
6F381ED2C044B9300605B9B8E5F686536D2C586421D462D8286E25A2B39C0EF7
9AAA866A8A7C28275E5901FE36E3E0052501D4962958C07E573EF02AAB076B07
8597B2DE46F5A226DE8B64DA350A36AA9D2D421C84071ACEB30C5D20148FE6C9
07D4EC63F6431805A40EF837884510B1A8C7CC7D84290ECF14ED1392402B3726
822DC682C601010A0724A50496CD8D787202F8B55AF2922B6C713C2AE046ACF4
A403EDDC21219F392DDBEA601D6DDCE7A864595321FBF2194F830D02D1662EB0
23ECFD1BFF24001929DEE6DC3CC8EC9D3FFB2658CFA615819B889A7655CA63B8
26FFE203C130570142D6849BC5B3D0445B30D984FBAF9F579CE824B0BA20F1FB
D0943F22B4D84CF007C1D9B1D39573DA8CBEC2E6CF74853B93B427A89089E953
E1E2F343F3E3C4F57847EBC5AF87C86FF819AD0834C9B7DD021C1C5FCE478372
9578878D2C9CC4DECF246DFCBBD6E392D8A9EF72A2E4FB46159ECCAFBE20F35A
8AD87222C1735CC0B476B8B54F5F249AD4F43487F61D3712FACEC4B587DF5542
9E396C9C0AF8D0AC0CE02F15E45F1353E3FD7004EEDF96D353F451D9A5027FB8
87045C3BF765EDD4BD129A29DFA844C6B2085D6A445D1F877635AD152323108E
85FD6770BE16471D811569F9AE4A101D1CE2241EC4FC04FE252DBED89160E8CA
25E6D7E6D032C78ED270931D48109C2E5D22864BC6AD983C2493CF1748613C9F
22A817DE43146AE4E04FA79AA91C814B18ABD2C55E613D4F9672B1A13A4823E6
45378959E3A4959132D9C6D730A8203FDDB7138B0C1611C7E62375F2A114F7BF
ACE2768BF2A360A33A473E6D63D300577B2C99A5F45D0C01B4EF59E37C217506
0C6357A22ED1A48386D9A9DA0DF68987B0FF0AA4C418F45F2D92CFEA647A6508
A8ED9C360A731B90C4F19A0999B940D7B30E13B1118FD1A2847A22701DFACD13
1E2A211E08102579F6F73178B76A06BEC0DB2471B4D35EF013829F8D73C133EB
605B5B3610DB6EA6F1D79D96406122141F7F41FC930B6DDCF270F18618E45145
DDC30228AC047F0BEBE40D146096A6C2B8FEE51B1FEC64FC9BD1B28D030A92CE
C7F3F1B26F84EB530BD9517E8DB9DA14B5133EB2EB6040E452D17F96B62B915C
C3860A7561E4D555570A3393F2DAFFF477CB0BA889B4F2E29351789CCA2D99C6
EAC916E0300DFDA1EC7AFA944C8A54C8B3E32A5F8EA5821F140FD5FED30FECAB
8C160B8DFE0B03EB97658628FEC6A6ACDEFCAFCAA351D2DA4C4E0BBA363EBD9C
96115FBF60A81E14EE3230005A46AAFEB7273973E87A0260DA6133E79AD708BE
A82791C46B15673B6193661C06F37C64B667CC6C181DA7251112E3577534266E
113EBA77A94CC784CDBA913C1F534294A2A4B00FAD991EB2D5A2A870AB993CE9
8163E732B738812CA5971F46D1A6B3D3A1F291C2BF89672C4F96497582BE2A72
AD7098563AD9DF39C1DF4DD68FD9DB70D71C93882C90289F1CC5805120552B76
0686B274B4CE8CD9D567C0F1E9A9DEA0BC22F3ADA207D5F3CC74D68FDB75A661
B058AF9602CB37103F233A00E9F9C56E06896B8050DC536FCCEE6C8B78573195
AFE9020B5C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE505B8A69335E25F98573BFAC64A02542D3B835ABC68EE4F
0A1436DD48E963348F6F5650666F6BFF72D385A5FB67448213B032991B4970C5
79925CEFA92DDED5BE33EEE8275EEE83829329E11E4EB1E2E16669B21C3D36F1
FCA9535233B0BB982F75ACF33109F8AE7ADE4954D0B1E1802008B39E90FD6AD3
2DFBD4E8C89A9FA5772BD7C4CEA7C55882CA53A2CF19DD079F8C03E298E58711
C4321BBF26F45460900900A22E31ACD5303F037AB6059E4288B2978A1DBFCBE6
32BE7DC85EE40632B247E37B279DD5500FADF52BDDCCB2405610D5032E3F9E75
51A49BDD4B30EFC3B43C4875D056EC205D4E844E1D39319341D0F40B15EFC6B8
101C4762D9E95B430C36BDE4DD07CF59E3280EEE234606234C278A7286BDD41A
C562AEDA5BC1B4A7975A24E261478CDA81F01E0CBB7EBEBF9876CFC52EE5362F
AE1C91D7E9C281194A84A9ECEFEA5023317F88FB64830E6060C25E80658F0CD8
42A0503F8EF5442C290FABA1C87045DDEC6576D746C1AEC54ADE2497021A2B13
88435D1B321583B42DE5E0F9AD77BC7E6B1A6CFBD3F83A3995AB14CD756C4CA3
7202E05E0BFE9B82060564C1F2BD8471A03D56FE7C722619CD8B47106750B3A6
2F43F87CA64CC2F7B1F4298B24B4FC62AA06FDCC5A7DDFA58FC99E7B93748B7B
0B7D5F050B809C364557D5C4518306F16F8D4FFAE416ADDD1143EF22050DB18C
D1C6359B1B30C213CA73E7D1AE8339FFDBC930A3BB7F243C8A575CBAADF71303
F6DCC2F012E895DB9876EE658C50AB2DB533155AF34D2875D4E6E83EEC06BA3F
AB50EA0C0A494768EAF7987CD6F2A51EA1F0E2DC02841AD5FB7099864428EA35
87591962DDE4EEEB70A7FDC1BDBA17DD1D2F853285E4CA4E1A158E799D50610B
A45F2003568AF44E2EE4DF2B734FD72535354246F33B2E2F7F4DFCEAC871D46D
F7D165C4D4E6B00BF84FBE6428597412531988959E07A6918AAC3B04F079E455
7A1900F97CA3A3189CBFF0414F71F106DCFFC31AF3B3768D917ABBFC72A3D8CD
3EC779B30F4977CD8119560DE687A7F123BA8BF65F2028EC48AB1704D81EDAED
CACB05A19D1B06C53F46C814E740E8F9281DDC2E5A12BE5F047EE68288BFBD30
921A3A355F7FB08371B2CC6409EDB5D1D68EC6563CA73B0B25A3D54C47904EDB
185B3DAFF8EFB307045790DE1B030E6C50BF6C890850878D4717313E314B7A0F
582A19685A66EF30FB955E04DE7C414E2EC6800B42BCF2D8A6F01D50693EAFD0
B47A936DA1E1DC907498BE9FFE7801CCC4EC72F7280B12E16493C0559908EE84
5BAB5386D075DCFAAAE12CAB7FD13E263C254924B50EE8B2E926F7C663DE8582
ED2958776AC5E6674A1EE6BEBA1C6D973664B83298F55FAE495A9F72A8D29844
698A571493EAF914C81AB71D272D3633894B4B8DF5F6703458FF30125A24CC8C
3A2D77CEBCE887401D84C42D546485EAC37D010785A5F86431013CD527528771
E1E09316A274C694C3516F1EE4C13C620D8B074BD56D90603C0108E125532D8A
26F74224A6CBF18EC2B94DD3F90D59A4A64E6134DDDF581F5EE0CFE2A6999CD1
047091C43F17AA513D17AF5CBCB1CCCF8C63D8E5FD08153C1A8C4F2954D56B5A
A1ADC8999B2C1D28885030363DD16116C82C1048586CAA26D9F384A8A94257E6
037E45C2FE7604910D0FB199B2B02E0863C1C287B864A500B1D8AF7667268876
CBCEBC045722356B52F3703CED6BC8AF81ACCB45F6B93AF57B8C1988427D43F2
E44E8520128B9C11B140E9D2D715C81D3CF027786D99A8F9731E745F2BA8ED43
CA0569A3DE8276E96AAB3E80B0423079B4FB231C508874D1E0BAFD37F4876AAB
D744FBB394AE0A05C46E46124D299EC75222B71DEF8A5CAF47910CB1436C872B
928F6F29F876279E32117FB5A40467F07B3778FAD44BCB1A65055CDEB0088D38
3CD8A61745D1B1035C9BF7F2E3F7E286B46676FEB7187A9B44FCE1A153431930
09BB14161A6EDA71BBCBE3506254684A89337844895C2C53CCC4EE5788009A6D
860669961FF4290A528BBBA7DF17BCF2DA50098C5B7DED6374F7BEED0A8B9BB3
613A37DB35DC90AC62AEAB907ED0952C15E337F944CF57F6E74ECA2E54580757
860004DBA5151D7569771AF0ECDF05C47EA7FDAA1124343C031CC98D5B701398
20A8C5102F3B4C06F89E9E458410B46488E973F93AAFEE732CC09BF2475750FF
72A057CE6AB1249732E04AAC441124E8FC12C167CDDA4A15CA6B1D1D7FC44AD9
CF59DBD4354FBDBCBABAEDEFED3D83D8CA0024D6E8238443E0BA7944D0234EB3
95C1A3FFA69A1CFABDC264216DCD762EBC161FDC64476813493A3471A97B87D1
357E2E2AD57538ED78EAA24C93F87A008567652ADA13214A131D49A04B0C85CB
5466DA7BE803B91F8F4A298F327E470598DAFC73479F64AFA0422E51BD11D3BD
BE03BE78C49E38928EBBBCD3AB9C3E63B8474A22949548D344A2164F722EB4AE
6B5AA8D83293674D6AEA0BC6C29C280D1CCFD624552BF2F00027C6DF47A16927
4A4F3CCBE4B11A3768F4E5FDC99AAA2551A1A7892908E3CDC24935BC3D342333
4D572D0E13851283CB246C334B16FB2C9B251DDCC12DC8A1CA63BF7567A9AB6B
0AD00A505C9F26C6C21769ABE96F1AA3B234A464AE5984538550FB6CD78E47D3
8BF2E9F4F589CE7B4AAE60D6FC05A0F71CC751858A1F7DB595ED84E1791C9A01
86F275BF8ECC6D647316CA35EE46ECE9D360A0D49C5E3F0894FD09306098BE10
26AE0BFD166CEA6A0207C86049FE7776F87D120930D50D90A0FDC7035360178C
B704F0194DEFEACA8407AEEDC50FD980F7299621B080CFA8D5AF83886F9FBA63
2A8CC946F56F1408ABE6782B293A8107C240EB0368B87F022AD7569626466BB7
42B6F249793470A9B14B15D2CD890A977B660A4BB02B451F274A5949BEEDD1FA
D102B5809E801B22F4995CE5E0A5E1340670395B3BF952CE5291284611BB609C
FFF7C404BF0E61E75E5443226DFF4C266C240F34E4036561C1E1EE66414686B7
DC670F06EE588541B8763422CB55AA0E2C5CD28319228F508AAA9C73851BF10C
3E6506E1DCCC7184232075D7A620AA16DFFECC9635CE3E58B8293F8DF72CA5AB
24343BF3427C5D11DDEEDA384C0CCC0B99BA9E736B39D6F1C79877646CAE42A9
79B4A3086A0BFC4AB066E130A29D36262CF501ECE84AA38949A39DA2A9FBBEAA
D851008DEA7864042EF587A6D63C51F8FAAF3EC8E5E0E4AFE8D6F1E15FC9F23F
7598DE073217394CBC866E18AA9AB1578A9232B166BE4209CD7317FCA5A4BD99
AD7F18D7047BCBF78875A8420DB3755394EC75C25CC8EB574B11C5F1A0157119
8FC00CB7EC33C1B98AE91ED665A869DBDAEF219C8239A2603DB59F03DAF91542
A52BE0D49EE39D73D05281FB2021EDA96DE1121CD0C00FE62D06A2D242D9BE3C
51112D76735585C456931731FA576C01056EE15C9762C0C4D3DA1A07AF10FE23
77FC5BF9FA7020CD545B7F6C948C5071CFE0D680E018950F545831B5EBE3C19B
F384A51DF56F3CC7757B8D037FDB95F4D1878C407B8C1DF1CA9E9236C468E9B8

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic8-Regular
%!PS-AdobeFont-1.0: LMMathItalic8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathItalic8-Regular known{/LMMathItalic8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic8-Regular)readonly def
/FamilyName(LMMathItalic8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathItalic8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -250 1110 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD112356772A65C14D49D03C7D456E5
1A27C2ED815B30E268B02FB1D2E769067ADAF25F28640307E3A89F0B04F44A1E
1392A44B8AAD82CED1539B6A9CEBF441EB81775C7EE4CC12313F31FE710DD429
4B1955DF2BF7A88E1EC21DA22A63BF63E89C913EC01EE10A0601D6FB239DF59D
2CEE7667F4CC4BAF660B24F635F981638F40E8CCF07F21F5B5FE3B5C115D1000
0E4B2ADAF7B1C53935EB7414421DB49A59F82D98D08351CB0BF0C06DE836CFD5
42D68D51AAD4069871F257AB7733F8EABD731FF9B0E3AD64000BCDBBEBE26F88
C96730B45C14458F42927E24318A97B48235E5FE200DB40706E9B41AF7CA33C5
67BF7766BD396006C5364D1E736B256538E5D163CDA75C4F419620D5BE5DDEB1
F7D7A55B5ACEA2B2EB4B78997398C7D38B3D7B5774D980C087236ACC7346F518
7607A19E85C83E2C6ED4F3FA8C15B65FC3D117BC5E3FFE33A5B7A69F7F7159CA
667D96B5D03E4C5E55FCB1F4E2148B4B8DA87567988F07CA181FA6A3C3C30A33
80AC6F4E92903C47BF489A2376AC02B00B8CD01DE080C96A452D52B4B56F9520
B85062F15C4828813D3694BB4BD3512541C82005C9AA5C065476148A4E47DBD4
580CB1ADD206D19E7D653E2690FD48B252BFECDB2C64C96F7477B2E5EA0593A9
84841E96F931F01B2B61C26E8450D5F2B37B51EC364BC2A1233FD108DFFE0F00
AE57465ADB0191B38D14E89413FCCB77A9FCAE09F59A3F5C352570F7390BE91D
178255E10C02CFB7B679DAF86EB351BDEBB8A7D4DBB9C65715A1355FC8D2C355
BB452D44AFDF7E25676F3D688629145C12242C6951438E3E6CF1B83239570640
6F435246C135BE54FDDB47DFB318A7885941AD2293441971A713762B780529E8
CD5867D3111E875E03774474BD86F6AB95AE1170DBDA9AC3B3376F9E5CC26905
718DDD07C6D4A010ED791CB407A7959F6668F66D3D48597A0D1D29BB25924706
B0BC0F896A006470C97F9C400CA7E283E58B1EFDF083A5E8E4B299607534E588
FF88BBE199A76734AEC487BBB103A8547A0090F0342D4DD266B9B4E40E5BCC6F
9D38A98AEC711A55C6C0D1727985D1D1F0CF0362D02534F7BD45AFFEE4A23EA1
5D91EEFBEDFFC59EDA04A147FB51227A5AB0C13DBB37343980D51CDD3524F0B1
46BB99BAB1D6B99D6CD383E6B58BC879DC734DED754FE99DED43C5EF4A2A2877
24BBB8E65FE1141502C1218C55773CA3C6D3D4F54BEAB6227878AB001472B32B
D540B24672F7383D02DD2697C4F4753E251B39FC715B90843F7BE431DD016468
1ED8F1B2A413CBA1EE74CA0D6039D255765181E9AD72B4B6B38B517DFC27D381
1D1AB8C45C6611A4C4247CF10521AE6964C584E5FB15EB0718985144596D3F26
675EB99BE87FE23CFF1B13F40D3F8D619DB75BBA85281C413245BACC5B525392
0224FC37B4B2187C510882F33D577A628BBAB2F8743D31E41B150FFA93DB3F09
033120BB684FC1036850C6B7DE348810677CA6EF9135B4560DB12A7687AF5252
5D2805AA092D802E4CBD4C8CE92063974B9ADF3FF0684DB47B805E2F60779FF7
67AF2CFFAAA7F2FDF9551EBBE8B2E16CCC5EFD174057C781DFD270EE45EDD605
48FC8B0996B192D9CEEE79A7012A045FF72E043BBD2C297D25B4BE338AE55A86
F9BDDB2548C63395BEB1466E532F8E208D5E7F5F2158B3DE9E17E227FBB89311
C8D330F0AD6E39865395536828DA89CD9111E932CE3B50F0179B013150BD5703
2052DFAA4449FE4B48628FF2D0C8A9CBE157055A933CAA161CE581A35DA0713E
92EDE9E4D41577EF58AC70B402A4427A752C3EF61F720CE7F7788599AAF3FF46
CE5AFDA10FE9E5E7B76996E1D85CB9B62BDE07EE8346E30F68FC1871AB4D0073
D71DC38239BC688D3F5F61CB43AE2B1E8B8D45DFA10483B09CA31092899D641F
B2F20C3B8C507D22CCBAE3EB921AD87608057FCA2A4E936F59D56BE984EC204B
A9F310F6CDA79183E8A7743D3E73676013D183220734AFBABD04CB7A4F9384FC
189B09FE4A0BDFAFAF6DD710BFE0C82A452DC73BF7B55D769E02364D6D847C4A
895B0628D669C29015EA231376981947B8BC6002B0AA6CC507ECDB9AC2C87944
A081E4168F7DB19512F0CD1BAEA9BB5FC463FFF07A00B213D706EBB8D0D695D6
5207F622D7DB0F1D012129B1E1E2DA0D1529744D167717B2C91630B15C36A419
F10ECAD07A54152AFFF8493B7B3605968731CAF687435C7B87567AFC524A5F87
21B548939DFA9C95904E1E9347F4DA81F17A67D756B8E5337844FE67C8A86623
63676722BB4CB5AB46D9EA69EB6DF367561880F0EAE7D1AF8F019D27BEC36C50
8861E4D381217477AC1567BF48E41B1E239065E32B17AE787C7ABA7E23829A4D
EDCD6305E517557652C71AF007715E9BD58B1AFD41CF68C46B63948AC8DD6188
16A2078A41BDE05D760120DE76B2B245E77C5962A32986239FBE6B23011C03F9
A39B58A3192FBE4B8FA4EFCCA106316E64B32F6DEDB10046637DA9BE0B50E3B2
AEECB5FC28EA5672B8C43E9D3CFB6B203EB68804D6C244B2A6B504ECD0A97A1B
FB7B4B869F899C534A533C2476619B731E07987529DF23DAACAFCDD7979467DB
CBA060BD8CC6BF48A5B211107A3E6FC51A13A3D3E0E09C0F6D963CB430C6885B
9D1DC3CE1F599D1E7D77F59C5787A47BD669B3C4AE0C7ED191382750DAA5F919
0E62212EA31793C81E495D996E8A7B8B409932B00D7856410A12D158A2AA7E7C
32C9A51E3E229CF0C88039CA1B50DCC2AF0979F4DF3ED733BF905CC9A14CEB5E
3242EAE40358782EEB6506AA928184A9DC9225C6A6B97657E47C7F3BC37749D7
EDF4B3A22E7E161E31BEA12925B4CAA82D383D775ED09E7D4657B7C30F56359C
9BC179D6B5E00BC7EE96176FBC588B2B8005C86E0309CD79F0AEBB3B8CE48779
1DE0D1CAA2E0CAEB902D9DF1B55DB9CC22C0A0C5583A831F490AD304337ACFFF
836825249A6BA565E4143ABB1D01F05FF94F61DD6DBDF8888715F70ED1251BC7
F56FE77A33B46F5E53600C5A64E8335A36789FB813FB8C12C9FCE6153B58DAE9
16FDF21E3E9BC3BFAD5D0C1D53AE3CC92C910C6595F13B64D28714DE2C57F3A0
9D30079562CD2780BFE2E695282B683FD20C976A9680CB3AF94D19760ACF0F44
24BC187719F06F0DA815F27F10D74C93F3FC4DC8F0F52D6CD5ED9BBA07A8EAB8
B90655AD1FE072006AF58928C37034C049200CF5C53BE121665C6D5F7F002341
32734DBAF7A17C703D8356814C0DA47599BD5EEDAD00555D1D763FB7D981CEC7
51C8B61A2621173D58459FF807CC6200C07B964561B2C16A551714D1AD8C1C7B
27492486DCE867079B3A51D159D7D426A27F9403CB74708BE6CD6AECCAAB5D06
D97692EE119C48C83F18B685A3ECBDFCBEA26AC1C759A216630107423093631B
0D304CC13AEE7CCB6CA1C1389F79C83494153764B9903065C63337DBC7B6E82C
1635D69AFA0DEF9747DD175606CAB28ABDD4DC12AD1FB47BE79598FCB847D8A9
DE3C220B109AF69A5015307E9345ED9128E128E299C7C4F197FB8C9176CAEAB3
617AC48667230050FC98D695E7553EC9DBC5760507A747AC2DE5E8258589E4C4
E1208A6175BC9F7281AB1125CF9AC2718B5A812507139F94792BFE4C6F020556
218BFE8FEE9C0803728A4E6E46D7CBE4AC7129E4085E272BFBCAC90C10CDC145
A3E7BC13F95FC8646777D73EF9D8E742F7E7D4E1B03C12D2A66D8B31762619EB
3891CDDE83657B321407ED21C8C536EEEE46D1B2DDE80FB795FB77E21791A270
3B292792A2F9A40E9A2C0857B946F6B8F1A7B8326E2297C5B22BE0397E6649F7
736E5E1AA4376095
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: wasy10
%!PS-AdobeFont-1.0: wasy10 001.000
%%CreationDate: Sun Mar 22 11:13:35 1998
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.002) readonly def
/Copyright (Metafont original (c) 1992 Ronald Waldi, Metafont curve conversion by Metafog (c) 1995 Richard Kinch.) readonly def
/Notice (Copyright 1998 Taco Hoekwater) readonly def
/FullName (wasy10) readonly def
/FamilyName (wasy10) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /wasy10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /Box put
dup 52 /XBox put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox {-23 -1667 1720 881} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB02CB1AAE
36F1D7B67C605A37687A9C3F7067F07673039D1E3E1F5D9B09E6A389A55EBF12
06E72531469F768EDBC4DCCA572BD608C4BA8F7EC3E5BC61C6D949C94A843E69
0622F0AAEBF5CB25A2395DFF6342106C198751CF0B33691FC18800254AC54C04
02494A0E3670008E8BA57A3CD823BF47494F2EF9244421A8A0AED84D153D7201
BB12EE9478DF00CA573F64C2474817FF401EE94BACCA8AFC16E776665C3E1E31
89AEEC906A2B9F8974BEA7160C33F0AE7FB04B2666A5B16659D6DF66A688D80A
B531D9F866F21F15D55C6FE75A8787091359698E434EF9C129EED0427EB96787
B3F25C530E3664725C63D4C5DFF9D05CD13619FC41A001275A78C58F85FC7C4A
911CC31CB426231473202A698E5715B032D2206BB361EFCBFE3E32BC0C8D9BC1
353AAEC62EE632FC8FFFDCF6E7D928F562F689406CA00C11C7EAA723B62FFD2F
5F6343AF494085662CE2CE880B04F5589396EAAA8823DBCDE56D868B9E66BB8F
10EA91AF37D76A1BF27E69C2A2ED1D8B25434C0F205313ECB8A6E039093FFB32
983346BEC569B175529DAAD1FFEC1A9302918FC947C390A86C061AE0F6522D79
2D4FE06AE4FABA59F225D7ECE2EECD4BA1359DB18F8957F551C5D6F037F18545
CC6D03EB2DCCCFA294492ED72A737588457E5B18FA4CA0F6D6D8963CA35DFEDF
31A684FC0388D416D7BF6CD9837AD8692F284F24B80CF9F24DB10DAD0C4198BC
2D2A52D9F75CF6C52C7AE0D8D4598DB750E9CC97D0FD31EE8C598A2FF3745694
29DA808141AF4D8F8AA36D7DDCC3457D5E082B2BDF7EE060296721D44B092E70
3607B2335488925E41B22D659C8F0FFEE19A7C19547A147DB851262E47E9C4FB
0A8364BCBC1C77E29A1183EF185EF35B9A5B13170730ED52D5C52CCB460E7D37
F4F37F772794BEA0DA201C99C52F8AC2E4CE7FF33F6ACB796E55BA2372E3B035
52C4F57AB5C0BF828DC7E5A8F8F00ACE0120B99667816FAF5D736BCEBF7D45A5
79C9B5EAA32C9B672D764D2F51B2393ADC71A36AC0D5CA76F3F571D50CB4C1D7
CA77149B8F0C98198919DC43890B0BBF10075D53739F7E84CEE95B40C3DB68D5
6E9847E37B7920412068C3DE2065A77281345980956AFAD312499818890B454F
5DD8C92695818BA4DAFEBCDD4D268763515CE077A64C5F3AB384A6DFD7DD9641
FCDA0A3344B3A14F82D478B4BE7BFC2822A4D67AD3FD07B11589B93842066528
1E51D954D7E6019F6921DB9B00ED303B4B8F557EAC7A0B0340A268B0DDB25B3E
BE0982129B0D3416CA5D07ADC689CAA181270B8141F9D0F60C60F156CB305E5B
E71D9A5D5FB3216BFB66284FCABF6D74564D1288EA99D3FCF6F29C3AA690A596
02C0AD2BB29A2D457C66031E5571A1454758212EB4D053F4C28FF629FA94DBF2
9677AC4B92C4DF5C7FFDE31A8F2D6F9477896C11CBA890DD464C9231B1C350E8
E8CEE17F2E0F5D10416F7D7FBC6085E9BE09E692951EA7B93A9F49CD458476E0
A380E1D122F275093ECFD398FCA6D714187CC12A2B16318F9E1D2B0E9EC134A2
C4D2674AA68D2E7EDBCCA383
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LMMathSymbols8-Regular
%!PS-AdobeFont-1.0: LMMathSymbols8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathSymbols8-Regular known{/LMMathSymbols8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols8-Regular)readonly def
/FamilyName(LMMathSymbols8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathSymbols8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-30 -955 1185 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F035757560E05960E2C327020FEAE317
24C484AC0CD3C1AB9CF35516622A022D6CB83DEB8126DF04762C901617B35492
98158049D5C65DE86143B7F36D36233A115C36DF60D3C55816B2B0B341102AF0
90D7D4E00A7611262CCD366F870F0EE8175688261513076B608C7E160A9A79BD
2B66E2E2A89CBF6D1703854915ABEAFA09718FE338924B5AF1FBF1209786AEB0
0026C38A2C7E208E6C306BAAF037DFB0F3297EE1ABBA65247CF72D0F78A9BC24
038966CE124B94487282B69D6BC0B5E17441DA55415B5369E451E2B0D705FCAF
3AAC6DBEBB8AB0313C4C201F851DB96CA9EB49357C3C1AB73F0CA2110C994680
5AC8F0D760C03F71C92CEC2E1A3AB84813D389BEFE7E0C28FC76FCA70704BC4D
159EE8B490B95CB09DD01A4122A686AFB8B9C69381C8C303F9A3B695238C3BB4
CB44B3BBE50E2BAE63796BB51D945469BB75C69F7A758180B77CAAD2CFD5951A
23580A3D45083C8368543DD37AB49705B939804C12D4BDFA730845F7E42A6C9A
B3F0A376F44DC297393B85E8A18C45C99260BD499DE599CC0D76EBE4AA7D70AB
348FA87CA9A1000814C4FA99B4EBC35A0298AA29563B030707F3EAD9FFF7BFB8
3B347C4A00BFB392E79B79F413E67A73FBB006EBA896A65CB21BE940A0940640
34E08FF806A114ADD3FD42BB394F76CC77DD869C46DEEE20839C9A2FF73B840B
0ACF238D333719F5947DD4C39B8E3F070EEDDA1A39D526319828FA9F47F03D8A
245D8E215B37959566D26DD98185223E4FEF01676650EB4E26C0A425E6C23C50
4BA94BC88E08614769C017F6D4F14C52D7189D4AF8CDA367D8B04CA8D3F2307C
0A7A179419A80695912F456637F539123745CA8E696E250E0BA6B7C6277394E5
98A8799C29B6272613C152B0CAB05F3C7795791EC9AF2BDD416861A3D13FA858
BCB6ACF5BDE40E5DFBC1A171A7280E8FF4AC0D4C8A2199E9E2BAB5CB9131A76D
EAC166A7C449A549EA5111F1750CA2C6E1EC6F00CB6C62BA52D17FC66E06ACC9
1E6B858F9393AF9AA5E69F799E01D301B647DA57225C2920E3BCEE9D09CA5C60
F22B07F24A26DD8F4D6F9C78BFAA8D12A21531E713B80CD03A5FF4F3BBA2AD82
3BEF7DA8C97C30F1452006AA3B1A168483F6EDC4089ED02E567923AE6DBBCCA4
8C246A080448200C2A29C34AE6255BC79B73AE14B980A7C357681BB0962894CB
DA32FF2B70B21AF4D158E0F74652684A7150D0967F83E13EBBAB33588541AEEC
0DE8C53851845A44FFB46A93CEE3E8A0263882542F7F103D13C367EA8E1ABFAF
6486A9DBF6668550BE7858F5790BC87C66492C0FD34DB08EDF842E1AF58A09B0
85A9B7FA402029FE2439769D67DEBDC8AD8C861E90E5322951A2904FD702766B
36916DBA8F9C96141BBF4788FA435556B2B4E1B37DE4506ACC4224CFC00A8F83
33941A050B51B9508758F4EB2DC074D799F5116296B8822ADD743A043F9A6426
88D10767A9F99A072BD4C88CB579B34687BA4953B96DBA29F33211B12A0215F7
5F2F873E5074A7D593DAD0EDD97270FB9A87BE870321A49958B10E32850F0148
68E0A1D795937E61D4556BCDFB7F4DA63A884F9B4B07801D30B1357C3432D6D4
7B72B7D6040410C194EE5124ADFD7A40914BF569EA1F9CA8C8897E839D262395
5EDB3E97C591A3A5927DAC229EEE864B8C0F79ADBF88C0E6C41CC70D9010F07C
1CF9C05960E34FABB6C5DA4D789E39F35FE01F0B22BD9C63B3098457716D6B22
5EFCD0A960F3A2319252C7A0F73A4770E056209C14D721A714D713D5F2BFAB32
EBF815DDDE792B2556A87C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFB8DD9B92CCD508A09171BC12C8ACA32FECEB20
7CAA1C2C81ED075E3EA7E712D95FC612CF97F3402658E90924C75CA278243C52
D4E02E8224F197E555143D563819EB1ADD2248C18E02E18FE3DCF624E37ED993
3C7DAB05959E694040B7EF5F92D80AEAC2CF58EC01BD61D7CB962C4EA678C5C0
62593DE423E11AF90918CFC6E1E8F9DA428296FF0C92CA794AFBE2067C46264E
EEB0AB0FBF2EDA1A8420EF654A1D4E0A295D1DFECBE39D9FF712C85C748311C9
CB8695716F72FD4F80E77DFD7E01E9FB8CB1F2B5971940EE4E7B14727B086F27
E43E6E3EA6EF0DE68E17C9C0F050085274ADB56BAAF193211E48D1B82FE44A59
2A9F5FB13EACEB54AA027C1B87380F9EEF9D500DC327702B132335FF288ADF62
578F30CDCCCF826E4C4CB57B5D5B537BD2FF89086BD0C4CAE557ED66306DF3F5
BA9D1007C869E8594D4138161162682A719FFCB1A982A5CE8765E2681E64B8D8
4A7CD7504E58CB81D0EF03A3EEA97D43741F54987AD65FA54A1BD682F7EFED16
D35D034F1AA5CD4EB628353F1FFEBD0CEB905F10C183245F1B733C17D3B854D5
3BA686CF4088BC6C0FADF9A6C05BE3499567E930F710682B8954108AB7B126D8
255F1A0F1BD08158F94077D191F62DD73838E0CDBC99204AA6AD1309BC5668A2
A524C6D1C68B4E416B248A6FE29A67DCF4E1CBFCE603260A277AEB7F75627333
3E84F341637A1BDB292EADD055C97A12CF0B915E39263AA9F03B21C1F45C87C2
CCB12B59066B6DA2CA24E020A0FDDCC0498D74594AE3ACB0EB4CE7727EA32222
07E864C7F39773638E3BD2FDDA11C79177AD0A23CFB7F631E00CC979AD410F81
3119C0543E091E4820C12FE47E3154789E02FE363C319139350F014FE8A785A3
F66FFAB8D8C9E7E26E49BE5FE558491D1A57B150A5B386F7ECCC0EE8E31695A3
36BCC7BB9F7FB26DA3444238CC33E2791CABC1DCD0BFC3372E1DE72D93AFD1C8
E2635A5E428AB33E24E81346D13A9377EBEFC6206D372675CF43235722B50C78
8C4A02867C68BD8E5FE9A45653BBAF2A5DCA560DB5BEE7054FB8B0A13AB598BB
C481A3240450D1453A1CC1054A06B962B7E28A73BE0B2713DFD32DEABA293EEE
AAA8C0409564BB1ECD1249588C18D01D8AD4E0F0032FD811ADF35B869BB210E4
4A57178893AF229268DC5375F01AB676E600823FEC28C30D2208A868EC0D01B1
4845736F9DEE02D06634547729442ECDC50C90989CC881C3D8E85B76FBB10040
F0DADEE5ACBDBB43307A30FDEEE5F77E621B130E4B824CE23100BC08DC65BDA3
46307E3BD497D7F1E2F51B557FEB6AA32E84F5E55E5C12A81B73F370431F3842
A1B0CAFD4ECE7F0DC8E2A6D644CA8735A4E96445BA9CEBB627718F858DC051E4
3963ACD7E7868CAA4488EE815D40E28CA54C83221810546F0009F98531353C9A
8EBFE7DB9C9A120C2A4E2FED0E63F90B8DF65026707BD39B489E54425A5ED877
73C6B3A8ABC8ABB13ECC3B249F1878A8F76D59596C63BCB936321589906AB242
14F3C046A1F210FE287A8192CBA7D2A89BBE7A7B2DB6B1E19224F04262D6403E
3B41787E1449587E28093E66A9837BB94195E3A4A5C17DE6823755F59BB9E3A0
52F69C7808FB657D9270933D8B167D2575CF146336BB1C76735BE5CAAAEDBE98
C69F89E7E71474CFC7515F73F86727442EC24D46F92C99498946CAB6DED8F5DF
0540063DEC2EF3F83AAAA3F4F68A8E892C3D0529A466C6A310A6101223949B01
79CF7DE6B550657C91BF3116EE7F85B0178B3227810D99B48361133B54A6DFDC
872745DD45766283944D7293D6FB1B42BCDDF2F241AB267897BFABA39D0F2725
E0DBA7C8CE305DE7C1B59DC2184872FB99578B809358856E4E99B28E138E2DB5
85CDCCFBF2B46F01012CC94E2FB30C1E4411918E892630F2AD07EFF1919E9BA9
0194E24A69649F0DFD0046D2EED7AF90313E70594EB5C354023BFA07912408F1
72E39AFA29111A71BCFDDA20BCD6006B0309EF09261B7AE1C67BDE0D385104C7
C0730BEF94DF3D9BB2161C7346FAB11805152716480C0984BA13A8433ADBD629
229C446AF84A690F56A09A84EBB1CED5515C36F2798A89689BED966ADC9AC306
D01B6E24DBB2CFFBEF205FC921305B45B1B8FFDE2A09CF6301F485C8B7DC2E56
82DCE3042DC9767C407C0DB4D0FD1A4881A34FA0EEE7810D69F2428045CD609E
23CE37791362950FB435D1899A47E6E69EDB17BC08CA1B092D4F20BE1AA6BC4A
9DEAAB1B74EEB7B908245CDDB7A093C1AA307DECFFE53A1FE54984DB1360E320
862F2CA6E0258507C6D3DC1DB94102FB88F631211557D3A4F79A8E5FDE69B1F8
4E9FB2EDBFB4B8853524F58D4E1EB98EEBEF1B6C2D330B1CFC47ADE896255DE1
FFA8CC1A09D26342E89B9A39149E124C564C5251F613393060892D5A51B78BEB
3E44B78C50316C61B6FE484CE582EB7FBDC53D9427FE267051934E366F7C7B2C
ABD2C65921B5520C6F70C1B6E7AF8E11BA4798C1DD2EB7D4F962028061B71099
8E5EAE433D8A82CFB15547B339AF376E9341FEB9433AF21E8D84C50F75043419
1ECF16684180B65D9CD4C8CDC57A0BBC0598B3AB03652A6AA459894E119B5356
CED765F73F6935478D5133B9E761430A39CAB0DC109B02A80626A9ACD7856ECE
4D6569F5D1D918A30005C31F177816336B74AF8B9931BEC0CAC75380C714BFB1
BC100B05D19D7BCFB18CDAFB0310935E6C7EAC6B9A8134C4E8F4969C9268F7A2
C306146CEC5039310EF1F4ACEA1A40014BA27BD58490D24B7885E4084932266C
621A42B8A3139CE953DFA9687BC439A746147F456517EDB169157DAD9D8AE5D7
EF2661E266C5C812B03E2569E0F138C2D58E38EC9F0B780C298874616D09E399
6CBC81BF2A98EC7A9A573A79CCDB6327D0DD0F821F886FB4496ECCA78FD1A2BB
CBF0CA1255799DF587CE66F042F7A5179B55075FC89BDC3302D01D7138DA0828
4C8C35A8E26752CC2EA8F3AC2AC68E70946C3E8F46B9C2DF790F79269566BF9C
9A6E54EC87BAB7D34EF99AD642B738312FC6F300093EBC7669C934250A5CE240
A1171441D03FD75811F371B3895AA29DDC6A984C0E944711C77542A66680C933
9C7F2D5A30471C6693CEA46EF483D1046E1A9FE6EFFA27CA8C9ACE821AB92B0F
5D9DC9D0A91B93ED65003BD0C4D6608A6236426C7859229DB42614A54EBFB4DC
8097C0D9B0FB95A5A87CC9FD874959462454B5D439C456BB55FB81B09E3FC5B3
26D850A5DED9EC17E11FCFDC544B2885995B5EA543CD7E8E17FCB8B4ED57D7C6
1B0C70972F86F67336647589FB0EA874920BAFB89889071729076D755021533F
B886A9483867A5E3CB8A961CEB372CDE1EA852052312ED4484491532ECA79ABC
3EE60C00312665A8DF22AACCF0CBD84EFD9EC148AF4245BFE780E23BB321DA56
DBB416890407B39D34B68BB61B00B146D2E8F794C1546CEA6E037D7CD767AE50
843AA610583CC318C66E25ACE786FE7B406E5F1F232517AA77DD3875AF98FB1F
E6FDDB6323E23AA93628A6B5887CA2263BF3F5A696EE86831C603B0AB1442AFF
5FA6C191F7A83C324AF0629A269BC5E6602B15D0B8881E6F37D510D53C60AF3F
6159041212131F18BF75E71B5B6E7022B99AA55C94130C7A4AFC72E016B43A65
AA522E7EF3FC6134D5F715878D99130DE16A3ED40825C75260C7BA8A5A084766
1FEE0F6B8798F96EB458F2E1ECB61B6A2C9887A5D0541AC711EC68B79C2CA3C6
175D4A90F08ACA408540796646E0DAC8220792B3FEB61999671C1DFDFA0919F6
35FC2CB139762BA4D20490AAAB168B00EAE492D1EF564F9D4A077B526322E8A4
4E42451F694443F3C4E2FC9541C8344D3575996B2C50A6E3D62384F9ECC1679B
6514C107D7B3A613F7287269594865E9453E9B6EF227867D9CF9549B3B5E2A6A
F748308BAE99AE06106D90DE65FFC15685F8CF6DED13F50F406270CF873290E9
9A3BD506A8578376F788CFB65E372FC69FE9FD47150A0CC019FB7BF22A3B979B
EC26787BAB2D5F893EE00D41CB48E35CE9C08D0BDC30768CCB856C1CD7DE9E9C
0848692C38D1E3016BF4B4E37EE291081DE21AF12C1240C57540E73362D1F9A0
904081FD330AB6BC5E2CECD68B9981B2BEF1AED8D00A3AE7ED338B9E18F72045
7A4AB35C68C07865063A2AFC57C5F2062F908641625F5C1C0C6A364E3100A357
D10632538A2A0CDB6AD680DC773ACEE840A11C866CC356BFB3FEED65526A133B
8800E5D9734B24E017A2E354045A20128E1705A76CC4A6F6FABD063ACE8A01DC
45383306CED62F67716BDE9F3379CE9878306CD4905832A6D7971824A12374A0
CECCAC565C16B53C7C5E1A202F5363892C77B74A200C9DC2E2179D79AED00A2D
FDA9B22773F34FFE430F51DEC9D81F1FFDCCDD178A0CFDE0E7E46CF99B117B55
B3CA9B1F3952D101D6CE60D1A0A97C99EDB3FADF880821AF7D1CA940090DB589
20B9219284D91DA3BD4A61CB3BFD0D14217EB9F2CB21F0FF6087C7308074735E
E35C87F51AB5DDF2041BCC6827E45A0370F0F2D6FDB8A1FC5066E1BC3F1D7B12
B234F60899F20EFFA823A8ED6489E6A04A0110DE316A16B9A8A6E831396813D3
F551F18C2D70B0FBD115BE7EBCE816AB40D2ECDB17E15F2AD8D3BAD0B94BB1E9
E4397ED46382B7F8A62CF533D4295155716F96B850D6FF61144F6A9E51CC1B8A
86A35082D9ABEB8D2DA4B491536CEF9D1E9F4FD8C0003E6F23293B82B65EE0DC
F0830C02BEA2CAE21DFAAFB537D8D9F0A74B63C9D0A6A9BFAA49F87C4FC0A724
1808AB8A4938BFDD1B8644456D6323286CEB879B3BDB928141D3E5403F1CB5FD
773C8B9DD0042C5E51323CB81A8EDE313FDE90D905B45223A6504CA4D48826FA
E6756223F2FF5B5167ADA7EEF2D2CBFFA77D88827236660260C19CA8BAE9DBBC
7A911F54C201E4F627816CFED662D19C21824CCDB8F71DD18800B7E40E164074
33FC9A216DC7AFCE1C5C7F7EBB14725E4813E05782683C877C7EC4C86D6FD378
06CD3E28E86F10868948EE507B47172D7B52B09828010DB7975266138B7C5168
19F07C1F01EE32CDCE87348E9A967B430996030C42BCB6B3794F51D6F7DBCCB9
A30006C7D60C7E1AA2761AF25BD01C501409DC094980FE3A0D2A24B429285A06
EBEA61BB134055B25332C4F2AFCD776ED2ABDCE78D2BDC07CED874A173236473
98EE737ED7C6090E857AB029E6C75123998FC42D3E0C3F20960FE90B3CC6EFBA
5BE1F043F38C1E3B3CB2173152213DF78D7C0934B29652E763300876BB073367
A61A91B741B3CC4B68E496316C1FCC57968F790C5E7948B72C4AEBA496FEA882
575B6426A82F101D8FEB1CBF633184CB857E6D5AB42F92904B4D0DA750DFF2A8
3A30B03BC1DB36EF6FAC16F69FC8885EAD2CAB2644F1E25DF5F6EF5B5ED1E80B
82B3BB7F5B0B954E7078DE3E31D8AE65F9EA55FD147FA2DB2E8385C7B35F69B7
D06F576D7570D2B23AC1D7040992123A276F3483AB90D7EB79A87E6467D40C46
F878C63E035056CDBBB9F4DB89659D42B100853BCBD4D0A15071AAF8079B7768
5637DDE51E631007A29FAC4FC89EC53A42AA58F08999C1DDDC1F129EF7813073
EF9409838CD519B1F9384DAB415A394588881EF3502D2588589B5ADD4C1F23B1
6A9440ADF2974910C58F6BB26C4F58D573E5546629028DCA3154FD567040DCD5
C54B9234618410808685806BDBC524F3914FB3F945E0A8B3D0BA3DB62D680AE9
DF1C22D1E205B546D86FFB6D567AEF67B112126E2ACF3642047B54B09D3B31DF
2790637E4375815EA4ABE99BE732D6518A5B8365DB72AEC255D01E5F51974F8B
80E5501D8F33616769788FE84E1E85CFE56E137BA47C2A14D106F554978FC07A
154765411925D03D58A22DCD2AEF5406DF46611E216F8B9161510B36B230EF3E
93590FA686661BC2390E19CD3DEE77F3538ABB1119F13CDF297EBD29C3DD1888
F0FE99AD7ADAD0922C1BEAAAD9B337968A02FCA0132E033BED6E64D0BD1E9C51
FE0264A18B16E899EAB7FB6A5D283005D97035874D2B9AFD4D3F29B4B1E6EDE3
0FB077310016F5279CC754F3D13AD666CBA8F8C56E27E4466907B099BEC7CD38
699015DDFA5E32143ACCD729EE43B417EFAC4D403595265F0306D9CB3B26CB5F
05EC5FBA7C19AAC361613A028572D68AB9D20F3ED4130D20DB5FB364F7BD728B
86D3BBE1E37BC2104E797474023611FAD7AC43A659829BCD60A999E9F3E78F64
80C3C8B6297958A634242E698BAEE3C5CAC2DDB333270F9AEB92A892D0578C34
519695EAD030B18D2B1B928D2CB8CAF6B4484B03FB878D974AD04A770977FBB2
C31C4F8FF8BB1E7DF55CBD0EA7805A438AAB424675C45984BC321B8331096342
44037384B36372980DE4F1819DC2B4F825D7F6AF5BA3889A9481A39115215105
5D2B2B9DAAA7D85A7F1D36345F3BC5A90CCE79572D44A07DB50823C01E2F535D
FC2C0655A9A103406D8CCCF97174ABCF4EBF022831694B2773BA052B475D09EB
09469D2BB86F7BC232B842C924ADC1B1AC7AAE6732DAC6E6E6F989D279899F03
7BCBD7DF2830E4F2AC7BC9A0512C5598CD6A8558B8C483AAE9A856CB690E4D9D
6B4452C138A84B53712BD7B639625938CDB360066803092C41828FDFFC40EC76
529B3017997B118F9C0019B318CD3A83CB0A1E8891BE5F6A0C940C93A5B74FF6
4283F15EAA51DF4C74CBB662283EA2CABC19388DDF3C5B474F5374D80D469AED
90BA08D8A72E3547B40BF4ADAD86EF5BEE825C3F850B6EE405BD38D761485512
1FEEDC70965D0185F5E174F0758420612108EA4A58025B1F47E53E0B124A48CB
687FEC13BC7E48802CC39BE1302FEBB6C5A7E2509195211FF1A494D7743D2BCD
9E84D94956A1404882E6A29731FFADE7B187078C481987BA74CE27B2C4557D4B
04E7F771105122A7F30165F29EBD4570C70F7860B7D7E3F1E81AEFECB5313C2C
C1E66069D56F6579693CB65053BF56062972DE5B56E950AD3B58BA187935BBC3
7DCC97D12D866DDBB2E9D6B02D4ED0A53C6BA6B301D3F42EEDB6BED24CEA54F2
A86A1887361F7897A2D28A562A935226FF823955C3AEC37426299AD32E960DE2
CF2E3C9CA94D43E219F06892F0F79B02434ACE821D263606A374B64A01E25C9C
7B71D4347CD5D07A9411B6E88C18CFD9B234CF2F2D603D0260B53225714419B8
C988456CCC24B81FAD59AD71A3EA68BA6A9A900EA9398CFF7BF2CB6AB91D17C5
793A8F9EDC7858C953AA3EA5788239D1FD4176B9C310D775443680BD38AACCAE
08206EABF5E61E8EB6B71AA4B19F8037836D8D8AE278B7171B945C5AEDEBD3D0
8153CA578EAF17D2B2A7B7B9AA763F56FFFFE98E8B960C5B942238491264EA29
AB731DEEDBE78843300158908F77C0AC759565A2314109D6F3AB7D037E509C5D
A4A954235A57F0F59EDB31F78C17CB202849141A1F5FC0C086DF025BD411A9D6
5745FCE585256923F98A70DE5036BD9C54DEDA6D88F609B0AA79104E10420C3F
67E491EA298A68097564A90A2DA6A2A2574BF892347DEE8E7A09633AF7B2E1BF
75521FD6C2925E38CBE6CCA897724AE8F908EF485539C45C6CF62652F79150A2
D35BD4580DAC8DFCB09C9B2F0F3258476531B36AC6458551956CA08156AF9C33
D3F197E87AB3C26371305DCF1687976964235049BD3E3CE70137A7B7FA82E8E1
5F366CE98A40838258D452E731374A7FA2B08ABBB932D5E6A03F957B7C64E89B
B59C4ADF07B4FA90460372E170BB98B788972C8F37277FC53686C2D27FFEB476
65EED274860C3BF880DC2F6C80CEC4A92BF9FA09EF0F76FAF0533551DD2C8C2B
DDCB8A5F93239B9DB45E600F1C9F40AFDFDFE2E7C19B6D1E0F9382BEA9878AEF
1CF8DB5AA29D60B224C9B8872CD9E55B2E3AE3BD97E3D9D52215AA05E690FAA7
3EC216783CC4F106FDA563F8DBA452AD22FF83BD861FCD07E1302D6A3AC105F2
8EE6A2CFEAFA21AE6C39FDE40B9D08EF1ED2E41BDDA53210944053DAAB56B107
5A0C3832220752D104FA14EE869F741128948A218EDA86F30574CAEBB8230076
EF42FBA55397E2CC27E11DCFA24B47253A03A99363DD7EDDB8CF9B4CC3BF7B29
5FB8E3918CD673DC3B1859B9B68AC9C092EA151A6F3762571629775247A6AC65
DEFBCDBB07BE8D8CFF4DC312E6A454DCCDF83FF2BBC7B17EFC05DAD545F7DA47
1CC77A08633A53B62B760DF589FB2A1C0D78314EDF4F4361872DFA2C65EB44D5
CB662BE0B2839CEAC16D813DDFFF35ABD92E13ADF85FA7B62AFD4348B8790328
14BBABA742ECE84EC3C70C8281FEEDE824560FC686802E49EDA9528B7D8F8724
EADAB1EA2DE9F76DD4113C25175B14083CDDB3ABFE914A9AEED19BD22F6E09C4
198C7AE63EE63D34A6E5E6483031F98EF3E460553709C60CDF17E6D6E4E78CB9
D61F3FD30E78D7EE3049E2E505776D90A2D1A68B51C0B83856E9927C936DF456
4199A66A432D5FA8044190358D9A42B02D8D79081A54EF4F7251DCA4D16C84E0
3F2249F606EE1D4DCF4F15301A634A43CD2AA417331E4921194F6F9B939EE166
3FD02D1E1D74F22C4DA4143A4D5C2AD9BC331525A4BBB12EA7EC525CE0D7F6D7
02247E93CC25E56B176A0786B3CE890314191082273187F24F9D209D78E0A2FD
3FA71C28EDFC157CC5F6750F1A32DD6B38F76BBFAA9AB9E3FDBE3B65729C39A7
D5C90614F22E02626ABD343F3AC0A9698AE84CBA2D8F5378FA26179EA32176F2
464A2652C19C8D31C9300E613650121894B9D280C4F16906654393ECB9D74206
B1466753DCA4A6667BB22C841A91A8AC118812C9BB0FB24D2166D5DDD4EAE075
395D7BE3CB0DFED4D966B2FD281DDA37184E620C8C9F2834C6AC70503BFBF3F5
EDD60A8269CE7950969557336AC8DB3B61E01D64D56E8C4CBB401937D3114220
AD0792429566BFF55537F41DC5950A76B816F8896C4BB18C575AADC6F5886763
3981828EC2EEBBC3928390F72AB65858B8AA6F0EDD3A3763F5A8F68A0B93B9AD
CD647D79A3E56C4B5AB275FD52B825F9C86582DEA06C1FBCEDF42069D00CFE14
02347AA07C49D2672C513510C5F90752F7DD417E32DD6EDD1689FD3081EF84E7
86D3F04F8724EC003F8E8C117DCC0D93D513E04AFD9BECE706135D9789ED8296
F3959B3D87FE3E4E2B176AF68025E0C72F52165A0DF06D6A2ECBFB29FE4D5CC6
EE8458FEA2FE94385B2AF841D9A755FBACF6167862A987D153AEFF6650578358
B43FB420AC4CFF68E997B6F7BEF0C52DB9469CFC0E9E9A6D7958D9C8465C0AD1
28085AE31D620480D82B5151EABE7353E18FF6B1523DB565BBC3A1EE19170598
C4E94B5A82490F5F3EDCCDA8B1329836CC6136E0B2DC8292E36DC444F34DBF0A
476985495B8E94E473052F20C5E417A6AFF317746B50613961F9E542A99E1E9E
AB27BEF2BCF74FB29855ABBE60E7A2F5DC169BF13C56D9D08860763C7F8F92DE
AB54453E6A4C7B7F667C14A284047744C14EDA3CFE3DC73BCCC0F2F81D7ACBBA
A1B71056D018CA5CDFEA1929E0FD99044E1B7AFA7834A95FE1307D53A8436600
3FBA0A0255ABDEB555EE5EA7AD4D7782A8387E49B8F03ADA7C7CA74633545ACC
6E1B0078A6D40CF7C7D8E436EE1C70047BA88646BAA9D6F0E16636DA27AB6AA1
6C638A6B48382CCDFFEDE240D483420C8089E81DFB3BE958C865B2B9A0705095
755901A327881880298D9DB49E020D5A7E6290AB1C4B10165DE8C3E9109949A8
FC60CB1B458121246F0C2147B13D704C0067DE90B53D9163DE8672BB96AF649E
3CC9D18701E91F5A47FF6E933E21F0F0F9F31D06A6F3355819580C478B6E2A50
9CED4243271F069DF61D27D3FE8CBB25636F48E6A41F205D04A802E45FD0239F
0F41E86F2D4EEB998520A57985CEEF4463EC7CD398769ACE9F56B1616DF4B6EC
47260A1A82EDC3B258C45EE70F2575FE3A0DEF48E5C9008EEA4F990890CFA24E
B5BA14B6722F4521E7C552BCB2882C53BDE88CC55844F1A036864BE76727743F
9266BFA212BD428B67BDB8FA30947DAF090BF54FD4E7B01311521458871B0C8B
D1AAA6452B05A9E0A4D4AC85DCAD1DCD36CB4D6288560DD839B975287260E0FA
E00E1369F7ABE64B951812C84BC29D13B78FA281C6953833F378FA3D5B296449
28DA32EAD64629BDED7F973655A8047BAA8166A39AD81188A0BCDB316CE04AB4
08327D5BED24A373E6CD0A8650EDD6F01D290275630A7BA34D7C65622708FB34
3B1EFDD4C09FFC7E49DB8929F2E3891248D81727E4DDB392685584B5BDC9308F
35A246EFDDB2CDEB75F63F693DCA492BCBB376A278F2D4AE601E817965E370A6
CE358A3A3368746A027350A9FBF947BB7C46F0C949D8A718026FA6E3BFA81B90
3519E95194C314334242A37FE3E0F8CC792879EBA47B6EF16E2C6DA9D1EB555D
555A07564A9D3C2275458700FD01CB5E99962B8E8CC2D6A52E0210B9848E6FB9
1C81497FC1AA96D6B4817323D6A88E851D672F598789D1EE0B99F19132698163
478C02F72EBB0DDC10C55C02FB02663AA47E2BDC5A51A03F48BD32FA0B0816A0
C7C6B4E3C8CF98D1B82FD0AA19633433CAC268C6BB20D3A288E01E2B9173557B
D09FD610F8281F6F34EE241674A3EE2645DA90652D589681C60C4FCC6A8AE100
116920383B0A69281E3DD8A266D484D28CC30F9DC21D974400A8C2642147D4B6
52A8F1A7E0B77D82D6A36B6B588ED0ED38C61CDD2A8431D15BFD53F1FA3B8DF5
3EE8E41302E597B15C2F640CA86F2917456CF5D301929BE09F85FBEE99D21B51
2779E121066B46DF8C2DC29BBFD9378D8E898275EEB2B9BB17486D50FF253FF6
7EC9FCE378C4940303BBD456FD31D028BBB565B96FD4E4D1FF377A5AD37C15A6
173CCBB15CFD2FD66605EB29C5526F99362C7693B01E7ECF132C62BDF74FFEA4
B0CF559A079F2FF1C3615FD8AF94F0747C51AF4683EDF97728F3068203896C93
1C86081B9870A584F81C6C24126DD123FAB23AA37B36092D3F6CE83BE0B858CE
E312A4C003B01CB922571B8E5E7DDA3913705D4DE85889C1086133C916B97604
9158408EFBBC55FA1B1F3F3E031B7169E8089525CECD505DC35CB17B6D8F433F
9402B197152704622AA4BA96347B69E844752017BD9301866119490253B6CDC9
7E1CC04D2640E97679ACEA830AB447B3B980521CA52FDCB634318CACBF994B41
4731F0AA40D28BE3700953D590A62AD8AF0F977CD9FC6A5B91EA844AA2981BA2
64E7B739C4088A25F551F578189A3285E5F32C9C8A8FA9E7F90D27E38DA7BAE3
3901AF57C7DB9106933246B30E960A439F315C4093F4AA8854274B18E9808EF2
FE36B36F9968B5CF9FDBFA11DCA0E08D087C4D099838554A169249B307AD318F
9745E6A9DB8D45F1EBAD4CAC35152F1EE78072533F8900CC3A1869BE48305CFA
07531605C233BD19F3DDC54F3DA89A38A4C935C8D023CEA0AA6B857291BCDA9B
6705F0B062A78EFC65E27CF5C83361C2AC17638689E052523D7558A09FE3BDAB
6A282D97A07C671850972D3CD9AA74EE5B605950611393C08541403FE386DFAC
2247BE094A885352C70B1CECF2F9DCA91DD007AC7D759CE74D6A9F75B373FC70
31B45B179B10EA85E741412DF41F4C59FEB8AEF11EC7D1484A695673D7CEE75B
91B36DB3081871CDB3987169479C468004344921545DD99DB567D5486DF8C298
64621BB2A03883BC623D906EC7632CB075B9D013C9266B223C04E45A07BFFBF0
CCA7BF4BADB8D4AE414A1410886EFF8D56DB118E81068DBF528C83F702F2EDF4
E45D0FEB7FD43B1BCCBF20560D772C14FED32A6D10966242774A0E978AD35C01
AAFB04FBDC7B4B8770D3E62C7EEA9759D337AA2628F08079CB5D0CE2CEAF2D85
E987DD9FBA00895D87DC834505C606643E0ED45C2BCCA0E3448730FC94AF580D
C139ADC11FA69DDC5020CC3C14EACE61BCE6EC7A9E3B71DA8E024D71908160B1
EE7C648F246AA8FB60C78AC2398C16112776678BB400C75DE3A3E70D68714FFD
8BFD9E00BA27005CD6FDE60CC49B767DD3BF6BA86CC368E9D29C6BEDD2A467C5
8639DC0E0728CAFFE3C5B6A3B3FFACED0E119E5ACD18F96868A8BCC914FA5EB8
2DFB0B03138E86C15426E4FA49EB9622E45801FF0A29945D6FC7A2D65314D2BB
69D35F3F089F755BA04D5D03A83FE10DC51DA0C4BD0F9DFA45413DB1BCC3DA8F
5A3D194C1BA4490251325AA04438BC14D47CD354A980A539A617ACB9C702EADB
545806ED3373D16487801F7A6CFE211D8F914B49D4602BB869D5A85CE51EDC81
601C6FCD650275C9828C9B2131051DBED189118B9279A11243BF04609FBE1E06
9C0B0ABC6B5C2A2B08E8F5AE4C1E037041529A9E53CF6211D6F89B3F9D78E0A2
FD3FA71C28EDFC157DF84D2F45B211A00225A607A5E867D601C60088FAF1AE5D
D970FD1BAFA2CFDE8A20546520EF3367BEBCD43247960877DEC27C2DA43A8176
62FDF1896DB204DCF51404875DA9CBAF21DC1BFC18242EEBA6A5AE45421B52AA
31DA19DA81D0885196DDE3331E23EDE760BBEA210077CADB81C773C3EC8920EF
E16FE5C7A72657A80F1CFB288E5E944D65E08722DCE6A5762EDB87EA4AD820C3
5920172BC16F63F51819C4206CB45D52E88EB1C042E28A6DFC1C6D16681FB947
7E2A1243CB87523D2492EBC0F85F5DF63C333529F06FDFCA1636023C3B45D998
37E560B854446966D0F4316983578CC350251B4474B677CEB6C248127A35AA5C
7691B72AD442BDDAD18F30DB190E4D0046924EAC9BDEC7AD1230772D7B98333D
5398A82465238D57CC64D9EE4D3417DD8BA249945228E14A389F089207FFBD60
3600E77410A768936DBB1162F16ABBA50F261D5685560A2465A0565E91E89D13
35338DDC277E410104CC34ECC71B411C533A5CC6E235B63CEF024C8BA29293B6
34CCD345102C54FE2208132979EF8740F922F120AD44F28BA8080801F9BC7611
DCF9D6AA4A8651177CB856C986119738E420E03ED77D9824DAA20B84FAA9A2DD
D4158E9AF332256FCB3EA78A9EB74B4B091BB5B674B00964CC2272497284B49F
D0B1A273C1EDA6B778AF995CC45FDBC6DE448491EE057D1A0892D6FC840E3AC7
988F2569B887412982ED98260DB84337892A232A3A1E688B8068D1DB3717525B
37D33DC7D4DCE62BC5140AB590C15346B95A72B52D8380C5112F4CBCCB78C3DF
9F8D82D9EF2CD2E03261159C7F50054928B9493CFB72DA0F5B5B75A7E3C6A182
18DF587BD534F0297E3615F4E68DB6BD2AE92B0B1D5F1E1C12B0E61751FE10EF
24A0AD0FF9FED81C2B83BB3238BC779091D87E5D195DBD7CFB9AD96E1004F968
AF583ECCBE6FE0329A031820D4D1DA9D11F02ADA84BC6E6DA0AA29EA8B96B98E
9CAC0F97387B731F438F86AA00411D4359B3AC5E1A129D34E4E1DB2ADED17246
920EC84462A1C4A7008885277DF6688E3873FBC7A10EF4BD172958717963AFA5
FCC1C753E473E21EB8BE0C7C96BC7BD5C0274440824A95B61CA0427E6CFCBC31
3ED9F5F9B0D028528F61F0B77F668BC7CD4399F08141D19BC64AF0B2552C97BF
BD1C6C0062488763FDB07939C47EB3D323D3C90009A4366F34513C6FDB2A0232
D1BAFFEA22CD6D7EAC386165819C19C75470FB635CB7271D8C8FE3DECE61CE27
31FDDF7FCF2AEF7CC2B1EE7095F485BCE6F793CC26242D918F052AA2F06CF217
8D997C4BAE6D8646785C0C82A208F4F8F34A3DA698A69BA804B9A8B27DF80902
AAFD2B6018DD0680B43A5AE7900B43027FE37891837B822BC091A27912F60DE0
2E09F6EDD7742C73BE07D03DAA4EE95D353CDED25EAEF73162A697698F8925BE
31F7E98BA78C2B52607F5AD63067BF47432AF95BE8E7504AA1542D7B23D36C6B
AA8338AC2D98DE543DC31B759E557505A1366EEAC1142E6E43E7C50DD0AF354C
ACDD111DFAF08A68119DC69C2A9360CA05073141CE21883E3595088CEABFB137
634D2AE8694C53BEEBDD14126B4825CF63C13B40CE21656E37A0FCB6836AAAC0
7BCE893A76FC1FA1CABA526EE65F6439F9FA6F27F763634C662A001B2D429D90
F2A70FB18CAF8575273D16EBC3E54475416262747ACFFD9C16129FB088DDCB10
080AEA9DA70289ECDB306F226579871CC67279A95F558EB0BA035576072FF7F7
722EB48E8F701C11FFD1B7F263ACEA49BAB119C6057DBFC2B0085C818FDDA774
EBDBE7A95500883E675C5C28DB99242A8330E9DDAED388DB7A0B4FA03C84CA36
F6027A26FF421BFCE5DAB2D853767FE8A7418038277FAD0E908C48A1B8FD98E4
EA36D07A87F9D6C0E5D31A2BB9B1494A567EB5016EA36C45F006BF7BECD97F89
0B6847370B5BC9EA4EA774B0595D87C2F5FEDBB500ED2A188680E41CEE552DF5
5A235EA7E738E9BFC10DD4C2B6ABDF8794929B68C055789F3E9C32180B57AE8E
CA4C6DA654AA4124D577D774A217D4897A261017117D7C5C55AAEF32B582FE54
F0B93A85F0DFC1C267798F5718CE4ABFBFA159B07ED5C93D976CCAD20691B072
DD49D3965FD79D8348CE3C1F8B633847DE60058E645058E425653878A1F10CC1
C84D2B69E1136A43B9372388E591DDE333E185F4E23E0A66DDD15BDED1FAC380
B91F8DE0F875032BC8A1930CA75318F382399E28AB06FCF0065DE36F91B4DBF1
2F6C352FA5F0492B73CCD90086FDAA14AE0CFC2742A66EF2BBB6B29D16487C3C
FA6F892AF5C05879B5224D3BB7D31681D75354427E16368E1BF924A8A0748B40
5513A645769B48F4B3C4262F57BB6A235DE12B38D5DABBD8DD0F6F9FD27FDA3B
150A099993B56B83709540C46BDA6AAC09689487F5E0EB021CADA860F83B7338
75079EFB568ABD139F70C1EA8869611D9D4D5CBCD692988A989C16915E134A47
A4A117A55B66ADF5E53F82A191848F9C630F52EB497E89B5F145D01D56694106
9B76780164C5A1F030379CC9E763CF518CF9E2DD473EF2D166BA507A1EDB1316
16EFCF91246FC75DE3D8AFCB7CA1B7CA84EEF0FAEB46F0B4B88192BB6AB1758B
6F406C357F05A6BFEAAEAC4737AB470623102FD547652082269DEB7CCFC1C840
AB18CB9C2773ABC9DD5B1A5F83AF6A90C0313FC09C2F4991EDD9FDFDB76A9F08
5962FE7F1251D652C1E371D57B511B52A4DB8F69D76C3BBB447074D1103036B6
95EDB12D5762D8075F69A145829864608FB4D78854124B117B2F35A1E2F724B9
928D3272F528B238359944962E09541FBB7A00956D1ACA7D8C2350B454C620B1
E6D5B8288CA707E7FA2C69204A46083988A52547BF7B3C89184B4B6AA619D660
B1402EE393F12610C83BFF918FC60843D1751DD0FB67FF10DD87E3187B485D84
58FF1D6A46682D801AAE769BE7F49BD6526B9B1584A4711E28698C37F1DF9A09
03B2FE9462811FB9AB1961065826D34C38C598D8626BFED7CB672F132E065C48
463D49DBB6803FD753A9E426992ED6BC8BEFEEAD4ADA8477F6552EEE7B621ADF
DE8A66A223AD7465B8FE6E531D9770EC0ED49AA31FA3F91F3F32707774DB00EB
977C5EFF7AFE7DC3807891D039AECEAC3F500A09579E6604D10675F1D60FCFB1
B6D26AA24377760FEA6FEE94FB119E8EB366AA299FC67178BBC57EB673F38730
E2C28D89F1B4B8DD91CB69558534CCE31AE7E157D0B060877F9FFCC4844A5984
1C7C7682105E23A374BCA91885E744912DF3620A245C8A5B229AD308A71FA00E
007F6BFBF96C927E23E338A655247C509A950BD2C3ACCFCBCF71FAD299F22A14
34E7D661083C7F8D02F91CCD580EA19FC26EB49BE412452247B0D8CDAD32D698
2637028A7DB25BE15F0AB1195D2F25778C99A04E82B1BE8D3870F6E3002F6E79
164A87AB4CED4A848913531321E4CCF342930683CE8B995EEB19420CEE8E6B3A
012AF00EF8A7E879A61719EA286FE90C2E836AC107BC883A33507560FEC3ED72
D91546DA4EFC75CB69B897C9EA83852D31F31DB5D0DAA584E4FBE6EDDFA3B58A
343725C742A8ADB8E2490D6B3B48CCFAFD2392C817B8F7FA666FBE36129A3641
9CD98EC0DD45A62C8B6CD6D07686293565232BE739AF0B70E5046A4A17B5C3E9
DAF063B335EECF830F146463EE85354BAF0C4AFBAE8CFD73A596F7C7AF437B8A
D4F2F5AB3DA5462EA74965A151E84283C2FFC9FBA8B7F9D8DA8836A078A4716A
24CDF975CC7EA03D80D1B3F78C5A27B19C016CCCF8AE794B156F8A765F5298B1
2F090260981F6C38AC8D43CDB3A383FE182EE89A49C28C2D635A298D6451C6B3
D02964A9D8352191AFBB572C2D61BFCA954964BD918A9DB9077118A042EB52EB
7800276E7502DEE57228948FA48884514D67EDFE7911E4EEE0C0AD432443B8B6
36C43D2B50F1EFE12D2352A8DFDBEB066F94C0F37AACAE40009D0682CAF5DB88
E408B799859A65C143CF499E5E03218E29844B569E2EBD6271DBA6A5B619FDD5
8DB3FD8695CC7E4D624573A635B65951DC366F76FC5B4C11DFDE03CCC5709F6D
806CFFFDB6FDF9361520D4422239A888B8FC65FD9DEFC68C0C2B37B06923F120
D2DD250D693391DEA7CB26D4A418E48A2989167B7DCE22F1803545AED50CDFCF
7246DBA338D269EDA4D6177AD9173235023D5E0F563059F9959F021413C8DC61
3D035BF22544BC8487EAEB01B65023A6FD20406E7E21859EBAA5AC022E22AD61
2B2F013E31B97F10172423BF5A5407F54179190726592F5D4BCE6738CC357F0E
B6F73D82D736703874D4991EFD61104D18E85A53B73A1FA96E48942DB6A0146A
B08A3DFE98951927F9C3A83202250796C59F8E61D57DE5ACECFAE9F3CD33E155
543275D8C75FFBFE827E47FEB12D4C3841165CE7E2B5F9CD05544030F7BD81F4
954E3E9F458653B6CA43CE1F9164BB0FE39FBDAB233679C8C3675A673E6E6554
D774D715491E2407ED9F8154824B719C8B575FD784DA7688FA287F7069D4808C
D9D7C18DD6A189304A5B5BD93348951B354102F98A86E317AAC4CEB41D8964D4
FCB5E4DD511B6A9D5A0C7973AE8E183D32A58D3C67AD87A413F6D9746B6BCFE2
EDBF4A89C4EE9C0C48A72985276AE70079BAA0ABCC95DAAFA46637704C683E6C
590BF2EF885BE65A9F57662C7908E0A47D4C92EC61C5342099C27D93A79D9C9F
278146FCE5B34B8CBD7B6D29896E8D1807150C2282F119071A2E23A9B9F38145
F1DACAB2F44A3C82D04E639C8A3488DA9CA87BC9F910524EEE46F14F2E5DDB7C
197D9B33CDA2861D1EFC1616B16091EDAC559A220F29084DD86CD873EA8E7DF0
9B18829BE2523F89F383D270C1312811B1D3A29D3668F7FBE41F4EF6A81C0F9E
BF9A4CF024C1D10194D7EF3EE7745D6460F94622AC516E9D777D6C65386C7E60
7E26481C02A184638BF92CBA44AD89CFE59081E3EB0AAAA7D87D8EAC69E3C8B7
7D780EF389B8367EC78E45BBE693904A72A20A1F7C70C68627A5356470BDE95B
95F19198D5EE9A7DB22D584FC7B6F9C35C47D639FA4FE1D6B6C4C7A6F71524A3
FC7E01BA3CCCB302F2F1DA611EED5AE7BA60B9974A0A2C7449C76238BAD444D1
29DD1673129711D3BA7C52C08E87AF023C833F2E36C296B4AF16F3A921AD5E65
45C414346FBDCCF69F29187B325AB3AC6F537AA03AB6FD0D5BF4C9BC3213A5BA
19D27374316C27000C17941474D1D90B1B2F2A74D00F0E54CD8D56C87234D559
4796765CBDDE8E2C7662221E2CBE5FDB8E63580BC6F3F69F041C7D00EE39ABE1
F010512D099E6991007574B51F1790EA75B813598D80DF5253EA093841444545
D7177A3F0A1E7CEBBF7EFA1DE6F11F14A2DAF8FD6991020450E767F2BAE509BE
09CD82AC7E689BA197B396CD462AFEF719B98A3B71E2A4EE7E20EF246C6E0A3C
23DF8013D65769CAF3BDB6BAA50BABE2CB47D7E251C0724CB34C69B407CEEF63
0162F27380860A97C486B629AA0476D37F812FED3DDD7CAA05A8DD97A96471E4
C723CBB45F0FADA7995818043B761F41DA28411430C42A3D1366F57F0124EE7C
8370B7A96738A152186EF35D59BB974980F8D0478935C577AACE253B118E0F3F
CD26977D99755C786C272911BE7935015193246FBFDAB3ED718CC8AFFDE2BAAB
56D5937DAAC2D54DD4EDC963927D1BA8B8233AC009EC59392B7E3FD59E27B303
7FD1752DF6AF33E5A6722A26ABF5A82FFC70D5688069D3A61089A2911C7D6C56
6DF75C3281ACDC131428CBE0BE100FC2D83D762E93668C0619E6C0CB4C42F5F1
0BEDDA8DE50A06B0937C0610026DFD8ADD7A7102DAFDD18952F92018C388553C
4C1DC0A7037B5A91A910B6AC680A894F4CD10296D1AB863C95186206F7453C17
4D514A9C4125B5A1A79E3CE4232E4A1335F1966DE7C21DF3510978F78875D415
94E6DDDE2D44C7385CC38494DCD832CC94C08F0492155ADDA8E704EC5CFDF86D
3B00CA7934C296F9D359945ACDCC8DA70D5339C919D9954FE91E079DCBA8B8FA
04C041A0E29BAC5703A83039CA96985A76B61AAE665224EDE522641BB0C9DC62
EE166334B9919AD6EF2876532B64A356B32A047802C9BDEE75029E991753E678
D013B8AEDF306CCF2727CAC4A13B4ACA339E375F376B7BA9CEE602E9075C5E50
9FBABC9016E62D7D5AC2A95EE29650B98ECF391A95DC4C962DF3F79C7E16FA46
3D1F514335FCE76315CA77389A431B2238DB083AAC5E39450EF20451EA02E057
2FA58CEACD61235271A975B0C11E533ACF0668F3288A152CF5343F52865C1827
BBD06810473DD85A580AE391C17BE4638F1B649958338E69CB56B870CDD727F0
B655F71017568EF083865FAFBB85EB69A6E26A45CE2C98622A6A385B447E164D
B7299AD6D1BAADEDE43E477FDB504AC6B808540C553DFF75F3A00495714800B3
06BD5DC235EDBFFDEE3E46DD584F04936B53C3C81CD9E76D9B6CCF78220F28E4
5A84B0FF35C585C18B19C61B51CA3E6C3AE72F666D681A4FA8B2477893175F30
08EEF551C2574B69A17F5C62AD9CA923E685213D53BFACB55EF49BE17964147B
02C4CA4F0806BA52F8A891A88B2F519575FD86F61DD7C7EE5F015B1BAE83E79E
3BB86BC0CFF599A80F5C4AA381B8581DF3F82578AC6FFC9216A06EBC754DE4C1
BE1E185A26488ED6138CF334D63A75CDA61370B656188C88BD1E7273E1A42F36
C0C6E0FB68F94CEBDA1CEB0CDCC489BCA1DBEA94AF6F37027434E22EC932CA5B
E3B470A5800B4FEDC4A99823CAFF87E567B96572BE6D9DA262C5151B948E529F
0C7A21052F1A28CE343530C96B7E92807415CC510ADEC7AFAEE3E54A00B1CF2E
9D4E9F057BA99AE776E482E332FC6F4EBD5E2952106E4600ED59E41847A2C431
ED3DEFC7267AD9DE87E23C236E70E1A6D7602606094B0C91DCA122F0BB3D4FA3
AA0CA96DA71466748187222315252264773FDAD954D114082DB6BC7FDAEB7C85
3A4B7B464A26A459F4A2593310245B1B9E7B8A0B7FF55338A74D2023B34333ED
B0DEE3ACD02BF724CCC2FCF1A0B58CB89C444F4564C1ECBC4CA3C544CFCA0D01
A294276F86BA1443F753A7BC8B7A60E9C5DC48A3DFFABC322A2A3F62BF60D6F2
439E2D50DCB82C026ADAA0169B6A38F6E8D65D483940C97544F888E9316A1381
F8185C146C3B2548A3817DB684926C2123318D4F634AEFAE03E5D4BE6B04697F
F3ED2A83E6E7875D6C2D53D4216E11F852EABDD845959D6C4CBC644B29781604
7EB63717E2C06056A800155E42E6B63290DABB71D4D1B394D7AE82EAE4C82760
C5849F6FC5FB394169622625F2493AD95E1A2BFFD0BB023BB23B95A95C52C138
94C9156315E5AFF47E4041A45DA7B0CABD8DE5F42B0018F834D058A09E910DF1
314D1B5A2E3CA886E10296CE26A4E176415F55FF32E4308FE22F0D0A45B8D17C
B74BDAA4BFF6DAB5380CBF6172F37B84598335AB3A61FB3C873145863BEC1B5E
8CAB530411E7B006480769434E9BF13F872380603A47CE5A30AE40FD497F4586
00B1A87AE31E65B7EFE7B1CB025613E53343001CDEFCD8F5E62795B990DB5F01
7A12825C0D642263A70EAA178D11BE7F34711A204432DA217576D9871A8E8784
028006F3F3248B5454ED6DC729CC5070524D1F1367E7D491B5803E4E32D24FDE
0B7C56732957AC35E56C635F6B316C147E4148F43F68B433E736D2E15CBE3A2C
9D93556A1DF4CEB57A1882F307F0EE099AF080659A1C90D89200DDB63772D73C
36E0280F8ACDDBDE5CD4F70A7A98F5267847CA1EA003CAAC24B337D6B2A8AA99
A53780AEAC7931FBA708E4052579960B3291B0BCB3D6138198E70881E7FA290C
6A3B164722FB8BD5CDC14E7E20CB3586C815A75E1C0585250D9F6F52025D82AD
E11AFF1EFF8F6FA46187E0BED9DB2F1525FF742755D9200C3C1FC2E172E0DCE6
76DAC7827316D2F90B3326C12523D372BEA69688A21D6EAF601ED4810A03B876
02F6FCDFB887A83C42C50F08E66B611F543149B7E31EC9602D4654DEB38E8E94
225D8F864E791EA6689395C19ED992688C38D5AB822DB77434BDC79A29F57E30
98ABC7EE49F007589A2A08E976226EA7F091A006D3E457F0FA404657430F1CEC
53881DF1B3457BD811E6152E7A6DA01FF8F441690E196B19402154F4AD4A1522
5015497AC2A59B07C199F94E3D08301AF343C837324B9EA595BAFFABFA38EAF5
3F517136457774C464F3D84202CD343788CC991B61ACB6AD7863E30EF2DEECFC
D5E0AF64571044339C2037CF6834EB429617C33666A20F94506F7AA03CEDE934
367F083F6561C939669E28B55BC3323D71FC7B4221C1A677B413EC24C29DA1F2
D33041FFA5D3B62F29CD0570748C3BBE64AC88813A2339892CF290B7D9CD73B2
B2A80AB7B924F1BEAB9F601CDA2C40EF93971D344A24F67D9508E4AC3D5068AA
B174E0965F73E7B3A5F532B99D116357AF029CBD77D99A1656CDB76C9282269F
570C0B57ED78FE33164934EAB70ED3852DB084C16B6097540C5C81A8CF53AD64
448E9130C01AB94B0657A5490D7BA7606326881C5A6CCAAC22D5454B2C1EB503
764C5B0691B761FE3254E951B3259B2EEB4FE37392533D3695FA6890A620DD86
3BD5364A28DE4283D9697AF2F4D165B73683B97280E3F8CE4547F56244DC6838
06DF7DE0E28FE4D056969AB8C04466F6B2323849E5A87116F694B78DE928155B
9D611E085902458C96E9107074347E144EBD38FF9C114D75E7B867C216989AFA
4EF66975C7C64CE5EC2AB958361D31BD648E1C0291A57F6AA25FF78D0E59C262
230123C5668C34A7178C9284E340D18BFB0BA4BEFE101D5BEA3B3CC5C384E1FF
F89E502CBB5561E9AF3C9B374D73F52611F17AAA550E93C8B39DEFE59FA506F8
812F8DA2BE72F0827246FCA44E4A772C5FDAAEFC70EA6D36AE941E3291793B66
598F7718C18CF6B0D1B1310C75AC850FB4C642FA3710C2C99051FDAA642A91F1
947AAB4A780D034BC00B16D7C4D77CA697B044812DAAEBBB8006F056F294A4A5
B77983DF1D1B3EBC3640262FBE15DEED450E81E397D0ABD05A9CB3E301CBB6E4
5FDA05D04DE260D94722956833588CADED91C5625989AFE8DD9E0B1844B116CE
5CE8DCF4C788F037BD3783D1E73023BB66A4AE15DC7959BB36A10B51E9638794
BEBDB65521D0010402575DAFFF833C4D59C1941E14E0BAECD4A9FBA8B9100A31
AD1DF7CE7CEDF45D8D75B8008CB234A10836AB34663A141DA69B46D41A04EDBD
E8A440911B183955048D808915D7BA588590785C36322BFE321C6361D12879D7
8AC6396BC3936BD40FF1476FF54922F2FD14A340951A0130FAB6CF0B56BB38CE
81015FEDF0CC3F7275F567D40E28BE131B0E4314D86EF0D6A8F840F462D9B2E8
C1F2B51F6DA60AD71029BDA0BE43A26E6F18EC0E9085AEA66291B62D69D698EE
B767B641BCC569A1EEF8A12E6263CE2C073CA42993FD8CECB8E7948261EFEC90
FFF20B1FE3119DA2CB9F6DAD1D6382F999E9F0692CB34C1344C7B86466716272
82A8947668FDF9CE6C611CD1BE1A3FF133DA6279F25F80B39F4A584B970D6156
292B8DB08399673F0DC75F1BDBE806E51B2946873E90D509B25853AB0F25FCA6
BB860E709684EA675A3C3C4F60A604BEF0EFF30EFE00E05C08AA50EABE80B564
D7AA72D05EAEE83D45EA12B8C2EBA316F10AFE920ABABE1FCB5723D66953BD9D
0A313F39A6A3DAAD30374F96FCEFB063F4E02A5A1B8F12733514B688408CA41A
769DABD9518E4DFEAB5DA339847235425AC5056E7AD9D54E4DD1BD7BEF204EEE
7DE594518B78765EE60502B5D4D8FC36D030FB2B0EFDD9A57200A82974EAF0D3
6C036B66FE05FF7E29BBBA2C52EE0385F33690BDADA2B0D538EA64AC7CB9682C
E60E17947E7E675D19901C7E8272CF0D458A8B0CF51077748D1F0A95AB030712
E24D053E101C9FD35AFEA96E669B1101E8644A4FA79BF0E2BE0D5D63D4C494AC
CCF815B9A464B3C0D47AECF229AA1EBC2E208024F3703B6B0716899B18263C29
2E1E8332654022615883F3B3D95ED3FBB8E563C2CC64E2DA3631AB809AE0FF99
F0DD777666B14EB7C80CEE58DB653AF6DEBC59D3AB82A2891C3C5224977B9464
55E674261A0932ECB029CC6CF4EB93729D362EF1C610E85FBBFC6151D81BE225
7C3E7C876E836A1E6009BE548E105149EB6052FA14D106E242C213CB237B187A
7B54F41B54433526B5BCF13ED43C4C3DD6C02669F517D7458EAA898572455534
CD8DCF13B125739FAB9FBEF8523676B7509EA7AD0D2111E3585BD961ACC52E50
F44E54C91326E481093C909067BED686BA113C18825686F9ED9588F06261AF3E
8D1343D17A35A511312DB573060A7E73001ABA76E395D789B19B969F25140187
92CA5E16B365ED83C24C44A68CC2E0C0821FA6C1C3A5B210E9C2146C0797AE35
5583D824B2BC3C6BBA9B877B857DA39049F5887F6C75EA22E2C1A23B0A23E741
9FD67B5E29F807987F3637173FA779ECF224B222F7278597CF205683610586A8
BEA497E867582A17B16335CEB85520A70B252F935F7CDFB69A1F8A67E1041C48
2B300306CB5E11A1DF57C36C6E9EA13C0560C3C8A14BF98C1530A3598F35E26F
2E8ED5D8A0B0A4EF950112B2A40681ED8E00E63D89CA32AE0687DC232178A07A
BFE12694DEB838C8B360EBFFB8D45798018A310214E9BEB7C62F58C1E729F224
EC05FB4EC009EF48E7E56CA2A9F84FDC460E352F0263ECE4B0148610E480FB16
13536FBB8EB7DE66C5F0C41B72060988FE907F39B32311E32A9B1946D8CACA5F
0DCD4EDF3A72A9A4A949376BC805CA2A372CF172D46B6B94412E7CF8B2C54489
E6D6A897790D5623EB7D6A90860842964426D9E506537B3F8B4366976D3F56E6
CF780B37CE39F605793D904FA4650A8AD23254FB4E9E9E4CE34660A7B6C08496
7A50FB5E53F0EA8ADEC17CF4BD5B6DCC5F7E835C3CE7D4454AAB910F223E3FD4
0709EACEB5AC116266894AFBA1C099D37DCC25C54AF0B2552C97BFBD1C6C0062
488763FDB07939C7885FD686DBF6C8D2BCA099078135FDF722D4C99AB28D06A0
A4080A732B877EA2DED6026CFA1807B087EAB33A3B2BFA56928987EB0BBAF4DC
72DA6B4EBF8B9D022DEDBC3DE44DD04F6367E04C3CBB3400BA3C1943B874CFB1
254F9A99F998AE7D06DE000B4293F4FCF1D78EFDE074FA6A057A6822533E61A4
C1E2E7B3AB456D19D9769EAB62AD01CA1E0C4F2554BD6F1F4C69E46C9C220B8A
6643077B74C1E100F1D9DD0E0ACD8468C5EEAB6B8AE5324CC077A3B24AEF2951
4FE023DB03883EB57564AEC4B94B42E8849A76945AE033F5D1C37EC63530A2EA
90F559625C437D4AB2016C4670C92D7236CD1D199C612555168BCFE359EEEA98
E07DFCAE1DA5FBE871D8035F777CF210384EFC671842C40D188F4E304C4610FA
7CCCF0512FDD24CB36B1F63F732A2D472C414FAC37B3A34E1E9C8CEF668572CF
91AC3CF6986C9F252363A207D88AB66A7C0DA4A116B14F03AB13D7E149FA176E
E68606F0B35312506C02F1A2826BBA36B4A8C4D61A96C406DF4CF3A843159D3B
AA527954C016D28FAA91548361B38A729CF1E6DF63A016E3F17980CE3D505216
E026DEA02B7D154B2882A031A276522741ACE718440F9AC620FFF89CFB7FCB19
55C7DC8933C690E226CCB41B71BF28FE6AA68AEFC449D6F2C5850581D95905FB
83958C19FE475DCA7075938672E207A41ED8B17A35CF2E4C380E50E1797F8558
26EAB926A054616AB45BAA486A85DBC2F45566226D9EA08B48360A2C205DED1E
30409EA873F16CF157EABB93758D7B49B76DB0ABB2C2646D3F2500142328D8D3
B40136F3CF6DB796FC6949F82AFF3FF151EDC1EF95339F55314E30DDEE869CFD
0E6BB75FD52D81EEB6FC227022120BEF4803811BEC75CB029A6DB10FCE7B5992
5A3F5FB7DB35B3D7944B49B6283A0129D49E7E9AFCA904B37EDB25A80BF2A041
0C67EDE128761D164A9843955BBFEC7213307B78378D8CAF1E08E1C53C079B8B
EAA3E0F907086AA23BCD6FAFB826793EBFED8F1CDA2D49D7672E195B09727629
C1A422D0405FB9B60B749DF353AFF70433732530AB1063F98984CC6C46F3E412
CAE11A023ED7D360444EDD72A0CC432E23DF81945A0E9729DF3EE2000E417BCD
E241F0C257CAB8981A6EA85C135F60246D47ECC90571044E7021EA984A40DAF7
FDF2FDF4017F94D9D89F1B6F249BCAAC5E185E4FFF0AF7FF5CCE31B93E4048CF
BFCDADF56B75CA51C950537F9643D44B6981772E8546A6D79EFC00389188E5C8
2D606AB2BCD7AB93A8795AA46773CFDEA40374D87CAB4A5DD8C92695818BA435
6E9666091CAEAC8D1832F2AD07EFF1919E9BA90194E24A69649F0DFD0046D39C
47645DD6E78973BF5EB3A43922976B876293A1ADECD08D35588B794EF9FE03CD
D26508432F9ACEEC0C86CA4D7F8BF0DECC07116A05B5D6D42730459DD44EB860
468A7C643142F5804346C1264135E15756B43D90E252FBBC1F618530BACF4716
5362C1E0F6B93CCEBD0545DD362FF49B08C9033A1E95F5F8A1717DBBA7AAA1EA
72855EB4ECF4832F29721F2965759EDA7ACC778D03F409DEB008EB2142A1B4DC
97D164780529938A4FA7BA0BACA855B706CFAD5EFC9D6CA122FB2077E554C9C8
4A1760A73FAC61EF6C050296ECF0188950E744AB53050CE216C0166D14BAC758
B30905B56CCEDE37F37167FBCFA2CC9AF077A23862B4ED64CD18471A49B62240
FEF22F4D82468BE65F424F267E9713229F7B3ABA30559D9E4B6B06AAF0053FF6
A81D815ABB1F31A89E1F1F3F3712315F712F719E2104FC38B591366950DCA065
662CFBC9594DDA8A2D0B424F25A1A8E0DC96E47F52F335D4EF5B45ED1A9CE37E
2A2A6FA2C2D8A082FB786FE87094992733E0E8E7B556BB4DD1B0EFDAF667A918
171169D8669AF155525E2C91A8525079B97D9FA6FE5B7DA4A263813F972B036B
CC08CCB25B2BADFDB659F305315BE273E5D52D4A69DAA10D9AC7B96C817AD352
B5C4397872ED1E0BA765B0309FE98988CAFF8DCCEB5A97352B6F2DC523CFE336
6996B02D210D844B1FA28AAAB93DC7557045787E987A0B316211C89EC7A8EC3A
02D70409252A8D4FA50EF1BEBA5095045ABA7952457E62E4081D591C36369479
139F23EB1F9D299353CDC99BA9CE2DA27F3D413173D9F296B3DD186F8C3F8658
C91B59C58B51B79E9588AFBB6A2D10D335B76934CAEC6AB8785BFB6A876FE189
F7500B393E531E77C5D38E2FA764893C50807D386C31A52984269355B641D8A0
414D327EB4BC88FA87B910008EA8FEC3E81B8D3532498E7875E1593E1DF8C371
9500A4C4A0951F09F5CDA85FDD822B626F0B4DF1B16AC3C8E46642D95E4D5E8D
E9927E16E5582217693A50FD1F5B7569629AF50EBCF7152E3715510FBF60F167
5356A9FECDA71F649EB3C250BFF809D81E427E3BF24E83613E8242308FE26F51
C5F52B538A85716A62F327A107BD87346338B9DB6F83FE557134C14144A554C6
2461266E19E262F020AC43AC01DB8BD67102E1322FD08D6A1AD08B87EDF29D57
6787EF5896E8747BD177565DB814951BE7CFE6591438894018072909D00732D7
1F63668F46B20EDCA647E66B811F82F08DFAE1979E9ADB992C57D4BC9FF7769E
0A6E389AD0B2A5D10CD4C41A40097EF750675B8D8743FC64B26BF9E44921A707
C2CF3EDBA686132F333DCAAE5B6CEB2B2A3C2A5085BB0E87DFD0B90AC4B62BB8
8965B8D22AB04A724DED273BA060E797C1BB765049E61C0B63D478DBD9D1F904
EB6959B1D3A39766501356651F2B690A9445963F346D0667986C994880FE8971
FC86F06FAA5E98124881CD477B308B5B7341714EB80B6C57DDB50EC74C20E497
DF8C5D90DF2EB6F0AC1521FBFD1538DDCF25F9748E9C7C49CDC758CA99C4B063
212655C879F6EB96BB55BF5157FD09085730695ADEFF8C47E610779597A25E67
8DB4EE7B616DD99080BF793667DE800E6DEB1FCFA76FEA448A60401A3B11DCA3
E9524EAAFAA83DDCD78D676E71B6C51A64A87FD82AC7FD782D6126DD787FEEBC
4A63D583CE7227EC10365966AF2C08726F27A20D095709F949F404909374B2CC
B0B57BA8F2F422BFF55CE7D534A2E4DC1BF74D5A454BF4485E2B7DC8C9A39E76
8F162336CEB7BE8A5C27AE952F4946D01DD1D65C1D50D6E1D486FB5FDBEE9826
DA01DD8FA5EC384E9B78FA5A7F6720D207815F79EEF626A126E8005FCA77ECB3
172F5199E5C54611D9D515EEBB7192C63D22D02BB2A5A2727BC0458997642898
4A7DFACBD3FE28A8903CB42EB0ECBEECE10F4D9FD0C5B9E9F3A14F9BFBA60CA6
556B0473D5BBC4C67C2D25384D8E7B9EB31D79E2C460742138982CEEB80F3AA6
BF99216652ACBD7F2F5349E857177D94A431C46347867CCB8E4EDFC64B532A24
C570498BBC81C4FBEB957EBC6BE93183DE178479FA333A00B88F0BA650AB274E
35E9F7715EE1E8617FC7BEC56879D91DADEAA25F850083BE6CC26AE7437664A2
7C1C6EC83AFCFCF697DCC8808A931CB62997E29B6877A1BD00BC1A7A9D57AEF1
E1DCCEEBAAE87CF5DEBCE7349981D834A1E8AB45FFE334532FFF6EE351252820
E234CA2EEEB4DBB360CA7518709F74BCB9FEE4077CC0C490F7C2A4855B442011
F240BB7390D79EB357A06CD67E2C5BD39E004F55F754A8E2469082BBCCC3E63B
027A4C3DF0C328E89C5355F29E7EE697BFFECCAE75C27AEA6C7B73B4B4E4A0DE
B874CDB1570739B1A1A213262E4D4AB784EDEA3CC6F0872C28108F7EBBF5BF77
0C0BA6C712287CC741D17C19DF574028247317FB22442B6DAAD517B60D75302E
7A8703A70517C9FE24A6930AC314870AC4D133C60D9CFAB56CE8F8D14472BA88
3831DE798AD51B71C2CEE666A5693C95962D6AC49F31A5D39135CC8D762C5E53
C23CCF67CA8BF1B1274494E363BF0890FF5C1FB5FC75FD528B2FC34AB914C268
C8874E34F01A8F3E17F33925DFE5F0CF45E34F3E676F57892E7B84E9F1842147
0D2F0274738CB7DB4E9A14291AF15CE3BBD6B3B90E59C99B4085E7065FB50E28
631D2A286B9862B0C69172A7B286134925909155C60AD3A77AEC843DC75C97EA
CBC20908E329F5DE8442FF13EBBD0D06D7E62CE534576EC62AE892310FD56056
AB112633DC84FB7743B5F73E9DD0B021F9ACD205A00D5C6228AA1D43F1C6F0E9
EA338B2E8A829D5D4EFFD8613B50B2DF38EEF34AD0B05A9F13D36244225B77A8
8166768942CF7E11D8AC59AE55F0F7DBAA322E1E5D976C33A4C1B9D5384F70AB
C8F9F74EC9689248EE97D7DC3783A048D871AC6F3464517ED20118D09F22813E
9A8F6B24CC94A37ED7FE37D7D03026506C2132A9A68ACF4E48AEA4E44DD23AD5
437110523A774873BFDB9AE479901957507D4B848A373D2FE906518513D56A96
586FFF4CDCB491617876DC12D9D703BBF1E814059F231CACE3B876EACEA2B463
B4F24C1D3D7510A603C11F295FAC3B649D8BEEE2DBF85283D1B3DD65CB510702
758F21F8DB9FABFFCDE8B4D3BF99190383F85FB9B692A0A29241EE13B4F6714D
41A2DE46FC28194AD2063A1D0C54EF86D11A29D25C36591746DD9783CE80D770
7A404B5B7F34AD778608F4CF9EDD7501A2AEE2F85AAF60771CDB854398BA98AF
AEC951690051A2662DBE19109D42CF3575A4130B81E97C2A9BC215A2E2A34BEB
5AC89CE072710DEF408694402960947DA3B6BF54DA82FFE0222F7AB0E97B3290
EDAED775EAB0D7D553F222A3B014EB44EE9624B0C96706BB7AE92041B78426E4
C7EDA2A77A7C129EE67D6D67C2BC96C880A6B435F850206D0AB69B74A7E9FD53
8C4338F8DE787EF2B604061C0118BEA317D3620FD9DDBF75FB63DB4ADBB1652A
3583ABE38CE55C584D2618007F4825DFDAA3116D2B7E450C8F7B16278DE567FB
37E8F702A228AEF49047078B06C8A968F278BA7BCA00EA900B2FCF2FC9ABBC03
23617AFE301047C9646BA848529E3D9DFFBC86682BAC2D53944F47E4D257CB17
98520F27F65D75B2E795E40A62C9EAC215ED0EEB650262CCC5BAD1744FCB6DB4
032EA0C0ECB7BBC044D8B0C662A0B19CE448D189FB99AF0D7FA4DA1316C3C527
9767142D132F62E0029C751A0D375757D95AE364394FC25E6E0D02C6840ECAA5
EB3D39A3B9FDEF15DA1F1505CDD37755796CD5F76FEA4D8AC7A08A586B816A9F
BE78FF96BF1E3CD52791A35F612F1A0E540B3911A7D28491883B928672AF8E70
6194412994A5A0298BEF561152F82FF64CD3298D11287B46482FBEAD4031D9AB
6265FB6BB647FD9FD95E0A2BC79B11AF3FD1E8FE988132C26317BF8119C2B534
65DABEDF733F2C517D970B01BF2FD7C2020471CDA35DFDD2FA7A020E5B8B0F4C
98521838E9ADF7C3C36287440EF39417ACBBED2D94330DDD281BB30948DBD034
3D9ADA66016E6C568B9C0A0C4A73C9437FCF888AA207280ABF9C548DDAE35A68
2EAD10C1DAA94393A66FD95AB6A2D50A250A419C088A5C5BD673997CFF6D5945
3F0E5D6CE8450BA1EEAF7D7C3B6E355805140A2AF25AB7CAB1AB1294CC34A4E8
E375F4819B5D5BAB08023365C6CA5F6CF88C1ADAECFD2F6924A20511364B00C8
08BF6BE47C4B4E4883C2AB94F028FC392D5640C2E2D75914785C1E4BFD2F9B95
CC367594FB2E0413071727F3BA34DD5344505F8A106132DB61FFF7E53DFF8484
9ABCABB785C4750138BCF44F6580ABCA6F9F85908BB347934BF05C4372D2F2EB
AE7A00EC62F51FE36E59F32EB5FF5F685FF9DA9B01089744351A1BD4BCB8982D
6AE5E796ADCEC43A85122841320950D78CAE1810959FB8D4B5120DC96614A973
196AD2DA4D364F328BFCEB747C734B4712ADD20899D0C5D4DE513E0D6D14A398
E0EB8FE23F24120E566AABF41F029DAF6B084EC863B1E81AAF92AFCD60F29551
F39AFEF242881863574EEAAF3E8CEAD9E2EAE9100724E22B70C2130502A39030
F10073DC120969CAAF54CDE3A47C1CB8FCE97486061BA69512EB7A36908C4447
14FF24C22C90E9B1829AECCB3D14EF447D7E09A12C41EF74CFF3FE0FA22F231D
769E8F0EB6225C7E0A9D5A5F3B8C6B5AAF67F3E2F2C12413F757EB1ECC66A70B
EA00BBDD491FE613402B177E1391FD90243A28EEB9D354ECCAA48FA831272ACB
55BBC403803D09B9E94DCF2543557EFBC166E9384CF3AE0F9E15FC4288FBA0A3
DCF2B9AA2680A692AF390F3467DBFAA0B2DB6199ECD01315E4225B23ED998AED
214BBE2CDB5A74BE21DB729838FE3BF252C6894A939DB7411BB2037B7C03061B
9E7D8D87FFA7C85B7701941DA62E7AAFA6ABFC9C4439815B40F60DA613291E2C
020F6638C8964DA68A5FE05749E9CCC94D660A039C83ED414F9868142F4CA9C2
D2F705DD34C471C23E92F49E0BF0A662C7FA055A29EC31C380BC0884761B756E
DB71A24D7FC4886CCDF9C9A48F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic12-Regular
%!PS-AdobeFont-1.0: LMMathItalic12-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 833 233 0
%%EndComments
FontDirectory/LMMathItalic12-Regular known{/LMMathItalic12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic12-Regular)readonly def
/FamilyName(LMMathItalic12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMMathItalic12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-31 -250 1026 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD11234369CB38BBC21C40020C4E57C
950DC4A5CD271B5530E91DBA55EA1A3BF584D9405556EF9C802B109FF1EB2B0F
C350D7F091E7B613B08574EDA3BF27099BC2EF0E503A4C4724614A73AA054756
A503BEB31E3FCD96F733D0C5815847DFBB66DE4968A9B389FC00C2146C4FF68E
076BA8B3847A3D8237D36A6BBDF0096290F1BCD02CC66B12E0070215D5D8306F
406DF7590940DE35CA0854D3609249AEA4EE9D3D377A7996C1CC2E940132A90C
F633C774985DCAE8E9353607B9059DD211265A0A346B1A062D80C64B5802A750
D9FEFA3C9920A3DE942C65BD08060AF33C91CFF62930F65F9A42F70B83B0E077
E169BF7F5D84F15D59F8A74BC2EE4A7F3ADE36F38C3A661F4CC9826BF73D7F02
D3CCC267927CAE22B5ED695D212FC3B669F9BE369B7A8D325C3FB9D552F175EC
29972562517E91E7B8D570612CC50B1A5CB6B94D030B0C60465EA21631F7A30B
44A47143D0C2F942B5D76384B8C3F2F197BB3646CBED3DEECB6513D3AD460F49
4BB874969A3663617EB537E75C1C1BF92749F9D147080EFF78ED285C315BAFA7
D78B7B4B8B7CFD1639EA303ACE986EDEEBA9350F92529C47EA7689779BD50CDB
D1B3A68B383B54B51F4FD77D6458F15AFDAB471DEA9909CAB29840091391F2EB
148588D02607411F2E802B9CDDFFEF1C1FFCC9EED0405371651ACF30808E8C57
682B734916EE806703B2ABA2F6910E0C75BCE10A94FDD1ED3E4FDA7857341427
CA0A4F7D30151BEB8E3D351E1E100A8A75959D11122C83A5C0C4C87214413B25
A6BFE44A42D446E9C4AC88F86B07C1097F9C5C5673B88582CEA8CD622F9B0C79
E463DF7F2F4C6640FF3852BEB520F7B23D8A22E7E601EF9CC6D0A2E6E82E6840
65B82C6A3A6692811E2B4F57723AA3A6E27076A2F63D6CE1FBA7ACD844E732FA
02797B386F2EDCE9FF9F84EEAD17B366D678E61C6176FEC09C94B74DFC090CCC
40AE9DA65E5DA02E7A7E8A840B45B752AF11A279BA06F821525DD0F477831176
84C80B29D318260FBC314986223F9EC4DB5B0EF2EF5D424C6DA581B49C709E1E
98149FEAAB15DFE7F94977C9F4AB20F3D8C391A5FDDFDF5B67E9BC3976D5E50B
846FD2CADD6E5C3689987A6BC19336039591AE9BF280352F53526F7E07CD703C
93CDF2B76B90F055096EAE10BF6794F563F2AD650671AB36C99BBD45E7A8CE34
CB792A606A7D9EFA0F25751BDCE7740D2BC14DF0A3538EC25105BD0CA2485783
361EBC52149C5B9660C0FCC847FD80F67BB3A1F3237F7522F4084B7BC486BAD3
557C8A5956F4ED1B59F70E3721742F99F8F271B2B1EC80832C40E532FC4AC9C4
88F12D88391F3E317A31B5CF413C5AE1C0833A46996E3A4F8A4B2DE2AD885DBF
88E6114724E7ED1BB145B0F970DB565707DEA9C5DC1EAC2C92456833AF7B32DC
A305095C729785E52562098F9C1F2E43FDEBB58E4FBA7C92DA29ECC7EA26A328
3EF893A875CD8F881CAFE7B617AF6474B8810F0816088418AB9DC45E88FD3DE1
738FB05A05F6ABA7EA3E69FA5388700964B8391BA7EB79B425E494C2E8D617DE
B8FB2B5595BA0B6B4378607D31E5B0018C20AB43FBBC6431C747B0375886C277
D9B673E4D54179C4DB5EC951887CEC0787608DCC51CD19C1C8C83A39D53DEF93
730FCE1FA3C3D1C16788940C2E931E41C480558677A7ADFFCA035336054BB56A
9AF9731650C583904D8458821515BB7881E9BC775999A801C99E8D65A91140D6
A19BDA32AB47C76514A0346038CCEC1AEC33A784DD4D74337772934E2A0C643B
CF18386C6D0281C40A97ED3622610C69847220CC4A596A98DAE3E77D6FD41C07
72264C64D9EA506C60DA07EC233687BDC7607B82654164876E63E8E3BEB6FE0A
E6FB3675A47B77D953A4494558D66ECBA807AEB77A8345B22AC02668358845A7
B734BAEAC1D1BAC1FADDB1A01C63FFB5F8AFC98CFD075B5022A5801DE620C898
7AF5C5D0723AAE3772C82AC0ED80C567B67769BC13B8D998BF075D79A4C47D15
8F800022A196D0F52837F0CD3D52B92AB2D18329F7BDDC0C1CCB268105DEB249
85DF4D6FF38C1F6ECCDC29DFE775C4064934FB530B35AD9155EF03D074AB57A6
2A79EFDB05D506686757C71C3CC6088E942790181EFEFE1D280A4E54085F82FC
15D65206244B554D6F53EFA6CC52ED3212927AE97F86F9C28D387E31A3179215
71DAD87048FA041670EB44D2E9ECF76FD96BE2A7C1983B08E432F0E9B53D6484
5BA5A9732B6BC70E6B1D7ABF79FC234DF6B79A592CA2D653B0EE989B48B94474
AEDEA07160C8B6E2F7E8722E8B93EE7FBC1D5909A638BD3BCED8D92DACE0A7B4
0687EAC860B5A0F84D918487063C5E57FEF14D90E01EE2A4BCE353F29457E8C8
6469BA543DF00F4AF5584F6BCC0EB0095B9C673B81C75A1EEB95351800999ACC
476DBE2BBAC6D6D55C96DC4C68D073F0CFEFBA90B74ABAC8C875CB52EA8E652E
3F2499D1FDED23D17335E2CF1954DA62B652B1254FEB7BD94FF9BE508FC6BE4A
0FC8B4F54D3CC74B3F067CC1DF9CA33AA5496813687BB411678EF3357786F66B
E7285BDDF370A49628C217C17F074E0E1B2739006E78E1E4888CCAE33228E1E6
E2034652553A03E1341025B4F2FBDF3C86D3D32879A5F548ECF75B9807C8A602
96C0E9DE9CE7F7DD4772C2C44C18B52E707CCB800762D20E9FF1ABFE7D3672D7
6A748A9E277FFDD25F5477D2A46504286EF1F4931DE0B7C76296DC2E74285C3A
0635AD1A2939B3FE381991081FE0AAB2CF7DF281F0CBD979B7B72C0C8663241C
9CA266A1DF89E1BC1D9148C9BAF1F4BD6A3B582871543A7184712303256AC506
9529646A68F034F69AF123E046C615B231FD5BF78F3A8FAFA48735D694220D34
5D1F30E01E1A5493374B3357EFF7D8056668FC391832843C15AA648C24548BA5
666BAC56D1541F38A3599AC1A5945D42A0B9A5B38014142B9602ED70350FE725
77CA439DE40AC0F440AFAA3A630C1D71AC183B22936AB9912DFD7D95D0254BF2
7E1C417B682D37D2813F6091C6B23CC884E8B42640338C7BF92C4B9A67AD475B
B130A67A6783CD282431ED8E0886099A8B57FFFEA7D3ED80D068E07FC21C00FE
7AAF1AEC9B703C2B0F8328E9DA44623E14D5FDAFD1F533CAD22A792C278FAD74
9ACE7A9E8423D3A97BA3858A4F512C6D2240FBC7E09E0FC85F032F0B950FE697
D949BF33EB7CDE4CAC9D33FC49E85E0DFA307A605C3684E53DB8B3A8476AE9B8
7533B3E756991B232B7133E46811ED6FA613AF5686DFBCDDB5483E6159B22760
444C62CFC0A334272A5727F21B12467D167283EDB3B8655D0B890E140A04DD62
22B7F42EECD3D54BB7BE1D6708A6A18EE3F2B4B643645A9995B65AE1A5740774
7C30A48554D4B33399363EC98EA1242ABA20E9120DB0F839D34C4BF52D24E6D9
CA6FF2C3D3A0188851916D8B384CF3AC1C3A8E8BE0B2F87416318BAC6ABDCFE4
386627F33F58C4B680CE070DED7AFD54AAE24CDF13C8071D56CE72CB67E59E08
9210CA2DC1D1D329AAEC5214F84F9AEA3C507B70CC7B12FA0F281AED10D8C657
82241E8B7B42258970B8EFC8084B2798E93E6DBEF1E2585512421ACB3191FDB5
BF6E05066D59D0DDE8E9624FEDAE80B9D1C13B1E5866E166E112655C2F62E0C7
2236C39C539D0D0899920763A25A46DB35D9BD4352FF5B8596470B1BC56CF596
9913503A8E5CEA986CE897B3CDE7D0550ECA582A6F1FB0085BA3BCB85F462163
4A252A85ADAE750B6478C6819DD6DC3E5AE8BB43EFC7DF8F0896BE11425E18A3
501C33AF1443855863A54FDF0050192977D454F2900746691B157DDF5F06AD91
0E82BA66B3CE546889023E2D3F6C1EBBBD877321E5FD26C92A79BBD13817F9DD
317451FD3B70EFEA3180CC3B430D86B348C1778AE5B6369DAB7E4529000B5C18
DC97A8478E43325C77CF8F138CF0E5D067DC21ED61D53DBF5082184B97372D55
22A7C9715471818324F7A824ABBEC6A4377E45B4F87F8152E886EA5F055F9E57
3C975DC5A80C5C7238AB888CEA5F5558B2221C08DFF86B62053F5E7839A06360
D72B2255EF42BFD9E5ED430C409B49E5401C2B29800F7D948B8082A539903C88
6044A26BD11BCFE030118AEC099DC12BBC8BF7D614DD0B546B69AFF293050BED
6BBF69ECE3D0E858F9906E382CA53645CEA49DBC52F85CB17ABF5B595521DAA7
12B112B8C5085A2E87A7B96022268952626868F353DDFC34F313E68927E9084E
9D8E41521528746A80865E7F854C0B8A24E649F9FC87745C9DA0865E0E4C94BC
BB992F2B7279AA6D414F58C5CA203EAAA225DDC30B1C9CFFEDD77150CA2CE193
4D1BCAAEB19ED72253402447F7F02B6A83D1CDB6BC0B9DD86A5C7C62401622B0
72A025B31807E312F40BBFC0CCE77FC67872B34CCB05ACAEBB41DFE96240374A
E63025139114DE7E041C6ED0002D0E51DA925BFE672F22A7DC5E0BA2260A6B95
C70B81C117A52A94B7B0A1A38E713B86F2E3A8080826832572922037D32B7D3C
DD2B0F632289B9BE775E3C443106368548B8882C5083045398B383831C53D43A
43790311F1101B239643E80BBD2AC67353D33656FB0BF0CD5BB652E4C18CCC4B
407EA2663DADA04E67A7DFB13F4B31CA487E96547819A337F3739F5EA6509F61
F46017A4C9E32EB79975302A20DAC0D32BE7EA2FCA658FB843773EA82FFA9686
5DB922D88C170B31D1048AEDE4CDCCE74A2A1EDB82EBF1DD9A18EA272420541A
21F27401DB0E23B864AAB29668885DDAB5DE9835AAB8CB392669B35D01317961
692ACBBFEBCC561AAC8F8B35262775300DDF7F463E0E8D635C04197CB713FB9C
FE7B1B84AC588733B8519E6EBAF62B76BFE6A8294526FB08FA4D1DCB163C18BA
05D3FFF8814261ED9822A4CC7517AE121BCA4009B775BBCEEB45C391D0AC947F
4D75F0A5AB17149C115351F30C83A846D6A915ACFE5A542F7E21931ECD968E54
E17A2124F05DE6A7C85A1755B83BEBFBC02639FB12BFF1E4DC8B73158FE9DBD9
E1DBC070D73FE49F743F0A3B65753BFB4755A28FF486A270027370B1026102BB
2826CB20BBCBB8E440949B684AE031CCC322CE696A76F56460C212E2EA44A3D9
E055AD93D0092048BF461C014A8C7CBAE692581563B71F17382314D64474290C
796AAE7B0CEA015C6C9F54F55D1166A7BB111B04884F8B5228AF9D953AD573B4
9DD581FA364245571EFFC65C0CAF02465088F2D3B7DDABD35AACBF12343B44AE
30FE0192E9EC56A7903D1DAF343759E0649C3C46BA2D49CD9B2A19990669306A
212FA97E648A4C5F6595E55998F3F15A1675A08A55B782742544215DBB43BD0E
3E3D804B5F54820AF640922A27CEAE69A94ED0A46C836E6BA55DF5FF4A5DC5E7
6F2235995B3783F580FE2259E871375AFF6BFBC592B8B81F7DD901C497935163
E2BC5805A5C04B02F8C7324D53969C3D7A76C36454804484BCCC145059E8D52D
FCD52DBDA653F17A6AAACA473009BD6D3BE388ED6AAB3F2F898DE33AAC620D85
C2B4C0C68F3437B445E27BB18FB143CF2572E6C68F0F4F2AD2E1BB2D017F0F6E
BC8E4EF6F3A260EC9170C3BB8FDBD93EF40EFFA914B8D25EE5D3468EE8C2EF07
66E66D54C4B9962CD1971661D36C668345A6AA5F206FD7856BF5236902478AF0
20E65AA0E8F9DE3500921A7818480E66A95C18617C042454B3BDADDF901AF2F8
59A9F93122E449D2828ACB10894EF594F4DEB04CF13E92037E93100DC7AB643D
4908190A5827FA8C506B8E5B83D439058EBF78A0329BE9FA11C9C48055996B4C
C8C6733B14106886A745491C752D25187AEF8FA1A750AD2C1839911774F02F7A
36C4B5FE93F8FF5E8A46D0749F984EA522FD98E64E1C02B6BA20E780A6D1CB31
9196C42CE6DDBC7458BA268DB02033B452743A427A81B676455D6000E5625F9B
A6D1B56F7A12FAF69318771336C598FF4E5372FF0D7F69E8EF2A5D6B8906FA66
A18C64189AFD30EEABD44D4821F16AB3FCC08B495CD3889C9EB062EA2A3F67D4
5CBA9984E64B89F5E7DE638B73250F3431C95E1A432A0C61049D7070E5B129BC
FE60C2C3DB25B209591FEE17DC95C79A1B90AF462F4440253284120374A5B9AD
DDD1C0E0C498E484CDBF36BF826C2DD57B68373D2E536ACD0ABD2EFC39BEECC7
ECF1D91DFC083A6972E46F135869686C9A5DE886A20FEF0F32FED3C5F4A529A0
D336E9EC8E6628CEF4BD83B2EB3BCB16D6D410732FA462BDE9F4670E2ACE02A4
0E7C4E2ECC28634FB4E79AF5EEA2CEDC9C3551C2D46E97C387D1844BDF20966C
04B860AE01169279C1D24A9492016F1A466DD18857108DF910AB55DD182D6B7E
9EDBD526C2DF13B9677AAEDBAB32A4AD42D392EBBC4C88FF73E1612C6F3D1DCC
B3620A77E1E77A201680D1DC688E4ECA31CC0F69641FCE8801D71C98F316EBBC
7F4E34917EEB1DE64F10A30D7DB55FCCAEDA1DCBC4204D5D2F4511B2E8555BCF
CB5F679108B6A1FEE12556B90CE96878B084F51F6603E087DF8DD4B02241ABF2
692723F4D61C43882F2C0301166EE102A4BD3BB6C0DA7A2F05147D6045E3EC8D
5035515BD44B4BA6E009C4DA713DF718F1AC3C21FD5C15AE1E6B80AAD317A032
E2614E1FCF92C5B7A93C140810220E482243934EBBA03AF959A1FF18B12A1228
773837E9F183C610899013A28EBC5BC19777A3F38FD38D5C5105FFFF6C419ACC
193B309D6AE8AD1D4B8D3866ACBF4EC0F4B1C9170167B98BDBC63CD921CEA25F
704F6567D0241DFCABBD072F0EBB51A60067DB95276F5B085500A2D35C452722
5F1CD0A582852A940876F8D7845FAAC1C8E7391A5EE7AEB19D7F6AA79C3E467D
22397ED507E9D6E917A7CF201BB75CB1F1DD58BE3EE0EE99EC75B700865F578D
1EE056A270C6BE739823C6D63091547A4328BAB50927F26E347EE84C61386CCE
4C68BF229D0C34D1A2C45FD1B508E190BC2AC90A419C88CF56073465C3098121
A49B9D0473CCC389FAF9FA3CA52EC77AAF4F84DC889A5994F21F76E11BA0861A
0A02ACA855D87C142E990D8A8F41C4AAAA96F121138B1D3EE6A85B78728CC35A
BE3607ACF364546595CFC0A989930C8E2D5D1AC99B2F0D1E7818571C8E40621C
C1B078E5FB08728C74D3ECE9A7DCAC983306A118E1F789BA793ADFE7908CC3AF
4C30713615F06F8B26C1E8B6C29A9B09B3DFEF44CB762C597E58E8E96E87B501
48CCB0CA1285D9C07C3E172E3AE0E7196FD60ACA1A914897E7933B916455687F
B22E4EA194AAEB9A9452789EF2FE9CF57C6AFB258F732D467A7B2992EFCCE11C
F91D4BF2F250D29FC3A6110916DFE5A6D900A3EB16F97A935B3D80E1AF7B10D3
1DF93FAA68B4414F701E8119A5CA5975E2B922F8562EEB101B0687BD73217E36
C6E9D5591E25D1DDBB29AE9B3D3564D289850F98D4D797F38494735F2C3822F8
1C829FD16BB02076DDFFAA11EFFF461703922BD6A3483F259F28F62BD1B61A95
81297E4937FF06B831E089D11063BA481C5F4584E891B099940B57A2C9F4D6B1
42404DDFA5A568367C3083ADD6B845E9A5750A2B6E72718FC3A1864228DD823E
8D2CF49C2E970B99E25EF755D652A12703E81C3B02B47F41F6126D00FA9347B0
91E3DD790E4331AC3393D50E7EA7D3FCDE0E47F90755D1E367EC353101BC4159
C9FC75FA8C684883D42514B4B3FBA5A13C810407F25B24100B8EE90CE40BAA32
99E4FA816562B49BAE9508F290694D333FA966D1AACF6DC5105115D1ACA8B5E1
1AA4FC748F1C9D3217B5EBFFCDCC3BC2DEC6DD734DC72A96A534E6C48C58EAD6
00D532757A127967F26291B7CE628CA8326A134AA0FF4B0CFC0F5B06CFF3562C
40BAF93F11D2789CB5CE9CEB6CB63E70A5AB748BF6872B7F413F329EE48DD28F
BB6340E36072B8C6B8B06CEC5F42BE317530DF726B7D8AE1FB179B165EC0863F
812DD3F1660256427BE239DF0B84FD1382E5D22D1AB1FF31F20E4DA4A166FF5A
07D48F83F064667FA3F724A0A86BB50A8F9D30FC7E4BFAC7A48DDE7900988176
CB1C88D43076DF05DBB0AD5A541D3E9A3193A71DC45ECB02AF88D9D9B26AC0D7
C72FC325F91369273E8A4B0F45333E0BD279CC9C297859CFA50FB2314F65464A
D2EB8E3CACE0E6773A8EC38BFB8818A791CE703A6FE7815BD010819B5E4A3119
E289E9B43FAEF70A4936531A06E7E2A729A81C1F6E4216CFF862613EF42D7AAA
623067D75199AFE750AD11C42BF7B65C671506A8512D58ECF74DD9BF145E8310
C4A724B722D1ED72AA207AEAC8808752465CAF6D2EFECB8C484121473F3C2DDE
517177FE3951F402B841B420117B7767EBC87A9C8DEF6D1A994F72F1B79C039C
CD9FBCA35BA4016B69FEC8A01FC602EAF15EC7B1B0B86F849CFDCF30FBB90CC0
B7F17D22F0AEEB47073E50F7AF33F402CC9E89975593
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4850EDCB990134F321F1FD6696F64BA101037918C9
F3EB2C616987CEAA46F6C052EB3FF6F2FB9A6F974915B82B6608CD85F75F0664
5644A5E3888713099F73E90FBC9681A6432D6944A68175A656D126AB96DEEC97
7DFB9A5ECCECE68B7C706A15EA93F5FA7800171D760667E1336DDDED349310D0
BB68B865F3E43C4275DFD82036752613F3FC722D561C0B5BA22C873A42C13AFF
73B7A9B8096208922179B7EDF55236F13203049ED2D3A304BEF0120285E9FBC3
921898A37465752B57535DF5054235CB5A713FDF779C161E40A8A8AD8074AABD
6A06EA11E40F1F4F4090C99D86095BE64A36FA8733362A8D4A2273879968020D
41EAA7F6C1A9B682B344B7DC94AAEDADFD1BD39385A57F9383AA235717AF84AF
BF5D808D32071618FA11E2F7907B9626CA16609BFEE67DB56CFE2E2B90BED39B
54D866320877A767FE000D8A3386EB1AEB2D99809C71C946EB77ED556CD01675
A5D45FC8BD04EAF80C756386291444CFC1D7F12BB4B1304696B2080A14F56ED1
959BD60C7F7F5BFAF8497205D4BD589967F17FBA10C2EF19C1679C5AACA4F9EE
B15E13977CA81B5026C7E1EF4FDDFF62E82B16CBE3D401AAFA4D973976EF232F
76C9D0C0793684D68FE95129C326682238CE9807B35B2C2C0C32F4122724C159
AA1C41DD94D0808809572A0A32125FA4D78B525B256291CA389F839797A13591
6197A48D453611484DA293AAA6B62F5ECBC9D32FD482C74A5387629E03895C5B
946117AA34217BC77B1E075A4BB99145EA55CFD1D12CB1D2E72636AE538232C1
3966FC6E07843E4FC7A8FB27BFB4FF67CD278CA322575D7590D77B4E03E63F7A
848E639AEA6DDEF55107E8C5B9DFFAA47CB3CB5A614B77D0112527C9AD97FDAE
5BC457971A70DB3421293E16959B64702BA858C1217A8B3B836A947462E0B59B
37C8CBC667F0052E653D33F067997638BDCAED6DF3A8F1793F71E79A58BEF6EC
47F700C376341D757B09A3E31F6ABE9EB9021C1A6E311CBAB6DBBC8AECB140BD
DCACE9B1E80979B7487BA2CB786018E20A5E0355AA33D6FCEF382799F62A9A8F
F8262E8DE16E9245C61CF3FFE09AACEF315932D79117A513F6863D275B80A249
01CC70FA943FF9A9F5E8D5716835F17CE3FCD6FC5EF10AC25471C19ED3B2D164
93293F09EA311F49295310B0C1AF942753C52402014764CE7026803F091EBA60
AD877E9208260AE6AF24100E2B365BF89C5B679378A7F6A67087C57B5519A988
04735147BE66CDFF2481FE35DBEE9CAC7E77D79BA760EF4C53A3C983853DE8C5
FD3F25925955F36A3BFF3454FF7B226C0F001FCBC5484DCFA46DD8D89C69C886
AA0247C5EE233C9D7DCFAAEA1E34B8938673AA6D760A80C38EFAE41268C528B8
5A14387C3E29D017EC16BE7E6918E11E7AAE31ACB6E85DE4B2B15B93B7BACB79
AC25F37A4E4D1B370E59C78DC9EB4AE83D1CB6E4DF546FBC914A6FF52591CCD3
C464AA14A393F61610D617E196C9252A013C9532C303C68553C91CE83431F239
BE883C519B643E9EAE5142F698F4B47ACE43BFE59E3AA4C8B47CA18016F95C6A
212208CDE1635F4E5271224CC19B6D47261CEBA3DB1E042443B665E915991D93
2209B3F4C86C9763861923B2F335DE040A8C24E73A0DC3FFAD5A6A9249A29AE0
C70F71EA41B0A4A505263D6A6C70BA63EB2814D31DDE792AAD7AEB4FA346EC85
0781604DBDF2EB65869969F265341938B2C7D6B979342D93A9F5A23A3CE8A015
130A0FB817DE38359C63DB215965E218E892C350FCADB5F66EB82D0813EF551E
F65992B2E24B4FC8353951C0A335B53F68A8F8286A94521BEE28D7319ABCDFA4
A21B5DE536B34845B32A34ED5CA1F3D3EE2B04DC4CBE12FC99DA94FB2648B842
54D4FB6729B1CB7E86DB55FF4216E2F57A08E04B44BB36F27129E5E93EDC061D
348F162C03BEDCDF0521B9F31D29543DE2AD436B75778C0489533F3FD5742FC8
AAAA8A72683C54B45F81F355D9D19496D0F80470D6B289B760B6851EA1A9D31C
01577A0026C7929C87160EE0D8EBC305A07052BD82AF003A0EEBF1D6FF38B526
E2EA0A91866201E08792F03323228B622E30142E47BC752EB0EFF7BE8B688A36
22826EC83CC42DCE8356DB43399E6A6918A887A64B2EEE98060E47C0F4276DEC
FDCA976E967EED2CE2C439693E2FD2F2C26823FBE781CE97DF06830FC498BDB0
73AD2CA5EC36B4892379B00A5C8564FC9A915C85B66EEE33EA460AF6141D60E3
76B4E430431F049992647E2B744E48AFD33CF5041056A43F90D0E6A47C2521C1
058E8C66894928964B332A89C5DA71AFBF455E5A68FDD4DF74A8F1572F8168DD
E778337122FBBD1485F73B4EEC2651C3465557A320A0932B65C1FF77F68B89E2
BE7D6D975EEC017C4CC66C88F5BF25B0D84AF0E70ED77B0B380397149845CE59
EEEF6DDDC9E7C6127A68489B4B19F3D15F6C72AB8DD43CA69CE0AE0177D2B999
3DB6EDD24B6A4FBFAF7245D800115B62C9BD6E97A52671CF3F69A78D19654F75
3822663BE5461EE982F36B0027977D6B3738BA7EBE8FFE3928E471DD9502DF1F
41F853B486CBF6A62EC2D4975CE0BAE9D76A833969FB573201280B149CA91AD5
F57D3A240F66B12B30C0B8C3C25DE1E16BDBF5FFF3CD111CA5FCCCDC96631D0A
2B46A37E422D648CF65D7C1392E322DAD8CD3CB42B3FA767FC185F653F299CF0
85F2C3AD7BDE7C44FD3DA32993CCB41A92B29BEB26E60B05B105EBEB7A7476D8
31D2C0383F39344255823DB7D1D12E2435634CF69890D14A1FF76CD20F731C4D
09ED15BFCB1DC5530257DEDE728A19496AAF9D8BBCFB2DDF39DA7261CD6B1DE1
94DB09EA1744A0B6E3A9A1704083D27D5690B18843ECD420763B9E7F42912756
39C6DE6964F3607C90166D11C291D467B35592E73C61A2DC1F13CD09369054DC
5695355C6FE73DCD523582A4973275B64B3D8058783639676B4F8B47476E4098
ED693455F82F098F49FF487626BD1A4D4B3B7961171D67F8F6B26EBA8AB37B5C
35D075C41218D0E9CAFBC8078A26AB4F29F821A015135CD43127434DAB18D387
013C388D3840182F35ECB411DD16BAB8CB1DC80EE2D09164F7CB2EDC0827D2F9
73A1460966368EA8F0D42E7A93BBD492847AE57C85675CF04BFD1410B56E616F
68C3927EA7267C0C4BBA87AA3EC7166170B80B7355E802532D38053D427DA3EC
5D297AB110438F9AA9CEDA887E63AD877E9208260AE6AF24100E2B365BF89C5B
679912C69C51E8D0541100E3DF71D501F4BFA0AE8260EA4119883BE0E2CCD156
1113CDC4983460A31A70C6614DA60CBEA3A564539DA028D46BD8A6C8E870451A
F92C3A3D555E94EA81503E0D53C0AE8AF190625DF8F48C433C5CA5E61B61960C
10E340864F2D181B835CC0F9C87C9CC0E95FB3F1824BF5ABE0DA3110FBD87806
4770B0F94B263E2C7A3D9DF14D9BE01BEF9882A1EC2C8DDA5931F895D02E4FF1
CAD0158061CC26D5256590E51541844B9AE3A861D6412B59941B7186BC31AAD8
9CC7F07EF9A36CF5C32F54ABEE8B83306227DF64A1F4E9B350DB04B85024FF0E
6FF4C8FDEECC5DF7106C24975E54928A3679928D4D84C98B3D33843CFCBD8AED
A1A74438EFDB0BD68AB2061EF46D65CA446C190A6BF6E0D8DEFA1E8EDDFB5541
473187ABC3D34172433CC652E9B2516AD0EEC9F452135D6AC8D97A90DD4C972B
69C05585BD438731D0DA714733FABC30765D6775BB68C69704D0BA5D6DE6BC5E
10342040FAE3CA1C359295C7D2967195AFD2D94BADCE1E95F17F0F95B5A683ED
8DA83806CBF2B803C94B5A135004A20823158454E29255E8846AB1AB9E444B82
AC000DE047EE32B5C7659AA3999D8CA1D3941D1FF042DCB7834420A2CB78723F
B40B625D7418A892CFEBFF58AE1CD0F128156868B917147969EF8319C216ED3D
620588A8D3D13C4737BB89F1FE17EA91AD0A119E1754916E4957C40F7642AD75
0E847F04D456B101A89F4E76E6BD785EB1F605D78CC0AB1425CEB017B47C1D40
BE68CE2BB94BFFF5120F91CB493BAD5966F870FFA6AE560AD6A82C3B0AF0C810
C12CA6C41677519886FD5CD163D6FB351E2918F4E5B5D5A27FB8E57A24EDF9D7
42EEFF2C7558A4479E218E053ED37FBC0EB204AAD253FF338FEC59B78E10A2B2
43C8E3DF12E0EA444924FBC760A5E32C9378F656AF7684E8E036205B149DA99B
2CD2F337147B5D3EBAC772C2F70F13DDA614AC122D353AB33D8949B97B181136
956D729E9026B048BF61FA390F64979D77A4C7CC07B1DCC9F4E8F100FB3AE710
F79091EAF4D42CF6A8DA8B47CC8437A4D888FA4FA4772845A518108C5548A8E4
97B9FAD42B86273D30CE80C424CB288CBB7155E850C778FF5672B756BA24DB51
A2A131B516923D5CC746A42AAE07B0AA79104E10420C3F67E491EA298A680975
64AA3F4C9A988692F0931B645389DD9EEFA606C7C16504FB17687F59658779E1
F56C5D8A1589528DBE0C561289A797E2F91BA5DA79D7AB6BB91A0A6D6FB96ED1
A9AC8C22E57755612374EC339DDFEF0101A9CAD4EFEA168F36C052D5EA81A259
7AD76B6A7DCFF8E0817223503719D83AB4ACC8AF0D1B73A3D0F73DB2AFCF4C30
8C9E0CE08ABC6DB7433B1B871A62E60353F613EC6187DCBF7F1EE55E59DCF7E3
8BF93A153B0082245B574C006312B254E6D2F2BEBE39239ADB477FBD2B0D86B7
02500421694E3BA2B545716DCEC01F7A80C3ACC17CB6A528591EF09C1FD39DBD
4BE29E699D9E44B7A6E99ACE99DB14455BC5C675C2F574036E13FC1CA59DB02E
731D1809F3CAB947E239EC69E5FEB2374FF8AACD1F10A5BBCFC9B7E8B83C453D
749AED9371D1D672EB3B04BA011E431421ED35A9488016DC83CCCE1C05DACDD1
3FC7379BEC45910F0ACD46A06FA3DC6C3F579DAA7490C29C5399BDB16EEA2A7A
A8206C8C8D4A801ADB04F4C74BE0C7CA9C36E787862910C4D049B82DA0F3D2CA
E3F2C028C5EF249DA376F0F22997656F359ED965A99750A337D1FCB6E77FE5E7
54546F80A9483CF06E9F77E57EFDAB737460B7E1B3376B5E37B763D4AFF33E38
A050003DBD2E7A4229655E487EEAB7641CBC7C16CA6991ECD1873495FAA5C7CD
44201F5886E3828510AB2F720FC5142AF5CEAAD07B020D3CCBFC275E73703C61
7CA186D413D7FBDE7A1DE16C177B128893D0DD76450709CCF7086C6B621AF0CC
131A5A3D36C13E3BA09872F5C40F7C7768A67B861D5FC2887F1635AACF2780A2
D583189F38A0A6C8F8F7A09788999967CF3BC505F3983784CA36F6027A26FF42
1BFCE5DAB2D853767FE8A25935C81D41A0BDB45D751F6641FDAD6065A36614A6
83425FAA2937974DBEB542E195EAF9D49EDF6190BCA557C4569B8E95A285BE2D
0678B08BF54D8DA66DC41B5259FA740748064D77BF335721FFFB55A4D879BB5C
BE06D7684029FB80D1A2E5CD343CDDF6652C06EE776A4C64991F14E014251C3C
2EB411F1DFD619D6F72BECD582160DFB96DBC17E8CDAF6DD7B3F01AE728211B0
CCB196A462A56CBE28CE20A9E7D22013BE81AA88E9D000D37BC690F668AFD3D3
6EDE20B10EE93517665826A01E9F0C9B47E451DCCDAC76A75523184F814ABCE4
E4F66095247491382AA7361AF27A3C413336CA6D80889436779796A91BD8D4E9
A9413FDEE39EDAC35F56A3644C27673F40E02FA3ACA9267B104DE7D912C5BFCA
E5E84C5F5B24AE8BC731B706FA04FC210E9E3DD63F00738AFFF0F2903EFF7A9C
E99358A8B1E1C2D6AB92277FC241439926F02B1D593862F016B702D8EF62D1CA
A336732EE5F578302026F851E887A5CDD4145844ED7B2A9D46CB699AEA993B1A
8BE0267989F985FD759D74577C6FBE9535A5203A13070274762F9A8251112452
C18F8DFC654DF8532E4A4E5F645FDF856A628A9B0EA9AF81B6CF75F8109E9C4C
DAF0060DD5ECDE7D4739935BF6BC6F9751B2944306176F7AB5B4FE9320A14013
C540DC0B2C7702F09131A46903CBA6B92D5EE09FF45F2D070A7FF5391AA9BB20
01FF877040B80713626E0C22A301504A6C3B746E7F9A862C93438EF51D6913AC
652F49975BAAECAC0E7D82AC7CFDD841FA25930B62800559760771873D48F813
C093D52026755C661023F05440BE467933216C0A17193F829547FBDB710DF375
0F1A32DD6B38F76BBFAA9AB9E3FDBE3B65729F4293D8C2434A8886D583181CFE
693F96F674A02769B6E79DDBC17E8CDAF6DD7B3F01AE728211B0CCB196A462AB
000632416E2316A739A2703A399BACCB0A38FF9D62A657E4A992CBCA5E1285AA
1067D470813C4EE0034373056692B5571B13D28E585CA2C81E20639F0DA069B5
5C8573C66D2ABC29FEDEE39359C3DB27161631FEE22F1B1516513BDBC143130B
05BAF1588BCE485A83A64CBB45FFCC35DA36AB230E3D911E6F227F85F85BDBD7
C31A12F21A8962CC7329FC1003852B5883FD2CC9F33C5535522E2BE0AA2CBED0
1B7BAB39735095A31BBF3C1D0D021B9AFFDB32CBB4BA63424577ABA7335BD2FA
CD8E7E4D33D71E8F20CE05056D89AFBA4F271732429D0E7D2F25A4CDA2190A7C
4D9B2F649115050BF7C3888F92E015CA5D91B363F99E42ADE00F1CDC69E178C5
2B5FB46AB460EFE17923AC043A9C96E547DCF3AF3471F16FF759D63A7C091ADD
CD3074422A9FF130AC2D89B4FCA3A9D502BA7F4DBCC130846220359D803B7E3F
78F34ED841FD5E33EFCAD136FDF49662442EFD590CACB680151FB582ECE3726E
EBBFC47ADCDF44873FF17704C4D3683A4297D67CEEDCA50AB79793859EEDC1B1
45E2347A339705A0084305994178ADECD69B50FFC1A2FC48EBD258283E882BF6
7E9FDF6FF3A0842C93510237B819027F631EE891128C8B11A8B9D7DC54F36AFA
934E907162B395AC6CCD1219E393C3F3334854C5D7495678DE754AF0AED037CD
822C764829548D1C357D76F8E623370C82E423A16B06F80009F4D98FE9E8ACED
DB346F8E75941C1189A56410C44793F22D21EA39CC104695A06D169F15B92FB5
907A517090BE92D4EDC366D10C640E2BEEA25168B07A9DD5405964EBDB1F1997
466EB09B29B743721932EED1BE00D81D9C487AB4A715E0EF9177052EE94549A7
6591D7EA974B33799F8C044D724E8463B767DFB1E92A0B7051AAE16E2067D836
92F9E18E318802243901F1E038698DF30AC71D0720E853FF060387F7A1978542
F0C083666FBE36129A36419B2BE1BEA8CAA277DB7ABA077B0A5F7FD0299C4F10
ACE3931D91A32722BEFDA8D1EA785959777CF86DBE59E8C4EA4B47A39D9D73EA
96FEF287CDC061DB74D2F14281A9EEA64E716FC9B7CED8E8D341B7F77660EBCE
ACE5CBEB2D332CFDA72643FD7A9F5D3AD4955CE265F1145D3B1428B90D09A2EB
C928A7F45C2CF14C2C2AD3A949D41A94C28119DDC415526A257154FD695B1326
C4450B4AFA8AFB0FAE8E8F1399304DEFA7B85DAB1BC5A3C4E6BE9637FC8BD3E9
4D6257BE1B7BFB179DDBCACC91A2805DE4D0637913EE6EF6D06F8E219B50B889
9416FE9F85C938662C95D21E3C1AD3600CFE96CA3461960B857516AB6D71E4B0
0F202CBC7A829EB9B312885669D62E21FB229C2226465DBD27291A7AAD14E941
43516067C4D7849494E3D850852D77FF7F663D8A185CD438BAAF1E6CF58F4100
ABC87634EFEBA19BAB5C24ECA192215DABD50D4814D9DDCCE81EF902E697A2A6
9C61E370010ED88BA5053465DD483F36AB6A169951A878D7E1F3A0D4B69BDA5F
6825733B48FADB06F9C8BEB8E15BFCA9053680A22D36D08F90A9965F19672977
7832890D0E956FCE91B975F6DDB367620BC0E945C7159B656EE329C40BFA2C5B
3357E9F89809E29D23BF85ABB2031EBDEA215F413D2B8536C72BAB0702A0E627
7577D862C56A5046047DDBB8EB376B412B04957F823E281751CEB1D0ABC0FCB9
B1E4C55A3CD3269892BBEB7BC05AE1507A9A768B23AC8EF73111212085586169
8126AA71F35135D60E02C2E601831FAA6C3B62B1FECE5096ABE807EC5E294377
9264257FFA0AFA05C2842C534A411593D10A7027692B791D5E468B4D4AE9C07C
BE80059C2A83B08C68B716B85B1B6F95770B364CF19DEA920A1DED65833D9029
B2D93C4DD2016CC43256A16E5BBDF31842F6EFB214DDEB8F515D448D505F73A5
206D127E13508F6044E309C58AF1F37574E48D87355B57A8B121334A1B8221B2
A9D8EA7F0DAD249083131838247A5CB3F9C37AF8B59E4274AEA3D8A0ED70E4CA
59CDA1360C34020B482539E49E919F3B127540B9AD43E379817760012E134C27
252F7B8DDA1A4B0A7C292796EA998FC974677824EB9327D1B1EB08ED22623C81
E17B3CCEE9D05D9BB8958956C55E2AFF9E1DDA58CF5743992D182E86B3CB63C9
15DF4A047D344CE43637207755066437CB4D6AF8501101AD74EA9A7C5F30E320
39D305F00399CCBD792374B5BB113B860B5D90FC1228018A6DF526D5C66A9F11
AEC07A100C7CCF01530BFCA819455105F6E2E60A245B3939415E3709B1E6958D
FF2DB3BB3A4EA8DE8EB3C6469D98A8D4937DF8B1E3F694B6592CE2FEB5D5F237
E2ACC5B456C3B196F1223232FF1B13F40D3F8D619DB75BBA85281C413245BACF
E3D27BEB1ABEED9E395F1F1DD95ECC8B4432266F9167D18191E3A718D0D606FD
8A7383F068BA765099A86BD13171B5E4EDAEF40876C1432B1DA965644F3D198B
275FC6A472B27279036B72C900F6DCE1C04FAA4D893D3A44BE0617F76093F44A
497312DDE006B19569C83F1DF93D4F745BAD70526CF070783BC4AB150DD6BA52
47D7A252FB2360B2658907CDACFCF46AAF3069248A390734949BA74617B56DF7
2A4239D252DACA3195B1DB317AF64FFC7539E410DDF4CC88CFB52D075E2DD5A9
A5121F9FD0A4940A660613071727F3BA34DD98CFE4972844FBA68284B54D7183
CBE6414249A00134B04D9557145C824496B6F2D99FCA3CB6695C4BE1E0F6F82F
DAAC5F5F221014E0473D544EFEC21F1B21DAB103F2ECD03C45978D34A9AE9965
C2C86C378E8C16EACC723052C57A8D7CA479E41A74AF439727DB451DAC56B286
F6807727328A02E3C511A33AFE1424C4FA2E83E45659097D5E1C75F856D7C269
CB626F21AB7875CCA19E45CF3721111356D1F3E208CC50AD05873752CAFC5F90
2D6E00FA1DBC770FE98B8287A1D197448823A4D524A0D895539C05B4FFB0432D
F191F6005C20A5428CD87225C7FF28FDCD4FB898A052A0B1A5AFCAC42134253C
04FCEE9CB233501A96497FCF85FDADED35F06C046670BF3272A4D0BE62811BBE
508DC0A95B3896377F048A63FDBFD917BB718E9C44F84195CC47256D6AD509FB
645CCFCEE8A7AE31D22483C53080C6ECEB01765DF836C1C62F7C09A0AB81C8E8
D447D5FF7EA0C874BBF3E0A38E42C10A4C41EFBFE4AA5A61C2716FC80359F9A8
33247E900925AB5E6CEE75B1741A3DD9230A4BF7F1AAA514B1A496AF69E0C2A5
6B23FF3DBA241ED043BD5C0AB7076AE4634FE43454088DC901B5BFDE965C72EA
2F11220E2AC39A160EC8C9E5E1AF7D9449E79298C753A2221351B0C59C9F6CC7
1B257345C6CF339D33335C04C304F646FB7704DFDF783B55A6821F7861B12877
C225798FB5E68B9516C4C99F5DF780BEAD3AB69689DD77B54C110203360F1941
FAC5C151BCB073FF6966BD93218D72BBF1045055F162A009CBF703FD54101BB8
0A110B75833E675C5C28DB99242A8330E9DDAED388DB7A0B49859592A3376F58
135BCFA5DE0696385BB0FFB6345B7B49E33B22049B6522EB1E1AB3F438CA57A2
D497B50B23DC45446F746407E9F63873237D95A125D12DD8898D143B6007CE33
55D979CC78A958BD3738703FD5A7C041B06172198B32F99D58E21B0A78302026
FBEBF6AA0DA13924FAB7200359454ABEA7FE5B8FF53B36BFC3614812566AA340
5C222938B2737B7EE68288BFCD045923B6EC437BE9A6EF92FF69322D42C893A3
0BFFD7A796985F77E601BED695A598B551134B970D06CA289C398A3587ED1132
2A8F87BF7A1189E3841F55EFE40EB68AD4A746324B6128E36279CAB172DE6581
46E8E615D349ED779B787232605BEB38346E362E49446DF8C97971B91C521C3C
4DF935F68A9237EF9C0ECDB7D87FCAE8F8712E1BEC7272951D9CC4ECBF2DCD68
CCF035BEAAA6D87458CCF25F198AA55DBC4F8AFB25ED2ADE20BA1509641276A7
D844B80249481CE38557F640F5E2B8BC062B0690FEE60D45E456121D67179CA7
5397560E0BA139DA8B24562910D66552386049D59AE3DA4BBD7C0493660BC8DD
C0DE4A91156AA426C05E7E9D3EF7181B20F534678934A4362DB20B0C808EA61E
A5E3052A639AF351AD71750A793AF049CDBACD70C29D3F8B72B95440914969A1
F2D001A5D7C9A8DD908E94FE245B2973FD4E643C9D238EAFD0E0E955AB4DD42F
8D9717BBB17946419D977FC35977447AA55E17CB51F5A6EF696939E42738595A
9D0508543A040CB489A8D4C83CEB52D65125D8A189FBED43BFD6030926C71F72
B7A9868A39ECEE402AC2178EB9AC1FC6A01EB4A52E159CBA4D35E1EF31347807
DFAEB7D1FE2901AD5E7B28EA4396BFAF8BBBE011B34424D6487FB83B7D957BF9
CE3B099C767BD8E14AED4F06B3F1FB4AB16280601D4308FB33E6F6E260285C1F
860C6CFDEBC07D3F1415F381236D58775BC28C29ECAB193C45F75C84522AB729
4F11F5D48A2E13C436C3CA5680F622117252D1D72A6D9D057A413F748F0E50E5
BB14A0F359C4C172951461E884747D6E5D2860B86692CA6EA926B8D00AF7148C
205048D9EBA6DDEE05A1997D0EDBD2BA7C8586E942973B8ADC21BA304ABDC16A
057BE93BEA6B23FA0D592C03BA3BA078F55FC5DFB04ECED07ED01BFADF46DA47
A77998C831CEA17602D94EE36688DEA3B2A11DF0545AAD134494AFBEFD9D51E5
86FF2E8FDCE9C6539CD8C059894E15261EBFCBF32823D01C38BCAC0A5E098E19
FC70CAF6FFBEB70AE878B9FD43E4BC24105236974C892564D5763D3D5D678FA7
AC5D4B1808A4B2AAC060163819C8EA58AB5E2D77FF400C7B694C294E7DC51C69
967B97BD1F1DA360C4CF05A5F07F91A1F17DA30AFEB722FEC5701CB3691A04D0
896F1A6BEAAB611C750B87D2A920F3A7345EF355E8BF2AC51221706ED1B74890
B2029F4CDAF8B95A33FFD5B823CD6A404913229961818A54D0EB5353BE47D53D
B0D8DB88F2B6256618BAE295057EE59E3D2F372B87A9C9DEE25CBB8AEFA1E49F
E2D27097B091DC0C957F3D4A05DADFDE29BE63E9509AE4E6E51A2027EC08AC5C
F101743490953E52C8BDAAE4015F53DD5994514C074D8D84A638CDAC65937C3C
AB2397E68E34391E254290C04DC92A461C8E697182A3D4FD75CAEAA480F411AB
7E50785FA63388E0EE37C82618BCF2BE11F46911B3303C3AA20704D1F9F8AB6F
71A4ACCE7F37A15EC7446C419E57F2608735CD2A532A8B3AF7855ACCB93D4C6B
CD6BF2659AC2D5492238EA2FBDCB2AF1F9D4FE05F4BAC0C7481957B69DFBEC17
9B307096031ABD1406DEC4D2A4DB911F6839AAAA92BE85FE2786437E6FA70BA4
2807334E97F3AAB9F2E527373DAF483D0CECDA8EF1A082C93DD7FCAE712D30EB
D40C7BECE058645C6876A647C19F9C684EB8549621EA8FAEEAB5E745E5CAF9DD
3087C4764D4352A3117794FB0DF0D9E564C44EC932424FC707DCE6091AEAA9F9
61DBAA19CECE749A9FF24B7AB8A5C5A2BB76A88855B4A781ADCE73A0EDF0957C
9C1DE3C78A0AAF7C80D386F9DAC374E9A17AB678698D2B6F11332AAE28B05CA2
B6872C8C9C6213593ED56FEC6D5E9E8C3F5912BE879BE88A7A33FC9FFE0ADABD
B61315E9068C032EA1185B3F634BB7968281E22133A947416DA2238038CC1477
78436E273FC28CA962BAB90AEC62F1C351596257BE6ED3D3A134748872439673
064D4FD1BA5C41A32A2CD4E0649AAB9170FE3FF24DE68A2A1B25AFC7C14D2837
DC73B170F5C40F7C7768A67B861D5FC2887F1635AACF27820174E98E31FD3021
485E3D82A817866FE481DF6360BA66FDA6E40432CB09DCCF5C286D5EB04E5A7D
952E716C2FC4B94242713C8CE3D97502780776CBF7731A353F93A84B9E23C563
6217774935F6E81155806CCF2714606325AEBD88E1EFC7ADD58BA85D4FB629D1
4A2F2603D8D6D4515589B209749CD85963469855157489CA429749CEC2598031
F5D1B00F3C41E627B1DB9876EE658C50AB2C808C963E32C1C000CA13E1A1CF20
80943CA932CF055CECD125D70571F948225DE8A566CD611F999BA08C604C3491
5DC51B3345749C0F3396B9CCEC6870E828171F7984BAF0B7928D3BFD35645B53
0C49140EA4499885CD9622402881BA76C9C7F25AEBFB7CCBED053E6098E23F85
F3FD49CCF9C181540243E36D59069A6D686DED51A3C73EAE75ED2CC22B05B89A
BA446304EEAAC280A94CF9CD77602DE15585DD5741BF8FA5615C67DCE3740E00
9C07FF273CAF4493204C69E3BA836D7EF5018BA0B9143D13387995F2C229917B
9785404865783BE7847551945068555F219C5847C0D82F0E866312D963E012DF
0DD89993FDDB8555CEDD6B1BDFD5E9ADEEC72918FDDBC8621128B0C773266D8A
CED067119C4592AC1DCD83087C2DB8199AF238587C80FD855F1733F50F636A4C
7426584812DA6CF31C2F1DAE3862CE6FC4C59AF4C51B407D44468B5FD197DF66
D6F8D2701298CC9FDA7928F99CA135B6980F74C2B4A83F47864D1624747054CC
3E674581B8E8896650B02DD0359C270151A5519123680C26B441A416BFD65B8F
CCFA396053909C6A7377F35F082E3976B95DE620772C92271F818BFDFC8AF809
9CBCDDCDFFE15EE19FBA420C3C95A9938EF236F4147C250F6D7F8459AC97D820
6835670982DAB244253B8FDB3BF67A6EAB2D85E1224AB6959D3A29E20B6B00AB
8DD9C67F5C66C86976899314FCB499A8A506B9DE4D054F3B943A621AB4A04E50
63B52CFA10A0A8A89270ACDBB7167F1EABCEDD9532036DC8B922D6DB1C2D4250
D3FA4115EA205406C0316645AA6851DA6F9F67952116166482CAE5E08BB53FC5
E72D3EBE62C0C8F8C4FCBCE04F3C65EA91889541467D451A5EA8159E62C61456
9978F12A7A34A912BC2CE3D2B8F6230517875450771F19B59A2760C52C87C366
94BE5257D9DAA5EE320786C536C7CBB691860B26161029D105F1282258447824
330F5052B43E42A8D9BABC1C3DDA7B54BE6D8BB432899ED1D9677A4F8D852477
8995AE143572154FB48F51F3D994762E9918C422D1763BE8FDED2C513695CFFF
6B0CF5C0E809C17938DFB01CBC782B05978D992B7D285AFDBEB9631776656663
828AF4AFADF09D8FCC05E16D1B042321505CB0CEE9FB7E025E2D00DFBA1D8FDB
8EA30C5C4C7A725889284D623CD8E5DF6BC4ADF8132A03265EB1900B73856840
5CAB3D4CA7A97394CE614408B5BA6FB8B5C997DF742A415DAA0CE1B874573639
5AE9385BF1D37ED339149ACA27758B1E948987F3F4A741E97D81A1C7028DB9A3
509F974F409FA0B95E779F2E9093E518BAAA2524F7D33DE2C3F202B96AB0C59A
00DF442D87804A3F5B8AD99FF719D6C5FFC31F458936B9EAC1783BE3B5344077
AFCCCD82CFC289D46552563B36DA5DAA30B32DD043ECB0CDB6902BD6E9495DAE
0A3681F6951B2EA5BBBF3C3B3194AABFEA61341C59B612180E4E1C73986DFC63
2BCFFADB40D2F9C9F2C7F256417C604CC5A268D8F21A7676678D879ED994F922
0B23631D60DD4F0679839FD8E30152DD5AF9200F8AC8B8FA39413858E8AFDA22
D516DDFABE69046EB0B0C8C4818AF7E1AC71DAAB72F447F6F06D080D7BBABCC5
6B4CC24011214CB26E189C6E62EFCA1E621ED2A65D66DFDB2098887BC845E63A
599D1583124324CC491AA909ADDCD2D038C3174BB48DAA0EF57509F8B32B1A30
C9F792CD0749966A660FB4A474B818E9FFC1737B6553A15A5319A73ADB4AEAA4
56ACCF3FA9FD5C0D7DE2197E5C90170FFBB081D7E78C44DEAEF007F7421EC91B
233C05C77B013044307C394E1625F7E68E8C0F370D9352AF45733DFDBDE45B9E
7C914E0074C4F6D3A398A33A4BBBB1AFEF17DBFB63ED1CDB2147BF601E53E2CC
9E0F7829AD567C3691AEE6B2BE7557A33DC06C5284A9C8FBCC63BCF8FE8536ED
BEC14C5256B9940F0800E6DD26001BE1FD4AC4BACDEDCE5B0FE5ECF23DB04FE9
74772A2224FC3BCA70CCB0BB982F75ACF33109F8AE7ADE4954D0B1E180201A3E
622660DBAB749090871FD2316356C3CF06A91C405E6D18D5909E018340477402
CA73CFC7A2564942BB5CAF55087A666AE1792E06CA9C7DAFB5CA2C18ADA69B0C
343C1D951F5A0132415FA3866CFBB9392E0A1BFABCCCA91E1141AFF247D80A42
CEB4EC7A6BDE7A10B32CE408C9CCAA94F414ABCA46ECF689BA685F1BD831B427
1EE76EC4CB5A5F344D5B9B46B1D5EA4CFF4F5EB02E01028D2D7BB9D9B3D5003D
79CDA613B8B4263412C0CF0B6141B715139FAF321A2AF2256EA0675264922F9A
98E6FBC31FBC224E42869DDEE75801F5F379101BE0E37118C5C316D709A4B18E
F4517870CDDE29515039DCAC06E1FAEAA0ECD9E78621ABDDF6149ECBC35E7209
149B2F24EDE009BD8A20F4919B04ADA061CDB72C457D44795F8589FCD2239226
9E14A11BA6A5BC7DECE20029034C886967720B32D065C5F3A6A112882F7F3763
8E5B2B3893392703BC9429EED7CBB3F9F236403E4979D2A3656F0F847652E38C
3ECBE178EEB5B0C659BA219BA4F370699C8678DE73D0BF3A248BC9EF074637CB
07B405BC6D7D43475620F28AD23B6ADAC40C00E20BDEC7FCD299F74EFCF2FD17
F62A9C8B110472F95FD5CEE1A7EC2A78941AFD0B1029C4C95747C69296B79992
29531B651E4C98B0BD07C1AC67C1F3C410189522F61655505F37D6A182ACDF7D
3B11760DFFC7B4CDCBB6A5CE017AA860B96CA41C168548C5058FEA615BF622CB
FC2D1CEF22898F1639376A8639A3B0D2DB800EB1353AB59CA4C7A20EC683F799
C29356F99BAE0484E180594CBC581869A7AEF8B59F4353D9020ADF5271790BBB
B6BA3D4E22B144AE6BC2CF29F74199D60E0EDEC2BF9E3D71D369639D1FB1DA9C
6BEDD2A467C58639DC0E0728CAFFE3C5B6A3B4A335B853E32D9E7581D407EBE3
A42FB15333B86668856C13EBBB56D89B4557C7192CCD21A5252638E44CE1ACA8
FB3F1051B1D86F85C68C3795BE36AF36B47F98527667D71C158F4FFFD54FFB2E
9AF810EBECCEC5B24B93A729F2EC03A564E57F914969A1F2D001A5D7C9A8DD90
89A980C5F5D55CA10F93D53C35497F93A5550CD9DE284548060BBCC5FF8C62B8
94E007770954E9957E64833D61BB70CBD3460F9E803E409065E158DA49560DBF
90604D82D6E4F49D36681AA6A43DC01BE8CEF99710AF2F9E258505112BF915FE
1CAD98D0EAC02F1CF6E09E92D6215DEE017D48C64C19A374D2E21792BC0CBEF8
17DCE1BA447ED01851498AD5DFBBDFD2AD3A45C0FC93D273C16FD9F1E6E73D49
34F65C216EB6C3A6207CF39EA825E6DD17F0F1A6E1CE59D2E0E0A1A24075AA9F
2EB2A871F588D5FF6FB48BEDF193D575ED95BB4914D4A5FF9FDB15EEA35CE223
CAA7FFE09897138C27770510D95D6D99B372D3E7C6CFBC094FA2D39A046F77E8
2A8479D36538B1ABCFA5DFBDE1D7CCD1A973BF297FE6A8821E03A381C468BB0E
EC9A4878ED27E515FED0D26FEEE69602B2BD58D1451191DBA9D8C0217C65F52C
E2AA64794649DB23EEDDA22C876157753F121B8BD1906CA09F9AB0BBA074C6B1
F3BA59AA3603EED2A2FAE1A7E41FBBE991F72F44DE02DE2A83AF966C8D4A618B
7ECB79800A00422E376BA83865E88ED5CE0544FEF14C3CF8940301AFEFE61691
86E85CC128EB47C77F787A7F55F81F44B70138CE691C2D53BDF4FD8DD69B516D
6D228B9484B0273895A1F26DAC8372DCAC337567330DA98DA8E37071425D0C6F
32ED7DA515CC3ECA2B1C1496815929BABA6791239E7CFFD239B90EE20DB37B68
ECA8E317C53791E197D7688AC4FA0BFEA41DB52CFF282A651B6282D3DBD1EA51
A98D632626758E7E7DDD6B804FEB500B32ED3ED63F3F5E83BDABA229CF31517B
D219625993D594042CC174C0ACE76E9D5083A55163F6E547F3B2DB00B2DD35BA
DC4AD47BECC5B364E6BD903001E5D785BB77F0E027518946C270E8CE9158D687
74D79668048C6EC1308C14F18ACEC989128B8D2B1DAF160605C050EE025FFF3D
180BC27D2818706D2528B5A1B285E95AA8F0CCA76367CADC6D81D9E344472C09
1764BA40C60F9E2408C42291F542329F3F98B65E8911F0C5D8FB3D01DBB1F200
99769EBE684B749A1BF95CDA45A60F07E67B8C973BE6D74A24C6AF12C6699D99
508F0885DFC822B75C8DBB2F8F83E1505EAAEAE8503AD5C3596A9CCDB67166FD
774E2A91B04F835E9F01D57B2E356022FAFDA8E109012F2495BCAA05400BD3C3
EDA75C03C32416962C93AAC4234728489B466229DC370D3A09D92EC4A0930302
D1720D19B58D2A0BD921C389D177BD4D7EAB3BD14B4A1FCF01DD75C6B00B4FC0
8A480E5FE590D6B86FEA4A8AEBB335FC3A2E6E9B285405499F744728B1B930B3
A188041B74C0E48DBCCEFC8DF6D5913758E7EC9FA7CF5DCC18A48065D8E2BBF3
8B6A3BF48FBAC200FAE92C1274E416849A0B2DEBEF46ED9B0C40181868E9DEF9
7FF7442061B90974C758A3BC3D72C1F3784C258EAD220CBBD4D540575EBF40A9
32E0EDB4CCE4EAA2CD3056FB8410F0103B451BFE68E1DE628775F24CFC40F281
68E2FCEEB0ED9361222DABEA1E026CE95C08BDE3F80019218A5C2744D4ACADB8
6EA8807C229575FB986EDAC50146002A9D01E0144711E9E6B7F00A42A2D37DBC
E1A998A0A176EA553558F861E195FEBA59EBD82BD199DD6A6CD21E323EFA10DD
731E75153A363A490F9E7EEA3CDA680E535BB56E619A3F626668687708FD90E2
D7FE47287C29B14832B7ED2F592400255157912E2F422F6F7E7EA4526FBC4319
FFA866752D68FC5C48B58141C775B059DA372E68F0BEA3082EA975071ECFB38D
FBAE2F00D261ED17CAEE2D369BF538F7D81532A0A0F79036A3491A5A7EE298A6
62B7D0979E39643ADC5707FA83D312FF778384B02ACFAC2F76664824AA7A7BC8
89A456FA35891380EC0CBEB76AEFD8B8609CF0C07F712ACBC47134CB37A7BECE
B9759A16340B7413F7C4AADE6DA3F694B1F348CC76E0BB58B15670A45A4CA1AC
3FFC2A676BC4072755FF87B1B231D3067F97308CBD9F46258B55A7247D39E127
593879AC9A86F15DA051F8618855ECEF6CF97A9DD83BA39B53773FBDFFC20DFA
02DCA07F57B5F1164FAB22A62E80868A864914D7D81C56574A8A37285AE9629E
2F0E6858C6F4C6C06694B87FE408D52A3CF4C8D2D72BC64852ED81E7F0E4DC44
64AB1DCEB2461B40CFC4EA8E3704FEB37A19896B3CADC403FC7C1BC936FEF43B
3178D691D10FDEDB66FDE2AA99085A69F33CE0E3EACD9A2D2D0C40D2ABAE84D3
A03A37E53FC49A94A414A04B0AA80AC07060FC08295C60E80AD2BC814E731F29
440252B6904B7E153739DB8E9681FC764588C365888921E4560D3E28F7203030
B06DD775397C8446055AD878A67E1B6F8F563B74F0A6B2283E7DB8723C6B263B
0C847D8E0DCB5A96D55BC22ABFDD3819ECB56020FF4B25242DE783877F079270
26E19FE048C7202545791D719AE7C1ACD431E0C8F6C1400CED81068B1A1404FE
8037C964C851435F17B82460C555C2CA72378624955EA7FE32266B2D4668E520
4FF7F60217DFE88C0E4E805B3169143EFD1B28D4A385BDBDF82E8512C40D53CF
F9D1581E8E320C18FABBC0989B19BFB7859331C3C7B96CA484B16B60068840B8
3EB252BC4883F14158ABA237CF7AACB665959298984C7B4609E7EFE008301D60
083FB7E8BDA75A112D1D27E922FBF09A45A556D7731B980EF3C79325068CBB84
570F68451A3ACC7B07773F3E4B411F5F024722A69D853F03B404E9FB27409D55
7FBAF91ADEF3C0DC790D370634EE9F027096DC7EC9CC3281961C5A1E598F42A2
60EEF5385C86A03A6176B8779FF2BF953176B862597B55582486B0C5F3935394
8E245E8C0E98C6FE3C528465470BC1E7D7205514F831E769687088F366FF3AD6
CC94D4DB9CBCC134AC43D7177103E7F3DCBF24E50DB19D6232BCB18A2BE742C5
89D3E4B17E666DC2EE3CDEBD12FA87C3DCF0A091064FE8AE07CA9E29B4FCE68B
369DD9AB55B3655232E12A5937209B8A96BC02A0A3F6507D10A9DC48A2CEF84A
3589AB493D167331D4ABB8FD86A713666AFA98ECDA4BC1871DF8D411ECE61503
BEDFD6DAB97B17F9229101E351BB479BCC72169F8514B6807ED768E759D72787
9E3CF8A7D8671BFFC5E089B1C6001ACDEC457046C6E040966C4B3BBB23534E56
6BDA358579263341668BB029EAB9D451D7BE90CE11A98CB176B4FC43C87AD704
EC8A04C38EB82CF68A50A75783236DE65A091CC6781A016A285CF05BE2277268
B40B8DA7F6366BE59ED6A40DC79977D8AEFF9E3B78391E7710F09574683FE0E0
ED65A7D8A80FAF8E5E0A1FA60A856762B6BD7188C1DF4EEB4EB7D2A6670D944C
0615377C64E6B113A642350CB0FD2F80F79BED8DF0E7C1B2E59D807D70FB29F8
9E1A9EE93F89EE5AA1B00D3C9013ECED93390C84D818D3908A15E3A0FFBAD373
F16519751AA54EFA03F460A3DD35C907F5F30C207033E5A7AED0E7871D953403
9326416647BF903B6614ADF12E3A6BA5E1EEB4BDE83BE8C804239B27026A1BB6
20B435C1F8C806B6F2B26C65BEB92B97EE5BAC92C304ADACCABE3D5AC2F814D8
413A9C3C1072C81FDFB16C0DEC055FFA5B7481050ED96FBBFE525200B4884202
77EF0EF0CB5429505C890E52D193C2C23D27C289D403B5B73D567551C6E6A8AD
A32F801BF531A5E7FAEF9EFBF82951E09484C277988C3B3CBEC8BFFE13975F76
658D2F534AEA28BDFD40F431D02F159CB82527CACAF7CC2510A037FD124FD4CA
B4BD7C8DDE7DD4806F884DA6DF9A4B7CC6036482BCFECE5AA50C688F67BB4468
729C0D5D2596ACBE7E4C699724385C60819159F7D3AA41233F4D2B02022DE9CA
71F405E33E30B843080971FABF975209C9E952997EBF5AC77035E1F4F0C998C8
918119E336CA179ED50837FC44D02EE47D9C3079196FE91D252DD34845A8FBCF
999DAFDCA416B0C5E614EB816B28A3619363F31AC2E3BEF4224821378CFBA958
052A5DE18C5E8E2A00C47BC5B6ADB838BC3BFD48769CDA1DC9EDE5662B2AD1D0
4E3CB1E8C876DC6580741F0A24C750FFB8F4601BF782D01665C86A6AFC2A7521
3BB49B180DCF15567797367A96207E5BAA1CE4A8344D6D09EB9A34B3F33D0606
B7BC2B9DB727005372146048784E4F8E76EB2F9F5C4FCB9E8E028320040C889B
9B0BC88251DD3EA448CE5C75A3390B4698FBFDE44DCBA498023D23C3D7B4541F
0E303CBAAE46BCE8224D10AD7A46338BA043FAEA8F549BE3A1F1A378F932125D
77F2DEECFCC82AB1528A780DABA5B84D001A3FC4C5D21126A66592F51AB6DEC1
CD3393BAA7DA65998C53F28426E5E4E2EF70665FA751137683D60CB5A32756E4
D3B01D5D350745ED7528F6A9CA78EBE4B73DE1E73D194D859B9157853D8794FD
77390A77EAD918079DAB1A5079B91E170A0665353898CE85E8E063532C27563C
FF9FD75618D7DDFFD53738E35CEF7DE62DF119C7174F22DC3A410B61D4DC38FC
A2676ECC9A4531226AC32354A9A9732EB5D756019215F445B3B893CD3B1DCAB7
F8272694883F5334532314F927FF668464B693E52269A32FE0059EBA866DD608
70727416BDB4B2EBA1FF56FD6EB9859F617D04EAF78DFC98ADD44640348FAC22
0A036407EF5E628B8FA5933752C484A3B616496A6E5B634B1BB6AABD3288F16A
BA6216BADEC844058D16168E2EFC9AA8CACFA6488CD2557B76F0CDB5562A1FC3
F44A99FFDDAEA0BCF567AE374A0472330960FE653AB20F5716D9A02BEC62D5A0
764544516D3D8E450F589EAE9DE9B379CC8B00454B00DDC69B7C0B0FD5FE71B1
AE3D44CCB625AD93F38819388A2F582208E02A2DC5BA46C067432DA2C3E42994
B0953A98326A173AA4CA169AD788859192CF2FCB71BF2F4A149BAC4E773F1CB8
769247523F7FDA2BAFF09BE0D20C4F2CFB545BE289E3D98695956D4132D895F2
98E250B74ED310C2599BBE0CAE1B3E925B3366D569938476AF3634DBE36FDAEB
ECD4B29A21887504DD54A49C85A70452E7889211FF24283AD793D6E598350A47
0C355EDDA15AF6885F2E1394A596001FAC3C14C4AE3B287732A0E0CBFB296B6B
AE2CF46DA6CC1D183073033B85C2F9D5C4924316E3AE059A701551615633777E
F89BF1BF54D8807EAB0E0A9C97B1A61F49420AE3EC4397C816E1D2ED715B8A37
307C798997583A774684CAF3F039CECFC6F277394BA8D30E350B2674F7494FA1
82890036E5028F711EB9032A22773A5148DF78B4FF61B03210F3BF96D6BF08F3
8611A67040608203A5C7107503F64797942F9227920CAAD43D1B48EC23887DF5
104BC3489CC386B6D55EBC71C9F1675373F838D16967A1BF023B8982C1D8E1F9
7E4787BB31E0D5EBA5C71472491F12BBB5C8F3CE43DCDA76D261E3F7734DE2DB
7D9D5CF1C168E7DF3B43FCB4C9DF1736074582183309AE01A2D4090CC17E9C82
9BA0F99C9D409B40E2787087F5E3540C8E013033B3E99F86955D8778F8F31422
F998138849C467D76FDF4F79EE3F79735A903FE477523FD2BB608A51C88C13FF
DA327FCA60A3C3FBCFBF5578EDEF54DB6137A32DE832E351EF5B04C5C2223AEE
49FEEAE2846D44468753DB71BEEF5FAF2AB0A720305463D516C5007E8D72ACF2
D329D60096E487A10AB1C5284E3DE7DE193C50921BAEFAFBD2EE29FDC3659A1F
066B7502CE8188A89FF12937329110A0CA284B870E496EAC344B2A6FB54F1B7E
F0E2361F62C4E342CBC7C1BDECA2BFA1314A3B0D821D28A04C8C489758D05088
DE153A77495A76521213760C0DEB8253D5743C1E2D6A0C634658F1BCAC061FC4
E068E68C357CFE3565DAF0B1423B66E9F9E50BFCBCBDA54F226FD6C1277E4662
5B31AC27A654706568D6B0811A7688E318BE3706585C02B93CA3F857EAFD0DEB
AE42B40166C87E78AEFD36AD91FFBE2E964A89A64D90437676781E80D8DAC3CE
DEFE814391C236E1FCB39AC49934518896FD3E4E1092F425779605DCED19A321
6024689A5CBBB605DA9BC2CDF513D49CAC865B7FF8352434918AAF87B8E9E5F0
347290DABFEAB2E287C68A60023C7AF70BCE113A6A70CF9EB80E953BC6F23CF4
F34A9CED090623C95E95D42D42FA25EEF1213228DFC7DF6A8A3D8C7073439274
3C4944CB8C4835E64399EAAE01008A71919D3F4C42561A0983B037BCF5E4B54A
5BC0FE3D0D1D9F443C847491AC0018E29060E53E688BBFC568D622894244CE79
A2F168453F04B1CE5F18D3E67DEA90A16FF693AEDE8F377813E0EBA099CEFFDA
CDE95B21C1309EC5037ACB8FCF34CF4E59F7DA252F5652F2382B33F0F852896A
623C73D366F710AB37FCE99116F3650F9839144251E9A1159D6908EF7A3CB01B
81C3C9575622603C9FCF216E9C3D39EA97222BF5058B01DB390A6D1415DE1C26
C8E6EA08643A72DAA0B686BCD442F64C26CFA494E9DCF09199F13A726E93DCBB
3045733D43880F4D01BB0B3BEA52710B82F265007F942A15246EA5F6A79C01F2
819405232486F108053A082AF365FDE86FA40B544AB299AC4063103B89A932C9
46455256DE821247F764D841E2D0F761F782DC8D02D23C8646C6C70A5B950684
8855AD82DE70C728F23CDA3101616BFFFBB3A9B62A77306BA080969D517362D2
1FC06688AB934BE82B9F3F344B9FAA937DB0D34EB1177A5D54E7E6B2A200A9F0
6AD7B77AFD9D62FB2438AA4A207CF667E03C4F3C6F65EFC760236F78EF74D8EA
958FD85B1355716D2BDD6C8690A3BBF6C7712B1AE9D7DA80F54D627818F4242A
2420BFAFCB10B1EAF348872BE5B163E2BBD7D079CB4C6150029234D885A723DA
CE9C44DA7D5F522A4ED633EE962C9FF563441C51E317A1C20944C84C955F1A89
A1397AE2C822E7774D2E36B7DC679E91F344E2181C9631F1ADE712FC23069DF8
D162A2B400EDE05DF412F5D3AF876CD92A5B46B35AF8B365EDCEF8E1DD71585F
3E6CEA7E90AFC43D86B3EFAB6A31C1E414F47A96645738D10D3DC0603BC5148F
E7DDA66EE02DDC6D2D6A958BC0D43678C57ABED2D777EDBD7E157E6537B92522
16C57DD3D618BF400FCF558B750BDDA415ABA6CB2E16E78FB845DD8EF67D1D88
97041E48500925049188B9D91BF76B2C66F566BF46C25E80A17C58C39E13BFB4
5C117A3C3ECDDD3470C49542080B5DC76EDC902B83D15EE853A5DFAF99239703
FE05CEDD3C8A87B661E3138DE1C45A817B3F69A38DCD590B41E08B7F50C652C4
9F3BCC95ECDEAD38D145C37FDA2D9F700850FB2F7E6020C091F14556E0AD1CF4
921526BE19EC1C224D99A6800D1767D900195C4EE378BC0609D2A06279E0AEDF
5AB2B6C9712AE37E49B28455E3B97CB947A366561DD9BC83E2D6EDD67622BC5C
A310A7C41F565EB28A45D6F516078C7224C398D83E166A1B168E1523EB9DD31B
6A431C8DA24B354948C6AE448CD8472037745FF28E5A590736A7C8ADC6DB8746
E7BD18A3730B12687881ADB6F8CBA1649760110FD3A5243F1B991FF2CDE652B1
A79F52A5DE23E8DA90AC9E50A9FBF947BB7C46F6E2719AAD0E903DDFB35C8A0E
ECF018BB283F4175D5E9D264F10B21EC7CA544B42F703693DD70B6B0E63E5054
38E730D57EAACEA462BBE203F481C698C22BE7331FBC21E179910893C40AD404
78DAD36A47E9E30A0A0CD09752675920C3455380C7DFA31A589C293C2BF6CDDB
43CC8035128D50B3A987FAD9CDCB64DC006747FE5D968551DA588E2F994F235F
A96862D6E547C966E53777E6C613582AE9601C5B6C282CD2B7284B03C119AAC4
A9B7837A67F66CB526F4FF93B8A3E7E1C13B0C656B128C59EBF0157CBFFD0E59
097D9911CAE378DFCC9985AC336538EC63707EB523785C02F654F9A85DC4F661
38887BDB54583A8249B7B4E2012FE5806735A40B164864FD966BDC275557607A
AA6AD59AC21FC387EDE12F3FBE9FDF96A78AB04B239E4EE0BA0904B7CBB3F11A
A742E61B14931699CCAD9EFC36768C06BE7ABA376AF598144A2E7260CE722472
47F38C2910DF865A9CFC97CF24D038C08A8C6027CD5ACB582199EE62B0D5F8B7
C6CE90F3D1B619A523153E436C873F70CAC9DAC1B81AC336988E3D22F3F1D9A4
D1598596C6DBD241B69E0EFB3025040A619E34F538912B267CDD3214FFC2A465
DF328FE1C6925884ED22C6E809C1F3D47D17C3590C6F18407940B683E9A80FCD
D11F9759B720954D62C52F1D25CDFEE83F2205EA031E775C6FE803DB89939A87
D973D075FF092D41DF7315833B3E2F850C9AA1A967BA3FBAC3D3BF6BA810B780
AD3D7FE78A17ADC676E012A737EFA5B743C0FEDB224E360B02408D39E1C541B7
44E1392FDD6FD6D5E7FBE4DAA4076563FF5071A46D567CCCA7F495AADB4A04AB
05E384E7F666C7FBC4B4F912BFA39D7850C977CCFBA9570CDE40D7B4A11A6296
41B1CDD82542BE28E745196C5310BACB54678AEA83AA8F83213F9B0F7AAD043E
A59AE2FA9637DD6898F67884BD71EA0645F89E12CBDBEAADADFE8D86B613F9E6
BD8B447E504044014B09C17C6AB6484C4C6191E9765C4CB186F1DC936D0BDB18
94C715C2536CC930ADCA578E4DA4675AA9070189C0C51EAB2B85E2A6FB0FD74B
913A9B49210F21934FA48F23177649886D54EEB68A8AE20D4509A6BAC093FF4D
4CFB7DA67A6FE8816B2987C4A9845302F716DECFF4145C2E71A590E7F50875DD
F46E68BB8931EB86EF3F4348AF1CFB8F0BC13FA1B93390FA8DE1C1668D0162AE
7E6E5E817D701CC503DAC7DEC53D955429ECB116BF05B3B7160805D195C04DEC
51200E2769BA5812732F7868305AC3C69C8D9116ED4792659E7EBA466DBED58C
F495BE97E6FC940B9B2F00EF3607EF9D22EBABA36E23E36E65B9D87A982B8858
D24BB0C12715940D790B482EC29BF25310BF92FBF4379E93497CD0B8F74C1886
572830521A7BE2EF1D993F75619EAC1B3A7A43761400A1A347B174992DB8D542
BEC631C8069D0DF3B6F3A4F9DEFE3E55C525FD30BBC70CE036E5186A0F8B4DD7
8E44A5C3B2DE620EF954759255879BA06F79E731C29BEC03C27EA60ADF5AD23A
19CC09EC5746AB6EE7E6E38D26D996694B7D9148ADC98E45A1141427246059F2
BAD7756A6B10CB382D9C291358B7A7CAB3B6456765BA45597364DC6486290914
4C30A00A6E010B4220EBFA66EF79E0BFA030C2533D84AFF286AB0086008147E2
6E133E012707E3342CE7110F6C11E1FD27431377F103A3AD8DCADBE1569F64B5
134166CD821AF3AAE894084908677A02BB89FF1E68E8DAD213ED1923EB276A3A
7FF0D50B3A65ED61CA9934201AA42770D979E6BDA0B7ED1D99EC5D0037983091
2472A2A9BE747556E8721158A01AC76F77C1C38AC5B9D5B86661E2DBAFA96610
EAEAB0A9FF2780BFA07D77178F10FC477E27C780AC02449E2B3BE1E09F47EEE2
B94EBC03B2245B16D537AF4388A37DC22D9BC6CBEF8A31B91AC7D2B11A0B2A66
3C10201B27DD5BC0C14C1D6FB59BB607C6B3DAD75042698C94094E09CCD4CED4
D25B692198776293B1D15EFA77D1E38BEFB02F5DA1692CC0FFAB9FB6BD9771ED
24A3FE3B2B5EC74729A844A8C1BAA6F0814A94CA3CBC21146CB0A5B4ACE11ED2
0EDDD154340F46D0F3083D69DFACAF8BAD2CC335157B220E9956FB0E87EB52F4
A612E8F292E3861E7652F94F086CBDA501CFD3BA81FC162EBA29738D9789E0CB
13D1F7C524C89B8DEDB722533B0353A7E13321F7E40BC45B765B5434116542AB
B7F8C90170E014FE8F31A5FD35CB74EF0FA13C6DA373B2F8790D4FA04FE263E9
D7F4313861B4D82AC0887669663A10E2F8C3EA53645E2E7FB17FA52F6950C202
11C7569B8E95A285BE2D0678B08BF54D8DA66DC41B525D3E22B6B9102574E246
1D2FAE65B7321C0093A2A34991DEF3AB99E8207FFDABC084BCDFC2A202F15B5E
590EE75146639FCABFF4EC3BCC994CE1FD48E705F80B009AC8DE0027E91EFB8B
0C36B3B345AF36290A973BDA75735B29C81A9777C89945AA4F8F616FCC02177B
195085F8970E3EA5AE54CAC2025ED43F94816793462C517A05AC8A7E435C4E27
17224192442C595F3D552ED191A3F9FEFC7B2C60381983854EFB73584FDFB1D7
F489550BFC053E10A8C2A23FD22FE067D4F50EDC87C4BBA8FEDCB7E21E449432
EE40A713596918CBA39D1A7D630EA9AA8B6E77856A3C6A7B37B39E92BBA5C421
82D54897361AE04D572FB04D48E69939FDF48DF49CBE4C7D53523626FFDC2E30
6F95939384F0997DFB2891C651232B0C562167C50A07390FD01FC6CE69EEDE25
A0C58C9B3667562E59FC6D52EC845BE486ACE592F718017CD2E64132617CA186
D413D7FBDE7A1DE16C177B128893D0D93F8EC4965F27BF8327C9FE55B586D057
A5B67F972979BB8C6FDE14047075A8E61E672A6496DA97D96749677F02A80898
34CE9807B35B2C2C0CCE15D48E3B3F1FF7D6FA193187805C25B7A0138AF17E47
451457735FDA1D612D47EBCA478C42086C2765CA142BAC62D9B69BE79549885D
D890A03B674485CB413A0CD45C65F649ECC610D334B1E87640886D9555C3E26F
966E27AEB8BD7964F3C11A2EFD5F17BFFC6692D281330EBB47AFB14105E20E11
32918CD7C1106937211B384EBC70F615B86F0F94CB2242B9A1A169D9F8F28CBF
DF2F09C3403D4DFC0807C44A0E199232C2800D15C6EFD85FBB8B7C18E2A7B55A
71827007D54E603D88211A504526B51CADA6D39CFFDBA38C11C7238C738370C4
8BAC5CF688FC9BD80CDD4B8924E2A8F52B5EC2CA404A946B3AC223B991ECD281
C73438B514BCFE1C2F89AD1261F03E948448A3819492F058CD2C6EC69891A78A
4F47CF796378BD1A40EA57044322C235C03989E6182397B95B3D8EDC0A4D57E3
E0F43CA2EC94C8DC0732097430C4E93B65EACC7FA0422E5E47EEF9D57A2CF54D
D6CC42157F8C53CE20B2238E5C01BE3DDAD93A2F6BDCB132C9BC7D2FF015AB49
CE0DC42FD6D4F0B4ABBF4614BBB181B06F7786B768BAB2A974E898F62BFE90F1
32A37E2DCA4F43E13DB57C89B8A8BA2F3EFC3DF5F9C35BFD36BCBE31385F32B3
28EB556D24DACA262A87519FB500245799ED94938A2EEABF99ACB74E89505819
595634740C71D0E6305207F2957BEEA4F69956F75531F04161D7D66D6E0620E7
4D733BBCE34FC731891857E800AEC7ECB86909620DE07D770306C3D31162757B
91A0F8CA4F00F3D5BE6CD45CCCEDC4B8D8F370A49628C217C17F074E0E1B2739
006E78E1E3DBCC4DF47B1E2AA63F6ED520969527B960758E605A65705B86F8C8
FE339D404BD20D610CA924FE71469B28BCE9CE78747A011EFEE28A63CDEB2D7E
561AD15E4E519B8F99CE69629C8E30A172D59CEB63338D52AAA02A40BDBA5FF8
8D82E5090046CF004AF4D76C8434E66ADB72B6710A1830B45E05ED2A188680E4
1CEE552DF55A235EA7E738E9BFC053800214079A4071287493CF60835B57D688
D87419036B87554A5389129C3D22C556E2F6E624ACC2B41BED1E2954E1C3E24F
C7238B6D3A663EA00F97182BDC036AD46BBC8E554B54987E676B753286266C53
94B97B17CD9E8BA18CC941ED5CAFF66989720D3BEDB1E0C4D776E73598264523
AABF98DC38342C005EB85B3EF2E1DDAA2510837ABA7A29AB1DE65B53B50BC2A7
E86A768D46BAD6008342D19D7D077A9150E7E634DBF432DBE7E04C254C416F46
E5769EBD158CBF977788F2446D456306B92677D23C52180B14680C891E060ED5
7E1F9AC457EBDDCEC1B3C157A4B62F5ECBC9D32FD482C74A5387629E03895C5B
94656D7F071F2636D7287B209D2A7FB3F8FE3FF0191A1BBAE9EB8F847B7220B0
71C881940D1006E3B598E3BC4FDF2F70CA2F565D9D9C1493F2A9A9900487DE2D
38AB7BB5D80E2409A4459BC9CF7B2BA769BCBBE17E81F552B6003BF9941BF214
B5B5AC3E4D781DE2C5A1D799C37EB490F9FE6DF4642CD37869BC08F102BA0EA2
EBFBC82BDC7DFD6290C3EA5DDAC81A713A91EC4033F88EBEA6F5C4A5EC4A5523
EC18B9724732043C890248711496B906E3EC95AECB9F1F88EF3E31E699E28FC7
16D895497A0024BE3AEAE0029E1E631D743CB6C7BC7C45A7A72FA859751F8DEC
704F5836178D43B55256E9F8DD2216FB2E13327F05D13ACB714F9B797B2669D5
A53222572B4DF407490D64247BCC7730A01122D4429077ED4FB481D67E3B28B4
21337CC7A00842B36CB8035337C9D68A80D35E4622E63959957369A6CC670DB9
3661386B8767F49DB92F6923B4DE85C3FF16B15FF4722EB6A418C79FB352CF1E
3480229AE083583143403EC4C62D25B1ED563C248ECE78A971F4AC9E7D96709B
C0E7227A2B57BC1810D104B00345CFAF7A91CB1FF11949EFE57F05C839F3A8C7
E266CAB06ED4001CD00C7AA2197904BF522C4C1A71780EFC8D88AE1D68F70573
671E0964B66301EBEF2ACB3D7E96F3E0569166E2F919DD8B77973CB68D68E962
28E2CB7B412496FA78D778FEC5D66460D04955DFEA71460082A15C840919263E
77C42CDE50214D05CC6008C87793DE1F7B5B18F7C0C1DCC4838A5AAE3A0C5236
A5D4DC77F9F3892AE5D334AF81E40828874BBFBF37F3C27E48B4CDD5F28909A1
1879BE9047DA8EF83926C442562A6E5212A2A2F5896BB9714FA1B0981AFE60C3
2ABCAB1F57E65A0FB1211563D8E73141ED2708AB11129A5333851076EA27FA38
8AD980681DAF0BC36357E8DE5C9591AE1D9FFD7F43DBD8D0E219D3DA229B295E
AB9A68661BD3BF6E72321FB7E7AEAA45B207936A9DBAD801660F25083B027879
EBE7F8B746A27B1DF5770C080648440D227C3412AEDF1FE65E4C89775841CB79
9CFCAE8B3DC6D03059D5292A695D13553BE7D40A9FC1F5DAE96E1A7A9C6023DE
05228EC140AFB5C560E0B0C8501016BB9F449C054E91CCAE698A3A5892200A69
4AF0BD4D1B9997140FF1B2CDD63F198C3DA0088660CB8C96B63600DB85C54D25
E16B295ED62C33281AA2AB255B5A6E551814EF576A7BD8350C2860935DFAD0D5
A5E71EFB7075790A3A94A03D6813BF9181B6DEE35EC3677F2E239D93F64F239F
E323B5618279ED0EFAC5F78C1DF0CCFB2B859C54F869FA039166B80818F6C1C5
7159547A3094786A8B0306926BEC3DB7FE51F547AE205A4F3AECB50922247D81
A6983778923661CB67B666BF399186D744D5F1685F83CCBC1CF02DB1E797A451
1F23557A9519C26A0E6170CFB34552AC4D8D754D47DF6AF6802872DA6255336D
CEED0D10BA36A1B9655A2CBE656A64E9F570C8EDF0185B12C1C0E4965C3C32D7
ED1B1E9CBB629F32CBB973D06452FA4205EFB6B4504B6564A6E512DF3C2BEA03
88BAC5E05D572F8DDB133B33C3F21E0387E13820815555A1051370EFCD4B0586
BD44046D11F10E2C268F228F0EDBC59DE4F648B6F6F9568EB7FEEF20E7747884
C5430CF379E657FF3FABB6D3F28ED73B010EF0A86A8A1388C4604675EA7384F3
398E49404AFCE19A90DE7FAE20F3ADFDE37CC5A8BFA27004F390A9E7BC95A4E2
6BD50F1FB50C503E513098B6768AC50EA98EA4D3A61F08CCA0D49CD72A978845
3EFAE1B7E2D37B85EE6A6068E9A1457ED0F65A4E81BF0B9A3C408EA28E8308F5
6C19D5F37E01243B0C3964184347F93F1051B1D86F85C68C3795BE36AF36B47F
985274869A6668BAFC9BEB325ECE7BA227DE03A9FA9242F6C964E4DE9DDB1410
74433C98144F76B7C19EA4E5E056BF2FD79535A8F1A8ABF2C8E1C8831E8DCE35
DEED47F98E29DA12B7256512BC600735376EAEA9B9A2681D10EFCF8E553F8976
252211B1B12FF5389EAE56427CEE991160A5E7A4B1F599C06F191AD74C9BEBB1
440692D6B4EC91B8369A9ADD4E92B61AC064BF43F064D1A2FE49A02A2E0B767B
2F5D5FAEC1AE4CB0FD382E26313354698E413734112A03C367CDB1D40B3FA775
1F9D89A26CCECCB6DC171F32910B72CF1D16EE70518C77344704B37D15B0C0B0
3A11B78A412807F7C9E6494D049A8F079D99EC28EBE10442617857E01F9BC4F1
A9A70A6A67E3CE418DBD33967C5B2D4390218BD845C685962FB01F3F8A01DE1D
F32149B3AB7F0E4841BE274E25E72387826A14D181BDFC1DD84ADE64887E6AA4
AC90D4E65D20B3EF56B97384029A260E922A19C387672A4D10EE085FA0CD33E9
CF67ABDBC84DC8DE96E298A732990F5B7FC8BEED92287F71A316326D8EC0F442
00277668750085BB318F20F1709F6CBF8C3ECC3FCC369824089657FC70F83E14
3A1574FC22CEDBDF325F5F3D4E773B8D621B218A1C41C0DC2BD6D790B59A0034
8EA1FA8F9014EA33073ED6FA3621899D8C72270A9A4320E8DC181020981DDADB
ED9C3432B5A36FBD12DF2C8F50C00876D0BC4F0047164293AA3F51887FDA4D03
F83E2F5812708572F98F61080B5CD71B2083ED1CBC7D72FEF8800118DF333396
AC003C08BA957C5980098B6D505646732F47801670C3D6BAB0DA0579DCEE29F9
2E3AB8CE7FECFE018D87D0BB4A3C04A55E8131BABA9EE9B91F069FBFC9067760
64B97C1EB6BF84C956CC4A59D93E37F7740B57E0EC8743DFFCC5B407D7B450DC
465D3A003CEB00A07240B96F47F1E55E05D8058EB6232DF423F250EB9E8AEBAB
F74229D3C559FA57DA3E0E00B58EDCA13A7A265CF065F4EAE1CDAA8FDBCB4AD4
DDE7333B982648D5C9FB29924A98DE796F440720BE08EE3F855A597B65071E79
46D81F938537C183D69CE8C6203A71CBB246194740FD3AFD2CA1C27A59918771
2B5A461EF1641CD198F40F9C4F0DC59FD5147623A09DEE6262CA0423E5B04794
FBC77AACC84E85075B2C3409B8138618E9DCE7FABBB1610ED62736D6CC78FA7B
8C42F84452AD21C8971E63D58F3A7386A25CF46386D6975B70E30002CEB0144F
2FC9F20B549ECC214E61E8D1E091D30242BE555478E008FC47ABE02F46335C06
FB7D8B7BA2EBD97B33612B59A06C64F97E09FB229594EE56FC39DB9D4DE96F37
F5DBEE53CBA6C0A0CABBB72135572EFC8D9D95FBB46A14EEF99DF6679D980EAA
C6131940026E3C2297E197FB884A6B6454DD3107E2BFDFA2EBC7A3E2A78C8927
F24C06559C6CD867606E45BC24E1077688C365888921E4560F9543B08FF41C23
63B25504CD6DBD40DE106093A3E5B5338F23CC9AD1A901D6705C0B8ED3F03136
96F1B71E67D0FB711EC7925B7D350B4BE346E565F3EC43199BC6DD7E62AD5444
51DED49EC8F5DAACAB636082E7EFA02DC921769181F685FFAC786ABEAB809427
D3C924672E4184D747F34E6F7F433285B53255A22EA2E4621836C0823544AB80
417B376266C585B6F3B17B1E23C26B4279C3793A93FDEC7E76941324E7E83F65
42C7D49E060F1B93C4F032F37B225D1A63E440A719CD8CC6D148F1442F1381D4
0A17441508B258E1F1DA5B864CC3AB4F9A9DCE952DDA7DA6287FC9A8B8FF0326
5BE6153BE03C3AB6510200600B3B047E4F7F493B94C8F4D2EECAB91DB2CE74B0
ABE584CE80CA037A7E2F7FF64AA7BC0B3A97FC3CE0BD28143A6401E15BC7251D
465A083EBD52BF5BC06232477D1F39A73F7CCD64404AC251E82C6F8DAF7D6743
0395489A5ED95EB8E3E305DB3F493C27EFAED0BFA317D716B2828606C553F92C
65BC84B42D8361F4F3F4C6CEF5820C6FC3A77F5F55D30C021BD7151232F1B55A
EA13A7D645ED0050BF55E6ACA05B0254162EED9746D2C26F9DE29DFCAC798130
C0CE5C49E1C5FB11EEEDDA487B58935BE5A9105C3164B47223A893DC58A24D65
F57502AF07ED3EBA0348F6096E77948FA1E14A0D55A9D391D55B12481CDDD1FE
7A73DC4D181C5916886C28EF3F39D22807D9C7A87F8930DA173B4CA5A62F687C
9C0E235CA4C89858D341B449BAABADC3068E3AA1329D0E31CE93B1ADF5E32D32
0907142873B98DF7420BBEC2E9DB3519225DA0342A835D23CD9DBB08CE4B28C0
ED5E7DB8D0273C53F08C11B87F7F34DF5BD6232B0B7475647C42874EB6BACF11
4C972B9490CCAF4CA8A7F431F5D35A3E3B17FD9E461046CD60CD6DBEF5DBAD7D
92DE8DCD74E9312BC0D9F0349524A395D98BD1FFDCF0C946A4D9F202A9757CAC
8C278559014F0E9A6C23A44902D17FBF6F377E25D2EBC27231BB3D7A7A12FA8F
C758289090C0B72FD946061838669360379DAEF4B922E78D966688B2BA495805
F3788B0D4B312CF218627A66EC82A85A4F4FB33D9695B73342C6E3CCC033E4EB
81CCC0DB9CD0730AD87580B147145F7C900BB584C14826B14DA363ACC106073F
041AA28FB1C0BD55AC360A95F6F498400D6D7DC137A904C96EB7B3CA2E65F64E
8405B0561EBACC669C0E434C8D1FBB1EB0E9F429E9DBAB656DFDF56783C46659
FA7731F90860A28D3D50BA4D82024BBD82EE0FEE77A69FE220C5C7838A41D37E
DCD4D1FAD4BBAA24089A1878AF0758470A0972F9F9E6AE360D44C0CA3740C2E1
477129592C323900BB1114A56633BFC88C5A3CD387B3BB5D39E2C94784835674
39BCF730ABAB60C21C56B747DD67943A6939999FC01E54A639DBE36AF4E738AF
1AD7C1FF48617243BD5B03C023DD3E7DF3DF0F7269245FA74130C2570BFB0BD0
45C53505EA0590959DB59E2523C39EDAF5CD7F0D7AB31E0793621158C22F176B
3083344783EE7AF70144DAA6CB217651845862E1068A4E0A02909356BD1FF3C8
397D5DB09D2026F7E0369C8D4FF999BB4808539FDBE7CD8062CAE43E1E4181EF
C631641D659A96CE58AA8A0D16C8A9FA4376BAC441F1A18003B260BD887421ED
1EDD12FC2A16CF64A53CCB17570C0622D1A222CD2032F4C26DA12E86055C5ADA
FDE34355C192D4C32C404B33FE383E29ACFF6841A002405226DFB3D5003D79CD
A6134878492BDE3D6FC047CF7646AC500DCC8787A58A1F0544235F9F812B0E53
899CB8F87ED5B968788579AEA65D13CB0500106B9E55223D5D8E055AB6D66C57
91CB441B804D7EC3A4429CE48DC45C5C09ACA1CE60F37EF12D950DB053BB719C
E9B2D2F75106CCA90E75B2437ECBA6A61A8631F03986FC4237D845723C5BEE95
25E89680FF2E6998F2C4B4F5FCFCBA5B07B79B87015A90D2BDF525E36C526E75
49CA892D7D2DA9DB1F2B4C1EC7E91254EE70F5BDB495EFF99DE85EE281228C73
36E07F1177BABC735D9E7226D2B353CC752EFEC2E91DF8E2DC60C0FFA31BE169
7149D7BACECF4481DC61CEAB7476A2E621B7748549A2EEAA996F4CECA9D43A2B
AFA4423177AD061EE8AD39200BFD0358D8D606291B417D0B25542A130634CFBD
8A443277B889EF7EBCF73DC3496F6DE0DD42AA2B88257C320A48A3655FAF340B
4244BADD57DA5907EDEDE8E4AF40F73F7C7BAED2D2F3FFA02D3F4C69964946A1
9E2B7D777E8A10DB921C86FBEEB0F238F7A3840B811F843302667C7848497110
581FCFB0A30EEF35931F90B59E7B824CCB323CF310B3F0C6D20B761B8ED1E718
488DE5D0F90DF91C526DC6BBEDB74A1AC54E8CFB3F7F10361927A736A894F1EB
AEAC18CB4B7D1983C85DEA0EFAB2BEEFA5F5F22A250609FD5AB0DE238B001B40
5B496D0A8BBA11A66890F59FF4143ED2E3D6FA7289B9095AF6229F33466F5715
FAC80E638F86BC038E7CE6A1A6FE721A1EFB58DF12685611431EDA8C883DC6C1
1B83563C6F6C1EC01850336C56A128E25DE7D9853223CADF1D781A7E4D07DB3D
4F16AE2507523D6AEFB764BFC86DFE3CE4A2AD2F1014CD74242AB461F3D4DBE6
DA6E0C14D9C4F892CF5FA7D4E640A7C092B213B9B63B93641C5D52F4868885D7
2A37C6ECB019F82076D7FEB0FCE68387A161F72C8755B52F9B62B85405F95715
94723A0B40372910DE67A539EBC05FB3EFF28A9241A1E7D1D5E7FD09F96D8378
AE9A8C034C403742EF815C6CA4DE4EFE3DE9209BE7062DCA91768C2C9CB6EE27
41F28F26C0F11ACA94A1A48D4463B995CF63799890F65F713A85EFFB6D10D726
B24A8FC5A2F199E18FCF91246FC75DE3D8ACA2408EFC0B5CE164677EB1969E80
FC408A5814C436BC45E771E2C3A0967AAB17B53D5897200E0D2E0CD90240A981
A0B47DF4D2CA569A5EFE85643A0FB4AEF9DA8FF2911BF09AF47D088B2535D811
47B587BD0BB24A35D8A54FFA0388348964432F2611484398B81A9F304CCAD7AA
C7DF2A8EDD76BA665C3BF00BE48C470B0D86E721AFCA140FE6BF318CBCB12AA1
761639E638CE9D89C4CF0AAE1B38A2837E1B40F261E9DB07026560DB5FC2C270
C0F297A27F4C1A2698B543A82E05AEC0E8F423974E8CE0083904A6D968D3C2D6
A433DAB8FFBAAE1AB34DAA1A30971CD9FDF12D81904DDB9B59B625FB012AF73E
F482730B4DB7744769A4B91682DDECE1C46FC8BCA434A5264E6403BBE783360B
95522681B7C879314D208363013D8E09405D069A5E6BCE653FB9AA6BB3619B40
515553DB3F71F0EA2621939E55E20F3D15DE4FAAD1CFF3BFEAA81F5D11DD76BA
DDD8122A4AA2D6B80C895873C19FCFAB9ABFE3B44D21730DBAD665A586B9A3F7
2A50F8C443BB34DE842F3EBDE357648BB47B999228F185FCCF89BC0778B174A9
FB4F5872BE9544ED37F9828FC150E294DA02F9F26195C7191EAC5BB67EFCCA1B
70B5759D7DEA6A5634D8C408A4217BBD280FAA422BA9CDB0DBC05574F7670085
AE08BFBD0425E1C1A557B3F3F210793730C8E5197204416FD5342DB3EFE5D982
6C2E88257C320A48A3655FAF340B4244BADD57DA5907E990412813AC5E94569B
AF36B58970E90CC6E9E86B1EAB3B9616B0A7A154D9577EB6EDFB9F157911E60B
FC3B6CA762D3FC884E32841E6BE12817A12E65BA65C7CE64CA7B43EE4CF76292
7CFCCCD8769905F0F6CFF798BDB17A5FF924CB26E9AD37F597241DFAEA7979DF
9E1754D873727196D2E9C5611A174BD260D7C8533BDD05C72F25E156C59AD7F6
C5B0B25C8559C6DBF6EDB94B0ADDB627400BB556C2DD51FE2B4D8416FA124B93
50A1BCC97148E15D2353EEE2BE859F160BA7884AE4336F3FEBD08B7B93B550CC
6D1ED120AABF2386BB3061C215420F75A9D089C7BCDEC50559B82CA7908EEA7C
DCA298C41A6F67987E061CA16A25C6ABDD870D371B4712D56B35AF4D89FAE073
6C29A0F53F0390D36BF3EC54F0B575545A42A22A2E1062010A97DA574BEAD58E
6A1FAECF7B512A180CE0929689D38A893E34074345AC93636B7174A2FF3F57AC
E30E5EE6B56F21D9E3DAEFE125B22D666D677CE0ABC6418B8B0AD825BC3BD159
D01BFF4511CDF9078706A154A22561230D9E69AEF3F5DAEDEC03F9BAEBB061CC
CCF8383C30B05548BF22762E26867D8C47D291939087585FAD4B5D6471238D59
4022075E97F44128B1DF2013C3EA3D583D1AA7FDA3E6245C285B171DAA6BE705
FF575048CC768BB8F13C181CB6D6F872C83B5C895A1326893F66EFA17D7535B3
4B818F7B6EE2FCA7825AF4865C8FBAF1AB0D4645AE2080FAA532F194C5244580
44D3C80CB40D65BF919B7FADD2D0146D59388C05DEFBAC33038D7A8B32CA1902
B751448BC22FCA8684059A8E65520886F9648FF10781A8B327770F7516C7B7E6
7BE73B1B63E0230151ADF735C6B7B4E1E6D2F039D4F536CABFA083BA6C80DFC3
55A362A6DC60A5AE0C60BCE75CC544A6471C8094AA8C8F3509B2C7D49CFD03FF
109B6B54A2EB3A3D18E08CC1F7D36D1F06AAAFA924049F99B840F337BE8B11C5
EEFEB6538BBF2026C24C9EEC7C566F007B48F2292FCD28A4516DD5636B8D1FCB
4849B3E0E8D46A3090B42801AE7A97DBC8BA155AC55A532BAAEBC8A228B58284
599EEBB4250B3B4DED98CE89F2A41C161D18B14AA30F7A6F16AE2D9A96C60CAA
C3D3A742DBD550F4D3A85FEBCB2EF791AE3A9F40D3C97D7DCB8552869C67B528
365AE5233ACEB12E35F78FCF3F8B9ECC7D2E6345BBA065F8BFCFF80F27F677E7
B7DB5171905CF66C5A3206CA5628B6CEC0FE1594EBE3C4E5F281A1A78C54DBB1
3FACECA26700BCF01BCAB2A70E3ABBA76956A6DB02876A5A86CC584DC2C64EE8
86338C1715415715431F820456363C4AEB59B68131014FDFE360E01F6001E504
A445B2BC583D15080EDA0698808C3AC28D0BAE6CDFDE08E3AC203A629F16DFDC
B7049751E2B0555B80F7FA0B9C056ACC07F2F3CDE7FFC1C95BFD6FE1C48180D5
B473CA34600930B5DC5E92B49B65E441FA6734E0EF4B5F045ABC4C85CC48570C
4B7783765615BEE99940BD3B54E58A7D26A3F3C92E247DBCC8DD16D7671F88E5
76953BC66E73F2EE42F8442D43FD118FA5C660787C637A4FE5DE4F0EF72F0211
22E962CD756D4832E93BF727418FA7B19F27BD88F6860E86E3852C73408DCCA8
8FD576101A83AE0D9D00EF12C3BA828CFDD91FD5D1CCECE9B9B2219E40932244
BCE5898A687F12056A9A5C3D3D0208BD3F38AB1CB927902693C5D29370D9CEFC
5D63E299544048ED022F2BA1ED57CB36EC8753C5002E3B5866FDBBB912958CB0
50524800AA0409029898CA491309016ACDC627D4E86A238EEC96BD6C7A60F2A5
1A3CF11BCC81D29BC425FD7D7EE59591CDC12D32D06BD35580780820E2F5AB15
678E0107E1DC2063834DC63D8AD297B4845A16D8287D1A1D60BEFFEC26DC21B0
1A0043201222A56EB289125F2721D30077F4A086A154A6CF6D853A01A5DFBDD5
E78B2833CE36E0977887F679E422F8F5E41008F4036A221820B58EF76DF14390
BB07B8D6E267243EFDDB06817F8E976A6FC535EEF6FC3A84083A1475A71F6A7E
165F22E63671A9AC28059E0CD2B5BFBA49BBA59E918EA6D97782CB1367036941
CD12C487E11A4782FCA84FC139875E18844D76E6128BE97D7A1E1E8C0D5CEBF7
A602C1772DC4576837EE74D5B31D461C2647A2982D971F7681DBB2D11D4F0A06
169EDDB3C0D81BF263CCF048B467011123C4CDFDCD5A70083C277B06D46031EA
F6771DD3245FA5EECABF7EE2C646E9169D885AF04AC7F51881CEC589A74E8AAB
3B62F1614907F14A9CAA21B5F0DC8B560C20D658BD0558CC2F410BD3A730C706
DD48B1AD65CF95773585EA5E4D316A552DFD358225DFE0DC445FD6A0940DECE1
7C182F789D12FCC65C406B8A7DA98C5E1269CA2CE431C0ACA7A0293E009D7B00
64763CF057945CB18920FDFAA26BC481000267B864708E03BFB929D99330183F
2E25F2BCDF2B43C4D8A0CC4DF8967578659E535036CBDD53A0958437B99551B1
F9086BD8F28E58E376E2CF18DA28811F260EA87C016D1DE516512A3F848CFF57
879CCB8260DAA938D88843E23A6CEA6BB10B535ABEFB9230B1889D3CED1B9239
4D91C7EC0AA5681D792CE9F5DF26AF650B96C466F392D59F14F51693A5E7245A
CD985FD536BE4944CC46FBC8AAA0F349705DFCD05D56502430C4C87E4A964375
F0C3C9C811229A62173F6F261625E8141875E4B36150097A402ABD1C141AC1FB
4F8BD6C351707AEDB4919C11841D10D54B3BF2118C89C26494C9E0FB186DD7E3
0761B007ABAA04521E272C82AE9D0DEFD62087BF4B425DBB8F6255838B75CF63
08ED6BD1D00CC33781B4722B6EA85FFE1E4F88A40DE0BBEF17CE59E7169F8DDF
A997DF4D697310ECA06B51C2717D14A1342ACA76D2B97E6A0FB72811D1368167
D482EFBD530A20F2DC8433F4C1AB8EED542B5C39A4A88F289A7FD08B48967DBE
324A511DEF403382F65BDD527387DDF3D8133A58BA190A586C5E3AAD06628FD3
594C5CC7FD62CBFC2A503859F93F5C4A5E2ED05C1F67B3B0C01D559DF7D2A359
60A8A737106278C20F24069F19FE86BFD89078798A3EE043657C934ED4368E75
92B92FAAE9969F49CDB5EE6873E48A51859EF37DBAB2DCC7F29A68A9DF3469E4
716D4E5670161948170B02961618C8606D07F30544BA2D5FCAFD085559B2EE9C
123116687E138490616271996668CC5EBE072D52C0209B7EB989C4DD2FB12877
E21915FAA61EF991A561129F21EED63873B27932FD8C036E0C05F4FB44123AEF
01C8EF6617CE01232F0C7AEC6CC388DEC3FE10443BC25FD76F95B82EAC7F959E
A5E503BDFD7E31470293FE06D2117F00A2DD6F8F08CB2E53C25377DDEE4473DC
CAF0506E8E2C756E7C4332BBC6CF7420F549DF4F3507A8ACBE8254D245D19E03
03348BE32467A55BC452AFAB1B2DD04266C917BBBAEB9C89B9A5FDF792E2BF3A
0307BC6CA5E7CE47E26EEF6FF9C67139240422DBDF06232FFF5585EC3E923C45
A82BD558AACBE2F9469D0E937EF2ED9202BFE097D960937AD2DF3F654F0C91FE
AF534CA528E5757FF9B0E6D9A199E53D3DC418E2EE9539ECE269815B8349927D
FB6153B01C6002F9D60A1980964F555C7CF27A32D8575FF60CD683F42083317D
09F0D6B52FA6A221180635D6C253F4D15F2192B93CD2470E5964458DDC37C84A
E22374AD19CFB69F7F68E3FCC213B15B661666684C07055F7F116BEB12F90896
DE130BDB35418BEDAC79602E01C036637F19FFB7511DE28741F1CD3B5488EFF2
200D87FCB9C760C1163ADDDD40444B34F46433CAC90E09707EC552A5DE0853A1
80A21D095C2F70B9A6C48A49D1435E23F7395871ADBD312E5F50ADB5FD31D5C9
143F4F0830521C4545BBE50744E8041D84FC3886D471A1D8C93305360921C515
83100DFA2E75D5F7E5D74DA9EA2FDDF7F2FB285CF0B013F84FD22F2FC2E03A04
C6B82E06C6B4FC4C1B88DEA62DD0A9C9EDBBCB0339036F3C3B3A8F617EA7AE41
8D9E9E25B505606668C8E54CE028B891D798C32D5A1CF6AD0FA7A1EA47B31550
E9C3190A3AF8F2A3D6C7EF7A7BDCDD4D949AF1E8A445AE7061FA24EF568E3B93
EB4034FA39274D2E69412A06AAED658FDDE743E2C2907721135DD560A7FA38DC
78137B19D83F738F4D30E34BB12E01DCA861F55DC2BB66B1DA4C30CD8FA2A24D
3F810C68ABDAE536D9976A660E7E8BCAB4F493F966841DA194009CDB5AE263F7
EDAF5D6C7BB6E40EC109FE76703D904509A266A1F4562278AE204ADBF05485F8
7CA58D2FD3034EF4236B1A9908BD65D3435E7DB2A545DFECE1335E65CC53A558
915DD250546F22F94AD8C1E6C0B6E1E37C19208252CD68B65C8B2AB737379781
D8B7A384A09170758DF678269A25B380D1BA6B5B7DB0BFD6696F0F600241AFA5
EEFD903F00FB05F667E2F1B491BDA369475321C722B3F973014D4D4DECF85611
C5C90067A1F56FFE80FAEE4A34AE93BB36B2F9C179925E103E3926FADC3AA0A9
D593462CF91CFB8772AC7B829462713467829FF87D0FAA7F17F216CA89850CC8
25D4BBB12A5576DC4337B47069FFBB1463B310D73908287F631D9D38AAD2C520
09677C47F0EA33629A02935E1C9CE615EC8573F60D7FFA1EBB7C1E461A1EAB83
2DE15B34F853050AC7B5A0CA071147A7B17DBB8818A3A6FC478059BCEE5A74DE
9D25F0BA34EA859B3031F3DCF4BCE3ED50E35FD4351CC16E847C55AFED9C0DF2
08AFCFD781EF82B04B5EAE94C8693F8135A78CFA16068A76C62A8A07AFD14B70
E543FD8BF6FFFE458D2F9434F71392F681AF424C3F9A2FFC7B2B3A98CBDF4AD4
AAE004E7F8D35A9E16F283B410C500C7EDA4522E287E53F1000DF2B67FCBE1F1
41869E3AE9CC7B606EB3B1E52C19C3166B04108AE4508F35565E80A814CB6B1A
D92B9A91A4F5E4BC9CAA44ECE837BF9E88229AAE1377770E21F05C185D579BBC
CE2008EE646B8404A470F2D6EC13CD82C051A6D99E861C60782D718DB27CB7AA
81E9FD2FA91F188462D610106864A90DA656A2F0E744ACCF23EA1661787EB89F
F99A1931053D2D69668F990C7729212F6104799732352568626424BCBDAF1839
DA75557DCEFBFB1904B0BD3E4C13D08EEACE6D0020A153DD95231F74C0A4A364
F0911DBDEC26546CB46F18C3C93FA61B05B3F73250ACB8E05199E4EAFC832A71
C7B3E99C06AD8563BB5A889C9CB56D0162E8260668CB346A4F4DDC9F5C4FCA8F
31364F5A482B9404AC35CA6C6957C8B397BE0E9D15F546D94BD675127D6EC1A7
7DCD0CE33DEA2A1334F82AEE9AAE9A9429701E2B4F9309D5DAA7358F78B572E0
0B40FB6FB6C21D22845DB2547CD66DBD4F9384DEDF520B0C01CF52ECA7B444DC
BC3E608697AC7F0801585048894B4CF1A7E1DB4524610536483A7AC965EA7649
5006C0F47F201563793132C5E9287C4E6E1919F2C2C4ACCFEBE81445A5D58F42
336F364AA9F464B80F26D08712E165793487E81CA02DBB81D3DE3CD424E81D0E
0487D3463002FA07FE94F3A73497D09A4BDDA6AFDE066D78D5D2A51DA099FC0A
A19AF5EAE5AE6C541F89DAE02563F58C45F561C917B2116E8FD06D3077F946CA
8E71EA8756FAA7AC4AF2910BAF6761E72BC4ECBF903D86859125C6F37C76CAC7
C222D55D8109095FE125616CC076DC7279516036F8A71ACA20691FB1EE191B1F
2FA282229CA8B58F25CC404CA7E9E0DB668F98D79E0975A77D4F73AB77103B5F
4D862C3B601D716FFC9B154B5FC8F9B2882732691F68EDBD955C904878F8AF03
478642A4D4A9F9F87A32D8575FF60CD6F6995D8F2D08E84871C57EDAC94E4096
0737794A16B172A3C742AC6847F2B3291D8F616520F8706AAF7E68C413C3C110
CFE1C6C2E8C8175774DB7BC124D4F9026DDDC6EFD97CF70A50F2B526F517E585
E0A55DF310482432652B4755C550887C1A67A03BD63DF2B4E21A79684FD0A834
E621FAE692B0FE852D9D71A4B7216ADF2BA4C157E9DD7019A327554298B564F1
DF45A95C665CC83236F2F7FA96A2E9554BECEB06B60ACC9BECF9133D87F40555
4B06834580D32AEB7038EA21A3AB00BAB6D6C7EC272C1320BB692A490B477C30
D6EC9D8FDBE62528D5083CB8301155A05B7A29276D6716D724CF1730DE2446B0
6E714E8B1118707E7DD6BB2AF3239DB297041D74C72521B16839045968B06F89
82429639B92F3E77B55CE29113D63350944DFE20D8FB44BDFDF321D3A93EDBF3
BD9FE33E2AEA2157467C598CAF791B2915AAB23E6F0AD15CD842B26DDDC2673F
3118900F8BDBE0449BEA20CA21201785FF88CF8CD5FFF582B4A206D53BBF229E
DAFDE8C3F6F917236841198D0761DE7F3DA2B64A6517979B864C1FE3ED09DB76
8303AD8023B11FDD5D37C116B3826B4CB37443A7F3BB0FF3269F2FA5B0BDE1A2
038CCC141F9820EC76145828496FE49B73D619063700D386AB6948400AE638B3
6F8C007A0847C2DFF45F1870B5DA1A9F64FDF88C959EBB17BE3D438DB88129E1
0475E834F6A07BFF951AD9BAAE3FBB2CC2A04EFB8BAF597C4DC11EB3E001492F
24B6C10584CCC68250E0F8A3B6F886014441381DC194B284AAFBDD06DFF2240F
3AA5E4B79786A8F2D18473112B73FA0665DDC72FE8375C066D1F6F3D41CC9DD8
1C0B2DE314F0E1BC82BC80EC260124174A8FAF53FE48D3DB20B26234A7C5B5E8
4E5AEF959C6EAF31043D6D984D21E083D74BC66981A8BFB0E198EDC72FD24091
43AB7DC3BC09F6FEFFF80379934A4E81CC25980633874510A02AC0469673B110
5067F9861CFBC50C7EAE181E3B79A103008E748104DE7EA65D4B8E1D2BF61837
1C687912B1B08D6E2195111184FFDB2CAF5B7B88C0EFB65D987EEE1908234708
5C9A86A4EAFEFF7E46134410E802088379AE5AD5FDF17DE77EBC81C478FF6B49
A71FDE1E370902366DA4C2A3DE820E7959A932ABD5361DE4B152F5F8EE4284FC
6DA4E5B68C983D4A0AB7AC78CC18641ED2B17D9ED60FCF913D665555B293F071
27C8E401D7F746E573656B339B839947E1E27B958457E11D7E0CB424D800E4DE
AD90F8BA0A4EBFF51650D2C8A5F724B6598BEFA103ADA03541C004D58896B7B6
F756D99E5C5632CCCA013E62CEA28B6E80C9082F8709C713FDAACC08C1FFE037
94A1258A0CBF18B3B6E2DD6E0BDF7AB1C06CB01FCB01A68E5A0B20FFBA4C4039
0CCAA4A8C4116FEF2EE7211327F13F8133121DACC396CA83937B0A28EF899550
0B0460641B2A08F39BDEFD1CADCAE9F86D36266A023B6A1EE6CFCAF0904F6C07
BBC5E25EBB774726B7D9B52D7FB65A5FCF78DCBCAF0CCF5D22E615BF188675D5
7AC5BE7EAB3A34C416516513D676167F1E628CBF09F87DBE941E95EB13E5D221
96C392C02CDBB9D59026874009268589D0D08430137713BC2CB0E6B614CF411F
04F9DBD17A6CF9CC67B829F82F3A7C8499969A2A0A1C970ABF128BD5D6D416B8
79FC7845F1DA2E226A6B069131C7F3C699061B1B59F4D2A6E9948979BE783EFA
1AD1B4F4DAF38DF100CE5CB5C78A4B7C564DBFFF9566BEA87D87D8E2BF852A35
57C8A96BB6BE27129A043C25F676ED8483C3E28C39E75E273E5A9F6EE07C5DE9
11DE8B9A3A7321FADA2992D7FB49F2FD7904AC8177575E52E2524F840D8CD12A
6B33C93E6CF5F31347BFA50B1B57E587B5C0DF1004FE8C0901C09C09C3582C40
13454DA2E01EF704F31CB3F709103B983234AA02F7CB78E98EA3146092516278
6F6CF8B1E045B49B53484D7B20A5FAF845CB5A7926014B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E752429B985F23EBA0C9875AD055D8B1F640D10DB8F40BBF062F476691
EDAA1D05C5591EEDC1B75251BFF8576F1C9CC5C0E521392A2F0D5F869F8AA462
B3883A673A976328E1F0DAA22B80CB7737DE2537E7B54F5E1643E30046E87CF3
8D9A45A973757BC16CC50504033125D2A68A1C97CA095C56B3D62783960780B3
1693596869FAF5692AA8FA6643FCD7F55E72948D2DC55AFC5016FB2C48AF9D85
192393C682B739EB43CAD8C3FD4053B2D53CF911352E2BA87A65F8949B0B7918
EA727DE4A08DE07B71365B8F31103159F65D30A7A318C1056BF638CD20BB56D8
6F22ED3EACC46F750F405FAF96268E80A409CD8AE0F36B68AA8C5FD2E0E871DB
D2628AEC086AAFC9F04CC93440E1A8B0ACC1DCADB778837360339A25C08E3B0C
E768240F0E8CE9FF939E4B1A6365664AAB69761B7A9C7B95BD29B09B930B0D82
F2C39F9BC0B94E56C48DCB22D8F0CA6C633BE68E5977EB3D88103E4230C6A08B
B4FB0CDEA7D44636102D47AB90B92FA42243943EB3E77E6CC38DEDBB2DB8BE77
78936B70FAE12EB1E2913B766CA2BAC3FA555CBADAF2CBF6B7A216FC93470554
2C841542BC1FDB26DBE389CED193E28A19CE9CBA64FCEB47C4D9C7891741E0A1
23FBBE971ED93F797C02EA830678317452481FB78DFEFDB25A3645AD3979D2F4
AA17C624CAB35B85963C6DED262AED5DE92278F31B2E573FD86696D98800443F
32CF695BC103A3ACA687FBB3F42AF9C89123C719005844588667C3DA28AFA523
BAEADF7BED1F3B5D595DF571540D0855FA377DFA6880F525878D6A3D1980C7D1
05554ACC5D07ACEA1E0D27664F6DFB6EFF878D0A68604565D0BF75FD8BE023FA
36D164B7BE25F9F811A466CE04C2CE5A774EE3288A245769B7ED30FCFA10230A
D6C9E809341BF5E55E58F3288F7298D62092922F07027352BC7C9612CFCB7018
B3394AF7EE7076395E67C3CF9B71BE069AE6C6C412F86A496E7C77173A0CDA0B
CC46683C239700CF259CF668B9F5C990DE3196B84BE792F51E17583FD4A83178
989638A37897AA769D74E0B3A299DD94B314F9BAFA7217AC70D8D9D02544A545
F6880EED34399A835514CCB97938F3E012AF4D68C140C6CE231015D93CEFC522
CF56EDA6F3147B3861904FBF8BEE6DB3D2E71479CD3A02BE03C555B0808D40B9
53D2EC56876076A116EE7E81836676237F88C519F8DBF39EC35FE41D78CF1665
E3FFD09C78FFF428AC27BCF0318D0849935822699E31F5115E7854A22F46951A
51F24526F7190B18B313DC58AA2EAF631A48ABE394668C6F1CE9AEADFB56116F
FB38C388F96143BA870537CC8B3E5F2DC39F9B930ECC63475BBB8C5F9A45218D
E05C4E6F250F6E544D6011F65EF4808D3D0158097CDB6E280AA402229A6B78E6
AC615258668BFD3469CD663592BF1214E5EF1C116C4DB47B805E2F60771168CF
79CF10DC2DA8F2BE94869AA570DF2AA5852113C51CFC85C1E41516CE412CB410
BD026231E22A9CD0F664D76D385CC1170476B17BCDA45C640C583F16DA207028
0C58570A966383AA9F7CE59375525369CA6A559BEF0E05F11CA9C72A278C045B
1D2572EC08DE1424D2420D550177794FB3DEBEBE9E4105AAD34FF119AB2483CC
A034A95AF0B24B801710B398D9E9A95138859A819011423AB5921DE8EAC56ADB
58FB18C27A41CE503CAF2E7EA6F673ED5F34F1C1D20B609A152EDECFA26872BC
3C8C802A1517D9C6FDA3474591F19D573EB051F551990D0331B2DEBFA31B5010
3F6332290E522C15C69352124E1051A715399BBD1A6D3704BCBBE1FFF89E56CF
9C3EF605898309C7C3D20DFBFD10DF5FA30F409A76AE8021045DC09C95C9AE4B
4EF735A5414D985F6F79100E7045B930267F0EEA9BE820E13291132AE91118E4
7B8432BD1AD7A9CD912F2BFF83A2C4705A26FCBB7F8E45CB2FD9AA2EA98E381A
01BA4C4E31747123F20A0A721766F9D9A6769FF80B400B1EDBFCAC63CE15283E
72EC447BADD5BD58B053A11BD770399E31FB3B3D856FBCF6235BAD1F0D38E26C
3518FE6411F2A5FD4809C085AC2D60FA311DC99B9100C1A59CEF4C877053161B
59682BF5F2D85F2DA7EA0FE603D477F6E80DEAE0F250811BCC646D8CE2956C78
B897A5000D73AD32BD99B92E6E63BF8D79777859EC0F7FAE47F5A0CA878106F5
5462D3027DEA15E36AACC0E7349C8E60D6F2439E2D50DCB9D96C6C20D11266F7
913970C783EF6D587F638339D1E89A4878ED27E515FED0D26FEEE69602B2BD58
D146C077FAC71FD55A5490C89142F2844CB7E6352B01A448D4BD7A06D8EC0F00
E69984EC55E0B487FDEBB3F7FC3F4093CC6E13B87084E461E23A4D6862F0EEA2
84DAEA8343FE913EA90B9ADC7D025C2B8EA3689D75AA38B5222166C447B82E75
52DE05711B3883394BA9D683C161A48059A0463B17F3DFE8A73B46E913B99D2A
38E7FCC667A5B810B665519E7E1450E00BB9D0279537763ACA5F131550E83404
04E208B9C0B0A118F40332BDBB431AA70981E77AA5E5E76F43E730D9D3D047D0
B3EC66EF1D37916398FB8CE955E12D8A89ADEB1AE1EDCF91BD788D8F261962B4
3870D5928D160218A297BBD3BEA22E12E9C4197D0F3835C0942AD6487F5C9B20
C9A597910685A9BEE4CBA868D352ADC10A564782DF3BD57758FD145E769D4E88
BF43D19050DA58FFD64EB7B1D37BA13752B6C966C7A1397D80160687245269D0
F27E87B2186D931D624120B81967E58ABF5DD66AE39640224A518BF378B5CD26
761D1ECD916FC625A90EE8A7E00080300F0A05D265549982D56614814E10FB25
DA53070C2BBB4411D9608F4FF0B2E171820C734BD20399504F034BFE4C20E7A3
1326783358CF8D4FA48C1AB81741FA70BC0E0A4BBD104C7E5AC05CE49C6375E8
9F0EAB2B56BBB89144CE810C78D8CA02BD7CE2AEF79E27A7CC1D6B68A5B9F504
BED3487D1424CA82B8CC60A0156706987C7D0DB913F1BBF8A7B9A275E3345BBA
213B3DF67C4111E9564B59B724BD65916BFEEFE9BF03AF9D84DD2AB94847F33A
3AB3757D2C8CB688D50EEA68DEAD0613A62C3000C037092ED0A93F8486FDD39C
FCD0E8A6224BFA03E8C6D73F4B8F480327701262285C527828E5E203F328AD95
5AB433987B229534C53061C3350047FB20E3887F514B5897FDF225685D18D679
9DC141B7F6830D6771F1A3CAE655CA173FA57D400530CA6FABDCCB4325478D0C
93AC7EAA9DF7605213DEAF94C7281D9AC68D884E15ACA3BA68034F897A2FFC1E
F76FA2A69CEE7F1E9543904F1773969F65553C3469FD85B2F2F89F0E547BFBFD
F62A3E47DAA4EAD6D47F0305CCDB297C320A48A3655FAFC810CEC6F6D68ADA4F
AB5DD7F61DB94072B0AB8F1ABF62A78E43E1578DEBD2D05109DEBBCEC64AC700
4C28C4F0A5E3A003423B9958C73D306B2B4A7C67A95F8B4E737992642BD3701D
39FFAD94524A7752560FE97B8E99A12AFCCC5044D989BCAEC863BD15CAB7CE63
0194962E4183C3838D9401260A743447DF953444B29D7CB004560D0685F73E87
72FDDAB87125F419F90D165EF1C2A06A9B7500C6AD185B4115777C6BF9C24D88
653589B431FB84E4DDB650C2F783594DE6123D3142FC5C99973AF211F2A2A05F
5A756073B85FEADA4823BC1467EF2FC0E98A2BB28E5933E2F6E50D3580C547C2
54FBBBDC95998DEF2EA825E3BB2AEEACC0F30841835121B7A7D7A973F2EF67F2
795E6DD8CF55B9823AB2B15ADC328CC3AC493DE8C2F022EBFA14A2976D8E3559
B5FEDADF4E23A07F6C0E1387DD54F5C8BD071C4E9A716737B6BA413F846A887B
D1B3B89EEF73565F3D0D2D1E40E4C2811D37C9029692DF8E94F6FE39474EE13A
EEE65EC0E099C29064CBC0503FA4C89D845F91A107C8414C1648F6EBF6C8B1AA
7B2F72302AC2C6E6E9E4FD1EDCFCB8C648B2BDC18FE07B44B7E886DAB96F8B4A
BC3C584457B1565FE02E26EFAADB605C5CFE109AC7A355E2283555E10CA9070F
BB98E2337281FDEE7EC20EA060A062235F8848946BD058A0C86C794697BB0674
C1DA26CAC3FCFFE73689E2CCCAD5DE725AF6C7DE282CAA214D69B6793520439F
2991BEE6E427D4E82FADAC6C3829AFE1196FFD8D1D0F6BFAFF4F9062FDD08665
FFBDE33DB3EBD99D8110257DD0B832CB4209074A589041E903F6D89E22D34EBD
2B3C90EF5D9AF0A0DBD5145F0FAD88EB09D1BD84D00D951D4CF9252A4443EECC
AF1E56E5FF02B9070C1A92470E3AD7F1CD944E91ADBD1EFF555FF3EC5664191F
1C11943BB76D70D356FE5D145C73670D1A8F71E5C4FEE96C8D4DF87FF05432B5
165C8DDEF25DC98CBEA51FA99398860E1C252C17EE576B7ED658ABFD497DD5D4
E49663A5CA73CA347E27BC49C7DBD28DDB3AC7A78020551168A47ED789C2AD9A
B8C8FB7EA2F8C7D4D9FAB4B8DD91CB69558534CCE31AE7E157D0B060877AAEE5
14CFF0AD50200A157151F7625E63296E325E2C36D5DC45C5129C2D342CA7541A
75675EB2F1A5BF25461BB38C84D0651F4644CF51DAA8608BC3B698A22BAE29AE
3FE5C543DB648AB544E8212B3B2F97B5844022274F5EA46CF4E9D49CADFF1DC7
AD838B09A2CB6136CAE6AEA52ABA90745D527188599641549149217DF6B36367
A67BA60DB09562E82863F6C001ABEACCA36DAC81C30C11F98A77F4D100499847
E1102CC075FA1210881D95D6ECDD37B0B820176667500E58782156ED77373459
6699116573EB74FC1C83B091EA1700BD5B069BB7DEEE2BB45E7757F7BC00D85F
75BF5F32B350E2CF46BA0E8D0120BDB3E742C15DE5A8340318F907D7DB5591A7
08C83C63D6D457915A2F41B21629926169F4AEFD81BA2A880F4799EAE1C0C57C
FBC28FFFC956640872B49219FA101B88EBFA3E47EA4515043C418049903E3F36
885AD45509FC3CF7A376A608FC51751104BB96EAF8314E2322C457EC6683D385
525F118C799C34B50840604E7C248CA5BAE81E8C76C29FA3779933221D8A612A
2DFF00179C41CDD34E7015DD7198AD6EBD2BC01221F7E35F8662AEF8B6203C54
59E883141A505B275EE1333E6958254B6D96C9E54D47A12F4D299F67168AF7E6
1F19056BD1DEB7FE32A4F4E62D202CE86DDB34598B8CAED5B6DA81A6C816C747
568DD57D21AC8F8B1CD8B2BE97272017FC8176FB0988076E76EC6E8B4CA921C1
AAFC0EC3E24C38BF6D64E9C259ACF279C3272383D7526CEE1C178B1C6988F963
BB0D7534D41E675EF1BA59AA153AEFA7AA88C44F92801FAC61A4EFA2911B55BD
7DF444571A774CFABE590CD7C75BBE8B58EDC3A2C53FE35CC6B22EDC09857DBE
3019A7C60107821040CB0824EE588C4973D9A0D51FAE6E5FC9F82277403C5DCE
FC2C316D499F60E7C6C04DE9C117345C4E51748D3A5C5167780590DD9E188017
79FBC3307C0BB8A5784518676D62FF024E380036EC605313952366F3C351EFC4
33256002C59C39260DF18DDAB0BA5A40946D550B7831A2EE2670B2FC5DF8A50E
6F0C48860C52FEEFAA70B5953345568F1DA030BEF5C410DCA1D11F770EBC2E64
1196A40F44A2BD2529610091D8A9F09161A41BAC6A15727CE914A1009B2517FA
41ACD230B1E0CE76E289C42EAB07B0F60452B537A69B9EB54A68FDED4456122D
483AE830BE0C173A0D256118B0867DA2ACFA39F9F6EF1D81C607DDC242707D6B
53ED198367C7D54AC750A007498FA31E27B0F86C6D3AA81060727EDD60506506
EDE0AF44190FD947C4B9D41C4A6A03DF807F98C68F883721E6E7E6383207B054
006A409855639AB72C071CA7DBDEC1EB29885A11D100A9D443EC282E485CBCC4
8CA8861B0BAC0B3574ECAB561760E687C3BF7B72600494F60D3490DC63F40B39
F2C388F118806FAEF0361E5A30DA786E599D9055059C0C2180824BAFBDE47BB4
6F54EDD7D7FBE6B569AD9CA1AC51B9CAA30D805089E1E96AA5F1C7D8579C4D83
3DDC80D805CFE4868E62C90C06533AE6C9A73E86D96C6E3919B677C2599BAA26
96DDF00B27D9E1AA2D9A1986D83626E0D8D0C105CB6FC5F610237BB3C6E242EC
52D4D247307FDF5269B44DAAA80E7B4DAD286C0B4469A6264647AC1D5FB8AEBC
6481A94C6ED5EAD255050003F03E16A6529971CBCB06166030EEF983EF332497
5116CEE2F516B4E2977709EDBD3DB7AE516C55E742F598B2D718232DDAFB2043
F674EA73C9F043EB73E6A0511F1E28762342120515EF4AB7CD1C0D977AD77AA3
B19AADA40A0586A02109B864FE34566E17B4A1A09F9BA10DED06056B51C42FB9
B6A9C4362429C2FBCD39A24463D3E0AB8FCC9F3FD3A30F4F015CDE9893D5D66C
804F030B04D85B48DC345FC8249F699D5364BBA3E4FC59D1F7378FB3FA254230
B9826E6322C4D6231EFE10719E907FECF478FEF51DB2687D13CA64138054D591
B1C7894E2A0D724F4369326D31DC3FED9625DDBBEEADB867DDB7FF0678F202EF
8252CED93785F720E4DE92960A101294ECE75FFB72E6043F33FD3778024A3CBA
9DC490FD77F0F3AA902CB872E59AA81C0B0A6BC9DD687A18BA25D37CED0CD4E4
F0736A7C0EDA3E239C23A9BC94D2BB2581629D0C9CEDA46E01A5443002CFE126
DF21A740D9791D4FD8CFD7A635837144E85014CE922B9801C1C1939D2FCDDA6D
CCDC6E7B4B622D86519A9A42FB03DD17290E01444DE0216C35C52F0C3950222F
A43EFF75AEA3FA058494B0BCEE5A20AF99C473D1241DDDA5FDA97A2888AF5FCF
BB88F51495E5B2EECC7F07816F1CDFD16F7B82AE7FA98BF363EDEB32B1544C9B
7F8041AAC5EF16801613FCB3273DC62300B0AB0281C7CD4FBCE2B5356A2ECEE5
118D86CD0DC85A9A53BE7E1C06835390A532F3F6B1F8FF071E03D1BB27C6A591
AAF6BEBA1976526BFC9D408297302124C1A7A32D8F5976F7CA9EB64367E31057
BA0FDFF1E76B74CE02EBAE87CD872F21BD5FFD0A6B3A4A17BE19841B6B3E72D8
FF49563ED02104B2FD887CA074CA9C0F00E87A5D08AE35CB8763834BD6F9A58C
138E5C97C4C1059C7489A306E1E2D428B27933780412DE65BC035327144B153E
A7313133DF49A031282BFAE32A80AAB636288DBB885C46C5718498E0A8C3AAF3
9D9B7116E93D48189AAFAD5289F9B5E659E88FFA971BF1AB46A9BB02D26465A3
B7C450A0B6C5ECDAD7BAA8CECDD4D795902529AFCC3F1A325AA9776B33CEB0A9
6B243044EECD4FC971D86F6321DF5D41BDE10B57314C784BEE0713C7F20697F3
C699FD557D7E3CDBB0C43BB4DEF74A9B4B0D144564E5A47434533AE9CA24C26F
757696C3F1320096EB562924278CF8D650060CC2923372C0A870FCD30904A5B1
8BD06CD658AB4AF27B1BDB96A42FA469C5D3DACBC425EB6158A7A32EC17DCECE
34947BFAA3AFBDEBE5E62A6AD4B69BAF5891402BE5D913EC066F81CCB210DBBE
07CB52B6321F7F43646D5B940BF9377C91F9E00D3730EEF2FD1B1017CD104B27
A121D2D3EA73BAB53FFD35C67AC9C3B91DF9A4D26F16C6CC217C65F52CE2AA64
F93425A12D3F99FA56E866E9CF15B83C7F0DD201D74FDF7F448889F2CC1668F5
4D9DCCF7FABDDB6C50DF2485AB8138E3D841A9D8F9FE23F963239C92F9B480B4
B44A27E72826780E48006E544B1FCAF6881D65F8CB127FF9339190CD044880D0
4A8317CD53823F4F7EDDA13852C352BE7DCD8FF3A61799D5734B37023CF1A9F7
A19EC131C5AB6BCFA7D35816E58563B90DED88F59B4A7B7F95E8004CE4A07243
9889894AF8FF16E2FC2C82A5A8D5FE0BB2929C94EC4E0AB0128FABE45E59DCF7
E38BF93A153B0082245B574C006312B1AAA47CB75DC32200E796531DE49F1FCA
DDB0B6D68D701164CE198E7E59F21F9A157B136D2E2F34942D4ED126A95DBB4F
A2D09EF80D1F2C507DF980D3DB5DD408162D9718D28BF9E906D9591370733139
78F2D240675A01A7EE18656AAC3D73B851D54A2FA55862DD7F307110248F9338
A58F8A83C0D8481C4B7FB4BD0946A305A4E00B71FB9FF3F957634501ED2FAB20
17C34B786184A92CE1E3192849C4397A469C12B20727A4CA38A6CBF685720F41
25317A8D8DDE345042F6A491A150EEE8BCA4BDC0D235819216FEA662832F3B27
071A1EC66941FBA1C9F662A35F3B9FD0C4FA07AC816E38B9649984F5453E5E8E
61DB1897CFAEFF57C2FA041DBF351FD9F074C98C6D159862B0A8D9E94BB27AF0
7B164374998F867ABA7A5DFD196AC2732360D8EAB8507B874D48127F3226BDD3
42BE1666E638C85B4F2CB45644E610A3C02D768058BA2B97ED6782102760B5EF
9082705FB9BCCC4C76CB01A877C8242EEEDB3D2EC116D193A3BC7B6EC649B992
3A92343BFEB7CC18911F91847A571AB6E2806206612BF5DB0BC0C43B5D49E44A
0F36E5B0018C20AB43FB4C215C95659DD7D7207ED234B00EE34F824317E87669
99D17EAC8B28132D2BCC02202B078A014AF3BB404CDF3CAADE7A8ED6135F0B1F
0DAAC47B7D6479116DE48D61EF0B96D34BD63D94048BB513DE3A547E16A8CCBE
3E2F865EE8E446C3691A53B130795628AA0078EE24881E12F14EC441320B96A8
CCB6B013375B427BE239DF0B84FDAE2A7D3B6F925A272B7D99329893C7B86193
998C9AF6B6EBA334E42E05C376C8D62032A59B9D4E948DAFC6D574A33B9CE67A
5639E34BD8C4995F888953CD4B6449B07D5BFB94EB5B568EAE380B2F51007921
9C53405917D47D54E80538222B75ACB3F493582E58C0C3E1A010DBEF44CB2CC4
58F45CC832FFDA442EC29BF25310BF92FBF4379E93497CD0B8F74C1F61E432E0
D1F9F1E4A0135C64145D44C0D9BDB91E3922587E111D5BC2A9EC89E2F1971681
1BA35FEA5AF6530E3D2E308D575A409EFBAAE5D96D65773EBE8D69A606A65292
F61E9D66510A1A86F80719F3D684436EDE35AD651B2A02A0FE181C13ACE08EB4
A2BFC9A596472C721DC14B059F2291FAA610FE8C4CCD57A7A8C9F5071193E20D
0DA5811AD7326AE12B896F411E09C15B0506D1F805506D46DA29B54CD2EC33F6
18B8CA36FCDA32FDC097B192AF61F040CB1A2E88CBF064796261654AADFFC21A
7373A24B8BB3682F214B4CD39727CE28B6FC638E55474C57AC6AB696359F54E9
E05755F0478CF75B69C9C83FCE65FC3517A11D53456210054A54D76965628DC7
75D8B7AAB03DEDB6AC72F2187330278CD99954C7036E422BDF2419D6F7A4AE12
18E19578766556ACA88EDA2FCAA48B929E1A3403908A3DD636249FB28B7C58DB
A50771C080673C263D09152CCFA61FA12A5C83C65E54BD8645EBC6DF72B8D560
BEF748B624FE17F016DE8236E4B588D4DABAC4BC89F49090246D84C30C58439B
06ADCD02C4FBCC772B77EA42792FC42F4DCB37AF47A894E8376728C8DF2BD4E0
5147ADDE9902E5A3C0E5F4F0D96F4DD964D4FAF490734DC0750B3E204D6FF38C
1F6ECCDF44A025FEF9D2CE5A85658788795EEB8265C7F2726F87E1FA2DCAC6A4
CF31407A555660E2681176CEFB2BCA173F1D2016D6CA98017C7C118D8C67F71A
4BC3C8794BD8F2EFF6BE77ADAD22FF83BD861FCD07E1302D6A3AC105FF0DB8F3
7DE282B5B6062984CA5731AC4034A3B9A916F2AFEDB91D2A74E12A72DA524B0F
3ABBA5A8231299055A2126698FDE18C678282C0ABF7EBFAA85F3F57B143F9A2C
F7254D4E70B69FD185D5DA60AA63051DD7BE7118FD358A0B67A82EB1697DCE77
59EF3E2FBBC0EE740CD58511C97A3F0A327A90E16092E7A7AB17A304D3FC3BE8
3A41A452F3F7DE5CE57978C4EFA9784052953E509CD6DF4F2A88B66B9BCC14F2
5ADA1152E4AF8090F1EE4F5FDE9B4423B8E2851965E55433E560806D6753D233
90AF0FEF7A9FAE4339270B8C5D81435A477F5A736C4CDB790294163708221578
DB39135CEBEB89DEF4F8A058BB89CE6C9AC356F55822EEFE030D080291D452AC
EDC5D0EBA5BA7C1C7C3A820EA12732D95E3C21CAA8F9B9C27FEFBAB02B87A7B6
BF4FEBD03132F9075C271F205407839D9441A9850AB9E8BE225001F0CB10F8DD
82910F9A54F625D1D7729DBEC548D2C42A9F225184AAD4E80B65440A71C241D0
FBEDCC43893291BDCEA2DBB162B85E7721EB9AF1EDABB511D068C9183BC01DDF
F1781BA4CD3A2F9D42DEC908DCC13E41A9A0633280A6F2B466F2C552D54D2D76
D38567245A095F8C91294627FFAFF0399CCEB87FA7FA9A147695843FD9CF8D6B
EB3B9A8FDB3333B694B3E85E2E7ED6AE24C15111AEE8B0120DD8E29CC460BCFD
5FF697B554FBCB62F90A0A80260CCF63AAE519616F237B0C2A4FB0EA09E15031
9A8AA055E3E63BB78B7DC148E479DA8F84B4089802A732F2AFC037D6B41BD233
860D027981F2F662252C0709FC2C8B228CBA5632C5C642A3022162F4C6D54E6B
E4E1CE430372E9EC7FC8D62B62E950C7274748358A86D49F4C14AC5096BC97BB
F995895E82DBF188F011DB32D5B5240EADD9B21BC2CFB46A86BD9C48DBD11C72
2468DBB472370CF01EBE44062A4CDE2B9C33EFA4EF95A80220FE72248FE394FF
0E9CC2AD41EAA881BD417C9C3A47B945865D42CA061ACE401105AAFB6D143D55
39E15480FFA57A171D13C33D1BB81D4C8B5B18FD859DA64EABA78F8C85459E49
995EC05E1C5D85FFE38FE2EDF98FA2196ECE13CB4F39641D55BAC021806846CB
96F2C10D4575E5CB29FB0A23F9C53B79046EBAC012EEBC8AD94AB806E96E4BE8
1DD662C6717E289BAA716009C8DD404ECE7B7EBABB8F8300601476CD50E2FF86
B9D2E115188633278729806AB262316B6CA23F0447CECB0A876A61EE0592365D
4A01DC96667E2896098DC7535D51E34A1C528BD0F0E4ECCB638BC29AB4F9F0BE
B9F1B97CEA1344C6E44869135113CD900AC1F0F5F458F5047FFBA4AB5C77B5FF
C96866641D00B0AB0281C7CD4FBD93595C22662BBC2003235CC96E832A27D6D3
F9F1E0D6117DEE7766DCCD9B30F171DDE639B45488B890196ACF47966E41B425
1518F5F104AE5CD4A2FDD0DDF0A49EBF580E8B2F290EBBC3B35D92E472849BD1
0612A89E2410E3DC1B81890E9F2A1A8AFE1C6AF104DC95DDBD1FA5C73BEA61A0
C239F01DCC55940A347AF0D0EDBF29C1E6D9387C2E7063BE124399D38B97B84A
C32A989C4FC0D580164E5C47C34D835DB493AECF6389494276FDA492539C6CB3
6D36EAE84C047D636122100FCFB4BA3ED1AA95C72A46E776365CDF9B6A32D842
7EDBDEF885B59E018381A67E21C6E888F5FCDB35D70E0CB0ACAEA8DAA878269C
A505EA48931955CB6414033D22B683432D749F104797F4886021A6B846639181
3B9003AC9B950A22EE900DAF6CFB6C63F79CB0B5A99199A3AE536491032675C7
663A46ACF4AC63E36C288D37E6AC05331D22A0AEE3CC6E03754BB9CE4FA97313
4372970A35FBF96123FBADF96FBA9BAC0B9A7B70258F993C87F2C75BD72B5278
CF84E2AA793A83A49B9CAB51C523CED186C921878D36BC6DD37A2E20F5BA8160
DABC41DA079DA4A751DF9A6109796D1855FA7B4F77F75F2E2336B76A11D14A95
18E4B808DAFFA32FA063B9C5500FF2F234B79DC65856CA9A6F6CBF2A3D011BFA
0F2BE6C6C1B18A3183ABAE5355A146D8BD2A3F5558688B82C0FCA8921B0BF491
B51F8E013966502D0479753ACA0892E0BA3500AFE886AF76859D2D5137F15311
88441FA40A6B018F59C1DACCD2750021AA644B7BFDB82C4D2B57D2E4BC003F05
EA7B0CD2FC041141C380FE24FC09F2A23D9835CAC736F607207AC573291E6E54
26919FA09CB534581ABDDF50D5941C63845E8C5B821EA3B7E88CFB0CAD53BA7F
20DAE648EE34DC7CEC39CFC3F8E6693828B188B8B8509B9A7C7C948E6E6E104A
080AE7F6A7DA1C2CAE65EDFC00061D62E086814CA0DD22B394443257D3347370
CEC5641BB4AD4AF497130FB3F600A769C7B1ED60BBA08F874D9E1B1661393BD8
5DEB50C786F4EFE127E96A13B6F4CF2B4CD097B0BD1BDEB0B340A27699B4D1B7
70A950A36F5972F5167E392EF9711096045843A6A69628B40736B1AAFBADA2DE
6F39CD5991317E52651DA6117D663E34E5A7DE2D3AD36415EE85075454C82D6B
B43FEDB7C81DC72B42DD991040DF4E03CF6170C241EA95F667F313A617C4A1AE
30BAF8A6F0F131C279530BDEA130BBB2D58FAC4849227F231BEFED36BDCB4851
6F131B71830D84172E7CD7C05B2585A53C7CB0D8FD84C490B04B0CA0A969E41E
3F04FA629E2B6649661DD818821B58BE53678574253555AAC69C4F5FDA21D1E7
A4559097D2E55E6C7A52C3C7106FE2658CCCC0E009F881F158FB3F74257F0549
BAA570F95B97AE0BC57BB243FC6D89A98BD9FFE2CA8484122405699CDF6369AB
DDBE93DD0A92111ECBF02129EE8DF16E063B7BB9D3460684C5A44B5A860155B9
6B4CD17D25C1F6918616CE476C10DD8068B8C62BCC686B930D51A76E422BDF24
19D6F7A550CA0140930334B5F384536C40786053235B4B64AE52FE4C82745941
81BB8AD7FDB6C541B3D526D321A3B250F992FEC178B948104127A22B60F09322
3A64804E46E0241A986B3D714BFD49F6DBF0306CED94DE945B5A67DDD559C0E7
7188C18435A2E7FFBA595F0C054E96CC44F7D6174AE09392546A9760E5ECEA9F
2FCE0B991E85351A6F28F361078A9CB36CDFE0F56146DB8A861E46E024CCED56
ED4B4AAECB28AB5E1CC4FFC422917E243C440FAA220415B8AD23DF0A82CC481E
AD70AADE0E2676CAC466EF646784ABF24129418CAF9F4B3F23CAFACB1880D07A
2587472097BB7656081ED5206F2827191B4CDE8CFD7E46B9D2C9082CD5F8B74D
44AAAF83E4E04ACEA44C5BA809D068C50DF812D8CF9F07F4648192A7EF6EFE72
6C5262D064061423632D64DE939F56369223465FDFFA2B6DB9D84F956FC06001
C3EF17044AE263A05A625E1AEF51884AB5B95E50C1281EFFF3160CF442002776
68750080BE5A7E605802D36527BB7C3758285B8940F89B5C7F3504FE90F6CAA7
1ED3A9ED589420AEEA4251019D9DB3E7187DC71FB9D17328E842A71AA9C5EFF8
3D869015AE1ABB5AFC3164BBF15FDF39AD407E8FA1FA323408D17A99F64D3AEF
F3BBAE3404AF40A536242228AFA61AF0CD1E4A0F9D0A3FA3E8BA66A32F7839E4
410B48557459EB0F31FF0CEC089B5B2A64DC911A05B7D0FBD3BC15657FC9738A
3B553BB914B7A10A1EFAD6A6EDD26E87144F70B876E8AF8B3DC1745A32A56D84
A8C913CE0EFA7FA8708EA9E410A6E4FF24EBEB2BE5F48207C4F9F63C4253C69E
6BB9530C1917A4F87FF7F363B07C255B5668BCC4131920EBF52AC5C3627A231E
DAB2CE032DEC53C70B6F3333130E2E0DBB45723E3858702BD9524FEF8067C9C0
ED723D67D5D925DFAAC92B25E543603F2B5A4EBFF4319C16C1E261D004EBDF64
DBE5620D5FAA97914866F3D7D93BA2B6D8C545F3F85475C51BE22597651714C1
A4FD2F2CE7EE497A91E603F12241E2EB52B5EE286D3582FA02F4D232ACE400F6
B71D871C67F70A2572B1FEE2E0E999C3F5E3E37B799A57B8009493929890EBB3
F0C168479B6E8664786B8C6BD6AADD455B5748055DC43666FFA6D2F232893528
48F0D8B554898FE557F69574567035ACECB85EA34063103B89A932C946455256
DE821247F764D8403089DDE1474DDB7E7634A2C093C92BAC49BFBA00A10CA71F
BD745CE175B921697F9D9FF0803559FEA211098ED9FF00CD61CF880F6B9A1B6B
68F3CCF0B1836A57B85D3ABC46DC2794D4A9A330C3E2E57C4477049B39331384
D7A4880931DA86BBFAFA13291C28312DDCB7FFB35DC0555F3645AD3979D2F4AA
17C624CAB35B85963C6DED2009A1EC460941BA4064658504CFAE58C074D92E17
607A334213F59ED2C0E7E2EE6A389F64F3C4CE59ECDFEAC04CA8E823B29DE32E
A6B940596E02251EEDA8600201A91614527BB2894802F6E0E5B3B0B42C4E2964
3EC14B404C409FB6F7B0164FAF03ACCD9DA7833A213F9F08DFC4762B67A235E5
8A9B2C1CD3BAFB126607848A6F7FF06CB8341B2E9CEFC29A1772EDCACBCE337B
4DCD113B464A4E42FA12AB483F7290C148698932FDF95535898FD8282644AEB1
2BE24421CDF6F1AB2E63235155A2E98E9923B0F6F607C8D81FAC551B3FCB526B
CDB745ABA11C62B74E115CC80D07137085C70F00B4AA2A3F38FE549D727EF687
4B1361AC326E0471866927E3B6123D75DB1F5D1B6C876C79D6AE577A3784FC94
031C64514BE9CE80266D870ED5BD796ABA334160229587F4DC11F6EC986B0369
31B485A5CD814C0CF46BDAA1C4AB6AD47FC4915ECA252773E62DAB23AEC83258
74680134F035A044609A75AAAFEC51F898B857200B7912C1FE9229D78A0C17BE
C5FD8D98F772276AAE0A4B270E8385D9E3DCCAE2F30D96AA8A9BF9FF651429F6
7FF5F1FDFBE3104AB2CF13F0603C27620E0387E2694CA97578BD38F3DADCBD62
3C5837444400526E18C29421DB4FEFD57CD2B0B7721EAF2B21AABD04EC3117E3
8FB2A662D90BAA6234DA26D0C1005ABBC80C2DFAEFD098374854AA3AA151BD54
DECE76FAEDD51A52ABBC285EB77B9CAE2A1D3F044CDA0AB26FC8966F17DC179C
A649DEDD316A452509D2804B5BE0F6C5C6E9E1C6BF21D70A72AA4B05B19BC6EA
6705003370A63CB4F15385BD6420F6F968B2F6AE2133A32FD0C3EBBC3CE065EE
67E397298427A0A7A59C4ACD748A13881C130EBB07B144323CC083D9D5F0CC23
C7493D971C8AD739BCEEE918683FE6FEB1DB4D034DB5A047B8D574769188C060
364B2E91552AABDA55CE5511542F816C40D939A89C3038D860E6FB29B45BE307
232F9280AB719537E4DB42C1B3214E10A835B54F752047FBA44BEFDD8042A46F
65EB765A04C09EA527C1F30FD1CDEE64FECCCDE385C837EE253220A279F05876
328864C9C22480FBECBD1D69759B642656D955AD16E5AEE848E6112C237C54C5
9DD39D8D40759EE9B3BED754A63D9D962E225E7454A576D8D4BFDD535472E055
CF8DFD7C560CD0AED13F682F3F28B7794A9FE5A62A8232106093EA39091D59EB
76CFC5980329A197531AAB5F8EC42E5A582564C995F0DEDB57C9E529732F99DC
BF7C75826EDAC8630477C2B12329C891F2FC0CDFB18D8A4D2260DC93D7AC1107
B69E941F3DC2668C37105B253DDAEBC5CE6923ADB72397338B6BBA3C4AF64523
F37F176F3256E298D22DC5F1CA1E0FF978D860252ACFC5659CBFFBAF642694D1
7BC8EC46A8737A7AB1D63393DB4A3AADCA389CE1ACBF20AE2A4BAF715FF78849
1FC617BBFD0D9AC8B0FA7CD4D5E918E15896D0BF5E6784149C85FDA1FC19AAA5
4C49F6F0B09F5E219F11185AE73046838300FF9A722327A7A7082CE9B1BEE40D
A110ADA3FF7F79157204E37A4CBBCB1EC7654FFF9EDA896ECFFB9944EB7EEADE
C7BD012E823A36595ED6870F268F04A18665F01C9A647943E6B1F15FF430C609
0F06E79A8BE6B9EC347BED7AC15B9A3B0CAF7AFDE22EFDF0BDB775895C4746EC
F87F40A23A8418AC968A3B1CB620CACD3A22A7881910197E470E7277AAFACC3E
A2E0C4F7FD2D7D2ED6170CD24E71476A3EFA631A9A5E1691CA52CB6583FA4C6F
64BD28EC6F839F95D74E2FADFEF5F2B8AB0B4503D1E9AA8E377610666E66BF18
3859765925DCD2B64E23463A33831D22663C2EFE1FE92B6E6425680EB3A37379
3F0656C0B449E94C749BD813E429743596B1655E53AB42EBE4B24C3F2AD371F1
0BA0FC4656FA482F221D218FE10A5CD04F1526CCE72033B37FA2CEF391DFA11B
BCE289A295CFD5423A4E8FD2BF8502284A9D8E7AC2E3B285F1C185F71C3A4ABA
92961CD7FABA021D429281EE864CEF304420684E0C66AEC09631B0778C8CB723
943CF569E2EFA0CC5FE9E2480166E6AC1A786A72FCAEF8404FCEC4F5D4E4B8BD
DDCA72FBA6957BCB620885B3FD0D8666DE9230EC9A7D2BD0C9953DA0F1207736
66C2E0F7F6A9172814A64D413E7F018AF3ECB17BBFAA863DC967700998292B0C
2E77B1FBAD945CABD04F82D7BB19D5E59525C8A95292A77C4344B032F06C6E75
90CC3E2D2BBEB12283B9994BEB8EBDB9502020CE8B337BB18A3B724CF41853D7
64449B285ED3DB097350AD5FA68A2516E7D70B4FEBE36BD78F836FB07599A129
96253838156F969B0FD3457C3D1ED39B31D4515F3EE29BFA82DEFEE0A808C58C
B2665362FB3C4F4A0D9B6DA1C48E18F18EF8BC4B753ACE03184DDFEE16CA7CD0
167370825DE84A056297F38BE7785291E514BE817B66EEF629DA1387AD213B1E
BFA4B54DE9A7A0435E90C6F293FE94590F5479F0D8437BE95AB03B09A1E0F4E7
6D7634AB97167A72810BFAD7E6E08F7443727DA183793198838A2496D1DCD682
A09F426C159DD7DAAA9FC3C06D061E4D38BC515AFCBA5921B221F76664E6C071
31C5D017209290A3805E10758E0921D2E2B5C06B247F53223E1C9892EBC53CB3
BEDB9834FA20791F446A938973BC2177B4878C1A7BB8DC7532F3B4FC212E4A47
698A67CFD2F6F1F468BF0E629CA785C148C1F4871B711DD855EA2B382E9D5918
641DD15B14F280483A55C252B64B214567B73012B130536BDAC1CCBA0D791A53
46DFB11BBECD1765BCEC24B0F3B41C828B16D44603708785701F2273C73CA2A2
32C505579C287629FD0889FC10CA43DD68999D0C75354299C2366B58C3935FFD
C5AD8D2EB448FBAE986C4CB868F8BC9A4D526A4C9CCB11ED0467CDDD97739DA8
CD880F0ACDA13E7449DA67A79D1CDBEFB70109027F8F63277A4774DB107653C7
3553009865B88A669E495279888E67FEDD0E91B56364F8FA17CDF976A02193EB
A560748EA41F5F3F97451D49249EBEEFC12A0F59BACC4F7BD5107A7E7474557D
E72D56785AD36932FB29D6A24B2FD45B98CCF255C99D35D5AD2A0FFA23416737
6E09E67EF91B2F378829AFA658BEB749223313314077AAD8ADF3B8327D3A30A1
843B65A61286BFC2BA0935731B2DD6DCA7AD41B7DBDA0514DDEBB6E6334C5739
57A6052307A3530186E58DC7E892A86BAD3BDE003F8593E7713F9275A9F8D5C5
01B349755ECF60A2EB5820D646DD7C0C89E55132DAD338DAF078B3A803AE0BD3
FE25D2348E36FC320CA6FD56CCBC171D491C94EC99A90716330C0F83F32D56F5
66C01640164E14F864B5C3554A0293590C3CE35913328CB704D667F72EFF92F2
39FF01E167C7D0A18A9939B1599780F541016536AC1E55FC2FD7AF4B73A0EFB0
5D7B6019E4AE9A372BCF8BACCE0573F402A1119D321B19AE6206673ED1C051ED
4B416063841A1F59942FBA0031C12E88F357FF2E700BD91604DF27AFE2B3DB9D
FE2080DE93EE3EFA6E6A623A7629B46027DD7445C0CE0893355FC8CA968C2F61
FFBA029FB723A550E0C980499E7285ACFFFD15D3B9ECA010EB23BDBA457E0606
C7AADAFC0B366F06675690F3846455DE7C19ED3CF567435DB54C2905F97A0FF2
D6894AE97057B7FCE5DA36C70DEF611C31ED7FDAF89910094CBED95E1E0B88C6
A32A3A600D9A355B7188116730276B14D1BC62CADB2DE1FAE3E1B7BED8FCFD16
C1468B44B2105372D1286B83C78ACB5BEC02BF1A3F68F49658C3139151092E08
0C58CFF38D8F8DA7A8D044E12148073EAD333CFCF6EFDF74C1CFCBF7C70BD014
8F97614334D39C13C2470A31B5C21CAF37C2A996A73E70BB9F02B798E8E634AF
67EB9687B8E17FEB6DDF56DF78935C73B1D236FBFA79B8ABB2034AB7897F81AE
D98BF45E7F09A44D0F6DB4FA70C0237EBE03DC277263FDA9F880A75B7DFB2CDE
904B643065C2EB6A5BFAAD0618ED4CD79BEE7AD5DD407E9C262405EC67483124
923A2145E64953D1431E63A25EAD345CE0242B764E6B269537BD1E24DF8DDE45
F6BE719DFD19E02FA2E97859326299AADA336125731ED331913F27F28C0493B9
475A9E70638DE08B50D27057297FCABCCABA63BA09C79A8E64EA51C0D005719C
B3336D3F9483C47FAAB3222AE2A45B0AC3A171BEA4DC68201AF9479924A11F57
40A446CD757A6EBA9F75B9A778E9A25E50B2862D9637C73BE3218E5B35640919
7672313504F8072F10D57E3C2B42F2B5A9EF94731AD80BFCE41185A1304C1D58
B9C6CF2FB0127EA5CFE2FFBFA4D8C7D26D557D3743A9F0A961229BA5071A1128
785DCDD77EF6EA6342EDC2CE9868CC00ECAB55CFFD23B29F95FDDDE3BBD13A32
21460D3737FF81257104033C9541AEC51DB853C147AB11618FD8419F8F809781
551DECE88B59B7051BC463EF2E366A46130E23AF6FD0BF0257D598E87AB11021
7912B2023B7CFD7BC19B7456A83B17083469EE367CC1FD85244C6B2558C0BA02
DE051B617F9A19D5DAECF77E2573224BA25C78CB3BED5E7AD9383F8701213707
9582241C1A6838E0CF0B732AAB2589536F53AE989431609C6069E2BC4B914F24
F6DC332A841C64856E04DED2CEE255BD02F0E046AF48670F3C8E5257EF6A20F5
E9058A5D14180A3C93CC640C0D890222FD25081144889C4ECECB63B931BF03D8
6393163AE722B4712233861A8C8C2ABFD0F23D8C66B06F94EAAC894957853AD7
012B8173045E1FF3B5A8CB691D5FB1FFBE693CAAE99471B822632418FDED47B7
C8E2D38EA22941B1A3B658684821878FBFABB91D54CC8196005A02B680E7CC05
9B292C0595C0B481CDC4CE881927AA42C0D36747B452AF2D61925A45FD1B368F
FF49E208D9FDDB2876127E070C7BC9B8CA3E55EA55BE8917B8B50B7C254F7AE5
54DB8790E47DF3966C5650B1046670C6EB75B975FA61FF5081CB7DC9D5FD76F7
DD2B7B0C05BF0F32EB56E9721C0542A01A7751D357596E3A2D629461953F256D
85FFA25FBAE4BF70F384394E987600DD4D04CC5246DA7AA16DAD7A3EAE2AFA6F
C1A70FEF47DE1D954392B61E683BB1437FDCD5363734575E0B0B0D93E0314883
988B4E6809D6F087C7AEB91530DD543594B179E121A7FE13348E741CE63AEFEF
3FE981609291F181907318B79F64E423D0970197F8E076F3396A887A4943D27A
68EE7F1B89BE6CEFDC27E1C9DDA04A7A3A3263E04A24C1DACFA93DFEA4CF23F0
F86486C8D48A630D57F64ED2A4067135DBADD3D8E5D8FC72B6805845B46ECB6E
B487DCCB13C451DB260F8C197D343DE8F4FEB1E15701B9731ED27FA15CA156B6
34F1E13B33D814901FDEB3C6B2B4FFC76496D80FBDE4CD2AFF544E59A633B552
0AD35A1D81EF4DBB83B3C77432EE201F41C83B213EBBBC0E6A2614226C156D5B
A53D2FADADA2872DC3E2C775A9E06E3059BFD1EAE7FCA4E259856EFD5CB9A80D
1CAD55D9DFC07C1BB6B39947E91581D4CE0FB23213B2961EC5F597CF3846B470
CE7CAC1B662F543D12B29AEF990E74092368273096696827200D9A286D2A41F2
E2917338AEC1DD7B397D47626A03B56D4E9397A1FFC7F792193C8490DCE7CA11
20F30E45E51D0C6E0591002EE37348750E60398E01C3558FBE090DFFAEFF6087
7974F4E203FAB7DE41DE1B4C258636CD0C0712EE8C920E660345E15D1A3FB3EC
130A6F24FE43042D7EDAA1476997A6FF64654C1FF16254AFF8856D1A94D46E97
0FF06E7472DF8191B8DBC64FB97250A5BC57A4DF9027FCE0A5B8010C3CBA67D6
A30F6676DEDA519FC86017CC2C28A404D30606723BED7AFADEE538B50DAEB4B1
446B0272F455CA0534C42B9548CE64D6EC5CBAFC312F834E9FDED6C6C7D2E293
12ACAA9B901FEB9B8BD8D94465D68CFF6687283DAB8C0C3513849FFCC9625B8D
EDB6010D48049898FAAAF83DE16693F9AA26C37674009A85F25B7916AC9D786A
379BD963678FC985DEA4A6E92E95854CD75FD5757EC37706A2C93F7E5410E9EC
1C8C49FCF8918FD9713E27CF23D092784B7356804E65E7A696AA60601E3C8DE0
362D76B17DDB6D11251F0D8BD58651E901CCC6BD34A540CC0B84B44DA35FC77F
7364BB75AE2083C7C66E6C13CF17915A3E1DDB284079E0C1BBE42D4E32397B42
D6F3E389C51E574B91F65EE0B63CCD257C0314F9EA910F2DA4C56946765703A7
B28CAE2ECE7DD1C8A53F94DB11086BF47855F618472FEBD903F979F27377EE16
99EAFFB33FB2DCD578FF2450114C1BE1F7FCD3089443CEBEA6BF942985D14A9A
19E82B3EEDBAFCC459AD719BBC577A29A8D87FC738F0EF2E74AA3849D6CA593B
741519C3987A235D3FBA82679E062B5A310CFE38EF59E45D92D7562BEF5A0997
C9303770AA8E08AA7B6F582F60F9A80ADF0842508C1D85C822D90730AB3D0297
E0BD9C87794A1031E545F567E08B6E2681017BD667BC9302EA78A3D4ED5C60E8
EB7027E1DDD302B508AC67FACFD401A9C406C09B228ACE05FFA752977D2A557D
9C2DFCF5BD039C085DBF422BA776580983EA71269D96BDA2D66911B837901EAE
163182668ECC19D697C98A780D3F65EF6478AD70C0EB8B6CE0467A33A148153E
CD7E725386E7F9A538714CC4BB017B438E62BDE0D8F9293EC2E1279C1C2850EC
E1B3013AF7C28F893662D2D0B8586C2C68B8F70DEB5D0AC8587C358D3C578B77
F9554198E92172F99D7B6C2E76C6B02DB62B23736461F666483B0F724C6384FD
EFC38D6B7D114D6B48A1C3835A2A755A05DAFF22C051D0ED6BBA150E8B78301B
4E04378BC0F579C123081F010092C0CB6B078A13311707479AA7E0A5C8B360F4
D5DD1079D05B0E7C7BDB432343F0DDFC433D1F9AECDCEAE39653761D9BFDF47E
63B2FA3DC50943E3CF2169654C7059E75E3F471C4D84834D960394F71295439C
9E10B36BA74B7730AAE9417DC63FD005546CD2B9DC64ABBFFD79C3DF23A98607
B40BADF99876A4EDD61C966E91F754AA0351D27481E37658D458B264E1AD2CF6
F91B93DC2353E583B9737E36C22EB474C88ED61C80B7B0A462DF5100C557358B
8B66D23136C74DC044CC657E3502691CF790EB99F57B180C4BC71579F931AA4D
C047E34E287A975CDD8C4D720EBDB7C7064D39ED43975CC4BB5E507C9FD85B65
CC1B53B2921BC4B6837321D2A7C28B53919D5C62A298B8BE48598A0D2CF76E43
8D1B79070C3BF2AE5871E11C86CDABAF1D46E8C1A0E4D62F6DB28E15657C1D22
90FF39E8CF33116D04183F065C69E2FB0FD5884A8FEC798086A497908A7F5DF9
2B4D5EB1942D97EFA55D4DAD576A471A8C9E7B7F5BA04DDA32CC4C4485C93118
4D7778FF88FAC10E6A252C3F9FF99E1CC51A36D2DD7C1FDE8E7BCE01645F1F91
E6B962B946D56AF4DB0E0BFA4FDFD2600F36C66B1D7DE171D9BC7ECA7FEA2B7A
BE317AAB1C982F262474A97918EF619F9FF9D1B29CA0D8B8D059405835EC1AAC
5A6E75891EF748F6F0AF91114FF900FE07221A6CDFA0D8C02D16054F7FE5F6BD
C93A9812A49DECB8049A0D9288027C717706F338CF7EF4C7C413847CFB3DC018
E1931679DF295B160C01613F35EA64AA88C3C0E773755477CF92FEA77C09E60D
39A89CBC3CBBBDB7B9039F3309C0ED73E498CD7FBCAC60BA7227D5A1C4B1A452
452FF4F71DC5AA368E0EA45AE3A0C9A76C320DDC353320DE823E0B29796D2BD1
DE1DCBFB6F14EE31E0672D05E6B702B5930CD9A35D4A46109028837CA548D1E4
5C1FE058B6C04A255EED7CC452EECC062F0297A992AB62F69B7DBD34344E2F2D
41F7683E4AA9E5D5CED3308DA417B8A345D4C31A832DEE4E1068EFE5210979A1
8FAA18068E712B6106BD6CF7570876429BB45E80E4CD21EDD4D89E765FB5F4D6
94575DAFD47262FB6075F5005453E93016B9781F24C34DFCC30D01AF8A29D1AB
3A1A37B10A08FFD36188DBBEC8E7A6E079FEF24048B723EE7FA46F3C18C9EBF3
11101BEFC7D24A69245B900DC249BA47DA963F36482645367F7E7A1F2564E952
BF60DB989AF3F538CF0D5D1234E2DB9A16BBA1A48D52277F826142850A881648
BB56AE54D9C104C1546EBD05DFC5108D1E61826A318D31D20C33F0B2E9F7C1FB
D1201126D781658738414E71E86E4CCB5FD68F22CC868F053119BB8799BCEA7C
E440C6EF15A2B86C8B6F6BDD4E9EEDCAA1933389E1739E780307F7C8A575550D
5024C48FD0115224CB6F83FBE176C468E63CDB4E9FB054BC285F4BA6FD649BE2
386FAEEBDEB49C8423AAD4748C3A7DBCF3A89C27139BEA12A07E238050AF8D75
FC98AA6342336B3A53AA303FAAE9092B6D3A4E0A48CD681BE53F8DF4487A8C98
64632D667B7B94555C9F5B4E6DBA0453B85A04536120ADEE9150F173B3FC2E2F
A1097FE9A3DDA270769F0B5240DC944681A78C2C423E183286E1420C007D93BB
AA379418626BEF4DD08E57DD9280429B46221987A70CB35DF3EA94F71C48216A
EEE4D312894CD3448C353D2B311446E983CF442B2B4187EDB1B7688E7C02E40D
AA03ABE18E9DE0652240B361243D37F3D5552B75751B1B79BD68D685ACDC729C
7A7F42AA0F277E740DCFC71B6D45E9AC9175C3C42ECFF1925D73CA492D56B2F9
F55B349203CBED8EA76D0E2DB7A9939B29E10E4DB7E660F60E98DE99AD4E5D41
36081D2CC78D06CA91AF1827BDA6EFBC5A3E007974F5CEB4C94F94649C61F870
DDD2A4F6D982E8065E1C52C02A12D1C1F4012A350556B04770724C9E0889AEBA
54BF73AA3A8372A7E63D1B6ECFBD3EA975AFA6FB54098AEF397E8A6BDD618651
563EAFD587BECCCA9A75E0881C009DD72B814A8C332C88E38324BBD2D4042E32
532A25E7C46E94E0C35803774283C658B716F852E839CD5E014B3EA6496A4868
15A6150C8063B5D2D0C03EFB23D35BAA76C17FBAEB0896586854605DEB85DA69
8A998FE8C5CF3A6678C0CF31B76E7F47A9FD69B2CEA115915F22DCBC04D5AB8D
39DC6661C8DA32553C91AFE37C0D8E6956734CAA0CBD62C04113A8BDD71D5468
488AAD5F49B476A2DEF98A8577C06DCD22B2A7C2542868D7FFE07246EEF51E5E
6B5182917E61CDB10B0BF31612DF8E6B72A5B8C1F72A3001FCD5BAAE8A4A47BD
F909B1E42CC19143732487FBD8D22E377BEE73A18C8D8AE5DB777C3D55F02A03
A8B93436AF78724CE260BF0AB1F4F932EAFE4BF625EF2C989E8CE65C368B8E58
19F2BDADEC2B8416362DB3335EC0F3AD2C46C2F198C0AC9673859DB9C3A044AF
614D35087CC14AB94788C3166DA3A8BB6FF45D4D2ADA793F24FFE07F21158D0D
416E2256A2E3C49A13B4F88A3489BCDA7F12A6CD21C181629DE16716374FE036
AEF3E050B909041188B4B6FE827BE86EF6019F1ADF950EE828851B427F335EC8
1AFDF3F629F7967B89B09EFC1C0822DCDE5A0B2590FB40376739E8B51422FE6E
001EDCBEC9889D6DB5795FBEABD9822ECD72D537663BEF5634802D4F53DAED35
D28B281681A5EA84895C9D3C78F66EE2BBFF69CD3E7560B9A9523F864A6D4720
6696AA9002FB71A1F88EB6A52B856C225326AFD741CFFAD8D550A1F61EDF7152
FA54F47D799DADD1A6BE6D4919F715C79640618D936F640F93BC6080326922BA
3E8ED091D6580A8FF510A39DC891A13D316A069496E32085B96A5855C0023F8B
E53ED60845C7CE7CAADEF9EE4048571587D75B1E1BBFCCBF2F20EC2444AE54D5
C6FF28C1D96FBBFDD078932EEF2123A26DBAED4A772F8554F77C4CF833EA080B
56335F9BC8B1846FB136EDC20231A35D09EE87A7816D0B726AF28ADC1D329897
B96CC95492011D4C9AED4E13EEAC727E2225F177F11CD02925F5FAB55B0D23D7
2E780E2991E2AC47D1D84DC1DB866DDA7C82EF6E646CAFAE116C72EB5CA6C230
57D7B7DE7FF4323B2B2658D060ABB17A62A71AC3A9C82EC59893F63F5E4949E6
8EB24B499B643CF02D3871DC9350F197F54C887E3F3382F060D078347E55B573
FA9D2D1EA64FFBEF7366F6BA5601CEB6D079BA42360D32EBA915AC5D6B5F8B5A
147689238D7764225EABB58EC2D338A43D871577D9DCA225191F3DC95B996D07
F253A684CD4EE316DD62EAA022959AE81B60267918CC873C36C21BAB09547596
754041DC0AA4920C596C5AC4EFFC0C52262225107B6EE98EA18A028E683B467E
A973927F841489A793E9FD30E26E9161790F02104C0C578D5760BF6A389251D6
969B8AF3AD360A8CC7B14EBF0A3A48F40D2D8392CB24B922F94EDC99DE551183
EF5E2E074B3D3BE38D9FB4F96C2C54591C85D37B43431689B3B60737C546E9A0
1A591EA3B121B082110C6CAE2CFF0EAC108829820238728C6305754EF0BDCC8B
74EFAF0D005CADE36CC2C0C7204BF843C4FCD13FC57D9404F5B3CA1BCC301769
37E49015026D0EBC20681A68EEA8089E1E1395A5245F640C178F1A34233FCF15
41210BDECC0BF55E858908A7FEE5294BE73F98306453ABC3951794B26C807213
1C8631D50553E367E0F78609D720A745E8FBEF45FFF72B6499263C684D05D8E9
A9F4E75603387BD03D83C830599502D7744D1778FFE24DC33658064737A730D8
2CE7462928396B3E763CB0CA62D6148510469B79C748A7B30252AA554A4BC7DE
5FF79EDFDAD488591F918893D04B02CF5744A6C0E79AB0367C01EF28C26DF07D
1C079E52C2C89E0FBC15C1D116DE33B3B49C7D6E46E9FCC0F39F2EC6F59D7E88
C55358390806D718897F56C560B19E2A34A6EEBA2D25AFF389452A52A8447641
D4E13E6011E30D3476AD6862AAAA5BC242955C84A32DC6A373A6566FD3536470
58DC6B09A57170347D59D1AED29CFDFFD440D8C2546A7E2FA8A481581AD70F2B
A3FADC2A2BB6582A7BED640DB1A8DC28B930C5587114FE18094DEF50873AC01A
67C834C5B2CE27AEF9C7DB1F2A22AF9E5DEDF038F2FDBC3E20D463BC757AFF28
ABE30AEEB73BF979B76603510EB77DADC3A90F91F353EE6E020905E062516F27
0984214BDABB6670615D883DC857F3D5586DB8783F06030B0E5C758F7A279110
DB7043C8C3A9D70992C1F31DC6753222850ECF459A7BEBB0B73B65DA3AE06F80
1E6C37B04B18441D4497E178FF17B0F6F2B78F3EE8713C62E48F5C8F62344E37
1AF8C04209470A7BF6EB039F4D5DC1D8477988E9866A5B274A903FA5E1CE0ACD
8EC2D4647F2207E3F017531D8DAF13C2E9C43F8661F3F085EE06633C8A9D6241
1E0C7813C6EFB1790C5FF425189D7A118CF52B78C79AD664A57F76715BFA1E9B
FDF47E63B2FA3D45790646F8B3F94876E424E00542C7D93C5D9FD9416A2662FC
CFEE48E79225D417B232590E6E1CF675F16D72C3C6FC29D60D85375C57FAF018
8543AF0DC2B02F2934B97EBB13A8BEA26BEBEB3DBBDFC9F30363291678A7D920
F128855CDD17E51BDB9D8A1C8B788F491C937843051E6626CB05F32CBBB7EE15
203274D8D5208E0F04BE512F0E4295CAF659F0A1D5F1691FDEF96570BEA964AA
4D708A58C78748BA48E0F93940DC67E7B0B3618E10ECF17EE37A6267ADCB0646
D5FB322BBC0F0F89FE477C2413903A61E139B0D0A1F46D6E230E4F65606809E8
0C7D726BA33F802318A002948E3F355F72694A1465FEDF4891ECB19EAD87AF22
F237FCD2B9F78A4C22AE97B28145FED02D5029A3A8FCD1EAA626BA259ECE0B0F
6BD5F06B60EA9A64C71E69D54673059B71F21D7C5E1B62811BBE508DC0A95CE5
F9A0044C3BCE04556B6A6F524CDA3E22965E2FA5AC42D4EFB91C0F6EE88AC486
232CA6612E23D24F35302FE2943DBEE0C0104B1292A1F83517BC28709D3864CA
3F6DD068D804187CA5BDC8EF12461FF16614E50B7771B3D69BBD486B3BDB0E6A
6452F5EE9D0DE6333C27F28975C67F23F61928603FC2C1D58153B35621413030
223D54E9A32FFBB1C999E2DA0D0E0D6C8C7941E7D725A0542F0D7F681BF30061
40D9E7C312D6188D585FFAE58E39D42DA029BE5391F41711ABCF9FD880209B1E
7634214CB36C805969FF461ABD755EBD5D2667CE9F83D9775D8C196969B9B908
9CCCF80F6B70EDDB6330756507D8BDB3F97266E6A31040AE138A846700DFB32D
B77E1DA2E2F92EB1890FE6BB060A0F1F95049EA586108E04BAB903A27ED40644
4AF8B04DB5CFFEF61E557A302BAF9183DC66E9B2499EFD2A7F26118083387756
292B8DB08399673F0DC75F1BDBE806E51B2945DB178B8B045489489D680E10D2
95F544E3FCF67EA5E48F3FE295341A5EEE215A9235D7BE44C25DD2EFAFC07AC6
240637BA69C7965DC0D8F8B86692D45186394E0A16146FAA8ACC9B26296657E7
F047BFE6E513E36230A5D59F7B12715788AE98B33E45E047DA7B5DD9D12ECA7A
52DC088CB5C55044FDE2392FAEE322BC4CAC6D4E4A9050298221CBE512CE8C98
E5474F5352862DD7B020386F204E902B6E70FC4F09CF5FB5378DB453D8712019
83A437A38296607FD8695EADEE48282AA5852113C51CFC868E0BBFFBF0CCA7BF
4BADB8D4AE414A1410886EFF8D53B093FB6731C02D847D0A2374A0F4627ED82B
BB50568BF837ADD8939BE7366D1E3226749B9E23E4C2AE4B9E9C98163FA24443
34FB5421F839B7FE61A3E58CC805DEE17E24CD3CAF2ACCE51092BF2DBA049D4D
8127F35454F0AEF9860C44D57D6BCB474F0BBBF48FCFE67FFE11B1B608E7B049
40BD9FFD532BFEF2848396E65C074D0DDB702FABD13F17C5CE60E7CB5C20C369
95ABA438032624891D3480D1DDD171C3493629BB0C3892F3FF9C17FE6C5FAB68
358E1CD44D07C5AA9530A98D5F395ABF21E8BEB21A651AF68529C159446B402B
D62669E1941C5E92D8B56AA6C332F7A17BCD601EC96E1B88749EA069058F0565
07426542E24957C3274C829F239D989C9BF300A5B00ADA8E33534A2FD470E845
9380D70B0A49068334381267A2B06A906FE1F4332276B8583276639585F19E63
3F501A27D667AE834A96621C96054D87E003DECBCBF292935D5054317DD5178B
9FE7317DD798A36D0EACCB32BA0378D680490416A7048A811626E2A7306256A3
4012E907F57A5B907BF705812BC67B634D7D75F103143DC04D5B5E53D8568E79
11839EB05C8F4D2AD723328DC3238D11C2E2B2D73430906C34FAC4077EF8EADF
517C21CCBAD3E56801DB21DF90B45A73F62F5F2C842F48F0854805296C03C19A
04DD221C12FCE97ACAF584C6E8273A0A358EF12B2D5FA77789F403D80BC3FAB6
FCB8934A165F2B6E7741D38013EBC50112AE31FA9C7AA365AD94942E13B98254
DAFAA20930A9AFC70C91CD6B669F13F1C105A24227E179C9CD6222EFAB708AFF
0B8B7F8F600CA820DF8B4B5F9BEDA64134FFFBD3ACF8F5B633C8DF01ADEC2875
DD07EB2FD1975F9026380D917C5B86222FE50CF3AF690E1AD2E1C89B111C23F2
6F931512AA015585BF686210FE33ACB1E557F4A65A1D3BEA740FB42A7C35AE4D
D3A71AF7714E60CC8ACBDD3E54F17096F7B2CC1CCE1C8D8380E703AB74ECF5D1
FD330BA94DCAD931CC119B1833E519C3715CFF2AC4B9636485E1467125B7EB3C
9EEF561001051A26F3196B9A37048AEDBD06FD79BAEAB05CCF5B81D99CD34D14
2BB8ABB05975961FDDA498D72C313AEE1EFF147266263ADFB8BFD9B82DC0FDCB
A1C570ABF704C54C16328AC66A950BAC4222E996675E6821E49F573AF34881CF
8361FF7EA9D194CFEA0BB3FFC9520FB20473E0A6CA4BBC814DA57A2777B0CBA5
B895AB5D180826D66CD2A2164C2915E9F8F7D333B8C8129E29B9C5D8628963E4
D6288C5BBE9460EEF328F28C3219F383E3FCE1D75C25453C86FFA157193D708C
33166A90FB1A389A342272691743E2EC204EA0883B4272A2E6FFFE12A187496E
65E3B251FD4CF4FD2543B7E6F394D3D262DDCE224ADE3523107B077BAC69AA8D
C1EC35AF2C3E12674A53B3A2CBE271122518F8DEE14A3BB7EA013687ED3699AC
7410FFC33D6210481CDDD1FE7A73DCB151A03D2827D43237A0C9BA990CC24E36
417D3328DE32B65E6913C21849AA3EBDE263A05A625E1AEF542FBCAAE67903B8
C5CC99288333EFCB59D45103580B0471EBC511B67C789C795E97A53702CC9102
F72175CCC1B7662627E2EF8F7A74613FAA2AC13184AFD1623EB8E18670C89504
6FE4473189903F38D3F24C63EFD772D7911BFE4F5C2067E4206F8D4F3AF4B2C7
D95E63DA3C294C74DE1354672123916E7F4D46213FFC9EA229D6E9E8AF7B9C14
27815484BA6E80A78B0C28C68CAE5A330D8B9ABD2DA62F951C898CF665ABF045
E74379D67EC0B65DC51FE74ED1642B917B64E296D4E219A3597953634A1B5854
5DB7CD7B6E984DEE494A7B01B637E77EAF484C2129DBA464B57E4332F3DC5D5E
4706C542AAAF276BD5E6C65EB8B29B70C0831ADB61A92C2DB592CF08B3DE2FFB
350FE23759F4F6C873CE2D380084EF6C3C222E4BC5A1E32C91931AB233456796
F2AB712966A45666F81538719053F35A5681980B77285AF53F0C37CE00142A96
928493BE57CB29DC8DDC2993BAA42FC6432C74210CA2518EC226011E2C490B08
4581F7D59479FA08E914C67361FCBC32DF5AEA2374DD188181D9418504BD5904
95996771E3A5FCB1323C89FA3469B6FACDB84A9B3AC2AEB753B8335DC9C3B63F
4609652017B6EECB9B405908A7C8B57E6BCEB4CF0008880A16636FBC13AB9079
C7020C9AD568BE631D3D9DCA29DD97EB1FAB09D2ED3B9EE5A4CB26F5994D52FD
C46F77C4858809F513EE630DB0A4DB44991EAE6A5E1AB2F9C2FBE93E979D8C74
B1ACB91AA2B6F045BB8480972CF0DE416D863241758D0D5EA9018D8C02AE2F23
3B284EBB60B62D8A138CAB931B81EA650357939E4D61960B8408BF7CE6B50320
2AD177075BED882A1C80C2CEEDA53D58C697C487E3C9F825B5BD086A6E67DB42
64A151FDD348DC95893488E8AFB6DD253452964D7A9B5AD47C83C3B3F0C57F70
8838D9CBA9AE2002C322C3036D20EEE189E20C373A057CD51142D16EA7DC05D4
2B1D6A2AC0C7AE3925BB9317209E3468455B3206F74E70DB07312C298B0311EB
0CF132A9ABEBCA6DE058984E08E6072690863778DCE26559F010E4348F5AB441
D2D200B6E057C3608929F064DC8D1248AB8D2FBB710BAB8C582592422446E01A
E08BBAC909E4FAB9F9159005230E27702BF83306A033CA47DF917A074FD074B8
A96B726BDD4F72C6C0B4DB29181FADCD1CE20EA35EE4EBFB02668AC5DE573D55
79D61F45D03D5D37D781421DC5CCBC42782E8F4F5E0F66FF87EA3E36D8081D64
5083CB8C992985DB99D9BD2EC0035DF77B2944603F47BEFFD06259B256CD1A08
F62DF87657E99C50B78FAC6A62D7CE3CED36060BBA2543BCC45120D709C03618
8AF869E8D791FE3DCFC3E1A07E4EA9F9A0B885BDD576555B4CD763803AE6795B
23AF56A882AF8BB827F30EABDF8E4AF75FC848456161BC77B245ABEDD19E7444
F69437431B1A29274230E39961C7BEE80FF9D4C7CCD9314923F532E28EDC1F4E
C3D0E698D8240ACC8C23F82FA31232BF9D0CF9C597D22FF591A28B7D31C9DFFA
6DE25A5F5C5E63A8C771BFB759B5C405BED3E0DBD38B51D2621EA49608BEE2E7
92D2A33CEC3594D12DA96ED18F30DB190E4D004432ECB23A86621421E2B0DE3A
365F9948A115239FB86BFB4D9A6FA654E56E66BB882E67632F78E4EA659F5CDA
9E89CE37FB2A85057E484FC90BB66AB20D45D6A73676C01B1C0AE8EDF5D67770
223229E8A071E5B69D648993ABEEB2241FF5A5C95506778D68B22EB304526D4D
8AA2269EDC2D5F82436DB807D04413B317E6F789048BC0373F3DFEC0732A013E
D31F3791AA2F7760754D8ECEA334EE267256720D6CE4B4ABDBFCE9FC7C29EDCC
A10AB03099187ACC0F680A66AD1E5FD11929E44C07D03436CB49F934EAD47B45
692A4E102A09AB2960F8D54E965C4D8F99DE6CD69EFF58A2B1AD4803FA06B706
5EFA3285D927651C376B59B33F64821D2F4897F8E6BDF8674D52F1A498223006
A550EB524F2C173D867F89B9A683BEC462C4D7F52FC3B278571FEB0CB26D6172
499CDDCC90EA538A5526FD5AFF81D04BFA617D2BC65420878D644F5986795F8F
B41731AFD8088E76C5306671526361ED2C379A528BA81DFF14211B6E5FB42299
5BD023F95E71A2A3C258F7D7BE6DAFE1F3D2C9652B6F3A1C671D6471E07D4B70
D8A19389EF17F259FA8DEE902A5FCD732E2811C33A3468D93ED22B08D256D56A
476F1A5E8C10A3A63EFDBE4A15FD0D0C1948BA5671F0513AFA59C4B1D26C6EAE
8E4E226211219C690F3E74C958304A74E667C1C278B677DE3E822E02D8B0CDE8
2F4A49F7000A93E26823F80BD469AD6C685EB8A77528DEDC680A17F7B937A58A
9BB4E745B7AAE09F251A00E0F6B84128E703E733E079171084C4C610882FCB3F
B67F8843CC856B606CC19287478B4D215DB07F7726C499C80F74D8E14AED4F06
B3F1FB4AB16280601D4308FB33E3629CF4901504778CC6CAD142D172F4DAEC7B
E571C034FC578EFFC4E2DFB76CAEF16CD3EC1B045ABD80A941EAB8ABD8A953C6
B82258000B6D88AFEC97220365FC4125EB09CBED1C263140B0062DC0C4F50F47
55B4CB54F66271C697D7C732DA306F6F29C434F295B590C175574B600A768003
B60FECCE3E687FB5E10F98F1817548B36190D2CE0DADE480F494CDB21B6C9761
64FC320F322CB6B2DA0E1592C55D69BA4A04B118AF10776110E318873BED624E
3B01809EBBA6B2A5A6D96F9F2221E85020131163F32645F6DA1FB7CB19D5C7ED
23A3308BC012A670F78AEC964FC69D5B65E1A226D43021EFA91619589B3D213D
C74828CFB704223D0792C9E78F1F0B694F1EB9DB7A136CADA3BD46CB6BAF687D
B29985A7BA9571402CECFACDC211069ED4C597C58A5C5CB6983EDA32B21A2B37
71D04D150E58B6C7A67CD65AA53D6253DACDEA33953718948E036F8D23DFE46F
F64199038C006B74DD8D060CE5FE0B0EAFE7895FB547FA8D8E2EC2BE15336C1B
2C006DA31157A5F29919F2AC3F4754E28F4ECADB49A2563EDF1C8A9B5D1C1367
07205E79994EE97FDE6F0CED4BFA0AD4C64DA15F0FE869EA06DE5F31C9B8DD52
70A72725DB46EA6B672C3C04BD62BBB72BD872061B3852B74B006793BC90615D
C552B796D4DB3168F736647968BDA608B66BAE07DEC4257E79DB4A990A02FB8D
8D33FAD0EFE99AC276C13A86EF3DEB036A0C69348DE5BC5F443EC06A1BBE8E64
81A48A9E0932D0BEDA65FE59ED0418F6CF07B28837D638BC0C2538B79B364BA4
6737C2A61A3B8F58CD63014155DB034B8E34D31851498AD5DFBBDFD2AD3A45C0
FC93D273C16FDAA7F052EE970546118C9BB6E9CAE04AE0DC2F648AD041AA0BD0
ED187ED261221685FA9742B0E84B66108A4313847DE49C212731C37A3C2AE2D2
161F1E4DF9EF7A02B92E75A564917C43FC46348B261B95188F292DD1DCF8FD65
A4B9AA807CD62FB2D0A95946ED2132F24B4E513D791E8ADC7F7B34824A7D11DC
D5168A7A13539C7C8DDB7BB49051AE90566F76305CD31DDAB1E54FFF4D1777AB
F5636F8D72DE44E436C25F2378F0E9537104DD0891BAE5F8F1366AD9915238A9
BBF118B4EAEE91BE0894F486DF1F538623CC7533EFB892191B63BB1087A81F73
D0BE06E4C10A43FAEC418E16536B30D75D3462EB461C609C8D47E7B999AED138
93D0673EDFDBA3BC2C570BF2009FEE980EC0F590365A0DFBCA0525709018CEF9
F5320B7994D064FF229DFCA831CE91258B1C760B7B24997744C211331156DC39
DACA22420A2B9ED27C588AC486A7BD8AD9994E963269C3DDF1A67170CB45F2AC
14CD007590D83A01C80C7E195EEDF6CA42F8B32E1766E712ABDD21FA514C6B9E
EF4C5804E7FDFBB5D0A20D24A428FD755892DA7996380563BF7A3B679EA85FEF
772477C54308169666AC6207D5DDD9206A3814C7FDB09D1CBB1186C1623C32C7
B1D38819E09E5C6F0C74712B2D95BB660F12E686C92C60EA329075C30D3F97A3
214A478933634C3A93B5567FFD39CA40BE4EBE0174BA827E7DBA957B50607DD6
39D9CC828F52311A94A494127574D9490729EED31E33CB9B2676234FCD139977
D35F2D3BF46894708191EB53F373EF24A82EDCEDCE509D926BD5E3C4F6E02F86
C309B823687C5E2EA018161D59EF87DBD4C9CA7CF989957A4EE648DD82C7C4D8
8EDE7093288AB410ACA8C41E720A6BF651D9F7ED759091062EED2A868E004E41
7D816DD580EC1CFA93D5D6087892FEE1D0B7EECA805A8ECC0029AB8BBC9E92F8
0B744761290E8ED0E49466DEE887E5C25190969E28179AE774047799C5B210BA
AAF8270E05F56CE8CCDC7BC2A8FBEAC4A8017A6E7BDE6BE19ECA60A308EF7B24
C163E19DF472705785EB671AD64DB34BB64C8FB7B7D4D75F85620061EB2DF447
2122948167369A5D2AFFBBEEA87AB0EB9BB484F8FCAFB65D189D875509DC93E3
0EA56145D44F2DC60EA9D0F7D62021E05D2622D1A385DED842C2A0642F862E14
B66919AFD491F98D81F5D112116C9B9732C4AF86476579DF658AC6B29DFE3AE3
C9A82CBC29FEDEE39359C351BA8960636ADF062E913ACB923B46148F1ECA353A
D07C79C3FDB67C73224A264FD6C27BE14D44097DD07D7C3342FCD849DC23A659
AFC6F867A0A6B787373E2BCD8E1EF3F81C1626E3E27941BE9A9E5A05F4709921
6EBF1FECB1618F16B372D050288238FCA051E250B48F6F080FB260EBACAEA07C
584D8929C20F1D7C1142E20F80965D8C0EA9A2C3E3124EF0F31AB7E5EF972F4B
57F86A2B78107086881CD9C93358A5126A722C3F6BC6FFD9738E65AC522064E7
863A3122F9B7F359AB3F7063896D3B578B279FB5BD2715859B5C81A2C07F42C5
3E8733A85F5D17558E784D18DFD9C56658965231411F110FCC1ED63C1CC6A8A1
8021D66F223A6ED2EAE1534A139466F7F62EFEBC5E1D9DD326A8BA7887152BA0
CD5C183F83685FEA73A87B94C7DFB7C0B58C7B93A5357D715FFA30FEBAC71554
BF239B9DFEF1751E7E403F5F91F911DDCFCED2D5582F2492FB67E4109D5E0A6D
CDDCB2E2124D53A2D5106DD8D7B5F6FDE3F2558FD1C5ADA269CDC8F237A292E6
0D013D2B072D8E552AA4CA3F840ECB11519B06EB4413026B6449836E6848549F
749658F1F5C0E3D442BD3D390986152A08E0681778521870E80CEA2A87AAD5CC
5FB7E9D67ACCBE7E57DAD79BDC506F66305DED851BC8F616A8DFBBD1A918985C
6DB6F33842F755D54A253FB2AE3D37E13E1C380E6BE5980537C58DB8E18E1A64
A349847AB61A8613AD96297DAE0F90750C0F2D3B286B540CD85D2F9FC4854399
444976F34F301F29BA4C8D85C255A2E1DAE4B0EF801C7E58F4F7247675B239A0
11245A07D0D22CDC2FD33501F62608528749250EFC6E60F4B88FD73A25C8AC75
DFD11AC91B0FEB0A7935943EA6979B84A0351E4EB3AB0F5AB60C42D174AE261D
BE91C2C6652FCA7A0FDC96AEB3D8B992DFBA6B5B4D3453B422FCEF96B5C7F91F
623FA9EA39DF033F8FA90DBA3D311263300AB0844D21B638617E269E4E9516BD
C07982DEC8AD1ED4C507F8978C284EDF4D385A5E94F122147F1F00F23B1ECA5D
3BEC8D03677B5EC78742FEFCE44BF6E8AE22EB1DFBE8CEAB5C2AC6C9EB8B8A03
57B309DF51CA751548BE122F618B549D11725B143F935D3F4FFDB31FDC40C05D
38F018C18D09F41D29EA8262E689C52530CB43926685FF502BB82AC23E5B302F
E20C658BE0541B647A5B45E0F1378D7CD1144867B579F69E34040E2AFF508CE7
AF4B0D544E746A7BAF0EE46A887C53B1B7D289B8CDAE74EE3FC78C9AA0D217C8
13D82DDFA79D31F0B4C968BF641CA66232C35AAD2F17CF56CFE53054123A2EA4
3BE82C2515FC2F7BEBDF5126EF9C99B76DCB93A22ABDB07F4A8774961F6B7D31
3B85FAF3DA286FC562708B598243CF05E5B0A1ADAABC17455426500E410A707E
FFB62B3DC047743FDD7A68BA6E0AE165799FDACE058BD83E1812576EAF7055BA
42AE163F8E1D74F0485CAF90627DC9C59A531995C9AE093B74A454F11A2E6A65
B3AE6141E48CDA07905337EE4000FBBD71CE8F0859A027391AB70C0DA77A7BDE
223F81AB143706B16F80AFDA8DB23A063708FD2F44F77B72C08658C9592D8254
2F3A4D25150C69833A45342B060E73B2E0629A64D6165CCE1C5F3DE922B435B4
D7D91EB1C63493DE4E99FF060225EE4706661DFEB5BA2B3B912183EAF0F9AFA9
C087F49944544BB50955FA096523B6CEAA9A832F35953919A174E4137F977C45
008D082AC5C1C042C30A19F6B3E0F22345B41EDB1AB566D810114DF2BA4733FE
3468186ECD90E254D1F7048E39C40A9C669AF43230F23A3D75CC86452838E4CE
128C80BDD1C0CB6B11609F94D2BD901631EC244E5A6369A138EA87977691A014
3566E950E9E27FA0B7B801D022BBC7901AF0C165851DDB7B0ECCFFCE5ECAB6A9
F4FFA8962BDEADEE061EC5BDAC1F08ED416C291545FDA84738BE165ADA429579
775551B9DFE9B1463C19F74C725A7BEAB0D625692FDB381912259272226C6CD8
C6E73D00C6B9B53A47A4F28598B0DF87DF883F9E5696F1B731E0A823E4028028
67650863347F4BB8B7DB12CBA2EDD2444E7B95E2C8856AE8195FC8239B752481
889C15FCE2AA98196EE768596D41382D0C52082D9D94ABB3045BE9D1BF39A278
6451A79F4041BAF2720D1061C700B3A64E10852B9B0DB60E36143CCBED5F9770
43EB6F06C1CAD1905E4B59FBC326791881A687A81459D9F977D17535A4C027BE
120DCAF394306E17DF2D9686FD4BAFB04B64A270284FC07C7D6430BEB2D8FF6C
3EC51309BBE7EF5AA771C5DD4BE1E394F11C287E08512E4DA456A8007578965C
38874886AAFCDD032CF548AE5A65EB236137AA91DAFAB985A242D866B9E1901D
4C0009D8560664BCE0EE2A9DD87BF3E8F14DB832CD335E9675AD414BA68E2F1F
44FDA78142048519B1B064227DB0A7AC8CDC3E1A94A0EE0C239A51B14278B603
6C02C5AB58C39F74D5F6BDFC3FF4A7503C35A0601778D5B805B48A1C3654CF39
9D000A3CC6E3FDD9786BB28EAF0C985FAEEC6E973561AB1F124160B55BE459FA
AEF6CF1F1B08290A4AE7FECDEBC7F26F2EAB5DD1DED1873BFCFF00B0BF23BEEE
D4623CBF18B990555BE6A705C385C4E62710DA03EC7698881985812956012183
34ECE28D9E58369BD6AD48EC50F3B738C66D04B0B39C8F0FE2E8A6DDBC8A1C12
B685462B5D7862FD4DE028A8861FBCE5C55D0404F271CD248B870CA91A799804
42A0C092039877400C761C7C2ABE218CBD0DB398BF5A94834C4EEF360C0D887D
8C251E03475B506239D0B4E48DBD305DEDCA21D2AB878551E23059425D84B2DF
B21904EC52A03E367E56396F2CAB161B11003A4D5A6099CFD9ED862818FB4114
BC6DF37DCFE054E2372D561A6293BD291B64C34D9FB3571A7802E808D3A5290D
1CB1C85A8463DA02A968DB3DB97ECF9E6EC8F51ACB4086B88F1749EBCBAC4631
14AD7C8D6FB6D6624BE3C86F9764E9D74E6DD5998CA7071680693110956F120F
799A10FE8FA0A085CEC705A2EB89D75647FC038173BA5E109BB5C4FD67FDF45B
0D4A5E1062D3D024F9F077132817C76392724291F2144A29C43E1E21EE97697E
F973A03EDF3D13987AD9364310D6C7C98EA4525AFF9E1294AEABCBC225936647
BC68292F70B3E51536CF1B42B5F41E8F864A7F3084DD066733EB83FF0EE848B4
B5C2841E6DF2712A97D8FA0E198FA27CEC7B81D63B9F77CCC75907600D869062
48900EE848E9CAA614E7A0D00144B44736C20B147E9288D3B5B01D0CC0181DA4
5FD05CC5CDB41EBC4C735A2BF5454FE871CF43BCEC445B9CE74ACE92E6E43046
FEE25B2F976E5399E665CFE9FC948BC7A2097DEAF47322A69BD21ED8EB0BF9C9
FBE83A9A388ECC5758C392C7C3827F1378F990231066888C7964EF971A7AE62E
CDB7C8E746969D510B126344AFB54F4CD160E676E300BC08C0EE4916D7992E15
D08F0C69616B716B90907F832A14F2946813D6DC118CADA4B77AA6F81A27199E
7BDB9B202A7FA2411D13ECBE5D8E06B06660D89D22345C1DDE462E3165DBA71D
4B82C61FCB9E7659E27248DB7CF03B60C881ACF0462F9C46D76722F6E7104864
CA2A2E99F5CC0FB1BA37A1DF5D10E5CBE5E2AEEC2B07CA95D3C8C7DA1F41FEC6
53F131CB4AD504729B4D250E141A68B6754AEF3B65BF757F6999EC9D21C4CE14
300EBFC78D2B1405008C69709EADB25642D64EADDC61038647AC52D310C58FC9
11776302458EC16F38510C57F62179E1D75DF5389C8D1D214C828027A755C7AF
A8E84F3F8E7140B9831751DB3F9945EEC540AD707037A8C7CCFF80E27A576ECD
23066881D4290252127FA2F95268ED9EA06A5D6CBD507826AE3C493B92B7D8C2
BECC9F1389E154FD8B47B81EB5DA64BC30184FBD7E734852A1C784D981400F9A
C9F012CCB50A61618E8F8BAFFCA134948EA095CF3B06759F2E6E11EEE36F4DED
DF7D88DEC4FC676F64A302DB29CF95A27A867C2B929CD3E93AB9B2282BE51C7D
E63F4DC383F2594AA79CF67F465C935AB22D0F80AE0416210E0375EC761BD5BC
665AEBC73CADBD5C276A4FE927E18A8D69179FB1350022E385756DC26F5F06D5
04864B22819A2D39BC96ECB13E3FFD6AABDD4D235962800C0EACC82A1647964B
067EEFF2069CE757C84F2EB7E4959F1000534B32219362CBFA22A22166637D97
33A55D009B263BDCDCADDE6E4BD1D1BF0AB28AFC16A6D00AECED8557EE162F18
B0E230CB2115317F860CA3C86B50AA302D330912C3096974CDFE9EC79AC74A4C
98D2644CCA2CF6188C05041A0895EA21BE04FD475B541D53FA5EED7811962AD0
8A13CF0DF2667EAB001AFD5C5418648E774C1CD52FDBF09C34772D44A89BD8FB
05FE9F8D2D79FA07E143697D87281CE27ACBB7632F587844F40FD2CFF0CF6B95
2BC50BCE952DB34C56384392A0B24A8E5EC411DA45A62C8B6CD6D076370260E9
849C37C231CD8CF12F4442C03BFA776015142B544B2D888E3E24C8AAA0190182
797E60418AA4D6E718BFFD8B5E232F638C6C50673734484DD7C986AB12A767F6
7E4684F0368F7432940BC5E402C419FB065D1EC4A99CD54145EDCE8CE8C0CD03
F6C26B398ED3EFE46A4D6DA5CB6E2CF2CD24218993329FE749AB039FA291DA02
D72572EFEE4BDAF33E9C02DF05349624369F7AF12CFB2C8381E13CB69A8349DC
A0E12E5B32704FD4CA6C71C30C19399E288D49E36827DF72BC3B25C2A15C2DEE
572BDA14694BB379BDC806DC0EB5D4616B6DA42514A9A840BDCB6A5E03651928
2F4EE00E0E0335783812075FBE7CC3B6C648E57A4CADB955D502281260F70A07
DDA0D735459FFCFA5A813CA8C41C860B70833B9275DFB0D949E36CE3635CDD1D
D90414B271852B59993A3C045B71221511270D97F3B678583D8333D118625A95
7A46918DADC4508BF02CD5A8D2E2E5CA86991C66FBE6C1B009757C12503A6C39
5390ECF5C8F6885A42CC10076A39275F2EE9F50DCDE6BB3CB6C23A08F58AD9E1
114BB60FEA5B547323D24116A6DC7F4A4C2003B5B4B27A7BBE389213F79D6D26
0BA21575D385E5440EAFDF090205256BEB8446AAFA4E922C96E79EB210AE6645
154EC1B30B318967774519986F39ECB2092B445619E9F0A17E88D7956FB4ED64
CD18471A491CA758DC790BB543AC36BB677FC67ED73119A88F3B545C0AD12808
5AE31D62C6C3EA48C4928FDF5F6A1851B95154240173EC883AA50A6B29750084
F94BBE71AC6D66BA0971338E025CA3A3287089334B0E3328D4194C22CBB37D11
924AAF00565E874E5675CDE36AB9E1CA8A361F37ED5010D26787F5E9943682A5
16420658B31359B8D8252051FD4718CB2398C5A934DE4CDD8DEA8A289664062D
29D19A89B5D0759941E4F02F3C62C383D4C056CE60A641E2E10AE115E5E94F53
86C40D20ED17F0E48F385D3C6ED7430EE7B3C800DB741973A595120846FFCEFE
3A60176A8E699B922E55705DE1FDD7B848A7CC85230954C93C2D93ECF503EA44
3E0C8B42142FE23F9C4D2A0166FB3B0E7AE4B124605BD8DB627F7A4D5FD65F95
3DF292CACA5244789CB43178D4C12A0963241AB41375BB68E104FE76
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000
(C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktional)
@start /Fa 238[661 661 16[{ enclmmathex ReEncodeFont }2
1106.96 /LMMathExtension10-Regular rf /Fb 214[430 430
40[{ enclmrm ReEncodeFont }2 1106.96 /LMRoman10-Regular
rf /Fc 135[633 17[542 102[{ enclmmathit ReEncodeFont }2
1106.96 /LMMathItalic10-Regular rf /Fd 165[886 7[959
82[{}2 1328.35 /MSBM10 rf /Fe 204[406 406 406 49[{
 enclmrm ReEncodeFont }3 664.176 /LMRoman6-Regular rf
/Ff 242[1594 13[{ enclmmathsy ReEncodeFont }1 1594.02
/LMMathSymbols10-Regular rf /Fg 135[530 17[452 21[597
1[747 11[710 705 65[{ enclmmathit ReEncodeFont }6 885.568
/LMMathItalic8-Regular rf /Fh 203[993 1[993 50[{}2 1328.35
/wasy10 rf /Fi 185[723 4[830 11[553 3[553 2[307 46[{
 enclmec ReEncodeFont }5 1106.96 /LMRoman10-Regular rf
/Fj 160[909 45[606 1[606 47[{ enclmec ReEncodeFont }3
1212.12 /LMRoman10-Regular rf /Fk 255[732{ enclmmathsy ReEncodeFont }1
885.568 /LMMathSymbols8-Regular rf /Fl 198[470 470 470
470 470 470 470 470 470 470 48[{ enclmrm ReEncodeFont }10
885.568 /LMRoman8-Regular rf /Fm 133[604 634 739 9[776
3[538 444 749 623 641 3[553 683 9[1228 2[762 2[1030 838
7[1078 5[988 975 2[1012 650 1012 361 59[{ enclmmathit ReEncodeFont }22
1328.35 /LMMathItalic12-Regular rf /Fn 145[664 3[369
2[664 664 47[0 3[886 1328 7[1328 19[1033 1033 4[664 13[369
1033{ enclmmathsy ReEncodeFont }13 1328.35 /LMMathSymbols10-Regular
rf /Fo 140[513 4[723 4[361 11[361 1[361 29[1012 1[361
1[650 650 1[650 650 650 650 650 650 650 4[1012 1[506
506 40[{ enclmrm ReEncodeFont }19 1328.35 /LMRoman12-Regular
rf /Fp 3[723 5[650 17[650 105[578 686 686 939 686 723
506 513 506 686 723 650 723 1084 361 686 397 361 723
650 397 578 723 578 723 650 6[795 2[1336 2[939 723 2[885
1012 975 1192 1[1011 1[469 975 1021 849 885 993 939 921
975 1[614 1[1012 2[361 650 650 650 650 650 650 650 650
650 650 650 361 434 361 1012 1[506 506 6[361 4[723 759
27[{ enclmec ReEncodeFont }70 1328.35 /LMRoman12-Regular
rf /Fq 3[1196 129[956 1136 2[1136 1196 837 849 879 1[1196
1076 1196 1793 598 1136 1[598 1196 1076 658 982 1196
956 1196 1046 6[1315 2[2223 2[1497 1196 1[1616 1470 1616
1682 2041 1293 1685 1[801 1682 1691 1353 1412 1649 1554
1530 1625 7[1076 1076 1076 1076 1076 1076 1076 1076 1076
1076 1076 598 717 45[{ enclmec ReEncodeFont }56 1912.83
/LMRoman12-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-2331 165 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a -2331
165 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a 1328 x Fq(F)-239
b(A)717 b(1.5)g(-)h(1)f(F)-179 b(unktion)715 b(skizzieren)h(-)i(O)-60
b(A)717 b(-)h(MK)p 0 TeXcolorgray -741 4800 a Fp(1.)p
0 TeXcolorgray 651 w(Skizziere)434 b(den)f(Graph)g(einer)g(F)-108
b(unktion)433 b(mit)g(folgenden)h(Eigensc)-36 b(haften:)p
0 TeXcolorgray 0 TeXcolorgray 5637 8453 a(De\034nitionsmenge:)434
b Fo([)8 b Fn(\000)p Fo(3;)221 b(4])p Fp(,)436 b(W)-108
b(ertemenge:)434 b Fo([)8 b(1;)221 b(3])p Fp(,)435 b(Maxim)-36
b(um:)434 b Fo(\(0)p Fm(=)p Fo(3\))p 0 TeXcolorgray 0
TeXcolorgray 3170 36608 a
 currentpoint currentpoint translate 0.83128 0.83128 scale neg exch
neg exch translate
 3170 36608 a 3170 36608 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 439.87958 a add def
/d 0.0 a add neg def /h 245.83168 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 3170
36608 a 27737 27286 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -56.90549 T 9 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 217.9481 0.0 -221.93147 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -199.1692 0.0 T 16
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 161.61137 0.0 -84.2203   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 217.9481  0 -221.93147  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -221.93147
 217.9481  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-84.2203  def /maxTickline 161.61137  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 1.5 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 161.61137
0.0 -84.2203   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 217.9481
0.0 -221.93147 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5
2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 161.61137  0 -84.2203  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -84.2203
 161.61137  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-221.93147  def /maxTickline 217.9481  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 1.5 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 161.61137
0.0 -84.2203   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW
mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.4 1.4 1.5 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 217.9481
0.0 -221.93147 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5
2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 26492 24421 a
Fl(1)26491 21272 y(2)26491 18122 y(3)26491 14972 y(4)26491
11823 y(5)25760 30674 y Fk(\000)p Fl(1)25760 33824 y
Fk(\000)p Fl(2)30651 28631 y(1)2680 b(2)f(3)h(4)g(5)f(6)h(7)-26033
b Fk(\000)p Fl(1)-4352 b Fk(\000)p Fl(2)h Fk(\000)p Fl(3)f
Fk(\000)p Fl(4)h Fk(\000)p Fl(5)f Fk(\000)p Fl(6)g Fk(\000)p
Fl(7)27737 27286 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 27737 27286 a 27737 27286 a
tx@Dict begin  { 217.9481 161.61137 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 27737
27286 a 27737 27286 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 27737 27286 a 27394 27571 a Fp(x)27737
27286 y
tx@Dict begin  PutEnd  end
 27737 27286 a 27737 27286 a
tx@Dict begin  PutEnd  end
 27737 27286 a 27737
27286 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 27737 27286 a 27737 27286 a
tx@Dict begin  { 0.0 0.0 pop 217.9481 161.61137 exch pop } PutCoor
PutBegin  end
 27737 27286 a 27737
27286 a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 27737 27286 a 27394 27443 a Fp(y)27737 27286
y
tx@Dict begin  PutEnd  end
 27737 27286 a 27737 27286 a
tx@Dict begin  PutEnd  end
 27737 27286 a 51863 36608
a
currentpoint initclip moveto
 51863 36608 a 3170 36608 a
 currentpoint currentpoint translate 1 0.83128 div 1 0.83128 div scale
neg exch neg exch translate
 3170 36608 a 47992 4800
a Fj(___/1)p 1 0 0 TeXcolorrgb 48228 6792 a Fi(F)-123
b(A)369 b(1.5)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 38645 54804 45 v 0 TeXcolorgray 24746
81281 a Fp(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fq(F)-239 b(A)706 b(1.5)h(-)g(2)f(F)-179
b(unktionseigensc)-60 b(haften)702 b(erk)-60 b(ennen)705
b(-)i(MC)g(-)g(BIFIE)p 0 TeXcolorgray -741 4800 a Fp(2.)p
0 TeXcolorgray 651 w(Gegeb)36 b(en)433 b(ist)h(die)f(F)-108
b(unktion)433 b Fm(f)575 b Fp(mit)434 b Fm(f)142 b Fo(\()p
Fm(x)p Fo(\))369 b(=)f Fm(x)24319 4318 y Fl(3)25140 4800
y Fn(\000)296 b Fo(2)p Fm(x)f Fo(+)g(3)p Fp(.)921 9338
y(Kreuze)433 b(die)h(b)36 b(eiden)433 b(f\374r)g(die)h(F)-108
b(unktion)433 b Fm(f)575 b Fp(zutre\033enden)432 b(A)-36
b(ussagen)433 b(an!)p 2089 10305 42207 45 v 2089 13375
45 3071 v 2797 12172 a(Die)h(F)-108 b(unktion)433 b Fm(f)576
b Fp(ist)433 b(an)h(jeder)f(Stelle)h(monoton)g(fallend.)p
41886 13375 V 44251 13375 V 2089 13419 42207 45 v 2089
16490 45 3071 v 2797 15287 a(Die)g(F)-108 b(unktion)433
b Fm(f)576 b Fp(b)36 b(esitzt)433 b(k)-36 b(ein)434 b(lokales)h(Maxim)
-36 b(um.)p 41886 16490 V 44251 16490 V 2089 16534 42207
45 v 2089 19752 45 3219 v 2797 18475 a(Der)434 b(Graph)e(der)h(F)-108
b(unktion)433 b Fm(f)576 b Fp(geh)-36 b(t)433 b(durc)-36
b(h)432 b Fm(P)550 b Fo(=)369 b(\(0)p Fn(j)p Fo(3\))p
Fp(.)p 41886 19752 V 1 0 0 TeXcolorrgb 11914 w Fh(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 44251
19752 V 2089 19796 42207 45 v 2089 36612 45 16816 v 2797
21664 a Fp(Eine)434 b(Skizze)g(des)f(Graphen)f(der)h(F)-108
b(unktion)433 b Fm(f)575 b Fp(k)-36 b(\366nn)g(te)434
b(wie)g(folgt)h(aussehen:)15938 35667 y
 currentpoint currentpoint translate 0.48615 0.48615 scale neg exch
neg exch translate
 15938 35667 a
15938 35667 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 225.65303 a add def
/d 0.0 a add neg def /h 253.35558 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 15938 35667 a 29563 30852 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 102.56636  0 -123.08667  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -123.08667
 102.56636  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-43.4988  def /maxTickline 209.85678  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 209.85678
0.0 -43.4988   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 102.56636
0.0 -123.08667 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 209.85678  0 -43.4988  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -43.4988
 209.85678  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-123.08667  def /maxTickline 102.56636  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 209.85678
0.0 -43.4988   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 102.56636
0.0 -123.08667 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 28318 27988 a
Fl(1)28317 24838 y(2)28317 21688 y(3)28317 18539 y(4)28317
15389 y(5)28317 12240 y(6)28317 9090 y(7)27586 34241
y Fk(\000)p Fl(1)32477 32197 y(1)2680 b(2)f(3)-13434
b Fk(\000)p Fl(1)-4352 b Fk(\000)p Fl(2)h Fk(\000)p Fl(3)f
Fk(\000)p Fl(4)29563 30852 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 29563 30852 a 29563 30852
a
tx@Dict begin  { 102.56636 209.85678 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 29563 30852 a 29563 30852 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 29563 30852 a 29220 31138
a Fp(x)29563 30852 y
tx@Dict begin  PutEnd  end
 29563 30852 a 29563 30852 a
tx@Dict begin  PutEnd  end
 29563
30852 a 29563 30852 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 29563 30852 a 29563 30852 a
tx@Dict begin  { 0.0 0.0 pop 102.56636 209.85678 exch pop } PutCoor
PutBegin  end
 29563
30852 a 29563 30852 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 29563 30852 a 28515 31184 a Fp(f\(x\))29563
30852 y
tx@Dict begin  PutEnd  end
 29563 30852 a 29563 30852 a
tx@Dict begin  PutEnd  end
 29563 30852 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -4.326002991348994 def /x1 3.604793321575732
def /dx x1 x sub 199 div def /F@pstplot (x^(3.0)-2.0*x+3.0)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 0.4 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 29563 30852 a
tx@Dict begin  { 32.0497 108.61545 } PutCoor PutBegin  end
 29563 30852 a
922 x Fm(f)29563 30852 y
tx@Dict begin  PutEnd  end
 29563 30852 a 40916 35667 a
currentpoint initclip moveto

40916 35667 a 15938 35667 a
 currentpoint currentpoint translate 1 0.48615 div 1 0.48615 div scale
neg exch neg exch translate
 15938 35667 a 41886 36612
45 16816 v 1 0 0 TeXcolorrgb 42594 28536 a Fh(4)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 44251 36612
V 2089 36656 42207 45 v 2089 53879 45 17224 v 2797 38523
a Fp(Die)434 b(Skizze)h(des)e(Graphen)f(der)h(F)-108
b(unktion)433 b Fm(f)575 b Fp(k)-36 b(\366nn)g(te)433
b(wie)i(folgt)g(aussehen:)15630 52934 y
 currentpoint currentpoint translate 0.4831 0.4831 scale neg exch neg
exch translate
 15630 52934 a
15630 52934 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 227.08228 a add def
/d 0.0 a add neg def /h 262.58047 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 15630 52934 a 30152 47850 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 95.90079  0 -131.18149  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -131.18149
 95.90079  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-45.92789  def /maxTickline 216.65259  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 216.65259
0.0 -45.92789   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 95.90079
0.0 -131.18149 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 216.65259  0 -45.92789  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -45.92789
 216.65259  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-131.18149  def /maxTickline 95.90079  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 216.65259
0.0 -45.92789   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 95.90079
0.0 -131.18149 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 28907 44986 a
Fl(1)28906 41836 y(2)28906 38687 y(3)28906 35537 y(4)28906
32388 y(5)28906 29238 y(6)28906 26088 y(7)28174 51239
y Fk(\000)p Fl(1)33066 49196 y(1)2680 b(2)f(3)-13434
b Fk(\000)p Fl(1)-4352 b Fk(\000)p Fl(2)h Fk(\000)p Fl(3)f
Fk(\000)p Fl(4)30152 47850 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 30152 47850 a 30152 47850
a
tx@Dict begin  { 95.90079 216.65259 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 30152 47850 a 30152 47850 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 30152 47850 a 29809 48136
a Fp(x)30152 47850 y
tx@Dict begin  PutEnd  end
 30152 47850 a 30152 47850 a
tx@Dict begin  PutEnd  end
 30152
47850 a 30152 47850 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 30152 47850 a 30152 47850 a
tx@Dict begin  { 0.0 0.0 pop 95.90079 216.65259 exch pop } PutCoor
PutBegin  end
 30152
47850 a 30152 47850 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 30152 47850 a 29104 48182 a Fp(f\(x\))30152
47850 y
tx@Dict begin  PutEnd  end
 30152 47850 a 30152 47850 a
tx@Dict begin  PutEnd  end
 30152 47850 a 30152
47850 a
tx@Dict begin  { -59.66367 133.12823 } PutCoor PutBegin  end
 30152 47850 a 923 x Fm(f)30152 47850 y
tx@Dict begin  PutEnd  end
 30152
47850 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -4.610506737485461 def /x1 3.370532627063107
def /dx x1 x sub 199 div def /F@pstplot (-1.0000000000000007*x^(3.0)+1.2320704279452426E-15*x^(2.0)+2.0000000000000004*x+2.999999999999999)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 0.4 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 40767
52934 a
currentpoint initclip moveto
 40767 52934 a 15630 52934 a
 currentpoint currentpoint translate 1 0.4831 div 1 0.4831 div scale
neg exch neg exch translate
 15630 52934 a 41886
53879 45 17224 v 44251 53879 V 2089 53923 42207 45 v
47992 4800 a Fj(___/1)p 1 0 0 TeXcolorrgb 48228 6792
a Fi(F)-123 b(A)369 b(1.5)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 57952 54804 45 v 0 TeXcolorgray
24746 81281 a Fp(2)p 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fq(F)-239 b(A)717 b(1.5)g(-)h(3)f(P)-60
b(olynomfunktion)714 b(4.)j(Grades)g(-)h(MC)g(-)f(BIFIE)p
0 TeXcolorgray -741 4800 a Fp(3.)p 0 TeXcolorgray 651
w(Die)509 b(nac)-36 b(hstehende)508 b(Abbildung)f(zeigt)j(den)e
(Graphen)f(einer)h(P)-36 b(olynomfunktion)510 b Fm(f)142
b Fp(,)509 b(die)887 6792 y(v)-36 b(om)434 b(Grad)f(4)h(ist.)p
0 TeXcolorgray 0 TeXcolorgray 11755 28234 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 210.55054 a add def
/d 0.0 a add neg def /h 174.69981 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 11755 28234
a 23535 23510 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -28.45274 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 104.13713 0.0 -106.4134 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 132.0207 0.0 -42.67911   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 104.13713  0 -106.4134  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -106.4134
 104.13713  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-42.67911  def /maxTickline 132.0207  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 132.0207
0.0 -42.67911   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 104.13713
0.0 -106.4134 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 132.0207  0 -42.67911  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -42.67911
 132.0207  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-106.4134  def /maxTickline 104.13713  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 132.0207
0.0 -42.67911   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 104.13713
0.0 -106.4134 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 22290 20645 a
Fl(1)22289 17496 y(2)22289 14346 y(3)22289 11197 y(4)21557
26899 y Fk(\000)p Fl(1)26449 24855 y(1)2680 b(2)f(3)-13434
b Fk(\000)p Fl(1)-4352 b Fk(\000)p Fl(2)h Fk(\000)p Fl(3)23535
23510 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 23535 23510 a 23535 23510 a
tx@Dict begin  { 104.13713 132.0207 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 23535 23510 a 23535
23510 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 23535 23510 a 23192 23796 a Fp(x)23535 23510
y
tx@Dict begin  PutEnd  end
 23535 23510 a 23535 23510 a
tx@Dict begin  PutEnd  end
 23535 23510 a 23535 23510
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 23535 23510 a 23535 23510 a
tx@Dict begin  { 0.0 0.0 pop 104.13713 132.0207 exch pop } PutCoor
PutBegin  end
 23535 23510 a 23535 23510
a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 23535 23510 a 22487 23842 a Fp(f\(x\))23535 23510 y
tx@Dict begin  PutEnd  end

23535 23510 a 23535 23510 a
tx@Dict begin  PutEnd  end
 23535 23510 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.7400000000000007 def /x1 3.660000000000002
def /dx x1 x sub 199 div def /F@pstplot (-0.26041666666666674*x^(4.0)-1.5945921863897833E-17*x^(3.0)+2.041666666666667*x^(2.0)+6.378368745559133E-17*x)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 0.4 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 23535 23510 a
tx@Dict begin  { -38.69574 109.8276 } PutCoor PutBegin  end
 23535 23510 a
922 x Fm(f)23535 23510 y
tx@Dict begin  PutEnd  end
 23535 23510 a 35062 28234 a
currentpoint initclip moveto

35062 28234 a 921 32219 a Fp(Kreuze)433 b(die)h(b)36
b(eiden)433 b(f\374r)g(die)h(F)-108 b(unktion)433 b Fm(f)575
b Fp(zutre\033enden)432 b(A)-36 b(ussagen)433 b(an!)p
1062 33185 44260 45 v 1062 36248 45 3064 v 1770 35045
a(Die)i(F)-108 b(unktion)433 b(b)36 b(esitzt)433 b(drei)g(W)-108
b(endepunkte.)p 42912 36248 V 45277 36248 V 1062 36293
44260 45 v 1062 39356 45 3064 v 1770 38153 a(Die)435
b(F)-108 b(unktion)433 b(ist)g(symmetrisc)-36 b(h)434
b(b)36 b(ez\374glic)-36 b(h)433 b(der)g Fm(y)48 b Fp(-A)-36
b(c)g(hse.)p 42912 39356 V 1 0 0 TeXcolorrgb 43621 38156
a Fh(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
45277 39356 V 1062 39400 44260 45 v 1062 42618 45 3219
v 1770 41341 a Fp(Die)435 b(F)-108 b(unktion)433 b(ist)g(streng)g
(monoton)h(steigend)f(f\374r)h Fm(x)369 b Fn(2)g Fo([)8
b(0;)221 b(4])p Fp(.)p 42912 42618 V 45277 42618 V 1062
42663 44260 45 v 1062 47459 45 4797 v 1770 44522 a(Die)350
b(F)-108 b(unktion)347 b(b)36 b(esitzt)349 b(einen)f(W)-108
b(endepunkt,)347 b(der)h(gleic)-36 b(hzeitig)350 b(auc)-36
b(h)348 b(Tiefpunkt)1770 46514 y(ist.)p 42912 47459 V
45277 47459 V 1062 47504 44260 45 v 1062 50308 45 2805
v 1770 49363 a(Die)435 b(F)-108 b(unktion)433 b(hat)g(drei)g
(Nullstellen.)p 42912 50308 V 1 0 0 TeXcolorrgb 43621
49238 a Fh(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 45277 50308 V 1062 50353 44260 45 v 47992
4800 a Fj(___/1)p 1 0 0 TeXcolorrgb 48228 6792 a Fi(F)-123
b(A)369 b(1.5)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 54381 54804 45 v 0 TeXcolorgray 24746
81281 a Fp(3)p 0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fq(F)-239 b(A)635 b(1.5)f(-)i(4)f(Monotonie)e
(einer)h(linearen)g(F)-179 b(unktion)632 b(-)j(L)-179
b(T)634 b(-)i(BIFIE)p 0 TeXcolorgray -741 4800 a Fp(4.)p
0 TeXcolorgray 651 w(Gegeb)36 b(en)547 b(ist)h(die)g(Gerade)g(mit)g
(der)f(Gleic)-36 b(h)g(ung)547 b Fm(y)612 b Fo(=)563
b Fn(\000)p Fo(2)p Fm(x)374 b Fo(+)e(4)p Fp(.)550 b(A)-36
b(uf)548 b(dieser)f(Geraden)921 6792 y(liegen)434 b(die)g(Punkte)f
Fm(A)369 b Fo(=)f(\()p Fm(x)15205 6991 y Fg(A)15966 6792
y Fn(j)p Fm(y)16969 6991 y Fg(A)17729 6792 y Fo(\))433
b Fp(und)g Fm(B)j Fo(=)368 b(\()p Fm(x)25319 6991 y Fg(B)26128
6792 y Fn(j)p Fm(y)27131 6991 y Fg(B)27940 6792 y Fo(\))p
Fp(.)921 11330 y(Erg\344nze)358 b(die)h(T)-108 b(extl\374c)-36
b(k)g(en)358 b(im)g(folgenden)h(Satz)f(durc)-36 b(h)357
b(Ankreuzen)g(der)h(jew)-36 b(eils)360 b(ric)-36 b(h)g(tigen)921
13322 y(Satzteile)434 b(so,)g(dass)g(eine)f(mathematisc)-36
b(h)434 b(k)-36 b(orrekte)434 b(A)-36 b(ussage)434 b(en)-36
b(tsteh)g(t!)855 16812 y(W)-108 b(enn)432 b Fm(x)5278
17011 y Fg(A)6408 16812 y Fm(<)368 b(x)8527 17011 y Fg(B)9770
16812 y Fp(ist,)434 b(gilt)p 14474 16812 3150 45 v 18095
16764 a(1)17623 16812 y Ff(\015)p 19217 16812 V 3584
w Fp(,)f(w)-36 b(eil)435 b(die)e(Gerade)p 33034 16812
V 36656 16764 a(2)36184 16812 y Ff(\015)p 37778 16812
V 3583 w Fp(ist.)p 0 TeXcolorgray 0 TeXcolorgray 12357
18184 8803 45 v 12357 21268 45 3085 v 16433 19966 a(1)15961
20014 y Ff(\015)p 21115 21268 V 12357 21313 8803 45 v
12357 24572 45 3260 v 13066 23369 a Fm(y)13700 23568
y Fg(A)14829 23369 y Fm(<)369 b(y)16844 23568 y Fg(B)p
18750 24572 V 19459 23274 a Fh(2)p 21115 24572 V 12357
24616 8803 45 v 12357 27875 45 3260 v 13066 26672 a Fm(y)13700
26871 y Fg(A)14829 26672 y Fo(=)g Fm(y)16844 26871 y
Fg(B)p 18750 27875 V 19459 26578 a Fh(2)p 21115 27875
V 12357 27920 8803 45 v 12357 31179 45 3260 v 13066 29976
a Fm(y)13700 30175 y Fg(A)14829 29976 y Fm(>)g(y)16844
30175 y Fg(B)p 18750 31179 V 1 0 0 TeXcolorrgb 19459
29881 a Fh(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 21115 31179 V 12357 31223 8803 45 v 0 TeXcolorgray
0 TeXcolorgray 30427 18184 13834 45 v 30427 21268 45
3085 v 37018 19966 a Fp(2)36546 20014 y Ff(\015)p 44216
21268 V 30427 21313 13834 45 v 30427 24572 45 3260 v
31135 23369 a Fp(monoton)434 b(steigend)p 41851 24572
V 42559 23274 a Fh(2)p 44216 24572 V 30427 24616 13834
45 v 30427 27875 45 3260 v 31135 26672 a Fp(monoton)g(fallend)p
41851 27875 V 1 0 0 TeXcolorrgb 42559 26578 a Fh(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 44216
27875 V 30427 27920 13834 45 v 30427 31179 45 3260 v
31135 29976 a Fp(k)-36 b(onstan)g(t)p 41851 31179 V 42559
29881 a Fh(2)p 44216 31179 V 30427 31223 13834 45 v 47992
4800 a Fj(___/1)p 1 0 0 TeXcolorrgb 48228 6792 a Fi(F)-123
b(A)369 b(1.5)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 35251 54804 45 v -2331 40553 a Fq(F)-239
b(A)871 b(1.5)g(-)h(5)g(A)-60 b(c)g(hsensc)g(hnittpunkte)868
b(eines)i(F)-179 b(unktionsgraphen)868 b(-)-2331 43575
y(MC)718 b(-)g(BIFIE)p 0 TeXcolorgray -741 46882 a Fp(5.)p
0 TeXcolorgray 651 w(Der)420 b(Graph)e(einer)i(reellen)g(F)-108
b(unktion)419 b(f)h(hat)f(f\374r)h Fm(x)26162 47081 y
Fl(0)27057 46882 y Fo(=)369 b(3)420 b Fp(einen)f(Punkt)g(mit)h(der)f
Fm(x)p Fp(-A)-36 b(c)g(hse)921 48874 y(gemeinsam.)921
53412 y(Kreuze)615 b(diejenige)g(Gleic)-36 b(h)g(ung)614
b(an,)i(die)f(diesen)f(geometrisc)-36 b(hen)615 b(Sac)-36
b(h)g(v)g(erhalt)615 b(k)-36 b(orrekt)921 55404 y(b)36
b(esc)-36 b(hreibt.)p 18362 56112 9661 45 v 18362 59330
45 3219 v 19070 58053 a Fm(f)142 b Fo(\(0\))369 b(=)g(3)p
25612 59330 V 27978 59330 V 18362 59374 9661 45 v 18362
62592 45 3219 v 19070 61315 a Fm(f)142 b Fo(\(3\))369
b(=)g(3)p 25612 62592 V 27978 62592 V 18362 62637 9661
45 v 18362 65855 45 3219 v 19070 64578 a Fm(f)142 b Fo(\(3\))369
b(=)g(0)p 25612 65855 V 1 0 0 TeXcolorrgb 2406 w Fh(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 27978
65855 V 18362 65899 9661 45 v 18362 69117 45 3219 v 19070
67840 a Fm(f)142 b Fo(\(3\))369 b(=)g Fm(x)24004 68039
y Fl(0)p 25612 69117 V 27978 69117 V 18362 69162 9661
45 v 18362 72380 45 3219 v 19070 71103 a Fm(f)142 b Fo(\(0\))369
b(=)g Fn(\000)p Fo(3)p 25612 72380 V 27978 72380 V 18362
72424 9661 45 v 18362 75642 45 3219 v 19070 74365 a Fm(f)142
b Fo(\()p Fm(x)21098 74564 y Fl(0)21624 74365 y Fo(\))369
b(=)f(3)p 25612 75642 V 27978 75642 V 18362 75686 9661
45 v 47992 46882 a Fj(___/1)p 1 0 0 TeXcolorrgb 48228
48874 a Fi(F)-123 b(A)369 b(1.5)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 24746 81281
a Fp(4)p 0 TeXcolorgray eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 54804 45 v -2331 6795 a Fq(F)-239
b(A)717 b(1.5)g(-)h(6)f(Argumen)-60 b(te)716 b(-)i(O)-60
b(A)718 b(-)f(BIFIE)p 0 TeXcolorgray -741 10102 a Fp(6.)p
0 TeXcolorgray 651 w(Gegeb)36 b(en)433 b(ist)h(der)f(Graph)f(einer)h
(reellen)h(F)-108 b(unktion)433 b Fm(f)142 b Fp(.)p 0
TeXcolorgray 0 TeXcolorgray 2923 38313 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 370.11966 a add def
/d 0.0 a add neg def /h 233.5208 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 2923 38313 a
13886 27349 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 9 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 271.08383 0.0 -99.03583 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 14
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 134.47151 0.0 -99.04929   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 271.08383  0 -99.03583  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -99.03583
 271.08383  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-99.04929  def /maxTickline 134.47151  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 134.47151
0.0 -99.04929   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 271.08383
0.0 -99.03583 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 134.47151  0 -99.04929  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -99.04929
 134.47151  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-99.03583  def /maxTickline 271.08383  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 134.47151
0.0 -99.04929   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 271.08383
0.0 -99.03583 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 12641 24485 a
Fl(1)12641 21335 y(2)12641 18185 y(3)12641 15036 y(4)11909
30738 y Fk(\000)p Fl(1)11909 33887 y Fk(\000)p Fl(2)11909
37037 y Fk(\000)p Fl(3)16801 28694 y(1)2679 b(2)h(3)f(4)h(5)g(6)f(7)h
(8)f(9)-32332 b Fk(\000)p Fl(1)-4351 b Fk(\000)p Fl(2)f
Fk(\000)p Fl(3)13886 27349 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 13886 27349 a 13886 27349
a
tx@Dict begin  { 271.08383 134.47151 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 13886 27349 a 13886 27349 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 13886 27349 a 13543 27635
a Fp(x)13886 27349 y
tx@Dict begin  PutEnd  end
 13886 27349 a 13886 27349 a
tx@Dict begin  PutEnd  end
 13886
27349 a 13886 27349 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 13886 27349 a 13886 27349 a
tx@Dict begin  { 0.0 0.0 pop 271.08383 134.47151 exch pop } PutCoor
PutBegin  end
 13886
27349 a 13886 27349 a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 13886 27349 a 13543 27506 a Fp(y)13886
27349 y
tx@Dict begin  PutEnd  end
 13886 27349 a 13886 27349 a
tx@Dict begin  PutEnd  end
 13886 27349 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.4807067999031407 def /x1 9.527505598310066
def /dx x1 x sub 199 div def /F@pstplot (-0.041666666666666664*x^(3.0)+0.4583333333333333*x^(2.0)-0.4166666666666667*x-3.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 13886 27349 a
tx@Dict begin  { -89.96677 80.6255 } PutCoor PutBegin  end
 13886 27349 a
-172 x Fg(f)13886 27349 y
tx@Dict begin  PutEnd  end
 13886 27349 a 43894 38313 a
currentpoint initclip moveto

43894 38313 a 921 42298 a Fp(Gib)433 b(alle)i(Argumen)-36
b(te)432 b Fm(x)369 b Fn(2)g Fo([)8 b Fn(\000)p Fo(3;)221
b(9])435 b Fp(an,)f(f\374r)f(die)h(gilt:)h Fm(x)28742
42497 y Fl(1)29637 42298 y Fm(<)368 b(x)31756 42497 y
Fl(2)32651 42298 y Fn(\))h Fm(f)142 b Fo(\()p Fm(x)36376
42497 y Fl(1)36902 42298 y Fo(\))369 b Fm(<)f(f)142 b
Fo(\()p Fm(x)41185 42497 y Fl(2)41711 42298 y Fo(\))p
Fp(.)921 46835 y Fm(x)369 b Fn(2)g Fo([)p 3653 46835
9449 34 v 9456 w(])p 1 0 0 TeXcolorrgb 921 49380 a Fm(x)g
Fn(2)g Fo([)8 b(0)p Fm(;)p Fo(5;)221 b(6)p Fm(;)p Fo(8])p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 47992
10102 a Fj(___/1)p 1 0 0 TeXcolorrgb 48228 12094 a Fi(F)-123
b(A)369 b(1.5)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 53188 54804 45 v 0 TeXcolorgray 24746
81281 a Fp(5)p 0 TeXcolorgray eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fq(F)-239 b(A)717 b(1.5)g(-)h(7)f
(Nullstellen)e(einer)i(F)-179 b(unktion)714 b(-)k(O)-60
b(A)718 b(-)f(BIFIE)p 0 TeXcolorgray -741 4800 a Fp(7.)p
0 TeXcolorgray 651 w(Eine)433 b(F)-108 b(unktion)433
b(ist)h(durc)-36 b(h)432 b(die)i(Gleic)-36 b(h)g(ung)432
b Fm(f)142 b Fo(\()p Fm(x)p Fo(\))369 b(=)g Fm(x)295
b Fn(\001)g Fo(\()p Fm(x)g Fn(\000)h Fo(1\))f Fn(\001)g
Fo(\()p Fm(x)g Fo(+)g(1\))434 b Fp(gegeb)36 b(en.)921
9338 y(Kennzeic)-36 b(hne)569 b(im)h(gegeb)36 b(enen)569
b(K)-36 b(o)36 b(ordinatensystem)570 b(alle)h(Nullstellen)f(des)g(F)
-108 b(unktions-)921 11330 y(graphen)433 b(durc)-36 b(h)432
b(Punkte.)p 0 TeXcolorgray 0 TeXcolorgray 5418 33237
a
 currentpoint currentpoint translate 1.26596 1.26596 scale neg exch
neg exch translate
 5418 33237 a 5418 33237 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 256.75978 a add def
/d 0.0 a add neg def /h 125.2622 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 5418 33237 a 16381 28359
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -28.45274 T 5 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 157.72395 0.0 -99.03583 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 81.1925 0.0 -44.0697   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 28.45274
0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 157.72395  0 -99.03583  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -99.03583
 157.72395  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-44.0697  def /maxTickline 81.1925  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 81.1925
0.0 -44.0697   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 157.72395
0.0 -99.03583 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 81.1925  0 -44.0697  ArrowA CP 4 2
roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -44.0697
 81.1925  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-99.03583  def /maxTickline 157.72395  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 81.1925
0.0 -44.0697   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 157.72395
0.0 -99.03583 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 15136 25494 a Fl(1)15135 22345
y(2)14404 31747 y Fk(\000)p Fl(1)19295 29704 y(1)2680
b(2)f(3)h(4)g(5)-19734 b Fk(\000)p Fl(1)-4352 b Fk(\000)p
Fl(2)h Fk(\000)p Fl(3)16381 28359 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 16381 28359 a 16381
28359 a
tx@Dict begin  { 157.72395 81.1925 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 16381 28359 a 16381 28359 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 16381 28359 a 16038
28645 a Fp(x)16381 28359 y
tx@Dict begin  PutEnd  end
 16381 28359 a 16381 28359
a
tx@Dict begin  PutEnd  end
 16381 28359 a 16381 28359 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 16381 28359 a 16381 28359
a
tx@Dict begin  { 0.0 0.0 pop 157.72395 81.1925 exch pop } PutCoor PutBegin
 end
 16381 28359 a 16381 28359 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 16381 28359 a 15333 28691
a Fp(f\(x\))16381 28359 y
tx@Dict begin  PutEnd  end
 16381 28359 a 16381 28359 a
tx@Dict begin  PutEnd  end

16381 28359 a 1 0 0 TeXcolorrgb @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 1 0 0  setrgbcolor  [ 0.0 0.0 
 false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end


@endspecial 16381 28359 a
tx@Dict begin  { 2.42126 8.0757 } PutCoor PutBegin  end
 16381 28359 a -123 x Fg(N)17128
28359 y Fe(2)16381 28359 y
tx@Dict begin  PutEnd  end
 16381 28359 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 1 0 0  setrgbcolor  [ -28.45274
0.0   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 16381 28359 a
tx@Dict begin  { -38.95493 8.64227 } PutCoor PutBegin  end
 16381 28359 a
-123 x Fg(N)17128 28359 y Fe(1)16381 28359 y
tx@Dict begin  PutEnd  end
 16381 28359
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 1 0 0  setrgbcolor  [ 28.45274
0.0   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 16381 28359
a
tx@Dict begin  { 31.32814 6.37512 } PutCoor PutBegin  end
 16381 28359 a -123 x Fg(N)17128 28359 y Fe(3)16381
28359 y
tx@Dict begin  PutEnd  end
 16381 28359 a 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 33840 33237 a
currentpoint initclip moveto
 33840 33237 a 5418 33237
a
 currentpoint currentpoint translate 1 1.26596 div 1 1.26596 div scale
neg exch neg exch translate
 5418 33237 a 47992 4800 a Fj(___/1)p 1 0 0 TeXcolorrgb
48228 6792 a Fi(F)-123 b(A)369 b(1.5)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 35273 54804 45
v 0 TeXcolorgray 24746 81281 a Fp(6)p 0 TeXcolorgray
eop end
%%Page: 7 7
TeXDict begin 7 6 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fq(F)-239 b(A)717 b(1.5)g(-)h(8)f(P)-60
b(olynomfunktion)714 b(skizzieren)j(-)g(O)-60 b(A)718
b(-)g(BIFIE)p 0 TeXcolorgray -741 4800 a Fp(8.)p 0 TeXcolorgray
651 w(Eine)448 b(P)-36 b(olynomfunktion)450 b(vierten)f(Grades)e(soll)j
(die)e(nac)-36 b(hstehenden)447 b(Eigensc)-36 b(haft)449
b(erf\374l-)921 6792 y(len:)p 0 TeXcolorgray 2468 9891
a Fn(\017)p 0 TeXcolorgray 650 w Fp(Ihr)434 b(Graph)e(ist)i(zur)f(y-A)
-36 b(c)g(hse)433 b(symmetrisc)-36 b(h.)p 0 TeXcolorgray
2468 12437 a Fn(\017)p 0 TeXcolorgray 650 w Fp(Im)434
b(In)-36 b(terv)-72 b(all)434 b Fo(\()p Fn(\0001)p Fo(;)221
b Fn(\000)p Fo(2\))435 b Fp(ist)f(die)f(F)-108 b(unktion)433
b(streng)g(monoton)h(fallend.)p 0 TeXcolorgray 2468 14982
a Fn(\017)p 0 TeXcolorgray 650 w Fp(Ihre)g(W)-108 b(ertemenge)433
b(ist)h Fo([)8 b Fn(\000)p Fo(4;)221 b Fn(1)p Fo(\))p
Fp(.)p 0 TeXcolorgray 2468 17527 a Fn(\017)p 0 TeXcolorgray
650 w Fp(Die)435 b(Stelle)e Fm(x)370 b Fo(=)e(2)434 b
Fp(ist)g(eine)f(lokale)j(Extremstelle.)p 0 TeXcolorgray
2468 20073 a Fn(\017)p 0 TeXcolorgray 650 w Fp(An)e(der)f(Stelle)g
Fm(x)369 b Fo(=)g(0)434 b Fp(b)36 b(er\374hrt)432 b(der)h(Graph)f(die)i
(x-A)-36 b(c)g(hse.)921 23172 y(Skizziere)437 b(den)e(Graphen)f(einer)i
(P)-36 b(olynomfunktion)437 b(vierten)f(Grades)f(mit)h(den)f(ob)36
b(en)436 b(an-)921 25164 y(gegeb)36 b(enen)433 b(Eigensc)-36
b(haften)434 b(im)g(nac)-36 b(hstehenden)431 b(K)-36
b(o)36 b(ordinatensystem!)p 0 TeXcolorgray 0 TeXcolorgray
5204 57412 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 328.90971 a add def
/d 0.0 a add neg def /h 251.9984 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 5204 57412 a 23214 41773 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81097 T 9
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 166.21513 0.0 -162.69458 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -142.26372 0.0 T 12
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 110.72021 0.0 -141.27818   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 166.21513  0 -162.69458  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -162.69458
 166.21513  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-141.27818  def /maxTickline 110.72021  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 110.72021
0.0 -141.27818   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 166.21513
0.0 -162.69458 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 110.72021  0 -141.27818  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -141.27818
 110.72021  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-162.69458  def /maxTickline 166.21513  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 110.72021
0.0 -141.27818   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 166.21513
0.0 -162.69458 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
21969 38909 a Fl(1)21968 35759 y(2)21968 32610 y(3)21237
45162 y Fk(\000)p Fl(1)21237 48312 y Fk(\000)p Fl(2)21237
51461 y Fk(\000)p Fl(3)21237 54611 y Fk(\000)p Fl(4)26128
43119 y(1)2680 b(2)f(3)h(4)g(5)-19734 b Fk(\000)p Fl(1)-4352
b Fk(\000)p Fl(2)h Fk(\000)p Fl(3)f Fk(\000)p Fl(4)h
Fk(\000)p Fl(5)23214 41773 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 23214 41773 a 23214 41773
a
tx@Dict begin  { 166.21513 110.72021 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 23214 41773 a 23214 41773 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 23214 41773 a 22871 42059
a Fp(x)23214 41773 y
tx@Dict begin  PutEnd  end
 23214 41773 a 23214 41773 a
tx@Dict begin  PutEnd  end
 23214
41773 a 23214 41773 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 23214 41773 a 23214 41773 a
tx@Dict begin  { 0.0 0.0 pop 166.21513 110.72021 exch pop } PutCoor
PutBegin  end
 23214
41773 a 23214 41773 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 23214 41773 a 22166 42105 a Fp(f\(x\))23214
41773 y
tx@Dict begin  PutEnd  end
 23214 41773 a 23214 41773 a
tx@Dict begin  PutEnd  end
 23214 41773 a 1 0 0
TeXcolorrgb @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0.8 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -5.7180568649419055
def /x1 5.841803065773493 def /dx x1 x sub 199 div def /F@pstplot (0.24444444444444444*x^(4.0)-1.9777777777777779*x^(2.0))
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0.8 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 23214
41773 a
tx@Dict begin  { -79.90134 79.95561 } PutCoor PutBegin  end
 23214 41773 a 0.8 0 0 TeXcolorrgb -172 x Fg(f)p
1 0 0 TeXcolorrgb 23214 41773 a
tx@Dict begin  PutEnd  end
 23214 41773 a 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 41613 57412 a
currentpoint initclip moveto
 41613
57412 a 47992 4800 a Fj(___/1)p 1 0 0 TeXcolorrgb 48228
6792 a Fi(F)-123 b(A)369 b(1.5)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 59448 54804 45 v 0 TeXcolorgray
24746 81281 a Fp(7)p 0 TeXcolorgray eop end
%%Page: 8 8
TeXDict begin 8 7 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fq(F)-239 b(A)717 b(1.5)g(-)h(9)f(F)-179
b(unktionseigensc)-60 b(haften)712 b(-)718 b(MC)g(-)f(BIFIE)p
0 TeXcolorgray -741 4800 a Fp(9.)p 0 TeXcolorgray 651
w(Gegeb)36 b(en)421 b(ist)h(der)f(Graph)g(einer)h(reellen)g(F)-108
b(unktion)421 b Fm(f)142 b Fp(,)422 b(der)f(die)h(x-A)-36
b(c)g(hse)422 b(an)f(den)h(Stellen)921 6792 y Fm(x)1660
6991 y Fl(1)2555 6792 y Fo(=)368 b(2)p Fp(,)435 b Fm(x)6120
6991 y Fl(2)7015 6792 y Fo(=)368 b(4)434 b Fp(und)f Fm(x)12820
6991 y Fl(3)13714 6792 y Fo(=)369 b(9)434 b Fp(sc)-36
b(hneidet.)p 0 TeXcolorgray 0 TeXcolorgray 2766 37247
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 372.9534 a add def
/d 0.0 a add neg def /h 235.78795 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 2766 37247 a 13792 25467 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 9 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.25  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 273.351 0.0 -99.6024 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.25  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 28.45274
T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 14
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.25  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 129.3702 0.0 -106.41776   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.25  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 273.351  0 -99.6024  0 ArrowA CP 4 2
roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -99.6024
 273.351  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-106.41776  def /maxTickline 129.3702  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 129.3702
0.0 -106.41776   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 273.351
0.0 -99.6024 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 129.3702  0 -106.41776  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -106.41776
 129.3702  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-99.6024  def /maxTickline 273.351  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 129.3702
0.0 -106.41776   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 273.351
0.0 -99.6024 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 12547 22602 a
Fl(1)12547 19453 y(2)12547 16303 y(3)12547 13153 y(4)11815
28855 y Fk(\000)p Fl(1)11815 32005 y Fk(\000)p Fl(2)11815
35155 y Fk(\000)p Fl(3)16706 26812 y(1)2680 b(2)g(3)f(4)h(5)f(6)h(7)g
(8)f(9)-32332 b Fk(\000)p Fl(1)-4351 b Fk(\000)p Fl(2)f
Fk(\000)p Fl(3)13792 25467 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 13792 25467 a 13792 25467
a
tx@Dict begin  { 273.351 129.3702 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 13792 25467 a 13792 25467 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 13792 25467 a 13449 25753
a Fp(x)13792 25467 y
tx@Dict begin  PutEnd  end
 13792 25467 a 13792 25467 a
tx@Dict begin  PutEnd  end
 13792
25467 a 13792 25467 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 13792 25467 a 13792 25467 a
tx@Dict begin  { 0.0 0.0 pop 273.351 129.3702 exch pop } PutCoor PutBegin
 end
 13792
25467 a 13792 25467 a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 13792 25467 a 13449 25624 a Fp(y)13792
25467 y
tx@Dict begin  PutEnd  end
 13792 25467 a 13792 25467 a
tx@Dict begin  PutEnd  end
 13792 25467 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.500627492702854 def /x1 9.60718836950893
def /dx x1 x sub 199 div def /F@pstplot (-0.041666666666666664*x^(3.0)+0.4583333333333333*x^(2.0)-0.4166666666666667*x-3.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 13792 25467 a
tx@Dict begin  { 70.43721 -51.21501 } PutCoor PutBegin  end
 13792 25467 a
922 x Fm(f)13792 25467 y
tx@Dict begin  PutEnd  end
 13792 25467 a 44051 37247 a
currentpoint initclip moveto

44051 37247 a 921 41231 a Fp(Kreuze)433 b(die)h(zutre\033ende\(n\))d(A)
-36 b(ussage\(n\))433 b(an.)p 9250 42272 27883 45 v 9250
45490 45 3219 v 9959 44213 a Fm(f)575 b Fp(ist)434 b(im)g(In)-36
b(terv)-72 b(all)434 b Fo([)8 b(2;)221 b(4])435 b Fp(monoton)f
(fallend.)p 34724 45490 V 37089 45490 V 9250 45534 27883
45 v 9250 48752 45 3219 v 9959 47475 a Fm(f)142 b Fo(\(2\))369
b(=)f Fm(f)142 b Fo(\(9\))p 34724 48752 V 1 0 0 TeXcolorrgb
18834 w Fh(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 37089 48752 V 9250 48796 27883 45 v 9250
52014 45 3219 v 9959 50737 a Fm(f)g Fo(\(1\))369 b Fm(>)f(f)142
b Fo(\(1\))p 34724 52014 V 1 0 0 TeXcolorrgb 18834 w
Fh(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
37089 52014 V 9250 52059 27883 45 v 9250 55277 45 3219
v 9959 54000 a Fp(Zu)433 b(jedem)g Fm(x)370 b Fn(2)e
Fo([)8 b(3;)221 b(9])435 b Fp(gibt)f(es)g(genau)f(ein)h
Fm(f)142 b Fo(\()p Fm(x)p Fo(\))p Fp(.)p 34724 55277
V 1 0 0 TeXcolorrgb 1372 w Fh(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 37089 55277 V 9250 55321 27883
45 v 9250 58539 45 3219 v 9959 57262 a Fp(Zu)433 b(jedem)g
Fm(f)142 b Fo(\()p Fm(x)p Fo(\))369 b Fn(2)g Fo([)8 b(3;)221
b(0])435 b Fp(gibt)f(es)f(genau)h(ein)f Fm(x)p Fp(.)p
34724 58539 V 37089 58539 V 9250 58584 27883 45 v 47992
4800 a Fj(___/1)p 1 0 0 TeXcolorrgb 48228 6792 a Fi(F)-123
b(A)369 b(1.5)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 62612 54804 45 v 0 TeXcolorgray 24746
81281 a Fp(8)p 0 TeXcolorgray eop end
%%Page: 9 9
TeXDict begin 9 8 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fq(F)-239 b(A)717 b(1.5)g(-)h(10)f(Symmetrie)
f(-)i(L)-179 b(T)717 b(-)g(BIFIE)p 0 TeXcolorgray -1391
4800 a Fp(10.)p 0 TeXcolorgray 651 w(Gegeb)36 b(en)482
b(ist)g(eine)h(P)-36 b(otenzfunktion)482 b(der)g(F)-108
b(orm)481 b Fm(f)142 b Fo(\()p Fm(x)p Fo(\))452 b(=)g
Fm(a)328 b Fn(\001)g Fm(x)32658 4318 y Fl(2)33513 4800
y Fo(+)g Fm(b)482 b Fp(mit)g Fm(a)452 b Fn(6)p Fo(=)g(0)p
Fp(,)483 b Fm(b)452 b Fn(2)f Fd(R)p Fp(,)921 6792 y Fm(n)369
b Fn(2)g Fd(Z)295 b Fn(n)g(f)p Fo(0)p Fn(g)p Fp(.)921
11330 y(Erg\344nze)358 b(die)h(T)-108 b(extl\374c)-36
b(k)g(en)358 b(im)g(folgenden)h(Satz)f(durc)-36 b(h)357
b(Ankreuzen)g(der)h(jew)-36 b(eils)360 b(ric)-36 b(h)g(tigen)921
13322 y(Satzteile)434 b(so,)g(dass)g(eine)f(mathematisc)-36
b(h)434 b(k)-36 b(orrekte)434 b(A)-36 b(ussage)434 b(en)-36
b(tsteh)g(t!)921 16812 y(F)-108 b(alls)843 b Fm(z)902
b Fp(eine)p 9196 16812 3150 45 v 12817 16764 a(1)12345
16812 y Ff(\015)p 13939 16812 V 3993 w Fp(ist,)843 b(ist)g(der)f(Graph)
g(v)-36 b(on)843 b Fm(f)985 b Fp(immer)842 b(symmetrisc)-36
b(h)p 921 18804 V 4542 18756 a(2)4071 18804 y Ff(\015)p
5665 18804 V 3583 w Fp(.)p 0 TeXcolorgray 0 TeXcolorgray
8851 20176 12309 45 v 8851 23260 45 3085 v 14680 21958
a(1)14208 22006 y Ff(\015)p 21115 23260 V 8851 23305
12309 45 v 8851 26564 45 3260 v 9559 25361 a Fp(gerade)434
b(Zahl)p 18750 26564 V 1 0 0 TeXcolorrgb 19459 25266
a Fh(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
21115 26564 V 8851 26608 12309 45 v 8851 29867 45 3260
v 9559 28664 a Fp(ungerade)f(Zahl)p 18750 29867 V 19459
28570 a Fh(2)p 21115 29867 V 8851 29912 12309 45 v 8851
33171 45 3260 v 9559 31968 a Fp(negativ)-36 b(e)435 b(Zahl)p
18750 33171 V 19459 31873 a Fh(2)p 21115 33171 V 8851
33215 12309 45 v 0 TeXcolorgray 0 TeXcolorgray 30427
20176 12273 45 v 30427 23260 45 3085 v 36238 21958 a
Fp(2)35766 22006 y Ff(\015)p 42655 23260 V 30427 23305
12273 45 v 30427 26564 45 3260 v 31135 25361 a Fp(zur)e
Fm(x)p Fp(-A)-36 b(c)g(hse)p 40289 26564 V 40998 25266
a Fh(2)p 42655 26564 V 30427 26608 12273 45 v 30427 29867
45 3260 v 31135 28664 a Fp(zur)433 b Fm(y)48 b Fp(-A)-36
b(c)g(hse)p 40289 29867 V 1 0 0 TeXcolorrgb 40998 28570
a Fh(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
42655 29867 V 30427 29912 12273 45 v 30427 33171 45 3260
v 31135 31968 a Fp(zur)433 b(1.)h(Mediane)p 40289 33171
V 40998 31873 a Fh(2)p 42655 33171 V 30427 33215 12273
45 v 47992 4800 a Fj(___/1)p 1 0 0 TeXcolorrgb 48228
6792 a Fi(F)-123 b(A)369 b(1.5)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 37243 54804 45 v -2331
42545 a Fq(F)-239 b(A)797 b(2.1)h(-)g(11)f(Lineare)g(F)-179
b(unktion)794 b(-)k(O)-60 b(A)798 b(-)g(BIFIE)h(-)e(K)-60
b(omp)60 b(etenz-)-2331 45567 y(c)-60 b(hec)g(k)718 b(2016)p
0 TeXcolorgray -1391 48874 a Fp(11.)p 0 TeXcolorgray
651 w(Der)571 b(Graph)f(der)g(F)-108 b(unktion)570 b
Fm(f)713 b Fp(ist)571 b(eine)g(Gerade,)g(die)g(durc)-36
b(h)569 b(die)i(Punkte)g Fm(P)783 b Fo(=)603 b(\(2)p
Fm(=)p Fo(8\))921 50866 y Fp(und)432 b Fm(Q)369 b Fo(=)g(\(4)p
Fm(=)p Fo(4\))434 b Fp(v)-36 b(erl\344uft.)921 55404
y(Gib)433 b(eine)h(F)-108 b(unktionsgleic)-36 b(h)g(ung)432
b(der)h(F)-108 b(unktion)433 b Fm(f)576 b Fp(an.)921
59941 y Fm(f)142 b Fo(\()p Fm(x)p Fo(\))369 b(=)p 4836
59941 15749 34 v 1 0 0 TeXcolorrgb 921 64478 a Fp(f\(x\)=-2x+12)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 47992
48874 a Fj(___/1)p 1 0 0 TeXcolorrgb 48228 50866 a Fi(F)-123
b(A)369 b(1.5)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 68285 54804 45 v 0 TeXcolorgray 24746
81281 a Fp(9)p 0 TeXcolorgray eop end
%%Page: 10 10
TeXDict begin 10 9 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fq(F)-239 b(A)634 b(1.5)f(-)h(12)g(F)-179
b(unktionseigensc)-60 b(haften)628 b(erk)-60 b(ennen)632
b(-)j(MC)f(-)g(Matu-)-2331 4515 y(ra)718 b(2015/16)f(-)g(Haupttermin)p
0 TeXcolorgray -1391 7823 a Fp(12.)p 0 TeXcolorgray 651
w(Gegeb)36 b(en)433 b(ist)h(der)f(Graph)f(einer)h(P)-36
b(olynomfunktion)435 b Fm(f)576 b Fp(dritten)432 b(Grades.)p
0 TeXcolorgray 0 TeXcolorgray 9141 46255 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 257.78177 a add def
/d 0.0 a add neg def /h 307.85887 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 9141 46255
a 23503 29499 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -142.26372 T 11
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 128.03734 0.0 -129.74443 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -113.81097 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 156.49008 0.0 -151.36879   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 128.03734  0 -129.74443  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -129.74443
 128.03734  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-151.36879  def /maxTickline 156.49008  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 156.49008
0.0 -151.36879   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 128.03734
0.0 -129.74443 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 156.49008  0 -151.36879  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -151.36879
 156.49008  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-129.74443  def /maxTickline 128.03734  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 156.49008
0.0 -151.36879   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 128.03734
0.0 -129.74443 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 22258 26635 a
Fl(1)22258 23485 y(2)22258 20335 y(3)22258 17186 y(4)22258
14036 y(5)21526 32888 y Fk(\000)p Fl(1)21526 36037 y
Fk(\000)p Fl(2)21526 39187 y Fk(\000)p Fl(3)21526 42337
y Fk(\000)p Fl(4)21526 45486 y Fk(\000)p Fl(5)26418 30844
y(1)2679 b(2)h(3)f(4)-16584 b Fk(\000)p Fl(1)-4351 b
Fk(\000)p Fl(2)f Fk(\000)p Fl(3)h Fk(\000)p Fl(4)23503
29499 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 23503 29499 a 23503 29499 a
tx@Dict begin  { 128.03734 156.49008 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 23503 29499 a 23503
29499 a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 23503 29499 a 23133 29785 a Fm(x)23503 29499
y
tx@Dict begin  PutEnd  end
 23503 29499 a 23503 29499 a
tx@Dict begin  PutEnd  end
 23503 29499 a 23503 29499
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 23503 29499 a 23503 29499 a
tx@Dict begin  { 0.0 0.0 pop 128.03734 156.49008 exch pop } PutCoor
PutBegin  end
 23503 29499 a 23503 29499
a
tx@Dict begin  { 5.0 22.88857 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 23503 29499 a 22236 29831 a Fm(f)142 b Fo(\()p Fm(x)p
Fo(\))23503 29499 y
tx@Dict begin  PutEnd  end
 23503 29499 a 23503 29499 a
tx@Dict begin  PutEnd  end
 23503
29499 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -4.560000000000001 def /x1 4.500000000000002
def /dx x1 x sub 199 div def /F@pstplot (0.5*x^(3.0)-4.0*x)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.6 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 23503
29499 a
tx@Dict begin  { 95.60123 108.1205 } PutCoor PutBegin  end
 23503 29499 a 922 x Fm(f)23503 29499 y
tx@Dict begin  PutEnd  end
 23503
29499 a 37676 46255 a
currentpoint initclip moveto
 37676 46255 a 921 50239 a Fp(Kreuze)437
b(die)g(f\374r)g(den)g(dargestellten)g(F)-108 b(unktionsgraphen)436
b(v)-36 b(on)437 b Fm(f)579 b Fp(zutre\033ende\(n\))435
b(A)-36 b(ussa-)921 52231 y(ge\(n\))433 b(an.)p 1289
53272 43806 45 v 1289 56490 45 3219 v 1998 55213 a(Die)h(F)-108
b(unktion)433 b Fm(f)575 b Fp(ist)434 b(im)g(In)-36 b(terv)-72
b(all)434 b Fo(\(2;)655 b(3\))434 b Fp(monoton)f(steigend.)p
42685 56490 V 1 0 0 TeXcolorrgb 9235 w Fh(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 45050 56490 V 1289 56534
43806 45 v 1289 59752 45 3219 v 1998 58475 a Fp(Die)h(F)-108
b(unktion)433 b Fm(f)575 b Fp(hat)433 b(im)h(In)-36 b(terv)-72
b(all)434 b Fo(\(1;)656 b(2\))433 b Fp(eine)h(lokale)h(Maxim)-36
b(umstelle.)p 42685 59752 V 45050 59752 V 1289 59797
43806 45 v 1289 63015 45 3219 v 1998 61738 a(Die)434
b(F)-108 b(unktion)433 b Fm(f)575 b Fp(\344ndert)433
b(im)h(In)-36 b(terv)-72 b(all)434 b Fo(\()p Fn(\000)p
Fo(1;)655 b(1\))434 b Fp(das)g(Kr\374mm)-36 b(ungsv)g(erhalten.)p
42685 63015 V 1 0 0 TeXcolorrgb 1372 w Fh(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 45050 63015 V 1289 63059
43806 45 v 1289 67863 45 4805 v 1998 64926 a Fp(Der)433
b(F)-108 b(unktionsgraph)433 b(v)-36 b(on)434 b Fm(f)575
b Fp(ist)434 b(symmetrisc)-36 b(h)433 b(b)36 b(ez\374glic)-36
b(h)434 b(der)f(senkrec)-36 b(h)g(ten)1998 66918 y(A)g(c)g(hse.)p
42685 67863 V 45050 67863 V 1289 67907 43806 45 v 1289
71125 45 3219 v 1998 69848 a(Die)434 b(F)-108 b(unktion)433
b Fm(f)575 b Fp(\344ndert)433 b(im)h(In)-36 b(terv)-72
b(all)434 b Fo(\()p Fn(\000)p Fo(3;)655 b(0\))434 b Fp(das)g
(Monotoniev)-36 b(erhalten.)p 42685 71125 V 1 0 0 TeXcolorrgb
2320 w Fh(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
45050 71125 V 1289 71170 43806 45 v 47992 7823 a Fj(___/1)p
1 0 0 TeXcolorrgb 48228 9815 a Fi(F)-123 b(A)369 b(1.5)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
75198 54804 45 v 0 TeXcolorgray 24421 81281 a Fp(10)p
0 TeXcolorgray eop end
%%Page: 11 11
TeXDict begin 11 10 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fq(F)-239 b(A)561 b(1.5)g(-)h(13)g(Den)f
(Graphen)f(einer)h(P)-60 b(olynomfunktion)558 b(skizzieren)-2617
4515 y(-)718 b(O)-60 b(A)717 b(-)h(Matura)f(2014/15)g(-)h(Haupttermin)p
0 TeXcolorgray -1391 7823 a Fp(13.)p 0 TeXcolorgray 651
w(Eine)433 b(P)-36 b(olynomfunktion)435 b Fm(f)576 b
Fp(hat)433 b(folgende)h(Eigensc)-36 b(haften:)p 0 TeXcolorgray
2468 11254 a Fn(\017)p 0 TeXcolorgray 650 w Fp(Die)435
b(F)-108 b(unktion)432 b(ist)i(f\374r)g Fm(x)369 b Fn(\024)g
Fo(0)434 b Fp(streng)f(monoton)h(steigend.)p 0 TeXcolorgray
2468 13799 a Fn(\017)p 0 TeXcolorgray 650 w Fp(Die)h(F)-108
b(unktion)432 b(ist)i(im)g(In)-36 b(terv)-72 b(all)434
b Fo([)8 b(0;)221 b(3])435 b Fp(streng)f(monoton)f(fallend.)p
0 TeXcolorgray 2468 16344 a Fn(\017)p 0 TeXcolorgray
650 w Fp(Die)i(F)-108 b(unktion)432 b(ist)i(f\374r)g
Fm(x)369 b Fn(\025)g Fo(3)434 b Fp(streng)f(monoton)h(steigend.)p
0 TeXcolorgray 2468 18890 a Fn(\017)p 0 TeXcolorgray
650 w Fp(Der)g(Punkt)f Fm(P)550 b Fo(=)369 b(\(0)p Fn(j)p
Fo(1\))434 b Fp(ist)f(ein)h(lokales)h(Maxim)-36 b(um)434
b(\(Ho)36 b(c)-36 b(hpunkt\).)p 0 TeXcolorgray 2468 21435
a Fn(\017)p 0 TeXcolorgray 650 w Fp(Die)435 b(Stelle)e(3)h(ist)g(eine)g
(Nullstelle.)921 24866 y(Erstelle)421 b(anhand)f(der)g(gegeb)36
b(enen)420 b(Eigensc)-36 b(haften)421 b(eine)f(Skizze)h(eines)g
(m\366glic)-36 b(hen)421 b(F)-108 b(unk-)921 26858 y(tionsgraphen)433
b(v)-36 b(on)434 b Fm(f)575 b Fp(im)434 b(In)-36 b(terv)-72
b(all)434 b Fo([)8 b Fn(\000)p Fo(2;)221 b(4])p Fp(.)p
0 TeXcolorgray 0 TeXcolorgray 9235 59632 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 256.07468 a add def
/d 0.0 a add neg def /h 256.07468 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 9235 59632
a 23409 45459 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81097 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 128.03734 0.0 -128.03734 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -113.81097 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 128.03734 0.0 -128.03734   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 128.03734  0 -128.03734  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -128.03734
 128.03734  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-128.03734  def /maxTickline 128.03734  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 128.03734
0.0 -128.03734   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 128.03734
0.0 -128.03734 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 128.03734  0 -128.03734  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -128.03734
 128.03734  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-128.03734  def /maxTickline 128.03734  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 128.03734
0.0 -128.03734   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 128.03734
0.0 -128.03734 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 22164 42594 a
Fl(1)22163 39445 y(2)22163 36295 y(3)22163 33145 y(4)21431
48847 y Fk(\000)p Fl(1)21431 51997 y Fk(\000)p Fl(2)21431
55147 y Fk(\000)p Fl(3)21431 58296 y Fk(\000)p Fl(4)26323
46804 y(1)2680 b(2)f(3)h(4)-16584 b Fk(\000)p Fl(1)-4352
b Fk(\000)p Fl(2)h Fk(\000)p Fl(3)f Fk(\000)p Fl(4)23409
45459 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 23409 45459 a 23409 45459 a
tx@Dict begin  { 128.03734 128.03734 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 23409 45459 a 23409
45459 a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 23409 45459 a 23039 45744 a Fm(x)23409 45459
y
tx@Dict begin  PutEnd  end
 23409 45459 a 23409 45459 a
tx@Dict begin  PutEnd  end
 23409 45459 a 23409 45459
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 23409 45459 a 23409 45459 a
tx@Dict begin  { 0.0 0.0 pop 128.03734 128.03734 exch pop } PutCoor
PutBegin  end
 23409 45459 a 23409 45459
a
tx@Dict begin  { 5.0 22.88857 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 23409 45459 a 22142 45791 a Fm(f)142 b Fo(\()p Fm(x)p
Fo(\))23409 45459 y
tx@Dict begin  PutEnd  end
 23409 45459 a 23409 45459 a
tx@Dict begin  PutEnd  end
 23409
45459 a 1 0 0 TeXcolorrgb @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -2 def /x1 4 def /dx
x1 x sub 199 div def /F@pstplot (0.0761904761904762*x^(3.0)-0.34285714285714286*x^(2.0)+0.009523809523809525*x+1.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
23409 45459 a
tx@Dict begin  { -43.24829 33.00528 } PutCoor PutBegin  end
 23409 45459 a 1 0 0 TeXcolorrgb 922 x Fm(f)p
1 0 0 TeXcolorrgb 23409 45459 a
tx@Dict begin  PutEnd  end
 23409 45459 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 1 0 0  setrgbcolor  [ 0.0 28.45274
  false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 23409 45459 a
tx@Dict begin  { 2.27626 34.1432 } PutCoor PutBegin  end
 23409 45459 a
1 0 0 TeXcolorrgb Fg(P)p 1 0 0 TeXcolorrgb 23409 45459
a
tx@Dict begin  PutEnd  end
 23409 45459 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 1 0 0  setrgbcolor  [ 85.35823
0.0   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
23409 45459 a
tx@Dict begin  { 87.63449 5.69046 } PutCoor PutBegin  end
 23409 45459 a 1 0 0 TeXcolorrgb Fg(N)p
1 0 0 TeXcolorrgb 23409 45459 a
tx@Dict begin  PutEnd  end
 23409 45459 a 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 37582 59632 a
currentpoint initclip moveto
 37582
59632 a 47992 7823 a Fj(___/1)p 1 0 0 TeXcolorrgb 48228
9815 a Fi(F)-123 b(A)369 b(1.5)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 61668 54804 45 v 0 TeXcolorgray
24421 81281 a Fp(11)p 0 TeXcolorgray eop end
%%Page: 12 12
TeXDict begin 12 11 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fq(F)-239 b(A)888 b(1.5)f(-)h(14)g
(Quadratisc)-60 b(he)887 b(F)-179 b(unktion)885 b(und)h(ihre)i
(Nullstellen)e(-)-2331 4515 y(O)-60 b(A)718 b(-)g(Matura)f(2014/15)g(-)
g(K)-60 b(omp)60 b(ensationspr\374fung)p 0 TeXcolorgray
-1391 7823 a Fp(14.)p 0 TeXcolorgray 651 w(Skizziere)645
b(den)f(Graphen)f(einer)h(m\366glic)-36 b(hen)645 b(quadratisc)-36
b(hen)644 b(F)-108 b(unktion,)644 b(die)g(in)h Fm(P)909
b Fo(=)769 9815 y(\(0)p Fn(j)399 b(\000)h Fo(1\))587
b Fp(ein)f(lokales)j(Minim)-36 b(um)586 b(\(einen)g(Tiefpunkt\))h(hat,)
g(und)e(gib)i(die)g(Anzahl)g(der)921 11806 y(Nullstellen)434
b(dieser)f(F)-108 b(unktion)433 b(an.)p 0 TeXcolorgray
0 TeXcolorgray 7667 42540 a
 currentpoint currentpoint translate 0.81667 0.81667 scale neg exch
neg exch translate
 7667 42540 a 7667 42540 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 348.26128 a add def
/d 0.0 a add neg def /h 320.37772 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end

7667 42540 a 25368 25217 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -142.26372 T 12
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 188.35701 0.0 -159.90427 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -142.26372 0.0 T 13
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 163.88763 0.0 -156.49008   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 188.35701  0 -159.90427  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -159.90427
 188.35701  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-156.49008  def /maxTickline 163.88763  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 163.88763
0.0 -156.49008   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 188.35701
0.0 -159.90427 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 163.88763  0 -156.49008  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -156.49008
 163.88763  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-159.90427  def /maxTickline 188.35701  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 163.88763
0.0 -156.49008   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 188.35701
0.0 -159.90427 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 24123 22353 a
Fl(1)24122 19204 y(2)24122 16054 y(3)24122 12904 y(4)24122
9755 y(5)23391 28606 y Fk(\000)p Fl(1)23391 31756 y Fk(\000)p
Fl(2)23391 34906 y Fk(\000)p Fl(3)23391 38055 y Fk(\000)p
Fl(4)23391 41205 y Fk(\000)p Fl(5)28282 26563 y(1)2680
b(2)f(3)h(4)g(5)f(6)-22883 b Fk(\000)p Fl(1)-4352 b Fk(\000)p
Fl(2)h Fk(\000)p Fl(3)f Fk(\000)p Fl(4)h Fk(\000)p Fl(5)25368
25217 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 25368 25217 a 25368 25217 a
tx@Dict begin  { 188.35701 163.88763 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 25368 25217 a 25368
25217 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 25368 25217 a 25025 25503 a Fp(x)25368 25217
y
tx@Dict begin  PutEnd  end
 25368 25217 a 25368 25217 a
tx@Dict begin  PutEnd  end
 25368 25217 a 25368 25217
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 25368 25217 a 25368 25217 a
tx@Dict begin  { 0.0 0.0 pop 188.35701 163.88763 exch pop } PutCoor
PutBegin  end
 25368 25217 a 25368 25217
a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 25368 25217 a 24320 25550 a Fp(f\(x\))25368 25217 y
tx@Dict begin  PutEnd  end

25368 25217 a 25368 25217 a
tx@Dict begin  PutEnd  end
 25368 25217 a 1 0 0 TeXcolorrgb
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -5.620000000000001 def /x1 6.620000000000004
def /dx x1 x sub 199 div def /F@pstplot (x^(2.0)-1.0)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 25368 25217 a
tx@Dict begin  { -77.3915 121.7777 } PutCoor PutBegin  end

25368 25217 a -172 x Fg(f)25368 25217 y
tx@Dict begin  PutEnd  end
 25368 25217 a
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 46218
42540 a
currentpoint initclip moveto
 46218 42540 a 7667 42540 a
 currentpoint currentpoint translate 1 0.81667 div 1 0.81667 div scale
neg exch neg exch translate
 7667 42540 a 1 0 0
TeXcolorrgb 921 46193 a Fp(Diese)434 b(F)-108 b(unktion)433
b(hat)g(jedenfalls)i(zw)-36 b(ei)434 b(Nullstellen.)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 47992
7823 a Fj(___/1)p 1 0 0 TeXcolorrgb 48228 9815 a Fi(F)-123
b(A)369 b(1.5)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 49926 54804 45 v 0 TeXcolorgray 24421
81281 a Fp(12)p 0 TeXcolorgray eop end
%%Page: 13 13
TeXDict begin 13 12 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1599 a Fq(F)-239 b(A)585 b(1.5)f(-)i(15)e(F)-179
b(unktionen)582 b(v)-60 b(ergleic)g(hen)584 b(-)h(MC)g(-)h(Matura)e
(2014/15)-2617 4622 y(-)718 b(K)-60 b(omp)60 b(ensationspr\374fung)p
0 TeXcolorgray -1391 7929 a Fp(15.)p 0 TeXcolorgray 651
w(Gegeb)36 b(en)464 b(sind)g(f\374nf)h(reelle)h(F)-108
b(unktionen)463 b Fm(f)70 b(;)221 b(g)48 b(;)221 b(h;)g(i)466
b Fp(und)d Fm(j)75 b Fp(.)465 b(Kreuze)g(jene)g(F)-108
b(unktionsglei-)921 9921 y(c)-36 b(h)g(ung\(en\))432
b(an)h(die)h(im)g(gesam)-36 b(ten)433 b(De\034nitionsb)36
b(ereic)-36 b(h)433 b(monoton)h(steigend)f(ist/sind.)p
14256 10961 17871 45 v 14256 14180 45 3219 v 14965 12903
a Fm(f)142 b Fo(\()p Fm(x)p Fo(\))369 b(=)f(3)p Fm(x)434
b Fp(mit)g Fm(x)369 b Fn(2)g Fd(R)p 29718 14180 V 1 0 0
TeXcolorrgb 3648 w Fh(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 32083 14180 V 14256 14224 17871 45 v 14256
17498 45 3275 v 14965 16221 a Fm(g)48 b Fo(\()p Fm(x)p
Fo(\))368 b(=)h Fm(x)19875 15739 y Fl(3)20834 16221 y
Fp(mit)434 b Fm(x)369 b Fn(2)g Fd(R)p 29718 17498 V 1 0 0
TeXcolorrgb 30426 16193 a Fh(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 32083 17498 V 14256 17543
17871 45 v 14256 20761 45 3219 v 14965 19484 a Fm(h)p
Fo(\()p Fm(x)p Fo(\))f(=)h(3)19864 19002 y Fg(x)20883
19484 y Fp(mit)434 b Fm(x)369 b Fn(2)f Fd(R)p 29718 20761
V 1 0 0 TeXcolorrgb 3837 w Fh(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 32083 20761 V 14256 20805
17871 45 v 14256 24023 45 3219 v 14965 22746 a Fm(i)p
Fo(\()p Fm(x)p Fo(\))g(=)h(sin)6 b(\(3)p Fm(x)p Fo(\))434
b Fp(mit)g Fm(x)369 b Fn(2)f Fd(R)p 29718 24023 V 32083
24023 V 14256 24067 17871 45 v 14256 27509 45 3442 v
14965 26106 a Fm(j)75 b Fo(\()p Fm(x)p Fo(\))368 b(=)19211
25583 y Fl(1)p 19211 25796 471 45 v 19211 26564 a(3)19814
26106 y Fm(x)434 b Fp(mit)g Fm(x)369 b Fn(2)f Fd(R)p
29718 27509 45 3442 v 1 0 0 TeXcolorrgb 30426 26120 a
Fh(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
32083 27509 V 14256 27553 17871 45 v 47992 7929 a Fj(___/1)p
1 0 0 TeXcolorrgb 48228 9921 a Fi(F)-123 b(A)369 b(1.5)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
31581 54804 45 v 0 TeXcolorgray 24421 81281 a Fp(13)p
0 TeXcolorgray eop end
%%Page: 14 14
TeXDict begin 14 13 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fq(F)-239 b(A)866 b(1.5)g(-)h(16)f(Graphen)
f(und)g(F)-179 b(unktionst)-60 b(yp)60 b(en)862 b(-)867
b(ZO)f(-)h(Matura)-2385 4515 y(2015/16)718 b(-)f(Neb)60
b(en)-60 b(termin)716 b(1)p 0 TeXcolorgray -1391 7823
a Fp(16.)p 0 TeXcolorgray 651 w(Im)534 b(F)-108 b(olgenden)533
b(sind)h(die)g(Graphen)f(v)-36 b(on)534 b(vier)g(F)-108
b(unktionen)533 b(dargestellt.)j(W)-108 b(eiters)534
b(sind)921 9815 y(sec)-36 b(hs)433 b(F)-108 b(unktionst)-36
b(yp)36 b(en)433 b(angef\374hrt,)g(w)-36 b(ob)36 b(ei)434
b(die)g(P)-36 b(arameter)433 b Fm(a;)221 b(b)370 b Fn(2)e
Fd(R)434 b Fp(sind.)921 14352 y(Ordne)389 b(den)h(vier)g(Graphen)f(jew)
-36 b(eils)392 b(den)d(en)-36 b(tsprec)g(henden)388 b(F)-108
b(unktionst)-36 b(yp)389 b(\(aus)h(A)h(bis)f(F\))921
16344 y(zu.)p 0 TeXcolorgray 0 TeXcolorgray 6560 17682
15603 45 v 22162 17682 4523 45 v 6560 31628 45 13946
v 7268 30683 a
 currentpoint currentpoint translate 0.93079 0.93079 scale neg exch
neg exch translate
 7268 30683 a 7268 30683 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 137.67772 a add def
/d 0.0 a add neg def /h 117.0059 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 7268 30683 a
14547 27380 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.3 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 71.92896  0 -65.74876  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -65.74876
 71.92896  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-29.83899  def /maxTickline 87.16692  def /dT 932339 abs 65536 div
viceversa { neg } if def /DT 0.5 abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
0.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.3
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 87.16692
0.0 -29.83899   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.3 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.3
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 71.92896
0.0 -65.74876 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.3 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.3 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 87.16692  0 -29.83899  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -29.83899
 87.16692  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-65.74876  def /maxTickline 71.92896  def /dT 932339 abs 65536 div
viceversa { neg } if def /DT 0.5 abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
0.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.3
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 87.16692
0.0 -29.83899   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.3 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.3
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 71.92896
0.0 -65.74876 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.3 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 14547 27380 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 14547 27380 a
14547 27380 a
tx@Dict begin  { 71.92896 87.16692 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 14547 27380 a 14547 27380 a
tx@Dict begin  { 5.0 5.71527 4.30554 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 14547 27380
a 14231 27618 a Fc(x)14547 27380 y
tx@Dict begin  PutEnd  end
 14547 27380 a 14547
27380 a
tx@Dict begin  PutEnd  end
 14547 27380 a 14547 27380 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 14547 27380 a 14547
27380 a
tx@Dict begin  { 0.0 0.0 pop 71.92896 87.16692 exch pop } PutCoor PutBegin
 end
 14547 27380 a 14547 27380 a
tx@Dict begin  { 5.0 19.46555 7.5 2.5 -40.  Uput UUput } PutCoor PutBegin
 end
 14547 27380 a 13470
27656 a Fc(f)119 b Fb(\()p Fc(x)p Fb(\))14547 27380 y
tx@Dict begin  PutEnd  end

14547 27380 a 14547 27380 a
tx@Dict begin  PutEnd  end
 14547 27380 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.310813833414203 def /x1 2.5280167339841286
def /dx x1 x sub 199 div def /F@pstplot (x+1.0)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 0.4 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 14547 27380 a
tx@Dict begin  { 39.01485 59.06973 } PutCoor PutBegin  end
 14547 27380 a
768 x Fc(f)14547 27380 y
tx@Dict begin  PutEnd  end
 14547 27380 a 22509 30683 a
currentpoint initclip moveto

22509 30683 a 7268 30683 a
 currentpoint currentpoint translate 1 0.93079 div 1 0.93079 div scale
neg exch neg exch translate
 7268 30683 a 22118 31628 45
13946 v 0.9 TeXcolorgray 22162 31628 4478 13946 v 0 TeXcolorgray
1 0 0 TeXcolorrgb 23977 25112 a Fp(F)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 26640 31628 45 13946
v 6560 31672 15603 45 v 22162 31672 4523 45 v 6560 45617
45 13946 v 7268 44672 a
 currentpoint currentpoint translate 0.93079 0.93079 scale neg exch
neg exch translate
 7268 44672 a 7268 44672 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 137.67772 a add def
/d 0.0 a add neg def /h 117.0059 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 7268
44672 a 14547 41369 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.3 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 71.92896  0 -65.74876  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -65.74876
 71.92896  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-29.83899  def /maxTickline 87.16692  def /dT 932339 abs 65536 div
viceversa { neg } if def /DT 0.5 abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
0.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.3
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 87.16692
0.0 -29.83899   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.3 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.3
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 71.92896
0.0 -65.74876 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.3 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.3 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 87.16692  0 -29.83899  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -29.83899
 87.16692  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-65.74876  def /maxTickline 71.92896  def /dT 932339 abs 65536 div
viceversa { neg } if def /DT 0.5 abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
0.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.3
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 87.16692
0.0 -29.83899   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.3 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.3
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 71.92896
0.0 -65.74876 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.3 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 14547 41369 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 14547 41369 a
14547 41369 a
tx@Dict begin  { 71.92896 87.16692 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 14547 41369 a 14547 41369 a
tx@Dict begin  { 5.0 5.71527 4.30554 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 14547 41369
a 14231 41608 a Fc(x)14547 41369 y
tx@Dict begin  PutEnd  end
 14547 41369 a 14547
41369 a
tx@Dict begin  PutEnd  end
 14547 41369 a 14547 41369 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 14547 41369 a 14547
41369 a
tx@Dict begin  { 0.0 0.0 pop 71.92896 87.16692 exch pop } PutCoor PutBegin
 end
 14547 41369 a 14547 41369 a
tx@Dict begin  { 5.0 19.46555 7.5 2.5 -40.  Uput UUput } PutCoor PutBegin
 end
 14547 41369 a 13470
41646 a Fc(f)g Fb(\()p Fc(x)p Fb(\))14547 41369 y
tx@Dict begin  PutEnd  end
 14547
41369 a 14547 41369 a
tx@Dict begin  PutEnd  end
 14547 41369 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.310813833414203 def /x1 2.5280167339841286
def /dx x1 x sub 199 div def /F@pstplot (1.5*0.25^x)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 0.4 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end


@endspecial 14547 41369 a
tx@Dict begin  { -17.07181 59.06973 } PutCoor PutBegin  end
 14547 41369 a 769 x Fc(f)14547
41369 y
tx@Dict begin  PutEnd  end
 14547 41369 a 22509 44672 a
currentpoint initclip moveto
 22509 44672 a 7268
44672 a
 currentpoint currentpoint translate 1 0.93079 div 1 0.93079 div scale
neg exch neg exch translate
 7268 44672 a 22118 45617 45 13946 v 0.9 TeXcolorgray
22162 45617 4478 13946 v 0 TeXcolorgray 1 0 0 TeXcolorrgb
23890 39102 a Fp(A)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 26640 45617 45 13946 v 6560 45661 15603
45 v 22162 45661 4523 45 v 6560 59607 45 13946 v 7268
58662 a
 currentpoint currentpoint translate 0.93079 0.93079 scale neg exch
neg exch translate
 7268 58662 a 7268 58662 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 137.67772 a add def
/d 0.0 a add neg def /h 117.0059 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 7268 58662 a 14547
55359 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.3 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 71.92896  0 -65.74876  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -65.74876
 71.92896  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-29.83899  def /maxTickline 87.16692  def /dT 932339 abs 65536 div
viceversa { neg } if def /DT 0.5 abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
0.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.3
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 87.16692
0.0 -29.83899   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.3 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.3
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 71.92896
0.0 -65.74876 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.3 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.3 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 87.16692  0 -29.83899  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -29.83899
 87.16692  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-65.74876  def /maxTickline 71.92896  def /dT 932339 abs 65536 div
viceversa { neg } if def /DT 0.5 abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
0.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.3
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 87.16692
0.0 -29.83899   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.3 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.3
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 71.92896
0.0 -65.74876 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.3 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
14547 55359 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 14547 55359 a 14547 55359 a
tx@Dict begin  { 71.92896 87.16692 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 14547 55359
a 14547 55359 a
tx@Dict begin  { 5.0 5.71527 4.30554 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 14547 55359 a 14231 55597 a Fc(x)14547
55359 y
tx@Dict begin  PutEnd  end
 14547 55359 a 14547 55359 a
tx@Dict begin  PutEnd  end
 14547 55359 a 14547
55359 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 14547 55359 a 14547 55359 a
tx@Dict begin  { 0.0 0.0 pop 71.92896 87.16692 exch pop } PutCoor PutBegin
 end
 14547 55359 a 14547
55359 a
tx@Dict begin  { 5.0 19.46555 7.5 2.5 -40.  Uput UUput } PutCoor PutBegin
 end
 14547 55359 a 13470 55636 a Fc(f)g Fb(\()p Fc(x)p
Fb(\))14547 55359 y
tx@Dict begin  PutEnd  end
 14547 55359 a 14547 55359 a
tx@Dict begin  PutEnd  end
 14547
55359 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 2.5280167339841286 def
/dx x1 x sub 199 div def /F@pstplot (x^(1.0/2.0))  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 0.4 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 14547
55359 a
tx@Dict begin  { 39.01485 48.36957 } PutCoor PutBegin  end
 14547 55359 a 769 x Fc(f)14547 55359 y
tx@Dict begin  PutEnd  end
 14547
55359 a 22509 58662 a
currentpoint initclip moveto
 22509 58662 a 7268 58662 a
 currentpoint currentpoint translate 1 0.93079 div 1 0.93079 div scale
neg exch neg exch translate
 7268
58662 a 22118 59607 45 13946 v 0.9 TeXcolorgray 22162
59607 4478 13946 v 0 TeXcolorgray 1 0 0 TeXcolorrgb 23941
53092 a Fp(B)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 26640 59607 45 13946 v 6560 59651 15603
45 v 22162 59651 4523 45 v 6560 73597 45 13946 v 7268
72652 a
 currentpoint currentpoint translate 0.93079 0.93079 scale neg exch
neg exch translate
 7268 72652 a 7268 72652 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 137.67772 a add def
/d 0.0 a add neg def /h 117.0059 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 7268 72652 a 14547
69349 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.3 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 71.92896  0 -65.74876  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -65.74876
 71.92896  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-29.83899  def /maxTickline 87.16692  def /dT 932339 abs 65536 div
viceversa { neg } if def /DT 0.5 abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
0.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.3
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 87.16692
0.0 -29.83899   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.3 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.3
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 71.92896
0.0 -65.74876 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.3 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.3 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 87.16692  0 -29.83899  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -29.83899
 87.16692  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-65.74876  def /maxTickline 71.92896  def /dT 932339 abs 65536 div
viceversa { neg } if def /DT 0.5 abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
0.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.3
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 87.16692
0.0 -29.83899   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.3 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.3
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 71.92896
0.0 -65.74876 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.3 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
14547 69349 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 14547 69349 a 14547 69349 a
tx@Dict begin  { 71.92896 87.16692 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 14547 69349
a 14547 69349 a
tx@Dict begin  { 5.0 5.71527 4.30554 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 14547 69349 a 14231 69587 a Fc(x)14547
69349 y
tx@Dict begin  PutEnd  end
 14547 69349 a 14547 69349 a
tx@Dict begin  PutEnd  end
 14547 69349 a 14547
69349 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 14547 69349 a 14547 69349 a
tx@Dict begin  { 0.0 0.0 pop 71.92896 87.16692 exch pop } PutCoor PutBegin
 end
 14547 69349 a 14547
69349 a
tx@Dict begin  { 5.0 19.46555 7.5 2.5 -40.  Uput UUput } PutCoor PutBegin
 end
 14547 69349 a 13470 69625 a Fc(f)g Fb(\()p Fc(x)p
Fb(\))14547 69349 y
tx@Dict begin  PutEnd  end
 14547 69349 a 14547 69349 a
tx@Dict begin  PutEnd  end
 14547
69349 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.310813833414203 def /x1 2.5280167339841286
def /dx x1 x sub 199 div def /F@pstplot (0.5/x^(2))  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 0.4 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 14547
69349 a
tx@Dict begin  { 21.33955 42.67911 } PutCoor PutBegin  end
 14547 69349 a 768 x Fc(f)14547 69349 y
tx@Dict begin  PutEnd  end
 14547
69349 a 22509 72652 a
currentpoint initclip moveto
 22509 72652 a 7268 72652 a
 currentpoint currentpoint translate 1 0.93079 div 1 0.93079 div scale
neg exch neg exch translate
 7268
72652 a 22118 73597 45 13946 v 0.9 TeXcolorgray 22162
73597 4478 13946 v 0 TeXcolorgray 1 0 0 TeXcolorrgb 23932
67081 a Fp(C)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 26640 73597 45 13946 v 6560 73641 15603
45 v 22162 73641 4523 45 v 0 TeXcolorgray 0 TeXcolorgray
31971 17793 4567 45 v 36538 17793 9605 45 v 31971 21126
45 3334 v 0.92 TeXcolorgray 32016 21126 4478 3334 v 0
TeXcolorgray 33743 19974 a(A)p 36493 21126 45 3334 v
37202 19849 a Fm(f)142 b Fo(\()p Fm(x)p Fo(\))369 b(=)f
Fm(a)295 b Fn(\001)g Fm(b)43680 19367 y Fg(x)p 46098
21126 V 31971 21170 4567 45 v 36538 21170 9605 45 v 31971
24672 45 3503 v 0.92 TeXcolorgray 32016 24672 4478 3503
v 0 TeXcolorgray 33794 23378 a Fp(B)p 36493 24672 45
3503 v 37202 23395 a Fm(f)142 b Fo(\()p Fm(x)p Fo(\))369
b(=)f Fm(a)295 b Fn(\001)g Fm(x)43999 22543 y Fe(1)p
43999 22706 406 45 v 43999 23252 a(2)p 46098 24672 45
3503 v 31971 24717 4567 45 v 36538 24717 9605 45 v 31971
28161 45 3445 v 0.92 TeXcolorgray 32015 28161 4478 3445
v 0 TeXcolorgray 33785 26898 a Fp(C)p 36493 28161 45
3445 v 37202 26759 a Fm(f)142 b Fo(\()p Fm(x)p Fo(\))369
b(=)f Fm(a)295 b Fn(\001)43520 26235 y Fl(1)p 43260 26448
991 45 v 43260 27216 a Fg(x)43790 26964 y Fe(2)p 46098
28161 45 3445 v 31971 28206 4567 45 v 36538 28206 9605
45 v 31971 31567 45 3362 v 0.92 TeXcolorgray 32015 31567
4478 3362 v 0 TeXcolorgray 33758 30387 a Fp(D)p 36493
31567 45 3362 v 37202 30290 a Fm(f)142 b Fo(\()p Fm(x)p
Fo(\))369 b(=)f Fm(a)17 b Fn(\001)g Fm(x)43310 29808
y Fl(2)43853 30290 y Fo(+)g Fm(b)p 46098 31567 V 31971
31611 4567 45 v 36538 31611 9605 45 v 31971 34972 45
3362 v 0.92 TeXcolorgray 32016 34972 4478 3362 v 0 TeXcolorgray
33812 33792 a Fp(E)p 36493 34972 45 3362 v 37202 33695
a Fm(f)142 b Fo(\()p Fm(x)p Fo(\))369 b(=)f Fm(a)295
b Fn(\001)g Fm(x)43866 33213 y Fl(3)p 46098 34972 V 31971
35017 4567 45 v 36538 35017 9605 45 v 31971 38350 45
3334 v 0.92 TeXcolorgray 32016 38350 4478 3334 v 0 TeXcolorgray
33830 37198 a Fp(F)p 36493 38350 45 3334 v 37202 37073
a Fm(f)142 b Fo(\()p Fm(x)p Fo(\))369 b(=)f Fm(a)148
b Fn(\001)g Fm(x)g Fo(+)g Fm(b)p 46098 38350 V 31971
38394 4567 45 v 36538 38394 9605 45 v 47992 7823 a Fj(___/1)p
1 0 0 TeXcolorrgb 48228 9815 a Fi(F)-123 b(A)369 b(1.5)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
77669 54804 45 v 0 TeXcolorgray 24421 81281 a Fp(14)p
0 TeXcolorgray eop end
%%Page: 15 15
TeXDict begin 15 14 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fq(F)-239 b(A)790 b(1.5)g(-)h(17)g(W)-179
b(aagrec)-60 b(h)g(te)790 b(Asymptote)f(-)i(MC)g(-)f(BIFIE)i(-)e(K)-60
b(om-)-2331 4515 y(p)60 b(etenzc)-60 b(hec)g(k)717 b(2016)p
0 TeXcolorgray -1391 7823 a Fp(17.)p 0 TeXcolorgray 651
w(Gegeb)36 b(en)433 b(sind)g(f\374nf)h(F)-108 b(unktionsgleic)-36
b(h)g(ungen.)855 10368 y(W)-108 b(elc)-36 b(he)433 b(dieser)h(F)-108
b(unktionen)432 b(b)36 b(esitzt/b)g(esitzen)433 b(eine)h(w)-36
b(aagrec)g(h)g(te)434 b(Asymptote?)921 12913 y(Kreuze)f(die)h
(zutre\033ende\(n\))d(F)-108 b(unktionsgleic)-36 b(h)g(ung\(en\))432
b(an.)p 17646 13954 11093 45 v 17646 17396 45 3442 v
18354 15993 a Fm(f)18995 16192 y Fl(1)19521 15993 y Fo(\()p
Fm(x)p Fo(\))369 b(=)23184 15470 y Fl(2)p 23154 15683
530 45 v 23154 16451 a Fg(x)p 26329 17396 45 3442 v 1 0 0
TeXcolorrgb 27037 16007 a Fh(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 28694 17396 V 17646 17440
11093 45 v 17646 20658 45 3219 v 18354 19381 a Fm(f)18995
19580 y Fl(2)19521 19381 y Fo(\()p Fm(x)p Fo(\))g(=)f(2)23671
18899 y Fg(x)p 26329 20658 V 1 0 0 TeXcolorrgb 27037
19381 a Fh(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 28694 20658 V 17646 20702 11093 45 v 17646
24046 45 3345 v 18354 22643 a Fm(f)18995 22842 y Fl(3)19521
22643 y Fo(\()p Fm(x)p Fo(\))h(=)23154 22120 y Fg(x)p
23154 22333 530 45 v 23184 23101 a Fl(2)p 26329 24046
45 3345 v 28694 24046 V 17646 24091 11093 45 v 17646
28004 45 3914 v 18354 26395 a Fm(f)18995 26594 y Fl(4)19521
26395 y Fo(\()p Fm(x)p Fo(\))g(=)23021 25110 y Fa(\020)23815
25872 y Fl(1)p 23815 26085 471 45 v 23815 26853 a(2)24418
25110 y Fa(\021)25080 25417 y Fg(x)p 26329 28004 45 3914
v 1 0 0 TeXcolorrgb 27037 26379 a Fh(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 28694 28004 V 17646
28048 11093 45 v 17646 31550 45 3503 v 18354 30273 a
Fm(f)18995 30472 y Fl(5)19521 30273 y Fo(\()p Fm(x)p
Fo(\))g(=)f Fm(x)23893 29421 y Fe(1)p 23893 29584 406
45 v 23893 30130 a(2)p 26329 31550 45 3503 v 28694 31550
V 17646 31594 11093 45 v 47992 7823 a Fj(___/1)p 1 0 0
TeXcolorrgb 48228 9815 a Fi(F)-123 b(A)369 b(1.5)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 35622
54804 45 v 0 TeXcolorgray 24421 81281 a Fp(15)p 0 TeXcolorgray
eop end
%%Page: 16 16
TeXDict begin 16 15 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fq(F)-239 b(A)698 b(1.5)f(-)h(18)g
(Kr\374mm)-60 b(ungsv)g(erhalten)695 b(einer)i(P)-60
b(olynomfunktion)695 b(-)-2331 4515 y(MC)718 b(-)g(Matura)f(2016/17)g
(-)g(Haupttermin)p 0 TeXcolorgray -1391 7823 a Fp(18.)p
0 TeXcolorgray 651 w(Der)395 b(Graph)f(einer)h(P)-36
b(olynomfunktion)396 b(dritten)e(Grades)g(hat)h(im)g(Punkt)f
Fm(T)550 b Fo(=)369 b(\()p Fn(\000)p Fo(3)p Fn(j)p Fo(1\))395
b Fp(ein)921 9815 y(lokales)528 b(Minim)-36 b(um,)526
b(in)f Fm(H)1155 b Fo(=)1052 b(\()p Fn(\000)p Fo(1)p
Fn(j)p Fo(3\))526 b Fp(ein)g(lokales)i(Maxim)-36 b(um)526
b(und)f(in)g Fm(W)707 b Fo(=)526 b(\()p Fn(\000)p Fo(2)p
Fn(j)p Fo(2\))921 11806 y Fp(einen)433 b(W)-108 b(endepunkt.)921
16344 y(In)433 b(w)-36 b(elc)g(hem)434 b(In)-36 b(terv)-72
b(all)434 b(ist)g(diese)g(F)-108 b(unktion)432 b(linksgekr\374mm)-36
b(t)434 b(\(p)36 b(ositiv)435 b(gekr\374mm)-36 b(t\)?)921
18889 y(Kreuze)433 b(das)h(zutre\033ende)e(In)-36 b(terv)-72
b(all)434 b(an!)p 18481 21590 9422 45 v 18481 24808 45
3219 v 19190 23531 a Fo(\()p Fn(\0001)p Fo(;)221 b(2\))p
25493 24808 V 27858 24808 V 18481 24852 9422 45 v 18481
28070 45 3219 v 19190 26793 a(\()p Fn(\0001)p Fo(;)g
Fn(\000)p Fo(2\))p 25493 28070 V 1 0 0 TeXcolorrgb 1374
w Fh(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
27858 28070 V 18481 28114 9422 45 v 18481 31332 45 3219
v 19190 30055 a Fo(\()p Fn(\000)p Fo(3;)g Fn(\000)p Fo(1\))p
25493 31332 V 27858 31332 V 18481 31377 9422 45 v 18481
34595 45 3219 v 19190 33318 a(\()p Fn(\000)p Fo(2;)g(2\))p
25493 34595 V 27858 34595 V 18481 34639 9422 45 v 18481
37857 45 3219 v 19190 36580 a(\()p Fn(\000)p Fo(2;)g
Fn(1)p Fo(\))p 25493 37857 V 27858 37857 V 18481 37902
9422 45 v 18481 41120 45 3219 v 19190 39843 a(\(3;)g
Fn(1)p Fo(\))p 25493 41120 V 27858 41120 V 18481 41164
9422 45 v 47992 7823 a Fj(___/1)p 1 0 0 TeXcolorrgb 48228
9815 a Fi(F)-123 b(A)369 b(1.5)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 45192 54804 45 v 0 TeXcolorgray
24421 81281 a Fp(16)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

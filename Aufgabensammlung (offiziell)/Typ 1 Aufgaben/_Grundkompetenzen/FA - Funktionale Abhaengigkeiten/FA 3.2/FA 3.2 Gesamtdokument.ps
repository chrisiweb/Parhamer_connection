%!PS-Adobe-2.0
%%Creator: dvips(k) 5.996 Copyright 2016 Radical Eye Software
%%Title: E:/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 3.2/FA 3.2 Gesamtdokument.dvi
%%CreationDate: Thu Mar 22 14:06:36 2018
%%Pages: 8
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: LMRoman12-Bold LMRoman12-Regular LMMathItalic12-Regular
%%+ LMMathSymbols10-Regular LMRoman8-Regular LMMathSymbols8-Regular
%%+ LMRoman10-Regular MSBM10 wasy10 LMMathItalic8-Regular
%%+ LMMathItalic6-Regular LMRoman6-Regular
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ "E:/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 3.2/FA 3.2 Gesamtdokument.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2018.03.22:1406
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/setpagedevice{pop}N/copypage{}N/p 3 def
@MacSetUp}N/doclip{psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll
newpath 4 copy 4 2 roll moveto 6 -1 roll S lineto S lineto S lineto
closepath clip newpath moveto}N/endTexFig{end psf$SavedState restore}N
/@beginspecial{SDict begin/SpecialSave save N gsave normalscale
currentpoint TR @SpecialDefaults count/ocount X/dcount countdictstack N}
N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs
neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale ang rotate
rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}ifelse
scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale llx neg
lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly lineto urx
ury lineto llx ury lineto closepath clip}if/showpage{}N/erasepage{}N
/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{count ocount sub{
pop}repeat countdictstack dcount sub{end}repeat grestore SpecialSave
restore end}N/@defspecial{SDict begin}N/@fedspecial{end}B/li{lineto}B
/rl{rlineto}B/rc{rcurveto}B/np{/SaveX currentpoint/SaveY X N 1
setlinecap newpath}N/st{stroke SaveX SaveY moveto}N/fil{fill SaveX SaveY
moveto}N/ellipse{/endangle X/startangle X/yrad X/xrad X/savematrix
matrix currentmatrix N TR xrad yrad scale 0 0 1 startangle endangle arc
savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end
 
@fedspecial end
%%BeginFont: LMRoman6-Regular
%!PS-AdobeFont-1.0: LMRoman6-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman6-Regular known{/LMRoman6-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman6-Regular)readonly def
/FamilyName(LMRoman6)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -88 def
/UnderlineThickness 31 def
end readonly def
/FontName /LMRoman6-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-515 -298 1647 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF386043BC0B77B47F761487099
F3EE8B97E5F18DCAE51B94317C8F4DECC130CEC55EE16A19C81D4D1668127C7B
86C63787AA273CDA19F2DCE459A6BDCED90E3C60B9F7DA6A0715D2D12F8B805A
5203A948442C2E5796D5CD20544385DB0893AB62040E1E7F33167592F1944E2A
AF140EB52E80AC868A5E53B529B98C77E46244F0B9D46A2FBA3E0040CF5A1D5B
8CF20FDE7C876B9AF4A5F6798ED83E56E985DC30EE5A3B2D5EA30F640DA2DB67
1783F69DA070954570F579C316046D8A6B7EEEBAC73F338A8B7D40470B4468D8
CD9BA8B731E8581C69A41FE873D6ECF58F4962AB44706743806BDB909276EE0E
99E10A530147C9C14638387F89B169CCEA629DE9AEBC010589EE04588A992E08
30B37AB3DF923029B8F6BF19C1C728797AEB5C0F2044753BA4C7D1437E2B9B1B
3DAE6A15672EF1F238D1AB8F873DBF5264D704FB19F5C1CFA0E5168002B3741F
0134E79412F5B0AFABBF3069460C10225E6F7BADE64F07074C9D594F6F7514CA
5B8A7750FAF214600FB248AD5E8D9FF734EE44CA79A585268A06C6FD4E294257
0F814FAE80C1A7776ACFE85D3159ED173F8C4EF0456171564E9A2E1C26464408
16B747D137D37316A340FB72BC005029A06DF8BA48E9AACDF832BA2745C448E7
9225CE3A522B46E18F5733663105D638E571758C9E8D9121EE819E4A12676318
11F0C568B81E1502A5D168139F197F7A71FE60CCB05063C6D9D8A0048E60F9C9
5CFFF69AFB554B3534796218449D2BB97FE15BD1A6FF104BF67F8EBA5C3C39B0
24ADAC78AC4FF61D5847F0A110651C31C7E8B693D1749B15C418E45E80E48284
2B429B1AFB33D68B4D63B8AE33380F0FA4A426F4A8E0F7466729AAF35F157381
6C9D25F988B9FAE475C9BC21222AD7E0721D9B289F29BF3D41D92425E94C50FB
3D4BAA7574FBB32CA8ABAF8D9AF332256FCB3EA78A9EB74B4B091BB5B674B009
7587802F6C66C3BC6E9DF45A22A24877E4A44991BBD0B8ACA80F6E7A468EFFDD
A0F44FB32709CC57D353A47EE953FE22B755CA1B83024E916430F66BCC9C0013
59DF6DF52D943BC285B007D1135D873B6709CF1783C386AC2358F315677479DB
92989DF17B1C7CE7AF4D7985886E4D9610EDCFDFC77C8DBC0F35778E3BB1B1ED
E4A453F3188709A85504074B869A7D9CCB045E0AAAC45C73496026CFC1B35259
5ED325A37D4D89E34BD8A09FC863DBD2D14764D82C2AD229D1219D78BE4FEC35
74D5AE3388DDE9AE21AFE51F5205CF54722827FBC24AEF08F6DD0BC6A79A2DB1
FF55716866C7406275A3206C0B981EB6DC945854759B8A4E469825F31A982083
0FB63D5BB4E8414211B972FEDAA71766C9B0D3440CE049E4FD8F1183360FA328
5D8CD3D8330D96CD8F687E8947B12E123AC89F962A9530DE5AEA07A6EC2C6585
47487FC2B6844308370AEDF60F40B1065F435BE8A39EB454D88F5BC45BA818E0
576B43654C207F12B1FE9D0800C9DA440F8F4DF34BCF34F43878F7D76E5B0744
A7C12C1F974E42BCB15BE6E4B11B1B3C178225B2108D94089E6544907FDC1CD4
24D2D1E8ED86030B6F0F045A27CDFAEFA66D2E563E091E4820C12FE47E315478
9E02FE363C3191393B266A453C68C647CE8EA12552AB0F918E093F58668BE6A0
988C56A71701327F3123ED0ECDF2560422F393437B17993C173D78CA380FA824
540B79150E4DAECEBD1A67CC197C6775A117B7B607BEAA7CF9812FD8C2C90C93
B34EE07C1F1B354CC7B6A68856A2E0FEA9E06345800DD13C04021FC924C88B19
890571C60826E10376A9CE8E4B6C4211CBFCF9709AA29144F3A402FF8311E955
631DB6480CE2CCADE0F132943AEE55FAE4610C564183F2641C90D3BC9C9C2047
3D6FAEBE70E9DB326C4323F499565020467A2F2E305D6C518ACB1F8602BEEAEE
EB033229E3646B97042C0403FA6A577BBCBEBA936014055D10434972C003AF6B
F7798E9858286E4979DACD3F5A953BD9E918D5E46449525A4B02E0FF1D61A339
2B13C2BAA4F2EBC705FD27CD6D2025DA9E2137BBB050747E7D512F9C67296CB7
35C413373B421BB8AF0E7365683A159EAC40D59B99666C590B9C40B2123936DB
F7D6E0C043CD6D918C8C67320A7A144E5291FA4017E674E4E3F6B8002890F8CC
8043EBAE66593FE6A8B43430B87B8469A3FE856445ACA7820214079A40712874
93CF60835B57D688D8741902B245E6D36223AB972791081FE59397EF9D69415C
6C250EFDA6808BB06DC14D79B44B1D65CF8C2EB97FD192DC5543674EA5327A63
F01ED14BB1ED9A0BAF084C7AA806BE5556CA1B25F2298D1B77928B2565A93B23
689A9246F1420227229158747B235AF81D9C07C40D09E4BD687C783B27501C60
3CD989F14A2A0A56807349E490FA6577D5C87A08B6F333E1C2EEABC20A07088B
CD029984DEC1EE34F30E77F7C3174AEAA273A07A8F9639778A72914EB3707E9E
24D51CCB52F85814F0E7B70E525A10C58FE7994621A9801A93F1D2EA5B39AC70
CABD8E491D8F710C5F31260C5AD761E6DF3CFBCEB55C1CFB942952C5F2D227B7
A94085C657D1C6E4AC560C188EAADF0DF449FB9D09F917E5CA703C7E944A2193
6F13388CE0AC08ADC3134D1F38F37B0253074A1AF90C7A388469A4AFE99F2BE5
CCE86EF8B6EFE3C0D55955EBF49DAC8DDF427DD8BCEDFD5D15F53B6627729B60
3B6CCEC05220CD184DF3A8F645825C9F5C0ACFA0EDDF6A0122789BF66501B146
80A3B9650D68D467E0DF4748B39BBE76D32933BFB3185C3972FFB69050956E25
AC33EA5F2DB7978E8581B39E56E5A0F9FF6C603FA96532FA00F88FCC7A95AB5E
44EB877C6E9B75042A9C413C838DBAE11B315A3B6B5FC1351BECE9D1CF451FFD
EF67FA97D58086B1BB39BB1AF6C0BC2386BB3061C215420F75A9D089C7BCDEC5
0559B82CA1E9E633BD1AACE6F06A397B5D75289ED307C730A1DD3B5B7F23CD96
597C5D225B4C7A3FD940B5B7DAD66F4CFF5899A0884293BDEB690DC928A68EFF
BD0C108505F7C6D5F9A8BB59A813C66373E8E10B6C92AD0119E10939525FA2CD
9E35988FD5B8584B58D2A96BA21E71A915FB663A04001D43A504ABC776456B69
DDCC93254749D04EBC0F1106F62A30D3F714A33E4F65F6B6CE70F9F9E8115952
0DC45679D35E06C8A1C712F41EB5FFFC86409023DA0394E3CCA13502D03B122C
2166F38A261A3524EA3A004092AFBD59A17235FED8A6C0BBC9925B98CC9178F1
C644D40CE07A4E70B37A678F66822BEDDEAA3E177C5141A9845302F716DECFF9
1A64657D64B43EAF4ACBAC482D06AFD458F0DC3F4896CB93D7D9640B9469F723
C84543BEE989037E08E004B46EBFD5E6625286B9FAAFADFF8458994798F6A07D
58935BE5A9105C3164B47223A893DC58A24D65FB154BC4409B9A97CCAB9DA5C7
6148888F30AE04C7E2CD9F6CEA624002296A1EFE646E370390407746B9D96181
11EA22AA11A489B87A3C6A208E9CB0B30F7ACDF0B926969D1F898B5F9A7DE36F
F3A32F6B29B0EB5364E310DE9062984F6951B5AA2EBC9853650192211C56DFA3
0ECD347E1717AA5D4CB03B26C4A34300BFE6DB438E60940A1A7B10FF68354C04
3DFE6F770C56475E713DCF6434AE97F67BDD87E81163E68BDD4B8FEE35C725E9
A9EE151663032EE1B2834670BC9A18AEE36074AAC9214825540B01B34472A56C
5AB4179BA79BFEF0DA75C9221E3F45BC7A8F8AF3361EE4B989D3AF06335785DF
8F0B1D342FA414E3499C15F3C1C75BFD2390BC9B72C3D7C59B116F163295C36B
FA0E83CCB23BD376578942C226789972FCD53625BABFE9264F5EEDD2992597BE
968B5B231DBC59328B0F92E1CC7C2EE68241C590B09ECBD676D2E3EB556E9B5A
0507CA54A84D3343C409A009674D3973F49E02479CFCBCC6F3F444867A98605E
DCF4CDE45EFB46A7FBFCAE9A895D47D5DDFDC73D350147C2A6074B263DFB6FE5
8624564DABAC8AED352C574D062226B47B9CB5B4647CAD084A51EDF2A7B5D44D
FBC57F1B0A7E8F6FB6C483282DE613E28E0AB1E5B62028A52F9B53B3FA27F000
DD189ECC42864A1D5AA1AF966FDA5D5AF706F0A30AB0EF438151C7D39682CE21
0D8FAC8DBFABB91D54CC819680322EAB72E1250A760DB5FC904651FE75CB3AE3
44D9DDD6D66B643350BBF6D1653A9614781EB7E8CA56445DFAF3B11CEB70BC12
15DD9D1109CB4D90B6068A5235A94489F21B514032F3FBAC42EDC07887EB8455
6F43AEDEA439FBF139A16A55342EE8A56971A05AF4F329B3BF197F1CE08A4D86
35BC8BADD2AF776E11669B81EAA99EF9150B8D39695D096825DF2E102C6CC2FC
BD09F82ECF0716F5378A8C51C139D72BA8445DEA9CE0C63338837ABF0EFB575E
E2A90BF14437E63C54B529297E4E8AEB9E349683FC5E1C323236F7177878D14C
F0881BBD1006BC9B62A95FE764579DE0CC5B4CFAEBFCC4E3F3D8112A7E8FF270
331D2FB475491A51AAEF10C504360FCB236B33EA5BA6233B2973A1A4A64CB156
1CCCE5676F5FEC5AD00CF74808248E7CA6304838B953DC7DB84DEB6DA73092F2
1F04F718009DBA58BF46AAD3CD7C9BE6B7C56C9816AD1985FB7624F5E48CF6C0
C7E019E37CF0B527D14F008E134FA0711FE40BC8A926EF8BB980B95A2F77EC3E
049D527B3C51560442A175D5D8758E82FBFF5F294B5D0D796A90FB81A5A18E98
E97BE601EA4F039C49B39B0B7A38F24A31CF2BBE8A4A77DA9ABDE0A3E10B009E
48968EC723C6DECDFDE76C4A7E76FBC1463CE5C32B054A731210DF35A32EB4B6
13956531D3652BAB2409BEA0B2194F8237AB16453B9349050643D5B98B056F47
97583A5F1CC5DB3DFA665A46AD11556A9DE4D19C3D69EC4B6AC687A6FFB98191
9CAAA657A12F1BB1A7B638AD6B9A54234FE345E1F0CE798DC546A5079757062C
0D09191F8E0EEA8B2AAB1BB852FF9A88ACE76802717FB43013DA06FF41184DEF
3526C06FD5BAB6F19684B7B126D8255F1A0F1BD08158F94077D191F62DD4AF06
B5E6243B2801FE685033C7E1D82DD51B28CDD8CCEEDF97BC4AF5366221DF88F3
A15D9619D717EBCD44473B8C0B519F7B53237A6BF0906A6DFF38E77DCACD3AC5
7B34E7FE4B7CB450A9C45FCC1397C6B0A86284D5B1047CE4A5267D952A379B66
0FE3A9671DD13E01433F2F6C208E32496F7EA8624C034C349973AC1227D16964
F9AB8BFD27680D2ACC6987BE974B04232D56DDA60AD2549A0BA63F83FAC01F1A
052E23200E94DCDA8807FC3021A6D2E4C13E06F1086EA20848A8E5E5D3DFB242
4B7CC458238CAB79438F28BD4D270F57A959F26997929BD1F884756B97919179
FCDE51DAEA400AAF8982DD653B0A7794729014DE0E4409134DC478749FF92F08
63167264EFAFFBE1F3DA733618F0317DB8FEA73BA241AD8A569A91A52E003357
85DF8F0B1D342FA414E3499C15F3C1C75BF59D0F150CECE0D45E10BD736B633C
8ABF3817168828BA1ADDB86B39E7C589EF576D93988FC7CBCE8F8EEAD343E055
6CB04C7CABC1D37D26ECC85EC180EB8EED1A6E86C7054A06B962B7E28A73BE0B
2713DFD32DEABA293EEC35CA74E8F4E4BDF74C53268E1A7ECA73776BA42DACC6
FAF2215872715967549F665E4D31FA89D07F9F7B71A981F6F30B8AAC02EFBF02
3FB3ACB3EB8D30CE573EBB102DC6774E0673364D2F5F08BD9F392CA41047466A
036F13A73B9E9748CBE052AC7C80C0A7253DA38F8096C24E1B46EEC4A0102A61
086064FB56D54FC54129B7DF0DBAD470D9C53731DDDBFA0A0B019593BF22319C
02486B37F961B03210F3BF96D6BF08F38611A67040608203A5C3D09D6059AE84
C186BA3DDF8A3D03A6269D7BB2137246B7C44A4D5DDD215780BA71E493103B56
3BFF48BE11CF626EDEE4BD2E4A16523198B2E05EC8749D3D46AA1886DE2A843D
955A35B70900EAD57E09228E923A91B2F77E5DB154631BD38C0D833343743003
D9EBF5AF03297DD2D683CF58D8BBDA154BFC9348A604AD1CD1644512270E45BB
ECF09337AC26BBB0E45CAEC8BE479279364FB843554834A226B66760F4607752
DF8677C0397AF9D0BAFA292F4D4F92B73D7AE87B13F108F2C4611CD948F30F50
8E6A5E75668ED3E9929056DCE30D42439FD75C1D03151D5FE0EEFDC575B41DE4
0FC8E52F0331B58CD9A51ECAF5ACC9F1CDC63772C2FA28877F526F1F3D0ABD28
289F98A3ED752F5393470DD641BB173B202FB9C5CFBABEDB73CE2FD3EC6A3ECE
8816AA5C60500DA5759D88CA15505F73ACA804CD809616BE4342A5047C07E768
89E53BC8BFCAF67124B5CF48327FBA645C9485D04E301A710BFCEE5BE0EEFDC5
75B41DE40FC8E52F0331B58CD9A51ECAFA907A695410551EA8F0912E1D19CE24
488F510E909A96C87572C1D4B56E2EB23BBF72415D00225EAF9E7326259D3C28
E90BB62A03F77E45BE54A5F49E7C5BFEBE1C71A3B572BBED5F359EC5BC402442
BBA33B2663D564461D57DFAC85CB745676F87833CC5803627C6DD6BE703FCEFB
D941EF5C3B1C10287CB787EFF59E86B4A72A199C8226F1477A18C5FA931ACAE3
1CE6B70C0C19FF70E8B577759A7C8CB34B040C29B9DF8963000217458FABB580
220574A252291322ACF12EE7FE8A738607329268F442A400BDDBE793C16F9C0C
FA569344FE06F0B093B14CDA8AB813F95EEF8F1D23575A3C84CD3760AAE7D688
5413557D3BA5484CC6C201DF87F0F105C79882D616159780F65C4243F63B1C17
67A866F1F9B4B27B64CB3D4410848E03E71CFD33CB08A071A6A7923A63E3B2BE
941FAD5DA8002F633C08A3EBDF22FEFA476B92D1B071F54300226864F320A5D2
8216384F61DB0CD008AB7A26A46FF9C8241F9F8FC68B9043740852B4CCBDD37B
F728E5648212726C12C5F614AAEE0D8590A3A26854ED51C4A9A1C13A034DC924
6699909AC060DCC4606454904FB9E7BC9FCBFE9F1D1880A7048295A277AD1D40
22BBBEA0A9483EE8EFD959ABF1FAA17C5B39F4A20A3DEC19163D7C748C451741
B5D481AAA4E0464F52F36DC07ABAD3F725A77089EE2518409CB64E9E89BF1483
8CC8E9BDA2CDF3424644937C761909AAF09F2E35801FD76EB4956C28D804A744
68E8A493F99CE2D3DFF0982549271B429927D4775BEB5F1B3CC2370D8619DB10
C162B96E490193208D7CE9CCFB889CC948BEF8AC77069D64A294FC4B927E16F3
C2229EB5B9918C0626FBF8C4B10DFE83AF257544C70A57A8021D8B6A1ED33D19
A1FBA979FF7BAB06B1AB21AC051521CCB9177819D9A8E4A57914BF755FF8BFA6
BF246BF26D4E85A7529ECEB3758E9DFD534CAC1AAF06A06E4D4B1A20E66F1035
4BDAECB0ADC7DC3FA7B24303B3C291BAB5A582CE3CB43CD00D5017219264F47E
5F287393BDE47B047F83B5AC7829017B484553D7C7E5685138A0638CE5D37C7F
601B0E36197BFA431548DC233902D54DA503AB022BDDE741CAD677367993F1B4
E7756DBC96D8A861F3882FEE876EC79521622318BB6960F7588E6392FC187987
36023DEDB0CC9AE428714DDD6619AF0785E90C2A0EF5CFF30014FE1DC8921C0E
A428E4809029FF9F7965597AB420EBB0B19C1AD3D1F5B8685D1874C7454D9ADC
7CBB39FD5C68F4C39DBEC8BEEDA86F09129C65CF38892DA4941732B8C31799B4
E67102E1628592D5D67BC817676C3705F05C752E2CD594D05B15173D5A85A7C5
8E01C97CEBC71B33F0B065EBCC731CB2F06F856541DAF4948EC2D4875DCB885E
AD2CAB2644F1E25DF5F6EF5B5ED29CA7F252DFC48E9DD4953A244E5AE73B98F8
203B2AE4F894FB61F519825659E854A83D4E6F02B610E5B65F18E4F6A88D839E
ADD20F9A893744085F176E43E1878F88D41A08D7FAF7B601661B2E2B92D08E15
1289F0E62B8EF8D94EB3FA60EED514882C79251115EB490BFB9C96586141E225
36AD74B6819A058C9DD483677E091DCE521F60B2C866CD45B80656513B6871E5
258B4F80702ADB029F18A4891A65E0AC01235E81F308949FA133943BAF0F1E43
430A8B4B4675E598639F1E9D877F10F7C8C0EC193A59A1BDFD83F4E6FB7C7698
19702617D08C10F4DC9F85CC1D7082661851B3D94D71719C73B320DC91F4F64A
EC6BB9A6B340F5BB512DC333468FB500D860BEFB0929944A4377E4668760649B
816EFE129661D5D17037A6CB3C58556EC8BFBADBAD045C00A6C3887E0A00795C
3712A58274F19CAB46BEE6168EAED2B0EC9606F6300D6B118D2C0F7796B3FF18
1058A150426089EC7071143F5177610D4C2683129C912ACDB47AECE3F9786E47
398891C3990700F3123E5BB8ACC107D8B722419A9C1F8EBE330D7A360FBCB654
0E7EB3B2ED0460F81AB38B9240BAE845D47A0BD6760B31870D69C4C15EEA09E1
831354F7C4A16212A067BDF0ED84C9A5735368A09CE46A5C17CCAC557BB69FD4
2494D5D2B9C1ED812F3CCEEC1BC079E837DCF4EB4E495547C25D2893E35E2443
5F55A2D66CE9FDEC1A5F81FA219E49C2F4D2C8EC80D9E187F9E15825F57826DD
B17A35CF2E4C380E50E1797F855826EAB926A051DDBBD93F907D31D6709284C8
6F0542486710BCF518C1B5D1E6CF23E0D97980F20EFD24A6644AA26EBAF342B3
6AEFAAAC0AB3727E59F1642789A1765F02944B8E689BF03404F5426F7148BB8F
A709AF1344271173529372AF6DA383511770EAC39ED55DADB32778CAE943CE6E
928C9521FE45A04F184800733B13440F514AF796BCDD85974E0AEC9A164C369C
237DD28FC4BE2843036E872B2A03163F0CAD1BCD5F7FBC20299D5C6FC1EDDFCE
777B796FAD72EEA5713D78F437DAE50160FAC28C1C21FCF83DE1B5516CB04C7C
ABC1D37D26ECC85EC180EB8EED1A6E85129293842B429B1AFB33D68BC88143F9
2B5D64DA3F8DBFB0D329C7450A21E4F97C8FF528ADC2F97F87C592935C07955C
1F1B0F125261DA0D2F7312CE5B3F3A1DF65DD60AA679945BCA6A71E4329DB73E
7F29098787D96D89D74796C6908AEFCAFC2C9DDFDD855116AFD66EA16F96AA4B
9F040771F86CE98994E113749F2047C28A0906100EF57663A483AA7375C850A3
1668037014979D53F051CBE5D246FC0CAC7850013FB3F1B075D4754A82A584DF
54EDC7C8DB59B77CB7A8592B7CFA7D097BB4BF8EECC6634A8112ED925C55E4B0
DF0E5BEE4B29E5DA8177D46930E3E90AEA7B324350D5926BF3AAB7CF462B8C46
CCC43F2AAB8ABEDEF76AD7F14CB416CC957E016A4C72A6A2FC3DA24AF084E754
4D8A76154942ACCED03A7785D88FEE716F2A7D77A990393CA5CBCA996BE2E518
6292AE634456B428623FD1E621555BBCA26C986ACA69714EE280FFCC692113CC
15C94DDD294049748B473FD5F4AE9C321F8D3A7609539BB1E313BACC161E4DFD
3BBD84E1216F1446F95F7E0B679C0D5FE02E0CF9AA45628844A54275C0E58946
55E7B06095437FEF27B81EB14663E3073EA68F60F1D5B1A01C9D57853580E6F1
80343DA29EB6D4908FC8959EC5474049A693CBEBA4E07CB9B5D8DE5E0B1C2257
A8DC4E816B78B9EE734118C991282B1240D3E464E928369FA93FB92613967677
4399E370879B537E40FD383EFEF02E3CF25222317FA36FFFFDC8DEB8DE95405E
C7DE4C780BB7B6AD8195784DE96BECF95B625F9BE81E96E51EC9602D4654DEB3
8E8E94225D8F864E791EA66CE3A7B80CCCA6788AEF25264822AB4D94FD51449F
12FDD58B76CFA594F3223C22C5045B028700C8710E6F425220C975AF0249835F
399A5539D63AF043C136465C5C6EDD6AC0425D8F374CC51FCB15600FF7A49A41
04BC29A0D7D3B555652AD4E14D4104669F132B4584E73C21F2C83078F5D96EDC
72B7B9B4BCC12F4209B1951AF23FF685C14584FF171362B3551FF7356C84CF0F
2434A53A3873E1326AEFC575FAEE1B5EC42CDDC027C7AAC514A42B45A1905906
63C03DB348ABE792DB5E7DB73311A007ACCC65F1BE0CBB445E9DC99DE3BF32B9
5CA40F19FE0EEEAD46783F79B52E24284B8FB0941BF71DE5A8C04AC209B2BC10
57E1B23131263F844B18EA91B95602F465D1AD4EB85656E66D39C6D94C1DFC73
2A196B89AF8000D828F0B96CD1B5C4C56944521E76439B5DCA7732A29F37A08A
140F8C0036E35125E11CFB8F1E397508BCB97A2A87578E15D147311B7C07C177
37878305488298DEF3FCFB79A08C1884C223247C65FA99AC139A69ACDE989B3F
D5A2D5C0A6D3663AFF2DE36A2249BFD2DF460161D3EA5C1B998A83F2F595DEA5
468CAAC2B78E5A1993F2B6373BD0E80C86A751E25B22ED67B8950124818EB258
558D55DEB25473A60B53D4B46DC4CE9B9FF1A7480F80EC4A178CF4CE94A7EEF8
762859353E43AF38D0D4E667A80166DE5FBCEE3580C618C1814F112E445F32C0
970817BC4050803AAE80CE06895EACC815D11C5043C96E89E9C036E84F31BECD
3B9F74A6B21D04D33D8D6867E328F1F84E503F30CC012322BF86C75D542DF2E2
EC862783E843F9628CD09328D96F2191AEB4D4ED70395961900B71104E33D18C
699CB21CBF1E702A43C212F7FDBB168337708E78CDE23E82878404BE7530ED3C
037A517E7F4D92C7AB7DB46166D3F9D51BF73E000254A8671C3523CAB620C1D5
6647B6CB1AF0CDE7B27ED2707252504B6C74D1B1215C450ECE4FF7677CEE2603
269D5F288AB410ACA8C41E7649B66330C265A5B7F41D915514AA0FAF252C2D47
0BE8E487B5C8A276C074A1F51A8FAEF46319AB90126937F49345B442931D89A2
D64E9CEFFBF0E3792A219D478D9159272C789B363F4B77BB6F513F2D1CF82BE3
64B0469874C6EB4C3D782F2BB7EFF536480AA43F0D960075B6036943E3EC779A
517C4D6040629FA35ECF5F72BC11EC5003D3A2FBEB95AA878584A8ABDF1E8CF7
8EBE55ABDB3BE9C60DC252CCFB36274DC69EF2D60CFF2873563D5F829FAAE46F
12CC16254F52A26FE47FE41504D3E851A0670AA04A36A3BD6DFED9BC3104B7D3
1460E3FA77DE5FE016DB36DE56AE7E663E81752C1539A5613325DCF159B32F71
199029B3C52A85E3A069D5265B78DF1E8A68FD35569FF3BD8484D4C450FD2CC5
3E9D5D933D8D348873F7A02DC5A4062A9DAC0FEC368B11CD07341EAB622A7559
CD4601AF33637D19547C8D92E24C1190A50E8DCED4C7B578B8FA81CC95598564
04124F851CDAC202F133D2A0021D5BA5ABB98A5D4359E63E7B5982A26F1ABC0F
7843685481E40BEEAE93DB98DE236DEF8BA32A536C00BA8999080930FB24143D
D7851B5539E97DAEBC0C57E6CAD2FA699ACC80B728B77A07EF96201F5BC9187B
8716270EB91BC97E629FD0ED9D4987C1C3F19BB1DF75F985EB18BCA8844B267B
7610A6D157EA3ADA7CF63EAE1CDEBED0C8CF6560508A7BD68F0D6896FA97C1DE
35DD2DC448E17A060D578CBBC23C7B47CFE6CFD6EBAE3E24A85D002445BF81B4
BB62B6863A4CFAE37F715EDF3EA5A33679FEB21AD1156AC74542B942B0A4F70B
64F7A89EB8D38652FB57A729387C6E48EFC3641A1DC59A816C933FF531910AFD
36D4E7369C37B8761341D2763A1FF764ED045DEC3F74111957D7B00FCF5F246C
5AFD97D7F7DAEBF8092DFD40519CD63CE8E38A742078EF5DF4BCEFC85437AD3B
3AED02EF14AE8BD323700B083E6FB9B54FF40B63FFE88BD7FA6074CD669B124A
8333FC4173EDC8861F00421BDA29947272ECDD4FCACAEF0B0D408990758FE706
25209BE1245C285B171DAA6BE705FF575048CC768BB8F138C00B63BA4E40BA8E
5C0A6D51ED6EBCD11B5068CACB821BE08A1B06587ED0BFCD31833B1EECAF947E
67DBA7060CF90D715B1B4C7A6B386466E51305470160FFA5A9FCD721692FB97A
0DD77737F84F944EE4F182641F051987B79A1615938B81AFA5C99B02AB37CB74
92A3032BC29ED513ABFE8E6F085C4FA6A856A3B0FAE27B20E1DF3B80BF4B5911
464BA2D6CD239CAA9B28146CC516ACD809E764C8DB3BD7F80C944959B74FFA0C
A674B3A52B5E428F6A5529408AEC4A8149338459F8BEE4E3EB8047907EE0174E
9379E76128411F6F62DA2124572295D7FDF91A1B0837AA7F80FED4EFD79B47D3
1ACAB7921E974E0F025141E0E37EFD447C37DB455D2F083DEA179DA4FBC32DCA
FF9A18635F0C806A7F79AB1668CB03AA08FB060A2ADB1D7FC295EACA3E7EA4F5
ED92E78990A082ADB3A32F0774CDB0A4428FFE3F0A1088EA71BD2DB74105301D
0957D57EE4D15D0E8C5B0F468202F91976A5D9C8BDB5514157F1C88F69F5F803
FC20B59D8A94F59777FF203C063C4273C41CC2B831FAC8B35A70EB34886F37C2
D18213DA6D79F0231FD18090D6EE761B5AD3510CB3E47EEF53A23BBC9033481E
0B0BF46B0980D70618A821BAD346F807B68B77266B06B756BACEB5FCD36A0F15
3536DAD78AFE7ADEC90B959AC3A19FA9D0303DAC5BE0058B7AC46EFC13F30FFE
A970858E80ADA63052023889668F4C3E84553C56AE4C8E2478A28257BE4461BF
0D5737FEF579DD93DFA22A948E88B3B323E0DD7E5B229A8753CEACC4610765D2
CBF708EDDB1B5DEA54A92603EF47888C851EEDE853AA9F0EF60D11E54B7BA047
1056B021C03FB2A2D2262AFC1467A7217C1C887F89586F84CE132D460067CEF7
4BB5AC6ED2CEDE02799D369A01933B7A77D835694536563232D2B7C11EF06056
690527A4EBD1F1355C3BD6CFC4FFB40C1CC5E799B3728AF8D6A742D6FB17DCAE
007D8E2C41A2EF916B6A2EAFB651D0E490A79CB8484AE4B453B00318B966EB78
912997CA884D714876239501D7F89D32735ABD099F2B35842AF2A6CFB7EFD6B5
7700B114375B3A18CC1B963DFC1D7F5B9FABC9B989941219026BE888DE73CD3E
463B692A4B59BA7A760DD7A81CDDA23CD0707F8B2CDBA530E9795CBE691C141A
143280C65FB2AE0253F1E002F576583BF8FF1FEE3ED0DB577DA27E45FA577E9D
4B958FC9C413E5FDF7E3F203BD2D3299DCFDAB3D314077FAFF599A6162779C3F
18AD0908F75EE8A4B38C1C582F30C6DF5FA2097A078ADFACAE547DA5926B3D5C
9A7A59226CBC34EC86D2CA91E32214DD857E80C33FB4286BC47DC77742A8C011
C9628BED9C7AD8647A15BA064C8DBC0B9A1993A9B392A4FB76D29C0565E07060
0C36FA9FEB325D9B4567CE2EFECCADDC8A013BEBF580573F64AF5AA364DDE757
9E59AB8F63B4E0D1C4D5047F251B4AE34CA73B1499B395127BF2453FB7F04A26
6A9662CD00305B894723028E0529C6B747E58310BBA39C615BD9DD02347E6B3A
AE64A949E5C87CCA39AE1F17BCA6C77E1A59B2C119DE916B29DE7054ED785232
C74B7B92C5138A7307297BF2B08A80874CF0D889281F4761B0DCFE61E56EDDE1
4DB1462E4F9859384B15882C6B0E2214137472F7DAB6811B1027FDA86CF66E03
2F1B0D4946100FCFC2BE23B43458474D510E94FCE182C53165413E1FC4EC239B
58976F94434C1FB78334D81374C359FC481521A3784357B8E3E7B676414CF22C
D112C8DD5A99D30F55D7EE28DF2F0F6174BED2CA19D075A462526DD5D645E764
B114853CA1BF1C54B28F3591C1B05ACF3D46952ED60024BBA20AFF928DAE4739
7075327EED7195DEE9EDE5DF536ECA77341301986811B7C76940F64EFF4AFBB0
62D33A9D22D14C37AA9EACFF7CC81EF9860D5DA595CC6778A7F06A3C36A4C792
D168DC61B0E00C91D60564524D7B1F773165050913614F8EF8A85BE29E113D06
CC844D519A65F780A78E56CA9D874106924BF00029F54AC39F6331A4A81BF656
2ECE87586E03C99C4FEC726E5D5CD4281510E8B82A5E5CE852D1AB080F8E3F97
843B172D926DE310DE9062984F6951B5AA2EBC98536501922111BACF45C80493
B3ABABB911186600AC62FEFFF4F7754935BE18AAC41C860B70833B92CB7228AB
2C8F68D03B6326AAE61A8AF0431F373DF8E1A969C52A99052A4D3A2FE770C935
8686071FF45FF489BCA0F4BAA4D5D965566BCD23CC0A112E0565D1E1920094A0
509510A0DBD662C731340D67F8BEC315412BA9A18E9744CAC5F1C047BDA80392
8A286C4E76A6B2EAEDFE2FDB17FF267D0F21C35E0E6977AABA48CD601358BFC6
54F3C7516FBE690A67828F56C593686101542A0830ACA6918C86EE5D21DBD34B
2EF84D336A889395E771CEC29602496D2F4CC3005863B6DE09084927E0DA3DB4
54B1BED8CD3EC75326188E28CF534185E66A3A161EED1F99B8496A9FCFAC1349
2DFBAE8110E9811B2898D889A581451395C7C58186048384504A909B92A16E8A
E2275E83777297529C5ED2573FDC622D7D4307DFE77A4B16D1848D485679E592
C1AB0CB02879C5C4AAA33FCFA22C0A4AEABE4D4DEE308AC29CABBA411987C715
206297C0971364CC5B83001B07895F0D8126F67F4A68120DDA56FC6E466A3CA4
7F0F2383A60025C5D0C64D459276BF2D8F25F13137C7F1CC459CB3B3E945760E
98EAF5063E373A084CD6829DC18D063618B2C9C5C3C3F9B01526D9D71A749845
22CAFBAF6CD275B0F8470DB58184D56DEFCA7213829FCEAC430A54AAB1C27135
F14DBBD172CCE6CD2B6095B0157B9B295F244E6197FFF3759E08318611701B27
F723F3786A03BA85152A3C6A3620836DA8BB5CE31BAA722DDB36BA5642CE4117
AD1D6B9E368CC0191FD3EC665A0F563B55F2738B16DD43CF81342B8A5B460CF1
7342B3EC42F3EBB3440E2E602354F10D0B89AA2077894331ED25BF6955E13DA0
B4DE3740C28682534E57DF995F87B37C537FD5D25484B3B641C95A5D96C622B0
4FCDDB40B675F081053377364DE99FFAFE6D22E975678C98EC8A9069AEC8E237
722DBA55BA4214EBF66B06D640012D108ECD3329117185F2DCC8334D331FDB4C
F16123266B94843C4586F7B0914CF4136BAF49D0A85D7764EBB31166A29307F6
343DCA5AE9814FF8EBFD456F77844FC27438F6061CE0C155A07D1064B66DAFAF
B39332B22F2C43C3AD99954E96E39B52434EB13675C377D3C5C7267BEFE151C5
2A60427176D702F257ED71B2803A6BF70C74D8EF4783865CE3532C2BFC6208F2
BEDF5E26A4CAEAC397152D34458B281D8EA05D6583D2796F440720BE08EE3F85
5A597B65071E7946D81D3FF2F85F8CC4417D0D02BF2477552010705ED42A0896
ABD62805E2042E248A874E814B3D78F46AF4F001A3885AB7E7C4F285F9BD614A
00DE6825572189A19315AD3976AB880E5F0AFAB2498FE1D79954BD53619CA376
01FAEC649E37E9038CEFC41BA172055892C47614A9035E7CD93575C377D3C5C7
267BEFE151C52A60427176D702F254590A4A2E016B5FEADE1A79C0AFAD4A8734
34BA54F6D717AB58F78A4BE43408C7C2F6D4465B31BDEBFFA59EB012DB2B39A9
370330D258EE8515E8CBC0DA34E79D8085F8BD147086881CD9C9335856F5F195
FCAFBC3813546176EEA6745F62F0715C865422128A163B6C6AE0D98CA8116AA0
AF078126540BD2D435D0AD6CA9233144A0545BD34F7449237157219D79611E52
DE72B51F2BB650628AC5E429F423F250EB9E8AEB5BA66E6FBB5338F24FE4F9C3
EFD3404FB795EC4D0857AA5D6620C95021DF41F3DCF687067554D464306A44A4
9AF8095E431F91B8EA9B312FC277BE315B18312C8BE99537C3E44E721A361BED
6541FF9AB02AB229B8D20C7CCA131B23CEE3EA3747DDE3939D38A4E5DE096705
B4034226D6B5DE97BBDD742027FE22B2AA7037F55F05E547ADB16F56669A201D
A41C1DAA9B4E66C8E5A03D5F1D98DE47AB51DD77014C2925F4F0125AC8AB5385
65E06699AE5D68759A52096B795842B6283A0129D49E7E9AFCA904B37EDB25A8
0BF2A04235CD244B0A88652F5A1EC5546FD4DEAA2A82A209E244948D832C75AC
8BD1ECDD9992E9F8CF3DB923D549EA4E6D98A6FEDF3B2BE1E54BB8EFB775F1BC
E8B6B9B0696233F5AF80CD6A74273F5204CCD208C109EE75EF233DF172A38D21
74B4730947637701EFBB2FBA3063483F9E82D2336227E1D03B98C42383BF31B6
8F6A6309C9BC0124812E4286E9DB31983877FBC16B4E5EC481D8E9EF87B4C4C1
08E799E71AEE8C115164BD9BF92B1A79C9C7090465E9A00FBC634995A712AB2E
112E3E6AABFC1D6F293F9EE845A2ED6C77763127B0725900DD92FEAB15171D27
2BAF7200828B2E085A16B4BB005B30C1614AEAA2AEC112F30B3AF57D9EAE465F
BEF66FE82623DBED8135D5D1E2A2D9811D78900B7D347046FF9C2A9DA7AEE1F4
2E36FADCE69D1C31BA552A09B30216F9A60D1F58E74D0931CE5AB03850ECDAF2
01BBABA430326604E56F26766AB98A5C51659EE74A875CB811177A20A894351D
75B4E76BFF75C71D425F9409954DF168966159B2A302B801CBA292D1C07EB52F
3849F14FD66B8A34A64B53A37CF300EE316C982A0D58ACB2AB0B6D52C9A745F4
40BE173AB90CDB8D5A62492E44D2391EBD6625AEEDB22442CCEB84056435B241
9148A456405A6BDEBB44025A835D94E3FE7ED4898A10D61824D760F2B86372EC
36424D8A7581AB38447347DC26F8B6F0422F3340A01614CCC41D40D27BF1870C
1EFB412C14EBB08548C09B8594FA27E14DDF887194960B9E3222121B24B97DB7
866E8CE52B81CF44DA54017243EB1546BA7FE32409951CADA934F8896AA60374
62E2444EA33B01A22F873D195661CA3A1BBAEA7BCB4D93C90C0E83A3C7BD7646
FCB6C28886EC210A1F84DB25137A35AA5C7691B72AD442BDDAD18F30DB190E4D
004740C567EB0F86531E771C74DD3701419E5B08ED32C290A30B02CF572199F7
4645C0D9B4DB9DA965633F5DCD87B03DBADCE87FC499FF9DED0E6C8FD6715B57
97EDAC56AD49F59AC389979AC060DCC4606454904FB9E7BC9FCCAC1D11162783
57D8659BCC81753C2906EAC08FC3FB9AA3D2A83ADAAE5427689ED559EBE5BEE0
A331DE6080DA757EC74FFC5E9B1D2F70A87D381F424FC2F34BF902F401264C69
EECF460CF82F033635EB5B3A4F7DF718E0EB68A4F615AF7AD898C9CCA5105A68
7B74DAC1CE89B910A9B6D2C887A3C469F9DC2A96B15D33FE7C565961C2A1C0E5
FDAF8955FBC699FC847F077A81047021DF46F69AD1EB8532A8962EF0DB618EEE
B9F1CACEBF7299500D3C3520DA9E6E7040E6A0131184185A428C37E133A909D0
2EA7CC5DA03D0AE482ECB5F7AABF9749CF4B5BE79087218032FB6D3C67E6A4D8
646298E229C517E89E253C6E46CE01444ACD693258A53F98DB0DF475C8D74928
A381F1E74BB27AF07B164374998F867ABA7A5DFD196AC274D49269CB03F74834
07DC1F346E0934D208422226264CE8AFE6E870382132172F06F105BF2DB51EC3
DF2714104F031BF8D85907DFF2849E4C3C7B62E653903867AB470C9661EC1297
4B4B88A0AD2FFB4491A03346BB7DA151B13D4957485E52C2815090CA3B1221A1
2F749E5C4197196D48244E65F7A54E14EA3DEE4621E32EE2D28136724789FF22
47D8C7EBBE4E95D9CF6F8D4D204CC6D61EDC66E28B7CBDA7CB79240357C0AF60
E817427A9126A9C32B377627ED3AD4456E3A67BF5BB49920F6FE6620D699A53E
1F1DF8D844BB4719549E214E37598BCD577141B8DD30BFF0E275AE21DCA9039D
A02B91411A735B115F242689F50313538F4B55B04A1613170A35B4A0E368FFB1
A287BEF1D44B51773DBF726C3C3A068A6FD312637F59D0DA55F3777E4CBF6A73
D17EF7A14D2B11EACC1D21E9D96DFEC09E9230E3FC37327DE16AAF88BCEA640B
CD466BF822D43A0234ED71A3E1F6F88994686783149A0710F86A46D0B55C396E
C4871CD89B3C4BAFC0110D887303109E7301CAF24954577CAC249BA77684BA42
EF4265500BD7526B9F6913ADF087F5F7510A50BFAE27E5699C2C8779E6FF88BD
461B9481D6D1383EA3B958806AA7D7CA254E2EC932E35E4BABA9C7632E6A1288
306323F83A9D58132418F92FA38A465EFDFDA7927BDAD39BCFA5CF753B31B181
40A31AB9E0173989A0210E44FCF94F75193347C58638D66BA10DE8498DD2B34B
FCF15C0782171757D2B084C520636A7C505B725F84E07BB440E6AA70D874E94D
B7A2107A5C64EAC7FEE09C6B19EC08A417CB94FB74DCBD8C86E824BD2144373B
79DE2B03EBD1F0D2CC939BF4B06ACC049D5CD040A216465FA5CB76A311D33D22
37E50A1AAAB44DB9066315236219B82CC274282DD20983EF6E2E8BBF49D34D68
9661E37E53F46E110078DCFDAB778F73220CDFF1BA5AFF5649DAEC2702B9F5E1
CCFC1F68EF73AF31415EA85EAC14C713F7FE392455531DF2174F26B24A1E344B
BFB84E7B77F7013C9C7BE8085706C271A2C0357DBF44D76900678839B3E0903C
1EEA3E1ACBD01FDDB266460AD740AFEAD12DCF8891B740469FDEA3B0CEFBDAFB
5B6C62
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic6-Regular
%!PS-AdobeFont-1.0: LMMathItalic6-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 417 117 0
%%EndComments
FontDirectory/LMMathItalic6-Regular known{/LMMathItalic6-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic6-Regular)readonly def
/FamilyName(LMMathItalic6)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -88 def
/UnderlineThickness 31 def
end readonly def
/FontName /LMMathItalic6-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{0 -250 1241 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD113E9A4707A44200A15F1431F9E64
6F74A5028622F1CCB472247A2D3C92D19C0AF82A97AA93420B2252C089999F87
E9B99CE919915A7841E47F18EA2729DBFB8D0F265978077327D4885A16B99026
3AF09EBA03D665F320B724646224778F5207197EDECD6BA321B46A9C7B1BE014
C7AA72E7AD74DEF4CCFD1905F237AF725D38159039E347BB692EB0BB42D933B4
A4F5113867999A3BDD6E56036DD46F7BAD9445E0EB69D6BCF844741CD349792D
3F6A794164344B7301C4BD8C500C92214EAB1BD409FE0D61470E69C69E668D73
F1418A89939E9AD8AE9F3EB718A13741D72F79B4E51DEFB2029F4979E0C7F79F
8178AD7DFC03558964BF7FA8302240FA1B7CAC01375924C41D0200C60452AE3C
2CD5F7EB6BFA476372518118DAADC1D6E053E534830EEC37A0160A24FA76B86D
3FD75B97E83D4B1E1216C901748E31B5AC51D15BC8B8EB18D83CE35525239F0C
0FF52411E08D5893C09162BFA0EA49E1290193D19157A30A5F21797106802635
1F19BFECA6B40461144E82A051FEDBCFA7B096E34A7EEC13F93B74652D2EF4A7
08522EB97A15EABB2AF74CE73F5B8935F65DC93EA24E129BF18D5F8B4E890B81
105D0673055DAC2775314AC07C1D99428076035B0EA20A382B61A8B4548BCFF6
0F0A48E059E7497260326AD89AD9815B1F9B36430AB8527D61C5EFB8AA5B6B83
2B5053D7C25089EFD48A2E023C219158420D77BFE7CB795628865715FAE6EDB8
89F423F0B97DB7AC2927F97EC4ACC2E9F4BCE46EE66B37A2F169E33177ED4408
5F93FDE909FA829DE0AE5D9BD0BC4A75A0141AA472AD0ACEF816F27FB4A6CB04
13BF8944FA31EECB2BCE2983E7CD2C9C68868890B42D91D3182096A7719209AD
32A69532F10D71FA1567B10B0CCD4813495F34F89764223F7D45F888FE1889BC
F7E9E0C3E520C1536228FCE80FD44B49B8059ACFE6DA964B7D4264039022F974
E8A6827C6C472B256C93764DB10437A38BE20B869126487C13C127C923B92F7A
9FC2E6E810BFF59200667CCE4717B7070B13352A50EA07C4B2688EFC23709F8E
4F8F52F0A87021F79A418A8921E8438CA5A91511C45032BF69B6ACC270E38F86
232A7F1962F8E1DA9F256F9EACEF3984CC35AEF0F9A27114F450E9AA20848ACA
3055D65A52F12B27B75B4CA9A50B16185D7A16C107B91C2E3BF0D52207CFA8FD
9B15818617DD6ADE0B7AC078D3C956DE8234DB650FCE641CA254220FEAB75999
3BFD92579EE2D4830661C9850FEA5B5D7AA96B5D216C8F0320E28D80290743A5
BEA1CAC1846953A7D95CE075629BF5CCF7B9E191DCC9D26693EC5D737F9B7843
8290CCA4FE8D9F18AC8D05843A6567BA5467B8C1397F86C4D45E8BC7FB589975
823965AA4DEED3B4ED024302A48E0F61FC8BB4F5DC27A52F684D0D3C600C20AD
3E1CF0AFCDCD0C091FE0293DB4BA5D14BA73F6289B410D9DE54FFE1FF0F8620E
BA52103871FECD34A47509EC09887E48E6F9F591064F340CF18BE0814E9F89B3
F14DA1183952FACA513061FCECF184BFA910156A890D40CE116B103792D9C444
84FE52D9E736A5CC5A067AEE262ACB107DFC5B8045BF2BF088F2A7330450BB94
C6AB33AC9DE1FFF49F24BA07EC89954C4E2E41A4DD4D3CEF782BAB7C447A16C6
3CA4EDFA8864E91BF2690F58128CAF31D23B81B141A1C0D2EF34CB1F7570D730
5A1C63D97C5B4B9168CD7F2C13D8033946B2E802383526DAE10121F2D618263A
CA1126D415A8BB4E577DDFE4E389F472D98B6EE900A866D979D6AB3FA32E6D40
F2045B0DC733FAB6F6358B0BCA387DDC4CC963725F2B7481F6091D390C96F825
943290011887
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic8-Regular
%!PS-AdobeFont-1.0: LMMathItalic8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathItalic8-Regular known{/LMMathItalic8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic8-Regular)readonly def
/FamilyName(LMMathItalic8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathItalic8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -250 1110 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD112356772A65C14D49D03C7D456E5
1A27C2ED815B30E268B02FB1D2E769067ADAF25F28640307E3A89F0B04F44A1E
1392A44B8AAD82CED1539B6A9CEBF441EB81775C7EE4CC12313F31FE710DD429
4B1955DF2BF7A88E1EC21DA22A63BF63E89C913EC01EE10A0601D6FB239DF59D
2CEE7667F4CC4BAF660B24F635F981638F40E8CCF07F21F5B5FE3B5C115D1000
0E4B2ADAF7B1C53935EB7414421DB49A59F82D98D08351CB0BF0C06DE836CFD5
42D68D51AAD4069871F257AB7733F8EABD731FF9B0E3AD64000BCDBBEBE26F88
C96730B45C14458F42927E24318A97B48235E5FE200DB40706E9B41AF7CA33C5
67BF7766BD396006C5364D1E736B256538E5D163CDA75C4F419620D5BE5DDEB1
F7D7A55B5ACEA2B2EB4B78997398C7D38B3D7B5774D980C087236ACC7346F518
7607A19E85C83E2C6ED4F3FA8C15B65FC3D117BC5E3FFE33A5B7A69F7F7159CA
667D96B5D03E4C5E55FCB1F4E2148B4B8DA87567988F07CA181FA6A3C3C30A33
80AC6F4E92903C47BF489A2376AC02B00B8CD01DE080C96A452D52B4B56F9520
B85062F15C4828813D3694BB4BD3512541C82005C9AA5C065476148A4E47DBD4
580CB1ADD206D19E7D653E2690FD48B252BFECDB2C64C96F7477B2E5EA0593A9
84841E96F931F01B2B61C26E8450D5F2B37B51EC364BC2A1233FD108DFFE0F00
AE57465ADB0191B38D14E89413FCCB77A9FCAE09F59A3F5C352570F7390BE91D
178255E10C02CFB7B679DAF86EB351BDEBB8A7D4DBB9C65715A1355FC8D2C355
BB452D44AFDF7E25676F3ACE7772980137BBF6A5C4C136C45CE680D23B992D7F
7544FC9F70CEB83E2B66980ADA7E13488B61554D8CB264FA76074355F7FF6C55
FBF130009A03EEABEEFB1ABC2BF844196D67F7A6D7B5F71162E03FFD780CDCE6
720DA5752962EF6FFEDFCD9C2CEA3A186DFAC113892B6E7F1EC8B28E99D09742
86959C4335F1C11135880D99DE3167583CDEC6AAE7ECBAC9EA9257EFEE0606F9
647192682B5927B29C697C5D32A76F09EEE6DF6C47E27EAE240D5C0A1B04DB28
562BA8F11E5AE7C363134D4B5796F8243F2CF371342796505872206E56F1EBFB
4F46FF69A98A9E6A6164B067358ABC65B235EB551B1C5C2D01E92270974CCF47
BF23B43458474D510E5D2F3E60FDB946E90F725AC762F45888B71FC51F8A2975
A0D17A2F7CC591DA0D48566972B37717E066B5F02C2F96A3A4B86B1FBE99E4E5
E9A3E332FFD04182DB206E8CA554768973C3CA0803DE9D54C24DC0B7EA2A474F
C9839C626B18CA7458B4449C9CBF2BE601A5324B8B4781FF5FE744D991B8520A
64ED1F2771F4697E4B0244AC8C0D428DB5C7BECD2AD85DD1A6F32179F961C940
347763B94DF06AC2AF0148F155CE68EEAC2F1A9350612AF78361DEE6650FF8DA
F750441A1979F57359B3A79316B55AC8DC56CC6A7F06DE0DA34152D49F8FB8E6
45FF40CEA4D0C4989F9B2F97D5EA8B269A4AF424713107F2F1FD59647112898F
50F37CF5D2B63E7E1E51F2BF9B41524A854E2CBC3B12FCFB808EC3D14D98CD84
0E6A7AE78F3401798BB1BA386F35BB88920089BE0446BA87DC51BD3E0CFD1331
F0353ABDF5585D2143FC0BE533750F71F9BDA615EB9397D7D5412F37C1CFFA36
408182F34B07E6C77BDB856FDD0162B987DC8EE59196C893DB783263D3777441
77C6F2B550EDEA32020217986E97CB9DAF27284E298C22A4F4CCEA9B5C74C93A
2AEEC8C9EF427B64C03E250F6BC1F941D9EA590D8EAAB143BAC6BFB2B61276EB
D46C4CAA6E9DC3FDD02EA7A78D59FD137AAA9540196E75AEB8CF257962B20619
046CA8B2F612EE0F4994E631B0EC17D080C744E53A8AC891A533028241028F84
1E4FB971152C250D98A6AFB01A43B1290ECD5D1B4D26FF668B63BEAE8D0405B7
4A5E2AA32CB2E285E91BC5406FBF17445A200281F079AE27BCE9FDE12C50C693
35E535089F487044DCA33B8B3CF3F8A0F496878ACBE2D3677EE112043FB7A06E
F14838C2D3A4917EA7380FEAAA0FA83E3CB7130D9BD9009A82A5BF1B1E3D6383
2C3B0BCD18180DBAB2BFDAF7FAEDDC5A22C3C8382A27C8E7B5F3C2D2AFA8CD21
F328CBFD542C5E78537F32C774044BE4B5BEA50C005B29E885B180584A33D5E6
C7EAE206629231B41A0BA127DF482278221D8788E82D86FF1B4D8FF73E2D38CF
52B2F2AA83C1042F01B11DF4F775B659D158E945887D07A43F61AAC09ABD0C47
6F089391360AD817BE08B7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: wasy10
%!PS-AdobeFont-1.0: wasy10 001.000
%%CreationDate: Sun Mar 22 11:13:35 1998
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.002) readonly def
/Copyright (Metafont original (c) 1992 Ronald Waldi, Metafont curve conversion by Metafog (c) 1995 Richard Kinch.) readonly def
/Notice (Copyright 1998 Taco Hoekwater) readonly def
/FullName (wasy10) readonly def
/FamilyName (wasy10) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /wasy10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 52 /XBox put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox {-23 -1667 1720 881} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB02CB1AAE
36F1D7B67C605A37687A9C3F7067F07673039D1E3E1F5D9B09E6A389A55EBF12
06E72531469F768EDBC4DCCA572BD608C4BA8F7EC3E5BC61C6D949C94A843E69
0622F0AAEBF5CB25A2395DFF6342106C198751CF0B33691FC18800254AC54C04
02494A0E3670008E8BA57A3CD823BF47494F2EF9244421A8A0AED84D153D7201
BB12EE9478DF00CA573F64C2474817FF401EE94BACCA8AFC16E776665C3E1E31
89AEEC906A2B9F8974BEA7160C33F0AE7FB04B2666A5B16659D6DF66A688D80A
B531D9F866F21F15D55C6FE75A8787091359698E434EF9C129EED0427EB96787
B3F25C530E3664725C63D4C5DFF9D05CD13619FC41A001275A78C58F85FC7C4A
911CC31CB426231473202A698E5715B032D2206BB361EFCBFE3E32BC0C8D9BC1
353AAEC62EE632FC8FFFDCF6E7D928F562F689406CA00C11C7EAA723B62FFD2F
5F6343AF494085662CE2CE880B04F5589396EAAA8823DBCDE56D868B9E66BB8F
10EA91AF37D76A1BF27E69C2A2ED1D8B25434C0F205313ECB8A6E039093FFB32
983346BEC569B175529DAAD1FFEC1A9302918FC947C390A86C061AE0F6522D79
2D4FE06AE4FABA59F225D7ECE2EECD4BA1359DB18F8957F551C5D6F037F18545
CC6D03EB2DCCCFA294492ED72A737588457E5B18FA4CA0F6D6D8963CA35DFEDF
31A684FC0388D416D7BF6CD9837AD8692F284F24B80CF9F24DB10DAD0C4198BC
2D2A52D9F75CF6C52C7AE0D8D4598DB750E9CC97D0FD31EE8C598A2FF3745694
29DA808141AF4D8F8AA36D7DDCC3457D5E082B2BDF7EE060296721D44B092E70
3607B2335488925E41B22D659C8F0FFEE19A7C19547A147DB851262E47E9C4FB
0A8364BCBC1C77E29A1183EF185EF35B9A5B13170730ED52D5C52CCB460E7D37
F4F37F772794BEA0DA201C99C52F8AC2E4CE7FF33F6ACB796E55BA2372E3B035
52C4F57AB5C0BF828DC7E5A8F8F00ACE0120B99667816FAF5D736BCEBF7D45A5
79C9B5EAA32C9B672D764D2F51B2393ADC71A36AC0D5CA76F3F571D50CB4C1D7
CA77149B8F0C98198919DC43890A7D49B0A6C7268E399C6C68B6ACC0D1E9F5B2
931BAF9EEEA6ED985835323E85D72C6A607A99212BA2DDD24D57809EDE36890C
F8121121306593CBADA65AD9EDED7740C9A2F402E3908B54CB4AED249AE575AF
E64C76BA802490ABB489275E5A3F2B926955B0D961A0B9B3AE205C074AA695C8
68FC2F6997531FC328B8FC65BB06C17B212C8C06D5127A14D7989D24912D1CA2
1FF37457E65829B6E1C65A09C1A101047DF20ABCD57E067A7298091C88C4B587
84409C67D00F7D95FFA0D125FB938B5762D912E1C0E116AA0593B1231FDF3BB1
498BA3D20DF13C7EC6D40091B789C9FB7CC872BB73E6B9D4ED8A555CA31581CA
0F057B10C7A8CE1D7CDD4FE2D5332FC533158B8CE6CD3E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: MSBM10
%!PS-AdobeFont-1.0: MSBM10 003.002
%%Title: MSBM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSBM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSBM10 known{/MSBM10 findfont dup/UniqueID known{dup
/UniqueID get 5031982 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSBM10 def
/FontBBox {-55 -420 2343 920 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSBM10.) readonly def
/FullName (MSBM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 82 /R put
dup 90 /Z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943E919FB4E3240FEEED78EE63
0677FAF39AB2543D18C08A2B98B97451CD42CB7893DA8601CC0F45A65BEAFC64
EF72554395DA801CF2E9E3B03F65F1BD98F8C5F8EA06D7457842303C1A817E7D
69821807328AF426B9DDBC188A79A66FBB9E6193B4A3EDFE3136C6574B9C4C94
E2CBA4FE7997F949BB2DAC0D329C2AD8E4095BD18A037AC9F77B794FC389E5CD
56CC4C0B74D64FB0D02C92B88942C18B6DA84D4CF482DAF3A01E80BE483AC6ED
AE98F5F3E49BC762EF6BA937D528E751D9588B0A1E82EF0A5998150EC3854472
5A91EB983915BC1D6E2C3E615E0267B39D6937ECE0EC16162FE76676E5B69F3C
BC1AD934BECA284B89F0613B70876247D768BCD246883CFF4D819D6265302730
7E4BE6B2FFE7E91CCB8C6D2AFACDB4C5DB9688153E1D6B2DE136BF7068418A4F
2D1C0CA301B1B97290B46EE14B8286A81E709980F67382A5132F01B2D44DCFF0
9753E776AEAE2141D580E64C82598DAA6DA4057FFA9D02C3B77AE15A50AB457F
3FA5A10A3C986B22F8E154C1E564A55D3BE4487677613DCF793F7E1B57C9A925
BC57746C25FE567719A9EAA9CC44F1D0FF8F92C03132B205F57E3AFE9FB66632
D3FB3EF5BDFB9848030527FE759A5273CB81DBA2719611355F43E34F8FD7D0EC
9BE47685A2D122C9B60198A430C5F5E3F972376F0FF4BA52BAFF64095F7ABCBA
022622692231FF87514FD912B80C07A0EDCEECFA629E2734B5EFE2604E8DCB24
32A4C691DB4CCCF19EF897A9F4EA5B2B5AFCDF87AC06B93669F3007C1295E016
FF0A99324B80E37020B1080E80949525B3278DF111ABEA48E7182B6F4DE2DC90
B8D31A953343D5DB78B1F2CC6CE631EC7E3D0041A823DF2A4702AAC0F0A2F018
E5ADCD42EF2EC8AFF6F4705D30042BE7B6F866C14AEA1CEE04DFF82BF14931B8
D297C38E6DA6E587C23EF0864F69BB0DBC9C1EFBBB97B92BADC336A4AFAC6A91
0A6B158DC42E975CB5D8D2054CEF367FB112456AF50684C41F80B1E7ACAEA852
EABAEAAADE1EFD16DA13E367A6FD05F6C5D61A321B185BD0D596400C8422C933
BF332800160813A68AFB7152FCFAA4AEB9B5B81AFC43E9A300ACDD1427BDE5B8
0D5893CCBC0591F9F5CE793D0E1F724351C5C5C9A3A1CCEBF7FF3714E6583082
A36EF53DEB9B1B1A3B7727286F9D44570BD8EC91F9F0FA8582A30E6C46B3B7A8
3DDA07BBFFBC518DEEDB5696E3C8D0FC88E54BD0FC54C60DAEA0B344BCFB186E
E214640DAEB7F010A75680A3C15376F4F7D0B2E42110941575991A64DFC40439
39C3BC080A089F21FA3908F12425FDB664D6BD53DC1D31F58E2DD0AC3264B0BE
1D609D058A09F8F110AC4CA81D9A737B3CA879CEF1F4C1BD0D8B544FDAB25C64
686BCA1A7BA63A455D3BDE025B5DC251AE1748B790BCD307FDF8341B4706FB26
D62AE2E4D33DE35A8EAEBCBAC4C90704498E500DEB4C2CF96C331A60C8838288
EF65DC7B65B4591B37A14D09A5CA4B607FA077160ABA270123A72697AFDE8DCF
CAD3DD1EBBE5E79C53C00D98603E14A0B61FD99C4A6D8AC8138B2C0FB6C7F03E
D13E4D4407A04B727E8DF0B45697DC409EED6D354D17449F769AAC79E028B9C8
BC62E59A72F2999AD5EF909942C19F6EAD23F35F97E5713B2F358847726D3FFC
C0E7944696484EB8C25B51A882CC9A041E4E7D45DE9958C2F8344716C0BE99BB
61B87E74152B25C8069EB5036FFAC3DB4A8F9F407AF8F40634E326C360762A4D
AF354F609B6DA61C429791600D3A5FE9A8E128EA357F21BEA1AA23ED92EDEEA2
91CD4AADC45099E62D0EDB437B3A2C03D34B8B7D370D36ACA398451DC17A8C76
E01E537D1CD1E229E6ED42EE703C1FFB852ED974325012D973A6FC079EAF9617
31EAB278A9FF15D1A397B7541239DF020EFD56A0D5CE62D17BC0D92406697044
A2C322D9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C071D06D71D60CEEC9FC68AAC0ADD1DD74B262
0156612EB4B21A3F4ABD34403540C124221FB9DA5EC6C7229DA9A1D033AB828E
9D80023B2C8E68FAF7A38C925E0587A1CCE432EBBBA598B201F5AD036BE7C8AD
B8C411BC79646781C4519B89DA648B919EB362176B83298EE2D8B405DC66D81E
C655DFFD1BB283F3C5DEF1495FF97C798C213036AD02BB07FD42EC5932E79727
ACF464295E75CFC635036CF27FFC42DC2919CC167CA4C2E673040B7909AA26E8
123B3D9F176F6510B9526E94D4E38E62F8B9B96E2D2D51BDA2FB7C6992B79CD8
3E40292315B0EFE711C8FCB37968B8AE1BCADE6BD8A3BA1009B34137B90D924F
B2784C9E13F0795427324E80C175BC99140171AA2F40784356690DDB982F55FE
EFFCF946C6DADBC6A907C7DC28850415D9AFC1C8A868801B990CE2D26AE40CB3
4EE0281A60063AA71E48DB8A35E05C2BEA1ED5BEC68717E95B7597AD7CACDA2A
6A4E8808BDF0AFFBA31BE1697149D7BACECF4481DC61CEAB7476A2E00CD8EFF1
37E476FE5A098E607E25ED29F4BF3409309145BD0530C8A76E85F59EB0890ECB
A12DE954F33220ECCE5E9CC4B52E97089790D08FFEEA7D143DCC7C07BB2694CA
6709EE19C11515E6E967043F9162C39D9BEB2767B7B31EA068C594A63173F7F1
67F3D6FE97087D19F73EEE205A47785EF3C453E6F77A08AE9F93F4060DD19EF6
6DA5E780DCCA30F180F8DFB0CEC4602AD1201C63D91450E7B5F44AEF32087A03
0D933A941134E74040E6E7E797E18AF57941DDF7DE2072ADACCD3BF8D4CFF06C
5B946E21D0F5A799CD011CFFE4CF0F571B4377AD4768FBEBDFCF6B49F09839B9
35B1F7AB20DBC872DEDA90B79F113F5A4BE581DB49C5EB8C9033B8050C143424
1EDB333D1DCB862DC543CE420CC26EDF9639E4256570975B25C6C1F06CFDB2FD
9035344017BAA39283C14E3AE66A14DAFFE2CD87485598645C39B92C18AAD014
7814BF27C8FA6DCA0BBA0FFA552B9FFDD54BDD8C7F84484031FFFC0AE8932A64
53D2632D9379F30231361D03BF91F74904C7106B6F8EB6ABBB29858F65E937CD
E31D67C847719779DE0B34CECE88A8F9A12D46B8FCA50DF4433B0B8AED6A63B9
E6512B667AC78A09A780813B1FF02AA967B12AAFAA0AF1B3DA27604A975C2DB6
FC1854457C67C54DC08DB989CA3267B2BE5B8178E6B7889A33771F86276E6DA4
F83033522871198AB3E954EDD88B5059BFBB42AFFC2738CA09B628CC646123FC
9C2BB8B9149CBADE7A7953FB4FBAEB6078B410935DF7D6D5064271899313C4E5
0DA12BF2F08521A17641A2F5541EC8419514939892C0E353FB1785CF9CB67C88
AF752C2A0DAB509A424DDB9649BD8A846E6BD3D374BEB6B9DBD5C10FF56E2000
AE4AA5B339C187F52630B52309834F266D778C720FA9BD9CBC1F322A39EFCAF5
85107BD5A5C188A6409352766D80E77B1270019E0EF57F31E9F13B9483F070F4
86122EE08A4870456161458B6C93A1602A5EE583461ED91A90CA5B743636AED8
1E5142CC0A7DC998CBCF84E39CE3B141286A5994C60855979B402FC1C092EA15
1A6F3762571629775247A6AC65DEFBCA10A51ED614E0C7FBC7335681207464AB
F8C4ED5B883E7A4D01199AFC3C88B0E2AB5FE014A84377451081CA0390DEBA75
7BEA45FA3171095052B839F7A2A9E41737F4A4CD704E8EAFC757116FE3012E01
AEBF584F6B34EB3F9C4B3893DF4E25B71CA17D427219E0E2F3F7ADB530841948
1FC1CD966965C72E9490C31153E2A0DAB73629A1DC0ED7C058AD150C4D5BE6CA
FCC7D71907232339F3FCD771914933CABF613F0F9FA3E206172B0B4ADD1D9744
00A8C2642147D4B652A8F1A7E5BD064E369FC591D4739533513C202E9DA91CDD
1581D1A58898DD6564B1710A88AEF94B888C52681BAEE1E3EFB4DBC694919D4F
41D01894C91D8E03F68DB550934E5D783537D2B57CEFE23ABACEC756F5D1EA5D
A74192035D2304EC4F9083716CA7906B80486BB5C79752270821CB12BE7ED0FB
9FEAA580CA187AA3C9475070809AF6881F745EC71298D454AD31AB998F5821B8
2070122634D5A247EE4D8672339B1D90113137D4FEAF3CF3A2456A8712556956
C5A48721B1B1E140ABFF7793081B2B092724FC0F129DE772236556BEEEBEBFB1
FAB1037FB0997B367483D2C8C0D44E6111CEE2EF443F84FAC7710AD0368D542E
8A629BBC3C6E2D85E984AA01B575B37DD1D9B0D453E3A73EE7A34FEFA5641BDD
67E694671B6250DAFA3D85E0A78E946C78E33A284D4F92B73D7AE87B13F108F2
C4611CD948F30F56B984E409650E9CDFFD63D996E25E5C0E0FFE02BBE2237537
8C945F31C26697A7ED159B529276995292581CB9B29A54F4F4B2D472C74909CC
47C1675DC6FB9A932C0552F8FBE17F4D8771BFC6109E6D709951694157B3CA9B
1F3952D101D6CE60D1A0A97C99EDB3FAD64BBD337BB747424BE88E67FEA44610
51A1F65159650D3A2FA882944E6E8DB113CE928969F6BE3E3B8BFB71302E87A4
5A22ED99B04853D66E5A22B56F79FEFE917A6F436B823B1A2FD914DDADEFB5C5
CA3A43E348D017CE2040752BF94A98902E608264DED8C3241F06469FE18C377E
448EDBB0823526BD66B40F0519F047195405629408224D070207499DF2F43E7D
52E442E3B6E9E3B08F88C9961E81373B96460077464C7DBE6C7C7887BEB3F685
B182706F5DB4C7C4BC2FB81A7D040EC5A04E5C5434D732318AE791EDC71A47F2
AB39A992EE304763BBA1AA81F9D74B24FA7EACEFBCAC72D673540922501841A4
F7EF18CA86AD20AD76325914FC0197DA6D7632947C4AB3AF2133D1A1E2719511
F62BEB9C879E76B74493C7D5EF38E01CC031CB4CE13C2EB6BA2695E1AB97260C
39A7CF8F690145893081D526990E92C1FB18CC4B968D70DFD13C6223FAC9AD31
2E1240ED981AECE8D13DC653D59255F868EF158EDD781E9D02889907B23F00D4
F6A0D9B74E591BADA348B09E22B1A783A8EF2AC87D34B6407522AB33411ECA4F
6C765C85ED1405A5F27B28A16751402AB278A8099E29940E719DE1E109E5BEFC
2A4098E77020110C37A90B5BDBE279918B0B31E08031DB686D518B4CBB8A4D0B
EBF6750A452A7F706EA676E3B3237FC5656B29CD5A3A04F82AC871B526CC28B3
A61D985EEB3610FCAA433B9C6D4683C512F0FDBF3EE6FF552D7BF0BBBBA37050
FCBE3F164189FDC8446ACDE8D0D4050278151B46E56AF826A0C2E9389C2B8BB8
E38579D281D5142944D3322E1C66D456E4C5DD727AA41FA5B369D5E10CD71832
A7DD40DE855B47289C449B6AD8D5F1D557102050EDA5F1641EAAFDDBC082E579
A06D8A3A323458808BAD0F4B8A2BF406DBAC4C5F555EC96E760C8245A1AD9F50
881DB475F892F868823CC55D4859C09148529FBA57A392127B68F5366491D1BB
097D8FF4A71966D42DD988F48C8A1F4DE0449E6AAE79500C42B4EFE4936D0D00
0FB339115493C16412F1D6DCE02BC7B485CC108C6321EBF1C609633933A576C6
B0758D49F3155D448D505F73A5206EC1C8886F5949790A7E4B850B6B8E31EC18
B7321E63AC75B6588774961F6B7D313B850AA4B368E48DAFAA5693CAA236E150
E02FB2831359FDB95792B2E6431DD24BFA8F2B51BC21E2E5AACC0CA211F50A13
075ABCF9F440CA468403D939B91520C652F1196EAF1BC975E26F8057F69CB972
E976F99070AD3FCD958C1EC54B3994EA142AA0615EF7BC00D85F75BF5F32B350
E2CF46BA0E8D0120BDB54910E5C27A27B59664E856EDDE290103A0D490FD76DD
09B152B3AD1C4754696B239D4B13935AC19769600943C7343A5E7A06C9115395
DC2F92EA95E5ECE5A08EDD16DF74B6297EC0220C91F8BB9AFE742FA96456E131
7D41CDCE88A8F9A12D46B8FCA50DF4433B0B8AED6A63BB5FFDFB8D48D04F9849
2972699B5667C0D2D206F4785DE20A854E1D4C655A690689B7B5A19F8162E5D8
454B7A1CE94AF723F47C6B168CB7269CC802B14545C8448B5C260C6AAED5FB23
2390D7239C22534FEE644AE96C5718EFFB9DF1AC47CB3022D3751E6B7123FB71
403E154150FA4A14EE2CDC8F0BD084CAB30272E8F065218BA88536F138B94AFA
D750F6EA9BB43271084CD876A14CEBEB86283BDB500BBC0F9E152C30059054EE
92951E4A202AB409F7D16443DE00ED69C1FA674BA3664F8BD00C08A27F475C00
E6AABE35B01B991AE910B7DC821CFD8A6B5C7F4B116E78065CB219C926D45163
EBF6E81EF0C38076871283D64FA5F2126CCA7E93636A7CCA2158B99A15CD405D
4AD290CD8F7AF8845CF78D4BE9C7F2E4DC00372530C64BBBB785117A8AEEC190
9F49C82BAD55AD174D38A74582CB367BB50ACF8FBB2C8A2EDB17FF267D0F21C3
5BE42CA518272C9F9FB2DF0780C957CF1B9734E9F49C0E6EBDB5D24ED5D673E2
6A25811D4BCA9D693EF8ABE784D2BE46DE1E57E1B738ADF6FD49E6A53BF48C6C
2A73026234D3719C72C2FB8B8274AB54A6853DC6784398A6B994BE424B6E9078
6C303D590747608AF3CDD6A51B5612DD5D49E1153A25EBEAC76FEC601CF4D10F
65DAE3EDBF9A163BEE244542BFD2849D498C239237ECDCB23458C7C3B9395C7F
900C2AC7BDEF8FB9D4574698BC8D4E374B34969A885A0A4AA26F19F8348EC621
89B42297868AD2C3E80D95C41FA4A5AF7A016D3C773E040312AA0240DE24C7F9
D662FC2E59673DEF563AECCABF724C09CEEB5DCA64FC6D24A091A75B5745DFEE
F5C1162900B5F1EF5A7102C27DB1918679E7E354A5DABF897D9C8EF5A14FA8DF
FA3A7B3D47542FFF5987268E60E7FD64B017EC6A8FDB4BA5AB5B5B58046899C9
C5993E7302C870678DEBE8FEF3F2438217BA5121CC668458620DB3D381D56770
19CDD612E5C0A267BE4F707ECE93B3E1E8BE65922315729FA5513AD13B562C5E
E145AB39905815D6C3E8B60AC5C1D4D7731E2A6B122C6F57790C42B0368AD7A4
99EE5F029AA6F8E302F4CD994EC08C00AC6A66C51254F71280CC722402E200EA
D4F6F489DCD61B81CDB85804A5EF00CDB09D9C2EE4F3D571285E319A78F90942
1C31359DDF81F38F6E8615BCD0E6CFFE077688C365888921E45608C868A0F6F9
D726CB2CD81B49A9F47C12FF76284D3B07E2C2E788036B4867F90D40C1E4FF74
60399F1F08F98A05A579D00D1ED5E8A86BE9DC1CEE3FCB03B9A0E4BBB81C849F
AB1A6089E9807455A5DD78B2EC3090E36EDF4D19FA6BBEF386127BBDB53D25E6
8448A975CD56BE0A93070F848850FB9B3B0285C7FADB28A3711C06273B79FBD2
A509FDF7AF81630306D67E0AAD0DAB78243E1B814F745234BA7CD57325B5A34C
C3F984018DC9653649786481788A6F58ADDB87DD0D883AF60455753850A63756
5EBCDE76329F5626E6328EBE3DB5770A4C3E21341C304F38845FE70E091803D9
D14037AC4AA8C4D17EBB62ACEFE5344982E0F489D72EF60183D8F2A79A3AA765
C18E0479B0255870CD61C8CF7AA8DE567D174EC90945404C5B928EAF3E8DDC1E
018442474EC6B0B42DF539EC1557722299347DCFF0347BA4273054B8062D3DF6
FF094944AE472D60DDF6CA62288E4E780F8614C7749C9406325C82715C866134
637DCCE4848D2B051B8E0EC7B88872E9AE68BB5DDC30F4A61119733F6F6DE0BF
4C6437A849A661B6A233B1C24238BB910C11D2A8024C89FB5DC745489AAC2570
4C61242B4B1983A5D0B134C8052495CBAA9D2E2E014641BD58F0EC389FACADA3
08A1723A5C2492BA0615B0222EDD152AD19C307118AC0086653521EA59D676CF
C36AB586FF1FD4C383E2785EAD36F41274FB0BFF9DFEADC612CA44A7392D8E79
1DDE1DE818BBF26CE3BCC2569F5CE6DC91D4F8B7800A05DECB300CD7A8C38D77
4C1DF436013901C9671F77F34A63F361C5579EC5E00C5A8E2FC97874F6459EFC
C1760E9C6C78E60CC0152340DA6F26C67B2E10B620750E2C44E5CB9DCE747E29
6F7E716E6BB12B699A2FCA90DFB3DD730D96D100DC5B1BBB1632D7015235F4D5
1C1C753EEFDD6ADCEB45DF4D00713744039C43B860B5A9C51AF0BEF11CC8E85B
067A402342896C9B3BAAA570C4900E12D720F2812F28626DE3BD3F3426B82718
259AD02CDB518BA4C4AD8F261CFEBF43857EC7A543ABB1E059247E276E206CB0
0BED125C8F78A665901F80068C9B0AED83074C6270B177BAA18F1975F43E9160
8B75D86D9F7C1E986C2DDA71CBF33FACEE675B943764AFE71B5A359C4A092916
3E8EF660794518DA4307AA5B38469000FBF31BAE9CE8703754A099D21B332D3C
A19A842755A79DDC1E281A8C34A969B80EDC946658B7579B5BCF07AC8B45C2A8
3664140E70CA62DCB3153CB4A8E46F12CC16254F52A26FE47FE41504D3E851A0
665AB60BC0CE5C72512D196F8D1BC0B3FC12DA2D13F4B9AEA2D017EE7E574B86
2576F5EA495F51E1B3A86090ECFDB57097EF73BFFD5E41E8AB6BF105F87986D4
95940A8B4A29E4DC974554DF975D026EA92FC09DBD65783663CAFE414B6F8C06
F00A26631D7FCC4527109F177093E7432F5FAA6CA14F1654ACCFEC8FFC127488
F604E972B695E9EF18F331A58BE4704E5130FB4984C3FE2474E6CF0935F90B79
7221D94774689E83E5406F5D9554C1284249C687A6CF5A6B4783F54267C48710
32ED406DE854CD5E243C0BE4656E35FA02FAF5101E1AE6B7CB286C9DB979D763
FEB468FC7AA2DDBE2E708D27D89164B12BD8BDF0418BEDF018EA67683158D1B7
73C6EF553EA897D5F2D53E75902E57D7C4E06D7DC83F1C557ECF5DE83748370B
00EE03A3ADB919976D4DBFF11B246AF9C2FE922A8A6F8CD47656ED2CBC816B17
3B01048BE9D1E4B54ABC0396D5203D088ED7A1FC7CC863AF414AC14AC2D75E5E
EDEB706CFB2AFE24EB580E55BD31B793E4065CE83795F047004ED88F5C38BDA8
7F5FA8880517429B9C4E5FE980448EDF3BD57758FD145E769D4E88BF43D19050
DA58F5EDC7B4AA76BD8CDAF0B8639BD5D2C7552AF5415B7F35B957F02B962930
D3D0C3AABCE7BF840A7A035F2CC57FC978684570CF6C8FDB960B9CC6E9435D65
77D1CFB71D362BAD7280AED8771C6EE2F7E2D86C5661CDBEBB354B84249E93B7
7A0E409B4D5E17600E1E43F5EA1F884939C0AE467119F1E155676D10A8A35955
BADB667DB10180DF404F43A166E2E533F1C050D35CE4AEE92C35EE391398EFCF
E19EDE2E31F837DF86F1800F59C89EF6401112AB73434A3938E1970D8EA3CD40
C7B8FB44205899626FBC269C25478E0A63F78F3460EDD4F64B4D2A5B3E660B64
D293F803C670E243F0B0EB1C548746C08C7F4FAC0D4A7FD8B7369AED2AE9A79C
74C0FF0E0B0C1AD3B59BEF79753FDA3E929B52F207382364B1C62AE8311C4337
297E030CC0CE93ADB4E2FEB60E28FF6D4AF0010D422AFC137F2254FFF6C2929F
CB76A235705EC088049C1F1B0E78FD2D357BBBFB0E12CD481F96252AB7402213
DF9BB4464515CCEA5FE4C0CF761E921D7D2992EB24625547D54E3F2C644ABABB
47914DF3ED2C719753BB1EED9C435F2D571BEBA4F76A0AD5DFDBA6EC952A4F37
948B63263FA4097587802F6C66C3BC6E9DF45A22A24877E4A4499697D46B779C
8609E85E4BCFE84319532B3AC9D62BD413CC127C8DAEBC28D7DE5CB57A30F23A
2859902409CD4FF43EF6A99E9FFA2DB4113C12AB9C616F074276C4840A546A73
0D24D8518117AD200014839545B1078F38D7284FBFC473C510CA28AB90147613
F0EBC94C3EA0001043705336F16E783FDADA674B361F951D5152C0011FE0BEAE
51286E4979DACD3F5A953BD9E918D5E46449525A4A597FF0F091B2B4794752D7
EE5D9B94524DF768ADA1377760AB1ACE2D780F5624CF53DE046A36EFB35B52F0
566623440D7F364C4030648BC39783FD7AE189510DB572D01093BC4C7EE0C09F
389FF828AA7585F9B7FAFA718DAF925AA837B8C0B647161E5C322CA820521400
5D234795C9DC1354D1C0E5ABC997C64F3C84D2C3B7581BC9566EB6D012B6B784
F740B8E0B360808C984DEC73EF57328A2347BC752EB0EFF7BE8B688A3622826E
C83CC42DCA4A26C504AB95C5232A86199FC1295D8BC52BBA9C5089A346CC5760
009233FDE0B38CD4EC1D07A9F817ADBD1AA6D303AAF94D5FA688675B55D40FA4
3C6D97741D9FE4C964FC6D24A091A75B5745DFEEF5C1162900B5F1EF59402CD5
E4D0C3953C9493D87F46CE4E9C7A543364A9B82B34154924F4739C650A8EF8D2
38C73BD6689A0657D8427446E44E2F5C77937234D1D6AFCA63944D3FE5126940
8ADA00FF11BFB205B9A42EC1F50B435E4D44E14E22056FEA071D0061F16D8879
6C4BA0C670D0E715ED9333A0FBBD15F19CBCE5F93259A6C4A8CAD50B9186BF14
62D3AE2AAEA8A45E9A29BBCF83E95F0C65B2D60169538EDFAAB935FE3468186E
CD90E2F15FDBB395191E6C4659910683768F80764D94FE8A746FD06C08F15F97
3A528084C73A3416B7D9498707C04E9115D411FD74AD771B5973E6D0A573A1FD
2E01CB1197990EDF8444CC83F1AF789DCE5C7F64567C9D80D1829D7FE5F45647
ED6B99C6D96B728840A77AAB12DF037473065B62E9F3775CAEDAD9508FA92283
6FAA01D50CBB9B12B543AF2A86A99F4D544B8974F01B52945FC6ABCF3ECD8410
335AE6CAAA4F740EFA8AE1742B115F4FA7FD8E330D0B86B191FF5B038A5D0C32
91053A42460468F6A1700953700663A85229385FB9BC726979DE858914A95826
CB2A8F0F17773C8DC86EDDB610CA36C8A6051774DAD79E4E3DD10CA06A919430
0B6FF769550AD34A047DDF4DCAD48C79C13C76BDB9A98E254804C9126F6A007A
D697659D0F4B9B7BE0BE1E74DE179CA649DEDD316A452509D2804B5BE0F6C5C6
EF94B0FC821BF1E02C91C149EBC163C14366CDBF3C81F57A352355320AB4F3E3
A84E4B60EC6CF57A1A00F90F224190D7BFAFF83C13AF40E46F7154198D7BC2C6
F10586634E82705468F167630971BC01DC641766DC254D9E9B06BD62DEAA105F
CD48375C11A3207B5A381FF8E1C163001513CC382BDC172026981E9CD05FD8DD
83503D108FA0BF72ECFAAADAFEE78E1D8D2B9E94AF57AE0A20570A74D0C84155
353C360C86120BE8A6A2B0C9D6550784FB8929369CA329F6A6D89A7066E845EA
FE223A6D26B84EE6B6ADF0D9950A195F64FD3209C6D47B46B7708F855E501D4F
6F9B939EE1663FD02D1E1D74F22C4DA4143A4D523E32A0A371A51F64CDC4E06F
544F2055F67F0ACD4E9D99C47877168E8977CDA919CA86D82794F04E7E98644D
98246CC6E5F85E045FE750DA4A9B403FD293CC436888B75949007FB2D0557A88
D362014EDFD3445233A03A005D3F670E67B8FE790851B16E71241433FEA5650A
3908D0B0BD195F64242395E6C807B7D00E12CC9CA711980842040899809A443C
00042C681FE3F9BBDDA09127551CC4780E971D3952648BE3ACB42BEC6D5B5DA0
CAF19D34A8BD8E904BBB589CA901E79BBDB311C102F70F1D2FE7EB3609B14BBF
10E66264FD1E6EAE175987CC0DE53E3799F86A71F96165AA3EFB39B7B13C5FCC
011F38E349AF6FB76AC51841B39F02662AF720242D74012508F26C7003A39A3D
65A8CE04E1583229836D0DD8CA390CFD14E80FC0417C7EA00C3BF24A9F25D40F
4D6755FDDF7FC12E90F2281180BDD1263A9AEDB29E4CEDC083E9A8818E4F0C86
5FCD780F40BED45ACF63A6B1CEC1CBCA4B0B8145DD941B8766A1D28C0EBF9178
9E2B42D978A47B6B18BF0134F12CB398D097D7FC83EAF094FB08A17E36051178
8A42A3D87ECC5243915C0BA12EC2F8AD6305A2F219F870D6A1811AD7326AE12B
896F411E09C15B0506D1F805511965AC7FBF7EF0A2AE13FBDCC2812207A6503E
B00435B0B6EF5E5E1F853052970408E1B96714C7B1D4F806F889EBE1F2ADB31C
432B7A6B88F7B26F555A751CBAF82B795CD0F1BCE51275AA635695BD883B2F6B
22C897D136C06546E80EEBD1B06127A7E7797B41DBCCE9E48F09ABAD8E116038
BEB06DC30ED8E89BBDFE4480A36CD4F92F872474D1DF235DE89D464EF44F2C92
97ECBF2840EC61A315630066630D8595A47913D246893E3D1682833519113716
D1DAC8CE1540946D3EA0CEAC72D968371521CEE81C167C0322F52C3B92C29F8F
D050130FF7C7D8E436ECA4E5227FA99FBA99942BD86CE4B46FF5C69BABCA7859
A876DA0B21819E209EFB5641184DAEAFF3FC3E99ECFA3D1376C47B399F2136B6
E9A563BB6CF6EE049BC3790CCB1FFAFF2326B40E27E034DC75E7E797B53DEB54
9C6D3C6DE98769691F9CE7ADA0F5D6C1AB83B98945A1FB9CE7E2D42213218F2A
CBB2F5361C86BECDAEEEC705F1F1DC687857D57A34CABDBE4B0D8667BF0FE54A
8E67BE8E0E51D90F63043196BAA257EDDD055A37FC3D5A6F2AC7D97350CEDE8D
8720A80DB951D1D9FAC8ED3EF4D4B03D5D15AF4C6B62C52FE635D7DBE1DEBA46
03B10AF1715EA3418AA997C16C2988EF7E0148A1DF74DA038B947205ABECE765
A6F5C39C5A27A1661D9C192421E79A5C0E3632C09A62F2A89E84964B2B68602D
92E9EFF00404DD0A2AED5D5C4A91CCC4E24C50984C346A441E0D4C268DD363A3
82E750152A94A0A0DABC97B4B2A944138C5413B08F8B757A68BFC53ADF8F88D7
F4844A8FA4414EF339406E166CD727639D26DD574C550AA3864CAD2FE404C29C
FCB9F734AC514A3B200ED1151418051744E40FB9C87F5F56E3EA0BB5CE010201
005AD0317780B06EF63A07D938C2D114FA43CE0B06A5B8FB130A3936C4504264
CFF299997BDAE4EF14F9E60E487517C8ECCA81ED1DCF6536EA8AEEA67912F19E
B02D56869F7EBC6A93EEBAC763AF4A2556E76F11E21940DED1DD6815946798BA
56470026735A1C33E62D7A8D23C21F63B4642608AD851A31DB1359721319B911
DB91692758F1907EC08F5E8ADB0E9A092174032BB57DF31DAABB7DE1EBAE20A3
8DC804C230E228574DF9E9896FE3FF392A00DEE04E3156C97F8C103897DF3058
6958C707F0205C3F9872476833B252DE228173010F59376FB1AEB72D08E929E1
630A7750DE134C6DA77B5CEBF5D03BBC3C2FAA19D4E7C58231807317CC077DFB
EB40EF57CD4DDFFCE7B9035E2CE43776643E402FCA886F5949790A7E4B850B6B
8E31EC18B7321E63AED47752547DC27269C1904CB0CD0160136BEE30A0B65D10
BF4D7CC2F28CC4EFE8A891B2A31968694C04BAA55BF3CFF37AA1D0570FF3D683
011C315D6B938837DF75D2AEC19BC7C0F4C7A421734301813921B971F6B6E7B4
1F58302FA1254A1FE3C44528AFF1B6638CAF87F553DF1F0A84DC8BBD23B356B7
A1488750A4D98DD7966737111A6B79BEF479A567BAB3764282DA78B388D27A6D
EC10E1B914D4201B9A4B4971ADB498B74F8F86EE5D21DBD34CDD4E03E5A41ADC
0636AFFA3A9031A7D52AD383ADEFECE76669BF76C5EE35D36E883E3362E8151A
38AD6FA6A56560228EF0C0B8703123FB2153DED6B9D4555BE6678F63311F130D
EA693AD05F6FCAAE4BFC1F60C355698E356465F57F984176061723F228A13B73
04F3254E39EC3E810060742A7B748BAD4C7AC5DE779115C57BF3DC3E66A13B29
3409C469920A5E60BE73C36611705DF0DE76780DC2934C4287B17F5613AF6A08
21CF81AA3BD93F1BE08D614D0CAB75DC0396E0802ACCEF1ABA9A1CD9797E0562
5080815C62AA5706D772C8E0F2A3303895C92605AC43CEA7CA7D3C3A6403B9A7
675DC69ED861AA0478A60C98204C5747F1FC0A88D9E1C5058E00713382AA8099
89562C3BE6FA1B3C3155C4C2C9D9B6784C80119CB77D9C30A1FAB83995414E9D
3900926FA8087A61383E01E64D3344B5A6B6E1AF4FB0AB0CE7F517E28F67D1FC
7629636842E7AD3ADC6C73336EEC461C81B8128C629EF0E86EAE03D5EC474E7C
E6AF8E5C9A33F4E490CCF8636921014C5E850C6ACF3DD244C32A9E4618FF40C4
90B27180A053D6567A2F0F53E5FEDB788C961BC74FFAE2E26DC36958C619EE29
BCD29A724AE4024D5B5A6A25612F7378744512C5BB5DB4DE1CA9064368A00D89
E04C07B80303E089204A1ED054FAEB7C41A0858354B42706AECDD9AEA1AABCC7
00A5D6C5B7D1CEBCF30EE34E39143E5676CA9EB5A3147745E7DDE2364F639260
77121FAD39A304CB7BD67738778C600E9F7FFF00B5B895884BFBC020895A26A3
8AE6A350169601AF4CCD120E7C16E6B195372FAE49A9212103B3BC5F55E235A9
0201A826568CF2C21EE1C54D4CE496E97C50334C156FDD2F9219C86854E96B7B
C3A5B87E38409DA085A2924AFA002FA83DD86D63E9FF50B21ACE4ABFBFA159B0
7ED5C93D976CCAD20691B072DA28B696A9284A1DAB3BB85A734B583B3E2E7960
9CAC4A2A0D12DD59CC296BD8D69AE3E4FA2CD789ABE07054E39695AF6B99D5ED
BE2499BF00ECB6C5C0F3CB6F2433FA5BFCB2320F6AD8E6CFB0D2666679C13A65
E1D6872B1873FB09BD48225E110640A81C7C151D784EF671B66930A143948E27
E1F2FA81FE54BE6C57EF8C2B2E460F086265E1AF2573482AFDDA9F1D252FCF3D
CCDCB3A72541318543A028C9C9DCBFE53223D096351D214B3DC904C32A71036D
0A741AC388F04B00DE2653B18C99512BDA16157E02FC97731F1B39A4924822B5
265773A5E86A17A4185EEEC3C4AC7AA8B27CFF05C5E768115C104826CC10BC78
22701F493A3471A97B87D1E05B7A9A4375CEB76B0F1827AD916E268A701EE540
4CF3ADD7D79A33AFD79FA05F287659B8D7B2924AF04D875E139FEBB73B10C153
AA656370D0A0C5489848C5FCEE650ADC55C703E9AB03C4C817DEF45CDE086413
5B202DBF7983071104BEC1B29A1DEA1E99918B82D8BBDB1DCFE65325453720F0
2A01A0A015630066630D8595A47913D246893E3D168283351E1A7D6609D033D8
0A82CC481EAD70AADE0E2676CAC461FE45040B5255F62BD2B6A93C68B79E9026
102990E062B5B058542C45F05748B1A1A133EC7DFFCC255E05EB66D60ABA9EFE
F377E49B7A134356A0994785F9078D1B8B97E8E73F801263DB7DC7EBCDD9B3D8
4D1CD5BE08DB019DB26819ED22A9E83B7C851AAC3FB59E4C7FCDCD4BE50BEC9A
4878ED27E515FED0D26FEEE69602B2BD58D145143D2FC60563D081F110CBB181
C03581AE7F5CFB6E2B1E4009215DEEF49B959AE6CB67471140028BDB77F8E0D4
EE0B2C0AE9D1AF457BA4830AF3BC5AC25B6E250D2CBC6847C10CDE73950A2DBF
81F7C3B10A749A1436FEB673921A195027DB020897E28DA4C2E24AC43738F842
045A04919A108CCF28ADD9B2582CF6C3178700E56D15B63611A51C51B31574B2
FA8A71BA89DC8F6F167C7C0336FFE6DC170CBF5F561E004C322217D2A01680D7
EC23747CA7156E5CE91FBD5F44F0E247D957956045B1613112CCBB7091B33FEE
92536D6EAC29F1F7D265EA9CBFF5415AD85E4004694D39E05F5E2AEE30F76D51
A3CF5FD037153F66F8765090E7AAE59D8053AE0BA8DB3BCB2AC0437FD14A2941
15CB01446379D93A84DA7DDE692830CEEDBB812E26126498DF01A8B4E7DF01CA
E49DE944C25FE5771EAA9AEB426146DBAF38651053E5EAE46AF5F5F19491F679
C2F3F3CC8C5E5189F8C986AB3EE576DA9DF54E80CCF9A71394B4BFA8CED0C416
64DF7B5BBB015C15EA34DB8B90F2ED9FFD88F15A1BAE76C6EEFC79C130434BDB
9F865580E510F180C63CD039D399B1D9C4208BDE9841363695AD2F8B3922A609
7DA81E6A3D4B3F340503E6D9DAF82EBA11D53BEB168DAA474049FA840261F7A8
A976812A938FF436B01AB54EE1CE32BA926E34A8F8C31D8643EF6B051FBBA7EA
E4D5967EC3646F547C1BB5DC530423DD7C44A82B622327EA30ECA42B8CB89314
E8AE0CC7634258E1A49C6B865B75EAA21C02F7007978FF715B59DB48A55F4E05
03D39165A53031425C5E1F37426ADB7B3FFA6D2412BFB5783DB3C0F6D60E34BE
594B65D76CDAE5693B2E8739D9BD57A4D67E09514EB3A1D2DCF490DC1EB5FC03
C43BE397E8115F3A0C322EFE02904D82B3032B82E7C310D4934710441F46312E
AC995D35324DEB1A832126F491688AB4FFC28B25F44AEF8261BB77AFE63D26EF
D97218971819C58624089FE39F416FB3FC681F6312B9BC458258383E94966CDA
9AAB97986B5C9091DCB1F9B280BE8D374A8D48A10B2713DFD32DEABA293EE9A1
77F5C40F7C7768A67B861D5FC2887F1635AACF2785AA6A7EC9D666970F39E1F0
1522BF2FCB6B28C527C32DA580A7A619EA936D0B6239F72579B0E99370DA9C9A
EC6822571F3B782893E1631735FC7FEF8384AEA8C2273268144A010CABC53339
E8CDF172B872311C783A8F2BED76B849B93DD14AC40A4E4226F5ECD3DAEA01CB
2604024F955DC5CE4093E2F1A817C538EA4F64E96C20699C8A54F090F212398D
1FA9D5FF8CBDDFAFCA66543CFB72EEF26CC3F3561B1CA13FDB336BD4F041E9FE
46C75BA73BFF8D88C56FFA843B1EF3AACA3FCEE17C7835239CD82463FB4A243F
8C74C0035ADA5BBCB0E724AFA0F51B8E2EDD6E0ED16D2ACFC90A1ED23A88CF1D
EE3F583DC78DFCE980BD40FB1344156DE7712A41673F44DA2E1E7D41DF6BA988
0AE784071E6B3E2101F0B663DE14DB1ABF8B7951914BF2E9C684E2C80951B24A
AACDF129B2BB843A35322415E37E745F1478DF48659E20919F519EC7B7BED843
F35548CFE3266DB0E088F48DBD44C379EFCF03E929E6C390138AA7A9BE8E9EA7
6D1DED1866D5010782042200B3914DB7477F4ACE3E01C310717FD8D10B05176B
2D990696B3D4677A6D2AED73403C90884F55AF936438B4F0B1E942537CD9A3C0
6DA77812BB4EE9929C9CEE82C265186552E9231CC55FAAC46EDA9984444FC750
9374E11C1651D0A365FAFC66389761F5436DA107749746B5118ED2297F5A7BEA
B0D625692F612266A93EF535C72093AAF178BF91230BFE3F36B8A0F98A0CC800
A501580CAF3478CC65C774E5244912470606D852A39CBBE5E41174596443BF7D
A121B8C73AFB3730AE0710CDBBD49719043C0432C014E7CC244189592FB944D4
03458FF43F071C38FEE3A811F2D67B799250CAF11120873098B5138445288FDB
AA54FF0F25A13DAD43232F7EE4D840B4362172F75AE64ACD2B72602D2A8F76E1
3CA240865F625827B5B14B93CBD317817EDCC1726036E156CDC649D036DA3DFD
DC31F576F64475E62FBF30074B701B39665F4BF41393BBF474A9CFA2EC28FEC1
3422167D2F49D7601A570BEA14B7C813C7EE435E6B39AA70A9F61CCC446F6FD2
D440F8B6F47E9C8E5C2929BDC7EE14F6D868464493DF45E9E560FB40476AD6E7
850D0E405AE6523DC0CBB3604025E1F18331E151718268DE4D626FADFD70DE44
B561BA1BD4626A01C282FEB8B53E2972147D9EBD179E3D9F1452AC0613F8DE36
1C46A55BAE9F54A1BCFE5626C854818C35B88DDEA6D3A49A83886DB260065E42
3B426EFCAD8639CB438AEF68DB0DF2F2FF138364824C7D41C3B93D9A5B6B2091
FB0F74E34F73B119BE0CBCB087ADD6D2804D2B798B301739E51DD451D8071BF1
B58C840313AC91D346479D38E0ECB73664581BA1552F680511B5FE3EA89500B8
23A0FA5A18321056A36750BC67D3CFBBE3A4B914ECDC45179F7225B6871B570E
BE05C9D95D8F947BD7D9F6D539E4754CD2C62F1790F8A442D94ED07F5F983965
896021A6B8466391813B9003AC9B950A22EE900DA9B2A80B9BFC4919F2483E98
68E0D59E613B99092C8C0FCD223E4499C14B7B552BDCEC37E745415462F2538D
A2D71EC332D6C13A8A7B92514B6CD803081AD247BD97FBE97DEC3941BE4A948B
3490EA861BD99423B56C2084510627CA5DA18A0F9447DEAC39141E4A8C8584A3
8E57441EEA00961DD0EDCEE6CE7F6AD035A435017F8EDC6CAB41EA6234C70FF6
EF6CA2A853FE0F76AB1ED5B97A1067B820BDDF5FC2AF9A36305E36C2A2DDC690
256D2085B52886DC399FE1D8CFA559C93999700F1189021D601510F9AC22E36F
01DF05AB58428703B5F8FCF7156859F14E61042D5A147F0A784F0C5A4E1934FB
A251CA55B73D7515D4048EA67AB4E1DD05CDD42DA117D5956FFE7111F53C8D8D
F395CE9A836EFFBC02B41CBE8D589CF50BA27804E8971CA26B393A98569E59FC
7A33A9F31B1198C6D9980B7C21ADAA911578E0CBDBC8FA2043BDEB19CBF070E5
82307367F5F9AC09ACDBCF4AACF533C80A39605C9702070CC252B957DFC1A97D
522C07B0F972DB969DB77637B6E22C2CAFC254B52413A107BF5B596BAF902B8D
63C8A18E045FAB03CDAA01086862BCEF11AF66D26B9A0D11530C6F70C1B6E7AF
8E11BA4798C1DD2EB7D4F9620F1C42678C956D013FB0402EF2F6C3B06EEAFF00
FE2602F07B88E183809095E88840F703E9BF997E8A6666919D00D517CE6D9C2B
C0DE6516B649A4DC292CA2AB1D7823261B7B7EE08A4211AD764B9A8D9CAA0D1D
E3106460BD438275B8B18D8D9B9D2227C7649133EC6A81002AE7A5918BD0EF50
FC3859C0CCD704BF425C64379E8F07D1B21CEAF609047DB5AB1D11EF4A587E56
9A48CB419390489F70CBB069CAE6BC5F117865AF3389F9B24A1D21A9CCBCC365
9E3AC8CA5DF66DDC7933F828D3CF9ABC2827A6200222621DEACC953EB5D4EE5C
195C81DEFFBE1E3A195EBF7787BFAFFD9A066C4CEAE0ED581BC5A9037A4D15F3
200B13F44F655AD6FC40955A3EE68C16EF312027D054C0D88996599333FDAEBA
AB30E04E3C78DAB918F9559C31EBE12912B39338A6BD32CEDD4E8A51C229D309
11AC105F799840538DFC9B186642C1FA978B5AE2733334BB5EC0151CDDBD053D
D22218B8B0B71E60CCC50CDD5C6DE465C7932B3C509D3B02172583CE1449920F
9A073DEE6F9E6A6A1DB9213C2142AEEA0B692ACA1E819ABF89C01007F28C5A80
F4BD3C2C515EB5BE01853F7F1EA8A3815901DA3DF606E424677807FED4146096
85E975670E68DB88850EF4DD9314C0FEA2661CF8688C3D53F22AA0E1A26B1F9A
C6202BEA5AD2C4142CA7D8CB954B8D0C0C2BE2CB8DE317F7C1449E4F6C8AE7D6
7AEE9BE9CD45EA51767A0C5ED8C8CB4191E950DBCCD311A20B14B4177092A52E
3F29539FB7F8E16596FFD4151B332C718B173132660B0ACCF1CA0A25AB10E00E
4D5A8D0C3299FD3777981C789FD4BBE40DF2F03232480D73FE00AF577494DA7A
B6FB78D744C9ABFCD095A12C405F561BD9FBC456DAD7FC9C900C91E6DF15400F
35F789CD093396F0E34A66267EAD315CAA69F4DB314DC26ED5B60252DD152E0A
11AB38A0C98C9BB1216EDA7BC3094324CEA4FD5A9518236B742F3579E050C9FE
A8E1EF4F3252FD330D163CF0F35CAFC0D61E05B8B32000D4F6A0D9B74E591BAD
A348BC61386E71104202FB3F677DC4F398E82228CEB92CE0B5E695D536274984
B73FD1A0039F86E8489003F84951DB86742C3EF61F720CE7F7788599AAF3FF46
CE5AFDA1081D3E544F7F4FE29CE4952D5E50B1AB34F96DB9F031C7920CEC9A16
4C369C237DD28FC4BE2843036E872B2A04C4C2DDD09A780E3211EFB72BC5B2CF
545D57AB4B9C46F8379EDE9399E5B127D646FAB0A8612DCA1CC8DA7A3C5E33BB
337D4E9D38D33E46E3F79F2BC92D811CC6DAB2EA0636869186AA71F0C1ADF3AA
8290123A8B67E6AE0C769A5E8CE27B8C4B6E8B4F056867F1C0B014E2B65B58FF
1D647BA03560E06391BDE9A02514DB9B144641A5B2548D2909144C30A00A6E01
0B4220EBFA66EF79E0BFA03358E9F753AA892BD9A7AD14F509BA49C6320EFB42
1B3B10694FDED4B3EDBE4FE9C3DFFA5E45C08D537491AE24293BE475B6AFA056
DD3F3F525DA26365A2DF7F72CA78CAC785BBDD2D86B42FF91FCE7E06435BB294
0232870251A35518DFB99CA7E44B6E03DABF8ABB73228AB478B849E58ED08010
8F18DB3ECC698AEA11E32B5F743B75E26E66A24209E1E34EAD17A0AC81EA7357
571737966E650CF2D73DBCB019395239FC111EC0ADA17A90C19A43D4206E2B15
F0ADF54FA750FDAF7121246123CFD3141C81FCC5C5305259AEBAF52AA9BCBBA8
C9636E63A0DC0690DCCC7AB8828C02B00920293556311878D421BCC9FFF72437
7740502EC30BB318289197B74B960686FA892002C19B3221F02826617596B585
5B28202F696BF41B341A01D47A5FFCC91ED4B7E13900CB00E970CAAABD5E3101
82F66B217FD6CC9B23CD9DBB08CE4B28C377375572C513E842F42BFBD3511F4A
DEB1E990D07CD4D46A5703E09CDA5B195BF1CC49F81022023B083A73BEB9A932
238BE4D2DBFC52FB6837D0AF6FFC27B43A9CFA3F57E9478D3251ACCC0EA722FC
9DCF37794E7186404D252F9A0289664EA62E732C4BD3A421E8F13A717538E21C
8554823E5377C82C08CED9509AF593CBCB7B0B261E24DFD30C40B6D35742A408
FA77154EB77D6F52481690604E0614F792804C8C32AF13165D47FEF1D6AA9194
0F93EB95905F74956D7C9B33DF636E35011FF6D197C9B8FA15F1F8FAC9AAB396
62E6D137560A8363F8D0B481C71ECCBF5D498496818C244467171449C73BABBA
B53F4CDB1197769BEAF49D19F0841D5E8EC7CCEAA4D28DDB3E14935B8CE43228
548E00800DE1B6C627488ECE138724E2C9BDD46FADABA26B5433D34C2AEB0760
31841EA02BD6006B6DA2CA24E020A0FDDCC0498D74594AE3ACB0EC7104EA49C7
DA55875A3CCD94F522EDFCAE0CBDD9C92A04E49DF56331E837562DDFD2B9A20C
64458327A48F3351EE3B21017973B3B0C45734AF5241C5ADA1387512EFB6528D
36CD1DCE4AB6E7671F4276E6CBC2A4EBA4E6ABD17B534BD65EDDA5B466A2B687
F0998FC59BE4B93F43805FE0EB7A4A5B00AB550C451413A237842D91C888C4F7
6414E6C277543D4AA0D04B945257A16BA754214E9256E95A6B429C3E4C9366A0
32CDDA2F0B0340F42BAC73E5382A5F9CD71974101F6C389CABC69B231B033132
6254BFB119C6057DBFC2B0085C818FDDA774EBDBE7A957E1602DE3DA6F20B595
7F6F748928F9156100AF21730FDF1AE10EF475F585B2E615996C11BDC84BD9EA
252474D8F9450FC341D125DA3A11FF534B375CDE3CA6DD714223D35D69FB6BB5
17B593AE025E7DB76E3B3E083DD36D72F6A3B64826CD95F02199EFFCF454A40A
C29D2907B15F8C6AF233C3C2792A42338D892C8E1C2DAB56438F1FBD0E63A5EC
278081506796D4A5CE91258B1C760B7B254B34AE37084F9F621C590DC9F91688
A7F5806B6D1EC164588C020522D7263EAA89B3ABF870834A682AB8809F82277E
FC2083F279926A360E4B995EDD16A401B12A1C0D488AF24BC0B83C2D2429E576
E97C39D2034E884EB9BF9BFA200E8DDCA68FC9E9478D07F4C6EAF1D37D624314
BA2AD28316C66821F40E54E6F57FE832B12306953241F8F05D06EF7BE0D60FD9
96223903C9A02FB433E08EDE786CFC2B617CFE4D6E5B4077B438642E42F89BD4
36AEC67146942DAFE5DDFAD97B5EE4B04E0B479D31CB771B40D48806F82B4B5A
A65A7A9B6E99FED552EEA2F20D725EB5F1A1B135B5E5097E60AFDF729A535E05
1501D8107244C8E2C33EA2B27F97F5F7C5CD526CED2DF28AF1814B5845898D29
7A6A791205A854F67B54A58AC1D5D57F0DEA2E45DFC9822A4CB5B59E51E6B799
03D29C1C63A7964CE23DD2F5563D5AC32CCA4ECB7E39D3C74723A53E54044AA6
A13F05A35BA44A62A5EDC245455943A3DFE5422C5E45E5D0CD32FF862402772B
16F6E7154C570048AD99925459B26B502DCDFF0B2514EEA06C4D3BE4D8D2EFBB
235EFEFC8FE8B2D6281A9F1C30D13BBBD899E1113DB8E9E10BBE2AAAF759287C
6F4150C4774423E8C99C28166E5FC3BCE52C13E22A5EE09FF45F2D070A7FF539
1AA9BB2001FF87704706D141BC860829C1FC5AB7FD0E50294C91E426F122286E
F473301DA3F5C5D300555AAC9230CEB38F253DB2EAA39E117FFE2DA4B5BE5CFF
577D6C74AE6F4D4B7A8DB95D4EDA28EEB20379720A63410EB5D2002E8CF0F39D
7094BCE56AE1BCE92DAC62D3598383DB8D4DB63469F4F9D4F864F2647FF8CFF8
5EBBB824A30934AAD5CFCB62FF4F466036F3F5111659D786B736DFDB83A3BC01
21D26CA63BF32BF1F74754EECD2BBE87A47BF0515D7D3B663977BDB26DFE4C56
77613BEA94BA003BD1A1872141DE6FF4845014B6379A7F72F1879084AFAF4B3F
3547D36E0DA51E215709FF69322D42C893A30F323D86B14136429634E4766722
F56E044B37BC6D86BA94DFDA70174FD46DA36BEAC07DF24404E050CDB6C3D32D
6F564D07D976715AB3D87BA81F0E2E8EA0BF2233216893874A165F2B6E7741D3
8093834D9D811F3A0088BF4A51CD46FFAC1019EEBEF540640ADF732D0F3522AE
F915CA80D725B3C0CA9868A1B4B066C40F22F2334343E31088B70455187E7D3B
4AF9FE320D0AEA175BE61D1F70DE598FD38A699B6F5D12FA5ADF74710D819985
09EAD1538B030F0A233F36DDC03EF644B5B47DACE807262DE2A2171114A3F53E
9A4C8A796E104EC899AC0F12E393636865CC9C001359DF6DF52D943BC285B007
D1135D873544558F0F8E5884AAF083013AC5189718CA0E705F28AE618979AD6D
FC8C619CE8FE1EEE3B9FE2203DC6C75B24F311C2DB10CADE05ACBC6787BB5EA4
65FF0CFACD9BD4952B1BF319283A82E3B86F6FA538D46C3153553EBCBC846F54
76BE47AD79B88BD1B66C5C3736A07B54B45D90397C528785F331E02AA401E30A
909608E8C4C56CA2EA0227E9CF217F7B9B18573B6CBD958A80FA14221F9AC801
9C02439875EF9252089FEAD3867827760F7091469819011F0D8CD5BB65171F3A
F111E2722605554A46271D347D34E388FAC6474970914857919926E5A42548B9
D6947B9DDF1521604BE019A51F8FEAA74DD627CF29E7A7B831DA95F37929EE55
B032A5FBFE5991BAC2556AE99E8E6EBE5FCE6EDADB8A3512329E3473F6983DF6
D128238448E490FA6577D5C87A08B6F333E1C2EEABC20A070B16517E9CCA690F
A83F7A9EB23119348D2C82A64066B7D5FC1BC8E178BCCA13CF4B051873F5F594
C2B31CC6F28BE81E6F8A564E5588C1B3C26A19F6D5C847C84253F2BA71A443AC
ADEE13915C5CA44FF41CCC2BB9ABB47FDE6E5DEAE9A270823267DCAF70D85D56
D17D89DCCBAB7A072F2FAAA02E4DA5335ECFFCAD74D10C98256868B4640BB5EB
9820A92F8C86B98A36AB956ECE9F5C56207134A77B3595FB04365CD4B4A5FF21
6BD8534C4ED6F449EA18F91495B2061F5F4BE3B7C96614710AE128438AFFB0DA
3B12ED78B7415374AD07575B2A05E4D3E10656D67C80E571122518F8DEE14A3B
B7EA013687ED3699AC7410FADA85257EB6A2C747CF7113878FC1B09472961378
81A09F34C3BD62E7C817927188ADF629BD83579B2C564CC5455223EED0991381
BBF102A5FFE96F8C6321EBF1C106D0DF5B7963E6EC917BC6FE271EE6C23FBF53
2ADEE6A97DD142F7D6039F6115845E21FB2D04A6E73B21EF6C45A11F980F96B2
0047C27BCC7AE4EED9C98A5C5AB82C733A7BA0BCF7739D813518451BBF41F9D9
F03F14667266F4313B22F08E3A8EF4616E1DEC7474C77A194EB2B6B93DE74DCE
B453B81ECB10C374FF4838B81829312A1F361B1721FAE4B1884FC4CBC15DE7E7
64671E5A5F3E4C498F5BF6FC74B2621802B29CA16DBAD0A2BF9A151AF7944D4F
17D6CBB30775DC75B1276EABA9C364A37169F4D6A8A3FA69E0FD82A04759D416
1521BF6739131AAC97C6853B6818DD0CDAAAD67F1C43F8454EA7BABEA8C3C7C0
21CFA4F3D09D178C737025193E2ABFC8962C812053AC9804C898AEE1CA2D6ED5
112A7E67D718A1691F6A9C14D72CD8AEFDD97BD87B20D735CE102C0F60A9D44B
FF14AF8686C54268E19962B62E2588EB6581FD0F073897FA49BF0BBB413EA850
A2EDBFD395F2A6CF1E84500A5FE0DD7105FB8A840D893F79F3230443D11313D6
EBB9369563DA22017B7DAC52EDDEC46158F508D7AB7F99ADD591D74570264C50
98160CC644902847637FBD2E1DA05DDF0EBFE7C4F91333D6CD3899778644A336
17B7649224EC694524503DB75CFA310263EDD27D32D83A216241DE6177BEF5FA
A263C6B723AE4E5B34B405A0A13E318FE50488A28ED7C459E375FDB205B8CE97
B2E416A8809BC44C7C32CB44B0934372C0717C1A9A37719070DB1E340FB83606
C1E03028539338323F06B3AF9DDF627537F713FBE0610D8A1D644FBF257E8C92
5FF8F244F361E78960E765F8D8ECCBD1FA9E023AF7227342283FB0D175888DB7
D4D3B801F1D8C20804D0BD5A355BD413124FA95DC8FE9E2ACF4EB2C17357D4E1
15CF13487F83C49AD96E12EB7586C7F617FB824FC072B203F4F59BE1AD936670
1F2583D92E7074356E75788B2AC966CF6AF6E8408A0C0C8092C88042C30A58B2
473A333E603F36F68AEFEF88DFA0604C5BF95DBE48FE4DA1BB5D3B1B4DA14545
68CE42BD30E6CAEAEE832EAA7D5B6BB5D9D2D263B0C712FEBFDC91055C9EEFC1
BEDE9E9906F6A6A27D431B5958314A5B7FA41132C9B8909578414D8DA21FA3AE
B4AFA2DE7E820EFEE246506B981C4C25D9FB5C08D065EB272EEEAB9EF15EF483
2B592CBC9809C6CFD90AFB12DB06411FBD3D4A4E33DC86FE535B622BE278FD6D
3860CBEDDC58F13AD1A0A2A6935CE12185CB355AAED83ED30E2ED1D233080C8D
C7A4E23C0F133241F066096999887AD4D12DDB9B00B8F6C133C983A7ECD803D1
2B728D604E2276DA78789470992AAAF45866D8D63736A1E7496C76AE7950F6A7
9C0C1170D43551EB9F0C85FA334F1E1229C67D5BBE7B55C4BA6A3205AC2EC474
398195C8B4556A8BBB048645920EC84462A1C4A7008885277DF6688E3873FBC7
A23B9720A901AD98606C248E4453D8EBADC19FEC33DD69ADF9BB7D563DE61A20
F562A533EAE00D0061D269A3CE4CC9C2B2F371B1559D8BEB245FFAA7955250F0
8E8F5F5040277F5C32166AB539082917BFF7EF652D589681C2346AFF7DC04EF4
0B1690BA902B26EF0FEEA4D008B69B21EBC9B79A044D0074F36E773AE887DDE8
05528C272894E50B5916E65AB744B6FD259CC8D48D85F6692F098CAA6094308D
C00DE7254DC9D6511D316FDFE7C4E523A5753A0458269D67C83EA6B9F5351815
E66185FEEF6C77E104BC068A00B757D6F9DCA2AE54088311ED782D682DCFCA1D
C0B686ACA441E316ED0CB3CCB6ECBBD05FB82050C8538380292E97BE26B58198
799A1D91F52BBF703A92F4778AFDC33C0B57B8121AD86C5620623B98752E1F56
FE42DFE14CB390C69AAF35C89B103DF5666EE9AE00CAE70CB44DC84256134A55
480B519A066B8716B4C88A445F9B599829376AB867F43B2F6320B331A6EA21B5
1B00653FCED702FA11B262ECE3D4DB52F38098A03B11EEF24925246D8BE271D6
5F3C028D630522F6FCA9A69984912BF5BB02ECCC44A5DE3F200072E6CE16B421
FE7096806CA960ADE0663431603335A8DD49D99E769BD73852FD9B23AF2E0879
C58516AC14F250F1A329FAB54F5315390B4B9EEC298FF23590730BEC61ED49BD
EF56662CC92B9B1531279F61DA43B1A2A5CF91105E58DF43B5D0036385739DE0
18177CDBDC528E02E2DB1D249256E80136FC36AE508B99B7CF3B97EE41468389
7A495F88565BA6C75C0AE7972C57A0BAA11AEEF6BC819027F403EBA7BAC4F8E2
B0B9FB06E184655B54E82FA19C6ECB9CF4F23E0494C3D498A7D3A42D0D06F379
237462636934DDF133B73D96E4A38C1576C9EE90FE9E0A9F5EC4928A31B8138E
0BA66535CE0BD22F0A312EFECCADDC8A013BEBF5849C20F6CF7E88A660686049
CE34E3D38D861DBF4B44A91DA0F946A77B1CEA2158DF6A4079D92B507EDDEDED
0D2276654682C61FCB9E7659E2B0A319D5E77A57BA9C9F190A23282E63CE45DF
7361876A760A4D5A7D58A46956A3A6A0486DF5FD63771F4A7654C8FDC3A533E4
4F41CC279F29D5BE130095D47619537388DFAED18DBB716F822B8074F0A80A2E
23211930F1C5D7F231365BE2C51E738AB576DC7ED250F98A9D54B9F2AF8132B8
E428CCFDA42635E08E449796673B540B41789B3DDD14A4167F184EBD03DE5881
2E489159ACCA2F8A11C5210AABCB55D2B9BE0986770FA787F267499DA09EB723
9641CFED8CA46B469E591AC1624923AE6DB8994DD4DB0D452EE6690A8CA2A75B
551ED33D19A1FBA979FF7BAB06B1AB21AC05103DBBB80E51BFC1904957E07C9D
70BC63616D3087C78682E2C9059DB1F04895DF000C2F81D492A9799B23B51C81
7731D7A36B38DE952F20E91B9F1FFF741056B0E064DA75C296A11ADF59C4919F
63C78F9B7C2FA998F5BEF9D1202EE155D8A4D4B9C26C903940F755381ACF661C
D4F14151CCA6B1E339DE260B1BBF233238D5111403754425B0E6E27D58BDBDF0
2AA83FC9C8C5076876ABF67E693DFAA3D467865B963C6CB6C2BAC0238F0A2AB3
DA276EB4FBEBF2CC7849276A1AAA5F1598EC7A9A573A79CCD5B6605B9711CF60
A04277EE7E0EB69D76392B84CF4115991A994238F3B603EA8489EF99E770EED7
8A968F1DC2D3FD1771072FF46EC2F7A7F271B49E919F88E75810608576B14415
1AC74059F3693891C175C8515E9FB2A5300397C551826A537FBE9B5F897B957C
DB27ABA4802F0E34E4EF041492ADB51EC95DF8E053F2DBB854C4BF36A564E8BF
9B7735371FE5A2F54624315981DB9E59213A11EA6D3F9D917B293DDCAEE45B17
1F5125E4C1B5EF7BF16528A90DE4DAEE9941D44D8D1E3A19399F13B93D9B53EA
F99A172E7C399C813547B1174FD1466D192A347B642D9FCC4741595796DF2CC2
7F95B1392326CFE1BDF905CBB70C2513F3E8A5A080D9ECE69F8E6598B835A0B9
38809753D88C3FF60A8C9D26CE00F152DEC98F89AF22A7CA1B93BF524CA5AF7D
1406F8A10CE2D1A392ECE3E3A5B5A4B80569D5BE04886842418EC67CF5DE99E9
A5C3D76B9E30D973C1E738DBC89B272A45E4A55AD2EAD722B31CC09EA4E22AFD
C4B35E149F7EB05AC2BCFE82D329D501153B18CB7C8DA45DD0F6707DC77BE488
A36A54D9DCEBE33F11D28E9670AE565FF9CA7C5AD3F494E59E191BF9A32E6E37
2DDBEE44AA952CA42668A93FC84298A55AFD3992503255CB46F8BFDF529A8153
C8A96379C955E7D0B8300605B9B8E5F686536D2C586421D462D8286E27002918
17C9199521DA6B008853A9233AB0689882BAE8EEFDFB3DE18403A6E9FF8767A3
C6F9DFB52CACE234A8AB7380993FECCDEDF261F9F4E5DF33D55934F6849598A8
62D08D531F526EE267EFED77AEC294C1580C3DD5D7DB9D579E0ABC08466DD6A2
8B95A611970044F0D6FFF7DA46A02F868921AF5438A780AA5094B9437176290E
D452EF15237FAE74B8D924E48E8EEA7BAB1F7EF9D23EC194EF733ED13919BA71
9C14D80A9BBE54DCCC08131990C9BFC196EF729BB5BF404B88E88E169AA5732C
D5420120EDA5F729B45BE307232F92731C10C3330672C95847725DABB0F94ABD
D9C681FE691EF3090EA8853E8A16000F39653238844F5D1F36E250DCCF75A58E
95F774F78CE855A8A32224F0C87186BD352E33A39C6E994BD8680985B40867FB
DFCFD3062E20E83FA69D9B4BA8A2016A92FF876C7FC5A1A8A411A597335E6BCB
62888AC8539B392BA14426D57006CDADE0409B1A248B52378E7ECCE82275C63A
8642C108D34C4CED6F7DBE80F25D75116BBDADE0CD58E8A717B266D35EEA7CE9
A86DF45930BE230E0C7EA558F50893E391398AB4EC04059368E01F0739ABE8F0
A30771EC0FEFE058B9944292ADF21511621F53D5456CA3997D0EDBD2BA7C8586
E942973B8ADC21BA304AB67C4785A7529ECEB3758E9DFD534CAC1AAF06A06E4D
412AC9740478F55C4D6DA862B50F90997989CE492D8845A2632AB6CFFF3022D1
FFC91F6F2C6B28808CEB9BD6E1B92835A599C58E9CB8EAE9A2064A6CD3A2BD1F
6014845AD9C5FA4A4247E469A15621739B6E1DB9F5128898748D5BA572D3FE12
89FBB4C85DDF72F5F6B01E30B2D9F129364FC2FD02F3F6970F6306B22213A308
C0C5BC567DEA4F5E9C816B706FD5796FC302D71E0211D42BA31EC40962365DC3
211967EEE2D1AC50EAB6A0858F98FA55863F42637E97F8985B6823BC95500AA1
711E0010118D3D4B9F546EC95BD8940EF1700A543708FD91D7ADE548F68AED89
F020568B818F514EA832662C580500C0575C9456AF6D69E941C9AD6125A56234
A96C6AD33F56C836B19D06A50091FEAF534CA528E5D88EFD8566893F56B2126B
F9B647BD0B993D5A426CCAA11CD55B67739B2771C6FA3A6ABE01F6B601D390E2
DC1104F91B54A06D57CA5ACB6815083489A14C8EAE44E172D358E005C55B6413
A69F71812C84055F651E11ECF25ADCFCD2CA43728C23891B3366152E7DA26D67
9ED4D87F89B2D3FF1A88AEC678B0EEA856CB690E4D9D6B4452C138A84B53712B
D7B6334E91E3DFC435B3374F45AF41AA09126CC46D6C604DF7E636F8B7401874
41B0D4749EDBFB35844F8CF727A38D8D2F11F69334F5BF921A7F042B0FD7B2E7
501F4929E800331DB317E25DFBD96403FB363F9CC07D0BE4C0F40C2709AFFC7A
33A9F31B1198C6D49268AB1E859F477973507027EE3270D95EC7BB9535B92C38
9EAC1935F8964877EA22D9E5D4256F3134B7F3A88A012D14EF1B8897DF2D4419
35A0C19E7D67C5807A4AAAB12466D474BBF5C4ECDE16AF0798D746221311D99F
7D0BF4133031D964DA80934BF959E970D45A7C8D3E256E388E9D13824FEE3345
1E83D800226155BC9D1A36F8429D7F1B2D22E3BD0A364F4AC9FE64C0836B09C6
744C11F79C6202E3372A2A58AAEA294648DB1347F42BAC7DD6C1F6C18B52DF7F
950CE1BDB15548CAD879752198F95C7F9A722117650C8F7ED57684A4CDF5D554
B1CB65A68E5255384A2C0EF7347C378B111AD792A90E38E1552763236557952E
53E9B9A49E49DF90A6AAE92EB1B2F3AB6D0404B5D4D40F80BCE763C27BB9B68F
8E8367991AA02FC9F9A45B3241BD9CC3EB1E8FEA788DB1C7EA3D873ED2ABBEBD
C37B3AFBB141634F0D84EB6821FC9B0C4B5EBAE3A5268BE5BB7602483A341A59
A1B95EA285C94FA8AD9F5823EA9497425941EC3A8C8B68673C2D1A2560CC92EE
9AFA29111A71BCFDDA20BCD6006B0309EF09261541158731A458EFDACBAA4839
7E97284B8A8C849D61CA1425765FA72E4176D1B9FE2AC37C8C0EC10FB99F32B4
AA99BE004C358FE71DD4239B8B1730244930052FCEE651C6A3A61C59E99D1B38
E65A28397F992408E3E8BC9A6736426C7859229DB42614A54EBFB4DC8097C0D9
B0F256630ED0ECBE9814BD19184B2C0F3B04B2D3ADE235821A784F22D35FB29B
08D5DE5830116064AD2EB0444194910446E4ADC661988A87F9A145C0A1EA53EB
5BAED6EFE5D929F582261D5EC4C6853F4410036DBB0570754DE8DA84348D2B1D
7674EB4AC4D983D762C563FFEAC27684B47D66DF1E02BF6E5037835363F06919
C447E40712BE8F81C67E8A16C560DBC074D05FA70840DA7FB81FB90A7CF5CF40
11000CA5542A08A0F20C570021CDB7C17293E6FB0B4C94CF8ECA32605DE7EFE0
584901EBAED4C8F5FCDE9F4E99FE38C168884355F9706AA705B36CD681F2C389
2F84ABB1C3FF845F4C4AA9343CBD4D7638FD6162295C7951690E26B983D61545
4CE25D66A8F150E6D2F1A265B49C1C5D9DBCD8BE04516A78B16D909468A13222
51B4C2F00B189BE27CD71CDF37A9AAEA4CC8EC3D2E5F3B2F55483835CCE59914
27B90C8CD0DAFAD0958C9C7A6A06602E80A3AE2449BA93D71BD82A12210C3084
C72E163F4ED442171AB36B5764F06EF4CF492E674B2237E6D232D25E41869E20
B580FD915B7E92F43633A853EEB93341B071C21F657AC08A0A85C7A5A426C5B3
8D4166028BE04BD1B2CD1894F9BEC1EC8B9693C41FB0A8AD528A7E5AEB994FE5
04A6B520B729C772E269ADC25181A42E65C3E1CFEC51A3D5D22F7D00B71F0113
B396D05D279B5A072102B7BF9C94CBE024BCE761B8B1E427F90B1C96B0B70CD8
21F598CE0A147CCCD9320D4CC1CDF50D3E9219F908054D638834F7C765F1B312
FF716E244C98CFA381A3A50BB937D3A60FCA2FF107CC1213DBFAD7043913B954
82033A27518E721EFA4326913B3972E0226869496C7C903453298F500E46BE9C
36A075CB2621BDD4CBCAD770BA2185CC2BB8DE8483A70423A0A080931B425226
BC949C320B476DD0AB7E6504867171949216E819A68C6C181FCBFE2BF364BE31
9AFE1E3594369163E8B9C2F2F23C0F2BF3992B4C132AF1FC9023A6D71AE29A65
09F8563E0AFDCB9362
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols8-Regular
%!PS-AdobeFont-1.0: LMMathSymbols8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathSymbols8-Regular known{/LMMathSymbols8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols8-Regular)readonly def
/FamilyName(LMMathSymbols8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathSymbols8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-30 -955 1185 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F035757560E05960E2C327020FEAE317
24C484AC0CD3C1AB9CF35516622A022D6CB83DEB8126DF04762C901617B35492
98158049D5C65DE86143B7F36D36233A115C36DF60D3C55816B2B0B341102AF0
90D7D4E00A7611262CCD366F870F0EE8175688261513076B608C7E160A9A79BD
2B66E2E2A89CBF6D1703854915ABEAFA09718FE338924B5AF1FBF1209786AEB0
0026C38A2C7E208E6C306BAAF037DFB0F3297EE1ABBA65247CF72D0F78A9BC24
038966CE124B94487282B69D6BC0B5E17441DA55415B5369E451E2B0D705FCAF
3AAC6DBEBB8AB0313C4C201F851DB96CA9EB49357C3C1AB73F0CA2110C994680
5AC8F0D760C03F71C92CEC2E1A3AB84813D389BEFE7E0C28FC76FCA70704BC4D
159EE8B490B95CB09DD01A4122A686AFB8B9C69381C8C303F9A3B695238C3BB4
CB44B3BBE50E2BAE63796BB51D945469BB75C69F7A758180B77CAAD2CFD5951A
23580A3D45083C8368543DD37AB49705B939804C12D4BDFA730845F7E42A6C9A
B3F0A376F44DC297393B85E8A18C45C99260BD499DE599CC0D76EBE4AA7D70AB
348FA87CA9A1000814C4FA99B4EBC35A0298AA29563B030707F3EAD9FFF7BFB8
3B347C4A00BFB392E79B79F413E67A73FBB006EBA896A65CB21BE940A0940640
34E08FF806A114ADD3FD42BB394F76CC77DD869C46DEEE20839C9A2FF73B840B
0ACF238D333719F5947DD4C39B8E3F070EEDDA1A39D526319828FA9F47F03D8A
245D8E215B37959566D26DD98185223E4FEF01676650EB4E26C0A425E6C23C50
4BA94BC88E08614769C017F6D4F14C52D7189D4AF8CDA367D8B04CA8D3F2307C
0A7A179419A80695912F456637F539123745CA8E696E250E0BA6B7C6277394E5
98A8799C29B6272613C152B0CAB05F3C7795791EC9AF2BDD416861A3D13FA858
BCB6ACF5BDE40E5DFBC1A171A7280E8FF4AC0D4C8A2199E9E2BAB5CB9131A76D
EAC166A7C449A549EA5111F1750CA2C6E1EC6F00CB6C62BA52D17FC66E06ACC9
1E6B858F9393AF9AA5E69F799E01D301B647DA57225C2920E3BCEE9D09CA5C60
F22B07F24A26DD8F4D6F9C78BFAA8D12A21531E713B80CD03A5FF4F3BBA2AD82
3BEF7DA8C97C30F1452006AA3B1A168483F6EDC4089ED02E567923AE6DBBCCA4
8C246A080448200C2A29C34AE6255BC79B73AE14B980A7C357681BB0962894CB
DA32FF2B70B21AF4D158E0F74652684A7150D0967F83E13EBBAB33588541AEEC
0DE8C53851845A44FFB46A93CEE3E8A0263882542F7F103D13C367EA8E1ABFAF
6486A9DBF6668550BE7858F5790BC87C66492C0FD34DB08EDF842E1AF58A09B0
85A9B7FA402029FE2439769D67DEBDC8AD8C861E90E5322951A2904FD702766B
36916DBA8F9C96141BBF4788FA435556B2B4E1B37DE4506ACC4224CFC00A8F83
33941A050B51B9508758F4EB2DC074D799F5116296B8822ADD743A043F9A6426
88D10767A9F99A072BD4C88CB579B34687BA4953B96DBA29F33211B12A0215F7
5F2F873E5074A7D593DAD0EDD97270FB9A87BE870321A49958B10E32850F0148
68E0A1D795937E61D4556BCDFB7F4DA63A884F9B4B07801D30B1357C3432D6D4
7B72B7D6040410C194EE5124ADFD7A40914BF569EA1F9CA8C8897E839D262395
5EDB3E97C591A3A5927DAC229EEE864B8C0F79ADBF88C0E6C41CC70D9010F07C
1CF9C05960E34FABB6C5DA4D789E39F35FE01F0B22BD9C63B3098457716D6B22
5EFCD0A960F3A2319252C7A0F73A4770E056209C14D721A714D713D5F2BFAB32
EBF815DDDE792B2556A87C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFB8DD9B92CCD508A09171BC12C8ACA32FECEB20
7CAA1C2C81ED075E3EA7E712D95FC612CF97F3402658E90924C75CA278243C52
D4E02E8224F197E555143D563819EB1ADD2248C18E02E18FE3DCF624E37ED993
3C7DAB05959E694040B7EF5F92D80AEAC2CF58EC01BD61D7CB962C4EA678C5C0
62593DE423E11AF90918CFC6E1E8F9DA428296FF0C92CA794AFBE2067C46264E
EEB0AB0FBF2EDA1A8420EF654A1D4E0A295D1DFECBE39D9FF712C85C748311C9
CB8695716F72FD4F80E77DFD7E01E9FB8CB1F2B5971940EE4E7B14727B086F27
E43E6E3EA6EF0DE68E17C9C0F050085274ADB56BAAF193211E48D1B82FE44A59
2A9F5FB13EACEB54AA027C1B87380F9EEF9D500DC327702B132335FF288ADF62
578F30CDCCCF826E4C4CB57B5D5B537BD2FF89086BD0C4CAE557ED66306DF3F5
BA9D1007C869E8594D4138161162682A719FFCB1A982A5CE8765E2681E64B8D8
4A7CD7504E58CB81D0EF03A3EEA97D43741F54987AD65FA54A1BD682F7EFED16
D35D034F1AA5CD4EB628353F1FFEBD0CEB905F10C183245F1B733C17D3B854D5
3BA686CF4088BC6C0FADF9A6C05BE3499567E930F710682B8954108AB7B126D8
255F1A0F1BD08158F94077D191F62DD73838E0CDBC99204AA6AD1309BC5668A2
A524C6D1C68B4E416B248A6FE29A67DCF4E1CBFCE603260A277AEB7F75627333
3E84F341637A1BDB292EADD055C97A12CF0B915E39263AA9F03B21C1F45C87C2
CCB12B59066B6DA2CA24E020A0FDDCC0498D74594AE3ACB0EB4CE7727EA32222
07E864C7F39773638E3BD2FDDA11C79177AD0A23CFB7F631E00CC979AD410F81
3119C0543E091E4820C12FE47E3154789E02FE363C319139350F014FE8A785A3
F66FFAB8D8C9E7E26E49BE5FE558491D1A57B150A5B386F7ECCC0EE8E31695A3
36BCC7BB9F7FB26DA3444238CC33E2791CABC1DCD0BFC3372E1DE72D93AFD1C8
E2635A5E428AB33E24E81346D13A9377EBEFC6206D372675CF43235722B50C78
8C4A02867C68BD8E5FE9A45653BBAF2A5DCA560DB5BEE7054FB8B0A13AB598BB
C481A3240450D1453A1CC1054A06B962B7E28A73BE0B2713DFD32DEABA293EEE
AAA8C0409564BB1ECD1249588C18D01D8AD4E0F0032FD811ADF35B869BB210E4
4A57178893AF229268DC5375F01AB676E600823FEC28C30D2208A868EC0D01B1
4845736F9DEE02D06634547729442ECDC50C90989CC881C3D8E85B76FBB10040
F0DADEE5ACBDBB43307A30FDEEE5F77E621B130E4B824CE23100BC08DC65BDA3
46307E3BD497D7F1E2F51B557FEB6AA32E84F5E55E5C12A81B73F370431F3842
A1B0CAFD4ECE7F0DC8E2A6D644CA8735A4E96445BA9CEBB627718F858DC051E4
3963ACD7E7868CAA4488EE815D40E28CA54C83221810546F0009F98531353C9A
8EBFE7DB9C9A120C2A4E2FED0E63F90B8DF65026707BD39B489E54425A5ED877
73C6B3A8ABC8ABB13ECC3B249F1878A8F76D59596C63BCB936321589906AB242
14F3C046A1F210FE287A8192CBA7D2A89BBE7A7B2DB6B1E19224F04262D6403E
3B41787E1449587E28093E66A9837BB94195E3A4A5C17DE6823755F59BB9E3A0
52F69C7808FB657D9270933D8B167D2575CF146336BB1C76735BE5CAAAEDBE98
C69F89E7E71474CFC7515F73F86727442EC24D46F92C99498946CAB6DED8F5DF
0540063DEC2EF3F83AAAA3F4F68A8E892C3D0529A466C6A310A6101223949B01
79CF7DE6B550657C91BF3116EE7F85B0178B3227810D99B48361133B54A6DFDC
872745DD45766283944D7293D6FB1B42BCDDF2F241AB267897BFABA39D0F2725
E0DBA7C8CE305DE7C1B59DC2184872FB99578B809358856E4E99B28E138E2DB5
85CDCCFBF2B46F01012CC94E2FB30C1E4411918E892630F2AD07EFF1919E9BA9
0194E24A69649F0DFD0046D2EED7AF90313E70594EB5C354023BFA07912408F1
72E39AFA29111A71BCFDDA20BCD6006B0309EF09261B7AE1C67BDE0D385104C7
C0730BEF94DF3D9BB2161C7346FAB11805152716480C0984BA13A8433ADBD629
229C446AF84A690F56A09A84EBB1CED5515C36F2798A89689BED966ADC9AC306
D01B6E24DBB2CFFBEF205FC921305B45B1B8FFDE2A09CF6301F485C8B7DC2E56
82DCE3042DC9767C407C0DB4D0FD1A4881A34FA0EEE7810D69F2428045CD609E
23CE37791362950FB435D1899A47E6E69EDB17BC08CA1B092D4F20BE1AA6BC4A
9DEAAB1B74EEB7B908245CDDB7A093C1AA307DECFFE53A1FE54984DB1360E320
862F2CA6E0258507C6D3DC1DB94102FB88F631211557D3A4F79A8E5FDE69B1F8
4E9FB2EDBFB4B8853524F58D4E1EB98EEBEF1B6C2D330B1CFC47ADE896255DE1
FFA8CC1A09D26342E89B9A39149E124C564C5251F613393060892D5A51B78BEB
3E44B78C50316C61B6FE484CE582EB7FBDC53D9427FE267051934E366F7C7B2C
ABD2C65921B5520C6F70C1B6E7AF8E11BA4798C1DD2EB7D4F962028061B71099
8E5EAE433D8A82CFB15547B339AF376E9341FEB9433AF21E8D84C50F75043419
1ECF16684180B65D9CD4C8CDC57A0BBC0598B3AB03652A6AA459894E119B5356
CED765F73F6935478D5133B9E761430A39CAB0DC109B02A80626A9ACD7856ECE
4D6569F5D1D918A30005C31F177816336B74AF8B9931BEC0CAC75380C714BFB1
BC100B05D19D7BCFB18CDAFB0310935E6C7EAC6B9A8134C4E8F4969C9268F7A2
C306146CEC5039310EF1F4ACEA1A40014BA27BD58490D24B7885E4084932266C
621A42B8A3139CE953DFA9687BC439A746147F456517EDB169157DAD9D8AE5D7
EF2661E266C5C812B03E2569E0F138C2D58E38EC9F0B780C298874616D09E399
6CBC81BF2A98EC7A9A573A79CCDB6327D0DD0F821F886FB4496ECCA78FD1A2BB
CBF0CA1255799DF587CE66F042F7A5179B55075FC89BDC3302D01D7138DA0828
4C8C35A8E26752CC2EA8F3AC2AC68E70946C3E8F46B9C2DF790F79269566BF9C
9A6E54EC87BAB7D34EF99AD642B738312FC6F300093EBC7669C934250A5CE240
A1171441D03FD75811F371B3895AA29DDC6A984C0E944711C77542A66680C933
9C7F2D5A30471C6693CEA46EF483D1046E1A9FE6EFFA27CA8C9ACE821AB92B0F
5D9DC9D0A91B93ED65003BD0C4D6608A6236426C7859229DB42614A54EBFB4DC
8097C0D9B0FB95A5A87CC9FD874959462454B5D439C456BB55FB81B09E3FC5B3
26D850A5DED9EC17E11FCFDC544B2885995B5EA543CD7E8E17FCB8B4ED57D7C6
1B0C70972F86F67336647589FB0EA874920BAFB89889071729076D755021533F
B886A9483867A5E3CB8A961CEB372CDE1EA852052312ED4484491532ECA79ABC
3EE60C00312665A8DF22AACCF0CBD84EFD9EC148AF4245BFE780E23BB321DA56
DBB416890407B39D34B68BB61B00B146D2E8F794C1546CEA6E037D7CD767AE50
843AA610583CC318C66E25ACE786FE7B406E5F1F232517AA77DD3875AF98FB1F
E6FDDB6323E23AA93628A6B5887CA2263BF3F5A696EE86831C603B0AB1442AFF
5FA6C191F7A83C324AF0629A269BC5E6602B15D0B8881E6F37D510D53C60AF3F
6159041212131F18BF75E71B5B6E7022B99AA55C94130C7A4AFC72E016B43A65
AA522E7EF3FC6134D5F715878D99130DE16A3ED40825C75260C7BA8A5A084766
1FEE0F6B8798F96EB458F2E1ECB61B6A2C9887A5D0541AC711EC68B79C2CA3C6
175D4A90F08ACA408540796646E0DAC8220792B3FEB61999671C1DFDFA0919F6
35FC2CB139762BA4D20490AAAB168B00EAE492D1EF564F9D4A077B526322E8A4
4E42451F694443F3C4E2FC9541C8344D3575996B2C50A6E3D62384F9ECC1679B
6514C107D7B3A613F7287269594865E9453E9B6EF227867D9CF9549B3B5E2A6A
F748308BAE99AE06106D90DE65FFC15685F8CF6DED13F50F406270CF873290E9
9A3BD506A8578376F788CFB65E372FC69FE9FD47150A0CC019FB7BF22A3B979B
EC26787BAB2D5F893EE00D41CB48E35CE9C08D0BDC30768CCB856C1CD7DE9E9C
0848692C38D1E3016BF4B4E37EE291081DE21AF12C1240C57540E73362D1F9A0
904081FD330AB6BC5E2CECD68B9981B2BEF1AED8D00A3AE7ED338B9E18F72045
7A4AB35C68C07865063A2AFC57C5F2062F908641625F5C1C0C6A364E3100A357
D10632538A2A0CDB6AD680DC773ACEE840A11C866CC356BFB3FEED65526A133B
8800E5D9734B24E017A2E354045A20128E1705A76CC4A6F6FABD063ACE8A01DC
45383306CED62F67716BDE9F3379CE9878306CD4905832A6D7971824A12374A0
CECCAC565C16B53C7C5E1A202F5363892C77B74A200C9DC2E2179D79AED00A2D
FDA9B22773F34FFE430F51DEC9D81F1FFDCCDD178A0CFDE0E7E46CF99B117B55
B3CA9B1F3952D101D6CE60D1A0A97C99EDB3FADF880821AF7D1CA940090DB589
20B9219284D91DA3BD4A61CB3BFD0D14217EB9F2CB21F0FF6087C7308074735E
E35C87F51AB5DDF2041BCC6827E45A0370F0F2D6FDB8A1FC5066E1BC3F1D7B12
B234F60899F20EFFA823A8ED6489E6A04A0110DE316A16B9A8A6E831396813D3
F551F18C2D70B0FBD115BE7EBCE816AB40D2ECDB17E15F2AD8D3BAD0B94BB1E9
E4397ED46382B7F8A62CF533D4295155716F96B850D6FF61144F6A9E51CC1B8A
86A35082D9ABEB8D2DA4B491536CEF9D1E9F4FD8C0003E6F23293B82B65EE0DC
F0830C02BEA2CAE21DFAAFB537D8D9F0A74B63C9D0A6A9BFAA49F87C4FC0A724
1808AB8A4938BFDD1B8644456D6323286CEB879B3BDB928141D3E5403F1CB5FD
773C8B9DD0042C5E51323CB81A8EDE313FDE90D905B45223A6504CA4D48826FA
E6756223F2FF5B5167ADA7EEF2D2CBFFA77D88827236660260C19CA8BAE9DBBC
7A911F54C201E4F627816CFED662D19C21824CCDB8F71DD18800B7E40E164074
33FC9A216DC7AFCE1C5C7F7EBB14725E4813E05782683C877C7EC4C86D6FD378
06CD3E28E86F10868948EE507B47172D7B52B09828010DB7975266138B7C5168
19F07C1F01EE32CDCE87348E9A967B430996030C42BCB6B3794F51D6F7DBCCB9
A30006C7D60C7E1AA2761AF25BD01C501409DC094980FE3A0D2A24B429285A06
EBEA61BB134055B25332C4F2AFCD776ED2ABDCE78D2BDC07CED874A173236473
98EE737ED7C6090E857AB029E6C75123998FC42D3E0C3F20960FE90B3CC6EFBA
5BE1F043F38C1E3B3CB2173152213DF78D7C0934B29652E763300876BB073367
A61A91B741B3CC4B68E496316C1FCC57968F790C5E7948B72C4AEBA496FEA882
575B6426A82F101D8FEB1CBF633184CB857E6D5AB42F92904B4D0DA750DFF2A8
3A30B03BC1DB36EF6FAC16F69FC8885EAD2CAB2644F1E25DF5F6EF5B5ED1E80B
82B3BB7F5B0B954E7078DE3E31D8AE65F9EA55FD147FA2DB2E8385C7B35F69B7
D06F576D7570D2B23AC1D7040992123A276F3483AB90D7EB79A87E6467D40C46
F878C63E035056CDBBB9F4DB89659D42B100853BCBD4D0A1507680ACA37850B3
0D1BBCDD128AC4835989372017D208167AD025F24591E5C2F51F98C01BF41ACD
72DA94D28866A036F901A464DD4880F9F40FE635F580687D0AFF1DD18800B7E4
0E16407433FC9A216DC7AFCE1C5C71363A6819F959EE20C356B257165197946A
19E5C7BE0C4388BC2EADC60BB6225D9CB6CA887922B117EB0E7F88EC910F8DF3
92FB73AC3324F36921AAB291F94D0DF09A825E5023D34DA177B1DD3787D64255
F26B3D26D7F5BBEA15237FAE74B8D924E48E8EEA7BAB1F7EF9D23EC7BBDB05B7
5831FF3172069E6700B37C86688FAFA81FF6D7051F0068E431EB425FA04DD315
AE10FD3A72CBDDE7E050D961FA70CCF2A9568E3A47FF5923031E7BCAAF39492D
B6B31D984F0072AA303D33D5478995B533818649C64BD8A696A7DC3322D57784
BFA903DC5A829DB662C70E21ADCCADA33D971AD09BB3CD3F0B7CA95D9DFCDDF5
4631182971A143737D515EC7EBDAB4AF1ECBA1C6E90B454E1F911994E4587875
05F98C38ECCABB39F621AF083C05E38A7D50C6FCAADBB9EECA944E5E27C23C75
A187BA522253C08645F0BE1E25404BF8131379A057266481BE460641116F6159
4BDFFEBE4B49A1DE68B5FFB595ACF8ABDF9F1234B69484C237E2D1E2E64C0D48
329329AD3163CF7F52E058415778334C75C7ADDF2B56C066ACE9F77FFE1A9367
96E59409AB7BC232EAB93115FE51069ECDA25AC0244C26ED6EEA47C3FD8D9159
594CBCCB611D701BA76B9E0D0920C9326B499854BCB7C7CBCD9F99899EFA61BE
5406E7BC10B8386B25AB4CF85048789BE20BB070528381C4E322949AE9033744
9F9C55DC86637A15E04FF26BF77D9D52F6CB8D6974DFB548189D085A7DE2E7F2
8F9F4A0FCEE7B11A31731DE6B46EE9D1C3D61DB2A1ACE0D8558D54219531226E
D1669D0FFECB6894E20C2ED721B7E4F39B4E372C87AD9B9979BC0426DA3CC71A
C744AD23F49087E3B4F7B2017CC4DAB7563CDD7BB8510F569A64768B17FECFA7
C2E70A4086F25183DAA9D88551F04446797CD20753F196A12A09781F4BC06848
F7FBF186A7D7DD69E01C7636A79E102F70889BE3FA0347CC98BD7DC49648D46F
2741B3A91D9032F24ED8F7853E8E12667D01A19BD70782CA4698C639FE6EC028
F530815B29EABC88E28B653076CA53A9D73D5FB903C296E7B8D5BBCCFB22495D
38BC8D05DABA5643B0356EBBF5032B6769C2CCBFC37A265AF506B75CB8F49891
4E17C88A93144618AB2A3A44B1EB69C07BCBE3A853130C1166EE98EAF0E5C8F0
9A260BFCE7C040D10575084BC081821FB75A629547382DE885B0C370FB104946
1E4F38E19D26A7438848A9682559E4C206881B58EA640A934223A46C18119F29
11FDA4C818B0A3812B714D9025814369FE71C3906EA51E75FA45E7C0806AC25D
D3073B09D77F9DF706F9E6252A2D88463EA735A8A10E8796D3D03BA155A1DE78
1B0153435F46538BA5C30C185DDB06A284AA5034CA29DEF651F60F496088AFC5
AF7A29C4E365335A08E4F941FEC43D60E0D67A4323F17D9178D32482B903E093
F21C6A672DB4498C0EDAA9F293E7264A221A21C15AE0743D640EA3CBC14D8D08
7E4AB1D89F945EE06A5FC0B48EBD94DDE333E185F4E23E0A66DDD15BDED1FAC3
80B91F8B0A349DB48187EB148AF69215DAF450DAB3F60B618854DF95C0B83559
BFF38F41627BD8FB32E62B80EAC9889188E5F0795FAD09FCE908A5BAC001904C
1FB4D0A3796356F2ED6510E900FFFC8BCC3D355A4F3C7BB8FF0113F63C66BFEC
839D4500138EBAE207115E8947123C8464BFE89C409BCAB867CF2D3F12E53440
5BCCB859F8A683E368B3C6F947205DE82F1F269661A95AC6CA56E7E1B0F3D3DF
94035C5AF7538DE81B5B4A7A4AC5F69B87DF1F833CC350508790F5A5BDD2DDC8
AC150F6BA142E6C2CE640035AE3392E4D5B7DF63406467FC8E6A63DE565844A0
55D086FADD7D7ABF910EE4798D537E8542C599D4E6BEA3CD03915F269B7B231F
5D9B1F61DF7CB03421C5F460457A63DC721E0041BB3DDC3172FEA590380549E1
39F633399946F115492C8F03055C82927FFAFA6E43AB24250CF29962034819F2
B5B36DE73A691A3166DB4D1DECF2B55BC3450F0473D5983C8671BC0EC4F54A9B
7A7F52C6D4400EAECFE4448F77D161F6228107C92BBA3269401FCE3E8DA44750
6ABCC3C649EE21863E4C426DE4581140121831B73F09457859EDAFD61E776823
6FC0A4304940D005FCC57E7C01E510D507ECCC190832266609281D85FCE96D2F
B7F1523133DA1537C79EE63BEACBB06368818F093EEDDF41DEBCB1FC8F4F3B28
8515CE43713570093409BE8321430B4EB6B72238B57AAB07DDEECA4ACA5DDEDF
C21B126F607D31F950B24B2C9042139D5E7DD438696A098E153341BC60653264
E799832A468D399CB9F5A1DDA2FE214955FAA891C7AEC18EF33485035BD4C479
BEE49B0C813CAC93DCFD9043706B83ABFD905E60E745D553D9666700C095207E
57106950D839087BE28F05EECB6F4E6128ACFCBE80D55A54E9B0A6134FD07C07
6DCB32292D2C05B69E55969AE74CD3A31D6E5204F368919512767884B8BD7016
B83FC3997DFEA159A40DE56AB52DD28DECB36B9DC8744E250A9967E7B70BE19A
5A755A8DCB30FF06342E7FA9FE4BEB970EC45F7A56748D8DE39DC304BA7BD6A9
F971DFCC0433D3116D7E782BDE113598D36ADC7DB84DEB6DA73092F21F04F718
009DBA58BF45FC5D20A5428CD87225C7FF28FDCD4FB898A052A0B1A5AFC5FC0D
AA0822F331CCCD4B8DA3F4CBDF92D8C0515AA8330A6BBA324DECB086CB36468E
DC8CCF17E0FD80252E1894C1637653261B1EB6D2DBE47EB9CA9D1CB1644C5290
BA2C884669AE0C0DB079050609754CBBBC246B3F9B0C5A4E6BE4BC682C4552AB
BB7A810FA459EFA57D47E890F8ADE1EC7BC7F3F3684C55112F7C511BEDC3CF77
526FF59FFD601A6123A48DB34F11EDF28F34019A1D2FA36F0718E793CC8558B5
E07F44850B796F9DB95EF9D81C62943378B575646DF47F999BF6FF6FAD1450F5
FB9B42ACAD360EAE847144E85014CE922B9801C1C1939D2FCDDA6DCCDC69767F
24E1D1DF16D6654B3533B519C2658DC69C4AFAE08839E2045D57945A929B28A9
AA2C21E05D767DB0D84BB045E44FCB6708F22014A1028F24E6CD6F9A07B3684B
3F735BF1C5976FB22AEF42D03E33DA209123B6E2B4558CBC63BFD8062A3915AA
5CB574BC60C16FEA1B452AC5DF51E04215CA250B7C6831F55435E628A295E895
BBA4DEB89904A846BEB906269EF691B4B66A9FBF2F42FF3947730FA8817294EF
F9C89AB74DC4418F77DB1E421B05CA8AA4496B318283B80AC61EDF21B109D7DC
8DDB8FE0540F9F49DBB59A4E38105266CCCF5F5C7BBAE143894819861BA8F5E9
8EC3B3355440F8790AAD86835E58CC579A53EF65B459AB35C2BEDB8D8B024C79
34ABFCD37E5C04EFD56DA9F09EC524565A13DA373E854B17B86DC6852124DF4F
5104A9280E4388FF05AF7B6FB67E620200B3CC2A36CCAC04A31826653E500F0C
8397121C5373821E34D0D205AA3826267FA03B2CCF128C42C46283AF59375E58
57479642EF670263A76E5B77BD0B8A7BF88EBC67BFD892E35E6940E94893E1CD
FD2793D8B7AFCFD66778364FF72B116D0C52E5E9849D674A19DE7EFE057FE488
17E2A2F71DB6E33BD5AF7B51FD03E8B7D63127434DAB18D387013C388D384018
2F35ECB41A09863E670F03DE2BA917E3284D54F612C02DD4C626DA9535CBF8C2
255DE4C035D2303AA66DF56526A41CB145196F783E806D7FEDDC4387DDB2E10E
F3FA3985EDC86A7AE676CA6C311D84D4D071C1465C95E05BD1F6B603AB078B3E
36999482BF45A003B819B9240E0346C843AF06A34BF536716B5BA9F96F91476A
E3DD52279FCECD3C4B2605CD6A89C52B018E46EBE636B6214175D6C3850D944F
0EBE502673FF855FE49B1B3DCEB358E59045747E0AA2AE8A174649A0504BBF5B
A6C59C6BE0B2BF3FBC77584B2008B21D9B6D5A3669931BEFCC716F622A965225
7E01C551E1B64DF5D843B0514647A70CB32D9A9EA2796126B6BB1A69877EC2E7
90D0E6C9233DF8DDFADD039C013A82475C093525EB5729D8AF505B26F99EAC72
A872C10A268B3398FBBD0D4765CAD178A6F93C5217BD2547756A3A345EBA5995
673CB82C886682E6E3EB568F46CBE9AD7B9CE18EB82274BCFE2E9DAD577B6623
2B3192CFE26656E256891ABBAB7980B1B1B4711FB26D09C83B0875DCB4156625
0CDE486DD72554B45330B3EEF2AE90BAB5BBEA411FE48CF96BCCFAF7A173C1BF
D4B934D3C3358D73CD312FFAE07D32B62AEA32B58B8D127C00F3B953C79CA988
DF0AFA1E08FF5177BB72916D578C2C6E72A18AE75BD5A0E98313585FF78E1E96
26CE3536948AE25914372D0D39F12785547266190E57ED06C2CC580967BCF982
686F13A8292504F21D932CA72B041AC9E55516479335379863857D8DA321738E
E1080DE466AE8A508BCD673716FE480E278BCECF4B659DBA484141D766CEEEAE
CE9FCF90586E27924EB356059F2A92904B4D0DA750DF01DD7FA57C51ED9E9D0E
3A3CDCC9BD02159950185ABE396DAB612C3059CE3053CD18E028C0F8970AE123
65C2303F48D7E4900E19A725568E617E921CB54292612529D4FE44D231A37C2B
30EDB15F6F26B737855CB73E7A7A981C9CF9174322CC22362D93433ED4DEEA51
BCC61B14C231ECBC73C511681AD69F4B470D4B2CD37893BFB424316E1AA4B387
46A4ACA9B0683F0CEC66794CCECAA5994E06CF580742E50FD7AED054EEED61B1
165B3942784392AFC1444339665254CEFC2A3F996D9206B5D21D7E2DDE51A0EA
DDBBF0BCE98AE75735DFA13DF811A9B7270AC4A6F7CD311C5443FB20CF288B12
23DB2F08424BAD2A76790BBB18E9A73A3AC40F568486FCC79B95474217BDB214
742B280AEF95FB492D5FEF963CAEF227D57119A0D31F9156AF4D76E60EC29311
F266F9AB5B38469000FBF31BAE9CE8703754A099D21B332C0ED4FF4B5719114C
0DA6D1B0AD44E8FDB48008504176EC790954645CE99CB2DC823134BB06D2AF45
F42DE4DDFB4A2493201FDE2D2E1EA7349E324829A88CD39230CB7B7C37E2052A
9E884984EC754AD5FFA2A1DAA2649DEE499E7817BF9B0F2BE120B0C0F663659B
BD109420C68E81A3BA28D197E739C1A1EC70760EBFCCF49C7D65C9DEC89A59D6
00AC85DA22DE061E1197C67D23C540750975D8CFCACA5E2D35E33B794FD84C27
4A4D9C2643EBEC1372E11304827B5672A08F7799B3929DB0B130E9F217EA031C
E627B8433BCD698BFF4B9805B0FAEB53D9EDEB8586C0569CD39CEA3D28B6228A
8E3A9678108178F33EC11FA768EFC6C2F83AE423590FCFCD5F871F03C22DA4FE
AE492B8626B86EDDB355D66FC9A90DADFDC11833C9333DF56321A5D3A5906E21
08DF5E38FCD9C55FF414724552071EFEB789F812D0565F4BC740AEF26EFE447E
2C62B4BFC0E245CB336A48445E64140F3096AC095EF935694599F9FEE4E81E15
2F9E1712A25EBCC360750585E50A56E7D88D4E27E5EDFBCEC126CD722AADA6DB
8732764E3A7CAEE7AA684866DE13145E5DCF2DFD5965B0A9705FF54F7FFB36B2
867E0B88169A56393222CAA9B96151B905ADA562347DD12AFE72E2FA971F0B7F
498FA3DA42D5058A590E4D63BF187D8A93FE9F8CD6208492E7A448BB0D248AA9
8A3DF4D154176673A003851DE425A8AF6BA29D4C707CFD45E588F7F0CEA77179
76FBB04E6A3577A4F5E74D3ED8950B75AF0B6BEDFCF429BEAF8B3559A6C60DD9
CACF97B0D86FF2BC399BEAA86FF6D34DCF21BCB463C942CE42FFB593697B786E
CFEA320CD49838B5DAD017150A5364EF1F6F3A8F40FC28A8F80062CD6C9CA9EB
486FDEFBD41D7DD1DB2BF35B1BD23F1FF599194A044EC8F4B8CCCB4C1E7696D1
6531A5EED36C30AA15C66D557E03DBFCD5E9907E38EB02257D7F32DDC1190AF6
1B764CD780E93F82F7477A180FF3D6F876D5E3064BB81E62A67297CE0615963F
33B07FDB0E07FD50A10CB644878227C4A601C49F3450F08A2F61C19EE2E4F105
5A044092E3E68AB828EEC69F3D2498503AF00EAF3AE0B8065555CF7FBDCD3B48
EBBEF3576781FBB7D433B58368D34E59319FDD1E4F08E9A6DB793C1B1F3B8F93
7AE7E4D06993C8F91AA195D9F12E03463930D05A3D71E1E9830AC1A5F13D0055
EBA91893597A866F289B75B6C623DDC0E21D2E440645C8AABF5A037944087CB2
D5D260D28129A5D82915D8E4CE08C3953F99A361F8B5590BA9286987A49E59C0
861D89D94E697F79D6C85FD95E498FA4F44A0E1FAB29855A43C3097D27E51314
1B91A947E0A1C2BE7CC7933E3D99DBA4A742B4993D2CD41C77916F09CAF327C7
D7DBD94ADD48BCAF67335C61B7F2B2B654C70F5370E0F3B92AA3FBFBE9BB816B
42EDF445E9984AD71187BE786C022950A86415391A609A7ECF4FF731353DCBDB
E24CE21B229DD993D11E519F94F7427E6E8B27F236199CB507C6F0650E649AA4
B5498ED7FF197AFC2F97E36F3B4C7762CAF304E656F659C6948C180839F3F7A0
80F28CACC46E50BDA39792AFD17B52513AEF6ABD14878C181A4199E187BB2F45
F6465F5186BF3C603D347C7DE7F9C6FBF61D619BC67D712BF7CEC27CE0B7ED8D
31A29D7F2D8A626FE8CF94DD353E88B786F963BB76469CF7937893E35122F5BB
02ECCC44A5DE3F200072E6CE16B421FE7092411047D178DDBAF6E0971324F724
68AA5AD6D13FFC99CD740748F9387D8A5E83CC8AD922B2A8BDECF188505442E4
DB6CA773A51FD274161A28F3724DA810A30D5E94AA1B6DD71F93F498F4E720FC
9819E6C6AE3A34049A9E45C6F9D662FC2E59673DEF563AECCABF724C09CEEB5F
A58215514B0FCD8B218F5D6F402974C4ABDB32658494C12E71749274D7BA7ECD
77D24FE42D1BEDA90BBECB8FDB73B909954466C7032C6FD3DE6ADE20EBA3FA90
A3087BAD0BC9C73264E946226627968FA8AD8EFA4530AD69A5639CE90611539E
E7C418A9DA70C894C59DB05CDC0BC8B313FE192599F5C1BE52AD65C5F78B048C
0028AFD3703EECA97FD68BE71AA73987D570CE2DDF953C6EC9791208181C883D
F60990A47DA285D767E651964E4398897A695F3BEFA23F1D0E9D0D05DF4C44D2
3C067C14FA4AC94B42E026CD4846D3276CEA9AED7E1958A2844855CCD9FA3B5F
EAD9FB2A1398CD00188333431902E82B66A2F95F230464AF01944BA2D55B6E01
4C8A068F6391E11082B1D40191FF42EF52D058ECBC2D37B7A8D05B1D00B08EEA
604E3D7B784BE985DC577101E8C0B884FF5107FC3AAFF583E1423D4F344C2CEF
37572E4BD892DA454AD647BD8F0BD6F297DCD3779B48A23BA00CA211D4684B72
AE4A9A69B75DCB34FEC581E5FD8846A45307AC3C6AC2ECAD8686137C75E49C91
A533B409E0D086629220B4256153F9849D5B7ED1DAC77D33CA607154E6B87413
30E5F766004E47F96B61BA0F88E99544E109918AB0BDCA95F770FBD661C1D267
7F77D4430A609D337439B474B241CF8A3B3A0DFD699A8218937CFC81E2FEDC87
AB035DEBBB7A127746837223316D9B95988E20E1E71BCC60DCB4F02D563A806F
B4EC884B26DCAA25E29F413C3847ED2F3A935DD9AC2B500B37969F6754D6506F
B87D745018E03861976101B7018BD702271DEE3CA37C242494FFCF3EB1D73CEE
23A92C79920EE5FA94A734A30DACA484EB4D0A7A3F7B3A279F3291925B9A3579
ED72125D6388D077A70A24BFCCE963F89BA1451F39C3A7752BD478B2CDA2344F
5A0C143F7D89F5A7906D76138611002FE7E9282E52853496FEA6D64E1FC582E7
7F6E21A71D0C319A466F69EC1ADA526F99362C7693B01E7ECF132C62BDF74FF9
B50292FCFC8615892C4304686401B0AAE619F7F850AF1BCC271581E1D3384770
90C7DB3C0591B53CBD3D2B96D7D3A6B3C25DE35B795BD2C5F093CCBAA801761F
D57C2E8D72B9E6D6A900BA44046812884F2FEFBBD39715F615647942D643E711
8C6FB8485C3B49DF8D5CB26E31B789628140F9EF7A02B92E75A597785BBED485
7290DC1571B1869EA93EA653EC384A8EFD58C7DE4938EF1CA41C4174A440F398
7FBFC0689BE4C0407E9819FE68FC2C4CB9A5A10E3A4E2B8A1F5584EB0A7E91A4
FCB9BCD2AD4F31BD967F940532E3CA8507FB01B0DC74484791223B7540F82459
F2E6B90131359A396EF818B1F1A690DFC246D5EFFC4B58E6CD01B59C73A14DBF
B287B7017F6AE0F36FF2823F1A1C7DD2F7D6535FD7B412EDCDDD5995A6E38C6A
E4740E8895169607D57C89956B526A664B28A2AC1B567E9D4B958FC9C413E5FD
F7E3F203BD2D3299DCFA139EC4C22A42A4E9F9365D91CEFA249A039485BFA319
E3CFB3D77B63E54344F80D589438BB8AA51657E0899C81F795A8F536C6DD08CA
7DE3558080F1363A04FABAF51E2CFE1755F3530F8334C211D603F86004C9D4A7
379D65FF52BE18F0CE103B2A5565A54C85367A7519E343CCA4D385848F038485
EE701DFE15086D6492464AAAB6F90DFFEE82FF494BC2F3EE7C2DFB92F6E09747
7F8C211986561A14100918F605CFE56DA8B9A95E2F71E964DFE4363E888C0521
8DCD8124F8E93E24F05AB2FA84A4AC44DEDAADA0D9E78E54D2667ADE6068986D
1E79CC4B2926D2A6FE7C406DC55C0F4705EBE271BDCBEBBFD886BCF39D09E40D
EF001C0EF439972F57369290DD3D9879EA5CC990927DA0EB4A84E947B055CF58
D72D9AC8286E6164E8172F7C511BEDC3CF77526FF59FFD601A6123A48DB52044
2C8AE579801B110C76FD7357B8B0659B1BCD7332409D8AFE456986F268ADBEE6
4EC4EA851AF4CB1A21CDE228B435C268C6BB20D3A288E01E2B9173557BD09FD1
2FFE41E5D245E820EC0195E99B6E47CBE1D39D16881E68D83CEA6CFFA363D804
FAA42013AFFAD1401B54E1E865F0999DFFED7C736E945F8453ABBCA099EAE8CE
A0074420C14DD642C3C97AC15E4864F7A7979AA05D395286E104DF0D1F6AB397
2215CAE0BD116522F39D52AE6939125512C9B6D17D206F7034D0EA4F1FB73476
024F8769BD6B29F05004B5D058DAB8192EE7F657BD8752A46D29C0EAC76E45EF
546CAE548825A0BCA6BF93B0B1373AF3E6E9932A5E64E2E417C6B64D84B19F7C
2D7C143E287B68A398196B0E2E20CEDB0A589446AB52F983AB01D8D326A099CD
02DFB0FC278B529C5B6D43B55A3F3ACADBAB75DAB92F8F73013AD9CCB7B29C95
3456EBCF09E56387D6C50B17ACD50C6D8989B3E8688D2A74E9C9F9A5A88092FE
18390F67BF16F9B4CB43B26AB9B8ECF42FA5581EC87D20E23B36D9B12A032418
B9321A056670EEA02CD7163AE058C6917D4D2261EF3B27F4F84A27603543947A
18D6996BEEBB7E1A4F11954E669DE14B907CAB448E39C195F64B37B48C6DAFB9
2FC1F21A4EC7894E2A0D724A45C12D56555F98CAED6F9AC20EF569E656F19E72
4FC39C8465084F358E7E6CEC1C94E4CFC3000F952E0666A9E065909226DE954C
56B5DFBE90C804C68A75B2C92CB8EA096C4034B5A2C6FEA57D50A9ECF4529BF9
07C094422486B57EEA86ED95F3811AD256DFFE665809102BA715F050BA6AB6A3
618EA101BDBEBE827D1D060322B22672F4FDED7F2A8425B8CA67E41DA48E3E9A
B280F49EFE8B0B55AD39D3BDE3E416E13D6B23272517D28E9E093AE3C9023C91
F1F66DE67304C8151ECB8BAA2419D4B6FAD97354D8BE2DC7029117D29FF0A396
A4A4AB4BB2CEC3DDC69C35F62A539E5B69070B528273A685278C5988DB3A1150
06206B00C684371EBCE5B655FD47D19666640C773D66FF93B9FED0372D8DF634
81255FB07C915411AFA0657C2537C4EFAE92A0EC0ABD9DC217A467694AF23238
C20E595662846464B25687240B575A6CBEEF06521A3DB945B03C08897AF9EDCA
74EAA39D08BC61C5D58A8D0042F7B2320F6AD8E6CFB0D2666679C13A65E1D687
2B187A432318C2C88A955A6054DC9013584E066CCC93A589BEFA8C838BC00D34
9557D51B7B124C64E88902FDBCC386067EACE9D30FD01A920F287B0681169A88
E0C8C0AEE0CF2FD3EC6A3ECE8816AA5C60500DA5759D88CA155549A5E7A942DB
E072F2BD0DCF8346DE27FA98D21C0F6CC26DF3F33BEE98F4148B65F4AD87FA59
FA1862E4277A7A1D7310A056B151C15F895BCF076E4B6F85A94D6216240AE68B
FDC01EF19C34C9A6885403D18C17AE5C2620A5B9DC9E20AE49D3FE7B47F0B4C5
BE36297E9DA5DB6CB73AB16360A1E8B82FFEAEBA6EDEC5FED81176BA98D9A76F
99BC3B1CC6D379B05809BB83D175B1DA90C2478DDC362D3AF00AC044A759C633
970514118193C5E291E4B65349ED37FA454ECC45F7763C6D8F71BEB6CC5282B5
2CE0CB5F989871CCE60042E3E8AE2DDB34FB454F1FD31CFE83412B07E613C479
8B2BB2DB9D168701DEC925484149A74D1489DFD974588112D4CB630389A4F601
F284F25AB5B31EB70F31F472166B18FF30E1425EE578CF0308A1A1DBE19DFD88
B3993CAB581A7E340178D6574F68CF598084DFFCBAADFE1AF8356BCEEEBDF060
5A719ED974261E5CE6827A0ECC31B8BDD49938EB436641D9980348CCBDE94E7B
47ECE15B865346D956FA91D2C2028FD1434DE4C67955EDE53044811EEA8D75D9
A93A375C05DA2A5F37EE7475CE269618C727B596C3C119E92E2623108971A2C5
CB23494F45B1A378C2334376FB34610D1A48030D1691AB117144FFE2B5441595
4F79EC983D8DF840A922145C3A7D01579D8C6A3376B918772D7F77F992B88411
85FADE184AF8C02A0F597E6E21FA55672F22685B418038553D70B02DA2F49827
CCF0F39BE0C94CAF9E0295C87A2A9B0044B050747E7D512F9C67296CB735C412
0A0AB39595658AB429EEF5356F7CCD11E4F2FDF3675600FBBA1AB7FCA5E3B9A0
C63FADBAFA0F37397279F2A7E1CAFA99AFFE71134457105F3B8D3B7E33F4A6CA
A538F7F0251D3A910DF8505ACECBB6F919ACEC8D5987FFE0D309240230221CC5
8CBAACA6B20499A21AF248A1245E0DF36E1F985DD607832F8A6922F3A7991E8A
856D787BEACA71A556DBF48CA2635DD7C68D01DA1DFE6F393688DF532944415E
2C941F291BE9137089355D32757F3679DBD3A0ADDFF4C3ECD7CC083D70252227
836371FF8383825CE47C78E253AB62BB381907EE377CB8DBD44016C22C0515BF
6AE3921693A7B12C5083F0C991CCB5EED232617C65280CA2AA2A7399918BEF00
43812F3D71789892873437395900A64CB18DD6F7DFE62B1720EFD4515E01048B
88AA8FA5A38A2A7BED7CE91AB3830B682067181282DDA88B0282F50FD1EB2568
CC35D8A54FFA0388348BC74FCC54A74F4E5D1F69A9FA4867386F2284702C5F6F
255A2EAE18188849E708A4E69F2C5A3E08AAD4A9BBC69B3954E56C56A2CB0297
E6C99E604FFF638C9DB5F9E796E83B2378F20710019695188C430E6213CBA49C
02D66976363E157B01E8B11BB02FB00762A522A3DF2BD022F65C4B3CE2A37EBB
06700474F4A4F93E85707759EA2AB270F38FD2923A2BA43BA9064D59C171AE87
BB22E477D31D8FFFC3C6838AC1204F34A6A16569177D6B1C7CE672895F48BBD2
8B37BD51EAC7264D45CD2BB8B613752DF4009B6E24A3E27A49CE8CE993FF1F35
20F40D36C8A0596588E7B23653E0063E0C15FDB7D763FCFC95483BB2A6D4FCBC
EF3494BEF638403F3559D63183D4AB1457A46E6D8A3D44DD192024F7346872E8
4795059D0A12F0E408C339D359F2E8A6DC5EB9B6D9D3B4CFF4CD3FCB4806AEDD
EB4B4B37C5C1538E75C144D7ADBA18820FFFF179F9B4ECFD4473683CE752445A
56F3C953E0080C2F6E390C5BDBB970F1EA2861AE50704AD81C1F42AFA8C29978
C09071FDCDC0F19C8D0285CBCE07513C22253B9753998A613C9D20196C165955
42D8F32E962D41213E6B67A64A1D593C3FB192661D2DD29EF941C0FFE601698F
DCED7F5E2D18AE3897CF65C8389617F534EC699BB12C33F63E57EABDD6EA2816
A459C8B82D140344608E6AA9578B201423440294FF5CC9FE8D9AD16D79F0AA2A
F395D5F42E79EF0780C9E7E19305AA321ACC2A527E64AB00A99D23ED548D6A26
86EF3312C25CEE3BD6115EC9269C39CAEE0CE27C52EC292E58198DB5C232E966
DE8831BAAFFF10247A3A786D1F5B095D079887B8A3EEDF3956FB00FA1C28411B
272A07ADB54E71E3E20D524E43B9781CF8824ED465A01EE495EFA400C9ECCC91
7450F15E674FB96267CD8AEB11ABD8FD50423F2913012DC4FBDDDE9D108C42B3
4CF410EDCAC303AC954222B4F6D27C63D287B55C070BC7250F889152DB29A99B
4DBC1A7E46F5356EC92FA9101102BAEEAE5C1875DBE42C23E120E3F7CDF9C65F
94E887C1E8E92C01FE6E9CAFF32E3626ADBEBDC37B3AFBB141634F0D84EB6821
FC9B0C4B538670F101DD501B215E0C207067F1E695951C726032A58DB0CB9A5F
96C622B04FCDDB403682281BE49F96293F7C693055397AFD4170BE71E7E7206A
0BA0485658A0090EC7CE0685571EE55F8EEFDB979558F1443063B64381A8A2C5
84A4146CD067C922E0D14DD3B1393B00627EA9EC1AB2A7AABC07EF82E5AABD47
0633B8D9D473FA145B8325EC1DE6B91732A86738FC4C2E7A3A4438D1D16BC516
53FAA26E70906D3F56E6CF780B37CE39F605793D904FA4650A8870F033A419E8
91E8C5AD303FF87050363CCD7CBBEFE7C0FEDBC8748EB0D26D527A7665DBD5CF
D0399338CB01339414DBD893D279F20F49DC8C5F2C43537EDC6CF444659722E7
26F3DCBB29F24D88E90FABA5076969F99A82B0E7315C9285436E5868E756EFA2
6237F1F33881825A51F0DBCAF910A75A1ABE13802EBC5EF7908D61DC74206991
AAECB93C7FFF2F16174606AB2770299A4EAE741048F482682DD0DCB6A0F346F5
DDB0BD589A54893931D3FB32989A685F4ABD904D7018A00F1D9803BA6100F69E
4FF750E76EE86045491F796D8AF861E9ECCE5CC5753CE9F4B213B3AAD85762FC
03918F97C4874862052110A76F4B9CB77C85176D8232A6CFB4F065BC852A80B5
23F1788D784309B2A2880779DAFB8FDF8EB957A0E053C8715538935DDBAEE926
CDDB7B9EF439F0BE0D97722802E13488311FC4ECE1293A20998AB62C411C854A
F2EF48FB3A28CB446A04F299294537274E5102564EE586F97C1FDE8E7BCE0164
5F1AA691490C32785858538FB9793E0F61F648EF2A0C6BAE5F4F2DE812CF0A27
F44E3AA88DE45F8F70D60AEE97CF2A381A51DD43C6B44363FDCF69CD663592BF
1214E5E7F895AF65BA0898D5292037CB52152485A610A2A4CFA09C579CD2E006
4E5832E860F937F033783A44232196BE4A446C77F005D897D944251600E7A6B3
04DD76E0899149EC2E1DA96256A9C8141D8B7C8067797C0CE920DA8C453DFEC1
0FF237E38BC8E19B81502A19E0BD113AFBC2036AD8693B9120BCC420302FC539
68133AC8D20F500250A1BEC1F1A6A1A5A5BFB54A1BE8C704194D72A799F252A7
49EAB7C6F6D76DD96C7795933CB7F3E7C1A598AF5B22527EFA589455B7C07547
E3BAAA4AA7CD8A2387E060A66C2C3B5E16FDACB9A7F68828EFA0F74BA87F75B6
B2ABB870F0D7557BD333B9642BF675C978FCA80A7ACEE65366520D713D1D90DD
8D9C53C9C4BDD0F3E0EAC53CFA25ED64D56A52BB620D29153A1A52CA65303AB4
20F2B3B99DFB0390AF00C19FAB844F6F01AAE2BADB3C2BF6C594D6FC7B8B746C
4B214A485F9CE57642F42A032DC416E323C2C363E3D499F3DC7411DCE3D20E2E
9F67049766B519B6B0A216CECD233B141C8302FD0F5B244B373AD47A4051F998
5A4C77BD0AEBAC90BB3BF0C993A46166786826CFB01F22A944EF21FAA6C12D3B
AC92E531CBFA9456A104A3ED4DED4B0752327FAABA1B604C266E68D2A3871B0F
32F6D281F0F9C45F198EAA6ED04FDC0BC171648126F89B38719649F5B4E0F99C
4BEBE3D760F96D4EE91B13459100D5DEE867A42E7BEB319864C32065C6A7C5DF
A1F2E04EE2DED13B10E73418D62ED96D2BC402FB9895F2FCAD6181F82F434EDB
2A5EC3455DB3B914A0C7743B56A92453EFD2A56C19094AA454350CB8CB8E904E
7535440A065493480FDA1C54ACC8B6B654F55A192D587A2826DDC53126346B09
FC6DDB12C692E6D986BA910BAE379E30804F50C2DF2870A2BD30686307842337
CD1F9695491BBBDF271B5345C44914B7FE0AF47722E48B590F4D9D412F7DCF5E
CC838773EC5CF4BE79651FE79FC065EC14246AE06156B8DFF94C2489C9FBBC31
65C34863C9ED6C46D85A5EAD76FEA95129D12E4108FB815ED1D54A3661DACC54
5C7C06D6F2882D6ED63D5B8B42C34172C5F5B536F44B4F3452249DA1421D7004
7BA88646BAA9D6F0E16636DA27AB6AA16C6617479A988692F0931B645389DD9E
EFA606C7C16504FCC2FA5A8773FAF9ABED1306F7C5D34E2B7D5A9E4FF57797C0
45AB58388D6060D8095361657973BEE789B1578361D865980B5AA8FC9928E2BA
5F7457691AD5BAB068DB87335C7478C2588CE112A6D2ABD436C313DFECFF9F90
2C6A17DB801DE4EBC1B83B5454E4C35C09E1D2EFE9ECD734A31DBFEA14AB6379
D8DA03783632834BC136E18F95F314391B6552F78AB0AE233DF00372AE1FC2CD
0DDEB07C800FD7E36CD3749C4AB08A8DE3A9AA88107883193F280D2C4D9B4D86
5A9B1F05A63A2589A4711E28698C37F1DF9A0903B2FE9462811FB9A9B4274537
274E5102564EE586F97C1FDE8E7BCE01645CF06EC7B61BC71CB86A66D2262E4D
10F3FF50620AB8D4DFE11DD6435FC6A7C2B91B672FA23D9F875C001E76E909B6
6E44EB0771512E7D7086371BE3A8E4186D7E9616692FFBF9287B75346C3864B9
9A0C16F468BE1E3146E48982192A73243F324E91B0424EE530FAB01CB47BCDCA
75ED4273E07B8DF4BA5D60BD978A4104ED1ED365E745994788BCE1FD1B1BF12F
B534F7899E4912EFE1B93D0946C306AC2ACCAA6366E6F24A603AC3E2B599C47D
E9CB9D8BBB745EB935B1369349F751A65279AAB1FBCD29DF3202B5E0E8706A72
A69CACFE93147FD30EF2AA58DA322B6C54773FF3E432D45103C75A2A0537B9FC
B7B78BDBE5D1741193D80A5D6A6D2E1E26746A94A779EE401A85A400F6CA058E
D16528D28E50E37BBEB1D1554503645EF7D8F82EBA11D53BEB168DAA474049FA
840261F7A8ABEC3A504521FAB3A35463DCC628BED7B28B217E936D4F9DBA1C6E
0A74481B0B3B5885EF51C89659D8ABB19FAD92A429E064DBA9F0458FE35CA018
91DE0DCDDF2638DD95A3F250E805C5A55E36BCFC73585F0C578B53C31C392774
0F94414FE18030F79C658F753E052E06897C5964B74BEA0D5E6C596E8FCA1144
3552C4912617C174C738B507D364410722F6D160A04EBCC9B06A2E3F4E207AA3
61368DA447506ABCC3C649EE21863E4C426DE458114454F0DF8E3F4824B95459
4A1F97194B19FA8DADD21642390AEBA0839A4BEF765CFF4C6A36BE1591F76166
981009771AD7721F9C8776BBA7DFFC2BB9F1575D5F79B5C042F2C5A61BAD8A19
B416698F37E82477227E4C7449D74E1DD795E1E522771D7FF4A99C62B6D732AE
42FB8817A29A339F99A0BE9FC33A702D808AAB91FD490A1170B909954466C703
2C6FD3DE6ADE20EBA3FA90A30D7FEE0E3F9FE749AB039FA29165B50ADA66B10A
8B41A78F168514DE43D9EA8AC68B343772084D45B94B8234269F1FD518A5849C
B4888A353080A6446C0D86A6F09F191A17E3F51F5EF7039DD184011B7B7F6505
A11E4649F0D503882EA96A4BC7AAAF9EABD6BB272B4DDAC2A26AFA63810E9342
674F814BAE3BBDFFCCAA3EFA2BF0762C955697300841AF0F3A67E1E6093BE6DC
B400BDF8C5B29A71916D6F2508D429C62585777EB9E6E9DFCA889F03CA3D43DD
5903762540856C9581EE6076F3482F71DC669C1A910B6EF07098D4E97FEBA8C6
50810E23D6351C7E61D40564CE8AC122B16BF9132830C8F4EA9DED9CA2889D59
6B4AA1598B436C0190DB0806D6AB666B48CEBE79971ACFCCBD8C1CF29C5F0DA0
AD053279316D2C62A3F6B8839FC3184140CC21F37FF38C44D2402846E7BBD650
78DF79B28E84FFF5E83A233E2653BA602C9EAE510DD75927D1EB278CCFD57B53
3BE50833ED0A165FCAAF5D02D4339FC2D7ADBEB8CD07884F403ECD84F80F0BDD
AC3DD65B4D7682D1A0AE125DF60CFF05C7454B82F991CDACAEE4206A96B530E0
992F3E91EAFB51032C05E7D4251081B5FDE7BF52ABEE0CA1C4BB8E9B89B65A3E
416FDA61F76F3B0EDB2BA4B97A09D1EE0CB37A713AE355662EB52964096A39E6
210AC25E07669C5BB03EFD1554FB81028CC3569268606D6A522632D872DCE712
646297F9DBB85FCE08F8BEBA84F509932A5679B1CC6402C7C3E99B4D4E924084
B345CC06DBE98FE9E52BDF3CF8FEC118F0FB704829157208E3B37B9CE3F1D0C6
16D951BA702DBBFC298105F4C0C7A0C8632D335E169B0EF7A62DE9A66C36A1A1
D29C3C72EDED884CA9321BDC6EE944C5EE7644A666A11C6F8B4D4D32F2F7C002
945F2928A218DA7B66F9885E50D566E0D1D8FE56392710816D3FA216B10FA37F
FB0C176F77161CB6F2E8C94663789D1A94C3A655B9095640287C7BE851B7FB21
C1A563AF7CCBCC136AE87B81C780B0CE60DD84203F3BDF752E73263248327955
3652820FF0C888F976BE53A8E2F5D224FEFC2DEF84ECFA903E19CF0145CBCA74
5791F2A7410DDABB73F0767894474D840165239ADB5D3E324BD820BC6449A228
E70E9C8B64A36C95FBFAC89720BE0C02B78E9D05CD846EBD47D789DBA31BDA04
37225E8EA1FC5CA55634C938CBAC138CDE45FFD3B0D787379E79F168B55CBECA
8C6249F0739922B70F3A587AC9523706FAB55BDEF2D9A3B50D9F5293BC3FCCCC
0DC5B4F3268A8831F3391A7B2A17E1A8397AD1DB9622E46D3E61F8C996A63AA3
D616B447B0D88B5333661EFFA358EE448BBB24E1B44CE0BB474DFA01B0F4CB63
A3A5C2C736CBF9D48F60E7E170697D0D5D7C3D570CBC46E2F49FC971F94007E7
CCFE301062DB793BF0C98AE337A18C531EBE04D392E4419967E0D5695B8E2F53
EEAADBEE2B98E0C1D30AF2F4B677D1DEAB83F49CF037D31588FE982C7C889063
6CDEFDED3CA00B86C57DEF55FFB3242E07884EE0A5128AE2D8D5A8649CDEFA8D
0F98E2F46B81F6AE1E45DCC7E785EB0D360B9CD0D9B84426F5D95E2DE91ABF81
C8AC2B28B098DB90E754F6CB19C6F31ED0BB94C1A8D3A0DED696A7EA5CEE3FE4
92C02A138CCE9095DD704764914593BB144BBB0F0AE0879CE48630691A34FAEA
F8703942158003E586C24BEFDB1660A6DA6C6F216560A52D57507C8F16BC6DA6
89E34C8CA29571BAD0AF5EE41814285EDEC18B272C7113B1118FD1A28471E53F
170E712ED46D21B92CAEDA580F555C164BB3ABB2DBF3C31130737273FFB6429F
1A3DE552BDD61FF284641674D8D53D8DD0F4A812B51D773ACCDF91E46DC721C0
5C070790C12668D96C827D82DC4F14637E71EB29B666332CC7D54C426D3E5207
04A5B0FD809F2C02709DE6FECF13720D3C291A3211D91902B1B47F21FA1BEBF9
169AED1ADE0A08009D2CEBBD8EA7BA2E9F8B8FE40033F99F0E341D55CFC940B8
8FA9C09F411132EC6D54CABB0B333164AE6602C376F6D2C9A086DBADB8872427
39F5DA5A9BB68CEAF2FB34EF087320F134579D9E18D1E0A10BCC9B5CB415F1EC
1B57DDF194B61D4473594BC46DCA814C70D72F0059E35DFEF5A8F444C41D300E
540D53723DE65F589F8A99057B450A38D203F15211DA39F2E97C0490B34CEBB5
FD0F236A17293D2A720C72FC5983C22F49DDF6AE7EEFF90937C6FB7A0C27C56B
44B37C97E610E1235D485E40A6FD2DE5B292D97D0335BFC690BCDC1C24C42D74
A4D2FBF20E45EBA5D846EF69573C5C757A1F12F5D7738DC15185D782DC6922B3
A344DCEF584652EDF463FACB892CD8541D4066FFB88BA2EE4ED4246CA0155C30
F1D7765504E4DA6CC0CBDF15FE40AA423055761A67AA5CA5709C80980C93D33A
CF90ACEF63A98362133AF921B0B745459A36D8F643413CD4B4125AEE2C4A30C9
35BF858D4DC7D81815E0260D9F69D2E42819E144C777231C4E62D4FB5DBC1103
123F6B206E78E597B6C42ED148806EACC336165402863E27C1A4EA602F4C370C
2628CB2F86C215CE71B98086E3722B28571052662AE666F7236174A08CE19229
209F81567747542BD1857B6F5060D1BC78D8B47E300E3F5F6B8B75060C761A63
AC861E5E7B6492D89200DDB63772D73C36E0280F8ACDDBDE5CD4F65E5B06F644
205E11D810C3394BB359F98A79F25C60A60587BBBAC38A2A054B57FED270E968
6C074CDB097FE7ECB41E01EA99EE04EBE92CB0E8CFAC3F0679CB4C01EBD025BF
2C8521AB6B8FC85ABE689B800B8365F09F8ADF70919966FBDE2B55A8B0031DE4
55BEB83DF8971CCC330F6B9F49A908F0C231A396B14B2C655BE5952539F63ED3
33D7CAFB950DF5FD1CFDF348B8A1F08379922A63735D6DCDF7F981B9F838C135
2A05CEF380FE489886299F77FBD3B08A4B47513E1F8CDC2763558C93AC71A4C6
A30C6D52389921BF84B06A7F9D4ACC50C374D88734FBD497DC54F3D710DFEBA7
081967DDE35D22FA28478ECA85072A4F8584C0C56BC9B7259086F8350F7909F7
92DD39B717578DE7052692B762F300AC38430E55C912A759F1CB5C37DA0BF1FD
9F6A923E6FA1D906ECA7D35A79B6D6111A858237E30DB8618BB04B765781A7EA
A080503F9514C7A13B9CA089F7320D1B9BA214E43E83C1FCBECD5732BDE82BF3
0706C80B42BB37178508EB5EB02F088194A2CF0FC2C17634E2F501BDAD29F6A0
B4858DC52C5A8A9244C27A4589A0257051C54716D2440C2CF4262663EA22132A
62886E7D1782813C55CBDBECE69835137D4D76F9F998377254B981CAE483B8C9
A80BADAAEC8F1602CA4B0E2A9887E140801399E5D9D2687A4FE6FDEFE5BF3213
D02AAEF512224950615DA2039D4EB3B18C87BC21D8078251589F8A99057B450A
38D203F15211DA39F2E97C0494F35146975C6E920D8B6D8B559E66DF370A0216
FE0E91EF043AFA55C6AB9E1895E036BA65DE15BF69090B70D6FB95ABAD9978D9
51090105823AC61EE692C31077A94AB96083B0267E52474998E3E6319EBAB3D1
D4F44B2433E7A5267D952A379B660FE3A9671DD13E01433F2F6A42C11AC2EFB4
24F73D1CB7518F207500359B651D485D7105BB2D09F2A0667A4E0B5D6BC54396
22D0710C560668A4252F5D38820C6950A8B323B1B8648E3AFEB827697D3D6220
2487944A1FC201C6C5263EDD2A7CC63B5B7318AD4E88426DC433391AB62250D7
C4C702A0D45D4311C372F63EE8B1561650B6F11F7028F186EC532EAF53C9DCD0
C3AD5E7844F40FD2CFF0CF5929900BC0C52AAB18CA613F7B554D09121992BE7E
AB28DA304E5F9B1587362448935E2C28DBC443E06E13690F831AC007A75C10C3
5A95B63056A0ED3DDED1C8764477F6328B6D052A4A7822FB23E5DFCD5FF7BF21
EE316AEDA07CC4A99A8102CE2853EBF17B2BFA2E5CAAA03C4BD9808AD0EA64FA
142CF8E49FF59D0132EBA0E54724514A96DCF812CB74EB14F8D958DCCD2755B5
07A75650E5BAACC776F0BC37736BB7988B5C5D0B62A5AE1A81612C6E9BC99AA1
AFA733E4BE2D4FF03DC811A8503601BF61702F87176A0D72ADC1049F1BA37779
AFC8C0315E0F3591E91804815203BED8972A2E4B94BDB2FC07702E1C1BC9ED69
D045E949E25F10F2F48C6D08A7F95F6BFF0CD961E8CEA1EF8D26E4FCB55C6941
8D7A4DCEF51473A539E008FF2FD416DC8EF9BB6EAC27AC7A411BAB23A8B98A51
54DB44D5A187F806B5D7B12FE096BD13F4515A4EC494F9FBAEAAC3B3A5CC1C97
44253567A7830362372E59F5DDB6B2CE6E15F0C7670274541DB212A8520DB33E
41F7C2FCCD16E95C9143AF929A15D06D5FC36307D8A2529ADC54C2FB1F6353EB
DDC027D3925BD32D89219A71D28AE54C4E5A1318F12E614AE73E51EF48603F40
53F16C27E9CF94103AC36D2E1E53C13785F134CDC2B76DF755B976A14DA18413
C9221F730F4CE2BECA91F339C38BCC0E8A7BBF8E4801DA35056CA00B0CEED005
0C709C5F3BE56E06B3A2480DA075AA929C4C36BF112678869F9D1F7AE01F15B2
3E59C215E93A3F5018417C37FFED36B6387112A31EDCCA00299CF0857234BFC5
A88A53C478496A3B19D0573BAC967DB05685E1E2031A7EA3B7A971E2708AEA94
605EF6283222A4FE45E411657A64143555622793CAB8E1FEBC2FF6ECCABC763F
F7C995738B082B32F823112D7A8432CA3BC75E4CA0C1DCBB6CD5E7C8C134677C
18B1B44DBB0703BEFEDB3681A2B60906330212907A7A380AB31CEA643513D898
45184EB5F9852A13A2C0741EBD0A48051A8AA4DE3EBFC3F6E2EC78B63B17C343
2DA80525182B0BAC8AB381658DF10814D8C2A0F73A040D2009AAA8F44A6BB4A3
4F1C35114EBAC0B0F263ACE997E858124AD43CED97BCA4105BE9609DE67972ED
D1DB9D5C392478A32E11CECAEAFB7D4C6127C4A26EAC47FA908E89883F4B3AA0
690A4194719604D655F83392CE82971B9AA3E5470914683E6EB80D0A469D302B
99AEAB36694D2F8AE3A1C063B64CC59A66D8B73CC953D2598485203121E9C7EB
2BC5CD3AB101475BB0BC91B3A3CED4817FF148E58E47B971167B69EB88F05618
4FBE3AB791E28CB54B3765589ABDE795E40A62C9EAC215ED0EEB650262CCC5BA
D17B26122EEAD0BCCA6315D5D70AC07AC571FE97F0350984573F64AF5AA364DD
E7579E59AB8F63B4E0D1C4D5047BDB435F27105260CF2CDAEEEFEBD12888FF26
D3263B07E8CA75CCEE298E96A59755370E746320CAAA9DCD5DC0DADB7CCF14E0
EA440A74DBD51ABBEE7629C98D586F5F930BE96B57C6BD029C1FD1E5EC6983AC
6A3611A50465F747B5D502D625A371A5F803DC9543E5330062A9E9D610A4B7E3
5A1FC8B7FEAB73C6F92F56558DCEDDDD5F86DBCD07AF86AB162929462FBA8B82
69FCCF60A488AA8BD6B6A928D0F96B2F1290E845144DEBCF15B83C7F0DD201D7
4FDF7F448889F2CC1668FFA0AD62A14289BFE2575672E1310821155B82405190
00CBA3B7FBF5919A2893BAD39B99FEC7FDB24FFD726EA1BF025C30CE4E498AFD
FEE909382EF0E686A3BEBF3DD5FA707AD291C4F0BECF14318F0C968433143A19
DAC006CE4EB8D5F3CA635184ADA4CCB77AAD095647EB85042C6E78DFA40EF09A
72B1959517A0630A94699E2A1BD96B7ED397EF45C542582B6F56F890EC5EE8DD
9D075383D04A13A060C09502E182EAB0E7D0D01ABC1E310F7D2A2280C56AB67C
7BB260937BC426C835D610D7A203D903D820554F2930E596BD6CB249A05F229C
DC2C7B3F4693DBD40F4EAE895535B776F6A58C2D632060FEF80336C9891058D0
45FA7B95DE5A47A7CAEF9406DA16A1BD6B4FC7D89648E34D0C2E929AEF3C8034
A681E5C185DB2E6099F26D59596C63BCB936321589906AB24214F3C046A1FFA9
25A1F0BCE47E0B9CBF4A0605D4FEDA3366AC5994990DB55D0FBEE47DE21300E0
86B6B72A4A6C75B51E4E92B09BA26AFBBBA1E86D352FF8A9BC757F9DD3565AC9
C0859E5E8D63E7A7D6CEBA67D8A83EAFCF490DB7185AD9914DF5CB87A377ADBF
202718B9E47B1DB784435B7ED3837C6C492D6B462BC7BE6E9ED093C8B4A7B752
09AA41E1C03396FF5DB218AE2CA8EE74F547200678D6AA9628117E464AEAB154
DFC2C08F8C1098BF71196B775C4ABA7E868A1157850F48A5E0F299DD9078866A
C4AC771A770614994238F3B603EA8489EF99E770EED78A968F1DCDF75F023291
1EF18186172CA4175B9C54145E5B330EE17B769E60BB4E038223B7A6E419ABFC
5589937753F7877838F2D5B1F79DBE83B6B7836E42C2E1AE0093867B053D339D
E411FC4B41FA37916D6925540323301C44136C44A2AC31D49CE3175A99CA26F4
D706A98E60DA7C2D6E21A4601099749B4D140304D056EE19F0646E6F3717C146
87B4D7B85771D39388CBEDBAB8FCD55900D5F58F37B8BF0B208746DB46E7EEB9
94EE7043D43F35EAEA8A72EDBC9A633CCCEA810BDD121274D492B103E77B80A9
643541BFA570DFD8F4C41F743CAB40A330D19EC06E05F9BEF1443C55E60FB949
15A5445F0B5E13B61A7D4126CD6A528BFC3FE53F15ABFF765192B6A29EBC2AAB
129933A84172836F7EFB4DEE53DA4922C8661BE65734E8A75770DE1368D2F206
63BC22AEBB8393C4BA4185765E02D5A186A0D5AF2D15E33E6F6A2701AF81BD10
AB44439173D67A15C059E6A89CAA27721625093B0548600067355C06F644205E
11D810C3394BB359F98A79F25C60A9965FA66AAB8B2568DA5051F0BDA8CE6C8B
DDB68BEA346D846A2397BA520E686CAE8E9320DEF5363899F97A99492A50FED5
E82F60EF74D2DC69A76032DF5CFADB42DD62DCD91816A84B5A0E61B4A96FAE74
39D74DC29EBEA61ACD1767A472830FDBEF494B64F6CE0342AD2CFE207C720243
B692C3529814C334576810697A6DECC9F689C433F510D626A9235C76FC301089
5BE4AFF551597F0B12BD571BEE28D7319ABCDFA4A21B5DE536B34845B32A39D6
C5AE9E13D35F87E6E91140E84EA48A09618DEEDE011943673C2E7442DB7B4B32
6CB1ABCCD61754F54A0F70187FE95EA2F774F5881E3AF035A96CD83831472E38
74EA9FE8F5CF49F3E712EC33B1DCEBC465D8997EB80E97D85D5F8DD5FC1640FC
B2723544574BE6FE1505687BCA1C093FC4681906BD573C7A473787910AC263CA
C0EACB251090DD74D635520606A6BC978B65CCB6E8BCFD8FD2681FFFD4E00966
A059B1636E4BAECFB2FD03534A1D5C8D9F34BA93BE68F19CDECAD67FBAA485F1
3A9F22CD672E245A91B895E0183959C50CC0F6715A8F315DCE323BD90CC3894A
C04E2063F82561A725F3FBDFBFF6BBEA548847816D253298A1B514D379923D53
4C25D1751C2C54C602D5F2259223F792A16E048039DC3A1FEB3575F40582EBFF
8FF71CA7CAFB622B5DB01C4F3FE330202D64F17F254067976C1533D0B20C1B44
E06C1488183B189818822E6CD05364156D09958EED7B3A4CF70288F9F9D12BBE
A1093E7171A1FEEEFDF0CF5FD3B25F9D8E536897E51A5682E63A28E493A7D8A4
9BFDCBD404B0455E56132B1C562043B2BF7A5B546B3BC263484034C162B1F3B5
40DD2D1A5E1CCAB6AA63021BC5490FF509949728F4E574FFD24BA6564A4C00F1
AA76B09D7C974FC01C509A59F3447A2465CF19ED25EDC12A8098FDACAAE0A0FA
B4D26F25BAF167E6CFBDF1F22A45D966C86D1C6405A8B8D4E6C9C822C8A03E65
9DD639819C99723EB65703509D3C7381D84E984110085B9588B9482D61F8B21D
1149B7887C59A4F4DD292B092866311EFA965724AC8F1ABF62A78E43E19FC0B9
6EF81BD7CD9FE09EFE5B823027382DF51E6404445F241CEE52D880DAC2F5F8D6
84122CA9E5CB8BCFCE030340902C283DBA744216FB1097A32CC4F296F0B7D515
623E27F5FE0CC4179128C6404C8D2DC3CA95CA1F5AD4E0DD33149D67C65A4B9F
BB4001FC27403FC11086C8CD30AD3837FDA8F7DE76193499D98C61E79D800111
E6E4D92A5FC32F5B67010013B7067257ED8CA0130C59597441AFEAEBCE3BD929
FE21105184A6157FFE762F0AD9C12D1AFA41ADCFAE666A5009D6D322D575113E
33B1FDB38BA3A6B9A52A9E14B6C788A2D7B2A1A2A3B3F3F99AE41AF6FBFED04A
783C48F29B7F76BCD0607D5640C0C4B3AEA2755AB7CAE9F9D30553422E968AB8
931F13253E525F09B56B266F46EE06F5667ECBA91EC7123C2034106C4C8E1185
FB185820B95BD88E29F9C3ED60B95BFCF4B9B977560282FB5CB7D4B6E22494
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE5020D74C7714FF08F5AE00F69DBED351708B1C760171CE5
5D0FE3BC5F6769FB19C7951CD5DCA774B841330A2C8CF59CF458230A1642F956
21D23843C4332F05F5AF14E70EF052F02F7E3F51D6E7D68A4FED8D2C4A733AA3
8973CF4CDF768C31E35C395C3BF67A79F8B1AC292F38AB2EF22A87A8ADBE2C55
747D7AF3101C5F1A2A1BF6C0E245AC583FE784CD69B918457FC63ACB5FA24E41
CAE39AA9386736476F5C0BD3D01ACFCABB35BD346B884B97EB5F467C93A2FC7F
82A0B3682C1D7B0CAE0165D6FE43CBD8FA5C85EDCD122FAC36F59FDA7CC4EFE6
1F9F8E88832737186037F9E5AB161B8A2090F5569529861FAEFDC91E823E0A0E
A92E7F1118BCF413BD355CD844D0F88C47B267EAFA1585B4ABAAAB9BF885D233
DE4656E4CCC1AC1A5762BE48F5FA88A0020AF17A438014B5902A55EE220152C9
0348CF590A07761415D2F53A866C95D4A6848E2BB7970D176670F90765843635
9C2461BEA57F9CC512BDC51EF25496B2C2253AE85AB38889B26761BA509C7F63
8C6CBC4BBDEA74FD3B43A178C86F9A97423815F5FA2C09BA590B8371D5B7758A
43F98F4DC4792308CDFE2779CA6F20ACEF23FD8FC11F483C0CDAFE837D984A76
1286C4DC5088F5DC4B8D59F781ED48736CDB2D0B9B51340F6218CDD622544552
9BAB6B88481D111091C2CAE5E19903BE5F2C90E79E2469EFE314329B4653D49A
0C4443075770A918BF41736B320F9653C19886C022E40DB4E36B72E592BD406F
596D415478975E25D1E9A8DBCCD50E0F27E925AE25105C74A97A28AB3241B091
503FE2B0DB2B950C453DF3EFFA7A223A8615C973D1AD43A9C5769C335FA10DD2
2A9C8D64ADFE5C705F27440CF292DE3F9A8D6890F4E2E9F07C1584D565DE2743
BEF51412CB09BAC78D9A9047736F25BC8EB7463BCD91C90087E61EC4A1CB5668
D0E7232AE1A101DBD496D05364F03C2AE630E62B71F11EE71DCB66851184B5AD
F4BE0F2EB3E2C17B418F22DF99BF29C395BCDAEAF404902A8A205F3EA1C6686D
39DE055338185FCAF42657DB8DC626F99579B8234D070A0CAF200233B6B55DA7
B3FA04982BC4884549D5EA5028EA5C8B36C05AEED4A2AABF4A24B0E293C9649D
7A00A3CFE2A3178B01FC33395575DEC7270FD3FDEB0C92DDEC50BF40106F7F56
C327835FD377E00C7DBDBCC6567917B77BA40CAF7B0990D63FE44CC9BE0E0E8B
13C358BCC8B74942D3705A29A738EECDACA9C371B7F752D25DDE3C916133971C
CF0C57B43B23DEE8E9FD942B5BEA92B48776FABF604FD19E465DF4482B980684
76B55C104290FE88F97EEA853FB6CA561AA28873A858E28AED28EF7254B065D0
BF924A0518D96400EF88321DCE74938DAFA9C0CF2250827B6620B476C32A53A2
F1C6F7296B98A49403C81E2B68A1B09693ABF5FE6EB4E8959BF7055E739CE3FE
ABDEA3341CBF7BB275A236A280BBE64CD99A322143F70E667E944A31052B8881
09E11F9A9C0C312009C4540E4D84C8B643688AEDBAD69C624A945BE8E86C9FD3
CBF315E3FFF1450E176BB91B5AE2028D07687CCA2F4084D37439D8EA1DB36EE7
7AB75E74B9C83C67F22BEE1CA91BD0263284768A61613A9E924E45C600E33A4F
4090B1D39FE6A335603936B46F765206666979E301637054A84C1A82EE44ADC1
9C7E8F1FB75BFE37E108989DF10145E146889060372C92E7B603EE8B1E602077
7F8FAFED468EF5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4850EDCB990134F321F1FD6696F64BA101037918C9
F3EB2C616987CEAA46F6C052EB3FF6F2FB9A6F974915B82B6608CD85F75F0664
5644A5E3888713099F73E90FBC9681A6432D6944A68175A656D126AB96DEEC97
7DFB9A5ECCECE68B7C706A15EA93F5FA7800171D760667E1336DDDED349310D0
BB68B865F3E43C4275DFD82036752613F3FC722D561C0B5BA22C873A42C13AFF
73B7A9B8096208922179B7EDF55236F13203049ED2D3A304BEF0120285E9FBC3
921898A37465752B57535DF5054235CB5A713FDF779C161E40A8A8AD8074AABD
6A06EA11E40F1F4F4090C99D86095BE64A36FA8733362A8D4A2273879968020D
41EAA7F6C1A9B682B344B7DC94AAEDADFD1BD39385A57F9383AA235717AF84AF
BF5D808D32071618FA11E2F7907B9626CA16609BFEE67DB56CFE2E2B90BED39B
54D866320877A767FE000D8A3386EB1AEB2D99809C71C946EB77ED556CD01675
A5D45FC8BD04EAF80C756386291444CFC1D7F12BB4B1304696B2080A14F56ED1
959BD60C7F7F5BFAF8497205D4BD589967F17FBA10C2EF19C1679C5AACA4F9EE
B15E13977CA81B5026C7E1EF4FDDFF62E82B16CBE3D401AAFA4D973976EF232F
76C9D0C0793684D68FE95129C326682238CE9807B35B2C2C0C32F4122724C159
AA1C41DD94D0808809572A0A32125FA4D78B525B256291CA389F839797A13591
6197A48D453611484DA293AAA6B62F5ECBC9D32FD482C74A5387629E03895C5B
946117AA34217BC77B1E075A4BB99145EA55CFD1D12CB1D2E72636AE538232C1
3966FC6E07843E4FC7A8FB27BFB4FF67CD278CA322575D7590D77B4E03E63F7A
848E639AEA6DDEF55107E8C5B9DFFAA47CB3CB5A614B77D0112527C9AD97FDAE
5BC457971A70DB3421293E16959B64702BA858C1217A8B3B836A947462E0B59B
37C8CBC667F0052E653D33F067997638BDCAED6DF3A8F1793F71E79A58BEF6EC
47F700C376341D757B09A3E31F6ABE9EB9021C1A6E311CBAB6DBBC8AECB140BD
DCACE9B1E80979B7487BA2CB786018E20A5E0355AA33D6FCEF382799F62A9A8F
F8262E8DE16E9245C61CF3FFE09AACEF315932D79117A513F6863D275B80A249
01CC70FA943FF9A9F5E8D5716835F17CE3FCD6FC5EF10AC25471C19ED3B2D164
93293F09EA311F49295310B0C1AF942753C52402014764CE7026803F091EBA60
AD877E9208260AE6AF24100E2B365BF89C5B679378A7F6A67087C57B5519A988
04735147BE66CDFF2481FE35DBEE9CAC7E77D79BA760EF4C53A3C983853DE8C5
FD3F25925955F36A3BFF3454FF7B226C0F001FCBC5484DCFA46DD8D89C69C886
AA0247C5EE233C9D7DCFAAEA1E34B8938673AA6D760A80C38EFAE41268C528B8
5A14387C3E29D017EC16BE7E6918E11E7AAE31ACB6E85DE4B2B15B93B7BACB79
AC25F37A4E4D1B370E59C78DC9EB4AE83D1CB6E4DF546FBC914A6FF52591CCD3
C464AA14A393F61610D617E196C9252A013C9532C303C68553C91CE83431F239
BE883C519B643E9EAE5142F698F4B47ACE43BFE59E3AA4C8B47CA18016F95C6A
212208CDE1635F4E5271224CC19B6D47261CEBA3DB1E042443B665E915991D93
2209B3F4C86C9763861923B2F335DE040A8C24E73A0DC3FFAD5A6A9249A29AE0
C70F71EA41B0A4A505263D6A6C70BA63EB2814D31DDE792AAD7AEB4FA346EC85
0781604DBDF2EB65869969F265341938B2C7D6B979342D93A9F5A23A3CE8A015
130A0FB817DE38359C63DB215965E218E892C350FCADB5F66EB82D0813EF551E
F65992B2E24B4FC8353951C0A335B53F68A8F8286A94521BEE28D7319ABCDFA4
A21B5DE536B34845B32A34ED5CA1F3D3EE2B04DC4CBE12FC99DA94FB2648B842
54D4FB6729B1CB7E86DB55FF4216E2F57A08E04B44BB36F27129E5E93EDC061D
348F162C03BEDCDF0521B9F31D29543DE2AD436B75778C0489533F3FD5742FC8
AAAA8A72683C54B45F81F355D9D19496D0F80470D6B289B760B6851EA1A9D31C
01577A0026C7929C87160EE0D8EBC305A07052BD82AF003A0EEBF1D6FF38B526
E2EA0A91866201E08792F03323228B622E30142E47BC752EB0EFF7BE8B688A36
22826EC83CC42DCE8356DB43399E6A6918A887A64B2EEE98060E47C0F4276DEC
FDCA976E967EED2CE2C439693E2FD2F2C26823FBE781CE97DF06830FC498BDB0
73AD2CA5EC36B4892379B00A5C8564FC9A915C85B66EEE33EA460AF6141D60E3
76B4E430431F049992647E2B744E48AFD33CF5041056A43F90D0E6A47C2521C1
058E8C66894928964B332A89C5DA71AFBF455E5A68FDD4DF74A8F1572F8168DD
E778337122FBBD1485F73B4EEC2651C3465557A320A0932B65C1FF77F68B89E2
BE7D6D975EEC017C4CC66C88F5BF25B0D84AF0E70ED77B0B380397149845CE59
EEEF6DDDC9E7C6127A68489B4B19F3D15F6C72AB8DD43CA69CE0AE0177D2B999
3DB6EDD24B6A4FBFAF7245D800115B62C9BD6E97A52671CF3F69A78D19654F75
3822663BE5461EE982F36B0027977D6B3738BA7EBE8FFE3928E471DD9502DF1F
41F853B486CBF6A62EC2D4975CE0BAE9D76A833969FB573201280B149CA91AD5
F57D3A240F66B12B30C0B8C3C25DE1E16BDBF5FFF3CD111CA5FCCCDC96631D0A
2B46A37E422D648CF65D7C1392E322DAD8CD3CB42B3FA767FC185F653F299CF0
85F2C3AD7BDE7C44FD3DA32993CCB41A92B29BEB26E60B05B105EBEB7A7476D8
31D2C0383F39344255823DB7D1D12E2435634CF69890D14A1FF76CD20F731C4D
09ED15BFCB1DC5530257DEDE728A19496AAF9D8BBCFB2DDF39DA7261CD6B1DE1
94DB09EA1744A0B6E3A9A1704083D27D5690B18843ECD420763B9E7F42912756
39C6DE6964F3607C90166D11C291D467B35592E73C61A2DC1F13CD09369054DC
5695355C6FE73DCD523582A4973275B64B3D8058783639676B4F8B47476E4098
ED693455F82F098F49FF487626BD1A4D4B3B7961171D67F8F6B26EBA8AB37B5C
35D075C41218D0E9CAFBC8078A26AB4F29F821A015135CD43127434DAB18D387
013C388D3840182F35ECB411DD16BAB8CB1DC80EE2D09164F7CB2EDC0827D2F9
73A1460966368EA8F0D42E7A93BBD492847AE57C85675CF04BFD1410B56E616F
68C3927EA7267C0C4BBA87AA3EC7166170B80B7355E802532D38053D427DA3EC
5D297AB110438F9AA9CEDA887E63AD877E9208260AE6AF24100E2B365BF89C5B
679912C69C51E8D0541100E3DF71D501F4BFA0AE8260EA411984C107C8FD9285
F08FC3C879AE6D42023BE0E114B374F049F75FC09E974E64A63E36F76D0DCE3B
3E57F4A1C80AE684E56726F52F4A49A022808893BADF86ECD0EFEACC9F5B7E84
1DBC5A753D3803C89C438B0FB99CAF607B7B16433C977215E7F78D80C54177E7
D853C4EB05C108B4859A21AFADEEDBAB163F8C1C822C4DA3FB1A29EC3ACE79A8
C5A00293FCA8CAD6BD2A94098E88D45175D4D9A88D0F77DFD5C14FD6081321C7
AEE0F7914B79B9ED057E292AC7A96CEE551D96F4D85369D2B4167C0A622AFC28
80C6D6FCF36412F8EEC622F2783C9F1A0403E9A5D876942803F08147525ECF7E
0304D3BD24256912A2ED3C59B32CB4091040E21EA8F9253E6CB7433656B87E1B
0A17BA09B89DA54E89C36AC72560140421800FFBFCF4372B123AB0EAA5A28063
EA72DB6C8E32FA349461C1A8946B78E05C110976E5B4B81BD89C82D81AEC14F6
8511ECD14AC322A438BDBC4262A26D679ED4D87F89B2D3FF1A88AEC671EC30FB
4DDA9E1BD3A55C4D59BBFB7F5EFB232FCBE3C721D8D181B02711EE2C105FBB16
BAAF98F469068B96F7ADA96E4C628D450E7E1B4025089EDF05D020C458C7F3C0
A9E5F676EB11E606954B3A3613D4E1DE3727C04BAD9177A42914B371F4FECE62
5C47EC539B20F4FCFB72DD0EF45CC71FFA185F653F299CF0858E25008D1538FD
4D2748FD791113395323560E169AC68D884E15ACA3BA6934ACB18CFB0869D655
CC9E8B7B2A883E868B7D9AB5F1966D7364A38F999D57EA93937C58C1343F917C
4B77C3751BE6F455B48BB452D8EAB1CE63B736201B598CC9484A18CBF2788133
19FAAF6C66177F200389C0A6667DD18C92268958F56A3CDB6D7D866B6DECEFD6
F0A675F2A8ACE261620AA95755D6941EB85166FB6E723C0E0B8B5F6B4565ECB9
73DA53376E96B94176576F807AC241A8A79A363F9834B3B51D6F2E1265B5B05C
531CBCF02590E866E9DFD5B99028D0E71DB7D816A29191433F7D9CAEA7484F17
687D2F3900B9524B578BCF2CA6C2E6624714195463EDFAF7DF63DEBEBF603B63
1AB2F750D81E537B3FF2B21C4398EF3C4DAAA73D2E9E02B7C7F7C1477ED8B108
56C476FBFA10D11E87A61DFE3103AF0DAC08C4A82DF0EAFE9AD88A24905F7DB7
DC8097C0D9B0FB9650B81D6C955061B4CF384887BA2A9A504B2A0A92D4EF6EA9
60ADE0663431603335A8DD49D99E769BD7385458EA8BC86B3E8F0B8C9F796139
AF50631A0D4832346AEEB1988BA51832A8F28166A3DF8A725E6339ACD102D12B
4C0FCCAFE83B30690ED44E2A51E74C0DBF0DAD86CB36885B74D5CAF5BFA609EA
2FAC998F9E08DF927EF4B23C07EDE4EA5BEC2AA85224F7C29A671F032197BBC5
EEF8FDBC70A40B5551A06499BB39794CB9F4EDD4D1AF9D34E4295AF83BA1604D
89E7D7C3A2511C0DDEB5233387AE473351ABD014CD380CEF7BFBB68CDB7C90D1
C34B6BF4F19CFBB246A971A0935816DF89DDCA89B23C9B25E0470A880E6B7E2E
D47E8E182F3BC9D9E7EF4900C327E20248F7D1F709489567B329290C22246FD3
51549B2FE9F545F713BDE7A2897E69408B6925AC50729A5390AD5506F3E47F77
E7D5423DBE0776FA1387D7DF0DCCFBDA67F6A8A740628F8FC7B19054CF4917BC
54655EBA7CAAA852861A25CC981E526F1D803C93B2A2A07D4200535F51BE3379
AD85E97DEA7A05593012814617BCA0F49043B90BE671C8E7997167E57DEB055B
D5830ECF6D6772E5E77D6D2AF4447273969913AD25DD44676FBD2AECD4004E6A
3546718DC369D9C0F1A3DC5248567195DA50C4BDB1A8ABECF4637E52C0CE5330
16DDEEA851DE7E5567C549912D4A5AB957A6864A7656C8B578CD64BB9C55B200
F32B0763BB2B8842FA5714AFF9E5F519ADF4936D2D0C1BD6D2D64EE1C52A29C6
D3CEBD747AFF17A6AFF908C79C7F06A14D933DD82E32144FAC0F0E34F1D0ECA4
23C805F09220A9BF2F4841144E5B06E3583F5C997211E5081EB8307EDCC5357E
6ADF9AD8C35E6A43B6823C4E3D2E01A09CCFDE6A24BF40246A18A8D921257BE9
AC6BF7CB0799464311BCB49DE285E7CCA8EA2BBD321844409FC9537DA077CD8B
62AE6FE12DD1DC46B921D8BAF03715FC56E9BD6BF2CC880FBCDAE2DFCF164BB9
44C5F227B5BB9656B4E4DB32DF74EEB735CD1C98201F895AB94234C55AC6F42A
2A420EC9F149FD6A55F1A51A895E285885972113C678A08DD533DC0E8D85F9DA
FC5FD842F417265427E0F5E3318CD532395FD31FDC369BA91DBC1F1553A8769C
89B69FEAFAFA01CFE20B5876AAE7AF8BB5042264B6E88BA8C86C0D95192C772C
129F71427E98CC2ECABE772CF6B6F6F3383B80D637D761A7A992CF58188FB0A0
4FD6C30AD69475D7C8CEE1255CCB36DDAC9B974D3E6419A084C637858D49BA7B
27E4904BF8D855940AF0DF3BEEA121BB82DA620B2E22056DCEDF1081E83957FE
436005068444516D156D282BB7BDFC55B4522C394B3A544159893A41D33AE8B2
BDCC9705D1EC8848293ECD9599CAADB5A4AF32F03D13289DB062EFE9E62D5A3D
EC03D1F5A40154E8DA0E65975F32FEC44D28C440AFED971B846D770231C30451
308337E1B50D361D971B735BF61EC499EBFF292FF20F423A30C79C5CFA483AF9
9DC1251FA8EDFCF139A86A88DC3E1A94A0EE0C23525B292A271029E3285A34D3
0201E5F48DDC07E52E850772EB210276CDB3B1DCAA06E10F28A51822A85F5258
2848C432424122267304EC5799A02E0F53322EEE450F6DC39A4F03032CCA7A83
2255D2C3154FD5480E88E9BEEB2499BF34A46C864A443EBAC31D44C06BCC58D7
37F7D239EBE3EEE1A4F981B35F821F57267142DCC4079C915A4D01807FDC883E
15A2016CE4D853093DA735DB67694569E8A3115B94FFCF3B201FB213854CB511
75B088CCFBF6EEB46D7BC3B3B23956CA9AB504CB4FE1C4F7A53B8EC2FDC7614E
23F7D328DB309EDF140514463E4AF6F8203B584572BFE5E7A4BBE15B794DEBF2
D3BC8D252111E851D890730F3D2C910C2EAE8EF9A3D38D5B4C91E6F774AD9EBF
63D76877DCB7A0E54D0C2E929AEF3C80C7973FE752E04F5D0031F9A135E9C9F2
1A4888036E6DA17D2763E1E130164942DA5F704DE35D983FFFEBEF4AC76A7070
F1256E6DDD52B18DA4304B1B63AF73CEAE3FC2B4FEECC7F8F63FBAE0648833A8
A814E534CACE45C80493B3ABABB911186600AC62FEFFF4F7754C4B2E369CF06A
6E34DF084EBBB3DAF7B5D21F6CFD57C2312EB4348EAF26373E93142523E57CB6
1535E56121B537A578FF00A40E236B7BCA3A83192D97B128519E4CCF28ED8256
11AFDBFC032CCBB03DEEFD2562E27CE0FD0ED1F6F159B9BF0AB644AFC52B5A86
07607CF71D17E45F49AFB2D3E9CAE281B008BE656E4B2DB8C99A27569F361F1B
DD0190AEB798B8DE4AF9F7314B37ECBF5CBA46161B2251B235512E1EC659C980
69FB699E5EF78ECBEC88E5EBAE0BA8DB3BCB2AC0468EF00B3B29ACF32F3DDCB4
DF8B5AC385B0E9932908C23B5453E033BC060B2A22AFCE86CEDA16D910EF056A
685311FA540D2771073186E2284A9BCDE26A5D0B2058668CA6B44F43BD37E570
D6EB12BBBAE986D79303CA403B7808A50680F1872B0C648C191F49B0445E4D91
72E115DE31182F1FD33DCC71554DA8371698B3536CF6FC0B6005686097540C5C
81A8CF53AD64448E9130C01AB94B021BF1AE7F706A40F0BCD6C3905D07EEFCAC
D74368BDAA7C4EC0185B6DCCAA31E67DFDC33E9675CCD879D1FC8C8530B49F43
1DFC46EEAAD17F996564FFC6E338390622298E85646B5CED0623606D46F4B4E8
EEF169B785AB38BDD6405A4A307B9A074DA1502E50D1F0D9F8AC27CE15DD9CFA
A477132F847F0635A48C398882D84DB4F2536F1243FE03A6C51216B7294A6CBF
F1A9034F40380B74ECDFF71385693E6B75BFC0436205231264EAB0C83FBB9E3D
0CE34CB2B48DB39EAD4D6A8939194DB0FB0DE5D6276DED7E77A8B4E0B5182C1F
9F01C677EE3F751371ED01882F2A971A09196EE70772CCF4E8199570C607CBAE
86224B0BA4B135CC8709B34137EBE447A68F1A9E8E316EF3F6BE69C4438EDA31
E6CC1D4C8F3B8D30312048BD898F64D74606B0E9201EF0CA8F67CCB7CC009C8F
3DFBF4D301929BE09F85FBEE99D21B512779E121066B47881935DE574A9C204D
06CED78BECF34BFCF41D02C7E9085BB42D5A4BB5A14E1217960A56E41FB7F566
D32F10D365D2D92796D62FD8134707E2BEFF7F1B444111BCA4EEFB024E4521C7
55D34B49654CA7AC01EC0550084F40A113D2B84F2EEA849803EC5C4E36C41EE1
C42B5BE294504A3AB33413FB84F35B3C0016089A6C4D67EA0050A03FF09BBB48
4DDA6371DFFA6222F88F0886C7F8848E9263B7D237AB3A9CE8C36492E99AED33
256A1A6F3303F3536E2ED6F7FDF2FDF4017F942AEEF782D23DB4E418BC6A0E21
372E704ECF2C1A64E1CFAD9C2498FF02CF481DFEA19A42AFE6A23410FE321663
2AD737D670C54B5263D848C46C93BB88D09ED1C1FB39890F50ABFA7893AA3D93
9EA7116C24EF78A12FEF18EAB42529A129E0C70A8E0CCD25F54D07DD22B19109
B3E6972E6C807D7ABFF213DBEFBC524C6B50648A60367A6A4D08FD038BFD50A5
D7C19AE1DC90307A59EF912E6F92A414183F977187DD6ECE45785D28DE4EAD3A
F23E8EB270FF2FC011EB0C25AF7A54ACF32F737961660719E8594F3D869FAB0C
30EB93B61876C1DB3A6B32B70C9CC4B27DA28E97CCA8A8831B8097469638E4F5
075931668BF7B34D365388E8994432F5C784FBCB365F6F507132D58601333E80
69FA557DD87D25E8B61871140BE91C6A9BE6F76A81B4DFE79631499FB05BB370
022DF84D8614CA0EFE6FA7E1EE9F1557DA2C8538651EFAF5E3E7E33853470B30
FCFAC48E967E6607678AFFED7573A63E1F15030EA41B1E0FC2FCAE537199185A
5F528D50F97B7602BFAB0BA93007579732ED6C0226FD81A0F0E3854B2893F30D
23B08AC1459B0B3AC1DC117B6346DC6238477EB1F5370DD1D21345C1AFB2D07A
E71C14982196402619D48013077C61502182771202EFACD338EB698AEB078FDB
9E9B601FD898304C6EAEF3D6D9D91E52FFDD417F70C6497495901E69E4E11B9A
321D82736D103AF57ED0F5B6AE95A022F1C722FECF62C99793627429929156E2
36281118679A10464816AE987744E7183ECA0F2784611B128DDFD3B8061FEAB7
6A854095A2507701D972BAEC539741F8B99CECD2737CE8386586E9602B15D0B8
881E6F37D510D53C60AF3F61590411610DF38B1A64CDD91A97186391F351F6D1
4287110FC81B0A3B0D65464F19F48EE2DA48DD65322FBFBEAB1601B66133FCDE
CEBC47C3061DF4C70CEB5C3F6251F58BB34C37686286180F113767AE8A023276
1307B3E6EC87FC79FACF4D729D7E131335C212B30BA91220BFB289D604804C33
4921069ED4EB4830E5E1BE4EE7195B4650686C152125DA44D48E34BC385780B8
37367A712F7A57D0640738C6ABBEDA01189608264D061977417B0C7399B00587
D1D22ACAE72A9D41A40B324711EDEEF71A8C386513389D03D6893CD2B43CA2E0
6AF86228F0099D542E9DC4C04A5DB8D462224F084DC243B673C98D881306BAA4
7E8B54D72AC7474753A387E4FF6B9907F28808DC922FBD2E7ED0899B62EC9F83
0062209A942EDA2F5B354E5E08CE249E7634A0CE595241BCB90C35D10D35C605
AB94573D8BB4132249E279DDBEF7E3C048FC363D0CBC06499762588126DCB625
465AD2370DE571CD6B910687EACAE37685C35B4A02309F9972FC61005E7E5AD1
CD992A1AB06F6E9D8593FC3F87DEB0F663278B252DE788A0B966B6B8F1C98ECA
E216DC09694D2406245E84F4D47146CDB5CB5D2A623B7F1CA8D7E45983976ADB
A0F5A42385E23E7F317DE29B2B409995B5EB6A88A30FB007D57FEFC2BC985C4B
334F1D3E8E7A1D220FA70EA9CBF0B38D6DAA1169F3365963CBC3906971E3B38D
6F62D604675511A2F2E15CA30E973A68CA7A4061A48AB6671A33AE2AEAA6DCF0
A7A3669114BCBC5B20BB6045BFD5AA4BA26DC69F2A27DD6F11B7F5F9B82BCB01
902D82E4EB6BC1D263A3F7981EF7B7D5013B609FAC8FC19A58B641199652536B
C1176D3384CA36F6027A26FF421BFCE5DAB2D853767FE8A1AA8BFF2247D8C7EB
BE4E95D9CF6F8D4D204CC6D61EDBB0DD29782BF033D64E97DE753933AA83F37F
D4D440CD53C05CA0F32F7379616607191A25B634B0C7B55F467F12BB61B83B71
106E372B8A5B460CF1734233D37AD83B5E44D6E6F0757165328322752746417C
6C01728011A4E0F2D07A01A0C7B27C86A5A58A0F460D2DB3B66DC8BDB8552BA0
1AEE38E1205B077C2F2C646C57EE91DC3F7E9F8BE834F74A616E8415CF27C459
23F72118BF40FA8A4A7B8320210619F4FA4CB8003758487F1812D518A5849CB4
888A353080A6446C0D86A6F09F1D5014FD80FF43E63A8CFFC8027A7BF1DDD7D8
FAB59563AB1264CFD3F20F6F04E5FFEACBC97E5C730D1E2E9A6A644510454A0A
41DEBAE7BF7A16F17D74E77B540B37FA083F2C0EAEADC5EBE6D06FCE75413229
E6D56D9F0D1201705F7EC98157165ADC4C980F3499D747F95DFDAFBA55472422
463B60C4488B6AF86FB8667F2D14AE5753EC8D7DDD42500BDBE9DE23564AE6A5
E87058C69C054DCC89A787F82D8BDC15955C340C36307497E0CE91B6D1F1607E
DB09F9C68ED7AE613ED40825C75260C7BA8A5A0847661FEE0F6B879B0F4E788A
AFEB2E05BB7966CA5034B8EFD58FC08C1C1BB3C73D60E0D67A4323F17D9178D3
2482B903E093F21C612B1E2074B7116C3845EEA16B5282A7375B3C445C648E25
CD68051F08F732339935244CBF078BA4F1C73CF8879613E4D31F90D67EAC7EDB
89A1029F3C5B35A638BE725F0FE01EBAF6D306746432D7E170C47AE4059FE8AF
17B2C62D935FEAB0D68E11567ED38212B20AE4C51093DB28F7C996D5A69FE651
AB0637C908BFBE02F73371E117F0F7E213BA79517E5A6436BB6907872FC352A0
8A6091BF4B9D6AC543B626847B574F60E61F9AA7C3D3DD9EB64CA74A51274134
606E73A0D0A9ADE787347F455420B15B31C0EB8C910767C395ECB870DCD89031
AAF6F8AA6FA28A2B5FB9653BD398287E439A0E82C0FE86B7B126D8255F1A0F1B
D08158F94077D191F62DD609AE467D4856A8FE1E3057ED9B6CCA466A3EA918A1
EBB343D2914E385942BF82AF3E3DC997624DC06C800A6B00BA614400D0E077AA
6328584117A9BD68908F0B8E1B3751AD8B3F993452076B780AA2A76F0A3ED017
96438D68A11700BB348538AA9E7EA1A4EED27039C40D9E1187E50B08D9352E7E
4E5DDA08D38CF2E05A5712D191D61E6AA76148C0798ECEBC9EC234234A21E0DB
20718EAA7DB49757C85DE0838FB8478B1B94A3F1AF5D53AC484C564E66F040CB
1A2E88CBF064796261654AADFFC21A7372F695E46DDB637486F5A5AE16B8B27E
8909626114A5A590CEC785BBDD2D86B42FF91FCE7E06435BB2940232816F9F9B
EDFEE780E040423DDC5E3B4876FC8A9E07B69EF94BA1034C34F4D728E9E82013
1692793929CC3D4196A18DEE552380B3C65806969DDE440BC68EE43F280DFBD8
0BEC85B51D5111091F54823FDAAC9DDFDDFCC6DD14BD104D1F4F098CE983D357
981D2CA05063CBEC5B5FCFB1B9AAE7FA181E97431CDD0935FC9D12DBA2BEA04B
182A73ABE049F1F25FDED5170BF6156B7946465D1D51CE970A5C836D34EF4DEC
34F23A4282E1448187B3AA4BB906DF8F3A8C7100DDBAFA847E6CC4A1E70CC7CD
343C7E08D10DC8451E14281069DEFC52198F984DB16C7147B272EE3D79C4875E
249580B771CDADB22DBBC1715016AF3771C63A4CE668212EFB2D988624EADC18
A55422AA2744E5F07D174E63681C9719E498C62A7FF00B01DF3776F505F80009
F4D98FE9E8ACEDDB346F8E75941C1189A4B5EB3ACC3053926BF4350D36D28E2E
8B90CF14F0639A7476AA869930BBE3E8D221925BD4F7E68EE122777F28BC80EF
703CF30ABAE46318456D7D04BCCAD72BE7F89D1FA8FD334E62A6AAA8137C40E6
DE4FDB94B618898A7BCE7591566B1881971217CBD80EE42B4CF803672EF0AC1A
4F76C8B2A035BFA7760360E78355E66ED4FB2DB4DE853822C6DE0009E451C0BE
D09CEAC43CCDACF5628E10A111F78F8D10F85EB8607562D51AAD97AA7AA98DC6
CB5052261D71573581076879884316DBFBD6864F5F56DCBC56050C7418E90552
DF6EE0F27CACA985CA83885CB990B37E0E0DDA6646AB9194B46AC1DDD09A780E
3211EFB72BC5B2CF545D57AB4B9C40CCD94998FEF28E49E7BBA32CFA12942CEA
6EFBBCE12A898AB29CD9930C9E18593DD201B93D885973935C91CC6805F44E6E
4321BDBF12DCD48108E909E7D9AC7D0D832F331784C3DF7D7F7354C807C6BCAE
0E89082ED18574A7AD60251EEBE74E7A1D47BA78CAC708C675AA7545CAB8B40B
9345DAC334501EA44EBA4529207463D3E93301B5D346382E841BBF95A07528C8
343292E178983EAD84F75E713917FFCBD2BB09CEDA3CFAA35DB22ADE121026B4
27DE5009E59E3417FED153DBCA288DC767537CFC73FB51EAEAA592F499107FB9
2E22D07071D76B34DBB968F00484682B19C3799784C1394A7F95FA260EA13D49
E33691C1CF9D87F2628BB1CA12BF28EF0DA654779148D6988E9EE410C1781A4E
2DC6BB8CA4C96B19722BD65B595119A6C6BE1F33A0DB7564F01C4CD135F96CC5
9DA7920CAFEF414DA21E6354D056159F69ACC6681A6D7C5F76D1613C9D933255
633A6EE98B2CE3B0D8C1A90D72D46D431EEBBF0D8A9043A119EBA11ADD7501A2
AEE2F85AA441979C97BD38382FAE8F93AF77D94989AA693B5506993BD3C608DE
99FEE68796482566340746AE5C0A6C9F3C60CF9A0641CC2097EFFB9F6D14FC98
3E99D27F9136DFA41098851C4348C3109D0671951505993DFCEFAA29DC87000B
EB09B05DB3F8DEE176DD49221B4CF6C04902CA171AF11FAFD503506D77732DAE
D9B41D4795B74CF290799437AEC6875DC89259D8D7E28F6EBFAF8A510C59E39D
2B964EB7976BDB0BA9541C3D806BFA4FB77C5EBDDCD4871BC0B7A2F8AAF27E7E
115BE85D71C3003914643F8625FCD2A85F71763090740F78F242019C349B65C2
A13C4DF7B389AE0DC3AC28D2EE5F1F4A8C486D974A71CB83EBE7808CFC7D343A
7FDA08068966D47877D7DE7C0DF9F54D31E6E2A081E618F0BC2956BB1C3F1761
42CAF2E4FA87D613121F0796E257FDB8D61E033D083625FFCA81EBB17039FF93
8277AE848F2424871BB26E5F9963F5B4DC5277003D6F1D46A6DDD51B3C62188C
66D7D12CE3E92DB4308976ACBAF5037EC19191219B28B56B22AB4EF8CB8B98DC
0DFE65FB557F3590423411FE93B8D5FE968F73C9CA5E9E71CAAF5A17D5598D8E
8BB772EF73E44A281AB9E0E5D07400061A4A73F4A59CE1CA5EC9CD3B6E38C21C
1C78A8800AE691524E1C6FB25F41A15D8BBEC8702E6EAA1B1F13829E41C922DF
981188F09E377CC2D76004AA6E60F1173DD50937EEA219B78822A55E3E684338
D57BD4C4E854BCDECF5DFC2CD7D09ED923234FD2A519997EF0C7F3D7E4BD9787
7E18A14D48B578ADC22A94F28EE3718B9A9FAAF727F2D8286177EE27BAD040C6
676F4A4FE6721018EDDF233229D7D60AFC8B534992629C767069195FAEA379B9
222DDA32C67BE4C5F9AAA6971D5570BB47BAEB51200930F442D8ADEC45F642DD
8A886F2B689792475E20A46B230F55327E35FC4BACFAAF15F49E1BD06CFB69AB
1E13576BDC446872C97CBE03C44D9A9065B9A2FBA49B13802426474672A483FF
21A6D13DE815F47EFEBB1BFA166A088B8F232012896F122727523CB4DC1A7208
C46AEE9AE963718BAECBCD412C2BC6BC69C1370128E6EA1FBF971CCAE4F84C16
417C62E5891604845C80511A27D667AE834A96925698006601802F57A7C373CF
C416D861B0E313E9387668640FB271BA91799E634D760E262351B93B0E6FD807
A859AD9FCD5879179D1DE34991BBB734596379A991607836C6EA74BBC359EE64
A81F985CD3709694E5DAD604F15731A523D7CE1009C7B76CAC50A455543A5C9B
304E4E8D845502C1D77909787A0C6574F0D402ACED2B7D63523757F6AE29273E
EACD9526BA926E6A7AF094A1F9CCC08D01256B7CED1EDAE5A0FEACCFE55830A7
6C6B243487AE5A649D850B6E2505C2962F47DB109EA3EEDE1877A06CDD5DDDDB
891B3AD3D1EE45050BF63E41824B1622CB29A88C8843A60DC46832511ECB7C52
B7B6D47042B26B5C7B7D12DE631FE6C37C258400BCE4FCAF84CD0C31F145EDF5
AD4A686AD314A94FE2BA8B2BAD7C2F670BD9087F7531490409D028575601D947
7A7DAC80AF7C8244917DA635EEFA010F61D8E1B17039FF938277AE848F242487
1BB26E5F9963F226A807746F3D79D070C1F2D0A021D02B02DB6D0832558A39A4
3DDE5BB0252BEB0EF9D8235977B315C6B061EA83DE83EEF89232B34BD8D1A690
B61E603799AF425983D8A756B3A7D086CD86CDC90F418D86E8B704D37E19D657
21A6D8B54B46FA556FF6AD0427AC452AC1DC87A9CF7ED06FF056A9D38B3AEFB1
0D3CD2BA01D0E1E9DACA45F94EFC91D568C63F0DF5513121A20000B2D49835C3
4DE75CAF4932693BCE009A58008B1FBE69B19DECBD09D239CB562718A47A2340
E21AE1126208974CB5187A516614FFA086067DB7B8D79EB4957E93BA4DAE675B
F9E906EE156B849E4CB3A2B629547102F5FD754ADCB4B3957E1B8A795D720A30
B7DE482DFBD93486B13411F870A4523AE8E16F422AB07D8800C1DDCCFCE2067C
46264EEEB0AB0FBF2EDA1A8420EF654A1F39B6A93D8EFEA9A41172D1D82E14B0
037ADC38D7A95B1E0E292723E9740CEBBBBE4A72103663FE29397D8AD908F122
BD2367DE24BBAF6215F77F00081A0C911F1EE84F534F2C662A9898569E109DAB
60B870AD2E7DAC2D9DC0D690FE412DFDB2B9E42CCDC718968FC48745D928414B
E064B2D5CFF784282EF7462564CBD49D1820E68CCC9BC474E9751049301D6D60
0224EDE9B574517228E3E1C47BA1E70DA07C43942B964A6D5ABBACCE69775DA6
C662491BDC853394CF665F741994F2FD6C49F144628D093D32CFBD8A443277B8
89EF7EBCF73DC3496F6DE0DD41FE0C374CA21C1779685838150CF56953701A54
45C72B687A9B56DB8E3B0C01C6D753284B657F3686E07C885D506B788F353955
8236857EFCE58DA619324AFA8E7B0367291E21F58C53CA17934210C32A35B68C
F61A1FE3181BD5D0D976EBE8AE53D3AFDDBB926B54EF0C41B98D1782036D09BE
359831087184E41CE590F9C8EDED379905CA44AC98660F929FB67086BBF02A52
1D080237AAB4A2A51C71A9C80BB272BA01A17A8A9AE34FAE8003112774CBF511
67A88E47942D7C3F028AABAB38A59159D28EEEDD62EBAA36D35161B3EB6C4035
E27B1E2CD553871072D5949449FE10A4FAB74EC7001C7FA5C9A5623B07973FD4
B504ADAD9DBC56B76E85B7B6A5705502F55E4CCF716D5BEDEE1B58013125B46E
EBC992570D2C6951438E3A26D2429688CBA598533E602E3779EF7494E427C5F5
8F098F07CDCF8827EC04177712A79AED14FD6A58590CAEC41C9E906B0C0F8B43
A4F9D0210B5E066F26D7F9CD27A202F9EF009471002316940BFC8EFC2755E2E7
F9C81FE8C4F9F1F2AE3B9560C9DF5FE749A4AC8388A0264C6A7AF6071B2B9AD4
A7D4E71CF7ED04D067E1A06E5A4BE4DC4863C90CB52949603C0727A31C2B7C6F
4150C4774423E8C99C28166E5FC3BCE52C11064E7AC32607B6794509B9C2BB41
B76CA61E9C07B7228707A2D369E9DD9EDE9AC14E4FD09695BBDBD7994FDB3414
51D0A365FAFC66389761F5436DA107749746B5118C7B8DCC638666E9458B2AA4
16677F8CA940DA3730FF6602D1FBB7D9F48A6A8C33CD7CDBDCF53162554D7F55
E74FBCD82F69BA310ABAF7157334BFB2FCB5C9D08C637D34EF0B8CD10758E6FB
302FDB8719BDEBC7711FD4180FBAD3FF20536ABDFFA429B820A82AEE9A73D7DC
F77166491BDC853394CF665F741994F2FD6C49F144628D0938CA5B4B7668B9D7
1129FCD524AFF3FCA1C73129BA85E4E0CA65C90FF5931DADF03DA48AFB8561FC
2E7100823A1113CCEB7B316717EE859D7C2DA83F003A141954940647EC450690
9C1B4904CED6AFB3EA913918F7F9AB080B18CD87A1A38A0CCAB4AFFB3159A66A
113E066238B6C9A569761B7A9C7B95BD29B09B930B0D82F2C39F9BC669B211A1
9B2D697C75CE2B6171EA0D39805B15434A04232CBE3733502E1F59F53F8A8282
0CBA3C57AECF77F5883F2FC54ED39CEF3F9292DD0BCCC266E6895648A66470A4
EAD802B02FD1CB0AEF453014EC03F79919F839FED275EF9B49A0E3E2DF4FEAC5
51B910E8AB17977A1A7A3219E8AF71499D39CE0567AEA286091BEA9D6A443A5A
73E5A7AF1258A15ED5674C3AAAC4CAA8344432F60E709CFE4415E6E5FCA3C6AD
820A8ED4978E6E330DA55D3511E395C9D2F29BC2ECC2D462741B8B2FAA628ED0
6AB6A8B617AD1D9534E2BCC35DECEBCDDDC8539E0B0E5CE3F82C51E1A8827D7D
290DE369EA65E439250F6EE50ABD67833DA92E540FF7F10D19DB7B8C421BF2D9
3FF49F312EF7511BF3231D1F19599C1103239FDA525F52D837703FDCF60CA308
80CB573488658520530F436F249B0AE0A724EF014CEB137348871806301BEBE3
A5A5B0F3B3CA5B902D8A0649FAFF5183F6058AB1AB2D7ADC56B3209FBAA7DF01
AFE179256A07A1E6FAA06D51525CC1DE5CF6D3124407B7FBCD26BED57C6C0FD8
5C86DC11FB9EEC1B87ABCDA6A329FB5D07C5B458831922941F83085D461487E0
553DB11220CE764DE24EC8058F9068771D2C127AB25F504A85481A6E3243453D
811A505D0F6DF4D226F69331D7828D3C662478F969CA65E6280636BF69093F9B
BDDDC8853D5ABC897A402456452991834D1EAC85F6334221D50F3C41B70458D4
DA2F5DC9B874D4A271BEC821A5EE1092C3F15A2458209C7A40F7C048CDD0F4C6
83007C59DD71CB6621D13740E3D3FF50832664421989D9D5DADCDE34BA144698
34C6BF2DF01332CA9D0B096E4471F3DDD217D1CEA3413C7F4CEF1F811305FC18
4303A551D59C946E05361A8958F7F213A9677F3E3B8E35767A236CE373737ECA
5C2ECBD8107A7F3F97D5E061EEC9AC5168C77E353B6BE9E037E1771A1405CDE7
857F042CBEED7C7FE8ED8ED0E11BF1FC0245B5AA99AE92A99249E97DD3CDDFD5
FDF7B0F297D0F83F79A8138C611D8DE782EE0FCA33BA0C87A74A6C3E5A20D32A
264A61C45E5CC8D1FD411496BD6452159B6B0356F3A4C2F0EF233415B9A0210C
0EEB68F7D2782D45CD6F73A08D9DCCA1D435CADD9DA1BC724809993395E27D9C
4DCAEC204F20D10B78CE31D1A4B1A03E6596C709305FA4E78F44F29576EB055D
5841C6A9667A0B5F072E7235E9B1BA19B953CE9DE783BE36D415F2AC23F58C8E
F808B093595E631544CC051BAFED6CE19BB32DCD6C81723BB6B76B4C3CAEDD94
160460EE235DB6BA16DB022DFAB19CDBB561FC9DE080908BA95E6A23F83FB64D
F3D5A7F21974BE69B9DEE9458BF95C92681317F5F159FCAF120FD58E6BB79BAA
8E2D1EBB5F6D55DDD85FD687353B5885CCEB33DC81D35CF55FA8AF3132DE17E2
99D8A7841E775F3B6AA89DD3F6072BE3151D5B2858E25326C0944D5CD449CA98
9BF86F24F23F6F78CF43F23B5BE8837EA00B30C0BC7FF11AE673803E8BD56BE1
ABCBF942F0BBBF4E4241C418DD1263F252B16AA4BF485ED843DEDBC054B6BBFA
D0636CDC1408FCB742268E52EFB4BAF7A543C9B1479C7380FE636471A05393FA
E919EC29724AF27F066F9129869B35E8418D3A875C29C4A86531719A2CBAB30C
23E927F2492829FBAB34F58FD2AD055F152F34A3E524281E6AA71FA02C37283F
7D2147A31506BCF646FDFD7508F9F16337886A0261316428F99BD6124252087E
6D8EF7DA755BBC53DE9717B181DB2A26538DD157700BC2445289811987489E5F
3400F90E5B96BE9EF226F714E390A6EF2BE225ADE1BDC326CE1829CC8F48E778
FC6B370A4759C550CFE266B0665764B326446A071B6F2F362D222A5CEB4FEC7D
CBF844E0E5B08AB13015B27D05F8C4CB91D9F575EFAC681BD2CDC89F7B953033
531A9B9649182DEDF25B113DC2FE47AEC81372A4A0397C86328F2EFF078206D9
EDF2732C0FED74FF94FAB163B132A3544C6F440D8D8F95C8079981D1DBB3811B
E563142AC3C39DF3CCFF1E09AF016E49754A9413F0A8A8064650995C4F480C76
285AC42AD2B69859B2FD1C1902CA2E7BEE175E431AE162726891ED2D8A5A4288
E7F24DA7B01C0B99F112BB536F2EFD1A74B0FE8733943A7712563ED5C6638AF6
3639D56863124D51CAFC56438696B35C24D4D18520429D4A9B637E221FA3BF0A
83961631765AE4654A5D387D9509DD089E3F410B17214481F3263C22D819976A
32C127371F8B621FA6595B62183FDE7B9A298BB1CE74392470D46DD9B7F6B5C5
603BCC775E9892F7F962F64EDC6E6B4ADDFA887E5FA649DE14FBDD6E50E8B07B
3A294E54DE838BFF264A3C95EE32EEE3AC3C9907BB7B683009C74D666CAE5930
FD5EB509A4598A0C9C494449C69B415B8A30C5BCC1A675A7CE0E5C836D34EF4D
EC34F23A4282E1448187B3AA4BBE051108078F25132450F9540DF8438A076474
27475D179943E3ECEFF873E3C7106DE30A0B9E85C85776F58DF300EABCD265A0
56496AE29616F3C7405ED4933CB9FA454C9159B112359A8A164A1400C985C81D
C8D5CC5A75B2DB7888E3747AF729A13DD0931EE44A383856BFBE497AA480E8DE
C94F73F199D01815AC31FE7085E41A11CC62F4BCCFE940B398332CACD63B8EC3
4B0B748260170BAFA8D8FF8CDF698F1BBCB888E199695CEA95304A71B190CA0C
604903BAE65139DDBE8623990C7E415BCCC8A0CED4EF40A73FF724894C059261
85CED1820BC8C8CA8D94F8E27117A9AB83427F20EF7A4BA863FA3B8CA9E7FFDB
63DCD9922E53D10A54482A9A783B0134BE3A7BC1128CD3C5EAEB4D3C3B3627C9
BF63D117A738EE816309B996D99BBA6C13C1F806CB3FACC4E5FB6283D4EF2CC7
4FADEE86087CB75CBFC9B498CE129D16D1C2D932C70AE1AB02C8468A8C862CA2
0BCA3573AEC937903F834D6F9C78BFAA8D12A21531E713B80CD03A5FF4FE4343
0DB58184D56DEFCA7213829FCEAC430A54AAB1C27CD04FC0E2433D2EAC2F9B94
FA22BC04A5D0402DE879CA41AE43A90080A216F215227508099D7AF690B5C205
B5844D83D4A6F119C57055B4437697EADE7D8D82B1D3C74DA441B64EC801169F
7F1914BDFDE3E089B3EBC0D97A312CEC2A06611E354C92988199F7C1293A187E
E593C85CE9FAA7E79810DF9569C54C522977976A2388A96F9B52507D72A0CA6F
56938DAE25D1FD075C1B65F016610C7F398DA907559D4334BEF890240C606276
B34A7453D932AE04BA8C17705B7730926F6C4F6E56EDDC40096886B545F98804
2626CE03E443311BF34A0CAC49E8856A38D4ADE6D1A3C6BDC3FC414ED7429982
ABDEEECA8F7A42D94E552A60B75A21205A93E172C4D6224FB21A8C34D80F9CC8
892FC2C36001A27D213B8E9EBCC708E3D29B2825D9634731D2B9FFB4489589E5
D5AD036C1245D07D103A7A69312B7565A33F7F5900D0E18DEC5682F6460FDB19
07232339F3FCD771914933CABF613F0F9FA3E20568F1A58A5F109BACE4A51537
9938499CA3250F58AC708BCDA39C895AE355DBD8C0161E5EABFD2DC06983A522
6DDDB91AB87A9294511E24ABB47B1D62369F9D3F3CC7D3BF637438D917842403
4E600283D7E7DDB35FFFC04D87E42AB84985E6572DAA430A7AD8CF2A637E80D0
61064D9B278D3A087B04558DFB672151D7B13737388B5C1E7862957544EBD7A1
3F8DF24B224695DE81FDA340A865FDD788EFEA79E1C906CBDDBAAD21A297C69F
E7FC89AD400B6A3A5E552E447EDC012F28AD651AE908A642AF472AF397F67D84
52632A913CC1FF0D6516AD8709086A935EFAB9959D54BDDAD7EC8145BE6EF81E
61B3FFB65155A7535095F5F3F92A837373307B36402F44DA8DF5B257FCEB04DB
784AED226DC5E44BE01179F69EF7F7A7E16FA17CBE3F977509340FF834EA210B
F0CCD3EF1195A5676D177D65D68A55D40B1F81CB274EEEAA28E6B175D78F851D
34B6EECC77D163847E63D3C9AA412D14FF06A4598A0C9C494449C69B415B8A30
C5BCC1A675A6198784B246BE4FA7493A92539FFE7664A8A8D9BF390763D093F9
850E9A175C83CF70BD90D19FE47DCB4E8677D2B52ECCD641D72BA63E738ECA67
BA3FD60C05F92A5DCB3D809AE43A0B607EC8264073AECCA58F96CE90097FE391
647C1362884CA6DD96E388573F263FF107AE06BDA0B7753C65F680CBE16DC703
9BDA28A9BB93E6C8D33E537EA68C7479DB186E358191B2F8AAF0F004E81F9113
50DD22FD9E12C65709EABC86B7A4F66907BC301083A4E385C64EDA6E8F780293
B2ACC23BF2E23A4620192C63D6AB57AB0C88CDA8DFB76A8B762714669E78DE53
5B11B353053026BEF513C8612F9B69D55DE5E33D202E1B39073458C591093ADA
CDB69FDE16470CAD3A92DE1EE0E805CC4E75046B238E8694451D8617FADE177B
66F8094B003103A8E3D9C7DE9D6B2628B4A301C4AEEEF713B360396FDE65AF01
46DF74E024807F1F4EBD7A3154E5A5A434F4ED39C946AB41660E9A38E7E7D70C
762DC6662806488D0E3F6D61090DE427F764DFCF3E32B725301CAF136EAF82AD
02B5AE8A801CC81516FA59658D782AE2DE738200C53BC86087E8CACDD89F7585
511690AEF358316E73562C07FD5F4EC54556866A1FA79894B3EB7D0435D9DE4B
FB8FF9F93B9E8CA1D60C2C90B745638B040FFDFE8EECB76E417064987143EABB
7A16445864494B181A579D373539E8ABA8CFAAAD1D2E58C6BC26430662D2674D
F108730B9927AD3018087802D9DCCA253701DFBFB32E3D2C784F367E56A4B73B
9FC63E7FEF02E0E88E8C989A2805D370C76C3C26CFCCE772F6A660F21E49BF0A
4E9C572756A88FE3916F598FDD6D295D2EC8443DC751E9564B46530ADA4A493A
033A649F94365988EF1671A0AB4EF788778D42C074E8860035B630969D969ADF
2A9B0F184D9873721506FFEF062B053724AA504D465F067DC7E3B73FF292DAFE
3ACB173DA3778848D1F3984F47AB7F94486F150B93E5CC93C7C045C6ABBE700F
0CC128638F96F713F64584A45D8514AE1ED295693AD4BAFCE2B9CC8FDA657C5F
B7C1EF58B1C8DAC7BE2803411D670261A02160DA97D3209091D8931BC21C6F96
9288B1CEF07369186B0951AF6C0F9683B4423D49ACE48AB66C90500BD48817C5
E2C69174395C9FAA22504E4A4F014CE35ACB72CCEFB6270BE052F658087D5C67
D702AEBF0B88771027E1E7E81CDEC1DBA0B63403DB209B0E863AED121D0944D8
7097839CBA65F0FEE40BC80E05BFB45CDE88D1B3A57F174C7DC950C01E31D915
BBC42BE65E7DB5FA5054A610A6D54840079BEACF7B9194BFE3C45BFE9F64CCB9
54EA2F5CB32B70F1D0C3E764E4D586300CEC80560B8F940A75A78AF4F7B1EEC8
6C3FD73CE0A7A0DEC62407BAFC926857AC0151213B737FF33B503EA5B755ACE7
D0F8BD76E679E6C60822FAC5CB74BCB8EF35CAFD6C2012289DE8D2EECB91283C
9AFAF835F63EFA559E39247A5CB3F9C37AF849E9C5F06214A570113B37F27CA1
3C47550B39DF3DBC13329090DC59354FBA9C9543609FCB048910F3D70211659C
DBCE05F0733AF96E3B7D589D9C17DC6AF37242576CCEB63514C907325DAFCB9D
27B12F765DFA9787027E34399CF63398A187F41FC869EE069E63526832467A77
B4DB0929FA4A646CFC86C8298B5C3B73CD46006226A89C854B5E84868E6F3A92
044E80A261D482742673FAE6B6FC564594ABFA4B8537869B52FDF4DBB5AA32F3
F6B1F8FF071E03D1BB27C6A591AAF6BEBA1E7C7EB37C67F7843C67AF740B3FA1
B24F6630F31E906519D9AD03379E20373C4AF6A699F4C319CE41F5FE91146F0F
256289CDCDF70F847861AF5A6057F7D6B414B902D80B9981F0112E11CE543E84
DF2D8129F6BD9C00F4414390BDC7F6BC92CC0C7E068B1B3A07F73D24158770BA
F68C7D05C9DF6CD9B3CD11A173DB76961959B35D0EEAB839F55A6454176DE77B
E18696A4038FB82CA8EC7A29587516BBDDCFB12CA73D9CE75D74A63FE1E3E39C
6F360AE364B05486B6A165780B102D3375190EFE4B2A155873D91CBD73C68F45
94D2503C9C5246021EE1500100F14ED551A48A2EA6D64888EB5AF5F6192DEC1D
9700EFDFE0EBA005F20D91EDF5B30C71D51AFB872349ACFD94970A8F01FCC077
EA7F0587E45CA5CFA8294D816AB66F9C9BB71B0E1FBADA15B871D8EE26D848C2
D087C4839D0010E14031E38D58AEAA786DDCE701282C2CECAFEC91C334A538E9
FA2691B80144F1F5045D3C7F9AE4DC817283B97B5E25766E49089C48CB40B607
D1C5AF2B71B7611FE77A008B2FAE17104CE14AA5512822BCCF52D5C72B118759
9190EBF2120FA8AD492A7A1D01761D3A68F525B259F845681D61D02D28B185C9
F052844D9A5F91CBC074D388811C5D2C91AC39A18D8BAFC7BC4C12B15EBBC958
07D9A9B1355157D5649E9E135011E08CF3BB0A1F958F619AED1B8736C9788CFD
0B1A99A5617B801F6BAA76BAF683CD9F53A59042497568A8B37DF34EB95FC828
3D7AFE09177C33E5032432E7B2FEAD36E77E24639C0A32F749D69F2696457E3F
49734809FE9323A756E7A67C5DA7C09EC09D104723BB02264B1A10986705187D
B80FC9524180E47D5598012B5C246C0901DBE570C43148C654425B3FA689760E
07EAF3788541CB8E6460A044EBB80DC39DE4DD8BF8AC0A6C9347F40F1024C936
F46F1876B7FF605AD7D2A219A4461A5FEDC49022BE0219459CFD15BB117B5C93
1FF02C0019156FF9B33C8FDC27D67EFC22C9DDBF4992ADF76AF631C87818324A
CC8BE5B93C1DF48F5F7AF650DC81912929F7E42FD93E28F5E5A5741F21BAE160
F5949895EE6C0FA0D892EFA999FE2C5DF1BD73104F42850716BE867C265AA60D
81B6064CD5FF7B46EAA98137F157FFA8EA4B5183E5F01FC2CD49DBCAD96EF8B2
30D7AF6ABF63C7B805C438ADBE8AE3408EBB6C22740939AF7D1CA940090DB589
D078AA08D9537D35FCA9EF445A92EB8679CE6FA4827C92561FA791FCF09AE863
1F9B663BEFF06ACE224660947FDF9853D01D4145B14CEDAAA7A30064E058FC67
D4869427BAB1ABB64C87A1C2DDB451340D7C26F5D34D728AEC716C34E1E28EC8
FB46BBC06BFFE286C366E1F387AE1AD95B7FA1E454EF28C6D432330FEE56133F
3C323F865B4A16B7E7CB252FF301608967581CB87D76102213D51AA9DB260F60
E3B3D5BB0DB441DEA99EC5C5447C321346ECCDCA50E274DA06C85495FE3C25A1
7CAB3D2DCB9DEA3A6530A9DC501E7EF25727594A1FC144402F771B1F0A73FA5E
EC920064D72147BDF55731E6B46686F75CBC7B3C7E64ABAFDAB5F42B8E07F8AD
057937EEF2280C339828797C50449BF387B10D338D9B7F6284669485EA5CC04B
FBF033F479EB497E8E3D684F40BCBC4ACC9B770D36A06834F8EB5766595757AE
BBE195802CBCD1ABBB703074504E1A270938270A0BA4B1987CCAFF73E3C7106D
E30A0BE3EFD47261CBE2F070C212C1886BE23AA1833D2A527FC19F8695A97E7A
B80C1F37DC36DF8A6A8120413945FD120302CEFC029100F938BEF22202318BAD
BD95D136728FDC1F3B174E3596DB81DAAD6D68B6F7CC89EAAF585B97EE0A1885
CA97B6B408B0F26E1E161AC665CF5592327442639DE75C93E4D62391110D308D
A060ACD6CBDA8D002D628562A3AA062A1260C34FA700FAC88ACDD041B0F342C1
88E1BD05111BB6C907FF42AB4C91A33AC62315F7643D65D09AE2E7CD91690ABC
B0540B82B7DA4639A3ED7C1D016331B03B13C745D6F271E04D6009F314570BD0
6FCD655827CC511B0EE9FD53E04991BBB734596379A991607836C6EA74BBC359
E8B2E283E58B1EFDF083A5E8E4B299607534E588FF88B86375EA1EA357F6F211
E57F1832CFC4FCA4794B88834678DF284636A416E064C9EAAB35899AAD02AC2B
904AA808E2BEB39EBD72F1619DCAAA325B2747BBA4183B6E7970D7570F142800
663515DCF478C69729F3A06248D0E995F901C508FFE519245236002A7E67D5A5
23C43FE8BE4C93534D92A1F7EE43181ACD142DC706CE424ACD693258A53F98A6
DDFE57287EE5392FE05E2BD2F57575FE736555BC3404B9EA3AE7AF113F7E07A0
D4CACA1411C6A4C91D13DB421F0417B62E0AF86C53122B53CEE2CACC10C66444
83FB25AE16D4BB0270BB3B6D4561038114F98491391F075082BF479DCAE546EF
611F5E4F22BC2F6FBA41D80517257610CA9E08C0A5CB8DF5F9EACE47B0353B91
D6BC325A40096B76A83E87E4B19310E192A0A6C85401205247A0B658870BA79A
5F245F690153B8A62B44272730CC759D0D49C9206F6618A96BCD6075ECFF58FB
ACC2E6F8163A2478F6F6C9DCBD03608C8041F8BDA4312FAD24E2739B8C11F4DC
6A1EE18BFA4AEB8E8FCF1565480CC3C5A87BFC460AF16C5AB0833A996F6895C2
B27804D8A2C9DEF2E90F712DF8533B2B6D42AEA28A08F8A12C4E658954070060
6CEB24A581288CA7BB872A4450AC4A8438FF8C07C256081F5B8F3636CCE0A293
F905974A0B3703AB2E63ED92044B80E0D7A1352D7D4274677B103477A2460BBE
8F11F7F211B86E827E1D5139ED8A122CB8657D84E1A49C7009564214078E4A64
A95F3973DFEFFFA71A0A32BB6668105D9BD2741BD5A40FC4669AA333C31114D9
A835D09AF080C597ADFA035022DBEF6A090C35802BF579B755CFE8ED4AE34E3C
D91262ECF26813D6CD291B4421DE3C2A35CBF8C1E771146AAB3C5EC901634DF7
A794870E607211BEDDBFA3075B0F3709FC32D2EDF30433B865CBF54D6EF666B4
3110CD42E4BE7CB0CAE2E44AABAAE30F105376C3964BF75AB5BE7634C4199B9A
FC48061FF5440E6474701B7CF41EDA7BB3BE0D99469401FCF086AC64AB0039C2
838DE14670B744177C51E251CEDFA01A8BDE36275E76D3407C62A81FAFC4F1B6
A578130F39EEB088CDBB8BA055C8AF1CC348988CB7F481745A7D2C3B8999507C
609A2ED663E1D24F9852729627CC97B1FCB791BCA86C8000610FBF38625B8731
B31BA8486882520611165AAF3711B005AD3DFBE56FD2326018E88C42C30A58B2
473A33C23B4D41FDFE572B67A2E735EB53EB405E66F0FF8537674715D41D4779
37EFDF76CE5D5BDCAF951948792646FFDF2B72E645792A6F0189F2E1A89D83CF
08E0103EEE3D6C339D27DE74C90C4F52700746CE52747751A7A593F8E07F6990
6E7ECCCA4B02E89E47DE705EF9AECC9BA997ECFC11B62612EEEA9E08BB45A93A
475EB91014852B75FC3219A3777E7F26C3A33D8BAE4628F7B512CCA82305B707
B99B0F3343006CFBE10D39328466F0E67B8DCDE49FFEE44F3E38E3B8D2DA1375
742A06D66A310C4AD5E004FC3414502FD8BC997C6B5AB50B0F6062C0B2D68D67
FD93CA0F1CD26CF513C8169AA0488FBD351D635EC7BC64CB2EC5F4601EF20D8A
8653B5499A6E4105C615FDBBA3EB4FC256CC7925448921F84938E3794F3D0A66
860E50AF70AAB831F5C7D0745C84A903D73F4DFBF10052B74B34C74E2B8968FA
36F25F084443E14503EF27BB6305CEBA4B6D95267D104F79ED99EECB29C6F31B
F219D2FA8083B3A2E73D7F248AEAF600B146D2E8F794C1501CD47D21AC8F8B1C
D8B2BE97272017FC8176FB09880326F7512A32BEBC5C892A004DFE16DD9CA9AD
B963D51747983ADD854D04B679187879EECFB581FBD37C97246458D3CB5E6C15
33AC166495BF5FD6E14C2D2C50004961440B129BBAB5BA60E3BAE18B095D542F
E7142C6AA828DDAE78125E52385EA3E898611BCC73FFB14623F7224FF2FCF4B4
E57768B97F772AB34E5A073E660AF4C16AF66CD6F7CE4CEDDAE5991E8FD27090
BB20F582D459481330BE04C9965C87B89B8C1DB7526B19F7F0C20B11FDB0F60D
330362C095AEB08870DB22CB52AE311FD74CCBD15EBA51B02C59472441C15A94
79EEB0467B1DAD8839F150D40C92CBF60BD74905A62732D3D26328BE0FE77CB4
ED988F593D57A7B9583ABF3D16D31BF812A6D83A5A4810EE5FB2D28FCFE3D0BB
099EFB09CE77805AE66225540A658A9CA19BA612BA96475D3AF367496E34A2E6
3D693D006CF3E86E978464E1A2935F3463195DE95A253AD84C9B7EB6D777900F
38D2664856D62E28396E84AD58C190F60FB936D6C6704831FC837517D46350DB
7B58B69FC3F544455B6E830923968338DCFC00686717F7807B039EA27C02E55D
2CE3CA779EDE7E617CC3F90E1430AAB6553CA374E2EB6CED1694EF30BBA25188
1B07218CA48BC688FB299CEB1030A8A9959F374B75EA10CC4E7CAA58228247DB
0CCB8179C3AC010F219933FD52434A09C7745CEB1F3A9BF9BA9060DC7ABAD2FA
E0311BA35E3EE570077DB47F2BE6FC47EF63580A8148AC71AEE0DB0189885F3E
095314744F9EA589DB67E8ACBA7603ACDF0BB64DC77FA78F87D37909004ACEAD
5F98337B73527537B8FA58F86F01329F1C484EF428F93C86FA9BF1093DE1422A
1AF70F0235D303D28DD1EFB91C0F6EE88AC486232CA6612E23D24F35302C4003
E590FABBA2C4A61C3CC62C791E25F5D42D773500035ADF70C60DF4B6A87B879E
66D5E87D245B9BCB8894E90FFC97731F1B39A4924822B5265773A5E86A17A41A
3BED512EEA2757F34ABA4E9168E7D3DD8A0047778F230D28DD7C36589B1EB891
7C876D7C780E4DDD73C0C61BA4F2898D6183FBAACF3E77484376838B38D5CC38
BBCE6B8E9B74F1559B239E6E31BEFBFC40BDC0DB7EA789BFCDB4369042422029
22B01A8487EEAB7DF787582B92527A481DB381C01A9C046451CA174225D3BF18
7695B9223A7A68309E172EF68851B4157F49E65DC46F1E7A5199DAE74FDD8EA6
411C18296D8DFCC274FF0AC85B3E027B9C42F48E6B641AA775917923B7B73834
95B1C2A2E7A4D5FB2F60C8DE36C7E4D904EDF9040F47F468B231A3EAD2EF7379
BD7B144263AF02EFEC13B4B98D263364063B0E4937FD55E0974A9EAC5C830388
07C1CF64FD738FF07853BDCB1B330052B6C61747B0F82724330C4E3CDE3293D2
4AECFE4C6EFBDE4A46651A60499D77EA5ACBC92F88AE6B18317926CF249A1AFC
3B10239FC8BE780EE1634130C75C7F9C638FE616B4FE7EF39F517A6D2F7B148A
13EFFC7DCD6BDD329EC69AF33E7FAFCC19B3590EB475E87B66615D5CAB615669
57037AD6A8BDEAFC94D72CF6937300AB00823D26D993F1BEFCA78FE83527A21D
4F3822F2C4706E7824DAD53EF43DE3368281B3C95CCE251B7D40B69E0EFB3025
040A619E34F538912B267CDD321705034C5E1AF0417F99C38DC96304CA31B3F8
BECF8FF27D73DFF268AA10D16573EBE7B59F91CD03D9B0FEAFD0E93CFCCDECB6
F03632B501C0E2A0512A55E31E4096098C3299DAAC4BD9856CC30555FC7E835E
DBBD3E5D433C72DFCD87AAC9461CC33C645D6B43AFA23B228D1DA92274F9378A
C608EBC8322E8265501EFBCCEF0CCFE7885DB05ACD2734B72D6C3982F12FE01F
DE04E53142FF6442DD52B30FB2FE0AF47722E48B590F4D9D412F7DCF5ECC8387
73EE320BF8BD2D6CD8DDC5CA413F4891F024DFF733D399FFFFC85F6177A0DEC6
33BC4444894EEFB38BF0435DAB991E6CB142AF0B77ECAC682AB45C5566BE78DE
81BE1091BF7F9BEE65CC5D70188C283F3B0F9995EC0F545B0A4A6B09587C4C07
99B8DF1CE94AE92ADC3F60AF1B7E6C249DBAB7B74466ADD9297D8640865D5A7A
FE80CCC423CBD01E69D64CC3CD5B6BCBE3023C13C1003EA18EDA594D90995A18
7369C0ACE19F3B608C08812A3F39074F7B46984300277EC06FC91C4536868B8C
73CC9E2C8C6675BD9ABA963B5D6460B3EE6772EDECD88D1E706083F179C79C21
54E5B2AB7F8B3B78A28BC434AF4C9458C1D9E3811F6D24F00B3EE58C56CC7E9C
F8704FFCAABA41F4A3FC77396BA83809446D2A7A9B07CE973C274D0B8C2534E8
8CC4B1A34D712811438534DE5D7D8879EB7B2819BEA850AB28BEA2DDB86AD010
A790F2A96F1D10C8EE6A8E1C464F24F5E4E1A89954B77EFF44E1C7C5B7562B08
CD534072AE76A679EA447B94DB5CB272D0E55C2C138EC9B1AC9CDD2F0925A0A6
51920F48701D6092ABBD856A3D84C949BE73AEF3E76CF72463FAC5AA7A2799F1
C34DEFA40C5ED0923B060EA6EEA5B735D0D62E41842C07B035DA435CF7A4CE89
B8E52E6AC5F1AF9467E1D6EC66D8B9E9A1BB25910BB1924A9EC4985184DF7A7C
56C11ED692718BD625090B641ABD0C0117FEF6D00A941C77380FD8BA9AD26E59
10BD945DDA5542F425DACFE5BA36DC4496F0D49D1161EACCC4DE5819AACF0C87
986CCF6E14D41BD9CC986A005086494D4A35739A7DCB031B993103C259CF4C77
4C9505F9C992FEA34217792D499083439996D196BF512EDA7C30B71D0BB00252
18A67E128C8A2FCA39EA99F5DF7E3F321F020B7FA8553EEAB9DB69680960CC7C
BCB5E65404F67D31EA5D4BF669B177DB111E96164AF8420A7A563D795D8E9E60
F5222A25146E78539970EFB2D13C855D11D212CE13ABD5A5378982EE542D1A08
DB3C631E9591809E3786E2008F21584E25163665B914BF0F5CFCB0E9FA358CC9
B7161D6EE79DBBB4710225A1D9347C4446054FA3E4477F1880948CB3A43217F1
6598B835A0B939B2A97C078B8B12C2B28A050B50C32119986658B9995B7998FA
159F8AEE7E935914848450A58AD74E514145EF64B48820B28BC89AD97E03D0B4
EDF76256C925B53D802D94278A2835CBF3230C75A0598ECB1CBC2F70B1A43AFF
3862063C0BD05C80A92D2DF307A64B286C024063A70778ECB8E58A753A443589
9E4F90F0AAD555F9C14C3A1AD21396E0816185F98965F0687DAEF3C721575FE1
0D8C3DD512B317108280D8DF30D8CA287A2B040C71F73CA4084F53401701EEF1
7EAC1C7A901496F86B39EFC0A4F091FDB2041597A8A577304663F5FA4B9CF430
BC88CAEA71144E9FD272CE6A23BADEFC0FC80B646A2FC08C849ED7A0A3271C6D
709209D8E53BECCB5A4D2443EB3A089D59FC35CEAE5937EC7F21EFAF41F1F04D
5C4FAE4273D0C3A4E9EE65534F1926FE5B3F9AA2F69FAC0111741A86BF92C756
CED0CC859943A87F1CED6A404EEA0C4887D955B779C36999BD00DB9BF961F09C
CE06C31840AA9D60068228023ACE9EB3EF958B7215007A353D767D8D1920B9EB
0216B712E5A1DDBB6AC3190070D68BF541CC8CDB125391D8F54E6E96E97520EE
266E21EE88740E10DE65574D3B2A8433665414C4E20D63B9674E93F280FC393D
14EED7CF49F9A0504DE64EF2865217784D0C2D9161844ADCA3AE2BBC74D0ADC5
B34ADE0644C0F23A83EDC0EA4262A17C8D17CC29ED048CA1D1822D1FA89DEE80
1B2614E8629D27C2D02E594D11AB34CBB7D0E2D9042C8F6DB74A31E5E5ECA83E
0EA2094EA38505584D31B669BC4711F176698CFD9496C05FE4F6A8EB807C68E8
9469C90A45164A894F551A6EB2B7D6C536B130D84AB9618A4CA77BC722FA601A
6123A48DB78471002B5FCDC1B9E7775D3F365C784524E0BB5EC0237B11F051AE
E71958B056020FAA127A42FFEE3F61DC17C4ECBD256EC7B0A58D317C4EE9846E
4E29DDC619C0CC3AA583E948D916658C0EE19BB7E05C36CD0DE61E4C1BB21251
B3DB82E6E6DBAB14516A2C4CC67DEE79B9C09BDEAD07135CBB70B81D3DD53483
BE7CFAA66508B030A916F3A921AD5E6545C414346FBDCCF69F29187B31972F8A
7CBE4369FC52A6A243D4ACAB37996C354110802100C4F99518B09E9F6D1B78E7
2E7E52019EE8FC129829845433D845EC970C7711DDE28B2A220EEEA74FEDFF7B
3FFB41EA6562C59C5C28F859D516B562BE6C8DE6371F6B8FEAEC6E72A40B22AB
733DF071D6B92B62F1651B8F2020FCD23AB28D932EEFF25B5D70F45018920ED5
92D9E9214D8C12C157E9272C09D25038F29F5128D4644ED2FF05FF7E29BBBA2C
52EE0385F33690BDADA2B0D538EA67D7F1B78D3C62F09DB17818A5F1AD15C37D
3EB3C142DF233D06F6AB2EC17F47F22BB4A70DCDF34A78081F8F287BC458302D
B580277A6D0C45B9BC431B82BF1ACB4105362D8D075DF56636595DB71C00E11F
7379876A9C1508BD924D0D55EA88768396EFEC282EF25C6D7A8CDD807B3CE00C
C05F6CA1D87A1C83530D8C7E7FBA63800A37B6EDB5E58E81BCA267212F3D633F
B90EEBCB53A951089E15F99959AF4B4F93D78FC3C4F94137FF567D31B488B661
F8C45EBD2FB0F0EE1D4A210688D4A6C582C8329607108080263EB92C9DF6DAEB
A5C2E1ADBD2529610091D8A9F09161A41BAC6A15727CE914A607625703E09CDA
5B195BF1CC49F81022023B083A73BD8A2BC2BA6B2E0C810759593AB1BDB8C2F5
0C4E8BD60246003C9329B221ACB437B465EB4CFC51C2F6AF138BFAFD1B593207
93EC60AA3AF4A3F68AA5E11F657F898F5DC1CC2D57D654286D5C2C2D8E6A24B3
4217D101BAA30682DFCA92E454187EEC90EF1042DA786C6234FB98DB85E4474C
E2AE337DD20637C60CC7B2FCBC3D0962A41460135977020A5C624DEF8B936112
6F6129978BFF0E40DE78F4C3655FD9CAD30E5BDC9A304FA60B5D1B4762BBD075
2ED2E819C5510F03B635BF3CBA3CBEF49E4B5F51A30DCB0AF7C988AB25F12A87
D1E1512FF7182282FAA045A4D5ADA81C5EC47F124030A62E881B95A5E3B23142
8FC3128F05E48903125A5FD3D51A303252EB1F60D22EBD0519769E1EC4F2201C
A9FDAE790BD69769D48140DDE065ED145439ACB5E4B147A95AC85CA4AD2A9FCE
73A037E51ADA822EF12CF28616E3D257D75486E208F475F097D11CD41027CE5C
369B8BB8DCC51ABAF46A54BEF563C62E2C93B0CC107A3BA10D5367BBAA305E0E
4B15BD8CF0EF2E81E760959E06C4C0A6A9DE6D0A5C4BD05BC6A243CD90CF5924
BC50D349A55FF290FD7E9885CC6B050715AF08BC9FBE6FE358C1B49B2D04FDFA
CCCBB612308A6A0ED3AB689244CE539D0F8715A7855891FE38AF4673CC717264
5BFA492CDE638A692648CD7B6952D4A7A5BDFEF661E9320A1726A76F641B1D9A
A1AE684E1539E549972C97321FA0710759B6D56F8C61B57E831D36EDC9C25E49
3856E22BC610625B42F3553501B1BBCB1875219A06E3E5DA079FF4AEFCFE3AAF
E56885C8D17DDFA01990CD82D47810B1A0FF6AC6CAA0C3D529C43FD73A6DB7D1
8CEC651DBC262FFAC18A7BE46379D9689B689980FF36777583C1BB66CB8B49EC
8EF4C6FE7CF764B1903E3846919BF9F23DA27B5A78D48AD4A103B99001815C63
99FBE7D355FE8E5A11128B8BD711BF12892824F2F2D192F0EDCBC64BA8F67F4D
880FFD8CC5EDA3BDC42B5E3363A031F994326E2E2EAAD7E443579A012D18FD7A
725B42CBFFA9B024C740B0A88C6C163A2447D8C7EBBE4E95D93F0E800C919787
CC67C7FB5FA622B6FE07915A88C2F503E2C0C421A277303A6455B248FB866FD0
6A921977AB2CBBB8A87C0939B7A044CE97C94B566098D5FB1972C29B9F0AB515
B06B462BDF73CBA7DE351875F01256ED0597A2841500B51C672DDD9181CFAC6D
5546FC9CA9B10C1E4E91CA5F7A54D5F433E3C4634AEA50366D6CE8493725C5A7
D11765025B996B24C511AA2924EBABCC25879DA552ACC6FC5D8C67AF31DEE2B4
F08790D161F69333B9796404E186AEF93732E6BCFDDC80F39F89FBA4908C6259
39A0A69BE82F083BE7E00E79197F001EEBAADF6F9D30BF27F857FFFC90C7BF80
F1363A04FABAF6C9A74D9037CAD68D730C59F8916DD217E3C33D48197270FE5D
663FAE8008AFEB27205E88D8256DC4F273989CC83E0F0386C7635309B468D8FB
5D2F63E01AEA9875DAA0AFB1BF50C8401F3906C0803FDC57940BD422AB9AFC41
0CF5A4EB59A67192BCA9ED8B4D70ACD4EFFD55C413E3B6B66DC8BDB8552BA01A
EE38E1205B077C2F2C6469359BAB71A62844ACD08BF7E78075EEB14E9C845545
BA93C21B15D8D33995FE0BF428FFFB8C8C80AFB8C867AF2D6DCDB9E94C4CD160
E676E300BCB6143951019E9F254AAFA04040C494B0AFA172887001E098FA34E8
9ABAA7573BB4B73C5EB5611852AFD27654A467FF3CA388E840184B63288213D1
D0B9A91F0F83DAD12CFDB6168FAEC0D61FB468AF285AF1BE306515F89C9F723B
407D90F4C0405AD332EFBED44A2D79E0C68187EC7187A3D4B4191E5FE7E08A2C
DC45E40E5DBC740B540B1A42B6D057F6EC11DC7BD2F47472592808C6A0D0CB26
5CF381F02FBF83D19176AC10FC91325361378BFA02187D5A88AD6FBC2E70959B
9818BEE371A0F7B1AAD60C9CCDE3769D703CF2BBAADCAEAC67DA6774FADFA38E
68BC5C2E7CD72797017348ED2C60EE57891B6A133B6C9AC1E9467635F7BE0C88
F9B0408B410E000F5CF5350891A215852C4772A5AF5E5D96B084302FB8FEF484
4A8FA4414EF33D9CCC533C0356C7D6AB6BE4CCF1C2A978C9A8DAA2BC57EF1A5B
A1B001A60F4D9C07A3E2A9AAA2CBAFD14FEF528B165143E7460A1AA0ABF4251C
5C5097943F10715FADA8D629AC7265E93F600D76FE5FB7667A6C08D7004D0889
06C356325B4456170E9ADEF02464A57D0CC0A750860DA0DC6418E070C5563D8B
869B722DB440EA141E4A7D5D96F4DA4814173B9D11FBAC162E125EB75E3A52FB
46B465E68F0757505774CE25BBBF3E7B160A35E96685E39DE90AE39CDFA8C8C4
F5D509D9C3917237D7D9A9A9E39661AC586B9C4AFFF6D42D0B1804227B1F1719
0B56EBD27CEDBAC9BF787C5A1C33E62D7A8D23C21F63B4642608AD851A31DF53
59FF34E6AD2C296293BEEE1896F15F8594B13E095751DD7638FB4A400A7141F2
B42883BA8C3CE64C4F963B32AC26115D3D288183220700DEED71E6712B81DC22
CDD8965A3E5E1D4864AF6B9D3EA5F9A365966424B74C146E164A763D1E226D96
6A6798BF0B806FDBCCA4518DD1E541D726749A101BDB4E2E6650DB6CA8EF4C2C
EBFBE5464EF4114027995BD023F95E71A2A3C258F7D7BE6DAFE1F3D2C8BBE193
F6BBCE936738F594EC4DFD7D5A3E8857CABBD94D94C0A70F58A3967DE26F93EB
7C1019B8A18D4135AFFA334C617685D05AE401C710E8EC03A64D8C462D8E46BE
0EFF74C798D0EFD52011E7FE7D52963D8CADD372D42A761FD006A27B6DFC0B5C
B2A4054EDC8C7A27E45795A33233C87D3DA3F5DB311E5672052E05C3A5CCB847
F553F92756E6730A8DE91A44B3DFA2C96C256084D6DA1CE14AE8540110BAE01E
67A6F35ADBD95933B9929DB4D87C8B13E83EE1FB4E3367DE4DB71312CBB85ADD
21D5A7AA948EBF55EC09503BF1AFD89227A574BD8D6F6283B9404C30E256A366
A29BE5ABE7879DB7FFB127700DFE753150AC90EE56F9DEE0666C2484BBCEC64A
C7004C28C211BA97269BF4593E30CF027EF28C6B0553B63380AB3A6BA2CAD0F3
E3F3693001CD131DFD0F72F23798CE5DBFB02005345841DA0F7C04C50A224D8B
8A87147659ADE361698126AA71F35130E88AEB59338335AADBC9301FBD0E96D0
E434163479F87F8455B4A781ADCE73A0EDF0957C9C1DE3C78A0AAF784FC31F48
C2302AD7DDC579F682066F685F9C0A123D16F1D242949004ACFB19DCA7A8046D
027B102DC342D1FC98A1487F7D603DD37541E3475525541B792D25384D8E7B9E
B3EFF109687401A703624E4DB72682A7D38E706E4A0319A17ECF5CCD497E66CB
E3728B6A61D067B47509E685C1A00D8227B51A0849DB90BA7AEB9FB0D076BB0C
05148DFD5027DA0119476362466410C9483C184B2422AC4D8AFF79F17456ADEE
301E42AB848A9F7681E13CD4022EBF760376BA6097443CAA9DD92C9048EBA034
9853DD794B011776C7A572D25EE628C3CB4A63F4075EB5DB9962DFCB9048F83B
76C09EA5EDF607C614359FD9166E7A8B26B0F41D7874110FB0AF4CCCA650EA76
77047BF96CA49D0F9A5A63AA4C9451B3B017C0C2BACDA7C424AE573BBB163DD6
6E89F2C4E2B1A15300BB08D987A48AE73099943D762D20ABC42DFCCF4ED0E151
DCDC682D9BDB7F3E6174779CDF1D7FD2815F9092C346805F08F028A2EC8C5F2C
1040FA69D4FF41728EABAE9D5E929B884B129B873E8672B11972C30ABF83F806
A2A2C038FAF29A9022E0B64CD190A4AF3020654123563C5D6ED62F17DCB7CE77
697C7F524665CD2AB7CCB157D88E49686B67C20DDCA647E66B811F82F08DFAE1
979E9ADB992C57D4B359D8DC1A188FE10A825C38395E5CBDCED6A7D376A87B3E
631B755B2E1A616B8CCB6E75689101E98FD9DAEB49ED84DC549418D190B1C581
260C7A5203CB5C00D654F940F3FD327A316832E83149C3860AB557A620C0DC38
EE876A47F399E09D4ED56A73AEA5A2B1D5C4C6A2BAEB3A1CE41D25BB3360316F
9612A274387B592FDF604967716D50301CEEA02BF4DCEAC117EA056D12D5D160
0E0387E2694CA97578BD38F3DADCBD623C583747E437232305776F93F69C855F
721246614CC4994EBF3C7F0664C431DFDF2CB54818EA5B7CEE4C5F9D9F275E78
9078084999BFF836543F3F01B364B5ECA57E9668509E29D04B9A370EE589E211
3FF0C3BD941AAAA2DBCAF616A65AC8737A4AC67FB571EFDBB7BAED8A49B82FF7
9A46530A61F524D508AAA6E274592579E9B01C3D7B00ED0CB08181F8644C300E
59CE541ECFE60A5BB199A800BBA9D771FB859BCBFC1D7296DC2D73E4F3173249
83CCAB1A33ED571D381112138A1BF78793F892878761409C3CDD2F28EA26BC23
A46914E1873D3A8B1B7B50C7B64BB5938E855161A7816EBB09715F3B08EEBE6F
6DE542683636D924530EBABF6096C917F1C15DC890A8F3342F0347B8ECAE8025
3528B8DE97281C80534C200D797AF3EA36FBB62B300BD4A7081D466D34DDAE7D
6985C56EF5F07BBA1103E9EE0D075DAFC43E86DBF7978DCD4BA6FB6FB451BACE
5695306057A41E51F1998E85603AD864784C4445806C1B988B2CA937C88F7F1E
8F9F5A1F80D025B7A76569BC39136E35430AE5597561A24234FF9407B9F2BF38
89698E643D757A9E06C1B23B31556DD589E26D76346417E4012D8A2996D64A48
3CDFE067EE6B94AD8AFFE63B3B0D2649282DE817204613749D30C6584C04BD6D
37FC51712B6C7D9E98586E6ADAFEEBB1443F9C29AFB5D1C3C75A8A0D98063C7C
ABC66BB81FE57B9C0020D7B7E39C5A96A83897631BE5192FE1E7C6EF092C09B7
FA7E3D7B28BD5233D47FEBE7D66E3D271478CE05626F53E25353BCA7EF8CE615
F4E1AC3A6C1B0BECE6D4EB7B28C302ED60E0B0B33FD8694DB22F79998AC58F66
D86D658A83D1AAEC205BDEC342928D6DA1E783888EAC8170705D0910E139FA3F
1D60FB5916986AC6134EA24290096F64198C14E36564B293B3A5769557B26DE5
0522A84E4138B9C6807A9DB46B6E77E60AA996D7C11892876540F8DCD4D91FE0
CD4A28A465640F610F2D84E7E40AFCFE3C3F7ABA42D187E41DE98013A2236444
01D631AC7585A77E9427925FC6CD44F4B8B3A7B7AACF39A363FBCA792000B643
8E446F32A74BFC72155EADDCAC54E3849EBC7FCE53938D79BF8962DFEDF25B4C
CA825DCC6DC5C7AA87D7666E898B0B9DA37864B382F3FC3849842D6BF12616F1
D45745A471CB0507FD96EC52BC08595F96108D1A7F2CF1EA1E41D61C43BB6D67
B77DF1E91A093FA3E8BA66A32F788634C1163763C0A6CEB6E2FD07D94D831468
A16FC1344AE9D591164F6F2C9A492D817A24C85A754EEC1BB2C5A2EF97AA88A1
AF3326BDA453F36CE53CE771BA9431B4DB8B94836E21326702211C04B48D07AF
509A9B5A4FF2046D6F25EA437806736A05BCDC43C5895E312DB3A0237D88A2A0
A211A6CB9EE39CECF03B2BFF94A72CA64180C30B1839DFE35C54B8E1A0164655
EF6DD949A8BCD82F0C28BA90147471641E67113DC6A5DDCCD78FFF41DAD2AFFB
0897F3823F6A3BB3DFC7E998C82339B4803BD0F0E6CA23E0D97980F20EFD9B92
42A75480E69F4F601E418E0B48B3829600C3DC23D9AAC458990B2026B0BC1823
0A8322B97018A3FCEA8B13847F3A1572B27C14477FE1A3FCEEC5EBE9F5893268
BEA14EEC6038D19102980D858574317B528A73DF0A772CCD6C636F838F7493FF
A2A96BE6842256A099A3658E33B13389794F12094DE78DBECA9FDAC09F0A6597
5F32FEC44D286AF7FE1E6A35BD69B6E037213C5AF9551B909674B8A439870FF2
49C208CD410E83DA87D190E49DA6A5A2D4D0FB59A400BC60B3E77751C27420A2
7AE311CA1F04C1F12E59F41FB764CE8CF2BD2DBD1A20B384774FE310737F170B
9BB1F3633A1FE05A0CB6C52797328DB53BF4C610ABDE3D88D17211CDD6873F8F
9576D8732DDE631C8470CCBB7993CF1ABEC7CA3B08C4E2085ED10C2325F7C89D
A078876575418E8D0E00203B8068A430B409904C19B6CB8EE7E0585F0E658DE2
D9DB3E67E0716C148D1DF2967BD2F56503B9732BF7D4A8EC8658C5705528CB89
BB287376E3D2B27EE4D35AA8D3F83FED3A7DFEECBE699645F869BBE621417CC4
51AC58525E3FBD0223759A570DE0E0D46A2CA19A21E56AA1D3A0AF7BCC25BF63
9D7557D08E9A4763E1993DEB7CE4EB7FE6B361175661569BACF9290478CF1719
F01CC0DC068FBC12E94E7B910F1C199B71260A2C7EEFFCE44FC5224F352F685A
A5729CCE31217DCE167F4B31BF098904F92FBD3C0C22153D8DD33C9595226019
AB6DE62842F08CC73F5D0DA4FFDB85EB20B37718BF83C68D1C3BE3F2EC764133
867A694E6DD88417A6ED356B8A8886ED3EE39A48B2DAFF0839BAA3C5E9211FD6
5954B39B2D85067C4B49D13CF431EE74FD4C57FF54B92553C95218AF5DB5B261
AE7AD6D30E22C13682BA4D371138EA6A07CE358D28D43DAFDCE8F948046F32A9
AECA29948F49E57593E8253FC082B0DF92B117F35CC9D5F1000E64BBA558B6E5
523CE37F2D7DDD1CCBBD389FFE1B8FA525A96A86F4EC168A520A5456DE0F3731
D49CF881F18A01BDB003C3525692AB83C5E88AF09C8E66A6F2DEB07AAA0B8188
1BAC67C6CCE5B539CC9EDE6CC2688CD4D36BABEA2F5AE0999B899260AC2E6C55
82E3EBF8CD62E386BF347F063DFF088B846452E64DC94FBA6A9DEB9D757827F8
C1FA0924B85331CBF13F534DDA1DA88AB9CB60FF1342B3A52241000610332F51
27E2BDD514BE742BA310AFFA57355AD6B3B15CEC09709C750C0F2BADAF06DD35
C438A5016E9D16204C9D6FDC7AF063BD14B7392BF7BE2FC92A7A32ABBA008C15
B603C4B04CC7A215F95B724A60F17C1D12881FE2F73F4BE9746B4EC8D9FFBCF1
263AA1435807CE7A8462EA4D0A2E8214F66B612FCFE53DCF2FB3F5F2443F8811
F4ABB1C11A80A5CF302500D3F3EE8ED5F289B719E6C01B4D399DBA97CE54C04E
D4C248D35B7CB7A560BEBDF77570468969681F7A8533F568CAC5905A7D8798BC
5F7A12CC2B7B0327D782B15853A760FD210FDB8CAAF2970E83E7D4B8B616B7BB
B28290873D65DB474E4CEB980CE9DC22FB265267147C594FDBD3433D565138EA
D8AFFFB1DF0E578BA55D31C5D4D001BD85057432D79AFE4EC5FB5056C5BFF44D
835834BA18400DF3656FCAD6F004BD39779B07F875922F94156FB5A27CA3E574
91963B54FF07E26394E061860C869511CD453139ACC10F9E67CB71E7193B4C52
087840E13795213BFF2DB659ADD1200AEEA46F5B699D874ED2A271EF3189D1A1
408E1A30CAACF72E59E908B16E4145179DDA6EBA46B72389A055C33B95DCCB85
C2E1D8D3C6C7B998DC4C7737050DF2F24B9331B37EFB490345DB7083742AD0F3
213B16613D7E197DB913EA9648F93172CE2F2E7A1294987F23A88723FD0533F4
52F1B1AFF02109A07F9623ACC0C0CB8ED1FAEBD172182FFEE348BC374DD46097
9FD594620E7FB49860EEB0297EC0220C91F8BB507310DE5ADF02053150429F94
3580F50C4268C51C937D8864D7FA7C37910C13B9B6CBBB86FF5EE81DF928D167
ACBE0855E0CC782DDC0965E4131E3012A3777D2CC4D287323886845CCAA039D5
C7A0B30B015F0A84A668BC841D4336D9993F952ED312805B6B9879042980BE90
31329DDF12E7AC49910C6C772E4ED91F1DF7AF566B3D7353EEABF6461F0330AC
31D60C02A44E8F3673D1CDD31A77310C78D058E725513492C3588836B0BB261D
6C7B3D8246A88C800FA6572560D37C047A8646488AC7B451D449B6C1550CCDAE
2E9422F91434BD12BBCA7EF2E8977923FCA3E98419D8279D6B5C9A0D650B44A9
80992936A36B3D2E111266CA37AA4A3469047144C4475698B5D6B2A2F682836A
7E9FE659CE2FC4033AE9BCB1C71668EF55B2BBB413FF4B750498324E1E691B41
20D519E6B6EB4977D8FE5727DB05134BAAF48F51D6A38417F8220591138A46C5
366E75DF6903DAA98AD405413B3B937D9C9371CAEFF44BC027A439F822C8DCCF
F8910F778A10D97A5E24D676E7FAB1AFFE969BC90B2C0A6DC162877836C4EC88
C5DB5628F4B194C5396127A0EEF288A74F5B5DB488F6425A7ABD5DDD69E00A89
FB2C7B9A93A91F6C6699B1DC2FB188C8E0D2DD61A71643F283CA5DB0BFB09BCD
EB136D2CCD98119C1116A6F420813389E1BB99CD93365903F65176285D4E82BE
531087BA50D1DF8D4FDA833319F7D9949F47F23F12F62F356D71DE6D6F751414
F8849448A7A89C02B84BF20112CDE70D0A81D9A37C6EB81AB09988DEE77CBB8C
3030B256FC7E0F46FA19BFE1F53993819EB180EFE629BEDC9314736E908C4162
2BF7D7957D7337B960230BCFE43EB23349286BC42224560C53E4C27D4234F2C8
BF2690CD3E0C12F9217CD01AAC8E9BE947C77B7DCD3540A28FC4FA121DE4EC8F
5EC71F30EA7250A4AF1E47880F5B1504EA4DAE05DD39D7D7F7EE9E663DEED56B
788FA2C8E0C0E33AB64F14E3CBE19C644C00AE545E8D9A9481A3911521519322
52568E6E275436059B4BA52D6954FE030D6283A23F26DA5E79B1C182CDF4D035
E47AA596B273DD46D4D2F35A1CA4B0190E191E921521A4026B997ECDFA03A1A1
A5BBE621EDFAAE501EEB59C9FFB26B2436CC8BFE5B40C451D2DC54742F6A1108
C3CFBE17C610241792CE92F82D2BACE8BAFF133B88B17B06418537EA04625248
84F9E4BC1C6CED23BB3042979D53166FD24EF33DA6BDC9303AE1673DFC93D543
0783ACFB7CE6C1AE9504735A8E4CAF1E44C01217DD58FC5E0DC4F847FDD6D621
7057A4603680C01D7A62C216ABFEF92867A23C83B23CC08E5D5B7FAADCBD4922
2EFA44CC22C7F8F71C89DFDC77F7A06657CBB1257259D8BA546DEDE67CEBB2D8
D0EA842A0533BDEE9447DA85B4DF444330F556384146E8C6C0A4B17E38B877AE
97F2CFCCA60848EEC7C5F33CD2BD81FFAE6E0712C8F7F12D5D1CCA72231C67CC
70669E04FD58D5440CD24FB1A264B8458811B7E1BF9AEBCB4E9F7395666C257F
FD7A58EA0C7A3948492A1D1D5DA062433FC7EF249076230BE4A15BD0A1525C71
2E076E3CDD66AD344316E9ECB31EA988BE8D55D07ED36ECF37711AF6B8967613
5B799779FC3CC885184B3F420D1CFF4E1745710A0A28A1469C089939D282479F
C7AF2E3E0EDE458E36A6CBD571E2DEB771B2B3E6B3BC5F3F5681C1148FA23FF9
75061A404D5CE47B9E087C221EB9AFFBC1DF48EDF14479D0083CEFE7514B01D1
D97FB6663A17D9170AF0488F2C81DDBB1ED047071EFAFD4751C52E756FFD185F
2542267EFF3B1023A50A4F34EA6C8C692D1889B4C678CC2B2B9CC26B50A2CE2C
98C323A41A21E965AFBABBE28B7EF8F90855D3937BDAF41729E669A1B42A9B39
E77C93904BE6307B417D0F3D88EE3E80B8E838B929EE80A44407732D4226940D
0108060670817200ECF0466CA6F744FF44F84664FB5EB692B0077FBAC142C188
AE017C1155DC42038D09FBD58323E711EE75B4D51F3E171BBC2B4F511FEBB607
34C1A01D56041F0CB932EA623EBD229697F9982F459B40D354F438B9A849B8D0
E137F3488B2DDAD320BD2121912FA9792F72CB889FB0B72F28FFABD317D98465
C24D739F29D06DC06E7F1189FA1385693E6B75BFC0D523A5457249C010880C03
CF5D16ABECE66195F40CD1D0141018987A387B1FAD78B948D3C137937AC60BB2
C272A1C099902A231C24BDC7838A9410E7B21E0DBACF3928F7B6DEB985CD5A98
A3EDC071901D17E26232FB29D6A24B2FD482578A535E19EA43F036510BBD6691
EE3A5ED76877966F9C590D07733572C4C243D96029A8DA460BD232CD34727F5B
CFAC3D3F1EF7D9DBC1298E0B7CA284D2D531CEB7A21C0428F8E0995F3F9E3593
7752CB4BF76E876CF1D80E4A895B0628FD9CAEBC2014155487DC6593FD9565DC
36ACD537844EBA3044DC5FBE47453B9B6E6F3EC48ED1875ECB764F2EE667E36B
EB984061997855C4C767CBE22892A4A747956D2E542A400AEBCAD76C436C979F
43AAABC7FE35E9E42B3DE33526878D37BE1992688B3389223BB3B4975FA17E76
6E5FBEA60B2FB873995ADEE7AF3D2A864F6BA3C6C6A8D679E3E3D6D054A69DFA
332759611E3B05EDBF7E199717524428CBABE312CB054E84BD34E05BF87FEB31
9AE3C9DB2AD011AFF47872EDA10DC4967B9024C4471F7E0197A20178490629AB
4E9DBC28544EF886716F2999814C2D86A635FD7A7F5EEDFBF91921B9ABA2983E
EE100F235529FBB06FB7390D75ACAD0649906BD910AF679AD3277F15DB34D3E2
862AECB63CEF6F0DC30AFC442B5CAA38673AA2036218D4023704AD5FD5F5AC0D
6C6B604C0186364CD501756A96AC5397956B7C3E0476DD8ED9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic12-Regular
%!PS-AdobeFont-1.0: LMMathItalic12-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 833 233 0
%%EndComments
FontDirectory/LMMathItalic12-Regular known{/LMMathItalic12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic12-Regular)readonly def
/FamilyName(LMMathItalic12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMMathItalic12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-31 -250 1026 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD11234369CB38BBC21C40020C4E57C
950DC4A5CD271B5530E91DBA55EA1A3BF584D9405556EF9C802B109FF1EB2B0F
C350D7F091E7B613B08574EDA3BF27099BC2EF0E503A4C4724614A73AA054756
A503BEB31E3FCD96F733D0C5815847DFBB66DE4968A9B389FC00C2146C4FF68E
076BA8B3847A3D8237D36A6BBDF0096290F1BCD02CC66B12E0070215D5D8306F
406DF7590940DE35CA0854D3609249AEA4EE9D3D377A7996C1CC2E940132A90C
F633C774985DCAE8E9353607B9059DD211265A0A346B1A062D80C64B5802A750
D9FEFA3C9920A3DE942C65BD08060AF33C91CFF62930F65F9A42F70B83B0E077
E169BF7F5D84F15D59F8A74BC2EE4A7F3ADE36F38C3A661F4CC9826BF73D7F02
D3CCC267927CAE22B5ED695D212FC3B669F9BE369B7A8D325C3FB9D552F175EC
29972562517E91E7B8D570612CC50B1A5CB6B94D030B0C60465EA21631F7A30B
44A47143D0C2F942B5D76384B8C3F2F197BB3646CBED3DEECB6513D3AD460F49
4BB874969A3663617EB537E75C1C1BF92749F9D147080EFF78ED285C315BAFA7
D78B7B4B8B7CFD1639EA303ACE986EDEEBA9350F92529C47EA7689779BD50CDB
D1B3A68B383B54B51F4FD77D6458F15AFDAB471DEA9909CAB29840091391F2EB
148588D02607411F2E802B9CDDFFEF1C1FFCC9EED0405371651ACF30808E8C57
682B734916EE806703B2ABA2F6910E0C75BCE10A94FDD1ED3E4FDA7857341427
CA0A4F7D30151BEB8E3D351E1E100A8A75959D11122C83A5C0C4C87214413B25
A6BFE44A42D446E9C4AE60ECD7A2C2A3D6E67CD11FF1A6A7EC287BBD3CBD188F
380ED6A3510D5B77129BE46FD56832D316727EA0F825CFD86FADABA26B5433D3
CCFD0B03DC83F15287234F09C3FC9BB30533EE75223739B24444094B0BCFE497
2844FBA682856FA896064B802D074CE420590DF2D981849F5805ADCBADBC2933
C1D0DAC1035A5A6B41BE612088E67E1DAFDBFC032CCBB03D0964DF8D25F7BDCD
E786941CF1293E86EE719C9BAB6263470C7009C3933BD677D7394877C88A417A
449A88485A0EF2349E60A381E3C7686A50DD234EE73CD469E24B979DB7A9EA08
64F54833BEB33867942B175B089E488167D367AEF9D1AF88BF14CB44C210BF44
141C72291EBB15648783251B44EE1C72727E7C4CED16E588E312BF15D39E3B03
5FC6A31FFDA12E1AF5FE9BA08CA7D9C2DA3DCA24B738CB9B68B3BEF23C4FBDA1
FAB83787997A30F0AF714A6EAB055E1A10705AE534E1FA147835FE0BCFC55CE0
5D377D3EC454B9E8E4E4B7897387234F730A1D2E0EC08BC400F4CC30DF20F770
307817C09D60F57096E4ADBB28E969382B124072BC0D21A599EF056F964BA478
FF15C5C24ED9F31705A3AEB52BDC6806DBDE302B9AAD9FE982B9D3DE386FBD80
3AF0FEB814FB8DF1C9D185D98AC064D05908317079160F9D04C709FA4BF53C29
7A795976B7A9F9A550835455F4F39629920D1A4ADD82A7C3334AAFCEDAC985C6
81634D78E2F880D2D9FFFECB4C8B0AD03A06F3D80851323014A769719F75B427
D1C676FB0D0F29D243A5B453EF86A337BD182780389CA0188B02EFD8D26DFF15
751C77BD07F61749F324A403989A44B25BCE52DD0B822821CC6141F7640B0969
9C459994EAD3AED27088ABBF5E8EB7B4A549C12EB0F87A8E86AEF9CC2306051B
BDA9CD42EA29B285C5A4CDDC67A4D7BB304BC875F7B5B837A61B49366477E5FD
48F3EE3BEF3E46AA957FDDA83CA8E7E1ED7B3F3AFDA0D08D167073BAB56E6D89
9A4F43A8310A3519AB234D16E3129D6D689A0FA0512A75D9602F65D2AE7754EC
28014D695DABEB8FB86A8310CE255301E4E2CB6CFEF1D14476F82F3AB7B0A80B
068502A1EBD3EA05E7C6E24A3615EF55949090F090C0C2ED108FFE2ACAE0626D
F5818DB7B0691E8397E0BCB164ED2732F9858C905BE6B8C63DBBCBFAAD18E5D3
C7154778B9DC428EDF307869BB7C84521FB964FDC55EE302BE565818E747D79E
8923BAEADCA7AFA1D88368A5CCA3987A9AFDAF2D67F96CFB859CF8F743D92B66
861A9AAD72A197B2F554C4B22FEBFFAD21AD1DD9E344E91836702B217BFEF730
DEF28E8B1DF45EA09F7AD86C34795EF201CCBE8629BA2AB0940506C5780A6D05
B1A6E29D3D01C33BAEFDE1EF7821A1C3B32DBA3F51226C20DD2FA7B8CD2FD696
200717A35000DDE05E20D6A9022B983382D270C7194E35942D0F5FD260A1993B
53C6AB872325A8C9CBBCA594ED1BED2E10B1666601C7E56464719934B4342C37
4B1DF7A37B63124B86A1ECFE049653771971DE854C541009871203C326F0A8F8
1A77C7AD50E1B25CADDCF07E51E57CB185CAECD4C286B6AA19538CB6A68DA205
4AB60572E03BD8F0D79DA2284FFF9918C8A285FFA94CE743D67867725168BA26
041E6CF8BF91B8DCE76C84232757BA97E92F7CBB8ACEA11B6906347E6B3AAE64
A9495DCEB63EB2BA7A94C1116702476F6A1846F51A0F251B01C9E23D273EC9FD
A6CCB41B33913E05FBA986941FB2E9D058ED494DD81DE7F257CF26F2C2196C5A
6D34A67D90982327A30618EAD5D05426281AD2F2C1D92948C86DA4609D764B64
7E0FC6CDA7130CBD47865E9D3EDDB43C233D8E98B7045D16BE48EE50A2564AE4
0E31837CA92487534B19F7DE4023509FC59DA589C7062AD4BAC499F18D03AC88
C923F955ECDF836F9849837E9952957491E48E9F8533A522722C76F8DF5DA8A9
B011C9F4C8A2FE44767AA90107CD30CF3BC22C08750C6349852A64DEE48AC559
3A233A3E9C4662BACBA1632981FD675E5E2FBE51E842DDD8B61F7D8D4A1BDF36
51FFA77B097F965D5CBD757AA9B63A54F85D2B03151873DACB58477926D092C1
F1320420EAD844C7E3361AEC618D7C909F6EDFA9763CE445C4C4359E8FCA6AB3
8B0354F5360142A189B37445A259632EC52FA93D3DD2D49F66475F868571674E
856AE46F2FE321EFACC9113C4E583A6F6A81C4D04D00B2363A3A357540D2F388
0C96C0B74EEB8EA3637765336DD8916363AF7EEE49D9523AFADEF1D300F42FF1
2BA796A3D92366BBC7C53A0D5E9FF8491751C19FBBB0A7298CD322191CF1E2AF
BB93E7CEFA27B685AB4D0EE70E292E8A22797D45059BE53C30CC0EDBC2897FE4
333F621284E807F10A9343D9541049951EDF5E3A82B4A406D70DCFC31958FDD5
988544005F3F3876A561393480A434FA21EF26AF4442AD65C191A2E3D1C3964D
8E875EAD96DF9C4D813BFFA94E17730669BAF84B63A9E3B145023D2B7694D200
206BF2BA6122287B0D0EB783108F51F8137B81DBE24484195EEA61EF0DF31483
93B36968A2214A350E2C6FA54B8388DFDCCC5B7409623D68C2A328A0424B4BA4
189529D7D37DB104855EEDAA330B5062F3BDEE1BB7D9B89C02FAF85E4E839E9C
FC1DDCC65A295AE41BDC4B7219451F011262AB6072C68C82521156AE9A849188
E64D950B15E4D7C759674C0422A16A845CD9CA417951B9092570F80D01D7F216
2AC51A6AD727D9DCE3AE21930D583831D7A138058C7DDAA9AF325909F33B1A7C
5BCCEF46B2B281F2CE79E18D9815ECD42599F7AF57139029789B36EFFEA1AE1C
5865A6BF396A13CE5C8F085AE657681A1223CCAD0ADB8D1CF9317B017E992BA0
95D12DD8AADFD26D826CB95EEF0C187AE50D9A2BEB3FF0BD87C053E1BAE1DF43
E1F969F3E57A2B906EE6E63C3758678329E7DF8C95E043DA7BFD135054115727
919045ED2BC05EDD13432F0B545D29B9B29E2FF8CB1C6B7B215A4DB8FCE7C175
552CC5BFCE02AD80A2801CA7184258B2A995AA848CDFDAF22081067CA9831B4C
F119F2354FC67CFA94006A0DE31EE8982358FF76CBC998185A6B7A89490CFF89
F541129B14B6FA20D15272D1DE746883880B16C2BBA3C55B6B8F9710600EDB4C
731EA3E849468A5C500A3205B38C23C21C33A8CFF98C3FB71974010620F7197C
20896518E06EBC29D7E7748DB33D1CC39940347E61E16A4EF560EB016F480C32
96CF93EB018329A99EE9727DAFA4134FBC3C8A115758084A12B5BDBB95C91CC8
272D835C1036103DF47CD20226FFCC7B36D5E2B7C4AF16200EC6D321178CB084
34DB97DA340B76A168A49D7ACEC3E22CA340B4A51E9E9D62CFA337687BAC3A58
A4EEDF99C3BB5A87F379DFCDF1BFF9E29016E1529AA9627F61F03F8FA93DD147
52FD08A76D85DCAB8676D963D8D36B196FD0E6C37664215E1066B6F8E4A969D0
2A6E6BD92814264FC5A4CE8A3B28995121D85D7E6B935ABE1EE75481A5CE5985
B58438D04570ECECD95137E3BE014A83EA0C7080BA0C5F51F56D5E6B6F99BF3B
C9F62988E975AC846968821F04ED0067315FE2D43C4AD0C931118119758AB2E6
D97635DBDEB95D460F3345A965719418FAA051E12E67DACBCDB2D8CD52E35E6A
443E5B8F81EB173B67150CDC0E80FB3783A68E25BBDA39E371D299EF360F87A5
4149C25A3CB2F3D4B6EAC9279D4747FC161ADF5E0B152CCF9F169B5BE555D5BB
C952BAEEF88C77F0E25501D476F63E5A00908264F86ED8365FD0D8D75FE0D51A
2A5E467D0EFC24FAB18C8E73B31ED1F6C7A3C114765A1376C907C3E40E3332D0
7FEF907C437BCFF41E598C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E752429B985F23EBA0C9875AD055D8B1F640D10DB8F40BBF062F476691
EDAA1D05C5591EEDC1B75251BFF8576F1C9CC5C0E521392A2F0D5F869F8AA462
B3883A673A976328E1F0DAA22B80CB7737DE2537E7B54F5E1643E30046E87CF3
8D9A45A973757BC16CC50504033125D2A68A1C97CA095C56B3D62783960780B3
1693596869FAF5692AA8FA6643FCD7F55E72948D2DC55AFC5016FB2C48AF9D85
192393C682B739EB43CAD8C3FD4053B2D53CF911352E2BA87A65F8949B0B7918
EA727DE4A08DE07B71365B8F31103159F65D30A7A318C1056BF638CD20BB56D8
6F22ED3EACC46F750F405FAF96268E80A409CD8AE0F36B68AA8C5FD2E0E871DB
D2628AEC086AAFC9F04CC93440E1A8B0ACC1DCADB778837360339A25C08E3B0C
E768240F0E8CE9FF939E4B1A6365664AAB69761B7A9C7B95BD29B09B930B0D82
F2C39F9BC0B94E56C48DCB22D8F0CA6C633BE68E5977EB3D88103E4230C6A08B
B4FB0CDEA7D44636102D47AB90B92FA42243943EB3E77E6CC38DEDBB2DB8BE77
78936B70FAE12EB1E2913B766CA2BAC3FA555CBADAF2CBF6B7A216FC93470554
2C841542BC1FDB26DBE389CED193E28A19CE9CBA64FCEB47C4D9C7891741E0A1
23FBBE971ED93F797C02EA830678317452481FB78DFEFDB25A3645AD3979D2F4
AA17C624CAB35B85963C6DED262AED5DE92278F31B2E573FD86696D98800443F
32CF695BC103A3ACA687FBB3F42AF9C89123C719005844588667C3DA28AFA523
BAEADF7BED1F3B5D595DF571540D0855FA377DFA6880F525878D6A3D1980C7D1
05554ACC5D07ACEA1E0D27664F6DFB6EFF878D0A68604565D0BF75FD8BE023FA
36D164B7BE25F9F811A466CE04C2CE5A774EE3288A245769B7ED30FCFA10230A
D6C9E809341BF5E55E58F3288F7298D62092922F07027352BC7C9612CFCB7018
B3394AF7EE7076395E67C3CF9B71BE069AE6C6C412F86A496E7C77173A0CDA0B
CC46683C239700CF259CF668B9F5C990DE3196B84BE792F51E17583FD4A83178
989638A37897AA769D74E0B3A299DD94B314F9BAFA7217AC70D8D9D02544A545
F6880EED34399A835514CCB97938F3E012AF4D68C140C6CE231015D93CEFC522
CF56EDA6F3147B3861904FBF8BEE6DB3D2E71479CD3A02BE03C555B0808D40B9
53D2EC56876076A116EE7E81836676237F88C519F8DBF39EC35FE41D78CF1665
E3FFD09C78FFF428AC27BCF0318D0849935822699E31F5115E7854A22F46951A
51F24526F7190B18B313DC58AA2EAF631A48ABE394668C6F1CE9AEADFB56116F
FB38C388F96143BA870537CC8B3E5F2DC39F9B930ECC63475BBB8C5F9A45218D
E05C4E6F250F6E544D6011F65EF4808D3D0158097CDB6E280AA402229A6B78E6
AC615258668BFD3469CD663592BF1214E5EF1C116C4DB47B805E2F60771168CF
79CF10DC2DA8F2BE94869AA570DF2AA5852113C51CFC85C1E41516CE412CB410
BD026231E22A9CD0F664D76D385CC1170476B17BCDA45C640C583F16DA207028
0C58570A966383AA9F7CE59375525369CA6A559BEF0E05F11CA9C72A278C045B
1D2572EC08DE1424D2420D550177794FB3DEBEBE9E4105AAD34FF119AB2483CC
A034A95AF0B24B801710B398D9E9A95138859A819011423AB5921DE8EAC56ADB
58FB18C27A41CE503CAF2E7EA6F673ED5F34F1C1D20B609A152EDECFA26872BC
3C8C802A1517D9C6FDA3474591F19D573EB051F551990D0331B2DEBFA31B5010
3F6332290E522C15C69352124E1051A715399BBD1A6D3704BCBBE1FFF89E56CF
9C3EF605898309C7C3D20DFBFD10DF5FA30F409A76AE8021045DC09C95C9AE4B
4EF735A5414D985F6F79100E7045B930267F0EEA9BE820E13291132AE91118E4
7B8432BD1AD7A9CD912F2BFF83A2C4705A26FCBB7F8E45CB2FD9AA2EA98E381A
01BA4C4E31747123F20A0A721766F9D9A6769FF80B400B1EDBFCAC63CE15283E
72EC447BADD5BD58B053A11BD770399E31FB3B3D856FBCF6235BAD1F0D38E26C
3518FE6411F2A5FD4809C085AC2D60FA311DC99B9100C1A59CEF4C877053161B
59682BF5F2D85F2DA7EA0FE603D477F6E80DEAE0F250811BCC646D8CE2956C78
B897A5000D73AD32BD99B92E6E63BF8D79777859EC0F7FAE47F5A0CA878106F5
5462D3027DEA15E36AACC0E7349C8E60D6F2439E2D50DCB9D96C6C20D11266F7
913970C783EF6D587F638339D1E89A4878ED27E515FED0D26FEEE69602B2BD58
D146C077FAC71FD55A5490C89142F2844CB7E6352B01A448D4BD7A06D8EC0F00
E69984EC55E0B487FDEBB3F7FC3F4093CC6E13B87084E461E23A4D6862F0EEA2
84DAEA8343FE913EA90B9ADC7D025C2B8EA3689D75AA38B5222166C447B82E75
52DE05711B3883394BA9D683C161A48059A0463B17F3DFE8A73B46E913B99D2A
38E7FCC667A5B810B665519E7E1450E00BB9D0279537763ACA5F131550E83404
04E208B9C0B0A118F40332BDBB431AA70981E77AA5E5E76F43E730D9D3D047D0
B3EC66EF1D37916398FB8CE955E12D8A89ADEB1AE1EDCF91BD788D8F261962B4
3870D5928D160218A297BBD3BEA22E12E9C4197D0F3835C0942AD6487F5C9B20
C9A597910685A9BEE4CBA868D352ADC10A564782DF3BD57758FD145E769D4E88
BF43D19050DA58FFD64EB7B1D37BA13752B6C966C7A1397D80160687245269D0
F27E87B2186D931D624120B81967E58ABF5DD66AE39640224A518BF378B5CD26
761D1ECD916FC625A90EE8A7E00080300F0A05D265549982D56614814E10FB25
DA53070C2BBB4411D9608F4FF0B2E171820C734BD20399504F034BFE4C20E7A3
1326783358CF8D4FA48C1AB81741FA70BC0E0A4BBD104C7E5AC05CE49C6375E8
9F0EAB2B56BBB89144CE810C78D8CA02BD7CE2AEF79E27A7CC1D6B68A5B9F504
BED3487D1424CA82B8CC60A0156706987C7D0DB913F1BBF8A7B9A275E3345BBA
213B3DF67C4111E9564B59B724BD65916BFEEFE9BF03AF9D84DD2AB94847F33A
3AB3757D2C8CB688D50EEA68DEAD0613A62C3000C037092ED0A93F8486FDD39C
FCD0E8A6224BFA03E8C6D73F4B8F480327701262285C527828E5E203F328AD95
5AB433987B229534C53061C3350047FB20E3887F514B5897FDF225685D18D679
9DC141B7F6830D6771F1A3CAE655CA173FA57D400530CA6FABDCCB4325478D0C
93AC7EAA9DF7605213DEAF94C7281D9AC68D884E15ACA3BA68034F897A2FFC1E
F76FA2A69CEE7F1E9543904F1773969F65553C3469FD85B2F2F89F0E547BFBFD
F62A3E47DAA4EAD6D47F0305CCDB297C320A48A3655FAFC810CEC6F6D68ADA4F
AB5DD7F61DB94072B0AB8F1ABF62A78E43E1578DEBD2D05109DEBBCEC64AC700
4C28C4F0A5E3A003423B9958C73D306B2B4A7C67A95F8B4E737992642BD3701D
39FFAD94524A7752560FE97B8E99A12AFCCC5044D989BCAEC863BD15CAB7CE63
0194962E4183C3838D9401260A743447DF953444B29D7CB004560D0685F73E87
72FDDAB87125F419F90D165EF1C2A06A9B7500C6AD185B4115777C6BF9C24D88
653589B431FB84E4DDB650C2F783594DE6123D3142FC5C99973AF211F2A2A05F
5A756073B85FEADA4823BC1467EF2FC0E98A2BB28E5933E2F6E50D3580C547C2
54FBBBDC95998DEF2EA825E3BB2AEEACC0F30841835121B7A7D7A973F2EF67F2
795E6DD8CF55B9823AB2B15ADC328CC3AC493DE8C2F022EBFA14A2976D8E3559
B5FEDADF4E23A07F6C0E1387DD54F5C8BD071C4E9A716737B6BA413F846A887B
D1B3B89EEF73565F3D0D2D1E40E4C2811D37C9029692DF8E94F6FE39474EE13A
EEE65EC0E099C29064CBC0503FA4C89D845F91A107C8414C1648F6EBF6C8B1AA
7B2F72302AC2C6E6E9E4FD1EDCFCB8C648B2BDC18FE07B44B7E886DAB96F8B4A
BC3C584457B1565FE02E26EFAADB605C5CFE109AC7A355E2283555E10CA9070F
BB98E2337281FDEE7EC20EA060A062235F8848946BD058A0C86C794697BB0674
C1DA26CAC3FCFFE73689E2CCCAD5DE725AF6C7DE282CAA214D69B6793520439F
2991BEE6E427D4E82FADAC6C3829AFE1196FFD8D1D0F6BFAFF4F9062FDD08665
FFBDE33DB3EBD99D8110257DD0B832CB4209074A589041E903F6D89E22D34EBD
2B3C90EF5D9AF0A0DBD5145F0FAD88EB09D1BD84D00D951D4CF9252A4443EECC
AF1E56E5FF02B9070C1A92470E3AD7F1CD944E91ADBD1EFF555FF3EC5664191F
1C11943BB76D70D356FE5D145C73670D1A8F71E5C4FEE96C8D4DF87FF05432B5
165C8DDEF25DC98CBEA51FA99398860E1C252C17EE576B7ED658ABFD497DD5D4
E49663A5CA73CA347E27BC49C7DBD28DDB3AC7A78020551168A47ED789C2AD9A
B8C8FB7EA2F8C7D4D9FAB4B8DD91CB69558534CCE31AE7E157D0B060877AAEE5
14CFF0AD50200A157151F7625E63296E325E2C36D5DC45C5129C2D342CA7541A
75675EB2F1A5BF25461BB38C84D0651F4644CF51DAA8608BC3B698A22BAE29AE
3FE5C543DB648AB544E8212B3B2F97B5844022274F5EA46CF4E9D49CADFF1DC7
AD838B09A2CB6136CAE6AEA52ABA90745D527188599641549149217DF6B36367
A67BA60DB09562E82863F6C001ABEACCA36DAC81C30C11F98A77F4D100499847
E1102CC075FA1210881D95D6ECDD37B0B820176667500E58782156ED77373459
6699116573EB74FC1C83B091EA1700BD5B069BB7DEEE2BB45E7757F7BC00D85F
75BF5F32B350E2CF46BA0E8D0120BDB3E742C15DE5A8340318F907D7DB5591A7
08C83C63D6D457915A2F41B21629926169F4AEFD81BA2A880F4799EAE1C0C57C
FBC28FFFC956640872B49219FA101B88EBFA3E47EA4515043C418049903E3F36
885AD45509FC3CF7A376A608FC51751104BB96EAF8314E2322C457EC6683D385
525F118C799C34B50840604E7C248CA5BAE81E8C76C29FA3779933221D8A612A
2DFF00179C41CDD34E7015DD7198AD6EBD2BC01221F7E35F8662AEF8B6203C54
59E883141A505B275EE1333E6958254B6D96C9E54D47A12F4D299F67168AF7E6
1F19056BD1DEB7FE32A4F4E62D202CE86DDB34598B8CAED5B6DA81A6C816C747
568DD57D21AC8F8B1CD8B2BE97272017FC8176FB0988076E76EC6E8B4CA921C1
AAFC0EC3E24C38BF6D64E9C259ACF279C3272383D7526CEE1C178B1C6988F963
BB0D7534D41E675EF1BA59AA153AEFA7AA88C44F92801FAC61A4EFA2911B55BD
7DF444571A774CFABE590CD7C75BBE8B58EDC3A2C53FE35CC6B22EDC09857DBE
3019A7C60107821040CB0824EE588C4973D9A0D51FAE6E5FC9F82277403C5DCE
FC2C316D499F60E7C6C04DE9C117345C4E51748D3A5C5167780590DD9E188017
79FBC3307C0BB8A5784518676D62FF024E380036EC605313952366F3C351EFC4
33256002C59C39260DF18DDAB0BA5A40946D550B7831A2EE2670B2FC5DF8A50E
6F0C48860C52FEEFAA70B5953345568F1DA030BEF5C410DCA1D11F770EBC2E64
1196A40F44A2BD2529610091D8A9F09161A41BAC6A15727CE914A1009B2517FA
41ACD230B1E0CE76E289C42EAB07B0F60452B537A69B9EB54A68FDED4456122D
483AE830BE0C173A0D256118B0867DA2ACFA39F9F6EF1D81C607DDC242707D6B
53ED198367C7D54AC750A007498FA31E27B0F86C6D3AA81060727EDD60506506
EDE0AF44190FD947C4B9D41C4A6A03DF807F98C68F883721E6E7E6383207B054
006A409855639AB72C071CA7DBDA97D6000031341B9DF942E732F5332C61623F
AEA9CABAD9EBC22A55727BF40CAB44696D80CF4535A74576AA51C2086D8E71C3
4694CF2C4CD167F58BD2BC3015B5E9E22E47F1B4F33641BF53F82CD8E6D7EAD8
4B4B41F5D612653E3CE63C5F1C17D7739FEE56260D0D7AC778EC22A4FFE4E1A1
56DDF0127E2C87A8AD82DEE1B8090C9F567438C6CC6F9A9024949B47ED2EAF15
2F6F7F6D65B53C5EB5611852AFD27654A467FF3CA388E840184DD63D487C130D
8C59F8E6BC0A3D6A21AA60543F3470B82919E014251C3C2EB411F1DFD619D6F7
2BECD582160DF691CF265A4ED6A5B90EB70E2BB7C7C23B7B83DD252E46ECF60E
FFA06545EFC162942911B3230B8D462CB20900BA1DF90BED14A3164DA8B2883B
0B2CA52A8B48F33FF5153CCD63701C3C4909B75D5369025324B818204AD84401
2346CA7C8EBF4325EC599D755882E751A70A0EA8471040EE4E7B14727B086F27
E43E6E3EA6EF0DE68E1F646A51C66694B87FE408D52ABC831EDE8F5F1DDDA31A
87F742D872AE90EA4AE7BA3359AC2FDFF19FDF6DCFBF5AE04BEE398F16E09681
886CD627610737CB42966EA3FA2B7AB0E97B3290EDAED775EAB0D7D553F222A3
B01D18896F7C0BB5793B266B83FE8D6970C6DF9DB4946FCC6A48F4A7A4DF51BF
0EFB57472C5FCB1195C608C43B811DEBAF2573482AFDDA9F1D252FCF3DCCDCB3
A7254134186256FD8086D05B4D5C88D88BEC3ED1305354BD3093BEFC7C7667A5
8DE4AB7B8519C0DF7B5A381FF8E1C1630957F9540EC304140C4E1569529D4333
36951DE4EE9BAAA0025B2EAAEA5F3111D898979125D2AC348ECA164E3BDB5752
ACF12F16A5BE9A050B0DE704CD8EE4010F3AFF1C1D939E2B603A03E917000E98
03BBF7BBDAAEF0CB19B70861AACADC529A2B37845C5DD5660382C6C0E28E9AB2
3FE483B45C38C36D8EC170B82BC1471F59C8EF9AF423C2B9D07AFBC9394BA931
CCE81E77B0D858FFB2A0ACEC454312EC1DCE08F417F33043900232407BD79E48
47F7E33662A718F59641EED914E347D87F942815288234D8A66AC0A17AFEF783
0896B2536E30A5E1758B293E6B721A13DCA21512CEDA044F32E8B794E5C27EC5
AA845072ADF11FB8B9FCE68B86E1F42DF06C8C3B0209EA4903C10D598937DE19
43C3BF34DAE0370280ED092373C4BB5D5E33BD9913253527B52187FBE2AABD92
72349E4C037061F44EFD734AE04EE640275953E222C1AB7FD8AFB2C629CD2B05
12E1788A849978622CDD235325B07090D8770796F7E1B46654FA39B6E9E00B01
FAD7705D8DC604634225C5915DEF943C83C61E38D8291F5649AA86BBEC109701
5893E2518287ADF862FA731D18CF33BBF61F01565E3C825B0D6146C3B549BF2C
28599EB66F071FFCE3410C547A9B74D21730C5C14796A19EF175214EB32A5FC9
6F88FDB8F030E4F4D64B007D7DEB8854FDFCAF09575BF519FC93753332AC4644
690024FD13CDE6D313A06587E6329F6CC3FF5887EC376737D9648BDE5AF9F5E9
12FE02AA7158BCAD2ED2787595D81BC7EEB571CF559090A230BA564503FFB362
F8485896191BE975E5791869162F1B7D62625512150439080FB47F44979B7713
3B3038B71477715A00DD0FF50F7A508EF9B24E26424B1E91373F67E464D8057C
5EF17F1C3EB72CAEBA74FF65DF0E53D42DAF400AA41C55881CED39A6EAD01854
DC00759544C94107DA1B4A6EE178FE71B207D088EE8EEEE27BEEA5713D78F437
DAE50160FAC28C1C21FCF83DE1B068F4EA110AB03B0C896B05D2E06F3512C764
B686FB513091A8F7BBACAF0CDB9B68E1561371E8F78898E721F2D97CCF14E0EA
440A74DBD51ABBEE7629C98D586F55A099E24B9E47DBDF449974F4BF9DA358EB
CD3125FEECD3AA4E5800D626CC47D247CC610668FF164EFBF2FAB08962CE007D
0933ECF029B26AE0383C3DEF69C787AEAE40C86DC4B5985B84A35ECF5F72BC11
EC5133020BE851291CB10E58A558D6440E61F72C3299698BD64C754711D99A68
E296DD3E74E0DF56E079235A8B3CCD3ACE5E151E7BE06A82A194C7BD042EE90B
6808E242689FE1217FAC6ABF3636ED201011F687AA6A1FA145D82FF25F1E67BC
40979F9B86E0222012DCA626F8A2147CC79F29BB1232A872ED519283A94B4B5C
53088DCDF88951BEE2F5C77A7220FD0E0E33955350C8B54E142451A146811977
304D8551EA5D5B43FD74F3CDA70053F59A816531D1983A33A1CAE23796DF4BFD
E65F0A787FE094AD9DDEF9A9A339D0EDE90B2FC30FF1DCAE9BF86FD2DC770443
807638D11534A2588BE7E2A7D96F6C7CF45FCB17040AAD4A686AD5F5776E32E5
C129BFF10F485B8221483C2AD47B0ACA1BF7DC7C7E2C5EB5F68377A82ECF178C
FC51F75D4815BBF76AE0E639B048A38D0D6B9C0C7CE81C66030F183313C9B8DF
CB2AEC3B072A52D0AD3D4BCED50924B9FD409ACA233C082BC703ED67F8956F3C
757799D61A801701C34CE2B01B4C39C37DE56BA2662E21344E73C74148C1EFC9
2D47B30BF10D01299C451CE6DB3C8E9EED4DDD03EC7F2CB4308976ACBAF5037E
C19191219B28B56B22AB4FABB4CAE2E44AABAAE30F105376C3964BF75AB5BE76
33110DFA2EBAA4303C4F4992D05A21F628B7901829DD8727C72A21E60A61A014
02B7ACCC86DB1731F1F1240F7D6AF39BBEBE2E4AC9E2B9D116034191A1A804EA
935EF447972AC31EE36F887D0CF61A575444B31180850172135F49B08CEE0ECA
2F070C601E09DA0B9690C4E3D619F63DAE2A782AD53550CFF43B4DAC2BD3A84C
1A663BBF1E7DED373D5F1AD84FC79DE23E2BA52D8EE1B1D3F8031887C2FFEC30
19C77E70F4D2F5C6D7F44664C00B6ED737598DC827204956D533E0A0670D60CB
D73D1E1B9865CC77628A339997D35387DBE2CA7CDD580C06A7DCD556D236FED5
8998C2ED6B93CF62F8E991B754899CE46B900EF1DF6700D6A10203D03263B1C2
8B26EADB953ED292A732C09F6E21CCB01746D41D1EC44BE55DF5BBD8D6B0F995
907A3F00E21C72DC6C55F36DB35C15D5A480A1C9B106373503BF86D1B7DDE8B8
CF683227F8217212BEC21B21293A5DB3AC79055A14E1A2AB1902F879F1361AF8
C72DB6C585BD959FF8D0CB69DC465F32137D1B4A8F90B14440FED7E0558C96A7
E0F31A48B1DD6F27D321F6F925E13D7F64103E2A76CFFBC91DEBC2DD56E244F7
1424AC1383F7C36EB303FEBB2C20AB71FBBB922EB64626FAAAA9DB4DBBD3EC59
5A29BF660674457A70F9DE40609B822F2C9362414E03C630CA6F8225F6159C5E
AF6D02B1B53941ADCC6C283EE3E5846EC08A76EA5C201D9F9939BD4822B69A8E
CA52A0C3D37CAB4DB8AF57358071159ABA83504664F9F6AD78153CEFE299EE74
597B731803732D18A9B4687989E55BAAA158678817EEA4D4BC409CC94D3224E7
5B5764B9DFAA97EA454B7FA5E0008109FAF5273613D3368B9DCD15C20059F4AE
94766BE6B3A8DB9C099B73ACAAF2F2106069D58578B215A960603072616F29E7
208C0082C50185450C6BF6C94254D23AA87200828B2E085A16B4BB005B30C161
4AEAA2AEC739ED67EFC7F9128A17CD447047E6DBADB7AE9A7B205FC0B9A71A1D
06D2FA9ED0B02168B32F6CC0FE765F2AFDB1A4BBBF3C3B3194AABFEA61341C59
B612180E4E1C757DF26B0FAE953B015680FADAFADAD02FCE8211CA27869B4F1D
5A66BD297F621C92AA4FF0DBA776F5D2EDEE6444CEBDE8CDCEAF38C0BC9E406A
35F44C6B412ABEC733613BC8EC9D3FFB2658CFA615819B889A7655CA63B822AC
4C0C274A29EE2FC01C25913BC44D69B3AF2FE2CDB6BD6A50B8FEE8251B5C7BA4
C53EF135F48394EA3A85BC33748D6E5A8941D32C44AB4AFF960DD4F1417EBD89
F5137975F8E5DCCB8B33D8D65C433103611DEBB530443E9AEC490116A94C1982
EEDF6795FBC0C7B3D1CCD423718AA4352155EE7C5B20A9A4C76C3FA9EE672E6D
FEAEFCD319C1BD6EDBD72C2756146C4C05E5F4D03ECCDA89824CDA2FBA8C1B5C
69DC9941DEB2E1BD49C7165227301581EAD2219D8FA49A6B1525AD2D1F56968D
9CFA81E057F63766E498C82811CDE551ECB3C8DCC93024F925D8D397E38646E4
17217FD59ECACC94B7272DC613F965E02BC279C743DA9F3E4CC07736067986E3
97D9FDE103446E46A1AAB5337B999E290BB4078ED610795231E3FE9BE3F9412A
0DCAEFA2A20B54EE054AE15F26A7304A9A97B43F362FA6E06DB5C689DBE39D73
BA8C9C093FF36C008E40F4B344148D1C44B49B3E6398E1051D1F85618EC5E85D
C2D761FBD95ECBC414640C733DCB82B39EA37525A6CC1AB858A2F1FBE5680A40
1376701A40566DE91910F0DD4542E6D53AE3D03F5C9672AAE928778827329D98
927B4066DB71B23B0A9CF1F1FB873365EA1FCACDD36E46D81878CF1665E3FFD0
9C78FFF428AC27BCF0318D084E9E69BE5E4D11753CE4F2239662ACFCE7408320
14D11E9DBC0885282382FB1854E2317ABB61D9F28207671D780045C1AE05E9A2
A4432B7BB69C467659C2247A0B2523D5FA4B19149114134BFB10D1CD4AACC908
540C9F6C3B934D500BA9BFC908A2BAC4B3062E37B68DCA401224AC43264A49E4
A05E2A67BC0B4901E9BCFB5BDCE3DFEC18B9D8C3D98B00B67B9CE1D0D743B5B2
7A58A5F889A5F45CF71943537DFDEAB03839B3A0481192391FACD2C83BB0FD3B
5F3789A77B21A4B5B85EF3945AB516BE7B6C3CE8B284125E634C71F84A9BE9E9
2B7D3A40B4134415BFD7D3C840D4896A183FF4E395EB7A69DCE16AF779DB5B0D
F5A6E689945AD1D5EB23E4F322BFD82BE007D82B25A8F741E75742241AD41FAE
4BB693A50E24F925F3A8DEBF22818C0A197A853688E3AA3162E6138192E19652
A23F2341ACE718440F9AC620FFF89CFB7FCB1955C7DC8D08845B20E2CECCDCBB
DDD028E973830BDDE3DE50E1EC47D4F787582709775477B23AB62F13004BC700
9F6F9B4154C3175252997B2568FB7D2841619BBF4D267B014DB3FBC5FE022863
4C1A1B606249BCE54D2BD2F83E49FCECE08C8107A98B612A4BC3C2E8B2504E0C
A6E7B65FEFBD5F5B994DFDDE5C38B305841459D20BCC18C1C11B941AB9E910DA
5459627D2B60C7A3E39A4C63D2D220071473D27C7F601B0E36197BFA431548DC
233902D54DA502FF6390727543507A36A01100B17076AE6C6FF5F775F9AB4DE4
90FA6577D5C87A08B6F333E1C2EEABC20A070EBDEA0E8CDAD78E42F9D49AE24D
11B9B064801D47F4195A26B07047B80849C0A77BEDA560ECAE3FCD7FF41BA70E
625C8EDB00FEBBFEF051806B0984B004F3D2E932257CE2471463D4570D4E89F4
CD31A93C312EA467473043C03A66FAAD8EF6D6DD77674A3480CBFA62794496BF
3806E9733ED13919BA719C14D80A9BBE54DCCC081319941D71102442574818D8
E2E330E2FE5102B7F4DF3E4FF29EC1C4277079D25627DCD5E40E3E202D717693
4072863C746B869F6C929ADFFC2F1C50DEA895512A4C1F23D36738229726DD7C
61478DFF4D616CDCEAEC1AD70D9CED72500BD933A54CB39EEB6372778ECF5B6C
0C2F014F452A4C4130493794BF12502E040E678BF04F38AFF3C64D29B8D53A9F
12DC0040B6D35742A408FA856C12A8B0272FE9B0B0599D9176C147FEA68FC835
EA29E0AAB6D51F94887BCDB2EB6E491157A1ECCCD1B930A2439EF269055E7E13
9BDF6ABC490FDFB3B3AD271CB5CA98A92163FD90AF07DE1610FF965FAF347E85
D1A6EAA623CA9668E4B2DA0E2145BC7023C91A3D6A9BEC2D99F63085D96828F4
2155F6C8C1C8571FF7B6F08645D0C7527A3940AC414BFDE87C8DDA44593888FA
0AF72A54105E7A572DF254355335500897F2198D06E8A3010266862CF39FBBA5
73AADD91993E707C36F41298683763736148F1808FD56B15923CAB0A8F3DCC1E
19AFEEA0B92BC6D1851F9133071CFF77F6B7BB47F306185401AB2ABD3C25D5C9
A2FA8C392A82F8DC836C8BA099D17F51C40339BBD717BA9555F70DBFCE390F10
FE15F89A45395CDC48DBB13D7618F4FD6A066A4DF35F8D694FCFCA0D01A29427
6F86BA1443F753A7BC8B7A60EFE5650CCB4B6F6B55ED1D99EC4B79D2F5EDEA14
B7F603F10BDF06EA99B3174459E7BF82AD59FD366E775F2BD8C2E77CC79D75EC
3262338CD13F13C659D762DB6199434B9C1C21F744CE7F3A67AC069D0099A5BB
B4F12FD99B998C2450F93030CB5809EF98E9F48BA0752DFDCA4C0E9CBBA7E7FC
D07D218B1C3735FB7D517C344AFEC68F32FCBC8AF2167597A4E9FD85E1BC8FCD
58CEDD5B6DE6353936B2464C87E51DC00983F964BE9851244F76C01587E61363
B35717DFE874692145232E89FC52487BD40EC8FD23541EBC87444676534794CE
AB380B1E461C5432A8687260ADB2A13755A5048E47B03087A55E15E6BB75DB74
49407BA6F533D3AE96EF148ECA646A8C3CC88384C137C6C1F75CDEBBD4BD8666
47D52BA254D2E4B701609E65235D891F5D5EE25C7E2E642E6FEE5FD39DCBF8FF
3A646CFF72940BA3ECFA1C2AD0E4174917B2684EF827C29537692A8E50D23323
398D033104FAB5D185231DA4E9F430C6C0F2D5F535AE93682E855B1BDD6CE955
627283F6E42DCEBD8D3032A07CBB36B8FB7CA00ACD890470A8F59D81DDD84095
D579B1DB60F4C2AA92B696284A5BD9CBF59BBB484DDA6371DFFA6222F88F0886
C7F8848E93278D00A9F8542C98DB691FB17E10342EFFE68AB51006FBFD97E7CD
6CAD4FFFB69A0110C746315F3F39C77D67BC1A789FD4BBE40DF2F03232480D73
FE00AF577494DCD4794DBF2975364992B3996EA3B4F30C40106141EEBB6FB6D2
99B81268F3A0B7F152A9EACD5E0E0D21CD6BEF4684F16A8421B4FA121305A1AE
54DD6930796B1928653346EDBC5404E5366F675032DB812A9694387BC6A7A76C
D74FC43006C79ED4C963C7A02A7F3DE13338F52F2E7A26ADCD2E2FB1CA1517AC
15DEB0BCCF94CE83436E994844BBE45CB5402826C52949BA958A4E4E57F1F0D6
3910AF2E6CB30732E502C92D35A0618E0A1BE754949F63D38EE7CAE9F2844D17
BBDC178AFFB0DEB4493D2BEED80E83B65D9CD4C8CDC57A0BBC0598B3AB03652A
6AA45223C25E15ED402A0F46027DDE61EAD03E8DE7EE3E332ABDB392B916381A
96F746C29009E46EAAA8A44FD4B0FE7F02DDC872F75A1B652F87AF1E35CE918A
420AB297176D0B6851E4CE7E0420FEC748DCD88046CD4A643BCD5DFCC61B25AF
D261C434D1D4CF4FE9C907B8468C530A53A1A1FE7EC484B84DD4DDD8BF2C4162
E29745A69E7715867683A85BEF5F37D69CC9C71C59A0D0F33022188CAC752968
6A3D22F12830D995534A8D82E4B822F07B1159022440F87D0F698713B90AC7FA
85278A2142CFD0DA1BB8390B42C39D2AE574676AA0592F3F052E71E8E353D25C
00649E488A00C554429F72F81976F8106FC0C276CFE3536FE73DCD523582A497
3275B64B3D80587836396BBDC13396B200AEC477909C2A7CFACF4E2DDFA16383
B91957EC24AE318067DF78B8FB476BC191D11F6313488AAC8D0F1525CEB017B4
7C1D4042C85EEFEC49D94E6CE504873F2BA004081709232DDB1FF53002249652
5F9ECBDA00BB5D4B098F3CC567E9DA9952F5F95048B505DD5ABD3213C14BC3BF
884B0077C9CA4DCA2FB7C7EBBE81ABB35D915AE1A7B21172D02E3D78E253519D
C09411034D9E9D3ADD031C747FA6722534BA34991AF3F1BF309ADFE03D8F262D
3B5D3B93ADDCB366B3F06E7E7F6D9B01FC3F1AD2EB4A3E9A6542B4291DEFBDA8
F376A832B053738486352E7766078FC2D5E7D65F806E16AEF21B9D4998769AB3
5CAA4F4C66C0DC234DFBDC9B13E62E040FC3490FE27685488691EF21286FD15A
93FF6A0468C6D06CC6A13257458FB78C6ECB6460A281A80F502523BC02292BF1
52A728B7F0E9CD9B977E0FD77C2B28FD79C68B02B8D5EB79C9DAF1AED801D623
9C7777FF97DB2AC67C7F64A7D6F85B873D44B459B287CA34E6BEFF51279788C2
B848F57B4F77F75F2E2336B76A11D14A9518E4B808DAF8C383C0DE48C09B326F
64EFEBAE47B9BED3277F15D4F96F2B6F3A1C671D6471E07D4B70D8A19389EF17
F259F82AF7E2067C46264EEEB0AB0FBF2EDA1A8420EF654A1F38861ABDE24AAB
F7BF07C8C599F051F8181FA2DA8EB3A05230E4D7BF1E656CF55B9F5AEA07AC80
15D417881E23AAE9B724F03F06318611075D77F4D74F7A9052961FE57CEF6982
6C9576EF9D0671951505993DFCEFAA29DBD170C0593D9F6B89968B1A8550A5FD
751E70531636F7B9C2B6E6244E5CC893BEAB521275D0108121C2D778E08C940F
501A93455644ECF8414F66199ABA373DB1AEAF1EDF390FEBC79E7F50D3DF9F3E
5B6EB1E7F5517A860717190D3DA891517FEDF573F23AD2236AAE8F304FB73D96
F4ADE8B24223F5B5025384B43478A75304F3BBD86E4650A960ADE06634316033
35A8DD49D99E769BD73851343063B7102FEF09C25D849D7DAE91025A4C6D38DB
17F34F7AC32607B6794509B9C2BB41B76CA61E9C07B72286574AC10B712825A4
6A68EB78AA3D2C058488C29EE257B7132800EECF73E62E6B46F76D950132B8B9
1CC23326038097B778D17B0AA1C672E2020C946F0F8E03A35972AB549A545B65
4FBEC03ABB367876FCDF342EEA443A724E110C3BD4F48D0BBFCF33E5B44F23F5
D501BDF6EBCABDF19550A337E455DCBFAFCC8413D1EBB0AB672BD63290E8F44E
70FF842306ACCF65C0AC9673859DB9C3A10B0C8DAA7E34174144F78A8F72E0DC
B8CC64ADDCC52071F1FFFD5007859E6FDDFC381A5725953B4B89397E974C88F9
132D908BA2D4057EC3592A03E259D54CE0936376AB87E7B2E096CD2E5525399E
E25BEE707161B04440E57891837B822BC091A27912F60DE02E09F6EDD7742C75
128B252D3920883C966C6C44E7FFC2E83ADA764F9C9E0D8FE27425D2AE291D57
D931114C65F4BE3FBD5391A1B40587AE6DA5D759909821BB1FAA64201B5D9092
378C7373BF2299F3DF4D06CED78BECF34BFCF41D02C7EF24A4E132AEE5BDF71E
90DA34D547ACCA61BE6D41EC302D1E7C506EE869389888C2EB57F251F7FC770D
1B9439C4B8802F7D2702DB352D0874442B2074859EB49313B99C7BF0FD34FE48
E2FF716005C8EC1F5C7AF9C9E0F86E8A95A254984E08E607269086C7D6D1BAAD
EDE43E477E2842CC569F78BD73D380C572E5087A5556397E485D16B26C2DB092
C2BEAD2EC5F7AFBB55198C5C02204EA9D9B27D74C6AE0C64EB9EAC541E02AE17
7F44787B394B63EAE36EB04AA53AEAF4DBDBF6F0800EBEF9EA787C0149CF6890
7EA4205A0BC3435596988D1C67406AD33743D47246FBDB140741D2C8AA4AF19F
22592587A05FF0A323F42EE5A944920C2BE36820C3CB1FC79FEEEE1DB28D40DE
314D416B911DE781563E26C08538E038DD8EF92437059F56BBDE8C3EE756C20C
17702C868CD9C0254286D0C05EE958B2C005BC3C75F49FEFE3278F08FDD23BF1
D754F6A532F194C524458044D3C80CB40D65BF919B7FAE85592ABE4754AE3929
983BA6E0A977889F923426DCAFCD3238ED70E86F742C3B5D9421E2AF8F2412E7
8CA82D2A822E26126498DF01A8B4E7DF01CAE49DE944C25FE573C9233055BAEF
D7983E8B82C7DA405015C1A44F3B0154B0D7E606C47459A99753B33453EB77E4
B8C7606EC2B584FB9B33DB98E520A332422433D2DAEBE5ADF45856CEA25ECB11
5DF97CF787A7573C23EADD24CBAE9832EB56A8A563B6A59B12647827BC6F11BC
2C3CD7CDEF8DF422AB64FB30F298EFCF03915CB1C64141049219FC028BA6D069
38E4D742F61A533698803D7B558813304D5E861ABAE6F066449D6E052D03BE31
61EB900C711E1E665518D86E946DBC027FCF789D6D555B440BDD05CBBAD01E1A
969BBF3B5F0FE3F092848A6E8420699174CA207DD1D59F6DB8D16BF17BF3E00F
27840173C2F9C1D95F4D1C3FA15B630FB8850C1ABB81AAD5B2DC2F8BFF142659
CB1E781253AB7C5FDF1934ECEF4D0F25AD0E9E0402F50E65FF659077810B24FA
AD626651D7C6C33C6EF923DDCE034B345F7FC2CDA578DC484B802016095DB2A5
14D696EF93DD9F32C5BB3CAFFB9ED72DD8062C5B3BBEA4D467D56929A551B880
0C7A6C788A20487BEA2EC996627260E63B4554E19407D4A8E41B74FC1446CD22
FD6A32634CFFD1E9C88903EA3E455A53048AA07211481EE5EB58D5D9B567760F
0696CD7D9CB357E2A38A0446CE1BF49B0964790036CEE26B7435F2A1B7E3E744
EFFDB20AABAC927254BAE23B1A6421F7226F4ACCEB721926A7688D7C3AA47396
4163732D34D851542020B9AB2D556EF54BD12F413291961E6FF2949ABF7F4CD2
075A94C6BE29E490A1303B54EABF0EA6EC704BF556C274C0C815503DB16E32D8
044AC287917D8435CE532956A864369E5E633DC20175128545224C5B860A9E5C
649BED34EC4F4BAED513AF6E426F03D597E2EED087576DB561773064EFC348B6
E810A7CB663502A4D06AF774DBA94B137AA18188A09176A4F8E29157300A584D
F2549583D73EA99D5C04F36FD83CD8F03FAD86399F50DFAA946CE271E131A681
EDC727DAE7F6F698F87E539BA60C5215013DAF81ECAF35F1D504E3EF74CF77CF
6408E2B93C3155DDA6800455132847E8D4A306F57F06929E48045A055B93FF83
5E52A8B525D25B086A6B5B8D3FB6D387FB176FE066562ABF5C1FA9C41400DC7C
725D978FA5D9093A59CEFE08104643E40D9C8C22BEA6C268A386CA8E39CA7C9C
DAD5C8587142C3916F684412695C0DBF179D8DBF7A041FE9A4A1E98069000FAB
3751738D17A0DA32E380040505A653C59DE979A4DDB07CB82D967C24ABBC764B
87F5E2B4BEAC1765DC8D1F6AC55AA23F35061AF8CE1E2467C9F0133654930D27
DF686FFD895266ED0BEB71B9B6DE4647EA0548D3FFD292D5BC3DD04AD72C55CB
2934D974C9308D70E6B9048F39400B451B647ADF120FA59E478203E2CD190516
6090BD81ABF6267EA13BAB3751E9579C8219DD72D005EB5AF60584B0F5EF14DB
27A59CA55A1C877B237E9AFCF2AA2F15D02669609C97E2A943DBC30244188D01
34A90A67AC37861CA1B251160BE5FA71B8DB3F92A05992F813A2EBF994BB5DDA
4446224A526F95963C0EBAC3015A79B2460063A8A6505EC96A51CBE64FE24B0B
5C0E32ED54A6C557FC36FFFC6A0223E3E452E2F67F38D4670BAA66D2B066BE3D
E729CE0CC48BFBBFC72CCF2DE30536C6791C92DF192B17F775CB15C8AF31FC8E
5F5684673D3844CA45834BE4412CA5282E699ACDF32C227134FDA9C6C67A36A8
2C18B3115A5A740EFD72228AC15B9832F8E1948F77146199CC80880EA23BF762
11CD865D5D116304008C0831E129F0DBDD7B7BEE18D8CE98725799A3BFD3AFEE
14713FCE672D261D8D77864AE52CEEE7DADF9FBD0BBB45F65B30C331FE1562A6
F932D079D1E666FB7DB2F841771BABC818B90C6FAE0EE0C42D387E5D8DEBC6D3
3C38DDD52509D410DFB52047C4112A06A2BD37552EC861C000F1BE5874D3CC0D
DF107A934D326DCEE067E756581E786DC6406131859F59796E34ADAF50260F13
82E9F2913A74D21A6336E3FF86A11C94E38933A413ACE29741A623AEBD704973
45EEDE4FB705E99C0173BD0F95FB1AAD09CE9FA3F787929B6C327E6F58EE70D3
87E305C5E6E819D4073596D21A8C3497CC6205D4EF89814C4D36F1340701ACBF
AD4D477003CE8424C12E4F65BE83B2DF99484D3EC68CE0DC2279ABD33793449A
8D034128025C121A571EAA3ACC3C32208368A9D0420DC26937E6FC9CE04E7AEA
2C7E4A824F8054FE402799ED4020B3DDBB1CECE415FD51353AA3CDF6F1605BF2
97833A0EF6683C5AD462F825F1D3B0B0E9797836CA0B1D5E7B9EB8C5D400FAC3
275DE7A1CB64B5D1B5FA98029D7A1A50777EA342EDD811F9173B6F386E061489
7943CBC572570B6BEA8A518FE1460C44C5A3B4793F6888BEE8A7EB3984F51B28
18DA260D6E52FE09B0FB3C15143A7BB4B5419C163E1A3F018B5A8E3705F0CF72
8DFFF732C242724C16D0F6EEF76BB398BC0E9E06068AA66B4357F39399FAC0EA
D42B93C6F2D390FF15B1784E33D7F9BABA3201D6F2449152F260D47645B8A718
653D7665C79B220005CBEDC70A25FD6D23858BADCC0E79E4EEED2A7788F44FE2
17012C3E115844FDA9A2D92ECBCC9770D0132628D7CAE18A9C77B0C835000656
C55146644AB47C249A133423C54D6917265AE48970A2AB7F332C87480BAE9139
2DFF2530BAF411584D2402B76D4FD4B8AF574D90A19C809CE167D0B1057AC958
2003F1F56ED711369B28D17D7BEE5C0465E5887F8FD966ED19F8743587C2C08A
44E880FF3DAB898B604E1ABB182F767D9DCD3255A509AA7C17BDD251CD3A4B3F
CF409CCC1434FBBBBD9A747894AD457A33451D39A560B4EA348544CB5057700E
9B4BF5FEF9876A05CEF58273EFC33322859332CFB0D90876614B5124089BB90C
6DE8FE799CFF1C03FA8EA5BBDE47CD12B90D1FF8264E853C4C643F890920BF35
68A9F686824DF8DBF0EFD6A0F917F3760EDAFD469E7FEB183A562D7A8C97E9EA
E1CF330E84EBFA8D5DF7B7A8DA89E3A2205BB410B3E131FC8F07846E363448B5
F4B0B843EA250F0C9275130B53836BB03B9E83984E0C9ECE4564B45BEC8DE152
409926A5F7EAB2131BC18E090923D2D161BD2265964A385B52B04BAC3F5B5F2F
AC78D3D1D455D93100BF1D002C9A6EB0549BEADD0B1DC58B6FE45AF39A94EF9F
26DBD3F92035E2C396B9E3B003C4C96BBCD4D8B55F1FE150A183292109122BE5
7420B27541318570F13995BBFBB9D74AC7BDCCD88E50C45CC485F8238834B1C6
97E4498A116D5C1F35851736ABE69AAA20246FF47E2F1C9945F3F29D84D112CB
115DA4297878460BE6E1407D14CD366877FEBBA78738464680F0BBE0A6A466B2
C96A8D3B31545A360D4EED464C1B5B445AD8F36B88478A5B0667423EA01C561E
2E929405FE67FE24FDF6CCFC30AE893BD2D408B56CE0345214B5DA41569ABD5A
A0DC0E94BB3AA1662B24C995BA07BEE159BA170CACB58AC48C9DC08C82711CB6
AE4513E640A8655880A159D9CA821C94364D6DC1EFD17447E59258CD654971CD
7AA33DDC0B888105C887E2D87671A5FEEB70A01DF04AFB6732767A025D136CC5
E44BE01179F69EF7F6F1F240C9426E90F57925E6B90462A69B5B7B8D3A9BB039
6867FE7E2AC972EBC0BF7AF09DB47C9634D58655915A5F80B2FEA256EF66888C
C3CA21D9B855B9419301C9252B0388C3D2991FD8CCC05A5F562B5A56550056D4
84833F10E47803A7C59C3D5721A434780F1A4CC038CA701361569B3DA199ACF0
C81BE069D449D70A59B59F965647D53B60E1D6B5E79F14FEA641E70E53EEE610
B51ACE63409FD846C558CB40415B523A8A68ED74CC061ECAB542393F2C60E600
23A0F2870920839D70C7BEB293B9A5BBCC149BC6763C7055D36905BBC0F53119
DD190549D49608AD851963F952998C3ED88624ED1C46FDF4E431E595A1B82767
59E95DA002B0CCA5C18AEA946FEE07DAA3F21CE120F55C6854FFD3D5D8A55A97
AD1286F81CCF9081A4D5193156B95F48CF565B0F43B5597BD674864237EBE751
71F03931E58CB444C1D01F58147920F047C6E3A07EE9E21AE616A4CB3CC4D1E8
4AE3A3C8B24CBC3C551A95AAB4489EF97A30A02461B938FC00659CD7387FAC45
646634A1ED34A59D5A5DE3BF9B7735371FE5A2F54624315981DB9E59213A1348
C24CC973934DCE0AEFBE747888AA5472E4EAE9451E7227D76D9D1546488B7E05
ABAA458C5CE797A327685E9B4BC7BC5BE08D7A1E06DB3CAEBFC71039C0B59D10
79C28C7B48C7D5F84C2BCD06B95540E3FB3EA320DD09E4801076F3D23805CB96
20828E3A3B42E9FC4459744017A858A05E957A0BE481889125A9F918B0D589B3
F75131F191636AACD05E249AD148875015B2C98143CB8E0DC94D7AC7C7932AD2
0F36035E72D0E1984FA7B6632F821C436EF096C85DA3B9F50D8C17D4DF6F82C9
C6413027B4B45357DF8A023B1140E1852E7C8694BC0C7F8FE32F9FDA1A1972B3
A602BBD94412DD0F1732287782064AC705336B100891CA409FEFB1FCF198FB7B
EC5A70738FEACB71010CF7B53835CF8CB2594EE9642FD835ADD9C7576B48EC63
B4AA06EAF34C55A9DF7A5BBED7DAFA90C418428EEA7FE8502D8A61B50F46B5B9
122813650FC5CF089F9E4BC79B2FC56A17E996253D615622E49DF9D5A043B821
5B28632F44878D7B925C6563C7FAB43430A8C18D7F720B0F3AD3D355C2D82F3D
8AC85B043180439C7138659DFACAAA6FA5465FD2C201F68CA9BF7742DC94E408
6A170AADAA395EF316196D4524DFE5F0CF45E34F3E676F57892E7B84E9F18421
4A98305E4B745066FC878C3635F884009281799053F2AE4F9E543F0888665850
7D715A5B9B67A9395FD76257FFE499657495A8F65464577DDFC4E17A6E08C996
958580FCA016D6CBF1BC2838BF5DD4BC71C5794FAB91B58B51245B2E6E5A09EE
51D7CF65FE3AB327792D7B481E7441CED1176B33C7A8C6FE4FCBDEA366B3B61E
D0C519EEC95753D8F90EA0F2E00AFC6163643F183246F03770484A76C9E9AA2B
3BF6446C43762A98FEFB392FFAD3D62DB4B6B44899902AB493F8D4D4003B3A9E
3C40BED17518DE3EF4453B971C6C9535AD5B243CEAA24D022824D0F85D2B8773
351704BD7285EF36EFB6FF17AEFE8C2885461383A6001D9D72D90F98143DAF20
C66B01296614FF645C36258C9727006876DC67F3A5383FD40709EACEB5AC1162
66894AFBA1C099D37DCE81637CF81BCCBC9A75D2297C2159F9D896637ED52225
A3D6F06AB19EE41927E3643B28F46F1A3CC9C64A0CCBCD21EE3F8CB8D683AE96
D6BF7966B63F3C38D2A520DA4BA108018CF37700087E56FF80F6B01548C6E006
CF2458325758C42643A8C27D5450409AC4A0B7347277BC78C886B4D94879EAEC
4FC8203FD54703BE1ECA7709AB15C8B743CF704F17BDC1FAF981B5FFAC5BDDFA
E060EC3BE1F2333B986C6DA24B2EFABD3F966972D791D8F4500A034B009CA750
04855988AB71EE70C8CA27A5EE8F65ECF51016EEB51A4B927E21436741C8F644
455F7194E2D023143479CA09D26CB67AA6AD22C534161BC5D769404E4FC36B96
B9864831D15E70735B60490205D562A86629E963F00FB88D1603E63E50C07073
C5F650547746D39693734B16AB45A37DDAD77E5A03741B47E291575EBBADF345
ABA1235E2E8F694BD93304E2A1F0BA0248DEF4F1797211B1B0756F63D30417AF
A317D4E2441F077E01225D024CAF51280C8B918F78C8037E3B2DC26D9B755F9A
29262BED1E8DC52E98A77C669237E055892E2923C11A43A5E9E3BBFCEBF3AABE
242B8DB08399673F0DB3A36F46CBCEF4356DAE343A5A517CF1296D0097C1DDE1
F31F40BDE046272D3A002AA956BDB480662E9C3EB33F2DBD6ED3E884652098BA
874EFBD90F9B885C1905F06CF393FA7D1C73440E060659EF21AE990FA1CD32C0
7144E50EA53E47FBF1576CE52D4F62B5F890D4E1801E568BE6AA1680B3A27C2B
2E981905B261FC9C322336A2B09FF81FCFFF0C08B845AB92F0C2CB98AD1C4D85
AF0220FE72248FE394FF0E9CC2AD41EC02209F570C0B57ED78FE33164934EAB7
0ED3852DB0876902173E5CDC48C10C8ABA3F9256705F285501DD5B3DAD315999
F5CF5E0B80B5DD2621BA9AE353860029A78F73ABEE3281F5CA76DED95E1289B4
09C20C24B2D24AE4A959F27F4D8E24A9CE7B8847B423346285A40E03B087F65E
545C90A242784F054B6BC30C30CEC13FBBB1666461969685B6BB5244DF4DCD65
A9BF5D7E6C88D2697B5AD4FF8BD03161544EBBBF2A1D83EB7E8E52C9AC808E59
F69D1E27029EA9327BEB4550626867F3F39634C4C53067E41D599481943BFF8E
11516F3571EC078E93A7B9A98C778272968F7F7088C429BA671904AC3FECF7FE
E66F6ED21252FD1D30EF2B3FD1917239849FA8B3641AE783085368BFD7E07477
45A81F5C4970AB227B3B35325CE562A37DB53D27BB297983CEC1EA6744F4FF2D
30D7538518D8931805C1AF17E1C9E41E72DF9D24F60B17AA93660EB11F006BC5
BF449FFDFBDE0DFD1D76F98245557B7C88B47B7CA97067ACCAFB470469798AC1
94B31AA1E693DE59D4AFCA0F15B934A345A80518480D209099A92C58D08B1B7E
D239E92F847195B75B1612CBAE3ECE334A1E2CA17120FCD87EA2086B80A02EBB
76B9C78867CB39F61F537ED7A5397F25320D5B4AFB4F73B7C7B8D470F03D3A13
7072298E907E1B826C828587AF6E6CF16F85D0A04140B6864EEE67471AD76F25
C6AB3EED42FBEB0E316AD709E0CEEF71B288C929C750FBF2545CFBA50A4DFDC5
6544B313F0C1A14515E3D70DC4CE2109F53EAA782BD885272D863843CEEB916D
6397BD4F518A978127D8FA44AD0770615D3F3079BC443161DC1C4D69C92BAC49
BFBA00A10D515B7C17BD16A11DFD7D48F4FE71A6869C42FCF442B59A2C3D8309
2CD5ABFA557EB42466F27A921214CF0DAC8C489F05735A7C08F3776B20C51071
FE37CBAA379C3CCB307FD3C2BA9F0E9DB4E15F9C80700C62FE8725469274DFD5
0B51719DE3AB42AF42515BB71EC62A50C7932B9958AFF362EBCDB0DA5C97ADC1
8F072318F967F9E979A6EC731990E42B0E9AF6BDD563F439DC7E93FABF2A10B0
3E4780D7415CE4F742D9977F0D85167B4EA01066B6B9738B485670FA45680CE3
DFC6C5084D227B306D65F19B68381807E5CCEB29840F4B1D0720A33C14F9D998
3325B412B696DF14EAB3FE125DA212C6E435C17D3913DC8425D651B94587BAF6
2FDD4BDB10613A860B17B9346D48ABC3F5E23ED8FC35BA33F568888E01A80067
4E41AFAA79DDBAA9230C3B2CD654ACA8A513F352B24C99554FF3DAB0438C65E5
A1EB77AFE9274CC14073847B9676169BA850A0967F2B7E3D1903EF47888C851E
EDEE0DF04441BE2105B861FAC6C3D38F32F29B1DB2FA31642CEDF152FA228594
29DCB4ECEC7DAA47EDB632BDB8B6B7DC860E2AC9EE706D00BB4D21A7CB4587E9
2C4E0E2B2CAD188FCD7BBB6AA3611BF0EB934AEE68F68CA220773AD3C75CE369
27466BEE2C7F64C01954A4E4F2E89B3260B54BB460303F999F94B588784F9819
7CABB574FE5A3406370674AE1B37C78F5A93EE386855F555961A4764A676D11E
1D48AD00693D9EFD2EFDC5721523A16CDB807D5C6AB7DD10C00CB15AD00ACF16
411B6461E3B9AA2F835D71FD09B0311A10953B3BE7ED39409BEED880363F4096
7C76A72DF0CFDC775C3B7C7E51DE67351C0CE7686E4E8DEB9AFB5A12BA6D6364
885319E19372F8A8F5517A78776B09D936061F0B9E11C83A0C9383869983FCD7
755E06A9831409D153CD6BD73FC2BF61B79A76DF70ADC124DB0001136DC06567
3196B62AF481C2FC5DD3745A379930C2717FCA5905347FC7C94E72CC40A3CC1B
5263D68CFFAAC3D97F013E090D8ACC320AA4307B8872447FCED40BC94E7465C3
65A2FB21BABA09D5377E95E57D6904608760D111F44625B25F470A3FF2986C6F
30B070C1028F44347CDA0C2E3AABB4D0AE6285563D841E1450FC5006E25BA750
372C86A036185BFC21BF840BAE5A13524F45903E166D92493145C52FB2AF2E61
D48FC3E58AE9EB227FFEC63AFAB6C4C03FA6A71FC346A14F3D0A3A2838B28563
05810D0B9F73DE3B805A31F7B99DEC09BE82A0D7E42CC17EC4297D7C67D824D6
9A724D47B08B736224120CC5E432226FBD4681AFB83A9E85CE3BAD2EE71493D9
F365FDD09268906EF9FD12D949C72219536F7CF0155E10B53A271F23B6292718
FFA56E5DAE5F72AAADFF0E32780B9B5BA9968923919D295CD3DA706E02DA6011
87F13556C213E42934840ECE4123BA815A52BD89A3E68A7D3D06321D6DB80CD6
76DACAB1311AAA28A172A33FA4EB480072AA303D33D5478995B53381864D0F6D
D575E02B6676D6627244791BD8F881711BB87027262A5D5F195A0D61A2E5CFC7
6D816168B879E23DDA5F2CF9657D9270933D8B167D2575CF146336BB1C76735B
E916C41094F704AD4A2236651359D3942F98C02657D25142C7E9A7149C40D1DA
8536AF51BD0187747CEDD0E54C7FB6ACA8A5C76B0F25FF7E645584A781B98E80
5208F7F7024A8E7745B78B6C62D99655F6A49B243AC38049EADFD22ACAE72A9D
41A40B324711EDEEF71A8C386514E315FA2602C71401F776BE0D9A35E67F69AD
67944339A9ABCEA9C8B4191E97160B441CABDFDD5B3E5C307AD3F378CEC215BE
12786138ECF2AA08D58AF980D475CA561FCB4FA9C4B222B7CC5AD6EBEB0E13FC
91129C7B65BBBA2F6F2C7D1BB968EEFE20CD2B55EFCC931A4BC4409B9A97CCAB
9DA5C76148888F30AE04C7EF4FCDA6D5E61B5B11D5B16C646BFD7EA160518EC3
FAA6C6B0F312FDFD210D6311CC070987DB17E7D56CEAD87C5E147F6027EC1FCE
4CCE8C1370A8046A97323D8081C01EF57138ECB833E831F8D04060584A50801D
97E5016786ED1F7EFA546E5830FD3980EBBA09FE16E968CD3631BC238573A150
526753FF601EA2FE46B5F4AD1CB787B5078DB3DE95BD21765E60CE61958B5C07
E803F959EE303CAD22D17B1DA9B6F8AEE664454FA76816D6B4B5A613D38B739C
2C9DC55234B1EC9277055C889959565CDACD8E3BBBDBB52F59163233EE43CC57
60009233FDE0B38CD4EC1D07A9F817ADBD1DC27197CE0615963F33B07FDB0E07
FD50A10CB64487849741CC5760009233FDE0B38CD4EC1D07A9F817ADBD1DC273
74C2F610A11E46A75CE560AEA4C017EBF96D17328218D45699653AA4927A4409
59BA8596659CF38AD3A0F294E60C6C736077F129F899D9D42D0C2EA7C77884CB
79C8BB9C8642FBC085461C1F5C08F4251173001AC87F47925900278C6C485D0A
6DA4A267B12A56BC42393BD7D25BA41F58BC269BAC8C5CEC0CB4D39B394D5B99
D460C6F2116674F20161A512ADE5004EAC1983C3A27BD79DB2C325DD74386C0F
A6BA73DBD4978C737F9316ED865433A6C388F74932152817BB02ADEF95EE7EF5
3C0810C9F49182F27FB2EFEB14D22482CB16BE7641C2062BD521E94CB75FFE16
57F7201A3935293CD84D7FCD00583C5D32E97B755E4E02F77721A9E29F41FC78
136D61A9BA91514DA793044AA4A7F090ADAE3FB781C6580DBECF4E110545382F
A077AC8473A2197ADF015326BBB45A5A1002918BDD84149AFFDDCE09BF6427B2
F8548CFFBE68A1C9B93929BAA7D6002720AF0089F623639FD3511FD8D1F189E2
E9F456286F94838CA9AD4C53DA0DCF5A4F60ABF4EA733ED13919BA719C14D80A
9BBE54DCCC081319918F521D50AF68857C7C013561FC62373D5556BD33B9C320
C693026B314F36A95D9EAB2A7AA826258C54513A0DE9FC52E249D07E7E4AFEBC
10E233F46A35D81E500DE4BA679F44F925F924FC917D6554A1055F5158F42169
2CBC815753145F3F9F1A700F5421787D651D62390897539CF808A2D798EE0972
F87F0A73194C6009F314570BD06F3DF5D308455F878563DBAA2C81FFF35A5F58
1347F256EB1E8716D1957C83B0B652F568033E899F707E2C41DF47626F61794E
CC5D86F0C590D7FB9E51E09C85C5BCDE30D15CD9AF25B5A043FB12A0038E1479
E82A4A8EEDED2E000BF8669B34D15F945FD3ADC0C170FB5D4155B13472B51A20
A64C1677B862B9F111E663E7538F927A87C3FCB97298CF3EFA20340FD833CEF6
22BA10BA3A87F250AF9CFBC195811C74DB8EF632AD0BF5CA6FC23DF29725ED6C
99C9BAF6E2D55D4F21066327922289B175E29D280DC052E73730D3F473542736
5E907EBBAD2A4F1E539017855B5C19F1CE084348AF4A89F4BAA1B889980CCEFA
92BA3793C3064340CDC4A30790A98FDE3BCBADDBBC7339DD27BD3D02642A7CF6
8414AB11C9D932C8B7105D73217BAD941926797DB7EBCA0865423AB9F2CFB10A
E4EEBB92F6E01C4AF65B426D4B4B2A3B3B1BA802D44F2319C69B56B582917BEE
B5834AC492C7CD6F6B5D1425204231D1A057AE00DD0D919032E966C4FAE40A4E
66396E6EC41D376E9C49A7DB3BE9CD90F1B7EA0FDB1228C5AA076AE4D9D40638
251FE20A5C8EFD39DA710A4716E17E9B240759A60DCAE14ED8EF6FCC31942878
0C704077090023E7419FD67B5E29F807987F3637173FA779ECF224B8C93FEFB4
61713294A95BC93A3B1DD3AE360E0738EDE8B7486E454FECB1D4A5F2E23B93B8
56616B9731BB62D201BDE18F264EBF17F6FB8A34081CD8857B0C2D2EF650A286
4C72187FB7CE09B5A3F6BDB6540E7EB3B2ED04EE65FC6EA0AFAA29B8732ADEB2
DFFF2399AE8927F6E327143683A0AD5D04E8F5E128D67DEFD435A271AA48CF5D
675F4FE5A1B29D798C9934744B0C15FD88CEEA5E73FCB142E2EB01CB51FF64E1
D14C3A2DB6000FAECEC86FBE4964497DF28C3C460D540308A4B04BD7F6D2FA07
D508BF3F6314B934962984C7FE400CCDE07EF27F9A18E0B8548BF1F4DB2CE7CE
111FF1EBC251BFC10CB871A6A860D2CC6F72F91B3F83EF013DC43C56879C8F90
1156F5EBCEFBB0C1D4A3326C9A80CB331289A1A7C0C2DBAB3BD971C726ABA2FC
24C9A2C7BDA35775E82F7A255D99F0E55E529D9F62B15A8A6CAA5F0136DEBDD9
263E7B29604785981A19BE86F0B5620689D14018E2C9C8F83089E6DD2B47C509
1688B483AFAABE8B145F5C279449CE771D390C6643575DB3163C5E135D18B469
3417BC7BCBA9B9B3CAC3DDE1FB2146ECB52DA43DAB8B9ED874697339B1BE26C7
98F297E596363AB8F026A562E25D24081C0B5B747F948BF4D612B27BF30449DB
579D45152EE0223988AB668B5D8A95C5DA1613D52F0B05412BEDB2B9F46B82A1
C851BC351B5E6C609E1FD66B020C2CBC5CF51F32E0F85CF885D3ACF89FABF737
E42204D7CA411E72AA4240AC015A6C831319551F503707DE018C4D20B99F6ECA
F512EEAFCBB0748549A2EEAA996F4CECA9D43A2BAFA4423177AC5CDD4EB182BC
80EC26012417DC2A6D2C4DDA1C21A8EB7AA57F10FDE34C570D7BE76A496A5824
2F51E7321387AAF941E02CF0E1ED9254513D2069C9C78D44E3D843C81ED4F37E
7E253582943E529D6D5F95823002767329F23E86C9BD62FC0A95B401905D12AE
5A91462AF79797A3E68BAB9C83D00558A3E3DEC08E65298B1FEB7559CD4257BB
F7A13A815B7D2F0D3EE287FF27B773081AD02A510CD680685331C5C5999BA6AA
EE90AC2056AA6244B338118EFD1514F68B16634323D8B0846527285A964C2319
392C34567412BF65CC59212EF17AE578C0B4023AB3140CECAD52A56F1BFD4596
67449FB7D3A09203A93E8955FACC7617D6BA28E7C99EADF0C0B1E8BCAB17788D
D7D6E88FE09CC08E327ED027B81EB14663E3073EA248927CEB198392CDFEAAB4
E9A75A7A4817071CADB866C5EF509B6512F0FA82155AE1D55E91A79F9E1AFDCE
C6B2064A075A1091E45AB0CCE4EA1AEC280B142F84D2332A8EAF659A10E67E59
8C8302D0AA1E43D463C84633FEABF6BAE118C7D9D5FFA2A1DAA2649DEB3A88F9
E3CB3801A1338E70052F863C4AC914313AB4546AE0D075E348A8169D782F3416
E6E89E8B884C3DA9CD700F7D1AB77DA35E2AD5E39330005E3B58FDE2A900134B
C8DEBFC58A3301AFD0E458E648A14A882B983D6FB2D42099C47FD2FC36ACB393
E276E19095EE0320B1B6AF50CE1ACB4ECAFEEE5B8D8919E0D116A2A4C4D43EB2
6F5BBA9E55DB42EFF1432DD9C69F01E263DF07867587275EA6DD073C4D158900
960AA876F763F040CB1A2E88CBF064796261654AADFFC21A7377F93DED82FF3A
D805AA74F65566957680618C923BABB7CA4AFEA458ED232D3F24C4839AAF0BA7
BFEF50AAAE950CD165353A0D84229C2226465DBD27291A7AAD14E9459CBAAC33
218BCA18B0B8D728F5EB7AB0D7C7210B02537F964BF9AB0BC0438C5F9AB06D6F
A688C48C7DCAB3F273A3908104F512DA07E4DA2845242ECF175C82F28A512C0B
FA58CD4C1C3ECDF1B6ABE0190FBB954E10D29A3A14507FF776F1EE9F81371ACB
9AF0819EEEEFF1853D651AA4560C188EAADF0DF449FB9D09F917E5CA703C7E97
E93721EA1178A8800AE691524EE0FC2F32464CA943AAFEA668D6F264A5BA80F9
5F4B9466D88BFC499D5E558FD28BAC9940C4863B2161664B7F69EDB79560B329
B7EEA14B0ACDBA0C5DCDCA4E8510A449AD2281EB809E218246596A46D6570A9B
D7D3644F3670B8148137CBF8B8E42F059715079C80C962D5D7BA590A76FF3CB7
1B492B26946554B0F35847142E0437615C1A328D4EDEA086C5286A649ED20A81
D4483F0A120953096C7C0CC05409CB17A76F02FBD40708F6E4BDDD108241F68A
7BCA1C18DD6AF4A70BB2D26624227E54D76876DC36BBFF11D1720491FB65AD62
C472D8392272B72B903E988A469C7251192FC1C67243B29E58C9B86656C5F1C8
B98E225001413A59765925DCD2B64E23463A33831D22663C2EFE1FE9298142B7
2D59E2898450699BE5ACA02DB1536D99057E3200F27051523EC8C785172FFDDE
D3B859563F8FEAD4B856B557CD97B141546FF52AAE673C3A8FA461F42695287C
7FA447B0584D28F6E8A0197C16F29FAC0342BC6B0E1DC060B162D9AF2B90DC7A
43EA830ECF6D6772E5E77AD6CE91C45B8261D9FA08099BDCC0FBB35FE44DC25B
2316DAC09CE29CD932034A3C0C89135FA3E075E3540574A6318601BB35995950
CB00A5EC95FC4A76220272D54C2245E3BCE7BD020554071ABD455F33FC351418
F361157E4F3C88C97818E42CBDCF311CDFF05C37F2EB54F2D137549F1C105B41
F92F125E3BEB0D110399CB8EADEC08A8E79D5A4C763EC2A172263718D3C0B2DC
97F50E0349A8BCF3E41B0F3C4A5DD8B590DD235A5E32DA7BA7C540A921C9923B
A4E509E24B79BE0FE3F55B494181B61F314F695B26630D27112327941D9C1BA9
9FCFC7C1AA01F38BADB7682DF46C8A208FC3E7B71D190D240836B7332B093577
8E3BB1B1EDE4A453F3188709A85504074B819B100F09B9C2B636562C5C7CBD2D
34994227FD7BC1FC02BFE55937DF0CDB33E479A0BE74BBC7DD92D941DD6712B1
4C189249BF0EAE8BDB05A6B27B6C63082606B805A0870CE512998D42FA38107D
B1C1CB3292E6AC20CAF1E4F4BBA9576894BF4A34FCD2A8E7252BEDD38E3740EF
AE2FD9766ACEBFF042938CF5CF3D7B7F918F80AD718FE0C9DB975F8ECAA1BF17
BBFA4E9D98849E6AB20FAEFA93C3F0A0CE960199D8F17D48B862BA6A61B8A95F
4B8EC9D803D6F16C0ED16D2ACFC90A1ED23A88CF1DEE3F583DC78DFF7A30FDCF
2C1789F5D48DAD1B9169DD75574B2BDED25562A77F13B6B4E693A1D158ED9866
DC5BCACA8616749B95BB56EDE1966C41E28D9E33FEC6EDF59F573E7EE66BEFF8
91039BF80D107CDAF7D9397CA04F99BD444526F6F2B0C8E9BDD05357DDBAB405
21439D3DF2D7F68297CB888CCB64BE12367732A1DC87E9352A8CA1EDC755E5D4
EFB473F04A08E9A86C68EC648A214D6F84B5DA77817B4B31C3CDF7BAC10F74AB
6593296A0F0345D4D0841BED1944705C8A42F97C89601CC5166FA1551EEA2972
CE855DE5F35FA56D91576B0137D663810ED18D8E8BB772EF73E44E681470B678
3FA8DBA0D35DABEB8E162D2EA2ABCB6CCE8C59231BC8DE5ECAA91A388956E233
994DE3021D1A157A20919C91898053E8C0153F4CB3863431FF9F94DF89CFEE37
6E57B6E45D2F375499F8118EAF5C7F6607DAFAEA36457C149A25CE9F8E3F4F73
415A620F8F1D9563FE9D84B623A143311EC892D1BB9554D34547816955434F5A
B835554C9B7F8041AAC5EFE5279BBF86B62029875231FB9C92443E6BA71C5D42
37AA1345B070AEF0927B0691BEEA0DA270AD7F40F2E19484D621D0247C215967
3642C80A1C508556989441CAFE986DCD33654037C371A956249957C171FBC479
9803791CB3BEE3296699909AC060DCC493CD8F04E6217FFDFFDFEAD1348B007A
95BBC38D5EA3DF8D53ECA91494E76786820A691F651E0B0956824ADED2E751BD
AFFEF696F87CC193C807E4D0D17C59E6548EB9101CDB4D94A4EBC6ED848E3EDA
F5E6DDE7690BE150A5F0027C54BB834F2AB8F692C3ECAFAC681737814BFAF15B
A012A78E284B77A156796301EBEF2ACB3D7E97A3D8DE345D300A475AA9F5F746
399917534D94483A5CCB3EB5F15529115D38B484207D8F70375F336851879240
6CC4B76975393A665BC35F1E3BA85E39F3BA60CBCB4998B7C98671C68B753CFA
8E6579BE753628A33381D598A05E6B2ADAA9568E15943256C1E787C797EA59A3
646AF2B83590B2F1AC3A3F1C9E8D4650D14055823DB7D1D12E2435634CF69890
D14A1FF76CDD282F296CC34514D95C71475C1F8EB959566A758566F3CFDE9B74
A174C6AF59E146AFD5B53602750F77EE8B0B6C2378C79FFE0303AF1B0861C65D
9EE861F61D00903637FBD0D5B5FCA6FF6D2B9DDEF1A56DF68172A2FA4CE9CB0D
B078B1921F6DE29913D2B6F1AE4F6DB85E249AC1EAFCADEA375AA5175ABAE675
4E91CB540D475231DC7335B301C368A9C12DF6EBF6890F9FE438356399B49BEA
BCD3E20C6EF4140E2744364834CE13CA9FECBA2DFBDC2F3660BE55223C56908D
00199B1D2D941076B1C64D9F502841A2EF916B6A2EAFB651D0E490A79CB8484A
E4B00634E2C6918204F0C5D2E96F448E35374B065ACCAECDB4C04F9F3C85BD4F
2D26E57A3D24D17B8CDEB0450B99E5E00980BE1EA14529BE16F9E7F147B0E337
9E2AB5195667C67DB4AFCC1E30D0DFB9638E9DC9E65F758F0FC4FD7902D98BFC
40B58D828722F0FA75A0F4913D2F5DB4EED1DC127964363DAFA5ACDD46DD9F31
BA6187C7631A9AE97F4717795D208DD163A3CA1D6A8C6C902E1F966AF6EAA688
FE05FB79F31A554D8BF98B8303CFD661ABF9A72CA61CE8BF37E5C449F405CE62
F70C1C35A77C9A7468FBF81516C5D98A6566CB91770EC7F8004DA518F5ADAFBC
8A6A7B725B3F51746691838E600146F6C88E1BE994C9B868856B05FFC68D8337
EA8295F7A6A319ED7849584DEF8745F62EC9CEA9092D339FF5C8076DD23496F7
739B7CA64E5DB90852326DE98A17CA6154B18B7D052CCE3764855E0C349F3590
74FAAC55DEE7339B54D8F48B28FCC5A53A80F8B9E2562D9201284E8F84B63AC5
1A9D7772F7F63D27EE5372CAC76AB00BE788BB2AADDBB4DE5F1EEC172DFB834F
AB96A00DB493060CA3AA918F63B4E0D1C4D5047BD776150441297214868CF511
A11896C292F967D985F048C22A7AD1644E740DBC9178E8DA387317FB0E366457
EFC5B4DF8C0045FED059B9A392D09E79AF5175C056091C21056710EB6C643276
E234F2F1B6AE797F1989D94D587E31A4D9C996E3FC2337B57F1DAE3FE9FFAC26
1F75826E8A50B36923BF75D22F40A63F145C16F1812AB2F8969F9BD74705319E
03CA6066CF79A476C78C8EC10044DE5F02941BFBBAC3E6DF71A265B2D5028486
0A8999BEF98BE5292433CCDCC16EF92AEC7C25AD67D929CE8BE711ED480CBB8B
9E59E1BB192DE5A944920C2BE36820C3CB1FC79FEEEE1DB28D4362E66BD22862
FBB603738B2776D1C11C1CA08BC250C9DDAAECE52E4B3584DDBD03B345F3ABD2
897BC9C6E0904108EC9B98B413F0629F86E2A6B742B1E842D5A029758573CC95
09265F6B11B12B80D093764F2321E3965142529E2183036CEE800D650FE2CD2E
74C038665ECA6809BF64EB7C738A7D573E2345E735B39F7B01398298382884F2
3485DD79C77BD0256D6B5B7FCFA5E7F8BDC7A6408E816FDB91167A89F2C736DE
82F77A6D8F10A45FDA85B8AFE7CF22C48D74DD85E83A3C976FE83802D4CCD92D
0201A37A4B011776C7A572D2FCF18871BB569C2DB5BDE70B66EF2A8B36645A69
B98423622B29005DD195EFBEC0A1276128CE164A3605D741E184934141A0CA89
69227865287BE32403361CA7364E39F2377A27C8FC2996DC5EAA2DDD4BA4D19B
97CB47F87B0B5C5643D09BF39054DAA56DCA71D1EB2D11EA0A4E674B4CA279CA
5CCDC91DCC31C364269A0A1824B829CD76E3AC5D069E9CED1953320CCBE9183B
3F48D68850162A7AF46762375B3B86A8242CBF2B86DE255EFEF62BDD954F8850
BDE7D9C5699DC3DAC8170187CDF780CAF45A8E0C2D394A26B50F8BE449989D3B
AAFBA2577874822FA06852EBDFC8B36B5100CBEC185D6B4A80C1BFA827E4F15E
623A96FA4C467945AAFDE37A06EDE5C5A6EA04FCECBBE13660D5360139F61897
2B53ADED366BD57798F0A499C68E97E7D0CCD7A25DE096545945C5EBA0E4FD6B
949B546AD49D1BB161E9AE6E494EA09A3C18863494799AB90F0B0FF8A490CE81
427850EF0BF1893EE9DAAAE01D3D31C4FDB384916466ECF1DEAA6BC84091D78C
B8CF4D3B9456B3C965E1DA046E364ADFCD2EC564AF37894ED6E27404B87E3F1C
C44FC24152AF2824C52517A3A723827BF9FC6B3AB9AE1392947D728AA0C13CDA
7AD331913536B7CBE03A1FE54984DB1360443280A503C318BA0E4AE1C4F13A14
C9BD2ED605545B32681CB99E77B7E20D3890376115C03FE9CBF4E95A64E1AF8D
885239E098B5E092900CF247185D27FCF222ED6F9272898D6F2937AFDECE2AE3
A4C7A73A143A58488D7CA6305DB82D1B9E2BAB632D491E0B79DE6BE84A6F9C46
4D8E910031810BA9CE6293C4F789008648C107484AB4DE3089EE7EC6E794FB61
6A01AF6C1A517F866B1D2A28CF104F2A6D29B8AE7D207719618B4C8177455664
5F8F7284E4F4008E39FCE635BEA43A89B051E56A08C86D1C00A3D9976ADC7915
54B2FEE7E9B8294267C7B7CFD2E3845ED2B3AA3B544D123938B1A9ED777C9440
3D83721603D1E0E18571D37FD6F93162608D6002D3352AF1E580296E3C117C99
0D304DCB194242C152040F68362FA3B2A093A73138B94E956C5BD44F9EABCFFB
45D475CE80BC89946D5F159F9E17AE577B8F39E47C1AFD8ED4CF2FB4A626EA3E
54A5F8F9033FB19EAA3156F3F258497DD93C2D0040C69BC2C31523B52641B228
A80BFA518FF566CBF0E9A0FEAAB6889854706D62B383E1A1E94A43E70F1987BA
9120215FCDCF42F6B9D48CB8BFE82885DDB862CF9130189641E44B98474217BD
B214742B92F92A325149FD6CADFA632F5E420C4937017C0C21E0F8BA5AC7C90D
86D28ED64F58E7B65C8DEED54A17A0B1D9F2446507F40B5ABB927EEC412827C7
5DDE0C181120E6C8A151D6B35FF062A55E990D90A5327901C86349D326F62E6D
CA9AB09F928275A5BCE57DEE035EF7522B4A1ECBA71EF1945264E289556CD33E
DBA52D12C28892184D6F833F8281E8C9B74C9AA760120D7F4B7D0F065764CC76
436464569F4FF7AB4AE2E69CCDEDF5D4DD5564D2368FD941246CB5CB55CCCBD4
FB0FD5DB30159049AFFD7681E0676ABA33AD8C8A2AF47162F944EE679C9587F7
4E91BAC883EAAD248922DDF93950F72BF845FD85414F11BB195452F6D1A1A03A
B6328A4EC14E45FB4F7DC15BBA97760F5C26FEBB86EF6FCE021C059AB4EF143A
7C0FA2A798DC714D3870460A32E48EC980C6D8DC4FFD4A81B18C53AB0F305810
699678C14A470C521977C3C3D6D851300EB311FAE4FE1BE9CD557F3EF42F6680
45E8AB3A7857D4DB0246458FB78C6ECB6460A2203FC145055E95F4931815477B
9F521091CB85373B2BD37B09BD7BE2A97BA9B3D1EDC25CA5891E21EDD15D21F3
F56F52996BBFE61BC564E1EFF5EC64F8855E80F6D12B6CBAD2A6BB12008911A6
3D378BCD9E0E3A4DEA712B412B8BCF436423ED062CC6CB6C4E4F6940A8B8304B
B717AE13B997C454B8E07BF88BA2EF24282A9F195D1BA85DC54B2B25B0996C96
A88A1BEC0CC63D2FC71CF54E808149208D0B84AE81D40E4614DB94C9D7547DFA
D8864F90D36F6F43C0E96DB39F4260EBA3796FDBFAC259FF6A6E3A0D52370090
D1698D566CC5BEE58A7F9A981EA2BC3DB3A7CFF90228634C1A1B6062E8BE8878
D4E16C0072D3247A3A30E7B7EF94DE4F449CB4E40C3F84A17BA8FC69AE2DD8E2
F6CB8AA0CB145728E447FA7540FF48B0055AB859AD6EC8B037A13E6DA8CC8F0C
D2BF4B689E385EEA9A4AFE18086AC3ACA46FE8DCC4C2C8C1F4F1FF4C0065518D
87B002023047E5F9400E53083A357EC3FB4F8BD6C351707AEE905E75A1FE42C5
A68600E113035518DD294F8CFCEBCEAF10DF0CB45966A9F6C2FDA02C31BF3993
3D39B85AB544171611FB3834F1D87289EB6755E172DE0C8F2515E6600B5F2FF0
0A382BF629F0BF4A33726DE4A0837649AD8FB8E09E6DE0B06B7FB74C74B3B4E3
F20190542D0397F0D4A80DA68D101274000C5AEC2DAF05581AAAA0549481BC35
F378E366322D9FDF51AD0D4E24D8747D9314972AF36FC6E5F85E045FE7506462
D89832FCE8ECA959671262EA59509C98EBA7E8ECBEDA3AA36957628CBFC93802
BDE85EADD48A4B22EF347042D6124BF807EF29A72FD6E485426B6A79723F7A2C
A078E32C377FA9702F7D51A7560925B81B024F9CEED4AAA7AD0586B4B91100B2
9BD2C5F18B748F3001245C88C4E017B6001A2FD4B65F900657F018FF2277BBEE
4139EA2E4EC820D5AD2B8D0009229A4FBAF9C5686CE382C902AF1A86C64C1CE7
C75F8534F79AB4029937BCD6551C633404B84DF2A470D5BB321FEC691DDEB4D4
A1DCFB62AF979AA2598AE8014C64DFE8B72C71D1D668ECB51096C4AF535500D5
1E2134D1B4E7C269FB42BCCED56FDFAA11F2D67B799250CA25A358417730ED46
2B97B6FE369CE94777EF5AF80F49FED3E23115FBB617729BFA651A9AFEA17053
3E44CC8E1E185AFD941BC29BC38465CEB189A1E0986CAD4CD9B92EB0D4F1F190
9EC64A713077C39143545398CD8AE2E337412621BAA5BA3F17FA475E09DD0855
124C396952B151CA489D77F77011CEA7054A147B16E46787268CE7FE478BCD0D
979A9444B292C6D0DFE83B9AC6CAB9841415F9E886AD5B17AD0E22C0D803AC94
73D6AC8B3330AFF0C833702F25F5E6D7BD2773C4AFE93006C76E65C8C02D7985
883FA03BA18BC24978FB14AA924CE622598DF0AD7F86556D7A49C6E042A7EB88
B221E6A7FECD6BEE134E6569EE803BF23F705A0BEC9FEAA5AA98B091AECE44A1
6E7E745A34A3CB0BF69F5E18B7135FFD4234183A3F63A0E77220CED05E96BBB0
9A9A074D745E3D9502E4090A775A6E423FFC9D4A9E9802A6C736FCF5449C2169
315824129964FB61EED7D7FC629775F756A35ECB9440269579DF895AC8E41AAF
C163D743D5C05B47542AB2B5997FE8024A17C009A548BD30AB5D15F3063FD136
E0AFDED6AEF933CD1B033CECE52F2179FA116D9070A4A5075D2F8CD7FAB00C4A
69D9B910A9A56A8B01519D36422610035954CD3A519DA1CC532B9FC671E0DBDF
F16F06833840099A7D714B7A6448191FA054570A7CC09210F40B327598343E6E
02F6FEB599329AD1EA0D061F6F0432648EBEA71EEBB48538104DA35D592295B5
9D6CBAD016ACFCF3FDA5EC5C21C5C1E78C357CFE3565DAF0F9C81CA5DBD08E19
022B5591B47733106ABDA05A025B1F47E53E0B12F45A48E432D55364F3F73E2F
C357B59001227393FF91AF475E8316E53DCEA2F971D7C09B68B75C1E8D39260D
F18DDAB0BA5AEABA60A545A17978148E39DA054FF3F5FD4362C37A73C47B1F9E
257914F2E50C6C9DC5170612F4120BD18988B955338F2446AEDA822C50038827
02C19B3221F02826C08377FCB285AF2D5D32D6FFF602E49F7D756148A90823CE
9BCAF917484CFA165EAB46D97777A005A04D0B353FE0B7C05CCFCD3782A699B8
48AD891666985D948D69D7DE5E34B7DE38658C621C3E85435134FD219D8131D9
FC6E65A561588154F805BA888D966E9763666103048595562926CE22AF363B95
1F7CEC33CFF1B53BEB0B2B31F665586C5F0D934BF8B42B59B5D39E7EA14E982D
56A4ED421AD85CB900F1B8100115DCF9363C3B0CCE7E94EAD6C31290714564C9
EEAF67E9CFF9B3052A9F9E98A50284869AE6A1395C8EA3E4844B89EB0BA5D84C
51C44BA472B777536BB62F15E43CD38154C263C48059DC0CA0BB895D5FF8EC6F
36C94B5BD7FFBE6FC2148BBE492975794ED4D1C6F45B1A14A885FBED6FADD6B5
35E7DF168252F44AEA516B2CF54226105B6789456CD37C241102E0EA31
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000
(E:/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA )
@start /Fa 205[406 8[320 320 40[{ enclmrm ReEncodeFont }3
664.176 /LMRoman6-Regular rf /Fb 135[464 17[399 102[{
 enclmmathit ReEncodeFont }2 664.176 /LMMathItalic6-Regular
rf /Fc 133[438 1[530 17[452 43[261 58[{ enclmmathit ReEncodeFont }4
885.568 /LMMathItalic8-Regular rf /Fd 203[993 52[{}1
1328.35 /wasy10 rf /Fe 165[886 7[959 82[{}2 1328.35 /MSBM10
rf /Ff 185[723 4[830 13[553 553 3[307 46[{ enclmec ReEncodeFont }5
1106.96 /LMRoman10-Regular rf /Fg 160[909 45[606 1[606
47[{ enclmec ReEncodeFont }3 1212.12 /LMRoman10-Regular
rf /Fh 255[732{ enclmmathsy ReEncodeFont }1 885.568
/LMMathSymbols8-Regular rf /Fi 199[470 470 470 470 470
470 470 470 470 48[{ enclmrm ReEncodeFont }9 885.568
/LMRoman8-Regular rf /Fj 143[1107 5[369 51[0 3[886 48[369
1033{ enclmmathsy ReEncodeFont }6 1328.35 /LMMathSymbols10-Regular
rf /Fk 162[361 1[361 29[1012 1[361 1[650 3[650 650 650
650 650 650 4[1012 1[506 506 40[{ enclmrm ReEncodeFont }14
1328.35 /LMRoman12-Regular rf /Fl 133[604 1[739 16[623
641 1[676 560 553 683 16[838 17[1012 1[1012 361 59[{
 enclmmathit ReEncodeFont }12 1328.35 /LMMathItalic12-Regular
rf /Fm 3[723 5[650 17[650 105[578 686 686 939 686 723
506 513 506 686 723 650 723 1084 361 686 397 361 723
650 397 578 723 578 723 650 6[795 2[1336 975 1[939 3[885
1012 3[1011 1[469 1[1021 849 885 993 939 921 975 1[614
4[361 1[650 650 650 650 650 650 650 650 2[361 434 361
2[506 506 6[361 5[759 27[{ enclmec ReEncodeFont }61 1328.35
/LMRoman12-Regular rf /Fn 60[1625 72[956 4[1196 837 849
879 1136 1196 1076 1196 1793 598 1136 1[598 1196 1076
658 982 1196 956 1196 1046 6[1315 2[2223 2[1497 3[1470
1616 1682 2041 3[801 1682 1691 1353 1412 1[1554 1530
1625 8[1076 1076 1076 1076 1076 1076 1076 1076 1076 1076
598 717 45[{ enclmec ReEncodeFont }49 1912.83 /LMRoman12-Bold
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-2331 165 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a -2331
165 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a 1328 x Fn(F)-239
b(A)717 b(3.2)g(-)h(1)f(P)-60 b(otenzfunktion)715 b(-)i(O)-60
b(A)718 b(-)g(BIFIE)p 0 TeXcolorgray -741 4800 a Fm(1.)p
0 TeXcolorgray 651 w(V)-108 b(on)385 b(einer)g(F)-108
b(unktion)384 b Fl(f)527 b Fm(mit)385 b(der)g(Gleic)-36
b(h)g(ung)384 b Fl(f)142 b Fk(\()p Fl(x)p Fk(\))369 b(=)g
Fl(a)196 b Fj(\001)g Fl(x)30367 4318 y Fi(2)31089 4800
y Fk(+)g Fl(b)386 b Fm(ist)f(der)g(Graph)f(gegeb)36 b(en:)921
35285 y
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 402.81192 a add def
/d 0.0 a add neg def /h 233.4053 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 921 35285 a 21243 27191 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -56.90549 T 9 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 219.22887 0.0 -183.58305 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -170.71646 0.0 T 15
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 160.28156 0.0 -73.12375   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 219.22887  0 -183.58305  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -183.58305
 219.22887  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-73.12375  def /maxTickline 160.28156  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 160.28156
0.0 -73.12375   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 219.22887
0.0 -183.58305 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 160.28156  0 -73.12375  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -73.12375
 160.28156  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-183.58305  def /maxTickline 219.22887  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 160.28156
0.0 -73.12375   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 219.22887
0.0 -183.58305 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 19998 24327 a
Fi(1)19998 21177 y(2)19998 18028 y(3)19998 14878 y(4)19998
11728 y(5)19266 30580 y Fh(\000)p Fi(1)19266 33729 y
Fh(\000)p Fi(2)24157 28537 y(1)2680 b(2)f(3)h(4)g(5)f(6)h(7)-26033
b Fh(\000)p Fi(1)-4351 b Fh(\000)p Fi(2)f Fh(\000)p Fi(3)g
Fh(\000)p Fi(4)h Fh(\000)p Fi(5)f Fh(\000)p Fi(6)21243
27191 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 21243 27191 a 21243 27191 a
tx@Dict begin  { 219.22887 160.28156 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 21243 27191 a 21243
27191 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 21243 27191 a 20900 27477 a Fm(x)21243 27191
y
tx@Dict begin  PutEnd  end
 21243 27191 a 21243 27191 a
tx@Dict begin  PutEnd  end
 21243 27191 a 21243 27191
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 21243 27191 a 21243 27191 a
tx@Dict begin  { 0.0 0.0 pop 219.22887 160.28156 exch pop } PutCoor
PutBegin  end
 21243 27191 a 21243 27191
a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 21243 27191 a 20195 27523 a Fm(f\(x\))21243 27191 y
tx@Dict begin  PutEnd  end

21243 27191 a 21243 27191 a
tx@Dict begin  PutEnd  end
 21243 27191 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0.6 0.2 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -6.452211463544192
def /x1 7.705016581270089 def /dx x1 x sub 199 div def /F@pstplot (7.0710678118654755)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0.6 0.2 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -6.452211463544192 def /x1 7.705016581270089
def /dx x1 x sub 199 div def /F@pstplot (-0.2*x^(2.0)+5.0)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial
21243 27191 a
tx@Dict begin  { -91.82104 98.6364 } PutCoor PutBegin  end
 21243 27191 a 915 x Fm(f)21243 27191 y
tx@Dict begin  PutEnd  end

21243 27191 a 45511 35285 a
currentpoint initclip moveto
 45511 35285 a 921 39823 a
Fm(Ermittle)433 b(die)h(W)-108 b(erte)433 b(der)g(P)-36
b(arameter)434 b Fl(a)f Fm(und)g Fl(b)p Fm(!)921 42368
y Fl(a)369 b Fk(=)p 3353 42368 15749 34 v 921 44914 a
Fl(b)g Fk(=)p 3224 44914 V 1 0 0 TeXcolorrgb 921 49451
a Fl(a)g Fk(=)f Fj(\000)p Fk(0)p Fl(;)p Fk(2)435 b Fm(und)d
Fl(b)369 b Fk(=)g(5)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 47992 4800 a Fg(___/1)p 1 0 0 TeXcolorrgb
48228 6792 a Ff(F)-123 b(A)369 b(3.2)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 53184 54804 45
v 0 TeXcolorgray 24746 81281 a Fm(1)p 0 TeXcolorgray
eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fn(F)-239 b(A)717 b(3.2)g(-)h(2)f(Punkte)f
(einer)g(W)-179 b(urzelfunktion)714 b(-)j(MC)h(-)g(BIFIE)p
0 TeXcolorgray -741 4800 a Fm(2.)p 0 TeXcolorgray 651
w(Eine)452 b(W)-108 b(urzelfunktion)453 b(kann)f(durc)-36
b(h)451 b(die)i(F)-108 b(unktionsgleic)-36 b(h)g(ung)452
b Fl(f)142 b Fk(\()p Fl(x)p Fk(\))400 b(=)h Fl(a)308
b Fj(\001)39501 3849 y(p)p 40608 3849 740 54 v 951 x
Fl(x)g Fk(+)g Fl(b)452 b Fm(mit)921 6792 y Fl(a;)221
b(b)369 b Fj(2)g Fe(R)434 b Fm(festgelegt)h(w)-36 b(erden.)855
11330 y(W)-108 b(elc)-36 b(he)498 b(der)f(nac)-36 b(hstehenden)497
b(Punkte)g(liegen)i(jedenfalls)h(\(b)36 b(ei)498 b(b)36
b(eliebiger)499 b(W)-108 b(ahl)498 b(v)-36 b(on)499 b
Fl(a)921 13322 y Fm(und)432 b Fl(b)p Fm(\))i(auf)g(dem)f(Graphen)f(der)
h(F)-108 b(unktion)433 b Fl(f)142 b Fm(?)921 15314 y(Kreuze)433
b(die)h(b)36 b(eiden)433 b(en)-36 b(tsprec)g(henden)431
b(Punkte)i(an.)p 17310 16280 11765 45 v 17310 19498 45
3219 v 18018 18221 a Fl(P)18856 18420 y Fi(1)19751 18221
y Fk(=)369 b(\()p Fj(\000)p Fk(1)p Fj(j)p Fl(a)p Fk(\))p
26665 19498 V 29030 19498 V 17310 19543 11765 45 v 17310
22761 45 3219 v 18018 21484 a Fl(P)18856 21683 y Fi(2)19751
21484 y Fk(=)g(\(0)p Fj(j)p Fl(b)p Fk(\))p 26665 22761
V 1 0 0 TeXcolorrgb 3657 w Fd(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 29030 22761 V 17310 22805
11765 45 v 17310 26023 45 3219 v 18018 24746 a Fl(P)18856
24945 y Fi(3)19751 24746 y Fk(=)g(\()p Fl(a)p Fj(j)p
Fl(b)p Fk(\))p 26665 26023 V 29030 26023 V 17310 26067
11765 45 v 17310 29286 45 3219 v 18018 28009 a Fl(P)18856
28208 y Fi(4)19751 28009 y Fk(=)g(\()p Fl(b)p Fj(j)p
Fl(a)295 b Fj(\001)g Fl(b)p Fk(\))p 26665 29286 V 29030
29286 V 17310 29330 11765 45 v 17310 32548 45 3219 v
18018 31271 a Fl(P)18856 31470 y Fi(5)19751 31271 y Fk(=)369
b(\(1)p Fj(j)p Fl(a)295 b Fk(+)g Fl(b)p Fk(\))p 26665
32548 V 1 0 0 TeXcolorrgb 1372 w Fd(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 29030 32548 V 17310
32592 11765 45 v 47992 4800 a Fg(___/1)p 1 0 0 TeXcolorrgb
48228 6792 a Ff(F)-123 b(A)369 b(3.2)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 36620 54804 45
v 0 TeXcolorgray 24746 81281 a Fm(2)p 0 TeXcolorgray
eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1599 a Fn(F)-239 b(A)1169 b(3.2)h(-)g(3)f(P)-60
b(otenzfunktionen)1167 b(-)j(ZO)f(-)h(Matura)g(2015/16)g(-)-2331
4622 y(Haupttermin)p 0 TeXcolorgray -741 7929 a Fm(3.)p
0 TeXcolorgray 651 w(Gegeb)36 b(en)733 b(sind)g(die)h(Graphen)e(v)-36
b(on)734 b(vier)g(v)-36 b(ersc)g(hiedenen)733 b(P)-36
b(otenzfunktionen)733 b Fl(f)875 b Fm(mit)921 9921 y
Fl(f)142 b Fk(\()p Fl(x)p Fk(\))369 b(=)f Fl(a)152 b
Fj(\001)g Fl(x)7299 9439 y Fc(z)8193 9921 y Fm(so)-36
b(wie)365 b(sec)-36 b(hs)363 b(Bedingungen)g(f\374r)g(den)g(P)-36
b(arameter)364 b Fl(a)f Fm(und)f(den)h(Exp)36 b(onen)-36
b(ten)921 11913 y Fl(z)59 b Fm(.)434 b(Dab)36 b(ei)435
b(ist)e Fl(a)h Fm(eine)f(reelle,)i Fl(z)493 b Fm(eine)433
b(nat\374rlic)-36 b(he)433 b(Zahl.)921 16450 y(Ordne)345
b(den)h(vier)h(Graphen)e(jew)-36 b(eils)348 b(die)e(en)-36
b(tsprec)g(hende)344 b(Bedingung)i(f\374r)g(den)g(P)-36
b(arameter)921 18442 y Fl(a)433 b Fm(und)g(den)g(Exp)36
b(onen)-36 b(ten)432 b Fl(z)493 b Fm(der)433 b(F)-108
b(unktionsgleic)-36 b(h)g(ung)433 b(\(aus)g(A)h(bis)g(F\))f(zu.)p
0 TeXcolorgray 0 TeXcolorgray 2683 20223 18517 45 v 21199
20223 4523 45 v 2683 33143 45 12920 v 3391 32198 a
 currentpoint currentpoint translate 1.80258 1.80258 scale neg exch
neg exch translate
 3391
32198 a 3391 32198 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 85.69469 a add def
/d 0.0 a add neg def /h 55.27739 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 3391 32198 a 8054 29369 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.3 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 43.5726  0 -42.12209  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -42.12209
 43.5726  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-25.55345  def /maxTickline 29.72394  def /dT 932339 abs 65536 div
viceversa { neg } if def /DT 0.5 abs viceversa { neg } if def /subTNo
0 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
0.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.3
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 29.72394
0.0 -25.55345   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.3 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.3
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 43.5726
0.0 -42.12209 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.3 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.3 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 29.72394  0 -25.55345  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -25.55345
 29.72394  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-42.12209  def /maxTickline 43.5726  def /dT 932339 abs 65536 div viceversa
{ neg } if def /DT 0.5 abs viceversa { neg } if def /subTNo 0 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse 0.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.3
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 29.72394
0.0 -25.55345   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.3 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.3
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 43.5726
0.0 -42.12209 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.3 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 8054 29369 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 8054
29369 a 8054 29369 a
tx@Dict begin  { 43.5726 29.72394 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 8054 29369 a 8054 29369 a
tx@Dict begin  { 5.0 4.18748 2.58331 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 8054 29369
a 7822 29512 a Fb(x)8054 29369 y
tx@Dict begin  PutEnd  end
 8054 29369 a 8054 29369
a
tx@Dict begin  PutEnd  end
 8054 29369 a 8054 29369 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 8054 29369 a 8054 29369 a
tx@Dict begin  { 0.0 0.0 pop 43.5726 29.72394 exch pop } PutCoor PutBegin
 end

8054 29369 a 8054 29369 a
tx@Dict begin  { 5.0 14.25717 4.5 1.5 -40.  Uput UUput } PutCoor PutBegin
 end
 8054 29369 a 7265 29535 a Fb(f)76
b Fa(\()p Fb(x)p Fa(\))8054 29369 y
tx@Dict begin  PutEnd  end
 8054 29369 a 8054
29369 a
tx@Dict begin  PutEnd  end
 8054 29369 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -1.4804291276946526 def /x1 1.531400534608247
def /dx x1 x sub 199 div def /F@pstplot (-0.5*x^(2.0))  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 0.5 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial
8054 29369 a
tx@Dict begin  { 17.07181 -10.19872 } PutCoor PutBegin  end
 8054 29369 a 462 x Fb(f)8054 29369 y
tx@Dict begin  PutEnd  end
 8054
29369 a 12877 32198 a
currentpoint initclip moveto
 12877 32198 a 3391 32198 a
 currentpoint currentpoint translate 1 1.80258 div 1 1.80258 div scale
neg exch neg exch translate
 3391
32198 a 21155 33143 45 12920 v 0.9 TeXcolorgray 21199
33143 4478 12920 v 0 TeXcolorgray 1 0 0 TeXcolorrgb 22996
27141 a Fm(E)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 25677 33143 45 12920 v 2683 33187 18517
45 v 21199 33187 4523 45 v 2683 46107 45 12920 v 3391
45162 a
 currentpoint currentpoint translate 1.80258 1.80258 scale neg exch
neg exch translate
 3391 45162 a 3391 45162 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 85.69469 a add def
/d 0.0 a add neg def /h 55.27739 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 3391 45162 a 8054 42333
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.3 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 43.5726  0 -42.12209  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -42.12209
 43.5726  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-25.55345  def /maxTickline 29.72394  def /dT 932339 abs 65536 div
viceversa { neg } if def /DT 0.5 abs viceversa { neg } if def /subTNo
0 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
0.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.3
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 29.72394
0.0 -25.55345   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.3 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.3
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 43.5726
0.0 -42.12209 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.3 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.3 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 29.72394  0 -25.55345  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -25.55345
 29.72394  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-42.12209  def /maxTickline 43.5726  def /dT 932339 abs 65536 div viceversa
{ neg } if def /DT 0.5 abs viceversa { neg } if def /subTNo 0 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse 0.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.3
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 29.72394
0.0 -25.55345   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.3 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.3
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 43.5726
0.0 -42.12209 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.3 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
8054 42333 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 8054 42333 a 8054 42333 a
tx@Dict begin  { 43.5726 29.72394 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 8054 42333 a 8054
42333 a
tx@Dict begin  { 5.0 4.18748 2.58331 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 8054 42333 a 7822 42476 a Fb(x)8054 42333 y
tx@Dict begin  PutEnd  end
 8054
42333 a 8054 42333 a
tx@Dict begin  PutEnd  end
 8054 42333 a 8054 42333 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 8054 42333
a 8054 42333 a
tx@Dict begin  { 0.0 0.0 pop 43.5726 29.72394 exch pop } PutCoor PutBegin
 end
 8054 42333 a 8054 42333 a
tx@Dict begin  { 5.0 14.25717 4.5 1.5 -40.  Uput UUput } PutCoor PutBegin
 end
 8054 42333 a
7265 42499 a Fb(f)g Fa(\()p Fb(x)p Fa(\))8054 42333 y
tx@Dict begin  PutEnd  end

8054 42333 a 8054 42333 a
tx@Dict begin  PutEnd  end
 8054 42333 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -1.4804291276946526 def /x1 1.531400534608247
def /dx x1 x sub 199 div def /F@pstplot (-0.5*x^(3.0))  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 0.5 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 8054 42333 a
tx@Dict begin  { -19.91682 14.22636 } PutCoor PutBegin  end
 8054 42333 a 462
x Fb(f)8054 42333 y
tx@Dict begin  PutEnd  end
 8054 42333 a 12877 45162 a
currentpoint initclip moveto
 12877
45162 a 3391 45162 a
 currentpoint currentpoint translate 1 1.80258 div 1 1.80258 div scale
neg exch neg exch translate
 3391 45162 a 21155 46107 45 12920
v 0.9 TeXcolorgray 21199 46107 4478 12920 v 0 TeXcolorgray
1 0 0 TeXcolorrgb 23014 40105 a Fm(F)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 25677 46107 45 12920
v 2683 46151 18517 45 v 21199 46151 4523 45 v 2683 59071
45 12920 v 3391 58126 a
 currentpoint currentpoint translate 1.80258 1.80258 scale neg exch
neg exch translate
 3391 58126 a 3391 58126 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 85.69469 a add def
/d 0.0 a add neg def /h 55.27739 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 3391
58126 a 8054 55297 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.3 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 43.5726  0 -42.12209  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -42.12209
 43.5726  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-25.55345  def /maxTickline 29.72394  def /dT 932339 abs 65536 div
viceversa { neg } if def /DT 0.5 abs viceversa { neg } if def /subTNo
0 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
0.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.3
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 29.72394
0.0 -25.55345   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.3 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.3
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 43.5726
0.0 -42.12209 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.3 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.3 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 29.72394  0 -25.55345  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -25.55345
 29.72394  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-42.12209  def /maxTickline 43.5726  def /dT 932339 abs 65536 div viceversa
{ neg } if def /DT 0.5 abs viceversa { neg } if def /subTNo 0 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse 0.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.3
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 29.72394
0.0 -25.55345   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.3 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.3
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 43.5726
0.0 -42.12209 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.3 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 8054 55297 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 8054 55297 a 8054
55297 a
tx@Dict begin  { 43.5726 29.72394 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 8054 55297 a 8054 55297 a
tx@Dict begin  { 5.0 4.18748 2.58331 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 8054 55297 a 7822 55440
a Fb(x)8054 55297 y
tx@Dict begin  PutEnd  end
 8054 55297 a 8054 55297 a
tx@Dict begin  PutEnd  end
 8054 55297
a 8054 55297 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 8054 55297 a 8054 55297 a
tx@Dict begin  { 0.0 0.0 pop 43.5726 29.72394 exch pop } PutCoor PutBegin
 end
 8054 55297 a
8054 55297 a
tx@Dict begin  { 5.0 14.25717 4.5 1.5 -40.  Uput UUput } PutCoor PutBegin
 end
 8054 55297 a 7265 55463 a Fb(f)g Fa(\()p
Fb(x)p Fa(\))8054 55297 y
tx@Dict begin  PutEnd  end
 8054 55297 a 8054 55297 a
tx@Dict begin  PutEnd  end
 8054
55297 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -1.4804291276946526 def /x1 1.531400534608247
def /dx x1 x sub 199 div def /F@pstplot (0.5*x^(2.0))  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 0.5 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 8054 55297
a
tx@Dict begin  { -19.91682 14.22636 } PutCoor PutBegin  end
 8054 55297 a 462 x Fb(f)8054 55297 y
tx@Dict begin  PutEnd  end
 8054 55297 a 12877
58126 a
currentpoint initclip moveto
 12877 58126 a 3391 58126 a
 currentpoint currentpoint translate 1 1.80258 div 1 1.80258 div scale
neg exch neg exch translate
 3391 58126 a 21155
59071 45 12920 v 0.9 TeXcolorgray 21199 59071 4478 12920
v 0 TeXcolorgray 1 0 0 TeXcolorrgb 22978 53069 a Fm(B)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 25677
59071 45 12920 v 2683 59115 18517 45 v 21199 59115 4523
45 v 2683 72035 45 12920 v 3391 71090 a
 currentpoint currentpoint translate 1.80258 1.80258 scale neg exch
neg exch translate
 3391 71090 a
3391 71090 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 85.69469 a add def
/d 0.0 a add neg def /h 55.27739 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 3391 71090 a 8054 68261 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.3 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 43.5726  0 -42.12209  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -42.12209
 43.5726  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-25.55345  def /maxTickline 29.72394  def /dT 932339 abs 65536 div
viceversa { neg } if def /DT 0.5 abs viceversa { neg } if def /subTNo
0 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
0.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.3
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 29.72394
0.0 -25.55345   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.3 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.3
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 43.5726
0.0 -42.12209 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.3 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.3 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 29.72394  0 -25.55345  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -25.55345
 29.72394  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-42.12209  def /maxTickline 43.5726  def /dT 932339 abs 65536 div viceversa
{ neg } if def /DT 0.5 abs viceversa { neg } if def /subTNo 0 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse 0.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.3
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 29.72394
0.0 -25.55345   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.3 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.3
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 43.5726
0.0 -42.12209 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.3 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 8054 68261 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 8054
68261 a 8054 68261 a
tx@Dict begin  { 43.5726 29.72394 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 8054 68261 a 8054 68261 a
tx@Dict begin  { 5.0 4.18748 2.58331 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 8054 68261
a 7822 68404 a Fb(x)8054 68261 y
tx@Dict begin  PutEnd  end
 8054 68261 a 8054 68261
a
tx@Dict begin  PutEnd  end
 8054 68261 a 8054 68261 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 8054 68261 a 8054 68261 a
tx@Dict begin  { 0.0 0.0 pop 43.5726 29.72394 exch pop } PutCoor PutBegin
 end

8054 68261 a 8054 68261 a
tx@Dict begin  { 5.0 14.25717 4.5 1.5 -40.  Uput UUput } PutCoor PutBegin
 end
 8054 68261 a 7265 68427 a Fb(f)g
Fa(\()p Fb(x)p Fa(\))8054 68261 y
tx@Dict begin  PutEnd  end
 8054 68261 a 8054 68261
a
tx@Dict begin  PutEnd  end
 8054 68261 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -1.4804291276946526 def /x1 1.531400534608247
def /dx x1 x sub 199 div def /F@pstplot (0.5*x^(3.0))  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 0.5 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
8054 68261 a
tx@Dict begin  { 17.07181 -10.19872 } PutCoor PutBegin  end
 8054 68261 a 462 x Fb(f)8054 68261 y
tx@Dict begin  PutEnd  end
 8054
68261 a 12877 71090 a
currentpoint initclip moveto
 12877 71090 a 3391 71090 a
 currentpoint currentpoint translate 1 1.80258 div 1 1.80258 div scale
neg exch neg exch translate
 3391
71090 a 21155 72035 45 12920 v 0.9 TeXcolorgray 21199
72035 4478 12920 v 0 TeXcolorgray 1 0 0 TeXcolorrgb 22968
66033 a Fm(C)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 25677 72035 45 12920 v 2683 72079 18517
45 v 21199 72079 4523 45 v 0 TeXcolorgray 0 TeXcolorgray
30388 20223 4567 45 v 34954 20223 8535 45 v 30388 23482
45 3260 v 0.92 TeXcolorgray 30432 23482 4478 3260 v 0
TeXcolorgray 32159 22404 a(A)p 34910 23482 45 3260 v
35618 22236 a Fl(a)369 b(>)g Fk(0)p Fl(;)655 b(z)429
b Fk(=)368 b(1)p 43445 23482 V 30388 23527 4567 45 v
34954 23527 8535 45 v 30388 26786 45 3260 v 0.92 TeXcolorgray
30432 26786 4478 3260 v 0 TeXcolorgray 32210 25708 a
Fm(B)p 34910 26786 45 3260 v 35618 25540 a Fl(a)h(>)g
Fk(0)p Fl(;)655 b(z)429 b Fk(=)368 b(2)p 43445 26786
V 30388 26830 4567 45 v 34954 26830 8535 45 v 30388 30089
45 3260 v 0.92 TeXcolorgray 30432 30089 4478 3260 v 0
TeXcolorgray 32201 29011 a Fm(C)p 34910 30089 45 3260
v 35618 28843 a Fl(a)h(>)g Fk(0)p Fl(;)655 b(z)429 b
Fk(=)368 b(3)p 43445 30089 V 30388 30134 4567 45 v 34954
30134 8535 45 v 30388 33393 45 3260 v 0.92 TeXcolorgray
30432 33393 4478 3260 v 0 TeXcolorgray 32174 32315 a
Fm(D)p 34910 33393 45 3260 v 35618 32147 a Fl(a)h(<)g
Fk(0)p Fl(;)655 b(z)429 b Fk(=)368 b(1)p 43445 33393
V 30388 33437 4567 45 v 34954 33437 8535 45 v 30388 36696
45 3260 v 0.92 TeXcolorgray 30432 36696 4478 3260 v 0
TeXcolorgray 32229 35618 a Fm(E)p 34910 36696 45 3260
v 35618 35450 a Fl(a)h(<)g Fk(0)p Fl(;)655 b(z)429 b
Fk(=)368 b(2)p 43445 36696 V 30388 36741 4567 45 v 34954
36741 8535 45 v 30388 40000 45 3260 v 0.92 TeXcolorgray
30432 40000 4478 3260 v 0 TeXcolorgray 32247 38922 a
Fm(F)p 34910 40000 45 3260 v 35618 38754 a Fl(a)h(<)g
Fk(0)p Fl(;)655 b(z)429 b Fk(=)368 b(3)p 43445 40000
V 30388 40044 4567 45 v 34954 40044 8535 45 v 47992 7929
a Fg(___/1)p 1 0 0 TeXcolorrgb 48228 9921 a Ff(F)-123
b(A)369 b(3.2)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 76107 54804 45 v 0 TeXcolorgray 24746
81281 a Fm(3)p 0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1599 a Fn(F)-239 b(A)893 b(3.2)g(-)h(4)g(P)-60
b(otenzfunktion)890 b(-)k(MC)g(-)g(Matura)f(2014/15)g(-)h(Ne-)-2331
4622 y(b)60 b(en)-60 b(termin)716 b(1)p 0 TeXcolorgray
-741 7929 a Fm(4.)p 0 TeXcolorgray 651 w(In)368 b(der)f(nac)-36
b(hstehenden)366 b(Abbildung)h(ist)h(der)g(Graph)f(einer)h(P)-36
b(otenzfunktion)367 b Fl(f)510 b Fm(v)-36 b(om)369 b(T)-36
b(yp)921 9921 y Fl(f)142 b Fk(\()p Fl(x)p Fk(\))369 b(=)f
Fl(a)295 b Fj(\001)g Fl(x)7585 9439 y Fc(z)8549 9921
y Fm(mit)434 b Fl(a)369 b Fj(2)f Fe(R)p Fk(;)656 b Fl(a)369
b Fj(6)p Fk(=)f(0;)656 b Fl(z)428 b Fj(2)369 b Fe(Z)433
b Fm(dargestellt.)p 0 TeXcolorgray 0 TeXcolorgray 7666
40698 a
 currentpoint currentpoint translate 1.4132 1.4132 scale neg exch neg
exch translate
 7666 40698 a 8100 40698 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 197.35008 a add def
/d 0.0 a add neg def /h 181.17392 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 8100 40698 a 18657
29022 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81097 T 30
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 101.97939 0.0 -95.3707 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 7.11317 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -113.81097 0.0 T 30
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 75.69351 0.0 -105.48041   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 7.11317 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 101.97939  0 -95.3707  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -95.3707
 101.97939  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-105.48041  def /maxTickline 75.69351  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 75.69351
0.0 -105.48041   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 101.97939
0.0 -95.3707 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 75.69351  0 -105.48041  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -105.48041
 75.69351  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-95.3707  def /maxTickline 101.97939  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 75.69351
0.0 -105.48041   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 101.97939
0.0 -95.3707 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 17412 26158 a Fi(1)17411 23008
y(2)16680 32411 y Fh(\000)p Fi(1)16680 35560 y Fh(\000)p
Fi(2)16680 38710 y Fh(\000)p Fi(3)21571 30367 y(1)2680
b(2)f(3)-13434 b Fh(\000)p Fi(1)-4352 b Fh(\000)p Fi(2)h
Fh(\000)p Fi(3)18657 29022 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 18657 29022 a 18657 29022
a
tx@Dict begin  { 101.97939 75.69351 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 18657 29022 a 18657 29022 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 18657 29022 a 18314 29308
a Fm(x)18657 29022 y
tx@Dict begin  PutEnd  end
 18657 29022 a 18657 29022 a
tx@Dict begin  PutEnd  end
 18657
29022 a 18657 29022 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 18657 29022 a 18657 29022 a
tx@Dict begin  { 0.0 0.0 pop 101.97939 75.69351 exch pop } PutCoor
PutBegin  end
 18657
29022 a 18657 29022 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 18657 29022 a 17609 29354 a Fm(f\(x\))18657
29022 y
tx@Dict begin  PutEnd  end
 18657 29022 a 18657 29022 a
tx@Dict begin  PutEnd  end
 18657 29022 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.351892332615817 def /x1 3.5841631897196793
def /dx x1 x sub 199 div def /F@pstplot (-x^(-2.0))  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 18657 29022 a
tx@Dict begin  { -42.67911 -28.45274 } PutCoor PutBegin  end
 18657 29022 a
-172 x Fc(f)18657 29022 y
tx@Dict begin  PutEnd  end
 18657 29022 a 29946 40698 a
currentpoint initclip moveto

29946 40698 a 7666 40698 a
 currentpoint currentpoint translate 1 1.4132 div 1 1.4132 div scale
neg exch neg exch translate
 7666 40698 a 921 46674 a Fm(Eine)433
b(der)g(nac)-36 b(hstehenden)432 b(Gleic)-36 b(h)g(ungen)432
b(ist)i(eine)g(Gleic)-36 b(h)g(ung)432 b(dieser)i(F)-108
b(unktion)433 b Fl(f)142 b Fm(.)921 48666 y(Kreuze)433
b(die)h(zutre\033ende)e(Gleic)-36 b(h)g(ung)433 b(an.)p
17644 49633 11096 45 v 17644 52908 45 3275 v 18353 51631
a Fl(f)142 b Fk(\()p Fl(x)p Fk(\))368 b(=)h(2)p Fl(x)24025
51149 y Fh(\000)p Fi(4)p 26330 52908 V 28695 52908 V
17644 52952 11096 45 v 17644 56227 45 3275 v 18353 54950
a Fl(f)142 b Fk(\()p Fl(x)p Fk(\))368 b(=)h Fj(\000)p
Fl(x)24408 54468 y Fh(\000)p Fi(2)p 26330 56227 V 1 0 0
TeXcolorrgb 27038 54921 a Fd(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 28695 56227 V 17644 56271
11096 45 v 17644 59545 45 3275 v 18353 58268 a Fl(f)142
b Fk(\()p Fl(x)p Fk(\))368 b(=)h Fj(\000)p Fl(x)24408
57786 y Fi(2)p 26330 59545 V 28695 59545 V 17644 59590
11096 45 v 17644 62864 45 3275 v 18353 61587 a Fl(f)142
b Fk(\()p Fl(x)p Fk(\))368 b(=)h Fj(\000)p Fl(x)24408
61105 y Fh(\000)p Fi(1)p 26330 62864 V 28695 62864 V
17644 62909 11096 45 v 17644 66183 45 3275 v 18353 64906
a Fl(f)142 b Fk(\()p Fl(x)p Fk(\))368 b(=)h Fl(x)23375
64424 y Fh(\000)p Fi(2)p 26330 66183 V 28695 66183 V
17644 66227 11096 45 v 17644 69502 45 3275 v 18353 68225
a Fl(f)142 b Fk(\()p Fl(x)p Fk(\))368 b(=)h Fl(x)23375
67743 y Fh(\000)p Fi(1)p 26330 69502 V 28695 69502 V
17644 69546 11096 45 v 47992 7929 a Fg(___/1)p 1 0 0
TeXcolorrgb 48228 9921 a Ff(F)-123 b(A)369 b(3.2)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 73574
54804 45 v 0 TeXcolorgray 24746 81281 a Fm(4)p 0 TeXcolorgray
eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fn(F)-239 b(A)780 b(3.2)g(-)h(5)f(Gleic)-60
b(h)g(ung)780 b(einer)f(quadratisc)-60 b(hen)779 b(F)-179
b(unktion)777 b(-)k(O)-60 b(A)781 b(-)-2331 4515 y(Matura)717
b(2013/14)g(Haupttermin)p 0 TeXcolorgray -741 7823 a
Fm(5.)p 0 TeXcolorgray 651 w(Im)489 b(nac)-36 b(hfolgenden)489
b(K)-36 b(o)36 b(ordinatensystem)490 b(ist)f(der)g(Graph)f(einer)h
(quadratisc)-36 b(hen)489 b(F)-108 b(unk-)921 9815 y(tion)434
b Fl(f)575 b Fm(mit)434 b(der)f(Gleic)-36 b(h)g(ung)432
b Fl(f)142 b Fk(\()p Fl(x)p Fk(\))369 b(=)g Fl(a)295
b Fj(\001)g Fl(x)22179 9333 y Fi(2)23000 9815 y Fk(+)g
Fl(b)433 b Fk(\()p Fl(a;)221 b(b)370 b Fj(2)e Fe(R)p
Fk(\))434 b Fm(dargestellt.)p 0 TeXcolorgray 0 TeXcolorgray
5418 42385 a
 currentpoint currentpoint translate 1.02002 1.02002 scale neg exch
neg exch translate
 5418 42385 a 5418 42385 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 318.67062 a add def
/d 0.0 a add neg def /h 266.88643 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 5418 42385 a 22300
39739 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 10 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 166.16391 0.0 -152.50671 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -142.26372 0.0 T 12
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 242.98624 0.0 -23.90019   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 166.16391  0 -152.50671  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -152.50671
 166.16391  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-23.90019  def /maxTickline 242.98624  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 242.98624
0.0 -23.90019   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 166.16391
0.0 -152.50671 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 242.98624  0 -23.90019  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -23.90019
 242.98624  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-152.50671  def /maxTickline 166.16391  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 242.98624
0.0 -23.90019   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 166.16391
0.0 -152.50671 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 21055 36875 a Fi(1)21054 33725
y(2)21054 30575 y(3)21054 27426 y(4)21054 24276 y(5)21054
21127 y(6)21054 17977 y(7)21054 14827 y(8)25214 41085
y(1)2680 b(2)f(3)h(4)f(5)-19733 b Fh(\000)p Fi(1)-4352
b Fh(\000)p Fi(2)h Fh(\000)p Fi(3)f Fh(\000)p Fi(4)g
Fh(\000)p Fi(5)22300 39739 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 22300 39739 a 22300 39739
a
tx@Dict begin  { 166.16391 242.98624 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 22300 39739 a 22300 39739 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 22300 39739 a 21957 40025
a Fm(x)22300 39739 y
tx@Dict begin  PutEnd  end
 22300 39739 a 22300 39739 a
tx@Dict begin  PutEnd  end
 22300
39739 a 22300 39739 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 22300 39739 a 22300 39739 a
tx@Dict begin  { 0.0 0.0 pop 166.16391 242.98624 exch pop } PutCoor
PutBegin  end
 22300
39739 a 22300 39739 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 22300 39739 a 21252 40071 a Fm(f\(x\))22300
39739 y
tx@Dict begin  PutEnd  end
 22300 39739 a 22300 39739 a
tx@Dict begin  PutEnd  end
 22300 39739 a 22300
39739 a
tx@Dict begin  { -96.17041 155.9209 } PutCoor PutBegin  end
 22300 39739 a 915 x Fm(f)22300 39739 y
tx@Dict begin  PutEnd  end
 22300
39739 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -5.360000000000003 def /x1 5.840000000000001
def /dx x1 x sub 199 div def /F@pstplot (0.25*x^(2.0)+2.0)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 40693
42385 a
currentpoint initclip moveto
 40693 42385 a 5418 42385 a
 currentpoint currentpoint translate 1 1.02002 div 1 1.02002 div scale
neg exch neg exch translate
 5418 42385 a 921 46369
a Fm(Erg\344nze)580 b(die)g(W)-108 b(erte)580 b(der)f(P)-36
b(arameter)580 b Fl(a)g Fm(und)f Fl(b)p Fm(!)i(Die)g(f\374r)f(die)g
(Berec)-36 b(hn)g(ung)578 b(relev)-72 b(an)-36 b(te)921
48361 y(Punkte)423 b(mit)h(ganzzahligen)h(K)-36 b(o)36
b(ordinaten)424 b(k)-36 b(\366nnen)423 b(dem)h(Diagramm)h(en)-36
b(tnommen)423 b(w)-36 b(er-)921 50353 y(den.)921 54890
y Fl(a)369 b Fk(=)p 1 0 0 TeXcolorrgb 433 w Fl(a)g Fk(=)5983
54367 y Fi(1)p 5983 54580 471 45 v 5983 55348 a(4)7020
54890 y Fm(o)36 b(der)433 b Fl(a)369 b Fk(=)g(0)p Fl(;)p
Fk(25)p 0 0 0 TeXcolorrgb 921 59427 a Fl(b)g Fk(=)p 1 0 0
TeXcolorrgb 433 w Fm(2)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 47992
7823 a Fg(___/1)p 1 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 62903 54804 45
v 0 TeXcolorgray 24746 81281 a Fm(5)p 0 TeXcolorgray
eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fn(F)-239 b(A)669 b(3.2)g(-)g(6)g(Graph)g
(einer)f(quadratisc)-60 b(hen)667 b(F)-179 b(unktion)666
b(-)j(O)-60 b(A)670 b(-)f(Ma-)-2331 4515 y(tura)717 b(2013/14)g(1.)g
(Neb)60 b(en)-60 b(termin)p 0 TeXcolorgray -741 7823
a Fm(6.)p 0 TeXcolorgray 651 w(Gegeb)36 b(en)450 b(ist)h(der)f(Graph)g
(einer)g(F)-108 b(unktion)450 b Fl(g)498 b Fm(mit)451
b Fl(g)48 b Fk(\()p Fl(x)p Fk(\))398 b(=)f Fl(a)307 b
Fj(\001)g Fl(x)33335 7341 y Fi(2)34168 7823 y Fk(+)f
Fl(b)451 b Fm(mit)g Fl(a;)221 b(b)398 b Fj(2)g Fe(Z)450
b Fm(und)921 9815 y Fl(a)369 b Fj(6)p Fk(=)f(0)p Fm(.)p
0 TeXcolorgray 0 TeXcolorgray 7667 42992 a
 currentpoint currentpoint translate 1.16039 1.16039 scale neg exch
neg exch translate
 7667 42992
a 7667 42992 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 245.10794 a add def
/d 0.0 a add neg def /h 239.90329 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 7667 42992 a 19594 35198 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -56.90549 T 9 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 137.35733 0.0 -107.75061 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 9 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 169.49344 0.0 -70.40985   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 137.35733  0 -107.75061  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -107.75061
 137.35733  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-70.40985  def /maxTickline 169.49344  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 169.49344
0.0 -70.40985   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 137.35733
0.0 -107.75061 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 169.49344  0 -70.40985  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -70.40985
 169.49344  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-107.75061  def /maxTickline 137.35733  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 169.49344
0.0 -70.40985   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 137.35733
0.0 -107.75061 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
18349 32333 a Fi(1)18349 29184 y(2)18349 26034 y(3)18349
22885 y(4)18349 19735 y(5)17617 38586 y Fh(\000)p Fi(1)17617
41736 y Fh(\000)p Fi(2)22509 36543 y(1)2679 b(2)h(3)f(4)-16584
b Fh(\000)p Fi(1)-4351 b Fh(\000)p Fi(2)f Fh(\000)p Fi(3)19594
35198 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 19594 35198 a 19594 35198 a
tx@Dict begin  { 137.35733 169.49344 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 19594 35198 a 19594
35198 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 19594 35198 a 19251 35484 a Fm(x)19594 35198
y
tx@Dict begin  PutEnd  end
 19594 35198 a 19594 35198 a
tx@Dict begin  PutEnd  end
 19594 35198 a 19594 35198
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 19594 35198 a 19594 35198 a
tx@Dict begin  { 0.0 0.0 pop 137.35733 169.49344 exch pop } PutCoor
PutBegin  end
 19594 35198 a 19594 35198
a
tx@Dict begin  { 5.0 21.21516 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 19594 35198 a 18420 35530 a Fm(g\(x\))19594 35198 y
tx@Dict begin  PutEnd  end

19594 35198 a 19594 35198 a
tx@Dict begin  PutEnd  end
 19594 35198 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.787004189411876 def /x1 4.827562996514538
def /dx x1 x sub 199 div def /F@pstplot (3.0*x^(2.0)-1.0)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 19594 35198 a
tx@Dict begin  { -35.82684 136.84372 } PutCoor PutBegin  end
 19594 35198 a
572 x Fm(g)19594 35198 y
tx@Dict begin  PutEnd  end
 19594 35198 a 34799 42992 a
currentpoint initclip moveto

34799 42992 a 7667 42992 a
 currentpoint currentpoint translate 1 1.16039 div 1 1.16039 div scale
neg exch neg exch translate
 7667 42992 a 921 46976 a Fm(Gib)570
b(die)h(P)-36 b(arameter)571 b Fl(a)g Fm(und)f Fl(b)h
Fm(so)h(an,)f(dass)g(sie)h(zum)e(abgebildeten)h(Graphen)f(v)-36
b(on)571 b Fl(g)921 48968 y Fm(passen!)921 53505 y Fl(a)369
b Fk(=)p 1 0 0 TeXcolorrgb 433 w Fm(3)p 0 0 0 TeXcolorrgb
921 58043 a Fl(b)g Fk(=)p 1 0 0 TeXcolorrgb 433 w Fm(-1)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 874 62580 a(T)-108
b(oleranzin)-36 b(terv)-72 b(alle:)435 b Fl(a)369 b Fj(2)f
Fk([)8 b(2)p Fl(;)p Fk(9;)221 b(3)p Fl(;)p Fk(1])k(;)c
Fl(b)370 b Fj(2)e Fk([)8 b Fj(\000)p Fk(1)p Fl(;)p Fk(1;)221
b Fj(\000)p Fk(0)p Fl(;)p Fk(9])s Fm(.)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 47992
7823 a Fg(___/1)p 1 0 0 TeXcolorrgb 48228 9815 a Ff(F)-123
b(A)369 b(3.2)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 66387 54804 45 v 0 TeXcolorgray 24746
81281 a Fm(6)p 0 TeXcolorgray eop end
%%Page: 7 7
TeXDict begin 7 6 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fn(F)-239 b(A)583 b(3.2)h(-)g(7)f(P)-60
b(arameter)584 b(reeller)f(F)-179 b(unktionen)580 b(-)k(O)-60
b(A)584 b(-)g(Matura)g(NT)-2438 4515 y(1)717 b(16/17)p
0 TeXcolorgray -741 7823 a Fm(7.)p 0 TeXcolorgray 651
w(Die)394 b(nac)-36 b(hstehende)391 b(Abbildung)h(zeigt)h(die)g
(Graphen)e(zw)-36 b(eier)394 b(reeller)f(F)-108 b(unktionen)392
b Fl(f)534 b Fm(und)921 9815 y Fl(g)607 b Fm(mit)560
b(den)f(F)-108 b(unktionsgleic)-36 b(h)g(ungen)559 b
Fl(f)142 b Fk(\()p Fl(x)p Fk(\))584 b(=)g Fl(a)381 b
Fj(\001)g Fl(x)27273 9333 y Fi(3)28180 9815 y Fk(+)g
Fl(b)560 b Fm(und)f Fl(g)48 b Fk(\()p Fl(x)p Fk(\))583
b(=)g Fl(c)381 b Fj(\001)h Fl(x)40445 9333 y Fi(3)41352
9815 y Fk(+)f Fl(d)559 b Fm(mit)921 11806 y Fl(a;)221
b(b;)g(c;)g(d)370 b Fj(2)f Fe(R)p Fm(.)p 0 TeXcolorgray
0 TeXcolorgray 9916 37266 a
 currentpoint currentpoint translate 0.67775 0.67775 scale neg exch
neg exch translate
 9916 37266 a 9916 37266 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 359.69618 a add def
/d 0.0 a add neg def /h 307.87895 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end

9916 37266 a 26764 14524 a @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  0.0 -170.71652 T 8
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 207.49158 0.0 -152.2046 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 42.67912 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  -128.03738 0.0 T 9
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 100.77942 0.0 -205.44931   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 42.67912 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 207.49158  0 -152.2046  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -152.2046
 207.49158  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-205.44931  def /maxTickline 100.77942  def /dT 2797019 abs 65536 div
viceversa { neg } if def /DT 0.5 abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 85.35826  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 85.35826
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 100.77942
0.0 -205.44931   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 207.49158
0.0 -152.2046 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 100.77942  0 -205.44931  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -205.44931
 100.77942  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-152.2046  def /maxTickline 207.49158  def /dT 2797019 abs 65536 div
viceversa { neg } if def /DT 0.5 abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 85.35826  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 85.35826  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 100.77942
0.0 -205.44931   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 207.49158
0.0 -152.2046 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 24787 10085 a
Fi(0)p Fc(:)p Fi(5)24787 5360 y(1)p Fc(:)p Fi(0)24055
19488 y Fh(\000)p Fi(0)p Fc(:)p Fi(5)24055 24212 y Fh(\000)p
Fi(1)p Fc(:)p Fi(0)24055 28936 y Fh(\000)p Fi(1)p Fc(:)p
Fi(5)24055 33661 y Fh(\000)p Fi(2)p Fc(:)p Fi(0)30887
15870 y(0)p Fc(:)p Fi(5)3524 b(1)p Fc(:)p Fi(0)f(1)p
Fc(:)p Fi(5)h(2)p Fc(:)p Fi(0)-25189 b Fh(\000)p Fi(0)p
Fc(:)p Fi(5)-6658 b Fh(\000)p Fi(1)p Fc(:)p Fi(0)h Fh(\000)p
Fi(1)p Fc(:)p Fi(5)26764 14524 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 26764 14524 a 26764
14524 a
tx@Dict begin  { 207.49158 100.77942 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 26764 14524 a 26764 14524 a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 26764 14524 a 26394
14810 a Fl(x)26764 14524 y
tx@Dict begin  PutEnd  end
 26764 14524 a 26764 14524
a
tx@Dict begin  PutEnd  end
 26764 14524 a 26764 14524 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 26764 14524 a 26764 14524
a
tx@Dict begin  { 0.0 0.0 pop 207.49158 100.77942 exch pop } PutCoor
PutBegin  end
 26764 14524 a 26764 14524 a
tx@Dict begin  { 5.0 48.02515 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 26764 14524 a 24106 14856
a Fl(f)142 b Fk(\()p Fl(x)p Fk(\))p Fm(,)p Fl(g)48 b
Fk(\()p Fl(x)p Fk(\))26764 14524 y
tx@Dict begin  PutEnd  end
 26764 14524 a 26764
14524 a
tx@Dict begin  PutEnd  end
 26764 14524 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -1.783129300558507 def /x1 2.4308339141495816
def /dx x1 x sub 199 div def /F@pstplot (2.0*x^(3.0)-1.0)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 85.35826 mul F@pstplot 85.35826 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 85.35826 mul gt { moveto } { dup -1.e30 85.35826 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 85.35826 mul gt { moveto } { dup -1.e30
85.35826 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -1.783129300558507 def /x1 2.4308339141495816
def /dx x1 x sub 199 div def /F@pstplot (5.0*x^(3.0)-2.0)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 85.35826 mul F@pstplot 85.35826 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 85.35826 mul gt { moveto } { dup -1.e30 85.35826 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 85.35826 mul gt { moveto } { dup -1.e30
85.35826 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 26764 14524 a
tx@Dict begin  { -71.51567 -140.80153 } PutCoor PutBegin  end

26764 14524 a 922 x Fl(f)26764 14524 y
tx@Dict begin  PutEnd  end
 26764 14524 a
26764 14524 a
tx@Dict begin  { -14.15907 -177.25749 } PutCoor PutBegin  end
 26764 14524 a 572 x Fl(g)26764 14524 y
tx@Dict begin  PutEnd  end

26764 14524 a 49733 37266 a
currentpoint initclip moveto
 49733 37266 a 9916 37266
a
 currentpoint currentpoint translate 1 0.67775 div 1 0.67775 div scale
neg exch neg exch translate
 9916 37266 a 855 41251 a Fm(W)-108 b(elc)-36 b(he)474
b(der)f(nac)-36 b(hstehenden)472 b(A)-36 b(ussagen)474
b(tre\033en)f(f\374r)h(die)g(P)-36 b(arameter)474 b Fl(a;)221
b(b;)g(c)475 b Fm(und)e Fl(d)h Fm(zu?)921 43243 y(Kreuze)433
b(die)h(b)36 b(eiden)433 b(zutre\033enden)e(A)-36 b(ussagen)434
b(an!)p 19759 44209 6865 45 v 19759 46971 45 2762 v 20468
45991 a Fl(a)369 b(>)f Fk(0)p 24215 46971 V 26580 46971
V 19759 47015 6865 45 v 19759 49863 45 2848 v 20468 48883
a Fl(b)h(>)g(d)p 24215 49863 V 1 0 0 TeXcolorrgb 24923
48771 a Fd(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 26580 49863 V 19759 49907 6865 45 v 19759
52669 45 2762 v 20468 51689 a Fl(a)g(>)f Fk(0)p 24215
52669 V 1 0 0 TeXcolorrgb 24923 51620 a Fd(4)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 26580 52669
V 19759 52713 6865 45 v 19759 55561 45 2848 v 20468 54581
a Fl(b)h(>)g Fk(0)p 24215 55561 V 26580 55561 V 19759
55605 6865 45 v 19759 58367 45 2762 v 20468 57387 a Fl(c)g(<)f
Fk(1)p 24215 58367 V 26580 58367 V 19759 58411 6865 45
v 47992 7823 a Fg(___/1)p 1 0 0 TeXcolorrgb 48228 9815
a Ff(F)-123 b(A)369 b(3.2)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 62439 54804 45 v 0 TeXcolorgray
24746 81281 a Fm(7)p 0 TeXcolorgray eop end
%%Page: 8 8
TeXDict begin 8 7 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1794 a Fn(F)-239 b(A)717 b(3.2)g(-)h(8)f(F)-179
b(unktionen)714 b(zuordnen)i(-)h(ZO)h(-)f(ChriGr\303)43586
1041 y Fk(1)p 43586 1338 651 45 v 43586 2454 a(4)p 0
TeXcolorgray -741 6204 a Fm(8.)p 0 TeXcolorgray 651 w(Ordne)400
b(die)i(4)g(F)-108 b(unktionsgraphen)401 b(den)g(jew)-36
b(eiligen)403 b(F)-108 b(unktionstermen)400 b(zu!)p 0
TeXcolorgray 0 TeXcolorgray 1490 8649 11391 45 v 12880
8649 4523 45 v 1490 23176 45 14527 v 2198 22231 a
 currentpoint currentpoint translate 0.42235 0.42235 scale neg exch
neg exch translate
 2198
22231 a 2632 22231 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 209.41219 a add def
/d 0.0 a add neg def /h 270.30104 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 2632 22231 a 13971 19585 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  0.0 0.0 T 10 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 106.98215 0.0 -102.43004 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  -85.35823 0.0 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 246.40085 0.0 -23.90019   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 106.98215  0 -102.43004  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -102.43004
 106.98215  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-23.90019  def /maxTickline 246.40085  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 246.40085
0.0 -23.90019   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 106.98215
0.0 -102.43004 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 246.40085  0 -23.90019  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -23.90019
 246.40085  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-102.43004  def /maxTickline 106.98215  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 246.40085
0.0 -23.90019   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 106.98215
0.0 -102.43004 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
12726 16721 a Fi(1)12725 13571 y(2)12725 10422 y(3)12725
7272 y(4)12725 4123 y(5)12725 973 y(6)12725 -2177 y(7)12725
-5326 y(8)16885 20931 y(1)2680 b(2)f(3)-13434 b Fh(\000)p
Fi(1)-4352 b Fh(\000)p Fi(2)h Fh(\000)p Fi(3)13971 19585
y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 0.39215 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -3.5999999999999996
def /x1 3.760000000000003 def /dx x1 x sub 199 div def /F@pstplot (x^(2.0)+2.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 2.0 SLW 0 0.39215 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 13971 19585
a
tx@Dict begin  { -67.71767 237.29578 } PutCoor PutBegin  end
 13971 19585 a 0 0.39215 0 TeXcolorrgb -172 x Fc(f)p
0 TeXcolorgray 13971 19585 a
tx@Dict begin  PutEnd  end
 13971 19585 a 25813 22231
a
currentpoint initclip moveto
 25813 22231 a 2198 22231 a
 currentpoint currentpoint translate 1 0.42235 div 1 0.42235 div scale
neg exch neg exch translate
 2198 22231 a 12836 23176
45 14527 v 0.9 TeXcolorgray 12880 23176 4478 14527 v
0 TeXcolorgray 1 0 0 TeXcolorrgb 14659 16370 a Fm(B)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 17358
23176 45 14527 v 1490 23220 11391 45 v 12880 23220 4523
45 v 1490 37747 45 14527 v 2198 36802 a
 currentpoint currentpoint translate 0.42235 0.42235 scale neg exch
neg exch translate
 2198 36802 a
2632 36802 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 209.41219 a add def
/d 0.0 a add neg def /h 270.30104 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 2632 36802 a 13971 34157 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  0.0 0.0 T 10 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 106.98215 0.0 -102.43004 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  -85.35823 0.0 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 246.40085 0.0 -23.90019   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 106.98215  0 -102.43004  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -102.43004
 106.98215  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-23.90019  def /maxTickline 246.40085  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 246.40085
0.0 -23.90019   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 106.98215
0.0 -102.43004 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 246.40085  0 -23.90019  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -23.90019
 246.40085  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-102.43004  def /maxTickline 106.98215  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 246.40085
0.0 -23.90019   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 106.98215
0.0 -102.43004 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
12726 31292 a Fi(1)12725 28143 y(2)12725 24993 y(3)12725
21843 y(4)12725 18694 y(5)12725 15544 y(6)12725 12395
y(7)12725 9245 y(8)16885 35502 y(1)2680 b(2)f(3)-13434
b Fh(\000)p Fi(1)-4352 b Fh(\000)p Fi(2)h Fh(\000)p Fi(3)13971
34157 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 0.39215 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -3.5999999999999996
def /x1 3.760000000000003 def /dx x1 x sub 199 div def /F@pstplot (3*x^(2.0)+2.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 2.0 SLW 0 0.39215 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 13971
34157 a
tx@Dict begin  { -67.71767 237.29578 } PutCoor PutBegin  end
 13971 34157 a 0 0.39215 0 TeXcolorrgb -172 x
Fc(f)p 0 TeXcolorgray 13971 34157 a
tx@Dict begin  PutEnd  end
 13971 34157 a 25813
36802 a
currentpoint initclip moveto
 25813 36802 a 2198 36802 a
 currentpoint currentpoint translate 1 0.42235 div 1 0.42235 div scale
neg exch neg exch translate
 2198 36802 a 12836
37747 45 14527 v 0.9 TeXcolorgray 12880 37747 4478 14527
v 0 TeXcolorgray 1 0 0 TeXcolorrgb 14623 30941 a Fm(D)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 17358
37747 45 14527 v 1490 37791 11391 45 v 12880 37791 4523
45 v 1490 52318 45 14527 v 2198 51373 a
 currentpoint currentpoint translate 0.42235 0.42235 scale neg exch
neg exch translate
 2198 51373 a
2632 51373 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 209.41219 a add def
/d 0.0 a add neg def /h 270.30104 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 2632 51373 a 13971 36129 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  0.0 0.0 T 10 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 106.98215 0.0 -102.43004 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  -85.35823 0.0 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 246.40085 0.0 -23.90019   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 106.98215  0 -102.43004  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -102.43004
 106.98215  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-194.61665  def /maxTickline 246.40085  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 246.40085
0.0 -194.61665   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 106.98215
0.0 -102.43004 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 246.40085  0 -194.61665  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -194.61665
 246.40085  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-102.43004  def /maxTickline 106.98215  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 246.40085
0.0 -194.61665   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 106.98215
0.0 -102.43004 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
12726 33265 a Fi(1)12725 30115 y(2)12725 26966 y(3)12725
23816 y(4)12725 20667 y(5)12725 17517 y(6)12725 14367
y(7)12725 11218 y(8)11993 39518 y Fh(\000)p Fi(1)11993
42668 y Fh(\000)p Fi(2)11993 45817 y Fh(\000)p Fi(3)11993
48967 y Fh(\000)p Fi(4)11993 52117 y Fh(\000)p Fi(5)11993
55266 y Fh(\000)p Fi(6)16885 37475 y(1)2680 b(2)f(3)-13434
b Fh(\000)p Fi(1)-4352 b Fh(\000)p Fi(2)h Fh(\000)p Fi(3)13971
36129 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 0.39215 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -3.5999999999999996
def /x1 3.760000000000003 def /dx x1 x sub 199 div def /F@pstplot (3/x)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 2.0 SLW 0 0.39215 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 13971
36129 a
tx@Dict begin  { -67.71767 237.29578 } PutCoor PutBegin  end
 13971 36129 a 0 0.39215 0 TeXcolorrgb -172 x
Fc(f)p 0 TeXcolorgray 13971 36129 a
tx@Dict begin  PutEnd  end
 13971 36129 a 25813
51373 a
currentpoint initclip moveto
 25813 51373 a 2198 51373 a
 currentpoint currentpoint translate 1 0.42235 div 1 0.42235 div scale
neg exch neg exch translate
 2198 51373 a 12836
52318 45 14527 v 0.9 TeXcolorgray 12880 52318 4478 14527
v 0 TeXcolorgray 1 0 0 TeXcolorrgb 14608 45512 a Fm(A)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 17358
52318 45 14527 v 1490 52363 11391 45 v 12880 52363 4523
45 v 1490 66890 45 14527 v 2198 65945 a
 currentpoint currentpoint translate 0.42235 0.42235 scale neg exch
neg exch translate
 2198 65945 a
2632 65945 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 209.41219 a add def
/d 0.0 a add neg def /h 270.30104 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 2632 65945 a 13971 63299 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  0.0 0.0 T 10 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 106.98215 0.0 -102.43004 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  -85.35823 0.0 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 246.40085 0.0 -23.90019   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 106.98215  0 -102.43004  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -102.43004
 106.98215  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-23.90019  def /maxTickline 246.40085  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 246.40085
0.0 -23.90019   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 106.98215
0.0 -102.43004 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 246.40085  0 -23.90019  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -23.90019
 246.40085  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-102.43004  def /maxTickline 106.98215  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 246.40085
0.0 -23.90019   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 106.98215
0.0 -102.43004 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
12726 60435 a Fi(1)12725 57285 y(2)12725 54136 y(3)12725
50986 y(4)12725 47836 y(5)12725 44687 y(6)12725 41537
y(7)12725 38387 y(8)16885 64645 y(1)2680 b(2)f(3)-13434
b Fh(\000)p Fi(1)-4352 b Fh(\000)p Fi(2)h Fh(\000)p Fi(3)13971
63299 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0 0.39215 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -3.5999999999999996
def /x1 3.760000000000003 def /dx x1 x sub 199 div def /F@pstplot (3/x^2)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 2.0 SLW 0 0.39215 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 13971
63299 a
tx@Dict begin  { -67.71767 237.29578 } PutCoor PutBegin  end
 13971 63299 a 0 0.39215 0 TeXcolorrgb -172 x
Fc(f)p 0 TeXcolorgray 13971 63299 a
tx@Dict begin  PutEnd  end
 13971 63299 a 25813
65945 a
currentpoint initclip moveto
 25813 65945 a 2198 65945 a
 currentpoint currentpoint translate 1 0.42235 div 1 0.42235 div scale
neg exch neg exch translate
 2198 65945 a 12836
66890 45 14527 v 0.9 TeXcolorgray 12880 66890 4478 14527
v 0 TeXcolorgray 1 0 0 TeXcolorrgb 14677 60084 a Fm(E)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 17358
66890 45 14527 v 1490 66934 11391 45 v 12880 66934 4523
45 v 0 TeXcolorgray 0 TeXcolorgray 22689 8649 4567 45
v 27256 8649 10857 45 v 22689 12094 45 3445 v 0.92 TeXcolorgray
22734 12094 4478 3445 v 0 TeXcolorgray 24461 10830 a(A)p
27212 12094 45 3445 v 27920 10691 a Fl(f)142 b Fk(\()p
Fl(x)p Fk(\))369 b(=)32366 10168 y Fi(3)p 32336 10381
530 45 v 32336 11149 a Fc(x)p 38068 12094 45 3445 v 22689
12138 4567 45 v 27256 12138 10857 45 v 22689 15499 45
3362 v 0.92 TeXcolorgray 22734 15499 4478 3362 v 0 TeXcolorgray
24512 14319 a Fm(B)p 27212 15499 45 3362 v 27920 14222
a Fl(f)142 b Fk(\()p Fl(x)p Fk(\))369 b(=)f Fl(x)32942
13740 y Fi(2)33763 14222 y Fk(+)295 b(2)p 38068 15499
V 22689 15543 4567 45 v 27256 15543 10857 45 v 22689
18876 45 3334 v 0.92 TeXcolorgray 22734 18876 4478 3334
v 0 TeXcolorgray 24503 17725 a Fm(C)p 27212 18876 45
3334 v 27920 17600 a Fl(f)142 b Fk(\()p Fl(x)p Fk(\))369
b(=)f(3)p Fl(x)296 b Fk(+)f(2)p 38068 18876 V 22689 18921
4567 45 v 27256 18921 10857 45 v 22689 22282 45 3362
v 0.92 TeXcolorgray 22734 22282 4478 3362 v 0 TeXcolorgray
24476 21102 a Fm(D)p 27212 22282 45 3362 v 27920 21005
a Fl(f)142 b Fk(\()p Fl(x)p Fk(\))369 b(=)f(3)p Fl(x)33592
20523 y Fi(2)34414 21005 y Fk(+)295 b(2)p 38068 22282
V 22689 22326 4567 45 v 27256 22326 10857 45 v 22689
25771 45 3445 v 0.92 TeXcolorgray 22734 25771 4478 3445
v 0 TeXcolorgray 24530 24507 a Fm(E)p 27212 25771 45
3445 v 27920 24368 a Fl(f)142 b Fk(\()p Fl(x)p Fk(\))369
b(=)32596 23845 y Fi(3)p 32336 24058 991 45 v 32336 24826
a Fc(x)32866 24574 y Fa(2)p 38068 25771 45 3445 v 22689
25815 4567 45 v 27256 25815 10857 45 v 22689 29177 45
3362 v 0.92 TeXcolorgray 22734 29177 4478 3362 v 0 TeXcolorgray
24548 27996 a Fm(F)p 27212 29177 45 3362 v 27920 27899
a Fl(f)142 b Fk(\()p Fl(x)p Fk(\))369 b(=)f Fj(\000)p
Fk(2)p Fl(x)34625 27418 y Fi(2)35447 27899 y Fk(+)295
b(2)p 38068 29177 V 22689 29221 4567 45 v 27256 29221
10857 45 v 47992 6204 a Fg(___/1)p 1 0 0 TeXcolorrgb
48228 8196 a Ff(F)-123 b(A)369 b(3.2)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 70962 54804 45
v 0 TeXcolorgray 24746 81281 a Fm(8)p 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

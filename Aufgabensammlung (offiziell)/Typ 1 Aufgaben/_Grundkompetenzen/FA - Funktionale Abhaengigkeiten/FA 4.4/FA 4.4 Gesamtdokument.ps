%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 4.4/FA 4.4 Gesamtdokument.dvi
%%CreationDate: Fri Nov 10 08:51:48 2017
%%Pages: 5
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: LMRoman12-Regular LMRoman12-Bold LMRoman8-Regular
%%+ LMMathSymbols8-Regular LMMathItalic8-Regular LMRoman10-Regular
%%+ LMMathItalic12-Regular LMMathExtension10-Regular
%%+ LMMathSymbols10-Regular MSBM10 wasy10
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ "C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 4.4/FA 4.4 Gesamtdokument.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2017.11.10:0951
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-mathex.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathex[
/parenleftbig
/parenrightbig
/bracketleftbig
/bracketrightbig
/floorleftbig
/floorrightbig
/ceilingleftbig
/ceilingrightbig
/braceleftbig
/bracerightbig
/angbracketleftbig
/angbracketrightbig
/vextendsingle
/vextenddouble
/slashbig
/backslashbig
/parenleftBig
/parenrightBig
/parenleftbigg
/parenrightbigg
/bracketleftbigg
/bracketrightbigg
/floorleftbigg
/floorrightbigg
/ceilingleftbigg
/ceilingrightbigg
/braceleftbigg
/bracerightbigg
/angbracketleftbigg
/angbracketrightbigg
/slashbigg
/backslashbigg
/parenleftBigg
/parenrightBigg
/bracketleftBigg
/bracketrightBigg
/floorleftBigg
/floorrightBigg
/ceilingleftBigg
/ceilingrightBigg
/braceleftBigg
/bracerightBigg
/angbracketleftBigg
/angbracketrightBigg
/slashBigg
/backslashBigg
/slashBig
/backslashBig
/parenlefttp
/parenrighttp
/bracketlefttp
/bracketrighttp
/bracketleftbt
/bracketrightbt
/bracketleftex
/bracketrightex
/bracelefttp
/bracerighttp
/braceleftbt
/bracerightbt
/braceleftmid
/bracerightmid
/braceex
/arrowvertex
/parenleftbt
/parenrightbt
/parenleftex
/parenrightex
/angbracketleftBig
/angbracketrightBig
/unionsqtext
/unionsqdisplay
/contintegraltext
/contintegraldisplay
/circledottext
/circledotdisplay
/circleplustext
/circleplusdisplay
/circlemultiplytext
/circlemultiplydisplay
/summationtext
/producttext
/integraltext
/uniontext
/intersectiontext
/unionmultitext
/logicalandtext
/logicalortext
/summationdisplay
/productdisplay
/integraldisplay
/uniondisplay
/intersectiondisplay
/unionmultidisplay
/logicalanddisplay
/logicalordisplay
/coproducttext
/coproductdisplay
/hatwide
/hatwider
/hatwidest
/tildewide
/tildewider
/tildewidest
/bracketleftBig
/bracketrightBig
/floorleftBig
/floorrightBig
/ceilingleftBig
/ceilingrightBig
/braceleftBig
/bracerightBig
/radicalbig
/radicalBig
/radicalbigg
/radicalBigg
/radicalbt
/radicalvertex
/radicaltp
/arrowvertexdbl
/arrowtp
/arrowbt
/bracehtipdownleft
/bracehtipdownright
/bracehtipupleft
/bracehtipupright
/arrowdbltp
/arrowdblbt
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: wasy10
%!PS-AdobeFont-1.0: wasy10 001.000
%%CreationDate: Sun Mar 22 11:13:35 1998
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.002) readonly def
/Copyright (Metafont original (c) 1992 Ronald Waldi, Metafont curve conversion by Metafog (c) 1995 Richard Kinch.) readonly def
/Notice (Copyright 1998 Taco Hoekwater) readonly def
/FullName (wasy10) readonly def
/FamilyName (wasy10) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /wasy10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 52 /XBox put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox {-23 -1667 1720 881} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB02CB1AAE
36F1D7B67C605A37687A9C3F7067F07673039D1E3E1F5D9B09E6A389A55EBF12
06E72531469F768EDBC4DCCA572BD608C4BA8F7EC3E5BC61C6D949C94A843E69
0622F0AAEBF5CB25A2395DFF6342106C198751CF0B33691FC18800254AC54C04
02494A0E3670008E8BA57A3CD823BF47494F2EF9244421A8A0AED84D153D7201
BB12EE9478DF00CA573F64C2474817FF401EE94BACCA8AFC16E776665C3E1E31
89AEEC906A2B9F8974BEA7160C33F0AE7FB04B2666A5B16659D6DF66A688D80A
B531D9F866F21F15D55C6FE75A8787091359698E434EF9C129EED0427EB96787
B3F25C530E3664725C63D4C5DFF9D05CD13619FC41A001275A78C58F85FC7C4A
911CC31CB426231473202A698E5715B032D2206BB361EFCBFE3E32BC0C8D9BC1
353AAEC62EE632FC8FFFDCF6E7D928F562F689406CA00C11C7EAA723B62FFD2F
5F6343AF494085662CE2CE880B04F5589396EAAA8823DBCDE56D868B9E66BB8F
10EA91AF37D76A1BF27E69C2A2ED1D8B25434C0F205313ECB8A6E039093FFB32
983346BEC569B175529DAAD1FFEC1A9302918FC947C390A86C061AE0F6522D79
2D4FE06AE4FABA59F225D7ECE2EECD4BA1359DB18F8957F551C5D6F037F18545
CC6D03EB2DCCCFA294492ED72A737588457E5B18FA4CA0F6D6D8963CA35DFEDF
31A684FC0388D416D7BF6CD9837AD8692F284F24B80CF9F24DB10DAD0C4198BC
2D2A52D9F75CF6C52C7AE0D8D4598DB750E9CC97D0FD31EE8C598A2FF3745694
29DA808141AF4D8F8AA36D7DDCC3457D5E082B2BDF7EE060296721D44B092E70
3607B2335488925E41B22D659C8F0FFEE19A7C19547A147DB851262E47E9C4FB
0A8364BCBC1C77E29A1183EF185EF35B9A5B13170730ED52D5C52CCB460E7D37
F4F37F772794BEA0DA201C99C52F8AC2E4CE7FF33F6ACB796E55BA2372E3B035
52C4F57AB5C0BF828DC7E5A8F8F00ACE0120B99667816FAF5D736BCEBF7D45A5
79C9B5EAA32C9B672D764D2F51B2393ADC71A36AC0D5CA76F3F571D50CB4C1D7
CA77149B8F0C98198919DC43890A7D49B0A6C7268E399C6C68B6ACC0D1E9F5B2
931BAF9EEEA6ED985835323E85D72C6A607A99212BA2DDD24D57809EDE36890C
F8121121306593CBADA65AD9EDED7740C9A2F402E3908B54CB4AED249AE575AF
E64C76BA802490ABB489275E5A3F2B926955B0D961A0B9B3AE205C074AA695C8
68FC2F6997531FC328B8FC65BB06C17B212C8C06D5127A14D7989D24912D1CA2
1FF37457E65829B6E1C65A09C1A101047DF20ABCD57E067A7298091C88C4B587
84409C67D00F7D95FFA0D125FB938B5762D912E1C0E116AA0593B1231FDF3BB1
498BA3D20DF13C7EC6D40091B789C9FB7CC872BB73E6B9D4ED8A555CA31581CA
0F057B10C7A8CE1D7CDD4FE2D5332FC533158B8CE6CD3E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: MSBM10
%!PS-AdobeFont-1.0: MSBM10 003.002
%%Title: MSBM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSBM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSBM10 known{/MSBM10 findfont dup/UniqueID known{dup
/UniqueID get 5031982 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSBM10 def
/FontBBox {-55 -420 2343 920 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSBM10.) readonly def
/FullName (MSBM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 78 /N put
dup 82 /R put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943E919FB4E3240FEEED78EE63
0677FAF39AB2543D18C08A2B98B97451CD42CB7893DA8601CC0F45A65BEAFC64
EF72554395DA801CF2E9E3B03F65F1BD98F8C5F8EA06D7457842303C1A817E7D
69821807328AF426B9DDBC188A79A66FBB9E6193B4A3EDFE3136C6574B9C4C94
E2CBA4FE7997F949BB2DAC0D329C2AD8E4095BD18A037AC9F77B794FC389E5CD
56CC4C0B74D64FB0D02C92B88942C18B6DA84D4CF482DAF3A01E80BE483AC6ED
AE98F5F3E49BC762EF6BA937D528E751D9588B0A1E82EF0A5998150EC3854472
5A91EB983915BC1D6E2C3E615E0267B39D6937ECE0EC16162FE76676E5B69F3C
BC1AD934BECA284B89F0613B70876247D768BCD246883CFF4D819D6265302730
7E4BE6B2FFE7E91CCB8C6D2AFACDB4C5DB9688153E1D6B2DE136BF7068418A4F
2D1C0CA301B1B97290B46EE14B8286A81E709980F67382A5132F01B2D44DCFF0
9753E776AEAE2141D580E64C82598DAA6DA4057FFA9D02C3B77AE15A50AB457F
3FA5A10A3C986B22F8E154C1E564A55D3BE4487677613DCF793F7E1B57C9A925
BC57746C25FE567719A9EAA9CC44F1D0FF8F92C03132B205F57E3AFE9FB66632
D3FB3EF5BDFB9848030527FE759A5273CB81DBA2719611355F43E34F8FD7D0EC
9BE47685A2D122C9B60198A430C5F5E3F972376F0FF4BA52BAFF64095F7ABCBA
022622692231FF87514FD912B80C07A0EDCEECFA629E2734B5EFE2604E8DCB24
32A4C691DB4CCCF19EF897A9F4EA5B2B5AFCDF87AC06B93669F3007C1295E016
FF0A99324B80E37020B1080E80949525B3278DF111ABEA48E7182B6F48833E9E
B7BFE6134591C923F2C91D77A132347F5F471F1139B9938E880CC5B3409B3385
9FE870D53EC343C11C946BB9B5FF1454AC7D547539FCBD3D77D83180BB4741A6
90189230B9B61C6C54309B61623636F98871724F9A85088E44779264257FFA0A
FA05C2842C534A411593D10A76CB09C8FB45E6E44703FC7A51D81D3C1E8F27F0
3AAA9F00AA3A998A0C661B72E46589CC08EA87EECFDF36B819B07306C38AD155
60CE44A39581BD6B555165091C5D4107149E976E2488EBD830CCB0A350C695E3
ABC1069A94F16744A6F2D97BFD4E208EB2BFECD6B74C35310CC3567F94414FB8
334C42FEAB58B02F67E9CBC1855FE7DD7C1B142979D80DAF96A3F3517933574B
07E1CAD5FEEB9AD584935A58676976DDD2B6E118FD1D46453894775B2DF1F871
924CE2C0479EA8C8C337504C1F456B77CD97DDCF704455215B860BD0241DDAC2
F375DD996474504545DD2C1B775E4CAEAC1DA45C79223AECA9329513ECA625CC
1C5FC3AFB291A6B75A593BA8B9CA4954AD9069797717CC0B929BABA88F67E4E3
691AF74A94E95E6AF67C7B550FE44C63FAA5B404457CADEA896C69E5262430E9
787D1CB2FE11612EB29CC828ADD9B2585FB30DA75565D2D87C4AFBAEBA55678A
4E32C9C491BC85622463D65C0E9723DA72D45C6893928AC636427894C0E9F152
2EB691A2A5801D5A81640C764F9A566B08ED4A961E3BFCB36482DF85E9BBC7F3
5247FDF3399AFA35B53FB77245F078106D54A33F9750D97EDCC08D9B9F2ED1CD
BF03FB8DCEFD50625819EA67CF3CD416A288B64803F7812C8098AA640AD515FA
8DCA20A4D4C737499EEF3679764FD4A04E5228B1AD544A8895FE9041B84059DF
8838BE0BF67B63ECCEA2C818E780A376155506DEAE8EFAC53CFA081E1E3AAED5
48503118A8638431E939D9E13BE594932C814BE6698D6FE3F0A15F05D783EFC0
F61B5669446FD2E920C181ADFE551ABF15D225BC65D7D42768BA1EBBC19F64A2
B184B211D5470F81BF381EB20360544635CA4D3854C52FF691A36F65B8FC21FE
C40FD027D6674118CC6AE144B22580218E792D66C0A78B247F176C5DC2354D7B
D7C057D61D96D58A77B1D185B846C03C5E1EABA4E10AE611F9F6101BB688F315
A960C17110CC78977A7E4E7192134CA69E81694F4B9C95F55AA0E0993D1AA57F
1B79A6329C4CA5AAA7C11D2ADAAC75F205A46B98AD7B55C3E2C848B7199BB7D3
1FC47D6B8B5763F072395B0290F3852D907316BD2EFF8DC8F0C56D1270CC0240
FC4E984DE027548467A1AB533FCC30AE9474B0C7FFEE3613B07F31CE784BFEE0
D1082C6EA416F1C9168C61FD6AD9D85529CC3E6524756E85FE5F3EAB6872587A
ADDC45FCCD96D682A7955721B85FFC8A38719A69DFC85DAFF614E4C2FDD72AEE
FD4AA3A0A1313F7F8572D560C6083C9E631710C6B2A3EFD47ABCEF65271557AE
21E0C130E70A8B764150022F6E697BCAAC6986BC9E53751FA783E0C060228A6E
A40AD3F2BFB7606DC0F40AE7B8E82FB9A7F88FB3BA8CD0BF99C91FDE78ACD0F7
610091B3F0CC1BA054F52269EB58A332EFDF0E03AA4EAFE33E3CCE1C24A0A7A8

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE503DBAACC843B2D054B3D7DDACD7D5EB62F3E2E7B16FF53
BB396EDB8A4B7B07046F0089F56E044B37BC6D86BD3281E84EEC46E015BEB6B4
1B3F42A7DC6C54ECF3801E5C266B6A683FD55DF3C02946DAA6596D8D9A37844C
7C6D9D856CFF936CBD583DA8259E113CE1257BE6EB5872FBF1FE69DDE14DB146
2E4F9859384B15882C6B0E2215D2EAC98DC8423EFB3F3A2D2CAE793A820A25BB
2A1F4A466D3936DBF7D6E0C043CD6D918C8C6732095BAFA7892567BEA46F08D7
8E105FB10252DC8E0138D3E7419FD02E246015A49306DA63E60F1E7307B7624E
0116CD08A59EF79E5D7A9AF1DD9809395FAA022E22AD612B2F013E31B97F1017
2423BF5A5403BC3613EA73BA2AAE3FCA5D2E78ABF50BCFF5131713CF8B98DC0D
FE65FB557F3590423411FE93B8D5FE942822CAA7A8676A83FA6E29AAADFD82C6
585E084B87185ED539DE6FD5CD5412150439080FB47F44979B7483ADE1BC4055
0DBD475801848196FF59D705A0D83B417F2B196F5BA65829D9109E395A486D4A
D48D6DB15CEB936185CED1820BC8C84AFE01CB0D62649724458D42A46F65EB76
5A04C09EA527C1F30FD1CDEE64FBB71D44E8735E4FAB04830EF0E365B6CCFEFE
B512261BC0AB1A1CCD939D2A45EF4243AD1F5C8268314BAAC66B0137E33BEE4D
E2A7E772A9ABCF891B4DE86A0B102D17FA20A008C9C1580351CDB2EB6E18C449
F9133377A89F2C6FB7912351A055486089CBF1E7EF1C0DDD668846519D1D4C76
E25CA18A563F12E7086826979A6DF02001C1F094DECCDD4A3F00792F4FB16A0E
B7C423AF30ACF363C4FABF745B35CBB0866425BE43D3EE602769CF906EFB5191
582FB59A26857360C3999C64C5FBAE633D66C39AC9BB502EECA2B426B05C1950
AC57AAFB01C0DD54F969FADBDC6D23CCE9B282872D749D4263AFA6004AF2EE64
7A1A92B837D2A2FF664BFC3B397A617E17B996D11A759182811F99529F323F3E
580A8899C9CC41C91B98C51FF4D705C823EC08E48CF3F78430B302B7028CF6E3
405F02E3F1AE6FA9F749B0FA650DF0487D402500C61AD96D7B9D319A2A94C3A0
2502831533CCB72F8C71A9532AA917A32C8EE1A46C3AEEA8020FCDD0100CCFC4
0554ABC6CF8579682636DBF4BFB8267850CBE471D2339732CED0A67EB9816940
685FA941D578900FF1DBD2652F837C9D49F9D8DDF1594DAB691A9CB110BACCA0
46BD2261DACF839300052DC64DC31D4FC1D02B7029CC6ADA1B91566BDB5F3B0F
92035F27B868BB8B21DB4C7BDE702BC58A455C74E8AEB43F4A9C3DDB84AD231B
EF62FEC4FFBA9018CEFE5A688F6C6477E99B79F413E67A73FD18EA5E0C20A6BF
D0BCFC39DA2AD93A9D1E387EB5A5FBD628B8AE593AA6D6FD7D2357EF699D6F3C
EE95070F57
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathExtension10-Regular
%!PS-AdobeFont-1.0: LMMathExtension10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathExtension10-Regular known{/LMMathExtension10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathExtension10-Regular)readonly def
/FamilyName(LMMathExtension10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathExtension10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -2960 1454 772}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA967B9A7DF802734736F3D61073FD
8ED62BDFAF207E10687AEF931F44AD55F9C3DB174637A34D867219978D9D1BF9
C733804DA26B4CDAF23436F0F8EA2308CBE3665ADFAA59A240036663D9ED945E
8C22B3621360BE02DBDDCC3BFE082CF6230F8C83FA4B6357682B7A7DF35F166A
FD3F889D853655FEE984B52090BB8D6B7EF8DBF3B1D022B6586235B32899053B
0718E16BEE7E146A4753D6E3FD6C4B6BD9AAFC2AED5748E193D28CF6A8391414
41971E41C481638DBFBFDE2638B65D10FE5FCC35EBC520E3520F0A0EC8FDA853
597F3C2E2F60B8DFD431DB5B1796737BE979C821EEB58BCC28A92DD60EEF767E
E861765D087BCADB269D7374E766D4C2328E711F23B767CA5D47241039F33EE8
0DC9D02C1D4D91AA0E59962090F584084D29E26056AD0E2B1FC4C1257DF003B0
748DEEE2A30AE53AEA24FDC43AF62A66BADE0B3557F9F4CAFD659CF933472AB0
8922041D5D0DFC41603EE166FDAC7C89DA8D63EC1CD0E2E23E45C5C81A5663E5
C6952D28B285A1C349378D5D07B5BFD7D742DCE097383EF86C667BB651988158
47B4EEBB5E1C035CE74DBB3D3FC9D00DD3D28DC0853DDADFB3C7E642482047AA
87EF5639DA5CABBEEECB36123995B88946D1D7AF48D7C86E718E1153F8A4093F
79457700C6E57A6BB805A2386ADAD90E2DEF9354C8785D11DA504D44CB3B6118
C74E1B7A174BA2664E6F25EC8AB818169B1A250D9725677C72896D4CD4A15BC1
EBA98BA918D1ADFF45ABE8C162D93331FF301D17DC8998230B8C7918089C70D1
65F57CA3361018FF92DEFC60063E1A6926B7780A75CF71E1DBEECE8BB1295F24
4E7AB8080FD30DBECAF8DEBDC436B4AF98A2328B7EB946668117CC386E257083
7C0EDE2A2FF6EE7DEE7168B436A033249C8326F5ECEE6C952EFC6D271378AFA7
90A3AC4D2C99F23AD08C9753D7532D4B1BA3170AF923DDD58EBC8E8ACF16C2C3
5D2C311ADA85F37120427290A229961ADB1D5023BD93644E4C23176BF787664F
CF245203C8C3E557669BDD382731E334C06F4B6EA145D5DF351211A0511605B2
8C540290A08A304CB1279FEB8FC14062F495A5EF2072B2957D98A1AB2E4B2A21
6F53829103F9CA4A8B6EB5766A44A7EAE4D5967EC3646F54568E9FAB28736D70
AE87CA7F3E445B1F49315332AC4AB47D53A418206CAA262848C9197CBD2CA0B2
23F528853822A88782EE48FD9AAE7E228A0221B135A53635F2F150996E352CDB
B668CF81BF4D84381781F9D23A30F75A62F4C02608C24B3F82FD3E0B0D31BBBE
4A7144001E374A95FC5F4A53F2A72F1F8C8FB6C64CB689C55238D37913F4AEF5
58AF88D970212C07A08B0045DCF2D53DA48EC257F16D8FB0B820B128497CB794
6B63952050FDD2367A9F03806F5EC07DEBD4BBB63185A4B6463E6916F907FF4E
ADB50AC323EAD88C23FB646E0364107525BDC08AE2CC6EE811CC110CC87545CE
B050037726223C2A2724976400117A6667D579A061BC6B690AE27A697A48B234
C37155C75A7B6CD5D59594F81F8F8E2924B5C5FEFABF8A4BAA9A1EB7D73D0748
950EB00873A8DE35C672D1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4A2DE9AEA203B209385B88D9E708FA615ADAD672C6
BE223D5855C0F6753649EFC00A7683A9EBCDDF1610B2D942987DAF090BF54FD4
E7304082BF34EBA0169EC3F6190879D5D8DE05CB5C6CE7C2212251BFE8824A87
3A277D0CE8C588611AF4987F7203DDCE93170428CB54EFDA16BCA73256C1FF85
2C85996873C9487906AB70DAF5E4FF2EBB5C7489358365EE072EB45FE7328E73
5D241828F39C98E813E0B142027DA0842BB3BB3A4EA8DE8EB34BB81AE7BA9B29
193A289A9EA7EC158512A268417204F047097E042BB52BDA0AA3ED16B4315244
E3BB451A99B211EEA2F1CD0A5709AC8CFC3EBA9A0C45B48925B43CD4417517CF
6F42243C234413756CA68A0F125A0E7C1CA1F6166685C3FDC27532C931AC8B86
E81FB0223686025707E5A69C6BF3D0C6660E636D6AD25B03A44355855B2712D6
F84E63A541739B3F161891F0FEF72180DA1546675AE16824DD84B6CA375598B6
C439A2E90E30B7AF6043F860D5D548B166C25921D8DDAD3398299D23D94203ED
FEB2A8899B078698314F08981397316AEEDFAF486F58FEF25284B5B5618A6762
967822C2B91D421D3C8CF5D76D071D3748C32BF1C779E9131603E8C0EDE2D696
E60DFEE5F15D5EA092DCC4D49B16373FD58807C44B06016EF5E2670A911AE147
CC5A9756F870A1716B4DC3D868BDE539079576E5CDFFAC34E165C063768ED394
770CF07675657587CB8A56596847362B00E9728B7CF7F5E85673E4B8C4F424D5
94F93A6861828F6251F206B9131C951D1ED4364A9CCE5383C0DD92E3E329CFC4
E2B36E704F5A2E99A7CBCE624FD99A6A452BDA7CE29D9E0AF72F0AAB66DFBB8C
8ADD16BB65D88A7AAD93961976DE90E40187EA775CC79FCB6654FCFD2269F2EA
7951C85F49D40AE4D7D193541D0631D347B191536A6557B5B8C874FA44E71539
3E6B62F58F9D3B055E3CA3FC5F586E8D1B006E523AF961E9C9893E8D65DAF13D
26C24BC276BC5F72AC1343EE49D70ECA4F25F58B6C3937F7A3D8165EDF4C74CB
B662283EA3FB859F2B46DF97AE05915E791F1CE849154C53C441EF100B3D3F74
36A5F496503A3E108CBCD7AB1104D13535023D5E0F563059F9959F021413C8DC
613D035D69EDB4DCAF6F52EBA08FFC62384622982E88BFC0C20B422D4B14971C
6890397008D96737F48EEB999FCC8F26AC74EE09527348E31E31545F0FBAE081
3944C8BDCF6E32FA15B53C70BD06F06681193AF93A55066E8345D531472249C8
FDCE5D2CF3A342C8C3E0EC7846ACBEEE09B1C6048724F4AD47323294281412E0
33B051DE4B5B54076F7EE652220C5CD20A575A917C9E7F9EB8C5D400FAC3275D
E7A1CB64B5D1B5FA98029D7BCAC785BBDD2D86B42FF91FCE7E06435BB2940232
8654C6213212E127B968C9D09176613CDBBF70DD3492B82A746A18621FCEA034
C5478EDDA7C1280A05B1E32B4537274E5102564EE586F97C1FDE8E7BCE01645E
6997373B2BD37B09BD7BE26B975CFB5F1762444C53CB604A45763B67768AC526
1DF9C7E081A7F60049B0EF4E1912DEA25281CE4DDC8BE953FF658A1117CD4434
A122D6BC79EA3A1963B94B9903CD874CF329240A0A080B93847EF4A6D9FE1590
71334AFCEF5F9F56BE7AF8FEFDD9A275F88659D2ECB70F44FD2643BC95F886D6
9F8E5C9750C4C9E76545696CAC80421363FD81AB15094F74295A600EE8A42977
8B0570F27487933DBBAA82C5904BD2170921D4B2CB846E609078D5527C1141A7
903C924ABA53A4B5C7C390F436CB4C096165F9F845E184CC0594188DC4771B89
04EEEBCC20BB62DEAA105FCD48375C11A3207B5A381FF8E1C1643FAB51C16D1E
2C79A7488B9C54BECCF570BB1321CB3136656AA6256F36CB1B93A8AE9E43D2BF
759505E1F5F3759E08318611701B27F723F3786A03BA8515285CD7FB6640DEBD
ACC45D477D8788EFC79A0297F6D18FED9656B074B08F2CD31FC681245C724A8E
754BDA7CF80902AAFD2B6018DD0680B43A5AE7900B43027D002C318363FF20B5
A0762A4A9A546A212DB60D5242FD1C2D25BCA2B4E479414E699B812685A5890D
C3FD97D8C2434A8886D583181CFE693F96F674A02769B1E1F51667A11F7CD5CF
8FD053E67223B64D740B7B5746E193B5F15C9CAF3AF3BF89D94C253CDCE59227
2EFE43323DFF913D8D5F9B31D94A995E77D369B625ED15E573C039463C85D6D8
0D2E3F6E3D9B0F29434DB3C314312748E0A60E83AFECFC0279ECFDE314BC8E0B
6C0895146C40ECE0760D71E25054717CCAAF6D21D4382290691DBA3D105FFA49
D59C844204CC485B2C61FD26C033019C4ADC916AA6F4753081FA1D94EA99EC33
7B400379BB84FED0BA2E719DD6558D875B609A4EE8EA87A10FB585990593F20A
35C876029EB65E328BC84527AC2D1E06F8F45B9A4E0A50A5974B4E84FAA55133
861783867EAAF8138F4275ADEA0A3E4C5F2162ECC430C5BFD22467E3B7B7EAEC
D9E3E13E5A06C67184BBCFE30B3C2DFDB8B6B023CE7CE84BF2C517B5295BB70D
0AE365DDE57674C4C849CC0D1B54E47D44B807D264B8FFF9E4D785C1BB721B91
E3B18B10A96E8ABB5CFD28CA18CD9013B79779DA096E1F56D87595343D1C24BC
1455EEF8582ADCE366A721AEC716AD2358AE18DD2EF7767E50C44C91D9277A7A
CB3C766C747C1997953D2DE0551410FE5FCC36944911C50C1FB0C41FE10B6AA7
C7B13A244C3D76660C2C850DC2F7EBF48033C4DF64BF191F4D7FE5616B55B114
7525E3147648B24544D4D0D280C358EA9F015D31C4AE041FAB38A00EEA61310B
34AE2E68859E771835EA607E168019FF408B3C783D0712BCA10A436108F0D6B8
7BFF46E7E197D8541D72B9EA99D6F56F1BE23D9AD3885E2CF29FC8866B0F82F1
56C86BAB9E9909EE52CFD9DDA56E43B43EE27728E64F94911E78F99023106688
8CC3CA21D9B855B941930D94B358A511C38C5E844F53F8CFC95AF3BF1C79D435
EAA779066ABD2F6E793C31EB06B9D8CFCC2599AC3E2FE2CC2B57993BF9D3E087
8EA796DEDD4A99CC2F0BD0358E73D500D9A5CF19043C66B6476C28FC1B1B3E5F
EF3A3B94CD552E29288AB0A8AE7D78EFF8A0D27FEF34B60223FC6170F5DD66C1
4CC479605CED53147A5A50D0C160A05FE5C50204E88AE3CB8DE317F7C1449E4F
6C8AE7D67AEE9BE9CD45E61487646AF7FA888F5689FB281BE5AB48A4628EC39D
4BA102CB88228BDB94B4800143562A1D24AD69B43554F5CB698730F542F14B01
40956714F9E17000CA4114264126B1309626DB03244237C973EE66532998004C
DAEA8C7A9EC5C3EBD315FA64EDEB5E39A579BDE6E17A26570B8602F9FFBC326D
9D0B73D843F76A1B5D4A90F08ACA4085CE2182B18D0F0A3BCA7A7AB687037FCF
F73C21FC6E077DC85C01A5929CE43C6E207AF7A13556514801FB8424A19FC7B0
6C5679A64DB5E2FB6850B4977E46252518F059176E09DE7BC74E4EBF9CC38C7E
AB641BE9F5D5BC258A8D370AFCE72583758D1D5AE4904590697E8612476C7782
BF11CCACB9E7ABC7BDB8E2830239F397B1662BD176230EE1323CE1B26A165BF7
5291EF6E74899AB3A9D824CE570B02C3549C030A2182FA8F453BB48A71F8C007
8A809559DF7C0D057FA1817FDF25DB83B2808CBCF67068F475601D6820ACEA37
046A42AC0058159FDCB85363C9140E4CB113FBF9B4879A99BCAF708E326D070B
8A72B4B3BE25B94ACE7262724BC9A9A578B3BC9DB5CB1B44B1BD592D45247ABF
1CE631C747480C8C7504D585BC4A036D73CCD7AE63BD61FA705D30042BE7B6F8
167A42D598B4A63FF9F1C09A6B70EC816AB5DA4E51DCD3E547451191D88E3360
EF236EC08F633408FF890A42960F7DDF911223A1C4EEB6751AA3B925766E9C08
169E0ABDDEC4210CABA300BBDB0D7657DE0BC5B2799B4A9B76855632CC48F0D1
002B24AC734368535FA484CDFA635C7ABD2360B226B790C4AAF242059AA51DD7
8CAC1544AF7D07D78F5F4C1B7C756E852052EF1B8FFED3E58C2B1CB5633E895B
1A65D1A4AA90FE8ADF79941870A8893D25DCBEDF56A8BA35342DE885B0C370FB
10B5E05B2D70ACF533C80A39605C93C53BE5A90A66A7F0E606D1ED898CAEB9B7
6170B80B7355E8025BB9FD414CE37CA1229401BF634DB899FD96875233389595
D56642A713F9F3E50C4B5ECD451DF3F6C5D12CB95D3DC2178422A46CA54A7E24
3BE377996B8BAEB01F0F81E2F33E81335F7086B663F0AABAF671B02C86C84084
5174596C6E1F9EDD7A369B9000BA27005CD6FDE60CC49B767DD3BF6BA86CC36A
492CF97D117A3D578BA261CE4E68C0F77F30F59EB17E7D2D0A8866EA71B29661
6734020B514C8B677ACF46C893BCB056B9A6339D5B4AFAE1B7D87F43426B6437
127403A378FDC8E849A8639D82520AC5332EF9745D6349200771D42C495F3A01
57E54C5133C1136DE2492BC07C0C81F3B6F7AADD70B4E5993274D3661BB9A999
124ED712DB3E84907C022BF4388A788F2F72CEE5F5594CEA611CAAC1A9F7E87D
D609A40C735DA40E068D61F2BF6EECCB5DA1D8CFD55EB82E0C85A089269EDD68
33F4E48FEDFDACD080AF068F7A1CDE18315BD694C60B1DC71DA51BA087227D78
3A0BA41DD693AA5276475B876CCE4296AAE94ACBA679E67E6C71F4B0F9E6222B
1E11492D2D1BBEBD511B8CAE488343C923BBD13695840A4B561422998DF58ABB
C243DC396238C49860350745CACD7FEA1FF9200BFBEBD6E542A45CD9DF121101
DF7CD1147FA1817FDF25DB83B200ED07760873A6FA09ECF40F73FCD8126A2D82
BBE99EEAC16D813DDFFF35ABD92E13ADF85FA7B62AFD402712C1E1417E02C197
B010E49F7B468D51C05113E4DB9D0E46E118E97B1EDBE1ADBCE77243B1EB202A
F53BAFAD3079572D2DB7F7BD8C20562D791FC03198CA758ECA0B9CC64D6A882C
FC5745047EC2FD9F4582E2C86DB7DAF041E2735E882D1880632A2768A241A093
B769BB09B91B88627CA0EAB65A76FBFCE0CBAB3792E7BE9A167600E424F9AE57
02DCF489B585F5190F9ABABC6BA8BF0A93D7692E755BCAF6AB8F5B958F7B9138
5E510CDAC287E82CF1EFE6E2B12759D876E93E78E14FD76B97270E30E95C96AB
C1C005CE38BD1FA7357A6B5182917E61CDB10F4D59EB9DCC214E61E8D1E091AE
EF1864ADC733AE203D9FEE015E65845B48444847FFD8923E2AD093B00AF017AF
F09CCF772CB5742104AAF7F6B37234BD3256784F973D8703B8139B8EEC22BEE2
E8A1A721E5A28DCB5D3CC6642445627E1FF938AC1A373333B68E810458E2756A
EA1FD8C09D647BE595260BB70C631E70BA8FCA40C0D865F2F7AD066EF848E437
B506885F93E00351B55FADFE83D9A3857E065D555CB217F8857FE0DB1F6F94DA
F5104ABD16958F1A6B52D6FF2F1F28DE13E4B525245B82998873063BBD2C297D
25B4BE338AE55A86F9BDDB2548C6300C661669E0D271F30024C0488C71FB3079
1F330A89AEACE265C063768ED394770CF07675657587CB8A56596BD6070FAC97
92851F1CC40481634C777018C2E5F8ECF6127FEEA5713D78F437DAE50160FAC2
8C1C21FCF83DE2672345617BFC36D07E89110A0E44CFA2460615EB10B76F1C8B
3B0F66D6FBE907224496686847529F68DEA6FB704518D2DC9D321C43C5E17E65
894994FF8ED6676E9255EEBD19641F47A05F49CA2A65E0A3E935AA652C0B70F0
45DD5C79D026CE9F5B78A5923B07946AF750F7C23F1ED2F127D66CD2A2164C29
1567D081D4F769B5CD39E9216131A125992C686832DA19007A512B2432256C40
1A60314F9C65C30DE793F4A68EF039BE787A32CE4179F2DA227A1DFE98A369AB
F290AE8A785CD8DDFED8FA29EBC57C3E00B3BD73F6BE22FDF794A8AD3B976234
8E65649D6C52389921BF84B06A7F9D4ACC50C374D88734FBD23090B265532EE8
3FAE343882AD0796D5CCBAA6F264F2D52A88F1A24BDB900338B4131ECC606449
83811AE225AFF7C85C21A80A68AE510704F729FEB3AC16B6E3061822A02376F3
E8F14DB832CD33E7EB920AC03641019D7E89C3B58FA4A388D48E279B57E7E5D2
23D544568AF2B596A4C89E877948CA4CF92F1BB9E3825B748C865593B80B6A7C
F24DE7029566695B04E40439A30337C834EC6C913FF06C046670BF3272A4D0BE
62811BBE508DC0A9589C4E836A645D52C01CE8C7FF03578C4859B55B0365B514
01510A28F4711700040204A47C39359AC7480C14BAA8A9AA19AD7875CCA19E45
CF37ABB1F372CEB8D1B8D4DF63FD13FEE2D75755FDBF7125FB02920466AE4271
5921F017176B028A8325607AD57850ED64DF35103F88BB227E90541B15DDD0C6
D989490ADE623FD53D3DCABB2ABAEF03EE07C10663DD81CE07ADE6E6B2935B26
BD94ADD389BFC649DD83AACC23650C429AF024EF5EC2592A32E90CF70EF4A2F0
4946A46DE0F2FBBD5CFED6016A7F8A61F00CB29BEE5AA9D59CEDCA3C0660DF16
3D854EF6C3A694BFC4C5F3CB26320AC4798C4A051C009742A11FA4CAC031296D
C567AB448B9CAFFA4BC15B304C7446A71A59F056B37F07C8B984E5E6D8371666
27BCFFAD757782DACD8A9C6BAC033EA01BE43757C78C12B423635C620AFF4D8D
3A1530112D5351BF04B9EE95796C135C1123CB216D77D6A11627AD1087A1504A
5BB67C55F669EC434CC8DAADCAD82F6F7E7EA4526FBC46A3E5A49E9738C7354E
9284753660D4150D87FE8400FACF1F3D5D8D9A2C8C9DEB1846A384DA00E5787E
74F8896687CBF52C1F079974CA6F28A5541AC6D2D811F0AE2BFEDD47C0B41235
E05FB023A6E44AEC660E02AD5C0E438F96448872B9B88D345869D96C57CAFCFA
148BE140BCCDE6A73F9ED4AF92BA5D627FA697E110BC240CD8069D8039DA36A6
E77AF6E525B313128359FB837C6159BDD3495954EB849D8E9487FFFB4C55FDEE
648948F92CBC5FA902E410B1E185C99C45010F8767C9B877A8D7AD7FAE19BEFA
A91A90A346C4D818EC74D494FA998849663CC0B9F3738B279F38A2D283BF456D
5D8BFEEBCB5B69717F22A057979077824562A0E86E19FB8D49646A4C3BC15E37
1993C3AFF0BD1A161889F23347D5B63CA29ADB163DA9E3F1A54675CBD7ABF2B2
F3E2FE347F10ED094F00C582E783C432A64175A3FAA4377FE13C0D61A47E18CF
ABCE6E0D39840B546A6D81B33255F7D3EEB981E561FDE888DF359F302BDBA57D
A671A26A6A2ABE9D3BB94C816955D5A631CAC3F1A53833DEEA43BE551A26129A
FA9DF18C663913C5028D0F35B01F081084D92EA30AC2431DEECAF0A5089BFE01
9466013FF3A3E8684F0CBEEBCE9EBC2BE8A24091CEA8B1E529DD5575C2362EA9
F95EB9E16E293C178828BB42507B524B622F10AC8781B19CE8AA27582B2F2639
3FB39C1F05FF8F31D2DEF37BB9B883334F51E9536671A309651590C702791FD9
3386C254CEBCF49B7A849FC5862ABBC985191135F0156722F0BF1DFACDE42033
9B78D42537BAA87E0BBE78BA5B5C0BAE2F3534E7A6AE88DF0AFA1E08FF5177BB
72916D578C2C6E72A18B968CFA764F314AC16BB1740C1B9A34534A154E2B0401
44A6FF81169C5D1ABA0AB0CAF5BF3FDA754EDA86BB99E7F290F346F585A48F89
006ADDE2E437DCADA997D6EED987C887F24F66C3477F7D2EE671BF0079442052
A2B9B90068525AB3089C91D6A134411D948AA2F90ED6A018E7D5351B62952C6A
EC9BB506A5AFD9D9C202A4A34D53A10256507544F5B8FEEF1DC4FE433D4881F0
977C9EAA3171C41E3A930F7D96A3F7CBBAAD1697059C16BEC49F9EE3273F7A28
A16A343214089692C8B5C2BD542B3D41DAF4AD1B4D86C188F1E2EBC7191F8CF6
627BC3064CE1AA935E3FA70B901CD5D2C49144778CFFF1D5B63E099C9855BCD6
F436C7390B71822D2D464A10A1B14C33FAFA662802C65E737066229312A018E6
07AFD73EC28FFBF5817118B73148CB30D76BDAA84DDD46A6CA29C1FD7E7A29D6
54B5E2BCE051279788C2BE631FA20B58F81A1A215F70C54778486E4637F97A4E
391790E00CBC39BE0D051BB73DEA2B8B4B915900E55B9E7C914E0074C40AE691
EE10F8257C892EE7F286D0F6FD415C4E0F9536586CD367FA092EC9E8AE96643B
6D5CBD885DC93B61E6BA36BE6A27F528935D5CA264A4C9F0A8E0E96BC0FF6BE1
358916C3E66F8F8C21AD1D13D182F59E712FAF112CADA74CFF4BD78FEEA0FBC8
28E7706B4EFFB51B6407D6FF025F2C1BB35A613C0A0FB5538245F2C637E44993
AE72672604F139C49930BAB05BC1A7A3FE0605924C1CD6937C4F646ED0FF4EDA
98E456F41F67A7063A2EF9ED5AC30A07B87D5DD27361E68D79B52B6C9A96C1A4
0596F048A31C4ACBB487F2A5E50887AA1B0D3E5ACEB5EDAEA605AF5FD65D28E7
15C6AB21674E82E6B49A5DCA8AEE53295494C0B9C822A8BFA0F031A3DBE8DC1D
6FB37B2A939790B6FB6095EE87EB93711F2A49C15DD57EA42ECA4E6E8D58BC4A
1E5D43FEC68E9E3DF1AC80F8FFCF4B8DD9CE727EBA8B13A51ED614E0C7FBC733
5681207464ABF8C4ED5B8F8742219DDA8FD87341F337F112E6E649BE407C85D3
D7359AFC593F00644D679B9F17FFED44F44192525D19ABA0631EE6AF9187E298
CB7AABA58E3FB5B4C7E86616C25D05C5DE45A3519F7136A882713399C831384F
A12690241AAE5FB3FD08D95F9EB0F889FEAA41F3B26B7144D292FDB92717094E
CB693C6A287E40B44F6435D089AE68F90802AF3247216D8F96EBD8D1EC18D48F
EB29E968BA814A7B50BCC14DFB635868845956AA111A3B5E5DC9C461F32A34FB
9469E4CCCF24ED625237EAD55FA9C1CC2D918647525ECF7E0304D3BD24256912
A2ED3C59B32CB7925DEF6A8492F020E67407CF321E01EE8F2811A9C0AC46D13D
75B9229B28B167355EE678D6509EB484D60E207D7B069A9236DBE528855255C0
52E88D186373488719EB806074669C7D9712D975674948A0C76CEBDC6D0CEE93
14AEB1BC9737DDDB8D941425DE145DA043A710A148B8836A491E1E20F202321A
E8696A2B452CFB7004015917BCB3D8C7BC445E500C128AA2B10494823BE83120
9AC88287B705D740C0686E3F73337E28400D716A714D8670BC05F2C5920C97B1
584B7E0051107EE778B10EC2C52268447A7CA919EB41D7E8BC0BD4D3EA61170F
94D3DF372A6C5197A556E05CC460DA5FF8BAA066043F44D1AF32F06F455B580A
4BBE440839A54B385C9E4571C466AF1C0C846AF17DE250CA1AC04FFD6E62D922
CDC694C0A0BBB98F022ADC8E75DD413871CAAB11C9262D553D7CB135ACDBE81F
C2CE7BA777B592888D38EDE68FFB3EFE8384FA47301B6535236B09184689D672
FB302CDA74DB0C401E345AF485AFF1AB405004CA0DEDFF110AD9468A0E401FBC
38CB32649C98597DDCDE8DDFBDD70EF02E7453561954594D83FDE377A8E800BF
FB473B4D7C7337534BE8EA33D9905F5AF96F3DEE87547541F5397648502D149E
336885DEFCAD7B8A189F82702007937D0E0AE9253210B45BC180AF3C74E1E2E2
7C86275428DE5FB01E0069833A45342B060EF38B19B97882E8F13AB6DD39EE11
FDE0AE74936FB0B1B5F204DB89A8805F8D70D3983C2BEF198E85BA6F0370AA38
A32C33C2818E0FB92A73D8B10856C476FBFA10D11E87A61DFE3103AF0DAF9EF6
29D56527C63FE9DA78EBF6D7282DC7DC19F08BFDBF2EC7FEE46D8AF8ADD162DE
A2677D4529E532E15265271E6E9F502C0B057C5A3F63F8659F536067E000AD81
DF891DF490B9AD4A2980D4C033DFFE422922BCF391BE9C97E909CE4F6FE9466B
313B625592AF05604A40AD4992FF6745F924E482152142BAE7699F4099A6A7C7
131A73F3A25BFF7F32B30BDF8B970DB9D2BE91E7B7E74166EAFA66BCE76DC6C9
0960B75667FFAE77337151671A462E91C0471ED87CBDD81E96E222B0F0964D1F
FF7A18A4EDD38ADCDD0BC65FC9FE48EFBC5C66A86DA1267EFD0181C65C2F290D
74848EB0805E3F57AA425F81CB8561C4A01E067DB113812FA82AE80EA2C146A0
40FB4729A47526A644743B53CF0F69DF3B449B4A055214DF69D0218549440B1C
5F1947633637D6D5F57FB4A6CB0413BF893209E902765BBC2EA7D6ED3F59110D
2161D48422EA23A147759BBB495C5DA8BFA674ADE9546E69EB1EA12AE2DC994A
256E7B73E8F583461AB0B92B85B73942EA553AAD6E4BC7307AE5C8B37D2B233E
6CE581D09253F6D6ADFF67656DC01E67ABE0B998C7BA8313DDE3FF722B3E0D13
665749B739D79E7008ED1E8A49229FD44F45CC0F6CC85C210D9853225C2920E3
BCEE9D09CA5C60F22B07F24A26DD84BEE2242F5ED495501262317FEF59FF2CC0
6304B71258F80F9601D6A1D7AA6FEB987470CBEE6B16CBF7E8B1B9D69874F361
DFEFA485386C301769F9E0E1A6FF19F68C640DCBEDCF76159FC0311D52E6B44E
5A78F827CB3558F32D85F61EF31347E7BA6F5053CDC3016406B2BE245F98F953
CF1E33F6EC39837B204FDD6937F45C869DD22E0DF68340F7D727272E4D9457D8
C2A1E937B47C40271C85091A553FF47AEB55E074E0A7EDCEF6F7111078FA6B56
6EF981A7B0CEBC56A4BFB59C945F9CC15C9669D2027D1A4471A861F64C9FB4E2
35084327EC024E40A9EEF6B8B82528E097D62EBC6744A2D5CA5CEB2340F02646
EFB7A79BF8F1E840D5695D70DC4C97884A824855D271FBAFE4E73D4934F65C21
6EB6C3A6207CF39EA825E6DD1010DB2411CCCEAF45E1ACB497CB6F88ACB8C90E
71F6DD13AEE2412F42D4837893D2BF2016CF8F004D6D37C02E01AA90808349DB
8ECBF43DB2149627D250AC3F036BF7D4B222282F1FB1F986A5E62DC37AC584AA
74172816689753CB090E79A5CC212295946E98647A6F5903A6BAEA657612A19A
316267E1B0C1452F196D8B206ED266C2A2B9074A05C3E613E093228678586D15
90F4C85CCF00ABC0E0CDDA7BDCD03276CC54E1C9739E059F7BBC7ECEFAC94D90
9A11A824C2BA80DD28426CB762BA1573E6C3E0C47B3C98E8231D2093E8410180
C54A379DA75BB9DEAFCAC99F3FD3A30F4F015CDE9893D5D66C804F030B04DACC
F6CB3CBB56BF05CEA7C5200B5A292B432D0E5F16CB9CA3CAA403859680902B9B
5A88CCFD133C91C1AC68C0695D3C858A28BF72B6F0779DFCCA2EC7F97C2795CC
1C9E9B5F16F0317449079864D54B26A575D9DA9B920B24FC2AEC78FA7602A69B
85F86AEC91332A67B2A810E3A16D8E3C0788C9F699187671DA211B07F6430402
64442F31881E3DB985834F028AB83B891E4AB18510916FB1C6590D4B83507C35
2E4D83A16E1E4F650748FFA9A3F5DA590132556490AA61A240D721B6B3B50FD4
4F61E2E7C76E18A0D573BE4BE58E0D1104F3281DCC579015BDB37819553B2121
B0E209E3E7A0FD5A65C4D6CEE647700DAD2DA776EA703E6EE873EC0462E53825
D095012913031421A3D10E9CBD5D4E8869D9BE92352BBCC25FED541C36130671
C924761C3BAF25E1DEACCF05E96349386689386BFABA5CFC0CE6369C638E6B33
724223E045D831BB05A5B84D1F2F28F0ED220668115917B168927E4925532684
A429F690536B79F694C12B9C01C72AACDAAF2CF94A6DFE0713DB9B8CBDC0D146
C73711CCA936D0011C53E7B33D5B50ED7BF3F41289F48FED1CF14FF11071451A
49EFD130227754FA1BC2150EBDB56AD4E789466852BDABAADD6B9E6E1B71655C
46DE2F5DE7D8505BAC70FF538C735C2E787D64F993B882B617C136AE507EFBC1
66E9384CF36503CA353055D48BE8BB6E72E1A11C58D57C95BEA86D6C602F27D4
D17370D21A975AC344DBD4BD58CD7D2FE44C8E7DA87C2F677A6BC7C9158C1E88
3FF01BB562BF7A8CD1C6CD40BBB35A56848CB227C361CD8E3DE146AEC03E2E23
107132137A314B5E8F4FBAEF47BE3700BA5638E8E3F4588E2F1A25D33A99DACF
18F74C45C985E6F9113472083B7B4E700546D346B4F59EBBC14ED7BC71D66909
1521BF6739131AAC92DC40AD52C326F7D4869F5BFCDA189FE81641832D1FD836
63AD543641E0F8A3E7314914C307549274C1929A4A465DA68791DA15FF5999A8
A0A26A1C469440C75A4BACA63D58039F45D87E787DC0EC3562E8A8F95F922F3A
E30C77B6A97267F4C63D4093BEA8A34B315CEE932B40AA1DB2A40681ED8E00E6
3D89CA32AE0687DC232178A07FB8020CCE8249E41DC16DA43F79D4C8CE6C8C9F
8C6B79398A082515779292470FC5F08C4BF9E33745C58511506418D84967E7D0
57B246BB2427A14B33842864731E3DC9520BDAE91726125C32B8BEB0D3107CA1
AEE073345973160BB118A1BB322502D578F815327B4D933326D9C88D6BC2CAF1
98CEB491BAD552FD0CA912D7A12E6590BEED8B8F65593DE423E11AF9099F7586
A67B05DF4C366C9D352800A9A0EF849BB02EADCA01610F6DF3BBF81A1BBCFE10
A129D41264A039D4B882FFE5D7E305A01C62062A89EF1CF8DB5AA29D60B224C9
B8872CD9E55B2E3AE28E1608D7ADBAF79C8E66A6F27EE257E88F34E6654EDB7C
C077FA15398CF620966AE73D22C7312708911CCBA89AB9193F4A9F02506DAA39
886CAC4D93D6E6823E197C0A8E797FB00B7026D3CAE5BCD397BA1FDCA43DFE85
DD2525E66F10354BDAECB0ADC7DC3FA7B24303B3C291BB6596A59AEEE2D5BB9B
10B58BE90DE3CC9E7ADB6A6C5966121A3196210E0C1363B06E0C4CB49A374F2A
0C163CE8D4B3EC66EF1D37916398FB8CE955E12D8A89ADEB11AA37CA552AB221
1E6DBAD7D7931CE6C467F9CB65F035306933F17030AAA7B0A2CEB87A0360124F
D1504C60DFCCD20842C5018F4EDEE2FF2151597C9E0F7CD996E84F34A57A34D0
A23A3CAE652858FC87D056998142D7125BC70E62118704F4C9DDA1EEF4DFE780
E86651D99C9B72DCB2BD861801D55698E3D6ECE62CE5CC9FE34A8AAB89392C8F
150CF2A6A20E81D81903331AF2EA0A248016B94BFEF604C2CAC70727F24CB5F2
B23E93A3CB703B62FE17D7E1FA97D2920568999A59AD14685C049D0ADFE3ABF4
D27EB1DA256678EE073EE3098DC9CF8BBE54D707AE11AD9FDDDDB86B8F6978F4
4EAD1E6C3FCCB186BBE6C20FD73E21F26DBAE2550DD4ACA051EA0A0030107676
3D31E4463726524A2D7C07BE53A2306D288160160A42E6B6814EF062A55E990D
90A532C82ACE33BDC0E2A514CC0C0E70E977953666FD9E6ED5A705B1433D9B17
8EDCEBC386560A2465A0565E91E89D1335338DDC277E410103143E84C97FA6FD
2DE5B292D97D0335BFC690BCDC1C208245CC6BFED98F0D54D93AB3AE38D3F24C
63EFD772D2A395CAD97A270CD3BC6F03C3625D0DF044FDCB15FC3682E216B042
2DFC5718733EEEF10A2E54A8082A9925BBFED187D9CF2FB4A626EA3E546717AE
6E23981338327B8D8114A29CCA5AFD1215D847550DC0F06DD1F83FA50A23E432
B1C20CD382EB8EEC2982333428081F09F426BE5AB949BC7317AC222D65C592DE
9810EC5627944F56F5F3EC2A3EF7E4B3FFC5A421EEFE780A9E6A96422158670E
D974B525EDAFECF8A055EAE81C7D2B8D845D3F92FB471D5FC80B4FA1AA8473D0
572495EB8FB49019AAD64ACEA44755133B3AB52F2E454991A62FB03473A98E06
CC1161E0B77700680D76C4999A7EB3FB9C5287C3764AE4E03316A31C5B26E391
DBF8FBD2E94C4683F3A493AE64C56DAE4E133DC1A8FCCF41B71CF582343250BA
9534513329D5E50433EF517BD0FD04C73FBF1058A8907ED43D268537C6F2DB66
91434BCA2B4E559C58D01E8E6D964F54B8718E2DE5CCC0ECD9151B81E78660B6
08795E1EFB207A079E03CAE74D6724924B81A7F01A7623989D0E44CFE448D332
EFBED44A2D79E36EBA1FC89E6EC8F51ACB4086198D629A477E3EC8E7350F739F
476E455B01C64FB89E724580B4CD7ACB9E6D1163C940FC359510597C3ACDE5E2
829FD745C84B9029A95896FC2F3919A7074AC1F62C3D65D601102C3BE5C3B2B4
80515D2920B002CD413F5F4F673D424112ED9EC73013905D0A9226ABDCDA689F
202F60831F7B4783DBA1C1B3A039F1DFE9775FBAA1495A572719400771332BF0
1678ED5D9B8200B32D7368EC958971F6DD8D5D97E9EFF50524E38E430E37B468
1B2FFF55821DA4B42857AD100A7CAA1B783BC37749D7EDF4B3170188BA06228C
F9255887E8B0ED5B9A3FF97B333FC2E1777832890D0E956FC8FEF1EFE0A67D56
6EE4E202722ED52BF7181F5170D734070BC1185A71C555012DD01A91B722FAA7
06F7F210499004879EA8034AF404EA960F5A6CBED5C40B669F0DCCFC513626FF
DC2E306F95939384F0997DFB2891C651227EBAB8099660B2CDB5799972AB6ABC
D46FD5E647C80EAD331E68CCFADBC48C07DF7899C4AFC426774F1A0BAADF5505
98557707267CB6E58F6D9CA6F5B88EF3EE140B5483AF3E4083CC9E64F40A500F
045A27CDFAEFA66D28BE69166CD727639D26DD574C550AA3864CAD2FE404C520
9488AFBB6A2D10D335B76934CAEC6AB8785BFB6A84DD8A0545C941D59CFA44DE
81C9562831CD23DEC40E6262DE36DCD1515964B4D13ACDC813180560C7AD4A85
1D77988572D7480DBB61FB1A2006654683A71DF52411E06FEA17A9C1AC42B75B
FC767EECE17C65560A0EE4086B02D84EE68060A81E14EE323080F4DBF77A1979
44E1DE50B189CB6623C51F41FE9A5F6D3BE27796E51BE6945BBA06C80E19A416
5AC73F32D0ED08C8FD0D0407325DFA792FC4F09CAAA37CEDF28E1AF9F86BE6A1
662353BD77FB9EBF7A5233853C39BA13D032A7A28FD0AEDDF8F56E8A77BD7D55
5403B83025FC259D4ABAD69050D64014F4DBFF95AF65BA0898D5292037CB5215
2485A610A2A4CEFED86FCEEFC4089ED02E5679235D9623A0459006CEDB02BD69
FDF93C796E4644E6666719FF1C2E9C22D6B8FA2AC9457D89B0D17AAF81C1D586
9B80F58B199F71C9B3616A0F7573B82A681D124DE7E31E8D20621FBD84163C13
A65128994D74CAD21F2BA386D111C8D447982AE814685DDA19B52F6C77733CF3
FAB540E6C906E04EBEE5F8CEC3FDEA36B201E774592CC4056E4BCD4CF20CCD8A
05E35B39244A23353BDB0ED9F3BF430FD09ACABB0532B101D2206EA79309A7F8
7B1F805417AC87E57B85D56DA207C999CAEC4C445BB1B0B552EFA34CD71FD442
CC584FD6EA914F5FCFA9A23037BD3210F3171FBE56DE145488C0306C6EE589C2
E71F0433B9BF824D3172E5AD2D05BC5D32B277D4AD6A149F678573275FFF6AF8
73FDD624ED688CC9A6DC06F4B0187CC87BFAAEA7B7F9BEBA4A9630ED0ABE793B
EF39A7931111DAF6835A283C822A47B5069F7527ECFB9E79DF4FFBF19FD5E401
34496E91133C49BB85A6ACCD867561C9675B8A90B01AD1156AC74542B942B0A4
F70B64F7A89EB8D386550C4F827690BF7B6E45B4F8674A6FA270F14B4944F276
4281BD40FB1344156DE7712A41673F44DA2E1E7D41DF6BA61C6CD3EBCE191B0F
1897F45E676D2D16E9493A29D03364A237BC0486514F6952862F207136E1E16B
417CDCA5FDE87A4B7F484A55FFA5B83052AC23F4B3644236BF637F5E9284AF03
5C5C9DB4F8EB9844FABE985F922DFAA3BCC1CDF4692D601ADE5D83133EF0A5D0
FEFB9C0EBD6F89ACC11E82553D3DF4A5BFF200843BEF3B3DB3C368580950ACF6
844AA44B2CEF792935B7A8034EDF79DEA489C306A4E0E96C71479FE3A4A54C5A
A93F4D306202D9C7F1FDE64A340284CE1AE3339C1408775C05DFD431D16851F1
05D680B8FACDE8A979A78F668196389EA5BE94931B2AE37B5688834426026F54
98450AF9870F745C997CEC152AE948CA17D83AF4A8DB91AA4A2E04528844BAEA
D73FB18FC58EBC34E4A623CA50D661D5DD7835AF3726FF2D91DBA11FBB6D48BC
64BB7203BC48F53E357FF2D7F91AE041A9DEEE7D6FF2BD320B75371AB3A46EB9
FB1DB7AC9B17D28C4A0E9EA0D4849962B1818C290801E1B884A635A73EC67F26
C4A36894C4120C6D2EEC3C002B97E68E34391E254290B33431CC1DA32A2326C0
0100DA9E20206DA37853BE9F3938B17DFC971757AC0B528E3FFFA9ED053D42E6
54C8299B824750C18A175DAF0DA28911276A354FBACF411535449A83303DD252
ADD92583FA617575B5A5AEE2F1505E8A1BEBA0396932CE48481E1042EFD1FC0B
7E91D1A68E2AC35597AC111CD77036BA4215477D89F8042EE57CD8DF84639B2D
D5832888ECEEC9A04AF8BF81E15E499DE95FA56B99E89070C603E13C29A7488A
4BEE5BF4092B841D248E2D7EF8A1BCD50C2B067D85507E2E43502DA0138E596D
284C3D9C6367503CD64DB373B7AB72CF16D55349537CB9D3EB06EEA488B97ED7
E7952DB790E7CF280CE1FE779D7333211E29A7063B10B329D7897394C51D175F
EE25741491A405824EE7D9CB1B44C33CDE279C25153110766A545B0ECDAEAE36
9AC111893187EB58272E47E15F1A0A6552515BA612DAEC03EC18BD2631F88E47
EE7490C8B5CB6F97D847D4B5BCA6183347624F8480E7A44DADC8B1AB8D976EB7
1498126BFA05D8DA36CA03FB1B2AA38D32F617E041265602713DB9396434D4A0
21D256ED30F61A9BADCF9935121CE6B049A4D79A352BA9DA718A4CA095125245
7C2669807F31630814F15B2E923E11EEA2A32700D13BB812B3253AAF9BAC3162
D32072468FE4DAC52266DD812CB379E631CE1E918813741FC59076CF8B166BDB
F80646EF216C06236F60F7F0EAFC9F4576349EFF413F84E5AB13503F7C8BC787
C5C81E6778CE211ED51C342BF5D8B25F2053B6C031C21918AC2E17527330358B
1AEC31D1F4362AF6AC8D9CE5B3D6CF8F4EFA5C261E0AC2E5FD0B15D88B1B351B
F7D4CCA5A21BE0AE7CBD355CAD3B9D9E89B7A75059C1E2CBCDF3B1E5280A13CC
2E782C659FEBBF5E4CBBD3A6E25F150C5294A13C52B2B12D6C769FF65FC38103
AD46A2EC71BEE13C8EDF435911D0DD383670A99D2BC0F53D7483F24ABC0D95B1
C6A9DB9E8F2A487794284B4CB2F23B21EC1D6D890713607A2C910BAD9E6E8F9C
6B796A496231B876DE088EBFDBCC02E3531B330EE799501596436801A46A9C5D
0EE17C775E8C0574ADF887E586E1B2BFB2EB3FB7C2E7DA43835715A61959331F
4AA85E69CC8436DE23FB353CDFA8ECBDD9E029F4B739AD2C006D1658E6CE12E8
995F2D189E23577FB431DAFE30802C227B35EB6E69AE4F326A2A37181FF24CD7
7631FC8AB50EC3855E96425AA5F10CA1EF4608FE644DA9ECBA9FB30EA0A815B7
3988E6499808D0DBFD69C75FBA4A274B798813425E99B61D5CAC79805BECC8D0
B2C38B6F8F80AF38C10CA907CAE58C48CD1FAB68AB35FE65A6F6A67F5625DDCA
763DC98882EBE913C3DFAB47031BED7FA35FF6C1609EE02BA2E4FEE35FBB8292
1350B68905718BE2217E1A986C00348F105B0F1C3A267DA62B455B77E8E003B1
43FD6AA7B0BBD3BE70A18826DFDB7DF81BC45EA47697DE0BA107197709417F07
4612434D9BFB620C3EF84F0E5A305C15BE74047CE17E6A7431EE8BAF46575416
60BB5D6D780FF2843CE0477A9F0C85E768663DD3370F361DF73C3ABEBC3F8965
35D0DCF53990EEF52A12B3A0DFAE6BB7424A76B49084DAA4E59973E895857756
F5CF97E0E1A56C6BD18B5C8722C7609245A3DAF40B433624D141AE8D3CEE33DD
CE8DE7D307E0DB2CFC0061C80D4E28CBE957CE3D634F091CAAA050ACF6373AFE
8C04E1699E7849B2DC5B315F16792A465AB72A608A2F336BDD1E048C6D0CCEFA
A2895A257AD54000B6F7CAD5584885EFE1A1B63852C3D485E1E23ECFD233BA08
B4358D91BF6CFBE10D39328466F195AFDD13C4A3CAB183E05EF9F36436448B97
3C5F7750F5F06774AE4C82F3435EBD9EA59079090FFFA357E2D1D1996199EFF4
E1F416424E7A9D0EBB579B3C260EF5B32209E0E474C292C3A9B44F5CB3B697F8
F40D43B742F202D3A54C7C19131CAE9EBDCBAEAE26311CC7D39CE8C260B8AD04
2D9DFA5D6684E069AABBB24A967B5626BABA5DA943061B3E0D565E2FA6872A4F
1C90B76A7B16332052DB5B3216D38AEB4067244F069136E7679807181C9DB5C8
2424E1627E053537B52AD84327CAAD11A769127CD2D04893D0746AFB81B58E11
77A77CD77EEDDCF5D5FCB463D7EC135192132942ADE142A2EEF5D51BE02AC508
55B9158840F97FA94CC0346602CFCC8FAC35C5C0CAFF832BE45A8AC32ABFA18C
556EC001D4AB56E8E3E635BF87A0F7D197710ED2CDEA5EE7C7CE0FD375B81826
D842D19924EAC4C77225F2D596C97751B4B559FD3419D8874F47D11031FC3DDB
0DA0B64C6340D80EDBB67D5326854C33CD6CFF8EE9B28C4617631E8112BC5E0C
F815F78A9B73EFAEC6752CCBDDB2408865867F315E63B202AA4B1F28241DC2AD
5D38076762FB059656980DC90A61DD335E29F1931A004EB68BF10930ADD30B07
3629D0C0C9DAEE74BC7F5A2F5C6763A9AA944FE76AB2A7BBBE9CB096B2E30409
47DD3501AD1A0814AC1BFBC1E0C835D67D038A88048C8E12EFE4632623203BA0
38BBB648A9DA915E6E56C07C16EFC04DCCEDC7DCB46944ACDABF2319A4916F93
C8685A70BDBEFCA5FC8641C57C525EC852372DA1C867619D0B3DF24F8464D39F
D1AAFF2911454F213D83CB2543A191750BF6C7A52D3F6D51F6E9B7E84A5DBBAB
93DD3CF197130AC63F8C465362CA8E91B3C759943797C24CC83176CE2FF85812
C66FBE905766ADB2EF24EA82BEAAEF2F807D76561718F3A40C5B0135C6F81134
18D2E77CC959889E4786023FFB35644A6FBAA0686830772B512171CCB0ED79A5
143E3D198E65EE52C2E0FA47BCB6800FF1D1D15DC1EBF32D1F1B331FFBD0E13E
BB4732FCA172737BE2E1F6D4FBA90032B26B90003C7235AE43D99C031639DB30
C0268A2490A3DB5583DCEDC4C35519C4AA4C096DCA11B8BD493853D06CB7F7EE
3FBB56EA0B1727F613AB4DC69658C53EFDA878AE4A288739337D485FA928684B
E421740B4C8117A83304EB32D11EBB7046D0B3E80003EB25586863583F20D3EE
B2EFB8CF46D1EF429C629A2C3EAAD0760749F77441807A59926C48612D9CA8FA
D2D4067940B0BEBBD6DEA79CFD1C5A51C271B6835EA2CDC793F211223A5DD04C
1D40C2B26AF856BBD86A9666C4ED2546DF583C37698AED5B7C7F7A3B63CA94AC
E162AF33323B07A6C3D16802FFC00814F797D3B86DA474B23CB8650C778753B2
D7ECB7B5B54FF7A64755989FE2973FF1E6810D917C9E72CF1FCFBB6E8913BAAB
440B58518039C91E4D926903E189E07195FC8F7E9B22FDB70F73222EABB57270
0263D927FF809C8973DBD23A617BD114365FCAD64D39C93CFE178F78845FE2AA
C348AC832F088782145C19F7E453E5350B1F2CA85B1F717D2BE49BDA79E82131
D2B852449FC54AC17C1BB269CA11164E29C2B057181802C0C08574830410CE64
DFBC6D78E89DD66F9EEEF2D863263D710DDFF5E80BA39E7C3C39C67FB8D2B68D
68FA8A0BBB566836C9210759525F467998958415F54C63A122902B4B82489740
7F33978DCF2DDCB854283D98BC80E00F43EC22F9E1802A1E8F5DE35784F5E156
6A9FCA343212D639D854BF820964D481D27312DEB6A7DA0CA427357FF78D9066
99CB9C2B43FD2042ABADEB88DE99379EDE20E41F813357F2002FD7D3BC2795CA
29E3175D686CBDEF35A8DF7CB22CD7D371D2156E4C040D7FFB26CF5EE5D8589E
FB04BBA9ECAE4695F67A192CB34D3074F81E796C29E1E4453B45FEFF5E341613
DF5E221699604ACDFBB94251576B80EB8F69200D272C713BA3B615E6865DC219
8B09579780B48BE9C0136E0E1F0FB0A3B19CE14BEC2745AC1D2C3E28B6F4DA74
9B7C84159CFDB0C6255FFB61D54A89C59C327787E3A684035719437C0716E5A0
855C04734350D662377348C6D6D4ABD787894089864C14589BFA88BF9FF1D2AE
B379F11AE18B8B9BF6F919F56EBCA417C238446E752CAEB7FE0DFF2E25555029
2C2E685CE017FCC070EFE541F10FAA38C61D2D93E4E93FC183B9ACAFE99896FE
F22C3E5DD2B07B8C6904A557544D6B6C0D2BABBC74B443A4B1DC6C18A1D4D5F6
3023D702A3D785940866557D79C6CB91230D127C00EEE03407D4E5D7E923CEED
9273BD0DD276FB517AE96AD5BADB244C2DC2C5906E625178FCEE05A52384FE6C
57FA503FA9953486A065A3FDB63A3F59DA2338A2292C2E04CF55A3F56E383C9B
877360136D9F197E3452760A1A676EE7CE58BB905440E0ADF465AA599C0B0869
BBBBD14E5E6D884E42FC60659966EF581028B71BCCDE94A0505ACD020E8FC849
D52B47E721C653944BFC6C68DE11C6BCA76DBEAD9B2E25584DAE0E54A31D40A7
25AFC61BEE65EDA5060B32D2634521644F91F494DAFC7AF07D570D714EBEA060
9C5FED61CAF0800D8DCDA32461FE025E12EB8E01BFB2A01C4B5F5CBCA3A139F6
0B96D988AC52C4DDC75AF7826C57FEFF7EF2731DCB114ECA6474422353ED2E01
FF4C3FF4C098F6FCA427D2A453664370DD6AB37F1FC3DE57410DA12EF0D028C7
26F7FFB1AFE11A8BC018DB5871CA8413CD41E6F267E0411592A8DDC93530588B
22A56344EA6F503C9C4613978B6FE1786B47EF99BA67BE0DC3F80D379206ADC1
ED83E069F501D7396F9D6C928511C5C699EE584576CC2970F0B33E48BEFC99BD
46745552C5322E02984741B2076893B8520D4D72630B0966E5F7BBE48DE76A00
CDDC2EEBC74FF4D61E7486340FC06DBE36A8E65BA6734FA65CD385524F66B9E0
0F5B5C2B144398311DE0D0BABC7A5484F54C4A8D944054A7C388FC4E46AC5AA4
3FAD6B509514006320E788F10A172C60310C10FAB27E74C7A121C8D6E6B127A3
809F722627E10C2916C13F2976A11EDA07EE1BF676FBC44DD8928ADFE44116CA
237AAC57A984F2A5598BBE71CD532171189DEA0E61B3AC36110424F356502ECC
AE8CAD3262950838FBEAAD9E60584619FE380C9B6D9F8B73D13380CA643071AB
671BE6ABC5E76BDF885DB63DEB07C7CD5BF59DB81033F4F4AEA1BF99F8070976
D75485DC4C1CD498C1D3B450D864B6B348501D3073C42AC1EEB4EF82E2F18331
E151718268DE4D626FADFD70DE44B561BBC2188127C5663D02A3008D9542F00B
3342404EE1EDA563418A39D9B043D922DD870F06852257AA441D84DB6B0876B3
7EEC59A516F15F22949AC658037300F1E113F3B9C1C062A8DEEE49513DE1CCF2
C5CB43CA38B6FA33E39B7E81228C82C0AFEB9A325D7CE7BF9AD7FC50473C96BE
D4AE65E37513CF5C9EE13CB67BB0E76B366370BA0955B07A94E27270B41AB705
86880A7EEB24A6834CC1EE743EE442E4A7B0DAE50CAD34EE9951CFBB3E23E96C
714C82DB94E428FB707ED9526ED0544ED3734A8DBBD1F4631C8F3869572D1E72
AFA1CD5310DC4A0183078135A2BA6384A592DBF57525F6CD4DE4475B3AAE1126
0EFAB11A89A97FF22A68604120CF4A156A7307775D5C186C6E685DB6B5FDC003
0D412A0EC68B4E87EFD757AE38D5CD79E6268071F68665C9D2774B244FBBC13A
8FA7DD48DA129DC0FDC4BE50D5252FDAC80A3969812728DBD63429691DB651ED
0AA571C23724D7AF9D34D5170C9F328EA619D8FAA0E6F4F8C4213468B9256427
0C9BD9D0840D3023387C3669E641EEC2BB8C41257BA920A34DD945CC2C09037F
6264E67C3A8FC5BA588B2E07F07D84F8FDF22C097E03E9261C3CE14538C0AFD7
7F45083AD81F11A16E2600970BD3E6AFC9306DCD66D7E76068A663DA3B9F8CB5
B1E358FF17A5791D83AF7BD4AB9237794FE1639A4F77D7F07AD45E8CD4468369
5439279B7BACCB06C0C396C52293C719266EE7C6ACE5EF6CACD37EFD1F5B3D44
A698178E32E5D327F050941D1F6450D2E633583992E4C5EC73FC181CA0042E22
BFC1725BA2C696CD7D58DC20C194AB6630276B14D1BC62CAD5A3509A9101C4C6
C95047E3D58665E72531475B26359655146527C3E278582C81480A39D4A7480B
37E7A3EF10300CB27ABEF0A91D0ADF0D272045F200F2BEB8813D6884A74CC1B4
1267169FE642A2637153899CAA8CCD66D9BAD98CCC9F5ABFDB71AC67AB7696B4
79360490EC09F63F74BD5C497F391141F2094F8EAB4CC90B12E10F8B9D9CBA4F
E8A8338FEBD91498B8053D1020CB3B25BCBB897FBE5EA5946E51AE9F060AD5C9
4017DB29C7054912BE1E1663DDCB533BE312ED494BD56181545022345A03C3B0
936860B7CEC48E762AF2DA747C4416515F4C8F5381B0F064CF8926452F9B772C
D7C7A92A3219D0573BAC967DB05685E1E2031A7EA3B7A971E098FD0C42FFF597
D94539A16332CF2000DBC3041470648FD718BEED1C46FBBC7297E9DD3894B4C2
A4AF26AF227845FD2F0A51B640829E1AFC80F26CE93738B5D8A4CB7EBA24FBF0
19EA3DF1834EC1F9FF760753CE7B940FEB53B89C967969760DBEFBF5A18E58B8
CCC2B4AA76BD8CDAF0B8639BD5D2C7552AF5415B7F322B203BED2F3E70B7458F
C09E29617BD77E4CF404E4502AC79B36BAF84D3228EAB5CC34DCAD25C75B0F45
50D967086D09D2803DF9F1670940E669DE4707EDDEB2ACE37B24F82BB4BB5F74
EDDF8E5ED10D0125BAFED6998FACC6331348A9E61C5329F2EFFA0034DFCD4D95
B4D338B7A0E4D265FF92DF08074D6FBCC56FA88207ED2B999CB46D339DDD2231
9BC0732326C35A3B1F9CBA608A37A36C5D25FE6FACB818259699D67116715863
8FD759443BD8D0CB605791EEC80351AA49D88A9F09610BA06FF7F5BD89AF6039
FC8E2FCA1C4CF1B6059208EF91839D0E70082C3213EA3C9CF9760A08E62DEF2F
576262F8A08CB94F4BC9ED065ABCAF0F93C80EC3704ADB389C25CAC32F16DDB0
75B2DA7000E14A13E7438ADE5B41FA031D53F6C0B1A6D21AF74E662B4473780F
140331E965C8FCB92FED625E1CE2590EA75E4E0548638052D2AED3719D8887D8
315E917AFD203DD789DF4D45CB9AC672B7E992F9C8B30F95BDE041801318D493
DC71793E84BBF3E2BEE2EB813B03690A905D20EBE7346738CC89DC5A220E4699
C15D3972B2F606F858E4E877FF83DADDD463072AF184A4C3FF125A0742CE19BE
E7F28684F2C4E0FC0D4D59A75FE8DFEEC83F9602F1EECB35E199B2DB4E75BB08
D7E500A2A2B20C493C2CD6DFD36898DD9C5319A8F1C8695FA473D20350A49944
2B6682C3FF51D628BE1DBBD89A7AAB946AF7132FA55ACF938729214C68FFEFCA
C997EC286F30AD0245F22FF5714AE0B564BEBE2FF35ECC4DCCD14C35346631E0
0A128C1E883FF01BB562BF7A8CD1C6CD40BBB35A5682294E14E31DF3FDFCF57B
30BA7428DEB82FB597526AB79E71C18872DC31D8D3CCCD950E1B8F12F6D4FC81
9CB7194F49AC5FD9823F7343B38F28E45CEAC5938FE3B0155C31A232A90068A3
D51B91E1287CFFCA9F6A6DB7E09007E5218DA69D9B4BA8A2016A9F7F609AC050
E7001000B2C6848457D632AF0F1DCFFB6F0E8EE09234A543243B3FF8E29549C8
49F5592390320495AD14A654509D31772F680E47CE4FB77C94C9D4473BF05DBD
69E76D9BC00E54DABD29C72B4EE5657C3FCC5A3942F934499D2A0659D3E7E02E
D5306EBC3E12A3B9CF1C50B55E7AFB78909A57FE827AA8C28CEB013A1DF59E18
702AAFE923C4A9D7AE194B2ADDE87C26088D33E097B393724A08324ED1CE7C8D
2F6C297C5927FD0E40C8A0875C215AFA1F1B9709BA50CB9F6E21CCB01746D41D
1EC44BE55DF5BBD8D6B0FE9D1440E9933D1A469A390397432293D3349640BD48
EFAABF3B7844AA6061EF7555A6B9B15BFD37418CA33E3285B1D32C3D557ED2F6
F284CBCF8856B2A22E72C0C524A02AFD36DE08A63AB714709C14EB85869A0955
2C1999371AB5F83F74EAFFABC289CDE655EC5D586D483DA69DF914C6639823BA
F2248AD544A48273795FF8EC6F39CFFD21042BCAF7C97A55174CE26087C8033B
8A556059A2B329080BBA9F4541981D89215E2E5D358B8EC36CB4723FA40535F4
06510FD4DA88392600CE29AAA08DB4913119BAEE2C2B5BFA1EFCE73F3D1BF8DC
02E630842303266B01C291776AA236DB42C12964699C7FDF6E57824CFE178EDE
ADD55FF68362979F4CD9473ECBFF0F4CABB31D5E51339D70328ACF0B7BAB4EBC
DBCFF3D780EF7BD18D688A1DB92A2B11E02BBAEE2FA914C82409D81263674352
579D638370B1617A1E758CB8F49EABCD97D6AE51B8EE6A26F358B803419C1016
875C2FC3D9AAEAACB72F3FE026E0D86E3C761B8BE4A0ECF381E190E609B098D1
AB782C8AA31DB9E1DB1E435130296CED68820CE749F731509FB6B908695967DE
2A007A5F489A2054F645F39F52077A8589EF54E9940E8D4CAD60210D09173E4C
F28697CF929C6B47AB7488271F1E2C11901B560EE06FA3BB8C83BE3EAF06C336
23E0152DF77B42DFDADA5CBA30A9F5A363E49E7B515075390DA1872F1A8BABDE
C2062ADD1F22395D540C35A8FF347F3FBF1ADF58E179C9CD6222EFAB731B2A0D
38702EBC91E16115B046F8F40F33C53666E35F6C07B2E7A7C849F280C7BF46E4
48EC325BFB498F928FB2655DECCF71B8A44CCB06B78D27D6B4B3636398EFBF13
F4D9F034FC4E903FC910C2DD83A9EBCDDF1610B2DDA424C2D7500E5926AA784E
5659F3651C49C701002EC28370EAED1AA2DC43E40AA823E706B59A366BC76F01
E36BADF47C7F48E19DDB47766A04B80DC007FBFC06AE68F4E2AD4ED6B19609B7
96D96A3F7357135CD286404B4084FBA881FEEBC034E75846B51F49A57471E350
483EB337D388F2DDF05E7E3C1682E8EE06676B398D665716037A35F5743B6A4A
C9E0E98AD2D43877E5B968FFB427F140EC7F72CA2F2F685BBA48FDCCE2F2D1BB
913D0F9B9164DECF2FD8D388B5058495C8621AAEE31B5ED58FEA3576D0951F71
C8A67B3BA58728304A89D56F596F0E1E2A35E4D0C3917069E8F87271EBD508D0
2DF0D47145BF586978AB2200E6264467E7D057B246BB24D78B6F948D968A7A0C
A01C662E769953ED696A95BAC1163547C4703F776A3D4F9245C1F210F3D2DEFC
812E1B1DD1564C4C19ED32F3EF0FC2C19A34A81ECF5A229D2B73A29483998241
9F8D96FF107552A52DD7D59F60E4B638D76460A0CCAB25D30C641E857BE84FB4
2CA85E4EF53187D9C2843A426FD73172AF7D797064D6F9D163246EDE55019B61
8FF26C3F09B2F97991732F5393470DD641BBE70A0533BAD733D39FC6C48B9B71
C03C51368D24CD4815E527B93E3E3098ECC4C5371BE07853E82C29358BD52DC6
1D887A57AEFB4FE0505B23F689155874360EED1C72A524A9E19BED13D137DFE3
F01BE1987D9260E89443A3941E74A7B6EAEF6F0AAE5F86D3C5A7BBBEC8AC4512
39E34711ADD347782194D0FA7B89B312FCA0E10862BBAD279F932368BBBCA91B
D5350FC6112A050061080970262BA056550070633FDCE592272DC1A0DD17193B
8E72415E9CFD2CC932D55442657A9E8E09D7C8FDC6332F889501D8033DCC935A
F66E78A9F2B2EA5411DB8F12486B922AB0582B21353A40E869B2681E4A517608
42271B7B7246E44E2F5C77937234D1D6AFCA63944D3FE5126D9FF0590F94E0CE
CE14F76A594D91596832480F4727B10F3E907C3B6001CABE4FBE0987DD8AEEB5
079B1547E8A439D2799F88C437A4CFA9A9BB9386EA9FD3B9E7A29EC8E6A3F864
055F5AC30AF163EF2E273FCC3D7AA805BB3BD8F7FABDDB15C7568C36C9EC5AFA
0F398767D8D4E2DFC75C0F145FBEBB48466ADB7CE834363B8156945569610079
DF9E96CDE8D005FC25E59B029C05A1E7A8801F32D217226E080143A8E35F88E3
464A38D03E6EC2C9ED0CC9861ADD632F10FA1AC51B5B4094EBE7C909531605C2
33BD19F3DDC54F3DA89A38A4C935C8D52D2A5A281B2437BBC4295CCDAA8DE641
37227F139DC5BF97E248268FBE788A4214863168A679D4FAD134E4D078E4BD4E
6191E9765C4CB18671307933945F052757D04E1BAFB2376243FF6AD2C9659FCA
F1133130A02285759C424147AF165D8B7C3B60C6DC5DEC87ECE247AC6D039E0C
8FD5CE1357A17DCD60A297D09526AA662187DC307E4CD6D281AD503BF9EA7779
FA024E4521C755D34B49654CA7AC01EC0550084F44FCC2C457B2B4B6AD53D22C
67800381C5E71D4CA126D9A433DCB084771199CB1637834749038663FE94C578
0669BAE600F0EF9A78F1F8F1AC0A5CA501EAC3EFF381B04F0DBB2058B6E41092
F1256C0892105D3C833F5A6ECBB77F289510D008B8DF64C3DA9E1191B06F159B
BBE9A45C3571AD908A4D4D40C21D764341686AEE7E9A2668FDD77BFB588E6F20
CA91E5F165D7AE38BDC7E34ED482D8EB990CA181E2E69865302F1D5C9F3CE29C
4F00F2FB20F2CD6FF8F88D9725FCEA44A75FEA44CE4C991729C5792E1051F26C
912A3B835ABC68EE4F0A3B989BD597299EA7067FC9E9A1C9DECF1B73D58A1391
6397BAF8F9F11793048A72D1D3863EC3D58593DBA059C7EF3447199EBB44BBC4
C055CB9261E4DEF3D5B062FFB94DA8650389BE62E6ECDE3EE487109EFF36093C
4841AA2F99D75553304D5E040D7C07ED905932F0791864A6B987E619FA795489
AC41A36489A4597FCF3631227624B1C7AB7B2A0D353F370B3587D444E9F80D11
80B1FCA1A75090DCBAE8DB96C15B1849DB7358CD969A7D3CB2390AAEAD3C15E0
72DE0A84250D116A3D451B69246E1B04069357CC21D8439789FD52F912439841
53081D0D7C7CC0DC33B1D47D281D89EA9A1229BCEF4B3F1791193D3B68BDB00E
AE3467BFBC4DDD4CF16B3166A8D3E149B77DE9A99B9A234C6DCE4C6EDBB18D43
90A62C1C67BD2932A5244CFE4D1404FEBE317C761097F9CAFFB79C7009564214
078E4AF1F548A05FF8206077BEF251083ECFC17E1E01CAD967C5C2C08E8F4CBD
AF5501119447BFD32D90317C34107F411F9774670A42BFF3E31C24376E079EF3
DFD42216DF919897ADE3CEAE42C285CC72DC550BFEDAEEAD411DD89A32CB8A92
3D75D7405F13475FFA748F1F456B65C6329DA22E64B462BB1CD15B8FB5827528
7714443015F3694580C4757233C46F57A0821BFDF2DA7DF431DEFC08A052F306
F0BD83861A14F0A5EAAB461B7B4C814D7591163219389B0F490FB0E4679B46C2
5E44BE0A77A52F49B360BDC5FD87459BEF29D9775D9E7226D2B353CCFF8A5C31
8A53C451898AEDFC440305AADD535121F87ADEADFACAAE1112DA7A40953E7334
29E6BEB9D234DCEC1FFD90A208E733F4BB4514B29FEA6705003370A63CB651AD
10B33F5EB9B78E996FA66849777243B0DAF02CF8D5CAC6717F5D94FBA532977D
E4721520D9476D3BBCBD2A97C3BB5F4FEECA2A8F28EF2935387E3210CF1A247A
98C8269076B6CE6C90F7420DB247963A5B29CFE5886AE6B66858A55AC6ED55D2
01EEE54987C25D7872FB3655E166E2629058B877681580FE210B7B09C593BAC0
9CA9962796A3F58D99A90B43CB8C1547939EF2F31348D48E48DD5A03B18FA624
CFCB41C4AC208246C197114FDF5F688C36CFD5FCA319393CE6696FE4CFDEBC41
6EB605799603A8839F8AB2DDA993118CA1083C9BAEB91F285A16EF00D27F5DF0
0AB25CF16400C2AAF884A54BC02E090BABF96D7CC053E604C23D313121A0F6A6
B08B2905B3C3A9161F68FC4EC6AF756D4569A59C1CAE7226069C6358810AEFE2
264A57697866DA291FA2F127F8BF97663C0666559AA709536C68019226B2BB6B
AA955D9EFFBBEF6A37D377D8864D6728D3C22DB8C50BEB329342707028469623
DB05CE2E917A7BDA0F6726E3538441C62C6E95529E87953AFBE87E31E80BEB60
84799DB66F472727B2BD68E253363F00FEBC334095CC94E2FBE94685566D9C91
2ACDB47AECE3F9786E47398891C7D355D386DC5FF5BEF273980D9307AF1C23C2
3EFAC7D5291E2932898719493BEC545829BC2C9C99BE09D7BBD4DE20308D575A
409EFBAAE5D96D65773EBE8D69A606A21E62F1EB94DB2F0F49AFBC11E92052F1
0FD3856029CB29A211749C2131051DBED1891178F7A30899CF5608A491692282
1DFA9F62B62176EE9E35FA5A1F4A3ABDF10A8342B3CD1556002602474BCC222E
3AE8323C0591B53CBD3D2B947D167D1585D4C57E549D3DD9778797E06CEF1D28
9BF70887620ECCFFA7C759B4256D649A2B2D71219FE30F60746080E4C2E80986
00E3525D68C0F77F30F59EB17972002EBCC0DAF5E74341B83BE025EE14F3FD8F
77D0A9CFABD6F689068EA5038FAC8EDCD4D742FFCDE914D6D4BF180E55F8E350
63EDEAAC207D7787C41D9B88BC4D54142EFFE7E5809017C7F226D02009697E88
DB64E25ECE20563520ED678F0BFD966D7C9FA1693869B2DCFFF68C52EF8D76F5
01F807BFC8FCD278073B23C383FAAD5A7C673A2F5A749248FC3D6FB9A7930883
101AF16CCFB45BBF42DF8EB5F8770333A29DE431A9B3E3471C609BFFD6A27A96
351DC61E31AF2807F74D696E55B08B672A1118DAA72C369DAA397886DD6DFF72
940BA3ECFA1C2AD0E4174917B2684EF827C79DB694F387EF98CF8FFC6A5470E7
A44984376B227C0718EC9E40E4F29C97A2463433C6A6BAB498800C3493F4FCC0
82B11FF171248C6DF0FFC6C0F0BBC5F9CBA97D6A6CE394898642FFE0B0330D74
7E4E19758FF05160E452B6969602161C8FA3B0A8335A4D3AE1C38CDB5F14D088
D31D9FE8EEE9CC9FB78DBF164F52F31EC79ECF181228571C36557B76DC6FAB62
30ED0075FE95759F01F2FEB1364CA33BD7970142AE10B7C80C03876B0FD46A5D
ECD478A4833AA4ADF9716441C3D9BA58487A9DF5CF6847A668EE45C4AE6D6472
985F6F72C98E9401739B345760FCB956661666684C07055FE2A3B6D81785B791
8E71E35320EBE7346738CC89DC5A220E4699C15D3972B2F5543BC09BE3CBACE7
032FA494C240ACBD6FAAB7F7E1868F92128220F5E734EA2DE6F8CD4225EB94D4
436925D81BC7C063294A1C509A5A29792615890E71699CD9BFABDFD727236DDB
0942D1DC868DAEF62BF2829B0317676B32B21BA6E6802D61128023A737755CAE
B911AFB34C6F99CA57A1218FF199522550BA378E10D690C27B91881A37756DD8
48F4823678A6FA47A599EFBFEA4BE58A7CB4A08F719102D33FC44E4F60F1E032
C338B466C688FB09D2A8E94D0ADB138953A982A7A78D7EBD69283CAF4493204C
69E3BA836D7EF5018BA0B9143D164DC60C0D800126FC145DF78DF99D9FDD85AE
FAAE39B816A83D06A35317623DCC68096360101378CC2850D829F3323E2CED44
6F5B5130189570147B9B69CC74247838C74B8BE3F89199BF4F71E1F6FBE8788F
F95705DAB0FFAA7682B78039D2C3956923C9DD71A04C7A9CF032A8B773A08633
28670D822220DF701049E106F04530708DD47CB924358EAC006A594AFCB83977
8FD0925E2DAABE731752525FADEE1CDC8A35E72C9407AEB30F46784FAA3E4349
748192F0F137E33EB9D4A113F5BF8F391A1179E2910F453DA68CAAC84AB58342
1E15E8CC67579F8A5EB1049462F22A61CDB711BCAF9B6C5D49077AD2D6E2D918
39DECD6740752319203A89648C906439AAC0997CD4C3CC78C6A226B0717DC7A9
7528F63B8A1484474E28862870D89C85F9ED42D3F61FE849DACCBABF309BC0B9
4CF3ABAE00B92DB57060A8AA52871CECFE7BED753CE1FEF67E65A9BACE04A006
CF6D9F5D966E7176EE290DA6D8E36B2AFBC6CCFCE5E46C4CB517371239CD762F
E35DA2CDD1FB80F06F0F71D2ED54BC713FD9EC0EBFC8508729D8599D2D37EFCE
CFA396667C65F40DBB79C3B82BA10466541A7416F5FC12527243B1EB202AF53B
A8CDAB0BC905B89454D9CFA086903E0578229BFCD1B57978EE6DB5464C263554
50C1B289DD973E501A9F3F4AAD5655785E248C094FF5B01F141F46048B15D9DF
D15045C345839AF0A2A207C56F3D57F8DF7DF2A03AA596A5D16B68355F68A292
63C5559C5E7E303B8CF6B951ABDB4CE6BE4B5F97D025073CD30F0346E71FACB0
F23D344B5B3F2A805F8F3BBBA4BD19649A69BDA184EED882D4C188A204302425
86F243EA5426022112C7346195FB10B0A04FA4A80796D13CE2A364249CF6F26E
C9DFAD14B4D86C25839E8FC44C7CE8190240F56835A09C757EFE9903D83FBDED
E1293E7F2D291EBE20C9AF3FAD3DF73DE47B83FC331B68FABD15A9BF934684DB
F165F8D4C6DCCEA0F2E38E993B049C2EA3A82AC428EEA742C81DE02D3FC5BC30
B320917AE593680229703B9415C215BDE294CC18F037DCE13A19A62CFF57309C
7872612078DF99DCD01B97D982F5AAB27AA9B071B8493902802AF4206253C2D9
A4880DDA983D687B46C3D311F7EC1D9DC413BB243278E73C6EE9753C3205CE19
34136C7A8EBEBC7310245E32149937E5B2316A46A6B2C5C5CB4E4BC1D7C2248A
0F8096A4F59AAB9FD1DDE3AF6C601C2BB80B5079EF4055E9E28BC6A05471D5CB
6E4B8F5DCFCA5042672B00A179A12515F69D54DF5BF994B4F87E4D3EC16BCB3C
2C573D10A0062B9893DE9B80BE8015E5ACC76D12FCB66B4CE90406085978F8EA
EEA9386CFFC88EE84941135314135CD8FFA407D97F4E938B925F528EF807519A
5526F787B53096F832A3E9FEA9B225DD75B5B41D4821DD03215A441D04F7C6F4
2E0BDB28F6F470D4FEEB470DCB239EF9D2771EDD2A4BDD22F82EC8A49DC24795
854136B0ED501CEA8E19CBBF7C91D74BFFA0074641BD58F0EC389FACADA308A1
723A5C2492BA00673361CF0E201F176560F60EC75E745EE1577A6E0BB1E3C592
6B4E53BF077361DE9BF2D7E5C0A53D49E72D7728CD5A26DF835CF0A83D7BC91A
D4E67CCE7B5DCCEE3A4AE3FF151DF989D48DC3050220E57D52B6C8CB0162052B
6FE2887801DE9DB60CAD2D556FD5979EAA85D85627465168E3FEB74D9CD33685
9FFDF73BD4A9D288D2883F7134EFC6B914737AA5CEA6BD1810DB78052DCD299E
EB942953F98952BCC0AAB8BBFE5C889EDAF00C9C984618D80D19E719E08383B6
A269D928DD94CE748AC1F0E99EB8694E5D4B3AEDD545EE1C04CB2CB5E239817A
429CFC1924197E7826F5CAF922D9D8455B02E2619FED5478CFC64D964F7992A0
A0FCD1A613E44E4CD8C6953A5C3B4BF27BA8A317BA18287D2410600388FE9462
E903CEA643F8ECBE4C52A10C03486C159791773DBDD80706727CF0F5C4533E5C
7E3CC5C40B81DB3655D821AC7EE3A0CCB8649F93A9C36FE22925B49FC97FCBCD
C1DD45079E6C5B3777904FEF84E1E706FC3C5D2CCCB8814C3C61FFC3830922DD
305293F887F4B81AE0B9BD7AE7690B57FDAAA3FDB8A608E6A3F6225776EBBF89
ED4D69E66152B23784A83F26BADE7542ECB40099A5BBB4F12FD99FDAB013F8DD
625749018A1EC19C7B47A86BDA04DD10E83A3FF8E7EE94DF63E559A167C0FEDA
53D5CD8A41127F1CF3E7FF8B91F710011983599A8F59FFCA5E7FC82E26A49446
C749095EFA75F3205EB2BA1A79554E8CF3E58CF7800C14F356FEF1BE1FA78833
5EF0647D47D0E941586EE6B34B8CBD7B6D29896E8D1807150C2282F11907184E
99A34F292DB225FC258FC6460C3099F30A2C187D0821D97809692DF4DFBFA3ED
A081AA379231DB5D3C332C8FC1D154A42E429FA89752322D7FDFB40191270EE3
BFD65562BD50BAEA04E96DC81F6F9F742A10CFFDABEB13F90CB76C4688D4C2AB
C3DA2BA5A87574756FA0D72F28601CB24AF276F1EE9F81371ACB7D594473A3CD
DDB60EC816D1683738737C839FA6FF3DEFC41585D74B8D57712E5A8859CAD55C
DAB0611B3248836DD9E54650EE2D2F3EB9248A04BE224E8FC35C43DE0D5A4F05
14FF307F5ED154EE1C467FEC3CC439F65980BBF08129FC9E798D02102F63C321
3B1067F6E7523E6288AD183ED4EF54070D74978929810DAFD50612B985AA1BB8
A7F709BDBA6705D80FBF0C012EE0218C4D4CD7BEBA74BED51AFB08EB16469390
FD71C6124A2929C398910657C35047F319DF546D864BA72E05234492D7F4DBE3
C41DB9F9DC99116C1224EE53A5F1F303D28415BE077393D77C96B6024A57B5AE
20CA4E8A7DD507BF76789C3599D4D51FF975CD8ADBE47F6AB061649C1D20778C
9B9E07A0A9B9AFDFA66E765FE6B7FB0E0221D8101ED47F36A3678F407275464D
FBE5AA7D8C925480815C62AA5706D772C8E0F2A3303895C92605A80EE3AB6364
E2FA747EE9A89161F93F178D7A24AB2C76D3EEFDA3598ADA081CCD1400BCDAF2
42BBB2714153F2E9E6F2E653010BF94890633FEC0D13586AD5E371AF133896C3
052ED84AB231B88E71B9D3FE88048DAB5228D9CC995B579F7196192FAACB98CA
F81C10543D3D20461DD25FCBDE581F745447E7A94AD40BD6C92BC9D2BB7D9436
C0C6E0FB68F94CE973DE80BF399AE37F3F10203F5066E2D80EF7C7866BAC6253
53B69F7F9713F521697F75F4A0116546A9D962C72E9AE79C9AE9523AA6DBBB52
6995C1C0A3FB8B3BB423DF6EB971B6CF075F42771C2E91CBA452A8DF883C90AD
CE08F5A19DDC0DFE65FB557F35621561DD6A097B966E0682D1D19CDD86B6414F
49358C9C259B9FEF9525DBECFE5A994F19F47CA6121B23918EF93CE8C1B9462E
FB57323733CADF64DE9A9D1EEE3A1F6D63F9BB231EE1E3133136F8B834CD858C
068ED009D8BE872C4E07B72F3DA93330C41C4B7690DCD91E51A3282038BBA755
B757CAC3A1B0EEDA4E5AB4D64DCB985EE03D38536B0528CA48F9DC82107EF57F
7E970BF81334F2F843EB703B00BE97F434F30C395AC9A82305B707B99B0F3343
006CFBE10D39328466F24D13229961818A54D0EB5353BE47D53DB0D8DB88F2B2
E809C63355BA19E2A651B9017BC1B8ACC9DC6678342E8B6F228943095A025041
1E81644F995A049EEEB8904167677B9996E2CD033AA4E4A7DFAE20ABDE997CE1
9D32C0122F7C511BEDC3CF77526FF59FFD601A6123A48DB6D4028370E116DD64
0AAB59DA1B39C21AEB714781BBCB35A9A6476263DDCBEB28AC7A2843FDED3601
91CEC8393642C6450EBF5E7AC5FA295BA0A76FF7FF804898146EA2BDC929A89D
BF371F08DDF47A25F389DE2C91C9E457769C5F16F0317449079864D54B26A575
D9DA9B920B20A22B7F9E0109F63E133F299913389EB6F670BA5FDBF96EFB0FFB
2587943DFDB4C6864CF1FC7152CC208607519E0CE5974D835C5A785E9623F03F
593876C673248679BE0C246EBECFB2DBCBFCE76F32CC37F2EECA9462E55F65F4
FED74A1A05284D237D7E89577313DAB8C83EDD091B82A8C9350ED74C079049F5
EECA3B05C9A78D40236385CC9AA8C7C3F970AF222F8448BDE02BA5BA858A43E9
4F863AE060C153259D80B998AB7D041F8AE0C8F586626C87F295AD636946160D
19F3B5C322A009C9C5D8940E0DB40CD95425672876A21FBEB4AB08F9D5B06DC6
1BDD28F0717C70A3D894ED7E22329EBF716CA77785C4435472D795306F40BB99
1C5BC2A5CEF6AF7A670CE281DF29BE900834AD412F07F73DA687CBE7D2ABD9D4
6EA52709D6BFE5FA7372CB2D22CA256554A75C639D331A279A8641513DCA0A4E
1CA14104186C30304B5A92D832FA71555721D258DB8C4D6290E408CAC22F090D
8B4E0723B6D3EAA04E07A9D9D052FA09FA53D0923B060EA6EEA55E23310AB1B5
BD6A218E74DF80AC94E9FB84938379724F4B1EB0F6A17D13C44D3B542E029740
E054811B3EA3F53B2A4EDBFB775CA6AEC11E6D790A1516D80E4943771F73B8DC
F4A3C24A3911B7A4A4242B40B17690A663B1EFA3AE8760113EFBB0F487A25D70
E117CB511AE74B10EE1219E930796ACF9E886C915D066AE07244E5385F21872A
563F68C1C2F019D136D34243E864351913677FB05C3CBA2B4CD7D2094AF4832B
592CBC9809C66ABE48ACD2D86AC65DB598854305297AE99941A5B2E0273EB0E0
F9ADCBD29EE2E7B92013530DF6DEB57E06577866900F197BAE21A24A0AC52337
A2802222F037D84864DBDAF6830A3A887FA803E1BEFCABC24515355F9825C8E1
570E1B54932538C95717BE25721384550246A1597FA835F2BCDB5BA0BEAA0E4B
4847986A6834DC9E9FFE4D549048577A2430F087312F48A40DDBDD8478960535
7AAB15C5375FF956ADCFDF40C6ABA09E2BB7FAF1B33E37661069EAD109E5E69F
3FADF224535B5512EB9348DD77C43D4626D3763587FBD8B8746717E67778A55C
90FA654F186C2CE09CA12D01BD31AE4998B9D97C00C30EE52B509197F2DC4046
8AB54EA83ED4BB4021DEB197B0707A1ACDD6DBCC40E3124AC1F07077C8B8DE4E
6950341F63110049CBBBBE410807FF78D486E96F139787275CDE76CB20FD7910
FF357E634470BA8E9D6346843B5B83DDAA4940126F060E0E1C944D6725976C7A
F48613D09C74DA01C4CB130417397F7EFC35C3BCEAE810E98C170154C73D65D3
73873AA1BE8F7AB1DBB2DD44DE3EBAA3296B2603980CBBDE1067314D3F85996D
4ECB780BB5793B266B83FE23E9532170036C1821501234C8828626D9CBBFF0C9
945464563A9E89B4319A4A0246BFDA18C1009AABA8987F4E517887BCB8529470
AB07DE3BD233A48FA02E0C936E9CCBD4C62350B8721FE0957F47D240CFB8746B
EBE91316476A5B1AED2D7338AC1643E51AC8A95F2A923ED1286DBD588F9D96F1
91C4A04F008A0C7D36151E130C93B9011D2423E7BF2DAF7DDD17421F0CFC821A
98BFEE7785122B5583EF60C3BD853E56BB450D4BDA3177E380F8CEC7AE012D9D
95F7E82180B7D0C7E19E58B1514B0E947A280F29BD6DC426771FCF85B5ECC9B9
F133EB8E84EAFF4BB7079164C0E715894CA7353DACA243FD5389D96ACE3CADF4
CCEDC18879D34AD7B17945BE8DC7C2293AB2453E10444136EBFDEFA1308C910E
1CD1EDE6D4187161B2CB1276200D7BE43DF6D12DE81D60B3F9D5F95C88DEB19A
25ADF9A055A8DC67F839BD451DA0355BCE4F1DA19275C07A6BB61FFC28AA0B26
60C4EE7036C35FB67AFA9096743D264D4D59C05B248603DE393369EB1578C469
0B5E1F99D209A59D0DEE35DD16C23B579CA754B222BAB1EA22B3966D0EC2E8C4
DBEC16D786DA7FDD24DFFE99AD1F102A1E99E50F55C8C704C2FC17F43CD0FF00
DD41B6BC655958EBAC961C8B9B992AEB8D2495D5B8C14217E92B5438E08D8CF7
343211697FB7CCA382C0D1130D213B164DDB61C4A12925BBFF506D17EA123DAA
8C0EE5D5075F388F7011981D02A9D1FA2F16500DB5A327BD3E7CADD2656F2F2D
B265106D9D648D410F41A4BBE4EFB67ABA8396F74967F0675800C093C9E69326
5E8217175BD5D6DAB0730DD5226E7656787581B88E28618A36B7C82C17C28061
045A39D8C86D57753143BBB70E4DCD058125FCB5623DA1351D026DBEE48011E9
346D35FB9C2A3C0B6995E4DAE1F655F8B4DE668AC382B537656D294FC4AE18ED
893618AB18979D155114FBCC5114857160563BC84D7AD855675341889A0130CB
64FB77B9A373502374C24E324EFE708212EA9989F94F83339606F46705956A9D
8DC1B1568B778692C68AB778494CA5B2D8A0B4C3C5B63ECF535EC546A8CD22FD
8C414594CF05B9B7258F80F3DE322EBC195A35A003B1397E32E2D63C35A4FD22
0AC51563D093695FDFF54D128D956A638CD8A1D3776001C70A18108F1E23C01B
97F4166B257596B582AD583BA3071A842560FB1175BB2CAB6B682FA9CD3A7863
7F3327FB2FA1DBA5FBA7F454C34DFCFCF8345623A032C1E53B6D0245F6E19114
8114B6C788A2D7B2A1A2BE224BAF4360C1EDEC3622D4A8940FAB067488893EA3
E15AA2912DC4ED243A0C65ECD409063D47078519F92479771AFB85A1CE2BE219
5EF7F270C91679C516D2B8B3E6BC113DEBF8EF3A9AD8A1DDAB101F267B910E80
56C5AB21B40BFA028947F95BDA160C8256E8557891C2FB0C71549E06DB21BD3A
CA05232D09E692FB87D5E94A48BC2DD172F92CB8A378EA094E0A194A8712CE6B
FB3792B272559D437129C3335503FC73A2A0D7A6DE0068031E1D1359E9852972
AB808FB5463133416A8DC70594AC0A74EB828476BAF876014D859AB20C62E568
E13271F70566EA9F9C4BCCDF75F95E502CBC291B978C6F0A6EBAAC5D55958A56
E35FCD8CB216B445A22BAE1A944F65353C7DF34BA37E939F717E6A70B5FBA485
3FB8CE273CD526133DA126A10325C918303742509969EBB7EFFEA09D0B9B9B71
4AD3934F2F8E0A5CADD24930B0CDEC598215085DD341472C60E4BC1FD5764914
B1ED89D6EC2DC059192A3FF19FE44A3CAD8D5BA5A04FB66DC5A97AA62EBC7C72
A56413728E7EA575BBCFFA37BAFFD2CDE25B2634B529B28356C095E78AE2BB15
E1192DECAEA1336B831A45FBA0DB1A7AE91AF1F10279F8AFF1075D4811669938
1B120039346F91568267B94023ACB60AFE54B1D4FF464F276B6B6CEAB0721C95
43B38947F1EF2C5FCD732E2811C33AFE6B49A0185BEB3E980CFBFCBC5915C3BB
E433296FEB76B0564838438A5826D25ACF2475292FAA79D593AD9D4D34FB0EE0
14E39F588B4572DD6D33C43A968AAE7E540C4D603C64FA39440828C42A2A22D5
4339802ECAFE58ADB87A241D601BF6206D6CB462F852E5044E4D313CF0F4E59D
0FE025814A83C7157F567950C4B5825BF6D4CFF6883730A205881A7DA0EE5497
E4C21E3A67B4E2BF8F2BEEDB3B1643B136E60DD04DD08DF9F46A87BAF0D76CCA
A8113D0EA9CF27D5EE9133C787A3B712016E0BF4143A9847DB1C27BC52BBF36E
F1381615E9BDEE8F9DE99964365EFFB3FAF76E4A2C71713AE063006F292D552F
069E2D49A18BD95ACEE311E340864F2D181B8370AEADD6356BEB0C277CCF6F00
7E20E9EFEBD86DB09E46800CA03DBA1FEED983F47D1A2938B331E4D682EF7810
BA119B058DDE0AC7256B1EE5A6DFDC708815C857992F4CD575C9A1DD49FEC7A0
6546187160C9FFF2D7965ABD9D72BB2B0B10A5B967F64310E783899F323A3B3B
68E6C112C6232A8FBF1396230122DE3A130DA41C6EA33793A8753A7F5532248B
B947DD7F3F044336414657780EEB6286183A485C29E4C545921519B46CAABABB
18EC1F3A93F4FCFE24A8C6E153BA52D01FC278C5C4B02A859BE68A53D558C1BD
8A5B8DBCB29C4DCC8B74DD1221E848BA45FBD6DA8078BC63D6B47654E50F6A8B
BDBA561676D19F43EC5FECCB933DA6C610163745BB83001640943EB2B5743957
659BD18EE167EC1BB694AE7C29F78074C2F7CFD63062F47179FF2DB93B166EE0
F62767D7696D77B9FAA78BAB152748032273BC0271D79F66E0A015F6D899C8CD
63186370C6315D3AE214E3747C07106D2A8F313AB92F6854E1991FEDD3A14A6F
DD9D1B3606C3B101DA8FE6553E37EDFE56233B64FB2BA1DE86FE66D2D0D8C373
3F61DCBD769C68563A6A8539D874C83030464F14DBDFC29F9CC8EBF2C1D12754
EC978E09009298C245C2EEC2257832743F62E19322507605B223DB066A9AD6C9
D0DD5731C24F02AE99C95D8D683FF2CE205E048AF3D1A8291CDAC2655A7F669F
C38826BAC2DA42F85F20595FA92F75589DB025217366AFA382B3DA264F724A2F
2242E3A5FCBAC35855D547A2102B521724B174C803CEF5B621F74F819D1C5251
6FC49C4FEF049B7AE064D1F9DD640E829E66C5209FB2AF49B60063FDCE90E23B
CF9BB9DE0FF7414B47E5F5EB56CD36E4166094B03E1B344EAD29827168C1215E
07CF36E1F995F651E03F1AEB3610ED4AD77A293EF85939965BCD0BD2C9E40474
20C448FFD18DA80C917419343366237C1240AD88EE867E6CD60C881EF2706713
EAE08EB5A474C48462FA5D4E988EE1E364AE04A03A571A07D88F21324941855E
D9FEA95AEBAD8B054D4872442FF9BCC7528F13F73C7E2EDC6B3ED17C864032F5
EE426737D2C55F5186A97E4E971146CD280DD910D90239BB241FF3FB251BAC3A
3138E255596CAD9EDC5D91FA55BD48FA10E214DA4C27815C5D5E5E48658BA328
FA643D20A09ED8BDC2E1A101E713BA7F48FCC320DFF581190B768D58A2A29571
C538951DA99AA416F2E10EB331394A6DA21ACB1136ECEFC056F81287ED93500C
34CB3DB7630403B6A6B2BA77E7A00D0F00335B47A1A5216B3E3C736BAC6CB04D
E41B17F6C72529F7527920F114725C6BECEB61CF2BF6035B52198D36D09342AE
E9DDAEEA23DAE54A2725475491801944C543B3CCE044D7CBE9A3A8FFD9C94AC2
FD461B30FD11AED49B0F2A06D8F9E245719281DDE7EDA445CE5B2B03BA5232AD
F094BC3A93062885812956010F3F647C77C518B22888EEFCC3ABFFAF1F25FCD4
B50C937886C9F16B9D3773C4AFB9FDCA89C5E45F019BE5C476D0E0EA1BC88E52
30997B30C9BA2C06BC423A3BD25E81F36621F6C889948CDE368F48597F6B2106
374CE7F2226FC31C0561BBCCBB8EFD1F02C6E28493173116994E38AA426F8B29
5EEAF347EE0F318794F11F2787815E176204D41973F487D4C1134FEBD587A391
DA93585D083F67EB1D9C75FFFF4AA929C1333CCFD229F6C5E11B666FCA0CB38F
E160A762666B595E4CBA59E6C2BB8E015293E7D5AD7EE750D7220BFF5BE2C6CC
E644F96D0DB177CD2A92CCFF2A3F1606DD5F86469CAFD742C0CDD72177BE03E5
3A5F82096025188DA9022EADA57600D753A9E486B8B1BF149E6E89D0A9FDEDCD
1553A02143776D6BDC5FE5722CDFE0B8EC62F691AC661CE0C434BFF08B339534
EE4F22AA4781208ACF94A89DA5CCCB2DC1A5F67298D0E3CF07B7B2D39A73AA43
60E9839D25E254D80B679068CE6B507F644083C6C0F3FC65F7914998452AC9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic12-Regular
%!PS-AdobeFont-1.0: LMMathItalic12-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 833 233 0
%%EndComments
FontDirectory/LMMathItalic12-Regular known{/LMMathItalic12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic12-Regular)readonly def
/FamilyName(LMMathItalic12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMMathItalic12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-31 -250 1026 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD11234369CB38BBC21C40020C4E57C
950DC4A5CD271B5530E91DBA55EA1A3BF584D9405556EF9C802B109FF1EB2B0F
C350D7F091E7B613B08574EDA3BF27099BC2EF0E503A4C4724614A73AA054756
A503BEB31E3FCD96F733D0C5815847DFBB66DE4968A9B389FC00C2146C4FF68E
076BA8B3847A3D8237D36A6BBDF0096290F1BCD02CC66B12E0070215D5D8306F
406DF7590940DE35CA0854D3609249AEA4EE9D3D377A7996C1CC2E940132A90C
F633C774985DCAE8E9353607B9059DD211265A0A346B1A062D80C64B5802A750
D9FEFA3C9920A3DE942C65BD08060AF33C91CFF62930F65F9A42F70B83B0E077
E169BF7F5D84F15D59F8A74BC2EE4A7F3ADE36F38C3A661F4CC9826BF73D7F02
D3CCC267927CAE22B5ED695D212FC3B669F9BE369B7A8D325C3FB9D552F175EC
29972562517E91E7B8D570612CC50B1A5CB6B94D030B0C60465EA21631F7A30B
44A47143D0C2F942B5D76384B8C3F2F197BB3646CBED3DEECB6513D3AD460F49
4BB874969A3663617EB537E75C1C1BF92749F9D147080EFF78ED285C315BAFA7
D78B7B4B8B7CFD1639EA303ACE986EDEEBA9350F92529C47EA7689779BD50CDB
D1B3A68B383B54B51F4FD77D6458F15AFDAB471DEA9909CAB29840091391F2EB
148588D02607411F2E802B9CDDFFEF1C1FFCC9EED0405371651ACF30808E8C57
682B734916EE806703B2ABA2F6910E0C75BCE10A94FDD1ED3E4FDA7857341427
CA0A4F7D30151BEB8E3D351E1E100A8A75959D11122C83A5C0C4C87214413B25
A6BFE44A42D446E9C4AC88F86B07C1097F9C5C5673B88582CEA8CD622F9B0C79
E463DF7F2F4C6640FF3852BEB520F7B23D8A22E7E601EF9CC6D0A2E6E82E6840
65B82C6A3A6692811E2B4F57723AA3A6E27076A2F63D6CE1FBA7ACD844E732FA
02797B386F2EDCE9FF9F84EEAD17B366D678E61C6176FEC09C94B74DFC090CCC
40AE9DA65E5DA02E7A7E8A840B45B752AF11A279BA06F821525DD0F477831176
84C80B29D318260FBC314986223F9EC4DB5B0EF2EF5D424C6DA581B49C709E1E
98149FEAAB15DFE7F94977CD2041DEBCB1FC8F4F3B288515CE43713570027C3A
C603C44D8AEA1F9821E0124F9AE3E5A1EA6D1C6304DD03CD20842B335D7FA068
735311F96609901AE3F757E6936FB0AFC41E8504D553FFC1556A37F78DE79AA7
B72000C7B2DAFF6236CD773386E362EC7CBB1284132F1FC2EA71CC5D2E2A146A
92B5ED12F71C8EC58BB4C207F5E12E9A87FF6ED8E4AE72E7FB4BF0253679DDA0
C7850A553C7C1F7CF3A69D7ED78AEE7A900DC7AB539750B476A9D5A1CDD4AE46
261FD41D059BEE4664BABF616718A6D39CC6F3B254793991A8B7E9FC23E36D55
9E4FAEEB77F3C3256EB11057091DF6015793701DA3A8867BE168CFB9B5D52529
CD81FFC45E2E99E588BEDDC15FE6965ED77A15A1811149056B35E0072A94447B
2B96971E35DE1AEB670A4FA101037918C9F3EB2C63A18B8BEDCCF4AF228E9A09
15EC3A18F8508C0A6228E3E140E9B8F13AF7217024CCD16C068639CCD9B566A3
7375580827FA4A69AEC8E237722DBA50BF57C2ABE940D44DB17131A820C6179A
8F984CA1472D619117DC6AF37242576C4E9A56BFF2D3E717DFA4CD1C1DF9A1CA
D2BC6E812806D30B4821F1AE91968D5D82AC13268CA45E353D5F4E3378154FD0
C9971F42B757733811FE1F00D6221A3F0677E7155A03A55E5876F99E6BD165B9
C6A43EC3CA9EB3F9CC21013C0AF85CDCC0FC6453406CEE1E199A2ADF708DDDCA
EA17D0A4089A8A29528E45C47F09C56AD5389C3EE8DFE85DB56116356E147F7D
25A6B84A1921CFCC821786A49C28C440631902B92C516F671CBD98E454F752CE
741351C10EAA581E6AB0DE87BDB8437FB2BACC6D518A772DC39BE1302FEBB6C5
A7E2509195211FF1A494D775EBDB3D586B9579B002548840847A2B333E5E409C
FB2EE2CEF2642F49C46C2073C7740637BF6D2B38447B28D5E3E5609C81114128
25F49E60B7C0C4A91DB1048628343E87723AADF09FCC4481435C3711F01E5328
858E6787829DD52FB9F1BCB37F8CEFCA7248372EE3D8E7B6F774E0B312884944
F964BA42FEA8FF81758E797A469DA46E569FA21EE343A4E98C401049DADD29F1
A291E134B3A4CA7AD806E076D2D0C31E3C30CC36F3BDFBC4EBDE1DAB2D61424D
7A9C7DDFD8C53ECBE4DC7F8A6FEF8DA9A7C7C489ED7CEFD50823FA16027AB07A
194C94C4569D0347981069F856DB34D1208284D2DE3E2F3CDE37E736C4D55669
F6062758A1D284A596946D6D10A9B1D117A967E0A62D5AF6B69ABD9C447C7A5B
FA1AFBDF6598BE3DF14A8F90818E2F8B75C709EB10E01AE394DC3C894CDEB07C
AA43BE26139D2B17BEC6E74BB6100DF9B9875C201C82166907C33A3DD728164A
B7ED962982672F1348BCB0FC446AF4AAF9D4B1D90D8D84447967A27234127A3C
7B726EA6A452084919A10379C7A64E5B9D6BDCF387813B7E9DFE97A56CB8AAAC
87D5962331468F60386740C6BD7CB2F62A8D19F25FC0BC413D8F441DD76C2C0B
124067231044D9D4B91D2A5D994B0A177277B4EE30C7CFEBDE07E8EA5DAC8BA0
D7C7AE34214EA1E3CFA946A3B8161E188DF5C33F120302D2E8B37C707D3C86E8
1F82A64D60847693A82A55221EA6459377F4DBC4994E80E3BCE0FDE439901F70
37EDE75C701A595F4B6EB0D1B713256C7EEEF6C3036697CF936C92E4677AC6AE
F085D4C071E2DFF7E1D32CCCA6E86B935BD56A0DB186B932EE93A97343943EAB
7211B43C8EECC909341A41C648DC36A3FE43F201CF06B7E6BC3BEA97DD68A39E
ACCA2FA9BFD61B6A5BF2B93A3C9DDD6572DE0BA2FB4182519CEFA13B59E6F54A
00D84AE68C40FC20D68DA876C00D42986673BCD1D8EE95E73B03C7AEF75888F8
D31ED13C8CFC2BDAA169724DF3209F4081BCA683FFEC561D4EF3DA2F21AEE614
D06AC9C11B25862277F34C1F543C8BFDEDA9C9A59881AA0EBFD222979525B494
1045AA3985A6D59469ADD9BA0C32D632F5089AC10ACB6358C58126DFB73CEF6E
B7B91570481AFEA46B87D562A0C1DCA3215CB4F63E0F37668F77C77DA9E8DCB1
F9411F8A600F1B6E6B6E5FD4695B1C850B041716ADCF5ACC74232D0855FFDF58
B83F83579B41E935AEE3058CC8AFA78B723EA39389B1F593E70CC06FAC429AA0
18EA26833BA9F2B29911B6C18E528FB18F510E4BFFA290BD0E0E3039612E5609
851CB54D2127C05376354EAD5589883550E71B77304109024B0963D5D8CB9ACA
59B51BAF2906C22EF35D9D63F1EFB0AAA6524DDD8C1A3F90565724D9424CA68C
515FB979CADAB57368497A72655BCD259027764F0986946CC7AB5B6E22B801EF
924902770C53DCED6F7C5ECE3966225B7F9478E2C0A4E6D1074C39119DCD33D1
CB5739B65108CA554C93E3C66B6FFA29239065416CADC4F71491C0FE1CF232AD
40366B3CBC77E41DD52F0F4C83CD0E7E807F0A01CB60EFE141363BB01C57EA50
981575E154E9E5439603EF6E1F0A017970794557E24AD68744715985F3BC41ED
82E34920A0E960AB671F18EFFEE9CB5DC1A3E5CC6B81EE62A85F385C6B2B72CF
5EC9F2D3936EC7636C4D2613871BD32851C3DB68B130614B6156E86787D4BD42
DE9686E1359B8BAC22468616D55B06C86EAB1DF73EEC1E26EE1298C7838382C8
15531BFC5563D021DAC1175513C98568357BF33A4001FADDC1302D40C5806BBE
66149277CFF6DCA45352A6C880F153C604D6AD113AB856017FED5889CA6B1800
8427D61E63B394397BBA8153009674B6BB1F12061C572C7A7FBCB6BF1001B7B5
A1C0DD3CC9D761CF7E0BF06B1E8375DCCC42DE446D666C417A4DBA6211F75B9D
7768A5358FD20ECBA3EB3536DBD20F798C098BC218D062B97E11210AA990B4DA
C525FDAB983F7272814619DAB28135D8E899C5BDC5023379ECFE08C6CF7EB9D7
322AEA6C1551A44E43FDECA525ABFB26A7FA214D289FE2A90106E1D5FB15FC96
D714EDDD00B26F8CCA75651DC6B55D3C9A8EA4D9B8E10A9A7CD8F93CC81D49DB
4408E89C6366805957EFDA872375CB879E0D8BF4219245EC6CDE1CA339A495CF
B3AFAF410854C8E8E38B3A46A29EF69534
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C071D06D71D60CEEC9FC68AAC0ADD1DD74B262
0156612EB4B21A3F4ABD34403540C124221FB9DA5EC6C7229DA9A1D033AB828E
9D80023B2C8E68FAF7A38C925E0587A1CCE432EBBBA598B201F5AD036BE7C8AD
B8C411BC79646781C4519B89DA648B919EB362176B83298EE2D8B405DC66D81E
C655DFFD1BB283F3C5DEF1495FF97C798C213036AD02BB07FD42EC5932E79727
ACF464295E75CFC635036CF27FFC42DC2919CC167CA4C2E673040B7909AA26E8
123B3D9F176F6510B9526E94D4E38E62F8B9B96E2D2D51BDA2FB7C6992B79CD8
3E40292315B0EFE711C8FCB37968B8AE1BCADE6BD8A3BA1009B34137B90D924F
B2784C9E13F0795427324E80C175BC99140171AA2F40784356690DDB982F55FE
EFFCF946C6DADBC6A907C7DC28850415D9AFC1C8A868801B990CE2D26AE40CB3
4EE0281A60063AA71E48DB8A35E05C2BEA1ED5BEC68717E95B7597AD7CACDA2A
6A4E8808BDF0AFFBA31BE1697149D7BACECF4481DC61CEAB7476A2E00CD8EFF1
37E476FE5A098E607E25ED29F4BF3409309145BD0530C8A76E85F59EB0890ECB
A12DE954F33220ECCE5E9CC4B52E97089790D08FFEEA7D143DCC7C07BB2694CA
6709EE19C11515E6E967043F9162C39D9BEB2767B7B31EA068C594A63173F7F1
67F3D6FE97087D19F73EEE205A47785EF3C453E6F77A08AE9F93F4060DD19EF6
6DA5E780DCCA30F180F8DFB0CEC4602AD1201C63D91450E7B5F44AEF32087A03
0D933A941134E74040E6E7E797E18AF57941DDF7DE2072ADACCD3BF8D4CFF06C
5B946E21D0F5A799CD011CFFE4CF0F571B4377AD4768FBEBDFCF6B49F09839B9
35B1F7AB20DBC872DEDA90B79F113F5A4BE581DB49C5EB8C9033B8050C143424
1EDB333D1DCB862DC543CE420CC26EDF9639E4256570975B25C6C1F06CFDB2FD
9035344017BAA39283C14E3AE66A14DAFFE2CD87485598645C39B92C18AAD014
7814BF27C8FA6DCA0BBA0FFA552B9FFDD54BDD8C7F84484031FFFC0AE8932A64
53D2632D9379F30231361D03BF91F74904C7106B6F8EB6ABBB29858F65E937CD
E31D67C847719779DE0B34CECE88A8F9A12D46B8FCA50DF4433B0B8AED6A63B9
E6512B667AC78A09A780813B1FF02AA967B12AAFAA0AF1B3DA27604A975C2DB6
FC1854457C67C54DC08DB989CA3267B2BE5B8178E6B7889A33771F86276E6DA4
F83033522871198AB3E954EDD88B5059BFBB42AFFC2738CA09B628CC646123FC
9C2BB8B9149CBADE7A7953FB4FBAEB6078B410935DF7D6D5064271899313C4E5
0DA12BF2F08521A17641A2F5541EC8419514939892C0E353FB1785CF9CB67C88
AF752C2A0DAB509A424DDB9649BD8A846E6BD3D374BEB6B9DBD5C10FF56E2000
AE4AA5B339C187F52630B52309834F266D778C720FA9BD9CBC1F322A39EFCAF5
85107BD5A5C188A6409352766D80E77B1270019E0EF57F31E9F13B9483F070F4
86122EE08A4870456161458B6C93A1602A5EE583461ED91A90CA5B743636AED8
1E5142CC0A7DC998CBCF84E39CE3B141286A5994C60855979B402FC1C092EA15
1A6F3762571629775247A6AC65DEFBCA10A51ED614E0C7FBC7335681207464AB
F8C4ED5B883E7A4D01199AFC3C88B0E2AB5FE014A84377451081CA0390DEBA75
7BEA45FA3171095052B839F7A2A9E41737F4A4CD704E8EAFC757116FE3012E01
AEBF584F6B34EB3F9C4B3893DF4E25B71CA17D427219E0E2F3F7ADB530841948
1FC1CD966965C72E9490C31153E2A0DAB73629A1DC0ED7C058AD150C4D5BE6CA
FCC7D71907232339F3FCD771914933CABF613F0F9FA3E206172B0B4ADD1D9744
00A8C2642147D4B652A8F1A7E5BD064E369FC591D4739533513C202E9DA91CDD
1581D1A58898DD6564B1710A88AEF94B888C52681BAEE1E3EFB4DBC694919D4F
41D01894C91D8E03F68DB550934E5D783537D2B57CEFE23ABACEC756F5D1EA5D
A74192035D2304EC4F9083716CA7906B80486BB5C79752270821CB12BE7ED0FB
9FEAA580CA187AA3C9475070809AF6881F745EC71298D454AD31AB998F5821B8
2070122634D5A247EE4D8672339B1D90113137D4FEAF3CF3A2456A8712556956
C5A48721B1B1E140ABFF7793081B2B092724FC0F129DE772236556BEEEBEBFB1
FAB1037FB0997B367483D2C8C0D44E6111CEE2EF443F84FAC7710AD0368D542E
8A629BBC3C6E2D85E984AA01B575B37DD1D9B0D453E3A73EE7A34FEFA5641BDD
67E694671B6250DAFA3D85E0A78E946C78E33A284D4F92B73D7AE87B13F108F2
C4611CD948F30F56B984E409650E9CDFFD63D996E25E5C0E0FFE02BBE2237537
8C945F31C26697A7ED159B529276995292581CB9B29A54F4F4B2D472C74909CC
47C1675DC6FB9A932C0552F8FBE17F4D8771BFC6109E6D709951694157B3CA9B
1F3952D101D6CE60D1A0A97C99EDB3FAD64BBD337BB747424BE88E67FEA44610
51A1F65159650D3A2FA882944E6E8DB113CE928969F6BE3E3B8BFB71302E87A4
5A22ED99B04853D66E5A22B56F79FEFE917A6F436B823B1A2FD914DDADEFB5C5
CA3A43E348D017CE2040752BF94A98902E608264DED8C3241F06469FE18C377E
448EDBB0823526BD66B40F0519F047195405629408224D070207499DF2F43E7D
52E442E3B6E9E3B08F88C9961E81373B96460077464C7DBE6C7C7887BEB3F685
B182706F5DB4C7C4BC2FB81A7D040EC5A04E5C5434D732318AE791EDC71A47F2
AB39A992EE304763BBA1AA81F9D74B24FA7EACEFBCAC72D673540922501841A4
F7EF18CA86AD20AD76325914FC0197DA6D7632947C4AB3AF2133D1A1E2719511
F62BEB9C879E76B74493C7D5EF38E01CC031CB4CE13C2EB6BA2695E1AB97260C
39A7CF8F690145893081D526990E92C1FB18CC4B968D70DFD13C6223FAC9AD31
2E1240ED981AECE8D13DC653D59255F868EF158EDD781E9D02889907B23F00D4
F6A0D9B74E591BADA348B09E22B1A783A8EF2AC87D34B6407522AB33411ECA4F
6C765C85ED1405A5F27B28A16751402AB278A8099E29940E719DE1E109E5BEFC
2A4098E77020110C37A90B5BDBE279918B0B31E08031DB686D518B4CBB8A4D0B
EBF6750A452A7F706EA676E3B3237FC5656B29CD5A3A04F82AC871B526CC28B3
A61D985EEB3610FCAA433B9C6D4683C512F0FDBF3EE6FF552D7BF0BBBBA37050
FCBE3F164189FDC8446ACDE8D0D4050278151B46E56AF826A0C2E9389C2B8BB8
E38579D281D5142944D3322E1C66D456E4C5DD727AA41FA5B369D5E10CD71832
A7DD40DE855B47289C449B6AD8D5F1D557102050EDA5F1641EAAFDDBC082E579
A06D8A3A323458808BAD0F4B8A2BF406DBAC4C5F555EC96E760C8245A1AD9F50
881DB475F892F868823CC55D4859C09148529FBA57A392127B68F5366491D1BB
097D8FF4A71966D42DD988F48C8A1F4DE0449E6AAE79500C42B4EFE4936D0D00
0FB339115493C16412F1D6DCE02BC7B485CC108C6321EBF1C609633933A576C6
B0758D49F3155D448D505F73A5206EC1C8886F5949790A7E4B850B6B8E31EC18
B7321E63AC75B6588774961F6B7D313B850AA4B368E48DAFAA5693CAA236E150
E02FB2831359FDB95792B2E6431DD24BFA8F2B51BC21E2E5AACC0CA211F50A13
075ABCF9F440CA468403D939B91520C652F1196EAF1BC975E26F8057F69CB972
E976F99070AD3FCD958C1EC54B3994EA142AA0615EF7BC00D85F75BF5F32B350
E2CF46BA0E8D0120BDB54910E5C27A27B59664E856EDDE290103A0D490FD76DD
09B152B3AD1C4754696B239D4B13935AC19769600943C7343A5E7A06C9115395
DC2F92EA95E5ECE5A08EDD16DF74B6297EC0220C91F8BB9AFE742FA96456E131
7D41CDCE88A8F9A12D46B8FCA50DF4433B0B8AED6A63BB5FFDFB8D48D04F9849
2972699B5667C0D2D206F4785DE20A854E1D4C655A690689B7B5A19F8162E5D8
454B7A1CE94AF723F47C6B168CB7269CC802B14545C8448B5C260C6AAED5FB23
2390D7239C22534FEE644AE96C5718EFFB9DF1AC47CB3022D3751E6B7123FB71
403E154150FA4A14EE2CDC8F0BD084CAB30272E8F065218BA88536F138B94AFA
D750F6EA9BB43271084CD876A14CEBEB86283BDB500BBC0F9E152C30059054EE
92951E4A202AB409F7D16443DE00ED69C1FA674BA3664F8BD00C08A27F475C00
E6AABE35B01B991AE910B7DC821CFD8A6B5C7F4B116E78065CB219C926D45163
EBF6E81EF0C38076871283D64FA5F2126CCA7E93636A7CCA2158B99A15CD405D
4AD290CD8F7AF8845CF78D4BE9C7F2E4DC00372530C64BBBB785117A8AEEC190
9F49C82BAD55AD174D38A74582CB367BB50ACF8FBB2C8A2EDB17FF267D0F21C3
5BE42CA518272C9F9FB2DF0780C957CF1B9734E9F49C0E6EBDB5D24ED5D673E2
6A25811D4BCA9D693EF8ABE784D2BE46DE1E57E1B738ADF6FD49E6A53BF48C6C
2A73026234D3719C72C2FB8B8274AB54A6853DC6784398A6B994BE424B6E9078
6C303D590747608AF3CDD6A51B5612DD5D49E1153A25EBEAC76FEC601CF4D10F
65DAE3EDBF9A163BEE244542BFD2849D498C239237ECDCB23458C7C3B9395C7F
900C2AC7BDEF8FB9D4574698BC8D4E374B34969A885A0A4AA26F19F8348EC621
89B42297868AD2C3E80D95C41FA4A5AF7A016D3C773E040312AA0240DE24C7F9
D662FC2E59673DEF563AECCABF724C09CEEB5DCA64FC6D24A091A75B5745DFEE
F5C1162900B5F1EF5A7102C27DB1918679E7E354A5DABF897D9C8EF5A14FA8DF
FA3A7B3D47542FFF5987268E60E7FD64B017EC6A8FDB4BA5AB5B5B58046899C9
C5993E7302C870678DEBE8FEF3F2438217BA5121CC668458620DB3D381D56770
19CDD612E5C0A267BE4F707ECE93B3E1E8BE65922315729FA5513AD13B562C5E
E145AB39905815D6C3E8B60AC5C1D4D7731E2A6B122C6F57790C42B0368AD7A4
99EE5F029AA6F8E302F4CD994EC08C00AC6A66C51254F71280CC722402E200EA
D4F6F489DCD61B81CDB85804A5EF00CDB09D9C2EE4F3D571285E319A78F90942
1C31359DDF81F38F6E8615BCD0E6CFFE077688C365888921E45608C868A0F6F9
D726CB2CD81B49A9F47C12FF76284D3B07E2C2E788036B4867F90D40C1E4FF74
60399F1F08F98A05A579D00D1ED5E8A86BE9DC1CEE3FCB03B9A0E4BBB81C849F
AB1A6089E9807455A5DD78B2EC3090E36EDF4D19FA6BBEF386127BBDB53D25E6
8448A975CD56BE0A93070F848850FB9B3B0285C7FADB28A3711C06273B79FBD2
A509FDF7AF81630306D67E0AAD0DAB78243E1B814F745234BA7CD57325B5A34C
C3F984018DC9653649786481788A6F58ADDB87DD0D883AF60455753850A63756
5EBCDE76329F5626E6328EBE3DB5770A4C3E21341C304F38845FE70E091803D9
D14037AC4AA8C4D17EBB62ACEFE5344982E0F489D72EF60183D8F2A79A3AA765
C18E0479B0255870CD61C8CF7AA8DE567D174EC90945404C5B928EAF3E8DDC1E
018442474EC6B0B42DF539EC1557722299347DCFF0347BA4273054B8062D3DF6
FF094944AE472D60DDF6CA62288E4E780F8614C7749C9406325C82715C866134
637DCCE4848D2B051B8E0EC7B88872E9AE68BB5DDC30F4A61119733F6F6DE0BF
4C6437A849A661B6A233B1C24238BB910C11D2A8024C89FB5DC745489AAC2570
4C61242B4B1983A5D0B134C8052495CBAA9D2E2E014641BD58F0EC389FACADA3
08A1723A5C2492BA0615B0222EDD152AD19C307118AC0086653521EA59D676CF
C36AB586FF1FD4C383E2785EAD36F41274FB0BFF9DFEADC612CA44A7392D8E79
1DDE1DE818BBF26CE3BCC2569F5CE6DC91D4F8B7800A05DECB300CD7A8C38D77
4C1DF436013901C9671F77F34A63F361C5579EC5E00C5A8E2FC97874F6459EFC
C1760E9C6C78E60CC0152340DA6F26C67B2E10B620750E2C44E5CB9DCE747E29
6F7E716E6BB12B699A2FCA90DFB3DD730D96D100DC5B1BBB1632D7015235F4D5
1C1C753EEFDD6ADCEB45DF4D00713744039C43B860B5A9C51AF0BEF11CC8E85B
067A402342896C9B3BAAA570C4900E12D720F2812F28626DE3BD3F3426B82718
259AD02CDB518BA4C4AD8F261CFEBF43857EC7A543ABB1E059247E276E206CB0
0BED125C8F78A665901F80068C9B0AED83074C6270B177BAA18F1975F43E9160
8B75D86D9F7C1E986C2DDA71CBF33FACEE675B943764AFE71B5A359C4A092916
3E8EF660794518DA4307AA5B38469000FBF31BAE9CE8703754A099D21B332D3C
A19A842755A79DDC1E281A8C34A969B80EDC946658B7579B5BCF07AC8B45C2A8
3664140E70CA62DCB3153CB4A8E46F12CC16254F52A26FE47FE41504D3E851A0
665AB60BC0CE5C72512D196F8D1BC0B3FC12DA2D13F4B9AEA2D017EE7E574B86
2576F5EA495F51E1B3A86090ECFDB57097EF73BFFD5E41E8AB6BF105F87986D4
95940A8B4A29E4DC974554DF975D026EA92FC09DBD65783663CAFE414B6F8C06
F00A26631D7FCC4527109F177093E7432F5FAA6CA14F1654ACCFEC8FFC127488
F604E972B695E9EF18F331A58BE4704E5130FB4984C3FE2474E6CF0935F90B79
7221D94774689E83E5406F5D9554C1284249C687A6CF5A6B4783F54267C48710
32ED406DE854CD5E243C0BE4656E35FA02FAF5101E1AE6B7CB286C9DB979D763
FEB468FC7AA2DDBE2E708D27D89164B12BD8BDF0418BEDF018EA67683158D1B7
73C6EF553EA897D5F2D53E75902E57D7C4E06D7DC83F1C557ECF5DE83748370B
00EE03A3ADB919976D4DBFF11B246AF9C2FE922A8A6F8CD47656ED2CBC816B17
3B01048BE9D1E4B54ABC0396D5203D088ED7A1FC7CC863AF414AC14AC2D75E5E
EDEB706CFB2AFE24EB580E55BD31B793E4065CE83795F047004ED88F5C38BDA8
7F5FA8880517429B9C4E5FE980448EDF3BD57758FD145E769D4E88BF43D19050
DA58F5EDC7B4AA76BD8CDAF0B8639BD5D2C7552AF5415B7F35B957F02B962930
D3D0C3AABCE7BF840A7A035F2CC57FC978684570CF6C8FDB960B9CC6E9435D65
77D1CFB71D362BAD7280AED8771C6EE2F7E2D86C5661CDBEBB354B84249E93B7
7A0E409B4D5E17600E1E43F5EA1F884939C0AE467119F1E155676D10A8A35955
BADB667DB10180DF404F43A166E2E533F1C050D35CE4AEE92C35EE391398EFCF
E19EDE2E31F837DF86F1800F59C89EF6401112AB73434A3938E1970D8EA3CD40
C7B8FB44205899626FBC269C25478E0A63F78F3460EDD4F64B4D2A5B3E660B64
D293F803C670E243F0B0EB1C548746C08C7F4FAC0D4A7FD8B7369AED2AE9A79C
74C0FF0E0B0C1AD3B59BEF79753FDA3E929B52F207382364B1C62AE8311C4337
297E030CC0CE93ADB4E2FEB60E28FF6D4AF0010D422AFC137F2254FFF6C2929F
CB76A235705EC088049C1F1B0E78FD2D357BBBFB0E12CD481F96252AB7402213
DF9BB4464515CCEA5FE4C0CF761E921D7D2992EB24625547D54E3F2C644ABABB
47914DF3ED2C719753BB1EED9C435F2D571BEBA4F76A0AD5DFDBA6EC952A4F37
948B63263FA4097587802F6C66C3BC6E9DF45A22A24877E4A4499697D46B779C
8609E85E4BCFE84319532B3AC9D62BD413CC127C8DAEBC28D7DE5CB57A30F23A
2859902409CD4FF43EF6A99E9FFA2DB4113C12AB9C616F074276C4840A546A73
0D24D8518117AD200014839545B1078F38D7284FBFC473C510CA28AB90147613
F0EBC94C3EA0001043705336F16E783FDADA674B361F951D5152C0011FE0BEAE
51286E4979DACD3F5A953BD9E918D5E46449525A4A597FF0F091B2B4794752D7
EE5D9B94524DF768ADA1377760AB1ACE2D780F5624CF53DE046A36EFB35B52F0
566623440D7F364C4030648BC39783FD7AE189510DB572D01093BC4C7EE0C09F
389FF828AA7585F9B7FAFA718DAF925AA837B8C0B647161E5C322CA820521400
5D234795C9DC1354D1C0E5ABC997C64F3C84D2C3B7581BC9566EB6D012B6B784
F740B8E0B360808C984DEC73EF57328A2347BC752EB0EFF7BE8B688A3622826E
C83CC42DCA4A26C504AB95C5232A86199FC1295D8BC52BBA9C5089A346CC5760
009233FDE0B38CD4EC1D07A9F817ADBD1AA6D303AAF94D5FA688675B55D40FA4
3C6D97741D9FE4C964FC6D24A091A75B5745DFEEF5C1162900B5F1EF59402CD5
E4D0C3953C9493D87F46CE4E9C7A543364A9B82B34154924F4739C650A8EF8D2
38C73BD6689A0657D8427446E44E2F5C77937234D1D6AFCA63944D3FE5126940
8ADA00FF11BFB205B9A42EC1F50B435E4D44E14E22056FEA071D0061F16D8879
6C4BA0C670D0E715ED9333A0FBBD15F19CBCE5F93259A6C4A8CAD50B9186BF14
62D3AE2AAEA8A45E9A29BBCF83E95F0C65B2D60169538EDFAAB935FE3468186E
CD90E2F15FDBB395191E6C4659910683768F80764D94FE8A746FD06C08F15F97
3A528084C73A3416B7D9498707C04E9115D411FD74AD771B5973E6D0A573A1FD
2E01CB1197990EDF8444CC83F1AF789DCE5C7F64567C9D80D1829D7FE5F45647
ED6B99C6D96B728840A77AAB12DF037473065B62E9F3775CAEDAD9508FA92283
6FAA01D50CBB9B12B543AF2A86A99F4D544B8974F01B52945FC6ABCF3ECD8410
335AE6CAAA4F740EFA8AE1742B115F4FA7FD8E330D0B86B191FF5B038A5D0C32
91053A42460468F6A1700953700663A85229385FB9BC726979DE858914A95826
CB2A8F0F17773C8DC86EDDB610CA36C8A6051774DAD79E4E3DD10CA06A919430
0B6FF769550AD34A047DDF4DCAD48C79C13C76BDB9A98E254804C9126F6A007A
D697659D0F4B9B7BE0BE1E74DE179CA649DEDD316A452509D2804B5BE0F6C5C6
EF94B0FC821BF1E02C91C149EBC163C14366CDBF3C81F57A352355320AB4F3E3
A84E4B60EC6CF57A1A00F90F224190D7BFAFF83C13AF40E46F7154198D7BC2C6
F10586634E82705468F167630971BC01DC641766DC254D9E9B06BD62DEAA105F
CD48375C11A3207B5A381FF8E1C163001513CC382BDC172026981E9CD05FD8DD
83503D108FA0BF72ECFAAADAFEE78E1D8D2B9E94AF57AE0A20570A74D0C84155
353C360C86120BE8A6A2B0C9D6550784FB8929369CA329F6A6D89A7066E845EA
FE223A6D26B84EE6B6ADF0D9950A195F64FD3209C6D47B46B7708F855E501D4F
6F9B939EE1663FD02D1E1D74F22C4DA4143A4D523E32A0A371A51F64CDC4E06F
544F2055F67F0ACD4E9D99C47877168E8977CDA919CA86D82794F04E7E98644D
98246CC6E5F85E045FE750DA4A9B403FD293CC436888B75949007FB2D0557A88
D362014EDFD3445233A03A005D3F670E67B8FE790851B16E71241433FEA5650A
3908D0B0BD195F64242395E6C807B7D00E12CC9CA711980842040899809A443C
00042C681FE3F9BBDDA09127551CC4780E971D3952648BE3ACB42BEC6D5B5DA0
CAF19D34A8BD8E904BBB589CA901E79BBDB311C102F70F1D2FE7EB3609B14BBF
10E66264FD1E6EAE175987CC0DE53E3799F86A71F96165AA3EFB39B7B13C5FCC
011F38E349AF6FB76AC51841B39F02662AF720242D74012508F26C7003A39A3D
65A8CE04E1583229836D0DD8CA390CFD14E80FC0455F34F89764223F7DC55BA6
69B8793F48CA8E9FA4C89E877948CA4CF92F1BB9E3825B748C865593BAFE4D25
F58B6C3937F7A3D8165EDF4C74CBB662283EA3FB964084B345CC06DBE98FE9E5
2BDF3CF8FEC118F0FE83A621685EA394047116ED7629C74E8171EE39B9968596
DAD2FB69E0425E6B527C4E25D28CDE453EF7A4E0988B62CE07D14F620B90A67F
273B311061BF2D3CE3DC3A689EF85714824E939267229AAFDE9C8C387F15F064
F68627E32241CA1AE9D54F1E3710F18FFA2F912FD822B05DDC146FDE82B9FABC
A9A986683FF9CB2E1937937AFBCCFCFB821CEDEFB4941ACB6488C1A608FA21A2
EDC0D22ED3D5F6735067D8C0F31C456BB35D31B98E4DA0CCE45277DB109D6A95
87CD6B0C5BF54A30D4E3072F05FEA72A3C39AA0DB177C37546FF0FFE8288920E
35A3B84D87A21F5043A04BE41F18B2CD19AAC871DF4CCABC332ED75E1657E2B5
531B227A3879412434F68276BACEC7094E9C4779051CB9421DE1DD7BC5D109B5
2B7093D785F43FD6DAE693B16645D354E54ED6C97ED4F591623645C99097F1BF
66F347EE1D6DB95461595C9938581921663D3A3DB29723187596489A8894E037
3BF6D0E1D56EA24BEE873E68313353CCEF779B6200A1047B20647CBC2F42292B
825608A05FCC5A87AD774203738D9D144919E98326CE01E4BE6B9E623761D24C
0B7CB02DD90DC8A2CBBEBDCC9B7EF3CDC194DF7541D34D08480F1A1CA16F2E2F
8A6A4A00EBEB709BB571CBD6D51C00B349268DE077F06EC59482927DF994271B
1F39BB29575F0D72916AF4B385735E3409FF6CC8F3C38638084F8F4F7DA8B4AE
EED926F2DEE9A34E92E3925484E3FA45344C7FD3D4D3A68B7A80D27AF606694C
DDFE9C6DD15D99ED151912F966FCDFE7AF5AC66080F745228EAC9B0EC2C3F650
1F4BA0C82814EE1605F5CA9D62127553EE375832C57F9ECCF6D8C3FCCDDFF2DA
B3612678BF24A2450F6E99DE896F7F3E4563B59A33344959BAE4CB57E6FF0CAB
1468DC84FE0F3F92EC4E129E00BA3BD9CC0870FB6060AAF40EB540CD50D3198A
9127F8B594F29CCFDAEA3CA1276BFC8969DA9B9A00344F1D4D782CA0ABA98754
1FFD5934A377B4E670B933462098578BCD5050EB47A9F4313EDADA4845CD6C72
77041939F7243D600CF7EE179BBD3BA15C58FC4736583A4EBB71EFF383DC58FC
1C6DAA3105C475E5D473CD591B11F1282E9A80CFE218A4B5FF0264F1EC9818FC
81ABBFC92DD26021738105BCED3E94CECEB2E6E552D1F135733C7ABB72957138
4824567D6D1B2BE5142DEBA285AC0DF74D696E55B08B672A1118DAA72C369DAA
397883491E11171B2040FB6637140BE927369F803A4FF311D52A74289065C1D0
E2663FA57A88150633F3F937E9606D75A53BC9AC8678874FC3486B5EC7D278A0
D5DABB7B1BC64C3BC771C29C5837FFFBAD42F40083C2E412EE5E6E050E99E1DD
8C3FC2A00E05F0D6076A34A4B833ECB05F190B1444E379817760012E1331E9DA
B047409E478B58C1E5D8811E1799E40445E29A10318D320D2C81AA5DCE6620B1
3159F6F0DA988C6FF06B7DEF84FD26D3794264CB02B2E1B8F18CC386797D2A9A
40DD7EFA8609D2E30899DAC9B8553DB4FC96FC35ECDC38C3E3223F9E340C6745
0386D3DC4FC1E20A83DFAE731EAD0363A7BBEC37D8A9CAECC16CEAA06FED505E
C60F7460026CB419574319DAD73DCF5A465E9F002FA79AD452E2CCE8D95B6A53
88F29F07A9F37C84D143DEDCFB27AD763C746E1814DAF2D759976B3D2246EBC6
9353B083453AA83AB1657ABADB9A30C6C52A33B45F9C7B9361F7C7F4EBB939F4
6ACCC32B19C5A5886DAD4EC3D83D0BF1564C00C405693F2832BA5827DBB7103C
432EDAEC18CAD42166EDA7834BE592C3B7C87AAB2CBBB8A87C093937215405A4
E4D84599E4674B52F65CD9EDBBF10DF518D2436969674D4C79B5F77B8D6FA2E2
26B8B932A195CC0EEFA8E39744C2315DFC0050BB4DAD4B0FF3779D39D39D1205
9B64E8C6097B5281C359CE4BDF4907ADA234C6DE77DC4957B683947D54583D09
C01DC47D2CA3D7E500C9BE47338665F1538F2F645757A6FECBE5A1590A6EA831
635F1E7946F9ED34797866D7479F81B25C8B73BE5EDF2461F63CAC91E253D461
23B796965124AF855AF2CFF8EE38436E7C68C48BA02E9F78B4EF39EC5CC133D1
4C2E464C13F5C41C3C5F8114A5650C07838E0D553E7E840AF3EA2B0E8D47E025
299E048097B778D17B0AA1C672E2020C946F0F8E03A35E76E81DBB60E01D4CDD
FC2E9BE4709956583F3B9EEF0A37F30434C3077A2428BEB3FA5E46ED9C413EF1
95DB3159AFA04AF25F0A82F1114AC09880F80827DBBE528FFC7FE26EB04AA53A
EAF4DBDBF6F0800EBEF9EA787C014E395791F73DC3A126EBEE67B036D93D18AB
91F771A43F256843EFCDCCACE4627CFE80E82179579BFE305B9AA04A6E9528D7
57CE24139474F15CA1082CF6930F992BFC83A4D983558086958FF839797DB451
68A9F3FEF6B8BEBD37ADA98518DD604EFE6715F50897F075509F64E99F3543B1
13D3A4716D2FC8CAF0DAFB63A8C28130E1591BC17273EBAD6AFB646F54CEC76A
C98678B54E6E3A103F615CA05A901D8B991528CC1ED3B30CDE23A07FFBB7128E
66FC9D66FF7CD9538565425DCD900AC231610AB9789DA62AC41EE688184BFE66
41C0D34DC5F77FEB37954682979666FD919D83DF85BA4F4B14D6A77044767539
C0C38F4EF65E5D900353EFC3A7D5BA1EB1F51ADF85A244CF55CE0EC7494D4247
243DFA8385DBC5760B397F0EFEDF9EF7769E0A6E389AD0B2A5D10CD4C41A4009
7EF753FAF0128954373F9718877DA7599DE0AFF6ABB520C27B9B698116A5787F
E211379BBC3E33DF49A031282BFAE588877B2A9A6426F6010B1050C5F50CA931
A8AED0902642383EF313DA6EFC55D3AF10B647078CA66EB88EEA899385122089
2D97DA2F0E5BB1BDD5ABD40D988B018FD18F5ECE08D9A100CC4229A4E33FA93A
0FDB1AE200E2F6C6B899AD9D53871027450BAA1FC67517CD5B69EA896122FDB9
20E721E0DB58AE8034D8C75D758E668485BD05C356D3255479B96DDEE53455F4
1AB052F11C588936C1837380CBC611ED14FB2F017FD1CB7E1E23C1459E378627
F323C6E6F04912979B3850CAACDA744B25D6FDDD4207C80A3636F3B7AC37F415
FD2F8EA734FA949289DAC5813D5C91D4689F7553DE7432E5B553BD7AFC2D8E6F
3071A191FA8947D12382B17FDCEBBC82F61E5EF76E8793195B9D6474F0070FE5
7D16CD12153DE8F377028125088457135DBB27457FB4CAE16197347611DFE63D
A3C7C9266F7ECB5B7E091D1B11EFF73F0B5E7A5748C8AFB555D1E26CCBF43EE9
C02CB6F255587300FD433C3B4D9FF1E96935A959D465B74109BA1843085C27C2
69C751AB2AFE4B15C13C6A0664475C3A9C192169487905DC47D2022934989F37
1A8F30B1B39DA9B1F203A2814A200FFD11E14CC70C954BEAA33A81A5EE27B922
0C89DF8C7471DED4067D1AFB8A49609DCCF844AC7E03278F56A07C3423C5B2B1
4B8D584BA7468DFECCF5BE1B12A00F107E3B1014C01FF888A9B1E40D31C73F5B
4E253538C5E0D0672F042A01EC5CB1BE74CE9522C06896B9E641673A87B47BA7
D4A91ED4903EE143F0FF84E3670B8D1D046FFC2E8400E63C1B8315BF63C3BA9B
849EDD5F620C7E451943A157C7CFE362567ED47BF94B63D67A9113921AAC23AB
1B8F7DDBE6F6DCF9A3C3CED6842C356858594C63EDBA2EEC06B6756F2281E040
0F776034AA7370C867BDF8F8CD40540C3C28B45B30772EE9FFBB8D00718C3430
10FAFA41B507DDED01318BC9A9C8A9E8D714B1A1D6BF89D4CB98136839AAAA92
BE85FE2786437E6FA70BA428073349AF15F2DCF43283BCA59F109E9740BCDE6B
C5813EA8EBDB20FC0C7682845F3E4266B7D327312EFB770916FBAC97E6584C84
9A9BF389B403CD6FF5F8366F9D36FB76A217CD9C3F62414281BCB53CA46A8161
D536C2D0011A2B12B23165BB4DE936CC3A4BF19EA1C5D6C0D79F9DB3B28A9266
CA8402BD985CAB49BB651D6FDE79EA92A7A00FDD42D5701AECD409DBEBF0C9E9
5509BDD99A537F5C974ADEB4C564C26AF25696553753718AE0425FD9EB6664B9
516671F04ADD10C478B7F8D9A562487A9FAD8D2C70C21A4F3ED7F9F55C21A04F
1A6DF8168FA2286D8C7EB897EC741C41A0BDB45D751F6641FDAD6065A36614A6
86D6A7B3543205DFF5A31866735EB1A931953CB0EDF319AB319EA996076E3AD1
F6363E18CEF8715CB464AA160792A95431549FB6A4ED42741F9996D7BB1EC714
A2F30863F354F78FF9D34A41EA24E7A2ACB665959298984C7B4B72564646B091
0BA9E173FD2222DDED8C4BB4813D97384DFAB387977946314C2FD50B1EFABC3D
291F4FDD99EB7C0EB047051BE634D62F6F164085EB045535E44A67A143EB6391
3019CCB8D949E25D7DB43EF32CE21205C9B33BEA2D1B94DAEE18FD20F24BBFB3
A2C968EF269DA1ECC28C2F9B079ED3CF9C315BA95779D124604AA59F92201234
15DE40C492F1036351910FE6B93342626EF81FBFA9AED252C2CAF15D3A748549
B6F6A61F79CC9DA248CA8A674045257BF43591473F853FE3A2A43B7CC317DEEA
02FFC7B4CDCBB6A5CE017AA860B96CA41C168548C5076500FD0985C57E723DE5
5A2ABED9B40D7BE674118BCF391F130DEA693AD05F6FCAAE4BFC1F60C355698E
32DED416EBF582A3D80351CADC60B733E50FA695EA1AB682A056B226DB767392
0A2C426EEF8DA67E650EB7B1DE643531FEA419BBA8067C6D0E964143A0906762
197B8DEA764ECFAE0BC6723E560B0FDAFB34E8AD48A2E4BA5979A58CCC637332
22D0687E1BA843C2E0831CC5C994179AF2BA4B7AA7617E2C8E789C621BD307B6
477A05334A8EFDF778DA38E54F972D6A17B932EFECCDDE3DE2B354F3681BB1B3
E49E42E7B668D99299AAFC1A4965F05C14791FA73964C470E1FA471436D8C6E4
4AC4C5010157D94FC1250822504BFA173CEED4E2DE5B7DA75EC58D886E9D64EA
069C9432AF8F2B50A91B0C7C55571DCD924B0C089E2515829D461CC7AC00155E
932FA3F5B34063E5095402C6368C2AEBE26D3157EE874CCED4EDBDA26B381A13
DEF3C35E4DEC459759D7D3575F6FFCC6B27F94965BBAD1D2156928CFC8EE865A
632AB4A611CAD82809B7204C28F45A55EA03A132AAA54B5AC1B745CA3E8A11FA
F9612B74D2950015F2EACCA793E7888C26EE723E78F3C894D26D13AAE036CEFA
B476721A2E3A65C2C5B0C7A8C8B2206E76CB6598DFD42AA22CFB939A914FB803
C324871E0BCF73B19653C3BCCAFA1AA748409D3C1E1A165DB626D7429709776F
04C4D5E4D04DAEBF5C475C7C3EB2EF7410CA53A9034999638C65F45B0F57D760
0215E8FC2552DB72CE2772DB7D5B3A765D09AEE0F0178E20124CFC1D434822CE
24ED6438F2103F4EEAECD38BB01B2C6F42C4C1B222707A748CC97785174C6E81
A614B95868CFEAD3BDB4FB04FDC4FE2F15947DE72BDE539DC79E2EDC7DDE5151
78FBC21A3BFC4E230375D47F4691E0E9E35436DAAB48FAB07CE7C933BD984EB7
13405D2B3F481244379A40283186D67327CD487B978FD50D9BCA2508355C508E
8C22EEDC232CA6A04E928004BD90C2FCDFB6DD8955D2D3B6FCF5943BF5BEEFF1
F9BF99301CB61CB5FD95EAD945BBE7141CCE4BD29366A97A5D740CCA11DF380F
90656717F2270C0F1D1D5A0C48774E2E3E1308F919F597CB24D48FD50D1EE2A9
FEF854CD6238126A0B323E6E84D554F59DB81033F4F4AEA1BF99F8070976D754
85DC4DC5F3C3D020E853171B0D1612A3DFA5264D6B64371271FCB4A74B2157AD
DE421D5F51D813B577B8741B68891BF8FF9BBB484DDA6371DFFA6222F88F0886
C7F8848E958C6F74CBEFC62A27FAAB38B52465EEE09E12C4482926B22743E5D1
A94A301D3ABD6010E43C4EC19A0D63112FEF67D69CEC2F78116EC8583ABEEB71
D9592AFE1D648C347BD72FF30455B7E6447D19E2611C39EC0DE9AA9AF9629976
79755C4CBD2D05F9A170FC269B792E8CF7A0462248EE95527AA116CF31B971CA
F5DBF65ECCD01FF04E6148A80BB2611AD6460F73243DB763DEDBF476F3516136
578D66103E6455B244B9BF9C400BC802A021411BFB80B334C4BD614EA7496D58
CE8BF62247CB10F893048F37A2FD1E4BCD68D656301406C1FD474D98B7555DAB
FC469D633FE91FC8103AC6DFEA6F007AF4A42C0A08C4DFD62E596AC1DDC11E23
572F8A2F5CAB5CA87E7A6693182B9561E329A3E67F23EFA6DE495C7C9D966924
F124603446F01CF73CEC5B7877077E421392293506C391705D62EEE3CF25BB0C
4EE70CAB7C5DA7C9BCDCFB67F1B66DD991E2E4C0A29284FD2C9A8740851EDC44
2490FAE83FAE3DCCD4447BE0C2D6DE59B1BD629F479924757548799EA068E215
35FA1B41FCC74614129FECD357C3BE8A07B61BA51F5781CAA9A414AEEA78ABC1
7DDD10E2B4D776449896677E02D47DB24D4967158F415484BF9D6A2AF010F8F3
BACF583EFBE1FF3856DF768AFD7C810A269760DFA831CF3CB5D0A73CCC6B41CE
8296FF0C92CA794AFBF04F8BB3B65AFFBD62E1EBC63C182EFEB487A03399B496
9F863BA0A83115E8AED878484FAD3448F4BBFCD65D1EBFCB6494575BE7C27F44
B99EBB6713BB8306E5B5A0947A00F952DBBB63C0DA21C717E348E0BE63120324
CF402F90BED39B54D866320877A767FE000D8A3386EB1E20F1194FD049F28B82
F4C2D73E41CC73C1C9F668931E64C8D467ECE84CF7A8C288F9B22E0AE6685047
D8BE005ED260ED9488E270BAB33AEC2A3A055F6BA3C3700A868E92B4E26D499F
BE545C804154DD343D0FCCA88D299600B0C26ADE2DD3774D903024A13EDE0D58
B50937201CDA9C1EA23BF95C4A3A8932F7D47100FF8A7D4BDE1BC37CE16625CD
FF321ADFD514B2BA1B66E7CFDB8FC93B6A8EE952D196EEFFF2D9E6B8CE8CF9F3
2866ADCA85FACAE68E9C7954B512463A86B1623BD5433F6551DE2AA71475089B
3D2BD411FB9BA4C621F23724D73B1079F7FA07AAFC9BBEBE2E4AC9E2B9D11603
4191A1A804EA935EF390C90783F6DA40C59AE09ED22AE971884911F452C33F94
F3A9165CAEAD2464D8D80FF6C61F4410BE7699FF1E5E942546C8A4CE88818DBD
E72D030D8E884D315F56536F6A8756826B7786F35D21E3098DC9CF8BBE54D707
A866B52B55E06213C9491954D1A8509555EDD6F3AFA7710F49EB3706A4BC08DD
6698AB78D7681FECCBB4BABA1BFF3FCB4D8216D136C4B20B96065574316F2EE8
2417F28EF33242AD35C5B3A99045B99EC805E25F46A0C1D1C281BA23D096EE2A
4B193612337A6D180D9FA91E94F858DAD0662FC9CF4D1A5F32B6E6F0DB26D2A2
BEF33383AA86D27BEBA7169F949B08254A985398CF9DE6AF7875967EE3CA79A7
97C3A4F27AA9924D6616FC860CCAA34024F5669DA02ABCD1BE3963D734D64B01
82A6CFCF064906AF5C9ACA3FD626CC47D247CC610668FF164EFBF2FAB76ABC57
935C81CF7CC61260CF2B227DED699ADDE69F0C644DB1B12A15889917716A5491
0E71FB6278604A400502100D8CDBF2947CE3218574CDAB399479F824738B690E
8189691C1EA942403339023DBC4A50793CC443112BECFDD6E018E867FDA253BF
15E1ADBB05F04614DDA701D1CCCA3404EDE621A85F81C42418F86A00F9E86AD2
055F1A4587DBA063C52E8210D6F5B3C5C23A608558756F8622A8FA6643FCD7F5
5E72948D2DC55AFC5016FB2C4CE14861F1909488B3C1295FB381FFE037D9126B
AEBC8B4C6A7EC8556845CF97062549BF859A34ECDE8AF4FDE1550774A9C670A2
833CC6DCE45D2E4898BBD96830A113AE69DA214B1AD5EB1B5B430AF25A20A0B6
36FFEE11D9F45BCA484AAE98AF60C2AEF608A1119AA13FB6FA40C2B7FFA305CB
793241192FD9C1B01AF5CD5388A0802D80FE1FB499545814BC2B3B2ED508A554
7C4B8B182CBE28D8B46C0FFA3AA93A437BD5C68850DC71A816B0D510076BC298
CB824BE6E3FEDA248248457A91624203BC9932A5AB72BC6AE0FCA66760484CFF
4BA51454712FDB8102D968755E73DF40B4E922D522E2CAF63FA0A8D22AF65683
9B0DBBC50EDC121CA1ABABDCA567BB9D28CB3E5AEC098EFA7599D096FC928471
D2FE294C8173E82B508A73108E3E857C6FC2C1E3CB2BB26E7000AC331BA4ABC5
12DD810F40E9426C8DE97C2E08CC0185E1B5040F60956E929033853C3BCD247C
17947407B92E406D62814013DC8B7D07EA8BCF6B09E1993EEFAA3FCCF263FE48
D2F58612E2E0943E125B1209029AE09E251D74FE3748704DEB2E2B9758FD1D18
BC412B0D1B1410EA26EEB7EEE691453DBCEAACC6A77540CF459337A4767D25AE
29D2578676B7D52AFDD05A75ED3B76613CDBBF70DD34936C6953124D7433EEB4
4C724ED69C8697D06A5246DF0D089BBA43C39DF8A664335F67B9DDE36DBA793E
C77E5A7FC825D34DEB46C4AD0D21BFC3A9A11405B0873D4E92793CCD7B29380E
EC1C415FE398C7CEFD524F132A4B84C65FC4E875136FFD709A15AB5222CF808E
EF614A4179397FBCB81937127A6FF5F873691FC0CFAED955407B4A4A29E7F1DE
E97F58B29635395093DC0FE475ED0F753578F30E9371DD9CA0CDC20C91ADA66F
BF34ECD143EE0A05C25A8B88A7D5631C8137A4429E4ABBBD40C3F3B7513C1CB4
AA3659056F519B328AAFD7EB7C61AB5B5E99A0AA08A5999B899A7A8B565A404C
E6F153EEC4FDC93D0FEEC724C9AFC18168AE7D0CA1334C87FF168A700D04A730
3BBC67E6A2F4D86D0A690E637F0954645CE99CB2DC823134BB06D2AF45F42DE4
DB1437C45AF1C4FCA0277DA2CD4148CC8195477C862FDDFDDD8B976210456F13
FCD152FF9102718D0FC57EC5B6B14A6A3D61AB9D446CF0D54C7E7AEC55224601
E8C869921EE29D1FE4523E35F76D248774FB0F3625D327174D55594839AE3421
349C49878E3945DE280110D3161CCDC1452D0C48095FD5C0F11B0EA6601D83CF
A2183777A39D99BBA1F76ED06C85C5B8042D50FD4A7194CCAAE06FBB4378266A
6A1133D8151A000D95E13EEBAD4F215629875A951E28C90B605565901359632E
5C132EF0798C4181D98F3A8C7100DDBAFA847E6CC4A1E70CC7CD343C785A5CFE
027D7FF581F639942945245D8F3401965C9467947B70DD11EA6E1A14EBB1BBB0
62CE726E106E133718029EA62939188C01706215B1223128DFF2F1BECFDC5EA8
010AF57E4ECF56C9B895C2B0CC01A76BDBF90C69D9F21BD06D7C952B12E66466
62A651EE4185C5725607F0118BE73099943D762D20ABC42DFCCF4ED0E151DCDC
69D9DD0E215A49782F144DD9F51611FADFCBC48EF1AC9C7A7EC712C9A80195D4
C3A837404D1729BF073E5071C7F434AFE676E22268D7F0CDA4C121A77AF3F5F7
9161A2016A8A31A1E5D8CD203F49EAE52A38D32ADDD4F13836B7D53379CBB77C
99C5099E69C8798D2CDD59871A3049B5B17E55A6E677F0AE7D565B973C2CA3BB
7BBAFD7E3A80CF8C2DA31500445B3ECF6C6035F883EFC0DF2AA759A0112A1675
F9914CE626DA6431204C74CBB662283EA60520AF1B3FC5D973408F12F02CB8ED
DF6CE870E720C7CD89FF8FBC05291063120165B4379B1A4DC9D967DBF300ACBD
89D50D48DAEEF9CBD343B8D23017AF0E768DE8D3B7AEEB6A7BD9A6606F445444
542B9E1FDD366E1A6F6E83E5FB15EB0718985144596D3F26675EB99BE87FE544
11EE19827EF69EC670F9AB7C93E25949E228C80181E60F8CB130D5640E351CBD
65394E3E0D962690F98D5F810E0CC0CE93ADB4E2FEB60E28FF6D4AF0010D422A
F8D62F0BEEED200BBBC5CA508A4DF406BB9A8CF5A98E7DA172BD604D6734A992
F90C8202F59731DEFB79D6113EEF0375A55B2AD26E1B9891010B29A54AEF93DF
B375A54A9FFAA8BE2E92C3A83537485B3D7C83EB1EDE11C13A6E1AF3EC5C9D4F
03D038DAFC289873AD62E2E8ECB211C93EA990B3B3C43B7AF86F4EA27469108F
44975B7A94588215878E6866C71C6FE5F3B6CB97B0F3DD668BDF76A5F474B850
CE6400C544CDB707D38318331C87CB83A65571AB482E2DE257D768E49691D5D7
8224FE93C933C34C64E6009ACDE37643E89D5BE4215E15ADC71206D284543B6B
22F3D56B15719B27BFBFFE79C742585727C12F16E867F7B692C959CDB7A45A98
B420011EF6036096398D8D10ADD46B3FCFC12980C2E8962B76FF010D2AD94168
B2D6D475471A0373B8D9B96BF9A5F58D99A90B43CB8C1547939EF2F31348D48E
48DD5CF903737388C01B84BAC1F8C5D2AA3A3E6BCD63BDDE242EA731ED5E7253
65F007E60CC535D0775736E6BF7503DB53C96EBB269F3BA80EBDEC280D759C8B
9134111A762EBDA1A81A0D8E75880EF3D7798AFB3431A9C936BEEE888C6AD163
C0DF5E0BBE039E05E2833378762504B315D7309CF4A677AA4C9C1866F183AF78
CDEC59A46998463FE2976CA3496814414270F4A67574C6667EB5AE7AD0DD904C
436C52D290B24490304F7781337A4EE5A955FC0596B2E0C6564EF9A8E2D3ACFD
8C67C2C4DC81E7F68DFDCFF2BF0797C5693895A96343E8AB987ADAE9E0D823ED
AAD2E26E78E543F2B250A4B6BCCBE8D90EDACEC0FFDE601DF73CB1AE4D50A2A0
557B3F4FE24C8FFA00BF96CD67D4ABE060F8CAFB79B69C93BBEA5FABF6BD5E8A
396315A54F2879BB03C350A0B6C5ECDAD7BAA8CECDD0985CE7DC0912EAC8754A
E29EAE5AC87616C0C26855C290AC218EF1FCDAE565AA6B7DFF792E33459D996A
2876AF24BA7034DA37877C27AB769D8181EC2D288635D5040065BCB298D3B571
CEC6E771B02211A1768768D62E324451087BE7632AC6D2E920AA7A5C51B37937
F9DF00D9A925C506E32204ECBD388285D68264836889EB98763FE219CA24662F
F0B6783E357BF2DB29034B3007E7EE6C47436EF12DF26E116198F86D5F3AA560
1708FC9D02197BFBA2521772F4FBEE308CEFA450C89764BF440ABF0805B23BAA
0BF98438AB83FB5D3F976ECD26A4B5D7980EC6B901932612BE59E8C4EA4B47A3
9D9D73EA96FEF283F6AB3AB8F380A19F5FDCDCFB687120DD2BE5305363019A35
25A0055EBD6EFC0CDF2843A07895295A53B9711B5189F19910B28EF6F1D077D4
1491DC8978EFCE821DAE56732C68FC0637C661E3ECCBB47543C20271E2233F7C
2CD7C48F6D4440488AE7C9B57B85DE61CE78FD29960EC6E2F6B9CA67D6AD3083
ACE6EA3047B0C39C8F087A70C14E1626B5EC47DDE14A666942B10E15F853CC86
DAC218BF3B65DA3AE06F801E6C37B04B18441D4497E178FC83F8738781B40AD0
AB672FEE9DA35CCDDAB44EBBC0C2106DBFB3CAD4DA410E69C542CAC64B65F6B8
29C08A4C34C635E9C897B23FC7B2DAFF6236CD773386E362EC7B8F2E5EB1DD44
7832B4E1DBA7870A949E48C9DA6B47BE9259DBBCA637CCD068A86773A3FB74D0
1A7D06D5972B54D3B3ECD980DC8CB9A9D9491DF42A8678BEB35D3729E6634130
C75C7F9C638FE616B4FE7EF39F517A6D2F7B13D85E113605DCA21404B9128559
9E58D1F25BC54EF2A486E6A04A0110DE316A16B9A8A6E831396813D3F556FBF1
96832AF6AC529FB8BA5F68FED42DD602A9644C876BB72790D8A7479D926E7CF5
389915DF462574F4AEE9702651B3F78D75DBDCE36109147088AC6F4ED2BCE9A7
BCAD347C4D891ECB9EA86E362683301207BC5711AF71E667DF082622BD4E3E50
B189223DD7593D3674AEB6FDBC6896DD709A239A40BEBAF05CA22C94624084DA
4810EF7F492BC58C366F903F717C1A9A37719070DB1E340FB651979A0C701477
53E076B73687915D05705F38761ACF0CD788150D82EEA9530D185C5A012B4AF8
FA0D43D8A9974B43A4D5ADA81C5EC47F92F95E3333FA6D05522252E888CC6626
651ED6388A1C711D875943A84DBBC24EFB03821DD89F3FA8506F268809EDFDDC
647A3C41FD38EC91140BED98C953283F17A3CBD6BA59A1AC2BACF1550EA14A66
339B839947E1E27B03814F81700A47C3C770407E4009D7EE630434645AD290F4
7482AB1E4868B8F694F963F539844E412A15C778F71AB3705F8B0DC79FD91465
7497EC9C0DA348063390B5A90713629B06EE0911EC6DABE93581FEE0B3C455B0
D5B1F30EC46FE8971B83AC47247DB315DBE2328B3A70167B928CD4B189F8BBE8
B1D7EF0D0D40D6063A7272A9D341BEC0C11FCE9480BB2C45E770072ED0262364
25D096E84DD009F55A48C44B1F78D399B8A04327DC057B08DB8F80AD718FE0C9
DB969829BE342D42D52C383193734662065DD5653C091F926DF0733659F7942B
D75F3D839477B4EFD118CAAF668C69225BB2957D602180678D9CEE6397F787B0
6C71940B9F5FC95173C09068553725ABA9423F4B268C58072244776C2003B45B
60BB1B6D62DA735DA6689C2C03F196ADCDDEAC4E15F520450DD45CD8A347BBF3
D26BE7AD8EA12149C628286CB4EB6CA0D55AD7C5A20198F18CEEDEDAB8D5BDB6
024070CAD0710EC3BC37660144B50A8E9476ECC74DF72001C1F094DECCDD9F43
AAB88640D0E9347A6392582FD9DE63E6754CB8D0650938D7D1D90A82EEFAF7C3
71E803F077572234B5E42D053482045F9AF9790F60C5B1CEE17957997FFB4B64
B2B3B6619FDC7541557D9B9842D0FAF6CDE696534896406A8A5234A8AC19BFD3
5756BCA07575CE998B37E6594CC0A406B20C54AE6DFDE8040FAECEC86FBE4964
497DF28C3C460D540308A4B177CDADC5B677EF946A2D806D67A95E1E790BEAFC
C3112D4A37D26635220FB98495B2E4CD4729AAF9B80ECC69719C36053E2BD028
7A3C313E1F43F07D3DDDDE40C2AF8D234891C970A04C42CF7216E5DB8CBE124D
00B4AF820C1796EF9322A1BEE0095949F22E99CBD1AC1A0CB1E5DAE3E204F749
EA148A281CEB94B4879CBB09A3BF5B2CBD73731EC605C2C85F79D5C6DD740FA2
EAE0C2119F4FECF209E9D38FA9B51B9C502B708FA3FCB767BEFC65BCB6A37034
64B9F74DBA7B6B88A28E3C976E64C24E8B2D2EBC1B76FFBE7180B2E3DFE45A76
D10B7C0888F4FED85332C973B5D265BB1DE94641169A9986E587936D8C48A7B8
B63745A9CE85E0DAF7A5BC39E277E0B7E31914482C49E2F7588231F2BE202697
4A1D6451FE598D2D1EB5D2AB47819E87F107EA5399188AFEAC444757444D27BC
285034BA7CD57325B5A34CC3F984018DC965364978622B8FFDA711101DCE3F5B
17D645EDBC0B373BF97CDA7C326F04D1CE34CCCF4CFC655DB5818840D39D041B
26E75B19BB8E91D060E6A3F499A8D73E633335336696BA03E8DD236D480D9250
A1EEDEC54A0D75E0C853808E0E47D71CC2A8C80A9ED14A027B59CB9A0F4115D7
DABAD25FF9098D655A8ADAFA9928106AEE7655662B6F1658F14B00E75D64C777
FBCB70707F4F0F088114534F6D36E4D32B78B204E643D52B1C06099A4518FD0B
C54C4AF90192D8BE0E7615BAB550A8E0F36D01E48058D763BFCEB4A74EFC2203
B2803D2029D2403889525888EA18CE93A463CF101A6D08A31D0797C7D0DF1D6D
88ADC4FF697C5CC5E5A2B357EBAB1A189F424831F6578541FB21A36E4C6ADA8E
420A8C664C6F732F6D1E62401C3DAB3E3D1F7E622607D034F31C23B04EE90FCB
4484AB2053E8DD69A2EAE2C8D21F6538FE84F63B96AFC78001B0EE826F6408B1
129C5CB69A5A2AA3AE147AEBDDBAEC2278DEF6B3A250A8E07F742EB7A8071724
75F15F1AAE6DCADA9751CA51098671FA1975956C403D1DB5BDD2DC150F2066AA
14CB02C1CE8AE0062A6E77F33EB4896D04E61B913B6C4170C46F422FCFC22D86
B42FF91FCE7E06435BB294023285AC70B37931B13D7B0494AEB0115D14E7826F
40A532E525395D3A6E168B7BC85A1F6D3F7CDA424750AF8261D8025859430D9F
CE659D9C0B80D44EBEBD0539801393C0699406E15D1DFB6E3E5386A1D7506898
6D021414BCA312E322D6869CA086DDBE5411008C57FEA9755B9041BD3BF1A83F
13A0A38DCA8F99A217EA2C8E331E185FF9960D5FC71A40D7AED32A610FE04957
15743C9519AD6A1D2A65EB7C738A7D573E2345E735B39F7B0139829838288714
C05640C1DE5509B5BCC20BBBB289486F6C7E238A4BF117A651FDD348DC958934
E5B3A8A74EE58C36E01EF9E32CA1757A9B630AAAD6F1CD463AA8E928FDC81555
3FFC00C6ECC79D637BE3D0D90BCE5FD94A219942A695C71613CCEB7B316717EE
859D7C2DA83F003A14195497AE8D68B947574C1DB2834483C460A5B2429AD49B
D462CCB5FF6E97000B07382B048A26F9C28D387E31A3179718F7DAD029C877E9
7221B1424E32836D6CA28909547F9BD6665ED8B8C46ED1B4A763CC46684C252A
A2E7CD03663D2684F24F3418F9B6CC9AB5C8DFE79E40267EE1B203530346CD9F
59A3E70196ED37E6BE3262D1AFBA823DA8A9383C8F466C09EBB9BCC48F12EACF
8DF7FF7989E4F65843D6E82DCD40E8CD287ABE7FF1C9476D3540344A5CB2D237
AB3A9CE8C36492E99AED33256A1A6F3303F6FAFCDF53C16F183E9E658A4368AE
C49715FEBDC8CF5AD4BE96CE0731E2045B788212270B5786AD55546EA51A92CF
6EDE15204C2A7A3D0551485714586B7E235C103047F825E0B4CB920DE053CA8B
70AB72E6BE676B128D32789F4085E7065FB50E28631D2A286B9862B0C69172A8
78B0721F48AD00693D9EFD2E0110B640E38CB4A7EDCF216AA746E0DB51CED438
8D550AC45A5A7762FE22786AA6DFD0A3F2316A9E5D93ED5B658E65CA3291C6E7
195F03FB130D6EF52F14202317FC40F6C9E49FEBC2B0D197F4C0C82827878BAE
E83AB15AF7823AE436DC4ACE2F1ED5DC6C3D1F7420ACB51B0096666727E6C21E
D7BD158DF34C01AC2D6DFF8A36587311BC70C65EBE1D5BC146679844CDFA3844
078AEB61E010A7298BAF0F4D6E3B6C4C1C9BAF6B99D5EDBE2499BF00ECB6C5C0
F3CB6F2433FEAC481BD1D7AB84C2DDCF5DA974B2068488AE47A9F07D28FB9F79
532CB300479063EDF342183754AE0BA15035218ACB367BB50ACF8FBB2C8A2EDB
17FF267D0F21C35D5534118DA0770C575CB1327FA37DCE1CE70E558D9211E665
A1227809163EAD8B11C97049821975DA03DEDBC241DFBAD4BEA1951EEE0ECF5E
0BE575C26270EB3CAD80EE538E5B64EAC7FEE09C6B193C4E6E66142EF709DD5B
4AC09C3EE1D5137F787D92AE8801D352D3F80509D10F4778172CA75144E70BEA
368A35947E11D1311B45DE5D4C19C1B5A95933E7854EAD8F2C531DC518453ADF
92C5DC58C7EB9F062ABB34EB073598F17484D20A23816F6D22F1C6022BCB476A
CDDDC00930BE769752504D9980BD444A6E5152EBF506F0D50391833BBC2230B8
BEAA3ACE959E95D080DF8A78969FF3C08562DE4012BAEF33DC753055B1490992
CF23F617D40D2309AB16ED7A01EA4CB10768985A4F973A9A4A0FC3386F7AB0E8
775B76CC3B6A1BE4F3D97094ED2C21EC501C3F055320126651F8DFC95454EAB8
9E23E9B06A948F46D6E175C5B6F56199CC1BCF9503065FF859EF5BF011F10BF7
E0E9DB95ECE7123AA5A7E5227FA99FBA99942BD86CE4B46FF5C69BABCA7C9C39
115F01BDFFB5EB6CF214440E4DCFF294E01915ADF62FF5BA8160DABC41DA079D
A4A751DF9A6109796D1CA32A8210680952D8626EC38ED66F5BA40968213B2BC6
E34C64536B4B9BC7B808FC7D29B548CD78AA6A6FCF07F42D7BDAFA02FDA142C5
2EDB1CEFC22E44808A44368AAECB465C0AD128085AE31D620480D82B5151EABE
73599E66E9503BC8C9410138B76CD997DBF24629B486D4388DD8FDC63493D8B9
EF33711947B65B0C07BB7FE129ED8F3971AD80915AD23EC75C7511B956691BA9
E1F3857AABE95055C07755A6FCCD5F7F6FBCEA3E89A36BD5D28C5E9AB0FD8762
0B527100738DD02FB92820F84DC9A92E3365F93DE35FB61FDFA5A4C78E426D6F
68DFE42F76BB3F6AAC7FBF7EF0A2AE13FBDCC2812207A6503EB0043EF3CFA3A7
9D573BB077085030671EA04152296A8AF5EF0454F63A305EE5DDDF11135A13A4
4D4682188CE782C3C1ED4E1C481FF3F7E0CB583C8605FB1DEE02FF87238CF892
773F02B5D41FBDED8FEB58A06037A79C3424E5640BCF39A64DF410E3356C17E8
E7AF67C80855E052CE1A0A894E471951730F598331430372E9EC7FC8D62B62E2
8DDFA3D3B50E94D207123A5B05FCAB7FD90E2A9A4EBDAC99767FB1901DE7CE1A
8A0168690A2244E27C670035B6582F2611484398B81A9F304CCAD7AAC7DF2A8E
DD79C5389DE411FC4B41FA37916D6925540323301C44136C460BDFB2F944CC07
F6E33B9528DDAFCCA9D3BB807F719563365C4228D7404756AFF88FF10A172C60
310C10F72AFDDE79FFCBAA6606E892B2E41A173AA590B6C92E2987594E99E22D
9F51DAEDF5873816653E5215E436CFC90D7F035B2D8E9D8C05B11778948FA949
28834BEE3A0590E5D911AD061A8C29E5E5B61343F51EA4B67E162F8C15706B51
555E8577D0239698FA963D8E4C13C2C8674916F76CC0D133DFA2A68A8D2F4056
A28280387733ED426BA41D128DC642E7DAA9AC41ADC2B0DC8D5E8B5C9AAA078B
507FB9BE894073228575A9E4DEB8CD7FAB42099F9FC82509A49BD69E7E6736A1
BD7072A987295B3F424A74B47CEE9E6B7DC7DF1BA50119F71AB4967291D8F4CC
EBCE7EBCD51C597C1AF6102197A1C8714E87DEE3F0D955F449CFB1A8C60E5623
4CFD61340010CE1C184163D9D02A52945E0960424D64188CFFDE44E5823DA285
C3CE8BE63E3DFF624A3ED426EA82B9B746C9BF7D75231D82A047CC87EF9BED29
CEAD50C3030B6E9C2D912D00754C1266E4A5D20F55666D0C1357B0953D8E9950
803E1A535DF340836605EDAD3970BFDD1E7200FE6F7730D33F293C532CF67DE3
6BD013A05DB41B01540963159E3EFBB70193B5941387A78C1E733A92C8B97FF2
7348B1CDE90D7DC27BB9E0C33618F76E5C0AF797744A09169D3B1D35749C95A1
B189491EAA6BB8999EBFAAF4EC4224F95B8A44ACD2327257F5D1E734F6C9F5BF
F0B949E663B43E93E23AD43932C02CA9125AA09D290C96D22C17CD43FFA94BCE
3A9A6DE5C947140AC48B22EFAE3EF8FE12D52CB946F1E15E01BCDB6D4CD8D1F8
188BBAA1A71A96F1A32E60F2AB99E8207FFDABC084BCDFC2A202F15B5E590EEA
E776074BFF0EAD54D62A75A2E230F9A250F75CC78935395FA5A15F4BAA4D77BC
A32DE67243C4871F75B38BD7B095FF898EC6FDCA86CBC4FF03E5A602F79AFDD1
254C6C8268A46889B0D2DAC7CE9E40D84F17B6ACCD874320DA41814E1FF110E5
BA8697379A27707AB74F4D4C6C181D1327E6A1F41BAE3D82F7011607F67B09A8
696D9923304DE61D7F5B5320DB4E6C7F70B76CB486438D247D0B71434CE7027A
94C38151126508246F801EF93C280EDC1E52E227F9DBF801CDAB652D68B83D3C
71ECDA1A379AB87A9763A27BCEDE2FDA6BD303F3CE058A17C29006D84214D747
6C4274E874272EDBDCE9C5F3C5C311C11B6AF1691837E92DD0AB240AD925D9EB
CD4FBD89C6C4FAE526E0E880C30EE66110F35069AC8A7D1DD4ABA481FDF91473
A30FD61E80F89DE7D2905DC9CAFC826D461BC7B78F07B6DD2A8E1EA75B4C1FC3
80628DFCC534B2C953481EF804DCA47AC5247A5B626E1BAA25C288812E52B888
790028CFD863F8BCA50FFAEBE1B502A18A91995826184B47F895BA7E8B1CDF91
9182E894459CE06BBF37291298D417A76DA34CB7FA6F164A966A5ED168A3F09F
ED3ED2A4C9D1B5000C612CD219E8F7ECE0FBB489E650376B2AFAA7986C68F5FA
BE7C94EDB0AA8EEF6C5C1909752C7D4AD209B10DDF82119E5857BE983FAA6763
CD28007FB25E8FF831DE5EC5C319CF04F2D91A969EB0A3A469A78FDC06810D5E
BECB0117C095C336A5B927E9782AD89433C33609C86F7421CAB90597FBF7ECEA
4E13CFDC1A188FE10A825C38F1052EA5FFF098139E2FF0E8703FC99472D930C8
2D1AC0C29497C92E0173AFB8C5A5274120D3A55C07E68E00FF0B211027E7B0ED
4BBD2F28B053260CEA7E53BB9E2A3B2E2B2063C184813EADB652C36B943D73EF
DF4D2B0F60302657F3B8E1D9239E011C17F0515DD554D5B0E914CF62C5A5E094
CA79A6739509233D099CF9F1A92B02236F4920146711B12632DBBA55ABCA3B51
451DD6082ACF7BA27356E759FBE5101921CF4BCAC80CA2E9253C0411FFAE84A6
B3BDB608AECB650041A9F7A394331FF25D54AC92332CDAB1F569176BE201D5FE

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic8-Regular
%!PS-AdobeFont-1.0: LMMathItalic8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathItalic8-Regular known{/LMMathItalic8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic8-Regular)readonly def
/FamilyName(LMMathItalic8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathItalic8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -250 1110 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD112356772A65C14D49D03C7D456E5
1A27C2ED815B30E268B02FB1D2E769067ADAF25F28640307E3A89F0B04F44A1E
1392A44B8AAD82CED1539B6A9CEBF441EB81775C7EE4CC12313F31FE710DD429
4B1955DF2BF7A88E1EC21DA22A63BF63E89C913EC01EE10A0601D6FB239DF59D
2CEE7667F4CC4BAF660B24F635F981638F40E8CCF07F21F5B5FE3B5C115D1000
0E4B2ADAF7B1C53935EB7414421DB49A59F82D98D08351CB0BF0C06DE836CFD5
42D68D51AAD4069871F257AB7733F8EABD731FF9B0E3AD64000BCDBBEBE26F88
C96730B45C14458F42927E24318A97B48235E5FE200DB40706E9B41AF7CA33C5
67BF7766BD396006C5364D1E736B256538E5D163CDA75C4F419620D5BE5DDEB1
F7D7A55B5ACEA2B2EB4B78997398C7D38B3D7B5774D980C087236ACC7346F518
7607A19E85C83E2C6ED4F3FA8C15B65FC3D117BC5E3FFE33A5B7A69F7F7159CA
667D96B5D03E4C5E55FCB1F4E2148B4B8DA87567988F07CA181FA6A3C3C30A33
80AC6F4E92903C47BF489A2376AC02B00B8CD01DE080C96A452D52B4B56F9520
B85062F15C4828813D3694BB4BD3512541C82005C9AA5C065476148A4E47DBD4
580CB1ADD206D19E7D653E2690FD48B252BFECDB2C64C96F7477B2E5EA0593A9
84841E96F931F01B2B61C26E8450D5F2B37B51EC364BC2A1233FD108DFFE0F00
AE57465ADB0191B38D14E89413FCCB77A9FCAE09F59A3F5C352570F7390BE91D
178255E10C02CFB7B679DAF86EB351BDEBB8A7D4DBB9C65715A1355FC8D2C355
BB452D44AFDF7E25676F3CB3A677904DB96A4FC7509374E544FDFD4473683CE7
52445AD38E6F3AADA886EAD97F34E1B4DE04B482145F39350CB3BD73F6BE22FD
F714EED60CF92C851335C54AC440689A9CFB00470F98FE893DC9FE736A73D749
8A032F336C94C4C3C0F4ECFA9007FD8BF48AC4747D6A07A1EE6BECB17039FF93
8277AE848F2424871BB26E5F9963F3C6022BCB476ACDDDC00930BE769752504D
9980BC8D8085015695A4B206D94F9FBEE46F6B6338DD6CF29695F529C5D7372E
F249FA9C5B267A504E92D83012209B6A453DE2357CA4D18096E23B75C676FC8A
17C8047C7BDA301A3FDA7F3A8C08534424CE824EE2C0C5D132FF52043CA1090E
53F371F8CD2081A7DCF6C4D23EA8159ED1DB7774C23B6540540B7E0F3A7B8EDB
F4AB33DBFA1F4D3247809896E904F3EEAEE288CF33160E6231BEA40513182831
E33921DA5D3F2E4484D88CEF40CE313C8754B85231AF98893672C3DEF7A733E8
39622CCF9361593316FCA3E6ABE035F2A19ADAE811C74EFF3A0FB759F08DB739
0B26AD5250D0C6C61C210C8E6721BC5514E18BFE38E0CE79ADDF7809B2196708
B412205FCDBD5B08C6ADFBC2E20E1B62223A7A2914E413A00A993F5542355968
3AA301FACD379DDDB1DAF3EC66FA0B727FC6AE134C01819BE812383102D906D9
36C579733D7270243C367AFBB76001E331CFAD639BC4A5B134D08DAF80F9403C
AE2EFBAEFD9CDDB5A1D5E9BBCF46FA3AE7DDF8E169FA4E0EA83347DD892B5A16
3785EC96245A45B4ED6B5BF9F0750DC176964C0089676139B95B6170A1856367
EE3FBBBB32173165363DE21EF673A9FD8F1F6D3906315A09B88C3910BC113A41
10B17E7A2D7E4D7B9F3C55F19F4663A1D97FDB790547FF23C860C2CFDCABB5E6
428AD036B21CD754133A2722778B45B63E3700A128E7BDDFFC28459FB0A22594
D4F72E5FB7E0ADEFFB8C9D1A6570919B3F4246DB26456DF3BF35FC83A46006C3
564370618F60AA3A85021CD0CAEC1E3AE9A2BAC620ED2A12432CB1FD2351BF27
F03DCEF58B7EAD68370E4A0A6FDBB0B23809B9A42F9ABF48FD69D228F722EC13
D6CD3D48CCC712D8FB65A4B85073FA7C70A3FD3F1508DCBB9F314375CA2826E8
82D4FF6143BB5933AE882A540B806AB197B102B3BF7DEF41CA3B9DB089C0995E
743FAA61D49C79DE4C9A09A5DE47786C8929492CA2A57E6524BD91E1F1638D68
35AC99E993CA45692C4749F00856F449A37259EB7338CD9BBD4D6A6C511D65A5
02CF8A6A26530A92BBE9D55F80435CFE53C42A448D264AE1EB69ACA97D567E42
3F8D1DA2D4907656892B9606E8E074B674AAA82E7015A4ACE47437E6460F2E0A
0A2019680A7B179FD5282AE9360958562B36B72508ADCB7EDB2C1FBE04ABD35B
AC1D83148B8631295B43365DCA73C4CC39C2BECBF206800C66FFED88A4B43605
69359780F65D1E20B92F2E8FB0BEA34127FFF55CFD21B49FF1C3F85584FFEFA0
3F948F3546052E0C838C037C94465EA86FEA0C9F2C1FC76ABCEC5DF4449BDC31
4BFA8BDEF270EF47D90B987858892074DCC43007152ED081D7D43B1F20A816D5
43966774BD9C12D0DD0B8DE7151EDD85C378FAC7F22293CDABF1EE4D92538A56
CF61E48A39A6539D81DA6FDA7D1D0E4A13B262BEA6FA2B3DC9AE37D43BD690A0
5A8FF1E3151070BBEECF5719A11088D38E2F91202069CBFA32A3D854D44A0A97
07A86E708FDE273E6C95954378FFE0454C62B4AF889342AAA4A56BD9ABFA4E34
4BAA3569BB61AFABAF2AA2CA5C30CF7917343551DA825C1044190A1FA9C63E3F
3A1F53AE18C95E7AE3D0951DE91E8DE214C34CB909333026839D9071CD573D50
D7372A834BFDABB878D1FBA0060E47883DA1BFF930A5361400A33AB63B4BDCD7
F6364BA8D9081A6F83D9EC5CDF5AF8497F2B3C406BD765D0B7DFDEAA843E752C
917C77076257E3B7B2E43AE18CBED181F92D0E62D1228E36107B35FE2F69F817
1C5ADCBEA1644A15A168F6352A51F0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols8-Regular
%!PS-AdobeFont-1.0: LMMathSymbols8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathSymbols8-Regular known{/LMMathSymbols8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols8-Regular)readonly def
/FamilyName(LMMathSymbols8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathSymbols8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-30 -955 1185 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F035757560E05960E2C327020FEAE317
24C484AC0CD3C1AB9CF35516622A022D6CB83DEB8126DF04762C901617B35492
98158049D5C65DE86143B7F36D36233A115C36DF60D3C55816B2B0B341102AF0
90D7D4E00A7611262CCD366F870F0EE8175688261513076B608C7E160A9A79BD
2B66E2E2A89CBF6D1703854915ABEAFA09718FE338924B5AF1FBF1209786AEB0
0026C38A2C7E208E6C306BAAF037DFB0F3297EE1ABBA65247CF72D0F78A9BC24
038966CE124B94487282B69D6BC0B5E17441DA55415B5369E451E2B0D705FCAF
3AAC6DBEBB8AB0313C4C201F851DB96CA9EB49357C3C1AB73F0CA2110C994680
5AC8F0D760C03F71C92CEC2E1A3AB84813D389BEFE7E0C28FC76FCA70704BC4D
159EE8B490B95CB09DD01A4122A686AFB8B9C69381C8C303F9A3B695238C3BB4
CB44B3BBE50E2BAE63796BB51D945469BB75C69F7A758180B77CAAD2CFD5951A
23580A3D45083C8368543DD37AB49705B939804C12D4BDFA730845F7E42A6C9A
B3F0A376F44DC297393B85E8A18C45C99260BD499DE599CC0D76EBE4AA7D70AB
348FA87CA9A1000814C4FA99B4EBC35A0298AA29563B030707F3EAD9FFF7BFB8
3B347C4A00BFB392E79B79F413E67A73FBB006EBA896A65CB21BE940A0940640
34E08FF806A114ADD3FD42BB394F76CC77DD869C46DEEE20839C9A2FF73B840B
0ACF238D333719F5947DD4C39B8E3F070EEDDA1A39D526319828FA9F47F03D8A
245D8E215B37959566D26DD98185223E4FEF01676650EB4E26C0A425E6C23C50
4BA94BC88E08614769C017F6D4F14C52D7189D4AF8CDA367D8B04CA8D3F2307C
0A7A179419A80695912F456637F539123745CA8E696E250E0BA6B7C6277394E5
98A8799C29B6272613C152B0CAB05F3C7795791EC9AF2BDD416861A3D13FA858
BCB6ACF5BDE40E5DFBC1A171A7280E8FF4AC0D4C8A2199E9E2BAB5CB9131A76D
EAC166A7C449A549EA5111F1750CA2C6E1EC6F00CB6C62BA52D17FC66E06ACC9
1E6B858F9393AF9AA5E69F799E01D301B647DA57225C2920E3BCEE9D09CA5C60
F22B07F24A26DD8F4D6F9C78BFAA8D12A21531E713B80CD03A5FF4F3BBA2AD82
3BEF7DA8C97C30F1452006AA3B1A168483F6EDC4089ED02E567923AE6DBBCCA4
8C246A080448200C2A29C34AE6255BC79B73AE14B980A7C357681BB0962894CB
DA32FF2B70B21AF4D158E0F74652684A7150D0967F83E13EBBAB33588541AEEC
0DE8C53851845A44FFB46A93CEE3E8A0263882542F7F103D13C367EA8E1ABFAF
6486A9DBF6668550BE7858F5790BC87C66492C0FD34DB08EDF842E1AF58A09B0
85A9B7FA402029FE2439769D67DEBDC8AD8C861E90E5322951A2904FD702766B
36916DBA8F9C96141BBF4788FA435556B2B4E1B37DE4506ACC4224CFC00A8F83
33941A050B51B9508758F4EB2DC074D799F5116296B8822ADD743A043F9A6426
88D10767A9F99A072BD4C88CB579B34687BA4953B96DBA29F33211B12A0215F7
5F2F873E5074A7D593DAD0EDD97270FB9A87BE870321A49958B10E32850F0148
68E0A1D795937E61D4556BCDFB7F4DA63A884F9B4B07801D30B1357C3432D6D4
7B72B7D6040410C194EE5124ADFD7A40914BF569EA1F9CA8C8897E839D262395
5EDB3E97C591A3A5927DAC229EEE864B8C0F79ADBF88C0E6C41CC70D9010F07C
1CF9C05960E34FABB6C5DA4D789E39F35FE01F0B22BD9C63B3098457716D6B22
5EFCD0A960F3A2319252C7A0F73A4770E056209C14D721A714D713D5F2BFAB32
EBF815DDDE792B2556A87C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFB8DD9B92CCD508A09171BC12C8ACA32FECEB20
7CAA1C2C81ED075E3EA7E712D95FC612CF97F3402658E90924C75CA278243C52
D4E02E8224F197E555143D563819EB1ADD2248C18E02E18FE3DCF624E37ED993
3C7DAB05959E694040B7EF5F92D80AEAC2CF58EC01BD61D7CB962C4EA678C5C0
62593DE423E11AF90918CFC6E1E8F9DA428296FF0C92CA794AFBE2067C46264E
EEB0AB0FBF2EDA1A8420EF654A1D4E0A295D1DFECBE39D9FF712C85C748311C9
CB8695716F72FD4F80E77DFD7E01E9FB8CB1F2B5971940EE4E7B14727B086F27
E43E6E3EA6EF0DE68E17C9C0F050085274ADB56BAAF193211E48D1B82FE44A59
2A9F5FB13EACEB54AA027C1B87380F9EEF9D500DC327702B132335FF288ADF62
578F30CDCCCF826E4C4CB57B5D5B537BD2FF89086BD0C4CAE557ED66306DF3F5
BA9D1007C869E8594D4138161162682A719FFCB1A982A5CE8765E2681E64B8D8
4A7CD7504E58CB81D0EF03A3EEA97D43741F54987AD65FA54A1BD682F7EFED16
D35D034F1AA5CD4EB628353F1FFEBD0CEB905F10C183245F1B733C17D3B854D5
3BA686CF4088BC6C0FADF9A6C05BE3499567E930F710682B8954108AB7B126D8
255F1A0F1BD08158F94077D191F62DD73838E0CDBC99204AA6AD1309BC5668A2
A524C6D1C68B4E416B248A6FE29A67DCF4E1CBFCE603260A277AEB7F75627333
3E84F341637A1BDB292EADD055C97A12CF0B915E39263AA9F03B21C1F45C87C2
CCB12B59066B6DA2CA24E020A0FDDCC0498D74594AE3ACB0EB4CE7727EA32222
07E864C7F39773638E3BD2FDDA11C79177AD0A23CFB7F631E00CC979AD410F81
3119C0543E091E4820C12FE47E3154789E02FE363C319139350F014FE8A785A3
F66FFAB8D8C9E7E26E49BE5FE558491D1A57B150A5B386F7ECCC0EE8E31695A3
36BCC7BB9F7FB26DA3444238CC33E2791CABC1DCD0BFC3372E1DE72D93AFD1C8
E2635A5E428AB33E24E81346D13A9377EBEFC6206D372675CF43235722B50C78
8C4A02867C68BD8E5FE9A45653BBAF2A5DCA560DB5BEE7054FB8B0A13AB598BB
C481A3240450D1453A1CC1054A06B962B7E28A73BE0B2713DFD32DEABA293EEE
AAA8C0409564BB1ECD1249588C18D01D8AD4E0F0032FD811ADF35B869BB210E4
4A57178893AF229268DC5375F01AB676E600823FEC28C30D2208A868EC0D01B1
4845736F9DEE02D06634547729442ECDC50C90989CC881C3D8E85B76FBB10040
F0DADEE5ACBDBB43307A30FDEEE5F77E621B130E4B824CE23100BC08DC65BDA3
46307E3BD497D7F1E2F51B557FEB6AA32E84F5E55E5C12A81B73F370431F3842
A1B0CAFD4ECE7F0DC8E2A6D644CA8735A4E96445BA9CEBB627718F858DC051E4
3963ACD7E7868CAA4488EE815D40E28CA54C83221810546F0009F98531353C9A
8EBFE7DB9C9A120C2A4E2FED0E63F90B8DF65026707BD39B489E54425A5ED877
73C6B3A8ABC8ABB13ECC3B249F1878A8F76D59596C63BCB936321589906AB242
14F3C046A1F210FE287A8192CBA7D2A89BBE7A7B2DB6B1E19224F04262D6403E
3B41787E1449587E28093E66A9837BB94195E3A4A5C17DE6823755F59BB9E3A0
52F69C7808FB657D9270933D8B167D2575CF146336BB1C76735BE5CAAAEDBE98
C69F89E7E71474CFC7515F73F86727442EC24D46F92C99498946CAB6DED8F5DF
0540063DEC2EF3F83AAAA3F4F68A8E892C3D0529A466C6A310A6101223949B01
79CF7DE6B550657C91BF3116EE7F85B0178B3227810D99B48361133B54A6DFDC
872745DD45766283944D7293D6FB1B42BCDDF2F241AB267897BFABA39D0F2725
E0DBA7C8CE305DE7C1B59DC2184872FB99578B809358856E4E99B28E138E2DB5
85CDCCFBF2B46F01012CC94E2FB30C1E4411918E892630F2AD07EFF1919E9BA9
0194E24A69649F0DFD0046D2EED7AF90313E70594EB5C354023BFA07912408F1
72E39AFA29111A71BCFDDA20BCD6006B0309EF09261B7AE1C67BDE0D385104C7
C0730BEF94DF3D9BB2161C7346FAB11805152716480C0984BA13A8433ADBD629
229C446AF84A690F56A09A84EBB1CED5515C36F2798A89689BED966ADC9AC306
D01B6E24DBB2CFFBEF205FC921305B45B1B8FFDE2A09CF6301F485C8B7DC2E56
82DCE3042DC9767C407C0DB4D0FD1A4881A34FA0EEE7810D69F2428045CD609E
23CE37791362950FB435D1899A47E6E69EDB17BC08CA1B092D4F20BE1AA6BC4A
9DEAAB1B74EEB7B908245CDDB7A093C1AA307DECFFE53A1FE54984DB1360E320
862F2CA6E0258507C6D3DC1DB94102FB88F631211557D3A4F79A8E5FDE69B1F8
4E9FB2EDBFB4B8853524F58D4E1EB98EEBEF1B6C2D330B1CFC47ADE896255DE1
FFA8CC1A09D26342E89B9A39149E124C564C5251F613393060892D5A51B78BEB
3E44B78C50316C61B6FE484CE582EB7FBDC53D9427FE267051934E366F7C7B2C
ABD2C65921B5520C6F70C1B6E7AF8E11BA4798C1DD2EB7D4F962028061B71099
8E5EAE433D8A82CFB15547B339AF376E9341FEB9433AF21E8D84C50F75043419
1ECF16684180B65D9CD4C8CDC57A0BBC0598B3AB03652A6AA459894E119B5356
CED765F73F6935478D5133B9E761430A39CAB0DC109B02A80626A9ACD7856ECE
4D6569F5D1D918A30005C31F177816336B74AF8B9931BEC0CAC75380C714BFB1
BC100B05D19D7BCFB18CDAFB0310935E6C7EAC6B9A8134C4E8F4969C9268F7A2
C306146CEC5039310EF1F4ACEA1A40014BA27BD58490D24B7885E4084932266C
621A42B8A3139CE953DFA9687BC439A31644BF123DA78DD615C4287ED7DD43B6
79CAF0EB2F9F428C431683A41C2C61A429E3DC0D87D76AB6294CF8CC9918A6A4
6873A1769ACCF25B59CB4365AC451FE1D956E1254970C706438805E25284C7CA
AE679F2B7C58BE9909CBFCD273EF5617183CFA64757627D2D567877FDDED97FD
7C9E73DE4D6D4ED370EFAAB4E52F30E55B902ACC35DE87E70DE8EDFE7D803CB9
B4F8D58998C2ED6B93CF62F8E991B754899CE46B900DC93C5A58EADB30BCFFA3
A71EF23D13FDAFE72642854A3340E64896CC6DEA0F7E3AF4C39EE4E68AA31889
A372F02266FE65ABCDAA308258FCDDD13DCBB18E462B56F956B94CE97E870122
A0A46CCFD6B4158BE06C768C73F0377CE3F21E030748189C553B9F62C83765B0
149330C96EC3496F9F2F9B289307D7E0C33BCB7023200FC3221F12B5FDE01011
87BBF9960E56CAA899438C90156BBF2B14596F131B71830D84172E7CD7C05B25
85A53C7CB0DA5729FD6CA218A1CB03FCB945FC24376A45F2DE0C21378769921A
72E46589CC08EA87EECFDF36B819B07306C448777163A723A9E71F504DA5D447
AFE8CFDBD88089FA4802F449B477BE528C3667F06EC5479B0824B87C47EEAF1A
0A23941B8257A2A5EC3F63FD62DD09890F4DF33AA1E70376A9CE8E4B6C4211CB
FCF9709AA29144F3A40001AB98BE816619AC543753969AC5B540ED39E51F5869
98342686761A7C070EA75140331D7A0DD5731F0E395A6CB0412028C2FABE2E9D
C3B57F412A5CC05FA7599948E6B8B50BCF16EF9825F6B20090E4D6280C528375
4EBCB42B38B7ED6634AFE0B2C249699E212509817638845B5604BB526053ACC5
C0FF6206B2953C9350E57657B374600DA75B6B271326A2E7B313EB4598DD7FEA
4A5D95437CBA46D85A5EAD76FEA956126B3EEC337FF78D906699CB9CD7B4012C
474EB33D12DFABB3BF569214525DB9B2D4B34136FDF936F96FFC813FE16DA5F7
9B0F2B3110B1F8C90170E014FE8F31A5FD35CB74EF0FA13C6DA74D7264618562
DABD7DB8E7F480D0521581902848649AD3EBE39E618667C59EA499B7081A0844
B6DC10555D27819E6CAA1CE453A7A68EF1A3EB2178BBF9B9BEA9DEC679DC10D9
E3553DE260FFD590BEDC71CA9AD4AC12B09E86D933AF49B4CB901556E63BD639
1B3C3C3C80C46745E1CA7983B9E80168018E04A84AB47C854C73FC58A393974C
1AFF488EBB29B293905951355C4D4A4F65BF1A72956515750DED0B87A8D3282C
72C634347874775B6F29EB873134F6BCC2EBBD3703E9619F762D64128A18C957
22E6C0DA907A17868AACF3229C176FC26BFBE255AD62737D234986AFF04FF03C
1DB4D1F2D9F60CF2E4DC5DAF88EF3517A2D91CCCBBB8753F92B3E0CDA5D26523
B84CEE3A0429655F8F25C89E65074A52CC6047885F4105DD62F1FB8CC7A4CFE3
22EBEEE15E3395B062B933EB55FA589373CE26568F78981B480F688646A5C8C5
63B8FAAF19A1F6166685C3FDC27532C931AC8B86E81FB0223686074ED596FA6A
922B662575F23B53B7C6B245AFE90258E743F284E22E30D2B418CAE285AA38F9
FB436D39371781DF4FAAD1CFF3BFEAA81F5D11DD76BADDD8122A4AA44B9F863A
DF8127F1FC35DB9CD34EBC684818AB259FFC3C7CE34C9DAEE69D70D010C70540
3B359BDAA5B9ADD10F6F7F2C19136157C6D83B33313266F1BA8B9E065A0C831A
47D767D4558876E85ABB0B8396FEE0C3327CFFEE23D0D7C24466E5410DD289DF
78C335D2BE90B5C581D536596D97F1F463EDD0A9C0118790E5780C0AC27A05B6
4DB13A023A3E5225E0377ED38749AE1F7714AE5E1D649A3AFCBBF060F416C0B7
47EC5BA54AA743154084CCBBC2A47037DDA09D9601412F731039746C1224A29D
191D9E221C06A7EF3CAD09AD5ADE65A51B6A915CA708D66C3EA93A0BE63CDF0C
D9A4546C9325291D11D02F4C2284918795A5B6E6CAA4CDA0371D452F65EC9097
657F51E83FCC22A30D649B80CEFD9F6FDD51AD33D3DB732FF26650A90912822F
9E77D8AC13393AA1B04DEDDF6C37B2D1DE50258300B9BB455AA872810C7948B1
EC866883E78F23DC9DFF60701F4F7C66B61198F8066DD493031D1A5EF91231B4
470B5A034CBA00791EE592FB4DAB538C280A8047F6290E265C8A88331305E67B
EEEA9A03950593605886E125446E5CCB325BF943C3D7F32D49651F5744A27DCE
6004208003A95DA1371E2EE456CC692DF7B71EAEFA2ED09E82012484AF7649C3
FA87A3AE44D93FB7A0D1A7A08A419AFFF7DF7065992B084D567645EE4D2FC29A
888E5E51A42920248E4BF77A7876799B1FD856AAB0EA73DCCBF7FB5979EF5F01
2CAF413DABCB3290E29A0CEE18F02BF93ACF5E651F75F1C47F2699BD0DA86F7C
5E18E1895ACE4B125EF346F608ECCD4DCDCD47DD7717EBC78AE3DDEAB5333174
18A8E967F635ADA03D2EFF80D463A521EB069C2B6271FD736442AF38A52EB58A
59D7A62D97171B45D2A6AFFB7E617C9265B466295CF70CB228FB295850D653FC
3FA379FB4FA0AD9F83269A99D550366B880AF05F913C074EEAEBE390144ECA2E
ABD1ED2BB6C54FAA70C9BA6C6794E3AC06D503EE876C915252EA75E6FA113380
E4E2A0CEA310D96BDFD883642BDB55525358ADA70C5ED0923B060EA6EEA5B735
D0D62E41842C07B79C0E8DC56C55084EE590D2BD58FD9784BCDCC3D498B69CD1
D7C24466E5410DD289DF78C335D2BE90B5C581D53AAA27CB98A914D22E25B41F
E35179D5E020790534D6BA1670B6783FA8DBA0D35DABEB8E162D2EA2ABCB6CC8
DF8E44430383881E5ED0F7F184DBAA9A394D0E08138E5B80D224D4E8FD6F8BD3
255103D823B86B712CD58FC2FF2C9B963C235A59BC191B84B9B6A2D87B85F21F
39F33AD118513BBA722CA46E21F697AFBFEE1989A09F9F9F7F29C1E0C0F28E3C
C64BB4933D3AECC99FEC69C3B047482C0D6F22E851DFDF1315C0679C0906D77A
B2144E810FFE3A942963C9B2584CE14922AAA9E3456AD60EAA44317BAA8D81C7
33BA78C0DEB8D1A2C9BF7CFAF3F6C87EFC09B43D790D3E80AE0EA0AEE1984C59
0DB7EE142C2444A3F4DFAB0C651407A58102F825D9534F2C1768DE55DD354014
B4AD13F8F95AB9B462F7A5950046C9C4A8CFF3CC3738D894770AD27F2BAA1A8A
C49D55D311D7B27E77C664BA4DA424125D1735CDCF888572C3D4E2F0230BB1FD
DAD562E249FC2F1392F7F378BB1754A2E80DE0D9FB55FAFEE3CCC1C812E9FAC3
31FD70975E3A0C72D37207D8A6034994F5A338B85C4ADD0A28C7A8FB765C4A04
DDCD6E0E7854CB47132679FBABF1DF31D16F8FA295CB56D75A836ED366963BD5
7A5FDDECE89ACF7D2EAABC3C655C247E6AA58C7B3A65D90C4598DE6DF2AA81DF
1E7AD672C058BC13013E94942CDCF8E20DEC5CD4696759CC337B6514AEED350F
45EB766C4ADF2EBF18F155CF537A97C212FB23022E75D57D24147D284196D0A5
17320294E3C7A3A1A1BE80ED8FF0A9C509420006D2229CC525B2E21332AF97ED
907BC5FAFBAAE31FCE73C77BFD275F6CD038A6DB9EC1FB4AA5AF31A16FC07D58
F6AD35B345BFA1CF7B0E9545795A6E62188B643BE9FFFFF69BF0E7C694E07807
E04F51013AA2E2215C03ADCA175FED41854EBA64EA1BFCA7B9ADFF7F4ACC6DBE
671126FE078F52AB62DB59A9B9AD1018F245F33A42CF224F327CCEB361EF2E2B
DD7DB751EC8C146E17EAAFC942F80C2313118CD80744B1160919C81067D75442
072E34982759C289C8F929334930B4AAC76A132C32DCBECD227134E7F747AEFB
6809685156270A536E5DC0236DA24612993121152E7E72353B4E4A19BC80F638
158DDC1B6DDD5CFAA56386D2232E51B3AA708541C4671738A1E0CC16CC401640
5B0F10C340F24A30B1C3E6AD87C7D4424486F4D2504B044E802A8B30DF26FC38
1D8D871D0D96566F0E4910D17124056A1F0AD7E9C1807ADA0EE65BF63372B918
2E8CE99142953DBEE0C0104B1292A1F83517BC28709D3864CA389D6CD1041740
7AC6A0DDA1E77D37AC83F0991A4EB1258E47A4E04D0DC15BA4F0C1D12F27F5DE
5E37A07F94A89276B909954466C7032C6FD3DE6ADE20EBA3FA90A309230B93A5
B74FF64283F15EAA51DF4C74CBB662283EA2C98CCAA3F64D2E64AB21C48203C6
08CCC92CFF820CBFE005BB5D4B098F3CC567E9DA9952F5F95048B505DD5C1BAD
049517C3A95D471EAE9D83E664D7CEF78D51D427D2A9126B689964B87ECC23E8
3F19351612FB0B1E70D91934375C410CFB8AC6C99D8665CD7E1CF880F99229AF
C16232CEBA6D7B35526797A8C94EA0723B3062409182103B078B6D4120137695
A8BE5DEC8383E556D1067F2D10E43F158978ABC35805453F84CC5EEC991A5CDC
8C33DBF86934B5368C099B59A7114410C608C749D1B7D493E67EBD9DF99EED9A
ABA70EBC005B7E807A854FD70F27639BAF68211DD20AF3D34A3498F21B00999A
CC476DBE2C5E7F404E59340CA51DBFEADFF2D6856FA15A36EEA17FDFF093D02F
B419CDEAA8924DD923B74F252664C67CEF45743658D8D43AF001ACCC0284EE83
D6B900DDC00EEB5E881FFE9B414C45B06FBC491330279C671334298D0621D516
6AC107F3AA081661CB91E004CEE7220A24C71BBAC196A23123BB399318B4D2A8
36F88D24D6FE3898D6D1C76D8F8E2C75D7460CE135C4E1D0349033D576ACDFF8
68AD600D610E32BDC63998EFFBD8BB34D2423CC6282C145F3F0029A07BA8C929
7BF8B0B016EDCAF80B9043EB61A3BA3E78F64ECDDADF68975D97F94EA8A698A5
CA287EBBD5193878AF0D3EE755BD5958FD3632E670306CAC950F8A1F66D4720D
DBEDC0E0857B057D019BB4C3C1C751481ED7C692CF08BD1EA6C5B30BE280953F
B8FFF50082E28A8D951207D7C494A7B2784E050A11FE8B1CC619F387E700EED9
D0956AE651C28A61DEDA9859E01101F5604685676CFFF64C9F2630CABF2F83D1
37D226BD5EF6EE8EE1EDC4194F1012D8BB958B6940681AEA50C7C8964FB0F377
23C0C4BFA4DFE3FD4AE99F5A8595EA873728E2C8B6D05AA6861E3ABED84D6761
ACEDE777F2D3BBF85031E42B976BF76149CEE298FA46B57981087E31FA46D2C1
91A16ED86E07D8E45FB322FD0B3D25692D2A0E7C4DB93BAC55016AE065951347
39401B0D8ACDA770B340277CE3950462318057F893A50B1BE89222348D7F09A7
FB9144E9162A946DFAAD95EE0B346EBBB899F1F37A0F89D4DAC9B7B0F3348A1A
FAAE48BE88E0E16B8E376035D6D75C10FB83D7B0EB9DCE189314BFC6A128924F
34C083E289918FCC37040DD4771C1218921FD978D54413617494E68E34391E25
42903355658BD278E67696161CDE14626D101B4E117C63F2E7A60627DC40CB9A
B1634701AD9AEAF5D11607A783874D716DC73DB1CBA45D33E0076E992C7DACD8
026D7F4C5AC1E5D796C0E5A79C61B5BF586A0FFF6BD2983A840B68D656FC1584
2D694DFBC7D7800CBAA90F3BF0022E66A54BE1059BD5D224B674AB4D2AD930F7
F724A305C4DB7BBE9E3E9D166FE9AF6147A8BC97C6834B365C39F4F5C39DC16D
F38ED4E2751BA59C0E9D7A0546E34F8BF633F656FE32F1FF453232617FCB7419
0A46165FBE654065FEA56AD83B17114EC5A7245AE7DDE6217581860729E94F76
212E186FBB34B7174AC5294A0D142C13027301D54E815921B749E8FEE0AD1803
E4DCADDBA121E96EC75C62DFE3F9C3A21CE1DE2CADAEE76E1540527E73B23D9C
B14BB0D947E557FBBA38173BFD22C8F111F56D53ADC64547BDBAAA2E3F29539F
B7F8E16596FFD4151B332C718B173639302937C26AC08DA98886993EEC7A8FFE
EC357A8C415C57CD2B4FE22AE09DF3F3600FE89631FCCFA1C86D5643C24BD5E0
5B7DA8C435A28EF529B15DCFE08B3574C57A259F5454A017C6ABC65E4BC733F0
35FDA08CC184B5BC0E46E0963399EB3291F47FA0A05D57215EF9299481BF0E90
0A54D9B875E95CA8166B84CCDE9FB92FEF1C849740C8C0F00248BE459F80EF06
7A8069A068E7AF13A23EA57E8FC91229AF428F3F75B7DB930EFC2B1B3E835432
FF900607AB5292ACE3AA3E3C9EF2EBDC85F22E08AA5E8F73A090F636BA77FF93
6714A4619D7398892A2560403D15CE94158D9E0A16224C80EE6C9152843B5D9A
3073EFB7C783F938B9138E8C63731B795DF38545036C32DF179C9C72477DC4AB
924F985E05B278C46FD719E9EF7AAA945647A6E362F71DEB775597402FE0EBFC
FA9D92F96615A5922333D102DDB3F48F2ABD31B3BD790070B2C4CFBE1A6DB647
2883C06E249B776587432F5AFD700D89FDFED2693BF145E4A55AD2EAD722B6A9
406A69EC3497D2D84B19F68EBF7125FB02920466AD921DE262F020AC43AC01DB
8BD67102E1322FD08D6A1FD6BA7B596708B8642BB1BBDC37026546E6537F776B
C7AE9B8A49116A09BB7F320F0CCD98F2F7DF378E1BABB747FF18681ED0ED8129
43063FF6F488822C5F8D2F556F685C99D13E33BFB7FC73679A38ABB22E10CD76
A882556090D3FAE75852C3BC7CBDBB5EF23FC98FFDBECC7BFED3DDAF5E31C8A5
4A7A1AC26C140B3B0753E044C784060F6366DC230AD073B3113F6A4435539795
135E468F1B89A230D7F1405B0467027EC1E27BBEC48D51C674C819F2BCB72A57
757B2CBFC6F5D915C260859C43D16849F29E44779264257FFA0AFA05C2842C53
4A411593D10A71D2EDFC48E0BA8707B4D7F7F5C3509C0908A0D0063175D39132
F4F4AEEF704A5E8F6E9AD1631F9E304203D296F4D82EE4D976BA9A90F152D68E
756C29A24A789A87ABF7065175CA4F3CDD7CB1D87A11B6393F8133A84721D9F9
171D61D7971649DC9608442D234E87B1C39D7B72329654850C6ACF3DD244C32A
9E4618FF40C490B27180A05AB7903FB71AB68FAD4E316BD62804CA36D4619D88
81BE42A1034C34F4D728E9E820131692793929CC3D4196A186094A7C7E0DD5F2
3035C5460DD417E0B3ABB83B8833A2AF90EC2DC348618B108941053DFA51F0A4
95337AE048E770072ED026236425D096E84DD009F55A48C44EA029E5A810D6F9
F78F44E6284817A248BC4766A7C2E504537523358DE4A06B547EB33806C4F943
CC8F1342F845C151B62E028C3D50BE01FC9CD5D5F36E28DADB469334B60C5894
5E6ADB0C8D23AFA307C8FE29500285533AB7CDB0D34232E15124C570F82A81A2
DF13EDEEB691FD48E705F80B009ACE8C8887E7F78087F4E387C70D49A0503DC5
2AB23298064AE0D1352C83032739BDEE2639DF94198133C3903A22F039CACA20
1AB53CD6DFD8A090716EC6C0DE45078DCDD901074A7DB0041A57771D1E94A269
173938DC242F0812442BE56459CF58BB905440E0ADF465AA599C0B0869BBBBD1
4E58B7FC0DA6E544394563D24D8C87FE0F2722FBAC78768C49DAB17BB6C4BE1C
39B7DAE297CD9ED4A59FE7A1E816B6722C6BC2F91D9E724CBBD53982E2FE82CF
72A27FA101C2A6070046E22E14FF27872C329C64DA64F101A4EBB3E12D9E7B76
642DD67B231032EE27DBE7A958CDB98642880850AD921A5A247FA60A89A2EF6A
B95CAE1FB11B327396D5F83D54A389FC2172DA93C47D22E22208EDB45534F09E
CB07AFDE14287A32E1F9046A37CDCD838852B2A039F1DFE9775FBAA1495A5727
19400771332BF0117106F088F10DE2078E17FA0A86A5017656773E7A78C61557
B9C11C290EF9B8E5AEA2B840DFB40191270EE3BB9F959D9B7C6C2CE48910D180
41571B8D78EC12E8AA4F627DB2E861B6A448F6772028DB8B2E7A2F78DE222F68
73C2C3C3F9B01526D9D71A74984522CAFBAF6CD275B742D67E1AFAEF79266015
8797BACFBD7CD6FBB41FF7BAB0790F7159438C42FB1CFFCB08B0AA19301D76B7
450D4FDD42654223C32BBDFDDBA1C764174646AD7CF22491D5FC5031E42B976B
F76149CEE298FA46B57981087E3035CEADC5693A284FD65AE53BC897EC7BA644
6656F2AB1DAA4C0CF952EA0D9C4176D5ACFBC48D8A48074357B3298C26AF2C70
DDAF438047D9DA1E8AF5F4C16E56A03037B51E02A128DCC9D51903ED585E1581
310C8DB07D32301CC74156D1C73DC64C377C8A4BF7E0E3A0E93D890DD0106D04
7C31F0AF1C2FD75C48023CC0FB7B49A95CD0CED5367C4DDF482B946E7D76B706
43D0BA5E14732681350D9C4D63AE6E85DDBE826FD8145968FC237F12812D7492
4BFED808777D2040627AFC82897B554DE510D2AA6B29A1F6AA8CBB9B5DC32EDA
308F149704EB45943BF2D0CFCFE2E0FBE21F14EE8754D0547D6A39C314F2E83C
3166AEFB08395942723FB853550238DCB92FBB00A1B5B7AE47574A11C430C62A
DD6CC6FB7D092E77F9848F8F133DFA6D2412BFB5783DB3C0F6D60E34BE594B65
D76B155E7E6C88D2697B5AD4FF8BD03161544EBBBF2A1D8549EB766B8E2272B3
FEECC7E148D5FDA02F3A6FFD57952C6B74669C7D9712D975674948A0C76CEBDC
6D0CEE92612EAF4EC556835774B08B04CBF20D471B7C228958EE6827692FB97A
0DD77737F84F944EE4F182641F051987B470A9A853C1E216348AB87B18A4184C
84556C0476BE50CB2C73697EB452E0EAC3A4727E4071C660682B4DD491C419BE
E7F28684F2C4E0FC0D4D59A75FE8DFEEC839FB3116A3CFEB9E338EF0D7B0FA72
1D7D11990750232B6BC61B2733F80AA1938F0353103DB83CCF9143F3A1A25FC1
32BD31F29F0681E5783F91AF0CC0EA7062B322BAD3C04DF2E82AF19552D766E6
52B80E10105FEC8DBF267BEBD2219D8FA49A6B1525AD2D1F56968D9CFA81E057
F008E10F28A51822A85F52582848C4324241222673064F3BCCA1BE7B257D8041
C6E9DEBE123998F9048769253FFE799456B6E5B9BF421E82415746B363938E88
CA30E4D567B68BD03129DFE6B47267A2FA06A0A045D56CDC2C66B754E3D03ABC
8B3DA3F4F6C2DB54682F72DFB7E729238308C0EC5F43DC92B39BC4B2CEB9827F
51E088BEE84F0EAC9889FBF269C4301C5AD39C601FB86D4090A78FDC3A61B057
2821BBE055765DAB0DAC8449427E9AE83CEC2CBB0F5EE165832AB3CCBB2ED933
04D80108A5DCEDBF829531FB2A32A4C0367F3CDAADB9A370228BDD707A5CBF06
87ADF56193C9D6D357122AAA06C55A90405CAFC5E4287325A010FC44DCCA752F
57806D70EABB20332BEC817D05A4BD642DFAD8B91BF0B9EDAC69886326687EC3
FFEC3019C77E70F4D2F5C6D7F44664C00B6ED73698D805B6D7853518F8522B9D
5C229C89D59664FF216C6A67F8D9DF3E4AFB32361ACAB13BACD3E465D094B649
061B789C1C478C407682B48DBE953B8C0761D113BDCE3E6BB97034876F7C7632
A189CF44A025208FBB70137573E138F16D931E1077F87886858AF74DC1D5C7DD
BBA2481A3333A9B31EC7C2C99EDC7BBDFA0CE085C7CFD4C0AC1285F8E759760B
CF5D5152D45E91FAD6A3E7B3FE99CB3C5E1C317DD3AF44E46800FED97CA40252
808F6AEC70839BB14C7D4FD2C4E6057BE5F5C51A24200272625653B01C85412B
F6F5AC854ED369FBB53441591ADB8D2D994711BF6D56A1F0B72D203A7C5FF301
7508DF9821E7D7AE14BA3238EE22916DFC64E9156B8CF2C80FA0840E8FB914D0
E86241AB753C32214F6A8B3B924B6F0B44384C63CD23D70AAD5777DD46AC20C0
D02790EE255ADD6567F59AF6B696839CE77606FCEA4474578526F290F5E3E84F
BD3CA5719BB456D1AB80B6C80C550CDEC09BDF5E10308ADAD0C42A26913DBA29
4CD25E3BBB2FA53D9825348E24246EA73EF03626CC1C0ADEB130863434670C74
8271EF35BF4133E260320CB39E191970C0F0E81DBEF15F134F9B660EFF434CCD
DC96CC25E9F54CDC9E19D9603BB6A93D8EFEA9A41172D1D82E14B0037ADC38D7
A95B1CA9F0B89AE754BF7F8203F0C857CFAE8A868BC658462797316F6A01DA72
24B06AAD1687DBC419EFE2BDAA099773FC7EC5A09403556AEB400D68B231A3EA
D2EF737B1971921741A4F2D840D0F744A1470A7A67AA5644EAFFD983C9197C34
1105B044E7AA81165FA1B97A103553E5AACF0062627895DEECB32E5BAD12A1D1
1EE312E98681F4D4C76D424DABA50B232A8254B034F051838810E004BAD11C17
C7949D74660C459ECD143ECFCCFD9F43D0872B4E25F7C3B591FB74909EE16F53
AB0F444AEC233ED5C726E2A993E726DD72DF4CA18857A3BD1BD163518B55DBBD
DB77866DAEAA53D1D80ACE9C3B873F2050025DD47A9CB1D0192C7D2330D65F12
8C47B2481B73BD918ABF2397E6E9F1316BFAADBA9135D64A7DDEC789195D7563
E0EFF2B4D90FFB8BE2F427D339D1EEBAAD58B0946C6926F13DC4B76DCA2AE368
6F7DFA49F81BA6B221FAB4FA67D091A04004D2AB894E7DCC7BD80F2E8E13073B
30FC32B57DC325BEDF738EB6D550863099C9AE6A1D3DBB5BB7F4F240C9426E90
F57925E6B90462A69B5B7B8D3A9A81B9C92F57789B62A14E6495133A1B3B110F
97D9D17DB56D7B6EC1C3314567C88BE2A4333B1E9964BDA8C46E287B98F739D5
5E1AB926E5F1230538D96AB2484EA11C47338B6E89C99A848AAAF1BD143560B5
59176CAF28B78D9C7A3C481BB8C9F53B99E7228ED76DAF61F3D5E2E4A17D90AE
341ECD71D05287741F6A99089C9BA6489E983B2A4E0340610A27244970757F3C
25CFC3E853E2FEAD8C72144FD3EE6ECB3F8B59115379A09AEAB66EF716591CE3
5A9A501F5CD99DE77FB500ED2E8F5FE7FE5D7AD580FDFE62A9FA3A22300877CE
F345E6A7DF0D81E0B7E4012410C843955AD0B93F9203462F95B302B8CFF733E3
70D464D63141B1EDA0E6FFD1D82CE4D084352E97F0930DD27EB45DDACBAC1620
BCE641230920C23A8013455F4E2CD0CC8D66FEC329D81A7584A5D001C2C3E423
50EE4F2F7C6F4150C4774423E8C99C28166E5FC3BCE52C110091E2FA2302597B
FF0F12D7DF5CE219716715073172190C701B91AD54984598F2AD46FEE3D68A0D
0886AB8829B53BCB319FC0FE2D9A8CF214DC85B763C354E8017B2D6FE644D630
3E71757A8D901A868000B4A48732764932E6242CE5BE6A645C2653FE55D062B7
86BC3C6651B31122ECA9329513ECA625CC1C5FC3AFB291A6B75A593E3D12A2BE
C0D54AB4B6D20E345CE6C281F4630A7BA2B58607A2D369E9DD9EDE9AC14E4FD0
9695BBDBD7994FDB35C5E458C370725C45D5CAA5AD4EEC414B8DD564DD7F5D08
4F814B77D3B6731568486D5A0CD6BB356544510BE20BE1AD4B3E9909F220E99C
367B96C474DF3C2D253F9DCB7A4589A0257051C54716D2440C2CF4262663EA21
6D29A0CFBADF5B6E4123196031705C8B89F0F7E115CAC9E4A605BC8062E675FF
B48A0D1AB9DDFE6A5A10F02B31813B86412505B6FCA5AB5BC8937AD9FF4898D9
706F64004DE7F40568FC538A0EA2E76E1F62790DA67887A9CCDBF093D02FB419
CDEAA8924DD923B74F252664C67A0A944FBDA4B3EF695BC512E973F4736851AE
BB3A3A4CD3DFB898D079614C1B7F05AC96A5BADCD03553A596557D8F00A9F854
2C98DB691FB17E10342EFFE68AB510018ED7043C7A287733031776912B98D449
008C02ADD520AA45C62BE1B20F349525DC3AE759E21AEED1C09E800EB1AD0DB0
4821702D0F93FBF513D7B85603C8A0F37E548174985162D53910DE1DA60560F8
4973A847723B6150CC469E52D42C8B3806FA06180F1EFF5CEA5ACE58B4544EAD
9C73A170572C5DFCC89C2AC26815E0BCCFFA46DF3A00BE32F96FEAC9DE382AEA
0E3AFC6B2254ABFB157B47010714F6F7B0126F2E1EA686D7693BB1BDB187E148
5AF91C22AC891A13A81C3D479855407B719AC4CFD53BA029891E8AF681EEAAB7
2E5F3A5976316C481FA61C4295051CDC8414D5EC6418DB8179EFF78049A3C48F
0C0374C00CBCC50DBBB4EC8284631410D4156C420D073AEDAAB2CDE3633FD159
C855C4CC46FA71B56A2DA46A21D05CDBEFBD8609CCB13F0003D6E058DD67BCBE
96D74CD7A6F592C81BEDEFC264408C6DB1AA29867BCF8BD9D7BD9309E6880407
EE8ADBC6FBEBB247D772B3A60FAB4F71B7A09444BC6C666BED4DDD31720C2077
25C84E675EBC26F583F329C433B95DC6920785A326592D07637DC90B7906C027
72E22C605E9F3240A1971AB1F757694CB3A8E5A15E9A006F8EDBEB4D0BAF4730
0B80C3F944CF3C1D8956310EBC62B5AAE1C61E6A8BB6B315DE7285F1C1C23AE7
A5F5A4BF996E234AF26AAEAE82AC6B0A5F7A74B32846561B4413C38DA7401609
733F47D9990B238122A95523160A6ACBF9C2DE66992CF4DAB3368A64C98FAB5D
93DF8A00379FC4B64991B4D1FE7795ADD2B571F1196A1FEC67E397298427A0A7
A59C4ACD748A13881C130EBB0AD8864E1C505E451409F058BBFC0301087271EE
7DCA9646056D3EC28D85BB53EE04612C6A0D8E6BB90C96ABE2D5ACF89FABF737
E42204D7CA411E72AA4240AC015884EB30C9C000F6505A7C5AE95D9E3450E72C
99406ECD9808EA1CFB78F69F2F4C1262A94F8E3D2ACB0A383AF28C354BD22B82
E32D8BBF1504F8232EF00DD2F3FF5C4868EDFA7D105F375EEB7585683D08F1DC
C78BD17C2338A6A609FDA9208916C644A7C8263F802B6D2B8A73C45BA68699C9
4A7162FA00F6E05E273B5DB89549315DD15AD9CA3BF8D4CFF06C5B946E21D0F5
A799CD011CFFE4C95A60612755143BDCEFDF9812CB59F95F25C76E0550BBA4DC
59ABF1FAA17C5B39F4A20A3DEC19163D7C748C43B33C0CA22F253FE4E3D1E56E
432F655A8C234A3016668E20EC7F2BA3E5D66350AC0FBDF769E54B11A5DFF777
068CCF595927081BC5306B48BC1B97A9612FC1D0DEDF05CDE50C20D2B4169ACB
7B7FC90ECE99FD80496C27174AE0C3C52DE79214EEEDB424D767D0C64F1EBEC9
9C7B9C47E4C03D01CF167B0D7BBBC53023A12C5B3581D8F53166583741122907
F0A3DC00C10F078073E90FBC9686BEEA7F75AF8CEAE50D32464FA36AEE0F3896
A254B125351B5DF203CAB41F0E6C48E1704F311F51451DD607AB3AB682C58106
F3A667930EA8EB9092F0767F0D690399C766B673EFFDF8F0815D7853C6F61278
341A10182862DCA51D411A82FEE238CB19DC5407033A584AE22BB73A9341D38B
1EF6BC34AE92E91E3DBF196F7BACD52EC4D75F1F18FA11E2F7907B9626CA1660
9BFEE67DB56CFE2AEF6BDBB7350D5408C621CDED6AC22293A666201A11EBE968
6B895C8F3034F885A299EAF758FAE0CE78634283778E9C7F438CDF8944DD5A06
583A75079194054F8C01A6C78EAA7D1909D5833FAB8D6671564F796B070A2B36
6EDE5723EBB35773DB0933927DC21081E67E5DCF4E45334DD99AB786A3D5D0C5
AC216EA68F8F7D3A5BD929EB453790B464964479A2AA279225ECC22FBD3944D1
6276BC46A74DA16147589A2D3DADDE9BB1A63A4047EA20DA56089E9DAEC1E964
3545D179D97E7159C9710FD0AEAD6D23C03CD003680E92F0D10F566B7D87C01E
D5E6E499B7B83B95A95C52C13894C9156315E5AFF47E4041A45E57AC8C93AA8B
50BBA0F69C64A315706D38591372BADBFBFB4330B8E71F816068081D325833AE
DA96C0DA8C36DC87966846D8C0539B41792ED8CF731016C85A4E041B6337B64B
7D1A70D83A06C101AB379CB47D6A72839E770A0ADCA647E66B811F82F08DFAE1
979E9ADB992C57D613A88327C3AE4393C1F3EEE76365A67C3B6481CF7F0D9D46
1C91A7D5DD8F584627AC4E6D2B4CE0108583463D74500BD933A54CB39EEB6372
778ECF5B6C0C2F014F43B38058440D82194CDB01A2CFC41133C69AD75946DBFC
C748AFDAC96839397CAA9C23D0F483D155FB93C2941214C2D4362865D0BDD0BA
6044D3F5A6FD23AC4CE9B33B14DB382839AE8C789A6339F7D36DAFE163824896
DC28210A0D274A7CB5AC380B1B2006B28BD56725C2874401030A5F9309712901
FD044F3AAB455EB7D85772D6243D160A8397B5A160648F764407E576569F1014
CFCA5DCFD92F563A806FB4EC884B26DCAA25E29F413C3847ED2E0F52C74A835C
5A785E9623F0D483091D6F95BE42F08A3B28787BAB2D5F893EE00D41CB48E35C
E9C08D0BDC344C70D5D669EF4E794EF6D6320109A4205CFD1917BB1CFA80C0AF
8782C30F4FBCD5010D94DDA30568C75286BC3BF85A310306982406539FD83FC1
2EBA31479C7175C0AA1AE5CC6C35511ABC869432C6AE3809D7AA9B4D6F47B6F2
481AA6A33920FAD9A7F7A6CC1703EE06340147CB1CAF89339AB2D94C2709E08C
BAD9A1926DD364A1D0A4E68D75EEE2C3353D6C8B4E84FCB8FA302C68CE685294
FFE12975EC0DB26EFDA3A69D86214A71153FF97E5F7175E0BD4C2ABA9816226E
B744128F41014C24426A003ED5DD6C3E637CC8580098961CD6EFEBC99973D557
51D40F332A29D194C16B0DDD9A95990FB45E3B2D0748BC071FC691AA2F776075
4D8ECEA334EE267256720D6CE4B73D307627ED3AD4456E3A67BF5BB49920F6FE
6620D699A35821CFE17E2DA671A7FA88213B596074FE4D777E02B1A7D10B424A
89E22465768238A66AD71FFBF5C9832C603CF5D7E61A400BDCD15EADBEDE3875
523CDFFF0F39B7441FC2EC1724DBCF6E42D06B418F7CC6D43D433449346D9761
01B7018BD702271DEE3CA37C242494FFCF3F645DA7FC59B541513CD6FD08039C
F40A1F5B90A8BD1ECADCA2FE214955FAA891C7AEC18EF33485035BD4C47EA645
1BD30E3554F65A2BDBE89B6F6BB32B219D9AD46321E7C671EA573815316CCEC3
91022209479592F06BA64BE08D6598398CE326C2456D1E107DE6170983DCD307
8016D4DFD4FF3B18C26A2199E10877DD58E13BAE54045B86D2F5370A465FB06C
300DF81A50AEED70BA5C0FA9698333D899B7176022C6C28FF0534F323D017CA8
EF1D24E6F8DC956BC118567857EABBE95512C8A4B70B02E0337C16ACAA3EA98A
B2C46A9B2A4C8EA940877B0DDA9140C4E646BE61289705369D116B52AA526F6A
1C00FB05A67CB36935DFC63BBCC0E1BC5DE74900614160090EF1DC1CB0740B3F
A1B24F6630F31E90651D2B891B54B03BFBB05D94BC32BBD9B63477E629422A5F
487C494894F6BFED08A0AAA58FC2983315F8958915067FE7062BBA9FAE457A25
E67407D800B810916A7AE03DCEBF228D6B9AA2302F0E88AD035258FE8F780FE2
592ED35A82AB818EFA495DD7323A51ED863301D74D8DF7CD81DE57903CC06647
2B224E826AE08871FB0C6781B3FE6701C98DA905D4C3F936AB8217A6702C16E3
ADEE0CE8AC41C5DC52AB6337FB9DC5D77D26D75AD448B254C7F8A38BB0204ECC
15FC1B770CFA27C37105B70EB45F47522BD93ADD46CDD0C1DF4B83A1EB775861
645239EC6EC6B59F4713A7C980D725B3C0CA9868A1B4B066C40F22F2334343E0
8EB001C1E350E571D93F96910C91BDEE18E063B395DE65253D305D4132793CDF
8DB01750F4DFB79975EAD0E79B4F1BD1D7AB84C2DDCF5DA974B2068488AE47A9
F07F8CAA187FFA24144AF9A62F7A0EB816225009664E3D8F6FD9F90240610A27
244970757F3C25CFC3E853E2FEACD8CBB223F173BD86C842D1C9ED10B006C949
8D723A68B1D60FE747739A0C92EF6EC74EBA6CB20D0AC3FCCDE0BC8E84D3DE06
6D920D3EDA7BFBCCA8E99A035B26D05D07B44B24951AAE3FE9FFAC261F75FFB1
4D1B7AF74C5AEC94F4598A2881D05D396BC22D59563F1CF0E9D525899FB3F030
DF6A706763DFE99BDB8D71628D73E5D98F9100EABF64F01F8DCF96B73280CA32
2D9738A734B3708EDEDEFE0778AF6945BC3183868305BB1A2C53CBB430D352F8
914EB0BBE3CEABE8F64213766C0DC8C0B02AC199788159BAEC05660870FD275D
9BC41D39D10CC2D94F6F01AAE2BADB3C2BF8BBF9F07E996E67B1730C0D64D471
BDD24DCEA030AB369295D6FC8E3FC4F897456B01E45552BEAAFE36D398530A04
FA0598477BF73995AA4C37BD8D5AC97935DE4D96DBCDCC8FEA15D0A83A2201FE
D8592B8B420B33630F15B50318C6045977231D86C8BEB851B96CD7BF88F9A17D
A1E607ADAFE8D8460FC48FB39C8126488FA258BA955BCEDB3E0DAD7D09451AD9
CCED0E89320F996E99C8169897C479F86CD53E8CC9DE6B2DDB148E81B1F6B9E2
B122EE72DA5BD1C45D2C5729767507D93B8C0D596E109FA863D411B0A68EC14D
BD5769EE77792DB6ECF45EE986A2FC4D86071B06BF6FE1B4C2BDC611BA311405
69566893A950A0D4C3C5629CE9608BB7E77F5201C8A046181EE7B3F9F2B5F42E
39023760290E41AF5A67734E96DE61B0AC3221535F9925211A055311717C3A40
790CE64063DA94EB567660970F66F2061328F85AFC287E9C2421C5FDA41F9C13
9DC715445893B54729A788C762262751C6AA721387CB512AA64E156D060119C5
3CFC33D924B390F0E57D3B39BF4BEFFF935B48590EB00726C0670E760F002E2B
A7B2A56B2C172B4E14AD845BE9A914353F9B569757A5AD8F1B52BE124FAFF443
C0A979D48F768640F3A7999BB3D1C77BF9ECE6A91142D95593EF9FD51E984FF3
10C1B72D6702AE620AF391022A8ECABC9E50D69CC1C819A3C091A04B5E38B507
09CA21A207D8D6093365445B9145ECC6C24DFDBA3074D24F31FDF9A7724A5FE7
1BEEA255531838D8291F5649AA863B0932F0902D5C9924BA1C9CB55E78F4C53E
F59F31F46F00263AC6D30F976B87018F2F76A016A74C68DE88BAD308F543D5D1
FA6081F767F58B57A49E76733940A014513E18403A76A8AA87FB1096E2CC9240
E9C69240725E11E51DA4BCA6304A8C64D2771F67CA490B4C76C3A8C971004000
DE38DA7BD7171FDE19B2407F893D523EB78490504B686DA3FBFC65D4012B3FEA
B06663D976949A4F1EB43F699756F1197D8B120E48C983DB51F4FC23E3107BA2
B08ABBB932D5E6A03F957B7C64E89BB59C4ADF037704B5418FC765D3EA63E5EE
B2380E4AB9E6E655AFE1FF2E3E4751A88881FD5D5E7CBA740B6A4A544179C5B0
D8D193F9850E9A175C83CF70BD90D19FE47DCB4E86744797709CAE17E12419D4
535D0FEE85D7AA225FD64BFE21E949617809FB8B2F24322AB310F16A60F884A5
889F5E7FEEBB536527D13E789C4D1AEB51A8612828DED34BB38089252E8625B8
3749A64A7FFCF96007AFA65AF4FB75A53942A9F9A0D2322C8B3CBFDFDDEFB738
6767ED53B5D7DFF58FFF4C5A60CCF5DD51CC3DCE518DD210DB1AB515DE25F2DC
4906B1A90BE3AADD483D833E4AE962A37D7EE988906AB267581833A721D10998
9FBFB6129F8A7620C66EF4C4334F3A36B38D3BEB8C026EBB7426ADD749433094
0544C98629759FC84B3963CD70AE9F83EF36E3EA220160E8C12C651C3A03D4B0
676B557DBC7D3F343AB0752C9F48CEFE2CE45347A828CD50AA3E44C750024C6A
ADFF9259B88E604D4E3018E13D7E08A231AE5E966D8E84C6EBDB5B2C97057E98
5110E3B9476F2EF2991878E11F38FF36D1F1D67E0A154F2F800F5C80B4635620
0BACD8C9385A18202E78D9E7ABAE4BBD920BD5657F0064D24DDE0E0560100742
C0C991B59E10E040B0E9F0247510E377C6F0276C212CDDC0543E43D2705D73C2
CD9A14C5396873DCE47441B413975C09D7FFD1CB8EAD24B2F8DE2F54038936FB
2D9659D413E4CBEFF07C2329CFC7F3BE8C6BE8424A13F4E0C9A5C6D68A9AD70F
36330A4787B95D7A39E3BD486EAC834805AD4651E0EAF9DE3500921A7818FB31
8487A712CCC0EE9954D09F3564BE4C153AC91451F122BDD5C724CB802330F160
EDE41F4BC6C5A22531D514910BFC8A7F035020F221F2A58F097CC13CA9BC695F
782ADBE50737CE43B15D717F9B56DB8E3B0C01C6D753284B657F3686E07C885F
330357B4A63862D65AF4E8D4946157B02EFE0D82006C0953A2702BA7542C4077
1F1475B919C0E0944D0E294A42743B0136E0B3C29DBE7626520C3D5B005A6B6F
CFBAF3D61AA9FF33CA9F9C8E6FF154326F7C3655261C4AD986D12979ACCE3F57
8A0B968130EAB268E561EACD360E57082DFEA68295A90FEA34059F842002D97A
1D8537560AA8F8924A0DCC610F842E4E30C1104F859AC97006C0EAF36B0FAE95
3B015680FADAFADAD02FCE8211CA27825D3E0F01017DB6D4137018EEF6C9BF62
5A1596A7A3B8C4F6F852DB888567C1C1717D06FAE23DC20555C129BA4F31F5B1
53D9B8820A39858CC4CD4324737ED9957FDDF5C21ACD68ABC3B289208E41AEB7
1171EAF17A4FA9A9E8AB1F3C41698192EDAEA808C1FCEEB0A101C52F7A08208C
D31C1E93F5F396F67B8ACF439CABFEEACA48453F0538BAAD27AD91C44C28F1D5
79989D8C3B5D6AD116426EAB123F4FF7600EC58DC7AC4AB2E3EC2E57BB179CB1
94B11400BDCF7A4BBAAC2CD397686834A6BAB96EE0F340CBDF2EDF2C3F52D349
47E0964D0E8E89F6043C0D2BE9A5E9E4AEA452AAB51A81874FA8B3B9BA33E5B0
AD054A393500C656827B3B49A5F4F7357F9C88B45034BDCF6675BB8A67802696
8855B88283552DD3CD9831BE0D747E36462098578BCD5050EB47A9F4313EDADA
4845CD69EE5AF7BFF995DC20E067EE6B3F7DFE0ABCEA24D63DBCE317E7E4B07C
12A28AE03BE53CEF9894EEBBD3459DA51E9693873150FC6E903E8E0A2D4CB9CD
1CEE0FBECE6A41C70B473C32A5DAF8C0F963BCA758B2A02CF70A46A67A2E656B
80578308ADA3B73C7D92DFFA19F1A79AC9BDD7C37C63DC0AF98514E4E9108C72
F149FB68D5412210AFAF615D46739F6703EF4361A76E29179861ED74F927ECAC
A9DE2920DA192AE301B081C6063682C616442D3E70C81CF264F9F7439027A711
E3278F08FDD23BF1D5F06884F07033488B1949EE5029CE15CDE30FA4BFECD72F
4A5EC0212C697D91FA63D6E5955CAA4FFE0F06DD5B3B1527B753DEDB0BBB7D3F
03768BAF8691733BF4866B408F4806BB3A779935CB46463F4570CC1FCD2159FE
FF9E8F0B501E62C497A8C5C173714D063F26C9D3A7343E794166D9ECB58F8095
D33B8396AE9B26342CC1D2A2875056225C2920E3BCEE9D09CA5C60F22B07F24A
26DD8115F65F182B68A1B09693ABF521BEDA2EF6922A1E6C069B061D853369B8
ADE0B18E8DFDE785893B5EFD6019A2014F4F469709A6476CBF11C97862C34607
A7DC2871860D2183BAB18CEA58D596BDED31A69CE0AE0177D2B9980AEAED9DCA
69DC5C39CA964621F6C5ACFFCD25915FD537A6DF9E2735C05DEBCF002CAED492
199BA948790DFCED8F009240062B2ACF099A261036CA2B9A1027B92D4E666C8D
E787D6307DAAF074C46A04CDC40A94BA8A94B61B377DBF7662293E382AD209FB
49092F3E1234B3D8EF2B5D1846F239D6F7BC4BDEAB3579B57030F0E4B1F2BB06
42CD25DFBDD6CE0B44841C58E8E054B9BC7419E45EC84EFFF6D42D0B1804227B
1F17190B56EBD27CEDBAC9BE4B50BFD0B62B8429F77FB1EA332C7A1CA8B004C7
3184FC41779D50CD9F54798AC016FEBAA4BD6A933BBEACF75D804FEBB379F0A2
1B75F34987BA586C6FF368ABDC475881CD029984DEC1EE34F30E77F7C3174AEA
A273A079D5BD5B57E3D3D80C06EFA0CB7B6606ED644BCDB9A47BA7E15397A39E
769DF23C1D07FB9A61DDB92EC67EC42C6480896B537462AB0B27E20C9D3CF8D2
7B81A55DE3F63601F11D2A73FC722BD5C566036CFAC5397F2A5132DCB64601A8
76A328D58784A92C4BCD75A6E7F80E84757D7A127C82353C2086E551C702935B
B5111089F167B793DDF6E3C7FB4EF007EBB868DA7F878BDF6355C623059718DA
A3D0AF39AA1445BCB4FC25289CD86001319CBEA90CF37A8AAECFD1F72BFF12AB
00F60F9980CB3BC380FCF7C0DDA7C7C36002FF4DBE9029A1E79BD5F165EDCCF1
EA7E4DBF2975364992B3996EA3B4F30C40106141EEBEFB7156F487D03CEF1C43
12CF8BF51ECD810D5C249C182D15958A21EC955C2532B1A884523A0634F67D86
30321B52D8BE2DC7029117D29FF0A396A4A4AB4BB2CEC3DFA392412F82723A5B
16FAEA0A235897E57D9FA6F817BEAA47CC87EF9BED29CEAD50C3030B6E9C2D91
2D0075422833AA7F73D90272AF096968AB75F3F1EBB30B5DDD654F4233FEA246
83F2370B1ABFB841B44E5800A7AAE8E4E57B5647C78995157B0DA66D1A34FAD9
C47BA0C27A8171E9045467FC5DA356DFF298F0E2BF9E46CBE6493F758D66E0B1
3BCC0C763CDD3627A3737DD41477A8BCF7CC0FD3895A34B9E6434393BA92AEEF
4724C34EBD9DFDC64956FD2B3476FC2357E9D9D6F967C5983037BB6E9EC571E6
078529DE942340A40AB1CBBCCDACF0046027231237834C0BF9AF326F201D889F
40D7AB654F3C24E9BC96FB786FF82303C2CC1B26C78B74DA6A52A4DE356AEE06
2F9B11CE71D9034EE8704CED9534746FB31E330BE539AA86CDBD8B600FFBCFA5
C1900BDB11125CE2C263BE3344A162A0C11DA4175B9F63832FEDB75A7C3C1703
746057E78C27637894C238949AA8D43875080E51A9730FBF859D92C164DFEC11
5BCDA359B58305C56E941651E322F60FA679945BCA6A71E4329DB73E7F290987
87D96D8C7D9D5B51F33D505FE3ED168109F1F39AC5C3357E48CE468C116038BE
B06DC30ED8E89BBDFE4480A36CD4F92B4DDCE447DDEFB6092A54D213F2519554
C19369F0F95FF2A352495290E6DF4302AD80B6BB6EC73304F7A0711FFFA64CEF
6CAC90369FF71A3EB16EFAC41D22D1BF4B1BE040A597FD8B9EEA191250917554
1A94B56EACA704380CD08928BAA632825543D0F6A5C94630E63411A6ADBD13FA
8010692458D1034D72FC882D95B42EF3C49DF426BE5310210B7563D3E69FBCCC
5924146E5EEF76A3EB416515CBB494457AB6FEED1B5EAA0BDA5226BB7BA94964
44A4576650887883B3C9AC23E217F48154FD6CE1454A0393D7E8418BBACFC660
D888697296B7CC6581024CE1B3EFD240805D78448DF7E49A11B2F211A64EB78A
90B19A51C704AB28B303E724D97FF40F7AE36D6AD94AB07C03B9B357EBAB1A18
9F424831F6578541FB21A36E4C6ADBBC34C4BD614EA7496D58CE8BF62247CB10
F893048D583A4FC2FD02F3F6970F6306B22213A308C0C5BC5672CF2BB136C75D
E0FA273D40D06AC07B567DA70D25CD216940814E1FF110E5BA8697379A27707A
B74F4D4C6C1769FE00906E74846306E52E324E00D300A78B984ADD86F1753AF2
22687DB9CF10CD88109B0AA050F06A64F754256FC04066CC198989172D7838B0
9D7AE5CCF00A362C8A302F706283C7C60A1D9E7E1FD69388281F0AF776D1AB01
1F0E8F77F70B14471CCD1E40537D50344486533F7298E845568085B976442910
80AA8B87F7B0E297ACFE20C61A737C3C3B405D049314F14D6FF093684229CF7C
674FE245E7B58AEDEE8CE96DB6DB9FABFFCDE8B4D3B0A1AEAD28B3B4E057EDEC
637353C7D47BF41FBEC8804E91A0134FD48A8C8480D9137F359E6287C5369650
A06249367E02A4483BC8446F5E8F38C3A65A16FA152620B2C50499E293ED6015
2108652CB1D729F35FA2851C69A6D0AC9B1E97A66B2E9B937B85A69977BA8352
BB68ECCCD5BADEEB358015D82061EE67F3FA4770B91AE7D909E4AE1BEBDFFF78
EBD97F40F1B3C7C78221B0081DCEE0635F1589E9ECDE57FB0FA418C674FED3C7
68549F666DE1FD69AD27AC7E1E20250E3AAB09E78E7F66CB3CC2F58BAA55E587
3D64C726C983B33756ACF3FE3AD85C6A571D4BE55EFFF31273BD8C22F12467B6
1057FC53C3BC05FB8A3A18FC918C2004F0D54E717F3EBE75C50C5F7E311F57CD
0E45B6AC7F41EEDA416B03695A7A04D5A51CB2A4CE4114EBF66B06D640012D10
8ECD3329117185F2DCCB44376C548AE06C27913E3DF2FAB630C7A12F54553381
D5ECE2D516B08001738F1EC4FC0B848E039F729778774BD3B8C8131539566D7B
C863F004227E862427E6DBDB64501D21A96FA3E5CCCFF9C85B1EA2962F9F78AA
A52771F52066D6F8D2701298CC9FDA7928F99CA135B6980B3C5BED0597A28415
00B51C672DDD9181CFAC6D5546FC990DD73AE60ED0238395CB9AB4941B1C526E
7233E93CB638D822021793F292636B3F8C7B2A0D353F370B35862E306B7215B7
DAA42865754B22A9306A4143F93D6E86E029C110955C6FEDAE7B54D6D13B903D
2FE2D30282A297ADF2F025114B9CDF03235CC9C0D34D35462849197ADBAF25F4
6810C824CDF0112EDAFE5FD522BADA5AD584FFDE080722FC86D503092489A7A0
FD2DA444B57766998E83E5365136ACF7F9D099F66AA8A0584DF6C03FEDDEAA41
5F87B04DFBED3D19371A766262D2B5FD05CD54A65347488BCB948F7B43A5193C
C00483AD75BC0B89D1561CB28638D1D24AA9F358AAFF93B9564AB0883DA79F26
6F540642EBA7AFC8BB260F79189A85CCBD703F65363DE21EF673A9FD8F1F6D39
06315A09B88C3FC8A91AB621533F6A1938E812BA39E0756E167FB5AF50729011
A8DE68CCAE80B0FFF87E514ABCF5B87853A3923C28A781E14282982C1AD13479
B6178D281CAA541FD7CB5828328970333D68C7090E454AF9E45392F1B4CA7607
E4330AB6BC5E2CECD68B9981B2BEF1AED8D00A3AE130C913A0A5F41929D75D3B
1E711CE3A8AB8445DC7B13C917FEFA9CF7A9F685F2DF496AE239D43135E3E160
861B0D1A55F20456933FCA64CC1B060E260782BEF6721C7DABA6F1ECD10284A8
D126A68FC8E8810CCF5AFC45F91FCE02BB1A8598FC3ED021147E2BE3B76ED366
26C93B3B566AC84A719DE7A70642947F38B33B5D36C221BE886312C33F871D66
D40597E4F20CAD0CC21D2C3A11820C0BA2260363C23854E958D05EC0626BD6F3
67FD211F774E7E8E20F26CA64199D2B76323794E1E12FE6F8C7D477C25A84529
7214868CF511A1B5C054CF08BB2A159901B6BF9FBB38F80F74B6BE30324BC55F
8CE7F024251BB5DD3A1798A1A62A0A6F8E820ECB5FE4ACA6A493180E0838E120
6B17216756AC75CB0A6B8FD43C58490E5807F4FF81DDED690D96080BC8A4AB8C
FFE1809DF7903F6847D57A2285834C049877A4729FC7697EEFE344F7665D5A21
59D5AD5AA0468323052D1205BBE6E794D7FC7861CE2BA51D46D47B9C7A7991D1
BAA8A61764AC5EC0B4DC2D0A3912E34090D278D7151D59D40D28184F00034AF1
BF7B57BE2D07493302A5492BEA01CB223FEA3B6CA4D0A79AC03A3416B7D94987
07C04E9115D411FD74AD771B5C96EE1606AB2B516787BD4341B92479E72AACF9
ACC43D30906442CB14BD2C5658C938BC685FADEC8C6514A72C0F7FD399B8A043
27DC057B08DB8F80AD718FE0C9DB97564214ECF573EEBB83E6F9DE39BD6CC376
158231CA2A9A41AE0031885DB8D0B72A02E7FD4C3EFF42D9E05C43CBCEE5D0DB
E738084795BA938A28FB17FB62CFED0835D88FECB2EA11E76136A8BEE3EF6F42
974E0BFBEE0F5012724863FD93CA0F1CD26CF593A7326E022BA9CDF2F0A7C6C0
63294A1C509A5A29792615890E71699CD9BFA522EB9C81D18530F6EB1DD82657
C2A33AF6D3A21F6C8132DD03C6BBE435301DA72DB88F4D08F308F191D0D6CE21
D0AC6F2ECB274ECC3FCCA3ECFEC8D3A6271DD6C27CEA2D32409DF97C2A92B344
7860814C9098D9EC60165DE651EC614F6696E844A143C63DDB86478C4B70F8BA
C1FB7FC9191E173820EAB8A5D4733FACC4C52CCB460E7D37F4F3FAB67FF5C6BF
2301522ECAFA1C5F5FE5DA048E15F885C0A3B24E090B54A955BFB36FC3F3561B
1CA13FDB336BD4F041E9FE46C75BA737BED70C1AEA9C0ECC5E1787985544273E
CCB27B5D111A970C458DCE016F1773387D9D4D851DA35FBF5CA18BA13017E405
2A9D64B50B488945EE7D39347EAA6B23D44BA418E8ACB8B4E56AABF265FC35C7
0118E421AD66D3A3911C593E76EFF0223DB9ACA607BC3B849C4C417FF9A6DD4A
4B5390076A43C82C91B982B19D7AA8B61516F4B26E422A0DCAEFA2A20B54EE05
4AE15F26A7304A9A97BFDC0689D7925003BB63C46296FE532C382FEDCF04C56E
A69213B43CEECA12BD18993C155047007662F9E7F4A2B233012B5ED6C2DCBC74
2C4B8EA64508AF6897483A26FAF195D837E0B2E643F33539F5018462944E1080
6234E1444F469709A6476CBF11C97862C34607A7DC287188E54113F6E2DAE85D
8EA07DBF0F7CE8AF45BCAE8E072C6C25B0DDBDD4CC852F53207B4C082D3C99D3
064637F48F4D62D57D3887204302AD80B6BB6EC73304F7A0711084601BB4E92A
F0B9183F250A60A7950B3939DD77097DF7B39505DCBB0ACE93422A64DEE8A600
7303A2EF4486810CF6CB86871B8015310B7CCD19092E38926AF3577F20F5AF20
3B8009E97A7707B1CCBF6FFF66EC1EB87143AB833E36999482BF45A003B819B9
240E0346C843AF0C43991F83FE1FA0A1A4419AB592E0C0708320E8D6C7D22F22
4DFA1F35FC4E652068FD1DB8B1111DE5EDEAF22CABA60EAAA554E64ABF5421FD
338F17B562E955B4EB2270670F6572393B8F51227D876CFA92E57CF66198F1F9
431F4DE34AECE622C40AD2D349F0A99EE75CEDF13ECBE5B9F25D592ADB01BF6D
D128E980A062580B9FA11EC643AD1F69B53EA2D57539AF4AA1C3EC98C65E8BBA
085A7C093DB6FA37293C93A47D7295B6A9F8CFA1FDC8B7CAB104F32FF3156C1A
FCA7C5BAB3F09769CB0CCA5B1CFA6A01DC0EDDAF6682CED52E80C827321977F7
865D10CE97CA2774F2773D826276ED2B262075077004C7AD97187CF449C01794
2811D5F9BCF1CCA6A445A75C92ABB4411AB26F33DF25E960682F3C22A1B53C2A
FD10D395E36081D1ED265E96EE2137072516133015E992A70B2357F3F43EA858
CDC79EED15AE8ABD71ACBA23B26E3D17D41DEB9F5AD6FFA10463FF01279F3191
72E380341CAAC7984BF444AC5EABF048519A65F780A78E56CA9D874106924BF0
0029F54ACF6800C960DE81273E2CC87AFCE644D65932A5F34BD97A26CB0A604A
CA1C6928D445F67623AA28DBE2955BBA699CCAAD77072FB9419F12077754BA38
54A60A3676CE51E45C0DE6141FECE531A950C0A07C88F66C2C6D8FDE64CC1F55
7E34D6F3B792A1257B9FF5EB18BB80A6425EB7F5032AFBBF507E6262226CE73B
EB52C2B8F5123551A1717B44CE41C30BB402DA4D3FD3FC0AF52F2190F679BF49
494CB4FAD1E78E9C6871F23DD7DEA7C7D956560D8081B01DFF4721707ACC1E45
E4D50FA5D878A7BD6CAB57C4266472A747A459E1A0206B706274CFB2E5004AA4
2091E3626641060E55159270B4794F9C0945FEAC295D1D6BA5868039AE3772C8
2AC0ED80F6BE2DB24C560241EEA57041BA5C17D447BDE4E8E99C798B79938346
029F805412F24FB8073894F45C12281C014770AB71DE0DF3C61211B4F48018F9
CD3A99F46FE69D93CD4FC45C2058AB4D7A18CCB104811EC1D8F7281292C76E15
F2CF2ED682F2EBB5340D9EA7C809147B2E99D2D866CEF51473F0EC0C9F34A5B6
8E6233A63A319F18567DBE1AAD4FCBD9DBAEAEB35EE0BE3D91559D6CE0493425
92195A276CB5C7A58634007621BB68E2773E85B876314C30C65DFDEEAB6E164C
29262A1495B67C57D23F7E24E2AB8ACEF3C5B5C29686A93925A9CB33481C5975
F11973D8E4A559476C4B58760DEB78D410CE0E59E870D431E80A48FBF2DF0715
567FAB985C4FEC6FC1A7B4CA556845CF970625497424C701BAC2359171AE113D
BBE65E6CA92545EE6F65D67086382427D63F71F418F7EC6A21C36EF0361614B3
A29A4052B1A382AA2EBCA45FE0F1AF34D7D03DC222B915ACBD4F3CC684EDF71F
9DD27FC981026EA47CEE6F36BBE70A4D448D69CFA5DE38010875F7883B9AD2E5
9333A30DD12D6983FA9D951AC773933A0F5F89EFCA29DFB23B20F0962F2D37B7
7A65914F1A9AE5C98D1897828C2120BEA9927D9A7806C24D283DB18EA8EB86AF
DC9ABE29065001469C59BF3BE7351F98F7683633D38EC5437B47F377E4595784
EB02BEBC5683A50B2F77FF623117E9549061382999211A36282B7A3EA50BB084
666129C81294F8943F1497F397697A104D3408735BB8601C2C381003CFC1E39B
FF55CEC11DED7A155529F4B3A62EB1DBD682390C533A0575566059F5192ACD4C
5714CDF722E11EDADE3BEA3104486D04F2B4BEC342F88B6D49B21959EBD5A4C5
C2C92B01BA1FD587FCBE8F4C7859F47C8B5F5B2F155AFA481F20844A19DE43EC
CFA04E0AAC3E1F4A8809C51ED43C472CCFCB08592C43F1391EE135DD10F8224F
2692DB68C3073C4CCE0125340184BBDF58E2B82CC16F0D60D091AF05B3B756C0
FE2C3309AFE0984A74167BDEA0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E752429B985F23EBA0C9875AD055D8B1F640D10DB8F40BBF062F476691
EDAA1D05C5591EEDC1B75251BFF8576F1C9CC5C0E521392A2F0D5F869F8AA462
B3883A673A976328E1F0DAA22B80CB7737DE2537E7B54F5E1643E30046E87CF3
8D9A45A973757BC16CC50504033125D2A68A1C97CA095C56B3D62783960780B3
1693596869FAF5692AA8FA6643FCD7F55E72948D2DC55AFC5016FB2C48AF9D85
192393C682B739EB43CAD8C3FD4053B2D53CF911352E2BA87A65F8949B0B7918
EA727DE4A08DE07B71365B8F31103159F65D30A7A318C1056BF638CD20BB56D8
6F22ED3EACC46F750F405FAF96268E80A409CD8AE0F36B68AA8C5FD2E0E871DB
D2628AEC086AAFC9F04CC93440E1A8B0ACC1DCADB778837360339A25C08E3B0C
E768240F0E8CE9FF939E4B1A6365664AAB69761B7A9C7B95BD29B09B930B0D82
F2C39F9BC0B94E56C48DCB22D8F0CA6C633BE68E5977EB3D88103E4230C6A08B
B4FB0CDEA7D44636102D47AB90B92FA42243943EB3E77E6CC38DEDBB2DB8BE77
78936B70FAE12EB1E2913B766CA2BAC3FA555CBADAF2CBF6B7A216FC93470554
2C841542BC1FDB26DBE389CED193E28A19CE9CBA64FCEB47C4D9C7891741E0A1
23FBBE971ED93F797C02EA830678317452481FB78DFEFDB25A3645AD3979D2F4
AA17C624CAB35B85963C6DED262AED5DE92278F31B2E573FD86696D98800443F
32CF695BC103A3ACA687FBB3F42AF9C89123C719005844588667C3DA28AFA523
BAEADF7BED1F3B5D595DF571540D0855FA377DFA6880F525878D6A3D1980C7D1
05554ACC5D07ACEA1E0D27664F6DFB6EFF878D0A68604565D0BF75FD8BE023FA
36D164B7BE25F9F811A466CE04C2CE5A774EE3288A245769B7ED30FCFA10230A
D6C9E809341BF5E55E58F3288F7298D62092922F07027352BC7C9612CFCB7018
B3394AF7EE7076395E67C3CF9B71BE069AE6C6C412F86A496E7C77173A0CDA0B
CC46683C239700CF259CF668B9F5C990DE3196B84BE792F51E17583FD4A83178
989638A37897AA769D74E0B3A299DD94B314F9BAFA7217AC70D8D9D02544A545
F6880EED34399A835514CCB97938F3E012AF4D68C140C6CE231015D93CEFC522
CF56EDA6F3147B3861904FBF8BEE6DB3D2E71479CD3A02BE03C555B0808D40B9
53D2EC56876076A116EE7E81836676237F88C519F8DBF39EC35FE41D78CF1665
E3FFD09C78FFF428AC27BCF0318D0849935822699E31F5115E7854A22F46951A
51F24526F7190B18B313DC58AA2EAF631A48ABE394668C6F1CE9AEADFB56116F
FB38C388F96143BA870537CC8B3E5F2DC39F9B930ECC63475BBB8C5F9A45218D
E05C4E6F250F6E544D6011F65EF4808D3D0158097CDB6E280AA402229A6B78E6
AC615258668BFD3469CD663592BF1214E5EF1C116C4DB47B805E2F60771168CF
79CF10DC2DA8F2BE94869AA570DF2AA5852113C51CFC85C1E41516CE412CB410
BD026231E22A9CD0F664D76D385CC1170476B17BCDA45C640C583F16DA207028
0C58570A966383AA9F7CE59375525369CA6A559BEF0E05F11CA9C72A278C045B
1D2572EC08DE1424D2420D550177794FB3DEBEBE9E4105AAD34FF119AB2483CC
A034A95AF0B24B801710B398D9E9A95138859A819011423AB5921DE8EAC56ADB
58FB18C27A41CE503CAF2E7EA6F673ED5F34F1C1D20B609A152EDECFA26872BC
3C8C802A1517D9C6FDA3474591F19D573EB051F551990D0331B2DEBFA31B5010
3F6332290E522C15C69352124E1051A715399BBD1A6D3704BCBBE1FFF89E56CF
9C3EF605898309C7C3D20DFBFD10DF5FA30F409A76AE8021045DC09C95C9AE4B
4EF735A5414D985F6F79100E7045B930267F0EEA9BE820E13291132AE91118E4
7B8432BD1AD7A9CD912F2BFF83A2C4705A26FCBB7F8E45CB2FD9AA2EA98E381A
01BA4C4E31747123F20A0A721766F9D9A6769FF80B400B1EDBFCAC63CE15283E
72EC447BADD5BD58B053A11BD770399E31FB3B3D856FBCF6235BAD1F0D38E26C
3518FE6411F2A5FD4809C085AC2D60FA311DC99B9100C1A59CEF4C877053161B
59682BF5F2D85F2DA7EA0FE603D477F6E80DEAE0F250811BCC646D8CE2956C78
B897A5000D73AD32BD99B92E6E63BF8D79777859EC0F7FAE47F5A0CA878106F5
5462D3027DEA15E36AACC0E7349C8E60D6F2439E2D50DCB9D96C6C20D11266F7
913970C783EF6D587F638339D1E89A4878ED27E515FED0D26FEEE69602B2BD58
D146C077FAC71FD55A5490C89142F2844CB7E6352B01A448D4BD7A06D8EC0F00
E69984EC55E0B487FDEBB3F7FC3F4093CC6E13B87084E461E23A4D6862F0EEA2
84DAEA8343FE913EA90B9ADC7D025C2B8EA3689D75AA38B5222166C447B82E75
52DE05711B3883394BA9D683C161A48059A0463B17F3DFE8A73B46E913B99D2A
38E7FCC667A5B810B665519E7E1450E00BB9D0279537763ACA5F131550E83404
04E208B9C0B0A118F40332BDBB431AA70981E77AA5E5E76F43E730D9D3D047D0
B3EC66EF1D37916398FB8CE955E12D8A89ADEB1AE1EDCF91BD788D8F261962B4
3870D5928D160218A297BBD3BEA22E12E9C4197D0F3835C0942AD6487F5C9B20
C9A597910685A9BEE4CBA868D352ADC10A564782DF3BD57758FD145E769D4E88
BF43D19050DA58FFD64EB7B1D37BA13752B6C966C7A1397D80160687245269D0
F27E87B2186D931D624120B81967E58ABF5DD66AE39640224A518BF378B5CD26
761D1ECD916FC625A90EE8A7E00080300F0A05D265549982D56614814E10FB25
DA53070C2BBB4411D9608F4FF0B2E171820C734BD20399504F034BFE4C20E7A3
1326783358CF8D4FA48C1AB81741FA70BC0E0A4BBD104C7E5AC05CE49C6375E8
9F0EAB2B56BBB89144CE810C78D8CA02BD7CE2AEF79E27A7CC1D6B68A5B9F504
BED3487D1424CA82B8CC60A0156706987C7D0DB913F1BBF8A7B9A275E3345BBA
213B3DF67C4111E9564B59B724BD65916BFEEFE9BF03AF9D84DD2AB94847F33A
3AB3757D2C8CB688D50EEA68DEAD0613A62C3000C037092ED0A93F8486FDD39C
FCD0E8A6224BFA03E8C6D73F4B8F480327701262285C527828E5E203F328AD95
5AB433987B229534C53061C3350047FB20E3887F514B5897FDF225685D18D679
9DC141B7F6830D6771F1A3CAE655CA173FA57D400530CA6FABDCCB4325478D0C
93AC7EAA9DF7605213DEAF94C7281D9AC68D884E15ACA3BA68034F897A2FFC1E
F76FA2A69CEE7F1E9543904F1773969F65553C3469FD85B2F2F89F0E547BFBFD
F62A3E47DAA4EAD6D47F0305CCDB297C320A48A3655FAFC810CEC6F6D68ADA4F
AB5DD7F61DB94072B0AB8F1ABF62A78E43E1578DEBD2D05109DEBBCEC64AC700
4C28C4F0A5E3A003423B9958C73D306B2B4A7C67A95F8B4E737992642BD3701D
39FFAD94524A7752560FE97B8E99A12AFCCC5044D989BCAEC863BD15CAB7CE63
0194962E4183C3838D9401260A743447DF953444B29D7CB004560D0685F73E87
72FDDAB87125F419F90D165EF1C2A06A9B7500C6AD185B4115777C6BF9C24D88
653589B431FB84E4DDB650C2F783594DE6123D3142FC5C99973AF211F2A2A05F
5A756073B85FEADA4823BC1467EF2FC0E98A2BB28E5933E2F6E50D3580C547C2
54FBBBDC95998DEF2EA825E3BB2AEEACC0F30841835121B7A7D7A973F2EF67F2
795E6DD8CF55B9823AB2B15ADC328CC3AC493DE8C2F022EBFA14A2976D8E3559
B5FEDADF4E23A07F6C0E1387DD54F5C8BD071C4E9A716737B6BA413F846A887B
D1B3B89EEF73565F3D0D2D1E40E4C2811D37C9029692DF8E94F6FE39474EE13A
EEE65EC0E099C29064CBC0503FA4C89D845F91A107C8414C1648F6EBF6C8B1AA
7B2F72302AC2C6E6E9E4FD1EDCFCB8C648B2BDC18FE07B44B7E886DAB96F8B4A
BC3C584457B1565FE02E26EFAADB605C5CFE109AC7A355E2283555E10CA9070F
BB98E2337281FDEE7EC20EA060A062235F8848946BD058A0C86C794697BB0674
C1DA26CAC3FCFFE73689E2CCCAD5DE725AF6C7DE282CAA214D69B6793520439F
2991BEE6E427D4E82FADAC6C3829AFE1196FFD8D1D0F6BFAFF4F9062FDD08665
FFBDE33DB3EBD99D8110257DD0B832CB4209074A589041E903F6D89E22D34EBD
2B3C90EF5D9AF0A0DBD5145F0FAD88EB09D1BD84D00D951D4CF9252A4443EECC
AF1E56E5FF02B9070C1A92470E3AD7F1CD944E91ADBD1EFF555FF3EC5664191F
1C11943BB76D70D356FE5D145C73670D1A8F71E5C4FEE96C8D4DF87FF05432B5
165C8DDEF25DC98CBEA51FA99398860E1C252C17EE576B7ED658ABFD497DD5D4
E49663A5CA73CA347E27BC49C7DBD28DDB3AC7A78020551168A47ED789C2AD9A
B8C8FB7EA2F8C7D4D9FAB4B8DD91CB69558534CCE31AE7E157D0B060877AAEE5
14CFF0AD50200A157151F7625E63296E325E2C36D5DC45C5129C2D342CA7541A
75675EB2F1A5BF25461BB38C84D0651F4644CF51DAA8608BC3B698A22BAE29AE
3FE5C543DB648AB544E8212B3B2F97B5844022274F5EA46CF4E9D49CADFF1DC7
AD838B09A2CB6136CAE6AEA52ABA90745D527188599641549149217DF6B36367
A67BA60DB09562E82863F6C001ABEACCA36DAC81C30C11F98A77F4D100499847
E1102CC075FA1210881D95D6ECDD37B0B820176667500E58782156ED77373459
6699116573EB74FC1C83B091EA1700BD5B069BB7DEEE2BB45E7757F7BC00D85F
75BF5F32B350E2CF46BA0E8D0120BDB3E742C15DE5A8340318F907D7DB5591A7
08C83C63D6D457915A2F41B21629926169F4AEFD81BA2A880F4799EAE1C0C57C
FBC28FFFC956640872B49219FA101B88EBFA3E47EA4515043C418049903E3F36
885AD45509FC3CF7A376A608FC51751104BB96EAF8314E2322C457EC6683D385
525F118C799C34B50840604E7C248CA5BAE81E8C76C29FA3779933221D8A612A
2DFF00179C41CDD34E7015DD7198AD6EBD2BC01221F7E35F8662AEF8B6203C54
59E883141A505B275EE1333E6958254B6D96C9E54D47A12F4D299F67168AF7E6
1F19056BD1DEB7FE32A4F4E62D202CE86DDB34598B8CAED5B6DA81A6C816C747
568DD57D21AC8F8B1CD8B2BE97272017FC8176FB0988076E76EC6E8B4CA921C1
AAFC0EC3E24C38BF6D64E9C259ACF279C3272383D7526CEE1C178B1C6988F963
BB0D7534D41E675EF1BA59AA153AEFA7AA88C44F92801FAC61A4EFA2911B55BD
7DF444571A774CFABE590CD7C75BBE8B58EDC3A2C53FE35CC6B22EDC09857DBE
3019A7C60107821040CB0824EE588C4973D9A0D51FAE6E5FC9F82277403C5DCE
FC2C316D499F60E7C6C04DE9C117345C4E51748D3A5C5167780590DD9E188017
79FBC3307C0BB8A5784518676D62FF024E380036EC605313952366F3C351EFC4
33256002C59C39260DF18DDAB0BA5A40946D550B7831A2EE2670B2FC5DF8A50E
6F0C48860C52FEEFAA70B5953345568F1DA030BEF5C410DCA1D11F770EBC2E64
1196A40F44A2BD2529610091D8A9F09161A41BAC6A15727CE914A1009B2517FA
41ACD230B1E0CE76E289C42EAB07B0F60452B537A69B9EB54A68FDED4456122D
483AE830BE0C173A0D256118B0867DA2ACFA39F9F6EF1D81C607DDC242707D6B
53ED198367C7D54AC750A007498FA31E27B0F86C6D3AA81060727EDD60506506
EDE0AF44190FD947C4B9D41C4A6A03DF807F98C68F883721E6E7E6383207B054
006A409855639AB72C071CA7DBDA97D6000031341B9DF942E732F5332C61623F
AEA9CABAD9EBC22A55727BF40CAB44696D80CF4535A74576AA51C2086D8E71C3
4694CF2C4CD167F58BD2BC3015B5E9E22E47F1B4F33641BF53F82CD8E6D7EAD8
4B4B41F5D612653E3CE63C5F1C17D7739FEE56260D0D7AC778EC22A4FFE4E1A1
56DDF0127E2C87A8AD82DEE1B8090C9F567438C6CC6F9A9024949B47ED2EAF15
2F6F7F6D65B53C5EB5611852AFD27654A467FF3CA388E840184DD63D487C130D
8C59F8E6BC0A3D6A21AA60543F3470B82919E014251C3C2EB411F1DFD619D6F7
2BECD582160DF691CF265A4ED6A5B90EB70E2BB7C7C23B7B83DD252E46ECF60E
FFA06545EFC162942911B3230B8D462CB20900BA1DF90BED14A3164DA8B2883B
0B2CA52A8B48F33FF5153CCD63701C3C4909B75D5369025324B818204AD84401
2346CA7C8EBF4325EC599D755882E751A70A0EA8471040EE4E7B14727B086F27
E43E6E3EA6EF0DE68E1F646A51C66694B87FE408D52ABC831EDE8F5F1DDDA31A
87F742D872AE90EA4AE7BA3359AC2FDFF19FDF6DCFBF5AE04BEE398F16E09681
886CD627610737CB42966EA3FA2B7AB0E97B3290EDAED775EAB0D7D553F222A3
B01D18896F7C0BB5793B266B83FE8D6970C6DF9DB4946FCC6A48F4A7A4DF51BF
0EFB57472C5FCB1195C608C43B811DEBAF2573482AFDDA9F1D252FCF3DCCDCB3
A7254134186256FD8086D05B4D5C88D88BEC3ED1305354BD3093BEFC7C7667A5
8DE4AB7B8519C0DF7B5A381FF8E1C1630957F9540EC304140C4E1569529D4333
36951DE4EE9BAAA0025B2EAAEA5F3111D898979125D2AC348ECA164E3BDB5752
ACF12F16A5BE9A050B0DE704CD8EE4010F3AFF1C1D939E2B603A03E917000E98
03BBF7BBDAAEF0CB19B70861AACADC529A2B37845C5DD5660382C6C0E28E9AB2
3FE483B45C38C36D8EC170B82BC1471F59C8EF9AF423C2B9D07AFBC9394BA931
CCE81E77B0D858FFB2A0ACEC454312EC1DCE08F417F33043900232407BD79E48
47F7E33662A718F59641EED914E347D87F942815288234D8A66AC0A17AFEF783
0896B2536E30A5E1758B293E6B721A13DCA21512CEDA044F32E8B794E5C27EC5
AA845072ADF11FB8B9FCE68B86E1F42DF06C8C3B0209EA4903C10D598937DE19
43C3BF34DAE0370280ED092373C4BB5D5E33BD9913253527B52187FBE2AABD92
72349E4C037061F44EFD734AE04EE640275953E222C1AB7FD8AFB2C629CD2B05
12E1788A849978622CDD235325B07090D8770796F7E1B46654FA39B6E9E00B01
FAD7705D8DC604634225C5915DEF943C83C61E38D8291F5649AA86BBEC109701
5893E2518287ADF862FA731D18CF33BBF61F01565E3C825B0D6146C3B549BF2C
28599EB66F071FFCE3410C547A9B74D21730C5C14796A19EF175214EB32A5FC9
6F88FDB8F030E4F4D64B007D7DEB8854FDFCAF09575BF519FC93753332AC4644
690024FD13CDE6D313A06587E6329F6CC3FF5887EC376737D9648BDE5AF9F5E9
12FE02AA7158BCAD2ED2787595D81BC7EEB571CF559090A230BA564503FFB362
F8485896191BE975E5791869162F1B7D62625512150439080FB47F44979B7713
3B3038B71477715A00DD0FF50F7A508EF9B24E26424B1E91373F67E464D8057C
5EF17F1C3EB72CAEBA74FF65DF0E53D42DAF400AA41C55881CED39A6EAD01854
DC00759544C94107DA1B4A6EE178FE71B207D088EE8EEEE27BEEA5713D78F437
DAE50160FAC28C1C21FCF83DE1B068F4EA110AB03B0C896B05D2E06F3512C764
B686FB513091A8F7BBACAF0CDB9B68E1561371E8F78898E721F2D97CCF14E0EA
440A74DBD51ABBEE7629C98D586F55A099E24B9E47DBDF449974F4BF9DA358EB
CD3125FEECD3AA4E5800D626CC47D247CC610668FF164EFBF2FAB08962CE007D
0933ECF029B26AE0383C3DEF69C787AEAE40C86DC4B5985B84A35ECF5F72BC11
EC5133020BE851291CB10E58A558D6440E61F72C3299698BD64C754711D99A68
E296DD3E74E0DF56E079235A8B3CCD3ACE5E151E7BE06A82A194C7BD042EE90B
6808E242689FE1217FAC6ABF3636ED201011F687AA6A1FA145D82FF25F1E67BC
40979F9B86E0222012DCA626F8A2147CC79F29BB1232A872ED519283A94B4B5C
53088DCDF88951BEE2F5C77A7220FD0E0E33955350C8B54E142451A146811977
304D8551EA5D5B43FD74F3CDA70053F59A816531D1983A33A1CAE23796DF4BFD
E65F0A787FE094AD9DDEF9A9A339D0EDE90B2FC30FF1DCAE9BF86FD2DC770443
807638D11534A2588BE7E2A7D96F6C7CF45FCB17040AAD4A686AD5F5776E32E5
C129BFF10F485B8221483C2AD47B0ACA1BF7DC7C7E2C5EB5F68377A82ECF178C
FC51F75D4815BBF76AE0E639B048A38D0D6B9C0C7CE81C66030F183313C9B8DF
CB2AEC3B072A52D0AD3D4BCED50924B9FD409ACA233C082BC703ED67F8956F3C
757799D61A801701C34CE2B01B4C39C37DE56BA2662E21344E73C74148C1EFC9
2D47B30BF10D01299C451CE6DB3C8E9EED4DDD03EC7F2CB4308976ACBAF5037E
C19191219B28B56B22AB4FABB4CAE2E44AABAAE30F105376C3964BF75AB5BE76
33110DFA2EBAA4303C4F4992D05A21F628B7901829DD8727C72A21E60A61A014
02B7ACCC86DB1731F1F1240F7D6AF39BBEBE2E4AC9E2B9D116034191A1A804EA
935EF447972AC31EE36F887D0CF61A575444B31180850172135F49B08CEE0ECA
2F070C601E09DA0B9690C4E3D619F63DAE2A782AD53550CFF43B4DAC2BD3A84C
1A663BBF1E7DED373D5F1AD84FC79DE23E2BA52D8EE1B1D3F8031887C2FFEC30
19C77E70F4D2F5C6D7F44664C00B6ED737598DC827204956D533E0A0670D60CB
D73D1E1B9865CC77628A339997D35387DBE2CA7CDD580C06A7DCD556D236FED5
8998C2ED6B93CF62F8E991B754899CE46B900EF1DF6700D6A10203D03263B1C2
8B26EADB953ED292A732C09F6E21CCB01746D41D1EC44BE55DF5BBD8D6B0F995
907A3F00E21C72DC6C55F36DB35C15D5A480A1C9B106373503BF86D1B7DDE8B8
CF683227F8217212BEC21B21293A5DB3AC79055A14E1A2AB1902F879F1361AF8
C72DB6C585BD959FF8D0CB69DC465F32137D1B4A8F90B14440FED7E0558C96A7
E0F31A48B1DD6F27D321F6F925E13D7F64103E2A76CFFBC91DEBC2DD56E244F7
1424AC1383F7C36EB303FEBB2C20AB71FBBB922EB64626FAAAA9DB4DBBD3EC59
5A29BF660674457A70F9DE40609B822F2C9362414E03C630CA6F8225F6159C5E
AF6D02B1B53941ADCC6C283EE3E5846EC08A76EA5C201D9F9939BD4822B69A8E
CA52A0C3D37CAB4DB8AF57358071159ABA83504664F9F6AD78153CEFE299EE74
597B731803732D18A9B4687989E55BAAA158678817EEA4D4BC409CC94D3224E7
5B5764B9DFAA97EA454B7FA5E0008109FAF5273613D3368B9DCD15C20059F4AE
94766BE6B3A8DB9C099B73ACAAF2F2106069D58578B215A960603072616F29E7
208C0082C50185450C6BF6C94254D23AA87200828B2E085A16B4BB005B30C161
4AEAA2AEC739ED67EFC7F9128A17CD447047E6DBADB7AE9A7B205FC0B9A71A1D
06D2FA9ED0B02168B32F6CC0FE765F2AFDB1A4BBBF3C3B3194AABFEA61341C59
B612180E4E1C757DF26B0FAE953B015680FADAFADAD02FCE8211CA27869B4F1D
5A66BD297F621C92AA4FF0DBA776F5D2EDEE6444CEBDE8CDCEAF38C0BC9E406A
35F44C6B412ABEC733613BC8EC9D3FFB2658CFA615819B889A7655CA63B822AC
4C0C274A29EE2FC01C25913BC44D69B3AF2FE2CDB6BD6A50BC229E49B5D231FE
5E26BAC879B6A7E1A6BEA792B611D3EFD92B56C3AA4FCE302713F2D03E73FC22
FB1B961B7E2ADA50A6FA842125360BF3DC1144957CE058C7A9773E81099DA63D
302CBCBD80B08416BA3FBA00C42E2915B3AD6B7AC4296BCDC0A486CF3889AF5E
DB31EC2652D6E261876517087F5F9DC47F34D796FA5A2DAEE1C2B993E2DE87AA
82D1518A3B771909F986707330ECBB978C088F44633DD9300AF8199E65F42D70
98AC8A89D3B772221192E4238E710F1452B1FFFE0A6A33736CA5A0A7A75023BD
9BFDD0C941BC0724BE982D6AE5E796ADCE781F1F866CC356BFB3FC71126134C8
2BC2BE6F136D0439FF5B2585A53C7CB0D8FA7E1E4350DCA843AA863071A7B867
15E2BF7BADF84102F52CB217DB07076D4391E99DF321D0D871A37C34F9D0EDE6
7900498C2F9834799128DF2B034852C673ECC2D5531FAC324403D3BCA11817C9
D15012E0BE84E19441FC6EFC90C3B358537D4D860FB53A39AA12B1CFFCCB62FA
5375F0A76E882D111EEAD049F250DB2800B470F6927E9A1F80F97B5B0D1A5537
2FE6709B59AC41BD4E25673E1470B03CEB7FD7ADB4D72671135435609A235501
E1024F08910F452C7FD271C1B9BACA52194DCABDB4284F4BE73AC879E1396404
9E20BC606DE3024A5DBD396F2E9E0C89D3DBE624E72E3AD8F47C1D8468D42374
42FE1AA67FDD6C18C08A283861D5CE115E38AE2884231EBFD303386DEE42A4F1
FDF566CE2D15EB3191C4BAF4825F0DB371066A485F3B1D0C21299E38A93996A0
EB7A3357E891DBACF9D3677B4963D4005838679F44F925F924FC94865ED3571B
8D41E4680A8FCC063278A87F78062708C1E51A1518D2DB628C3C99D0EBAC0F00
17D917875BD4F183D7C20766D3626CD8D71DCD638A3E49FFCA7473C36055A310
1223949B0179CF7DE6B550657C91BF3116EE79D5476CEA7DEA7A0559301281C6
E62388AEADBEBE941D5D6182BAFFE585B2474643F58C3BBB894CA3DA52D54D2F
E83482DBF08A43A5DDBC57E1F272813DF7B7BA6C66C775876F5A6555C04D0A86
619FA46249868CE8429DD1D594C19E66F93DBC8E9CA5E86793FA37889936F823
DB4F28459049C09AD75A27D5D356DEDABEBD4D7006A2634949B9AA26C0FA6F87
42178B15884E33D4CE17497C2394F652B869142FE488F9EA5CFF30111D6400AC
3CDD3865399252B73F1E4CDD4912B3995A7DB9B4C56C828F8EC13A40E6D6832E
5BEB7383E249556A7D03753BA53A79CD8C2519425956BA861357256AE8242141
83D73D794F721E1FE9DDDE60530ACBFD53EE23242B4CC75114C0102FFA584F7D
CAE9619544FE8CBD926AB84D5AAFEF3556399E55431072462370676C2560F4D7
BFDAF2A5151635E99322E7730C26A70C09FB28FF51657B8A929CD02CE26ECDE7
898553FFCF7C0D7862FBBAA3043BD6D5775CC6EAF3B8C3E12E312EB7BE3084D2
BA1FAC3D91C6E7195BCFEFBE77149F7CDDEFDF6AD4BC9BF80F3188A55927B3AB
FDA6B7BA4694F804EC6DC2182FDE51196F72328E5AC06E7DA6F76FF4B424C52B
014C68C1924EA4BD6E305B7E2EDF4854AA899ECE4676D80F8AAA5305D162D03F
2081A73AEA6D9BC00E54DABD294D53D398EB58F6EBC3B101B43AB1FD8647270B
7E6AB646A70F51417FC07D5961F851A2C113C8D2D5BC6FD512165E6A771F1808
72D18DE8614F5A8352E417810A48AAAD3EAE66BBEE79E19BFD12AB3F83FAC01F
1A052E23200E94DCDA8807FC3021A47D2A08B21D9B6D5A3669931BEFCC716F62
2A9652257E046C5C8F5C8CE701BDF2C611D54D9B914EA59194239B6EC95692DB
1534BB3387633A09B4EFC4B59C3BBD5113E1FD5B2E0903AF6D630DC6F2532EFB
A61D0CE72227D78BD1C6086BE4372789A5E4A8BBE7C909E080E70BFD14126276
E333BF24A5894AA474C9F08EDF66B627B992C9E15CD681604A5C1836D42AE44E
136202623EFF3B3873BE11D518A5849CB4888A353080A6446C0D86A6F09F1CAC
801472595D93E408092B5D25C568A69F9FFED6FB375C305CC023E733705B97D3
EFF6C89BBABF49EEA8A49A86DDF09DC85681D27B2BAEE02BD1E38F66FDB635B6
D9CCCEE634517D4C7214E2BEDFE7B9965171FF22F317EB8E09CA88F8E98A4B3C
055C01823C4384724518CA93895319184A9886D92E479DCB4C2758993ADD87E5
3498572E0B8A7A3D4787A965192CA6DCF61AB5B28E406FD9088ADB38F9E4EB3C
AF8EC7DA2E56B5D00F393FE2CC6D2731B39B172EB3758DE43E0A91DE99345456
3A528E1E6DB99039FA5AE08E56576D2148D4A90A7DB5437D587EDE4E16A7850B
543F668A1C36B35E04B0FBF632F92F8720BF7080CE3D505216E026DEA02B7D15
4B2882A031A272104AF8978390F72AB65858B859427724D09F80311996E8B302
272B60FFDF4B8A791B5B54E5E9D98BD5B3A869A8CDBCF6B1BF7F26AF21C21D9B
1B916F4F603DDB68D18E4DDBD6D715FB80371B38377D2252CF0A85C938A803C9
4D38371E5D5E2F8CA5E2D0FBEFDFFFE0C38C8926602C41F254A093582A6625A0
A490C4C0D6C3E0DB490686C3EAC79DD1C5CD4860749F82198FFFDAE1393586EF
D44C3DA608FB6772F6BF07764C0C519F264A899C839958AA6F138EC1501C46CB
5B5152192E8D337A77D60A3BC14DD2BC5CCAD3452A7FE5A527D3A9DDC1C8E5A1
260E0031C9DB554403EC5566D6D4B270A06BA454296EC17A84392D38D5DABBD8
DD0F6F9FD27FDA3B150A099993B56CBCE9C46FC8BCA434A5264E6403BBE78336
0B955226858470B452B2C4B94917B90970B663D6035B274091578A128DBBD9B1
02E4DE299FC9762C4E3557F619E50346D14930D54CA098321FE35A05FF4CDF11
A2EF3FF5EC6E4A9D0B6AAF566752654E81648CE01CAE6B824B0741607255971A
05F216B73A11F4433BE9D56D2125766949D363C0E172C6AF953BF4821182D7A3
485EB66391B6C8D23DDF2D2CCA14331792901E33FA374D2AE78B868B19724010
5266C4DA164EC2F64DD3E2383554FE5F16DBAF19B1C3DC009E94281EE9044838
7DC65F1B6E5D964834D39D8017B13B088A9324093379917DC337D433376EDD4B
45577E4648B35B9C84FBE4B94E616C0BDDB44A1151E2C916B3230FE1B4402942
F0B098675BF3042A3E56C84399F0B4DF65614142CE79AD029AF5DEF7B359A6DD
573EFF7324495511637ABD5A6967E6004D88512A8506E972044F59A3889A9481
A391152151055D2B2B9DAAA7D85A7E672308B39E90FD6AD32DFBD4E8C89A9FA5
772BD7C4C88867A273E39AA72250F7528842FC37D91B86475F3CC68F4BAD5FB4
99AE7CEA454FC87001EBFED0DD4DCF5CEF72D7904F3C5C0D1D4B4F510F703515
51583A0E4944D833DEBF8DD94EFD5105EE20AE0BDDD958176C666D2CCE60BB5D
DC30F4A61119733F6F6DE0BF4C6437A849A664CAB2E0D06B1227BE09D28A15D5
3D2EF768BD776EEE1B1609A6781213329980CFCFB18CF7CBE6C7FA3C27329FE8
FDE15CBCC2B4B15DA7F10D8DCF4A96714FB8C4C3BE85CE60B711B494574EF19C
614345AFEAF6D6AB12606626B4DE06EBB5886888D4A6C5C7AA46BF45AF4BE807
752E988651C8C8391C12719AC3EB6A7652B3689830029CD1B6325F3D9D687547
82186ECAADB3C8E713340C110CB0A296C359A9D2372D5BE1E01AB1EA93615AFB
FDD298FB9D4E2DE8DF3B36DB44DA46BB19EA1EAF0425B8B8CCAC4B1C31950A39
3F4F1720D25160F42D9892372CCED4F887237C3338EDC66E14A05F7429969E4E
7A93AA0159E6173330F0F908DBC35574655C93E13E249C6F1EC31692342A5AA4
8B228CF68EE0032B1968EB88119A375D4AB6DB508F3EAD9A57AB12A9A916D7EB
1B0EBCB743ACA0513B5D3BF0599B1E4A6AD4E0C2BAB7AA375883C30B83E2B8B7
F7435B508C0FB63B6F6E5679D2432045BCBDF9AB2D877D016B1F58EF688D9DCA
5C19DACFC81E5E9F5D5EC94BBB73A61F7C685A3A9A518734F9E4D7E801AC7B06
1C0D5362D450F5CEF063234FDCF00C43F6C605BFBAA1ED113E1CD62CFF43B8FE
29E702711D60CDBE68ED50F9721FD006A27B6DFC0B5CB2A4054EDC8C7A27E457
96576824C5E3561BDFF89136385827B7980C2FE0ACB1C1EED9DDD21E07F526FB
C2F8E32C84758C4515916CB249F1E40DC78B53F3E0B671098413E318D9A0B75C
53A9D168755A4EFA8616E5BB1DD3BAB615DCE159D6202519C9ECDC438A1B0301
0C44859E80A2211EAFD2E6335839939743E3EDAB572B816C02CE2700205D7E1D
43BE82C54908A4F250E805C5A55E36BCFC73585F0C578B53C31C3B82D3060ACF
1112FA31D10565B2B293E7A6C09E2E8FB8598C19F8D9264ED3E1F628D7837DD6
0AA72A8A74DF41F8FDA19CBF02B8C539FB20F08257D40F890FC7E35E852A56F2
608735CD2A532A8B3AF7855ACCB93D4C6BCD6CBC573AFB8D80C54177E7D85336
3B246759EC16209E81FD4182705468F167630971BC01DC641766DC254D9E9DEF
94156D594FEA136F2ED0C853EF819F0A9796DFC3EF2073E701707CAD34720855
0DF890CF5924BC50D349A73036184CCB17539CAF6DB91BF6FA48E94D48C1EC30
A4DAAC123F4FF7600EC58DC7AC4AB2E3EC2E57BB179CB309995CE4E5D6AA1C6F
813D68C3D0E18DEC5682F6460FD62AF97EC724BEA6F27CAB18306462FC72D92A
C07B158718A086A1F1FB33869A00CF375B55B8906C9A0AC65952D4D4C245CF76
8BAB03DC70130158933F88571D558DD0368DD48AD94D0DEF00E25E76AEC5B22F
D073701F4D5391F160D512DB34598B8CAED5B6DA81A6C816C7475379CA98C94B
6D69CFF950270DC1AB3B2964A1A9472232547A114FD5A1D0124CDE7CC9189CB1
A51F7AA1F2D688DD756E87D240911DF09A7B362D7CBEB0CA28A1E598EAEB6F28
9FFFEC582BCF933E7EAF912C86CB6CD5BBDF8260DFC6DD416A1BE2785C542D47
1983F136CF48AB206F09C8F9A7A1BFA435C1D12E3E64C256F10D66BC78DB5D1C
8A4113B5988AE71B8CB269364E8216D5A4DD597641BA4AC01FCB7D76FE663A99
E64655311B952AD69AF7344B182C60922C20215BAD4D4B6271543A4BCEA5CD54
5110ECE6AFBFA6625B81A141C3AFD1CA05777BB56802707BB7D35EC4DF7C639F
175EEB2188E9D09ACD08123E0888A76E4D56D22E46253CC398E248ED2E52A989
57C416978598A5679207C76C999903969568B43673A80D0C549113E9321CD5C5
B648ADE91791B89B734E872BE687E627993B305E2E4ECE098AEC270F112CADA7
4CFF4BD789326E985818B87ECCE3A0213E77E529C2C074B174625123173CA293
576476D8AB9050ECEECCF35182E14D08DE00E50B89596FC8F4FEB2C582024503
754847E28D80D764662A00A885E1179E5D7D63E5A2950ED9ADA8C302450EBCFD
E53B3B31226325A27C50FC50685C434D4EF1B12641531AC5BEA159FEF3D5FAEF
754ECDC9238EB07CAC4B37C3CAA2716A7278DA0E93A283E9D33ACC84F0E49556
87F199C29064CBC0503FA4BCED3641265F815F8E69B1D2D6EAC709B039F529F6
15707BF2D2151A145089E9503FDF145253BD827ADB43D157A1BDFCB3233B9397
ED4C531CCEDD11F7C39B765BB942E979AAA1DE3496DAAC6C33A798B6E803A0A9
9CABA87DA35B532BCA16C510B99B57001050958C69140F1F2C1AA25026527B2E
F907D230621A22FB9D4A8EB84608A5E95A2593A77AC3B48D4776805207E8C79F
E8C1E98BACBDDB68AF7CCF8E9071B0F91B1FB81A8A756D9FEAB2BE6324E5BECB
7546B03B3AD7D3A9125787095ACA9E34C45BAED9D91FF93DA9079975CA4E0738
6A0104CC5ED2C68B08B6321F881E98B4C7F159FF67E1BDD3F5A6455087145759
F387B2E8551B441CA97394E7AA0197EB3648B68FAD548A1F010A0D285564286E
97F0D816D95BDA0BD99EC4932E1CB09843818BFDB64E5341320F1BC615E42A10
FDBA51398D360D6B44473F014F2B62D796AD65EEE0ECC96C405E3D02564C1923
0611D686C9843D7ABB8A5F73D6052AB46DA8D9C1D5A98715EE1E9DEFC0CB25F8
A81E939F7CC992E46E103E8B8365467A48DC381E16A83A1D1C99CC0489E9879F
361771A353823C9779EEC1A3C3E38EB0B8414090DC520ACAC413E2E0EE22A599
67DDF37CF7AC158DF98B7AA5390EAB962C99ABC95F175218EB40722B6E54BB26
62ABBB3289E5D4AE2D70E7558D477EA2FAA8E6E0559CB688E1AB77D3FF36FF5B
2B627D7A18371F4B613DD91023F605C0ED535A8E130B46D349AFEDBD5744D36E
F2D3F62A53AB72F3F3A86567B24A9C826AF9B21C2A3C917CE9F1D6651306BF09
3E3984EEA6A506761C72CA2C8C9F1F67F714BB463E504FFCF706FBD59FA46DF0
C31B9DEA0212F6C602225851BB4EDAE771D882ABF24B35116AC4F7700397DC3E
637358E93F75161238C3FA77C3B857C7643A679C140D6B051A6E0A811949E477
BF6563FB4B4BEA6BC069835F3C3641AD632EE25882C108FC10271F5A5C8D1231
B049B169BA2D7B35AF4D97F417492DAA7D861E3890863A249FCF4E88F20FE70D
C14F1F22085EA743F9C98587768C2816E4F17DE948AEE1BBA437545C47768761
11BE2F80F3F67EF2BB862CFA8408E52DFC18BBDB6FD96DD3A310BC8DC9800508
8906E272E5FA1F7A5D933401806BFFC218FD13130DCE93E88B5B626ED57166AB
CCFE528C554B05F0DEC4685DB3EBC6E449DCAA5D13FD143F89FE3B6888B83311
AF74FE5998D7237AA50FCA0463C620453BA1975EFFCC0F82ECC1543894D4C9B0
FF9AA313B310FCCB059998BC1BCC5EE2EDF4158071132647C1D9712609A954B7
2A680FE8D725AC02D563DCC368F425C547381F933116E9B7423143E013E5C19C
8635B0769DBBCA2290A1A2A5F44B948ACF6C46F5357CFE54802EBC92CC9C7848
83621CA300ECCB25BF1330E865801A5A5CEB0C977E00FB8A600F088414D8992E
CDA0ACC39AB210921E3327BDD23BEDB1289D0B7B0C27123B55C2F4209D410089
D9C90D8E3E7E66B5A87C5E297B133594D0A330C30FD6FA980ECC1AC028AF963F
CE41F9FEF822726E24546106DBFF5EFAF8B68FB70AE6CC7B0874467E5A684404
DC3B5512F5F82607855A503FC58D7E317C01B94A69A80B45BDEE4DEF435E40A2
56B359C0ED018E34B5DD6F046D50A7F3A6394B628EAA7F543D2AE848AE455823
16E60A0CD5E2B5B32F9D6519C874BC9FA419CBC537511FEEF7D2C2CD34EC0433
FEAE0FE9C9BA63D87E8212744C726B666EB28F9EF5E3327369C249287C832EE8
79AF96EC4C0DBC46EBC3DAB7A37106D82ACEA60E3FC6EDE3E969EC9A32AF0768
E75D440300F0BB4A079AEC4BDA1147B7EA53FD3D3ABA1F639D011E24E91F1444
907B6ED9E7102CF6A810DA55037B5B286FA782647B048CFA42C4E8BC31C8516E
F6FE5ADE7C61E307276D2EDCF4FC6334EC2E3AB4A20928404A9E3E0C2FD1DDE5
9DDC52CA95AB4CB1782595D3A89DBC85D9BFC275AA0807C4EC2E1005276FE0F1
2AFDD947E90920AE68A37399F6D34C43803C3596A4A4AB4BB2CEC3DDC74EEAD6
5A5C86F457B5AEBA634A653698E0B5CAFBAE3C259D53ADFC977A0FEC46151F5F
9E2B9754D1924CF42A1D6166AB8E4719603CAB9C348098CB8A9FCDA789422381
4FB5CA83AB4B3904645043EA3F56448C7C655296D9C7CDCF1DA424986C648E3C
1CB311F9BA547348BB75038D88914A7669EAEF9AADCA71BA25034E2A5A289A5A
A695C7EC9DD0D9FF11784A454850EB06394C8AE7AE77C7BF35420645E4912E54
31C06D2C1CEE39D5413C110EB25E1209DD9A99964B982FC858089BAED9693706
31951C63F5EA0114985459988C67DCCB845094983454A37FAC420C7D9AA00F3A
3716B277BE9F492E4D1333578E7703863556F3F7AFA02B6A863FE6F8ECA4EE3C
763845AF8C19411C75C74FC04619CA8B3D42AF03B8E621DC93DB97AFB646A4E8
A0FBB40545ABBC7DA87E56EB17A04203C3562F16DDCA21FB24568C6D2A26A318
B99FF439505B515D8AD910CE747D2D925F87A1B65D1DCA980ED84F93DB59C197
7C095F1DD63AEDF826029E81268FA229975F390319CB6F0DE407FAB9397B4F55
8005B5C3B6132DEAFD7A5F91AEB765F2633121A4247E3C4F8235108B618615EC
A8BA42697DB9350F9D8D802E60FC1EB3C272EDF78BC82ADE63B6E5DA19387703
B5FC470D50A7DE8B8069FAEEF2B18CD7F8B8AD4F8139C4ED011405136A9B6AD9
01986460AF6213ACA71F2D8A7DE8F73687067D7DDFB26A6FADE551CB906212BF
04DC81D05A5AA4064003802FB743A962C6AF4BF5E2E6B7FA20F1781BA4CD3A2F
9BE6C00A327F01B283971E8189C319B82232F548517D162B7DBDC351D190BFA2
C1B80178081AFCD61C03E32FF2665A460299B1D5CFF784282EF746515DC5BBD8
B6B7DCFD1836CA4F543C7BA465CDE2E6374FAC074BB95DFEBD3270312CB15B44
5B553EC3BD4A4B8F8443AEDB9F67084F8D781AD23EA004CBB881BF5E012B3791
EEFDC7305F75E3948B3A78956936DC85660CE815030102986E2520B30144AF8D
EEB394B8635D71A4728E584DE31A59F7EBE11510F6A5E594C922DA3E708950DA
C8CC3ED4F10142CB8D0B1B2137A9BF30B54E2101C80F2C8BD54498C55056DE82
1247F764D841E074532AE3366CD16105E69CE728BE4B59E52034DC74DD9C7099
2AAAF45866D8D63736A1E7496C76AE7950F4C9DA13750FA4B723142BB074DCC9
B55E3A49B384006CDCEE067470D83E94791D463971F63823702ED2F3DE06FACE
21EC78EDDC200E0C407318D1ECCB129B1C0F9DBB48DE5CD71D477119C88BEA91
D73C40864C8782C27987C98685192901A1154F799E53CADF595EC5D0FE2B07A9
6139811DDC35812A4ECFD6789771E1EA0BB7EA867467B531F32BCBDB1EC8F482
4793A5686AEBA6BCECB6A73B5AFB33935474FF7E82E9C5CE611FDB0CD573E9BC
4B9FB3639875028E065F9997AC8862F81DE71F55748587E98FB123C1C82AFC44
5CAE96D7A0108316FFCB1259CFA4A8ECD314221F4875E5C86953BAC60C78F0DC
614C8653135A76EA2A292D0545C55A9E08FE0E7AA6559D5DFA2BCA94D10C1C8B
12ECBBEA674E3BD76E2464123F76CC75F4114DD7CB3F35DFBC65585F08258D84
99984971DFBC3BF32EBB01BD6FFCDCAA71CCF2633EDCAEB9A88117633BBD60B0
A8C79888AE548500BDFFC20DFA02DCA07F57B5F1164FAB22A7D4133EFB8A2D96
FE16DA2F528CDA5592C3247B8CDF4FD42A86BD27EAF01B884A02EFA230205F89
EC9E38D402D6C95F727F7BA6B44B98FADFD0B2614B581D37C3CA7FC58B141494
72F6D5579D274ACE615552EA079670C90E29008AD6510C9DE19C3BBC892E31A0
0DB1728E53331B8DD963AF4029354AD4E977F07F3B3DA465DD961FEA1B7F45DE
8C66E7B77EC5D2107CC9BDE328C19D338C4642F0D9C2347A19A249F73B1EE4D0
C6A083B0CC084C3D89B154E5B43945B540B19EE3FBD7874EDF745C6E2A7EF781
BB2F85B330D06C79F126E66FC9AC050D1C6D673CE8C1AE617135731E8765F15B
4629AC28EED94D48D5C810E94D6D08FF1CC9A7D9FD12E4340C3E064D6EA9EEFC
911FC59B10BDE6217FBE6D35C63EF7B2855B06EBE67A53D49EA858D1559496EB
F6852650A3D7BD3CFE063DD3337CF52814054D2CA6DBDC0D3F099FF0904C29C6
3F484F93FDA7495FFD2989718F2C30C4373865E3627DC24E3B67E616D26EB401
7C11A634363086B238FD671281BA0E0359BEC6878587031174C8FB1413CCEB7B
316717EE859D7C2DA83F003A14195495CC873186227C6499DC4E6DE17A43D33D
B3BE958098AA8E79ACDE838EF96D043E0EEC1B9D820CF93F5FC0BA1392FE4B49
E4F7DFCBEA9150C9149C13DA7E57E3A9D00A1D74DD996474504545DD2C1B775E
4CAEAC1DA45C79267B964BF9AB0BC0438C5F9AB06D6FA688C48C7DCAB3F14423
C4FF84DD8D86D77F26EC86CC5E3F6753451F75F7C536D2B0D8A303AD186A5DDB
0595138C0E3D757E8DB9B542ABA6CAB659ADB6006EF4F9B28A39687AEB89B307
4DEABF5450D66D3003483BB525E72624E6CDD62EB5BC86F9F49EBCFC9A8FA266
C157C0B4F4A6CD1C1E1DAEE32CFC584EFC5ED60AF6B276713EF5869F582AF9C2
D26A6A8E0E3440B5C31A3AC1A26F59449EBBE9305901384C83A84BE35DB5D57D
4953C4CE9A2F30166F72CE251AE357FC4F4016E2FF1613E44B91976E0B0E9984
FFC122006F3EB13EE62259F1BF542BF182BBF2B5E7D5F505A31FA35DBDD6CCD7
D6C9D1F82E2C36F2B7397413809F1E632375707BD871C2F10CD8CD021B52964B
D667E84129C37F814704F32D0F27493EFCABF1DF544B765CD9211AD149170455
0841BDB78F29C7357052F8D8BF1414725C5DB9896F81C520446E07983749457F
FD27326713F92E94C3CE35393B60AE09381B6AA05193CD6AEB6F31A10323440B
95118969616EE77768C6E019E37CF0B527D14F008E134FA0711FE40BC8A92290
8FB3F41F8AD328500A1BEA9D315CB9BDBB6A62002479E240B8BF97EBC2CF52CB
A27022CE572EC5D0DFF1664BD08A9FEFB11E037C2DA683ACEACBE6E0D36B731E
5CBE0579E5C2FE3768C572E2909235B5673F72EF1A6F77E2CE6D3069901AEA31
1338C25AB5231542118BC9C6679D7479579502DA7DC333F44D76204AFF41F6E7
B7E86CCB6BF64058A403CC63CA2184A724B44D92C92FA5C3DAE3A90BEEAD32D1
F99C28B66D2833172CEE73DAD5EC17579242227DE7920D88A15B1DF37D7FC190
654C9D03F5144F7D137C5D5BFF19956735C1F1BAD9F90980F67404D8D898F1E2
1E11C0DDE6F5BC9364627C4B7F72EEDE48C066CCB97F38F14877419D608E58A0
A9CF38C1B0BB162028CF9D79ED3CA54042E026CD4846D3276CEA9AED7E1958A2
844855CD84E6D24AF8C83F65B0E6BF7A627B89162E0CE4036ABDE36F45701E54
72911F945673E4E2FE91255A0A56609FC37555D00658AD8D4424615BAF6D51BF
CFBEDDE57AF4E17EEF0F83B5C0C505CF2AC4782E9ED4DB996643A69C87694ADE
CE3532C402B933A9E60E7D5DF243A1FFB7610BA423385655EB64342E5FB6959A
027D4630A3A5A580306525FC1EA2CE81797CF08268E9E46BC24459E7291F6902
8819E8EF14349AC8F6794428B5DBDF7122CF89FBC9D1AEEB2206C4727D30328A
284D6C09FCEE8A9281550584FF5425781B4935D447A03919D01A056C19F4D2CF
444D2845E5B740B621E089560BC59CC88CE77EF1E843C3B7E703B0B38CEDA174
CA001B312141BA6CC5B99C850C4A7FDED8D1802F2EC862FB85A143D7B299223E
D8525202C5FCCFBCF6B1BF7F26AF21C21D9B1B916F4F603DDB68D7A4EF6D2916
D275BCEAF3987102F0471A2710B7E626908E33F620EECFA99A864E6BBD7B604E
1C2CC3939E6C5D31069C9020C6508369D2E898B3D68D3C0879902802C310AC06
603E38ADF833F37CB90787ECDED970FEDE1C82414A91D667557AB9CFE8B792B1
09314F36D03CADD5DC16B514A3EC54C4E0C42B085B6281C99A068F7BF8682C98
8BBB43DCF241423ABBB9FB8CD3958FC25570136A2AC0183E4940D39333F5C86C
4BF3677CD9295C3C0CE6E63F2E8B1F0F9298613CFD8BB7FD79AC96F653116130
3DF03EAEC3D8ACB933A782EAAD3AEC15E3AB0890DC5D6CCCD5D13AE1A3610644
3ABD71519EA6CAEF429F2C68DBE1F8526EEBBACC2730FBD6315F121A7068499E
54AF4119EAF5FEA51386470546C8CBFE2034E5BD75EC65AD7CA1F277F303C913
ED7AE0E818987873D75F008F2D183938EDDE27C7BF4FD6AFE5639AFCCE8F585C
53B5F23CF31A615DC3C51859B3FC75BDB098EA05FA1A1CEBE9B8214992F351D5
6AEA14C03AD805AA74F655E66AAE924CBBEA49FB6553748555CFCE1D80E60319
285DD1B86CD5992CC81DA697DDF1FA716A895B7AD9E7BB445BC72377A8699BBA
6DCBC4F94696A6268D68446E0DF3354D8B50587E85A8F9FBB95BD90AC2FC83BC
80A9345337E9C92A7C28E1ABDECD2119450CF9056011CF0D1B9910EB4B40F86B
92F451DEE1F9AB40009D0682CAF5DB06CDDFD2F3608633E4D746738F8DE06AF8
198FE04EF93B1AA3CB006436EC744B99944F3532FABA1CC4A5405AA1C1BA1C2F
EEFD31E50A5B0BB53753D983A92530E8F9B52633F76FC5EEB74F2176E8946211
58C22F176B30163607970B04647E765BFA0DB73FAF83DEC48FE616D0820ED618
5E535DB5B40B08F59808E227EEC7FB8DCB92B73BB3F3D948459B6051E5992EDD
8A623FA6A50D92DB250AC7C0DF7B272F370C35EF2391BC77AA349F47F6C69EF3
E35C72C82DB61B955C1F846F57240F1403246F9CB2266871E2FDE9D7A8A0D83C
AF2AAF0E6C02528C286AE8F24B38F8D4939DF262FF68257F9C9E28EE7C5BBA5E
7B009F5C759D4B84254F67ED698A9E9D3B0926F0603F37C6697CB1CA21C949F3
6701B8CA6E788D10C248B7463177899A6F4432FFC76C749EB20ECCC21BBC3753
0C7CD021459C3F2C68A9AAEBA22656C1E28467CA4489B5F541431E0E30851073
67B392213A1665DE12954F43E5359A69CD68985E43E8BE4CEBC2831BD005C729
4B822EED59E9975FE2FC20D1AA6A6AEFE5210979A18FAA96F35412E6FCF4F9AC
6DDB92D62AC8639359548F49F5DD637806C51D4153C8D451EAB5872C79685B50
CC82ECA758FE32A72DEEE11D408E54DAF1F4A327005CD6FDE60CC4E342273894
3C206C4150A0DDCFEAFA4CC057BFCCB7736A272212134303A6CECEF71A2E7D49
C8BFAF0644AFC566702A8A0E96B42E1E6075F350FA59819D57F331BFCC7B3207
4A120348ECBB2AFD87F758A93DE4BDEE95926638AA2B14A4F535C196A3E91C8A
2255819741CAC4AC262024E28822E7347B59E00E6C0676718A1CD9960D54B42D
9F273BB5DA34D6F7DAE14C425D9E0F47A75FE8422CCC0E3EABB9882D139B28A4
42C2EDA49E39D905ADDFF4F054DF0A33A072AABF41CDD50D39E898707D1966A8
909972F3577C6EAD548A1F010A0D2854B808CE1B3E476B907995066976318880
AD42CF8ABB8EB0C7841B7B7E1CAF856B5811B231B2EEF1F79853FB43533A3A5A
CA3963389F8A9C8D0CB1672880D5282FFC413236B6F67EC5E90B41B1D3CA1FB8
C193244A503C1B58DE52EA56A057CDACB19C0DFA73822EDB5EF510B2BF12102E
D0B721C751699D83EF6CE4E37B799A57B8009493929890EBB3F0C168479B6FB3
01C5DCC0AB2D5635020D26B524DACDFE0D8DCF2F1DF042AEB1783E9549B6E792
B1FBA53AFFEF94FD342BC0B0C26C829A4A06AE64852665BCA6B481C1830FFE95
E8C04A5911464BA2D6CD239CAA9B28146CC516ACD809E14A5BDCCC2B78551535
EE5DA52B7AF5030F8AE148231414F2C07247CE5236EB13B7F1E8A15AB9B0819C
356919FB5D6B2091FB0F74E34F73B119BE0CBCB087ADD6D28175DD1DD28BF166
4BE2611277AAE68BC42F8F6B29C7E6FC18A84D13EDB9EC511D22598BD2EB1EAE
20D6FBE55C7AFED3B6C69E17A074031B8EC4BFCCC16DC273D4A01E70D7B191DF
57AE3A4492672A3B30BB7DFC8DF26DA8FB4D014F8C397A34C42CB977A3CCD90B
96ED207BDDE1571C92697ADB8323478FC280614E7CA5CB3E7BD25031B728E8D2
2253EC0B88C4FEB205770A7B3C751759BA48E95773B093A4CB6A5FEA11B2E0E0
0042386B58DFF9CF6960522616854D1E757A25D45087B19E408F778E8EFDCAEC
C6160D6C7042DDFF33A954DD01C8E21B21F8F364F7A5F40888665716037A35F5
74BB08A82641F3636C82E4122041AFA02D2B39D2D903417F1035C93BA9ED147C
101518D848E67AEE69EFC73CD12533D3F6BFA0FB13B4287AF245BEFA7D935A4F
D76D7A9CF080E34D19836FAB58EF53C340643408B2CDC39081E36984C6535A46
50B52E080E99E1DD8C3FC2A00E05F0D6076A34A4B833ECB0596D6850EAE909B0
2354FF0785CF125485EEC34EF9B3D24B4DA324F5BB99A2CB1E1D6DDFC48CD789
76BBBAC4B581199E221F8E0D51ECDDDD56B2E931479B02693A43B6F6DAC30CBF
D808BB53CC6A863D331500A4116F52555846D993E48925F5EDF78271ED4545B0
7BAE407DD9F6C4238A71C1F3511F227119F68C6EE144543968DCAC8783E757EE
D0CE3161DD6C53C0B88A491B4E54A2E3D6AB81DCEB396BA47EA54A53430438D3
70DE07B29223DEFC25B5142AA7E7021B4D4934FB6F40D95FE040018D7B32B93E
00A43FEB9EABC1A8EF81E0EBA38E868DDC3D1027A492AC809D5D932852D0B965
164AF3A96F481E256372EC9F96C80B83A18A0AB2905B98ECEEC6D9D5D3A89AC7
9F2FAD8030AD20D6138DC2125F802F77733C7D1977B89167FA2FE3BA962EB3EA
F1F922348482D0FE3DE31109B39281A3A07461BFED05788893041F84F2C6DA43
4EA611EBCCDB6436357987705ADB7596D0E268828757AFC19E45C3C94B1A3CD5
4070C80AF82DC8CCC76C007B90466167D1AB7053FB07658436359C2461BEA57F
9CC512BDC51EF254927393186D57B74D8268BEDED04246B2492652DDD3D3E793
4857D8894876F46A2A4BAC73AD3C0FD804C49181CED7A78CC26BC8DA4C262467
AA66CAC0D20720013D660C43BA6A859DEE2E0336DF3CE8EFDFCF82B6294A4C68
207D8F71E5B7D8D042CB8C40FAB4644CDDAA91F6F0D7106A7F099B0AB9BDB819
2271B478CE0B38151243D996C991A21C3FF7460751C04ADD2B18A0A4C1E3072B
E4B12B5FA911905CE22E494C05C60871997E7A80806719441F5CEF76F2A57703
B6B8F65B056C98884CAB959435CF384E65ACD6985B76797AF750CB177C33E503
2432E7B1CE7FEEA5BE7EF0EF6B0BC1B1E12087CA692EEB2A093DF064BFEF7CCD
947D1F6CFEE8A32C268DC6FE77C016E69CABD87DC8C6325F0460690BE677AA6D
B7E0250B51914D3F807713E3898334BD99CFBE66C4FDBDD9B918062359CEFB2C
3426556F00AD40A44AC4E9BF26B73B17B6640C36771F373D3A63E8D2340E0092
42CBE02ACEF37732BB31DCED6A289C01AB88876D626C0DDF493F875241C07BD5
E115188633278729806AB262316B6CA23F0447CBBFF3B59F90EC4E790133AA57
8C8AF018B06D7B9F5E12D5132653B00D7E484A88A248FD17FF0E7A075A554F9A
BEF0D86A8F31FD3021485E3D8258685352AFC26AE133AFCAC6E32760AADAC30C
9C36041CA7C48749CB0434A28FB00E2DFC3E518E4F4D1843A471576D48945DDF
00CF57932BA4C9DB0F15FAFF7CBD701050A1DB9F05E5E6D9D24F9CDD9F80028D
37C9CB4067A28D41E87E94D3ECDD79FBCC7A4425EDDAA7F49257148F05FF52FB
126611077C30DC0E40C2D8A6EF4D85355E596E26B67254FCD9406E4766C83F8A
052743EE40BCA174B5CC902E7D67E1D855C0CEA79080BB00E1CC70736B448E2B
9764C0590AB5080BD883DE8D9798D38A737767851EB810E15DE5A5D7FFD82B40
821AD339F789D87C8338389DEE7F7945F7D5CE60C6C787D09205A17BD54BE090
813E6D5F3F15BEFCCBD19F5EFD81728421DCD22CB09E7E1F375D911AA68B01C5
174630B4B22CD1D6911B417AA088246E7086804A279750C7B1B776240EE492EF
75977CA4E83AD725089C8E78E041FB153573A7F4417F5BAF2B9C54A0F9A68E28
A662557D4BE9BFC648983272669728AA72398262B793D28C63143E320EBCF8A3
FAC6A410086D032ECD7B0AAC11EDB74D46673BC84C902C08CC73CD59E8576E72
A8186570F0EBCAA0CCCAD7FE46DE3BF970382359AA3162320D340D735A86A08E
ADD2C9128131E97AF4D2CA569A5EFE85111E1B82519C0E6A1E2EB4DCCE53B02E
52F8C57F195F6EDBF3DB5C30FE4F974F95714953FDB01AFC8DA7A4D876233BA9
60C598576D8BEF4C795DE35C2A79A4B70A8960D6AE2B562CB479CB603047B0C3
9C8F087A70C647B50A8F7B2D4EBEB45D64F90F08A31A980824406A11EA513D5F
32741364AE5B4FB4C4BC612CF8E3F91B1C9BF178C468293BA9199A4E18C43E08
B58D5E1111D6AAC4F958DB61B11A11498ECE0255C8C4126287BD22FEB768221A
D5999400FE9B093DEEC937526816B7E00D14BF1C354506C4DDA40DF8A166071B
E79D45CFE4070F971EBE827C4A232944E6C7C95D376D2C48FFEA0D825AA3CE8F
F2CDEAA92442456E2B42D04D61E2BA368305A56E78C45C2003771885D9DC4239
0E32BC4BC1C2FA96014CDF7EE1419C358E0A25E5B70D2836DFE33E7BB33D2089
4424603C5A41EDBB960A31B510A33BCC14C161C52EFAB6B88F3D8CE2F5A68F2E
6DB442741BCD97DA1B060CB57FAB957840758131D5F71B4734E0E52DB7558F8D
EC1FCB68E96A9213C8444BBF0897CA4B909C846061C939478D23E48A74F2C72F
7E683E51BC4D0556B4E7FF34983ACB1A35E9C925F08060154641171E00413B4F
4FF8953EA5F73800BA28FB0A95B31985C9B36A75C82185EB8BFAA3D4CB5E1732
7404D6A835514F62BD91B864C57C93E29D4217A1FA558FEFF0485CAF90627DC9
C4E13B5681473BC971AE241B38AF02B14565A533E67079EFD24D8911F60949C0
75630D5E29912CD7E6362E528BFFB9AC3D8C274AA862B9369441EDBAF6726A73
053895F48E44F0B691350DC0E4B38E4B5B5868A34E643E6070D92C9C446AF84A
690F56A09A84EBB1CED5515C36F279870977DC7D364D5CE4021B8DD85F1E8A29
F10E8831288C3DF8105D7DBF3D2758D029FE066E46BC856B971169981B28F6FF
603EB44730199AC8582EFF6D9754554E132484C3F2C2638F4475035D92A20DD4
995A622BAF0EE02FB16B79E5BDAAEEB4ECA7F8DE1A904CEA56B58FF857A05357
0CE237BC07A8368ADEB09750D714286F7A6660C7693CF953FBDFF9AB4F0B12DD
5097466219B0742CFA99651EEDC4ABFEA2DFA6BCF541E2FE9ADD6FDB36BC6E5F
4C52FC45C2CBD4CE12D70D9AAE0959BE0499EB31E11C0E801D5099765AE51E69
F5A96C3FD32EB2006E493BC4B80968AD1178A8DDBF0175562C2E450B9BF29C8F
57338971D7BCB5F3FBF8735AD8459524D93A92E5DBE12B42C07DC2A43FAAC36B
2BE303195268BE490C9E1F19E8ACB8B4E56AABF265FC35C70118E421AD66D3AD
85B2AFCFA3428FFE3F0A1088EA1C6DB95174CD0A635B79929937367E1117FC3A
0979D787E7D3373F0F8C2C8A014B5DA7E981965C0498165673ABD3E8CB630689
E964FAFD82E425B65D3F8D5CE7C2A9F04C499EE0278C68DE7987BB55D05C4D40
436E36EF8FDB117C466B0D2DCEE601831FAA6C3B62412E1E03D0385EEF72B5B1
4B50FDF67AF97A3939CC0825F551D7A93D74CC3A8352DAB5FBCAF2EE27CE5D81
6932F00CACD6246FA60786E1B5D93E2FD6BC79EA3A1963B9BBA8D738CF1F8417
C4D1106F13D4093C3060CE2B12E3F6F2D04FB9FEC0469948B8C3C69FA1F3B656
410AF21E4DB33C06F6E50CD5E02F0313BEEF1080B8E63CC10012F89A16ADF045
E0AF3C46E20A43273FE8CE2AD4D5609EBEFF3359F62327FEA224A856E0B7309A
9711146DA95BAF585E2855A681E77C95E63833DB32F9338F9912E523C53D91A3
9EA1E3B673DC2BF79331E978B15B5319DB6C1C8AC7F3F66C8AE30B2A8BB96416
FDFF848179580EB056253D043F9A642688D107CE2BD6C418461F5A24D646759D
DDDD65AC866E4EA2BFE86B1A3115ACAF54AFEEAE7A1E4E3F32A4B1E22FEFF347
BD3FDAC64590A3E6A9AF639AC2D5492238EA2FBDCB2AF1F9D4FE05F4BAC0C244
C175A973BB22982B3551649724F77831573C4A00DC68FCD61780DC2C6F410E41
1C7F3A521E412A69523BBC8CC760A865656B49A2E46D86BE6AF29DC7C9DD280A
E72E332B074E6DCE1DA35C7645D6BA0F68B19CC8756AD1987C4A8477C26075C8
A819E3F681ECEF9D4D51001EF6E00C9CBA158724AC4352EBBA3A250FD6DA4099
98114BF92E9ABD51F76A1E31B922B6226BD9E72C442D854BCBF19ED242B85232
BE4C61B4597884A192D357DBC2F4F51E5DF203CAB41F0E6C48E1704F311F5145
1DD607A8A851F4BFFA621B34805BA4D923A9821DE73BB6F7E0A23CF8E542E38B
64D473A4A2410CE61ADACDCE2CA7DDEB4C6686CDE9F7DC6B39DB37A7CE0E60F0
4ED9E86DB24B2B884D6C24A3B77420EDA75ED8B0B8B8EDC855B8A6E449982ACC
95F901CD7DA38FAA447B31A65DB3DE459912998CD8C88367330901C5836918C0
05010956C520A7F4A499A7033BDA2A7CC21BA34994E0C3A0CA90683DEF9C8D17
7F6F32FB29D6A24B2FD42F2578CB46FA0487DC1CBE7BCBD6BCE95597FC3CE995
38FB17A8238471AD59C46F6B40A23D7DB1F4AE7F2D2EF4D88BF4E80FA3A1C5FE
D53228DD37E421FC121459ABEC447775E35BA59FE2DFDC36C5B6A95A1958EED1
B1A35F21271D10FCE1045F5548FBCB6B0C091A7A2F6B6EAC7A5B4D39DAA5C0E9
4FECD948CED336BB116AB3BE6175D6DD1CAF80144DD5D926C81770B1BDE1DD30
CEB2A8B848227E0736F704E817D5DF57E5311B3C8D1E40676125C5C463F51112
4CA3AB63CEB09F18E5AA02000F39551C3DCEFE8BA4312F68701101C2A3A02D5C
02D1E02E3603E805C9D0A5E29A0411EDF2B922618B84037E10C51B456A2D719A
E12C53BB3A270F5AFB3DBCAB07A8F9A07FB3455B1CE6936AF27B38965F8E2EA5
2E4183F35ABDF05D23A0031FF418499B3AECD895CA5047CDB13FCDE826D3AAE1
5BCC039B1C6A9B7FBD193B932D3B9A492B777AA228E29D1EFBF5767C37348C56
DAC28DD4FFA619E7126B864943EF75ECEBCD06E629D9B8F060B969D4438A98A5
2B02183737B9E9E6D67FD4280294674BA68E572E130207A46A53FDA43FCAC617
81438547CDDC5F01B8E52212F2454ED4EFFC727E07AA69625896087C256415CE
508AB95A7437B8E9756223F2FF5B5718B6AFCF64BD2BB65C137CA2821EC9838C
E39156532D50204F31E5C64B7A397FDD41932F2A16CBB052084E3E20437DDDAD
B6B31FDB14998C197C0126634E2D4274DC772C5D5F195A0D61A2E5CFC76D8161
68B879E23DDA5D476E2003B45B60BB1B6D62DA735DA6689C2C03F196AC1686D8
CF7DB751EC8C146E17EA2F34DC6CA8408B71A217B2598579C4B08E712790CB04
7A05623D54F22D02E597FE666140D9EA8AC68B343772084D45B94B8234274B36
33CAC268C6BB20D3A288E01E2B9173557BD09FD2D896911FACB51BDAD45965CB
3E4CD451B5A1D6149A658E284F33EFBBF38DDFA77AB23CFFEBDEC4973D3DA636
CD554A784BB4629F352F44B16C165F32E0B9143F8C0213688E636F0575824735
5868BD41CD7D18A25093E80B6B407F81C9DE045D6052894C5915607E3BD7DCA5
4D8D3A8018F5670BA2A4254B80C17134D2308CDFBC3BF32EBB01BD6D0178295F
9DF37560516ED3AC51DED7023F457674DDC780B9F25CD74F91C9239CF4C16C52
3352299DA2A220991B994C007C4149DD8D961936D93A5B632AC01D0DDF971170
3EB75C4DB38FAAEEAD1FDAA01C73B0C7D5DCF94B1FCFD138B23DEC0D8052661C
9E566BC5BBC90E3E7D015B78D8B7369AED2AE9A79C74C0FF0E0B0C1AD3B59BEA
735AAC918D55819967C7CEA6C188BFF4F3C1FEAEE8E1DF13765351E193270F03
49179D53E53994348F4A2AE0530CAA7EC9D9675B2F7E4F621156942419C67A9E
B8EB3D1F5B0524B381B62361647159DB71EA7A458EB6620FCBB0A5872C27D7B7
4DB62AC8AA5B1B0F5E3693094FD2953D7C24E0EFBDE11BE2A4D8DC537EF55FDE
B6252CAE038C49321756215EAC98410FCCAE880E5F0AFAB2498FE1D79954BD53
619CA37601F93E504E9B672ACB124FBED6580C39D6A130678100141AA26F1C7B
11A2DEBF8CDAAF3BBEB12EA960B06F951F34A35719EF1E40B168AEBCDAE3E4DB
E236F97A2723091A644DDD71B8BD6D22C154BBA43B136998C72CC3D01782E74D
45DD4CCD6B47CD7AB46DA299349D25FA80259F623646D8005ABF69620C1D5FE9
0A0018B17F071C6EAC90E92FED0EFAC5D187A1416AD0FF129BDCBE8D52BA5FCB
423C7FDB8A3F8803C0342BE9A2B01A30C2861E8C7BFA5F6CB780E69545567B2D
7D0891B23A3F97207AB57F34C18CB75637513AA762A8A88C2E79E146459128DA
F4CEC098942A57659130CE0C8CB226F1B9E6C65F0A44CE535FE171321AE710E4
64150C87BDDD078154918A719C5B27C4DBBE2DD951ABFE4DE5DF820F1AD38D10
B8FECF198AA5C28D09422292380844FE7D375ECD4F90C81C890D0E98FD06C7AA
912A719A5C01D1DB7DB5C3A3A1A1BE80ED8FF0A9C509420006D2229CC525B7EE
E68287A774393AB3183B6CFF1191462DC50E0F36F2D9AE0C549B8E94322FC53A
CBF0E6376EC2E3D326612EBF72727D7F3C98E8231D2093E8410180C54A379DA7
5BB9DEAB8BFB3D75F725FF498C30ADAE8FB6E33CA153EB711DC353B710FF9CFA
C92B4C43DA45DF2068ADFB8871F8681953BB835CC697BCEA1E3B3DF163CE00DD
B21095A28DE79308FEE0C28522DAAFFFC84B3AF701CF1AB4DDF4392DD8AA11D8
61A0076446786FC21962B0FFB2B88609E88700417C48C76BD9C1ED9DB78BF62E
9AD2222E5BEE9FD0D38FE90F966623A913BE45C738E9AB73958E5805EA00525D
5941D6326BFD00F8E2C46B4C975ACACB7A8A5A23D4F894045B6F79C061DF17BF
BDBE2FB8BF4BA63A363EAF38C8EC9D3FFB2658CFA615819B889A7655CA63B827
A87BF8759AB9690AD6C3A67FBFAFC38FBC00863EA9CC1F915B8B9A54081804F5
FD98DA88D6BDFB21D29C7697EC64C71D30C7B4A83A4A52D3A564A881BB1BD296
A30A2E76058489FEFE5C69A145F2328C58DC3A2E27B9A95269013FAD8A3FAE57
74BA7C496DD89EA901A177029DA475280210FE870384972B325816F999AB9BF5
FE56FEBE0636030C793C1EE57A0A4E6F339546FE3A88C224E35462EEDBC507DD
0FF44077175D845136253ADE278AB741C702A1EC64A308E7635115B64B1EA2FE
A27A2F07C77D1CBB2FB9D1F63AD8688325E8CB562206CACE3F59403B19344D5F
F0747242DC9C42A73C207D4CF7213C1D22AB8C5F24DCDE8F5BD88CC2F21D2E16
F91D01EBB4F43D271F5B16796B6E9FCD7713EFBAFB0F57F9540EC304140C4E15
69529D433336951DE4EE9E335EF93A2E8625B83749A64A7FFCF96007AFA65AF4
FA40093A2838B2856305810D0B9F73DE3B805A31F7B99F4E32FA6F1C1F12A645
A8906E524CAF38F5613DDA0C4486DABF8DD94EFD5105EE20AE0BDDD958176C66
6D2CCDB49CCB634717044A9E4EDFB6081B2F9703952C823C0DE9B4D0FC6951D6
EAFEDF7F0219F677F101EDC73965161D302E126D63B329E4FF36D1D478E7E56F
6BBD447616B34F18ADB8B5F8FD83C8F01DAB3A6B7234E6136DF330C92BC27547
BF62ECB5E25A0AE928DA1E4073F2400FACA8565774372A39F5BE217A815AE85C
56C97C347BE7F0A978262F5C1D848726B4230B4F8D878451CEFEAFA49309C805
EB5A096396CA62ADD6CF71B58F3F96A0EF46C2A1D197E55B7AC9523706FAB55B
617D8FFE2681EDD336D61F67A4035729EB402F1E0DE8D10615E700751C84298E
DA6C3D1F7420ACB51B0096666727E6C21ED7BD158DF34E9E547227D584458013
5B61DB63D70E93976A138AEFA9CF6AAF496D1AA7A302CB9BAD39923670FF40FF
A3A74AB2D8433E743612D6589E714230D8F8C47ED334CD078DD865B2DE12D318
4BD3E1A1F94AECE2622F721CE00C78B480BD24A600EFAAD1B220F9934FBCB525
35483189EA8EACB1D8A253BDAC2DA7BBE8EC827B9FA2A1C49BE113AC0CAFB110
12E0240B19F6FB6C514D23A7A4F54604CE6A1B2326F31CAF13F883FBB67FA28E
24D022400EF2DE65CF0A519FB5A109CA9D14EB30F6F4C1B85C7C518F099ADB5F
DF21E5146709D0DB32D2DBF6C4CD3674C18373A20BC3423FD37E586D41CC4BB3
6198BAB18372CFD520F9ACD205A00D5C6228AA1D43F1C6F0E9EA338B2104E14F
A5737101DDCE5EE69C1FEE778F7C6BE12826E06DC3039388568D43A24C354CAE
C214CFACB098F9E580FA1F2C264A5AB02D643D8B74E9D7AC0DB738E513B26906
E9E6BCD25099BA60A7088F7F3C6D235ED1BEDACBD01C1C320D534DE1EB0E3A74
C348CF9E72A5CAB0E8D157F6BED36677EC796B5F761948C73429558AD72ADF94
7F5C639734703276AB8FDE5AF3B0271B04D2B1B66A4C032D0FD251B7C585B207
4AF66D8098816ABF853165F072C88394DDF65CE81471835EDF1537ED4AD3815D
3B2E6046E353073CFFCD22EE9B41A3007E4D0C9120B0F020789918550AEE8AD6
EA8A1100B2727B762F4B71862C0438CD886193D46B2C41449680A946793FBD4D
219AD9426E0B531F8496F77C10F9F68ED6773128465344E954ACA1D5512B493D
4CE9712B7B3DCD1A26F9F3E3A6A4697F57B689453FA9938224E5AAAB1C26E0D1
7397F8985B6823BC95E94CAAE196856E77207E7342DE05DF23A7D617F936B4CD
5ED28FA1E9FCB1CE2681C612B52EFE11E6FA5E200A4C858EEBF060F894183358
7794AE2F9B5A26BC5C9B052127E42F83EA77FA50A67AE3B217CB729549006CF7
BC4D4D5B9008AA0B686505EF5430C7FAA87E0795F55DC7639C28C5C08C86CC0F
392391C71E0E3480631DCDA2FC2A7110A0778779D5E26E78E543F2B2501ED415
380D037CB0A8E938C10D3CCA15351288C57C3A65ABCFDD6239C31FD02437AF18
7E7B50ECCD99A78FFA6CEED21A1C7408D8DCB0D20BF67E400189B75E7FBC53EF
85D2C306159DBB019B025A2ECEE4D05EC3E3C5083A97F85EC588506DFB61A7E7
9F93F71A1B3D33AE7ACAA6A09C51AFBE36F8E398A71F2A1F12C30241358CD64D
D6C03F4E18F20EA009674D3973F49EB87371B6E59CA6D7F21FAFB450C6447E54
177314C2A54B8F64AE250E2AC06D3BBB1281431620A839B9645AB54D7352C852
461930F8B2E025497C988D6DAA681DFEEBAA7D55505CF3127BA6CCFA678B8A5C
CB1F09E6D5999EF2E633AC8A99B2F40855AFE0A03B16FF19017774A5F726FB7E
0AB97A32B914C1770ABC1E45845E1FC1799588CDBBB6AB1C2D00FC54428AA2E8
08F0472CCF3F360DBECE68FD6ED29ACF273546437DD17550EA00F659612CD2CB
10ED932CE77C0946D7C879422508A071C2C64BB258B0279FD0D316B086D0001C
D667797C52E1BEE662F525425EFEAA87EC42FE38C487C369D0B32FF67D58C4BA
15E2788A85C2BC3493874D67FB56FED26418111BC2AD7523BEB50C7EB6674609
3D334981368A8E087D65343C65B5B128DD50D2F05023E5D0F5820AA7FF53F392
F68B7DBE166CAC551C806C1FF57890925A198B2D30A4EF6CDEA142B11977FF28
15AD60E3939FF00B6C58FFDEE28B649B0257485DF1069C7293935AF9D52E5CB1
D4C3D3C058F3EEA4357CF61EE29FDB8836261762537AD3B43C6F3A90EB8D59A7
4FE9C4AD0A055CAA645C81645160ACF0C004592AC749066AD5EE3D2086B78FA9
8EDE55136D8380BB9F52D0BD8B610DFBD2358EABE227B936313A72C468326F3E
33637C94D5F462EA513D1F38DE68BDE008D6601FF57BB7D3793A951D9CBC8C7C
B968C93B6D621ACED22E9F0D08C4C68BC2EE5E096336DC3755FD47A680A2EFDC
EAB43DBE4B0FA3B5FAD206D42CBC0781FFD49109B0FC9804D7B26BE9565D5DCF
8C232C54547251F775EDEA13BF2BDD9B4F2E9C17779C01C9138C3BA6A8AF1CC4
06345F44B8E993F9AABF179217CE72D2EAFC631BC4139E34DD5ED1997FFE1BD2
4BC2C2D275B0D391CB40ED9C42F03B5967FC5DA356DFF2984F1FCF53AD0B3EC3
9A7428EAE1070013EF79BB7071C6A6F3D1B1B84960F0FB3A8F4426E1DC71C685
D9856306D39051C975F52A2BB1BC0146503F8B024011D36EF1D747D0172006AC
8398B2DD23E73146B21B1098452CBF269F796338C268C6BB20D3A2885A6BCB6B
DC61F852CA3E18D5394F6ED6BB584F6A7F90B01029A8782D21FC23981C536F4B
A1DC2BCC7368AE67B89136F5BE3908107DA903C83A2733C62E4172D396FCDF47
2EA49B35C35AC11C5AA8C19AA2D955036AC61BDC34AF63527D97AB42BAFB1097
B243EEE9EC5CCFE05BD3CCBAACA5BEBE0F6A9CFFA232649DCA59E2ECEFB86147
95EC0B5FA22212E912393DFB16044DB535B0E5E9B9CDC1B4F27BDA685D686E50
73452B1BC85B4A53E5AA200F9203A7CA7AC31F4C969C464C1CB1D4E1BF5E8C83
58B0C00A907498F1DE536E889681DDB2E4BC7E5114D7765517981C34D7274E49
BD2478AE1CA943B86F05C5BE463A524233BA29A3386F3E9DC2AEA1975AA22EC8
16C30910615E6C86DFBFBC3F44D9533BC0CCC8EBCE119FE829497F8174D160D7
1283BC20AADDEC054488D2054FC01DB249C48C9CBBA51F2B2815E0E88D50CA60
1B2EC33422B97DB210B9080FF7102C8D83F235AED2A3852BE9E91686972DBF39
D2C3956923C96771A388D86122962B7B9F49F36715F9E2967457BA74CF0155FB
C5C4A8FFAE0D6BA4F9387D22E7D942D5B154F1E0CD4E68547C8B993EC6560986
35C549350AC2221B995527DC000A69F7D76CD0CAC2F4022B50D9FF4A8712FE9C
1B3B80C8958447B5B88EE1554CA00EFE34A9CF67BB9EEE166DBF2CBCA77E3129
2753519EBFD6BE0E6D5A3BAE0AE0428A01C272E77A94A61D16F5A9EAA8B15EF3
E692F7CA09DC02F73BD56E6765DB508F1D2C580D73F566D9EA0A014AC018EF04
56312A43F976C25CB61D83AF76F0EB2AAE589E9D7634DA18C6F0D32447692BD5
A07EF14F3CAC4C5F9A5B4F0788B13FACA2DB808CF27BF01F0CAA5F2DE8DF3B36
DB44DA4673F1170DB209B6C14A527BC0F686F0C0B5267481CF3D5E1221BA2D0A
008E91FD5A364EBE795AA8EEDB32AA50F9A227E82BC6D90C6B1E43DB2C6D3467
30EF956C6171A50CB253A79B0658E7DF9C1B91B1622E9DEC00A1D2CC60B55162
5DDA8C8DD95E852E3FB8304C424757E029458BAD8F3DC3CC4117FA79535300C2
DFE345B14177FB9384FCC80431E03DBF794C7ABF5CB7460E9A472D147514DAFA
6B7B0C5409E2CCADA72DCF04B77065AD938CEF830F77616CE7A22718B69D29F8
2E841BA69A35558E4C0E18B3907A6FA20A864E48A2E1045E3B2574899352E0CB
CC2549B331F6053D6BA5311102057E9DF109F90F5116EA7FAE1899470BFD1D60
2FD77BB45508CDF3C921B6A3E98409C37CEFD376C4FBCEB4E7FE8C0F4E982548
3ABF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000
(C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktional)
@start /Fa 203[993 52[{}1 1328.35 /wasy10 rf /Fb 173[959
3[959 78[{}2 1328.35 /MSBM10 rf /Fc 201[0 3[886 28[1033
21[{ enclmmathsy ReEncodeFont }3 1328.35 /LMMathSymbols10-Regular
rf /Fd 175[1168 80[{ enclmmathex ReEncodeFont }1 1106.96
/LMMathExtension10-Regular rf /Fe 194[1012 10[650 1[650
4[1012 1[506 506 40[{ enclmrm ReEncodeFont }6 1328.35
/LMRoman12-Regular rf /Ff 135[739 9[776 7[641 1[676 560
553 683 37[361 59[{ enclmmathit ReEncodeFont }8 1328.35
/LMMathItalic12-Regular rf /Fg 185[723 4[830 12[553 5[307
46[{ enclmec ReEncodeFont }4 1106.96 /LMRoman10-Regular
rf /Fh 160[909 45[606 1[606 47[{ enclmec ReEncodeFont }3
1212.12 /LMRoman10-Regular rf /Fi 145[571 4[320 1[448
103[{ enclmmathit ReEncodeFont }3 885.568 /LMMathItalic8-Regular
rf /Fj 255[732{ enclmmathsy ReEncodeFont }1 885.568
/LMMathSymbols8-Regular rf /Fk 194[732 6[470 470 470
470 470 470 470 48[{ enclmrm ReEncodeFont }8 885.568
/LMRoman8-Regular rf /Fl 133[956 1136 3[1196 837 849
879 1[1196 1076 1196 1793 598 1136 1[598 1196 1076 658
982 1196 956 1196 1046 16[1470 1616 1682 2041 1[1685
1[801 1[1691 1353 1412 1[1554 1530 1625 10[1076 1076
1076 1076 1076 1076 1076 1076 598 717 45[{ enclmec ReEncodeFont }43
1912.83 /LMRoman12-Bold rf /Fm 650 2[723 5[650 17[650
105[578 686 686 939 686 723 506 513 506 1[723 650 723
1084 361 686 397 361 723 650 397 578 723 578 723 650
6[795 2[1336 975 5[885 1[975 1192 813 1011 668 2[1021
849 885 993 2[975 1[614 4[361 4[650 650 650 650 650 2[361
434 361 2[506 506 6[361 5[759 27[{ enclmec ReEncodeFont }57
1328.35 /LMRoman12-Regular rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-2331 165 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a -2331
165 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a 0 TeXcolorgray
24746 81281 a Fm(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fl(F)-239 b(A)608 b(4.4)g(-)h(1)f
(Nullstellen)e(einer)i(P)-60 b(olynomfunktion)605 b(-)j(O)-60
b(A)609 b(-)g(BIFIE)p 0 TeXcolorgray -741 4800 a Fm(1.)p
0 TeXcolorgray 651 w(Wie)480 b(viele)h(v)-36 b(ersc)g(hiedene)480
b(reelle)g(Nullstellen)g(kann)g(eine)g(P)-36 b(olynomfun)g(tkion)480
b(3.)h(Grades)921 6792 y(hab)36 b(en?)873 9338 y(V)-108
b(eransc)-36 b(haulic)g(he)433 b(deine)g(L\366sungsf\344lle)h(durc)-36
b(h)433 b(jew)-36 b(eils)435 b(einen)e(m\366glic)-36
b(hen)434 b(Graphen!)p 1 0 0 TeXcolorrgb 921 11883 a(Eine)f
(Nullstelle:)921 25067 y
 currentpoint currentpoint translate 0.70358 0.70358 scale neg exch
neg exch translate
 921 25067 a 1355 25067 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 154.60803 a add def
/d 0.0 a add neg def /h 160.74565 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1355
25067 a 555 16113 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 161.83409  0 7.22606  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 7.22606
 161.83409  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-80.88817  def /maxTickline 79.85748  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 79.85748
0.0 -80.88817   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 161.83409
0.0 7.22606 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 79.85748  0 -80.88817  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -80.88817
 79.85748  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
7.22606  def /maxTickline 161.83409  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 79.85748
0.0 -80.88817   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 161.83409
0.0 7.22606 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial -690 13249 a Fk(1)-691 10099
y(2)-1423 19502 y Fj(\000)p Fk(1)-1423 22651 y Fj(\000)p
Fk(2)3469 17458 y(1)2680 b(2)f(3)h(4)f(5)555 16113 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end

555 16113 a 555 16113 a
tx@Dict begin  { 161.83409 79.85748 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 555 16113 a 555 16113 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 555 16113
a 212 16399 a Fm(x)555 16113 y
tx@Dict begin  PutEnd  end
 555 16113 a 555 16113
a
tx@Dict begin  PutEnd  end
 555 16113 a 555 16113 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 555 16113 a 555 16113 a
tx@Dict begin  { 0.0 0.0 pop 161.83409 79.85748 exch pop } PutCoor
PutBegin  end
 555
16113 a 555 16113 a
tx@Dict begin  { 5.0 0.0 0.0 0.0 -40.  Uput UUput } PutCoor PutBegin
 end
 555 16113 a 555 16113 a
tx@Dict begin  PutEnd  end
 555 16113
a 555 16113 a
tx@Dict begin  PutEnd  end
 555 16113 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x 0.2539645667233967
def /x1 5.687822009072037 def /dx x1 x sub 199 div def /F@pstplot (2.1464724255473993*x^(3.0)-18.038919590612885*x^(2.0)+48.41162186766384*x-39.839344777255334)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
18469 25067 a
currentpoint initclip moveto
 18469 25067 a 921 25067 a
 currentpoint currentpoint translate 1 0.70358 div 1 0.70358 div scale
neg exch neg exch translate
 921 25067 a 31504
25067 a
 currentpoint currentpoint translate 0.67279 0.67279 scale neg exch
neg exch translate
 31504 25067 a 31504 25067 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 154.60847 a add def
/d 0.0 a add neg def /h 160.7461 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 31504 25067 a 30963
15854 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 159.49617  0 4.8877  0 ArrowA CP 4 2
roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 4.8877
 159.49617  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-83.22653  def /maxTickline 77.51956  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 77.51956
0.0 -83.22653   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 159.49617
0.0 4.8877 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 77.51956  0 -83.22653  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -83.22653
 77.51956  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
4.8877  def /maxTickline 159.49617  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 77.51956
0.0 -83.22653   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 159.49617
0.0 4.8877 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
29718 12990 a Fk(1)29718 9840 y(2)28986 19243 y Fj(\000)p
Fk(1)28986 22392 y Fj(\000)p Fk(2)33877 17200 y(1)h(2)f(3)h(4)g(5)30963
15854 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 30963 15854 a 30963 15854 a
tx@Dict begin  { 159.49617 77.51956 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 30963 15854 a 30963
15854 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 30963 15854 a 30620 16140 a Fm(x)30963 15854
y
tx@Dict begin  PutEnd  end
 30963 15854 a 30963 15854 a
tx@Dict begin  PutEnd  end
 30963 15854 a 30963 15854
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 30963 15854 a 30963 15854 a
tx@Dict begin  { 0.0 0.0 pop 159.49617 77.51956 exch pop } PutCoor
PutBegin  end
 30963 15854 a 30963 15854
a
tx@Dict begin  { 5.0 0.0 0.0 0.0 -40.  Uput UUput } PutCoor PutBegin
 end
 30963 15854 a 30963 15854 a
tx@Dict begin  PutEnd  end
 30963 15854 a 30963 15854
a
tx@Dict begin  PutEnd  end
 30963 15854 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0.17178902884288796 def /x1 5.605646471191529
def /dx x1 x sub 199 div def /F@pstplot (0.6151237119828777*x^(3.0)-5.594901570088693*x^(2.0)+16.94201224132092*x-17.080262816702223)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
48618 25067 a
currentpoint initclip moveto
 48618 25067 a 31504 25067 a
 currentpoint currentpoint translate 1 0.67279 div 1 0.67279 div scale
neg exch neg exch translate
 31504 25067
a 921 36819 a
 currentpoint currentpoint translate 0.65424 0.65424 scale neg exch
neg exch translate
 921 36819 a 921 36819 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 158.99213 a add def
/d 0.0 a add neg def /h 160.7461 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 921 36819 a 380
27606 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 163.87982  0 4.8877  0 ArrowA CP 4 2
roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 4.8877
 163.87982  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-83.22653  def /maxTickline 77.51956  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 77.51956
0.0 -83.22653   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 163.87982
0.0 4.8877 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 77.51956  0 -83.22653  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -83.22653
 77.51956  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
4.8877  def /maxTickline 163.87982  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 77.51956
0.0 -83.22653   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 163.87982
0.0 4.8877 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
-865 24742 a Fk(1)-865 21592 y(2)-1597 30995 y Fj(\000)p
Fk(1)-1597 34145 y Fj(\000)p Fk(2)3294 28952 y(1)g(2)f(3)h(4)g(5)380
27606 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 380 27606 a 380 27606 a
tx@Dict begin  { 163.87982 77.51956 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 380 27606 a 380 27606
a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 380 27606 a 37 27892 a Fm(x)380 27606 y
tx@Dict begin  PutEnd  end
 380 27606 a
380 27606 a
tx@Dict begin  PutEnd  end
 380 27606 a 380 27606 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 380 27606 a 380 27606
a
tx@Dict begin  { 0.0 0.0 pop 163.87982 77.51956 exch pop } PutCoor
PutBegin  end
 380 27606 a 380 27606 a
tx@Dict begin  { 5.0 0.0 0.0 0.0 -40.  Uput UUput } PutCoor PutBegin
 end
 380 27606 a 380 27606 a
tx@Dict begin  PutEnd  end
 380
27606 a 380 27606 a
tx@Dict begin  PutEnd  end
 380 27606 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0.171789028842888 def /x1 5.759725604717483
def /dx x1 x sub 199 div def /F@pstplot ((x-3.0)^(3.0)+1.0)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial 18521 36819 a
currentpoint initclip moveto
 18521 36819 a 921 36819 a
 currentpoint currentpoint translate 1 0.65424 div 1 0.65424 div scale
neg exch neg exch translate

921 36819 a 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 2545
x Fm(Zw)-36 b(ei)434 b(Nullstellen:)2683 60080 y
 currentpoint currentpoint translate 0.88666 0.88666 scale neg exch
neg exch translate
 2683
60080 a 2683 60080 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 172.3033 a add def
/d 0.0 a add neg def /h 174.20401 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 2683 60080 a 1703 49358 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 181.157  0 8.8537  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 8.8537
 181.157  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-96.86418  def /maxTickline 77.33983  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 77.33983
0.0 -96.86418   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 181.157
0.0 8.8537 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 77.33983  0 -96.86418  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -96.86418
 77.33983  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
8.8537  def /maxTickline 181.157  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 77.33983
0.0 -96.86418   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 181.157
0.0 8.8537 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 458 46494 a Fk(1)457
43344 y(2)-274 52747 y Fj(\000)p Fk(1)-274 55896 y Fj(\000)p
Fk(2)-274 59046 y Fj(\000)p Fk(3)4617 50704 y(1)2680
b(2)f(3)h(4)g(5)f(6)1703 49358 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 1703 49358 a 1703 49358
a
tx@Dict begin  { 181.157 77.33983 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 1703 49358 a 1703 49358 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 1703 49358 a 1360 49644 a
Fm(x)1703 49358 y
tx@Dict begin  PutEnd  end
 1703 49358 a 1703 49358 a
tx@Dict begin  PutEnd  end
 1703 49358
a 1703 49358 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 1703 49358 a 1703 49358 a
tx@Dict begin  { 0.0 0.0 pop 181.157 77.33983 exch pop } PutCoor PutBegin
 end
 1703 49358 a
1703 49358 a
tx@Dict begin  { 5.0 0.0 0.0 0.0 -40.  Uput UUput } PutCoor PutBegin
 end
 1703 49358 a 1703 49358 a
tx@Dict begin  PutEnd  end
 1703 49358 a 1703
49358 a
tx@Dict begin  PutEnd  end
 1703 49358 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0.3111651988974048 def /x1 6.366946538919905
def /dx x1 x sub 199 div def /F@pstplot (x^(3.0)-10.45*x^(2.0)+34.77*x-35.77)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
1703 49358 a
tx@Dict begin  { 46.54482 -95.2804 } PutCoor PutBegin  end
 1703 49358 a -172 x Fi(g)1703 49358 y
tx@Dict begin  PutEnd  end
 1703
49358 a 21756 60080 a
currentpoint initclip moveto
 21756 60080 a 2683 60080 a
 currentpoint currentpoint translate 1 0.88666 div 1 0.88666 div scale
neg exch neg exch translate
 2683
60080 a 24758 60080 a
 currentpoint currentpoint translate 0.88666 0.88666 scale neg exch
neg exch translate
 24758 60080 a 24758 60080 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 172.3033 a add def
/d 0.0 a add neg def /h 174.20401 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 24758
60080 a 23778 49358 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 181.157  0 8.8537  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 8.8537
 181.157  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-96.86418  def /maxTickline 77.33983  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 77.33983
0.0 -96.86418   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 181.157
0.0 8.8537 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 77.33983  0 -96.86418  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -96.86418
 77.33983  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
8.8537  def /maxTickline 181.157  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 77.33983
0.0 -96.86418   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 181.157
0.0 8.8537 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 22532 46494 a Fk(1)22532 43344
y(2)21801 52747 y Fj(\000)p Fk(1)21801 55896 y Fj(\000)p
Fk(2)21801 59046 y Fj(\000)p Fk(3)26692 50704 y(1)h(2)f(3)h(4)g(5)f(6)
23778 49358 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 23778 49358 a 23778 49358 a
tx@Dict begin  { 181.157 77.33983 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 23778 49358
a 23778 49358 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 23778 49358 a 23435 49644 a Fm(x)23778
49358 y
tx@Dict begin  PutEnd  end
 23778 49358 a 23778 49358 a
tx@Dict begin  PutEnd  end
 23778 49358 a 23778
49358 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 23778 49358 a 23778 49358 a
tx@Dict begin  { 0.0 0.0 pop 181.157 77.33983 exch pop } PutCoor PutBegin
 end
 23778 49358 a 23778
49358 a
tx@Dict begin  { 5.0 0.0 0.0 0.0 -40.  Uput UUput } PutCoor PutBegin
 end
 23778 49358 a 23778 49358 a
tx@Dict begin  PutEnd  end
 23778 49358 a 23778
49358 a
tx@Dict begin  PutEnd  end
 23778 49358 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0.3111651988974048 def /x1 6.366946538919905
def /dx x1 x sub 199 div def /F@pstplot (x^(3.0)-10.45*x^(2.0)+34.77*x-37.38)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
23778 49358 a
tx@Dict begin  { 52.24614 -95.2804 } PutCoor PutBegin  end
 23778 49358 a -172 x Fi(g)23778 49358 y
tx@Dict begin  PutEnd  end

23778 49358 a 43831 60080 a
currentpoint initclip moveto
 43831 60080 a 24758 60080
a
 currentpoint currentpoint translate 1 0.88666 div 1 0.88666 div scale
neg exch neg exch translate
 24758 60080 a 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 921
61660 a Fm(Drei)434 b(Nullstellen:)2683 82376 y
 currentpoint currentpoint translate 0.88666 0.88666 scale neg exch
neg exch translate
 2683
82376 a 2683 82376 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 172.3033 a add def
/d 0.0 a add neg def /h 174.20401 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 2683 82376 a 1703 71653 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 181.157  0 8.8537  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 8.8537
 181.157  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-96.86418  def /maxTickline 77.33983  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 77.33983
0.0 -96.86418   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 181.157
0.0 8.8537 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 77.33983  0 -96.86418  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -96.86418
 77.33983  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
8.8537  def /maxTickline 181.157  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 77.33983
0.0 -96.86418   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 181.157
0.0 8.8537 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 458 68789 a Fk(1)457
65639 y(2)-274 75042 y Fj(\000)p Fk(1)-274 78192 y Fj(\000)p
Fk(2)-274 81341 y Fj(\000)p Fk(3)4617 72999 y(1)2680
b(2)f(3)h(4)g(5)f(6)1703 71653 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 1703 71653 a 1703 71653
a
tx@Dict begin  { 181.157 77.33983 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 1703 71653 a 1703 71653 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 1703 71653 a 1360 71939 a
Fm(x)1703 71653 y
tx@Dict begin  PutEnd  end
 1703 71653 a 1703 71653 a
tx@Dict begin  PutEnd  end
 1703 71653
a 1703 71653 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 1703 71653 a 1703 71653 a
tx@Dict begin  { 0.0 0.0 pop 181.157 77.33983 exch pop } PutCoor PutBegin
 end
 1703 71653 a
1703 71653 a
tx@Dict begin  { 5.0 0.0 0.0 0.0 -40.  Uput UUput } PutCoor PutBegin
 end
 1703 71653 a 1703 71653 a
tx@Dict begin  PutEnd  end
 1703 71653 a 1703
71653 a
tx@Dict begin  PutEnd  end
 1703 71653 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0.3111651988974048 def /x1 6.366946538919905
def /dx x1 x sub 199 div def /F@pstplot (x^(3.0)-10.45*x^(2.0)+34.77*x-36.38)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
1703 71653 a
tx@Dict begin  { 48.44511 -95.2804 } PutCoor PutBegin  end
 1703 71653 a -172 x Fi(g)1703 71653 y
tx@Dict begin  PutEnd  end
 1703
71653 a 21756 82376 a
currentpoint initclip moveto
 21756 82376 a 2683 82376 a
 currentpoint currentpoint translate 1 0.88666 div 1 0.88666 div scale
neg exch neg exch translate
 2683
82376 a 24758 82376 a
 currentpoint currentpoint translate 0.88666 0.88666 scale neg exch
neg exch translate
 24758 82376 a 24758 82376 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 172.3033 a add def
/d 0.0 a add neg def /h 174.20401 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 24758
82376 a 23778 71653 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 181.157  0 8.8537  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 8.8537
 181.157  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-96.86418  def /maxTickline 77.33983  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 77.33983
0.0 -96.86418   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 181.157
0.0 8.8537 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 77.33983  0 -96.86418  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -96.86418
 77.33983  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
8.8537  def /maxTickline 181.157  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 77.33983
0.0 -96.86418   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 181.157
0.0 8.8537 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 22532 68789 a Fk(1)22532 65639
y(2)21801 75042 y Fj(\000)p Fk(1)21801 78192 y Fj(\000)p
Fk(2)21801 81341 y Fj(\000)p Fk(3)26692 72999 y(1)h(2)f(3)h(4)g(5)f(6)
23778 71653 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 23778 71653 a 23778 71653 a
tx@Dict begin  { 181.157 77.33983 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 23778 71653
a 23778 71653 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 23778 71653 a 23435 71939 a Fm(x)23778
71653 y
tx@Dict begin  PutEnd  end
 23778 71653 a 23778 71653 a
tx@Dict begin  PutEnd  end
 23778 71653 a 23778
71653 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 23778 71653 a 23778 71653 a
tx@Dict begin  { 0.0 0.0 pop 181.157 77.33983 exch pop } PutCoor PutBegin
 end
 23778 71653 a 23778
71653 a
tx@Dict begin  { 5.0 0.0 0.0 0.0 -40.  Uput UUput } PutCoor PutBegin
 end
 23778 71653 a 23778 71653 a
tx@Dict begin  PutEnd  end
 23778 71653 a 23778
71653 a
tx@Dict begin  PutEnd  end
 23778 71653 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0.3111651988974048 def /x1 6.366946538919905
def /dx x1 x sub 199 div def /F@pstplot (-(x^(3.0)-10.45*x^(2.0)+34.77*x-36.38))
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
23778 71653 a
tx@Dict begin  { 50.97928 72.27194 } PutCoor PutBegin  end
 23778 71653 a -172 x Fi(g)23778 71653 y
tx@Dict begin  PutEnd  end

23778 71653 a 43831 82376 a
currentpoint initclip moveto
 43831 82376 a 24758 82376
a
 currentpoint currentpoint translate 1 0.88666 div 1 0.88666 div scale
neg exch neg exch translate
 24758 82376 a 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 47992 4800 a Fh(___/1)p 1 0 0
TeXcolorrgb 48228 6792 a Fg(F)-123 b(A)369 b(4.4)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
24746 81281 a Fm(2)p 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 54804 45 v -2331 6795 a Fl(F)-239
b(A)717 b(4.4)g(-)h(2)f(P)-60 b(olynomfunktion)714 b(-)k(MC)g(-)f
(BIFIE)p 0 TeXcolorgray -741 10102 a Fm(2.)p 0 TeXcolorgray
651 w(Die)578 b(folgenden)g(A)-36 b(ussagen)577 b(b)36
b(esc)-36 b(hreib)36 b(en)577 b(Eigensc)-36 b(haften)577
b(v)-36 b(on)578 b(P)-36 b(olynomfunktionen)578 b Ff(f)921
12094 y Fm(mit)434 b Ff(f)142 b Fe(\()p Ff(x)p Fe(\))368
b(=)7589 11208 y Fd(P)8757 11559 y Fi(n)8757 12422 y(i)p
Fk(=0)10557 12094 y Ff(a)11240 12293 y Fi(i)11615 12094
y Ff(x)12354 11612 y Fi(i)13164 12094 y Fm(mit)433 b
Ff(n)369 b Fc(2)g Fb(N)221 b Fe(\()p Ff(n)370 b Fc(\025)f
Fe(2\))p Fm(.)921 14639 y(Kreuze)433 b(die)h(zutre\033ende\(n\))d(A)-36
b(ussage\(n\))433 b(an!)p 1062 15680 44260 45 v 1062
18743 45 3064 v 1770 17540 a(Jede)h(P)-36 b(olynomfunktion)435
b(dritten)d(Grades)h(hat)g(genau)h(eine)f(W)-108 b(endestelle.)p
42912 18743 V 1 0 0 TeXcolorrgb 43621 17543 a Fa(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45277
18743 V 1062 18787 44260 45 v 1062 21850 45 3064 v 1770
20647 a Fm(Jede)434 b(P)-36 b(olynomfunktion)435 b(vierten)e(Grades)g
(hat)g(mindestens)g(eine)h(Nullstelle.)p 42912 21850
V 45277 21850 V 1062 21895 44260 45 v 1062 26691 45 4797
v 1770 23755 a(Jede)330 b(P)-36 b(olynomfunktion,)332
b(die)d(zw)-36 b(ei)331 b(lokale)h(Extremstellen)e(hat,)g(ist)g
(mindestens)1770 25746 y(v)-36 b(om)435 b(Grad)d(3.)p
42912 26691 V 1 0 0 TeXcolorrgb 43621 24625 a Fa(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45277
26691 V 1062 26736 44260 45 v 1062 31532 45 4797 v 1770
28596 a Fm(Jede)i(P)-36 b(olynomfunktion,)435 b(die)e(genau)h(zw)-36
b(ei)434 b(lokale)i(Extremstellen)d(hat,)h(hat)1770 30587
y(mindestens)f(eine)h(W)-108 b(endestelle.)p 42912 31532
V 1 0 0 TeXcolorrgb 43621 29466 a Fa(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 45277 31532 V 1062 31577
44260 45 v 1062 36373 45 4797 v 1770 33437 a Fm(Jede)392
b(P)-36 b(olynomfunktion,)392 b(deren)f(Grad)f(gr\366\377er)i(als)g(3)g
(ist,)g(hat)f(mindestens)f(eine)1770 35428 y(lokale)436
b(Extremstelle.)p 42912 36373 V 45277 36373 V 1062 36418
44260 45 v 47992 10102 a Fh(___/1)p 1 0 0 TeXcolorrgb
48228 12094 a Fg(F)-123 b(A)369 b(4.4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 40446 54804 45
v -2331 45747 a Fl(F)-239 b(A)717 b(4.4)g(-)h(3)f(P)-60
b(olynomfunktion)714 b(3.)j(Grades)g(-)h(MC)g(-)f(BIFIE)p
0 TeXcolorgray -741 49055 a Fm(3.)p 0 TeXcolorgray 651
w(Gegeb)36 b(en)433 b(ist)h(die)f(P)-36 b(olynomfunktion)435
b(3.)f(Grades)p 0 TeXcolorgray 0 TeXcolorgray 9983 52707
a Ff(f)142 b Fe(\()p Ff(x)p Fe(\))368 b(=)h Ff(ax)15688
52225 y Fk(3)16509 52707 y Fe(+)295 b Ff(bx)19108 52225
y Fk(2)19929 52707 y Fe(+)g Ff(cx)g Fe(+)g Ff(d)433 b
Fe(\()p Ff(a;)221 b(b;)g(c;)g(d)370 b Fc(2)f Fb(R)p Ff(;)221
b(a)370 b Fc(6)p Fe(=)e(0\))p Fm(.)855 56359 y(Wie)599
b(viele)g(reelle)g(Nullstellen)g(kann)f(diese)g(F)-108
b(unktion)598 b(b)36 b(esitzen?)599 b(Kreuze)f(die)g(b)36
b(eiden)921 58351 y(zutre\033enden)432 b(A)-36 b(ussagen)433
b(an!)p 16813 59318 12757 45 v 16813 62123 45 2805 v
17522 61178 a(k)-36 b(eine)p 27161 62123 V 29526 62123
V 16813 62167 12757 45 v 16813 64972 45 2805 v 17522
64027 a(mindestens)433 b(eine)p 27161 64972 V 1 0 0 TeXcolorrgb
27869 63902 a Fa(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 29526 64972 V 16813 65016 12757 45 v 16813
67821 45 2805 v 17522 66876 a Fm(h\366)36 b(c)-36 b(hstens)433
b(drei)p 27161 67821 V 1 0 0 TeXcolorrgb 27869 66751
a Fa(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
29526 67821 V 16813 67865 12757 45 v 16813 70850 45 2985
v 17522 69647 a Fm(genau)g(vier)p 27161 70850 V 29526
70850 V 16813 70894 12757 45 v 16813 73699 45 2805 v
17522 72754 a(unendlic)-36 b(h)432 b(viele)p 27161 73699
V 29526 73699 V 16813 73743 12757 45 v 47992 49055 a
Fh(___/1)p 1 0 0 TeXcolorrgb 48228 51046 a Fg(F)-123
b(A)369 b(4.4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 77771 54804 45 v 0 TeXcolorgray 24746
81281 a Fm(3)p 0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fl(F)-239 b(A)1067 b(4.4)g(-)h(4)g(P)-60
b(olynomfunktion)1064 b(3.)1070 b(Grades)d(-)h(MC)f(-)h(BIFIE)h(-)-2331
4515 y(K)-60 b(omp)60 b(etenzc)-60 b(hec)g(k)717 b(2016)p
0 TeXcolorgray -741 7823 a Fm(4.)p 0 TeXcolorgray 651
w(Eine)309 b(P)-36 b(olynomfunktion)311 b(3.)g(Grades)d(hat)i
(allgemein)g(die)g(F)-108 b(orm)309 b Ff(f)142 b Fe(\()p
Ff(x)p Fe(\))368 b(=)h Ff(ax)38293 7341 y Fk(3)38860
7823 y Fe(+)42 b Ff(bx)41206 7341 y Fk(2)41773 7823 y
Fe(+)g Ff(cx)g Fe(+)g Ff(d)921 9815 y Fm(mit)434 b Ff(a;)221
b(b;)g(c;)g(d)370 b Fc(2)f Fb(R)433 b Fm(und)g Ff(a)369
b Fc(6)p Fe(=)f(0)p Fm(.)855 12360 y(W)-108 b(elc)-36
b(he)477 b(der)h(folgenden)g(Eigensc)-36 b(haften)478
b(tre\033en)f(f\374r)g(die)h(P)-36 b(olynomfunktion)479
b(3.)g(Grades)921 14352 y(zu?)433 b(Kreuze)h(die)f(b)36
b(eiden)433 b(zutre\033enden)f(An)-36 b(t)g(w)g(orten)432
b(an.)p 1062 15060 44260 45 v 1062 19857 45 4797 v 1770
16920 a(Es)402 b(gibt)f(P)-36 b(olynomfunktionen)403
b(3.)f(Grades,)f(die)g(k)-36 b(eine)402 b(lokale)h(Extremstelle)g(ha-)
1770 18912 y(b)36 b(en.)p 42912 19857 V 1 0 0 TeXcolorrgb
43621 17791 a Fa(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 45277 19857 V 1062 19901 44260 45 v 1062
22964 45 3064 v 1770 21761 a Fm(Es)434 b(gibt)g(P)-36
b(olynomfunktionen)434 b(3.)g(Grades,)f(die)h(k)-36 b(eine)434
b(Nullstelle)g(hab)36 b(en.)p 42912 22964 V 45277 22964
V 1062 23009 44260 45 v 1062 27805 45 4797 v 1770 24869
a(Es)434 b(gibt)g(P)-36 b(olynomfun)g(tkionen)434 b(3.)g(Grades,)f(die)
h(mehr)f(als)h(eine)g(W)-108 b(endestelle)1770 26861
y(hab)36 b(en.)p 42912 27805 V 45277 27805 V 1062 27850
44260 45 v 1062 30913 45 3064 v 1770 29710 a(Es)434 b(gibt)g(P)-36
b(olynomfunktionen)434 b(3.)g(Grades,)f(die)h(k)-36 b(eine)434
b(W)-108 b(endestelle)433 b(hab)36 b(en.)p 42912 30913
V 45277 30913 V 1062 30957 44260 45 v 1062 35754 45 4797
v 1770 32817 a(Es)332 b(gibt)f(P)-36 b(olynomfunktionen)332
b(3.)g(Grades,)f(die)g(genau)g(zw)-36 b(ei)332 b(v)-36
b(ersc)g(hiedene)330 b(reelle)1770 34809 y(Nullstellen)434
b(hab)36 b(en.)p 42912 35754 V 1 0 0 TeXcolorrgb 43621
33688 a Fa(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 45277 35754 V 1062 35798 44260 45 v 47992
7823 a Fh(___/1)p 1 0 0 TeXcolorrgb 48228 9815 a Fg(F)-123
b(A)369 b(4.4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 39826 54804 45 v 0 TeXcolorgray 24746
81281 a Fm(4)p 0 TeXcolorgray eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fl(F)-239 b(A)1013 b(4.4)f(-)i(5)f(Eigensc)
-60 b(haften)1012 b(einer)g(P)-60 b(olynomfunktion)1010
b(-)j(MC)h(-)-2331 4515 y(Matura)717 b(2014/15)g(-)h(Neb)60
b(en)-60 b(termin)716 b(1)p 0 TeXcolorgray -741 7823
a Fm(5.)p 0 TeXcolorgray 651 w(Eine)534 b(reelle)g(F)-108
b(unktion)533 b Ff(f)676 b Fm(mit)534 b Ff(f)142 b Fe(\()p
Ff(x)p Fe(\))539 b(=)g Ff(ax)22992 7341 y Fk(3)23882
7823 y Fe(+)363 b Ff(bx)26549 7341 y Fk(2)27438 7823
y Fe(+)g Ff(cx)h Fe(+)f Ff(d)533 b Fm(\(mit)h Ff(a;)221
b(b;)g(c;)g(d)541 b Fc(2)e Fb(R)534 b Fm(und)921 9815
y Ff(a)369 b Fc(6)p Fe(=)f(0)p Fm(\))434 b(hei\377t)g(P)-36
b(olynomfunktion)434 b(dritten)f(Grades.)921 14352 y(Kreuze)g(die)h(b)
36 b(eiden)433 b(zutre\033enden)e(A)-36 b(ussagen)434
b(an.)p 1062 15319 44260 45 v 1062 18382 45 3064 v 1770
17179 a(Jede)g(P)-36 b(olynomfunktion)435 b(dritten)d(Grades)h(hat)g
(immer)h(zw)-36 b(ei)434 b(Nullstellen.)p 42912 18382
V 45277 18382 V 1062 18426 44260 45 v 1062 21489 45 3064
v 1770 20286 a(Jede)g(P)-36 b(olynomfunktion)435 b(dritten)d(Grades)h
(hat)g(genau)h(eine)f(W)-108 b(endestelle.)p 42912 21489
V 1 0 0 TeXcolorrgb 43621 20290 a Fa(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 45277 21489 V 1062 21533
44260 45 v 1062 26330 45 4797 v 1770 23393 a Fm(Jede)434
b(P)-36 b(olynomfunktion)435 b(dritten)d(Grades)h(hat)g(mehr)g
(Nullstellen)h(als)h(lokale)1770 25385 y(Extremstellen.)p
42912 26330 V 45277 26330 V 1062 26374 44260 45 v 1062
31171 45 4797 v 1770 28234 a(Jede)405 b(P)-36 b(olynomfunktion)405
b(dritten)e(Grades)h(hat)g(mindestens)f(eine)h(lokale)i(Maxi-)1770
30226 y(m)-36 b(umstelle.)p 42912 31171 V 45277 31171
V 1062 31215 44260 45 v 1062 36012 45 4797 v 1770 33075
a(Jede)312 b(P)-36 b(olynomfunktion)313 b(dritten)d(Grades)h(hat)h
(h\366)36 b(c)-36 b(hstens)311 b(zw)-36 b(ei)312 b(lokale)h(Extrem-)
1770 35067 y(stellen.)p 42912 36012 V 1 0 0 TeXcolorrgb
43621 33946 a Fa(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 45277 36012 V 1062 36056 44260 45 v 47992
7823 a Fh(___/1)p 1 0 0 TeXcolorrgb 48228 9815 a Fg(F)-123
b(A)369 b(4.4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 40085 54804 45 v 0 TeXcolorgray 24746
81281 a Fm(5)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

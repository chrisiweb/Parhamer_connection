%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 5.3/FA 5.3 Gesamtdokument.dvi
%%CreationDate: Fri Nov 10 08:54:12 2017
%%Pages: 6
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: LMRoman12-Bold LMRoman12-Regular LMMathItalic12-Regular
%%+ LMMathSymbols10-Regular LMMathItalic8-Regular LMRoman8-Regular
%%+ wasy10 LMMathSymbols8-Regular LMRoman10-Regular MSBM10
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ "C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 5.3/FA 5.3 Gesamtdokument.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2017.11.10:0953
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE5017EF863393113850793875697709861E50EA63860BCBD
4746CCFF44F0A170A875B6245B17861E28EC28D50FB9B75978D4D7919969931A
416110D7D81BE6B6F0862FE61618E8B5575F5FB13461FB79B473A8EF5C815A19
621A9BC5B1C703AB24CC6AA36A96D66D67F077FD6D0977E8069DD79D487A67EA
1D9A22A508EEA8494F7BD45B8D65D86C58DB747A2455B41E7CB3D8C64769914F
77F5C7C882B7BF79F5205F9E9A1EC74128D2448189FA0AF72A54105E7A572DF2
54355335500897F2123353CD23FAC7E2B86EEE2936DCFD6F0539158D3B883FC9
107AD8C633ECBC2EC7B55F467F12BB61BB5E69BA4A04B118AF10776110E31887
3BED624E3B07B6F315F241825ABD849980EB243937D3DBD4B158DEC281D83070
0BDE3C3A46F0BBACD422F8C2D24A8FCD9B5351F64D0D5C17307DB0D983B2478B
82FBBF99BDCEB4B92BD72F54E3F35A448F9B520EA55BF8D0E39D1EC954B803C1
9DD4F5B58C4D2012E04E630F515E958B699A14BC349FF6B535D1F2F28A9FDBF6
1B31883D9235708F3988B2668540D20345FA57D34BFB75310C2D2810B26906E9
E6BC661CA55D65BC325F2C13A8708665D55BE4D6F30B62DF2C41352021125A4D
AB1222D4AE108BC688B82B188847CA58536EB5DB161DBD13A927892557D96A58
CA946D021BC9F43F89A649676321FFFA0E5FF316731DC3556B48BF53EDCE1499
F3925DACEC43096858618EAA62D3616BC1FB3B7C5F3EE8F027074C78344DFA15
9B7DF8232322B09B231431BBAF642B5B9C385D603CFE5BC8012F64BA4E2639D1
493F0A85953CB0AD872F693579FC06CE4FF7677CEE2603269D5F288AB410ACA8
C41E77776180B85F3F15F919B6826AFBF748F14B92DD437D96DCA62DBA781557
463166B6A07DEDAB4150024D34BB52F0DB2468E3864E32669BE217C096E518A7
8120259FE222179A0B410CEF30DD249F2A5C15F9961AAF89A5769147A83022AF
AD1D767EB3088BBE2C4B4B6969D9DEE8754EBA559BBDAACCF495364CB3957EF7
B68DC7B66C01ED7E3598105ACD8BEBE00B01FAD7705D8D2CF82FA2F8901B9A19
13513BD02B7F437D7404FB68131194429FAE56D83D4AC6EB6A4FB94A81EEA409
F35C69B777300E3AF254DF4E7C9C16D1D38952622B82EE14A93D432EA7262F48
B8B84900F587D99F0EE6369705A9377EBD6D0A6D2D5B5AAF305D4F25DE216971
51A9596EF138C4DDC9F3A66E72546E7396B38D68CD4F06BB0C91EBC1175607D6
0E83F72B1DE2707EA670B43B7D3FFD25D402490304BEBEC4B0B2D0E6F3673AED
4416FA5B9897655750936F97FB3D4D4B8B5440BD4F18E011C6EB2B8A20A13A54
48DD9FDBC0B6E23042B8B907044D0ABD91B5617C893F95AB48637734BB58EDA3
7D97C42D887DF7BB01E4256EA4749BE7349C1EDA82A007B2059D8DD5EBC91806
A8E2F61634F9BEBBA9E852D82C83E98A3AE326AC2AB2C15AF97CD6B1E9212627
AEBE10BB42D6208CB8168F67B6EBC61D38F1AD4F0768471AA58488620156BB6B
F651485E5D7F222E9EA0B0300545B4F44EBD949D6BC09061FB90189C29B5C6DC
7C7C4E92848646E9B58B4106BAFC01612898F3D1326DF15DC75CF604ACEBF831
A5D3448FCB896D77C7610FEEB811BBFE6C01D9DF2991B19687BB78F16798091C
888E3193BC0043611EE248EFDC36690A286628FE70E074DD419969B673B7A799
C1533958F7CB204A92D02F2E3E8A32A443F274D79716ECFB416301E29ADBF0D1
5F8324E1A253337003BE0392AF8391376F850461D77DA33A960AA1E371412EFA
4BC0927D188BCC7D7ED9265BC24C6B4A19CA778A08462ADED7822FE8CE2B41D3
5F5B937A34B8F2EDFA4BD6252A82075426060C0DA9D4242868233CACB8A5D308
156300A64F1E719370F14E062DCF8437B91B3F2C10867C532404C14ABC9B8820
4467E3313817217C02138401319AF69C00F2CEB76E3AB855A5405AC12ADDF745
D8BD88EEF39D1358C4387E934471759E16618A6856D84628E9708441D4536E7A
C2C11EF6DA56C9B7E5D69E9756758728CD580E737000EA0C5E937D52D3F465C1
95785D09E4864C0CBDA9B46255587E8C9DCD485BB3CBFA3BEA51AFFFFDF1EED8
141951C4F113300A3F4CA7F89D8060709FFD97661AE79ACFE506874F8553C546
339F54B304CC7C722746C93ACFEEBBCABBF3A80B03EE2973FD8E7A1FCBC7C386
06631C06BF37C1C5D37A94279DA2F0FA9C49D2347E35BF8BE1C66579411BFE03
97E0EC93C9E1042752A7B391B683364914C27740F6DF97F5F1559FE50254C6F9
15D3DC1302BD0283F220D556CEEDB674722FB3900E4EDF6D7A7C9A0CE023D299
113C854F990A6F96F035CFC231302DFE51D0139FABA75A23B168685DDA1C9E68
236A7D19541193F753A633B103FC09BBFB3E6F384DB7639429E176EF95062BBA

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: MSBM10
%!PS-AdobeFont-1.0: MSBM10 003.002
%%Title: MSBM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSBM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSBM10 known{/MSBM10 findfont dup/UniqueID known{dup
/UniqueID get 5031982 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSBM10 def
/FontBBox {-55 -420 2343 920 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSBM10.) readonly def
/FullName (MSBM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 78 /N put
dup 82 /R put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943E919FB4E3240FEEED78EE63
0677FAF39AB2543D18C08A2B98B97451CD42CB7893DA8601CC0F45A65BEAFC64
EF72554395DA801CF2E9E3B03F65F1BD98F8C5F8EA06D7457842303C1A817E7D
69821807328AF426B9DDBC188A79A66FBB9E6193B4A3EDFE3136C6574B9C4C94
E2CBA4FE7997F949BB2DAC0D329C2AD8E4095BD18A037AC9F77B794FC389E5CD
56CC4C0B74D64FB0D02C92B88942C18B6DA84D4CF482DAF3A01E80BE483AC6ED
AE98F5F3E49BC762EF6BA937D528E751D9588B0A1E82EF0A5998150EC3854472
5A91EB983915BC1D6E2C3E615E0267B39D6937ECE0EC16162FE76676E5B69F3C
BC1AD934BECA284B89F0613B70876247D768BCD246883CFF4D819D6265302730
7E4BE6B2FFE7E91CCB8C6D2AFACDB4C5DB9688153E1D6B2DE136BF7068418A4F
2D1C0CA301B1B97290B46EE14B8286A81E709980F67382A5132F01B2D44DCFF0
9753E776AEAE2141D580E64C82598DAA6DA4057FFA9D02C3B77AE15A50AB457F
3FA5A10A3C986B22F8E154C1E564A55D3BE4487677613DCF793F7E1B57C9A925
BC57746C25FE567719A9EAA9CC44F1D0FF8F92C03132B205F57E3AFE9FB66632
D3FB3EF5BDFB9848030527FE759A5273CB81DBA2719611355F43E34F8FD7D0EC
9BE47685A2D122C9B60198A430C5F5E3F972376F0FF4BA52BAFF64095F7ABCBA
022622692231FF87514FD912B80C07A0EDCEECFA629E2734B5EFE2604E8DCB24
32A4C691DB4CCCF19EF897A9F4EA5B2B5AFCDF87AC06B93669F3007C1295E016
FF0A99324B80E37020B1080E80949525B3278DF111ABEA48E7182B6F48833E9E
B7BFE6134591C923F2C91D77A132347F5F471F1139B9938E880CC5B3409B3385
9FE870D53EC343C11C946BB9B5FF1454AC7D547539FCBD3D77D83180BB4741A6
90189230B9B61C6C54309B61623636F98871724F9A85088E44779264257FFA0A
FA05C2842C534A411593D10A76CB09C8FB45E6E44703FC7A51D81D3C1E8F27F0
3AAA9F00AA3A998A0C661B72E46589CC08EA87EECFDF36B819B07306C38AD155
60CE44A39581BD6B555165091C5D4107149E976E2488EBD830CCB0A350C695E3
ABC1069A94F16744A6F2D97BFD4E208EB2BFECD6B74C35310CC3567F94414FB8
334C42FEAB58B02F67E9CBC1855FE7DD7C1B142979D80DAF96A3F3517933574B
07E1CAD5FEEB9AD584935A58676976DDD2B6E118FD1D46453894775B2DF1F871
924CE2C0479EA8C8C337504C1F456B77CD97DDCF704455215B860BD0241DDAC2
F375DD996474504545DD2C1B775E4CAEAC1DA45C79223AECA9329513ECA625CC
1C5FC3AFB291A6B75A593BA8B9CA4954AD9069797717CC0B929BABA88F67E4E3
691AF74A94E95E6AF67C7B550FE44C63FAA5B404457CADEA896C69E5262430E9
787D1CB2FE11612EB29CC828ADD9B2585FB30DA75565D2D87C4AFBAEBA55678A
4E32C9C491BC85622463D65C0E9723DA72D45C6893928AC636427894C0E9F152
2EB691A2A5801D5A81640C764F9A566B08ED4A961E3BFCB36482DF85E9BBC7F3
5247FDF3399AFA35B53FB77245F078106D54A33F9750D97EDCC08D9B9F2ED1CD
BF03FB8DCEFD50625819EA67CF3CD416A288B64803F7812C8098AA640AD515FA
8DCA20A4D4C737499EEF3679764FD4A04E5228B1AD544A8895FE9041B84059DF
8838BE0BF67B63ECCEA2C818E780A376155506DEAE8EFAC53CFA081E1E3AAED5
48503118A8638431E939D9E13BE594932C814BE6698D6FE3F0A15F05D783EFC0
F61B5669446FD2E920C181ADFE551ABF15D225BC65D7D42768BA1EBBC19F64A2
B184B211D5470F81BF381EB20360544635CA4D3854C52FF691A36F65B8FC21FE
C40FD027D6674118CC6AE144B22580218E792D66C0A78B247F176C5DC2354D7B
D7C057D61D96D58A77B1D185B846C03C5E1EABA4E10AE611F9F6101BB688F315
A960C17110CC78977A7E4E7192134CA69E81694F4B9C95F55AA0E0993D1AA57F
1B79A6329C4CA5AAA7C11D2ADAAC75F205A46B98AD7B55C3E2C848B7199BB7D3
1FC47D6B8B5763F072395B0290F3852D907316BD2EFF8DC8F0C56D1270CC0240
FC4E984DE027548467A1AB533FCC30AE9474B0C7FFEE3613B07F31CE784BFEE0
D1082C6EA416F1C9168C61FD6AD9D85529CC3E6524756E85FE5F3EAB6872587A
ADDC45FCCD96D682A7955721B85FFC8A38719A69DFC85DAFF614E4C2FDD72AEE
FD4AA3A0A1313F7F8572D560C6083C9E631710C6B2A3EFD47ABCEF65271557AE
21E0C130E70A8B764150022F6E697BCAAC6986BC9E53751FA783E0C060228A6E
A40AD3F2BFB7606DC0F40AE7B8E82FB9A7F88FB3BA8CD0BF99C91FDE78ACD0F7
610091B3F0CC1BA054F52269EB58A332EFDF0E03AA4EAFE33E3CCE1C24A0A7A8

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C071D06D71D60CEEC9FC68AAC0ADD1DD74B262
0156612EB4B21A3F4ABD34403540C124221FB9DA5EC6C7229DA9A1D033AB828E
9D80023B2C8E68FAF7A38C925E0587A1CCE432EBBBA598B201F5AD036BE7C8AD
B8C411BC79646781C4519B89DA648B919EB362176B83298EE2D8B405DC66D81E
C655DFFD1BB283F3C5DEF1495FF97C798C213036AD02BB07FD42EC5932E79727
ACF464295E75CFC635036CF27FFC42DC2919CC167CA4C2E673040B7909AA26E8
123B3D9F176F6510B9526E94D4E38E62F8B9B96E2D2D51BDA2FB7C6992B79CD8
3E40292315B0EFE711C8FCB37968B8AE1BCADE6BD8A3BA1009B34137B90D924F
B2784C9E13F0795427324E80C175BC99140171AA2F40784356690DDB982F55FE
EFFCF946C6DADBC6A907C7DC28850415D9AFC1C8A868801B990CE2D26AE40CB3
4EE0281A60063AA71E48DB8A35E05C2BEA1ED5BEC68717E95B7597AD7CACDA2A
6A4E8808BDF0AFFBA31BE1697149D7BACECF4481DC61CEAB7476A2E00CD8EFF1
37E476FE5A098E607E25ED29F4BF3409309145BD0530C8A76E85F59EB0890ECB
A12DE954F33220ECCE5E9CC4B52E97089790D08FFEEA7D143DCC7C07BB2694CA
6709EE19C11515E6E967043F9162C39D9BEB2767B7B31EA068C594A63173F7F1
67F3D6FE97087D19F73EEE205A47785EF3C453E6F77A08AE9F93F4060DD19EF6
6DA5E780DCCA30F180F8DFB0CEC4602AD1201C63D91450E7B5F44AEF32087A03
0D933A941134E74040E6E7E797E18AF57941DDF7DE2072ADACCD3BF8D4CFF06C
5B946E21D0F5A799CD011CFFE4CF0F571B4377AD4768FBEBDFCF6B49F09839B9
35B1F7AB20DBC872DEDA90B79F113F5A4BE581DB49C5EB8C9033B8050C143424
1EDB333D1DCB862DC543CE420CC26EDF9639E4256570975B25C6C1F06CFDB2FD
9035344017BAA39283C14E3AE66A14DAFFE2CD87485598645C39B92C18AAD014
7814BF27C8FA6DCA0BBA0FFA552B9FFDD54BDD8C7F84484031FFFC0AE8932A64
53D2632D9379F30231361D03BF91F74904C7106B6F8EB6ABBB29858F65E937CD
E31D67C847719779DE0B34CECE88A8F9A12D46B8FCA50DF4433B0B8AED6A63B9
E6512B667AC78A09A780813B1FF02AA967B12AAFAA0AF1B3DA27604A975C2DB6
FC1854457C67C54DC08DB989CA3267B2BE5B8178E6B7889A33771F86276E6DA4
F83033522871198AB3E954EDD88B5059BFBB42AFFC2738CA09B628CC646123FC
9C2BB8B9149CBADE7A7953FB4FBAEB6078B410935DF7D6D5064271899313C4E5
0DA12BF2F08521A17641A2F5541EC8419514939892C0E353FB1785CF9CB67C88
AF752C2A0DAB509A424DDB9649BD8A846E6BD3D374BEB6B9DBD5C10FF56E2000
AE4AA5B339C187F52630B52309834F266D778C720FA9BD9CBC1F322A39EFCAF5
85107BD5A5C188A6409352766D80E77B1270019E0EF57F31E9F13B9483F070F4
86122EE08A4870456161458B6C93A1602A5EE583461ED91A90CA5B743636AED8
1E5142CC0A7DC998CBCF84E39CE3B141286A5994C60855979B402FC1C092EA15
1A6F3762571629775247A6AC65DEFBCA10A51ED614E0C7FBC7335681207464AB
F8C4ED5B883E7A4D01199AFC3C88B0E2AB5FE014A84377451081CA0390DEBA75
7BEA45FA3171095052B839F7A2A9E41737F4A4CD704E8EAFC757116FE3012E01
AEBF584F6B34EB3F9C4B3893DF4E25B71CA17D427219E0E2F3F7ADB530841948
1FC1CD966965C72E9490C31153E2A0DAB73629A1DC0ED7C058AD150C4D5BE6CA
FCC7D71907232339F3FCD771914933CABF613F0F9FA3E206172B0B4ADD1D9744
00A8C2642147D4B652A8F1A7E5BD064E369FC591D4739533513C202E9DA91CDD
1581D1A58898DD6564B1710A88AEF94B888C52681BAEE1E3EFB4DBC694919D4F
41D01894C91D8E03F68DB550934E5D783537D2B57CEFE23ABACEC756F5D1EA5D
A74192035D2304EC4F9083716CA7906B80486BB5C79752270821CB12BE7ED0FB
9FEAA580CA187AA3C9475070809AF6881F745EC71298D454AD31AB998F5821B8
2070122634D5A247EE4D8672339B1D90113137D4FEAF3CF3A2456A8712556956
C5A48721B1B1E140ABFF7793081B2B092724FC0F129DE772236556BEEEBEBFB1
FAB1037FB0997B367483D2C8C0D44E6111CEE2EF443F84FAC7710AD0368D542E
8A629BBC3C6E2D85E984AA01B575B37DD1D9B0D453E3A73EE7A34FEFA5641BDD
67E694671B6250DAFA3D85E0A78E946C78E33A284D4F92B73D7AE87B13F108F2
C4611CD948F30F56B984E409650E9CDFFD63D996E25E5C0E0FFE02BBE2237537
8C945F31C26697A7ED159B529276995292581CB9B29A54F4F4B2D472C74909CC
47C1675DC6FB9A932C0552F8FBE17F4D8771BFC6109E6D709951694157B3CA9B
1F3952D101D6CE60D1A0A97C99EDB3FAD64BBD337BB747424BE88E67FEA44610
51A1F65159650D3A2FA882944E6E8DB113CE928969F6BE3E3B8BFB71302E87A4
5A22ED99B04853D66E5A22B56F79FEFE917A6F436B823B1A2FD914DDADEFB5C5
CA3A43E348D017CE2040752BF94A98902E608264DED8C3241F06469FE18C377E
448EDBB0823526BD66B40F0519F047195405629408224D070207499DF2F43E7D
52E442E3B6E9E3B08F88C9961E81373B96460077464C7DBE6C7C7887BEB3F685
B182706F5DB4C7C4BC2FB81A7D040EC5A04E5C5434D732318AE791EDC71A47F2
AB39A992EE304763BBA1AA81F9D74B24FA7EACEFBCAC72D673540922501841A4
F7EF18CA86AD20AD76325914FC0197DA6D7632947C4AB3AF2133D1A1E2719511
F62BEB9C879E76B74493C7D5EF38E01CC031CB4CE13C2EB6BA2695E1AB97260C
39A7CF8F690145893081D526990E92C1FB18CC4B968D70DFD13C6223FAC9AD31
2E1240ED981AECE8D13DC653D59255F868EF158EDD781E9D02889907B23F00D4
F6A0D9B74E591BADA348B09E22B1A783A8EF2AC87D34B6407522AB33411ECA4F
6C765C85ED1405A5F27B28A16751402AB278A8099E29940E719DE1E109E5BEFC
2A4098E77020110C37A90B5BDBE279918B0B31E08031DB686D518B4CBB8A4D0B
EBF6750A452A7F706EA676E3B3237FC5656B29CD5A3A04F82AC871B526CC28B3
A61D985EEB3610FCAA433B9C6D4683C512F0FDBF3EE6FF552D7BF0BBBBA37050
FCBE3F164189FDC8446ACDE8D0D4050278151B46E56AF826A0C2E9389C2B8BB8
E38579D281D5142944D3322E1C66D456E4C5DD727AA41FA5B369D5E10CD71832
A7DD40DE855B47289C449B6AD8D5F1D557102050EDA5F1641EAAFDDBC082E579
A06D8A3A323458808BAD0F4B8A2BF406DBAC4C5F555EC96E760C8245A1AD9F50
881DB475F892F868823CC55D4859C09148529FBA57A392127B68F5366491D1BB
097D8FF4A71966D42DD988F48C8A1F4DE0449E6AAE79500C42B4EFE4936D0D00
0FB339115493C54BA1B0981AFE60C32AE5AEA6F1BA42EEAD2C89312DA8D4EA9E
4728E8FE799616C7F79EFAC5C4F5BCA65317E45DEAF86873DBD525C29DA1F2D3
3041FFA2445CA658CFAAED3C30CECE4F2514A132C95F5CBCA3A139F60B929FB8
72EB89B9E71EA6161CE4DC61D1F0FDB69AC593886BB0459536ED20609422AA71
AB51589A018331D25E5B0F5E48FB91D15C10357563DFE608A3CD20A80D08E270
1A520E35CC383CE5CD307D419B5EB603FC44D6869D4A1731673EB4D084BB1534
7693FC31907FD6094EC7065BED405AEAFCB4783DAEC99BC7A3A82EB333E78317
ACD72DAA3215E2C2823903980506A9F523F673BA8CF49FF629186E5AE8335042
BBEBC8DCF193CA3D40E5337359272C890DE990FA8A632DA2E3BC27F9476CB699
295F324F6901C647D65547A0EC71D4169ECC5A9AF15C361F4CA0CB8ABF336E7D
8DAE03CB25E6664A35015FC9684B7899AB6E46C2AC119FEE2CCBFAE53B96143D
E8C23DBCA777AC4E842F3A5247CD38F0C8DFC61D9996A8FBF914209AE12FA680
17DD0820EFEB02CDE5BF84E5F1E8C8572A5A86D808FF1497362CC036695A3B1B
CCFCEDA9577FB496F376710C86A02109B864FE34566E17B4A1A09F9BA10DED06
0F5AE4AD3C94DEA662B7342EFDC90B3BCAB589A88641B4C53C0D65940F2D3916
FE46C254C25AFF36E0A79983B5D27B079F4B1FE2A89AD72D1D1AD2BF8BC6B31E
4ADFC2A90B9A7B70258F993C87F2C75BD72B5278CF84E2A883DCF21F61FC2EE6
DF51A16B4969B5619E2B15FEDB0F7B5D8690F5323C48054E47E3F61DD358C698
35A31914818EF301DB98A91C6F34AA573BDF47829A0BD0C1FF5D6BAC2210992E
8C115F926BB8BDD04004EDACB8E3A599A56D93AF6603E7BE95D2B9E8B9F50EFE
02A94198A795EA3AA8F36F17AEA7B3CF3B80E235C0C70C895EDF6B031ED3CC1A
7DD250065F3ECA5C4583845A6E0F89C9EDC2F8737A0C119FC35E435A69079A46
C84B3CF54BAAB62AC19D25E46C51D541D23F9D2633D0ADDAF128E4E336E41C0A
F1E31DC3AD15631556A6C760A49679FEF8377A04BD2709C556F99D6D0A7E6D0F
72BA8FBA57162992D855DC8EE82E1FD21984D255DAAB15D2530F5004F063AD76
EE2FA09287295C79AB17E0EF4C7AFB5ECDAA96392891C296D28D5263EE631BE2
0CC1F6D56A03DFB8DF16CC64DC2A4BA25C78CB3BED5E7AD9383F870121370795
8220C6EF8004033A4C316ABB86A95F8FBDEF27B9FC1AD3259CE2A9E4027A59D6
FA0607168B4145A22A5CDCA376CF8F657942D643E7118C6FB8485C3B49DF8D5C
B26E31B287804D9E5DBE8300564D6210CE95546E90A839440D5347EFC3DB1019
7E7C1F9FA4153F56D8354C28DF9541B60056F95693A5DC3207DBCBD73B067552
BD50DC53426FA7629E8518074632F6BB0639E2AA1DBBF34708FDB80ADF685477
F1D1B294824781CD883EABB77A8D8A93CE85F961413148C812BD4323EB029D02
1211373CD1ACCDACF821F97F498371BAEDB7B887A8C6479AECBDAD3753FE1D35
BAD23DA4DC7FC3B4C147A3CA6B939B4B19E81AB223EBCA7E622D460701760E74
95135D6EE1215286E75E64E9F4333B259C51DB04F83FB8A8CFF5EA08B850563A
283BFD9FEAA5AA98B091AECE8681999D7C8CE7081C63CC2F99FBF847E30932EC
89D7AE31C15276590ABC46672EEF02B2AE8F89259944B1272B1259D760D7B237
396F4F3D80745A2E1EE8BB1E2717DDAB52753B36705655AF3B0E97AB1E6E22EE
5A58C7B3B5A46A860FA2AF035F558B5970DE1368D2F20663BC22AEBB8393C4BA
41857657A780F301DB98A91C6F34AA573BDF47829A0BD0C1FF5D6E3E3E23764E
9A5DBE640CA98585DA2A4AF9DE5A50460EE4626641060E55159270B4794F9C09
45FEAC295D142BA5CAD6BD84A5074B5832023E809B80408BB9B61C2AB51D8CEC
6E67F64B36C58C36A88F60969A764BC3650C9F608A3D911E2C01E031D302E806
1FD13C0751886DE01BC4780E971D3952648BE3ACB42BEC6D5B5DA0CAF19F96ED
F6BE77ADAD22FF83BD861FCD07E1302D6A3AC106A2E43A7E81959D74397B05AA
139C11D8E49A593F43BFE84E32554E529BFFDCE98C901A79E3E0354517C3D95C
E9C02C72E8CDDA3C6402606AD16969621B7B86948DED33D8870DE90DBCD8AB39
72CEF5BC502DB98B9C81A16F71982B56E3D30B195E00D83250BCB311128B7FEF
549C4E2A1FB5DA9475D34528238FB664FACB2DF3175DD6744B6F80332CA317C7
C7F1E95469943D8FA54558F298E38B7C47A25EFDB18D279D752527A0A701EBA7
3263002176824B16E5192FE1E7C6EF0989162AA88D31807317CEF7334C32EA38
CBF518502AC8917F8C0C4DDE1AA36C332BB853DF3C8BD16760A91B02D5E8D679
C227DA8E3207E226A8165D453AEE422EFF10547CC2E44F566E8880D7BF75598B
33B68992E7A2F38FC0102D37B14D7743D97690DE073F312A8B3CC3ECC121A487
2C7A2E643F42D81DC81DB094A39F0AC8535F07BA31C71CA5D158A149F9312B73
E4D32170A9DF0ED814B56FA36CDCE4CA26E456B7F80E01E965F2ADFE1F47E8AF
B7E2430FF5C29D2907B641B4829531FB2A32A4C0367F3CDAADB9A370228BDD72
D36A310B38B163A986ED841B89F943386A45621E129B313186B14136429634E4
766722F56E044B37BC6D86BD2B25404BBDE5111A09F2F70FA32542FF1E83E1FA
20A5DA57D8B97288C1771381D3DAF5B148F098CEE2A1576FA4E08BCFDD164C8A
2DDB6E607138E02333C892AC77F693FF450B0BDBA1789FBF48822B33BFC5FAD7
3A5F027F88EDDC45179F7225B6871B570EBE05C9D95D8F947BD0742B90BF5407
FBDD9646E0166601B3481A982BEE3ECAE668C682BA7058FF2B516EE6A1F62AD7
88D7A56D82E27037A9D4634A52602A4A406CEC3E6B836FA313F76E5D3BB8FDB7
30DA86C9CA2049211DFC67FEF43680759C5753F9AF573A9C560C53F4EC10F01B
24BD3061707FE66ECD490C249247B1EC843A51C18F15B98E16EE5DFB6E5EC238
5A2B60667E25B40CE5F8CFB9AF2BCA1DAD558C1F217EF746F550BF0657B5DC66
0728C942A87295109A90C9155DF0BE682193E60B2B5FED8BF8541250B992E39A
E2E7E3C936A06A609F48029307D8249FEAAB72F6E1CC2C7A3875079EFB568ABD
139F70C1EA8869611D9D4D5ADFC1463D664FAF1E15D2819ACC236CE307310AA5
0B8B1F887BF840312068D7236450B39F6F363E3AB6F8FC5A8BDDBA070CA8F456
2F321D000ADC343E2B1931854355DD892B5A163785EC96245A45B4ED6B5BF9F0
750DC175E04BED0223734E5A7F68B96A1184091D122ABB1E3895721160D7C2D3
174873F55307E929B392CE3475109E22CA5A270A188A7649D8D1437039443AA9
46A7630D1877A6697C2FD31E9717FE5EC1A550EF9E2FDEB0F43558C7981EB189
B81F8D1BA098074266404D32CBE9E1B8220BDC4409274CE1CD02D148724B2561
AB1E54A672AC2EF7F6BD91147CE9E15E1B72BD078B9B595DC4936FCC0467525E
BA8965CF383F4F4AE6DA98D1611D05E59ED9BE06C7BA2AC655DCDFC20968F5BD
12B078701E01F539C74A0B5D6AC9CB4E4BC1D7C2248A8F6E5A7695FE9B0A14BE
253B4345768F4A78E26D7BF1AC08BDBB8351C7F5C1C66C9F9BEDFEE780E04042
3DDC5E3B4876FC8A9E07B69FA56A32CEBA6D7B35526797A8C94EA0723B306240
918211E0EEF0934AD0C63700B4526A98631477A19FE5E168BC242740D8C45888
D4A0CF8AE610E7017E11E78CF5E7141AB9009DC1FB985090CA164DF0AAE5DF99
7D62692FFCF574292909EE79FE294598B8493F9991DE93CAFECF7231EA8FB209
39EFAC81F69FEC9D92AEF953CD07A639CB7F9A7CD9CC027EE23F3B3BC61A40EA
57044322C232BE97AA1DCF6B0E4DCB2DE2BDBF0495BD0ED7DD0EA7E72267A508
FBD0C338ECAB53C74DC4E883803F2FB7FB3A3A802092EE50089F30F3C4ADE4D3
07305271D998208A83D58F3BC00D46513F0358C43A22C413D9A6BA6B3E100EA8
03E2F0198DA96155E68E8F6CDE3F99D19B44295188865207E8C79FE8C1E98BAC
BDDB68AF7CCF8E9071B691DE0DCDBD7CBBF0BF03BE50426089EC7071143F5177
610D4C2683129C912ACDB47AECE3F9786E47398891C3990700F3123E5BB8ACC1
07D8B722419A9C1F8EBE330D7A360FBCB6540E7EB3B2ED0460F81AB38B9240BA
E845D47A0BD6760B31870D69C4C15EEA09E1831354F7C4A16212A067BDF0ED84
C9A5735368A09CE46A5C17CCAC557BB69FD42494D5D2B9C1ED812F3CCEEC1BC0
79E837DCF4EB4E495547C25D2893E35E24435F55A2D66CE9FDEC1A5F81FA219E
49C2F4D2C8EC80D9E187F9E15825F57826DDB17A35CF2E4C380E50E1797F8558
26EAB926A051DDBBD93F907D31D6709284C86F0542486710BCF518C1B5D1E6CF
23E0D97980F20EFD24A6644AA26EBAF342B36AEFAAAC0AB3727E59F1642789A1
765F02944B8E689BF03404F5426F7148BB8FA709AF1344271173529372AF6DA3
83511770EAC39ED55DADB32778CAE943CE6E928C9521FE45A04F184800733B13
440F514AF796BCDD85974E0AEC9A164C369C237DD28FC4BE2843036E872B2A03
163F0CAD1BCD5F7FBC20299D5C6FC1EDDFCE777B796FAD72EEA5713D78F437DA
E50160FAC28C1C21FCF83DE1B5516CB04C7CABC1D37D26ECC85EC180EB8EED1A
6E85129293842B429B1AFB33D68BC88143F92B5D64DA3F8DBFB0D329C7450A21
E4F97C8FF528ADC2F97F87C592935C07955C1F1B0F125261DA0D2F7312CE5B3F
3A1DF65DD60AA679945BCA6A71E4329DB73E7F29098787D96D89D74796C6908A
EFCAFC2C9DDFDD855116AFD66EA16F96AA4B9F040771F86CE98994E113749F20
47C28A0906100EF57663A483AA7375C850A31668037014979D53F051CBE5D246
FC0CAC7850013FB3F1B075D4754A82A584DF54EDC7C8DB59B77CB7A8592B7CFA
7D097BB4BF8EECC6634A8112ED925C55E4B0DF0E5BEE4B29E5DA8177D46930E3
E90AEA7B324350D5926BF3AAB7CF462B8C46CCC43F2AAB8ABEDEF76AD7F14CB4
16CC957E016A4C72A6A2FC3DA24AF084E7544D8A76154942ACCED03A7785D88F
EE716F2A7D77A990393CA5CBCA996BE2E5186292AE634456B428623FD1E62155
5BBCA26C986ACA69714EE280FFCC692113CC15C94DDD294049748B473FD5F4AE
9C321F8D3A7609539BB1E313BACC161E4DFD3BBD84E1216F1446F95F7E0B679C
0D5FE02E0CF9AA45628844A54275C0E5894655E7B06095437FEF27B81EB14663
E3073EA68F60F1D5B1A01C9D57853580E6F180343DA29EB6D4908FC8959EC547
4049A693CBEBA4E07CB9B5D8DE5E0B1C2257A8DC4E816B78B9EE734118C99128
2B1240D3E464E928369FA93FB926139676774399E370879B537E40FD383EFEF0
2E3CF25222317FA36FFFFDC8DEB8DE95405EC7DE4C780BB7B6AD8195784DE96B
ECF95B625F9BE81E96E51EC9602D4654DEB38E8E94225D8F864E791EA66CE3A7
B80CCCA6788AEF25264822AB4D94FD51449F12FDD58B76CFA594F3223C22C504
5B028700C8710E6F425220C975AF0249835F399A5539D63AF043C136465C5C6E
DD6AC0425D8F374CC51FCB15600FF7A49A4104BC29A0D7D3B555652AD4E14D41
04669F132B4584E73C21F2C83078F5D96EDC72B7B9B4BCC12F4209B1951AF23F
F685C14584FF171362B3551FF7356C84CF0F2434A53A3873E1326AEFC575FAEE
1B5EC42CDDC027C7AAC514A42B45A190590663C03DB348ABE792DB5E7DB73311
A007ACCC65F1BE0CBB445E9DC99DE3BF32B95CA40F19FE0EEEAD46783F79B52E
24284B8FB0941BF71DE5A8C04AC209B2BC1057E1B23131263F844B18EA91B956
02F465D1AD4EB85656E66D39C6D94C1DFC732A196B89AF8000D828F0B96CD1B5
C4C56944521E76439B5DCA7732A29F37A08A140F8C0036E35125E11CFB8F1E39
7508BCB97A2A87578E15D147311B7C07C17737878305488298DEF3FCFB79A08C
1884C223247C65FA99AC139A69ACDE989B3FD5A2D5C0A6D3663AFF2DE36A2249
BFD2DF460161D3EA5C1B998A83F2F595DEA5468CAAC2B78E5A1993F2B6373BD0
E80C86A751E25B22ED67B8950124818EB258558D55DEB25473A60B53D4B46DC4
CE9B9FF1A7480F80EC4A178CF4CE94A7EEF8762859353E43AF38D0D4E667A801
66DE5FBCEE3580C618C1814F112E445F32C0970817BC4050803AAE80CE06895E
ACC815D11C5043C96E89E9C036E84F31BECD3B9F74A6B21D04D33D8D6867E328
F1F84E503F30CC012322BF86C75D542DF2E2EC862783E843F9628CD09328D96F
2191AEB4D4ED70395961900B71104E33D18C699CB21CBF1E702A43C212F7FDBB
168337708E78CDE23E82878404BE7530ED3C037A517E7F4D92C7AB7DB46166D3
F9D51BF73E000254A8671C3523CAB620C1D56647B6CB1AF0CDE7B27ED2707252
504B6C74D1B1215C450ECE4FF7677CEE2603269D5F288AB410ACA8C41E7649B6
6330C265A5B7F41D915514AA0FAF252C2D470BE8E487B5C8A276C074A1F51A8F
AEF46319AB90126937F49345B442931D89A2D64E9CEFFBF0E3792A219D478D91
59272C789B363F4B77BB6F513F2D1CF82BE364B0469874C6EB4C3D782F2BB7EF
F536480AA43F0D960075B6036943E3EC779A517C4D6040629FA35ECF5F72BC11
EC5003D3A2FBEB95AA878584A8ABDF1E8CF78EBE55ABDB3BE9C60DC252CCFB36
274DC69EF2D60CFF2873563D5F829FAAE46F12CC16254F52A26FE47FE41504D3
E851A0670AA04A36A3BD6DFED9BC3104B7D31460E3FA77DE5FE016DB36DE56AE
7E663E81752C1539A5613325DCF159B32F71199029B3C52A85E3A069D5265B78
DF1E8A68FD35569FF3BD8484D4C450FD2CC53E9D5D933D8D348873F7A02DC5A4
062A9DAC0FEC368B11CD07341EAB622A7559CD4601AF33637D19547C8D92E24C
1190A50E8DCED4C7B578B8FA81CC9559856404124F851CDAC202F133D2A0021D
5BA5ABB98A5D4359E63E7B5982A26F1ABC0F7843685481E40BEEAE93DB98DE23
6DEF8BA32A536C00BA8999080930FB24143DD7851B5539E97DAEBC0C57E6CAD2
FA699ACC80B728B77A07EF96201F5BC9187B8716270EB91BC97E629FD0ED9D49
87C1C3F19BB1DF75F985EB18BCA8844B267B7610A6D157EA3ADA7CF63EAE1CDE
BED0C8CF6560508A7BD68F0D6896FA97C1DE35DD2DC448E17A060D578CBBC23C
7B47CFE6CFD6EBAE3E24A85D002445BF81B4BB62B6863A4CFAE37F715EDF3EA5
A33679FEB21AD1156AC74542B942B0A4F70B64F7A89EB8D38652FB57A729387C
6E48EFC3641A1DC59A816C933FF531910AFD36D4E7369C37B8761341D2763A1F
F764ED045DEC3F74111957D7B00FCF5F246C5AFD97D7F7DAEBF8092DFD40519C
D63CE8E38A742078EF5DF4BCEFC85437AD3B3AED02EF14AE8BD323700B083E6F
B9B54FF40B63FFE88BD7FA6074CD669B124A8333FC4173EDC8861F00421BDA29
947272ECDD4FCACAEF0B0D408990758FE70625209BE1245C285B171DAA6BE705
FF575048CC768BB8F138C00B63BA4E40BA8E5C0A6D51ED6EBCD11B5068CACB82
1BE08A1B06587ED0BFCD31833B1EECAF947E67DBA7060CF90D715B1B4C7A6B38
6466E51305470160FFA5A9FCD721692FB97A0DD77737F84F944EE4F182641F05
1987B79A1615938B81AFA5C99B02AB37CB7492A3032BC29ED513ABFE8E6F085C
4FA6A856A3B0FAE27B20E1DF3B80BF4B5911464BA2D6CD239CAA9B28146CC516
ACD809E764C8DB3BD7F80C944959B74FFA0CA674B3A52B5E428F6A5529408AEC
4A8149338459F8BEE4E3EB8047907EE0174E9379E76128411F6F62DA21245722
95D7FDF91A1B0837AA7F80FED4EFD79B47D31ACAB7921E974E0F025141E0E37E
FD447C37DB455D2F083DEA179DA4FBC32DCAFF9A18635F0C806A7F79AB1668CB
03AA08FB060A2ADB1D7FC295EACA3E7EA4F5ED92E78990A082ADB3A32F0774CD
B0A4428FFE3F0A1088EA71BD2DB74105301D0957D57EE4D15D0E8C5B0F468202
F91976A5D9C8BDB5514157F1C88F69F5F803FC20B59D8A94F59777FF203C063C
4273C41CC2B831FAC8B35A70EB34886F37C2D18213DA6D79F0231FD18090D6EE
761B5AD3510CB3E47EEF53A23BBC9033481E0B0BF46B0980D70618A821BAD346
F807B68B77266B06B756BACEB5FCD36A0F153536DAD78AFE7ADEC90B959AC3A1
9FA9D0303DAC5BE0058B7AC46EFC13F30FFEA970858E80ADA63052023889668F
4C3E84553C56AE4C8E2478A28257BE4461BF0D5737FEF579DD93DFA22A948E88
B3B323E0DD7E5B229A8753CEACC4610765D2CBF708EDDB1B5DEA54A92603EF47
888C851EEDE853AA9F0EF60D11E54B7BA0471056B021C03FB2A2D2262AFC1467
A7217C1C887F89586F84CE132D460067CEF74BB5AC6ED2CEDE02799D369A0193
3B7A77D835694536563232D2B7C11EF06056690527A4EBD1F1355C3BD6CFC4FF
B40C1CC5E799B3728AF8D6A742D6FB17DCAE007D8E2C41A2EF916B6A2EAFB651
D0E490A79CB8484AE4B453B00318B966EB78912997CA884D714876239501D7F8
9D32735ABD099F2B35842AF2A6CFB7EFD6B57700B114375B3A18CC1B963DFC1D
7F5B9FABC9B989941219026BE888DE73CD3E463B692A4B59BA7A760DD7A81CDD
A23CD0707F8B2CDBA530E9795CBE691C141A143280C65FB2AE0253F1E002F576
583BF8FF1FEE3ED0DB577DA27E45FA577E9D4B958FC9C413E5FDF7E3F203BD2D
3299DCFDAB3D314077FAFF599A6162779C3F18AD0908F75EE8A4B38C1C582F30
C6DF5FA2097A078ADFACAE547DA5926B3D5C9A7A59226CBC34EC86D2CA91E322
14DD857E80C33FB4286BC47DC77742A8C011C9628BED9C7AD8647A15BA064C8D
BC0B9A1993A9B392A4FB76D29C0565E070600C36FA9FEB325D9B4567CE2EFECC
ADDC8A013BEBF580573F64AF5AA364DDE7579E59AB8F63B4E0D1C4D5047F251B
4AE34CA73B1499B395127BF2453FB7F04A266A9662CD00305B894723028E0529
C6B747E58310BBA39C615BD9DD02347E6B3AAE64A949E5C87CCA39AE1F17BCA6
C77E1A59B2C119DE916B29DE7054ED785232C74B7B92C5138A7307297BF2B08A
80874CF0D889281F4761B0DCFE61E56EDDE14DB1462E4F9859384B15882C6B0E
2214137472F7DAB6811B1027FDA86CF66E032F1B0D4946100FCFC2BE23B43458
474D510E94FCE182C53165413E1FC4EC239B58976F94434C1FB78334D81374C3
59FC481521A3784357B8E3E7B676414CF22CD112C8DD5A99D30F55D7EE28DF2F
0F6174BED2CA19D075A462526DD5D645E764B114853CA1BF1C54B28F3591C1B0
5ACF3D46952ED60024BBA20AFF928DAE47397075327EED7195DEE9EDE5DF536E
CA77341301986811B7C76940F64EFF4AFBB062D33A9D22D14C37AA9EACFF7CC8
1EF9860D5DA595CC6778A7F06A3C36A4C792D168DC61B0E00C91D60564524D7B
1F773165050913614F8EF8A85BE29E113D06CC844D519A65F780A78E56CA9D87
4106924BF00029F54AC39F6331A4A81BF6562ECE87586E03C99C4FEC726E5D5C
D4281510E8B82A5E5CE852D1AB080F8E3F97843B172D926DE310DE9062984F69
51B5AA2EBC98536501922111BACF45C80493B3ABABB911186600AC62FEFFF4F7
754935BE18AAC41C860B70833B92CB7228AB2C8F68D03B6326AAE61A8AF0431F
373DF8E1A969C52A99052A4D3A2FE770C9358686071FF45FF489BCA0F4BAA4D5
D965566BCD23CC0A112E0565D1E1920094A0509510A0DBD662C731340D67F8BE
C315412BA9A18E9744CAC5F1C047BDA803928A286C4E76A6B2EAEDFE2FDB17FF
267D0F21C35E0E6977AABA48CD601358BFC654F3C7516FBE690A67828F56C593
686101542A0830ACA6918C86EE5D21DBD34B2EF84D336A889395E771CEC29602
496D2F4CC3005863B6DE09084927E0DA3DB454B1BED8CD3EC75326188E28CF53
4185E66A3A161EED1F99B8496A9FCFAC13492DFBAE8110E9811B2898D889A581
451395C7C58186048384504A909B92A16E8AE2275E83777297529C5ED2573FDC
622D7D4307DFE77A4B16D1848D485679E592C1AB0CB02879C5C4AAA33FCFA22C
0A4AEABE4D4DEE308AC29CABBA411987C715206297C0971364CC5B83001B0789
5F0D8126F67F4A68120DDA56FC6E466A3CA47F0F2383A60025C5D0C64D459276
BF2D8F25F13137C7F1CC459CB3B3E945760E98EAF5063E373A084CD6829DC18D
063618B2C9C5C3C3F9B01526D9D71A74984522CAFBAF6CD275B0F8470DB58184
D56DEFCA7213829FCEAC430A54AAB1C27135F14DBBD172CCE6CD2B6095B0157B
9B295F244E6197FFF3759E08318611701B27F723F3786A03BA85152A3C6A3620
836DA8BB5CE31BAA722DDB36BA5642CE4117AD1D6B9E368CC0191FD3EC665A0F
563B55F2738B16DD43CF81342B8A5B460CF17342B3EC42F3EBB3440E2E602354
F10D0B89AA2077894331ED25BF6955E13DA0B4DE3740C28682534E57DF995F87
B37C537FD5D25484B3B641C95A5D96C622B04FCDDB40B675F081053377364DE9
9FFAFE6D22E975678C98EC8A9069AEC8E237722DBA55BA4214EBF66B06D64001
2D108ECD3329117185F2DCC8334D331FDB4CF16123266B94843C4586F7B0914C
F4136BAF49D0A85D7764EBB31166A29307F6343DCA5AE9814FF8EBFD456F7784
4FC27438F6061CE0C155A07D1064B66DAFAFB39332B22F2C43C3AD99954E96E3
9B52434EB13675C377D3C5C7267BEFE151C52A60427176D702F257ED71B2803A
6BF70C74D8EF4783865CE3532C2BFC6208F2BEDF5E26A4CAEAC397152D34458B
281D8EA05D6583D2796F440720BE08EE3F855A597B65071E7946D81D3FF2F85F
8CC4417D0D02BF2477552010705ED42A0896ABD62805E2042E248A874E814B3D
78F46AF4F001A3885AB7E7C4F285F9BD614A00DE6825572189A19315AD3976AB
880E5F0AFAB2498FE1D79954BD53619CA37601FAEC649E37E9038CEFC41BA172
055892C47614A9035E7CD93575C377D3C5C7267BEFE151C52A60427176D702F2
54590A4A2E016B5FEADE1A79C0AFAD4A873434BA54F6D717AB58F78A4BE43408
C7C2F6D4465B31BDEBFFA59EB012DB2B39A9370330D258EE8515E8CBC0DA34E7
9D8085F8BD147086881CD9C9335856F5F195FCAFBC3813546176EEA6745F62F0
715C865422128A163B6C6AE0D98CA8116AA0AF078126540BD2D435D0AD6CA923
3144A0545BD34F7449237157219D79611E52DE72B51F2BB650628AC5E429F423
F250EB9E8AEB5BA66E6FBB5338F24FE4F9C3EFD3404FB795EC4D0857AA5D6620
C95021DF41F3DCF687067554D464306A44A49AF8095E431F91B8EA9B312FC277
BE315B18312C8BE99537C3E44E721A361BED6541FF9AB02AB229B8D20C7CCA13
1B23CEE3EA3747DDE3939D38A4E5DE096705B4034226D6B5DE97BBDD742027FE
22B2AA7037F55F05E547ADB16F56669A201DA41C1DAA9B4E66C8E5A03D5F1D98
DE47AB51DD77014C2925F4F0125AC8AB538565E06699AE5D68759A52096B7958
42B6283A0129D49E7E9AFCA904B37EDB25A80BF2A04235CD244B0A88652F5A1E
C5546FD4DEAA2A82A209E244948D832C75AC8BD1ECDD9992E9F8CF3DB923D549
EA4E6D98A6FEDF3B2BE1E54BB8EFB775F1BCE8B6B9B0696233F5AF80CD6A7427
3F5204CCD208C109EE75EF233DF172A38D2174B4730947637701EFBB2FBA3063
483F9E82D2336227E1D03B98C42383BF31B68F6A6309C9BC0124812E4286E9DB
31983877FBC16B4E5EC481D8E9EF87B4C4C108E799E71AEE8C115164BD9BF92B
1A79C9C7090465E9A00FBC634995A712AB2E112E3E6AABFC1D6F293F9EE845A2
ED6C77763127B0725900DD92FEAB15171D272BAF7200828B2E085A16B4BB005B
30C1614AEAA2AEC112F30B3AF57D9EAE465FBEF66FE82623DBED8135D5D1E2A2
D9811D78900B7D347046FF9C2A9DA7AEE1F42E36FADCE69D1C31BA552A09B302
16F9A60D1F58E74D0931CE5AB03850ECDAF201BBABA430326604E56F26766AB9
8A5C51659EE74A875CB811177A20A894351D75B4E76BFF75C71D425F9409954D
F168966159B2A302B801CBA292D1C07EB52F3849F14FD66B8A34A64B53A37CF3
00EE316C982A0D58ACB2AB0B6D52C9A745F440BE173AB90CDB8D5A62492E44D2
391EBD6625AEEDB22442CCEB84056435B2419148A456405A6BDEBB44025A835D
94E3FE7ED4898A10D61824D760F2B86372EC36424D8A7581AB38447347DC26F8
B6F0422F3340A01614CCC41D40D27BF1870C1EFB412C14EBB08548C09B8594FA
27E14DDF887194960B9E3222121B24B97DB7866E8CE52B81CF44DA54017243EB
1546BA7FE32409951CADA934F8896AA6037462E2444EA33B01A22F873D195661
CA3A1BBAEA7BCB4D93C90C0E83A3C7BD7646FCB6C28886EC210A1F84DB25137A
35AA5C7691B72AD442BDDAD18F30DB190E4D004740C567EB0F86531E771C74DD
3701419E5B08ED32C290A30B02CF572199F74645C0D9B4DB9DA965633F5DCD87
B03DBADCE87FC499FF9DED0E6C8FD6715B5797EDAC56AD49F59AC389979AC060
DCC4606454904FB9E7BC9FCCAC1D1116278357D8659BCC81753C2906EAC08FC3
FB9AA3D2A83ADAAE5427689ED559EBE5BEE0A331DE6080DA757EC74FFC5E9B1D
2F70A87D381F424FC2F34BF902F401264C69EECF460CF82F033635EB5B3A4F7D
F718E0EB68A4F615AF7AD898C9CCA5105A687B74DAC1CE89B910A9B6D2C887A3
C469F9DC2A96B15D33FE7C565961C2A1C0E5FDAF8955FBC699FC847F077A8104
7021DF46F69AD1EB8532A8962EF0DB618EEEB9F1CACEBF7299500D3C3520DA9E
6E7040E6A0131184185A428C37E133A909D02EA7CC5DA03D0AE482ECB5F7AABF
9749CF4B5BE79087218032FB6D3C67E6A4D8646298E229C517E89E253C6E46CE
01444ACD693258A53F98DB0DF475C8D74928A381F1E74BB27AF07B164374998F
867ABA7A5DFD196AC274D49269CB03F7483407DC1F346E0934D208422226264C
E8AFE6E870382132172F06F105BF2DB51EC3DF2714104F031BF8D85907DFF284
9E4C3C7B62E653903867AB470C9661EC12974B4B88A0AD2FFB4491A03346BB7D
A151B13D4957485E52C2815090CA3B1221A12F749E5C4197196D48244E65F7A5
4E14EA3DEE4621E32EE2D28136724789FF2247D8C7EBBE4E95D9CF6F8D4D204C
C6D61EDC66E28B7CBDA7CB79240357C0AF60E817427A9126A9C32B377627ED3A
D4456E3A67BF5BB49920F6FE6620D699A53E1F1DF8D844BB4719549E214E3759
8BCD577141B8DD30BFF42B4C55ABD3F432E2D3D9A96182E60BC67208F86C7C42
D48B75DF9890529FBB3D24651664E84B70E96397DF3694BD7EC9430C3C2F7970
B696DA577C21452444F02CB398D097D7FC83EAF094FB08A17E360511788C24A8
415B5BF9CC780D7FBF21C20D5E8BD8EDD3011931835A50D4CEE445EBC7F8251E
CD7BB67468D0B7F04516FD1D7DE759C6BC99788940F8ECCB6AF7ACD21613127E
9E4D3E714C90B76219991D21E34C2E2089A27762BAA33B1293BC4C7EE0C09F38
9FF828AA7585F9B7FAFA718A1A97CDBFC25ECADA33E3F6D66E6A404512EA0650
22C9B033A8F72733B7F3B44F48E78519E114A8BDC93D4009C2FDB56199893516
7338ABDBF7E8DDAFFFC3D0003ED3439C567438C6CC6F9A9024949B47ED2EAF15
2F6F7F69115359FFF6B335C54700A78C7C9605BFB0F0379CCDCD04AB6D9BB094
26778C3D750976876ADABFD96E5F3357C75F219EDD29984942CE3E5A6990F99F
FDF77D85D434E47B234D7EE7AF00BC8DA24B5DBA872B606D8DEC5A9707EC0438
83C3FE759DC1E6400EDEE1D79081462E37052BEDC79ED55666FB6BE037AA2EB1
0BA574F4485259691EABEFF092AEB20C9A785CBEBAC7352F57C70ED2E462B4E9
C21D45FC95F4483FED80420E4BCD787F6C1979B70F7E1FBA9D012360110F4C96
901E634981F74FE0DFCDBC13E320FC6896E2F408B840D4FB9786E782B22828C9
05CCC84E7AAA3C6A481246858A42684EBEB008B52B29C6A90BC9C73264E94622
6627968FA8AD8EFA4530AD6F44F7DDB1F7B334E90E1996E4C2B83A5863391C91
A7C0989A5FE68D9DEA3C0DBCF7C332C1413109E975BFFF110EF785C8FD1E8D1B
ED5B24BC6E9028702C35FE1AD1E9021EB5FD773C8B9DD0042C5E51323CB81A8E
DE313FDA5D5D53B2285CB5F6566613FC427B31144927ACE6A31737A4451C9BAC
E4A515379938C91AFD5DA7E08065B0AD6DB135554C9B7F8041AAC5EFE5279BBF
86B6202987505155954F393FC406C0129378B091F6E0E0C2ABC7FECAE4053D8A
001880D27C0F7D73029F171028FDDF8B55093534B853E32D9E7581D407EBE3A4
2FB15333B8666884BDE2736D81497DC8EF0FD5AF6AFF636A37A47100775C5E54
98ED8BE24F858C5E39311E6F14614753089F8686A53448D308EB9EF64D89D5B3
75D6426C7F6AB266B9F07627BE18ACB755DDDCCDAA8680E8103F24F901AD90FB
502AC0AEFFB80624427713EC12DE43B5F289F4C4058F4A02629C8B367774518F
D062DADB5D39353D4B378FB0E472F835AB5CFDE59E1D7C42D5D5C8C5832EEDDC
1546675AE16824DD84B6CA375598B6C439A2E90AFD4DF4A1B5C4BF78895E49CC
6FF69C287D243D1823077D76731EC605C2C85F79D5C6DD740FA2EAE0C2119F4D
770C87CBB418B5B2786E77B69ECA81864B4F28882C72FF1294660CFD380BE8DA
45A7FD3452FC17F10A319F40A9530D41B177BFFBD9B94C2C008FF74A20138BEB
2D08884FBE15A3A7CC5114AB201F66EE1B03ED1FB7B2F4C948C205B5D3394AFC
2E2FC73EC0D8693A9561AD2C3F9C45A11865DFDE675D073F415271514ACFA19D
2B9D2E2AC96435A959D465B74109BA1843085C27C269C751AB2BA3806B1AA19E
70A1D92D48565DB08347E934C223F5AC7AC6DF29B22F885988C306058ED73421
F9D738DBD7BD6FB97DC49648D46F2741B3A91D9032F24ED8F7853E89233BE277
C79BF6BCBA6948FFE6410BC7E74F3FE437C52417492CB8924E2A7A8B42B02C25
CAFE2EB3E9292F3C7665F7FA2E48176AB5869BC64A0C6E9B0626C45A3FAC6596
5B5CA2F739C797029BAA9D1FD7EE9405CB29E408AF7879FEBEBB6D10180E9B5F
6CB91C8ED4E24B5E8CEC7744C7BE92DE482C8FB5537B85222094CC28A53CBD93
1708EBA1C8F911AEDE793A435F04B0A8BFEE7C64ED52697E41935285DFDCA777
CE731DE6B46EE9D1C3D61DB5C544718297254186940D6305C96EE2B9E3E7C9A6
22D69FC020213AEA97259581392B9BC171B1AE1279F582DB4F6DDD82D1A1D297
D1973E6125FF805E17D38C76F5B75B93D3F8B06202FF8DCD698B56544751347E
9AA3520EBAC3107D887716F94563768073B8C4238F51C1E63C2291DE5D3D709E
67CA767DC3D20929B797E1AF1E95D49009EF9F94B5A63D96B1F47E96AE5F10E0
7D9A75E9F4AEA23ED8F3EDCF0B1F51A01691E505DA03AB3799AC275F4152B06A
1720430E0DE1278C559D42176DEA4E100EA4BE160CAB27A95C5FE00D11D39530
3092E064F9EBB05B0F69820935161A714F070388531C5BB9B3676EE853A00FF5
714B61218B4D73F8A9777879C585B192D0F6BFDE2444D8A718026FA6E3BFA81B
903519E95194C31433474907DD9BE9DE529BB4585865A00FB122EF507C2069EE
1E0EA99529639EAC0FB9701025D55BD054E058D3E91840EAAE969B7ABA98EB37
CB2C2A8EA5326178611E1418BFE3237AB288B5E6B4F9091D3510AA88179260F7
A7B77DC3ADA4918075715B97A463CF3E66AF2DD3D0BB8F6FBC4F95B19DFAC99E
611405A28A8E35244CCC8904BD6E26F9E5E0F97FC9B58B6A605314F854A16AC3
011DA8D59DF2203DC0CF7962A86B26F3ABF024EE4AB886ACCDE0D5BBAF141F7E
199B3EAEDC39FCE7F2E6DECC06679D6709FDD826F07FD80AEA7C4AC3EE02903F
5B7B060C6689595069E21E7D342AF58232A83671F46AAD2F828F82856724157E
72588478BF941F1F733A6DDD81CE07ADE6E6B2935B26BD94ADD389BFC649DA7E
FA94B7DA252B4BABEF2C617F5933E0247210E75072857A64630A7BA34D7C6562
27886DB240ED7408441F0DD36F27746C9DC827B1E08975F998B4C43E15A84E7D
EDDC618CBA1EC08E9F58EBD80322680FC4456E2E0FAC9AA767FDF75E42189D55
0A9F9807D58480946C9E0ED103AF606B38272829C49B77DA56D8C3459AEF9356
949ED184DE998BA0614001C00F5D36C5A8CBF1DFC11F715B1D493FF67B93BE90
9C4403FE3258790FF1B3FF67F4C95AAB61BFB817F900A608358F08112297BB46
8398A98E13D7D8C3B86E874E95595652C77ADE684A11FFC74B262E040240F9FA
B07F479CCFA5A6C20023C80DB00F06206467C85B15AA4D8C256EA979E8E82E49
DB6FEE67441C7F644F8A23E4B1C5FBCC731C2CBBA09CA562A0366215A9BD3BDF
D82C03D0B347B1BD06E5691817D3CF44630A285F751DAFEDC3E3D3D51F61AF2B
15B4A88278CCAD5FA2CD9E35988FD5B8584B58D2A96BA3CB5213210AEC71AED9
8317186244404D4812EB1E27AAD844FEA162CAB0A75F1B5C1763C66D4528536D
D4FA01ED40E557FBBA38173BFD22C8F111F56D53ADC64547B96090FB6074006B
A0A1E1A4A307BD9015DA3F03FDCA02E03FC5B06D07494973F5249B89DF0C0C2A
31A235CFC4B7361DC6A599CAFB5997D5A77B20D702EDAD43518F2AAB77A5D466
39668C6CD6A238DC736A95C247199D4BD5C69C473F5D5D911F077A97BC333DBF
DF76A4A160238BCC8C1554814D1846C82E64B2AD350340A400301BD2C1D558E5
321E5EF0ECCBBC3C56DA4657C3C5830D796F86086F0A434525B5D3F83B68A4A4
5F428997E2A731A4F0D33080A1A78D59FD137AAA95FC1C9BE0A9A7F95C1D631A
D1EA3096206A3AAF487403B7612F26C8A3AD9D18274E8CB4A5C0D6E3D543E112
90FBA9612CAF16B6918D1A5AAD2F473672BFFE79BB6D99AD5AC62145C7A4FE58
3881A267895E3044180DB5BA5DA3D02BA761290D59655C3AC0160FA3AEA09900
2BEE8FC602BBD6EDEE6FD11923F68BB26F02FD8B087A8608FF9C86E836B7FFB7
086E22857D4880A94B09C4C5A7775EF53B6B7128F15BC6AA0257CD569D540818
04F5FD98DAB720996E76C827664C54C8E1CA79F4D0CFB5F9C44E2C537CC0AF4C
48C199E97FF52513AB4829EF58D62DF6C4CD5658D8DEE558D56E1028F3DF8E3F
4824B954594A1F97194B19FA8DADD216423859C4B8E53AD1E9C1EA0ABC02DF86
61DB0F0E9413BBCCBE866DD60870727416BDB4B2EBA1FF56FD6EB9859D8E6E97
3336F2CE1184E77B7909FA1E1DCF959B811153905CC4BB5E507C9FD85B65CC1B
53B2921BC4B68373229BE4021DF2C59722F53286DDB254A6DB1E5706DDC16EB4
F88DE4F6DD9DB5A351BA579E2C5DDC983652D0E7CE7909456EAD333EBF2E6B9C
976F1800F7035F4A921FF766B13DE6AB078CED5FB3D4EC94C08179DF1D96F5D2
C8776792488BD47674FBF991C1D61861381F8C564B068216986339FB76BD776F
FBE44A0D870B50D5C08E42C27C9C1ED673D1241DDDA5FDA97AD809021D1EA243
019B2E9824D3AE11BD52FC2907FC7D7B2D7B37514E8E77CFB5515CFC875454D0
ACA65E00257C0BEAA1EF3FB862F9AD9FF1A1C80AE684E56726F52F4A49A02280
8893BADF81E2FB64EE95F42A411D26C48562C814D59494554390A484C7B94DAE
D0347805F77FC6B9FA59933EB42976891552E768C48B1D5BC0A9F9A1E08F5F5A
67D699C2FD288AD66CDEE6F4059B764CABE282BCF201A00C06829558B3DBE7EB
414F26C049CC42A107DB8F52DC35DEB40638634B38C37AFCF8CBD4F22FB2FBF6
B0D58150BACD7240121A07B43FFE970ED2529C5E0870471B65CEA8DB2308778D
1299FE2E38BEFB071B9FFE3D7574FBB32CA8ABAF8885E7AB60AC1B2610D72BF5
C0832AA63EE771FA86C42735C7687F15C4C86957018D428DF6244A1FB6A99122
B82F2DA78154EAD1B0AEEAD3C32B85164D517561605046B5C471BA380EEC014C
EBC4FB75DCE676DAC7827316D2FF32042ADB926EC8CC9BFFE37D3A7B41CACEDF
26EBAAD6D5E0811240CB327A5DD44AB6944920047DB7EF79B9912D759A9D582E
CC1519AE9A23D52A6EB95161B324F7AEAEAED3D3D8FE7A74E85A68531FFB57B3
DF725DA364DBF1D165C4D4E6B00BF84FBE6428597412531988959AC07AEAE0F6
DE8434EF087320F134579D9E18D1E0A10A15B7524592D4D6813FA53700775B2F
6459EDB9D667FC6287BC9F306B44A7BDD35F637D616C7003024B08E526DA0ABD
7E58F62CB64109E9856CFC5D2A62DA183B416FFCAF99CD02DFB0FC278B529C5B
6D43B55A3F3ACADBA99E863FFEC15DB13D437C2923BF8C7EC3D3B49DCC3434ED
28557339FEFF5716F817647C9F9146DE60BFCFDDB0C8630F6572393B8F51227D
876CFA92E57CF66198F1F7EAAEDDE53F7627C5EB24D7FB1AC128604DC225404F
3CF9A74091CEA8B1E529DD5575C2362EA9F95EB9E16E2D7EE23A79C65F1EDC5C
C0D8A503C01A1425D5A6527C31995FCD15B985BB2D00197AEE3C0F83A50E05A8
E6A0F9459F88728874706381E06CAB4FEF345D361E6BFEB0F470CFAD0BAE965D
AE012540D9DF5BDE9F4F5D02D46BE2C6DAED3705DFE13EB7E3AF75001AE8C820
3622C7290C3CDAB191DF57AE3A4492672A3B30BB7DFC8DF26DA8F837930E9FB2
52D7C7806F1AA59FE77425FE62C24ACF71C4D187DE8A6A3C971A03327FEC53F1
F43913282D7DD783091B4993AD4B09E331D14A662DA0E2251998CD0CFB5C4FC7
0C22568949E624D8FE780D65910243575ACA236F24FD61F346CAD55B0BEF461C
749ACD6B2E995F93025102C80F9ABDAD878915286731DE01010A7C89305D2AE5
90C7DE36CAD6DBFECEDFEF976AE5071223CA6D67732F8CBF9EAE16CD83AA19B6
21749E3F10736FACA7F6BB091438BA2C25389A4A4289945B806CC14F198DBA7A
880E32BE9189E6DE0BEC9F0D07A47A715C1C33C5C566603A235FDAAEFC70EA6D
36AE941E3291793B66598F7719F2E9BEA662B5BCED70A87CD0D4798B97D61B2B
B33D740F533AFB8D80C54177E7D853363B246759EC16209E82ACF3ABCEE5B559
AA42CBBA8CDE9FF407C8A7E5FE9FBB016C4467B82C1986E948333E1D0B5BDEC2
7230D2966673055FCCC3F5D98ECD3DCC13EBA3049418E59C5418E748D53C1B62
250F2E2080660A263E8F21CB3313ADF099D6BCC7BF5ADB90F561EB587931A506
5FEAB9F6F839FF1A4B89C7EE95D3F10C641262CE14E094EBA9C6494036DD90BF
8137AE548A9B662D10633045C6DB361CEA107475C4793F8D1DDCFEBCD49ADC69
315DBE3D9CB7F1ACF226547BBBF35F04915D9D269A840CCDDEA5AC588F99BEB2
4AFBA76B5227B40091656B67E3FECFBF56C14176063902B4631A1666599E70C1
BF82309B15B7AAB8DEDE687857D57A34CABDBE4B0D8667BF0FE54A8E67BAB13D
A12D0216F822CBAED2657A1913E3C0A21FC66712404905300AFD3858A5D2AB81
9201A05B39F1A395E36E25CE1125C2B0BA6F1413D796C008A2ECD55E062CDFDC
B0211FB163F4B524313B5449F465FFEAE0369FBB390201E47E4285B758500AC9
FBEE678FB6BA165191DD7EF4B45A570B17EFF49A79EEE4953A33DB4595E959F4
D0FF553BFEF1AF35C45759E9D71ED8DC943D2297325558082B5FC4BA6A3205AC
2EC474398195C8B4556A8BBB04864649CBADEE0BAA08C4A5A3C3F3998CD3328F
0DC964B422BB8A20F4919B04ADA061CDB72C457D44795F8589FF7FC40B17ACD5
0C6D8989B3E8688D2A74E9C9F9A5A883232F30835FD377E00C7DBDBC3A2B5338
B14C93F707D03676994AB0353B91D6BC325ACA18621F9F14916D8DDF0C2A47B3
0BF10D01299C451CE6DB3C8E9EED4DDD03E9EDC9EFD6B629FA661440C361DDE7
817154052436A36D1AF60E8120F8B239874FFE2072A731070FFB5095F90CC087
B68D6CA9C60D3A774AC7448624EBE6A7D0067E34BB215028AE5DA5139E8DBFBE
BFF644019D08C66149243BDDB477F5A3D7ABF80CC031C2F2BE5D633E49E6D10A
72BCF4DBF442967F828C6930084644D6F8C6366587CD84E8E507AE4B0E97E857
9FDAB2E33635850266322C576866231350953FACECFD82FBD821919E3542B336
90DB0C571FAC324403D3BCA11817C9D15012E0BE84E194453124925621AC4EE5
80A496B1062FDB354D0361A3054DCF0C2D29CE214DF8C38971D55E4CADE3957A
2F7BEF09698D55FACC7617D6BA28E7C99EADF0C0B1E8BCAB1779B2620C9A7A54
C91039E273FE0FD00B499E22B8CBD288148076C2F58B69F01F2341AC27750FA1
CF1A994E99B33E8D663E67B8D29CF63309F98AB436039124DBBF37CC99A314A1
991A1E999AF47447E6CCA2AF60BB09D4DB7FB69B3C2A6E03DA735F5DEF39A01E
9C18183C34B5BC8153FAFAABD370D5384B34D68CB4E10E0625681DEB0AA59946
7B51F09D2625AAAAF2A089D94C253CDCE592272FA1343365B9BA55EA06912BD6
A44BE069F990585122CC973F1A7BF337DA8B9939021638949FB0039DA5F622FA
E3BA984B325D42D1AC4C7D1E0ADEFC6410F46890267C9E21CFD5B69BAF589140
2BE52A4C0B13602E392D96DFD9900553670CFCE11E6829DCABA73D9CE75D74A6
3FE359F9963CADC84DA9CE87D81D4F2306F0F4CD8882D55BF2D167E1A06E5A4B
E4DC4863C90CB52949603C0727A088514F2930E596BD6CB249A05F229CDC2C7B
3F4693D47606F1EC94DE4F449CB4E40C9A368A1107BC1AA774406AC8FC07B7FE
A769AD6DB847C5FFBF83A9135CC1969A73BFD3FC68C8E444AD667F9BD757CC7D
708592EDA8C348561FAFEBEA4F5827DED76AF27796B35D19243C562813EA3150
16EBB2552F644065408A69F1BB6FED504864414FE3EC2A59D9EE46F33362634F
9758827B199FD07E61B1484526D2DBA06CB803B0E54FB18E1D3B530E8F75C473
E4A11A816466C949FCB88A21E889779169F0062A25429FB381D71265DBE5375B
06FFCD490B11631704A6065587257CFF0651F978A09800A142DAA73B7F1B157B
0A884A8DCBE0D0E6218801EAFB019F326E85A8CC963C4276175E6FD7D43D9134
ABD970E524EFAD438A22F57AAFB95CFE72C6D73966499C3FC25C4A1A506DE845
7D1988E88256D337115369B5CFD265FAC48E967E6607678FE42ADE57B9103298
6423BE1A589D2ED43BA77A225D1E99BA827BD2A3DD5EBD003CCD1AD26D23BEFC
B709973D9F7CA36EB26A2B905FB8E060AB87F85696AF202D90C256E8D83CD844
7B926452AFF608EE55FE5E327737A97AB82082462244681E7CD633056BA0EB2A
836C6DF92B846093156CE197AC9D66D46B885A66D5E74A3CD42FDFAC785B63AA
AF50D6EB1A77F44DC13FBBD93081B66089B58A2CEE1A78FBCD55AFD5FB30944E
E4F182641F0519837030D7CB7C01BC6EFD70E0215C50EE42A111EA4B21D0A784
9338056AABAD822CB4B0D735D46ECAD9B3058B10B77F6F2979EAC946F8F2859F
F309B8474CE66638DFA57181CD0DC5CBD97109E9E4E462E58A293CD1BC4E240F
E190A0E9965C33E501E54100E989CF0BB55EC84C02CFB7D287AD444210B3B520
5B17654B523F126651F8DFC9550FE1DC5AEB1BC7925907B6F56AC72BF7055BD8
8029314F8E10D3A5157E4115CE3B6A3BB452417F1D87BCF18792C19E66F93DBC
8E9CA5E86793FA37889936F823DF8E754F21B97E41AEA8DBB99B156D3D5E566E
70CEBEBB433A143A1574FC22CEDBDF325F5F3D4E773B8D621B20C962B6C262E8
C6E110D2829E58B3F2115557F9DAB68BDD484E8DC80DEB9A7AD2B328153B21B8
1883962192F8876683CE3B98E051AD8907FEB5565164E2568377D3C569E7155E
BDF9AB2A053F432A3149B7BA168CA488A7C8F90E988E9727FE6F8AEF5969EFF8
7EA400501A3B32379E42AE07EEDA4D1042BE0DB0311AAD05E48B2C312C597649
09F7B7B2AC0F915A89AB253EFA653E29CDBE7BE16BACBA2F8E57345DF144731D
D2332B0F7F5E84C46AFFBF7E49E580D08E4430665EDCEC71DC39584BC7A67697
61BFCB64471AA58488620156738617681E0A664D228CFABE8D5DE6831D51B470
86683B838891E3B60EC519182DFA0A973DDC9DB6DE7E7596528D2582B82FBA9F
E33DB4C698648560D837FB67D3FBCA7A93A80A32481524A50215BDA42C7A82E1
7B8941CC10DE1D4A063CE605C9280382C7C0F139E2F261BB8CBCD84D39EF0F0B
A674CBF2E72FBB57599BA20E77F7249C753F46700B475E00D413D22D32DE5853
85DEC0F3EC7AA8B6C438BB78EE85B2EE88AAF3FC1C9946D367238AE29208FDDF
2B32ABF6E1B7733A9CB2AB45BF264FB9895F29D01FF78077E0118B0B9702ACED
9DB6F1156B5FE3870E654491CBF50E1AAB4DB1875D107D8180396BA604654B2E
31E4D683FC1DCADA8C9F90CBA770F6B6A655DCB221291A6F8D053F2EB3FA8BF2
C5D6EFE5B2BCDF185176BAAD7E5E21F91A0181155AAE4A63F71D9E321AC37670
A0389D1B5FA83270898C37092D4C0A77C664A10D5F2855C66F6F97012F4FD7BE
86ABD340C9D85B35D5952207E1699514793A83B7CDC6E6F044C69648A0320DA6
B89A65691F75F9A9415D03C8D92BA72C28C2C148FF4884364B370F0DBEE5103E
F0D1F9C81661BFA5B2216D70B9180D9DCAD97A270CD3BC6F03C3625D0DF044FD
CB15FC3ADE590E08468693268E4DF9E0CCAE59FC2A788EDB1016C1120A5C4DC3
BE1FDAFD9348548BA85064FEA8D15C1CC707CC70FA943FF9A9F5E8D5716835F1
7CE3FCD6FC55B2DAADA7496A1D611D5D428A63460826B6BEAA35BDC0DF11E930
97DC4238C6FCFD622379032A2CA2E5FCA746CB22A7306C41216FC6BC6F51EAB6
C222623AF1935753EFBAE869D3E55D11D9759587F283DC60A2707EA230683516
FD68EAB2BCF10CA21818B531AD10A20BDB918317EA0B523B6C42736A73C196D8
610F8274CCF19E9A1132089884EB31A8BE133EB14E9CEB2637EBCE63E639A98F
E83B5BB5ADF93891FC191896AC5C9728F1D239185EE1A379655DC7A53D88C875
A3ECE72BC4496C2624F6F7E45CD885C5E032FFEA7C337BE41F835FC316D0F49A
22811915C4A3E516837EFEF9B90243B4665E702EC701B68DB40148C9FE39D955
FE41A89349C05A5ABA0EF103567F98FBA5BAB5CCB5C196731EF7EF00A61FCE8D
612125A9132BBE333BF49BE67A05EF6638B79B9685ABF36571E020B318F484B7
F7490003F8E553C0F9F88D9725FCEA44A75FEA44CE4C991729C5792E1E9E72F9
6FAA938D96A6FC2785A8C80F736AD31612362AFF62400C0D43F4A0999B39D1D5
F9EDAB9FCEE3756BCF915AC23D5090E748679849A829F4171A1515A6C5DB9BA5
B8EB6850D430BD48CC8A11890D9F5C9C50864C105A2297D92482747C5247FC94
9EBCF49A2635076A74964B1CFF7C76B5D05AF43231C262C7DDE3DA316426D873
C477C613DD58D02216A81D710442253365225052ECAC899BC8F73EE7957AA138
B65BF369F7716494BF36A317D6946D0FCB3CB63E55734B673E53DF4FA4F2D087
E6F86E0E534E99E22D9F51DAEDF5873816653E5215E436CFC90B965ACE98AF85
DB5EBCE675FD54311CB1468157175EB56FC5C86A7F1C5A966A77B3EDFC742FFB
A113F9A62F5B53FEBD6FD869276EAC3B0E5079A047920ED4CA548C73E1130482
7B5672A08F7799B3929DB0B130E9F217E1C0140F09B9C2B636562C5C7CBD2D34
994227FD7BC1F21FD581CD39C7B4AEBDA5D1CFFFAF6EBBE3E5F0B8799DBD71CE
E51BCC1B963DFC1D7F5B3CF538853E7F802761413D6B36D16CFA68FEAE5E5FD2
9E19A6AC824161987B1BDC4B478892974D79565B259C5F7583CB49E23B93B0A5
322B9090B74ABA982D0234DED098D4DE0441A25CA8E45205F8ED25325368D43F
4DCDD2137B5E7FB1E88FF18B35DE58928B59A875DA764FE377EDE86C1482FF69
617454336CF415F036C10A982D3D5A81DEC1A584F54BBE5435C67D946B3C541D
49A9FFA553067DFBC12EE64EB1FA380F130F798FD762B79E924D820B95B3565E
B57D792AD6D706D5943DF5FB36067147A9BF575ACD8D118060C02A9EBCF7D927
58ECFC2AE2CE119EC96EAF1A03B9F6FCE731C467270952A09D7766BFB0384EA0
3B1E437362AD99FF4A8377818B6FC80A05E2CAD6D486F3ADE733CD7A8624E44C
4F88FEBAF2125CA69D8AC6C41D0232717450806C3E2644871555F2A7035B27CC
89D02E1B286D747C2B001284ABAA549AC7196ACDB929A5D092318CD7BA6E729B
4DBC4F42733071FC9D96316F2B12EE553B65CD4425BC41715A4436F7712B2138
C11919DC49D732DE19CA3E47CE0BDD68B365DD71D4D92EC5CAC7416E4E232686
EC0FA1151900E7ED592B98138AD85E6B274B3B189A1A07946720C3F64B70CDC1
C20A0F03A2D094C7AAA3A17306CA88A394D4E6A40B03E96BE5FD10ED866B1C2E
8FE34ABCF54AFFE1C1E9C8BC5867752C41D7788EEEAB5A7E7B8B4139ECBCE97A
84EDC9F41C42C503440F0F5646E6F11CF1F1B75CBF8F0E1C01A4D476D9DEBB05
3F899F3A05AD639B9EA09CF5EAC4F0A6B925B989DD18D22421A31D4A66D911FD
A96337D9FF8DC44C35BC0D4AA4C6CF198EB6BFC347FC670B28EE47EBDCCE047B
5FC7A35F481D97B073EA2C1591EE85377DD4103C63070853CCF95F22F9BF2BDE
E829016B5509AA74D73D0A95CE9A601BD60B2693A99BA7A25EA10DCA6CD110EE
69F95A1AF85A0CE8751F9A775A6E3A663F5A8FB79488C28C23E3531FA8FCB171
0F3AF114BF8407039A97C87A43AB0C518B2736C44B57B949452C93C519D985D5
15DC7E858E640BE0534A45F4E17C1ED5427C3E3483B275F96D071EF0BE7F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols8-Regular
%!PS-AdobeFont-1.0: LMMathSymbols8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathSymbols8-Regular known{/LMMathSymbols8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols8-Regular)readonly def
/FamilyName(LMMathSymbols8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathSymbols8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-30 -955 1185 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F035757560E05960E2C327020FEAE317
24C484AC0CD3C1AB9CF35516622A022D6CB83DEB8126DF04762C901617B35492
98158049D5C65DE86143B7F36D36233A115C36DF60D3C55816B2B0B341102AF0
90D7D4E00A7611262CCD366F870F0EE8175688261513076B608C7E160A9A79BD
2B66E2E2A89CBF6D1703854915ABEAFA09718FE338924B5AF1FBF1209786AEB0
0026C38A2C7E208E6C306BAAF037DFB0F3297EE1ABBA65247CF72D0F78A9BC24
038966CE124B94487282B69D6BC0B5E17441DA55415B5369E451E2B0D705FCAF
3AAC6DBEBB8AB0313C4C201F851DB96CA9EB49357C3C1AB73F0CA2110C994680
5AC8F0D760C03F71C92CEC2E1A3AB84813D389BEFE7E0C28FC76FCA70704BC4D
159EE8B490B95CB09DD01A4122A686AFB8B9C69381C8C303F9A3B695238C3BB4
CB44B3BBE50E2BAE63796BB51D945469BB75C69F7A758180B77CAAD2CFD5951A
23580A3D45083C8368543DD37AB49705B939804C12D4BDFA730845F7E42A6C9A
B3F0A376F44DC297393B85E8A18C45C99260BD499DE599CC0D76EBE4AA7D70AB
348FA87CA9A1000814C4FA99B4EBC35A0298AA29563B030707F3EAD9FFF7BFB8
3B347C4A00BFB392E79B79F413E67A73FBB006EBA896A65CB21BE940A0940640
34E08FF806A114ADD3FD42BB394F76CC77DD869C46DEEE20839C9A2FF73B840B
0ACF238D333719F5947DD4C39B8E3F070EEDDA1A39D526319828FA9F47F03D8A
245D8E215B37959566D26DD98185223E4FEF01676650EB4E26C0A425E6C23C50
4BA94BC88E08614769C017F6D4F14C52D7189D4AF8CDA367D8B04CA8D3F2307C
0A7A179419A80695912F456637F539123745CA8E696E250E0BA6B7C6277394E5
98A8799C29B6272613C152B0CAB05F3C7795791EC9AF2BDD416861A3D13FA858
BCB6ACF5BDE40E5DFBC1A171A7280E8FF4AC0D4C8A2199E9E2BAB5CB9131A76D
EAC166A7C449A549EA5111F1750CA2C6E1EC6F00CB6C62BA52D17FC66E06ACC9
1E6B858F9393AF9AA5E69F799E01D301B647DA57225C2920E3BCEE9D09CA5C60
F22B07F24A26DD8F4D6F9C78BFAA8D12A21531E713B80CD03A5FF4F3BBA2AD82
3BEF7DA8C97C30F1452006AA3B1A168483F6EDC4089ED02E567923AE6DBBCCA4
8C246A080448200C2A29C34AE6255BC79B73AE14B980A7C357681BB0962894CB
DA32FF2B70B21AF4D158E0F74652684A7150D0967F83E13EBBAB33588541AEEC
0DE8C53851845A44FFB46A93CEE3E8A0263882542F7F103D13C367EA8E1ABFAF
6486A9DBF6668550BE7858F5790BC87C66492C0FD34DB08EDF842E1AF58A09B0
85A9B7FA402029FE2439769D67DEBDC8AD8C861E90E5322951A2904FD702766B
36916DBA8F9C96141BBF4788FA435556B2B4E1B37DE4506ACC4224CFC00A8F83
33941A050B51B9508758F4EB2DC074D799F5116296B8822ADD743A043F9A6426
88D10767A9F99A072BD4C88CB579B34687BA4953B96DBA29F33211B12A0215F7
5F2F873E5074A7D593DAD0EDD97270FB9A87BE870321A49958B10E3353D075A1
E740C054E9AA191CC6A2B8E854AC7E02D6C53ABB1608ADACCABE3D5AC2F894E8
5E234F72A1C099901DE1E49328D413CEE1295B615F37F139B70238D0C3177995
99A49939640D06478EF23B0FA6C4056FC2D15FB7800AF689C6868DB1E0A5D946
81993A3B3C100B5FA02EC334CEE85D1801AAFFC4A9253F6BC832A0E63EDB6F31
07FCC58C94F34096603C9E8E3719950691B4B5D8C0BB08883E09585EB7530664
C79582CCDFDDA4B4E487A57D8207DD18420AF0A75C5534B47DC12F571F827CA7
B93D28D1B195DACC47FE5FDC29EDD6C97DEF92E40FA9F957D6EC2A2902F7C4D6
8E837E7D573068C55D4470801D8E2D6B5972D30B54C54E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: wasy10
%!PS-AdobeFont-1.0: wasy10 001.000
%%CreationDate: Sun Mar 22 11:13:35 1998
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.002) readonly def
/Copyright (Metafont original (c) 1992 Ronald Waldi, Metafont curve conversion by Metafog (c) 1995 Richard Kinch.) readonly def
/Notice (Copyright 1998 Taco Hoekwater) readonly def
/FullName (wasy10) readonly def
/FamilyName (wasy10) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /wasy10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /Box put
dup 52 /XBox put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox {-23 -1667 1720 881} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB02CB1AAE
36F1D7B67C605A37687A9C3F7067F07673039D1E3E1F5D9B09E6A389A55EBF12
06E72531469F768EDBC4DCCA572BD608C4BA8F7EC3E5BC61C6D949C94A843E69
0622F0AAEBF5CB25A2395DFF6342106C198751CF0B33691FC18800254AC54C04
02494A0E3670008E8BA57A3CD823BF47494F2EF9244421A8A0AED84D153D7201
BB12EE9478DF00CA573F64C2474817FF401EE94BACCA8AFC16E776665C3E1E31
89AEEC906A2B9F8974BEA7160C33F0AE7FB04B2666A5B16659D6DF66A688D80A
B531D9F866F21F15D55C6FE75A8787091359698E434EF9C129EED0427EB96787
B3F25C530E3664725C63D4C5DFF9D05CD13619FC41A001275A78C58F85FC7C4A
911CC31CB426231473202A698E5715B032D2206BB361EFCBFE3E32BC0C8D9BC1
353AAEC62EE632FC8FFFDCF6E7D928F562F689406CA00C11C7EAA723B62FFD2F
5F6343AF494085662CE2CE880B04F5589396EAAA8823DBCDE56D868B9E66BB8F
10EA91AF37D76A1BF27E69C2A2ED1D8B25434C0F205313ECB8A6E039093FFB32
983346BEC569B175529DAAD1FFEC1A9302918FC947C390A86C061AE0F6522D79
2D4FE06AE4FABA59F225D7ECE2EECD4BA1359DB18F8957F551C5D6F037F18545
CC6D03EB2DCCCFA294492ED72A737588457E5B18FA4CA0F6D6D8963CA35DFEDF
31A684FC0388D416D7BF6CD9837AD8692F284F24B80CF9F24DB10DAD0C4198BC
2D2A52D9F75CF6C52C7AE0D8D4598DB750E9CC97D0FD31EE8C598A2FF3745694
29DA808141AF4D8F8AA36D7DDCC3457D5E082B2BDF7EE060296721D44B092E70
3607B2335488925E41B22D659C8F0FFEE19A7C19547A147DB851262E47E9C4FB
0A8364BCBC1C77E29A1183EF185EF35B9A5B13170730ED52D5C52CCB460E7D37
F4F37F772794BEA0DA201C99C52F8AC2E4CE7FF33F6ACB796E55BA2372E3B035
52C4F57AB5C0BF828DC7E5A8F8F00ACE0120B99667816FAF5D736BCEBF7D45A5
79C9B5EAA32C9B672D764D2F51B2393ADC71A36AC0D5CA76F3F571D50CB4C1D7
CA77149B8F0C98198919DC43890B0BBF10075D53739F7E84CEE95B40C3DB68D5
6E9847E37B7920412068C3DE2065A77281345980956AFAD312499818890B454F
5DD8C92695818BA4DAFEBCDD4D268763515CE077A64C5F3AB384A6DFD7DD9641
FCDA0A3344B3A14F82D478B4BE7BFC2822A4D67AD3FD07B11589B93842066528
1E51D954D7E6019F6921DB9B00ED303B4B8F557EAC7A0B0340A268B0DDB25B3E
BE0982129B0D3416CA5D07ADC689CAA181270B8141F9D0F60C60F156CB305E5B
E71D9A5D5FB3216BFB66284FCABF6D74564D1288EA99D3FCF6F29C3AA690A596
02C0AD2BB29A2D457C66031E5571A1454758212EB4D053F4C28FF629FA94DBF2
9677AC4B92C4DF5C7FFDE31A8F2D6F9477896C11CBA890DD464C9231B1C350E8
E8CEE17F2E0F5D10416F7D7FBC6085E9BE09E692951EA7B93A9F49CD458476E0
A380E1D122F275093ECFD398FCA6D714187CC12A2B16318F9E1D2B0E9EC134A2
C4D2674AA68D2E7EDBCCA383
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFB8DD9B92CCD508A09171BC12C8ACA32FECEB20
7CAA1C2C81ED075E3EA7E712D95FC612CF97F3402658E90924C75CA278243C52
D4E02E8224F197E555143D563819EB1ADD2248C18E02E18FE3DCF624E37ED993
3C7DAB05959E694040B7EF5F92D80AEAC2CF58EC01BD61D7CB962C4EA678C5C0
62593DE423E11AF90918CFC6E1E8F9DA428296FF0C92CA794AFBE2067C46264E
EEB0AB0FBF2EDA1A8420EF654A1D4E0A295D1DFECBE39D9FF712C85C748311C9
CB8695716F72FD4F80E77DFD7E01E9FB8CB1F2B5971940EE4E7B14727B086F27
E43E6E3EA6EF0DE68E17C9C0F050085274ADB56BAAF193211E48D1B82FE44A59
2A9F5FB13EACEB54AA027C1B87380F9EEF9D500DC327702B132335FF288ADF62
578F30CDCCCF826E4C4CB57B5D5B537BD2FF89086BD0C4CAE557ED66306DF3F5
BA9D1007C869E8594D4138161162682A719FFCB1A982A5CE8765E2681E64B8D8
4A7CD7504E58CB81D0EF03A3EEA97D43741F54987AD65FA54A1BD682F7EFED16
D35D034F1AA5CD4EB628353F1FFEBD0CEB905F10C183245F1B733C17D3B854D5
3BA686CF4088BC6C0FADF9A6C05BE3499567E930F710682B8954108AB7B126D8
255F1A0F1BD08158F94077D191F62DD73838E0CDBC99204AA6AD1309BC5668A2
A524C6D1C68B4E416B248A6FE29A67DCF4E1CBFCE603260A277AEB7F75627333
3E84F341637A1BDB292EADD055C97A12CF0B915E39263AA9F03B21C1F45C87C2
CCB12B59066B6DA2CA24E020A0FDDCC0498D74594AE3ACB0EB4CE7727EA32222
07E864C7F39773638E3BD2FDDA11C79177AD0A23CFB7F631E00CC979AD410F81
3119C0543E091E4820C12FE47E3154789E02FE363C319139350F014FE8A785A3
F66FFAB8D8C9E7E26E49BE5FE558491D1A57B150A5B386F7ECCC0EE8E31695A3
36BCC7BB9F7FB26DA3444238CC33E2791CABC1DCD0BFC3372E1DE72D93AFD1C8
E2635A5E428AB33E24E81346D13A9377EBEFC6206D372675CF43235722B50C78
8C4A02867C68BD8E5FE9A45653BBAF2A5DCA560DB5BEE7054FB8B0A13AB598BB
C481A3240450D1453A1CC1054A06B962B7E28A73BE0B2713DFD32DEABA293EEE
AAA8C0409564BB1ECD1249588C18D01D8AD4E0F0032FD811ADF35B869BB210E4
4A57178893AF229268DC5375F01AB676E600823FEC28C30D2208A868EC0D01B1
4845736F9DEE02D06634547729442ECDC50C90989CC881C3D8E85B76FBB10040
F0DADEE5ACBDBB43307A30FDEEE5F77E621B130E4B824CE23100BC08DC65BDA3
46307E3BD497D7F1E2F51B557FEB6AA32E84F5E55E5C12A81B73F370431F3842
A1B0CAFD4ECE7F0DC8E2A6D644CA8735A4E96445BA9CEBB627718F858DC051E4
3963ACD7E7868CAA4488EE815D40E28CA54C83221810546F0009F98531353C9A
8EBFE7DB9C9A120C2A4E2FED0E63F90B8DF65026707BD39B489E54425A5ED877
73C6B3A8ABC8ABB13ECC3B249F1878A8F76D59596C63BCB936321589906AB242
14F3C046A1F210FE287A8192CBA7D2A89BBE7A7B2DB6B1E19224F04262D6403E
3B41787E1449587E28093E66A9837BB94195E3A4A5C17DE6823755F59BB9E3A0
52F69C7808FB657D9270933D8B167D2575CF146336BB1C76735BE5CAAAEDBE98
C69F89E7E71474CFC7515F73F86727442EC24D46F92C99498946CAB6DED8F5DF
0540063DEC2EF3F83AAAA3F4F68A8E892C3D0529A466C6A310A6101223949B01
79CF7DE6B550657C91BF3116EE7F85B0178B3227810D99B48361133B54A6DFDC
872745DD45766283944D7293D6FB1B42BCDDF2F241AB267897BFABA39D0F2725
E0DBA7C8CE305DE7C1B59DC2184872FB99578B809358856E4E99B28E138E2DB5
85CDCCFBF2B46F01012CC94E2FB30C1E4411918E892630F2AD07EFF1919E9BA9
0194E24A69649F0DFD0046D2EED7AF90313E70594EB5C354023BFA07912408F1
72E39AFA29111A71BCFDDA20BCD6006B0309EF09261B7AE1C67BDE0D385104C7
C0730BEF94DF3D9BB2161C7346FAB11805152716480C0984BA13A8433ADBD629
229C446AF84A690F56A09A84EBB1CED5515C36F2798A89689BED966ADC9AC306
D01B6E24DBB2CFFBEF205FC921305B45B1B8FFDE2A09CF6301F485C8B7DC2E56
82DCE3042DC9767C407C0DB4D0FD1A4881A34FA0EEE7810D69F2428045CD609E
23CE37791362950FB435D1899A47E6E69EDB17BC08CA1B092D4F20BE1AA6BC4A
9DEAAB1B74EEB7B908245CDDB7A093C1AA307DECFFE53A1FE54984DB1360E320
862F2CA6E0258507C6D3DC1DB94102FB88F631211557D3A4F79A8E5FDE69B1F8
4E9FB2EDBFB4B8853524F58D4E1EB98EEBEF1B6C2D330B1CFC47ADE896255DE1
FFA8CC1A09D26342E89B9A39149E124C564C5251F613393060892D5A51B78BEB
3E44B78C50316C61B6FE484CE582EB7FBDC53D9427FE267051934E366F7C7B2C
ABD2C65921B5520C6F70C1B6E7AF8E11BA4798C1DD2EB7D4F962028061B71099
8E5EAE433D8A82CFB15547B339AF376E9341FEB9433AF21E8D84C50F75043419
1ECF16684180B65D9CD4C8CDC57A0BBC0598B3AB03652A6AA459894E119B5356
CED765F73F6935478D5133B9E761430A39CAB0DC109B02A80626A9ACD7856ECE
4D6569F5D1D918A30005C31F177816336B74AF8B9931BEC0CAC75380C714BFB1
BC100B05D19D7BCFB18CDAFB0310935E6C7EAC6B9A8134C4E8F4969C9268F7A2
C306146CEC5039310EF1F4ACEA1A40014BA27BD58490D24B7885E4084932266C
621A42B8A3139CE953DFA9687BC439A746147F456517EDB169157DAD9D8AE5D7
EF2661E266C5C812B03E2569E0F138C2D58E38EC9F0B780C298874616D09E399
6CBC81BF2A98EC7A9A573A79CCDB6327D0DD0F821F886FB4496ECCA78FD1A2BB
CBF0CA1255799DF587CE66F042F7A5179B55075FC89BDC3302D01D7138DA0828
4C8C35A8E26752CC2EA8F3AC2AC68E70946C3E8F46B9C2DF790F79269566BF9C
9A6E54EC87BAB7D34EF99AD642B738312FC6F300093EBC7669C934250A5CE240
A1171441D03FD75811F371B3895AA29DDC6A984C0E944711C77542A66680C933
9C7F2D5A30471C6693CEA46EF483D1046E1A9FE6EFFA27CA8C9ACE821AB92B0F
5D9DC9D0A91B93ED65003BD0C4D6608A6236426C7859229DB42614A54EBFB4DC
8097C0D9B0FB95A5A87CC9FD874959462454B5D439C456BB55FB81B09E3FC5B3
26D850A5DED9EC17E11FCFDC544B2885995B5EA543CD7E8E17FCB8B4ED57D7C6
1B0C70972F86F67336647589FB0EA874920BAFB89889071729076D755021533F
B886A9483867A5E3CB8A961CEB372CDE1EA852052312ED4484491532ECA79ABC
3EE60C00312665A8DF22AACCF0CBD84EFD9EC148AF4245BFE780E23BB321DA56
DBB416890407B39D34B68BB61B00B146D2E8F794C1546CEA6E037D7CD767AE50
843AA610583CC318C66E25ACE786FE7B406E5F1F232517AA77DD3875AF98FB1F
E6FDDB6323E23AA93628A6B5887CA2263BF3F5A696EE86831C603B0AB1442AFF
5FA6C191F7A83C324AF0629A269BC5E6602B15D0B8881E6F37D510D53C60AF3F
6159041212131F18BF75E71B5B6E7022B99AA55C94130C7A4AFC72E016B43A65
AA522E7EF3FC6134D5F715878D99130DE16A3ED40825C75260C7BA8A5A084766
1FEE0F6B8798F96EB458F2E1ECB61B6A2C9887A5D0541AC711EC68B79C2CA3C6
175D4A90F08ACA408540796646E0DAC8220792B3FEB61999671C1DFDFA0919F6
35FC2CB139762BA4D20490AAAB168B00EAE492D1EF564F9D4A077B526322E8A4
4E42451F694443F3C4E2FC9541C8344D3575996B2C50A6E3D62384F9ECC1679B
6514C107D7B3A613F7287269594865E9453E9B6EF227867D9CF9549B3B5E2A6A
F748308BAE99AE06106D90DE65FFC15685F8CF6DED13F50F406270CF873290E9
9A3BD506A8578376F788CFB65E372FC69FE9FD47150A0CC019FB7BF22A3B979B
EC26787BAB2D5F893EE00D41CB48E35CE9C08D0BDC30768CCB856C1CD7DE9E9C
0848692C38D1E3016BF4B4E37EE291081DE21AF12C1240C57540E73362D1F9A0
904081FD330AB6BC5E2CECD68B9981B2BEF1AED8D00A3AE7ED338B9E18F72045
7A4AB35C68C07865063A2AFC57C5F2062F908641625F5C1C0C6A364E3100A357
D10632538A2A0CDB6AD680DC773ACEE840A11C866CC356BFB3FEED65526A133B
8800E5D9734B24E017A2E354045A20128E1705A76CC4A6F6FABD063ACE8A01DC
45383306CED62F67716BDE9F3379CE9878306CD4905832A6D7971824A12374A0
CECCAC565C16B53C7C5E1A202F5363892C77B74A200C9DC2E2179D79AED00A2D
FDA9B22773F34FFE430F51DEC9D81F1FFDCCDD178A0CFDE0E7E46CF99B117B55
B3CA9B1F3952D101D6CE60D1A0A97C99EDB3FADF880821AF7D1CA940090DB589
20B9219284D91DA3BD4A61CB3BFD0D14217EB9F2CB21F0FF6087C7308074735E
E35C87F51AB5DDF2041BCC6827E45A0370F0F2D6FDB8A1FC5066E1BC3F1D7B12
B234F60899F20EFFA823A8ED6489E6A04A0110DE316A16B9A8A6E831396813D3
F551F18C2D70B0FBD115BE7EBCE816AB40D2ECDB17E15F2AD8D3BAD0B94BB1E9
E4397ED46382B7F8A62CF533D4295155716F96B850D6FF61144F6A9E51CC1B8A
86A35082D9ABEB8D2DA4B491536CEF9D1E9F4FD8C0003E6F23293B82B65EE0DC
F0830C02BEA2CAE21DFAAFB537D8D9F0A74B63C9D0A6A9BFAA49F87C4FC0A724
1808AB8A4938BFDD1B8644456D6323286CEB879B3BDB928141D3E5403F1CB5FD
773C8B9DD0042C5E51323CB81A8EDE313FDE90D905B45223A6504CA4D48826FA
E6756223F2FF5B5167ADA7EEF2D2CBFFA77D88827236660260C19CA8BAE9DBBC
7A911F54C201E4F627816CFED662D19C21824CCDB8F71DD18800B7E40E164074
33FC9A216DC7AFCE1C5C7F7EBB14725E4813E05782683C877C7EC4C86D6FD378
06CD3E28E86F10868948EE507B47172D7B52B09828010DB7975266138B7C5168
19F07C1F01EE32CDCE87348E9A967B430996030C42BCB6B3794F51D6F7DBCCB9
A30006C7D60C7E1AA2761AF25BD01C501409DC094980FE3A0D2A24B429285A06
EBEA61BB134055B25332C4F2AFCD776ED2ABDCE78D2BDC07CED874A173236473
98EE737ED7C6090E857AB029E6C75123998FC42D3E0C3F20960FE90B3CC6EFBA
5BE1F043F38C1E3B3CB2173152213DF78D7C0934B29652E763300876BB073367
A61A91B741B3CC4B68E496316C1FCC57968F790C5E7948B72C4AEBA496FEA882
575B6426A82F101D8FEB1CBF633184CB857E6D5AB42F92904B4D0DA750DFF2A8
3A30B03BC1DB36EF6FAC16F69FC8885EAD2CAB2644F1E25DF5F6EF5B5ED1E80B
82B3BB7F5B0B954E7078DE3E31D8AE65F9EA55FD147FA2DB2E8385C7B35F69B7
D06F576D7570D2B23AC1D7040992123A276F3483AB90D7EB79A87E6467D40C46
F878C63E035056CDBBB9F4DB89659D42B100853BCBD4D0A15071AAF8079B7768
5637DDE51E631007A29FAC4FC89EC53A42AA58F08999C1DDDC1F129EF7813073
EF9409838CD519B1F9384DAB415A394588881EF3502D2588589B5ADD4C1F23B1
6A9440ADF2974910C58F6BB26C4F58D573E5546629028DCA3154FD567040DCD5
C54B9234618410808685806BDBC524F3914FB3F945E0A8B3D0BA3DB62D680AE9
DF1C22D1E205B546D86FFB6D567AEF67B112126E2ACF3642047B54B09D3B31DF
2790637E4375815EA4ABE99BE732D6518A5B8365DB72AEC255D01E5F51974F8B
80E5501D8F33616769788FE84E1E85CFE56E137BA47C2A14D106F554978FC07A
154765411925D03D58A22DCD2AEF5406DF46611E216F8B9161510B36B230EF3E
93590FA686661BC2390E19CD3DEE77F3538ABB1119F13CDF297EBD29C3DD1888
F0FE99AD7ADAD0922C1BEAAAD9B337968A02FCA0132E033BED6E64D0BD1E9C51
FE0264A18B16E899EAB7FB6A5D283005D97035874D2B9AFD4D3F29B4B1E6EDE3
0FB077310016F5279CC754F3D13AD666CBA8F8C56E27E4466907B099BEC7CD38
699015DDFA5E32143ACCD729EE43B417EFAC4D403595265F0306D9CB3B26CB5F
05EC5FBA7C19AAC361613A028572D68AB9D20F3ED4130D20DB5FB364F7BD728B
86D3BBE1E37BC2104E797474023611FAD7AC43A659829BCD60A999E9F3E78F64
80C3C8B6297958A634242E698BAEE3C5CAC2DDB333270F9AEB92A892D0578C34
519695EAD030B18D2B1B928D2CB8CAF6B4484B03FB878D974AD04A770977FBB2
C31C4F8FF8BB1E7DF55CBD0EA7805A438AAB424675C45984BC321B8331096342
44037384B36372980DE4F1819DC2B4F825D7F6AF5BA3889A9481A39115215105
5D2B2B9DAAA7D85A7F1D36345F3BC5A90CCE79572D44A07DB50823C01E2F535D
FC2C0655A9A103406D8CCCF97174ABCF4EBF022831694B2773BA052B475D09EB
09469D2BB86F7BC232B842C924ADC1B1AC7AAE6732DAC6E6E6F989D279899F03
7BCBD7DF2830E4F2AC7BC9A0512C5598CD6A8558B8C483AAE9A856CB690E4D9D
6B4452C138A84B53712BD7B639625938CDB360066803092C41828FDFFC40EC76
529B3017997B118F9C0019B318CD3A83CB0A1E8891BE5F6A0C940C93A5B74FF6
4283F15EAA51DF4C74CBB662283EA2CABC19388DDF3C5B474F5374D80D469AED
90BA08D8A72E3547B40BF4ADAD86EF5BEE825C3F850B6EE405BD38D761485512
1FEEDC70965D0185F5E174F0758420612108EA4A58025B1F47E53E0B124A48CB
687FEC13BC7E48802CC39BE1302FEBB6C5A7E2509195211FF1A494D7743D2BCD
9E84D94956A1404882E6A29731FFADE7B187078C481987BA74CE27B2C4557D4B
04E7F771105122A7F30165F29EBD4570C70F7860B7D7E3F1E81AEFECB5313C2C
C1E66069D56F6579693CB65053BF56062972DE5B56E950AD3B58BA187935BBC3
7DCC97D12D866DDBB2E9D6B02D4ED0A53C6BA6B301D3F42EEDB6BED24CEA54F2
A86A1887361F7897A2D28A562A935226FF823955C3AEC37426299AD32E960DE2
CF2E3C9CA94D43E219F06892F0F79B02434ACE821D263606A374B64A01E25C9C
7B71D4347CD5D07A9411B6E88C18CFD9B234CF2F2D603D0260B53225714419B8
C988456CCC24B81FAD59AD71A3EA68BA6A9A900EA9398CFF7BF2CB6AB91D17C5
793A8F9EDC7858C953AA3EA5788239D1FD4176B9C310D775443680BD38AACCAE
08206EABF5E61E8EB6B71AA4B19F8037836D8D8AE278B7171B945C5AEDEBD3D0
8153CA578EAF17D2B2A7B7B9AA763F56FFFFE98E8B960C5B942238491264EA29
AB731DEEDBE78843300158908F77C0AC759565A2314109D6F3AB7D037E509C5D
A4A954235A57F0F59EDB31F78C17CB202849141A1F5FC0C086DF025BD411A9D6
5745FCE585256923F98A70DE5036BD9C54DEDA6D88F609B0AA79104E10420C3F
67E491EA298A68097564A90A2DA6A2A2574BF892347DEE8E7A09633AF7B2E1BF
75521FD6C2925E38CBE6CCA897724AE8F908EF485539C45C6CF62652F79150A2
D35BD4580DAC8DFCB09C9B2F0F3258476531B36AC6458551956CA08156AF9C33
D3F197E87AB3C26371305DCF1687976964235049BD3E3CE70137A7B7FA82E8E1
5F366CE98A40838258D452E731374A7FA2B08ABBB932D5E6A03F957B7C64E89B
B59C4ADF07B4FA90460372E170BB98B788972C8F37277FC53686C2D27FFEB476
65EED274860C3BF880DC2F6C80CEC4A92BF9FA09EF0F76FAF0533551DD2C8C2B
DDCB8A5F93239B9DB45E600F1C9F40AFDFDFE2E7C19B6D1E0F9382BEA9878AEF
1CF8DB5AA29D60B224C9B8872CD9E55B2E3AE3BD97E3D9D52215AA05E690FAA7
3EC216783CC4F106FDA563F8DBA452AD22FF83BD861FCD07E1302D6A3AC105F2
8EE6A2CFEAFA21AE6C39FDE40B9D08EF1ED2E41BDDA53210944053DAAB56B107
5A0C3832220752D104FA14EE869F741128948A218EDA86F30574CAEBB8230076
EF42FBA55397E2CC27E11DCFA24B47253A03A99363DD7EDDB8CF9B4CC3BF7B29
5FB8E3918CD673DC3B1859B9B68AC9C092EA151A6F3762571629775247A6AC65
DEFBCDBB07BE8D8CFF4DC312E6A454DCCDF83FF2BBC7B17EFC05DAD545F7DA47
1CC77A08633A53B62B760DF589FB2A1C0D78314EDF4F4361872DFA2C65EB44D5
CB662BE0B2839CEAC16D813DDFFF35ABD92E13ADF85FA7B62AFD4348B8790328
14BBABA742ECE84EC3C70C8281FEEDE824560FC686802E49EDA9528B7D8F8724
EADAB1EA2DE9F76DD4113C25175B14083CDDB3ABFE914A9AEED19BD22F6E09C4
198C7AE63EE63D34A6E5E6483031F98EF3E460553709C60CDF17E6D6E4E78CB9
D61F3FD30E78D7EE3049E2E505776D90A2D1A68B51C0B83856E9927C936DF456
4199A66A432D5FA8044190358D9A42B02D8D79081A54EF4F7251DCA4D16C84E0
3F2249F606EE1D4DCF4F15301A634A43CD2AA417331E4921194F6F9B939EE166
3FD02D1E1D74F22C4DA4143A4D5C2AD9BC331525A4BBB12EA7EC525CE0D7F6D7
02247E93CC25E56B176A0786B3CE890314191082273187F24F9D209D78E0A2FD
3FA71C28EDFC157CC5F6750F1A32DD6B38F76BBFAA9AB9E3FDBE3B65729C39A7
D5C90614F22E02626ABD343F3AC0A9698AE84CBA2D8F5378FA26179EA32176F2
464A2652C19C8D31C9300E613650121894B9D280C4F16906654393ECB9D74206
B1466753DCA4A6667BB22C841A91A8AC118812C9BB0FB24D2166D5DDD4EAE075
395D7BE3CB0DFED4D966B2FD281DDA37184E620C8C9F2834C6AC70503BFBF3F5
EDD60A8269CE7950969557336AC8DB3B61E01D64D56E8C4CBB401937D3114220
AD0792429566BFF55537F41DC5950A76B816F8896C4BB18C575AADC6F5886763
3981828EC2EEBBC3928390F72AB65858B8AA6F0EDD3A3763F5A8F68A0B93B9AD
CD647D79A3E56C4B5AB275FD52B825F9C86582DEA06C1FBCEDF42069D00CFE14
02347AA07C49D2672C513510C5F90752F7DD417E32DD6EDD1689FD3081EF84E7
86D3F04F8724EC003F8E8C117DCC0D93D513E04AFD9BECE706135D9789ED8296
F3959B3D87FE3E4E2B176AF68025E0C72F52165A0DF06D6A2ECBFB29FE4D5CC6
EE8458FEA2FE94385B2AF841D9A755FBACF6167862A987D153AEFF6650578358
B43FB420AC4CFF68E997B6F7BEF0C52DB9469CFC0E9E9A6D7958D9C8465C0AD1
28085AE31D620480D82B5151EABE7353E18FF6B1523DB565BBC3A1EE19170598
C4E94B5A82490F5F3EDCCDA8B1329836CC6136E0B2DC8292E36DC444F34DBF0A
476985495B8E94E473052F20C5E417A6AFF317746B50613961F9E542A99E1E9E
AB27BEF2BCF74FB29855ABBE60E7A2F5DC169BF13C56D9D08860763C7F8F92DE
AB54453E6A4C7B7F667C14A284047744C14EDA3CFE3DC73BCCC0F2F81D7ACBBA
A1B71056D018CA5CDFEA1929E0FD99044E1B7AFA7834A95FE1307D53A8436600
3FBA0A0255ABDEB555EE5EA7AD4D7782A8387E49B8F03ADA7C7CA74633545ACC
6E1B0078A6D40CF7C7D8E436EE1C70047BA88646BAA9D6F0E16636DA27AB6AA1
6C638A6B48382CCDFFEDE240D483420C8089E81DFB3BE958C865B2B9A0705095
755901A327881880298D9DB49E020D5A7E6290AB1C4B10165DE8C3E9109949A8
FC60CB1B458121246F0C2147B13D704C0067DE90B53D9163DE8672BB96AF649E
3CC9D18701E91F5A47FF6E933E21F0F0F9F31D06A6F3355819580C478B6E2A50
9CED4243271F069DF61D27D3FE8CBB25636F48E6A41F205D04A802E45FD0239F
0F41E86F2D4EEB998520A57985CEEF4463EC7CD398769ACE9F56B1616DF4B6EC
47260A1A82EDC3B258C45EE70F2575FE3A0DEF48E5C9008EEA4F990890CFA24E
B5BA14B6722F4521E7C552BCB2882C53BDE88CC55844F1A036864BE76727743F
9266BFA212BD428B67BDB8FA30947DAF090BF54FD4E7B01311521458871B0C8B
D1AAA6452B05A9E0A4D4AC85DCAD1DCD36CB4D6288560DD839B975287260E0FA
E00E1369F7ABE64B951812C84BC29D13B78FA281C6953833F378FA3D5B296449
28DA32EAD64629BDED7F973655A8047BAA8166A39AD81188A0BCDB316CE04AB4
08327D5BED24A373E6CD0A8650EDD6F01D290275630A7BA34D7C65622708FB34
3B1EFDD4C09FFC7E49DB8929F2E3891248D81727E4DDB392685584B5BDC9308F
35A246EFDDB2CDEB75F63F693DCA492BCBB376A278F2D4AE601E817965E370A6
CE358A3A3368746A027350A9FBF947BB7C46F0C949D8A718026FA6E3BFA81B90
3519E95194C314334242A37FE3E0F8CC792879EBA47B6EF16E2C6DA9D1EB555D
555A07564A9D3C2275458700FD01CB5E99962B8E8CC2D6A52E0210B9848E6FB9
1C81497FC1AA96D6B4817323D6A88E851D672F598789D1EE0B99F19132698163
478C02F72EBB0DDC10C55C02FB02663AA47E2BDC5A51A03F48BD32FA0B0816A0
C7C6B4E3C8CF98D1B82FD0AA19633433CAC268C6BB20D3A288E01E2B9173557B
D09FD610F8281F6F34EE241674A3EE2645DA90652D589681C60C4FCC6A8AE100
116920383B0A69281E3DD8A266D484D28CC30F9DC21D974400A8C2642147D4B6
52A8F1A7E0B77D82D6A36B6B588ED0ED38C61CDD2A8431D15BFD53F1FA3B8DF5
3EE8E41302E597B15C2F640CA86F2917456CF5D301929BE09F85FBEE99D21B51
2779E121066B46DF8C2DC29BBFD9378D8E898275EEB2B9BB17486D50FF253FF6
7EC9FCE378C4940303BBD456FD31D028BBB565B96FD4E4D1FF377A5AD37C15A6
173CCBB15CFD2FD66605EB29C5526F99362C7693B01E7ECF132C62BDF74FFEA4
B0CF559A079F2FF1C3615FD8AF94F0747C51AF4683EDF97728F3068203896C93
1C86081B9870A584F81C6C24126DD123FAB23AA37B36092D3F6CE83BE0B858CE
E312A4C003B01CB922571B8E5E7DDA3913705D4DE85889C1086133C916B97604
9158408EFBBC55FA1B1F3F3E031B7169E8089525CECD505DC35CB17B6D8F433F
9402B197152704622AA4BA96347B69E844752017BD9301866119490253B6CDC9
7E1CC04D2640E97679ACEA830AB447B3B980521CA52FDCB634318CACBF994B41
4731F0AA40D28BE3700953D590A62AD8AF0F977CD9FC6A5B91EA844AA2981BA2
64E7B739C4088A25F551F578189A3285E5F32C9C8A8FA9E7F90D27E38DA7BAE3
3901AF57C7DB9106933246B30E960A439F315C4093F4AA8854274B18E9808EF2
FE36B36F9968B5CF9FDBFA11DCA0E08D087C4D099838554A169249B307AD318F
9745E6A9DB8D45F1EBAD4CAC35152F1EE78072533F8900CC3A1869BE48305CFA
07531605C233BD19F3DDC54F3DA89A38A4C935C8D023CEA0AA6B857291BCDA9B
6705F0B062A78EFC65E27CF5C83361C2AC17638689E052523D7558A09FE3BDAB
6A282D97A07C671850972D3CD9AA74EE5B605950611393C08541403FE386DFAC
2247BE094A885352C70B1CECF2F9DCA91DD007AC7D759CE74D6A9F75B373FC70
31B45B179B10EA85E741412DF41F4C59FEB8AEF11EC7D1484A695673D7CEE75B
91B36DB3081871CDB3987169479C468004344921545DD99DB567D5486DF8C298
64621BB2A03883BC623D906EC7632CB075B9D013C9266B223C04E45A07BFFBF0
CCA7BF4BADB8D4AE414A1410886EFF8D56DB118E81068DBF528C83F702F2EDF4
E45D0FEB7FD43B1BCCBF20560D772C14FED32A6D10966242774A0E978AD35C01
AAFB04FBDC7B4B8770D3E62C7EEA9759D337AA2628F08079CB5D0CE2CEAF2D85
E987DD9FBA00895D87DC834505C606643E0ED45C2BCCA0E3448730FC94AF580D
C139ADC11FA69DDC5020CC3C14EACE61BCE6EC7A9E3B71DA8E024D71908160B1
EE7C648F246AA8FB60C78AC2398C16112776678BB400C75DE3A3E70D68714FFD
8BFD9E00BA27005CD6FDE60CC49B767DD3BF6BA86CC368E9D29C6BEDD2A467C5
8639DC0E0728CAFFE3C5B6A3B3FFACED0E119E5ACD18F96868A8BCC914FA5EB8
2DFB0B03138E86C15426E4FA49EB9622E45801FF0A29945D6FC7A2D65314D2BB
69D35F3F089F755BA04D5D03A83FE10DC51DA0C4BD0F9DFA45413DB1BCC3DA8F
5A3D194C1BA4490251325AA04438BC14D47CD354A980A539A617ACB9C702EADB
545806ED3373D16487801F7A6CFE211D8F914B49D4602BB869D5A85CE51EDC81
601C6FCD650275C9828C9B2131051DBED189118B9279A11243BF04609FBE1E06
9C0B0ABC6B5C2A2B08E8F5AE4C1E037041529A9E53CF6211D6F89B3F9D78E0A2
FD3FA71C28EDFC157DF84D2F45B211A00225A607A5E867D601C60088FAF1AE5D
D970FD1BAFA2CFDE8A20546520EF3367BEBCD43247960877DEC27C2DA43A8176
62FDF1896DB204DCF51404875DA9CBAF21DC1BFC18242EEBA6A5AE45421B52AA
31DA19DA81D0885196DDE3331E23EDE760BBEA210077CADB81C773C3EC8920EF
E16FE5C7A72657A80F1CFB288E5E944D65E08722DCE6A5762EDB87EA4AD820C3
5920172BC16F63F51819C4206CB45D52E88EB1C042E28A6DFC1C6D16681FB947
7E2A1243CB87523D2492EBC0F85F5DF63C333529F06FDFCA1636023C3B45D998
37E560B854446966D0F4316983578CC350251B4474B677CEB6C248127A35AA5C
7691B72AD442BDDAD18F30DB190E4D0046924EAC9BDEC7AD1230772D7B98333D
5398A82465238D57CC64D9EE4D3417DD8BA249945228E14A389F089207FFBD60
3600E77410A768936DBB1162F16ABBA50F261D5685560A2465A0565E91E89D13
35338DDC277E410104CC34ECC71B411C533A5CC6E235B63CEF024C8BA29293B6
34CCD345102C54FE2208132979EF8740F922F120AD44F28BA8080801F9BC7611
DCF9D6AA4A8651177CB856C986119738E420E03ED77D9824DAA20B84FAA9A2DD
D4158E9AF332256FCB3EA78A9EB74B4B091BB5B674B00964CC2272497284B49F
D0B1A273C1EDA6B778AF995CC45FDBC6DE448491EE057D1A0892D6FC840E3AC7
988F2569B887412982ED98260DB84337892A232A3A1E688B8068D1DB3717525B
37D33DC7D4DCE62BC5140AB590C15346B95A72B52D8380C5112F4CBCCB78C3DF
9F8D82D9EF2CD2E03261159C7F50054928B9493CFB72DA0F5B5B75A7E3C6A182
18DF587BD534F0297E3615F4E68DB6BD2AE92B0B1D5F1E1C12B0E61751FE10EF
24A0AD0FF9FED81C2B83BB3238BC779091D87E5D195DBD7CFB9AD96E1004F968
AF583ECCBE6FE0329A031820D4D1DA9D11F02ADA84BC6E6DA0AA29EA8B96B98E
9CAC0F97387B731F438F86AA00411D4359B3AC5E1A129D34E4E1DB2ADED17246
920EC84462A1C4A7008885277DF6688E3873FBC7A10EF4BD172958717963AFA5
FCC1C753E473E21EB8BE0C7C96BC7BD5C0274440824A95B61CA0427E6CFCBC31
3ED9F5F9B0D028528F61F0B77F668BC7CD4399F08141D19BC64AF0B2552C97BF
BD1C6C0062488763FDB07939C47EB3D323D3C90009A4366F34513C6FDB2A0232
D1BAFFEA22CD6D7EAC386165819C19C75470FB635CB7271D8C8FE3DECE61CE27
31FDDF7FCF2AEF7CC2B1EE7095F485BCE6F793CC26242D918F052AA2F06CF217
8D997C4BAE6D8646785C0C82A208F4F8F34A3DA698A69BA804B9A8B27DF80902
AAFD2B6018DD0680B43A5AE7900B43027FE37891837B822BC091A27912F60DE0
2E09F6EDD7742C73BE07D03DAA4EE95D353CDED25EAEF73162A697698F8925BE
31F7E98BA78C2B52607F5AD63067BF47432AF95BE8E7504AA1542D7B23D36C6B
AA8338AC2D98DE543DC31B759E557505A1366EEAC1142E6E43E7C50DD0AF354C
ACDD111DFAF08A68119DC69C2A9360CA05073141CE21883E3595088CEABFB137
634D2AE8694C53BEEBDD14126B4825CF63C13B40CE21656E37A0FCB6836AAAC0
7BCE893A76FC1FA1CABA526EE65F6439F9FA6F27F763634C662A001B2D429D90
F2A70FB18CAF8575273D16EBC3E54475416262747ACFFD9C16129FB088DDCB10
080AEA9DA70289ECDB306F226579871CC67279A95F558EB0BA035576072FF7F7
722EB48E8F701C11FFD1B7F263ACEA49BAB119C6057DBFC2B0085C818FDDA774
EBDBE7A95500883E675C5C28DB99242A8330E9DDAED388DB7A0B4FA03C84CA36
F6027A26FF421BFCE5DAB2D853767FE8A7418038277FAD0E908C48A1B8FD98E4
EA36D07A87F9D6C0E5D31A2BB9B1494A567EB5016EA36C45F006BF7BECD97F89
0B6847370B5BC9EA4EA774B0595D87C2F5FEDBB500ED2A188680E41CEE552DF5
5A235EA7E738E9BFC10DD4C2B6ABDF8794929B68C055789F3E9C32180B57AE8E
CA4C6DA654AA4124D577D774A217D4897A261017117D7C5C55AAEF32B582FE54
F0B93A85F0DFC1C267798F5718CE4ABFBFA159B07ED5C93D976CCAD20691B072
DD49D3965FD79D8348CE3C1F8B633847DE60058E645058E425653878A1F10CC1
C84D2B69E1136A43B9372388E591DDE333E185F4E23E0A66DDD15BDED1FAC380
B91F8DE0F875032BC8A1930CA75318F382399E28AB06FCF0065DE36F91B4DBF1
2F6C352FA5F0492B73CCD90086FDAA14AE0CFC2742A66EF2BBB6B29D16487C3C
FA6F892AF5C05879B5224D3BB7D31681D75354427E16368E1BF924A8A0748B40
5513A645769B48F4B3C4262F57BB6A235DE12B38D5DABBD8DD0F6F9FD27FDA3B
150A099993B56B83709540C46BDA6AAC09689487F5E0EB021CADA860F83B7338
75079EFB568ABD139F70C1EA8869611D9D4D5CBCD692988A989C16915E134A47
A4A117A55B66ADF5E53F82A191848F9C630F52EB497E89B5F145D01D56694106
9B76780164C5A1F030379CC9E763CF518CF9E2DD473EF2D166BA507A1EDB1316
16EFCF91246FC75DE3D8AFCB7CA1B7CA84EEF0FAEB46F0B4B88192BB6AB1758B
6F406C357F05A6BFEAAEAC4737AB470623102FD547652082269DEB7CCFC1C840
AB18CB9C2773ABC9DD5B1A5F83AF6A90C0313FC09C2F4991EDD9FDFDB76A9F08
5962FE7F1251D652C1E371D57B511B52A4DB8F69D76C3BBB447074D1103036B6
95EDB12D5762D8075F69A145829864608FB4D78854124B117B2F35A1E2F724B9
928D3272F528B238359944962E09541FBB7A00956D1ACA7D8C2350B454C620B1
E6D5B8288CA707E7FA2C69204A46083988A52547BF7B3C89184B4B6AA619D660
B1402EE393F12610C83BFF918FC60843D1751DD0FB67FF10DD87E3187B485D84
58FF1D6A46682D801AAE769BE7F49BD6526B9B1584A4711E28698C37F1DF9A09
03B2FE9462811FB9AB1961065826D34C38C598D8626BFED7CB672F132E065C48
463D49DBB6803FD753A9E426992ED6BC8BEFEEAD4ADA8477F6552EEE7B621ADF
DE8A66A223AD7465B8FE6E531D9770EC0ED49AA31FA3F91F3F32707774DB00EB
977C5EFF7AFE7DC3807891D039AECEAC3F500A09579E6604D10675F1D60FCFB1
B6D26AA24377760FEA6FEE94FB119E8EB366AA299FC67178BBC57EB673F38730
E2C28D89F1B4B8DD91CB69558534CCE31AE7E157D0B060877F9FFCC4844A5984
1C7C7682105E23A374BCA91885E744912DF3620A245C8A5B229AD308A71FA00E
007F6BFBF96C927E23E338A655247C509A950BD2C3ACCFCBCF71FAD299F22A14
34E7D661083C7F8D02F91CCD580EA19FC26EB49BE412452247B0D8CDAD32D698
2637028A7DB25BE15F0AB1195D2F25778C99A04E82B1BE8D3870F6E3002F6E79
164A87AB4CED4A848913531321E4CCF342930683CE8B995EEB19420CEE8E6B3A
012AF00EF8A7E879A61719EA286FE90C2E836AC107BC883A33507560FEC3ED72
D91546DA4EFC75CB69B897C9EA83852D31F31DB5D0DAA584E4FBE6EDDFA3B58A
343725C742A8ADB8E2490D6B3B48CCFAFD2392C817B8F7FA666FBE36129A3641
9CD98EC0DD45A62C8B6CD6D07686293565232BE739AF0B70E5046A4A17B5C3E9
DAF063B335EECF830F146463EE85354BAF0C4AFBAE8CFD73A596F7C7AF437B8A
D4F2F5AB3DA5462EA74965A151E84283C2FFC9FBA8B7F9D8DA8836A078A4716A
24CDF975CC7EA03D80D1B3F78C5A27B19C016CCCF8AE794B156F8A765F5298B1
2F090260981F6C38AC8D43CDB3A383FE182EE89A49C28C2D635A298D6451C6B3
D02964A9D8352191AFBB572C2D61BFCA954964BD918A9DB9077118A042EB52EB
7800276E7502DEE57228948FA48884514D67EDFE7911E4EEE0C0AD432443B8B6
36C43D2B50F1EFE12D2352A8DFDBEB066F94C0F37AACAE40009D0682CAF5DB88
E408B799859A65C143CF499E5E03218E29844B569E2EBD6271DBA6A5B619FDD5
8DB3FD8695CC7E4D624573A635B65951DC366F76FC5B4C11DFDE03CCC5709F6D
806CFFFDB6FDF9361520D4422239A888B8FC65FD9DEFC68C0C2B37B06923F120
D2DD250D693391DEA7CB26D4A418E48A2989167B7DCE22F1803545AED50CDFCF
7246DBA338D269EDA4D6177AD9173235023D5E0F563059F9959F021413C8DC61
3D035BF22544BC8487EAEB01B65023A6FD20406E7E21859EBAA5AC022E22AD61
2B2F013E31B97F10172423BF5A5407F54179190726592F5D4BCE6738CC357F0E
B6F73D82D736703874D4991EFD61104D18E85A53B73A1FA96E48942DB6A0146A
B08A3DFE98951927F9C3A83202250796C59F8E61D57DE5ACECFAE9F3CD33E155
543275D8C75FFBFE827E47FEB12D4C3841165CE7E2B5F9CD05544030F7BD81F4
954E3E9F458653B6CA43CE1F9164BB0FE39FBDAB233679C8C3675A673E6E6554
D774D715491E2407ED9F8154824B719C8B575FD784DA7688FA287F7069D4808C
D9D7C18DD6A189304A5B5BD93348951B354102F98A86E317AAC4CEB41D8964D4
FCB5E4DD511B6A9D5A0C7973AE8E183D32A58D3C67AD87A413F6D9746B6BCFE2
EDBF4A89C4EE9C0C48A72985276AE70079BAA0ABCC95DAAFA46637704C683E6C
590BF2EF885BE65A9F57662C7908E0A47D4C92EC61C5342099C27D93A79D9C9F
278146FCE5B34B8CBD7B6D29896E8D1807150C2282F119071A2E23A9B9F38145
F1DACAB2F44A3C82D04E639C8A3488DA9CA87BC9F910524EEE46F14F2E5DDB7C
197D9B33CDA2861D1EFC1616B16091EDAC559A220F29084DD86CD873EA8E7DF0
9B18829BE2523F89F383D270C1312811B1D3A29D3668F7FBE41F4EF6A81C0F9E
BF9A4CF024C1D10194D7EF3EE7745D6460F94622AC516E9D777D6C65386C7E60
7E26481C02A184638BF92CBA44AD89CFE59081E3EB0AAAA7D87D8EAC69E3C8B7
7D780EF389B8367EC78E45BBE693904A72A20A1F7C70C68627A5356470BDE95B
95F19198D5EE9A7DB22D584FC7B6F9C35C47D639FA4FE1D6B6C4C7A6F71524A3
FC7E01BA3CCCB302F2F1DA611EED5AE7BA60B9974A0A2C7449C76238BAD444D1
29DD1673129711D3BA7C52C08E87AF023C833F2E36C296B4AF16F3A921AD5E65
45C414346FBDCCF69F29187B325AB3AC6F537AA03AB6FD0D5BF4C9BC3213A5BA
19D27374316C27000C17941474D1D90B1B2F2A74D00F0E54CD8D56C87234D559
4796765CBDDE8E2C7662221E2CBE5FDB8E63580BC6F3F69F041C7D00EE39ABE1
F010512D099E6991007574B51F1790EA75B813598D80DF5253EA093841444545
D7177A3F0A1E7CEBBF7EFA1DE6F11F14A2DAF8FD6991020450E767F2BAE509BE
09CD82AC7E689BA197B396CD462AFEF719B98A3B71E2A4EE7E20EF246C6E0A3C
23DF8013D65769CAF3BDB6BAA50BABE2CB47D7E251C0724CB34C69B407CEEF63
0162F27380860A97C486B629AA0476D37F812FED3DDD7CAA05A8DD97A96471E4
C723CBB45F0FADA7995818043B761F41DA28411430C42A3D1366F57F0124EE7C
8370B7A96738A152186EF35D59BB974980F8D0478935C577AACE253B118E0F3F
CD26977D99755C786C272911BE7935015193246FBFDAB3ED718CC8AFFDE2BAAB
56D5937DAAC2D54DD4EDC963927D1BA8B8233AC009EC59392B7E3FD59E27B303
7FD1752DF6AF33E5A6722A26ABF5A82FFC70D5688069D3A61089A2911C7D6C56
6DF75C3281ACDC131428CBE0BE100FC2D83D762E93668C0619E6C0CB4C42F5F1
0BEDDA8DE50A06B0937C0610026DFD8ADD7A7102DAFDD18952F92018C388553C
4C1DC0A7037B5A91A910B6AC680A894F4CD10296D1AB863C95186206F7453C17
4D514A9C4125B5A1A79E3CE4232E4A1335F1966DE7C21DF3510978F78875D415
94E6DDDE2D44C7385CC38494DCD832CC94C08F0492155ADDA8E704EC5CFDF86D
3B00CA7934C296F9D359945ACDCC8DA70D5339C919D9954FE91E079DCBA8B8FA
04C041A0E29BAC5703A83039CA96985A76B61AAE665224EDE522641BB0C9DC62
EE166334B9919AD6EF2876532B64A356B32A047802C9BDEE75029E991753E678
D013B8AEDF306CCF2727CAC4A13B4ACA339E375F376B7BA9CEE602E9075C5E50
9FBABC9016E62D7D5AC2A95EE29650B98ECF391A95DC4C962DF3F79C7E16FA46
3D1F514335FCE76315CA77389A431B2238DB083AAC5E39450EF20451EA02E057
2FA58CEACD61235271A975B0C11E533ACF0668F3288A152CF5343F52865C1827
BBD06810473DD85A580AE391C17BE4638F1B649958338E69CB56B870CDD727F0
B655F71017568EF083865FAFBB85EB69A6E26A45CE2C98622A6A385B447E164D
B7299AD6D1BAADEDE43E477FDB504AC6B808540C553DFF75F3A00495714800B3
06BD5DC235EDBFFDEE3E46DD584F04936B53C3C81CD9E76D9B6CCF78220F28E4
5A84B0FF35C585C18B19C61B51CA3E6C3AE72F666D681A4FA8B2477893175F30
08EEF551C2574B69A17F5C62AD9CA923E685213D53BFACB55EF49BE17964147B
02C4CA4F0806BA52F8A891A88B2F519575FD86F61DD7C7EE5F015B1BAE83E79E
3BB86BC0CFF599A80F5C4AA381B8581DF3F82578AC6FFC9216A06EBC754DE4C1
BE1E185A26488ED6138CF334D63A75CDA61370B656188C88BD1E7273E1A42F36
C0C6E0FB68F94CEBDA1CEB0CDCC489BCA1DBEA94AF6F37027434E22EC932CA5B
E3B470A5800B4FEDC4A99823CAFF87E567B96572BE6D9DA262C5151B948E529F
0C7A21052F1A28CE343530C96B7E92807415CC510ADEC7AFAEE3E54A00B1CF2E
9D4E9F057BA99AE776E482E332FC6F4EBD5E2952106E4600ED59E41847A2C431
ED3DEFC7267AD9DE87E23C236E70E1A6D7602606094B0C91DCA122F0BB3D4FA3
AA0CA96DA71466748187222315252264773FDAD954D114082DB6BC7FDAEB7C85
3A4B7B464A26A459F4A2593310245B1B9E7B8A0B7FF55338A74D2023B34333ED
B0DEE3ACD02BF724CCC2FCF1A0B58CB89C444F4564C1ECBC4CA3C544CFCA0D01
A294276F86BA1443F753A7BC8B7A60E9C5DC48A3DFFABC322A2A3F62BF60D6F2
439E2D50DCB82C026ADAA0169B6A38F6E8D65D483940C97544F888E9316A1381
F8185C146C3B2548A3817DB684926C2123318D4F634AEFAE03E5D4BE6B04697F
F3ED2A83E6E7875D6C2D53D4216E11F852EABDD845959D6C4CBC644B29781604
7EB63717E2C06056A800155E42E6B63290DABB71D4D1B394D7AE82EAE4C82760
C5849F6FC5FB394169622625F2493AD95E1A2BFFD0BB023BB23B95A95C52C138
94C9156315E5AFF47E4041A45DA7B0CABD8DE5F42B0018F834D058A09E910DF1
314D1B5A2E3CA886E10296CE26A4E176415F55FF32E4308FE22F0D0A45B8D17C
B74BDAA4BFF6DAB5380CBF6172F37B84598335AB3A61FB3C873145863BEC1B5E
8CAB530411E7B006480769434E9BF13F872380603A47CE5A30AE40FD497F4586
00B1A87AE31E65B7EFE7B1CB025613E53343001CDEFCD8F5E62795B990DB5F01
7A12825C0D642263A70EAA178D11BE7F34711A204432DA217576D9871A8E8784
028006F3F3248B5454ED6DC729CC5070524D1F1367E7D491B5803E4E32D24FDE
0B7C56732957AC35E56C635F6B316C147E4148F43F68B433E736D2E15CBE3A2C
9D93556A1DF4CEB57A1882F307F0EE099AF080659A1C90D89200DDB63772D73C
36E0280F8ACDDBDE5CD4F70A7A98F5267847CA1EA003CAAC24B337D6B2A8AA99
A53780AEAC7931FBA708E4052579960B3291B0BCB3D6138198E70881E7FA290C
6A3B164722FB8BD5CDC14E7E20CB3586C815A75E1C0585250D9F6F52025D82AD
E11AFF1EFF8F6FA46187E0BED9DB2F1525FF742755D9200C3C1FC2E172E0DCE6
76DAC7827316D2F90B3326C12523D372BEA69688A21D6EAF601ED4810A03B876
02F6FCDFB887A83C42C50F08E66B611F543149B7E31EC9602D4654DEB38E8E94
225D8F864E791EA6689395C19ED992688C38D5AB822DB77434BDC79A29F57E30
98ABC7EE49F007589A2A08E976226EA7F091A006D3E457F0FA404657430F1CEC
53881DF1B3457BD811E6152E7A6DA01FF8F441690E196B19402154F4AD4A1522
5015497AC2A59B07C199F94E3D08301AF343C837324B9EA595BAFFABFA38EAF5
3F517136457774C464F3D84202CD343788CC991B61ACB6AD7863E30EF2DEECFC
D5E0AF64571044339C2037CF6834EB429617C33666A20F94506F7AA03CEDE934
367F083F6561C939669E28B55BC3323D71FC7B4221C1A677B413EC24C29DA1F2
D33041FFA5D3B62F29CD0570748C3BBE64AC88813A2339892CF290B7D9CD73B2
B2A80AB7B924F1BEAB9F601CDA2C40EF93971D344A24F67D9508E4AC3D5068AA
B174E0965F73E7B3A5F532B99D116357AF029CBD77D99A1656CDB76C9282269F
570C0B57ED78FE33164934EAB70ED3852DB084C16B6097540C5C81A8CF53AD64
448E9130C01AB94B0657A5490D7BA7606326881C5A6CCAAC22D5454B2C1EB503
764C5B0691B761FE3254E951B3259B2EEB4FE37392533D3695FA6890A620DD86
3BD5364A28DE4283D9697AF2F4D165B73683B97280E3F8CE4547F56244DC6838
06DF7DE0E28FE4D056969AB8C04466F6B2323849E5A87116F694B78DE928155B
9D611E085902458C96E9107074347E144EBD38FF9C114D75E7B867C216989AFA
4EF66975C7C64CE5EC2AB958361D31BD648E1C0291A57F6AA25FF78D0E59C262
230123C5668C34A7178C9284E340D18BFB0BA4BEFE101D5BEA3B3CC5C384E1FF
F89E502CBB5561E9AF3C9B374D73F52611F17AAA550E93C8B39DEFE59FA506F8
812F8DA2BE72F0827246FCA44E4A772C5FDAAEFC70EA6D36AE941E3291793B66
598F7718C18CF6B0D1B1310C75AC850FB4C642FA3710C2C99051FDAA642A91F1
947AAB4A780D034BC00B16D7C4D77CA697B044812DAAEBBB8006F056F294A4A5
B77983DF1D1B3EBC3640262FBE15DEED450E81E397D0ABD05A9CB3E301CBB6E4
5FDA05D04DE260D94722956833588CADED91C5625989AFE8DD9E0B1844B116CE
5CE8DCF4C788F037BD3783D1E73023BB66A4AE15DC7959BB36A10B51E9638794
BEBDB65521D0010402575DAFFF833C4D59C1941E14E0BAECD4A9FBA8B9100A31
AD1DF7CE7CEDF45D8D75B8008CB234A10836AB34663A141DA69B46D41A04EDBD
E8A440911B183955048D808915D7BA588590785C36322BFE321C6361D12879D7
8AC6396BC3936BD40FF1476FF54922F2FD14A340951A0130FAB6CF0B56BB38CE
81015FEDF0CC3F7275F567D40E28BE131B0E4314D86EF0D6A8F840F462D9B2E8
C1F2B51F6DA60AD71029BDA0BE43A26E6F18EC0E9085AEA66291B62D69D698EE
B767B641BCC569A1EEF8A12E6263CE2C073CA42993FD8CECB8E7948261EFEC90
FFF20B1FE3119DA2CB9F6DAD1D6382F999E9F0692CB34C1344C7B86466716272
82A8947668FDF9CE6C611CD1BE1A3FF133DA6279F25F80B39F4A584B970D6156
292B8DB08399673F0DC75F1BDBE806E51B2946873E90D509B25853AB0F25FCA6
BB860E709684EA675A3C3C4F60A604BEF0EFF30EFE00E05C08AA50EABE80B564
D7AA72D05EAEE83D45EA12B8C2EBA316F10AFE920ABABE1FCB5723D66953BD9D
0A313F39A6A3DAAD30374F96FCEFB063F4E02A5A1B8F12733514B688408CA41A
769DABD9518E4DFEAB5DA339847235425AC5056E7AD9D54E4DD1BD7BEF204EEE
7DE594518B78765EE60502B5D4D8FC36D030FB2B0EFDD9A57200A82974EAF0D3
6C036B66FE05FF7E29BBBA2C52EE0385F33690BDADA2B0D538EA64AC7CB9682C
E60E17947E7E675D19901C7E8272CF0D458A8B0CF51077748D1F0A95AB030712
E24D053E101C9FD35AFEA96E669B1101E8644A4FA79BF0E2BE0D5D63D4C494AC
CCF815B9A464B3C0D47AECF229AA1EBC2E208024F3703B6B0716899B18263C29
2E1E8332654022615883F3B3D95ED3FBB8E563C2CC64E2DA3631AB809AE0FF99
F0DD777666B14EB7C80CEE58DB653AF6DEBC59D3AB82A2891C3C5224977B9464
55E674261A0932ECB029CC6CF4EB93729D362EF1C610E85FBBFC6151D81BE225
7C3E7C876E836A1E6009BE548E105149EB6052FA14D106E242C213CB237B187A
7B54F41B54433526B5BCF13ED43C4C3DD6C02669F517D7458EAA898572455534
CD8DCF13B125739FAB9FBEF8523676B7509EA7AD0D2111E3585BD961ACC52E50
F44E54C91326E481093C909067BED686BA113C18825686F9ED9588F06261AF3E
8D1343D17A35A511312DB573060A7E73001ABA76E395D789B19B969F25140187
92CA5E16B365ED83C24C44A68CC2E0C0821FA6C1C3A5B210E9C2146C0797AE35
5583D824B2BC3C6BBA9B877B857DA39049F5887F6C75EA22E2C1A23B0A23E741
9FD67B5E29F807987F3637173FA779ECF224B222F7278597CF205683610586A8
BEA497E867582A17B16335CEB85520A70B252F935F7CDFB69A1F8A67E1041C48
2B300306CB5E11A1DF57C36C6E9EA13C0560C3C8A14BF98C1530A3598F35E26F
2E8ED5D8A0B0A4EF950112B2A40681ED8E00E63D89CA32AE0687DC232178A07A
BFE12694DEB838C8B360EBFFB8D45798018A310214E9BEB7C62F58C1E729F224
EC05FB4EC009EF48E7E56CA2A9F84FDC460E352F0263ECE4B0148610E480FB16
13536FBB8EB7DE66C5F0C41B72060988FE907F39B32311E32A9B1946D8CACA5F
0DCD4EDF3A72A9A4A949376BC805CA2A372CF172D46B6B94412E7CF8B2C54489
E6D6A897790D5623EB7D6A90860842964426D9E506537B3F8B4366976D3F56E6
CF780B37CE39F605793D904FA4650A8AD23254FB4E9E9E4CE34660A7B6C08496
7A50FB5E53F0EA8ADEC17CF4BD5B6DCC5F7E835C3CE7D4454AAB910F223E3FD4
0709EACEB5AC116266894AFBA1C099D37DCC25C54AF0B2552C97BFBD1C6C0062
488763FDB07939C7885FD686DBF6C8D2BCA099078135FDF722D4C99AB28D06A0
A4080A732B877EA2DED6026CFA1807B087EAB33A3B2BFA56928987EB0BBAF4DC
72DA6B4EBF8B9D022DEDBC3DE44DD04F6367E04C3CBB3400BA3C1943B874CFB1
254F9A99F998AE7D06DE000B4293F4FCF1D78EFDE074FA6A057A6822533E61A4
C1E2E7B3AB456D19D9769EAB62AD01CA1E0C4F2554BD6F1F4C69E46C9C220B8A
6643077B74C1E100F1D9DD0E0ACD8468C5EEAB6B8AE5324CC077A3B24AEF2951
4FE023DB03883EB57564AEC4B94B42E8849A76945AE033F5D1C37EC63530A2EA
90F559625C437D4AB2016C4670C92D7236CD1D199C612555168BCFE359EEEA98
E07DFCAE1DA5FBE871D8035F777CF210384EFC671842C40D188F4E304C4610FA
7CCCF0512FDD24CB36B1F63F732A2D472C414FAC37B3A34E1E9C8CEF668572CF
91AC3CF6986C9F252363A207D88AB66A7C0DA4A116B14F03AB13D7E149FA176E
E68606F0B35312506C02F1A2826BBA36B4A8C4D61A96C406DF4CF3A843159D3B
AA527954C016D28FAA91548361B38A729CF1E6DF63A016E3F17980CE3D505216
E026DEA02B7D154B2882A031A276522741ACE718440F9AC620FFF89CFB7FCB19
55C7DC8933C690E226CCB41B71BF28FE6AA68AEFC449D6F2C5850581D95905FB
83958C19FE475DCA7075938672E207A41ED8B17A35CF2E4C380E50E1797F8558
26EAB926A054616AB45BAA486A85DBC2F45566226D9EA08B48360A2C205DED1E
30409EA873F16CF157EABB93758D7B49B76DB0ABB2C2646D3F2500142328D8D3
B40136F3CF6DB796FC6949F82AFF3FF151EDC1EF95339F55314E30DDEE869CFD
0E6BB75FD52D81EEB6FC227022120BEF4803811BEC75CB029A6DB10FCE7B5992
5A3F5FB7DB35B3D7944B49B6283A0129D49E7E9AFCA904B37EDB25A80BF2A041
0C67EDE128761D164A9843955BBFEC7213307B78378D8CAF1E08E1C53C079B8B
EAA3E0F907086AA23BCD6FAFB826793EBFED8F1CDA2D49D7672E195B09727629
C1A422D0405FB9B60B749DF353AFF70433732530AB1063F98984CC6C46F3E412
CAE11A023ED7D360444EDD72A0CC432E23DF81945A0E9729DF3EE2000E417BCD
E241F0C257CAB8981A6EA85C135F60246D47ECC90571044E7021EA984A40DAF7
FDF2FDF4017F94D9D89F1B6F249BCAAC5E185E4FFF0AF7FF5CCE31B93E4048CF
BFCDADF56B75CA51C950537F9643D44B6981772E8546A6D79EFC00389188E5C8
2D606AB2BCD7AB93A8795AA46773CFDEA40374D87CAB4A5DD8C92695818BA435
6E9666091CAEAC8D1832F2AD07EFF1919E9BA90194E24A69649F0DFD0046D39C
47645DD6E78973BF5EB3A43922976B876293A1ADECD08D35588B794EF9FE03CD
D26508432F9ACEEC0C86CA4D7F8BF0DECC07116A05B5D6D42730459DD44EB860
468A7C643142F5804346C1264135E15756B43D90E252FBBC1F618530BACF4716
5362C1E0F6B93CCEBD0545DD362FF49B08C9033A1E95F5F8A1717DBBA7AAA1EA
72855EB4ECF4832F29721F2965759EDA7ACC778D03F409DEB008EB2142A1B4DC
97D164780529938A4FA7BA0BACA855B706CFAD5EFC9D6CA122FB2077E554C9C8
4A1760A73FAC61EF6C050296ECF0188950E744AB53050CE216C0166D14BAC758
B30905B56CCEDE37F37167FBCFA2CC9AF077A23862B4ED64CD18471A49B62240
FEF22F4D82468BE65F424F267E9713229F7B3ABA30559D9E4B6B06AAF0053FF6
A81D815ABB1F31A89E1F1F3F3712315F712F719E2104FC38B591366950DCA065
662CFBC9594DDA8A2D0B424F25A1A8E0DC96E47F52F335D4EF5B45ED1A9CE37E
2A2A6FA2C2D8A082FB786FE87094992733E0E8E7B556BB4DD1B0EFDAF667A918
171169D8669AF155525E2C91A8525079B97D9FA6FE5B7DA4A263813F972B036B
CC08CCB25B2BADFDB659F305315BE273E5D52D4A69DAA10D9AC7B96C817AD352
B5C4397872ED1E0BA765B0309FE98988CAFF8DCCEB5A97352B6F2DC523CFE336
6996B02D210D844B1FA28AAAB93DC7557045787E987A0B316211C89EC7A8EC3A
02D70409252A8D4FA50EF1BEBA5095045ABA7952457E62E4081D591C36369479
139F23EB1F9D299353CDC99BA9CE2DA27F3D413173D9F296B3DD186F8C3F8658
C91B59C58B51B79E9588AFBB6A2D10D335B76934CAEC6AB8785BFB6A876FE189
F7500B393E531E77C5D38E2FA764893C50807D386C31A52984269355B641D8A0
414D327EB4BC88FA87B910008EA8FEC3E81B8D3532498E7875E1593E1DF8C371
9500A4C4A0951F09F5CDA85FDD822B626F0B4DF1B16AC3C8E46642D95E4D5E8D
E9927E16E5582217693A50FD1F5B7569629AF50EBCF7152E3715510FBF60F167
5356A9FECDA71F649EB3C250BFF809D81E427E3BF24E83613E8242308FE26F51
C5F52B538A85716A62F327A107BD87346338B9DB6F83FE557134C14144A554C6
2461266E19E262F020AC43AC01DB8BD67102E1322FD08D6A1AD08B87EDF29D57
6787EF5896E8747BD177565DB814951BE7CFE6591438894018072909D00732D7
1F63668F46B20EDCA647E66B811F82F08DFAE1979E9ADB992C57D4BC9FF7769E
0A6E389AD0B2A5D10CD4C41A40097EF750675B8D8743FC64B26BF9E44921A707
C2CF3EDBA686132F333DCAAE5B6CEB2B2A3C2A5085BB0E87DFD0B90AC4B62BB8
8965B8D22AB04A724DED273BA060E797C1BB765049E61C0B63D478DBD9D1F904
EB6959B1D3A39766501356651F2B690A9445963F346D0667986C994880FE8971
FC86F06FAA5E98124881CD477B308B5B7341714EB80B6C57DDB50EC74C20E497
DF8C5D90DF2EB6F0AC1521FBFD1538DDCF25F9748E9C7C49CDC758CA99C4B063
212655C879F6EB96BB55BF5157FD09085730695ADEFF8C47E610779597A25E67
8DB4EE7B616DD99080BF793667DE800E6DEB1FCFA76FEA448A60401A3B11DCA3
E9524EAAFAA83DDCD78D676E71B6C51A64A87FD82AC7FD782D6126DD787FEEBC
4A63D583CE7227EC10365966AF2C08726F27A20D095709F949F404909374B2CC
B0B57BA8F2F422BFF55CE7D534A2E4DC1BF74D5A454BF4485E2B7DC8C9A39E76
8F162336CEB7BE8A5C27AE952F4946D01DD1D65C1D50D6E1D486FB5FDBEE9826
DA01DD8FA5EC384E9B78FA5A7F6720D207815F79EEF626A126E8005FCA77ECB3
172F5199E5C54611D9D515EEBB7192C63D22D02BB2A5A2727BC0458997642898
4A7DFACBD3FE28A8903CB42EB0ECBEECE10F4D9FD0C5B9E9F3A14F9BFBA60CA6
556B0473D5BBC4C67C2D25384D8E7B9EB31D79E2C460742138982CEEB80F3AA6
BF99216652ACBD7F2F5349E857177D94A431C46347867CCB8E4EDFC64B532A24
C570498BBC81C4FBEB957EBC6BE93183DE178479FA333A00B88F0BA650AB274E
35E9F7715EE1E8617FC7BEC56879D91DADEAA25F850083BE6CC26AE7437664A2
7C1C6EC83AFCFCF697DCC8808A931CB62997E29B6877A1BD00BC1A7A9D57AEF1
E1DCCEEBAAE87CF5DEBCE7349981D834A1E8AB45FFE334532FFF6EE351252820
E234CA2EEEB4DBB360CA7518709F74BCB9FEE4077CC0C490F7C2A4855B442011
F240BB7390D79EB357A06CD67E2C5BD39E004F55F754A8E2469082BBCCC3E63B
027A4C3DF0C328E89C5355F29E7EE697BFFECCAE75C27AEA6C7B73B4B4E4A0DE
B874CDB1570739B1A1A213262E4D4AB784EDEA3CC6F0872C28108F7EBBF5BF77
0C0BA6C712287CC741D17C19DF574028247317FB22442B6DAAD517B60D75302E
7A8703A70517C9FE24A6930AC314870AC4D133C60D9CFAB56CE8F8D14472BA88
3831DE798AD51B71C2CEE666A5693C95962D6AC49F31A5D39135CC8D762C5E53
C23CCF67CA8BF1B1274494E363BF0890FF5C1FB5FC75FD528B2FC34AB914C268
C8874E34F01A8F3E17F33925DFE5F0CF45E34F3E676F57892E7B84E9F1842147
0D2F0274738CB7DB4E9A14291AF15CE3BBD6B3B90E59C99B4085E7065FB50E28
631D2A286B9862B0C69172A7B286134925909155C60AD3A77AEC843DC75C97EA
CBC20908E329F5DE8442FF13EBBD0D06D7E62CE534576EC62AE892310FD56056
AB112633DC84FB7743B5F73E9DD0B021F9ACD205A00D5C6228AA1D43F1C6F0E9
EA338B2E8A829D5D4EFFD8613B50B2DF38EEF34AD0B05A9F13D36244225B77A8
8166768942CF7E11D8AC59AE55F0F7DBAA322E1E5D976C33A4C1B9D5384F70AB
C8F9F74EC9689248EE97D7DC3783A048D871AC6F3464517ED20118D09F22813E
9A8F6B24CC94A37ED7FE37D7D03026506C2132A9A68ACF4E48AEA4E44DD23AD5
437110523A774873BFDB9AE479901957507D4B848A373D2FE906518513D56A96
586FFF4CDCB491617876DC12D9D703BBF1E814059F231CACE3B876EACEA2B463
B4F24C1D3D7510A603C11F295FAC3B649D8BEEE2DBF85283D1B3DD65CB510702
758F21F8DB9FABFFCDE8B4D3BF99190383F85FB9B692A0A29241EE13B4F6714D
41A2DE46FC28194AD2063A1D0C54EF86D11A29D25C36591746DD9783CE80D770
7A404B5B7F34AD778608F4CF9EDD7501A2AEE2F85AAF60771CDB854398BA98AF
AEC951690051A2662DBE19109D42CF3575A4130B81E97C2A9BC215A2E2A34BEB
5AC89CE072710DEF408694402960947DA3B6BF54DA82FFE0222F7AB0E97B3290
EDAED775EAB0D7D553F222A3B014EB44EE9624B0C96706BB7AE92041B78426E4
C7EDA2A77A7C129EE67D6D67C2BC96C880A6B435F850206D0AB69B74A7E9FD53
8C4338F8DE787EF2B604061C0118BEA317D3620FD9DDBF75FB63DB4ADBB1652A
3583ABE38CE55C584D2618007F4825DFDAA3116D2B7E450C8F7B16278DE567FB
37E8F702A228AEF49047078B06C8A968F278BA7BCA00EA900B2FCF2FC9ABBC03
23617AFE301047C9646BA848529E3D9DFFBC86682BAC2D53944F47E4D257CB17
98520F27F65D75B2E795E40A62C9EAC215ED0EEB650262CCC5BAD1744FCB6DB4
032EA0C0ECB7BBC044D8B0C662A0B19CE448D189FB99AF0D7FA4DA1316C3C527
9767142D132F62E0029C751A0D375757D95AE364394FC25E6E0D02C6840ECAA5
EB3D39A3B9FDEF15DA1F1505CDD37755796CD5F76FEA4D8AC7A08A586B816A9F
BE78FF96BF1E3CD52791A35F612F1A0E540B3911A7D28491883B928672AF8E70
6194412994A5A0298BEF561152F82FF64CD3298D11287B46482FBEAD4031D9AB
6265FB6BB647FD9FD95E0A2BC79B11AF3FD1E8FE988132C26317BF8119C2B534
65DABEDF733F2C517D970B01BF2FD7C2020471CDA35DFDD2FA7A020E5B8B0F4C
98521838E9ADF7C3C36287440EF39417ACBBED2D94330DDD281BB30948DBD034
3D9ADA66016E6C568B9C0A0C4A73C9437FCF888AA207280ABF9C548DDAE35A68
2EAD10C1D99B2680471B9EDD0A850116E26EA531F41239765F162569F759E2E9
BFBE93365ECD78C43550421105FAA095002A1B6F9E1EDA5968E8AB24C3D6AC15
F0910133FF54970B0B2828D6A49A483F12FB7EEAF84B0653BB219FD46A500D59
DE2D444FA841E3D5FB2C71551ACDC7BFAD39BAA064C76F7DFBFC81BA33216135
4388ADB955B7100B61C9B1CFBE3C570D55C2EB83534A831E763D21AB867EA05D
D684B8C37E970941603137502D8CEFE03BA888433F848BB7AD870BFF14F09E29
FF55CF49601F6CFCD15059F9661473B9CF3667B65D97DC0BB2D2EBEECED1837D
8F9A6060FBCB0459887F5FA0A17BD455B9D3B9F24E5778A398F32B4133E0477B
DB64A80A21E69FCFEB7D03A6D018A45D4A551AED7D8210FE30A07650344DAF45
4400977A70033A06C7F99F4EB76D8E3C834935B11031865F0A1F1E47B3B6FDB1
10BF8735228949D56D37400BAD10DD4CA2A07A3F257CC608F654D2A68FD43D6A
49F7C5D775E497B317E63079EFE8CD8C72FFB0FD5C7CC27570FE4D6E3B15D4DD
0AC7FCD56EFC7A4FBD31673A1B5AB0C935976DF92F0DBB45942A0CCDEF2DE9AF
986A04506C7688C165193C5B37C8DDFCB7894DD565CCF14E63BA539239EE59A1
4154475351D173F5BA4A61CEE351CC3A96D8DD6C6A2C7CBA399743D35021FDF6
14AC6428269496435EB3D073DD7BC4CC0DB2F0465C6D394DDC7892A2D7AC9930
3844F116B0E2F68451E784B02E7DBF8FA4C39099759D90A5F9FF2FF5D1EC2FCD
8DE2395CDBDEBC89F0609235B8A453811C114CC98D80B9624954AE633F774029
6453D1C98602B49E8C4B49AD69FC87B6BF3DA2DCC9EA10FF9704C129FE8E3257
7348B79C6FB2B8487C2466824C88E4E55B0311A72A0422C4FE3C2C988FF1D9B3
0BFE9C434A2389BA09463CAAB60919F86E45945390B365186C6B679920264BF1
58462764ECBF0942EEEB183CC715545FE7E43DCC5A1A5DAF10D47868E5D19E25
DFDDF4C26FAE59E80A5BE0AC79C0AE2CABA30F4E42D74236233A50F869DD889D
5463D7B2E522259DE368DAC70208BD3BA29FB3B01A65985854961562C172EDC5
C63183ED7169A5403FA2504839411E3DE5642F2BD3539BE30269B2F3B22661F0
6A0D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic8-Regular
%!PS-AdobeFont-1.0: LMMathItalic8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathItalic8-Regular known{/LMMathItalic8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic8-Regular)readonly def
/FamilyName(LMMathItalic8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathItalic8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -250 1110 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD112356772A65C14D49D03C7D456E5
1A27C2ED815B30E268B02FB1D2E769067ADAF25F28640307E3A89F0B04F44A1E
1392A44B8AAD82CED1539B6A9CEBF441EB81775C7EE4CC12313F31FE710DD429
4B1955DF2BF7A88E1EC21DA22A63BF63E89C913EC01EE10A0601D6FB239DF59D
2CEE7667F4CC4BAF660B24F635F981638F40E8CCF07F21F5B5FE3B5C115D1000
0E4B2ADAF7B1C53935EB7414421DB49A59F82D98D08351CB0BF0C06DE836CFD5
42D68D51AAD4069871F257AB7733F8EABD731FF9B0E3AD64000BCDBBEBE26F88
C96730B45C14458F42927E24318A97B48235E5FE200DB40706E9B41AF7CA33C5
67BF7766BD396006C5364D1E736B256538E5D163CDA75C4F419620D5BE5DDEB1
F7D7A55B5ACEA2B2EB4B78997398C7D38B3D7B5774D980C087236ACC7346F518
7607A19E85C83E2C6ED4F3FA8C15B65FC3D117BC5E3FFE33A5B7A69F7F7159CA
667D96B5D03E4C5E55FCB1F4E2148B4B8DA87567988F07CA181FA6A3C3C30A33
80AC6F4E92903C47BF489A2376AC02B00B8CD01DE080C96A452D52B4B56F9520
B85062F15C4828813D3694BB4BD3512541C82005C9AA5C065476148A4E47DBD4
580CB1ADD206D19E7D653E2690FD48B252BFECDB2C64C96F7477B2E5EA0593A9
84841E96F931F01B2B61C26E8450D5F2B37B51EC364BC2A1233FD108DFFE0F00
AE57465ADB0191B38D14E89413FCCB77A9FCAE09F59A3F5C352570F7390BE91D
178255E10C02CFB7B679DAF86EB351BDEBB8A7D4DBB9C65715A1355FC8D2C355
BB452D44AFDF7E25676F3CB3A677904DB96A4FC7509374E544FDFD4473683CE7
52445AD38E6F3AADA886EAD97F34E1B4DE04B482145F39350CB3BD73F6BE22FD
F714EED60CF92C851335C54AC440689A9CFB00470F98FE893DC9FE736A73D749
8A032F336C94C4C3C0F4ECFA9007FD8BF48AC4747D6A07A1EE6BECB17039FF93
8277AE848F2424871BB26E5F9963F3C6022BCB476ACDDDC00930BE769752504D
9980BC8D8085015695A4B206D94F9FBEE46F6B6338DD6CF2924E49D59702A6B3
E394C790FB4FB698F2DE0CCFAD5EFC9D6CA122FB2077E554C9C84A1760A7316F
84CB56870EA2BE9D0B1D1F3D34CEBAA0367AD81238E83705D3D364B37D066466
4C6FF0AEDEFB064DA57ACADC778ED2784B3423154B7FC03D43F47C6F505D45FF
0852F8FBE17F4D877138BEAA81CFF4C06850DB2F112B40FCD3E8F4C87083C3FC
BDEE31DB7D253FADC2D5DB3E63BDB98388322D348850314ECF0C50DAFB6A411F
F6E25AFAD63BB5005871EA0645F89E12CBDF247FCE91F39076EE06BFD3C04FF9
33CE48AE61ED583AD674D12B77414032B6391A56012DCF662892D7799A406B7A
6D96510D772EB2BED726D5F12B4487AF460BCA586827AAC1D462A387077172A9
35EC2DD30B9896083F300EBE5FFB17D309940D9D5A1BDF081F4D718A20CD1D15
987A7716BBFC20EB3DB805CAC99BDB80D54264C1B79D2B64DD10291FE16F35C1
7D22DB84B970BCD5F146D480050FB9734E92EE2D81D708B1BD13B36117081421
61A7701192F6C607DF5CB47BD237756E97126B8B4C2350C974262C08329FBB26
005B45A10D5A88DFA6422C5EBD6DE21A5B9F8A24ABC3CAE648B69A462F11F22B
48101F2E0E89BCDD8B5F3CC6792459C05724ACEEEF8DC018E388F3C9F683C1D3
2DBFBCD3D643B2291CB6B10B7AF374ED78AAE5E44725359EE84142D88EC7A3C6
E0901F595D24202DE22DE3D1C72ED1035FA69AEE3175F2541B3E4A4B1776A6E5
FDEE28D410102935F02C646DDA1374D058A410E3960562308AB131349EDDD377
71B9A700FC8CC33C9123DA85686C8E660711441F6C28D2A2C78209EB786488D5
EFDEC2920B2AD2C6BC66B39C49AB118814547A1D65412C71017D8F455E99CB91
2A869D178ADCA40A7D57DF2F0C16900F271E2F99E355513C1D0A565F37F6C3FB
FF5574AE2039F97ACEFB9EEDC2DB7E3E437AF13628DED05637DC86EC67A01B5C
61046391D924CD20B5377D08217740D92CD157CD8166D807CF807C9A3C87B1FF
99FCF17C61B22940F5A0FF3317F8A58328863EFE337E7C65116DB6CF97066AF9
A7F97AEE57F3C8932A0533B5CDE2B52BD63834CDB8EE07EA1DAAD682BF591837
29B235B5FB8FF74606C9D31E15CA762F9BA4B8A4CE7CB193CA7D3300F1AAED67
157C6D4AA437B07F138042A2831F4DB42FAAA2316E2A6E9BA7D5CFD2DC03B303
B533CA2220F4B3AD65E1BFCFA44EF981922F5CBFB14DED10DFB5F791B710DB0E
73D342138E2815B343F8DB72FBA310DB15D99F2343CA295A1514BDF0C59B28D8
A5B80B2BFAA4EC2D195B11AC2807B8B92C7E96BCBE6E3EFC2A68E0F83FCDE5DF
D731E3D5261F7B6ED1DA85ADF9F0D75B4B2A577AD0616D09DDA26EF09460481A
98650BBDF4EED3C54DCF98FCC92880A8299C4AE93105E301BD7F7C1E0C5AF87D
148C4652037EC1DEAB166C2DEC7BB163DEAF66765EFDC0483B8A70E01C3E169F
D4951E339DD76E7D834F7D8A7DC96083D2AA907453C83CC7CCA0D6B3185ACCE7
64AEAFCD6AC0FD8ABD836A245BB38A6D9B22BC294EC56C8ADB059CF96DA64588
0F9E0B77A8E68191E01F8722BADF37D376F8E671C50F1A0FEAC7A103A2758053
946C098921CEC9FC37B46C2986B8854881E0B2C2B999EBB3ADC0FCEF634A108D
845E8648F429C7BBB2083633DFB01C1F2BFF8CC8BA927189492F9237CB35E4BD
04E6850C547FD090ECE6ABEE9F5A7971B521841221BF771AFEBAD6FE1BAFA2CF
DE8A2054C5F4D4AD618EAFA2669A482AE5826BEB8B7288793A35A8E00703C2D0
C8040BE5C307C5F501E95B33CCC84558A21B0B131634C066791901B233A44CEE
136216CA7EF6346C355EE22DBF21E7573DE7671F829338FAC7A8E21B8B76C227
DBDC6CF608455C132E2DDB5A840A104A54E76F62F4570DE293C5E6355BDF5E68
F1CA45BF63C03BB6E5880ABFBC3AF5594EEA7BBC74D892650673E367F13A11FE
B5A19A88DC7DC1E146684CA22F2163E5038A59993A02DBCB6241A40F750380C0
C3A35F21556468E0E1A5410262879D4E84B82E6555A71ED445DDFE75FF3D9D8A
29A207A0FE70013C8F5FEAB1B520DC5461ED69E0654078259C6590ADC6FA30F0
1CD01C22E9D6BA6FA340D2A53B1407CA4B3F3D532A490417B209AA684383CEE6
9424717D795A91AAEA62F3D5D8D78859F510906DFE77D1A45F7352DE8C9F5C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4850EDCB990134F321F1FD6696F64BA101037918C9
F3EB2C616987CEAA46F6C052EB3FF6F2FB9A6F974915B82B6608CD85F75F0664
5644A5E3888713099F73E90FBC9681A6432D6944A68175A656D126AB96DEEC97
7DFB9A5ECCECE68B7C706A15EA93F5FA7800171D760667E1336DDDED349310D0
BB68B865F3E43C4275DFD82036752613F3FC722D561C0B5BA22C873A42C13AFF
73B7A9B8096208922179B7EDF55236F13203049ED2D3A304BEF0120285E9FBC3
921898A37465752B57535DF5054235CB5A713FDF779C161E40A8A8AD8074AABD
6A06EA11E40F1F4F4090C99D86095BE64A36FA8733362A8D4A2273879968020D
41EAA7F6C1A9B682B344B7DC94AAEDADFD1BD39385A57F9383AA235717AF84AF
BF5D808D32071618FA11E2F7907B9626CA16609BFEE67DB56CFE2E2B90BED39B
54D866320877A767FE000D8A3386EB1AEB2D99809C71C946EB77ED556CD01675
A5D45FC8BD04EAF80C756386291444CFC1D7F12BB4B1304696B2080A14F56ED1
959BD60C7F7F5BFAF8497205D4BD589967F17FBA10C2EF19C1679C5AACA4F9EE
B15E13977CA81B5026C7E1EF4FDDFF62E82B16CBE3D401AAFA4D973976EF232F
76C9D0C0793684D68FE95129C326682238CE9807B35B2C2C0C32F4122724C159
AA1C41DD94D0808809572A0A32125FA4D78B525B256291CA389F839797A13591
6197A48D453611484DA293AAA6B62F5ECBC9D32FD482C74A5387629E03895C5B
946117AA34217BC77B1E075A4BB99145EA55CFD1D12CB1D2E72636AE538232C1
3966FC6E07843E4FC7A8FB27BFB4FF67CD278CA322575D7590D77B4E03E63F7A
848E639AEA6DDEF55107E8C5B9DFFAA47CB3CB5A614B77D0112527C9AD97FDAE
5BC457971A70DB3421293E16959B64702BA858C1217A8B3B836A947462E0B59B
37C8CBC667F0052E653D33F067997638BDCAED6DF3A8F1793F71E79A58BEF6EC
47F700C376341D757B09A3E31F6ABE9EB9021C1A6E311CBAB6DBBC8AECB140BD
DCACE9B1E80979B7487BA2CB786018E20A5E0355AA33D6FCEF382799F62A9A8F
F8262E8DE16E9245C61CF3FFE09AACEF315932D79117A513F6863D275B80A249
01CC70FA943FF9A9F5E8D5716835F17CE3FCD6FC5EF10AC25471C19ED3B2D164
93293F09EA311F49295310B0C1AF942753C52402014764CE7026803F091EBA60
AD877E9208260AE6AF24100E2B365BF89C5B679378A7F6A67087C57B5519A988
04735147BE66CDFF2481FE35DBEE9CAC7E77D79BA760EF4C53A3C983853DE8C5
FD3F25925955F36A3BFF3454FF7B226C0F001FCBC5484DCFA46DD8D89C69C886
AA0247C5EE233C9D7DCFAAEA1E34B8938673AA6D760A80C38EFAE41268C528B8
5A14387C3E29D017EC16BE7E6918E11E7AAE31ACB6E85DE4B2B15B93B7BACB79
AC25F37A4E4D1B370E59C78DC9EB4AE83D1CB6E4DF546FBC914A6FF52591CCD3
C464AA14A393F61610D617E196C9252A013C9532C303C68553C91CE83431F239
BE883C519B643E9EAE5142F698F4B47ACE43BFE59E3AA4C8B47CA18016F95C6A
212208CDE1635F4E5271224CC19B6D47261CEBA3DB1E042443B665E915991D93
2209B3F4C86C9763861923B2F335DE040A8C24E73A0DC3FFAD5A6A9249A29AE0
C70F71EA41B0A4A505263D6A6C70BA63EB2814D31DDE792AAD7AEB4FA346EC85
0781604DBDF2EB65869969F265341938B2C7D6B979342D93A9F5A23A3CE8A015
130A0FB817DE38359C63DB215965E218E892C350FCADB5F66EB82D0813EF551E
F65992B2E24B4FC8353951C0A335B53F68A8F8286A94521BEE28D7319ABCDFA4
A21B5DE536B34845B32A34ED5CA1F3D3EE2B04DC4CBE12FC99DA94FB2648B842
54D4FB6729B1CB7E86DB55FF4216E2F57A08E04B44BB36F27129E5E93EDC061D
348F162C03BEDCDF0521B9F31D29543DE2AD436B75778C0489533F3FD5742FC8
AAAA8A72683C54B45F81F355D9D19496D0F80470D6B289B760B6851EA1A9D31C
01577A0026C7929C87160EE0D8EBC305A07052BD82AF003A0EEBF1D6FF38B526
E2EA0A91866201E08792F03323228B622E30142E47BC752EB0EFF7BE8B688A36
22826EC83CC42DCE8356DB43399E6A6918A887A64B2EEE98060E47C0F4276DEC
FDCA976E967EED2CE2C439693E2FD2F2C26823FBE781CE97DF06830FC498BDB0
73AD2CA5EC36B4892379B00A5C8564FC9A915C85B66EEE33EA460AF6141D60E3
76B4E430431F049992647E2B744E48AFD33CF5041056A43F90D0E6A47C2521C1
058E8C66894928964B332A89C5DA71AFBF455E5A68FDD4DF74A8F1572F8168DD
E778337122FBBD1485F73B4EEC2651C3465557A320A0932B65C1FF77F68B89E2
BE7D6D975EEC017C4CC66C88F5BF25B0D84AF0E70ED77B0B380397149845CE59
EEEF6DDDC9E7C6127A68489B4B19F3D15F6C72AB8DD43CA69CE0AE0177D2B999
3DB6EDD24B6A4FBFAF7245D800115B62C9BD6E97A52671CF3F69A78D19654F75
3822663BE5461EE982F36B0027977D6B3738BA7EBE8FFE3928E471DD9502DF1F
41F853B486CBF6A62EC2D4975CE0BAED089845046259EA79899713DD1E567F28
531DB889CA3267B2BE5B8178E6B7889A33771F86276E66C88613DE9300FB2099
A0299A8F743D418E1D967FA5973B33A45B38CD6A223B219D9978D3B9FA37E805
85EC0B2C0AE9D1AF457BA4830AF3BC5AC25B6E250D20D2FC1957B5D7BC7DD0F4
37F141CAF83DB0823CD6137CFABA19629F9D4EDF961613E545DBF5CC635D3B34
FD5F89F09B25F78633F8D269EB8BF7FB2277CC85D95A094415358CA9BAFB89AF
BEF2079EE97EAD72E34963B05614804C9235E28F5D93FD74122FBE17C96E57D1
934E148831AE7C815BDCFDCECD662966EBD98F467990C8FADD97AA854076AD6C
685EB8A77528D0A206E2A1040FAF2DE1FD6AFD5FD97EAAB6149568991416783E
6083A9639E040D0976F90B757C56EA7762B2EAA7055CB375591EC4D3F37E7B7E
75DCDC8A7A26B0F7D23D2A4E5099310672F0813810DD9E7F6F481796A1CFD9F1
FB69E5350B281CA2D855D54CF0086FDEE6B7CB2EADC49766F44593DF86D497EF
920655B93EBBAE2BBD038F21047D0019EC29C9C067E081B140D7E73D6F6FD77E
A8CF1DFDBBD7C82821D7082423D46EB801F8502449684418493C3E0A8BE37645
E63963E93778DFFB58C420EFE7799210D7F82D96C36248BA8AD72B6782887B17
C171AECAA00C5BB42BDB21F7619180B8C7E0F275BF550881FEFF34CBB540CE91
F39076EE06BFD3C04FF933CE48AE61ED583E1E6C447D0E650388639A4C63245A
ED99989E5A0DECA423EA8BF7AE91239BC60BB0C77205435589588FBDE4187016
C112F687597341C49573618C5E2AC9BDBFED4F5F0D7AA5FA755F333D4E8E1C20
5588BDD025DD2E10D12737EA6DA8147E2745383500B602B33FD1E81B3491354B
B29A368A19347B4201FACE04375BE70371FEE910CCA9A8D8632CCD70A854E1D2
3E8A0FEE3F1C0A670719D248927BC493C2941650887333632DF0689F1A97B9D3
262AC9D1AED22C2EAE8B73BA9310637B99935074B5B5A3470CA5F34361AE5250
42F9594F94E973E95CD7826754E0C9F973B650EA4342168CEC6E67F64B36C58C
36A88F60969A764BC3650C994CCBC31AA72B65C3BBEF8EDD9B4EEC32CD7D3C7C
2D0FCF928E284E50261CB50149B5DE3DA8E9FD9A8AE3801C672DE1E3AC0A6629
37874153DA92EAF57D6D9CAAC52BDBF370F21DC09778880C3CE4E08BC8EB4F99
5A09C80357D630388563FEDB8468CAA3E1D293B7697284F9D5F00EA75877AB87
E1A511A616435624DC4A219673FC52B73455FD33D8F30E271D7552C0B48F6ABA
7456AF84581F7E1943EAC99BCEC941D4BBFED8796A812BF8FE7979E25B21E2E5
9185EB73DC7AB27D18E8F9AA8DE19087A4A1E246241581344C344A2B98C47743
50E07171A622308DFF25DA176CB79D6018AFF7308E78F05DB8433EF9C095630E
F8783BFABF571DF08F619AC9DF3BC40DFEC6942E2E9BF906ABDDE75397617A90
0BAAC5DEBBCD081C1F79870938A0B6FCCFBDA7018895B617ED93853DF77EF34F
B8BE949FCC4B047D4127B69EEEA74A36B3873BC99F98F7D176DF120FA59E4782
031E19E46D2B0B053A592E36D0A04A7D459489F94CCA4DAB06CBFE5786DDE67A
8DED5B4A18222CBB5F8410A77BB788B0712445052550944E73B03D45C39AB7DF
C251A781C3CF923FB543C420F7ACBDE3E03F7063896D3B578B21E1137F3FF009
AF8CAC6860527DBD2B62750C163DCCCE853802D04DE8A06DD65D6909629F782F
F974AFFC81025F300CD03A0ADA22C6863683473B13FECAED39B92390F4E10907
8F78DACE5A54C0701E385140447CB399037C7E89D53571680A9561417015FB33
4C602DACFDE349DBB764EAB4DE668AC382B53765C19B4218DA3D841B0C37F833
CC012322BF86C75D542DF2E2EC862783E843F960132F4B70FE0F289533E1BFAA
D203EFD9CE7624FF12E82CB300BD97F7C3542352CF2BFBC4B1D57993B3F286F4
673638EC5DFD9187CD9469DEEEFA077D9497E9C7B434701FC7128048CE8F2291
AE97EF2C4B2446425BCB89963E32C1C000CA13E1A1CF2080943CA932CF055E44
ABA5617E1CA933E7FF893E32E154B890317737F63864BF389BF0BA95B2A29E90
BB4820B6AEF318B1F51BA2DBC6D85F3505DDBEC9D461A404C48EB8D3F16196B9
285C45A8C015EFA716E85BEBAB99B8881902E500984ABBF068A6820EC574E9EA
34D55A9EEB4CD83B46200016F5279CC754F3D1BAB40098F2F691682750CEB44F
764CBAD8D78B073C566768BA33610DA9AFCC96BB51D59C946E05361A8CEEA0FB
CC751A7D639E32C569B568F112736EC85AE9325837BDB90C3C2A75D382C7F736
1ADE33183B5F1001732BFAFB8025D2DBEE17991FF93E7C09B55135397A77E864
8A0F2C9FC94D3224E75B5764395093023620227395D278BF19143B1B0CC12B46
E209935CAB6B0B33BF674B2684EA90A9EC1CDB6E0A5C04E2CD440B4CFBAB7901
FCE9FA0372F21C2C3F4462F60F5E9AF39131695A11CC6911C648AB5753EC8D7D
DD4250FBD6AC4DEA821CC5FE7FAE61CBBAD8CFF61BB6F90617233EFBCECF6149
6F8796731A9588EA033D08B6531EE79BBDB311C102F70F1D2D0F4DCD4FF8024C
28F61A2AEF37E4F659E4B3AE3CDBE2DF0DBE502673FF855FE49B1B3DCEB358E5
9045747E08C0ABFD19DE22BAF340B62D5AC2E94108A856F80751983FDC6700D6
A10203D03263B1C28B26EADB953ED292A4ACBC45E5D0C0F7D8416730AF4BE4FC
931E965594E0364E69310840B300B10370B58E49634684C21B738351E2228B2A
66828C4CAB067E6F73AC20C8ACF206EF6A61621D08C381C6793D5574AF08AE5A
4FC89880D4A8DB59D352913E906F101A72D8A82F7CD70D2B36956329630A3D3A
D9073DFA597ACB9868737617F9A60D1F58E74D093454EC4A58025B1F47E53E0B
124A48CB687FEC13BC7E4B2AB8BD549F79515DABE3C74E9CFF1AC27B24ECDD66
6CE26A18A785B966F2F872151505BA71296A18E04AA75B9DCA5660A12C174AF7
5DF1CDE0A18C94817F54639ABBD0ED1F20265E06C2E2E8DF9532840F5737838D
E90770FE986FDA5D5AF706F0A30AB0EF438151C7D39682CE210B2E003906F074
03A54AAA87A7CC1465CB48ABFD9A840A0577DC8B0627D7319885FB2AE0E2E2C9
FBCDE4B5A7AFCA11514EE22BFB83C77161145FC0E4FC155733F1048226D12254
88A9B780043DFE114D2536479E7D64EEB2CE4CDF95A39C74183F41E46F2C56BC
B59CE6AEF7E9165C65587A2D7443368FD6795C2ABC2ED198C21C8B2AF158B34F
2A3355CA6B6DDDFF3E2CA981E3997BBFB6AB9BFD7D0345CA2E6113E992D2BE44
DD9B12DA394FF35F4095DDD7C24466E5410DD289DF78C335D2BE90B5C581D535
A7B728D27C8018BECD829ACB6C3D9129E976A2427B81972798501C0392329905
8BB1F5EEB4BE7298EF4FB8FE2D74D05E250335E05CDD95E3BEFC41E38347AED4
C6DB99906ACD908F1A8355BD40273AB986F80E6021E31684F0A9F1EAAD5C10BE
AD7E583F9BC1DCB1EA3B8DA7CDAB8DF0717532E4799F0DCF5D2FAB1DBBA602BE
DD835C5F9A8D58ACCDA547DA19D30B5CA65024D9B041E66331D94B79E8F147BD
DB1DC607885E12FBFA7343990A15C4ECACD6F3EF87869378858BA7E6E918D5E4
6449525A49A6FCF0DBF6C62D83149B03B5B9161C5B5E1FE556DB10032FD0CBEC
14F929D5598F443721AB39551202BEBB4A2963B2335F47FE93AC02B61A28962C
501FD7FDC3650BA4F76CF415B773153D96E6BDBEB282C75459C49E086802377E
FC920F16A5B5C3E352E7F66C743DEB4EC14A3AE0EF469A2CDB297717FEC986E9
DD69621D48CAB56919F96605E9739136F9C3A05017A993D91DABC265A39EE4A4
94BCDEE07752CC7AFAC6B628B895011B8D2DD6CD203D4094F98FDC9BD516E83C
7C6381716EA9FDA8379DAFA5415D1C2836DAEF8D4ECA89C65758520C434F65A0
EF3B575960E66A4FE2DC41ED854A7CBFFE2CC5EDA0E749B9ABD3AA4631AC16FA
235350B6B6FC28EF779DA6FAADD5973C6AACDEBB66A10C4B283502A41B07CAA6
214B93CAFC08386B24BDEF8257F9D67C0361198A29891AEAB0DA742769B31A49
049F48790B9A77DDAE9552AA941ECA5B886982D5C52AB385EA99E84065DC131A
3CB5477840F1FC1BA26DDE200CAB31058AC27B6BF81C8077E1C40444E5891308
703A1A557D6AEC33EBC7046BFFDF7E1B7B1B1505B3F1266FB8568E4BFF0410C0
775773E761DDF52FAD0AB9815F70E9FD168C02851FCE51F6FAD7BC8C59DE0A5C
01FE0E5F3EC7EE6E6540D5A2602F113FDCB7341656791C3D210014D0D6DD89AF
38C49D88737A92E526BD45A921C4D6D0F443215273F91C3DC871217A1CDB8543
98BA98AFAEC951690051A2662DBE191A8E5C1960E5FB11FDD2174E1F9269DF8A
84A1E7B30B6DB37EA97E009D6F40978896B8F7A0B472D1F9FFC68F7C2DD95EF2
022EA1DB12DE17BED15E6180B4FD4920794B2FFE8BD9CC8E67B2697EB1E957F3
C6B5CD79D72A07B4BCEB3513C9CDF3CBB46E284416557EBA1DC1052CF20D8111
B2390B732BE5D4BE162AE52CC19143732487FBD476716288072D6B82F9F53EA1
19D72F24F7BC44E3DF3DA483DAD551D0ECDC163CEAD83A7B901741578486B340
1A2BA6C4DBF7F71098086A5C34185A184FF8283F703AB2148573DDB07F5E27A4
0BBE00964DB325318C01CC788CEB212797BBE778DCDB2D0F6726BCF115DA1534
3D9062C614569978F12A7A34A912BC2CE3D2B8F6230451DF08473EC5AF48825E
4C875F9484343056C8FE000BC275B51B3B89D7A218954721CABDD00A51A9D83D
24A69E88B57AE69AA5EA146A5F40DEA2745C6DE790840426E4462B33FCC33D67
A75F80431D059BF7D7804181BAA10F1B04E06BB7EC873DFABFAAA713F9F7D269
7844E0FC66B2BA20E774AFCBD2BA61C60BB9397196E1C263CB14DB4C1F669136
8AD5A88A8B57805EB9A7940908D65F17B4BAABDED1E6453952696AA1F098E9DD
27E4F23DBFEFA39F92762B1119C8FC5EC152984A0D172D7B3F99DAA47F04D725
04493CDFB35659392681091E8BA271A63DAE1D843DDD0144B44736C20B14C1A3
B36903D8020CD2604472ED1EFC14D9AC7341D5049FE377FD3BCA13CDE23412FD
61FD7B0C82E0D544CBE2D7C6FCEFB2EDB1DEF64DD6E50186F11C5AEC3E20075C
BF83EAE3970CAAD43AA7079C93171B82F4BA66A837B8F5F5E1E550B7E5742657
2795B0826CA7C36238430CE635F185EF89D90AFD9DDD69985B146BB4A22548F3
F933AC9F2C8A6E1ED0C4A9FEC3934C4287B17F5613AF6A0821CF81AA3BD93F1B
E1BB343F0722046046DC94B5017D456E865FB2E416C4EFC902E954F32340FC82
E3A2ED3AD8E3DDD108A573F2D6D22FE96F0FAC59B411CA72663A044A853EB94D
553D57B5FCE76E8EED63F5281ED9CE60832DC567F8D7F2C6FFEBAD7C03B3A39A
6D5A637A28A15AC6BD845371E230FE8332104D64DF8D25F7BDCDE782497DF99A
28330F5052B43E42A85375C7789DE4EEFB414AE600908DA5FECB35E69BE23802
902471D36C9CBD4BE29E699D9E444B315CC0967B38EED3AE9EAF2B6439FA9B89
9BB56C4C6B34EEA836994DCF06223478048A63FDBFD917BB0C94F62E311A760E
7EAC34725B94F3309A6790E005D50DD54B6E65F492FF36A3C8198B0E1ED1E4FC
6CAFCAF8B179D88092E01559F5EA0BA75A1E827CF41845BE0BF8D26E055340E8
E062FD83E83A49AC57D38A894A4AE4C0AF1AFD33CB08A071A6A76E9134A5866B
9C07C959F6A13415FF25D97BAC106F5FF943AFB3C5EE92636BFD30E26E916179
0F05A495246FBFDAB3ED718CC8AFFDE2BAAB56D5937DAAC57B83CC2897C588A0
9FDB14647F570BBEE55DC7F2AED23D898B757A68BFC53ADF8F88D7F4844A8FA4
414EF33892D8C8F68939B28C0A8D519A948A5E54879DD21E4600F198EB53F373
EF24A82EDCEDCE509D926BD5E3C4F6E511BAC8CA5FBA4E4E99A88103935A91A9
10B6AC680A8EB76A2C5D17804371F9AEBC100D7A6D1414C37CBD273FBA9FC886
BEB2D27D8ED7FB312FC415A0BA6147E66505D2CEF2005BBF75779BFA8022F236
006FCE1DFC3ADD6B5CF89DF7E89BEA4ED9866C07EA2D27A88E8BFF0D46BC47DA
118698B1F3280F90A2FAF82D4125EA3FA457A2B5292E3E168EE1B0AEBB2ABAC2
B90A514D97941B12553CC4D9CF4E75722C9F37E4C9B4E010E3CA56EAA8868DB1
F73255AD74EEDEF9323418456C69BA9FB90C04471361C82EECC9E3FD1923C327
89B45410AEC18605C490A58D6D03F276E1C1F837B105D9B6BB9AD2454756638C
8C24913B901A80A18BB3DF60DF1D9C1F0526611190E892DB34F262CF0D04C2C9
7A7301BCA92687198B725EB5B235AC9334C9A6EDC2F0821009F568661D201D46
5E49701837E000EAE6F4EF89E182ECDBFBB341E745F20E64783507BDCFB30566
D330813BE00F185D8EC22BF69C7F3C7B33E2D37C7F601B0E36197BFA431548DC
233902D54DA503AC35E5D798A70D15F48C2F617CE0AD7A4007088A67BDE1B5E4
94649AF8F9C74E36A9420418AA68FBE3D77454117A532A31D12091AF98A3614A
80845BC772803943ED168738894C69341DD02AA491637E24F116AA297732D1CE
90ECE5E198A6C53257207EF1D6DF448C97CD7C7C9D13F20C4EE4A1724BED4905
EDAA8A46A337EA53E08716B66FDC7C4415C9BCE7795FA44C3BFEBFD041FFFB50
AB62B6D04FA90E615D06A805EF2EA704243FB382621C0054BF8A20F4919B04AD
A061CDB72C457D44795F8589FA7371F101DD501B215E0C207067F1E695951C72
6032A26727F1107AD33B99E0CF10C6196037A77C28CEF5AEED03C125D941674F
CE08A60064CB42F4B5DD688729F3F1A1ED635B5686764B5DD934BF229A852C8E
A274290FCD31D87998A32A0F6414BFC5E4AB5E0BCDD5E76534B21D3FBAC23998
0A38968FF9B815E5DC93846CCC8A07CED40A9E6389A23EA3F80EBDC8BE3EE568
6F6ADA07160EBC5D155C994CC1BC277FE4513DC2102D4A6D49F02052524B578F
BDD02A5D564D59B23FDF9AD9CECB2D86E473917CE72CA630B01A0EF0761F1388
8A4306667786F69679136F719BAE108F344E5F0CF9DB294762537A84DE04CB99
6D5BAD892C8B7EB292D0E4EC6B9254403433430D4DD907EB2F1315E79ABA1D5B
F00773410D200C8E8970E70524F9F7AE081E64AD1F71D6CC6FF05468F33213EC
F7D1A49BE7AD6D6BAACE6C3E98644BEC82117B60AE69F144832469CE1088DA53
5DC05FF15EE71CC3176AA5E7CF174EB3D74860697B255C72846F1570C0548D4B
E70311218D1226787AA0A3FD23E28906349469A29062772EB694E6FEDCFBE292
901F033C34089EC1F6711F83A023C049F778514357E82EC809E055FEC4576A40
C0987A5A8BFD7462484AB9EC77CBC0F708F0CE57364301A789CBE20DEC1DA560
FCE287B86E393C824960DC48A541F53EFF9021D9D4C491F26BE8F54C61165CAD
7DBAA4BF778759DCDD7D5FFECB8319C0EA845ADA24434C701A1D4AACFBA624CC
A9AAB06BD355CE23F77BF90D2B49AFA5BBB6E8EE3280062E38CD79E556B74A71
45515C3A3831E5B5172880FD66C321DAC4222BAC5D082409A4459BC9CF7B2BA7
69BCBBE17E81F552B6052477111F936A36E33A15AAAE3D4A2A56DCC2A73404EF
2A23A9B9F38145F1DACAB2F44A3C82D04E639C8A348EF476DFD4500F7D6E4978
3E9FC958D3954BB4737612EA0A3D13C6F89B4DBC3027B3CAF2C6EF0A5000F539
14FBA8245F775D9CC59167FE6FAC2870F16D002A07986298A22F465B0A2DBDEA
1DD7A748FBDF3886107AF158F4FD1E73447E4DDEB4C1D21905A5EA5E993611D8
A4E602585D4F5CF483942A38B7120E8EBE9417C4AF1E4E777C33B641F5CA06A5
256DB1C454FCDF55D0F95F11AE5AEEE9A6B1F0E126F26BB682FE26B34CE15E0A
D3762D59AFBBAC9FB2CB1DA7292EE9775B6776A5E4A8FAB04F8D0FBF0763DE16
8AA57C32E41FCF507E742CE254F19EC5974A449C30DC632BBF73D29C7628D656
28FF82CE9E7C4BD4998CAA066F41264F0AC879A67E1B0B621CD8572B3C64D0CF
9DE05A3217938C17FCC2A7EF4A404D94DFCE0A742C536CB67B92DFD2184A508B
A545215157AD16CCAB78768B3B68A5BAFCB4F1BBB90BC96AA1876AC4F908AE06
D9C855A5FC36A7C291A47A69E9C57AB73343F5FD681855C00FE98236360548F7
5D58871FEE5164282E9A503966C0A3A326B77B817ADBF1E5A669A87C3886435A
D518D9494820969F199BAF6C36A54B457D8FFEB126888D06ACB1392E27761E72
DA24E4C108C309E90A8C6DAB6DF8586F86CCB53BE427BDF9D42B997DDFB57EC2
C439660FF432D09507BDF345201376AFE24ED8E855C8EC0A4F10AC1C5A123C1A
8C4F2954D56B8F24B99DD5F1B638172F1A8E6EB5766A44A7EAE4D5967EC3646F
547C1BB5DC54CCC0550BA61E177A84043B797AAFB22C9FB5EFE995BB7DEC9FC0
000ADE99E60FE03D41BD3B8370088E031574FA1A033EC03304518C35E5550254
6E62683AA356366555724DEA41D89148984027FBBBDD108842FBFA0CDAF9EBAC
56D3CB4062A0131EE8196600DAF4DBFEC49C4BD7EC1B44A0223CBD4FA5311591
A356278A9B2326C602F1C0150CADB6655BEF2710A5AAA24137BCAD21A297C69F
E7FC09DE4E7768D68B27DA250C05EF919AECF374D10611219620C3FB3B4C6169
701465F41F8B29BBBDB962DF1466F27913394E9A848702BDE58AEF1D79442600
36DD3A639A660A25A88E5EC1957716CDF76E2AB18FCFD76548FD63B8AB41F3EC
498523867351C6F09B8FA5F6FBA1D55BB33E7D9402419FC8772047979C97BD38
382FAE8F93AF77D94989AA693B5506993976946FF72DA1DA89CF6F9FBFACA3A7
35ED0119A05C79C93A840AB8D41D661554EE356173E95ED01005A99E2A063CC7
7027D8A3C0A06A48BCCDF5D6D6770402B4F57E723AFE11526767E2C75279BCFB
AC46D8224E8952D9A71CEEEE1ABCE3E5328D3F8111610DB32C86FF6F9DBBC993
71F362A4BA881C2746ED44CC856FE7D20B08126559D3D133F44803D138396F36
19557849327871EA80F1D810691278A9A4528592F32A76D068F1BB3C6B565D26
A3EB2B420D2DEE2C6D4ABF100A811C890C3C91643A8B0D48DA28411430C42A3D
1366F57F0124EE7C8370B7AF1DCC822F7C5EFD369886C0660238367A24EABFE2
4B43521A25CED0A67EB981694068A3C627C3EEAAE9DC0885111019DB87C73771
A6CED0715EFF43475A0FD680DDA4ACB477378B0FB26F46CC8D6A5018E9E44135
84CD0A745F1F9E7A564EA5B099C094DA672C9D042051FB5E06390EDB856BE383
ECBBF2719688DD2CE66583F82EC2C243D4D8E6936425CD45C0A5A4197BA038AD
B36BFB0B0C52629980F8EAFEE102D755AB6A0DD12CC09CD911269074C75DDAF5
DF5891AF008F869D7AF5E4EF1989FD377E97265BFEBD6FD869276EAC3B0E5079
A047920ED4CA548708B84BF1E611B73B0DEE3AC8F44C4CA15DBECA20C35884BD
50AD842C43F9E09915AA76E99B648B685B409A70D5764A0BFB665E55E31974DC
9C8B8583FBEEB315F71951C723830270E7AB53D1AD5876C07901A071501004D0
B38E7A876FBF9406F5FEECC4C7AB6DF2C527283E786C2341F6288DBA2E17C19C
9270E74064381314CE48952A24C57405ACB1E7F0998740F627B096F2BC91AFF5
65EE78746E30AEEAD8CC05C552782512386457BC43BBC3A7FE1EB21FF5BBADD8
023AB9D1FCF2AC39103594EC513CB84C0DB5CEC19492B8498D81D982800318D3
38D884EA348195A435E9CE18B233FFC1BB425B1D5F66AA868C2906067D1883C6
1EF0334681CCACC5D024F39309DDAE70B626DACC2C14EB92E2F97FC88E8FDDA7
74EBDBE7A952FE82E6DFC27DC13B8E42E450DA982FF3AC62D4E943C732827208
ECFD4FEB93F67D4250619BFDDA4FE45BA45C7C4EE89B9A39149E124C564C5251
F613393060892D51282CECCE114006FFFDF09FB92E17D06B177CC07FDE84BA78
5BC1A5983732A160076864F407F99A68AD7AAE86F3F01B8542C6AB92BD3F909E
6D8E33EE92C3F5C39058C747B7F10704CE39D819D28AE19F5F271C42169287D8
EBE094EA5B249B7A07735A36737C99E1B7D6043FEC3AC2C2C06D94E602481654
E5378C8D137E3A872753CCD948A5B685F4F02D20814AD6BBE3C4364BD1C64F9C
1F13FB8D5BF5053CFB253C24C65B5AA6221F458A151C3409C04B395F38A5F341
37558FBB4ED364B7D0139D37EEA1C765612661F780459D9932AF482B5E2351E3
BADBEFFD4719E26371AC95C993BF2A625BDF1D49FAB3AFF04E85B5707160EE6E
A3E6E8FB3190B7E1BF4C2BD3DC8A877335C8FB5EFBC771FD1CE6C57981689D40
89C6B147D977B73B8306780B31793DC3588A170E5A20B20B7C7E7B7596186ECB
0057E4133240C63B1F4469685B58774F0C973A4B896469D83A6A168B34B0F1FF
61A2D99F8C01DF71F42D83DEDA1A8258DE0377CB93B456DA0001A1ED0F5B77C9
9477ACBD92D1BA24E033458D3727ED4B961BF04E000C5C3386D1D094605C22E5
8B9F9C3E9C6D2F7025AB000A69050ED2476275D5384CC384430A2282A4898259
F17E85E7C0BD0ABDB6A50369F174C6EE49097FB80FF85CF05D91D34C4348889E
ABA9149FB3F8A0EE2B5133351FF74C7218D7C2DB81480315A1E63B66E9630C4F
792C9F8A4CBB728B11CF5D824D9BB84846D75651244286A33704096CBAE3DA56
F5B6CE1FBD5C2A43529A894801EACC0A2A4E2FED0E63F90B8DF65026707BD39B
489E5442523964A237BC0486514F6952862F207136E1E16B417CDACC3B4E4A19
BC80F638158DDC1B6DDD5CFAA56386D49F7E1803732D18A9B4687989E55BAAA1
58678817EEA27FF823649DCA59E2ECEFB861ADFE90AEF8AA8DAF25D743FE5145
20DE675D073F415271514ACFA19D2B9D2E2B8F11495E7F26989BF6328610AED7
8D0AC8A6526EA14599B346DF9FACDAAD6E56338170FF46E358F0043AD5D5D0DD
10D9E3553DE260FFD590BEDC71CA9AD4AC12B09B79A5B8DCE9C44E878CF5E2C2
A3338A127C73EEF13C887F0279F78802EDFFAEA1B27E2B385B6431EDB69A6012
2178F1D6B50DAD534D89F7063E702EE6621E0AF8522BD15D1FCDD83C1A9473DD
F6254C62013FD10333512A4757A3BA5DD86BBF5B9EB427971B1E174019D8254E
5F0AF10845C36D487F4473BFADE8745ED80244BC4D6F73FDE34846245FB19B50
36E5A409C989BE0BC90226FD7DCC2267359A6CC965F3BF81EA6BF2DEE81852FE
74F0D0781CDC5303AE631B7AA2484EA82E957A325090B59D663C6F389D2C5AEB
2DFE00FF0195E2117C83B6356A4F1B01317BA227DE03A9FA9242F6CBC13E9582
AA6642773A62555FD57DCF1448BEC02304B1E470204F116B2C354852A9E33D24
40FD85E483A0A0B94186512DE776A9DDF64744F8EA46F07BB8A4E027FC9183D3
ACF89FABF737E42204D7CA411E72AA4240AC01588ED9B4DAC6C83A858307703A
6F79AC6ED05FAAC578493771447E4DDEB4C1D21905A5EA5E993611D8A4E6025F
20B648F6F0A0829375589E07DF4BEF2EAC37E9F3737D9B26569A5283A557A996
D0EA15A6C8815A66967B759682FF8E0AE3487EDE0A148F2D79715A8719913866
4F3733665C5E989B17A3A72248A138A3CA8622749CD74813EEA720C4B11F89A3
3FAA0EBEC92FEB04C3A6A0FE09F86223C3C9EC10C2B121966B68A93EACD1BC5B
B43C615761F0750FA8D43911FAC80608EEE80E02797B148B8943BF63071283CA
52467F731C2C1AEF95781283E70978F6E90E6210060F6439E9CCA612DC7ACE7A
D12F478F25D2AC8C581602A206FD79BAEAB05CCF5B81D99CD34D1429DE3AC45C
7158D89312F84726F3677654FBFFA4E3A2619E6BF6545DD7B4C68A3F79464C1D
64E30219493B226A545601D9477A7DAC80AF7C8244917DA635EEFA010F61DB7A
73E9760C57EAD7CB37952D1A0E9F744FBE8041D1C3E8B255B43E04EF1076D442
2E27F4227102CF7D56855FA5DF9C59631C5811D0CC79DCC5C2D73915AB87E8E3
1E5D8502BF810480116C42EED0BE15D728D7D835AD3E20CBD88E03687F3DACEA
D59ABD78FD41E2AF19079CD6092812D625B22C7264C26191867553D12CA559E3
D62217FB87EAF14699937EC5E60FFB3A13AC9FCE3CC664E6C4D5EBE4AD895425
E4FB3315BEA6E2A5443A083B4EC14128069B0D6D365206D43C86F4FA49723381
B62D0FC822EAEA6A442F43EF897224867AD2449F8A33E888E6AE2EF65EB6C6C0
D49BA6630E7481CB07F294CE1BC740EC90A0764E9027D61CE5938B12192502BE
3D25C16354255FBDA13571652593CE33FC4F48C6C0DA714AD9D987DEA4536807
2750CAD0C9ABC3F494AA331E2560D97EE9008373A9D2C02A63E2E41F3E95455F
BDD04102E568DFC9326B499854BCB7C7CBCD9F998FB0DFE3606BED4209562076
4487BDF92633CE56BD2E5DB7D7203CD45EAC63D7202E2F23518545A75568CC03
D8A297BC7AE1A37EC827603D8470B05A14C8D3F127A1495D837A83B8CD7BA6EE
A79B7034C1128484ADB7FA4127F024EBE86D98234C679A1CA1503EEAC4658CE2
4F7DEF0B6159281B91BAB816434577E380D4407D0BE8775E19EDA0D3F3F15E77
B3FF03CA99C867D2C9933AE39EC90F30FE7A89F8EE67FC86A86A4DE5C59198F5
124711CAE7A1F8158905238F53B5565761668A6EA34CABAFA33A7F59127340E2
EDC4CC1FEA9BCC5FD7C550F0399CCEB878C4C247E117F204FDA7AFCFEE54EAB8
F55688A154C082A8146F8C42DD196DE1024B305FEE4D7EB6DB3825AB19B3E5FB
5055592F74B91FD7F78DBAF995F1D86F8EC12B69A88BBC9E92F80B744761290E
8ED0E49466DEE887E6F28AF7C18AB7886911E36E12E02ECF7E9DDCC72C99BDDF
1F350FED48DDC2782659F1F50E85A8AC196F341FA2FA382F77DFB04790905077
BBC7B59C5C42CAB2E88D2643449204C94224F517ED326030FC2A800EB393CF12
2AB857DF5B8188251EAF1896BC04CEA3B47DE7E3105D1B52C52112C5C38E2B57
72C5939E655BF7B125BDCA097E78939D65FD211F85C2D4D227A277184D3A826B
72EE4CE75AB5A62BB1C6AF3B36CFDD90CC32F570B02C0EA3BC3A2C993978F173
7D4B3D8266898B20653C45D7A86B8B0845D2CB1F8F3E42B41C338D1A410595E7
7C5E9EA5B02D4C563D87571D05083C134D3C6BEA9F8FDD753A046458D0C4A09D
FCB683D83F6D9D41BA481DA1E4DB4B8B2F61185322B97803DF839374F073EC88
745B54FAC04CA4996D2DB496C9CCDDD789D38C643B17E3100DD9DE9BB215565F
3CED5BD186A7EEDA89531BB7870689AFA703C77BE44666351FB5B0F41859AD60
88A3E1CD3804FCF1AFAF6382BE2128464FE65352F56E7855EC309B83B2E783B0
A38681919F0B4F38F057C8DEFED8A999412661CCD4D06833CF6AE0488066384E
2BD89283A76EB50C32FF0ADD60F63987CFB638701DF3A3C29135DE44298335BD
73673CEBD99BE02EC1B0B56D6D9A257526C950B0382D03D22B668C91C780D746
65882CEF4C15D367F8673FB8D630299BA499F5E2F7825C727A6D8C4C10C8C0BE
F3C0AEB893BECE38E9210CAFC2CAEF19F1C4DB36D71CCFDE037B26B5BB796793
C01D3AEB6CF4FD4D2A7A5EA9B678F2814047DA1C3C06F6C319F814A38BC01861
A2BDF0B31A38235E00862E70D7E9B400F4A91E80C6919A1B68B1E115540CC5D4
64334F27E5FF509EFDBC1D8E0C9E9E334445FB64AA959EDB0C9E05EC3B8C72B9
5206A6849BBCE73C9E02952676E8931A80A5A6957E91FB7C3BF846C81A62165D
607D7CC3FA5524896EE01885054D769E06AE09084AE35BCB4D206162E277E2B3
5B17BF30A81F0E3D57238C690C0882D575EF43E9125E392056AB794DC6981F2B
F3E731E3179594FA9BC8D4019AE0D7E09A0569B22C323885B448204ACD8E2950
137031C7BF051CF4CDEF6329866460143427C6A9B9FE9DDF1DFD5DD5C8FD8B35
290CEB82632679BD08A0F5929B165DF34C474E9D6CC7C86684ACEDC56B478676
9E69BBEAF391EB102A205904636B02532C51F815A68F5F00B7276ED01445AA17
BC90D4F97976216863E1FC86E85D4A05642538AA50A123462D4F48C5F7EF09D0
BDBB8A60C44F8B7F6D6C3A25A4CE1FDC06CA7DCCCF51227D99E84DCB994497FE
C5C558E39AB80974689997862067BFEC561F79678615E202FACB4FCABA7D38DA
3D0098A5CD4D78095EA46BD4B44CE84F2BDAA2C10F2B8F455DFA0CB4B19BA68F
2E40246A434EDE500EBB8BD4D10986C0F110EAD18C87A87174ABCF4EBF022837
18F330974301B03EADCF209219746A94A779EE401A870CE6379CA20D99EC2E8A
A14636074CD8C3E69F5AFD54E61ECD52E213D6C9B18141AA96633A551B9A95B2
37DC8E6E846AE59DC333731BC59911B49D59111F23EC7B84C320AB7A197D995F
03BE0C6DDCA3EB43386DE5D7FABACC3D681D30718C6002541E32812D1FB96A6F
6348D76A4E19E11AFB3523C5586662BA7DD813F5F57CD92EF7EDE2AB239C09D0
C062ABAD4515CA267AFA9A8950F9839D736B7B6456874CE14C356779A29C6F7C
69451724FB27EFAFB14D1C528BD0F0E4ECCB1EAF5A47C12C24266D8586DD848C
A0D56510CF8739BAAF429DF2871AC379F1F55CD6E99DFB96EE7FDC0643C107BB
4BDAE115C94CC775839DC8E273A26A7AC81DB4FF6CE3388F9632FB12EFF7A98D
56F1B307610C6FA426A97FCC08F063B25574A0BEAF078623253F66BC0B7259B1
9345BDBC0EF5E2C05DDFE48E59657145383656CEB8588E82D7142506C3962D08
769E63BBF99E2F1AB3D5C6773A3175D183FB4C300169348539511FBA3383FEE1
042D747950A5396F0BCD3216CE48BC3D6EE51295FCE694F20F38669F0C192759
5FB06B8147691220B40CDED1AADCA60A7E22E14EC367402F2075334BC665F81B
1E9130A49533660FFD2163730E6308C63A034D38B4AA7C301C04DF63448765EE
4D74587D2CA8681D409C2C0CDE27BFF59B4BC0A7B2DD28FB6143511396C5A2F4
15EAA2F1BE5909442B37DFBF90E5B6D5ABD15FFD264212EACA3A44A6108146F8
1FC2587A94511912AB8784245A5004247B7574D5525B6BB0E98D470211868520
1D49325A7261DB9A393C3A5E1EF782CDA65BA25265E21569A152AE18DDB4D5D6
1AD582179E94CF3DCDA185CE763CCAAF843A2C00210F9ECEE147D974F369C66D
2AF4EFB3A15B0148E05213561DDDADF220A59CA55A1C877B23F0B11829BDCA33
4CD6951BBBCC5A78CF855938CB532FC2607E07912ADA4F03534ED4579011B72C
32FD47073FBF6278CF1FF37E4ECFEA15A4796CADBE77A98C7FE499AB64FF30F9
7903B22C3915CF663DD7741EDFA8DC6BEA055795668CCA21B10E23BA0459FC69
20067FADCE12AD0692965FB9B34CE3ACF59B98A71D4FBB0BB349D2A743177E25
774BBF7DD17625D1A6A0A0182508D3AD60840594A824B22B94C6B69923C8C0EE
5E1CDE0CEE2FFCBF940561C2877593A71ADDE50079C9C89EB1C4D02004269E4D
4E4F9DE66933E34F7CB3611709FBDFDB10B26332CADC9E1F991EF9F359860306
4337F398C59A7AB7EDD7A7B0854EADF4BF14ACD6DF52F72684FD9E56997EF334
535A50B7D6B28170829507500F642A917B7A3115F2FA8D4A3D29C4A4510AB950
F637C5CDE1460B9D1A2B3F1A9F898B8FA83654F326024B00DAD2F4FE12F86C09
B85F0BA46174973DEBE09BB23B6885F5ED9D4367B899A3688FC658392703ECA9
5499FA9D3E3AE5744FF7DF5BE2434118077B908451C4ED8341D289369B7085ED
F454F39D7AD4B5AE946C7E207BBDDE96E9AC737E144263AF02EFEC13B4B98D26
3364063B0E4937FF389519F69E6331D554E6829242F1E05AA1A3BA678F44A685
BDF2642BF914DBE32DD3C129AD742C15F66B043CD2F388F013BAD292D84736B6
9552D22BBFB0665262F499B98FABF957DFF126F36EF3A86B64EB308978941B05
928FC8F86CAC117535949F1F8DC4D22141F26CE7C97147DC061F973349732A7B
8D84DB5DE478BF9790D639AF7AD0A795B2B9090652908C2DA9C89960FBE00234
A5BF23E24457C432214A3172F61231888E7CBAE692581563B7D42BA2E6E677B9
5C8A9000A88C90F1F1907585979F1578EBFE7790A7AA4CF7F35CFF5D93C263B1
2274346D1DE15449D7031BC9A8B32CFF676E5579DCEF896A510C6C8CB4C73F82
D7B56E7FF1ECCFB87EBE04958DE7B3D31284613C24DB7B0FFE76461380B80F4A
DE422D579B34DC334F62586C58E9B7BE921A2471983401013A85D27EE9107DAA
C914B280B0C51BECAEF58C834774BD567990D22DF446CF773C580488C13862C1
A949A1793AFF7FD5B9361B00A3051F02F92E6CC1D2BC815E17A6A845EFBF3390
18ABFE4B14AE88CF0CD0246E250D2CB76CBD6593C14CF8552EC4AD337797CF3B
8BBA35576434C114DA8301F184CD292AF879F3EF17B963818EB163C42E6411A9
31FF0B5246D92387D6BBFA569D0C031572DCB2477750A241A69131F32337F052
D1D7E4035E4DB0B3E38D663D96DC6082DA88F9A1DADDB1CF3DC4044B564A8F44
4EE5F68E8160D419F18E4D95DF8148626A7AE1B721687BC99B481C1B70125D11
0FA68C1B703D2CA0F53F0390D36BF31ECF83D795D880A41CF002B6A8DA883140
81C1D6AAD4A849626189E449E009515B973F2849FC4D5F32378588BB476422E7
8203B8C626FB56BECDB4201E12E5D0AECE2C1CFB6AB841DAAE1A087548CA7917
614FD39C33278BDFF272585C28D61AB242AE10486E5A795725405624A96819B4
2F637C359422833E0846E121B318A952634E21E2E48D7FA5DA3FE8A21B67E049
8952A85AD7E72636AE538232C13966FC6E07843E4FC7A8FB20D52BD2009F6CAB
8B2568DA5051F03DCA44BF17D71CC42D2D015BAEDFBD5B00E6E5BE7FF2AD426E
A63955120F9DF7F776C1ABA9D91C0111437EE4FFB1ECA59B099AF2D7EC4EDB2F
C494D0292CBB8F401581271DFFF15358C4997861F796AA9B084E63F79C99D5D6
CC5C49044B4BB7736AC039C8540DB2BD058A8BE78B3B553BB914B7A10A1EFAD6
A6EDD26E87144F70B92511B3A1FC467F98A7E2F4511DEB9FBAB2FEDC321C7114
F6469CB813D1453D986E24853C42E8D001B7C8D31FC74A37DD52DD42EA7B5C52
5587613D335148791C6FB1AEDFB642914AD1214B8BFB43159501BAEAB263FAF9
21854679ECA8315278B0B4D113A3DE9EC13B449FCBD7D677552222AB167DD250
065F3ECA5CC54134BFCEC4226530FC5570FB9EBBD86029AC2B84E81A5BC9A644
3157ECD1A5547A76773664DCCCFC64986D6E2784456DA598B0B29B13CA3A221C
98A1B4393BAB330CB8911C508B6697BBF32C74E4D6E9F151E4B8FB4D1E4E0877
2DA4825AE394F98C8E7BB6C45E31F4FAE6A81649C8D2F6ED3EE68C16EF312027
D056A2DC66F7F1F2278479E7168F2FC4A0AA72E13E3803569FFFC0747D0BEA41
99A941E121D61A89C264FE2EB38DA4BD790E04245BFBCE77FCD06CF3D922BAA5
D994160DA08B3C937A34F49AAAF630F8CD732C7355421CA6184D2082FC1C42F8
746B2363A92E0A1C87DE03A80AAEB02CC0B80ED57A12FECDEB0D9F04160D05A9
66EC1F473C705AB2563471C6256339B3545FD74D190CECDCE04F642FA2E67987
6981D32F02CDE71CD5D01D7CF6000939E4712F9659FFF1E686CD6E37954BE5C6
897633BF02D53F4132A41DED5F93767D711C93789789B79181C08F47457739E9
05A25C3119CEA5D29D1A120F660365A53E6CE223551256ACEDC268F38D6C137A
49659CDED530037C005A5446608D74ECC7FF4BE2814877715E91B28FB3DC5DEA
D31B33CD5242B5037208B1CBC9EBF18103447074EEF3A03F87245ADBDB978548
9E1FA9548DE88CC7698687541849C5E42B303297A6874AF4E7F908F2E99844A4
3163D7F1D918105E19789F78F0570D870B847B2FB7B1B7F67C23BCC2DD15F0AE
9A812E5B7E7EF339559FA91B8B8556A11D8DE0249A5C54AAFEE56427515ECDF4
C932474A4D4A9CFFE1962A81910C6EC8950A40010719E7B08AE39BC8B715A5C1
3F34AF006781F10D5AB65FB174B21F84C9645C41D7137C68066967CF311EF6DF
F4930DE8C171F6904B9A7B4D431547E0D65894EB321D563C83C1A8FF976BB760
77FF71E425E2C9D47862709106CD71D912DC38E829452D507C04521B474602AC
A4914DF3E56D335825BD5474328B7AD72AF9367F7BFF7EC3E81A5DC54529103E
D8E5126740D42167666F00BAC492728C046BA482AA6119C2BE596439B60F06D1
AC62A8C48165DFD944A4CBD7EBB07AD0EC3B50DB0CF24FFD3F88FC24F3FCAE63
E136B5F4AF87E1F6403FE52E1CDD4ED5D51225D9ECACDBCACAD06C7C2FA0B9DA
11325898EFA3A8666010E37C448AB0EECCCBC6EC8F4815795B09D032C4E96971
E63596644B2CAF73C8DE7386531D99C0FEDDF2A9BD015C10167E0E57358D9B91
D4964797A421EE99536D3CD61DD40A489E8C77FBCE3EE15C8088A39CDCB8A6B6
E5DA9B0B7E7EFA9DC1F080EC6B4937AF501412614A716A67020613683D44B0CA
9953BF8444B6E7D0EC1C2534CB9A201EC2858E8B13ABCDE7322323B3A2A02A0B
F388E89B49BE018CEDA22379CE386A13FEB9568F66F15D2B2A9D73011AD6731F
C67E56D594B8DC3681D1762E66BB265F6B6C45301FDD0463267676866C87B46D
1FE25E553C4521081A2A15BF986954219C2577014CE55CEE9E4D5B2FC25F7FC8
A7FD6219FC44CD0E30CF5FE94C5F95054EB0CEF0A452F91809FF91243F18F9EE
020A5F6C02176DF5BE97F6769D042BC46D3D72DBF4A016B740E1386C9B528CF7
6D371BE02981F1871D2579B92FDFEDB1BDF7F81170802918215DCEB88A385DCB
F1E987D90B6DD105A7FABDB6BE43AC2BE0FBDF741653BDEF501C1F0525BAC1F1
9DD63E9BAE8080EA1C2C56EDF768143E48E5C786B40886B1CC025373130AB10F
6A35AA1894A23651DE099389D561B469BE5C020E77C63E035056CDBBB9F4DB89
659D42B100853BCBD09C78310DB9B2DD514EEDC7E235C3DD55C62FA36A90BF47
EAD2F22B1DCF6ED9FF7180E2774D0AED69D41A40DDC0CAB3C1D9F159C548C5F1
B8BF2E08A0E4F70CB629D97D55110E6963C5E40D51E54A178BE26FAA4DBF799A
C07D44BAAE32900A468665C640EC68F07C858ED1C2285534FC58B1313F680F8A
B308EFA36C6F137918EBFCB5DA02F2801610E1C83F93C1C1CF3FBFF392EBCE43
A26BE34330032BE44DBDAD7949A1D5DA6D0DB668334F26BA995492316AD3BDB0
42C7035C34DB16945EAFFD6C9CCF54543E4C8120E9163AE2AFE6A685E803AB8D
7A0E0A0FD87089E943FAECD6A76F9BCA8B7AD1BA22C50FED47D6ABDA0678EE6A
6DD1DBEF0EF1B40C10108AD5B484A6C194546D59F64A36225FA99B2832C8FAB4
A6AF341B5335F66EC8C1D8849F39A9CFDFDC1A962835286B62450F4D959C045A
930F5BBB56B5F07CA71A34878468F0493F6747D3DA51E23C1579810F5916493D
506EA1801280D305BDC361DBFA9A2A9695BFA694CD4791CAF611884F55F1093B
0D7D3F6CF6A30D67369C9F636F046CC24897AB0DB545E707523349225E6B8EB7
58ECEDE8173B87B4A960CB3DC710F2BA8BC75D30E26C4E8CD360FC3396A59CCC
6510BD8FB40487C30D04469024ADFFEA5B64659FE79B247DAF2473738D1FF268
CFB76C4875429DDF295E2BE8C8100D963592FD2880C051AB7706D8016A872CAB
8C3DEC683B530FF9E9E77B6982E65154225DAA397A7BB4C82A4F1EA6C7682F1C
A89CECD21EC93B4E4A19BC80F638158DDC1B6DDD5CFAA56386D54EA34F12C78C
389CE68CBF155740E7ADC9BD553B36297F264FAF99CD9087C440FAB47AF8B2F3
D8D4A70E44893CA67E62BA9032E0EF796E955BA41BEAD186D51255B1ADC6A448
03EFEE1CEADD476FA75E08CA8C8918B0188D0556B7EADF5B4A2AE9B3C0E326E0
B12874FD20C49BF08EF65CBC703EF6ADD2DB56EAA02A6BD70D2348AA82A46536
49B7CDCAE1C5DDA7520FBA06C75B30939509510F4DD747C313AB7ED5110FBA47
9A4E2D4276DA273959AE5A78A20B76ADDD273AB7BAED9582C4BFB5505D045EAA
B9003ECB8B40232A6E05D17964DE7CAF92B9B9D9B190D44EE8874E54DE3A403B
1B5CE76BDCEBA951B61BA48FC22AEA6EAE2B216574295C68E10DA34D207E2D34
42875B2C85F9F251EF00227921148BAC4E188D827CEE8A4633390C9DACB4E6E4
DB7A4702CB50027F31B68D961FEA382EC66A8B8A8C1466323FEBF1C195C10B70
6AC8023F1BE46FE80140693CD694D3A9870A600DB448D32BF2E94DAB5E99D1F1
43795E2A0F0A30C13DF094D14F4872A43E36F66BBF7432E4876FB3C6856091CE
F0000AC12460C07245CBAF2AFCB5623DA1351D0252167D6E8732E2C9E0616A00
A8CB4FBD1287515497FB092A1DCB870DCC880C62F31EC8546F33F02AB83BF25B
20A934A7E0277B09741CC01CF04019C61F87A5EF38F7EA94467B90399DD764AD
5CF3EAB361ACE8B8A70A7E46F92001D2C7BB07AD60A5684BC68E8477E54C96E2
4F20F0E27447465631FDF5EC961DCA08976D22A950DED04327F2B48FEAAA5B4C
84BFE594D6014B1E32A9024FA3475B5768E19607E481BA02933A038EEB4F5069
7F314ADD5A28CCB7C4BECD62F39704CB9A9D72170B2BAFAD6F5D1405F6538F88
EDDBC340047733AB3AB0D27866E50D4D261942ECB01AE636FB87444046DC3EA7
786BF97D0543C285CC72DC550BFEDAEEAD411DD89A32CB8A923E20CE36760C06
CDDEF25058065A72AADEBDDCC09B6D13BF9149A1E71F9F41CB8BC1EA6C4880C5
31CF4859A76B8B3C9D1ADE3C1E4BA1EB8855BBFECA191D4B80212DED90D4ECDC
F218E225C5ECBBBFCB8105EC5F2E66A7D2FDB7AA75310A0838FB4066C50EC29C
AE14BF0A5C433ED22BA67A0C17A957594EDD030347920EE6801173F81E97D315
BDF73A8DBB3D4FFBBACAC9230BFDFA990C996F1A54AA955374C836A0A50D8BBB
2E0EF842E744D6F2588DF12C8047CF303DFD961CD5057F44D52C1B5FCACF66DB
19F40C7A809C75D22373802023DD465F60E5E5492F17615F49F21C24CA057FE1
DB587C8B2D2F0AAA0243CC45C309F4F2914543994998F7C1DE50710EA72B7033
6C1F828579E5F4CBD315A3F4F0D4A20862E4700BBDB6F3AE7CE34A60303423A7
451C892BD2E3D41021906CEE340F1F20F4DF533EB315795037F147ACA4849372
D69BC62743F758B67B1B1C6FDF84C9B2E9E9B4798F164A996FBC6332E5FB95EE
B520F94E0E5F7CF9D8485127DBB7103C432EDAEC18CAD42166EDA7834BE594A7
175A401FC88D7BD2F3134C989D19F0A1DF4CAC43E98AFA6E38EC49C9CEE7A1D6
F643D0AB1C3D931441596D1E6553B1A9F45C931E22B14E667751C86DE0BD847E
72269791E52CE628CB54536B8DE3C3F61076183D794D012E55C69242F195F758
55BB68EDE5E0FC00A2509E14D9A5BE53CBFDE07B162D1A252B25DBC52DCBC027
8D296FB8094DF33E7E36312287EC7EB90CCB8A2C847DBD3E2E9A7EE41620E83C
8ED3A7BE3324194375A2809CC5ED83A2DE81B12C803BB279C2B0C3ED85B466F6
4C52F017B20CDABB85D24452E0863D85B186691E82F38F10ACD33817D7BAEB7B
955CAB886DC382590B1722F95F6CEA4642F2409E506EDBFE9AA1854AC5541501
84FC1A299434634D772D2EE66CC0C4FAA7B76D40A667402DD84B8E4AEC46F1E5
763C947FA2DE5EDB41393B240AC2FE49000406F334DF4B4DC2501F1CF2052775
845D7A93FE32AABA9E764C00E940117FE5A42E524E01CE9B56505A0316446E2E
1DED1078831040FA2D93BDE9AADD3EB9834EEDEC2BE579D52F0583C05E8BC81A
B4A71978F71CD6F5E09E418B68C24FADF47C207A5E37031A4C4A86EAAD87BFB1
ED2F719EF32EFCDD9467958904FE0CDB65F52BA057443EC42BF4EEC66BAED4DF
D74B7FC3E50BB18E2BDC5212801CD8025332EF7765213B7D57A87459CC9EE0E2
7F64649BE08148716183B075036DF7634B34983FEBFFFFBB7464003A1D56B336
C6A17C42787F97BF93CD6E0DDE7BF692895A2301231708623163ED2DB636BA33
208269330C24A4E71C4823EAB1A01C9D57853580E6F180343DA29EB6D4976B12
C660DE404FE29CE4952D5EAC4B5354D029FA0684032E731E4A94CBE1DA793521
47BCC2616BD1BC5419D44AED90A037C3389AD275069A7616B3D77A9C71F90236
BAA059F1E84755B0D634827B5400F77888D58FA15FB0DF8ABA04200678179A3E
77026355FDD1C3C40F2D73104612FA58833A4EFA2C2D2C759A9D582ECC1519AE
9A23D52A6EB95161B324F413E6A2F472BAB2F4AECD6D198EBA263056B5AEEDFD
E9E38BEB88F452F56193C9D6D357122AAA06C55A90405AC226ABF617176B028A
8325608946AAC90B2AB081EEFBDBAA3F21F171B38D2554D7D0F73C71CE4123BA
815A52B2E96A1E63819159F7D3AA4123C21E8CC1921C7F3EFD70926085DBB38B
C6B37B6AE722DE352C7BC9D26F4B0AE084C71D81C9974DF9299EFDF7A08B2ABF
9C120DB13360AA54407E55B37F756E3299B4C945547B74C9AD585854C18C876A
657BBE617FE2C4465DBE0F61B1E605EFFD2879E32ABE545C9C263622C237BF6B
D3E4AE20A33EEB579310333ADE99D124660BBA386E9E02159AB6F03107E692DF
EF079B3D9EC972D59920550497162B435DEB3C8C4FCE3481ECEC977F9C78F5BB
09727EBC06D1830262FBD40799FDF2175CD096CC40E931BEB0849649E6E97854
CED6482A5C09797DD228834701C9BB042EDA045EEC13F5591BF9A75474C28F95
5B780CDD78284B6844AD72A716B7EB579A651D90BBC0B763C1FEA327DE50629C
B2E89006D9F715A4DC3CAE1703AE2F65730026E39A6BB094B3BDC80586094DF9
9231CB2854912EED005BB2A10799477D189A12350B360D86A6335F4E0C6659CB
155111FF2286AFD0283F083964CAE1E93C61D34A580E5FAA94A94FD00206EF14
A62A0BF747C382A588DCC264D4CA51C033C214DA6316A9C7D10EE9BF96748261
BA322CF0AB49E06A560F3B3905C07999DC6A984C0E944711C77542A66680C933
9C7F2D5E001904E1EC8C2EF8E5F422C31A65013C8296EE6A600246492491E843
D4825D99A63C68C4BC35B3493927E316034AEF89252E9B298E4FFB6582891F08
04758861A205D5B16CDCDF3F331602FE0FC138EDEFF078A89DCEB952B750C0E7
AB65B7BDC9F704E15D7FB1F972B8F190E47ACEA4058C5C1DF8D1E85D09B6F89C
AD02D3855186C76CD748A31879C43613F0CB5A6FB51AD7259FF7891FB18A3A74
6FA3102EAAA9291D7FA918D72051DB6CFBA44520B5B5689C87541566D10E8D0E
067E2A3D0BE8B2D378E5E3EAAD4EA0CAA97CE8D19252843B5D9A3073EFCA93AB
9C60B4696B15B25534989DC06DEC3B15060C553536AFA1AB550740F72ACCC233
96FF5DB218AE2CA8EE74F547200678D6AA9626B7DA1C4BC9EFA3BEE0D63E0DC4
E6F253A60B2B187AA89FE990F80599286293CA59BCA5728615CC410AB3F3A505
21E35F74F8FE7D14B7B44BBE5060097F5A4FBCDC2363DB55066545362EE698AE
B29466BED98026AD677C6D224DA5C44777DDAEFA56B27091598B2DFB77BC1215
DA71E93432279EF8F694AFDE8C03B25BFC2B5CDD259155B145FEA17BE1C65600
4E34D740011D27BCED9BD83074E383B57DABED0D50D009C79F23D03FD72ABE21
915A4EAE476D56FA218D8504F435956989933A3BDD4A5A2F706D9DE31F0F6066
9F73F90967864B10A9C5FDC801B144AF82BBCCC3E63B027A4C3380AAD262C1B3
58E0D52FFB821C17B58701F3DC345329C4FF6C61800BCB0EB3F63364E6189AC7
65FC2C0D760DDB11C4132BE905C518E634F676C198AD65EC1C1711D2355FEFC6
54EAC975BBE783F34C39CB080E0FD10E0EAC41F4C6D93E2817707FEB437AA741
C61FB027627AE75A99A11ABC88872994DBA183551CBD57566D6B2F32777BBD74
CFF9C797041D0A982AB1C0D499957E9E0B6DECE40FDF803344CB844CCFF0B659
99F5BFDF01BB8A52ABAF034D50D17F2A29BE5574666D8DBC0E088A54282974BA
1FD384260DA97AC7DC3747D672722B050AE82B5BDEE23ED163DDFBAE2F2FBE00
F7C8894D369A4741B505041A3D43118ED30D3D9000A6AA1F71D6CC6FF050256B
2C5E371A03015901FD3A2C7D621980EFB08C54EEF63B5F2DAE567A6ECE02FC42
8C518FD1C5BD525515B6BD88E2768F7205F44C568A6538B09F408682022F1976
7298C6BE4A2B62BEEDCCA27AFB44A960452449EA683DF15336D07A312AFB5522
95F850350F958C0BEBC008FBE6767D8DA729B9B58CF50621F88A171339A4A508
807C71B7D921C079415169FEACD820A089BFF92AD5419695DCB32CA7E74D6AA3
30B97BFB4A6AA66A805ACF593CD86F51026946678C23AB5A20D6A65856B0484A
A15CDA66C7BFCCD4A4F8930DE90DBCD8AB3972CE144A2815AA8109881C8DA477
52192D0319FC8446F01A271DE551C81D16B5C4A8C069A88902B252BAF1B9C0EB
5891CFFFAAF91ADB6C3C8E93E5E8FC0CC4A12149B73EFB8FE63A1D6DD6E3F13F
C4268BFEB3A18A0CC39E9568B164BBF22FE6F3763CD9922FD890F6D301CB36E2
6C373425A53658E3D5CDF47B2B9793E3E2CDCD508876E200F3B1C6FC0878C366
3AE6C6D74E85AFF56B0F9630FF48D6569DC5C166ADC1F4A5560664A99038D69D
48D76476BF5010E5E251A426441586DDC49D747B2DDBF2CDA55688B65B923BA7
5245220B1684AB98AA8ACECBA0D84B931EF7C67A46BD9B219815CDCA8ACA3586
F2BB76BEC63538EB4FBD03CEB58C7EDF17EEAB9CA3E4FEB31389910EA623CA02
C2C98D02ACF9EDF9100A5C4DC3BE1FDAFD9348548BA85064FEA8D15C12D67133
5B459B9FAA8AB24C7A91068952311D760A1F9234159E66AB7D8607B409619E79
F242CF52E618AC0DA959FE8C8CF539137A54C6C787287755650CAF0760C2A3EF
A2666444DD3C1FA731E3F8AEA4B6AC209E5949F23F424725D6934E5F5696C78D
12C4F60045D5C9A4AE6FF136B1962F62E9A42B440F85C808B8269873E3324DEE
16CF58637BE0176F7A3BEE98855489A8F2F1C45331C30D2D0F083CEAB1020D89
5E1277AA8054443775A76C52EC37CB7FE36EEF28B997BE419479C847B052C16E
049D2E6645239263D0B6E64191746616EEA51310EA730FED64195A91C18CC866
379DE46AB43523ACC3B473C5EF5EA99AA922FAA53D9D03C54706B5E9C1C344B1
D6E9C29C2E65C25A7376AB0951A98F6689070F13401E6B93C4F789008648C108
160DFD6C6A8CB7CA90F3FC114B820159AD320DE0C2FCE37A9AF2B204C39ED399
5F7233883FEB9DB2E3AD555C5F37AEF0E98A44F417707E4F3D250BFE64BCB927
DE1F120B29DF2C698AB39B218EB279F97EB1993182BB719800E1496A5173202E
B0371C21722E670B45C0580FCC220381D507F368FB8C4D9458DC767D04439C3D
09DC56E35FFD2D5288991087636BECAFED14399A3C13196138C2D5C101C3168F
91412F0C668DF5ABB0728C7D2ED3C0AB278EDB7FAB8274E361D468444179385A
CB356B97B3FD25265F5586C35983E75E7C05BB68F9913CBEFDDBD2A09B487823
9F35C4B188CDE7D6D2D4E464FC6E82E61996DF6663C717536ACC410871C952C7
83144C5420435C00C1E8779413EDC2D0ACD61E84091D122ABB1E38913D39B7A9
714834A884A4957B1168D1E1F46742DC29B9D79BAD1DCE82AB4F8E7D800B6DC6
690E945AE88661A9F72109C79F2989C29FCE47F94F2BFC3DD3249FB7635EA88B
E9DC8743CF7851D47BE9ED261A11DD0E1F9BFE75CD5E2E3E56ECD95D902E65C0
F2167DA807765248C2F863BB5A37273A36AAD6CB47440014F30DA75431630A27
28DCF89B21AFF85EFAB583EB02A7A3A0C614FAD038253D1C240D05C00D992840
CF1CEF6B92BBEE703B1BB9F607E527CB57A1EF84B8FEEA425E21913CBA31E026
7C2BD4636B325A18DEA0BCA6304A8C64D277EFFF797BB3C317163F97A413E9AA
D8375D96B65387D478FE6821118FEBE1D5099E9CCB0D8554B87F2738E49E191A
C799B87520299E851534408F39443AA946A7630D18736B65B9D2E3582B4C98B7
3630B99782A2FCC723496560F6B5B85AD9EE31C3F2B99E1F6F2FEF9DEA68F97C
7CC557F8482384C4B66FFF496B106857BA964ABF5CFB3C815F4EF44DD5BAF85A
8C46162D1D7A306A1C642EAAA1C54F2F501AA172055892C47614A9035E7EB95E
B14F45269C5224AD15BE8F1A80D39F1B836E50FD1124CA3EB06E3DCF1C4DC905
B33E349219107F874CFE4F657DD9385ADA35E22DF215A5E52859C1EA76B315A7
82093BFBE9E7AAC7EAB5133711AB72B76C72F09B2D5BFEDD9348D5983E04DAB9
6A634CDEB686CEC5856582B306FA04FC210E9E3DD63F00738AFFF0F2903EFF7D
232F53583CE2ECB852105B7F1F884AFCCD3B642C0A13BE0D40D17D352B303F25
18E05CFDC4DFA697683ECBD5F8B79423A6BA41034432B5E3928F788771E26972
A0AB07EBAB815137395B44EFCEFA299D8ED3336348ECC3B789133FDF8417EB93
1EC402CA0F2450CC18B4D22872FA328070312D5F48C59537B1582FFC314CAE50
2517B5006C7DA8B534173F947839FB3654757E4DFDCE1FC102443322DE8304F5
4DC7AE73C7CD20097C56CCD3F735589EC2855ACD94C2BD0401740C0E41DBEFE2
1209DD13BB4F4022B3099981BE8BECF9CA510B476BBCBFBBE07EFFE8C445D5C3
C6C486658937E811DEC0282EE3D0E3C1A31E27E6C13FC7FDCDECABE30FE2A22D
8E4FF4116ADBD39BA9132F17A32EE2FD7B2435ECEB0765A665F3B996939584A3
5D27E2785E670A248C72AF4B9FF0939F9E43B6A83BC488F512F8067175476917
012FBF01157B5EA0BE89FCC96B0433E1A5B5C42500696B7E9255484B990A02FB
8D8D33FAD0EFE99AC276C13A86EF3DEA537DA20A42453C2146E264C3B78DB668
FBCECE86D88AB33171DD10CE126E4E5478A19B2ED5FBD147B0AC82523E4C2F8B
D7C65B696A7CFBC5F9D0BE4278F30F09707C4F246C5B03765046AE4CCC9192E6
8056AF21CBD08A293A6588FA8F5B9A516ACA5FB0217CEF8518BFCBA0E1FCBDF1
13BF6CBA03C00D2BB80CB291F8E334678484A16A9E957BF0167A6CA229FADA3E
22B5FC343BDBBCEDA32B6ADD0FB43E120BED34DB66E8D610F9A61C9B8F56EA17
F78A01800155AE380DEC3842751B0C9CD72E6375527ED9D7A94F36586958C707
F0205C76124470DF7DA2D3CC7DD1643124E2669793261C73A8D5D6C8EC22EE9C
B831DE55BBD77D3EA746A200EFA867B0A922D7E27404BFD025325A2DEC8E6975
1384DC7263DFB82B2FE62D3111B6B5FA34108CE6151D158AA7D6F4DBE64EF673
8375EBEA531D24870365A38A284C450C6039CD19E57BA8C23FDF1963CCD247EE
33290DB591D655C1139A6AC2DCC64289AFB06D2ACE33BDC0E2A514C9F0747F3B
2B290F2C5BEC8A1546904C728576A7DB978491184C2BD235293D5CE803D0B1AA
172DBF69C35293DECC62F96BD604A2997C5ED47D5A36731E24AC2E3BCE538F58
048FA323362802429F809E3B0565A1B21B2CFFCC4EF244655420D19412CFD796
E3FB4F23746AC0C43E6AEAD2E314047BAF14A8F52D52DDD8F6C69AD7377FEED1
CE8031E1273A9000C8139BAF088951C2DCEF71212F3C44BA04A75CA357C34155
25CA05E017F6EA82A4867095BC653F199BD875EF9720D177DF67BD2772725630
06C955D9FF7B893CC31F7949ADAFA7FD22C8F9537DE34C7069E855D69DC92121
41AA5E0D9097EEB91AF7DBA6B9C3A82D258DBA2E17C19C92709F9904BF8136DB
4C8C3204CA47E05218F973939298241C98830B5395F1A8859FF9D42D61245D26
0E9319963135DB43628938193BAE9756F7BC00D85F75BF5F32B350E2CF46BA0E
8D0120BBDA2C85411070D4FAD1B1B8D4D063DC88B48554A8CB195704EB888E84
A97780D080483D237199F4F861765881D8B88F023A1EBD06F05B67594FAC20AE
98EAD48AEDB936A29293C51637887CDC7A964E28F583EEF904EB6959B1D3A397
66501BE07F77528D00E7BD7927D8E0E2E603A96CB34B308EB3B0C58C2E0972E3
7C48E9A0C43C17BE69048739FFC5F9433FD42EB692278636E809C8D933CDDB28
0F055D66BE2EE798017240C0A7BE4C0BE62C750112BAB90B4CBB2C76C4E51335
8D0BE7FF5D5AD4BAD7E3D516D09D38D4C49FA268C0A6B5EFE191B726EF5B2BFE
DF4CEFCB3FAB423EE2021A2D8761A945D4A58898DD6564B1710A88AEF94B888C
52681BAEE031957505AB9A92AD9A55EE0636C143463EF284A9444B8321A54AA1
B3BE277E804C6BA17F299172AC3A4A3FC39EE49C613EB234EA2AC527C5E0F43C
29B797B00D04ACC28DD3EF01E888148FD13E5CEC59FF9A295E5E09A7121AA8ED
08D5D75F78405FA20565E8593A4E99A03A35974930296683A898B0C9B0D6A251
BF1E8DC9D091F67A95EFE82C75EA7A1E22AAA8F03A4588EFBDF346148A60B624
CDB55CA9534511D08883DE4ECD76DFEF5D2616577502CA4320993CB5D9CBDC8F
8522001F82A16CE307F173C0F69BEA09B37359A4EF5EA889861CD9A7048BE25A
749ED27D24AA7B3B6BA95434EFA36E9C658138221DB4BF31C9A07ECD0F9A0885
323CC1DBC243FB2AD31954A1FF65BEBBB1FDE4C7AC466E898A32F8B178FEFBEC
B1DC8F5EFB0183DF55429E396C9C0AF8D0AC0CE02F15E45F1353E2CFA25AC024
4C26ED6EEA47C3FD8D9159594CBCCB61180AD74A294C13ECA61A8D261B3A87E8
0E2632ED117F8433D7AA60880867F6D6C9BC59F6F986FDE0099988C55159C588
51C3B015F871AF9DD537A847D6F72E2CF18575EDDDFEC4E1B245534251BEAF9F
9428E3695E72C64B3C2EF23BE1C2A88F617BDAFD3D75F725FF498C30ADAE8FB6
E33CA153EB711DC35516B3A39FC38E6DA6E587C23E832BB7EA7400124F1F7D3A
742940A087C98F6CFD6ED0EFB408401FDB60A2B4826E61D4289E0B64F7A89EB8
D386563BCDF203B1413564585246569BA8C93D4A5BD6C80FD9D0176189BD1D42
2B2CF645E0292B77A2AE9BED6EFED69FED9C695B6D4D06CAA2CB08BE135BC86E
0A737FFC907836765A640D7CE72E528EC29E132D5EE4A8CDBF315BCBC1B4C073
822303211752C77A25EA53D4BCAFC1A309A72FD9C8DFF9E42091225BD1B264E9
5E31AC92BB7183E58236D47999A1066D8D27A2581CCE0D2F643A212E29617C2C
FEBA5A6386B82D3FE9CE792CC9CFEC4B8A06F4C66667E569110DD83F4AABFBA3
428D803824795F928AF04C833497F7C4B1B692D0495AB561F253C32E9EF3DE51
0D05F01B979454C6280A58F8BD08C5F066C4D6E151ACA5B821C74BE4A19E8622
9BFCBDD82D05D7FC8FD35C3A2FDA178DC51B0D9F7E1037D75F489D2C0552F8FB
E17F4D8771BFC6109E6D709951694ED1F25751DFB11CB8C655A7235485B7C180
2CB58A68621C4955708B11F50E0BC0987736A3A5A6F4EF2FFC33D38B2479406A
FFBD2B87F56AFBC998A8BFF455DBD4F8C7D91BE3182426380774B94A95A7DF70
A4AD4FF3A6CE3B66E429E4D75379E1ADDE1D278201E415CAD59624BD9A18C85C
1B4C72FFDA9116B4E8CBED2FB8719044CFAD402ABF22021DF55B58E93F2E2D3D
DB352228EAE762E2E5F3F0D68AE703A06B7EFF05766E9640ADBF5F4C1B7C756E
8520544EB120ADF923F763A8F3E79EACD5C3AE21E8E0E5DD13EE52E530994176
F942821D2B314893F2B9317FCF4A5FCCBB1C68CE8D7F8AEF58EC303E62B84EA8
10FCEBB293DC1F43428217F4AF4C6D56F6CBFE383E29ACFF6841A00694B8C4E1
2D9F9E97E5DBAA2871665E9B2C0C88320D06B82CFDF159D52FD8455FE6FB031B
48D904C5120D434E1DE9810C4DA5AE41B6FC5168A1757831BB68863A3761BA7E
6882D804A6EEA79B7034C1128484ADB7FA41246F7B4DEE382685556E5FC2A8BE
210B248F50EC7289112788829B757D4563DFA8FDC2A66E45C96C8FFFBC318B6E
6593DFF6C5C708439E4EEAE16EED2627A072AAF76F9177B6D9C1403EA94C9B96
CC5168ABAD8FDEA9A92B43F3C096FCAC962C6C24DF5B892BE187B00481144E14
2B083328D1C70ACA3396BB25213A0F8087A08EFE3C136A1EABA23D6D7EA98B42
62F9F5C1186772E4BB26D59398A7E144FF7B989638A37897AA76268F68CF04A8
0A72222BA8B515A3D23ACD78645D8BEAC5C1406E3FFAEBF3970D61803C2301E1
A062EC9B17404DB92FE94A1B7176BB8ED4B43FE61A292A7BE60CC0152340DCC4
E14E4E4B292FBDEC55AE303F1ADAC59D7F6F2B68D28328C1564A98C9DEC98D5F
77ADBE74940E3418BD0767772DF1FA7FC1DFB199C117A4B48B3B60A98EA819BC
A71C8C42A22E6C3E62D4026AFAFE2782A21B7A6DAE399C1F89408DC4CDDB1A0F
F9F6F65EFE0BEFFF89A5599AA29CC2BABAC4A17EB9CE2C7E3E02F715161E7C7D
BCCC11FC92F9FBAEAAC3B3A5CC1C9744253567A7830362372E58C26311794B78
307D3B0114756B82C2962B78D05373B6FE13BA645F5FCDB616F45FDA42F9EF87
31F267139B55C88180EF8335B49876F52EA3123280277BE4E8ACDF170DD0FDBC
379EC3DC2CAB97F476CC8095EB1801C02CFFFD25C1663478D1C641B19B242CB6
88606686E984EC2061DFB90765BB8000DA3E929B52F207382364B1C62AE8311C
43372C8F8E19F95A52CE74702030A3356FBA2E66131C9991A2CAE091BED2FF36
1ECADB0F68B3324E63C2C65B633803822481332CF1D679F5BC882E15EA2D1720
BC5258423ACC34121F924F2877EBD9C05944518B80A83A36DBB877AAC2CF1D2F
AAE9440B58A6AF1B0838D8FD1C087564AC9E75B09E123754F7752507DE77C8B3
5CA1A3F7D176DAA7C5C1F4E3A05F05F21E123CEFC8CAF8386FCB9239BB92531D
F64E73CF532923E209E8F48A84A163CFEC2CE4D6C0774DE821255A08232EFBD5
3E3021816626402409104FBD837225393AB926267FA03B2CCF128936B1DD2CE9
FA739A2E6443BDDD8AB8BF4806C61442FD170D00402F8F3DE9FE43B77F8D00B3
E907F9C34B84128B28691AB673BDFFE3FB583B439DE1F82AF6150FBF9F752B6F
2E8AF2AC71D28FD9F689CE20D69CF2D62D58FCDA0DDD2D4AD3C22018A92083B8
1C9CE2A3F971A2B349F6EE1EA77D38B68B333C9E39AC0BADCC3DC3ED40303FAD
6455A5EBAB90CB25BB6DFEF05DF58F1327470CE1415A3D5EE9BE0D2EBD7FE44D
0BE14FE1C497B2DAF5748CC962643220CE104F65B2171CCB0FBBBC787119B36B
35D894EDE23DE3B1A69ECE12BABA83232423D057D4CBBFAE2B64F071A7ABB75A
72D29F075EB614C491FCEA283F4BAFF27DF44E57BFCD35762F5DCE9BE16938C7
7D30F8E32B412C4FD104D81536B84561884A8E27493FF1368E577DE98E2DF890
E088E0E507AA1C288822EC246205F641B59FE38041F821B683B83D9DEC5C7FAC
6270508BFF511F6F80C2B5C808295EE6904E343A6E60EF632683A8DDB8B8C473
66EC1159A520129C676381BFA1EE5BAD64826E1FDBB0576E31486D51A2BA8823
A7EBCAF9809786EB8C05659CA9415100DA5587A36D97D69C33355B1564D39EE1
B9E2F3BEEC480F78C8FAFB5047495BAA28185EE57FD7A54CDBFC948B644276D1
06E370628EA158B9DB4B6A896C965EB0B03D4174E80F93227CC2DE874BA7B591
F9CC70C0D147E3CA5209CCFFBCB5378EADA55F2D7DDE76E26C2707A4963D1702
3538205FDEBBE4EBC38B51063614B619AEBFD36BBDBFA954DB76FFBE2AB5FADA
7D5CA2477A2DBD6E7A867A2463DA6F2FF66F348E88DE2A948E2DD9D7F7D4B5D6
DABE0F12B5D9486B5C8F6C3CD68D370464FE4CB5FC6F6B8CBA6C5CFD38240500
F3E79C7E0869E8264FD955EE66C51A85B029748CA8FC9BCAF7D96A0ED5FA52BF
85003C48C3FAA253260035DCA8B489940C9A0A67224FD027A8A82B52BB7CD602
F27E83284E50261CB501490BCACE19F9250A300EB455CEEFB3C88BB819737898
873BFDF5A9F44ECC5B23E392F6005D3ED6A42423053D4CDF77E842EE89EFE404
E31859CD079C97CA4DE52E15C876BB6382395C03A161BAE9E66A5D1F1B70EF23
8C02844A788FC33E83103CDEC72E9C22F3E3DE7741323E63ACB2927A0B37B5F1
BC381A41D3C3D54AF676A1454FF20049D7BD98B07ECF15AA1C944C35A5450294
E74CE99A2F821C28ECD4340F26D635C1C47D9C940D6DAD941A255284A41F3DF4
D93C8C440D4027A85C35B231F77F2126E90C387C303138FA5EEF945BFD33A4D5
AAE1CCD2BBE0629A75B240534C107E16B63F33698286A9FBA33C43A1213C682E
7635089FAAC4E9A70CA3248165CA32723FB1E5E0EE738E5BDB148A0564F91618
037BA093805375693CA4B35D0CFC3CBFD724C44C4619384831994B40EBED865B
976D5CBAD20AA587DD94603027BFE1F15815606A1FEC353F5901718256F4ED65
1FE485658961A3CB1CC31255CE22EBA058951D760343C6B326F85E89ADE96FC6
F4206800187781DEC84780590B02F9A9C8914FCF974B990C6639323BA58667AB
EE6E6BE7F4050A732B877EA2DED6A3748110173EFF22AF5CA05F246F70950A98
B8F8F99662949E2D1B7F5A905DDE99D10D475B7647035370B12E0095137F739F
6093FBEE7B32310265980B53E37142C905EBBEEBFACFAFC7B22FE71C8709AC88
566C1DC81B2AB3071C87B46153D534C52B4B87C4C2527DCEFAB779699867E723
857BDE14AD95F882B6DF297AB320C13B68C40F7F014D78AFAC1177AA42393E32
8D4BA1BA532E32F8827ECF652DAF5AF28F6E4D049487C79C7DD7596C207A8B33
A15F81AF245775388D24FA0AC72FA46865F1AC038204BB8A52CD54AEF5DCEB54
64EDF98D758E1F58080B26D28328B6E5024925F92E1B6898AC8524259E6CB59D
E1C62885642A25CDF677ED6D25F3AADFD53FDB3ED89AFEBD17F0FDC871FF3384
577F9E626176DD900E3E01CF22D4D27A30A70E8A627E8785F83DE8FFDE4B46B1
3EBCE5D8E8EB108C0C2777E7D879310C1719EE4151102D29E93BF6AFBF3AB9E0
B767D2CD53DEE58D28224A2130D7A1912C4CBA914EA5E4BC1A6A0D7B8BCB4909
5EFA75F3205E1FB7231A9FD55DE7991FAFA42700AB38E1B8B600DC7D843C19C5
DC23E02A998F5065A915B12ADC58BBC16B4CC011F53AA7B6CF29851D9C9A71CD
029869921DFEC94555082B7EC79A9EB17D550C990DA32E151F28C0B127A13242
E7B3B9E4D62292A93C3264C3A543B61B1DFF38FC6503A02C8864D9121DB7A2EF
DB864FE9B9AAA575477916D05B9AA93D7D6CEC1BF1D5EEF03B4B1BB51841184F
8B493610317F57B6B7AC8363A360F6EA7A537444E18DFE98BB1FADD0B0AFCEBE
CA2E632FA0B4A13EA9DB5A5769ECAB5CBD5AF5A6771D14EDB321C9E7DD6C4D88
8950A9C7909C5E8F243F7542587462203D57DD65167597D76BEED158DB3BE241
D1933BC3EE431033B9645D5859B1E7300F78B0CB2FCFB1A9AFA9C9DE4428D243
6CC5539C13F7BD0362C387EA725DB1C723E823DEA77E34174144F78A8FCDCEA6
ACB57C91AEAB85FC3F8951CDE282927A451FBEF6167862A987D153AE53431DD3
267839C5CE30A4D01F1D0DF2B72CEF862AA39757F96E254AC01F3162295E5C1B
8D5BA05C95AC92C09E96271E29C31B3907FAA6D1CC5D717A1E967A45B574790D
72DA7EC3FD415D7604484D1E0D0AE5A2DDEDEA02E24671A857670F92510ACA7A
FDD1C0B449213D5D6235C24EE4FF7824343054254D89A4B866B1266E656A9D2F
266702B78E000B6FD1D2C0BE00D216DC6A00064D7077526068D0F5FF152076CA
412DF7D0E0DA7710BFC2000C7BB96C607DC4975973EF5073F2056BADC9260A93
4CB00243BA93B66503FAEC49BAA6024B3868C0DD7737E6F1B83FFAA7370A4C8C
8AED34BD3D3ED298D1431847C3FCB79818A6D660257C99D47D420C1D81CAB330
B426EC30B2E6B778E1F4A994691CD1E265DB2F5297AE6650A5F6009A36AD4CC4
40AFE92546DA1123EEF132CA7B9454D152EC1E72BBC09A8A85FDCF9B0D79922A
BB629EB1E9E5FD1AE015332ADC0101526EA5E7E8FDFC1C5F589B2BAD2BDBCAE9
64EAAF36582FCE192C381224628606990F351B26E29A3F46A6FEFDD002D825E1
F8B08AF0AC072425642A841B363775D56539FFDFAE84ABBA4C82DF294E9B36CD
68897E55EDD8A7A1DC3456FAB5501BEAADE22D7D4993A97B51479413812B7773
059E10F4DFAF0277D7BF7A1FA223CE747DA844FB60BE6BFAC738C6C0C07BCB91
02D7CE509B50EF7D69A51FCBAA86E6ADC99C2B3950049DBF2D29045669F67977
DD898045829CF7251B14882E047B472C0847F34B86BFF25CCC4A8DDC38FF827D
9125B136D6114E0DF205840D7662CE475595415710D5D1F42E53680C6677F8F3
260917AD168D500801EB998B9C4E34E540FB55673A62DABF438D0D472E8FE578
BEA76C2B31F19790E1B10796C3C022504F0ADD190335B8B376F542C60A77F1C2
C48298B79196C76D1C839A2ECA5DE1BFDCBC1BA97A2BCA6EAE02B0935F9D68E6
BFE026E66D2B7A1CA5F8FBC7E7E95F32558A37025DDCF7B5C9BB0172B38D649E
DD449B2EFA31B0E46418BF5A4EB167A9CE66635F1C8B28A4215001F60AABA6EF
BE9678CCBF39DF072B1EF94E75A387950C707DDD276B19DE409EB8F20BD62BD3
84198D94374F4213D65B653B01E55D9CEB32BF2609B23B7F06A7AF0C9B3A8764
A1B9CFADCE967B2F8D78F3FEC4C9408F72B95440914969A11BE0D5C2CF0AF6CF
6A445773749576592001EBEAB369020ABF828021D3442D426A78C8C0418D82F5
45A09B0D95E9BC147037D95D3E4A950DAF2F934EA8F57662C8E583B8EF11A458
A1BC8094EC46488E58101CDC62454D4D966EED4708A34831EEE74D2CAA5CA32B
D65FA85B13431184577A706157608D3D286C25517517E96C949CDE6D51C6BFD9
CF9ACDBBB79E0FB60492BD7AC0893A3671B067FB94BE92740C084A6FBFF8AA4F
87F30B9C0BC1E5CE52E17D7050BBD575097061A42128C870C057E9844530360E
17F9FC8AB4B5BA6D8CFA4B7EB6D57CDE99937E0746AAD5064447BDA237357556
2730928A77D5B0AEA223085AEEC8C23972E3BEBF5B4DB95B0E483E4C7704DF03
94656DF791FEE74B773077ADF0DBB323CE8EA829AE3686869493FF0CDBB4BBDA
74E8A0DAB15291187F67BBEBD1CDC3AD870B4647A447512840FBEEC513C7EE43
5E6B39AA99EA81B2617B6A70EADE47A273E568613F08F4E9442F0C11F2B039CA
D92C67855F8A70F75224548036F7543A0756C30596775EF707A4944E13F23D6B
1BD1DF5871E9D26D18BC1706640DA31388C9757A037D7293BEC895877B4A5060
782921F2E40B6372C8A09CCAA08EA5DC5061195E23BAA3A01CC016C07907FC34
4161A50B9DCBD49DCD95086366046F105CE35AC87D95B85B27589B82EA9565DE
6FA8523306D1400435E68DC1B93C1989790EE13DAF9E56D79CE4077B7EB6CE6C
90F7420DB211A59C1E8DA07F3EF87AB5CB968114A1C4416DDFF25A196B0F97B2
7345AA8380A84D6423D53F0A00BA65C56955024F90AA0C32E5031B3F67BF23B9
AC57FCB3D91DA651EFDCD5E95576446206955FBBF08D74A03CCDF062A11DE5AD
B86C798B15494484FD1619F0844DA2189E87B53B8B0FC9AE248C5FE2A4910F2D
2843B389E007BB6C93377BDB9EE8642582E1AF5B383E053D043B7D0CB65D8F94
AA7389FC54AB8238156A04951B37B8E4CE1B5234EE22501E2E6BFC40D57115F6
84E819EF85B437AB45E1E96B47D91716A6D6E05A2E1BC3888224F96A0D1DDAFB
E0BC2D18C804D227556D63E772AE10D6F9F78F44E628DEF543A44894EDEBE223
7670FB9B9F70A9612A19066CAE0FB96EE7A720C331F292B099EE1786794CC1A2
5206E1BA71248FCB03E7E30B6181310D9ED0ABDAC114885097249E8B2B1E4CCB
F49D1FC637A4E8103D17D9199BE3C260A745CE08B177430123576701902EFAAA
462BB600AA2CEF164CCBEF3FA7A08ABC985CE518A2AB480E6B6A09E5E6478981
18549DE1D4987066AD87895CBA1413D51C675B70AB5ED84E0F966794ADCB2AAD
FC5C7943723AED12D6A5A0CBDE205FDC04AB902B7B2729C32361F0739EEAA447
85A6BA7B0B518CAE769E225B5B9D0DFE2339FBCB4F09154621689FD35182E5FF
94EC261DC259D0FCB076D87CB04BAD56D02748D86CA8787EEF967EE6D1611EDA
AB1D1A65D6024521E6CD867590F4A6EAA0B540D59062D6AEF56E1CB2A33257F9
E819A24212FF6E6B5800760F074FEA32D594D91B224DCDCB0B1DEE6B9A3B936D
9465A96898232974F5DB17967496CD3A1292F0EC19A9459E9BB61CA0CB427DFA
F5F1088DD3B570F2BD81720501EC34FDAFC6FF0FEBF1D1C1D21CBE61ABF56892
3C09489F24B688CCD87838C6E257A0C34D3D21BA11974EE14363E940EDD546F4
79E7D69B6EBC5AF4551F2EA92C1A32568B046CB776DB327483A13BD0F0342EE7
2FEA35B9E8495D9F55CB7E3A77819F4A29DD6403F57F42A69DA7E0313135669C
2640A60C3700A38F29D306075F8FA9D77C053AED540282A17DEC79BB369AED2A
E9A79C7467861636518F3ACB220CC22A2D5E498A1483BD294E65645B8454BED8
A6B252E0FAE6AF418B6ADD311C9E82A35485481EC7111136D6AE5CBF476C7308
0D02515680F05FECE0ACF006DACC29D9972D3893BE94BF119F2D9E3B4B6EA14A
9FB321457157B23E55EFFA0C2DD5BDDA6CD269C13B7FC5927DE1969C50B6F153
0D4C0E5E38E04A3C85D94A6F26D3793123F32298E1F5C204CCE0B58BDF850515
110D660FB34E5AEF86B6DE4AD81F1C99DFABFD1606263ADCF8CC79AFF60E9038
F8B4B312680EFD0BA3A114DBC857956D39CEF98585506573C0E20F9E99306A53
61B83FAC5CACDDBCFE7D8446C5FDD06D5067F34E85168E228D0313BE7D3D4B45
7862053768EF8E70278C65384708614691D4431FF5DB59378D896FBFAEA0FA25
6A972F4AC740336280EC4D12EF033DD651DF4B935EFCF54405FF75E69A6EA840
B4C9135C3D5011512DD9F65738705152C5D10550D47ECB9DBEE4DFDD7F5737AA
43D70A83593E7D1AA886BF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic12-Regular
%!PS-AdobeFont-1.0: LMMathItalic12-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 833 233 0
%%EndComments
FontDirectory/LMMathItalic12-Regular known{/LMMathItalic12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic12-Regular)readonly def
/FamilyName(LMMathItalic12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMMathItalic12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-31 -250 1026 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD11234369CB38BBC21C40020C4E57C
950DC4A5CD271B5530E91DBA55EA1A3BF584D9405556EF9C802B109FF1EB2B0F
C350D7F091E7B613B08574EDA3BF27099BC2EF0E503A4C4724614A73AA054756
A503BEB31E3FCD96F733D0C5815847DFBB66DE4968A9B389FC00C2146C4FF68E
076BA8B3847A3D8237D36A6BBDF0096290F1BCD02CC66B12E0070215D5D8306F
406DF7590940DE35CA0854D3609249AEA4EE9D3D377A7996C1CC2E940132A90C
F633C774985DCAE8E9353607B9059DD211265A0A346B1A062D80C64B5802A750
D9FEFA3C9920A3DE942C65BD08060AF33C91CFF62930F65F9A42F70B83B0E077
E169BF7F5D84F15D59F8A74BC2EE4A7F3ADE36F38C3A661F4CC9826BF73D7F02
D3CCC267927CAE22B5ED695D212FC3B669F9BE369B7A8D325C3FB9D552F175EC
29972562517E91E7B8D570612CC50B1A5CB6B94D030B0C60465EA21631F7A30B
44A47143D0C2F942B5D76384B8C3F2F197BB3646CBED3DEECB6513D3AD460F49
4BB874969A3663617EB537E75C1C1BF92749F9D147080EFF78ED285C315BAFA7
D78B7B4B8B7CFD1639EA303ACE986EDEEBA9350F92529C47EA7689779BD50CDB
D1B3A68B383B54B51F4FD77D6458F15AFDAB471DEA9909CAB29840091391F2EB
148588D02607411F2E802B9CDDFFEF1C1FFCC9EED0405371651ACF30808E8C57
682B734916EE806703B2ABA2F6910E0C75BCE10A94FDD1ED3E4FDA7857341427
CA0A4F7D30151BEB8E3D351E1E100A8A75959D11122C83A5C0C4C87214413B25
A6BFE44A42D446E9C4ADBEDE831CF53E69C05D38F018C69D14BCC93B20D730B4
3691648E5830EDD4F9CBDBFF106DA474B23CB8650C735ED33B2247144F40839F
73833141536EB05D19D244B8B40FFCA798D922C364410F36531672695DB1F6AA
8EC52EDE61B738CB32649C98597DDCDE8DDFBDD70EF02E745350785CED7E829F
5B18B621B99B494EBA7C4042809188AD43A6F26735142CF5043B84665099AA89
6C82F22ECCBDBDB5A63297B06E72C8929D5202D6A34AC897DEB86AB350C47262
FF768E35A35A8E10E1743C9BA08A087D28C9FFD6BC993137C87A7B3713976F09
BC62E0B00A93FCF87163199C3E19E8142BCBD60D7E8DA9E0EF30E5FD6C70D47D
31637BC0CD4D67F759DC33AB828E9D80023BAC482F8B93AD55F1D27FC09BC589
990656D0ECA75DFC764023564E8FF99754C8A9B76A56A327053E0F6D96D1C2B6
99867EB10078A6117747BF9CCB78F9F8A3F5D44459BF81997F9E78456FB41722
A92D55AC7449C295D848EAE2B4FF25CE62D7AB6934EEFBAB17768DFE2A7C9A21
2840C836CFFF8F2BA676936FB13D70DA62875AAF03F84BFC55CE6141D460D1FE
4D5BAB78AB4A4F600A144502EC6C0E1A45232828CB45508BF41A0F0C82702C8A
37276E9C13F1FF974B762908E3974BB6A8FEE41ED7A8590A4C45A9CEDE28625B
ED8742C4F6CB06BC5C56E3FF68CBFA6B9E855DBB8F71373B725CD51C375542CD
B137AC683190DE80C81605EEBA74CD262A72594DEAA26CC22D76AE6C6F079E88
8E54A0A118DCAF9AFB2EBBC09D2A6219A45D77EC0CC9D3D768CCAAD341ED80E6
7F36FDFAD16BDA5312AE94EF917D9DB15696E17035899FDB03ED555BCA5CF78F
A3820035607B40C669DAFBBB259763E1F97386C8B77E5B959AB8C7174256CEBB
3470F65F4E702BAF289FD61B17E0873FC8D070C6EE6F804E789DDA75E8D523D2
D201ABC2BC9C88D9709ABD02ECED38F4E07FCFAAEA1E34B8938673AA6D760A80
C38EFAE4126EF8E6C2024994F5A338B85C4A309991C19A5B4874B9CEDF0C2238
720E0081064206450820F50B4A5CE1A7A307C440566D8413DAF4F7ABD4D96642
4FADB66F4669192BE430DE2E62EB5693C4A043A7967826FD4095B17ACBA87FE1
43FA5D34ABDFBFAB317655B4C94B35ADC4BFC1A90B754AC6E9B93914C1E79FE9
0A905507983D0C46FFAF612CB8A2CACE6EF8F904652FE94A950F5625618AF1C6
9051EA675599801B775DA383826F4476A04AB01509FF236B1A31158672029030
57C142F46DE97EBE6003F9232427B04756BBDF8A80A196F673E0F12D3B91A0F8
711B5F8240DAC440DA29FD7F571A8A726D6158E2843ADE55C7B93DED9A17071C
38954A6473C343DB5944A201EED8B4E96B5CF06222BF7AD210AD4D6530CD263C
9366435797423B679AD9E3E56B84C10C4903F525C746315AB73E5F9A41EBF82A
27040A4D8D3F13C051D02FA1999CB88E4F452DDC7F864DB8BCB1D4D2692C53ED
487A8F96490BD58B8DAEBC911EEBAD331F9DA773783030EB7F6435F9DA4C640B
8F82584F3530E931628C01EBAC828443C15AAF24DF9DC7F3880EB6758AE6A0DE
D2B699DA0B8BB2C51BC8569E3A5E9DD4B7E95CB09BFAE54328AEB03D1FB0DAB7
CCFA2534E8114F0011C294B49F4B97E71A2C6AE7E2A6E2EC58874A0C431669C5
3993B04E71107FB073EF166F3989E9E41FAEA3F689494ADFC08DD06E380E83D6
2D6BCE8398A42F93E0E2732812F2D7091E0D0D1F059903A10F3A3D3EF1DABD93
005454AB098CC2F264CA39D303FBD40708F6E4BDDDC61FEF7707EB83C638E104
F266932C08E133BF10EEBFBB6281B58EC8ED6E3D007ECC2289054028B9BB48F8
A8C21B55A7579F61C95A4C9A8FBBA035517D39C20ADB5C58D81357073B06399F
72CD90D4CC88D51FF539430A2A0C58E963B1C25A90C575264197D68BD8045781
36FCE58D827296938139D909777FC156471D63CCF87815809AE6E15EE95812A0
AAE97E459DD9C58DD4201077EE802981677661444D27CD8174F2D6773CE26D7C
42998FBFE41F68CA4FF1E64CAEA0381E3BD788AB9D1225642B34CA840DB52C88
603ADCBB8B3DE4C3906C50D6C29E5813E5E46F43A958A0678DB5321E67FD6FDD
03CB8E39ACE7F63E95F79FDDF32928034B5CC995EA762887CE3F95CF45C18B4E
E5BD77F04C0EAA1B2FCBF496BED25F2DCA6EDF4807A68A8554DDE44E38AB5173
9746915652ECC8F90E1A32DD6B38F76BBF18E719B69D5AC058247FA5AAF3E590
D90D6D6C619AE513B903F9C6E6AC3768B5AC20D0DACAA19205168D3BA476F566
976A8D1DEE7D654C5D6C87E6AD11ED797BB7B85FFE489C46DE6EE8C179FFC83C
BEE21416999CE21BF8055F678DC38A56E7561100F87B755CE4F969C086A79241
370089913DDDCFC86C846694721DC4A22F425C65C68EEA5F2B7D450DE8FE43CF
7C82D583AFA698DDBC9A5650D024C0CDE27CFCD7C4896AE6C664DF6FDB7F1FD0
256963A88EBBCE878D685E23541A5D8DB277320CF61EAED704E50151C166892A
A2F4D14619CF7151F1195174F60473091879D6FD73F9A943E4040BE70F356982
FDD972391742E0AB429CC2BBBC2590962F9007BD8E66A39043680014E4F9A0AE
D060FAF7749C1A20DC590D12142FC143CE6068B9D065891645F06F2266AC95EA
0D926C294D89BC6BAD28A70184DFD892DCD84FA82EC44E5051CC6BC3412BEB6F
52351AEEB8E40C41F93D88B29BEF5449FE78AB978800220479C4AB038960501B
81E9F9053123483DC56ACA0173449BC442C5C6D42B687F573BA80C679C4883CC
A0C367238BD45E7F2EE59F87281A63C902EBF465BFAB1AE921D5A63796CD4DAA
1B5AB3A924839EC11560A9341C90FE154344F6CF8A4D9BC9499306A4AD292D90
5BF7D40F23D386E33D58F4041DC1A5C124947FB609564413EBCA3AD534D19B15
444B56C54BE2D867D31D6DE2132059EBEF269C45A5D610B9B0A33297CF6A6DE3
133CD12CCDB85740E7C2ACA4D5536EEBF568AD0279219C53405917D4CE7118EE
3789A4443059763717658A16FF65B17F15501A58CAF2C4887E05E5536ACF0230
CDB8D054DC3572C608AED7DBBF1992D78685FEC6889D7BC738619D2D4B5AF024
A9ECA688776A6983F993F92FD3AC1DD7CCCD138BE5C8BEBE883CF13B3BE43B9F
E48A948EAC8E2088DC94C4C1851F58D3B889277A5DFAAD52FD7726C617CB8E4F
828CA88F6EC034E5ECC87C2942F374FB514E2F31E9FFE0FDAB1A8E1CEFAEBE53
84F42868D36D4FD09172903E7339E5951EB94BB6FEA0D11600B36F51F482123B
55760EFFDBF5B5AD5E97AF5B4AE6BB3A8B130A92EF4714664394602102E84A4D
9431D30CED93E107AAF0AFC9E5BBED930B40614EE640578AAF79BE7E07916794
EE7D9BCD675B3F0B14B1BCCCDBEDBB4433681975A1C891131BCFF8BBA12617A8
1D5C5F7265F52F3A32C79109BCC8B939757BE733F883FF08C53A2E285EACE0CD
9E3F9F44B91D4821DD03215A44A539B8DEB2601BC918CFC1090D65C96A5235C2
31166224C36996F26A871D489780EB823F9D9D73EFE30FED996BA472AA14B1AB
CD84DE8A541835D63BED6A998763E987148F92498A0E330E09F48F9B58558B65
C8D4304D89DB4CD2BDEE5C8356184088CB9775EC76FBED5F09E860B6FE558EF0
BA3DE584F5B7F27D6C5A45045073CCDC29D6C956B5DEE2CA0ABB916A86474A62
E0D6080DEFA24BB898DBF8163BE286392CE19C4714D99ED25E72452C449F8F0F
713973545D7DD9DA664362CEED0B65C0785542A1173F1424BC536AA3C151AC1B
7DC221C4E3F1405F492AD778AC2C04FF1AB586D46785F9F2184F9269CFD521D1
8854124B117B2F3514087DC5626AAFACEE8B4811B14EC121C96CDE28C8C878D1
277DCC92BC7AB10004B84CA6E475A55AF2CC60C88C8BCA859DA73245DA5CB391
99D3DE1D968E0A901A15219160A5783F2561D53776994CCBBD7A18DBE27CB6CE
FC53D7D7D8734D12C7ED14742E63DCACC974943DDA120EFA1620B92560D5C803
E572B93FE02CEB373B80C568912F5352CAE58C58DD554C163AD3D35BB46BF4B5
E724B25A28FBD9BD416B03D9152278241A2AD2F29BC64B05A5034401A56F6C31
D9A53BC20D6593E8A8404E02452EE5953BA927C09DBD04B321CD96E066B71594
0D97D5FBBBF4F57B4362CAD2346C496CCAB3EE437289917E97B4D18812C9546D
7EF5ABA1B6F774456448F7C5A749396B9A48EC4B37713A1D5027719B3828A374
CC3D7F36558A6A9F7B8903543BD6D1486DA8315DBB2B725AB887890477D8DE1B
CB83C360BF52B45D33C48FACA48C3FB99031DB2B9D6E2D8DFCC11D9148521DB3
33193A110431812FD8F94A657C6AC08419B3C2FC404A92B678F4B39768B1C9F7
B055D11F1BC680212BF4EA6905E57891CB428381C4E322949AE903FE76215DAE
CB9CCF7FFE01EA6941CFA84B45D1260925C89595A6C48D6E5CFD72BD97C7875D
B0733C3E46570D416EA0F037B6277CD1DCD4E0A94E19A5F41E4FFA835F89C38C
166374EE860B2FEDB6FC68BB4B6E16AF64E7E599C6E3F68515B6A9AB69C2E7C9
721B6E10CC9C5BE2FAEF089845046259EA79EED176F92CBE30370913E7F34AEF
9FA47E1B9640B4F3334CF63F431DC20BCAB04B38AA21212AD951E1BF7D32D0F8
60EE8BB5DB5CA7398BEE030D77DE13A4AE6F89AD7B176BF0B416FBFF99A35E36
37876765E96B0D752663FDD35599DBB029CA7D34495F3BFDF8673300AF090CB7
DE1C5BF6DB6E2A9558064A64E2C893DFDBB8BCC8D1F9DDE88010C37B83798AB0
4B43EACF7F788E10DA22AC91C1F081BE793ABE76BCB9A375482B0DF2DB8C0FAF
3B847EBD8BD3070FDA21848614D1EB65D873E882EE66B08BFFDFCD8A5EA8B720
F2447A53D1F35973AC8223BB6E6E05C3304D104792A9918C16906F6D2BF3E792
EE7111E6D4E0A37479AEEA9BB1D52C55686EC5728B9DD40324318CA0A1062F6C
8AA95ABB9291F4C7628B851FAE077D24D2490C6409B1ECC11C2676745B327966
7EAC6B1511A46DDCA7B48AB10DF15B29E3DA66DF291CF8896308262CA3E45BF1
80B5869F13710BF7872A6F10D06C239AD5481C20DB52A179FDA10044CA5BAA59
37287D9F490FE15EBC6A695647D2B0893646F9C8CD02782771803526A5E6F380
ECEB222B5ED36B97D41DECA4B881A471C7E1D28A6BCD2150F17330E0062FB271
7C0BD30B93BDC2574D08DC005ED6AF2DEB7CDA03A0718C29227CE0BF653CB7FF
5CB8F4006C6CC926E494A9A9ABD55B159EACB35B53D0785936B79A3010A3C2E3
E0563E533B3A6F6BA31A6A8C39EAA474C0E932A16DBC0FD22B97A53EFC23DCD7
55FC844E5EC1D779B53B5A7DEE4942E47FEE9EA6A9DD5D1CE06231F0DA72A308
D1C4BD59420A8D141EB6FA5BCC7FC9C8A0EB4959528A77B87C3EDB5C87D204A7
F4A37BEE696587ABDA2CE0EDB7345F91BEDD82EE4A3E9A6542B4291D42BBEDAE
45466D9D208D59FF168ED58C52B67471F52261876939D28BBEF16FC026D352B0
86F477CAB03E9A2B2444A3D0F8F20B1C9E5561C472F383EEE2C5F77E25186429
17570BCB4CA4E630FCCF7D390BB3F8A71A393D0D65485BE390EAF5377BE0FA4F
633B08435D6320F0D8EAD61237B18A9EA700D1A6E8E76B7BAD12E3E09C2ABCEE
BFDFF954D0902B38CBE1342CF69A779DB0BD9231DF34495AFD2C44F03EE57D56
F5ACA4299495BF454FF6AEED402D9A8E8A0C4062A0F07FEB37D5437FBAE767A3
520E64C8A52338A91B6DC64CB244A62DFD53D8972589BBB83BD7E19C5B4DD9C7
8178890103F58670AA8AD606FDB8BB3FB6A1D058123C219514B55AE0AF8CDE91
4A0DA474F5C3969A0879A195EF2763D4D56FE22EDCBF1F0150FACEC2CAE3FC44
C7AFDC6D9DAAB4889453F761E54E461CD0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E752429B985F23EBA0C9875AD055D8B1F640D10DB8F40BBF062F476691
EDAA1D05C5591EEDC1B75251BFF8576F1C9CC5C0E521392A2F0D5F869F8AA462
B3883A673A976328E1F0DAA22B80CB7737DE2537E7B54F5E1643E30046E87CF3
8D9A45A973757BC16CC50504033125D2A68A1C97CA095C56B3D62783960780B3
1693596869FAF5692AA8FA6643FCD7F55E72948D2DC55AFC5016FB2C48AF9D85
192393C682B739EB43CAD8C3FD4053B2D53CF911352E2BA87A65F8949B0B7918
EA727DE4A08DE07B71365B8F31103159F65D30A7A318C1056BF638CD20BB56D8
6F22ED3EACC46F750F405FAF96268E80A409CD8AE0F36B68AA8C5FD2E0E871DB
D2628AEC086AAFC9F04CC93440E1A8B0ACC1DCADB778837360339A25C08E3B0C
E768240F0E8CE9FF939E4B1A6365664AAB69761B7A9C7B95BD29B09B930B0D82
F2C39F9BC0B94E56C48DCB22D8F0CA6C633BE68E5977EB3D88103E4230C6A08B
B4FB0CDEA7D44636102D47AB90B92FA42243943EB3E77E6CC38DEDBB2DB8BE77
78936B70FAE12EB1E2913B766CA2BAC3FA555CBADAF2CBF6B7A216FC93470554
2C841542BC1FDB26DBE389CED193E28A19CE9CBA64FCEB47C4D9C7891741E0A1
23FBBE971ED93F797C02EA830678317452481FB78DFEFDB25A3645AD3979D2F4
AA17C624CAB35B85963C6DED262AED5DE92278F31B2E573FD86696D98800443F
32CF695BC103A3ACA687FBB3F42AF9C89123C719005844588667C3DA28AFA523
BAEADF7BED1F3B5D595DF571540D0855FA377DFA6880F525878D6A3D1980C7D1
05554ACC5D07ACEA1E0D27664F6DFB6EFF878D0A68604565D0BF75FD8BE023FA
36D164B7BE25F9F811A466CE04C2CE5A774EE3288A245769B7ED30FCFA10230A
D6C9E809341BF5E55E58F3288F7298D62092922F07027352BC7C9612CFCB7018
B3394AF7EE7076395E67C3CF9B71BE069AE6C6C412F86A496E7C77173A0CDA0B
CC46683C239700CF259CF668B9F5C990DE3196B84BE792F51E17583FD4A83178
989638A37897AA769D74E0B3A299DD94B314F9BAFA7217AC70D8D9D02544A545
F6880EED34399A835514CCB97938F3E012AF4D68C140C6CE231015D93CEFC522
CF56EDA6F3147B3861904FBF8BEE6DB3D2E71479CD3A02BE03C555B0808D40B9
53D2EC56876076A116EE7E81836676237F88C519F8DBF39EC35FE41D78CF1665
E3FFD09C78FFF428AC27BCF0318D0849935822699E31F5115E7854A22F46951A
51F24526F7190B18B313DC58AA2EAF631A48ABE394668C6F1CE9AEADFB56116F
FB38C388F96143BA870537CC8B3E5F2DC39F9B930ECC63475BBB8C5F9A45218D
E05C4E6F250F6E544D6011F65EF4808D3D0158097CDB6E280AA402229A6B78E6
AC615258668BFD3469CD663592BF1214E5EF1C116C4DB47B805E2F60771168CF
79CF10DC2DA8F2BE94869AA570DF2AA5852113C51CFC85C1E41516CE412CB410
BD026231E22A9CD0F664D76D385CC1170476B17BCDA45C640C583F16DA207028
0C58570A966383AA9F7CE59375525369CA6A559BEF0E05F11CA9C72A278C045B
1D2572EC08DE1424D2420D550177794FB3DEBEBE9E4105AAD34FF119AB2483CC
A034A95AF0B24B801710B398D9E9A95138859A819011423AB5921DE8EAC56ADB
58FB18C27A41CE503CAF2E7EA6F673ED5F34F1C1D20B609A152EDECFA26872BC
3C8C802A1517D9C6FDA3474591F19D573EB051F551990D0331B2DEBFA31B5010
3F6332290E522C15C69352124E1051A715399BBD1A6D3704BCBBE1FFF89E56CF
9C3EF605898309C7C3D20DFBFD10DF5FA30F409A76AE8021045DC09C95C9AE4B
4EF735A5414D985F6F79100E7045B930267F0EEA9BE820E13291132AE91118E4
7B8432BD1AD7A9CD912F2BFF83A2C4705A26FCBB7F8E45CB2FD9AA2EA98E381A
01BA4C4E31747123F20A0A721766F9D9A6769FF80B400B1EDBFCAC63CE15283E
72EC447BADD5BD58B053A11BD770399E31FB3B3D856FBCF6235BAD1F0D38E26C
3518FE6411F2A5FD4809C085AC2D60FA311DC99B9100C1A59CEF4C877053161B
59682BF5F2D85F2DA7EA0FE603D477F6E80DEAE0F250811BCC646D8CE2956C78
B897A5000D73AD32BD99B92E6E63BF8D79777859EC0F7FAE47F5A0CA878106F5
5462D3027DEA15E36AACC0E7349C8E60D6F2439E2D50DCB9D96C6C20D11266F7
913970C783EF6D587F638339D1E89A4878ED27E515FED0D26FEEE69602B2BD58
D146C077FAC71FD55A5490C89142F2844CB7E6352B01A448D4BD7A06D8EC0F00
E69984EC55E0B487FDEBB3F7FC3F4093CC6E13B87084E461E23A4D6862F0EEA2
84DAEA8343FE913EA90B9ADC7D025C2B8EA3689D75AA38B5222166C447B82E75
52DE05711B3883394BA9D683C161A48059A0463B17F3DFE8A73B46E913B99D2A
38E7FCC667A5B810B665519E7E1450E00BB9D0279537763ACA5F131550E83404
04E208B9C0B0A118F40332BDBB431AA70981E77AA5E5E76F43E730D9D3D047D0
B3EC66EF1D37916398FB8CE955E12D8A89ADEB1AE1EDCF91BD788D8F261962B4
3870D5928D160218A297BBD3BEA22E12E9C4197D0F3835C0942AD6487F5C9B20
C9A597910685A9BEE4CBA868D352ADC10A564782DF3BD57758FD145E769D4E88
BF43D19050DA58FFD64EB7B1D37BA13752B6C966C7A1397D80160687245269D0
F27E87B2186D931D624120B81967E58ABF5DD66AE39640224A518BF378B5CD26
761D1ECD916FC625A90EE8A7E00080300F0A05D265549982D56614814E10FB25
DA53070C2BBB4411D9608F4FF0B2E171820C734BD20399504F034BFE4C20E7A3
1326783358CF8D4FA48C1AB81741FA70BC0E0A4BBD104C7E5AC05CE49C6375E8
9F0EAB2B56BBB89144CE810C78D8CA02BD7CE2AEF79E27A7CC1D6B68A5B9F504
BED3487D1424CA82B8CC60A0156706987C7D0DB913F1BBF8A7B9A275E3345BBA
213B3DF67C4111E9564B59B724BD65916BFEEFE9BF03AF9D84DD2AB94847F33A
3AB3757D2C8CB688D50EEA68DEAD0613A62C3000C037092ED0A93F8486FDD39C
FCD0E8A6224BFA03E8C6D73F4B8F480327701262285C527828E5E203F328AD95
5AB433987B229534C53061C3350047FB20E3887F514B5897FDF225685D18D679
9DC141B7F6830D6771F1A3CAE655CA173FA57D400530CA6FABDCCB4325478D0C
93AC7EAA9DF7605213DEAF94C7281D9AC68D884E15ACA3BA68034F897A2FFC1E
F76FA2A69CEE7F1E9543904F1773969F65553C3469FD85B2F2F89F0E547BFBFD
F62A3E47DAA4EAD6D47F0305CCDB297C320A48A3655FAFC810CEC6F6D68ADA4F
AB5DD7F61DB94072B0AB8F1ABF62A78E43E1578DEBD2D05109DEBBCEC64AC700
4C28C4F0A5E3A003423B9958C73D306B2B4A7C67A95F8B4E737992642BD3701D
39FFAD94524A7752560FE97B8E99A12AFCCC5044D989BCAEC863BD15CAB7CE63
0194962E4183C3838D9401260A743447DF953444B29D7CB004560D0685F73E87
72FDDAB87125F419F90D165EF1C2A06A9B7500C6AD185B4115777C6BF9C24D88
653589B431FB84E4DDB650C2F783594DE6123D3142FC5C99973AF211F2A2A05F
5A756073B85FEADA4823BC1467EF2FC0E98A2BB28E5933E2F6E50D3580C547C2
54FBBBDC95998DEF2EA825E3BB2AEEACC0F30841835121B7A7D7A973F2EF67F2
795E6DD8CF55B9823AB2B15ADC328CC3AC493DE8C2F022EBFA14A2976D8E3559
B5FEDADF4E23A07F6C0E1387DD54F5C8BD071C4E9A716737B6BA413F846A887B
D1B3B89EEF73565F3D0D2D1E40E4C2811D37C9029692DF8E94F6FE39474EE13A
EEE65EC0E77188C18435A2E7FFBA595F0C054E96CC44F56301F6CFD2A7A42C7C
33C1362D901AC2B0FB255262754024729BBB2824C33C2FB07B4AB0E5BC4EF204
E240345C69F37D577CA917AA50C3BC9004C8FC0A5A8E517D39211861EFE9920B
3939DD770974B1929E48E48EB82274BCFE2E9D5D484DC7068B77CD864557E702
E4EB0C301062DB793BF0C98D7468E7D2C9EC10C2B121966B68222EB067A7E3C6
F0549768364D1935345EF4D1D5F8C6AE3C09162E8A4FC6CD4741B38836CB599D
F98A2468DFC2198D16044BBA796678C9ED23D6194A5CE79410133D40E5604C95
80910F6742AC40A7CB3E08E73FA1E15DD6E1179C390BC240DA061C9D539B20F4
FCFB72DD0EF634FB4137D55F76088819802AC0ECDE469085BCC3A24122DFFA52
6840EF5367946F3DF67C10B47377A99EB96C13C332632CDCC750FE6081ABD0F6
4DC19BE13680CC29CF0EF52F885E21F4CDF14F8A5BE651118D4F2436599ACD41
A728EBA6AA858A62BA34015E2E2F851AF557C8CF9586F5A809952F25B26C6557
DD62C2B52388A1B7B84A5BDD57BA0C39ED94DCCA571CD82C6E0BBE3DE5134649
8CD7D6DAC8936854A0E9B5873E0C43A98002905B196F919D54550933FC4B7290
C8C71C097F48AB5C03B5D053459D7E0ED44D117E1C942F56B51E615267D9FFC1
91A694BEB12CBF4EB3DFDA6A81788A92B5AE75375C8E3BABA0D234C04500AA3E
2F28C4863E4C426DE4581143A54D0EAF501057E3A9FF7B3D1A0671ADF319AA50
F054379798BC3C38137A81D75D5BE7E359EA0012AA5588403126BDDF5FC2AF9A
36305E36C2A2DDC690256D2085B1D4CB4BB93B1E736992E995B8A4F38FF8E7B6
0DC1EC1B6C746B6AEEC9D5B0D1C9641E59CE041594E0396A0BE7DFE162363F66
C0DDD904FAF6AB01A82A5E230905B36A862A8E30DE59B50522C8AEFA5451F931
870F2A99727DEA6C228DEDA6C25A88C4897BB9BFCE16CDE9E5F075FE4516E1E9
02D53E24B71DD4F1CC13482C48FD1456BB3B6710C69F0ABD2C8E0CD7C3900863
69D35D3E5A083C3E86374A2EA8847CEAAD3690C5D7BF9EC7DEE3705643B5F064
C6A8ED4630A58A2C74FF212B0A35CAD73632F8EE978BC33C8CB05AC2BCFE82D3
29D3A95F82D98F5E335A3E0F3980CEA094E6903FF9BB24FF67FD9F8598AD4F75
1527050258CB8B3F35F8ECC07BBB7E68F4BCB0B429D4AA25A2EE0287CC9B31D5
DDCA74AEC3B0951BD68B348D9C3656853E002ABC509706C00E045DC552B2E5EA
058D326D17411EDED514F2420EB640B4AF9CB0844D53C5BF81667E78A1837931
98838A2416018B583A55803F83CDACC6647227DB9302337CD98D1FA385DA5005
A64EA3E34E0AE3F5B34DAE23DC67DFE7BFDA027A952ED903E7B54769B3C48544
FAE2FEE14143654B5371B4E2EBF9784F8835D49F4E72B78BB5DFEDDF9BA465BD
FA74F2FF3B6E50CEAD45ED2C0C24E1B13B03CBA0C37EC251BD452805722C04F1
9A3B3C950F5252385EA3E898611BA9C4C8A5E0A6AD4E40D06FDCD6EC46527591
BFB94442A0146D8F93A35D8AA216357D0F96B8C07983FFA8FEC41B589A018331
D25E5B0F594F5C418739003766FB193DD7B97DF0F9A11121F9383E9A4D7A4220
2DCE9AB3649C01936660D3CB62D4FB6261D9D30EB70B6B0E91590635EADD02BC
13F010CFFDA00810855BC4D8EFF39ABAA0D3138F5E51E6484AF6EECE850DFFC5
2F6B458208BEFDD79BD8C4C6E6394AE72B8A73A9D1D8F443AAE0A3F0C050249A
333A1F83E14DFB045589F3D6D1DEF71CD3173441F1C3E12B9F46F91C415D6C8D
7FD5678AE5C1B8ACC9DC66783428D06E458F96BD48CCF7CFA30A7E12255939EA
6CF81055E5330CC27A4CF7A4C462D94D7EE9B48626D5D425D400528D5160C7E9
F656D93EB214E1FA04F01B61B295058E0FB0EB3C625259C36BF9AD2EFB5C64A4
540E4207BFCEA039DFB0F7E2C38F138EE0922FBDD3D7BC6FE12F0550746CA3B2
1B026E261F8D920C2BA8F9DFCCB31B1A824175717E5AD6E1C381A4C882B3C87B
0D1E0807EC239961D451D10743B0521AE48DC71EF5FF7BC09FC5E091BED2FF36
1ECADB0F68B3324E63C2C65B6338056AC11ACDDB5CD7B1CBFAF76EE833E519C3
715CFF2AC385F9BEDDD9296863F46279D85E4AE2BFD687F8117DA1A2235FC498
CC9E2C9F57EF881D478600C807DDC7F0A468EB61D185E06F8741AE6FBB6DDA9C
8EBDE42F5C0EB3D3524DA157F0B3F4ADE8D0DC6B9E205C7C32C27241713021B7
91DB1A56767B0A22F335A7A5AD395D681A059A12585DB05D6BC44417E8CB8E24
72EF2624C23DF65B82AEA0A95347F2DB16D3390FBDEFE059EC4B154FAC3E5668
263E11D3AAE27591284292FB1BF22EA7654C2797659120CEF28087F4E387C70D
495388068F4741728D4C96EFB433E255DAD15F08252EDF5979C14C46A1ACCBBC
666E9BAAB3B2C8FDB9A87D88D52B68DA57097C8EDD95A5F29B98068F254ED1A9
1F7031FA0B828C89F0402B564A9D9409103DE0E095F7129DC64B4012AC9CE863
CE8B7119AED87F3FCEBF2730D812FDDDD016B803C38B89238227FDD612653E3C
E63C5F1C17D7739FEE56260D0D7AC77995554693CD027EB52EA2DC82F92564B8
09A3F2D592898ECB9B4E44FEFEEDCE7B6160978ED7FF4A5199B53C97023C9329
B221ACB437B465EB4CFC51C2F6AF138BFECFB31E0322545CFE3285AFEDD87CF4
6710EA0724F6555891218D3B32A636FB671E4EDD08ACB06E6C5B432D12D54368
14AB3ED796B8189A3F739C72975C388195E802ACDE6BDDDEE4231FA5F99FD382
E78F26D35C407837CC1CEE9FA13A8BE69643BB244C9BB935BC5E655B8B3F2C6F
88B1A5F5559692B7327B67D3691BEFD6FB43CD0C44EBE127FED3E0DAD612EBA1
FE7F38132B7E187B4F875CDC2D0810206BBE5A325FD8FB253E24FF4AA72AD911
7A726322FD0A2F50DA64EF2BAC19C9A5E1CDCD8281564806615E4AAB5EDB62C2
F49106B027A1E5D547A55BE0E8FD19AA6BD9207104404D9D85C6751EB1F9F31B
DD08499CEE7A9B2A3369417B580A83C684F7A17F8ED87A4177E1103949CD1271
5E4C12A4DEBE298B7883E0DA25554FC82FE4E94B900DFAB447F083422F93DB1A
210C6917BB6A04E89C45507BE1B5B82BBC1E2071131FFF47E4533DA66CD99164
0317676F0EDFE1E7BA8E5424C8D0A899F621CB490A6823BF8235C4F5CA76EA74
AD464CD041B7CBB8892F2DBA833118BB45B377CA6B15C104868DB82A285837E6
2986F81259FB7E37A3AE935126E72E876B043B371F75F8E4BC40BA7CF7014A07
3BD9C333C710AAABDD27CD9B2644983B1A5F84F17CAD6C177E402043E6289A8F
C662399E3BBB19459910E0F7E6160CC2B113F5C9F44CFB38976D7D00609C30FA
27217258A6856E3D6F3B11321E3C7B4BD66D302DABB76CB486438D247D010613
EFCD0C6E1D1FFE3053925EFB1C1A29059487E75C5AD820804B763FDE9614BDB2
EDFD18C10D3E6FADA25CCC9396373CC7E6BFB2E25C8E5EC1E76C9D065EAED9FD
1C906442BE76CE28AE3DC8D73A84AF77A1A9B7F8FC840C4BDC95F29056A0E897
2D5E0FEDE1268161B9A03DDFE8F46EBF727A6A212D64423CD27DCC76148BCD2C
4822043BA0C80B821AF5E81F9E7FB6BF95349E3B7784FCB61A12F2DD28623636
7D3FD6206DF1B2B7701C20E811C28B11A67354B956C3ECBA3C55439ECAC3970E
EB60623D796019CA67DE7AE30BE86371DC189E1F2891DC18525B35DEA0A1F0B2
E33B166BDF7EAA55FF9CA297182A3985501232ACDF0AA00C21B654B16D6E82C0
6F383ACA8ED1EBC45A54EB4429BF719BF6CBD10FCB719DCC8CBA2696E0B6106E
CBEEBD976A1795DD32AC9F4FACC0E72FB74DCB60F072F3518233A258B54022C1
D3BEB7E4B6389FA76416155347AB064A53D346628FFCB7CDA13036184CCB1753
9CAF6DB91BF6FA48E94D48C1EC30A2653F62251D029F7F2F3CAFC7DD736BB0C4
879624730570683AE100F0C64B051D830DEEE49F6B27DD39AA60F846EF5EFC3A
CC0D5187DA632D4BCC51FE58FC26FAB5D818BE9727149100E539C23829946572
A0B160E33AB3F2179BDC1826112C680456C5008EB66FCAD369646C15DF7E6022
E9D50B285FC2BD24A871E66D53CEB552A134EB53A8090EE56333FFC26F63A8DF
81E537B689FE89AD254C935178E836E08D6377C7E031912478F16B0E889127D5
F0571E73928AAE10A2B290053C9BD61070EC189794018F1B9C56504B1DDA6406
1423632D64DE939F56369223465FDFFA2B6C855B29F67FBB2BC8E9AA0014C757
90B06C375ABA39B176C928BFCA648599B81B1E5F956714F9E17000CA4117B48E
590E4D63BF187D8A93FE9F8CD6208492E7A448BA5FA5C869D720DEE0FD278EF3
FE724AB849B4CD288D6AB3FCC3A407C19851D98823AC4376B8270587E8F3721F
A835FCD429CF844F9CD60DE04863F47F7A3607969ED4E124CFD6BA64E896EDB2
ACF366069ADBB1B9CA71D376F0D622BA2229C8B0D4A9DF0932F6AF67C63FB0EB
6EF54EC678D8850D009A8B3868F4A84AA68FD6EC42440357B7DCD0DEE307C326
99453037732F54AFC0BAF60689938848F04C39EECBBBC90596EFAA889F6602C6
EE756864C0AD6994482B242AF0DC5F16C8510E8CF5E5FAB4693453729B8D92F2
2E3DDFDA20460C55C375A40A34BF6BDB04BBE6B36FD9D2B913165B632D6D5383
0EC8AC16DFA52E7430FEA535971EECC6EA4C239D51CC54EEE1BA194A36CC4E1A
158E799D50610BA45F2003568AF44E2EE4DF2E8B84D1E74709C738989E93DF18
81CFE30E1D7D90ED00442F24D98DDD5269E773AEB6AE9F7EA6B4A09ABA00B1F9
FE3CD1E8FE988132C263A316141ED0F25A4455C8A1170D501CAB98B1E55CD8D8
7D04D8CE052366FB64420290FB3620929FFD88F15A1BAE76C6EEFC79C130434D
B2FBB40FD43949E07AA47353BD44058B858456FD04C704B0C26ADE2DD3774D90
3024A13EDE0D58B50937201B2CF74F0EE0986BD86BA865BB11FBF008D13A744C
AD6EBB3CB4905BEA0719B47CEE6133A69FD04AFC3342DA82BE6C4F5BF785FE50
E8724E521DEAFB89D35DDCA329734BCB1375A9271E681133A39732494A33287D
A4FA6ED2BB820BE860A0777ECCC5040518BBF10BC64FA9A28276D2C0207AFE2A
C435AD3CBE381E6B123AA4A7B165F5271B585DF5B91E9BCFEFA0BE81C9C8D7B6
9302790BA4FE28FE929BA62E662B9CD638C76C805726ACA01D118AA458EAD2F0
7C2FC32BD8C69DB194030ED940B5608179C8BF28994732BCC57D928BC883B8E7
606DE3BF85D89C0E713F556814E051C6CEFE7E83C2F379BB129DFF898EC6FDCA
86CBC4FF03E5A602F79AFDD12546BBF51D032370A8C3599C2D0FE7A8833905E2
E9E11C6B1CBDF53C64CB85FB1CE5F146193AE7AA7F7EDAEB65D5FC2E625BE41A
41B4E83E09AD7127BF672DA7C5F38BB090636A9700C081553E214361B2B57EDA
19BBCCF098E189FC0A908D3DEB35D08E2EAF4EDE0C0C64A45E3F43E95B8E781B
7F571EBBDC53A4272568BDBE227C15BF212BC02FBDD36FA9C48822F17C1071C0
C7FC963342019ACE493594A9775E4D26BE10DA6E3DF700D4D23CA5874C99FA44
0C869BD1A8259D0976FBAA6F873209E8915224006ECDA210B279F0F086050DD5
53553B3F87AC2CACF436A6A992AF673E323BE5D63D0929903FB45F56B11CC71F
B91B860DEA2988E749819787F04BA7A9CC3EDBF9CDE514A01C3F4936F0AEE0E4
090830BF1A88960FCE4C041DB15FB75E9F85F6D97E297FF1FC3CDCF9A3CC69C7
6B1FD7396AB2D1B3339108E2D924FB26FC7F1A6123A48DB341EF7D38EAD3DC87
9377A13C5D38E1646E6CAEA342E6596DE8F3052007F9104B56F1B23158DBEA21
0651C80542242FEA29BB618F6EA9A4AD15C9B362B32A001779973DEAB1CFF05F
E0BED47CE47CC8A404A1E3544B0FC0E0613259D3F69663FFDEA323AFCCF2825E
654D39A6BAF9C116EACD0849C6265863FF7080CA45189BD8A3B135FE7050A6DD
93D6CB6FECC4AE5731D92CC9099C90F2D54C2D906F5A2D07BD8A312E710CFC94
BBB4DBBFE13B37FEC33DF3B23FC7BFEDA3E33AA7B2C2B1A9AFA9C9DE442876D1
0CE2FFEB527E7F7D13629E86CEF1C8D3D84C9892F62613F3FC722D561C0D2898
92C7A013C8F18B2F59A440D1EB1FCA7CE575BC43481B0A52E231C267046C4EA2
7240E41504D3E851A06708C2BF56D49CE921742A12D11F083A6DF8ED299BAB6D
68115BD772CC4C3ED8EABFF2230567998B58154582EA347DE87AF5CED09CF717
D58E2A1C8B5E7A2AE4E28D251909BDACA34DE171D74388C0E5346B76F0A64687
AD733458485E8DE3B310E8DE4864B56B115A9F309C62B22DD4C3F84CE7C6842F
37CFD0C4C526F0EB6929BF56986C094029FA3F773B665ADFF0135A65ACB53117
65991CFCFAE8BAB31B179B691DFCBD81F6424BFCCC27C5DADC53F660C32CE21F
9AAE44E3E9F045487DC03DBE7CAC2CBD4E50172A74C3B6E8CBBA695DB33CB2AF
185ABE396DAB62D2A528C6A92646975A56E261E3C16937CEA1C949AEA6A0F892
4A0DCC610F842E4E30C1104F859AC97006C5D0E6708EC68BC3FCA64AAB0813BA
7CD309259D4A204CA4E4BC2591A87D0CE5AEDA30DA4F11EEEA10313761800EF6
29A27AAFD876E1D5EB11DEB30BF7A3CC1FC21E74473E2BB020C5A23E03EBEAA6
40CF23D89D1C2F0FFAB64A2D55C1F6110A42D0F70DAB4D6B7E2187A3BF218A64
561E2C6CB4EC40857946FD8AF62FBE99C8E9E6F3D328F91FD8F81F3B6D2915E1
6B5614AABA6CA585804A8A7E8F697C2C1AF8F72103F1A7415F526A2CF3C16B80
0784C3904FB7B037709082441C1FA1051FD258535F8DF45FA5A93DD5D71B748F
6814D308FDD1F2E214177FB453CB2F8B3F2FA4335EF6B9C7A662359D8DCCE1D2
B9CAF791B34D1D29209A16487327DC3CAC470BC33A673DDC4428A5E1411B2C07
E5378B12A51B43F968C73FEE454454ED1FE723358E192532476CD8EA1F5AF507
CB853A32E8C35A27066404D53CEC7C42236ED0E509521FAD3CCADF6FBA6C2923
DE34A7C05AFECC87868D475C5F8015B05CBEFFFF2128303ABF65475DBDF2257C
D0BE6E013D6BB6B46A19CF0B915E39263AA9F03B21C1F45C87C2CCB12B585738
F6DBA549ACBF1B3D209FD686A800CD5E1F43E983CD3FECA9329513ECA625CC1C
5FC3AFB291A6B75A5939359BD7BCF62735379ACF3309DDC5C3F30DD7D3A37806
13FC06D303CEEF0D9E89E6660D609C17A3E2095F15EF4124C8B15FECBDA4BB89
EDFAE2D6A52C31C01B3AD72A4A521BBAE10CA63833AB245A75FA6077C8D57039
2BC12B8C712A7BBF3E039137E11AA20B0C21EDE41EBC7BE92826861AD4EDD4FB
EB504050FD0E50AF70AAB831F5C125F5D16443DE00ED69C1FA674BA3664F8BD0
0C08A27DEC7A7DEC18EA9CFC6E0E14AEB374E80298F0AB2D166BEFB7C474B75A
FEA18EA3B3E1CCAE874D2C37B6AD9F914220D6755257F03DF774EBF4D0C46F9C
2DCC30A54D6C1527AF1B4CEAA3CF90E2897690D4338A3D9785BDDF5BDAB7BEFB
A37CBCC7A0DE20F697627A5CB22BB386849008A06A6B70113D5EE7B15C46E393
933D2C0C9B6E55C3C583355B43C06B19887EB524D6E65C5726EB9D729F341954
D4FA336D2EDB9B6D48AFD2AFC82E953903FCA10DB44CBF0BBB413EA850A2EDBF
D395F2A6CF1E84500A5AE5DA9BC68C3BB28D26B8F81746443B45E380AA81F519
5C552553B1294A174E2A4599A4A9EA45F1B5CCA62505D5C6B88DDEA6D3A49A83
886DB260065E423B426EFCAA6208DBFD5615A35253D968BEC1722CE2A1364559
0B026EA67C0021B9D29C89BD121E69EDDEC575B281609ABE0CBC317ACFCCA3C7
46EAF40469E99A48A7862A1246B47EDF828AD50EB703E99F0C33737F64E650B2
FBCD9B1CDF5180815C62AA5706D772C8E0F2A3303895C92605AC421C44A46DAD
79043E68FFB9229EC6DE4ED5A8DA7D9A7802D45A0CE4F8EC989FF10865E58A7B
A55D337F12B58C8A36B337C6925E0CB5BD963CB791E28CB54B37655CEB7EE895
E36ECD8881C06314B934962984C7FE400CC8FD9261E1A4AA6C03AB56400180B7
5A10B31E330BE53DE321F1107AD33B99E0CF10C6196037A77C28CEF5AEEC523E
ECA9329513ECA625CC1C5FC3AFB291A6B75A5939364A61F1909488B3C1295FB3
81FFE037D9126BAEBC8D202658D145119526B2C3D294FA26FF1D3965B4AF6562
BC06210FE250E64C24A95C9342F0DCC0ADAC14486164A33C05BD4B9621A6A1E5
7DFCE7C5DFEAEDFD98057DDB092EA6AF1374FE190DB63D26C2FDF57BBE1AAAA2
DB9B9ADF1F4583E03E456469890F07F83BC0A8954FC5EDC528735251FA2C8C10
F6B6CF80898FAB4BADFEE9ED0305AFBD45E6D36223AB972791081FE59397EF9D
69415C6B7C8BF0A7F4CFBA1357D8E49F885C8A0FEF4C3CADC2E1402F5BD63E30
99EA17974826426D2C533DC004D6F4C5F511B125739FAB9FBEF8523676B7509E
A7AD0D2111E6F437E08856CE35E812EDB26D73D944E82342C9142F86A55D24AF
2D6CDB429757D2C24C9344CD28DA71588E51C4AA07C557462D5D23EA6F981338
50F7FD4B4BC91831259272D69BC62743F758B67B1B1C6FDF84C9B2E9E9B29784
D6F8AEABE62D8E1E884D749317C5CAE473811ACB9349D7FE5C6BC5A0678FB654
30FAD099A573D38449685F7659882DA0C544168426B788EB1B0561DB4C9C60E4
1C33DB8CCAC4361557D938FC4AEAEA9E88AA0FF61ED673571350CBBFEB1D3DC9
12996C5EE1FE8CB7B7F400E99564E92230E836BCE0075438EB5C1DC0E7194022
C27E45B6748549A2EEAA996F4CECA9D43A2BAFA4423177A9C4CC9D16AB4F4397
2FF957469563D0C9922640E5FAEF8A183AF5965BC832A8843144EFFFC2DBE5AE
8A5C99448CA442E8106C10865CB7AE7BC12E7615988EF6A5FB57F4E38562EB1F
9C2ED760715F3F49B5B89CE4D14F9ADF27BB70C37A73C47B1F9E2579D68D0C18
9B62E2878E6262EC9749FBBDDA118FCF6B4397EA7512A84CABADE67F9A719B33
33AD3BC0392B050B9540BDA7E41941A3FCB51635B7AF6043F860D5D548B166C2
5921D8DDAD33982C23411D44508D578234BDC461D8F78E6D002A0798629F0765
3C9D933255633A6EE98B2CE3B0D8C1A90D72D46A3BD0EA808A251E388C77C8B3
04AA01866255C1E881EAE5DF1E33CB9B2676234FCD139977D35F2D3BF4689473
1117B3A34123CCBBCE2DE167989F65A52386FC69EBEB63E2DA0B2F5191C2C721
CA94A3F62DF5D6AED3AD275C89C72273BDAAA73476CC26A32F37E719C0931FB8
72A372477E84B46119AD70E23350C13A50F6D110323B8E23E927E107B0CC32FE
842D8965DB60AB1F70F2794B3C948BC7432CC9CCAF37A49046BD2DC413BEF262
1DEFC6E64F61365C4228D7404756AFF88FF10A172C60310C10FB631F7006B286
7C7E588D43E047676E81744DE1D89FA7F65274992821556F4E2234E00BC6D719
65ABFFB6F138BEDDBE97B8C11D95DF2B43C2C1B991E045743BA616B72E939997
BFF01FB5C81D7206C438D8A4D6F7743A0984088C61D7B53248D9F280C9CD217D
448994D1EC57E3F08B64AFA20FE86DF13E7C83431A4CEE4425C40ED537AC50B1
5AA2F7686797569D918E9067154248AEB3A2D305852F16A88E8FC0194CE3B471
CC2C4DCD7EE8DA67D9B9DEDEB53FB0BF788FC6CCD3C8503663E537B72974527D
5222A9B8728BE7045DF33975EC34387F5E4BC4A044FB5380D34FA65B3FD76716
D40C47CF247250C134FF33B14EE7EB43D4885785D4D1F07DDD373CB57A8F4226
70A21AD7FA90C418428EEA7FE8502D8A61B50F46B5B91229DDEE9BDC5E27B86B
5AAF00C4FD7FECE560A28F181963F9D2665C53D66C8744DB5881A2207BED1F3B
5D595DF2E4583D1710094AA106AAD876D5DAFAD2787113209C4AC6070687AEA0
1E611D2A9C5C0AB25486AC71014AF1E1608D9106225ACDC6D829F002A20624B2
659A7011A960737631D26A76333D3B376B4CFB907A890BDF572C18A4AC718A98
6B66DDC9D43486DF7BBC05B79A1E96F4F6F11DFA48E98D29500AAE888596D026
2AB625249432DC77C06982BF37C3726993CE2E3BB3F4CDEBAC6A13D24C003CE7
910BD6004EAB05E713C3C62B0853381B561B1DF70FD81919048628CFB416C87C
3172D99DB6F9A66664C121E4B019C7207B0558CBEFB9CF25E8D97B854F2A2922
1C65057830951C7BBC506AAAB6B13F7D2A91DF1E449AFF4711DCD97FD5E3F1A9
9662DEEA6EF927E221050F3191250D6B6B3E6330059159C189615897A97EB497
CFB45085666DF396C64D8953B4F3B0FA8AD33C0598C71A0E87D456CA233093AA
FA54FFA50A3C775B46790D67CC0BCB2112B1C69E42A69D64B62F0E7D8F7E5BEB
EEDC09E5FAF045B8BE29FCE6F56F93CC01814CE35C353A7EE33D323B8499F0BB
7ECD1FEB1ADB7696B6C8FBA9A8C1BED60C8E8939DAAC4A2EC5C445911CFDB94A
ECC50946E35986ED39A5974177626618AA5E29B8E8EC7CEA9151BB39DE44B5BB
958F763828B23FFB6DAD516D7133BAE9E3BACD63B3619B40515553DB3F71F0EA
2621939E55E20F3EC542292AD4367DDC8671EC48E447C84A11C0CD3321730D97
6806C49C1636A77020753AE9AA57C1CCA7866F623240E31FC56F48648689B5A0
FA8DAEE8CCC5B3CC8C685974A8043A2240FCCFA6434B1639A763B4DEEE7EFB16
C0BB056BBD534984BD9B8D746C1800A4C8C647055A0A522E3D33152BDA977F2C
E166BCA591084EC06E04746283D175D8D40163288D69FFBA0F8D78760DEF4C5A
D393C7E2F79DB65997EBD308E2F0464B9F2AF622E8D4903B4F7895F2C229917B
9785404865783BE784755194506F32566CD7602AA4C8665A3C51B5D5AE82278D
E0CA379768691D5CE7BEA436FDAF8EDFC92BA4E94A33671706212FBAA983D7B5
A446BF526A58DA4682C9F22549FE68E9C1E9B5847497338CE30CADE1C5BF81ED
48361530BFB4AA25ED53F1BB7DF1C66513FB59862A2679B71C2BA4F9E98048B0
05E334974DEDC6612AB66ECAD3AF64ADF60EA76360C6A22A08CC5EE51D63E066
64FEBAFE8EA3EF4B83CB84646C78399E063C0AAF44775E6D1570F08B3087E7C7
6F9DE29DFCAC798130C0CE5C49E1C5FB11EEEDD8E594F9FFD8090BA7D3F1B16D
748FA531452C7BDA4E2C719DC0BA6CB7E33875B819AEB1EFE37A3656C9B2060F
F4E2B018462BEBE17138AA07373412B44023BA4E2048104C4078EE1312FB9ABF
4D5FCC4C285213F93391F248F13ADE3CD408714E8E7C016ED719D6A4D045FA24
AD879BFB3139EA35AB802943B5628BC95CEC4FBB62C5383B7DEEE9D850E8A6A9
69DE6310CE224B6C00F8F4F61939FED984C2BE19FDF1BF03737057D22C125EEC
C5B6161C6B372D250FB7ABE7D0D8CE90B7E1BF4C2BD3DC8A8774EC2D5D5F195A
0D61A2E5CFC76D816168B879E23DDA5E72A7022DDE36A1D32DC13EF721BD656F
5752CFDE4502AFBD45E6D36223AB972791081FE59397EF9D69415C6C2A067947
0F5503B71479FD9AC22E7818EF7BA807198621E30376F60BD85C374F605A05FC
7CBFB86718C5FCFD349ACDBA8A977F82C51263082991C3C58874284F7225DDBC
B96381260345756E793A68C54344BA08C9F096A8013F9868A2BC3A6176FCE2E4
06CFB370F9D896E488ED0F7F40BC45C7B78988A1C9B42AC2E06284F8090B0C91
D84AB7BD6149C7F5D4B3497C8110892972328867F02E1D91B79FCCE417D3AF79
318215776979CCA8483BAE7CC33C348F510532011E45262B2CAF6026F73A07E2
E17DE950F426DF4E0F184827D8DEF2133E6936D6E17C3A1E25E1DB8D3102A21A
195B6319E5401BDFD28D8B2BBFB41F55BD4E67A5F1C3F9CEC5CEA996E498D079
2B9CA3D3999D92BA3272D2CFCCF4E8199570C607CD04E5ADBB28E969382B1240
72BC0D21A599EF056F964EC4C367D52C6CE4D2A88834CEA8080C90A3D588D038
83FF6BB1FEEB6170B4C3191D8A4E8390C40D5BFEBFAB68C93D0148135CE5260D
D5B29D7EAA20C2CAD11E5B7935675FFE2E498C3C3B7B3C67335201EDA36B3130
7FD2620E87D1197C8295E27DCC19DF5E08A594356A1B68829B1A2AEAA99D619B
C152CA0D71CDC0B45B13E43694A932C59408483CDE256CA53C2A2F8D150F3510
29A38FC00BBA396516F910115CB35E097E5549FB8112A1361FECAF5B1A043142
229C3931FEA419BBA8067C6D0E964143A0906762197B8DE45513229C5DB61CE8
9F8184AD68C29359B4AD98CD517AC1591E71F55B33A116E54113C0008564D1CB
3A05439B3EE3C4E581A65179F5E2D224E236739B41CED03FD7CCD5476644448C
A784E52D6806AF80F6A2C569B6743CB32F21CA95654EAA6CA92510002AE08CD8
849DEC49B6A0E57BDEEBFC6BE29C6F0A65F911B642231CECC7553574B9E4D593
E8E49F47886FEB1883F9151B216CE7FF3818085AF287EA63DB54F034C17F3734
45FFC71CA05E1958F448F8A3006D83B9020CC042D64587F463BFE120FCF55AEA
0E7CBE573AEC713E420BD4F9419A4150331E65D81B7A03DE139B442435079D9E
91D41CE0C3C67B6B0E13BC88F28E6565E624DA661CD6A546DCD49B1F313782F6
E444EC9465EA1B748BFBA0C8B3930649BBDD743522AC0B6BC5BD53DC01E9D51B
B6464608A3927A993A7D8F76A68AD61B0BE5DF23A5D1943AC3F3B06B0374EA96
314F5956B741E9535E0E085FA6A08781F7E12E3AD62A2C36CF4B5A63C5A3F773
4FFB7DAD118E8E5F2B5627069B3F08CADA03E01788B36105473E6F3B76283CE2
558F1EA9D3A9CF735866D079FCDC56E9BC4B19F67A6FFFC30CAF61E901490C8D
F693CBB35F3EDC60AA58EB01A1355706C59EFAC6D54574BCE793AE7A4BAD2C14
56C087B529E3C15298ABA855977E1E0191046D3924AEF8C9CC85E1269242B0EC
F50779F3D831487A5BE7B3BDCE36C2CBAFB24BD134E28E4795492D6E862EB089
FB3E092777EA7EFA4FFDFB9D49C7A763C8AEC2AC4AAD95746DFF668A58EA8CD5
00FE6940D6048A756D65B640B7B0CD3A79E309A979FB25F88BC36B2EAD610291
9B2A886E10F164B55C7031555A42674A46A46DE0F2FBBD5CFED6016A7F8A61F0
0CB29BEBC1E9DA0E65975F32FEC44D28C440AFED971B846D770737FF74FD5465
57B4AF5E637CFF01EA9CC0CF0C68409BFF67C54FAB997D27419171A5485F4D5E
8F10B7AE200364BCCF97211E8679B3B682BD98BF24FAA1F2D435F986889EA57D
45D04C8D82168A8138EACD942DA55D9BF69A0602D703E153FCFD3C6013918DD5
59D3479BC1C73DAA841389BD03D4A09B9EB55966434DA10F723613B2F6A5FC6A
1A8DF8B01075FFA30656E9F70807D8BF9BB15F32EFCA4A719F0B72332B0ED081
4EBE92DE66E04D51CE13852F94ECFA829F2124F9C6D73F34C2942BC2ADA63927
5FD864257C4CC66C88F5BF25B36EF552EBB1A1303E87203FCEB23CE074F149C2
EEB296551E27B0B32F049847881947ECEB2EFBE35EA50CF1C5DBD808ECF0DEF1
4F8B25A4D9ADBDF257D58C54A838F5899778B2C55976BD98EF2D6C5E74F64EE2
E0291522582BFF9F9AE277F94B1E99036A6DF1B7BBDB0A5D1588D3BDBDC000BF
8D7CF55A5A5C98B36E30A6948262D2C8AA1AC6A9B711D44D950B9F19D352E13A
61A5F177EBCFDC7D2F2CAB5985D0B09D287C411FAB348D4D27CA3DAC55576C2B
7F6138C7D1FCAA4952DD23CA383DD4767BC087389FD2A5CA236CCFF3EB2B27A5
A20898F19CB17D7CB33DF6939B3318706D7D6D2CC8CCDBC7676B13A40EBF0212
D9AA6B5F0CBD9EF94906BEDDBB93B7748E3DEDFF03D5B195BC462DFEA51C1E7D
39F691EF8C5E921AD3371F3A8492305A25C4E39541CF8ECDB933EE641CCE9D76
468D353BA10A12125C568647536DCA8034363F4C5A61B2165EBD0FDE48DB7E77
1B5D8C1AD361B5F0E0EA092A44B4114D7AAC6AC5870D0FDB7D9B36163ACF2F27
747C86868E7D5604DED821AE4C939B5267804B0409836AA1D4539C43B13EBCE5
D8E8EB108C519A0359ACE8CC6ADE04991D37C88F84C22B6D5BCEB12658B4DE85
5BD60D8BB3C50ACA957F17C5ADF9D9F5A048DE38121EE2BA0374E66BD122F99A
1884812B4DAEB4D30013B02E3513D2DDB0AA3C9037D9809789AE6155467DA750
26A0F6C3D9D2EDA90501857638E71D2FF22FC94A4263C408CD5532D059354414
92DDB8C3146F17165C73151FEE9FC64D580F8D2ED8E0F3EDE26279776AB956E2
A4CAECAF2E091DD7659A4DE45EED2C09DDF745243D194C614C16D7E36F74CF36
BC734EF240A54CAE962A49B0B3FACBAC5200FFC21112A74580A9C0DD3EBA75EB
301C9F05D111D9E8FB48BF9E8B76F0754F12D146CD105DC361974AF066C04FDA
BDAEF44EF8DDE020ED3E342A8479D21E44AC666DF84F82840B392CBF76DE60DE
17B95BA0ADBB3891FEC1855FAAE316E0BA82D2C8952D424F7EAB83B4AA1ADC02
423B9958C73D306BD7A90A8F9751C8FCC8C878BA4B44F02B39F48375A7D75BC3
7FEB2784C1A15D6558AEE5F7CE7B3BC37749D7EDF4B3638B4BA4D094EB8483D0
A322E0F0AB8BE84DCFCAC996386A0CA4F6CBCA7F97D711A114CED6B4899474A3
124D4FBD961A87EE7511384E6576EC36981F596A8516B5455BB7A3EDBE537E30
7A2B449710DC01227DFB45A663EFE9524B7D41357D81B005011B2E4EC16D9AB3
1E95C3E2BF36B577E1827890E10CEC358AEEB76819DA7F13484C04C8DC1DBFFF
EF2DD50EA69DFEA0EEF88C3D3800BB9569E058C01C2828003D1EE84E77FA8720
212AE6D3078192F37463DF15E7FD87D172622D47714FCD39B52E9A82035110ED
87DC585D6197F8FC762880B589A52A1FE7E2B6FD928FF7E51CBB67E70B290AC8
8D73F5F0E3DA0AAE2511A0731F4CFBEA451BD48C15D194B7A32076DFA39DC81E
0D30CCA1C6F2D383808B3D1BE5145FFDEF853183AE85E659BBE5F38552483BBB
C916D10A4577F00CED07C21E94FCFB616494D1EBA4820639506EA0FBA05CB8F5
E0E8A1D41325D54EF39607CE166C06EB9E9482F1AD642293C65F8C0ADC1EEBE1
C106B8CBDD7BBDDF472B21E02A2DC5BA46C067432CF62438CCC1953B78E7D9D4
31A1B5A04A73AF4A83C7E6CA9BAEC54551A88881FD5D5E7C3A9876203B16A3EA
8D1E4B31A0F8336AF83C3BC6D2029B6F3CAA112DDF89E38A94D67D16E4813FF4
8EEB34ADF169521BC2D64468B5B0C9ED4BCEBA7E0C6E665BE65C3D16E5C29B95
6EB9A0A241BF1F8A9EECCE1DF216A188A463C17D3E7EB5D9C65F9302CAC1A31D
CE750E1776BB012437253BE0BEC782AE5B29D62ABA4BE9948E84025FA6966A3B
48CCFAFD2392C817B8F7FA666FBE36129A36419CD8DC0BF179A7625A65F55FDB
5407D4C7BAF438865A23F8F5F6021871B31EF41D3CE547C0E9C2D5495CCB9C12
9A0E5FE4D3A2200092E4AC64DABD34C35FE8A756B19D137189B34F594F6116A4
87C67FBD19BF0F48A07EB0DA956C17EC0A2FCA083905F15620EA7BB0472C05F0
0A054F9EC2E47D08EB65BB29E0BB22077C91B7AFE12FAD076370FBF1054C70F1
F5AD920E4A339156DBB7EC21E6912D4AB921AB2DF06F5CC78602FC5758745E7A
A8A94BB35A9CFAEEE6A2DCCF714D2E9046B3DB2B0221D91D4C2E06C093E9EBE2
2FBB31CE9152814F2DAF56A2B75471958667581ED92444FC7CE0802F9496B82F
2E19E71A8521CDA76E3A1C6AC50A51AA20C19573062903DAD24E5DCD6D68B9E9
9C1C5D96C0EB623E113D1C66CA7B4BE8241F9469C614B20B5CBF52FF750F9A25
173C095F9719989C9303A6F3A8D001F9293C0BE0DE44DFBC91F03FD5588E7CAD
C4670C6FFE45FF252F4C8C610616A417C37827D8AD8802F62C21D16B3B6B275C
B0721A0FB87BBE7530ED3C037A517E7F4D92C7AB7BDAF78C3CC199450346ADEB
EFECD59D1A435C79BA92CCC0C424E5EE4ADF486DA47F265FF8FC9FF028AAB2FA
DA33603FC9AA1D2E76F129264A99875D3CC1A3F0416B6DE2EEBF5450D66D3003
483BB525E72624E6CDD62EB5BC87A336E102753EC158B65F81A1DCD465276FB4
FB5DD257F32060B7F81DD5C45AF9CB8A6391DE5D0330C815DED410C21AEB0224
3DF1E3F9697556A07B6FFF44382C4F4B3DB77A8D2044F55D3F99F3A7945A509A
276A907558F135C51A71DE38560262A6497D26C20802118C7619AB63A84DAD61
8893DF0A09DD160B7860B948BCE340B887CACD4C5DA54CC2F7B760146B462F13
875506E1B3282A9148D81EEA25695877B03781F64847B907C992E57075394491
E440BC1FAC67742DFC48851F1C23A09050F2086F0B643A4E89E630F99516B259
7A05BA92F77E2EED36C34221A80A6147FC710FEC523A9B4975EB3F54E904A940
D72E205B9A8B66F973CA144BCA8D8FD48117FAC51E8C253A21A8EBD245B2C15E
55E69666A3138C8853581AAFB5FF7C05F7DAF659F3D9F38C19B7F335403F39A0
00EF18A7BACB70660CF174B8609DAC1AD18370705123053D6E902DF3C0772DBD
3468A7FBC27D932CBB65408DEEBB298E1EA6E3E3EEAF37840C531605C233BD19
F3DDC54F3DA89A38A4C935C8D6D8BCB5AE445D8DFA46EAE6ABE8E3ABF5CEBA11
00D149274449D3C3D6326DDF807B3E6DDCCA1AB8D4A1CF5498255AF54B3CB23E
F52F227932D65EE936C3E6741504CA20A65D373C9368B08D2A7D7653A22879FE
8AF7D4776001F79BD11779E5A24AFF6DB5022255701F2BADE283D9271DB06406
EDFE6C5B05E7CEF2121E43FE607C231F6947D236DD23D62CCC535178A425922B
28F802D80B719E1BDCA9DF4DD72D08AD607AA9820D7508B61E4861007AAA45F0
985B9A4B94AF1C43DE295DCA983BD283DDABF18830704AB61F02B2B993A226D2
E4BCB9B21084BDEBF191B566B19808EBF05438BBBE101D92AA8ABD1FDBE17E30
BD3C035BAEBD18239DAD5DE13ACE68F8192664DADA740DC6D6B04101F8F792BB
884AD5956BC13D01CF167B0D7BBBB1109F5E471A4B376D10046784E5E709A87A
276F28CFE645A749E277A2A50BD8B52C9EED41490EA9A632F5936307A36B8F94
A355F6964C8608982340AE3519E5184DA5B247CA05BECDC7A3650AA3AC4D95DD
30B8184D3F2988D0CF33E2F556AA779457471CF9C96C15D9073E210D1861CF4F
5B74C12E1D5E747BD177565DB81497FADC2BE720FCF55AEA0E7CBE23CF6D927C
59A5807D2748DFB5691166D59F99616224E706E080926688173C81C74F760876
5B1A91BB942FF755C0D583625905275297F2A758A435716A99169FE96463882F
782BF64E724B544D1588C8B6679852DD4B51CD989A20A69BDE65D8C01DC2FC5C
C2CA3C1D3C92FCB9772F06420539934907A0820D89BE4FC51C45A7DDE629BF2C
59D66CBD71B1F147EC07BB525F6951E1989BF7D29EB70553F370E19BCAC40C58
9C79ED8E3BE94A452536D090A4E2F7572FFDD5CA092FE2119CEC684DF7D1F6BA
8943A6C10B1412E19F6E8A2B7DFBC64FE93BF6A81D815ABB1F31A89E1F1F3F37
12315F712F737CD7FD745A45BFC3F91502FD8CF766637F3D307EF71EF6B3782A
7F9BE13CA5072E29E6CC277DE9B7812B89FE250F6B29AEF1F10658C4E59BC127
6B41F166EFC8B89FD8C479E6A629D2665DABFD520CF92F87C1B76B4107425AA8
5AD6A72A26F80A80051EA550895A10C2ADF95E2621B2E2ACC24A39C5E1B3C64C
0A6C63A2AC5D166B03A6AE4FB1B6A9B4D2D1A48D45A42E174856187141FBC7A2
BDD0066895A8CD6ED6787E3869911DB0570FE5611BD95B655AAB340505AE48A7
0A7F195F48550E45867A28186E3A429D6E12F4F67A1782EB04B197154700B8BB
D4D65F85B81CB62B98F0287855B3E97803700E50900CC15037EA37A002015A3C
A98EDB0D4D828C23AD5BBBBC2DF38D9A55E5F8EEB4D4B5830F9763DFDEF6872A
7E07CC758DFD209F6DD1945B661CDED34D047750CBE6F980EA86FB4426A85EDF
9E49F2D578C90BCD9BAC27D4B16F4739DBD891295396716E56A1A20CB8F3D82B
DA0E323AC159FDA3F73E1B305C03B7FFBB8A539A5A78F099F244A9F75DCD7D95
456200AF02C1A7DD8C228F3BEEC8839895A7770B40001ECD06A34B4448A7F391
3E0879A04172B9FEA57C864C551C7D660E41A533DCB673CD990A4809C0115C51
CA532C98204BE837FCA887732CE5A62658B43CBCBC5E8888481AFB5DD9F7ED75
9091062E6D552E8D5253FE44C32EF58A5611E3F357B9221C5204BE14A5F15B71
F70A257D4535C160020CD7F12572BB984159934AE3FA0FA03B3F0E9BBAFA766A
5862F8935CC09D104723BB02264B1CF5B4BB2B4551DDF8447E2850F905157F72
E8AC62542DC360673645B965E9498C19360C7CC9C08DCBBA129755417EC8D7F9
8FAFC2A9761D79E37A2B3CBC7B239B6C7F3E91FB1E4E73237238247A191CAE6B
824B074160743F2AAA63659966EF581028B7965AC1826CCD6E54DB5A128E3E85
7C6FC2C1E3CB2BB26E7000AC331BA4ABC512DF66BE89ED7E870122A0A46CCF56
D8401569D69E8CA09B47D663ED120B042DC63BE910D31757F5834808D1E379CE
9F8E7FC558305A25F734216B3369AD8DC238AC3C5539E2AD26582DDC2093FFF5
7D6723FA7FC83B1751E404E39B37C96A00A44BD9587ABEA3DBEDCF4B1771036B
9F53E72F1FD520B4B30D55C5A590CC8D0EC6FDC410379AE928B925ECE0DB09F4
D33971BB6AC5598B1E08E723B64993ECD95A98782C730C183C5B33E052AEB976
D859EDBF44C7C382860505554B7CECD065FA8F405B4CCD70DDCB0102FBAA8A61
72D1000E975E7513D0156C706CCDF0491AD6C66659BAB715BAAAF85F128280E2
DC196B9124A8719A0B094E42D3CBC480EE553F8D1267981C1B34145D4BB438DC
DDA7F91DBB1C8DC8FC6BE36CA0B8C46DFB9CF77EF07C44F6F4E45ECA89C32EC8
E7C53CDA1CE5CDED325D4DD939DDB00630FFFC449253111FAEA18F251C2A1536
046B5DD23AF13B58AEAF438484B3A75FC45160C21A06D45A193BB7CEE0D6FF46
29BB5D1A023169A743855AB34C1395E644F5C57D021238CEE76A496DDFF3855A
4046031D9BB82C6C103023E062FEE38FB48AF07B193E362ACD98041F941CFBCD
2EA8C15B6624207E65E1010AA95FB90CA84FE9EED9CD7021261D2C811730F534
9A801F0D3764780499D459FE8F1606E4091EC142B62DB621E9F6E784DC2BDF6B
5B8A173ADBF951F5768000AB48D3FC89FE4363167E5B5535DE62CFEC0F3C7941
EF9EBEA7E2A376F8478C03EE756B36B518479B9DE43A7CAC25E8A1DCF640D574
4305DA3268A9830D9F9B268A1E2E15141F827F85BF3E0E3B98889748C6EFF23A
4F2E30E4A3D23946D518AE0FD1D3338D99B14D8BF504BBD1629400672902A7C3
5C80E4AA589D83EB4929826406664310EA65BF77FE61E6A83070F0784169A933
6D4691E3C9797F9FAA9705035D6DA93D934D5C58D86DA7863328670D822220DF
701049E106F04530708DD78658AB0339569338D455D8D355DBB8548F0D58ED84
1B41F01D03708D1935EA2E69C1EC6EBC648DA1E2FB3A047BEDD9E779009AABA3
309476E9AC9103B3B7F0FF5CFC2D4888BC2EADC60BB6225D9CB6CA887922B117
EB0E7B4059E8922F80E756F2D702DE6919F5CE7FC3B92ED8B8299F26D8FF7AF6
E0E6E181AB858313D2F697474CBE52097173190B626373345369552A81D25DAE
EFBE63D60891130F751129AF903A2071B3E1928C721690E46D1453C7B23471E0
7B53966F0A5D85EC4BDAEC16B1C259922870B279B26D01D8ED2B2B70E658F0C5
1E9765AB5BBB8F04F17428F5D92F0D318ABB61FCBEE8E8B0B00C0CD02E94C64E
B4F81E8848CB5D53D76AAE7582AA3AE49DF09610D51E6D063E85E7BE4B10FDDC
9C55056AAC333473E96157C3149999D9417CC312E8D87F14AF3DC280BA7B1DE9
B7B5D24ED5D673E26A25811D4BCA9D693EF8ABE78094127C324ED9094148BB33
DB26E3E436B06A04B309EE963A0A6BBA324DECB086CB36468EDC8CCF17E0FD80
229552C3F3561B1CA13FDB336BD4F041E9FE46C75BA73AC38E2903606F890740
70C20E6657032FF77585F4A1A5BFBDF92013CC40CF96EF3E053C3AEC1C65AA54
8C78ADA319B213854CB51175B088CCFBF6EEB46D7BC3B3B23D901A9E7A09327B
EB82BEC7BB8F1C1D8540FA065E4DE1DED964A4B74F21DBCC8F96697ACAC75B1E
69BE9B7717D541614037DC8767B74025EF5FE2424D495D4CE0226C948A9FF8C5
FE2C16CAEDD50012CFE11527B35EE375AADF0318B6EE61DE31BAF478318AD23A
8C73CF337F594F0B3AB4ADD14545D83FAE2FDECFF5AFCF7C70F278DD5892D816
A05BFDC706FF5346D85AE9C70AB830ED6982D918C794D4BD78C6F05212E12763
2723E2235E39F71C4F0499935074B5B5A3470CA5F34361AE56A3E38EDB0F4A8D
211F8966D90D884FEFB29B9CA08042B567B304954BECDF82DF546EC30926D329
3D0F91909E795BB51F595710599D30AABFEBAA3DF93518896AAEB75264CA5D0F
A2639CDA36874DD8699236772DA85ECCBF7320050EDC71A10AD3E7C7AF9702CA
13B363A592EA29E23D95B587AC11D20B46A86A1FA9AB495138F2116865DF48C5
521434C768C3A3C4703B59735ACD72520FF3CBE9E8DF511894E8900D7ACF3C8D
A5C99BF5A1B462BEF910CF31255442BF04AD5CB72EA2E8C6DC5C92D22B2474AE
A49E3667EE9AEE712D292264C25B2CE086713E396437D37A135783DB2AA4FBF0
03CCC2256A7CECA22D415F21FA095C1BDD305F557EFEF87B4949B3B5E1DC217E
8A1FBD9B828B8E5DDE1172422799FBAB0A2CEBE51FCFA337A7D3714416756677
B305891DECA223B4FB7B82B0FE9A4F5710BCE38063798895D69658A72802D894
7A4232D64CF617A8BC26876409E8C898CB824BE6E3FEDA248248457A91624203
BC9931F549707C0A9E349EA8CA18AD26F3D7A01485B458622EB3D536D99B130E
3BF1663339F4CE8710E4F3D621652A4C2F8A7F771483C26BB2F7622736A0FDD2
D813AB436938A60A0152093E834FC1F528AE69C8454E5D0DA08643C4C36DE6CA
CF4C3FF495F0D3B1317D4933E1E097ADD397F7B1A20E03DF07E27D18847771F3
A1E788724EE04D174872141881665D08232C5A14A7EF671899B0597C5EFC75FE
B6AEB27F89F410C8CBAA8F91583D3768019396B69375B1BA401B7C66DE659436
405B1F8692E1E8CBCD56AE68B354F7978C76EA1140A78AFAEA913AE1C75760FF
90BF94FF43DDA214D11E1FAFF4607B74FA41F95589F77D05C060D65C25FEA1A5
980EC3B8FDD9F568AF98722A1A501244ECED9B0651A8A701D7ACA3A721E3B4F9
977D213139C6F1D2354F8433D4B3EAC0D0C50B93E2D8CE82F1B1A3066B572975
151A5AE07F302102344ED2C2B427A4059D2D02A0F91EBEBEAE46A403DDFF8A1E
0F1B4993AD4B09E331D14A662DA0E2251998CD0CFAAFE83904BB3AC4563D3E77
8E0C96590D2D4DA46741AEFB6A4F8B47476E4098ED693455F82F098F49FF4876
28136B985BD1DE83DD24286D6CF228AA2468AD15C9CD00FDAC36B443B92E158A
F667638543A1C25BD46A6A37253D0A0F7D761B7A9C7B95BD29B01BFB8243AB88
9BA8C0612CA0DE54A580AB3FC15FE01287D48D9E6AE56CB2F11CB57061CB1FB0
FE7B066DC729CC5070524D1F10DBA185FEE66DE483011A4F30AACBEC462B4083
B1E92CDF87622B38E490805A0BC368370B1DEB32C0ECA774580CE8D5A706B675
6B355A4BB092D34EBD7C73DC26CFE7FB319F985782FFEB53FF8716DC95585AB4
2C3ED86BAA8250E975A18E8E04788701F8237CB7BB9E2375BAC61E51E3F4644C
1A4AA0E3AE0031BA81B26919246BE7E92ACF4DD13DC9CC4F2FEB158B4370BD2D
1AC260AED82F0EBDCBC62BA0AA26111A5FACF3C6B88BCA147352242EB34AFB74
F13954B882D400597DA6B584E6F944AEC3AA97AD291A3032F4198B12D0D7A61B
06D63389A485B64219E336DD02236DF72F194F117C74746F20EBA40D53E440CD
D0D9214CEB611E2086DD4E1DE964A3A45C7A7112348EBE1097469FDB88C2D524
28B88D17E5AD76995AA5159E80FF68EA4B90644052AD5E8DEEA70B9D14C37981
51161411BC239B496BCB70C18A3D64E80F868E4915AACE67C72A84004043BB97
90D64E8CC14A2BFC636DC639A5D6015EFE0E2EA6E2FD72EF766790CCD4E31B19
BA0AFF64E9C89BBABF49EEA8A49F88B404A3B51AB7386DEC1D1553299043885C
BFBFF18FC0E5FC4BE55ECC5BA2A7A3C5BB32EEF0CABB86087F28FD74D72F0059
E35DFEF5A8F444C41D300E540D53723C3471422017BC7801E7956F4E517E91C7
9379B44362D1D98637A4E10EAF25110C074FA79AAF5233BB5AC05A3F73A7F076
877079FE2C27A618FEAB9273AFE5819BE1D31040559F763E95CFE230D5B280FE
341B7061B7E0724EBD5BDF5B48D36D92146FDB87390FD1790C1CB620FC7A810E
37D91DF623026B0FB1202E8E0669EA5CF304CEC35B7404346B5B885308D45C58
99D72D0A04E30A519843CF0206062083EAC81F2745C2538DB8CF06364C18D0B1
4473491ECC44B826A023191A6589A066E3C09DEF8C946669EF2C286DAB56E324
1A454542817B56BF7DB93B51B70D52E4CD68E283D186FD9D4F06B6C2B0FAEF47
4C709515D6A6557ED09C2D3245B2BF0F7362CFA24BB2F3D4EF7D39E1902C5305
3C27F68C680E7C90DC710C4909D50036BB8CEC576642181B687107497AA5676C
08828D7CF593CECFD951BF6DD218E09F3D0EDA0F4F7211B5B5CC0A348F325F3E
455317804CF01C2E9C22D6B8FA2AC9457D89B0D17AAF81C1D5842562DE15D31A
539A987993600AAC662E767D37B337662C7A37441428CF4ABE44BB355F9BFE6D
3D18DBB6320BDA68D225743526ED58D0609387FDF1B76262375016FB0A6FF881
EF3CF7AB014F8BC6BA6F05F8821359AAF083C3401CF7FFFD44BB24E721591A80
A152B7634C03EB21A33F0C10FE0FE35531E6104AD009271852AB28D71E70067D
52E7B2E40CCDB1A056428957F2E5726E203F7036A0422F448801A5FDE8CD9352
670BDD8AB5616AD4ABEC547A67C093153E603D4E21459FB6F81F2408C599A9FA
B83995414E9D3900926FA8087A61383E01E64836E960FC7E9B9BF26D89F808B0
5C2E483B9171450E4BC740984239EFBC4A36C40D9A406871E2FDE9D7A8A0DB40
97F00955FA377DFA6880F5D6F64FC185A3BC3BA69CAE50286D45ED4A730B66F1
600139D8A3CAC11575AB532D5F5EA8484CD1931F05317990FC75707C2F6FC11D
E1E7AEC6870E7F9B9BA25EA5EE7AF601DD4195B56AC0C47D25DE983D85803E5F
CB93382B7F1B2FC52C263D047213AEDC309C0ECF1B3312511286D8C3D68FA4DD
2AB665537FEBACD5BC7C774D53CC63B57F7C98B47C99062C763850EFFC345954
1BAE735D546C7D7B941E4A8E9E98B02DAFC070A0955B8B14C59B4D5928D3A966
25796A48555937E7EAE5FBEE77648F246AA8FB60C78FCB64D5BD4DDB65AD2F2D
3AACC01FEE51D5B16BA6FCC98E657362ADB009791944368494A93B8C50C46BC4
8A0F4876E3C335D2BE90B5C581D2A1E91E99918B82D8BBDB1DCFE65325453720
F02A01A21883478C4B70F8BAC1FB7FC9191E173820EAB8A5D47D16BFFA1BA43F
4592A98C8D2FFF3F7C0A84FB8D0F4A7F7919E8AD39200BFD0358D8D606291B41
7D0B25542A125F1F529B6477A04A0A7893B2E7D3B5EA0E324E24E92E61F0A6E6
89945AD1D5EB23E4F322BFD82BE007D82B20A4B204A3B51AB7386DEC1D155329
9043885CBFBFF18FC5E75D98CAB97B709C0C4FED927C9D39B41E36C19D3F90A8
D29C3C72EDED884CA9321BDC6EE944C5EE7644A666A04E243D08DDBCB12F26FB
BB8F9C43DD7BF7665D5BD0119166F04F6B67255DF8BE272BE0F8E1728B4E3527
946BB6B7581036F61CA73135DCECE62BD50852A45EED9EC083AE0710CDBBD497
190696CFA54277F55C9A2AA048D8FF185763DA65D56DB073E461AD860BE59DD9
C26FA72639FB421C3457FDC09D3FC3638FE867857D585ACE25A158AED63B8FE3
91030C50E0ABD4B8B3B12CEA753FBCE23A1FDB78653D2C1C120EA8ABCF799E36
08ABCFAA156DF775F92B943AD634384B523E5D9A499C1047C487A137DB1F4C5B
EF5A589847B993C18E41D0CDEF40353FF4E3912F700E44577A861C73E2849193
A6B19EDC4B18CC6C8DC6899671CA0241E12598090868A71838E01181D2864E1C
505E451409F058BBFC0301087271EE7DC82969065E6267113421BF6430B94091
A2B42A2CC2C3BA2E8510EE7CCCF06B3FE91D12AE88814DDFAA3503BFA63537E7
FE4B7CB450A9C45FCC1397C6B0A86284D5B10342446814AB3ED796B8189A3F73
9C72975C388195E806EEB917B03410E59E6C7C4ACBD209E5F18DF65430114DCB
CF440493662D137336A6CAECDB5D6197989455792EB4780EB047051BE634D62F
6F164085EB045535E44A65CF648CB826D732F60C7359331530EB552CF3C551FA
256C4B2648506E87CD85E84C54E47C448AB0EECCCBC6EF119F33BA7DF079DE07
E710DDE27D3A1BFE32AA1E53026361E8CB6A7E7849651D13BC0A4F00E480335E
0F5ADC95CF5EB548911B66840F812555122B46A03394E8950A04BB047372EDF0
21028D8240697E45A45DBCFD9EAC410EDF687B5D2BFCE80CD03235A95EDDB64B
E30EECBFC485B475FD9788B553B8D19BF698C00666AFFFBDE94EDFB6B622B304
BAF07255C2DB40805463C5A1C471B6B6061F2FC29AD6067C60D1CC7AB83FEC19
C5ABD83BED112A45E4C2811D37C9029692DF8E94F6FE39474EE13AE9F549EE67
471AD76F25C6AB3EED42FBEB0E316AD709E35F145C9C8207965CF783EFCD286C
4A69B2D48512BA6895439F067ECB8C163606C3851355ACA79EF5C5033D4B7A0C
2A4FB0EA09E150319A8AA055E3E63BB78B7DC14C3F940CF00CA3FCCC76F5ED4C
040F16E35D32DA9874D124E36250D6ABCE695A16F6606F4F952972D8E1DB5CFB
4C451D35649794FE31586B454CCFDE1CB0F17F31B2701321F8DA5844CED3448B
F453FCD9A4F194FA648F9FC0971734BDC7DFADA08CAAC84AB583421E5C08469D
8D97C290149C129E45B054F4F1357F07BC9C4E894307828CEAC7030A67357BD2
9028ED61C58260832E6C4EA037F4A4453F720AE01DA4BCA6304A8C64D2771F67
CA490B4C76C3A8C8428A31875E5671C075DD53A5A8AF7BB60007CA5B475305D7
E36448675EDBD0CF99BB3FA898F0FA2804E0BE56EAFF149B02463596BD26783D
EDD1D735DAC9E46662F10A21AEFC90350EFC42DA44F23139CA45625EC8E37225
5E4A957261B5A8AA20446462CC5B70540619D87B443E1B568B9B58941EC067EC
4C032227B0E1F21E83E90E7214780051C9873BCE5A027150D3CEEE5B447775E3
5BA59FE2DE27B259F845681D61D02D28B185C9F052844D9A5F91C9664D9E2DFE
707DB05C0FA723D9E430A779CF890239F7906FEB7EABD3D44DE5C2197C220A4E
6C51AC3CCB3B69900F25621C1D1021B2730D8E6F613285A713A005746258A2C3
B3752CB69D37162CA32B7B98C60E9435584AB2F1A0D0E658789BD4E7377B18F8
78DB2EF1C5A129EEDB0C0AE0FA25D586BC15614C89272DE6D1F25C31FB754CB9
EDBC8AD94AB806E96E4BE81DD662C6717E289BAA75BE42A38E88BDCB7DE042AA
827FE25755A8086702519AEEE0DB9B95C06E05F9BEF1443C230FF273E3EFE601
89776F39EACB4FB07EAEC5BF1D3E9E206602FEE170BB1B006068D399C475B37A
DBA95B760E66EA8F369480927308B2B729247ADBD9A6BD66572B5D0E0B3E84FE
51048A1F95C18A4F2EC340616C830D816847C1E93AFB5F2BF0AA18CA4CA6185A
40456F60266D2CA881C357FDBC4EECE786A56B7FDC9D4D3A2D94869A4F0253B6
CDC97E1CC04D2640E97679ACEA830AB4437E553347E62FC98AD6EAA19C4C512A
E4EB8090679A0C0E74B3C36E628A9B0EA9AF81B6A51ED9A2235C0F5CD57A4B2E
641C5691F2E6C7E07D52536A9FFE28C9FE1AC7F52C68AAC64F83D58D8413A45E
B18B06C30392A32E43FA49F5870695901E686D807DCC388ABBCDC03162375AEF
5BBD6BC3B250625E4B5C2B2BF98290A654350CB8CB8E904E7535440A06549348
0FDA1C5558E8D604C6018E7285C9712F76BFD82B5151EABE7356705D33E509D7
6E0B21B5D5A252757C4B7893DD9870FFEBDFA9ECBAD801177B0EFA572ABF4EE6
F29D00C325F8B7AE92D206BCD88DD228EEDFCA2E75FCDE835DC0BBB8A026F2BB
51E02E56341EBE6983FA9BDE51EAABDE3857348C10BCB5B93E04FAA62C2147AD
CC67517C05D3140B01098B89BFFBB595EE95F8BE4F058CCF35A293679928BC9D
DA18158C7F8B0BF0F3B22DA67E7EC571ADC7C217BF70BCD5F146D480050FB973
4E92EE2D81D708B1BD16D985EC1AD6FE597F9EBA67F2646DEFDC32FAF2266747
A654FFDE122CE20808B9A2BD72B5FE7AE6581F81C57C6E5CC821550340914BBA
7C438FE5130439DD96BAC786787D2CE062E0E18B1B22579F08F4E68EDA829B4C
0F823586C70F80FB9B33DB98E520A332422433D2DAEBE5ADF45855131AED5B68
2696A02EA21A9C6FC7C1CF767FB3E937DAE2432521EA9578696F57047C7CE41C
119A58C91E9E8D7ED4506E19FE361FE6870EF2EB19DC31D08B3B506F8D4A7B25
3690D2634811AB5143E498FC491906217FFC0A0FF5D22C4B17B5B519213DF80F
D44FC66C5E3DC9C494D733B00B60CCEB075B7A849768E3AF8E18EC31EF128DF3
513C32955BC90EE29DEB37DDF577BFA71B8A651C06AA04D20248F857B32920AD
49354FA7A748A71FC9BAE3A3FED4A862142B7A895F9DB67F41582D0C81746044
0B7110A9D650CC05714F170AC2B4AF44C13FBBF23C1257BA57F80D808C61572A
FBABCB5CF428264B62038765BC693AA01D8B1C39E79295107D702466832B32DC
F3A23E849405614E5BE3CA73E15CFD8C831C5AE4E435945E722502373703D819
2C8C9ED1C9D6B0EA1C6AF74F933D2BD8913945501EAD566F1462BFDFBC0B3BEA
32B8395049D54E259BC077A76C934184F950B875B02A026097A3520B74CF2FBA
2F50D1BAF91497E4B87D8ACFB2EBE7016DB8F955BAA4490EE2F1C8DE42D5CF31
38E08060DB989AF3F538CF0D5D1234E2DB9A16B9C0653AE72F666D681A4FA8B2
477893175F3008EEF553A1CFE038A136F8256B7DCCA0D7503A0750027042AE2E
D14713F59ED2C0E7E2EE6A389F64F3C4CE59ECDFEAC3DFC7078171719570AFBA
639D9AC06D49D4F4D92F7DA60AE589F1A1AF4513558F46BC41E42F1E3120A197
68A8941853FDD0B65D64E40E60CDB474EA041DBE2706B97A1F2B0CDAE87B801C
0C536C101AA0D77A3B65651CDF7134D303658881A9C92C09B14BB2D87AA395EF
6E1C8A69E061E0B13BCC0C763CDD3627A3737DD41477A8BCF7CC0934F5041056
A43F90D0E6A47C2521C1058E8C6689492F62E8CD5DE7E5A67D422015096D6A99
8EB98A49CE1B9FC9FBFE56143AC03A0FD1809202444C7DA9C643C352F75AC87D
AD55FC6BCF596A5CD4FD1071EBD5C999572EE94D8E10D3A5157E4115CE3B6A3B
B452417F1D87BCF189733668A8DAA93ED145F1B6276A386CDFE1004711F95086
0B37489E47DBDF449974F400C308424E98BC5C605F20A59CC6BC3A99BF969E04
B28985727690C1AD441B4706B5418FC765D3EA63E5EEB2380E4AB9E6E655AFE0
365E7AACDE352CC111F43C1B4FD6E6205EEF18F9D58A7D98F584B5C8DFDF483B
4E170A190B633B9866031EEDAAE07D3FF125FB925D71F217A74A0BC2CDC17BBF
1B9BAB7E7C5B5E1E1C5F4D2C469DEFE3F85C85955800D2C37AA5DE0E622021E0
CFDE12AF9ED20945DD7A6C6B173FE9616127E2CCC2232674924E662B27AAB6D5
7C09F269BF4968E6CE5EA8AC69ADBF68EB3D1734B6A9696D4C6950B37B3B48AB
7AB10734FA0475D4AA4CCEA042816BA9196BA381E3C7686A50DD234EE73CD469
E24B979DB7A71622C399AAD5D324BCC6F79069690BDE2D5DCAB19AF34041D74E
23D93A69FB240C1D824CCCD268420F8B91D9BBC7F43BB36F021C5282E0A1CF93
AD9EE5E71EBBD22DBF387ED63910F7F36C594CFE3E4489F373E64C31835653E2
6EA553F6A640E6285BA5826D0461139818CD93DC6F115141991EC7922725600C
A5920E8E3E84EE337093F5C8B64FBCC2A865C40CCFE20BA7F767B3FF2DD177DF
35C811079164273D164E138422033D8E410BCBFDBAC428DDBE34AB535F0B5B2E
3FEE6F200CFF10EA6C38F645A83EA0CF03FC0280F9240B8C62DFD256EA1F7DB2
765D99A55B6543C2AF7BA738446FCF1827046D8F55C2793124E3EEE696029895
32306FDC0D4654B2AE4261CB9603CE7BC96423578EBECD8C498925AA9FB20871
1285B89A46ADB63BA776EE9623A7A793F51EA9C41400DC7C725D8B8E49D5E6B4
3811C43E76D78ECCA0A15DCD491B2BA4B0078B5FF8646F721057508B96F8597A
5D5339E23648A386E5461354ABFA8B7190A4BD38FA640F9DE46125A41574D21E
2BE12FCFDBEA54CB96C54954658779E1F56C5D8AACAEDF344ADAACFAD8A785DA
DD7B0DCB69522A01AA5972ED9A06590378C5F954B0A4145D4FB1E308AA7F8D6F
67E3345C0C3424B6065E677AE2877598ADD100FEF193A674CE94D2AFFD0D1CE8
E8F83030DB5AD7EAF5631CB79D09FCFBDAED134D7064E46D46B0528C8B89313A
7415C7EE363C4A2456EA1A8E9ECBD7C287BE57F5F1F3F10F5595A8727EFB4F32
4D26C28195A1F4C476B4F14E47E268861D317B88B6E9101A6E26741DC8FF8BCA
65CF49D6E00AEE9FC37649BD185E87751B162886BFC563CDBB76A676B04C4B13
467719E3EE96C2499E4D5C40643504A8BFC728E2CA0B5AFFC2F75EC7EA62A853
F0134B5F99B29ACC7C27C74EC1F139E2F261BB8CBC79B8B38A33306BCC69D3EC
A25EBFA05C7F36F036E7263093D73D6D9156CFFBFDD570C4C8894508BB0E887B
79C8100A3A2C00B834887D3BD626442AAAB0735B9330DE986FE6AFC586903B49
E6E1D4EC7B419D1111B168D0FB68E8BC58399215AF8C7CEE0186D791F813C8F7
4498B44A20E6561F961E3E4E7DF858FF1A8C292307642A0B19374D54191383E7
7E963D15610126F87B760CC6C7601EF29491AE2D6445803A0212681062149AB7
631B32125828D532B824853B138527DB4DA2E63331B057D640882E50E2654263
25648A3B82C2F82D17A4DE800682CDB7369669C8E2F5C464895F9C9938E12A19
71690BEAADEF68227A1E0509C0766E9F8E9BA8A4F7730C147DF7D4BD317521F5
F8EF4336076D161B24A910070E5325131EB1F72CD410E0959D3CAD7E6B69E560
3CDF50A09D4BE079DE0964331CA8C6089CF8F50B0E32C10926E3EDCFEB0A8D61
9E47FC39A1DC2783C93FB97642366CA84A7D05350A708FF48DA408385B856F7B
9614BD37CCD1A9FFF258C3AA5F35183DB3A8004BD74EB4C90D7C4149DD8D9619
3663A9083A0B2F7D3AC3682ECE9E9544AEDBFB54B54681B02EADC60BB6225D9C
08BA37C981FF8DCF251F186B3D0AF739C4084C6BC420581AB0318BFED56A845F
4C4F01F4E1C59C6B0F95D5105E533B351DBC62557C205B6BC6BC5BFF4FA28107
A445E135A1D448E07F93C3BE01851B126F3577E87ADE93CF8A70A748750EAAF8
AEAF6B191FA085E3ABAE9D63BB6C21361E693027DB0A08EC031EA8A77380A91E
9CCF5D328C6F9CA52EF97BE0DF8E73F8BDFF274CB481F088809C2AFBF0A4AA8C
901B4343AEEDFFF3F6E98635D7F868DE3E96EDC79C08DA866D884FDAA3079558
051476789972783A7D5D1796BA206B6D0B40B6D35742A408FACB4BFE77D634E3
EDC2AF024BD362E05C120E802DA1F9008A1132B3FA7D935A4FD76D7A23D18300
5F5CBC3F9399A7C405D8FE19E86789AD0C48E02DFF3E48051C4F31F819CBF96D
BA5CEA7225C88D0A7312A643C7D3FD50D10BB7E3C36DFA01E185DB62D2BCF850
9F523E206A73989E016E2C9E9934DDBEB6CB011F24AFC5F2A41E1070870F50E2
DF8563A890ED922B94C650954BA69C11CC4B4D9A2A2026DAA9FF60D639DE0630
5E5598BF1476A96D09DBDA7CB94547531A81947F26454C07958FC650D6CC1131
1744B77AEBA5A5A075BE90C8444B9477F98C44E62347C7F990FC715D17D8832E
0E2EE836DB84347CA500FDE50746B78986B3AA6DE43E622266BADF05D656E52E
395957A18F1646118EF5BE426C13F138805924AA6A019E60E9A8E4608181A89F
DACD3B2F4001A7E353B0B06C81A56A919D6C84B6E2573E691E7BBA08FAA6021E
C0DED7AD602943B5383BBA3B7F37CD1A5B6CAEA12B1EFA07B1EC02E428C213BA
BC8DC85E1765D045CA2A1902BF82DCF30408BF2CCBED96352FDFE13D2613B079
EB8172976ADC7915667000EDDB31292B919B8A1306AA744841C38E732E084175
96F2242E33FA7B128CC6651A4E5E3F907470B01E2C8ED0C68259D9BC7914B433
297395D69826385FB20F59BC3070586A74BF3FDE103B7E52E7138807E94B9EE8
45CA6D836AABD89D461F86D98D6AAC2AEA4F609064FB8EBC2204FE49A85B3B6F
37E3D27990851C5C3583D92ED0927529FDA7F7F2835B882FEAC1316D92230C13
8C54012C6E008E4917FEFEF45443EF21036D68506F1CD47F73D18A66095D5433
BB06F9A2EC4EBD3474F7E7030D13542DDD583B181B028B15A14C5DE0CABA9B15
6B47D2D0CB0D5516F615FE04213795CBF5CF6238E021B2522C716AC8C1F50A48
6F700A1AB086D5FA382816590663482156D2965D780C937425BAD5DDE1EED14F
BD2CA5BBC6599C62BE78051D588CF73190CB9899233840FCF0DA7638EC6932AE
5DBA545ACD752C4FB7240B3664744155A431D3657828EE0E67A26D2E513696AA
89DD0D5AFC703622E5C1456D72BFC9B8963C00F591645D56430CDF1FDD9CB02D
3CBC06A6ABB8F6729C0EB1FB59C6F0AC8CCB5ABFAC84DE34E5FB87934B8D6909
8C0C1F896F9DC2BC789037CC9CDF9FBD9BDF4A584D341076F8C33FEC0D845F72
76780545BF65492587AAAE870AA02BD8F1E461D3BD84D00D951D4CF99B16CD51
858B4C30BE8D91F1471899CC2372DF8344070CD1EC439DEAC5FAA69A409F75A7
C16ECED1C3854B5A6B8B8F1919AC15251A2D560CDD099404815B675F04ED1F50
1A44FDBC1CD47C5D63ACF44D8AC31ACFF506837E222E1413688E34C8CD7FD091
C08B8A1F0A4F53C1F9608988B29BB8853BEA1AF8F1227DD3DD770A2B8792DE3B
A97F7A78C294AB3DCAE0A2C321C73F449E29126F921DCC92E92BF0615CAAE881
89AF60E00D58793CDF6A86944B3BEE59699B05C6A5C972A59FBA6C5258E4096F
DED09D6DB62E5200A2222E49919AB6EEBB2F9D57746EA611EB9381A2CF82AC8F
79416E463E6A0B575488FBFCEFD8654CC2C23756EA92AE7671E22F31C4EFD524
7723B3C03D4FE651911F34DB259C6480A55664F953A0AE577C6020E2E61189ED
0DE1188197535243E62DFEE456C7B595CD2B7044B1D2725655A85511C9973A3A
8FDFA08DE9372525738539EC8E91039270142FF9A885327FAB400FFBAC412084
15372396451E5FF8CFC2CD633518F5BE41A754306778E73155F0975690A4A233
637D19547C8D92484C4DFD0BB297009C9657D37F99EC8E9B2F2C2C01EC5F1722
6EE7DD39FE52747FFEE4BEBB1C634BBDB15AFE375AE964EE7D123582ECED0BAB
636582D1033EFDC4F296735707AACA57930EA12C10291092223CEE95898E6AA9
863117432C2C285AFB5145C622A6E149DFBCE5763CDF911F05972DF197F47753
171D9C8001CDCDD512DCD6AE05A62E7CDEB16F3995D1A3FD07D4A41243735926
D4785B46480B4D434855D1A2321663D420A30068A4102FA56E1AD2BC3272
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000
(C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktional)
@start /Fa 242[1594 13[{ enclmmathsy ReEncodeFont }1
1594.02 /LMMathSymbols10-Regular rf /Fb 173[959 3[959
78[{}2 1328.35 /MSBM10 rf /Fc 185[723 4[830 11[553 1[553
4[307 46[{ enclmec ReEncodeFont }5 1106.96 /LMRoman10-Regular
rf /Fd 160[909 45[606 1[606 47[{ enclmec ReEncodeFont }3
1212.12 /LMRoman10-Regular rf /Fe 254[261 732{
 enclmmathsy ReEncodeFont }2 885.568 /LMMathSymbols8-Regular
rf /Ff 203[993 1[993 50[{}2 1328.35 /wasy10 rf /Fg 198[470
470 470 470 470 470 470 470 470 470 4[732 43[{ enclmrm ReEncodeFont }11
885.568 /LMRoman8-Regular rf /Fh 135[530 3[340 11[542
1[452 42[261 59[{ enclmmathit ReEncodeFont }5 885.568
/LMMathItalic8-Regular rf /Fi 149[369 55[886 8[1328 7[1328
7[1033 3[1033 19[369 1[{ enclmmathsy ReEncodeFont }7
1328.35 /LMMathSymbols10-Regular rf /Fj 162[361 1[361
29[1012 1[361 5[650 1[650 650 650 650 6[506 506 2[1084
37[{ enclmrm ReEncodeFont }12 1328.35 /LMRoman12-Regular
rf /Fk 134[634 739 3[470 3[653 7[749 623 641 603 676
560 553 683 13[800 4[1042 12[975 2[1012 1[1012 361 361
58[{ enclmmathit ReEncodeFont }19 1328.35 /LMMathItalic12-Regular
rf /Fl 650 2[723 5[650 17[650 105[578 1[686 939 686 723
506 513 506 1[723 650 723 1084 361 686 397 361 723 650
397 578 723 578 723 650 6[795 2[1336 2[939 723 2[885
3[813 1011 1[469 975 1021 849 885 993 1[921 975 1[614
4[361 2[650 650 650 650 650 650 650 2[361 434 361 2[506
506 2[1084 3[361 5[759 27[{ enclmec ReEncodeFont }60
1328.35 /LMRoman12-Regular rf /Fm 134[1136 1136 1[1136
1196 837 849 879 1[1196 1076 1196 1793 598 1136 1[598
1196 1076 658 982 1196 956 1196 1046 9[2223 2[1497 1196
2[1470 1616 1682 2041 1293 2[801 1682 1[1353 1412 1[1554
1530 1625 9[1076 1076 1076 1076 1076 1076 1076 1076 1076
598 717 45[{ enclmec ReEncodeFont }48 1912.83 /LMRoman12-Bold
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-2331 165 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a -2331
165 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a 1328 x Fm(F)-239
b(A)717 b(5.3)g(-)h(1)f(Exp)60 b(onen)-60 b(tielle)715
b(Abnahme)h(-)i(MC)f(-)h(BIFIE)p 0 TeXcolorgray -741
4800 a Fl(1.)p 0 TeXcolorgray 651 w(Die)653 b(angegeb)36
b(enen)652 b(F)-108 b(unktionsgleic)-36 b(h)g(ungen)651
b(b)36 b(esc)-36 b(hreib)36 b(en)651 b(exp)36 b(onen)-36
b(tielle)653 b(Zusammen-)921 6792 y(h\344nge.)921 11330
y(Kreuze)615 b(die)f(b)36 b(eiden)615 b(F)-108 b(unktionsgleic)-36
b(h)g(ungen)614 b(an,)h(die)g(eine)g(exp)36 b(onen)-36
b(tielle)615 b(Abnahme)921 13322 y(b)36 b(esc)-36 b(hreib)36
b(en.)p 16143 14030 14098 45 v 16143 17248 45 3219 v
16851 15971 a Fk(f)142 b Fj(\()p Fk(x)p Fj(\))369 b(=)g(100)296
b Fi(\001)f Fj(1)p Fk(;)p Fj(2)25706 15489 y Fh(x)p 27831
17248 V 30196 17248 V 16143 17292 14098 45 v 16143 20567
45 3275 v 16851 19290 a Fk(f)142 b Fj(\()p Fk(x)p Fj(\))369
b(=)g(100)296 b Fi(\001)f Fk(e)24648 18808 y Fg(0)p Fh(;)p
Fg(2)p Fh(x)p 27831 20567 V 30196 20567 V 16143 20611
14098 45 v 16143 23829 45 3219 v 16851 22552 a Fk(f)142
b Fj(\()p Fk(x)p Fj(\))369 b(=)g(100)296 b Fi(\001)f
Fj(0)p Fk(;)p Fj(2)25706 22070 y Fh(x)p 27831 23829 V
1 0 0 TeXcolorrgb 28540 22552 a Ff(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 30196 23829 V 16143
23874 14098 45 v 16143 27113 45 3239 v 16851 25836 a
Fk(f)142 b Fj(\()p Fk(x)p Fj(\))369 b(=)g(100)296 b Fi(\001)f
Fj(0)p Fk(;)p Fj(2)25706 25354 y Fe(\000)p Fh(x)p 27831
27113 V 30196 27113 V 16143 27157 14098 45 v 16143 30431
45 3275 v 16851 29155 a Fk(f)142 b Fj(\()p Fk(x)p Fj(\))369
b(=)g(100)296 b Fi(\001)f Fk(e)24648 28672 y Fe(\000)p
Fg(0)p Fh(;)p Fg(2)p Fh(x)p 27831 30431 V 1 0 0 TeXcolorrgb
28540 29126 a Ff(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 30196 30431 V 16143 30476 14098 45 v 47992
4800 a Fd(___/1)p 1 0 0 TeXcolorrgb 48228 6792 a Fc(F)-123
b(A)369 b(5.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 34504 54804 45 v 0 TeXcolorgray 24746
81281 a Fl(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fm(F)-239 b(A)1068 b(5.3)g(-)g(2)g(P)-60
b(arameter)1069 b(einer)e(Exp)60 b(onen)-60 b(tialfunktion)1064
b(-)k(O)-60 b(A)1069 b(-)-2331 4515 y(BIFIE)p 0 TeXcolorgray
-741 7823 a Fl(2.)p 0 TeXcolorgray 651 w(Gegeb)36 b(en)433
b(ist)h(der)f(Graph)f(einer)h(Exp)36 b(onen)-36 b(tialfunktion)435
b Fk(f)575 b Fl(mit)434 b Fk(f)142 b Fj(\()p Fk(x)p Fj(\))368
b(=)h Fk(a)295 b Fi(\001)g Fj(3)39755 7341 y Fh(x)40341
7823 y Fl(.)p 0 TeXcolorgray 0 TeXcolorgray 8594 46741
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 267.65878 a add def
/d 0.0 a add neg def /h 311.58739 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 8594 46741 a 26305 42440 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -28.45274 T 11
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.25  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 107.66855 0.0 -159.99023 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.25  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -142.26372 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.25  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 272.73318 0.0 -38.8542   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.25  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 107.66855  0 -159.99023  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -159.99023
 107.66855  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-38.8542  def /maxTickline 272.73318  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 272.73318
0.0 -38.8542   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 107.66855
0.0 -159.99023 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 272.73318  0 -38.8542  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -38.8542
 272.73318  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-159.99023  def /maxTickline 107.66855  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 272.73318
0.0 -38.8542   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 107.66855
0.0 -159.99023 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 25060 39576 a
Fg(1)25059 36427 y(2)25059 33277 y(3)25059 30127 y(4)25059
26978 y(5)25059 23828 y(6)25059 20678 y(7)25059 17529
y(8)25059 14379 y(9)24327 45829 y Fe(\000)p Fg(1)29219
43786 y(1)2680 b(2)f(3)-13434 b Fe(\000)p Fg(1)-4352
b Fe(\000)p Fg(2)h Fe(\000)p Fg(3)f Fe(\000)p Fg(4)g
Fe(\000)p Fg(5)26305 42440 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -5.623014211197724 def /x1 3.7841206899299573
def /dx x1 x sub 199 div def /F@pstplot (2.0*3.0^(x))  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end


@endspecial 26305 42440 a
tx@Dict begin  { -124.23415 5.69046 } PutCoor PutBegin  end
 26305 42440 a -258 x Fk(f)26305
42440 y
tx@Dict begin  PutEnd  end
 26305 42440 a 38223 46741 a
currentpoint initclip moveto
 38223 46741 a 921
52718 a Fl(Ermittle)433 b(den)g(f\374r)h(diesen)f(Graphen)f(ric)-36
b(h)g(tigen)433 b(P)-36 b(arameterw)g(ert)434 b Fk(a)f
Fl(mit)h Fk(a)368 b Fi(2)h Fb(N)p Fk(:)921 57255 y(a)g
Fj(=)p 3418 57255 15749 34 v 1 0 0 TeXcolorrgb 921 59800
a Fk(a)295 b Fi(\001)g Fj(3)3213 59318 y Fg(0)4108 59800
y Fi(\))370 b Fk(a)e Fj(=)h(2)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 47992 7823 a Fd(___/1)p 1 0 0
TeXcolorrgb 48228 9815 a Fc(F)-123 b(A)369 b(5.3)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 63276
54804 45 v 0 TeXcolorgray 24746 81281 a Fl(2)p 0 TeXcolorgray
eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fm(F)-239 b(A)717 b(5.3)g(-)h(3)f(Sc)-60
b(hnittpunkt)714 b(mit)j(der)g(y-A)-60 b(c)g(hse)717
b(-)h(O)-60 b(A)718 b(-)f(BIFIE)p 0 TeXcolorgray -741
4800 a Fl(3.)p 0 TeXcolorgray 651 w(Gegeb)36 b(en)433
b(ist)h(die)f(F)-108 b(unktion)433 b Fk(f)575 b Fl(mit)434
b Fk(f)142 b Fj(\()p Fk(x)p Fj(\))369 b(=)f Fk(c)295
b Fi(\001)g Fk(a)25782 4318 y Fh(x)26801 4800 y Fj(\()p
Fk(c)368 b Fi(2)h Fb(R)p Fk(;)221 b(a)370 b(>)e Fj(0\))p
Fl(.)921 9338 y(Bestimme)551 b(die)g(K)-36 b(o)36 b(ordinaten)551
b(des)g(Sc)-36 b(hnittpunktes)549 b(des)i(Graphen)e(v)-36
b(on)552 b Fk(f)693 b Fl(mit)551 b(der)f Fk(y)48 b Fl(-)873
11330 y(A)-36 b(c)g(hse.)p 1 0 0 TeXcolorrgb 921 13875
a Fk(f)142 b Fj(\(0\))369 b(=)f Fk(c)295 b Fi(\001)h
Fk(a)7318 13393 y Fg(0)8212 13875 y Fj(=)369 b Fk(c)g
Fi(!)433 b Fl(Der)h(Sc)-36 b(hnittpunkt)432 b(hat)h(die)h(K)-36
b(o)36 b(ordinaten)433 b Fk(S)446 b Fj(=)369 b(\(0)p
Fi(j)p Fk(c)p Fj(\))p Fl(.)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 47992 4800 a Fd(___/1)p 1 0 0
TeXcolorrgb 48228 6792 a Fc(F)-123 b(A)369 b(5.3)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 17682
54804 45 v -2331 22984 a Fm(F)-239 b(A)532 b(5.3)h(-)g(4)g(Exp)60
b(onen)-60 b(tialfunktionen)528 b(v)-60 b(ergleic)g(hen)531
b(-)i(MC)g(-)h(BIFIE)p 0 TeXcolorgray -741 26291 a Fl(4.)p
0 TeXcolorgray 651 w(Gegeb)36 b(en)538 b(sind)g(die)h(zw)-36
b(ei)539 b(Exp)36 b(onen)-36 b(tialfunktionen)540 b Fk(f)680
b Fl(und)538 b Fk(h)g Fl(mit)h Fk(f)142 b Fj(\()p Fk(x)p
Fj(\))548 b(=)f Fk(a)367 b Fi(\001)g Fk(b)42605 25809
y Fh(x)43728 26291 y Fl(und)921 28283 y Fk(h)p Fj(\()p
Fk(x)p Fj(\))h(=)h Fk(c)295 b Fi(\001)g Fk(d)7365 27801
y Fh(x)7950 28283 y Fl(.)434 b(Dab)36 b(ei)434 b(gilt:)h
Fk(a;)221 b(b;)g(c;)g(d)370 b Fi(2)f Fb(R)21996 27801
y Fg(+)22783 28283 y Fl(.)p 0 TeXcolorgray 0 TeXcolorgray
10452 52725 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 234.0878 a add def
/d 0.0 a add neg def /h 180.80879 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 10452 52725 a 21917 50545 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 7 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 130.51767 0.0 -103.57013 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 9 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 161.11122 0.0 -19.69757   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 130.51767  0 -103.57013  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -103.57013
 130.51767  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-19.69757  def /maxTickline 161.11122  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 161.11122
0.0 -19.69757   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 130.51767
0.0 -103.57013 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 161.11122  0 -19.69757  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -19.69757
 161.11122  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-103.57013  def /maxTickline 130.51767  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 161.11122
0.0 -19.69757   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 130.51767
0.0 -103.57013 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
20672 47680 a Fg(1)20672 44531 y(2)20672 41381 y(3)20672
38232 y(4)20672 35082 y(5)24832 51890 y(1)2679 b(2)h(3)f(4)-16584
b Fe(\000)p Fg(1)-4351 b Fe(\000)p Fg(2)f Fe(\000)p Fg(3)21917
50545 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.6400723423008503 def /x1 4.587173783981014
def /dx x1 x sub 199 div def /F@pstplot (1.5*2.0^(x))  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.6400723423008503 def /x1 4.587173783981014
def /dx x1 x sub 199 div def /F@pstplot (2.0*1.5^(x))  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 21917 50545 a
tx@Dict begin  { -90.53378 6.37512 } PutCoor PutBegin  end
 21917 50545 a
-172 x Fh(f)21917 50545 y
tx@Dict begin  PutEnd  end
 21917 50545 a 21917 50545 a
tx@Dict begin  { -96.20166 17.71089 } PutCoor PutBegin  end

21917 50545 a Fh(h)21917 50545 y
tx@Dict begin  PutEnd  end
 21917 50545 a 36365
52725 a
currentpoint initclip moveto
 36365 52725 a 855 58702 a Fl(W)-108 b(elc)-36
b(he)534 b(der)g(nac)-36 b(hstehenden)533 b(A)-36 b(ussagen)534
b(\374b)36 b(er)534 b(die)g(P)-36 b(arameter)535 b Fk(a;)221
b(b;)g(c)535 b Fl(und)f Fk(d)g Fl(sind)g(zu-)921 60693
y(tre\033end?)432 b(Kreuze)i(die)f(b)36 b(eiden)433 b(zutre\033enden)f
(A)-36 b(ussagen)433 b(an.)p 19805 61660 6775 45 v 19805
64285 45 2625 v 20513 63305 a Fk(a)369 b(>)g(c)p 24170
64285 V 26535 64285 V 19805 64329 6775 45 v 19805 67177
45 2848 v 20513 66197 a(b)g(>)g(d)p 24170 67177 V 1 0 0
TeXcolorrgb 24878 66085 a Ff(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 26535 67177 V 19805 67221
6775 45 v 19805 69846 45 2625 v 20513 68866 a Fk(a)g(<)g(c)p
24170 69846 V 1 0 0 TeXcolorrgb 1372 w Ff(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 26535 69846 V 19805
69890 6775 45 v 19805 72738 45 2848 v 20513 71758 a Fk(b)g(<)g(d)p
24170 72738 V 26535 72738 V 19805 72782 6775 45 v 19805
75290 45 2508 v 20513 74299 a(a)g Fj(=)g Fk(c)p 24170
75290 V 26535 75290 V 19805 75334 6775 45 v 47992 26291
a Fd(___/1)p 1 0 0 TeXcolorrgb 48228 28283 a Fc(F)-123
b(A)369 b(5.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 0 TeXcolorgray 24746 81281 a Fl(3)p 0 TeXcolorgray
eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 54804 45 v -2331 6795 a Fm(F)-239
b(A)717 b(5.3)g(-)h(5)f(Bakterienk)-60 b(olonie)715 b(-)i(O)-60
b(A)718 b(-)g(BIFIE)p 0 TeXcolorgray -741 10102 a Fl(5.)p
0 TeXcolorgray 651 w(Das)452 b(W)-108 b(ac)-36 b(hstum)451
b(einer)g(Bakterienk)-36 b(olonie)454 b(in)d(Abh\344ngigk)-36
b(eit)452 b(v)-36 b(on)452 b(der)f(Zeit)h Fk(t)f Fl(\(in)g(Stun-)921
12094 y(den\))294 b(kann)i(n\344herungsw)-36 b(eise)295
b(durc)-36 b(h)294 b(die)i(F)-108 b(unktionsgleic)-36
b(h)g(ung)294 b Fk(A)369 b Fj(=)g(2)13 b Fi(\001)g Fj(1)p
Fk(;)p Fj(35)38585 11612 y Fh(t)39277 12094 y Fl(b)36
b(esc)-36 b(hrieb)36 b(en)874 14086 y(w)-36 b(erden,)433
b(w)-36 b(ob)36 b(ei)435 b Fk(A)p Fj(\()p Fk(t)p Fj(\))e
Fl(die)g(zum)g(Zeitpunkt)g Fk(t)g Fl(b)36 b(esiedelte)434
b(Fl\344c)-36 b(he)433 b(\(in)h(mm)38402 13604 y Fg(2)38927
14086 y Fl(\))g(angibt.)921 18623 y(In)-36 b(terpretiere)386
b(die)h(in)g(der)g(F)-108 b(unktionsgleic)-36 b(h)g(ung)386
b(v)-36 b(ork)g(ommenden)387 b(W)-108 b(erte)387 b Fj(2)h
Fl(und)e Fj(1)p Fk(;)p Fj(35)i Fl(im)921 20615 y(Hin)-36
b(blic)g(k)434 b(auf)g(den)f(W)-108 b(ac)-36 b(hstumsprozess.)p
1 0 0 TeXcolorrgb 921 23160 a(Zum)623 b(Zeitpunkt)g Fk(t)692
b Fj(=)g(0)624 b Fl(b)36 b(etr\344gt)623 b(der)h(Inhalt)f(der)g(b)36
b(esiedelten)623 b(Fl\344c)-36 b(he)624 b Fj(2)221 b
Fl(mm)42452 22678 y Fg(2)42978 23160 y Fl(.)625 b(Die)921
25152 y(Bakterienk)-36 b(olonie)435 b(w)-36 b(\344c)g(hst)434
b(pro)f(Stunde)f(um)h(35\045.)921 29690 y(L\366sungssc)-36
b(hl\374ssel:)921 32235 y(Die)307 b(A)-36 b(ufgab)36
b(e)307 b(ist)g(als)g(ric)-36 b(h)g(tig)306 b(gel\366st)h(zu)f(w)-36
b(erten,)307 b(w)-36 b(enn)306 b(die)g(In)-36 b(terpretation)306
b(b)36 b(eider)306 b(W)-108 b(erte)921 34227 y(sinngem\344\377)434
b(ric)-36 b(h)g(tig)434 b(ist.)g(Die)g(Einheit)f(m)-36
b(uss)433 b(nic)-36 b(h)g(t)433 b(angegeb)36 b(en)434
b(sein.)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
47992 10102 a Fd(___/1)p 1 0 0 TeXcolorrgb 48228 12094
a Fc(F)-123 b(A)369 b(5.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 37960 V 0 TeXcolorgray 24746 81281
a Fl(4)p 0 TeXcolorgray eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fm(F)-239 b(A)1032 b(5.3)h(-)g(6)g(P)-60
b(arameter)1033 b(v)-60 b(on)1033 b(Exp)60 b(onen)-60
b(tialfunktionen)1027 b(-)1034 b(L)-179 b(T)1032 b(-)-2331
4515 y(Matura)717 b(2015/16)g(-)h(Haupttermin)p 0 TeXcolorgray
-741 7823 a Fl(6.)p 0 TeXcolorgray 651 w(Die)550 b(nac)-36
b(hstehende)547 b(Abbildung)i(zeigt)g(die)h(Graphen)d(zw)-36
b(eier)550 b(Exp)36 b(onen)-36 b(tialfunktionen)921 9815
y Fk(f)747 b Fl(und)604 b Fk(g)652 b Fl(mit)606 b(den)e(F)-108
b(unktionsgleic)-36 b(h)g(ungen)604 b Fk(f)142 b Fj(\()p
Fk(x)p Fj(\))661 b(=)f Fk(c)412 b Fi(\001)g Fk(a)31651
9333 y Fh(x)32841 9815 y Fl(und)604 b Fk(g)48 b Fj(\()p
Fk(x)p Fj(\))660 b(=)h Fk(d)411 b Fi(\001)h Fk(b)42790
9333 y Fh(x)43980 9815 y Fl(mit)921 11806 y Fk(a;)221
b(b;)g(c;)g(d)370 b Fi(2)f Fb(R)7723 11324 y Fg(+)8510
11806 y Fl(.)p 0 TeXcolorgray 0 TeXcolorgray 7666 47710
a
 currentpoint currentpoint translate 1.4508 1.4508 scale neg exch neg
exch translate
 7666 47710 a 8100 47710 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 192.13197 a add def
/d 0.0 a add neg def /h 196.45398 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 8100 47710 a 9599 46006 a
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 178.59114  0 -13.54083  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -13.54083
 178.59114  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-15.39076  def /maxTickline 181.06322  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
0 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-3.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 181.06322
0.0 -15.39076   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 178.59114
0.0 -13.54083 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 181.06322  0 -15.39076  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -15.39076
 181.06322  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-13.54083  def /maxTickline 178.59114  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
0 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-3.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 181.06322
0.0 -15.39076   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 178.59114
0.0 -13.54083 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
9599 46006 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 9599 46006 a 9599 46006 a
tx@Dict begin  { 178.59114 181.06322 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 9599 46006 a 9599
46006 a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 9599 46006 a 9229 46292 a Fk(x)9599 46006 y
tx@Dict begin  PutEnd  end
 9599
46006 a 9599 46006 a
tx@Dict begin  PutEnd  end
 9599 46006 a 9599 46006 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 9599 46006
a 9599 46006 a
tx@Dict begin  { 0.0 0.0 pop 178.59114 181.06322 exch pop } PutCoor
PutBegin  end
 9599 46006 a 9599 46006 a
tx@Dict begin  { 5.0 51.94176 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 9599 46006 a
6724 46339 a Fk(f)142 b Fj(\()p Fk(x)p Fj(\))p Fl(,)433
b Fk(g)48 b Fj(\()p Fk(x)p Fj(\))9599 46006 y
tx@Dict begin  PutEnd  end
 9599 46006
a 9599 46006 a
tx@Dict begin  PutEnd  end
 9599 46006 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -0.475913492966801 def /x1 6.276768452132614
def /dx x1 x sub 199 div def /F@pstplot (1.5*1.3^(x))  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -0.475913492966801 def /x1 6.276768452132614
def /dx x1 x sub 199 div def /F@pstplot (2.5*1.19^(x))  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 9599
46006 a
tx@Dict begin  { 30.85751 102.08879 } PutCoor PutBegin  end
 9599 46006 a 923 x Fk(f)9599 46006 y
tx@Dict begin  PutEnd  end
 9599 46006
a 9599 46006 a
tx@Dict begin  { 44.21645 59.75093 } PutCoor PutBegin  end
 9599 46006 a 572 x Fk(g)9599 46006 y
tx@Dict begin  PutEnd  end
 9599
46006 a 29368 47710 a
currentpoint initclip moveto
 29368 47710 a 7666 47710 a
 currentpoint currentpoint translate 1 1.4508 div 1 1.4508 div scale
neg exch neg exch translate
 7666
47710 a 921 51695 a Fl(Erg\344nze)358 b(die)h(T)-108
b(extl\374c)-36 b(k)g(en)358 b(im)g(folgenden)h(Satz)f(durc)-36
b(h)357 b(Ankreuzen)g(der)h(jew)-36 b(eils)360 b(ric)-36
b(h)g(tigen)921 53686 y(Satzteile)434 b(so,)g(dass)g(eine)f
(mathematisc)-36 b(h)434 b(k)-36 b(orrekte)434 b(A)-36
b(ussage)434 b(en)-36 b(tsteh)g(t!)921 57177 y(F)-27
b(\374r)434 b(die)h(P)-36 b(arameter)435 b Fk(a;)221
b(b;)g(c;)g(d)436 b Fl(der)f(b)36 b(eiden)434 b(gegeb)36
b(enen)435 b(Exp)36 b(onen)-36 b(tialfunktionen)435 b(gelten)921
59169 y(die)e(Bezieh)-36 b(ungen)p 10766 59169 3150 45
v 14388 59121 a(1)13916 59169 y Fa(\015)p 15510 59169
V 3583 w Fl(und)p 21911 59169 V 25533 59121 a(2)25061
59169 y Fa(\015)p 26655 59169 V 3583 w Fl(.)p 0 TeXcolorgray
0 TeXcolorgray 13959 60541 7201 45 v 13959 63625 45 3085
v 17234 62322 a(1)16762 62370 y Fa(\015)p 21115 63625
V 13959 63670 7201 45 v 13959 66929 45 3260 v 14667 65726
a Fk(c)369 b(<)g(d)p 18750 66929 V 19459 65631 a Ff(2)p
21115 66929 V 13959 66973 7201 45 v 13959 70232 45 3260
v 14667 69029 a Fk(c)g Fj(=)g Fk(d)p 18750 70232 V 19459
68935 a Ff(2)p 21115 70232 V 13959 70277 7201 45 v 13959
73536 45 3260 v 14667 72333 a Fk(c)g(>)g(d)p 18750 73536
V 1 0 0 TeXcolorrgb 19459 72238 a Ff(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 21115 73536 V 13959
73580 7201 45 v 0 TeXcolorgray 0 TeXcolorgray 30427 60541
6768 45 v 30427 63625 45 3085 v 33485 62322 a Fl(2)33013
62370 y Fa(\015)p 37150 63625 V 30427 63670 6768 45 v
30427 66929 45 3260 v 31135 65726 a Fk(a)g(<)f(b)p 34785
66929 V 1 0 0 TeXcolorrgb 35493 65631 a Ff(4)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 37150 66929
V 30427 66973 6768 45 v 30427 70232 45 3260 v 31135 69029
a Fk(a)h Fj(=)f Fk(b)p 34785 70232 V 35493 68935 a Ff(2)p
37150 70232 V 30427 70277 6768 45 v 30427 73536 45 3260
v 31135 72333 a Fk(a)h(>)f(b)p 34785 73536 V 35493 72238
a Ff(2)p 37150 73536 V 30427 73580 6768 45 v 47992 7823
a Fd(___/1)p 1 0 0 TeXcolorrgb 48228 9815 a Fc(F)-123
b(A)369 b(5.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 77608 54804 45 v 0 TeXcolorgray 24746
81281 a Fl(5)p 0 TeXcolorgray eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fm(F)-239 b(A)731 b(5.3)f(-)h(7)g(W)-179
b(ac)-60 b(hstum)729 b(einer)h(P)-60 b(opulation)729
b(-)i(O)-60 b(A)731 b(-)g(Matura)g(NT)-2385 4515 y(2)718
b(15/16)p 0 TeXcolorgray -741 7823 a Fl(7.)p 0 TeXcolorgray
651 w(Die)350 b(Gr\366\377e)g(einer)f(P)-36 b(opulation)350
b(wird)g(in)f(Abh\344ngigk)-36 b(eit)351 b(v)-36 b(on)350
b(der)f(Zeit)g(mithilfe)i(der)e(F)-108 b(unk-)921 9815
y(tion)407 b Fk(N)545 b Fl(mit)406 b Fk(N)139 b Fj(\()p
Fk(t)p Fj(\))368 b(=)g Fk(N)12965 10014 y Fg(0)13731
9815 y Fi(\001)240 b Fk(e)14943 9333 y Fg(0)p Fh(;)p
Fg(1188)p Fe(\001)p Fh(t)18619 9815 y Fl(b)36 b(esc)-36
b(hrieb)36 b(en,)406 b(w)-36 b(ob)36 b(ei)408 b(die)e(Zeit)h
Fk(t)f Fl(in)h(Stunden)d(angege-)921 11806 y(b)36 b(en)470
b(wird.)h(Dab)36 b(ei)471 b(b)36 b(ezeic)-36 b(hnet)470
b Fk(N)18062 12005 y Fg(0)19057 11806 y Fl(die)h(Gr\366\377e)f(der)g(P)
-36 b(opulation)470 b(zum)g(Zeitpunkt)g Fk(t)431 b Fj(=)h(0)921
13798 y Fl(und)g Fk(N)139 b Fj(\()p Fk(t)p Fj(\))433
b Fl(die)g(Gr\366\377e)h(der)f(P)-36 b(opulation)433
b(zum)h(Zeitpunkt)e Fk(t)369 b Fi(\025)g Fj(0)p Fl(.)921
16344 y(Bestimme)396 b(denjenigen)g(Prozen)-36 b(tsatz)396
b Fk(p)p Fl(,)h(um)f(den)f(die)h(P)-36 b(opulation)397
b(pro)f(Stunde)e(w)-36 b(\344c)g(hst!)921 20881 y Fk(p)369
b Fi(\031)p 1 0 0 TeXcolorrgb 433 w Fl(12,6\045)435 b(T)-108
b(oleranzin)-36 b(terv)-72 b(all:)435 b Fj([)8 b(12\045;)221
b(13\045])p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
47992 7823 a Fd(___/1)p 1 0 0 TeXcolorrgb 48228 9815
a Fc(F)-123 b(A)369 b(5.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 24688 54804 45 v 0 TeXcolorgray
24746 81281 a Fl(6)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

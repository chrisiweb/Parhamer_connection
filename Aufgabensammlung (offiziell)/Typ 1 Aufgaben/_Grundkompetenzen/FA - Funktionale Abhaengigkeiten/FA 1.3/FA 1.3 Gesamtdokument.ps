%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 1.3/FA 1.3 Gesamtdokument.dvi
%%CreationDate: Fri Nov 10 08:31:04 2017
%%Pages: 4
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: LMRoman12-Bold LMRoman12-Regular LMMathItalic12-Regular
%%+ LMRoman8-Regular LMMathSymbols8-Regular LMRoman6-Regular
%%+ LMMathSymbols6-Regular LMRoman10-Regular LMMathSymbols10-Regular
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ "C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 1.3/FA 1.3 Gesamtdokument.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2017.11.10:0930
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE505B8A69335E25F98573BFAC64A02542D3B835ABC68EE4F
0A1436DD48E963348F6F5650666F6BFF72D385A5FB67448213B032991B4970C5
79925CEFA92DDED5BE33EEE8275EEE83829329E11E4EB1E2E16669B21C3D36F1
FCA9535233B0BB982F75ACF33109F8AE7ADE4954D0B1E1802008B39E90FD6AD3
2DFBD4E8C89A9FA5772BD7C4CEA7C55882CA53A2CF19DD079F8C03E298E58711
C4321BBF26F45460900900A22E31ACD5303F037AB6059E4288B2978A1DBFCBE6
32BE7DC85EE40632B247E37B279DD5500FADF52BDDCCB2405610D5032E3F9E75
51A49BDD4B30EFC3B43C4875D056EC205D4E844E1D39319341D0F40B15EFC6B8
101C4762D9E95B430C36BDE4DD07CF59E3280EEE234606234C278A7286BDD41A
C562AEDA5BC1B4A7975A24E261478CDA81F01E0CBB7EBEBF9876CFC52EE5362F
AE1C91D7E9C281194A84A9ECEFEA5023317F88FB64830E6060C25E80658F0CD8
42A0503F8EF5442C290FABA1C87045DDEC6576D746C1AEC54ADE2497021A2B13
88435D1B321583B42DE5E0F9AD77BC7E6B1A6CFBD3F83A3995AB14CD756C4CA3
7202E05E0BFE9B82060564C1F2BD8471A03D56FE7C722619CD8B47106750B3A6
2F43F87CA64CC2F7B1F4298B24B4FC62AA06FDCC5A7DDFA3269C91938C746FFB
2FED251A29044058204AD35989CBBD96176D12A5E94205E6F0F6EEFF0379F347
CC82B1937B920E87857E2B1A0BF9568C867B2214CB8FE1B9D5293F54D71F38BE
9959B06AC529DA1F8618A6AA72F3A09EAC88BF9D3E4EB30879EC725373ACDFD9
86217A06817DAEA08C5B169A3E2309DA6D17A3F76B65763C33A2DDC2B6ECF2C6
980D173D20BB4508DEA4B86AB7520C7A8B9C3DC668A81B6E24DBB2CFFBEF2546
E4C03D01CF167B0D7BBBC53023A12C5B3581D8F2A46386324F98654398F592EC
7FB23A37DFAB7F41D82EFCD5CD920ECCB004538162B9CADBCC843D80F6A0AC2E
4EF52E424A97ACC55D317EB41CE67488A918261595698EB2F4759D6C9C458980
A3698183119DF743B60BCEA58BEB5FAFE68D9392462B76A68D18B60DE697C75B
618A9657D5D054CF66D49546865A10C9604EDA9EC8F482480A438A388C5A3EC1
4A6D44CDCE9885BC4856AD8409027A8E653E8DF426390ECE81DF6360EBB309BE
FA003EDAFF8C09C6AC980A8A6486665CEDBCF38776E0C3CDB3E1915040763239
87503F5FCD2D119AF4464083CD0B80A243CD6BFC84FF67C987A80F5F70B8E8E6
39855A1F999B9DBAD3BDCC194E00CDABF4CD67A9374BDE472C7BA420946ADDFE
E44D54A68254842F135CDE1F94689B2CBFD08624688329D197B6AC820747FF7E
63AD34AC0F644BF0218696B019B0AF58793D32361146034D7257B84CA1995281
9B5FF4252109B020F7A3647999CAD948B64C66C13A830C436E373EAA863645C4
FB9AD3AF47678489D196FB4AAC1673E2DCA22766412D646BD7653300C7E8064A
DE2C5BE368CA08AB9C8F4B5455216CEB9BB252D7C7806F1AA557609633441B42
C2A0D91CA5F051037FC851FBB73B960BE65A3217938C17FCC272F5858B48D218
01F4E167349191C8EBF6794923462CBC1757A34A20F80217EDBF9B8D01025568
40FC5BF3DBEB52ADF17EE20A48B0AA11EC1B915FCA061954194D199C9CEF6A70
00C6FBCFF258CA3C95FA45F2787DF89438689919F6FE382A0879ABBD03972474
BE2154EFE09EAA372E31FF743854975039FCC4C9FF135FCBF6377913E6A35EA6
156045300B7E8D97B37E0C40AEB7801E66768F687A43580348431ED00FB85261
7BCA0D8A40F419505E46EC420CFF0ADC8892
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C071D06D71D60CEEC9FC68AAC0ADD1DD74B262
0156612EB4B21A3F4ABD34403540C124221FB9DA5EC6C7229DA9A1D033AB828E
9D80023B2C8E68FAF7A38C925E0587A1CCE432EBBBA598B201F5AD036BE7C8AD
B8C411BC79646781C4519B89DA648B919EB362176B83298EE2D8B405DC66D81E
C655DFFD1BB283F3C5DEF1495FF97C798C213036AD02BB07FD42EC5932E79727
ACF464295E75CFC635036CF27FFC42DC2919CC167CA4C2E673040B7909AA26E8
123B3D9F176F6510B9526E94D4E38E62F8B9B96E2D2D51BDA2FB7C6992B79CD8
3E40292315B0EFE711C8FCB37968B8AE1BCADE6BD8A3BA1009B34137B90D924F
B2784C9E13F0795427324E80C175BC99140171AA2F40784356690DDB982F55FE
EFFCF946C6DADBC6A907C7DC28850415D9AFC1C8A868801B990CE2D26AE40CB3
4EE0281A60063AA71E48DB8A35E05C2BEA1ED5BEC68717E95B7597AD7CACDA2A
6A4E8808BDF0AFFBA31BE1697149D7BACECF4481DC61CEAB7476A2E00CD8EFF1
37E476FE5A098E607E25ED29F4BF3409309145BD0530C8A76E85F59EB0890ECB
A12DE954F33220ECCE5E9CC4B52E97089790D08FFEEA7D143DCC7C07BB2694CA
6709EE19C11515E6E967043F9162C39D9BEB2767B7B31EA068C594A63173F7F1
67F3D6FE97087D19F73EEE205A47785EF3C453E6F77A08AE9F93F4060DD19EF6
6DA5E780DCCA30F180F8DFB0CEC4602AD1201C63D91450E7B5F44AEF32087A03
0D933A941134E74040E6E7E797E18AF57941DDF7DE2072ADACCD3BF8D4CFF06C
5B946E21D0F5A799CD011CFFE4CF0F571B4377AD4768FBEBDFCF6B49F09839B9
35B1F7AB20DBC872DEDA90B79F113F5A4BE581DB49C5EB8C9033B8050C143424
1EDB333D1DCB862DC543CE420CC26EDF9639E4256570975B25C6C1F06CFDB2FD
9035344017BAA39283C14E3AE66A14DAFFE2CD87485598645C39B92C18AAD014
7814BF27C8FA6DCA0BBA0FFA552B9FFDD54BDD8C7F84484031FFFC0AE8932A64
53D2632D9379F30231361D03BF91F74904C7106B6F8EB6ABBB29858F65E937CD
E31D67C847719779DE0B34CECE88A8F9A12D46B8FCA50DF4433B0B8AED6A63B9
E6512B667AC78A09A780813B1FF02AA967B12AAFAA0AF1B3DA27604A975C2DB6
FC1854457C67C54DC08DB989CA3267B2BE5B8178E6B7889A33771F86276E6DA4
F83033522871198AB3E954EDD88B5059BFBB42AFFC2738CA09B628CC646123FC
9C2BB8B9149CBADE7A7953FB4FBAEB6078B410935DF7D6D5064271899313C4E5
0DA12BF2F08521A17641A2F5541EC8419514939892C0E353FB1785CF9CB67C88
AF752C2A0DAB509A424DDB9649BD8A846E6BD3D374BEB6B9DBD5C10FF56E2000
AE4AA5B339C187F52630B52309834F266D778C720FA9BD9CBC1F322A39EFCAF5
85107BD5A5C188A6409352766D80E77B1270019E0EF57F31E9F13B9483F070F4
86122EE08A4870456161458B6C93A1602A5EE583461ED91A90CA5B743636AED8
1E5142CC0A7DC998CBCF84E39CE3B141286A5994C60855979B402FC1C092EA15
1A6F3762571629775247A6AC65DEFBCA10A51ED614E0C7FBC7335681207464AB
F8C4ED5B883E7A4D01199AFC3C88B0E2AB5FE014A84377451081CA0390DEBA75
7BEA45FA3171095052B839F7A2A9E41737F4A4CD704E8EAFC757116FE3012E01
AEBF584F6B34EB3F9C4B3893DF4E25B71CA17D427219E0E2F3F7ADB530841948
1FC1CD966965C72E9490C31153E2A0DAB73629A1DC0ED7C058AD150C4D5BE6CA
FCC7D71907232339F3FCD771914933CABF613F0F9FA3E206172B0B4ADD1D9744
00A8C2642147D4B652A8F1A7E5BD064E369FC591D4739533513C202E9DA91CDD
1581D1A58898DD6564B1710A88AEF94B888C52681BAEE1E3EFB4DBC694919D4F
41D01894C91D8E03F68DB550934E5D783537D2B57CEFE23ABACEC756F5D1EA5D
A74192035D2304EC4F9083716CA7906B80486BB5C79752270821CB12BE7ED0FB
9FEAA580CA187AA3C9475070809AF6881F745EC71298D454AD31AB998F5821B8
2070122634D5A247EE4D8672339B1D90113137D4FEAF3CF3A2456A8712556956
C5A48721B1B1E140ABFF7793081B2B092724FC0F129DE772236556BEEEBEBFB1
FAB1037FB0997B367483D2C8C0D44E6111CEE2EF443F84FAC7710AD0368D542E
8A629BBC3C6E2D85E984AA01B575B37DD1D9B0D453E3A73EE7A34FEFA5641BDD
67E694671B6250DAFA3D85E0A78E946C78E33A284D4F92B73D7AE87B13F108F2
C4611CD948F30F56B984E409650E9CDFFD63D996E25E5C0E0FFE02BBE2237537
8C945F31C26697A7ED159B529276995292581CB9B29A54F4F4B2D472C74909CC
47C1675DC6FB9A932C0552F8FBE17F4D8771BFC6109E6D709951694157B3CA9B
1F3952D101D6CE60D1A0A97C99EDB3FAD64BBD337BB747424BE88E67FEA44610
51A1F65159650D3A2FA882944E6E8DB113CE928969F6BE3E3B8BFB71302E87A4
5A22ED99B04853D66E5A22B56F79FEFE917A6F436B823B1A2FD914DDADEFB5C5
CA3A43E348D017CE2040752BF94A98902E608264DED8C3241F06469FE18C377E
448EDBB0823526BD66B40F0519F047195405629408224D070207499DF2F43E7D
52E442E3B6E9E3B08F88C9961E81373B96460077464C7DBE6C7C7887BEB3F685
B182706F5DB4C7C4BC2FB81A7D040EC5A04E5C5434D732318AE791EDC71A47F2
AB39A992EE304763BBA1AA81F9D74B24FA7EACEFBCAC72D673540922501841A4
F7EF18CA86AD20AD76325914FC0197DA6D7632947C4AB3AF2133D1A1E2719511
F62BEB9C879E76B74493C7D5EF38E01CC031CB4CE13C2EB6BA2695E1AB97260C
39A7CF8F690145893081D526990E92C1FB18CC4B968D70DFD13C6223FAC9AD31
2E1240ED981AECE8D13DC653D59255F868EF158EDD781E9D02889907B23F00D4
F6A0D9B74E591BADA348B09E22B1A783A8EF2AC87D34B6407522AB33411ECA4F
6C765C85ED1405A5F27B28A16751402AB278A8099E29940E719DE1E109E5BEFC
2A4098E77020110C37A90B5BDBE279918B0B31E08031DB686D518B4CBB8A4D0B
EBF6750A452A7F706EA676E3B3237FC5656B29CD5A3A04F82AC871B526CC28B3
A61D985EEB3610FCAA433B9C6D4683C512F0FDBF3EE6FF552D7BF0BBBBA37050
FCBE3F164189FDC8446ACDE8D0D4050278151B46E56AF826A0C2E9389C2B8BB8
E38579D281D5142944D3322E1C66D456E4C5DD727AA41FA5B369D5E10CD71832
A7DD40DE855B47289C449B6AD8D5F1D557102050EDA5F1641EAAFDDBC082E579
A06D8A3A323458808BAD0F4B8A2BF406DBAC4C5F555EC96E760C8245A1AD9F50
881DB475F892F868823CC55D4859C09148529FBA57A392127B68F5366491D1BB
097D8FF4A71966D42DD988F48C8A1F4DE0449E6AAE79500C42B4EFE4936D0D00
0FB339115493C16412F1D6DCE02BC7B485CC108C6321EBF1C609633933A576C6
B0758D49F3155D448D505F73A5206EC1C8886F5949790A7E4B850B6B8E31EC18
B7321E63AC75B6588774961F6B7D313B850AA4B368E48DAFAA5693CAA236E150
E02FB2831359FDB95792B2E6431DD24BFA8F2B51BC21E2E5AACC0CA211F50A13
075ABCF9F440CA468403D939B91520C652F1196EAF1BC975E26F8057F69CB972
E976F99070AD3FCD958C1EC54B3994EA142AA0615EF7BC00D85F75BF5F32B350
E2CF46BA0E8D0120BDB54910E5C27A27B59664E856EDDE290103A0D490FD76DD
09B152B3AD1C4754696B239D4B13935AC19769600943C7343A5E7A06C9115395
DC2F92EA95E5ECE5A08EDD16DF74B6297EC0220C91F8BB9AFE742FA96456E131
7D41CDCE88A8F9A12D46B8FCA50DF4433B0B8AED6A63BB5FFDFB8D48D04F9849
2972699B5667C0D2D206F4785DE20A854E1D4C655A690689B7B5A19F8162E5D8
454B7A1CE94AF723F47C6B168CB7269CC802B14545C8448B5C260C6AAED5FB23
2390D7239C22534FEE644AE96C5718EFFB9DF1AC47CB3022D3751E6B7123FB71
403E154150FA4A14EE2CDC8F0BD084CAB30272E8F065218BA88536F138B94AFA
D750F6EA9BB43271084CD876A14CEBEB86283BDB500BBC0F9E152C30059054EE
92951E4A202AB409F7D16443DE00ED69C1FA674BA3664F8BD00C08A27F475C00
E6AABE35B01B991AE910B7DC821CFD8A6B5C7F4B116E78065CB219C926D45163
EBF6E81EF0C38076871283D64FA5F2126CCA7E93636A7CCA2158B99A15CD405D
4AD290CD8F7AF8845CF78D4BE9C7F2E4DC00372530C64BBBB785117A8AEEC190
9F49C82BAD55AD174D38A74582CB367BB50ACF8FBB2C8A2EDB17FF267D0F21C3
5BE42CA518272C9F9FB2DF0780C957CF1B9734E9F49C0E6EBDB5D24ED5D673E2
6A25811D4BCA9D693EF8ABE784D2BE46DE1E57E1B738ADF6FD49E6A53BF48C6C
2A73026234D3719C72C2FB8B8274AB54A6853DC6784398A6B994BE424B6E9078
6C303D590747608AF3CDD6A51B5612DD5D49E1153A25EBEAC76FEC601CF4D10F
65DAE3EDBF9A163BEE244542BFD2849D498C239237ECDCB23458C7C3B9395C7F
900C2AC7BDEF8FB9D4574698BC8D4E374B34969A885A0A4AA26F19F8348EC621
89B42297868AD2C3E80D95C41FA4A5AF7A016D3C773E040312AA0240DE24C7F9
D662FC2E59673DEF563AECCABF724C09CEEB5DCA64FC6D24A091A75B5745DFEE
F5C1162900B5F1EF5A7102C27DB1918679E7E354A5DABF897D9C8EF5A14FA8DF
FA3A7B3D47542FFF5987268E60E7FD64B017EC6A8FDB4BA5AB5B5B58046899C9
C5993E7302C870678DEBE8FEF3F2438217BA5121CC668458620DB3D381D56770
19CDD612E5C0A267BE4F707ECE93B3E1E8BE65922315729FA5513AD13B562C5E
E145AB39905815D6C3E8B60AC5C1D4D7731E2A6B122C6F57790C42B0368AD7A4
99EE5F029AA6F8E302F4CD994EC08C00AC6A66C51254F71280CC722402E200EA
D4F6F489DCD61B81CDB85804A5EF00CDB09D9C2EE4F3D571285E319A78F90942
1C31359DDF81F38F6E8615BCD0E6CFFE077688C365888921E45608C868A0F6F9
D726CB2CD81B49A9F47C12FF76284D3B07E2C2E788036B4867F90D40C1E4FF74
60399F1F08F98A05A579D00D1ED5E8A86BE9DC1CEE3FCB03B9A0E4BBB81C849F
AB1A6089E9807455A5DD78B2EC3090E36EDF4D19FA6BBEF386127BBDB53D25E6
8448A975CD56BE0A93070F848850FB9B3B0285C7FADB28A3711C06273B79FBD2
A509FDF7AF81630306D67E0AAD0DAB78243E1B814F745234BA7CD57325B5A34C
C3F984018DC9653649786481788A6F58ADDB87DD0D883AF60455753850A63756
5EBCDE76329F5626E6328EBE3DB5770A4C3E21341C304F38845FE70E091803D9
D14037AC4AA8C4D17EBB62ACEFE5344982E0F489D72EF60183D8F2A79A3AA765
C18E0479B0255870CD61C8CF7AA8DE567D174EC90945404C5B928EAF3E8DDC1E
018442474EC6B0B42DF539EC1557722299347DCFF0347BA4273054B8062D3DF6
FF094944AE472D60DDF6CA62288E4E780F8614C7749C9406325C82715C866134
637DCCE4848D2B051B8E0EC7B88872E9AE68BB5DDC30F4A61119733F6F6DE0BF
4C6437A849A661B6A233B1C24238BB910C11D2A8024C89FB5DC745489AAC2570
4C61242B4B1983A5D0B134C8052495CBAA9D2E2E014641BD58F0EC389FACADA3
08A1723A5C2492BA0615B0222EDD152AD19C307118AC0086653521EA59D676CF
C36AB586FF1FD4C383E2785EAD36F41274FB0BFF9DFEADC612CA44A7392D8E79
1DDE1DE818BBF26CE3BCC2569F5CE6DC91D4F8B7800A05DECB300CD7A8C38D77
4C1DF436013901C9671F77F34A63F361C5579EC5E00C5A8E2FC97874F6459EFC
C1760E9C6C78E60CC0152340DA6F26C67B2E10B620750E2C44E5CB9DCE747E29
6F7E716E6BB12B699A2FCA90DFB3DD730D96D100DC5B1BBB1632D7015235F4D5
1C1C753EEFDD6ADCEB45DF4D00713744039C43B860B5A9C51AF0BEF11CC8E85B
067A402342896C9B3BAAA570C4900E12D720F2812F28626DE3BD3F3426B82718
259AD02CDB518BA4C4AD8F261CFEBF43857EC7A543ABB1E059247E276E206CB0
0BED125C8F78A665901F80068C9B0AED83074C6270B177BAA18F1975F43E9160
8B75D86D9F7C1E986C2DDA71CBF33FACEE675B943764AFE71B5A359C4A092916
3E8EF660794518DA4307AA5B38469000FBF31BAE9CE8703754A099D21B332D3C
A19A842755A79DDC1E281A8C34A969B80EDC946658B7579B5BCF07AC8B45C2A8
3664140E70CA62DCB3153CB4A8E46F12CC16254F52A26FE47FE41504D3E851A0
665AB60BC0CE5C72512D196F8D1BC0B3FC12DA2D13F4B9AEA2D017EE7E574B86
2576F5EA495F51E1B3A86090ECFDB57097EF73BFFD5E41E8AB6BF105F87986D4
95940A8B4A29E4DC974554DF975D026EA92FC09DBD65783663CAFE414B6F8C06
F00A26631D7FCC4527109F177093E7432F5FAA6CA14F1654ACCFEC8FFC127488
F604E972B695E9EF18F331A58BE4704E5130FB4984C3FE2474E6CF0935F90B79
7221D94774689E83E5406F5D9554C1284249C687A6CF5A6B4783F54267C48710
32ED406DE854CD5E243C0BE4656E35FA02FAF5101E1AE6B7CB286C9DB979D763
FEB468FC7AA2DDBE2E708D27D89164B12BD8BDF0418BEDF018EA67683158D1B7
73C6EF553EA897D5F2D53E75902E57D7C4E06D7DC83F1C557ECF5DE83748370B
00EE03A3ADB919976D4DBFF11B246AF9C2FE922A8A6F8CD47656ED2CBC816B17
3B01048BE9D1E4B54ABC0396D5203D088ED7A1FC7CC863AF414AC14AC2D75E5E
EDEB706CFB2AFE24EB580E55BD31B793E4065CE83795F047004ED88F5C38BDA8
7F5FA8880517429B9C4E5FE980448EDF3BD57758FD145E769D4E88BF43D19050
DA58F5EDC7B4AA76BD8CDAF0B8639BD5D2C7552AF5415B7F35B957F02B962930
D3D0C3AABCE7BF840A7A035F2CC57FC978684570CF6C8FDB960B9CC6E9435D65
77D1CFB71D362BAD7280AED8771C6EE2F7E2D86C5661CDBEBB354B84249E93B7
7A0E409B4D5E17600E1E43F5EA1F884939C0AE467119F1E155676D10A8A35955
BADB667DB10180DF404F43A166E2E533F1C050D35CE4AEE92C35EE391398EFCF
E19EDE2E31F837DF86F1800F59C89EF6401112AB73434A3938E1970D8EA3CD40
C7B8FB44205899626FBC269C25478E0A63F78F3460EDD4F64B4D2A5B3E660B64
D293F803C670E243F0B0EB1C548746C08C7F4FAC0D4A7FD8B7369AED2AE9A79C
74C0FF0E0B0C1AD3B59BEF79753FDA3E929B52F207382364B1C62AE8311C4337
297E030CC0CE93ADB4E2FEB60E28FF6D4AF0010D422AFC137F2254FFF6C2929F
CB76A235705EC088049C1F1B0E78FD2D357BBBFB0E12CD481F96252AB7402213
DF9BB4464515CCEA5FE4C0CF761E921D7D2992EB24625547D54E3F2C644ABABB
47914DF3ED2C719753BB1EED9C435F2D571BEBA4F76A0AD5DFDBA6EC952A4F37
948B63263FA4097587802F6C66C3BC6E9DF45A22A24877E4A4499697D46B779C
8609E85E4BCFE84319532B3AC9D62BD413CC127C8DAEBC28D7DE5CB57A30F23A
2859902409CD4FF43EF6A99E9FFA2DB4113C12AB9C616F074276C4840A546A73
0D24D8518117AD200014839545B1078F38D7284FBFC473C510CA28AB90147613
F0EBC94C3EA0001043705336F16E783FDADA674B361F951D5152C0011FE0BEAE
51286E4979DACD3F5A953BD9E918D5E46449525A4A597FF0F091B2B4794752D7
EE5D9B94524DF768ADA1377760AB1ACE2D780F5624CF53DE046A36EFB35B52F0
566623440D7F364C4030648BC39783FD7AE189510DB572D01093BC4C7EE0C09F
389FF828AA7585F9B7FAFA718DAF925AA837B8C0B647161E5C322CA820521400
5D234795C9DC1354D1C0E5ABC997C64F3C84D2C3B7581BC9566EB6D012B6B784
F740B8E0B360808C984DEC73EF57328A2347BC752EB0EFF7BE8B688A3622826E
C83CC42DCA4A26C504AB95C5232A86199FC1295D8BC52BBA9C5089A346CC5760
009233FDE0B38CD4EC1D07A9F817ADBD1AA6D303AAF94D5FA688675B55D40FA4
3C6D97741D9FE4C964FC6D24A091A75B5745DFEEF5C1162900B5F1EF59402CD5
E4D0C3953C9493D87F46CE4E9C7A543364A9B82B34154924F4739C650A8EF8D2
38C73BD6689A0657D8427446E44E2F5C77937234D1D6AFCA63944D3FE5126940
8ADA00FF11BFB205B9A42EC1F50B435E4D44E14E22056FEA071D0061F16D8879
6C4BA0C670D0E715ED9333A0FBBD15F19CBCE5F93259A6C4A8CAD50B9186BF14
62D3AE2AAEA8A45E9A29BBCF83E95F0C65B2D60169538EDFAAB935FE3468186E
CD90E2F15FDBB395191E6C4659910683768F80764D94FE8A746FD06C08F15F97
3A528084C73A3416B7D9498707C04E9115D411FD74AD771B5973E6D0A573A1FD
2E01CB1197990EDF8444CC83F1AF789DCE5C7F64567C9D80D1829D7FE5F45647
ED6B99C6D96B728840A77AAB12DF037473065B62E9F3775CAEDAD9508FA92283
6FAA01D50CBB9B12B543AF2A86A99F4D544B8974F01B52945FC6ABCF3ECD8410
335AE6CAAA4F740EFA8AE1742B115F4FA7FD8E330D0B86B191FF5B038A5D0C32
91053A42460468F6A1700953700663A85229385FB9BC726979DE858914A95826
CB2A8F0F17773C8DC86EDDB610CA36C8A6051774DAD79E4E3DD10CA06A919430
0B6FF769550AD34A047DDF4DCAD48C79C13C76BDB9A98E254804C9126F6A007A
D697659D0F4B9B7BE0BE1E74DE179CA649DEDD316A452509D2804B5BE0F6C5C6
EF94B0FC821BF1E02C91C149EBC163C14366CDBF3C81F57A352355320AB4F3E3
A84E4B60EC6CF57A1A00F90F224190D7BFAFF83C13AF40E46F7154198D7BC2C6
F10586634E82705468F167630971BC01DC641766DC254D9E9B06BD62DEAA105F
CD48375C11A3207B5A381FF8E1C163001513CC382BDC172026981E9CD05FD8DD
83503D108FA0BF72ECFAAADAFEE78E1D8D2B9E94AF57AE0A20570A74D0C84155
353C360C86120BE8A6A2B0C9D6550784FB8929369CA329F6A6D89A7066E845EA
FE223A6D26B84EE6B6ADF0D9950A195F64FD3209C6D47B46B7708F855E501D4F
6F9B939EE1663FD02D1E1D74F22C4DA4143A4D523E32A0A371A51F64CDC4E06F
544F2055F67F0ACD4E9D99C47877168E8977CDA919CA86D82794F04E7E98644D
98246CC6E5F85E045FE750DA4A9B403FD293CC436888B75949007FB2D0557A88
D362014EDFD3445233A03A005D3F670E67B8FE790851B16E71241433FEA5650A
3908D0B0BD195F64242395E6C807B7D00E12CC9CA711980842040899809A443C
00042C681FE3F9BBDDA09127551CC4780E971D3952648BE3ACB42BEC6D5B5DA0
CAF19D34A8BD8E904BBB589CA901E79BBDB311C102F70F1D2FE7EB3609B14BBF
10E66264FD1E6EAE175987CC0DE53E3799F86A71F96165AA3EFB39B7B13C5FCC
011F38E349AF6FB76AC51841B39F02662AF720242D74012508F26C7003A39A3D
65A8CE04E1583229836D0DD8CA390CFD14E80FC0455F34F89764223F7DC55BA6
69B8793F48CA8E9FA4C89E877948CA4CF92F1BB9E3825B748C865593BAFE4D25
F58B6C3937F7A3D8165EDF4C74CBB662283EA3FB964084B345CC06DBE98FE9E5
2BDF3CF8FEC118F0FE83A621685EA394047116ED7629C74E8171EE39B9968596
DAD2FB69E0425E6B527C4E25D28CDE453EF7A4E0988B62CE07D14F620B90A67F
273B311061BF2D3CE3DC3A689EF85714824E939267229AAFDE9C8C387F15F064
F68627E32241CA1AE9D54F1E3710F18FFA2F912FD822B05DDC146FDE82B9FABC
A9A986683FF9CB2E1937937AFBCCFCFB821CEDEFB4941ACB6488C1A608FA21A2
EDC0D22ED3D5F6735067D8C0F31C456BB35D31B98E4DA0CCE45277DB109D6A95
87CD6B0C5BF54A30D4E3072F05FEA72A3C39AA0DB177C37546FF0FFE8288920E
35A3B84D87A21F5043A04BE41F18B2CD19AAC871DF4CCABC332ED75E1657E2B5
531B227A3879412434F68276BACEC7094E9C4779051CB9421DE1DD7BC5D109B5
2B7093D785F43FD6DAE693B16645D354E54ED6C97ED4F591623645C99097F1BF
66F347EE1D6DB95461595C9938581921663D3A3DB29723187596489A8894E037
3BF6D0E1D56EA24BEE873E68313353CCEF779B6200A1047B20647CBC2F42292B
825608A05FCC5A87AD774203738D9D144919E98326CE01E4BE6B9E623761D24C
0B7CB02DD90DC8A2CBBEBDCC9B7EF3CDC194DF7541D34D08480F1A1CA16F2E2F
8A6A4A00EBEB709BB571CBD6D51C00B349268DE077F06EC59482927DF994271B
1F39BB29575F0D72916AF4B385735E3409FF6CC8F3C38638084F8F4F7DA8B4AE
EED926F2DEE9A34E92E3925484E3FA45344C7FD3D4D3A68B7A80D27AF606694C
DDFE9C6DD15D99ED151912F966FCDFE7AF5AC66080F745228EAC9B0EC2C3F650
1F4BA0C82814EE1605F5CA9D62127553EE375832C57F9ECCF6D8C3FCCDDFF2DA
B3612678BF24A2450F6E99DE896F7F3E4563B59A33344959BAE4CB57E6FF0CAB
1468DC84FE0F3F92EC4E129E00BA3BD9CC0870FB6060AAF40EB540CD50D3198A
9127F8B594F29CCFDAEA3CA1276BFC8969DA9B9A00344F1D4D782CA0ABA98754
1FFD5934A377B4E670B933462098578BCD5050EB47A9F4313EDADA4845CD6C72
77041939F7243D600CF7EE179BBD3BA15C58FC4736583A4EBB71EFF383DC58FC
1C6DAA3105C475E5D473CD591B11F1282E9A80CFE218A4B5FF0264F1EC9818FC
81ABBFC92DD26021738105BCED3E94CECEB2E6E552D1F135733C7ABB72957138
4824567D6D1B2BE5142DEBA285AC0DF74D696E55B08B672A1118DAA72C369DAA
397883491E11171B2040FB6637140BE927369F803A4FF311D52A74289065C1D0
E2663FA57A88150633F3F937E9606D75A53BC9AC8678874FC3486B5EC7D278A0
D5DABB7B1BC64C3BC771C29C5837FFFBAD42F40083C2E412EE5E6E050E99E1DD
8C3FC2A00E05F0D6076A34A4B833ECB05F190B1444E379817760012E1331E9DA
B047409E478B58C1E5D8811E1799E40445E29A10318D320D2C81AA5DCE6620B1
3159F6F0DA988C6FF06B7DEF84FD26D3794264CB02B2E1B8F18CC386797D2A9A
40DD7EFA8609D2E30899DAC9B8553DB4FC96FC35ECDC38C3E3223F9E340C6745
0386D3DC4FC1E20A83DFAE731EAD0363A7BBEC37D8A9CAECC16CEAA06FED505E
C60F7460026CB419574319DAD73DCF5A465E9F002FA79AD452E2CCE8D95B6A53
88F29F07A9F37C84D143DEDCFB27AD763C746E1814DAF2D759976B3D2246EBC6
9353B083453AA83AB1657ABADB9A30C6C52A33B45F9C7B9361F7C7F4EBB939F4
6ACCC32B19C5A5886DAD4EC3D83D0BF1564C00C405693F2832BA5827DBB7103C
432EDAEC18CAD42166EDA7834BE592C3B7C87AAB2CBBB8A87C093937215405A4
E4D84599E4674B52F65CD9EDBBF10DF518D2436969674D4C79B5F77B8D6FA2E2
26B8B932A195CC0EEFA8E39744C2315DFC0050BB4DAD4B0FF3779D39D39D1205
9B64E8C6097B5281C359CE4BDF4907ADA234C6DE77DC4957B683947D54583D09
C01DC47D2CA3D7E500C9BE47338665F1538F2F645757A6FECBE5A1590A6EA831
635F1E7946F9ED34797866D7479F81B25C8B73BE5EDF2461F63CAC91E253D461
23B796965124AF855AF2CFF8EE38436E7C68C48BA02E9F78B4EF39EC5CC133D1
4C2E464C13F5C41C3C5F8114A5650C07838E0D553E7E840AF3EA2B0E8D47E025
299E048097B778D17B0AA1C672E2020C946F0F8E03A35E76E81DBB60E01D4CDD
FC2E9BE4709956583F3B9EEF0A37F30434C3077A2428BEB3FA5E46ED9C413EF1
95DB3159AFA04AF25F0A82F1114AC09880F80827DBBE528FFC7FE26EB04AA53A
EAF4DBDBF6F0800EBEF9EA787C014E395791F73DC3A126EBEE67B036D93D18AB
91F771A43F256843EFCDCCACE4627CFE80E82179579BFE305B9AA04A6E9528D7
57CE24139474F15CA1082CF6930F992BFC83A4D983558086958FF839797DB451
68A9F3FEF6B8BEBD37ADA98518DD604EFE6715F50897F075509F64E99F3543B1
13D3A4716D2FC8CAF0DAFB63A8C28130E1591BC17273EBAD6AFB646F54CEC76A
C98678B54E6E3A103F615CA05A901D8B991528CC1ED3B30CDE23A07FFBB7128E
66FC9D66FF7CD9538565425DCD900AC231610AB9789DA62AC41EE688184BFE66
41C0D34DC5F77FEB37954682979666FD919D83DF85BA4F4B14D6A77044767539
C0C38F4EF65E5D900353EFC3A7D5BA1EB1F51ADF85A244CF55CE0EC7494D4247
243DFA8385DBC5760B397F0EFEDF9EF7769E0A6E389AD0B2A5D10CD4C41A4009
7EF753FAF0128954373F9718877DA7599DE0AFF6ABB520C27B9B698116A5787F
E211379BBC3E33DF49A031282BFAE588877B2A9A6426F6010B1050C5F50CA931
A8AED0902642383EF313DA6EFC55D3AF10B647078CA66EB88EEA899385122089
2D97DA2F0E5BB1BDD5ABD40D988B018FD18F5ECE08D9A100CC4229A4E33FA93A
0FDB1AE200E2F6C6B899AD9D53871027450BAA1FC67517CD5B69EA896122FDB9
20E721E0DB58AE8034D8C75D758E668485BD05C356D3255479B96DDEE53455F4
1AB052F11C588936C1837380CBC611ED14FB2F017FD1CB7E1E23C1459E378627
F323C6E6F04912979B3850CAACDA744B25D6FDDD4207C80A3636F3B7AC37F415
FD2F8EA734FA949289DAC5813D5C91D4689F7553DE7432E5B553BD7AFC2D8E6F
3071A191FA8947D12382B17FDCEBBC82F61E5EF76E8793195B9D6474F0070FE5
7D16CD12153DE8F377028125088457135DBB27457FB4CAE16197347611DFE63D
A3C7C9266F7ECB5B7E091D1B11EFF73F0B5E7A5748C8AFB555D1E26CCBF43EE9
C02CB6F255587300FD433C3B4D9FF1E96935A959D465B74109BA1843085C27C2
69C751AB2AFE4B15C13C6A0664475C3A9C192169487905DC47D2022934989F37
1A8F30B1B39DA9B1F203A2814A200FFD11E14CC70C954BEAA33A81A5EE27B922
0C89DF8C7471DED4067D1AFB8A49609DCCF844AC7E03278F56A07C3423C5B2B1
4B8D584BA7468DFECCF5BE1B12A00F107E3B1014C01FF888A9B1E40D31C73F5B
4E253538C5E0D0672F042A01EC5CB1BE74CE9522C06896B9E641673A87B47BA7
D4A91ED4903EE143F0FF84E3670B8D1D046FFC2E8400E63C1B8315BF63C3BA9B
849EDD5F620C7E451943A157C7CFE362567ED47BF94B63D67A9113921AAC23AB
1B8F7DDBE6F6DCF9A3C3CED6842C356858594C63EDBA2EEC06B6756F2281E040
0F776034AA7370C867BDF8F8CD40540C3C28B45B30772EE9FFBB8D00718C3430
10FAFA41B507DDED01318BC9A9C8A9E8D714B1A1D6BF89D4CB98136839AAAA92
BE85FE2786437E6FA70BA428073349AF15F2DCF43283BCA59F109E9740BCDE6B
C5813EA8EBDB20FC0C7682845F3E4266B7D327312EFB770916FBAC97E6584C84
9A9BF389B403CD6FF5F8366F9D36FB76A217CD9C3F62414281BCB53CA46A8161
D536C2D0011A2B12B23165BB4DE936CC3A4BF19EA1C5D6C0D79F9DB3B28A9266
CA8402BD985CAB49BB651D6FDE79EA92A7A00FDD42D5701AECD409DBEBF0C9E9
5509BDD99A537F5C974ADEB4C564C26AF25696553753718AE0425FD9EB6664B9
516671F04ADD10C478B7F8D9A562487A9FAD8D2C70C21A4F3ED7F9F55C21A04F
1A6DF8168FA2286D8C7EB897EC741C41A0BDB45D751F6641FDAD6065A36614A6
86D6A7B3543205DFF5A31866735EB1A931953CB0EDF319AB319EA996076E3AD1
F6363E18CEF8715CB464AA160792A95431549FB6A4ED42741F9996D7BB1EC714
A2F30863F354F78FF9D34A41EA24E7A2ACB665959298984C7B4B72564646B091
0BA9E173FD2222DDED8C4BB4813D97384DFAB387977946314C2FD50B1EFABC3D
291F4FDD99EB7C0EB047051BE634D62F6F164085EB045535E44A67A143EB6391
3019CCB8D949E25D7DB43EF32CE21205C9B33BEA2D1B94DAEE18FD20F24BBFB3
A2C968EF269DA1ECC28C2F9B079ED3CF9C315BA95779D124604AA59F92201234
15DE40C492F1036351910FE6B93342626EF81FBFA9AED252C2CAF15D3A748549
B6F6A61F79CC9DA248CA8A674045257BF43591473F853FE3A2A43B7CC317DEEA
02FFC7B4CDCBB6A5CE017AA860B96CA41C168548C5076500FD0985C57E723DE5
5A2ABED9B40D7BE674118BCF391F130DEA693AD05F6FCAAE4BFC1F60C355698E
32DED416EBF582A3D80351CADC60B733E50FA695EA1AB682A056B226DB767392
0A2C426EEF8DA67E650EB7B1DE643531FEA419BBA8067C6D0E964143A0906762
197B8DEA764ECFAE0BC6723E560B0FDAFB34E8AD48A2E4BA5979A58CCC637332
22D0687E1BA843C2E0831CC5C994179AF2BA4B7AA7617E2C8E789C621BD307B6
477A05334A8EFDF778DA38E54F972D6A17B932EFECCDDE3DE2B354F3681BB1B3
E49E42E7B668D99299AAFC1A4965F05C14791FA73964C470E1FA471436D8C6E4
4AC4C5010157D94FC1250822504BFA173CEED4E2DE5B7DA75EC58D886E9D64EA
069C9432AF8F2B50A91B0C7C55571DCD924B0C089E2515829D461CC7AC00155E
932FA3F5B34063E5095402C6368C2AEBE26D3157EE874CCED4EDBDA26B381A13
DEF3C35E4DEC459759D7D3575F6FFCC6B27F94965BBAD1D2156928CFC8EE865A
632AB4A611CAD82809B7204C28F45A55EA03A132AAA54B5AC1B745CA3E8A11FA
F9612B74D2950015F2EACCA793E7888C26EE723E78F3C894D26D13AAE036CEFA
B476721A2E3A65C2C5B0C7A8C8B2206E76CB6598DFD42AA22CFB939A914FB803
C324871E0BCF73B19653C3BCCAFA1AA748409D3C1E1A165DB626D7429709776F
04C4D5E4D04DAEBF5C475C7C3EB2EF7410CA53A9034999638C65F45B0F57D760
0215E8FC2552DB72CE2772DB7D5B3A765D09AEE0F0178E20124CFC1D434822CE
24ED6438F2103F4EEAECD38BB01B2C6F42C4C1B222707A748CC97785174C6E81
A614B95868CFEAD3BDB4FB04FDC4FE2F15947DE72BDE539DC79E2EDC7DDE5151
78FBC21A3BFC4E230375D47F4691E0E9E35436DAAB48FAB07CE7C933BD984EB7
13405D2B3F481244379A40283186D67327CD487B978FD50D9BCA2508355C508E
8C22EEDC232CA6A04E928004BD90C2FCDFB6DD8955D2D3B6FCF5943BF5BEEFF1
F9BF99301CB61CB5FD95EAD945BBE7141CCE4BD29366A97A5D740CCA11DF380F
90656717F2270C0F1D1D5A0C48774E2E3E1308F919F597CB24D48FD50D1EE2A9
FEF854CD6238126A0B323E6E84D554F59DB81033F4F4AEA1BF99F8070976D754
85DC4DC5F3C3D020E853171B0D1612A3DFA5264D6B64371271FCB4A74B2157AD
DE421D5F51D813B577B8741B68891BF8FF9BBB484DDA6371DFFA6222F88F0886
C7F8848E958C6F74CBEFC62A27FAAB38B52465EEE09E12C4482926B22743E5D1
A94A301D3ABD6010E43C4EC19A0D63112FEF67D69CEC2F78116EC8583ABEEB71
D9592AFE1D648C347BD72FF30455B7E6447D19E2611C39EC0DE9AA9AF9629976
79755C4CBD2D05F9A170FC269B792E8CF7A0462248EE95527AA116CF31B971CA
F5DBF65ECCD01FF04E6148A80BB2611AD6460F73243DB763DEDBF476F3516136
578D66103E6455B244B9BF9C400BC802A021411BFB80B334C4BD614EA7496D58
CE8BF62247CB10F893048F37A2FD1E4BCD68D656301406C1FD474D98B7555DAB
FC469D633FE91FC8103AC6DFEA6F007AF4A42C0A08C4DFD62E596AC1DDC11E23
572F8A2F5CAB5CA87E7A6693182B9561E329A3E67F23EFA6DE495C7C9D966924
F124603446F01CF73CEC5B7877077E421392293506C391705D62EEE3CF25BB0C
4EE70CAB7C5DA7C9BCDCFB67F1B66DD991E2E4C0A29284FD2C9A8740851EDC44
2490FAE83FAE3DCCD4447BE0C2D6DE59B1BD629F479924757548799EA068E215
35FA1B41FCC74614129FECD357C3BE8A07B61BA51F5781CAA9A414AEEA78ABC1
7DDD10E2B4D776449896677E02D47DB24D4967158F415484BF9D6A2AF010F8F3
BACF583EFBE1FF3856DF768AFD7C810A269760DFA831CF3CB5D0A73CCC6B41CE
8296FF0C92CA794AFBF04F8BB3B65AFFBD62E1EBC63C182EFEB487A03399B496
9F863BA0A83115E8AED878484FAD3448F4BBFCD65D1EBFCB6494575BE7C27F44
B99EBB6713BB8306E5B5A0947A00F952DBBB63C0DA21C717E348E0BE63120324
CF402F90BED39B54D866320877A767FE000D8A3386EB1E20F1194FD049F28B82
F4C2D73E41CC73C1C9F668931E64C8D467ECE84CF7A8C288F9B22E0AE6685047
D8BE005ED260ED9488E270BAB33AEC2A3A055F6BA3C3700A868E92B4E26D499F
BE545C804154DD343D0FCCA88D299600B0C26ADE2DD3774D903024A13EDE0D58
B50937201CDA9C1EA23BF95C4A3A8932F7D47100FF8A7D4BDE1BC37CE16625CD
FF321ADFD514B2BA1B66E7CFDB8FC93B6A8EE952D196EEFFF2D9E6B8CE8CF9F3
2866ADCA85FACAE68E9C7954B512463A86B1623BD5433F6551DE2AA71475089B
3D2BD411FB9BA4C621F23724D73B1079F7FA07AAFC9BBEBE2E4AC9E2B9D11603
4191A1A804EA935EF390C90783F6DA40C59AE09ED22AE971884911F452C33F94
F3A9165CAEAD2464D8D80FF6C61F4410BE7699FF1E5E942546C8A4CE88818DBD
E72D030D8E884D315F56536F6A8756826B7786F35D21E3098DC9CF8BBE54D707
A866B52B55E06213C9491954D1A8509555EDD6F3AFA7710F49EB3706A4BC08DD
6698AB78D7681FECCBB4BABA1BFF3FCB4D8216D136C4B20B96065574316F2EE8
2417F28EF33242AD35C5B3A99045B99EC805E25F46A0C1D1C281BA23D096EE2A
4B193612337A6D180D9FA91E94F858DAD0662FC9CF4D1A5F32B6E6F0DB26D2A2
BEF33383AA86D27BEBA7169F949B08254A985398CF9DE6AF7875967EE3CA79A7
97C3A4F27AA9924D6616FC860CCAA34024F5669DA02ABCD1BE3963D734D64B01
82A6CFCF064906AF5C9ACA3FD626CC47D247CC610668FF164EFBF2FAB76ABC57
935C81CF7CC61260CF2B227DED699ADDE69F0C644DB1B12A15889917716A5491
0E71FB6278604A400502100D8CDBF2947CE3218574CDAB399479F824738B690E
8189691C1EA942403339023DBC4A50793CC443112BECFDD6E018E867FDA253BF
15E1ADBB05F04614DDA701D1CCCA3404EDE621A85F81C42418F86A00F9E86AD2
055F1A4587DBA063C52E8210D6F5B3C5C23A608558756F8622A8FA6643FCD7F5
5E72948D2DC55AFC5016FB2C4CE14861F1909488B3C1295FB381FFE037D9126B
AEBC8B4C6A7EC8556845CF97062549BF859A34ECDE8AF4FDE1550774A9C670A2
833CC6DCE45D2E4898BBD96830A113AE69DA214B1AD5EB1B5B430AF25A20A0B6
36FFEE11D9F45BCA484AAE98AF60C2AEF608A1119AA13FB6FA40C2B7FFA305CB
793241192FD9C1B01AF5CD5388A0802D80FE1FB499545814BC2B3B2ED508A554
7C4B8B182CBE28D8B46C0FFA3AA93A437BD5C68850DC71A816B0D510076BC298
CB824BE6E3FEDA248248457A91624203BC9932A5AB72BC6AE0FCA66760484CFF
4BA51454712FDB8102D968755E73DF40B4E922D522E2CAF63FA0A8D22AF65683
9B0DBBC50EDC121CA1ABABDCA567BB9D28CB3E5AEC098EFA7599D096FC928471
D2FE294C8173E82B508A73108E3E857C6FC2C1E3CB2BB26E7000AC331BA4ABC5
12DD810F40E9426C8DE97C2E08CC0185E1B5040F60956E929033853C3BCD247C
17947407B92E406D62814013DC8B7D07EA8BCF6B09E1993EEFAA3FCCF263FE48
D2F58612E2E0943E125B1209029AE09E251D74FE3748704DEB2E2B9758FD1D18
BC412B0D1B1410EA26EEB7EEE691453DBCEAACC6A77540CF459337A4767D25AE
29D2578676B7D52AFDD05A75ED3B76613CDBBF70DD34936C6953124D7433EEB4
4C724ED69C8697D06A5246DF0D089BBA43C39DF8A664335F67B9DDE36DBA793E
C77E5A7FC825D34DEB46C4AD0D21BFC3A9A11405B0873D4E92793CCD7B29380E
EC1C415FE398C7CEFD524F132A4B84C65FC4E875136FFD709A15AB5222CF808E
EF614A4179397FBCBC43190EE840144F9F053FC85041782B25B9AD3F9717B8AC
5A4A9ACB17B620DDA2C76AA0DAFE9BBDB18C93484CDC022ABE678A7F2E298A7F
AD967A2EA7DC41B8475B6F39E58816C7A84839C069CFBB069C10AF00358CFFC0
C1779D733F531FF661381DC983DE2858E791FBE5A690808349DB8ECBF43DB214
9627D250AC3F036BF1377D071EA58A0D10AFF07F15A799749C255C27EBF31A30
880B57DB8FDF8A6088AFEF5FD1D7F8363E5D0A84FD8B9B57CB16B5DF771D52B1
8ABD206531B6B4968A465C12CF8259422AD260702C4419860A94D0E467A9832E
FAF798C19D635F88DBBC73AD3C77E7D0EC1C2534CB9A2016B605576CD6872771
4EBCDAB1E069FB552B244921DD51E77A5E23628762E804EDDD045FA702F68652
A4BAEF9590CA0A13E15C370563EA2DC1F5DC10EB0DD59EB53FE4B506FA04FC21
0E9E3DD63F00738AFFF0F2903EFF7EDA73C577BC8C1DEDC1B91AE582EFF2AD2B
9B2D6D097A7C9E12525061EDF9DB348304CE2D53493AEFE8B0CA716456CFCDC2
DE5A13ED881088B6B60682F4DD99DD79DED8693042FC09D14C99A69FCCAE3D3B
AA6C3EFEBAACF1427FE2982572E4CDF1C6E5BA5CBBAAF733DF941BF1D0C36592
4B43BF6CE43C9140AA5F8FE895E4093068661D8BF9F0DA75C9221E3F45BC7A8F
8AF3361EE4B989D3A028431C635C595DD6FC8268C8DABAEDDE41FBF8349AADC2
125874360EED1C72A524A9E19BED13D137DFE3F0185CABE18CC0C89440046421
9578846685909845C2A0BE9CB7DF7AC21D9B88457317ED0F6CF9FF5A2907997E
B6B068D2AF9356F39EC3901F4654DA943F55F75330C1BD055F17E7340B4E1A11
0BF7ED2BBBB9AD9B8AB909430843B101906D59FEA0253535C8A6DD2D07F4B95C
A0B01830315A8BE52B960F67D6D533ECA263D30C85CD8FFA9D4D5A11EBF823F0
CB12B9B888942681DFC2715F371A8AC15F1687C92D7BF00C6F8129E347C6489F
D4FC798AD913A7F0EAA156E3EF0EEA375E66905D49892B70588D708BB273A253
C5266654D1AA1FDD19A24674F7A8D5A62B6009C8031D505D69DBB5F5AD46B06C
B8429E2CEF1DE4692B1E2074B7116C3845EEA16B5282A7375B3C445C604C440A
08A67EE8CC94D5596272F4B60F7E43809709F8E6802082807F46295D607FAC37
F0413E0CD5D53DFB5225C201ADA22CA8D733D3A12A1999ED21D5104F79B84AB2
852CAC651AF16CAC17111963E719BC2BFF4C7363937480B58CD2256C232F8973
C6C5710DB3ABF8562E1D016CFFBCD753899CB8F87ED5B96927C3992D0E2576D9
850BC6F08AC6F1709071BF6A734F6CDD2CDBB4F35F7D6497774B221B16503354
4CC77116BA609E37E9038CEFC41BA172055892C47614A9035E7EBE5EB5D606A3
1F7EEDF4F0298C9AE254619CFD825A5092052D289A653949F11C130F37E27A62
B17E62CF33D2262F538E6D307965D35D68353E1FF42EA4870FE04CECD30821AC
842CFEDCAB3CF67B65D8B53A376CBC741F1FF0C7AE99E54D87C8AE7446DC3A74
512FE0F2FF7860EB06541D277748AF1F586142B2524A3820B01735AC4E879A71
78CE33B7FA4F5DB548F3000B0048C5B3845873FFA22DC68DFEBE8614E05A7EDB
61096A55A294ED70EB7ED647AA1A4FB74773690C29BBF86F53AE6F81231B8FEF
F1E98FDA2E6166780E3BA3852310C3C27F57214A1F2B18C45788D6B00A8B99E7
33AA64B039CFA5FDDC4AEA160F30F006E1BB2E9F3E4AAA7AA9EB7F75295E1CF5
1BAD0124C1C996F03578FF6E93F270C13863CED436BEB2A4BE3681818F820B00
324D5E6F6D00C1B164F14183C30E5343D2CE65C1B010A5F5C34F34EFB93169F6
EB3AD5A1FE45117A0C41ACBC43774A411032EB9A0A08480B94D57A95A639C79D
717D1A62CA14E018F71DEAFA448258460E39549BC1781B89BDB53A9752A6C92B
470D7D7F201AD2A486937EC5E0331D522494F1279A026FF6E7FEB0C0477DA65B
79AEACAF019F736B0BE357285D5D945DD0197A2B910BC0793E55132B9C12CB0A
CEA07FE1A99D03F851BF811AAE848B8F7F77D5075DEB91445B6011D4FE891B91
8DC0343A01080548802256F88608947AEAD6D9670DD996AA9FE4D4268A3FDBF8
F1A8EEEC68C6101A90C235679195FB197996371F4CF2448E3FA080F2F719812D
43D7807770C927143018447A70FD16A84D97A7DB4E6BB61E56591223190F13A7
72ABD2F45F92A17CCED52E42690F9808BF40C0FF302E4E863FE130F28AE4F7AA
E4A9D1779A747EBA5F945E05D1A6D9171AE48F32140F3893EFF849FE4E17A69F
02E7B4C69CAAE6531350186F97AEE58D9DFC7713870D1BE59FAD51FE8B1EEC91
9B75ED0EBBCCB03EF5F13BB2C4F0EF5A35DCB97AB21AC9F5DD453B1D3838591B
D4A0179BDDE6524A75ACAF60A9A45DBE10073E3505C3EBA20AC324DEB56675D6
B64DFD240A527264178991EBBB9338766F05519D98CD6647F5024D51CD78D79C
802EEABBCA93CBF9681B8231B2405D8C11BEACC5DCE371CE0F825A65B22E682F
7855684CB30A51FE61DE94D66C33CF7BFC8FCB5C2015EFB5070DD0E20298066B
78B7794DD450A9BC2708F01EEC4DDA2C386289EBD7CCB6319582D7B0F7571F47
A6673541937AEBF236B4D6F4854E03909A403F6731BA048411129DB0C939EB45
253B4022AB3359D2EBB743BEA31863EB72774923AC44C82D135453BD56678689
754F0DF6EB63AC7302F6B526482E4C9257CDC556314D5C972D31EEF4DEAA05EB
DFD7F0B5FFA9569F0CF2DE5F44EE9D993A463894775B2DF1F871924CE2C0479E
A8C8C337504B6B21D153A515079CC4F3EC104592D3D38E10A40C93C9958B2CEF
0A5232202C7F74C30A4646D8726DD73FFCC1EDFBACF5A0B609037E464AB80316
A44B5D596C6FD3CD220DB76EBD1D860A54D8E656ECEA88768396EFEC282EF301
A6AB5BEEBB25F619D67246632A04A14A7EA94BEED293412E4EB6B7D7B2A078E2
6A1657650D50CB35C74C886228984F609F872CF41ECABC321E0A4F6F62668E63
9DCAAADA19797B2A3AAC758995A7355F79D0696406794EA1CE9488C855936EF1
55DC90A020CEA122A36D71C5F5DD0F4BACFE7CDA4FFE64DCF7591F16BFC51EA0
DB9C210F2281CB50410BDBEDF24EAC2B1E0F17A856F22CFADFC5067FA0E5D929
236579DAD5A6BC105B8E6211C3F31F7E43EB1546BA7FE32409951CADA934F889
6AA603778ADE21E727EFDB1CA6A63F460F5B31AACF1C19C21C3956EF741C41A0
BDB45D751F6641FDAD6065A36614A684728E804DAA2B51B443839D49DE5CE537
DF8352F461141C01613F3886845CCAA039D56200AA2DFFAB67E3CF8D9F42606F
7BF8F2C0F92CCA49C489AC56BB4FAEB441E712F66A152CF9F800899D54676A2D
0D85AB1C7334C656E3BEF70A06E3344AB0A708FCEBC57DE835AB5980A3D5C5D2
A827FD059DF62DC7F89405E165A3FBE9874215BB7E335C72B31AB0E0721BF6B1
4C2F3295817E73A2402436CD148649BC421B7C750374E9AD06754F99F206791A
CD83E54B4F73CF066C2B9C5DF63FDC0ABB95E0C51F56A593B4BD17DA633529C8
7CB33A7E80B9947416A78AE939B689CA3267B2BE5B8178E6B7889A33771F8627
6E68AD2E41AD688458346234C0ADE6580CD710315C8C992EC4EA2F014B1E08F8
2E2D70948CACB1B4D21F131F43A783E91F21A754E413C55D5713C9D3ED528247
757063E630D6045F576D9C446DD56ECEEA07228F0B0DD14607161FE4F1526DCF
6D389B34C824538EC663458C94BCA7DD1C3C56853E002ABC509706C00E045DC5
52B2E5EA058AA13B033545AFBF576377A48059E6DECA5D00BA874DF1C0A8D1D9
28B222871F54B0B774CB1F93F83A7F1C70DB5ACE0CBCC50DBBB4EC8284631410
D4156C420D073AEF009C3F8AF10CCEE6956ECF413DC3A85CAB5CBB66B4656077
CBD73D1561064DA0D11E8B2EB840E1818F6F1CA6D4123AF4A23A6E5306072985
B6B7FFD152AF9EB2A58DBC7F4E90371976C5FAE1625D62879E4B5A7F10378A9C
AC2491C3E9A1771E30988479F2DCCC53E722341BD44BD713BB383C1215584389
5629B71900A3ACA96791E39E6A10B485F6884A7B560FAB7F0EB5F6FA72DABD6F
0BE5297DCB069F4A7B911B96C587E65FD0058E0576018C728D613DF1DC35098D
EA7E69B397DE95D81DF8AB287F2D64CD173126E3FDCF7D711DAC380E4F048050
E3FB3B7BB2E3ADB9A3915C53AD8A5BE8C2B56F53C1931C7FC6A9319A055F5676
9DE68B5A430916F45E36D0FBB705DB00488BAEC7EDE0CBCF1AC4B2432B5FC671
FC5A672F5C8FD02CD8175CAF404032DF21CBA457DB65770C16EA31CE31F9CC43
89F36295AF9A767AA3A9EB2E5C2790F8B1187C9BE2B4714126024DD013CCE6E2
B4DDF83466480BBAFA40730E278828CBF869D7E5E8AC6296D5821F1DFC98C4CB
8B995EEB19420CEE8E6B3A012AF00EF8A7E879A4BB01C27DFED27E3DADCEA182
D1C573C3883AF97D367A60AA9744BB874493329A8428574898A4431060C062A8
C25B332B02A1EC7167A159265490F34509A694696164222B160A6ACBF9C2DE66
992CF4DAB3368A64C98FAB5E483644BF7C85D411526108BE7B72351E48E30F6E
DA6F6AF28010B75004203E9C274FC1F0F59D7A86D619FE0173EC94BF04179249
4691B655CB9C88996A27E4435BD947A768ECC0CC7A3DAAA2650AFF078F3F5D67
D9ACBABFB0C03754CA811C2667B98729EFB280A85DED082F6CB035DA367C3FCF
5311083B89C86D81AF27BDCBDABC57569B2F2A420EC9F149FD6A55F1A51A895E
285885972115BE3CE57645355991B4511E39D8B71F1B8622A7A5D19C85A15795
DCE6245908215940818C0E1B3883394BA9D92D60D33271BB572126735E72BE44
078D1F71342A97640D82FF2DB3BB3A4EA8DE8EB3C6469D98A8D4937DF8B47194
81BFEB0FE849E292D6FA3E7B6584779D8BB07972C4268948DD3AE550B3D8CBD6
A090B9572E2881A8D9E4BB35CE2ED27DA4A0F8B83154BBFE9F13E4F119193F64
6E28BA7622E2E44E7C653774029E709393A4F8DDC88432FC775BEE16B10B7FB0
291B68BBC5DD2C7A5ACB4113C9AA0839F444CFE8AC2F2FF46DB2B95247BD8261
F39E31ACD1D8F443AAE0A3F0C050249A333A1F83E14DFB02F66C33F17030AAA7
B0A2CEB87A0360124FD1504C60DB8948A5C1C441D0C9D794B9902C9C1A8E85F5
75BC1E7907C57A28A440118DB7613A4CC0BEF80943F7692E2DB667DA7E075077
0213BF6188DC183302136FF6CC18ED1B0B8BA643AA958B11ED879178611E0E2F
AAFDF0A13E3FFD5C3925F9B88CDE5FA2B78E5652CA2B448242D63618E2D25068
DD374600A6ACF8B4FE9ED5B391A5D2DF077C55F3CB3BBC4F26EE89E4F31CCC08
72C502A1C8B0CDD349098F1106F98799495DBB3A05C04BD649053FD293869C55
F345F4642D12EA28AFB297DE661883CC13A06C3399BA82A98F151CA288979D90
7126C6A6BCDF7DD623DA490EBB2D09F2A0667A4E0B5D6BC5439622D0710C5606
69674F5FAFA68FDD22AD422869E28828137C706B0CC676490B725F50C0CC1C0B
40C04D1680D51033154CDEFCBB4752F3D8F9274D85C1B59A2A11E07EFD6044AE
D524B96BCC9F0661D553F814511378EBB3037BB0667F038447900CF0F71F72FF
52A8A4C819D119551A8B29CCFE994002D3673A778B833326CE8172363B1B4AEF
DFEF2308AB26931A723A236AEDFF5676ACDE6EE71DC9EEC1130741A68CC9E05D
7B24FADC2B172D329D0064066026BA374F067AEBA832EB995E27D36EEE7386A7
86E482EC5AD877C3ED6A86AAD4BA6096F6E76B47FB3B37634F7C143B29D61433
ACD2308168F1841D0C155198B329FB463D88B53932D7A24C782DDC093059E1F1
9DC7286BDE84468DE3D7B5691166D59F99616224E706E080926688173C83B958
8056D49CE921742A12D11F083A6DF8ED299BAB6929D9EE2AA44362A10F1795E0
780C412A606D33C0739D6C391159C5FAB5960A2E3E913CC7EF0A07843E37CFC7
62CE25DCB7C07A9FD4973CA9936C7CEBD55EB56E4256A94E79E8F147BDDB1DC6
07885E12FBFA7343990A15C20E561C7D72EFF375CC4D0754FBD4107B9A801E9D
4CC88CD0A464B57E4332F3DC5D5E4706C542AAAF276BD5E7F7BEEB9914CE4255
8ABC90B623AFF1FA2CB3EE64202DD46F253C83B32563E2C59FAE2822A98F20DE
1C232DE16A8974475F36FA1D9905A3E169A1A02B17E1E5A321FEB915FFD2192C
A8295936A18B42F96BE5854A7003C281F88FFC4DD9E2B7C8DF1C241030B68FBD
BA63C29C3A63E888B26E8171A2820119CC673B84AC595B4E3A2CB97107F9ED79
EEDD6FD3B6613D855D5E17D6020D27DC30DCEA9798BC49D9D9D49B9CB9429CA1
97321B54562509398CE92E437F4DB5105AB65C49426870C7FBAA8C2D1D513754
ECF44B9D06542B9F9833A1E36C15301FFDBAAECC111FA5EE013E80D4E092D8B1
92E25D2306A9907DF8E730AA237099C3DC5F258FE3C18EE0A1752532AF8D8908
3F4DD9562632E6B227DE1DA43F4B0D160100C2DB33BC4FB06C0E793DADEE3017
92A7EF4CE1047C153C87C51B704E3700C49E10091FAE714F63A24AA98A5781F2
DA400DB05B36FDAE4FC31181D59149ABEFB70C66BC2594815767B0665764B326
446A071B6F2F362D222A5CEB4FEF889EC88042C30A58B2473A333E603F36F68A
EFEF88DFA8F545B8CC39EADC00F42AAD7BDCE1D80995284AE927962D3CDE05D1
F89C5B497B45B3EA9A479B91525E753E3061256FCBDC8CABB9120CB6FE9C2A2F
5E9385BA8C8E4A8406B993088E210C91279AAD5922A3546551F93A058FD1CC04
1AE13DDC40D378D93B056E4D96B1E598D94C5DB1549CD557CF4DE95399C560D6
5DD1CD2ECB3FC35CD574419CC980B4DDF530330D2690839DC0AAE1F2A93E2E19
F5DCA53EA0A57F3C9E271DABFEEAE10AC5CFD56BC98BAC508CB4BDC8DB58FF54
C825E7A07327ECDB2E83DF3355DDB6250BADA65F839BB6CBAC21C9507357B0C5
D87B31D622120D6EA45038626FBA51B8409CA6FA9B28B735ED6E7DB302E9AC30
AE90D2AE24504F2E921D2551CDE2853071B8B14A6550AA382A75AD0CF739EF1B
49B03532FB47262C6D41E1A93375E0C9D3121B1EC95AEA26CFA55E9A4E9A5B2B
808890A43D9E7F59104AADCF797D13964FB174E3C63454AFB214A8944B2299D7
5F55E04BB7221B2D2658C06D45E63C9A5EA8EF66FCF240291EEA1EC6E334E0ED
C575DEEA0C73666D12F2D112B93EF7ECA3D1993A2B670C19B19D222051E7E89D
6F7CBAAFCFEA55E5D0A7AA9FB8E01FFE7121DC203A89648C906439A411D09BA6
DBBC7DEE251F5A950D0F62F276A9161DC1D4941C302791AA7F9267FFEE49CE70
902BC81395F39D911FC35330D3134DE8F40C716B11D0A6E396D355576B9463FC
161D0B6036E7F654E1FC0D9A9A3FBA49EAA38A1708D3689449C6D974A97D5AEA
4652625C005977FC252564C8B478AF69608C3DFDF5EC927C6E79972AD10D4E80
5C40B5D779A887A15B8604A3224BC443B7B1339E01FDC5E42D99CDD9306DEA21
534DE1FCA4F6C6BE4FDBCB6D1B1935DCD24D67DED3C5ADF52EEDE57EF3EAC944
D97EFEF2C9E2E43707530FF446F58B37C73CF2857A7ABB3C86ECDAD8A1324574
CAD1FD05A37844799928B4DA778EF4D4BA03548CECD9D12CA669D16A0C25A85C
F598BED7EBD29FCBBD8F6DA5C9DCF1E682A24EE12B834A6D01E0B31E568C3403
D78F8ACC16D72E155435171FF7A740FAF0E38DB7DF1DA1BB41D984B457154D1D
F0103E0A79E52A1898684401E25CC37C0FF9DB9C5064E2E468F590617041BCDA
B4F38A44C189BFBB5CBA860F9CC900EBA7E2E51251D0A365FAFC66389761F543
6DA107749746B51D550513626E0C22A301504A6C3B746E7F9A862C9343872F7D
BCB88B7D3C2AF94919F4B9EA6669666A2E0C195AF1FDCC1347B4D4AD31E7B1B9
3CB1A2DB181104E45B650F2BCA82B8CC60A0156706987C7D0DB913F1BBF8A7B8
FF80B01387078AB900626C7488A61231C7BE4C83A079FEDB80E93F82F7477A18
0FF3D6F876D5E3064BB81E690649EF8D1E13F8168F3DFF482F375F80F39AD1A9
760230747A6D7869F727AFA50DBD59B35B8BF199555798D5A831727B24EC11AF
D13D92CD744E53A729387C6E48EFC3641A1DC59A816C933FF5319AB34D1D2920
9A16487327DC3CAC470BC33A673DDC4423BD1B23F0E139BA03B56B4F220560CE
72BB55B8C0077237DC6BC48AB4BF001752E0793D5F65D8D54F9887042B709094
FE31586B454CCFDE1CB0F17F31B2701321F8D5535DC344DBD4BD58CD7D2FE44C
8E7DA87C2F677A6BCC37466E50D17FD2084FEA4387B1F76ACBF8C8B97DF061CB
5A7606AE4A6A86F7EECC222CA705C035DC49777BDCB812D84B5F9009000B752C
FA7E50A7F96791014712D201625E702EC701B68DB40148C9FE39D955FE41A893
49C725D6087973C557588532474D9E9B852BFF97CA0E3D67F352E8F9DFC8C909
3A07D46B3102148B03F0B16A49E10335AC90368B31AB3110CB4EB8D00DF6246B
A012F36F4F85A0222594D963206BE3F0DDA325D4D34B30CA26826FF5722801C4
4B73F726014E5F80CEC413FF211D31B73A3506F5C42C194788D20A71C7AB8A5E
0EF0CFB34CBB7A5C6B40C54DAC21C52A4D4991997862933CBC8591121667AA1F
04A4C533EE8B901CFD0AF403EEBA2C52871812F5DD26AA443B6B73E80D855F5E
BFF6A5BCEC48448BF4641B74BF8864CC28D7AAD8EA3FBBBB407E0ACC58419064
4EEDD4DD9074727F4FBD3C035BAEBD18239DA0C74B200C2A29C34AE6255BC79B
73AE14B980A7C35761B1786C4EE8337CC2563BFAB7A1C79DBE2F3BF63F068754
40F1A672DA6A04C28C460DA2A483E9826D8813326ECD34A188B0A634F3FF7824
578B03CD8EACE4E3DED172A63B965D6F9B998BDC34BC133952CA2B44A89F85D2
28EB0E9D2316DBF500217E18D4B2EBDD92068E8F51449ACE52C22175D508C60C
F8884E969FD66437FC462FCC201BE0F70AC43BB1D4751FD760C3A4195AD85146
E60C1A5DFE65AA2AFB5669696BA89FDC697F4714DD79C2409F77EA29BEDBDE0D
AE65E46E4AEA15BC16B9AF420812DE85BE0DDFE97636BC6CDF6AA45409DCC490
789170A2624C51339D1C6386B376FAE99E75FD5CA67707F4A39624F83658C39C
3DBEA4E2570779F50E7BF593502799DB7595E69C5A574C9BE0236C29CB832B10
1E098E86D766B266B19AAED827EDCAFE36C902D96C187FAF34BFA6434806BE1E
BCDAF6D4A26A62D71FAF1F34FCDAFD71F1D3B4E8E77778D0AC05594DDE0DAEEB
4C41EA7F65D44137C84E6385F74AF3DF4FB28C3864D72D8D7B94A64E89B6161C
E07638F5717D3DC8C84889EA000657D8244CF19E381A976BE6413D0E5D7D7D18
C4D60EDDC44F38CF67F1C4C11429C607BB5719C3C8BF4DF11587B446754714B5
CAC01906655133EDB151A97A8E2BF3399C81C4FFA474BB9BE7316720D6B0DCCA
1D3BB05F686632D02267CAE72563F58C4581BA97D682F833236949ABA7ACE1D2
78FE92D775C73CC68BBEF2649F3334109106DFBDFB96318995B388E9017F1CA6
FD60DDE8F3875690471C84B9C523234F21572B4DF407490D64A45B1E00B31CFC
BF9A2B9DCF133FE9A9E139ADF3B5BAB3EC8706F1B95A2E82795863FE3E5C51F5
B313935FE06915EC13744D2C3EA40578312D4AE9F368DBA3C023AE65D9F47930
02F9755905EACE357DA7BA92D34C5F66636A92A44E75CA20DA9DA4F0FA49B85F
1E2B61D2B53DD712E81AAE28
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols6-Regular
%!PS-AdobeFont-1.0: LMMathSymbols6-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 417 117 0
%%EndComments
FontDirectory/LMMathSymbols6-Regular known{/LMMathSymbols6-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols6-Regular)readonly def
/FamilyName(LMMathSymbols6)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -88 def
/UnderlineThickness 31 def
end readonly def
/FontName /LMMathSymbols6-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-4 -948 1329 786}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F1E34D6494BB6367FA2B172011486EF5
844F5B89DBD01F38E82689CB16E2BB46A5E39043E718382C77B554CE0F5BDA45
B555F543B5A4669091DF58B79AB8A54B63C4D96C02C4B32021405D3A086D8A06
2E73A4A478789C6E51C058FDFA980ECB2F964EA385ACFC9A15416BFD38DD998D
35255414BABB9C6DD923B8E866EB22731B625EB76647E680B79EDD64B5B6D9B0
ADE8F024B2CE77FE9D87C1A1286ED288D3FC51CED96F6009F87E505A8B9D4288
4AB9134B8325BEF5BF60359BD06C20186FA72EED84622454B0848BB74A51C541
E9F8468308E20E4D41FE78074ABBEFB80E7B5B58641F660CCEFE5A36C7E1DCC2
862B5005575BF1D4A7845F976D9A52A7E2A33558953A65CEB6601B904A42E75B
92CF31D9B57842CA62CC666700C974D6C7B88C4E3D1A1B143DAE1E2DDF725758
E2E6EB357406DF364D2720E373DCE143CAD7FEC1812EEDFFDEAE20D75039850B
0314C68931A618291AD30A299FFD982858215E9CB25FFE9A6A805EFEE2B01B62
8A682DB0C011615552F03DB40513901CE59ACCFD6C2D6F05E2B6C8AAC7EE97D8
80BE1AF192DE2AD3600CFE96D7F2280FF1D7AB28635B3FFE975FDC6329DEC300
1F56A4424DEA4A64D855B319ABD08B73E84F536BD6331778706987D7AB15DD1A
4BD7C272B4A0B383C6A680B6AB91AF0A3442AA8D1F163221902D87F9923FA77E
3346F09DE23C25D4CA5909B956FA16229BCBC3FF36EF6933F33D529CF2847EA6
D3A482CAA539ACAAEDB0299025B307CA410FBA6D82B4733763DA07D521E34DD1
6523917F436B78AD3DF0CA143DE5F58F5865595403FA8B861E14FB8153C749EF
88E510EECE108F7BF2B97244D97798564787AE6D4F528E9F27024CEC47C4140F
C5E26125D1C4CA5023439ECF1D7DA309651590C702799F8DAD24B2A1493030E6
1D657AEB3FE72CC66F826A3A692434D4D3BE6ED6DABA6016E93D48189AAFAD52
89F9B5E659E88FFA971BF1AC65039011AD4C5F22986EA0FC188FA30CB08809DF
96599B49EC9587706A53B5D5DD4244726E81B17A0E0DBF8060AEAD5106824D74
8D9C085BAC95E03E8199F1001371EEB6651E14D1FA85144C7D576220A6AFC55A
C786BB5451BFB6C5ECDAD7BAA8CECDD7616C1F992A1D8ED0E05E441BBF12394F
7EEB8B381AC1CE278F26B5D50F9C8BBDC7B3D5D144869BE59F0BE20370BAF7C1
B52A067A884BEC6465A5814897382EE44FA0D48C8A3F63ED30CCE41E5BB788B2
873C2580AD7E5E93A08414E5CEAD55C5F2EC61150D2E80B53B634C297FF9C638
105CA4DA0F8986EB1AED17F3C26F5D12CDBADC4547911BFA0D2BC589186D24D5
FBE88DA6409352766D80E77B1270019E0EF57F31E9F13B91681BB032EF0F402E
D81971E9FC729AFC1E778A3C05764ADF4FBCF10F61C9BC429B5EEE3FAB3E8E69
689DFBD7C4C4305B192D25B4CCB9A9D05281EED29F7F78A8A40E38B7DC25D78E
2AA6DE2D8C18BDF9A390CB2427688763EBDBAC71788DAF6CF106DFF90F450E7B
23C62B18B0F3594FA089BAFFD2E73396ACDEE7682FAFDAD83B669E321E9A9D8D
237C0D95B8D5FF033724D76E46ECC52789C75F7900EBE4A8801BBF34D10B1622
115E044D8050BF7C551651FF922639E5077C139E3C606B8EE84B8F5E92D2F88D
C84EE41ECEE35E4715E59932A15870F16A77980E01D2C631E8B34E88FD7AA5FB
83A839D27B3F4FE266B5D7CF61F3F04D2FD679BEE3817776F572FA8D85C5B4AA
BDD48613A88F926E0EB1BE5F6E29CA535084541B3EE2A676FDC94C805D78448D
F7E49A910EC6D8AECD43302C382FC681F0215D1DC96E1F4DA51ABDBDA7942886
181D6AB1714F14C3E39CD2B09C042880D1B1ED45CEF15C088147263678A8ACB4
842698D4E38C00842C8A44AA93C21EB1E9A487C77B37F45AFC80D25D2F1A40BD
30275ED541160B35FBAE458E4979816B591BFE0EAE184D4974AC1DAEA95E0885
4FD55D1A44DA0D58FE7CAD47BC132013B9B600AD238BAE1DCD21B51D33596EF3
D8AA2297EA0293970A360E1787BFB2DE94
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman6-Regular
%!PS-AdobeFont-1.0: LMRoman6-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman6-Regular known{/LMRoman6-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman6-Regular)readonly def
/FamilyName(LMRoman6)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -88 def
/UnderlineThickness 31 def
end readonly def
/FontName /LMRoman6-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-515 -298 1647 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF386043BC0B77B47F761487099
F3EE8B97E5F18DCAE51B94317C8F4DECC130CEC55EE16A19C81D4D1668127C7B
86C63787AA273CDA19F2DCE459A6BDCED90E3C60B9F7DA6A0715D2D12F8B805A
5203A948442C2E5796D5CD20544385DB0893AB62040E1E7F33167592F1944E2A
AF140EB52E80AC868A5E53B529B98C77E46244F0B9D46A2FBA3E0040CF5A1D5B
8CF20FDE7C876B9AF4A5F6798ED83E56E985DC30EE5A3B2D5EA30F640DA2DB67
1783F69DA070954570F579C316046D8A6B7EEEBAC73F338A8B7D40470B4468D8
CD9BA8B731E8581C69A41FE873D6ECF58F4962AB44706743806BDB909276EE0E
99E10A530147C9C14638387F89B169CCEA629DE9AEBC010589EE04588A992E08
30B37AB3DF923029B8F6BF19C1C728797AEB5C0F2044753BA4C7D1437E2B9B1B
3DAE6A15672EF1F238D1AB8F873DBF5264D704FB19F5C1CFA0E5168002B3741F
0134E79412F5B0AFABBF3069460C10225E6F7BADE64F07074C9D594F6F7514CA
5B8A7750FAF214600FB248AD5E8D9FF734EE44CA79A585268A06C6FD4E294257
0F814FAE80C1A7776ACFE85D3159ED173F8C4EF0456171564E9A2E1C26464408
16B747D137D37316A340FB72BC005029A06DF8BA48E9AACDF832BA2745C448E7
9225CE3A522B46E18F5733663105D638E571758C9E8D9121EE819E4A12676318
11F0C568B81E1502A5D168139F197F7A71FE60CCB05063C6D9D8A0048E60F9C9
5CFFF69AFB554B3534796218449D2BB97FE15BD1A6FF104BF67F8EBA5C3C39B0
24ADAC78AC4FF61D5847F0A110651F4370133E3968EE80FF9C2E54953EDACCBA
2549852043B5A93B09ACDFD025365A4F8FBA3FCC4DB60700C22ECDF23E95E01A
4C7B87E4F5D46CD2AEF5D46CD2180E4304BB80E17A83397A677D32DEED9BC850
B4C056641799994DEBD48FC73D616143FFB85D78805A95B8CB191C775A2DDEB5
FC8B803AC7B461E0FB63D746090AC3E759366E115437A8EA8CD328F309EC0960
36351451AE7425A26CDC319A31BDE48F68B947574C1DB2834483C460A5B2429A
D49BD462D9C9F75FBA92ABD47A5EF18C3A43B9B7A3D1EF1AA43A6A68E4D42CDD
2484CF47C0FB3A68121F424FA4B29058841D9821D7F955D3824CB1754278E8D5
847116509B7D3B960EE375F1DCCB4CAA1CCCDFA0E61FE01518738F7E6B887898
261117EDC211226EB3A9E0B251FD4CF4FD2543B7E6F394D3D262DDCE224AD9CD
BDE8CDCEAF38C0BC9E406A35F44C6B412ABEC730D9DE3716C5B0A87BC7ED856A
77E3AEEB9912B64A5298C2F4552CECF63C84F805508C4A0CB98910441699B722
2BE7727547825EFBCA21408C5F84E3E7781B5BA336E0CF740BE6D85F8F6F8631
BDB1D0AC05ABE2EFAABC930F472F93E247E29CD9852001BD2E16E51AE3E1A77D
4B05540EDA577F3759A940D23E73451C967666B5EE5CC6EDDB55CFD4CD875072
FF79F4ABDD8F935A11E83F9D6F40978896B8F7A0B472D1F9FFC68F7C2F5EB1DD
447832B4E1DBA7870A949E48C9DA6B47BA581F7D24C5A0B90A66F0FFC044D1E8
0652D0836E0FF5980A50D39360DC793D9C260F9A68379C031C3F363054F84888
CA17948C9FB31CF86E555B4815AA6C826666025BB984A519FCED4498E4A4CD61
BDDA5F652B54A3270DFE501ABDEAB9327E296740F0DD9B42A45879E285C8E0D2
DD61A71643555DD007B6477A05334C6D7D079DB00F337979DA04BBD485BD5630
0DA794E86C9815AB3FEB37E78106CA0A3441735AAC9EB49CCA33DF4322929D86
32C4BD136C89169D45718A88BABCB2844362B0652A6345C6EC83DFEFE0994552
32455B3CC14F0D2FE83F60403C598F8E360AFD7C3A3F37E771BF49F20E7ADF22
AE9612796DEB9138059A4C12D4A8B8A37DCC221CE80014F807A53945E21FB479
4956F9E37B87EAE0447EDADEB00764A38DAB429277B779104D1360C711A40FE7
FE508CDB795A3BFDCC677893634CF91C45816B9AC1146B1BB7AAA74FF92F4273
B18D515086F457B5AEBA634AE5C75971733044D64738F071F82148EC95F4E53F
D20E5A2A4479D59A73A9D61F3E4E4894BB92AAF0AE56AF9ABB385D300EAA72C4
388B62E7C32A29313EAAB849169FE98FF9B3CFDF3FC9692113CC15C94DDD2940
49748B473FD5F4AE9C34F0554E0BAA2290B2082F996026ADC420C676AD59744E
3D1C8132F311B70AE10E12E863CF044F38542BB9CEFC017BAA8166A39AD8117B
F368B91934BC6F0BB1B2E7C4F285F9BD614A00DE6825572189A19315AD397814
2E2E61CCC0992B66DA71D8BE22836E6DE06A54674E34DC85646396AA84DF28CF
38994138E0F4E0A3F1604049D39F50717E4670442DBC451B029ED37E22709B8C
11F4DC6A1EE18BFA4AEB8E8FCF1565480CC3C141D6375466FA0272B67393DCBD
86FE4CD039BB44D2BEC68717E95B7597AD7CACDA2A6A4E8808BDF0ABA0997D0E
DBD2BA7C8586E942973B8ADC21BA304ABB619E86CEF1C8D3D84C9892F62613F3
FC722D561C0B4D707CFD45E588F7F0CEA7717976FBB04E6A3577A2141CB8A8CB
6EA47F3B1F8BB5B13D7B90A4F95E54057A005AAEDAD9D7CEBA399B3FDFF494D7
8EEF9EC6AEEC046812CE43B02B9A8F4A127E7C98CF0C088786119EB7E0E7EB32
C428F531FF5E355D691E098D1FB67AEC40458600B1A87AE31E65B7EFE7B1CB02
5613E53340E473C1D5495826470F3A1F450D1AC2C81C876EDB818BA0919DEF1D
3F443A32A724A003C23DE44D0A1774265B27B89FAD2A00A0F8325EF3029125BF
0C973EE91DB8A81E4164F827F359A4630C2955964D0D808BE8D16D2EBCD7AD30
50E68B2F5B879433A41FCA23CE3D342D8157822D42F334B8793F13FB6797C5E5
249834816FEB195E5FB218CCB914449B44FB92C6E63D1999EE615767510AADA4
364CC2035DB3CD08B107110C866C7FC5A1A8A411A597335E6BCB62888AC8539B
369E5FE68D9DEA3C0DBCF7C332C1413109E975BFFF13E7D0BA8720C1A7936015
028480F2CE7EE814B92E5BFEFF479612753E3B373D0E5E288AC7CC5D3A751095
4895B6583129FB837AFE9E5EA65226535F722426F039917C6C2E033240C86703
508D2380278FB9B8E12B455199E01A4C7B87E4F5D4EC84E9D21FC68D0D1359FC
7996DB1B6A97E165EADC6CE23BD6CB9700745AF7FB6DF76A2251C779DBF0649F
15D26FD05EB16A7702D79D42364FC91AC88F98EE11E8609E02E01CE344598BF6
B0D1B1310C75AC850FB4C642FA3710C2C9905F224C87890C9DA4E53930BBDB54
CA2AEF866BDC2071045C3D71BAB3CF386AE54D6D57ECEEF7A86A51787478FAF7
EDF2347DFCB070CF8E3093B06D0B80CED641940DD7A92B277C63B178F5E81127
0F2F4E4FB0360E4923BF1A75C78A77CE2BB4368A7C8F48639FC3A0BF18262068
E043BAFA2CCBCACE0875E368521C0D91FF9ABF781BD5C69282459F75ADA02D7E
D5D348F7CB99C78CFD41D054B08B9AD11A4F25CE3652A01C7033683D9A1ADF85
5A6BEFC921B4896D04E61B913B6C417E0AF5A4EB59A67192BCA9ED8B4D70ACD4
EFFD55C41DD3831AD6161DCDD67FFB74C773637429CB45EB3EC279B505D8299B
2AAA7A05FCEF74AADC754D33163A47C93361B58F38ACBE8868CC263D0793FD51
0BEFD0B8DED7C00CD9A60AEBBA3FADDCA48E2745359AE31AEDB60F54D334C1FB
8CE7C6CFA4536829527A871675F108B3A973CC43AFC2BE532ED012C3EB58266C
BEEBFEAE16F228285B627BE31FE6BEC3F374AE853CB3E511385FDD62F98D8CAA
ECD64C7D8468DA6DCF2767A73AF89279E81D9CE04C5C360D7677FEFC0BC3255F
01003FBC34C53EEDB7645170A6A6B6C1A85D0058926158D713B29EF1F9D60352
A41DBE68A7816F315788F094FF4AF02F686A3D22F12830D995534A8D82E4B822
F07B115CAEA24F19126C17DD16A3913F27F12C896BDE5C6BFFB9251338B976C4
056DFB27F053921193C59DB289A4188A942F2D2D868F92B8459BCB9EF09ED7B5
2B92B00BCC6ED4FE1BC82E285FD99B6CC9808D4BF6C5E91C51725CC94A1958AA
70AE9037BAF2779ED8034237F25540F71DF81701B07933495A954F676F7DFA49
F81BA6B221FAB4FF6EAB642A91F1947AAB4A780D034BC00B16D7C4D77CA1AAE7
242CE5BE6A645C2653FE55D062B786BC3C6651B6A1CD604A45763B67768AC526
1DF9C7E081A7F60049B5EE91E7C3F3F02E3B8751E078517F614A52C9CF58B49C
1D1550F2589FE68B29179A3E97A3F0B35A3FE8DF5B26B0E8BABDC5FCEE3EB404
54892CE429C3ECA8635B7A013061A8BB2B0EB98CD8674AB5A33FB9835B0D1EB4
B6F550DC77164C5F6B43342A87FF745965DC919A12B63D7058BD4F4BD90D4EC8
361D3DF55B5BF4BE1765CD19CAB0F92A94AD2E091DD7659A4DE4DE812FC92035
4999BE909721075D1D40A984E6E75ABA2F4AF1A7D59300C44EF44E7060A9FBF7
B5252C0274C581A2005CB515170BEC2C09C3EEF80AF06A0B3E3A704A3B79B914
B6737628E56BCA749F4720DE9195E8559ACAD8346F7BD9DED0B9584FED157922
B29CC828ADD9B2582CF6C3178700E56D15B3AB9AFAA3E9D10D4B47F75D05CE2D
81DB06B129721A9135C29F9C2C2C9C3FC2897183D705A37702223D1466A03D24
67AD61286FBBAA4725D698612300458A151C340BA68A9106225ACDC6D829F002
A20624B2659A7011A9657AC8B869C2FEB82AD03AF067FC6D600734F59939234A
15ED0A6402505729BEDFA52397A053B37ECC29D2E0AA06A2BF72DB85657F4A35
58D4585AD1918E86DAACB86054F56F7394088DC50A1C1FC14A0F8E5003D4703A
071AAA2FB6B31D984F0072AA303D33D5478995B533818649CC62032B5D3A3F48
0437323E1DFE2E69212EAA61EA27F9EA185D6B4A80C1BFA827E4F15E623A96FA
4C467943C618A5E35267223F46AB148E74D8D1B986B2EBAE55077A0E54BA5F4E
CA8379F7F7BFD9CD497E66CBE3728B6CC761E56E90A48FDBEA688E80FA438D78
057EA80AF988C8767E67C90E0CCB24824503570117323252722787576A552F56
5387D8D2176685B1A58609AEC90E71132EABB4AF737A7AB1D63393DB4A3AADCA
389CE1ACBF20AE2FB1EB4802C331780943D1C667EAC9A01B6176AD76F2D3E88E
98A5679207C76C999903969568B43673A80D0C5108E8116E5F5C2F25A54FE587
E55C037EDF4C9BC1D95FD0DE382839AE8C789A6339F7D36DAFE163824896DC2C
78FC9DF1F980D05D8533158A7D1941871D0016ED45EA05983F88B9E7E3262FB0
36E1F51B26BFCAC3915932A9CD8EA9FC589975823965AA4D2FC6AE27B27A17C5
10EB9072FFAE0685C7C24E70ACB8564454277C41C28075ABDC428D3809A6BD65
49A52A6AE38C80AFB8C867AF2D6B55B800BE51509F685173FC157CA62976128D
48E72C15E739FA6D2412BFB5783DB3C0F6D60E34BE594B65D769B6340202E77B
33EC7CF4718DD267EEFF4C0000F2F317ADB833E0D0DDA4D02A93E18795A8AA1D
4994D871C6C5B81488F425782658BDAF63E8792D79340D223C92CC01B7E355BD
A077E525640CF211E7A3B8DB7BF746E85C18EC1FCF0C423A86C57CBAE8F9F82E
65EDBCCB17469C47E7B6B66DC8BDB8552BA01AEE38E1205B077C2F2C646FEE57
99A02E0F53322EEE450F6DC39A4F03032CCA7A8320F6B01B4C39C37DE56BA266
2E21344E73C74148C1ECA7D4F858CE686804C3F119899F5BB3DC8DE39690B59F
D2708ACEE9F19DCDFC2F1E54AD17895F81828655204581AF0B98038CA5F5DFF5
D325975F280CDE4402EC81ED6EE1D304C8D933CDDB280F05DD157E37A6EB7BB4
51424B682DB6CE16E840BD0577CD58A2FC5B7D170AAA239E07DF91A1C10223AF
53A16B1DCD7C5DF152E571C9E7318117E3200AEF170495FC898F22ECC3CBC849
8CF1AED08F797E67C90E0CCB24824503570117323252722787576F4CF1A672DA
6A04C28C460DA2A483E9826D8813326765D2A528C6A92646975A56E261E3C169
37CEA1C949ACC063FEEAFE31C8A721C2D46AA00C10681BA9970D09F1EF4676BE
5E02D7DC4613C87ABA83D059ED0635D5874A3671EC6B08F2A0B3374650DBA970
A8893D25DCBEDF56ADA1D011C03BFC4D497466C7F09105A287FB8C8D3083CAEC
5B4F7B332E904266FCB27950759D9DF1DC35FC7A9C4C4799419A851AF73C1978
E6ADEA42A238CF1150B5BA091FD30CB05C0AAC0D6FD8486C034DF78B77054829
D7A079D7BD85B9A80845B563220566FEB8F341AACA7DF6DA060ACF1112FA31D1
0565B2B293E7A6C09E2E8FBD459825415B084F754454ACBF44DCF4961F68DBB0
644E77613C9E96ACB55A77DF4812D900F42AF9770E51EC98088D8FC81C7A93EC
9FC3BB5BDA3619E904570286AF49CEAEEAAEEE0AC1EDF4DC2F53275011EE991A
A96DDF4C96A9E0D8E354195A2563759DFE0183C8D67B449516EEB59F22B42BE3
2D7B1631DD1E36137B9C75F2C99248D4FB86CB367BB50ACF8FBB2C8A2EDB17FF
267D0F21C35BE86E068F98C3564F42D2F7F26014DE37C4DCCB6B30860F43089C
0A6E1E7B4D9287CE71718F81073EBCBB4386C5F4957F220CDFF1BA5AFF56910C
49B957170DFE24CEF8234658524B0071B5582DB34872C321F5D6A82C3B0AF842
D748E7160373CAD07AAE053155493BC317F89A8940552EAC2159B49C1DB34B25
67B50D0B0F2BAB32DD9D471FDFBE9B4D20B0BE8BBE3C1A5459A27799E63F136D
C58DA8682674E24838BF99B06FA68C91E1797DB85D924C037C275BD496F93E01
565EF63E388BFB5372277A752C858F67901B52715557491B4DED0A19A1E6464D
99B41FC0AC101E91B84180444A0A928894F8FCA116CFFFF88C6F1C7BF34A0E25
EFB2AD7503D23492E7E980B2C4324A4918DD087768EC44A893A7EECB6D95C35B
B87DA2B112A3E5F0257A53249617F3F4D9F5729FC7C25090211470F9D3B10BF7
FE4019611CC67279792C59C002037F13240A333B2039FDA78228FF7FFF776789
5FB02F823B2CAEFB944B42D689B020B11D38ADCBDC1AD716F75A2C6565B6D04F
A90E615D06A805EF2EA704243FB382621C005388966DBE3F4C2EC9888B56E962
41D345CBE471FFB3B78C4FA50EF1BEBA5095045ABA7952457E62E4081D5CA62F
44DC287DAE5C2DBBCA73CAF31025A3FD47B8B313E59528F2881E4C77381AE42D
708DF8E5C93474AFDFF39C78E4003E7B7FE30D31721B0ADF552294F3AEAF6C9F
4EEB4990475FC4232A38D8F3903D81C9A329939DB5396510900CD5D522C5E9DB
C5C59AF4C51B407D44468B5E2614DD937194ECD03E78CBB916BC57037DBE008C
F0CCF784147D8580979FE5FCB204DC95F10D6E5571D4EF121855C1086E047F04
3F4D780E9A34C3E671B402F789C9F3C869F0FD12D2A1FA3458D37F8CD2E85194
7683E050B6D2E4F51FECC9351B42923E388B70E7C41B77DAE3DB6C579E3A28C6
3E8E38D62A92755377D1274604BE610997CE121BDB9CED994238C39531CDDC19
7EAC2414615E79137C52F372CB9CFAF7DA3CAF003473DBA5C03B5BC597E5C182
CBE1F42E739B6485473B414FCCA4D5C10FF38CCCA54DA33831938E9392DEF759
4DE827864CD1D0B2F50FA679945BCA6A71E4329DB73E7F29098787D96D89D30A
3C961F55E64983F69651D5206CE47CF745E42FF494201D7BF2AEE8664D6AD229
D31B6E7713609222EC88AD13BD745CE175B921697F9D9FF0803559FEA2110988
23531BE96D98F0401D2545E9FACD008B4ADB50EB9F049AABB576738EB12DA190
F7B750529BEE0764347214528AE43CB7EBFD4F38C31CF4FBD46EB44215D6E646
EC32B1031A6A54A6805B7F680B56CED7F1984220443B845A9FBD9CB9C38B9396
02D8F7A3F70B39F1723B8E668827FBD165657C485FF7D48E2C2AA8284ED768B1
555C02AFC9FB543ACFB65DB1A10646D0762B400B49288C480351F7DC67048E5D
A26AC7D0ABD2820C2F4E7B76F2F0D593E7F8D1CB8EAD24B2F8DE2F54038936FB
2D9659D413E08C97C832D3A03EF24ECB073936A0C035ECDD9681A52882BB4E55
C113EB226EDBFA60AF43C7D37311FA695AF97F91EA727C3FD9D0C0217C057987
87881D07CEFE01902B0D0F7D8913B4E954FB295B5ED5498C4A68B73340A25409
4DB0024341A7BA745D8F3DF3DD0D5AB028F2EAA1AF13F4F8F96019FB2822AE4D
7FFB00D18FF44D2B0659D8818C847E21917F8043CBFAD9A3BADDFC68DCCF67E0
FEF88AB76E205570691C6063359CE9DBA2E3ECB7B59435E44A8B4AE46E1C2BDE
A679FF899B2E62D89D132868CCD003AB7AF9961F0943FF5F02016DD6F0563A26
851D5491A897AEC52D74BB6747FB9CD5A633DF53752834D3CE0EB2B7D7775E39
5BA4BAF7F82F0850D4EC408D5FDB7470CD59E8576E72A8186570F0EBCAA0CCCA
D7FE46DAFB0044DB29A8B801321969CD052FD61493FDA21156452D2865572235
B8CEACFD7733CEDCAA991212FC3C15A7E8CA6E083C0034671A4E268BBADA4583
A16C3C57DB5F720871CFA9672BDF5356746638CDD9FD68E308DDAD15D5676372
A863F05EA4BFEEBD5DEDA74B52C8EB0BA716FF6C6468BB98385F009C20BB8434
DAA8EC8FC416BB45F9DB9C98773585EA5E4D316AEAC8CB4182A887EF4B289F0D
3573D61FA865EBB3E287937147C9BE9926DAAAE4C59ACADCFDA1CF32A9E980DC
7946713AA2B67ADE09E2FD2209974B99C3A0363AA5CAE125EF0F3B74E35560D1
6C07063DFA0A742BFAAEBD91144D26AFEB983E71575D89DA575AB19DF8CEFDC0
FA2A5EF2622F879D80738E31D04524CDC4DFD91254F5F7DF55FE68CAE7989878
5FA31D557C86F93742930EB43CE5F45809AC88B5FE9E89C2EFFA64B2ECAD898D
39DB7D202BB69739202BD31EDAA120CE54ED0DE7EAAC5065B4F48C0B7DBD8AD9
FF3B7B5B4A1B7CA0542072597BA50F8F45B3B08141DD5CDEB790D76C36E9CBCA
5A955285C130E0EF728A401986C50D3DEF377CAEF216A5A795DD63F3C6659BBF
4D2971663D0AB84621F15C186C06199CF885D233DE4656E4CCC1AC1A5762BE48
F5FA88A3AA47DFC0FAAD37018CCA129A4897876302C02AD8911B3371DFA6452E
0BAA0519CB64DDE6282787A7F448D78DEE9271F19E6331D554E6829242F1E05A
A1A3BA678F42355A6F1123474D93C05C07B8689FC4885699E4BB766350BA721D
100516CB839EDAEB4DFE011D1947F0D4874EBFFA5673390D853D8277AB6758D6
8E11567ED38212B204347BD00B461544B85F64FA6D6130832DC718E26691AEFC
1DD6435FC6A7C2B91B672FA23D9F875C001E76ED42D71E62DA447AB71A060B51
99BF7899D41F602E326BF53E4F91B77B22E158BA172BE33861E18AAF3A48C72F
9BD37EB716ECD75C6A6CAF0F0FB5F6A73A47FFFB9D6414E7013B7D984B3A18E6
75655F4CAAC54F1F933DE269C0DF2BE55B48962C844CABB7BED489A190D1E853
9853C0DAA181E59ED9410F4D901B9CD2061595FB27C9B1720C97C551826A537F
BE9B5F897B957CDB27ABA4802F0BA02D8DDC0144E7C1BB169635270568E060AD
7BF221339567C68F6B8CD63633DD6BA618557B6798E9F793E6C866B334A71EC2
3B34833BD3B6BF56210B6FFF3953D0944D30855CB73E7A7A981C9CF9174322CC
22362D93433F8D716F159B035A561C376465F9331E5C7BDD1DA502EB95C716BF
DCF80180EE6DC71C01AC6AD353810CA7938D83B174577EF9C645314BAC0C5D26
C1076AA31C8E894713849EB6F8AF8007B3F27A59C82174638FACDEA968C7A123
2104B287170D086BCAD5C7C2BB9C184A5F3F9186E7F3B1D843EB1118F160769E
D9844B47A8A2CC08811B93D94B01FE7AF62D56594BD31845DD8EF67D1D889703
646420B074E222B6426D8AF577A5B7F2B019500E8FBD9E83B2C925BA9BF62903
24C59F30816B248D320852F6F0BC092B0CBD2223900A5A4D8EA5A11699365223
82A3D7D73CEBEDF433870C0523C3C8A7F3AF5DE044750BF9BA8D07C3D70161F0
724055E78899DDF3BCC34D14196B1E24BDDD67D0110B8331410F1DCF9E65E733
8B42FFA0B337AD7CB84CD7CC7795A8F1E7197309DAD0349A9659540C28723810
DAD7CE08EB085D29AC7925CE02513B4E614C0862D035E6AC70E1B1B5F02E969A
DF6CDE36D67EB79A6BB67B5CF26F8C6A61D41E773D3D0004057BF9DE91B80648
FAD40756621200E43834B0CCA28532BB1E7CDD3327289EA1C3C455D8E7D7F669
5055586AD4366A741031698AA060ACD6CBDA8D00D12D8F361B497A5239CBC501
43E098CA65841533DE0242731B79A1A82CFCE9E49B19F5D32E2386B247139DC7
37A0C0E3D0D1237B3FD2E75B2DEB5195839A638DE491FEE467F68D25CA5115B3
81E6D61A9C9A71CD02986992B15F4CAD81E8CD4B2A1E85BE0192A4B722775DB1
D43ED534CE92916843FD101A6FE4D552944258F3184E28421EFBF0F6600EFA1E
7D08A1D454FC01407126D3973FE22CD3AC4F6FBB0AD7B96D842474D1DF235DE8
9D464EF44F2C9297ECBF2840EC61A089DDE23DC9E3DEF6471946061D0DB6701D
0563A3792A1FD51E5460CFA0338DF1F5726862FAF91505153343C3BB0884A7B6
0DAD17058B8E88AA568ED8E38E0955579FE200979E292B3B57E1F7A9FBAE495A
2A25D5A813D1536D5471C3ED727BE7E559B6E54B0C7A64D4A2C86BEC799E6806
C49C1636A77020753AE9AA57C1CCA7866F6543CE1B25AFD261C434D1D4CF4FE9
C907B8468C530A546D701A3B92313C397F0A208ECDFCBEE936D0293C010457BC
056BCA70A7E3B757A8130BF3BC078B17590D62EE62126F8F3B0DFB89AA1D0FA3
717BF3CD52E7FC86C8FE3A9FE76321F3DF1B8D279AD66877E0B05E0220FB8FDF
41ECD551DD326E58FE258D0E268FFFDAE1393586EFD449958C91252156984401
2BABB5ADF93891FC191896A755CBAE3F0F649948253EC51D98A20B1C4150AECE
1B62EDF28AB0B03187728AF15BEF6EBCEDDC19B9F7DB2512B6AC7FE21F478248
CF21986DC483EC4FF27307585A474DAB678B23A7EBCAF98097861710D733B551
0790EB12F5FE80B60089D4C18F187D265E8494A80BDB1FCB3ECD6DE46267C21F
A581E86060A00DF7E387FE4360955D6F814A0B72EC09A99E846384818A44E541
E4E108DFE5E34573DCA40F5946D9266E07CBF681164FEAF332C19BB771979FD6
A842FF6BCEC22ED954560FF7A1971E39FD57F8460A1AEB659C973D52B28D6CA9
2DDED5BE33EEE8268324F6C902D9715E9D5EFF5814A8F3E1BF0B7E35DEF6A9FE
4F0D2A2E9848262290D7F8E5AD77A3AB32CE9C79E9F9F074AB70369ABE28B707
8F57A4D6313458E50D05A1E91DD6435FC6A7C2B91B672FA23D9F875C001E76EC
92FB6934B5368C099B59A7114410C608C749D1B7D49233688B150E779FDD9DB7
3AEEA11615E7DEF726AACE340AD9F2EECA199594CF093FB8D49DAB28DA0EDB94
63FAF413BC1FA14F1FE0237FA942F76F1157480F336F73452C9C15322A392131
FB96C14CCBE65E59BB4D23F82F28E6759E924266ABB0F5AF2002DD17FB094011
08241414A916807F8AFB0BBDB5417E6D852FF038407BC405811993C856601474
FD3DF4947137BDEA68BE33B1C86B31E1EC5E2E7ED6AE24C15111AEE8B0120DD8
E29CC460BCFD5BAC82C941C2774AF399F6E93075A7A0EC5AC289BB9A3C004C5F
FE6777D6E374B40FC2ADE40888C5DC808B63EBED348D07AAF2D7F7A790A0F099
8C80FAD9A265F84D5031EBE0F523F174D1B87F8E5A06CB2F03B396D8F523E783
87EEA92C452CE44D0E6A37CF3696FD8206E691FCCC9FF002209C1C76C4C64695
6668CB64B378A98BA5F5DB1F67DB7096EFB1F419D84A061BF099B8FA36670B16
90CB69F17E9E3BF1E15EDCC29B7701969EE4D07BC78F07D63D7D6E5062055043
0364C88A1DF224DD3EE5110C0D94DAEE6E66D20397C46FEA9B6EF288668FF3ED
3835171FF4288E56438EE91BC7297A8469F567938D322537FA0A8B5CB3E29020
7065992B084D567645EE4D2FC29814CB1D7082661851B3D94D71719C73B320DC
91F4F64B9B942A7CE1109EC7BBE8E5B7AA2CF43FA2AB8EE4213DA7C6C4277079
D25627DCD5E40E3E202D7176934072863EEA862AF354FC6CEB056DA1425749E4
65FAADFA4BF11DD6766C8D058CEB08DBC89FDCFE829432331073236C67785257
36974DCC85E7CAB9173DEBE09BB23B6885F25CDDF3C2DDC16FD131C7F302A2F9
FB65ECCCAD4616959B80FA764F314AC16BB1740C1B9A34534A154E2B04009136
E4115E6073611BE138AEBDDA44E8D1AA9ACBD47097BA31643A74F5D36BD72480
8357D4FD1813801BFDFFEAD8D918A30005C31F177816336B74AF8B9931BEC0C1
8AE73FE1F01FCCC7F5399762D1BC994E94B6179B1A7982129C594986C30DCAB5
11686A2C699385B3CD763CA12281B1A5C2E93E324FF5545D0CE8972C2431411F
730D16480AEE8D2E2DBB374BA8B0C30D5E782C9B7DB4551CB68D0918B52AE133
CC3977DD3448946BD058A0C86C7B26309AD5A80DC8A9A5AB7918FAB070E18406
BEC009B1658A7A314C04B7546244474F513F8F91E616AB868D055C8B11CD6EBF
9453B2F632E36A15B373FF3FAE535328CA8C0544484883A0F02FB4B3781CFF5E
1D1550A313D6A7835FE456A79A38623745FC7BC778B3765D421C915FDA50CF9F
04A95ADF3F80F3C4CE59FAF95451251659F4FAD3B928D141B5A50A3F5E9A303C
99A80E76CF38AA5B4C4F8D3809A6BD6549A52A6AE38C80AFB8C867AF2D69FB1B
0EB44C2CBF703208747659F0C260A6B4FD314B9A936D089493E3B7C7A3BE9AB3
1FFD0D9227EABE61529552E426955F25BD3D4181C84D03DEE36C9F7327962802
9C83A000941FC5F85C754D5132402A0A94EA3D0E37D4DBCD22AF7C60C6CD394D
7C4BC204610D3A92541054C0574496C4587DF29768E6F31E94A1C96D41BCA87F
4236846933F03C778A1A810DCD869D660DC33865B7E7C25A8F933A0E69D24DA2
92AB092D52FAA80F47282D973F48A92193487C2944D35418E9E9DAC3479D3309
DE69137DFBB7833E98F45B76D98F7F115A67578C90CE30A316B6D535855E3BC4
95EBD55052F31B47841D36838D978E70BDDB5116533BAE1B750318362BF85D9A
4FED0550257C16C0F488A11DF9E9251C0554FA532AE3CF6B4CC492912397B565
5117DB31B989EC2622635377629CAD8E550923A84F19126C17DD16A3913F27F1
2C896BDE5C6BFFBCB03C94DFA8ECE2B7374827AE168634FA007F8981ADA54F05
501654D663389C4B5A8891EC5F847FD143664560BC4C5FF77A0D68AABE3A561F
9B19E9E4F465753B660F494EE3BD6829B0EF25EDA2814492016AE68E31049842
FC608B1612C379841BC04CA5D5C9E7B9326E24A0D47AD9A7FC20C44470BA5BFE
CD08F2E9B0678F1C75B4349B10E0C822E7774D2E36B7DC679E91F344E2181C96
31F0E06FD50B7F3208C3AAE0F19541EC977DFB9A5ECCECE193800E322F11492F
E2D4693CDDA5926F4D6643907C7A8A5891F445DD18C42150008FFFDC9DA85E46
A319CEBE22106497041C6BF0D15CEBFD453284869BED4F94E7563A22D9EB3820
144C7EADD2B7564578EE778AB577C5BC1E44C3FA9956F75531F04161B2C21F34
CBE80DE64145C23FC97535A6E4F812454833BEF05947F6414AFB850951A3BE1D
DB72B79483DE686E68A33CE20C97AA3D34B75B9B69C9CC6AA7EE629D85ABD5B7
B3158D44150D249200D31492FDDAF610CC80CD098D1E968B18EE09AF09D593FE
3D0A62701D18826FEC47F867C4FC966D23A12CD634C1FA9AB34BBDD9983E5D44
1DF74B89E58514FE8D5100151D635CECB8442177468B4A69E269481F40D0047B
25617D002082B89E2DD0885CA956529EA49D7B9133782E80CFF57472F27BC0D1
11482C5E2407F0458D28393284DCBDB7835E97EB66928F45EA8146164441267E
54185239D9D66638FDA8BDD4DE1F10153D551CCD732503281837C4897D51AF17
B9562670633526DA154F2FC6BEEBC0DA2A57657BE4BADBA11C52E735C2C981DD
1A51008E09E7576B43654C207F12B1FE9D0800C9DA440F8F4DF5248637C3BC95
98A1164C54C878B02839FBDFB30634D2C908A201142248276B7E4F8924750C83
61FDB1FA328EEC43A235F6F3C221A21FA27814F2945BD12376C76382F3C9C3C1
7519E46F82998324BBD0131B32482D403D243A54E251CEDFA01A8BDE36275E76
D3407C62A81FAFC5A6918FC0E56BDE223615AC1316EA2FAC998F9E08DF976658
5D049BF9B0C16328F8992A1287FBE4016ECACDDC72CCFAC8BEAB0F3CEC7B118C
A007C99ACB3A8CAF71B0FD53F0FBB4B98CDD23C4D7A4185722A4CD1DF2EFBC64
62DCDCF81DB674AF26BD3389F8ACCDF1DCE3D915F0FA21593561B3F793D4ECDF
9B17AC4E1A9871B927051015616FA105CD31AC2704D9CB29783F12C090F7E38C
A5F15406029C0EAA200C1BB9070C7F6833CF29BC0C5CC42B68D8F370F21DC097
78880C3CE4E08BC8EB4F995A09CD0E77B6A97267F4C63D4093BEA8A34B315CEE
932B40ADA36F26410CE158403B4CFB64EB4D80157F57E05097732B4DA0F2F3C2
F479FA651F01F72A57705673E627FDF5A0598054506521227674339C79F366B6
CA9EA7CD06B8D0DA8E969FB1F684291242494E52311C02C8A34C0A5B3C13F380
2AF740BD9C765861A95092B7CED26EF1639CA2DD130E71A587A3935D91E2F1ED
F54D76932130618C8D76D20AC022026C6F2643128B9155F977871CC667463212
4F6F9B939EE1663FD02D1E1D74F22C4DA4143A4BFA7B3D22F58FAC1115AFF937
E1A8502296281BF8389A348484028006F3F3248B5454ED6DC729CC5070524D1D
B08A192A26EBA06EF157958C1BC00554409AD56FE7142D333CD1D23D5C8E17CF
1B43A482C44FE52E57AF48D3E9B3D32C3D557ED2F6F284CBCF8856B2A22E72C0
C525500347775505F87BDCC02101AFF38BA1917A296C2BA59D189CFCA85A1AB4
7D180AE3AB5EDC9A66EB2152A3926D74DA3E0E484D43621E697DAC8CC5B7F6A2
587F0A3ABCD8C3AA3F46E30A2EE663C2CC64E2DA3631AB809AE250FCB0B7661A
99E3BB1BD13565961B1B3760EE57E29C8BE8F4333B259C51DB04F83FB8A8CFF5
EA08B850563F1082F302DF65A337A60C1F7C2E743954A17D26C0DD1FC6719E6D
DFBF4CC6E06F7F4E221AA17F75D36F7194C41BC7659CC291CD5DF9CCDE6DA0FD
3C77D56D063AD44CB7970DD572CD605F5E64FCB19D176C24DBEDD2808DB3D785
BF794EA774CAD2ECA4581BD58ADB6AB154DAE7900B7D1A5831CBBB712BD4433E
492B5FDF3908E6BED58C9765976D71E22D7C32DD6A251141C84EDDAF6793DADC
A8DCD7CC7C04DCA33030F187E88F3A42403FD4606192DB1E65591E8CAC11A84D
FE3F09633B0FDA064321595BE68894E2244B800EA15AF8C16B9B8329E91644DB
1EACF1F12425A26341AA5AC2DCE2E64092DCD8A43E347008B7D5A184688CD0FA
CC7802A28ADB7907E056D20AEC2ADCB43DE6F84089E6E0A57A6AD525B4FB469D
4FDF87EF60080E1EA0527DFB9564EBAFB4292516657B11080A18CE326D18DB4F
C12F7A8E9820207DF26473C9C949A2D6059CF772992C5637092710177BA2E331
993DF752B5F9DA8A06B993088E210C91279AAD5922A3546551F93A06B3BB0227
2B60FFDF4B8A791B5B54E5E9D98BD5B3A86E909F1A18CFBBB502CF3C1C33D64C
241B9F161DCA2420C4E62A6FBB9EAA77C3E1CD4050AFE0CF39A32316087A9435
4D471A4D7A6449D75188F3F600D5FE70576EA42629818DF9894AACCF6FCC5C78
714AE6F776AD12743DC8846D4A70232F0EF82F448559F8CB85DD9909A74AD696
B4E706A3B47E119413DD9556FF4172F1B18271FC2435C354C3F09D46C1354E5F
C1A63D9D5B91BB6B95C298D03B35B604E4DE22C24947C31261DFE88A93AE4E6C
759BB40715E971D4F9F578518E37E431CD2798239CC4C949013F16A197425EE1
20A17F7791554750299F7A6109C5FB6761886F19B5B15D74CB098F56CF1CB341
A140660093A3A260FFABF332DD702AC4030A4AD4B5F9F13F05973139BC1471A2
E5D6D0C62F0ABC86BEFCB1F65AF4CE77AF74BDCD3B48EBBEF3576781FBB7D433
B58368D34E5E37B9E2FFCF9AB319C9F3BCA04911B77B657C0E6ED908335A1687
C92D7BF00C6F8129E347C6489FD4FC798ADB86B0C865CA2BC270E4E404F8A08B
6EA22077FDDCF0DD9D585ABA5B3216B772316E03AFA5A27E6F5EE3F77F4D523A
7A4D01199AFC3C88B0E2AB5FE014A8437745108009D13B449B4A055214DF69D0
218549440B1C5F19476595E964EFC9B18C7002F76150B70E79387F8C338AA7CB
A1F3E799A32B23859A4CDFB52C22ADB4DB30D313BD85B3214F6127B0F5A90B25
E1B529E86B0B4656620B937876139F8A8EC00C8BD6EB20AB66BC1FABC48E4ABE
10D7B7E8693AAD1B25349EC43DA3811A83F1E546C0CB1649868C14720C008F4F
FA8D3075910926C632218410359E389D874F4F719293D0B0EE58BE36458AB3CC
02002C46A704E345E7CBA12017897EACD1FB64C1F829392A430C1CB8E88CFB0C
AD53BA7F20DAE648EE34DC7CEC39CFC55A9505206C3C604F4F02C815605D0AD2
FE07CDA8A9F8F0DD0C048753FD98816588DE9C8A2C78E7C8BA614F66F38F9383
79CAB93ABE05747491570EDB80902B818F3E52B84BF6A1ACA730BA1FA90C0D7F
09B3DD6A5FE918CBF88B2CB98B7D817311B63766ADFB7099864428EA3580F26C
C4D4978813067D64E0DF70541891615BDCBF3B5FFB74AFEB695F8C92EB33721D
D3B41058551019C4E12555C4926B0116F86F88A7E9660AA8253D564A36E96024
8C4168E113B6C0C725E49331DC85507BDC697A1C20A553A349DF9D95D5D24C4B
6B2795D94BDEB015C731EDFD27F3823CA2D05633BAEFF23046DF458000AA7477
BE93D17A85E0519FB0B6C5BDEEBB9554D34547816955434DFCDD0733C148B5A0
52196AB08680F5ECC44BAEB2FC41FBAEBEBDB65521D0010402575DAFFF833C4D
59C1941D6160B8FE78D5C3354C17511541D364CA8C1F27232312DDB771243735
43A2C18439DB2227247B30A41C72B88361E10B8CDCEE93DDCDF5BDEFB5F08872
C77BA070C12B23B2C6FF837473C372E70836D4C5747C4EEB85DCCE9246271769
E060E6EB754F8E89B075418D032D7BD972EA6B859338F8D6BEC3B63C5E9999C0
6B34A79E0D131D233FD3CA93D8F5B1DFDCB271329400CAE5B90560D4FC5A1154
EECD0CDBA01C3098332FD8CE6C0A393AB1BDCB88B84A418C9D3B15FB9ED1330A
B93E9A8D466EDF09418F46892F4FAD459D4943657ADD842FF3D6D1143830B378
A3EEECB91EC67FB176F2ED906086FB7518C7167965813AC101434BE5D692FD50
2589F7B14BEE15894121E8CB7971ED4DBD5A2DF213D85A56B1CA85DEA53ED029
9C1E8516B0C02E9F97305FC7E43A31E0002A2F803A30B1202AB55D0FCB8A5F3E
321815C3C7AC714C3DC89D789252A42CB2F981BFA79544B1A2F756D81ACAE235
A58C64DB60FD25EEDB5A9E09F469071BB0F203F5D8ACB7A816012ECFD7947438
5118652EB37CB7021F80792262A4D2F2AAFBBC879A3A7321FADA299277D8D09E
8CEE8238655AC752A08A6091BF4B9D6AC543B626847B574F60E61F9C0710B5F8
3F74EAFFABC289CDE655EC5D586D483DA69DFBF9E2B6F50F1D8890FDB8C56DD0
6D24DA09F845947871FF414A3BF0C1B89EBBF3860AF123D485799661E8A45A88
8FC99EBDA38E539D9345F4B58F6B8E3E370C11DFCA06C381C6793D5574AF08AE
5A4FC89880D4A8DB59D7952F55C1F6110A42D0F70DAB4D6B7E2187A3BF218A62
F3B4198881C0D98302B116A463934A5A28E8EE8C15F8C89E5E3FA70B901CD5D2
C49144778CFFF1D5B63E099BE878F99C34FA15687F78572C5BEBFDDD80971DE3
920CC6E5D47ECED72963406AB79426A14A17B3118E50A9DDDA6C8BE52B95ECCF
029A6B18A512D30CEB0B6ADF80F97EB95E310182F66B217FD6CC9B23CD9DBB08
CE4B28C3754678266A6A1133D8151A000D95E13EEBAD4F2156298B976E43EB00
1FA13E44683DC6CCED04122D1FFF56BCCBB9A346307E3BD497D7F1E2F51B557F
EB6AA32E84F432B9B5D24ED5D673E26A25811D4BCA9D693EF8ABE780991240E0
27E9A5005DF162A28E497C231A0B0AACA773466D924AC2337BEB55ADB1106E0F
F4863C43F7B4CC4CE5008B883EE21D9BD24B48E4D1E03E7378C05B62DC04A3C3
61DAF3A67012298FFD77760AA9C0611FED9B670604C24AF36B6E54543B411485
5461C83881CDF494C2B43135E8062A9F9101ADD125A32195B8CB98C9B19235FA
FF7822685D87B84ECF255178D2D2C4B7F7857E7F5572D3BE2154C076B263342E
8A6977987E6EFB3DD2AF1E6F9CB166C25A47C770E62C69C131FF3870C42B68B1
0C4961AE98EE106D34CD0D4E15BC0A018DED92CC65DA0075E384D92FF2BFB06C
A814AD933409C99883AA5D858AD143961AB8AA828AE35FDF411CDB247C03750F
C0A519E36BDCAF2DEBB2EE0FD69336E7070E3EF345D6D1EDF0B88D08486EACAA
CC508B9D267C79A91646478075E259EFC03C3504BDBFA2B4520DD6104F783317
388D31B2DAD1BDD5B3ECD980DC8CB9A9D9491DF42A8678BEB35D372AA9F49EB5
0246E1D3C022B0C181F21093450D19267E3515B8A1080BD883DE8D9798D30A9E
DE6936EA527F5BB234A8CCF2825E654D39A6BAF9C116EACD0849C62658655B0E
080F0782EA3B1142C76B364D2D85AF83BDA04D57515EB1FD87B119E547047F43
E9CCDE1C1F8645DA03EA702EC5D6CE35E7D5460EF05B1A5136CF2C1DDEB46F73
8CD632EACDC90C78A145838224866EA5C1299D94203D107EA052190509727D83
85E5F898B7E28470245FF4482B8A2A6094E407A823BEB4FDBC9149EF33A77FFB
B7146C2E8C4A133F7EE497B6EACE17516DCADD90525F5041C4CDFA9AB34BBDD9
983E5D441DF74B89E58514FE8D505A1638BA2C25389A4A4289945B806CC14F19
8DBA7A8AE3C9738AFF44731B6DB8007749D1B605F397413DF96CBC1E7C80FE52
EE1275B05D19E6DC95D93914B713820CA0517B8C2E43E8716526220CE629452D
507C04521B474F40D8A1DC5BB14E21CA654D970958EECCF947B560471E2B661F
9D677552B91A9CF74F2A195EAEEEDA16C981DBA60EAB988A1C23C7B8940F5D25
68FCC3524F6F89EB6871C1BC5F3C7795791EC9AFABB609F395A7A9484BC96D0B
47751DFC2986440D716CFD5D2E9A57D84846762A320128723810DAD7CE08EB08
5D29AC7925CE02513B4842EB1E9D4875A753BEC3BF97265F7C2DB58B320496C4
4192E544643B9C3417305B2906D26756132ABB51B16AD09C775D6F86C4640222
DC394CB7CAB104F32FF3156173DE48D766399192B5E968035E7DE5E0350A005E
4C5E642AA0C21706A33CCB741E91304FA287688FF87FBAA13C3B3D9E96E3E096
12F99B100345D53EDC134D23DCAB6BD08ABE642223D82A657245105757BE84B5
99C63F2B0325B83BF619817A00CFE9FC5B0A0FDF982B147D2294ABCC25D34DEB
46C4AD0D21BFC3A9A11405B0873D4E91B0F787067554D464306A44A49AF8095E
431F91B8EA995AC6C549CEC434910D8AEAA207BEB7A8B227217A2572029B1D1B
86B55D62ACB72C877AA2E3437B035F7E7ED3A541B6CFD10F1A79C610ADE46912
115330743692D0DA147586A859D490BD6B1BFE492563525B99F0A8D519F3DD43
0BCC3E3E57052444394E46201B34B583A55D565EE540EB9657AC7312FAC9897F
56ED09E02AA857C6FF5F8E402EC24D46F92C99498946CAB6DED8F5DF0540063E
98DF31F529B5CCE7E07337D8C589AD71BD8F24699F277E4547CE7E8B4444F14C
80FCC7FA5791A50EDE1850046FB56C0E793DADEE301792A7EF4CE1047C153C87
C51A4B39BAD23DA4DC7FC3B4C147A3CA6B939B4B19E81AB5B11C7C817FDF26B9
5211DDA7C94F44637ED9DB8797D2DF5E6D7A8CDD807B3CE00CC05F6CA1D87A1C
83530D8C784A1FC3204748B39BBE76D32933BFB3185C3972FFB69493300C455A
EEB30CDD6E6108747FD778A0042C6E3B4244948F1B06A1B8A026B3CA477D4CC6
12D0DC8CFFB2DCBC8B1A8430F7C7563E306B853097B47852B119B42F57BA9A8D
93E92CCC167DB36D72585E112E6E8CBD8C816E92F88027568E1C088F279AFE03
1CE20930C273EA5AD065F5AFDBCE03E88F208A05B41A2507A6E6908560B2236D
329FABA01826377C35067A7C6785ECE0C669C03CB875F999FE0159797AF521C0
6B9CA7915AC36C9EE0852CFAAF230E92948EEF95C118FA39AE58F8CE7B0D7EEF
59EEF91AC758803D0E4B73F10FFD9EECC0C4A801EEFB0932FD5E0D205C19C8C8
E8A46BCDE4D72920AE03699B75B6ABFCA418241E9B027E28104D22A3702E2B9E
F6D164CB498F4A7ABD9CF59BBDB7B721D7440302D3F5788779FB6154D819C083
EC14CED56021B719D487D49C3D836D47D72E3B76081E2BB65A9799C14504DD4E
19C5D371BE546C3286EE772322BDA67D447EE7C7648F82B339C1351E66B47C85
4C59D6DF7BC4B1B15D32EE1442D960EF520B1C97FA7431055B6BB25DE7DECADD
E32B536BCD546709A5DCC6E9C1C32DC043D28239E5B6F2CCDFEB403080EAADE2
C215DFC548BAAC67797FCB1530DD6EDD1689FD3081EF38C1F9942BFC3262E057
CE26031D846064A6082D5C5ACFEE84BE1DAA388C29ED456ECDE57C81CF06575D
66FD8EEF218CEA7E07BA3FB71E41E67E4889F953706FC8A5069768FE8FB5A0FD
27E00201FFED0EB0C511389EA07B5CF1708760FD26B48D0190E9F3C691BB581A
978506DA0394EFEDB077CBBFC4AC6F6FE7A374
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFB8DD9B92CCD508A09171BC12C8ACA32FECEB20
7CAA1C2C81ED075E3EA7E712D95FC612CF97F3402658E90924C75CA278243C52
D4E02E8224F197E555143D563819EB1ADD2248C18E02E18FE3DCF624E37ED993
3C7DAB05959E694040B7EF5F92D80AEAC2CF58EC01BD61D7CB962C4EA678C5C0
62593DE423E11AF90918CFC6E1E8F9DA428296FF0C92CA794AFBE20B44A2BE90
C36DA2687DCB7DBA40F6B99E51650B25F4E51941B49774F8273B5E98306C87E5
3A03E6B35B82A143A76D58265254C13E6E1A9D0DB17A1D9294C759AEDDA6D4E5
CB498912E3AC15AF88E6309CB00AA35170DBDDB43739D05EECE15112FADEAFA8
DF7BB6157C5374FE3D6DE742A6980C8C55A9DD737F2069BAABD6F1B8A83AE84F
8ECCECD0CDFA74FD3C4FA486433D06974C660A27F619ABC0E178D15C8C217270
1E6C1493BDCD772A1B9A9CB8C1205F7896343973FBB99481B1A6B865510896B0
133C9D9C98E813E0B142027A215FC75181A42E65C3E1CF5269B00E31FB47B4F7
7FD95A823A176D8387CA420A441980D3E866604325998BF88E4D0A27D4DE5AB3
F44DF52033A1EE28195614165597150B847315C78C3871F7DF0D5B8BBD40BB58
C6F12D16BCB3BE5B4EB51671AE9357176D5AC14505504C43A33EA29CBE2AB98C
D0305DD935D8F0F5EE3205B6BA139A251BCF348F2A19EDEBB709068CE066960D
6D0E7801038F92981250C3BDD77F02C296953F4FE2ADEEEE96C2499E4D5C40DE
EFB9EEC8853BB3E2BAED185D6B4A80C1BFA827E4F15E623A96FA4C467940BECA
B15E072F4D80E6FA1492BDE59F46CA026F44D74B0536463124DFF7ACBDE3E03F
7063896D3B578B229735564F4BD7CF18486E33C6AD14424873AC44919FAAE46F
12CC16254F52A26FE47FE41504D3E851A066522DD56FAD7828E5E203F328AD95
5AB433987B2296EB3B524700CCC455A521EFDAB11378FA57CAB556A4F4B23D7B
C51D926CA86263840FFCC3BAF798B72E5EE24715E42D9D1AFFF7AACCB3BE5EF6
3B1C4E79B49A3CDF145253BD827ADB43D157A1BDFCB3233B9397EA3C8B3217E2
26202117CFBE3DE2C6DBFB0BB25BB138BCB5DEBDD171A3100D4D69D8A56566C0
FA3EAC58EBE319E08383B6A269D928DD94CE748AC1F0E99EB86D800AAC284813
B298DD1D7EF648B69F693C23EA484E5EF04ABA445FF958E4CA098C9D022FF497
44F3F1DD4AEB615ADAD672C6BE223DDDA48E95A221C8EAA6415537EFF572CA73
E4E558E2B016B13DD10CA06A91925B8F035FFA5B7481050ED9EF7A99E3FE103A
B285C96ED14BF085FBF50AF7CF2D153881B994A7A8C7FF2F25AF4EC556835774
B08B04CBF20D471B7C228958E96587810AC9401E1D5ADE97B6CE7BE0CC90B884
3B28FEB56250D8743AAD7F2CAD78D6F32E558B510C0C2730F09ECB07AFDE1428
7A32E1F9046A37CDCD838855DA828AD50EB703E99F0C33737F64E650B2FBCD9B
1B2D63BF87271B5DC4615D281B73F4DA92823A4FD666C4B19E111895943C6CE5
4E4990F54783F3F1233322E5408B2B3F92ECCD384633B1CFBE950D0C420E2AAD
B5AC6F537AA03AB6FD0D5BF4C9BC3213A5BA19D27370EC9913D2BBB6905704CF
35D7BF8C3CB2AFBE3095EC52D65125D8A189FBED43BFD6030926C71F72B7AFBE
A340F4B45490CE22EF906079DDD08FF521506BC85D071A3AEC9EE2CFAD51447F
0D660BF7CFF7EBC4ABAA221687F68326E6C59A9E0A045BB02C811F1ED8DD8DDA
03C5C83BE1137FB6294E5747AF7A96E75454B63BC429AB3DBEABAA2246EAE4A9
A7AE975D99A4FDA955E7DC0912EAC8754AE29EAE5AC87616C0C26855C1EFBEA0
26619E1EBB71D61651F11B54FCE233A82D9A5EDE1D4BF32F18FC16511464CBB7
91F2C16A1FDBBEE77D33518EE97ED355DB2C0144009B04A059F61FB93A4883C6
6AB586FF1FD4C383E2785EAD36F41274FB0BFF9A68F1BE88C20A59AE40E7A7DC
F577F22D21E2C2BED78D91B65AB541047FDE9483B73A3BAC9478563AFE494185
D25C6DC3DB8063860692D8A40F41E91238E4D55F9D94C41FD7DFBA480BACE78D
D43DB1BC2E1EBC76FBE5E0F97FC9B58B6A605314F854A16AC3011DA8D594A225
8ACC3A750E94CFD5C2D2ABD635DA7FFE17B25DC016D28FAA91548361B38A729C
F1E6DF63A016E3F3C52BE2AE157BA062086CAF2EA14B0C75E8E5D87BFFD7DA27
9097919A2254314FCF21D618A11C8FE5D2AA46A067EF4F5587DDE44F3238540F
57899B311D56DF8A026EFA8516683FA3A30649486C002BFB9868A917759E5575
05A1366EEAC1142E6E43E7C50DD0AF367B35AB90336BFCE45F11C6189F1CC15C
FF852770A2ECB224F1772C9C9632A517073D4E8E1C205588BDD6DB6982296870
6EB94D1720FB2879E596D3A7EF942CAF0F8F45B3B08141DD5CDEB790D76C36E9
CBCA5A906524C5E3561BDFF89136385827B7980C2FE0ACB1CDB94C1913F5F6C7
57234D7EDD3618CD33389BB0DED7CD91D84775A03BD1F7B9955547F2B0BBA260
06FD404F6505105669122D86E83B18D074889EBE0E123F9DFAC168E7DF3B43FC
B4C9DF1736074582183309AE0C45B277F6083ACC004F7639D008DF75543A50B6
DEA5B602272B60FFDF4B8A791B5B54E5E9D98BD5B3A862CCEA398F97AE8DC814
63B6EB76250CDBE461FEC4CB2F1BF319283A82E3B86F6FA538D46C3153553EBC
B29853A04549D63F4E170943183BD711FF15F8D6E48EAD156AB20FAEFA93C3F0
AF2E8DD9CB93AFEBDCF50001F5A56EDC36300057302C91CE7C9B35D08E6D3C3D
F11ED0A79F0D71E2D065DD325386F68A54730ACFB5FDBF4A734C8CC44B46287F
74F5DA256CB6706525A3FD5B096B2E77E6A66024E1ABF70BEEF454F39D7AD4B5
AE665BA557B10EC7B0BB063B45BAD12793CC7A3BCF98D4DFF1F7E6160CC2B113
F5C9898268DB6F37D910BDCBA6E770EED78A968F1DCCC3C6A7595EBD682B2A58
7F383888BADCA005172D3361DFA66ABD86A8CDF351FD697E94A2210FA2B9C50D
F592E162946C5DC81F282348C2BE861BA0BEA5DA569168D580E93F82F7477A18
0FF3D6F876D5E3064BB81E685F833072010FFE6F743B14204876579A1A5E9370
20DB98C052BFC0B40FBFCA767F3B1EEA76B1520772E16D18A76B2B182FE2035F
15CEACC47B532E2A0CD7BD2B15FBF7C880B1EA553450E58790B89A577AC441F7
1ED51F585E7B1E7421871F8648C187E542A45CD9DF121101DB210759A60DCAE1
4ED8EF6FCC319428780C7040770E0A1C7A04277C8B701D81BF0951FDC6C23865
7A7D1B2B345EAC9527FF3A91D6EFF971666FDD84471D287F1C04B479CA4C0234
D36FF51BACC428CC989ADD61913D31D2F85117141196B0C9FAE3391095782AFC
3D84143127B8C830DE3CD408714E8E7C016ED719D6A4D045FA24AD829426C804
1D54CCECD79A73BFB38AE77E4271245E983C3FBBD93CD89B84F14D18A2C653EF
52DFD5BD5FA826ACE759CF93D555CDC7F4D5012C1B23E483317E848D429AD7D4
1820859189DD2064241C0568E46CEE6FD265E717DFB43C5F36ED01D8955E11C5
3CA69AFD141242589D049B32CA989799DBB9A1D9170D6DC4BE37356C0EB3F526
C5ABDA4B5DD9ED6E3482283ACB506A2D6812D4676F3D8EC8121E11712C9DB2DD
051A85066E4C8A831785480F24B9D299B81268F3A0B7F152A9EACD5E0E0D21CD
6BEDD0F76F91C1F91EF913AAECD09865679DE5E7CDFD746C4C1928DA421CAE13
2B0C35181C92FDD6246567D3300CDA5C16818D99B6F3E211E760F8C31A12F21A
8962CC7323DCE45E6127B0F5A90B25E1B554D286BB387F692A008571333A6222
51E57BAFE12AFE5FE9062082B89E2DD0885C551A9EF849D50BC4B568C72D3FE0
08DF3211F432F45F8E49B96021DD868D5D0C3904BD2C5E531A6785E63F168DC5
64A9F80B8C7549D22F30A448F1A2A7AB99E3F8F66E8C07CC430D70EB815B1988
90C950FF79058FA153D1963D180EF18D90A8CA521577DC386FFEB276E5959AF5
B321D1550C15C0E4AD2245D110C2485C08BEDC01A42CBE52B47D021A4F8313E4
3F6C2F11BCA28310F727F1FA7FC1DFB199C117A4B48B3B60A98EA819BCA167A3
9F0EF60D11E54B7BA0471056B021C03FB2A2D224461A41C515735F1718E0BB56
06C2C61197C0E5F91561F49EABC5B7123EC9D0708FB4A2CCE7CA5591627DBB33
E8157C8B95CB08CD8DA62984A530E34A25CD53F56D26A7A36E0C949A0B0717A4
9088AA5312A61D3CFE58085B97DF00EEC788A8C947ACA5F7692E9CF8CA1E22A6
DBA59E5AC4081F6E515B1664C76851381D092D848938782002AEB7F969D2AA73
5EBA4E9C05D6F2384A9A953CFCE94364C63C50550DA2D59EFC52B1212AB08A2D
A52D5BD2F0B2A939C42476B611F1F52A0405CEDD25BBA16E596FABF669E73CEE
F4E336DCF9F08447486CB114853CA1BF1C54B28F3591C1B05ACF3D46952B48D8
F3A2B9511EBD13E6A5D5E64C41B6BD1F16D657CAB4F2243A03528359F9CA0BC7
FD7E77265441DBB89C9816D487DDD404831D268447DB51CDC11FBC541426DF0A
3C243A830BE79F5E0824AFB010DC809783AB31CB4CDE5B78624A445AEEC02EFF
10D47E585D0ADDEC4F95C3AADE85C77DAE71C9C8EDA1C1E01FED1A686EAFE3CB
12F1E7D2FCEC7F122A635F387049A0C359218F5268C9A28B0AE5E0988B7420FB
22C933BF332854D8340CEB9374CB762FE563F9F0EBEFE83A9B6EEA28D32B766A
3F7301AC5B13C3896CC1FA0CEFC0CF1861AFE3978C19893E4A1B722A021A2E0B
288ADE88E101BAB5F27882399A8BB9FB8515B293590FD847FF5C6B8AB3C09203
02DECDF87278C13FCFF6B29317A5EF8237CA9D177321F9F6B14AF21276B0F2BA
250159416AF8C5C5D1F58D60E519AAD9DC63574D9980BBEA2A075D1D40A984E6
E75ABA2F4AF1A7D59300C44EF4490BEBA2BE7ABC199BFE58FA66F52AD7C5ED80
B4481C0E96D643E1B551EEC3CE13B1FEC8E6F0E4C60912791EA4545FE6AE3B89
F87E115A5385560A2465A0565E91E89D1335338DDC277E410101A5F6DEDA4810
22EA9EABD50EBA3FEE1B5E52CAB31F8CBFE69EEF40ED1A5A247FA60A89A2EF6A
B95CAE1FB11951369F86CE048F4C870A446EB3E06BFDEF95D17AECAE7A4B9C06
406748B63B0C6D53B5874942C33114CCADB2BB3EC3CAA2716A7278DA0E93A283
E9D33ACC84F0E4906E246880AC7D1EE6F3CCA5C3684BB5759263598BC99E332E
CB9F2D773A6B058826ED2E56C67571DB18159D04C5AAF242059AA51DD7FF7C2F
17F3DB00215B51A9B57DF48DF35E8E6494D8126EEE53265978FBBF6138BF547E
F45B3D8111AE4E0CBFCF1D5B4E0E75F594B6592CE2FEB5D5F237E2ACC5B456C3
B196F1210E5DB8E0E6CFE66CE1B4C401B6E1BF9E9308107E3B1518052EBCC0DA
F5E74341B83BE025EE14F3FD8F77D0AE3490C3D519D0E8EEA22F43C572873A34
7CA8EDC2BDF4ED860DAF510C5EF83D1C082F1869429B0A2626B632183FFB39E0
BFE3DF69B3BDFEDA4AA2F15003996D966AE659680FCAC8282CA19A33F4F18794
570C0036D413CD4310E0E73B2AF87CF933F558E4668C6A0E954FBBFFE4839679
D889120AA1307D70D3A398A33A4BBBB1AAE1D20392FF027EC85A5770A26A3F24
A016B9C073816A647B119CDFC852AE6C537C780E4DDD73C0C61C54E8B5847497
338CE30CADE1C5BF81ED48361530BFB1063DA60A32F061B87B6C7379BBF8DF0C
3F7F289A4F90A316FA6A70101916481D2CA853A5FC593587DB2DF74C7D6F9BF7
EA521607C9807ABD8B5F2A41D9D60E8E244F53160F751129AF903A2071B3E192
8C721690E46D14571DEEFE31C75DE5DBADDAE7385F3D5F62F61F9F4B037D2067
3A495A6B0855EB9407F5280FE5690CC3454ACF6AA7938E3F656986B6487398FB
0CC35C26E83223783E1B3D8C1586F92849EFE0780FF6C55376344C97C560E015
86477D95FC6E9D36A82FD22FA214D45FB1BDCB0EE4A8E1C6763117EED34F871C
1D643ECB4D7570F70D2BBA4A565AAA955C4952C7F4E58AE2D4073F312A8B3CC3
ECC121A4872C7A2E643F42D81DC9CF923FB543C420F7ACBDE3E03F7063896D3B
578B21EB0291990C201FA4DDF49EE7703D9DFE30FC3F11D35785A0784CCEB771
D22781C30E5969EE3011690DCCB627837D34B040A99FBA99942BD86CE4B46FF5
C69BABCA7A30FCF00A0A3C2A83A328B249EBF2C31AEA9D19FABD50BDCB79605C
ED53147A5A50D0C160A05FE5C50204E88258334A2A44CA18B10CDD9DED32A96D
F332C5E4270C9C6531C9A04CDB15B160C3E2B285BBCFE14C06C49018566069FA
2B432F29B522FD421A10185A9F60E43610FC34732EDF4854AA899ECE4676D80F
8AAA5305D162D03F226B3E84C9326505FC5EF2B72D3827FEB4C8238E7DC2D557
2D36996DEB087871070082410933B8B6339B610660016E65FFE66DE483011A4F
305AB1796BF596B2722962504601A8834048C2F40563527AC4DB5221EEF18618
8FADD39FC8C589974C55513AE70589392CB5599C78917D3BBF98FA774E9941C9
42A3DEF853FD48FDC9E2F2A7E0078A78188751402F55C38E0CA06E41B1EA4D1D
24096E5BA716237FFD7A58EA0C7A39DEAAFF74F3865CBD9DF013FDB1A20E03DF
07E27D18847771F3A1E788724EE049DE4D4F14D0F503064F1C78C7A6DE3181A8
39528F7AFC05E74351EBA5A9BC77AB4E4D29D400D9F6C5A17C3501FD30953CFB
21EB332B423034CF5D6DA93D934D5C58DF30AACF8030CAD26310FA1CF769F4A2
A6DD033D6A0D689ADDAC4F4847986A6834DC9E5533C5E91796B88517647E7D58
9D06D3FAD451B9C70A1870543B57FC8ABFFF431F057F579C8A4DD8D901A5B598
D721639E2A82FC866ABBF57054887C1A67A03BD63D38DAAB64D6298026C4074B
88AB7BBB73A8C475477E1E085902458C96E9107070F712E963DF69E65809B7A1
A57F9CC512BDC51EF254958403311E5B13D4214E6B52B9F5684AD99C6B52980A
98DE1E58DB4166E6EA59A4BD30F90835BB5715353EBF1BC9531350CBBFEB1D3D
C912996C5EE1FE8CB7B7F400E8ECD4750BA2C340B265B989E10F811FFAADAB3C
186FE6D87B525262C2FF53F988217032655A2EC18431EBA23790D8765A6AFCE8
4540487C1D89F392326EBC0612A0527DFB9564EBAF3E1D07551EDF5DCA5E27FD
08DD466BBA9651272DB7C1C5F1C125DCE87E866DF89959D51C64C7A1E697B5E0
C1A47674E71F20739BC4C5106C4527DE148B31E0F553FE1D4569EE604CC50026
FD0FA59A0D93F91021E7A2A4339CE684EC5CA72F9AEA4E0604D3A33EE2CBFBDA
1D46AE862D0CA2DF9EDEC5A3196E9B6C6FA4B7408F85F5C6069BF57BB3E185C9
9C45010F8767C9B877A8D7AD7FAE19BEFAABFFACF15B3DDB06C4D7E655038813
61091F0E4F77DA411E48346D2C00518ABADDEA6ECD7A1713DE7AD5B63E9A0D43
B692C3529814C334576810697A6DECC9F689CE25B3C64F0A8FE98AD94A97AEDA
DF621368DD7980ED81BD9DDA18158C7F8B0BF0F3B22DA67E7EC571ADC7C212B1
C239D2D841A976A9CC1A12AED614B2CD0995541EF6880FFC65ACCB6CDFCBAD9E
A901794AB36126A199A07A37050E1B6A6C1F554FD4170A0A88E0F772699FDFB1
D311AF8DF74D54DDF7FBD46D78D457CD1912F93210F980E2DCA88ACE524159B4
902DAD7B8E6ABB9062310BE7749D4A12312900526B412117FA7BC81CA4B50CBA
D741F9A2B7D874CF10A9960CA9559D44949A9023452DF54E541C124959844CB6
6C168D3636E4E4CF454DC4F17115F8F560105DCA9D58467BAFD6F42DEA149D44
C84A2FFD5C415AEEAC673FD6B94354DAAA29F26C04F9CA7779F50154666E6B6D
A2E75BA9995538EADAB74D3DCF35CE7CABC8D461A4B9064D01DD620E7F7D63E8
14FFA7D512A5AA7049E53B170C19D0071038D64FE15E5D2A5BE446EE0AF773E6
58B5B785D2AB6863AA16D6C4C82EE4AF7AAD7E5E6DF4EA110AB03B0C896B05D2
E06F3512C764B686FB563FEEE3AC3C9907BB7B683009C74D666CAE5930FD5882
44C8C228D93F3C1D90089268E6CF4305749440837752194C8DC929C750FBF254
5C75AC189ABAC4D58ADAC3F269292AF9CF49F3E712EC33B15C0934710D67B464
A37D44304763A8DBD95933B9929DB4DD650B6C4AAA9B0461A8F29265127E640D
6D43C2E0831CC5C99411E33421EFEB23121A088ED33D3C48632CACC65EE792DB
65D856CB17517DF95D8D5E51D994BACE39AC902E2001F7717EC15F6E5BA686EB
8295A282705BF1414AA87E17B6C4A5FC5B4DEECAFD111614267B7A44683D07E3
7FE59F2F762D2D4B60D7A3E379BF000C72C3891E4D22B395596AA44B23DBC567
74425595BC5477D01B514C17ABB5FC4FF700581F8179E4B7182CCA68F8B35F57
AA77C971250B5F624689BD1D5647A80038419AABAC1F233E8A6B9178374C15A4
10AC5AC35FCB375E20BD3D283BE2AF9660AD3BCC2FB48992BA917D5B91FCFC9C
ADE032280F7F22CFC9A04CDB15B160C3E2B285BBCFE14C06C4901855BCDE536C
922E5D54C8528E8A4BEB8FAB9005788A5B02B0865D7EE20EA7A111A443494EE0
E87098E09AD2608CE0F595A9296669B1AC6FBCD623AB4AF6DE5CA80F9098F27A
F8DA2355A2BCA9632B90ACB9D965245EFCAD2144B5DAAC1C4D770CFE91A1F649
D760C132FD77024F7A0998FA567040DCD5C54B9234618410808685806BDBC527
0178259B56DFFC008CCA4106A9AF77D72A0D2ED22E35F5E74BB27AF07B164374
998F867ABA7A5DFD196AC2732183DC8E01E4559A9C3DD8F6F3795F08AB34397B
53201A1855A83B0B422A7C066A6992A50A7F4E244DE44F18FE9565A57BDAE583
7FF6A42C2109AFC9099E4956A2D236FED2829E4EFAE3C6BAD0D1A6F6A0D4B69B
DA5F6825733B48FADB06F9C8BEB8E15BF915DFEC70936E6A2C452093DBB11ED6
C79EB3FE52DF39D6462290160E96636EAAB676E725FEAC6A3BE038A7FE70CE5A
A279EBB065478C5A8B6C54F049163A14EF447D7E09A12CFDCAE0432930CFC34E
F7025BEDE9A0B810C0D8253B244EE74C47F8B20547A2A7C46A5197A556E05CC4
60DA5FF8BAA066043F44D1AF32F065752EE4D03A6FCEC59387A057AA11C9B137
D6546E01530346CD9F59A3E70196ED37E6BE3262D1AFBA8238ADAED4B28FBE93
2F21EE27EFD9F1AC67DE5494CA7A44222AE28B28136BCC6076843D91DA002292
A625FA13608A4BFD8AF3B367BF5463C5A1C471B6B23D2BD6DD093511F823E75A
D49B542D94C7B4BC978918CEB97DF3914557776C43AC4D3F59760C622775FC32
19A3777E7FAC035ABD6CF8C21AE4F13297489BC1F608A41F7B855EB545252ADF
459B916012CECABF4975CD0B91EDFB3C7726F68EA7F9EC08FF9C9A15DF79C503
6C5C4134BF7FC440F81A5863E34F4617C6207C8AAA975F9D6597FD4A9786297B
92BA7E5CF1C6CDFE4C692AE1493E31A31DB40E94AD39AC3CFDB7D0868A257173
ED0D30EB6BAE282BC211311744B77AEBA51AFEEA2CC0E957EC88D6721CAC7A75
E7CA21A9A5236071D9AFDA2C6909B9FA2B4854E95482E00453A5FFE1240185ED
EE7E5BB03EFD1554FB8106CCC215F8DC9508220044643405C48F53A26455FE61
FC14D778BBD955C2F334AC79C6BDB6A46D666F09C8F839873C9D1ADE3C1E4BA1
EB8855BBFECA191D4B80212DEA03565001FBDAF0D485BADEEDCC18657062F36E
BAE129B0EE9870EB131364BF87E664443997140F215A1D3F36812BDBF5DEBD41
3F235C953CC25E752772980E67CA356541D058D79F8D4191493A350748D01CB5
BAAD873A80078D9EE4C311EF9941A1871225866E12E2B87190DE97046FE3179B
50B077DFD0DD1901FB57909918D07EA7645BAE0EAA178D11BE7F34711A204432
DA217576D9871EC049E192338977159D77AC6BF76682B29B82D49241BA393E2D
595F3A3E6DB94D42D2EF8BFB8514BF6888BF553E034ED8DC99FE33F7A05469EE
84164E7DA8ED1557A30E99437B17993C173D78CA380FA824540B79150E4DAFF5
99CA0F4BA97D0CB89E736FAF9F8379DD1269291669166560C25E80658F0CD842
A0503F8EF5442C290FABA3A7DC38E506B7B19AC38E4873F69C5F96D2A0373BDE
4765BD9116C0E58457A66912291DAA0915E7D640105F381E360CDC69EB0AFCE8
24D6275ABBA8F5B93733B9276E3382F55F8E9FF435AFF83A7BFEF9BEEC854EC9
12ABB859482B634B53B9CB0C6844A3B103F090158F1A41624B4D6B0C68C02645
8DF297F410F90CA7DD41C4F4F4942666E17995D78FD99C5784B2B7C7C509E9B9
3BCC2935CF851AC7F70A162DAFE55AD7817AA62773CE160F630FD001E65FB05B
53E1B9BDC776BFBE74BBC7DD92D941DD6212B04E814C13706AFDA1D383F306ED
42A31C12817DF68EA3E2412F42D4837893D2BF2016CF8F004D6D37C02E01A588
0B683118A3A2C7C7355F5E45FB504F626A4AE875DA179D9AEE28C7CF7AD74AB7
15DD9CFAA477132F852D8A6D5D8356EDE7486983FCC401956CFF71FF5FB1884D
FCB9528D863A9AB484C68F70D26C4A6F3BE01F9468110AAB2BC8367165168ADF
3CF3D067042F1120EC56CE9FF460F8BEF92A06200CCC9E6F35297BBB15D3636F
B9D3B733B52E7E4D553769823BE18EB50FBAD26EB6588AB3E09FFAAA4EFBF1D0
D67991789F4D7073936C6F0C5C2EE33F17D3A4E0A77683212C8FAA6224714534
463F25D7CB28E1C3E568D0E8F5DD1D4F0873D72F0059E35DFEF5A8F444C41D30
0E540D537239AEE0E42C2BB3C481C676B3BB029368632768C2988B915E5C53B6
2DB57C978E6350831D98BA1EB061AB5868385D964BF91D608F98FC3D68A453F4
BD22339E88CAC822980C570758CE347F60D3830085F5B2B4D380F11A63AC1E72
21C0F9B128B9B12D53E262E7B26B484955D1156A683C6F54891B2C02490D0C06
B8CDF38105C15DE2FD03F0DC8DE3F6DE36A9BE39D7F0E0E5A2CAC0DAFBC40857
A458BB12F12E599C7E98FA24B3A19D9FBA34DD2E646E8C1AB371BA0BA4C3FC5B
8B10AC5362EFE6A4271F2B6B4A66F404114D9A5A4BE0615A047B77289CD1998D
457FBB06717FC200F6039D043FB5759B9FDFCCEF0A928C3C79964A84D2323AC8
44A204BD9197E14F5CB63D98FF4AEB14879176CD908547BAB0BF4E835461403B
9C00A983BEE3825097E3E048679849A829F4171A1515A6C5DB9081D93480E431
C10BB4D94A38E4E2071E750A972AB443FF467F2A98E3E7E08AA5E529377C0CD1
D0C11221AA26C182E218563A89AA2D11DEAA3714D0DAD54DC3528436EFFB5061
2695EFAFBC424FC5CFDA2EA2EE5BA19AC90D657A1FA6F234C5C1E6AB854152E6
75C1476AD160D15BA7307D2B1B27D50B5F8E93AE8BF9453BBE8FD563B4663B33
F9C4FF74B7425C2118FE177FD6094EC7065BED423CE1DB6D9AA6689BBE293616
A6176B8BD6BC657911886DAC942BDE41DF98CA31E9E1558179B371871E9EA793
8E595F3FA66C8F36F2FA4550F81E41D6E57F80881B3CF95D676BBFD7134114B9
0B48761BBC79372BE821B75044E54A8AC97B3EB2FF024BFD60C0AD7FDEDB23C8
05F2719DC6484CD39D18A81F7389979EF408D778E57338EA07D54B007D7DEB88
54FDFCAF09575BF519FC937533335860CD26C909CAA830479D9CC07B5D60680A
6B461086C529C2BF2C24F464D9A323E78C533CE73BE753625DD6DDD8816291EE
7725531F8D4879EF60984DBB147C7E2FC1F46751480BFA1B9D92CF667F8F56BE
5DD221F4E05D8C864F9DD3E99FF860370E088AC8ADBDCCE20808A874D712730E
A210F01B7E6B0AC7F8132E8C92B729F0F68C6EE117A1C4940A7282F957E19C31
FCC01FCDD51BD6740F4BDE2445C5EFF77DC6E394F4C2DD17352573C90177484F
7E742B00B7C92F1FD3B4A7B638AD6B9A54234FE345E1F0CE798DC546A50531DC
45C5C52C376833CC9C07D19BB08A569FB8D2AA1B65BFBD269418B1FAEF148615
D78265BF0E0150053C6DECB150DF4B609AA7E8683F0D72BB9334996DDCB19026
913F1798EEE3E80D9DA51B1F5E7F7E9925E31B3424D4BCFEE769D481F38DD868
CD2B4E085BC075BD7242ACD1E01BCD50EFE1EDDF114903155F14A3D27477386B
6619D1BC8CA8085F829B9F9E0B4E360140E2EF8AE58083EA8156A4ECBD78008B
0695E30D3477255EF61C590A8270ED7CC4E0FEE585C057513810E439B5705D89
87D32CB1AE289C8B110472F95FD5CEE1A7EC2A78941AFD0B102ECFED705D80E3
DE0D2332FFC0DF09B20D2A30C907A4B4C8F37F02A3ACA687FBB3F42A7704BBD6
90823BB001800EA4BF7268900465D114CAFF0FCF67585A6BCBE22DA3585A76EB
ABE1C94999A54BC260661FD4DCE55956FA23B5B5BA2695E1AB97260C39A7CF8F
690145893081D52CB1100A22A0FA9505D9A09C8FD62172610A719CD4E8F739A3
7A9BCEF469E030F44776078DAA51D2E55EE43255E0A79B1E248D02EA353EA834
E1F86079F3BBC478D2E5A85A1DF193348E8CA988354F249E77C9CC8EE4CE02FC
FCF5E15E01BCDB6D4CD8D1F8188BBAA1A71A96F1A3252AF95B281A08DB3C631E
95910F965940AB8DB67D03327FAB844B267B7610A6D157EA3ADA7CF63EAE1CDE
BED0C4F058FABD99D3015F6D8CCCF97174ABCF4EBF022830B28ABF928B644276
D106E370C9F20A160173B95A050D366DDC7EBCD9E9B6AAF63DB3AFB9D9B87CC7
43CD66368EC8F20697F3C699FD557D7E3CDBB0C43BB4DEF74A9A944F174E506C
85470436B32F03940C14DF57CDB61130D6E7A0DCE180C8257A3ACC1122CE497D
5BF45F0130480C55D27D19F27B189ACCFA1C6C760DBEFBF5A18E58BEF70C0E1F
21DE664153B48D8BE48B2DC09FBFE366A813E4B96BF9A69D0DA22D0C87E46ED1
BE94E17E5C4E5594A00532C014E7CC244189592FB944D403458FF43F071B0BDD
E6C3F4EC3510619779B08A7375452187D66B2A444481355A0F0473D5983C8671
BC0EC4F54A9B7A7F52C797D4D61926474C6ACA7EDE43667FCC74ED0D3BE8A237
CD8F2DC3CF7B6CA10E80597C6D46D97550C614A3CF464143DD5F31BACE6BDDFF
6716D141BCDD4FA9D6617B708672136B67E2F9CBBF7CBBE4CCACDC779F68F2A2
183EAD64F2CD09BBEB1FA1FF7EF8999DBA1B10FD88E772B23564D1B15ACB8BF1
1769DABF2A0A1C3058ABF110679B1F9B2ACC95F901CD7DA38FAA447B31A65DB3
DE459910342B7C6EC024BBCBDDA2519088F3823665B10806DB02F818F75950B0
C5296AE847C21072039C8206693ECCCBCE406B403551C0BFFAFCE6B05E537144
CA3F6E7E958368A0187BF5CEA6A56152914D7C025FC91EB9F482ECA2605F1D27
E5A37C44B0D676049055F26D06687405490786A6A40D35153C336C37E21E3E82
144C358B1B12E252675F24A93F4754E28F4ECADBC97BB43F687E2003D7484BE4
8EDFF965C6BC89419523301937AB8A80B7AF6402D3CCA6A61A8631F03986FC42
37D845723C5BEE9525EB2052716866C7406275A3206C0B981EB6DC945854759E
1687077DDB844137AB35E862CECB9761D4FD3514C70568395F71AE21DCA9039D
A02B117D2B27D60E79AB8251B49B6F09BC62E0B00A93FCF87163199C3E19E814
2BCE60E0D833A1E4C4ACBA7793B1FA243568C3DF17E4F251A7BFA5C8FAFE0A12
E4E8DFE8EB63679D37BF5429C65E0B60DA20C9BFB9FF931ECEEE556BCC9C4374
EA6B2CCF8889E24919FD9C0F36018BDE9C7D0ED36ABE19A3BBC38D15759C1D2C
AD099DD60AA7BFA31435DD57C23D90AE4BBAD93CD89B84F14D18A2C653EF52DF
D5BD5FA826A95878D800C043DD15BC8291750EC9A65655A71AF0BF0EB6AFEE62
0EB7E7F02C11C1B52C95B6B66A2DF1FBE199108BBE0BC90226FD7DCC2267359A
6CC965F3BF81EA6BF12F31E60E5F8652CDAC1C07FB4D3CF9F916F9153957DCEE
9C31FCC01FCDD51BD6740F4BDE2445C5EFF77DC1FF03BCB6037C927F524EE70A
D24F140AF825F8A3708AA6AC9A56DCAA101DAA6BE705FF575048CC768BB8F13F
A82E8B8086EE57CDBA55D394AB66A7C4D3AB2CFA6445DEB4C700A5D6C5B7D1CE
BCF30EE34E39143E5676CA99B654CBD8F89F81127D86DAD35262BEDCD4DB7713
2F82825F0F62BE3CAECAB7F3FB4B9D4284CEDB8F2C33B0CCC348110CEE64FEC1
12E525B7397893AA3D939EA7116A494BD10193B73D2C7D6C71A1FBC04F6E9858
1B5D753E66BF20A18A2606939F993310890EA3D630838F6E008F970EBACE4E8D
26405777B063247CD0F1D75102D7BEB7DC1F8C1E7B19D83F738F4D305CE85F74
16979CD2644EB32367706E51CB96E8561C64782374B5BB113B860B5B345D258C
6A96EBFA86A669F671B2056B5206CB2889A8E98C3A777D8B455FF753AAE7C922
193008169CB9C24D7631C20F9EF9B7CB7F1D174B2E94953F541C3B84D4368FAD
06E1EB2757A5DF3D6292B2A347FA3516D012A2C331AB195D6AAE6208F189D8CB
0EF04C951E95714793D6A4EF6D2D407C0089818E3F82FA42E9473ABE2F9E0CE9
0ABD530E9EF89383C06A6EFE56864309B5EC0B15500038863D02EBC561CDA7D3
2B64D1BAEE7735FFEFA9801B206986CC678FF6D5A199877F0481B1BFA806A353
E320BB12885BB65207810A3802155C5BF6A0DF09FFD5521131C02B1F6DB3AFA1
BF4B117E4BF697898780190F135904235B0D48FB75CD72BAD117EFCE8ADF16A6
EE79233AE24930E9CB34CD780C1B9A210A65E46E113C9B602A2C12C8A13E235F
1B8C2881C0B52D16CB8A3B5D19876C8258094D0739019E61F6A96721D6E8D87B
447AE6C7E5FE2B3C314F1FF6EE52C5F1163105C6081F9765E539AFBF3E85224B
0BA4B135CC8709B34137EBE447A68F1A9E881F01879AF1500FE9A95034D47818
B8235920A92F4F296BC7F43A31276A3946D95444CFF436EF0E377B78459EB6F4
AB6C9B5D06C1992CE930EE2913F287B3CCA268A077EC8F30906003D98F0F6A1C
EE4A6444BFF43C8B73F61CF8A0EA4CF0DD9598A9036B749049229902B646FE13
3C97C83306A1E11D90CBACD2808878266A198BE7715E3FD36FCA71692EDD0042
913BDAED8DA7D7C8016D0FBB0700259DD7D8F3B3D6F433B5D663ACB77850F858
A12AE58970819475E9E4A53BA6CD4FEAEDCF8266D724C7E2F09823AEFAD8BBD5
D9B2BF18926E27341D514047E4BC4F5DCBDCAF4903835F153170BAD72480247E
E13CC02ECD4E395B415F9565E574B571CC7AC0511ECACD8027F62573E701707C
AD347208550DF890CF5924BC50D349A735216DBDEF48DCE63F3F4869DA9D77CA
EB4DC19B2083460894CBD27B6384116F985ED4FC0CF7A1C204D4BD2FCE9DEDA3
3E19A4A7E61F818AAF7966EC96004C09C4DEFCB07E5424BFF39434E3F7580B36
099A5F4F1D22D2DBEE3B06915E595CFAA3E93280D983A4CA131B6EB15B459AE8
DB602A670CA6E94C8BCCF83DB0AC7B39632F0D4354C15CA96A594D27DA3C1237
C61DE1A5F5B26FC8966F1449FF69DD34A0A93BE91F9745A63AFEC3516B02EEC0
4BD05C0A93C2BE6091FF0FC1F756FEE0E51A3A5197A0F671E8ABB9E3A838DF0A
05417C570880C2E5A57DA123F3D3A3D3B50E94D207123A5B05FCAB7FD90E2A9A
4EB1C836ADA98518DD604EFE6715F50897F075509F64E9985F27894B96CF035A
3B45ED6A55556828362D6B0DC62ACA8871E443E19808D80B366E84FBEFACF553
16F9F4098759ED1E30409EA873F16CF157EABB93758D7B49B76E682B0BB09735
A0A8003D3C3D8DFD37D8FC6B3FFE84E62B496FEA7C1D4EAD89507E04EFB96476
A3B4A2511E272984EBF44CB95368A12024C0BB437E97A0EBB4121AF0DED7A6EE
F3C9CA5CDA4184D6C7C197D4A0B223B1189BEB2CB7C09C582E1945BF8D20CABE
F4F2F5A78A41E4B8FA1BD54BA0959261F9098B70D161B2E281A539F8903D9405
F088F10DE2078E17FA0A86A5017656773E7A78C127D2539B635B544499D40AA6
D343664B19774783F390D0F57C733167B2CB7DA20C340ABA91FF0B3C92679837
5E3805B21F528999160D492DEE2ECC40657518624A1AD2E60E3B28C7D26527ED
7517CE43CB6B1FE3136A120548797C2924D1424C444B9D6FDCD0195626B9FF52
B0C1E41F80C2CEEDA53D58C697C487E3C9F825B5BD086A6C8CB9EF236068B036
55C718AB51DEA84219D7710CE3BDAF59395011B3A13BD144BDFAAABE3E3F9A2B
1635540E1A98D0B51251CD17976C798B58D0CE0AAEC52AD93ADD40140577295F
4A4A6E8ACC3C497A4BAE5D53523C335DD5A0CDB0DBC05574F7670085AE08BFBD
0425E1C1A555DA3A9252B73F1E4CDD4912B3995A7DB9B4C56C828F882B4579EA
28D1F2E996551F69A140A662A98CD3E5784F9735A8204CE22B0906EDEDFFC684
F2CCE516A901673C3E386B904264A92A74FDB2B29ECD6CF81A54A3638211FA3F
71D22426F200FB8824E27D3B1F736466EF878BCB75D81433ACD2308168F1841D
0C155198B329FB463D8A100972520647FA07B7B6A0D06F3C5A9923AA703FDE11
0C9F4CD12860F931703DB69B14ECA94EF3571938E1765634A2E68B180CB1D345
8F56F419ACD8CFCAD7ACCE8C71FBFD087089E5CCD4368BEF556A281D166D457F
08E24EFD97B554FBCB62F90A0A80260CCF63AAE519616F25D6E2D6E4CF241F15
E10AD8E5F61C7A0D270B420A6EF0BDFD641EAAFDDBC082E579A06D8A3A323458
808BAD0B702A20F0E3F04B960FD7C1D9B468F076D12936EEE94B5D03344F1D4D
782CA0ABA987541FFD5934A377B4E6765536CC00A2B6089A597FDE4442B8D52E
A04CF93C127757BE2B541FC918AF87D5282D0D7BC2E56A5C60833A34B5F8ABCE
E5B559AA42CBBA8CDE9FF407C8A7E5FE9FB9A60611FAA3B2D4B1CD759E02FB9D
9E74F41B61FFDFCC3B187C80FE52EE1275B05D19E6DC95D93914B713820CAA4B
ACC97633FE6492E65F77E77C47A81E657F3716340F99377D80FCCAF634AE7A1D
21B652818AABE247C5D38532686307842337CD1F9695491BBBDF271B5345C44A
C0F9313F99904E29111C174A42B49151D18C1047F69B56AB59B318A1F6DFBE0C
02B78E9D05CD846EBD47D78A88763F979E9B46603F14F884E46AADAEABB8EE61
40B58316EC661475905983E84F59B8F57165B37F41C142A1FE909D3BAAFBA257
7874822FA06852EBDFC8B36B5102A3E2A16FE8F9DBC207EDEAA72C2F7D4B7B71
12BFDD1A597DC8717EA1205C78C5192B323E14154DD5FB270ED0FF0CEB7005A5
26481C611D9AA7AE34F17DC740742D38AA56C017533B7CAF2195E89F96FEAB7D
91BE5CA1D911BE3DD823836C941A80F6C614865B4BE47ABEB2896314EF29FD31
64CE25F9A19F120360F93E7BE38AFBB5932D0148F23BB4F42F155C81CD0A6958
8E4AD3C11D0D92D6ED9C8BD3D92EC5CAC7416E4ECCE80BE54C77342B00420411
EA2AA6C41677519886FDACF388834B1E6FE3BC904512CD866ED15BCF2FBA48D1
53E56EA98C889C84F438B9C89879E4C129CC139E86E1BDC3F13FAF7100C965D9
F9817A3018482C30DE542538B282AD241C4C2E462E0C53DF864ECFE0D6959D51
14EAAF1612C970CAA2C9472D5CF5C9E232D6FC5389570C46AF3505423EFDC21C
AA2EE674D06BFC5421D13DE1409C06048F20F8FC5A432C319767256A93147E40
F3C563185662EEE213EC8671211CDCCB931104741A6C9845338F0D171803EC04
C9534EA7511D04100936D409DADF45FD193EEE4DA6848A6D8282F42FD8E0011D
E54FE288BC10E3DD115FD4D4513B7B940B0C8A4F8B4D38DF11BB9D194D031519
6811517367A74686F6F91095E8F9C5716976F57667DC1689B1EF1CA02DF0567B
F88E580E5261599A39EC1EB71F7C7C2AF484DF0CB7D57EE87B24D8606A9B8161
8FDC7A7D51F10B070B2BD2F35FBBD34D39DB20F9614F2207884CBF60880FB3DC
157127F6ECA3F14E6D93FF324BBFA6FC9297D906D799BF0FD96764E6FEAB4430
23A79E1441538AEE8BD53D19A3D942F9BAA468511B29A2153DE8F37702812509
B04E9812F73D55BF7E9EB4330844CB6AF35D2AA9116925A8E24DD207DE9B6B16
A7D5E7CD460DC1080040F5D06389865940A127F49BD2B5ACCF7ED80CEF4FE96F
EA461EAC1C8DAB1C09D22FBC1FA4B08158BADEC7D28729924E0943B21278F86D
E95F31449EF3DF75F0384937FD71C89E0D8E8002CCAD837457C57140D867D247
CD6E5BC0C36E4D9B7644B2DA602FACB5BC419A5A9C7B5F2F8A2EC44BB75867DF
A36B54392A30B16A95D1B64789BFF4FA04CAAFEAE46150D2F6B04F90615E163D
94432E5FA61900108297DB5EFFD32FFDC68CD24D54109467466ABD538CDCC53E
0BB7FB6B4B6539562CA5204D6DB238DC6D62C925A592B75601A8DE4DF617ED5E
4C6C61F72CBCE68E81339EBAB12DDB417955330CD74F277A4313C0E43AEE5F37
F0EBCF22D753FDC635611AC976175CCE495AE3EC6EE9C4FADAA72FC2C4A95C05
EDBF190CF1E29C578948CA7987EF5621585D16F8AEFE0525B09A3CFBD921F0CA
89ABBEE5B7886F0CB27373524C3B40910DEB082BB0F17C4579DD35BCFC420F51
A9C588C7E18C00AF341E92446E39E4D60D543C0750D7195150FF1CE3EF18F331
A58BE4704E5130FB4984C3FE2474E6C8A65FE1CB2D063F1762AFC73420EC07A0
E7E5ADB855B333C4108D762A5E0DB08B9B0EA008D362CF6DB0941EC77BC06516
4A476223CCCED16B5B06AE444D708B7E5B957A8E5EED0A32CFBBA95F1BA31CFF
8D08A8D499BDABF49F6C66BDA75E38E5BD96781AF7F163C31BE86BA9645F9EBB
B7C2505359190490029CEEE725FF99229E1E6E05B2A173DC4C21591F666DF4B3
A0944C5FAA2D30ADF064BD3D8AC118ED4259038F5AE7244B0C4594C11BD520EC
321C90F2D2B817EA1EF887E36190E870FB07317E68EF2C3F555A3B98ED30070C
E54B0FF34397D625E82B764F67FA7165C2CA2C4DBAC2EC5EFF288E49F3A611E3
4677614B1E7EDB0F8935947B35221BDF73DAA88DF6CC2BC0390A0C3394F1B3C3
8D3B5C767E8C160751286D45ED4A730B66F1600139D8A3CAC11575AB509B7938
066E6192D003985BAB6EC9ADE9871D853AB9204F7B07F371BBCAE8BD11905293
1A14A249B8E317785C877F928EB9C6EE4D67ACA64BF08091B4A55BA5122C66C5
44B6A09D060218A36FD247298CA0256A93E162EF2940B86C372261034B8F04B5
E4B7A134D8C6A288BAA3384091223B749317498ECE0255C8C4126287BD22FEB7
68221AD59997A9D3940D0780E8B6ABDBB695031B40EA1AEE0B67BC48620A5C6D
B3F15DF83E0185CB1398EDC35E34404FCE1DF5710D5894ED92C08F17FB8B81CB
0B3A5D62AC570F09AE81C6198BED338F843FA8349F660C272D54592FA44B340E
54BE16393EDE9646B2D979488D756578B11218B93BA39D307A2F8499B97F2312
B6455CB547B771F0F0E0B2BC56BCDEB0F3292A8AD108AA64FFEB0CC4106C9886
7791A5372BD85578E1D63F8ECF3462CBAA35C3F6DA407A4033FEA24683F2370B
1ABFB841B44E5800A7AAE8E77FE53F13C07351C9296C2100009D299C380B662D
D241FE7ADD085EFD7640B22E1DCF3BFD65A35EA6C5836F1E3B3806A2C4BFF24C
91B9EFA728161E7BB85CD431A7958B0F6A57BFE38484D48F977A14CC865F8C62
58C2EAC0733D9326E67E0E6FD9DED75B86BC1F827AC68A8A240C1E4FB6C7D6BA
06927B0B692FC6B2F1A7536DD946309943D4A1215C7B29904B594D05D8DAF749
CE90DC2DB5A50A2C749EAF8860A6B8BA44C2565214A84FB5C4307B6786088867
E9C179105411BA428CD87225C7FF28FDCD4FB898A052A0B1A21916AFB12AC668
6B4CD6EC151959BFE46E90DE9ED3028D968295A3B3AD271CB5CA98A921EE6B47
CA78E9BF0EF30B9C00A0A5A85D4F4750C60244A1D90CC990828D769B1FC70EBF
37184EC5485FFFC5EDE1A4D7988F98294B194A463D8879FCE155D90E39D50FC1
569D754AB4D16029C7B6F600FE640729C5A59AB82EC420F777C38FEDDF8C4AC5
35A070B177BAA18F1975F378FD3549F9A88907C43D36DCE606521898F9EB7E39
5F7BAA7D58EEBB523F91933B1EC48260DED433C7ECBDF1FE26DF76A992E75297
9C1B32F22B7989E1E63B3EE71EEAEE04533DBB6C60704E83140965124D068989
848FA73E595D0F82DDAA49C863AD0FCF752132C0DDADC9B58210735F6171598B
FAB73F74FF613B28CDFA56EE34585CC1FE61719E1D3195F35B53135DBB27457F
B4CAE16197347611DFE63DA3C7C8710B9B6FA5B8477E9788C5245492BAF03295
1F69E7111785711122AB2FDA7F0F7BBCAEE514802AB4764D876BFA2536CAB3B3
42FE05A2F981326E9702ABC51525B754FBEB9E0C7247962F244E4B3EA74280B7
101D384B1B4E18BF782C8C8FEE5F1548A11C2156507C0A6BCD02C9D1E7076AB4
E07DB79C9CC6A6FF936F7E1B45D14D1023382935D2FB5E608DC9440F0D589CD6
C523805AE580E30EF27F159CD43D7C110FA080C33B4C76CED030C7F588177C9F
E1CB86F3DAD75C6798C2D2837BFA3A4DBA4F46BFFC787DD3825007B695DAABB8
718B2008B73C2196676C16AA06A524F0D0ED7B998CD54E2A04A2F2C6DE779C2D
8132F886170E2417CD39A79265C7EEA862D9DF3417C40A816FB91AFC16D82DEC
D741EEE6DEF7D4BF4E4A411752C8EE2B3B2B10399CA17B715C8A6DA4099DE693
A8C3B1CA9CE47A0675DBF2E804072C010757B047D81D85BCC8C8DBEF05911B63
1E9EE13317E8FBB485151A4105FAE5E27E777DAED707339191E22C609DD2720E
8BB3AF57362487180E36AC1835CD7AE41CDE8EB6DDF2C224A03086B13411F870
A4523AE8E16F422AB07D8800C1DC09C17418D617316E055603783278C6ECB538
B1BF021F6E791CDA031BD6C638971FF77622866062969131FEB0A6F933A0EF96
C16D45B427465DCB1466D62F4436EC6E92FA5426702A7FF9EE61B06E514A1192
EC48369810AA7F4C09F57F6513B74F9F6C1F90E5FA9079FAA3E23615029B7675
85F7A3D5741EB51E3E3C921512C0093EB470AA4D779F62ACA0AFF4AFAFF97C44
7921FCABAA51FF4FFB7C8698A39996E7052242436C2D1C3D71D43D3E2EDC0D82
E7963D91D6D66ED7AAA2ABA794369DF7FF611F24D164C9600514118193C5E291
E7C12150583EBAA36E82660BA7BE222FEC51C58D0E6FE841D2705D73C2CD9A14
C5396873DCE47441B413975C09D51A34F9E75EC3CCADDFC18C036517987D3138
F766C19BD0D3BB943EF00E04542DE839147F4B2433EC3DB9DDBC8518004FF5EC
286341002F8A5A1DC7955B063B5AA0FF8F62337DE5F23C7D07B4F59C20D51110
44BA2E749C6607546AD504017507CC0113463E9C92860D76C0C968995560D12E
702205020CFCC240C16653AE0E91A3533A0F2F9625F3B438E0023DB6274D5DBB
B39D0912BF1F0B09A9C90797DE55DB1FC9AABE7ECAA5701BFD42088AB44DFDFE
8807844EAF4203D025909C105A29B28BA1FC3246B8D6027ED5FAC380033845F5
E3C514BC05FC6046B94B058F5DFDE5676399735807C0BD7271A9EA25CD2CCED2
B98A33F273528830E685144A0D49172E098D84D914322BD5347564C463176A02
23C98D80CB40CEFAD26657A103842D2F74816030BBC50B3E19BD4FDC27615BDE
4B007D7DEB8854FDFCAF09575BF519FC93753336E93E8E9D13824FEE33451E83
D800226155BC9D1A36F6E5D4B0B3AE8CEBC1461957D7BAA20EB9168C6AA9E420
4774C74FFC5E9B1D2F70A87D381F424FC2F34BF902F7AA0733274256B42EC01B
A2C8189D5556B71345AC51FFEA373CA190E6D1C023C9E3386A3E035B5D86EECF
CA721A6582D8DF17FB65DE01DAFB33085DE63868AFC7152564E0E178A543D796
AA1A68E72CF3B83FA883B7CA1AD07CF99E95DC730F7CA874DF59B2EF1E58E975
B6356F592B345A23437E6BFAE98625F5953A84AB385CC9058CEF8D477F1A52F3
D24DCFBB8504D3F611C95105B28471B69EED368CFA2F0B81EEEE6E1DE6FBD651
1BEDB624056475519E2050475CCFBF4DAC09C647B2A3453C66C4002FB9F41212
4A46B06582A009037737BB73A125D41970AACE92294E2609BD8D1EB75F0D74EF
AF09684FD248DB0C9D10E0C3836CCE2972BF4F84DBC782825D796136BF770F32
8805EE31C6EC3FAEB45B0610066FBEC30399DBF13A3B5A57D4276C2B22675649
7B4207C6D3173ED4A0A7FB5A609F0CB9A7D30379B3A56AD0148429BC6DD9F89D
792DA8AA542BC5B22F595D634D4D311EEFAD3F82143999DD68E0DAE20A40A74D
1489DFD974588112D4CB630389A4F601F2871C91B102666269B3512888E10CC9
A453019DF489FBFD9AB35B3081FED4A12C27B85CC6A3E545A312C95C6F2125A6
01668CDF3DB7D7DA528D26A932BF124C2C8F4A14BC3D8A08B618F27BA5F35FF4
368DD4D57F288DD05F44B680EF887A5A8C38B845497FA8F5EEC58A7A966DEFDC
3C8B735E9D534F0A49D702981E061632D764BE66F3C0FE120C3CD743789E435D
D0647494E68E34391E2542903355658BD278E6769612C31E0A23941B8257A2A5
EC3F63FD62DD09890F4DF33DC9DC3BF4A11E12A7615492844087C6D5BB3659B7
E9A28ADB6897029B34E09BAA559E20CDA34AE650C23CB519F8823137AF71C8ED
83A3155EAEC79A80F7422FC91F2668C3A4855B442011F240BB7390D79EB357A0
6CD67E226911426B798433263E6D36537E726577CE1483052A0E8A8E71E5B7D8
D042CB8C40FAB4644CDDAA91F6F0D710694AF26E7A139EC8D793363A204193F7
8172FF911C17AA8B5CE99930FA1EE2C24693E3CC7275ED0C46468A66793A77ED
2B75356E08825EF06656AA111A3B5E5DC9C02E0DFE11A57B1DC67A714A1622BE
0B0386C2CF0929FB36B3F9F337522D515DAAC75380EEECD1F690AFF5B2AC1648
814FE0653D003F4AF77ACD1B3110DFE711E9880CA0D709BA46BA450959FF4EEF
5B163AB7AC47CD6E9524B14CA400929ACC7E1FA027FF49E581739F38141B8B4C
3547811F5EB3B83956FB2603C5BB5AA042CC8FC0A83667F7C15770D05EAEE83D
45EA124B940B2BD6A3E70DDDB96F0091FC53B841A19819F369B24972B26EC5F5
124818ACB33BCD2928B900D2CACB030D734A18C3050FC5C30AF76EA47698E5EE
F80EA416371AA03AFAB80B9444645F0D700BE85D676051908E55A864FB37E8F7
0C920A35778E3BB1B1EDE4A453F3188709A85504074B81962974A4D2FBF20E45
EBA5D846EF69573C5C757A1F13A6FC9F72DE2440AB76209E2DDDFFA60953E618
FF5464B356F7E2981B87B73D560A8E6EE0BEE3408D38C8E6AEDDDC7B1AFCA6A5
0C22CDE6A2F98968D6F283AED79E4E25CD9569BAFDBE642C963411707E41DA57
2B2601547813B88FD848C2A52B31C0E5093AB36A62182A6A89995143E165C612
2DE3D9D2107251F59E051F9042F32A004E07440EDD5B7177BD8E9D24F77E526E
649044CFD4963485971F3249E6694A24DA005C84176455BA74C8A974403A950C
F3FD6DEDA4861DE9EC3D9161B027F7636E06CD110827BDD8C582060673605C54
C87691BBD1950FD04ACC4354C29932847B71DA696FD4249B5CF889197918F927
992DC00D42112660E9AD610A6307D672253607CCE9FBAD8EFF4C3EAD051FE81B
DA094CA27B96482BE9AA96C298173AF0250ACD6B577800E90DB3AFE65FAB24A2
AA7711CFFCC8FE07541528EA16355D690DB14F4B0B8C23B8763CBFE34182D05C
068A25E4A7989A7495A1B11A094AD5D0C723C213199FA951848099D1CAF25B3F
58A361F1B1C042E28A6DF98F789B3091DC306C6083597291AD9EB1A38F222EA3
8D23821D3810608DB0CDA2B78463780BBC948340CE56325A3349C0A895C9618A
B0AD7AD48E2E416280E49B38E5D95068D321B4856F35CF8EC31811AFEC83F4EF
8047CA2EA3C1FE37AE52A6F8BC86AA455FB42A4C7B660583D3DCA8C41F9EEF61
211ED03B9F0176AEEC4C3A406D5E34ED93BF1EE94C0CCBBD7983B3298690CE9F
E5C86216178DD1E035F6754940BF0706C631FBBB1384878378F1C62D1F3FB214
8573DDB07F5E27A40BBE00964DB325318C05000AC1E8779413EDC2D0ACD61E84
091D122ABB1E38913FAE046453291395C141525C234192DBBDDE985B647B04C3
CF1D2FAAE9440B58A6AF1B0838D8FD1C087564AD4E6EC7B1ED60BBA08F874D9E
1B1661393BD85DEB50C29E2B268F228F0EDBC59DE4F648B6F6F9568EB7FEEF20
E2092C8522639BD02BF782F79CD875F2D2745418BEFFD8853DA37C5B119EC680
3BD53A742632EC69E9F2313FC93F16207B118DC91D01E2EA2FDECE4FC09551C9
45573F14719CB670280A74BC73DD99FDAD3E827527F790D2136B7B770C4AAD4D
49318BDCF84A7A206550FADDC77C9121072E91F7CB647E1131C0CEE91162DA66
C9C1C9B6320BA67A4AB8B9C17DCEF9C77F2520250E5F37B5BBACE5A9AC860B56
7466240E3A598E0D31B4BBA740CAD472BD3B8B3CFBEF8071B9F1BE8FA4340522
DDD9ED61228BA995A96C498E919DA7B930608A9F317C929F0F9048AF220FBCEA
873DF51F33F0FC88B57EC12718A872851A26D58E3FB612FC029AFD7BFB31009A
B0536E9D0486EE22E0064C87FC5DF0B7AB1BC8DCE622DC3FABD85B0F740A559B
344930B4AAC76A132C32DCBECD227134E7F747AEFFA43D7A4E14F03050016897
C740A408C0C811430FAC1A6CAABB1821DC1FC07118E209F19C005D9F02E38DD2
200E74D778A66B781BD90BAD5167B5AC26B5445FF5374BFD8D796B937D5F5073
0F87461D8166D473BF570B3DB7EE8EEE7FEEA43D61A73E72A9B12E19EB6F94A5
0C01C37391F2D3A2FD03707D4050015C93B816180CEE7F6D2318DDA9CB25B39D
483DC8D7DC79EEAE3E4AF072B23C18DCDD637A30E68DB88617E7601EB8A0A427
4F4433AB266ADCC47DADF7E7DF68B41BDCE889BB09F27174A5303B534F3BBA4D
D09492576A8AE7707887F5321FDC68CDD7964228AD7A5AA908FB05F63FF80AC9
38314CA658190A354DAC0D391F423C16690D1F50D7619388AFC8089C4BC9E39F
564B0C6FB7EABC7BAE61A0171DB906D915352458CFD5817DAC157E3885B8EBDC
322E192AE4DBFB279B7E977B884A6B7FDC9D4D3A2D94874EFE84740B68AD9FEF
4DDB7A1169F5A96C3FD32EB20063AB5F4C73B8B78639682E6E7F0409243C6256
300F727F67D720CB772B840B1F52CBDB39B6E9E037705608D7075FB664CFCFF3
CC0B052242C1533D2376DF3EE5C4D9E7F4DD0536E7C70D3AC58AB2DFA3EDD496
C18C8974E904265984BBDD588CDD10DEAA79E7BAA7E7FFA6685B031AC02CADA4
6E8AB1883BA0BBAF674C6FA7238461042CF0CD1454CFAAED3C30CECE4FD7CFA6
E4BD0ED071182A2627877D016B1F58EF688D9DCA5C19DACFC81E5E9F5F30236B
64F780D2947F2AFF2E0FFF984F022FE12D3D471CD1CD7FE113BC618D2B53E186
AD5AC315BC0EC15C493F32E369A8AC57FFCCDB5AB2207FFDE614C3E90D2B870A
60C76A6308FFF0FFB2E804ECE3AB40C38084CF332CC1F547F124E0976E10F073
372EF9AC6E6BFF0015EA347A3FC38771D2C0F6AF4B088734E7EBC09BD2179A38
B829913C426F3112E17476602F3D7B5AA66AC712573010697F8565DF291829A6
4F790E760888FE23E05C921096AEECED432452F440BC614981CE23B4D968C510
9FF036FEA91DEEB9CF08C2BAD47CA484F64080B76D7947EFF83482E3974AB182
380E87F7E8D7398211D0CE805938270FBAC0E50C6D6F6E313EC2050144AB05DC
94FA9F93B6FFC3AA0DD16D94EE5537FD244DF8D6AD68ECC29592EEF70A7BF350
E769A7EB0E1B9BF5CD44BE1164638B6D952591C6508C385F2ECADE863C97FE52
087181251AD87A3DB497D6F4EEEE809BCD936FF4B76DDB821EFFF0BF941A86C8
37840C73294FD6273F61247E9B350B5BAFEED9557DBE709337CA0058E6483474
05573D737AC2C6BE8BAC4BE84A4400D43F883E1C794B9DCC29DC9DBB6F928F18
EA3BA9CFBF855AE146F67151206D837550B4FE168E00B94C014C2F27450B737F
2092D2BA5CF413E94659820249A35FC77F7364BB75AE2083C7C66E6C13CF1791
5843CD5105A072848CD279AFD9FA837C2D90F00B69667384E58DDECBAD1B4FC3
0AA8BF5CD6232D0E640D923C73E366D7CFFDD88113A4763CEFFCC6DDF15E21F2
91360670443325F4643DF718FCF9190B3B86C38960B5D418A3D4AE53C85966E7
D74A4E73C9B32EA493E60787AF090ECB75DCE386FD2C0019156FF9B33C8FDC27
D67EFC22C9DDBF4990330F072B5A9A38A1F390E7989B441E83CD759798E03319
D6514C89CDA3C719DA2D9AFB16D8A9B9AFD9BF390586D4AF2DEBB2EE0FD69336
E7070E3EF345D6D1EDF0BA66C276572FE440D7EDC6EBCD2AF0D56D5CB3D90AE8
98AE5250027541AA375205EFA30488C490BF7C97F4ECB491B9DD2926091581AF
FFE949DEACC63135C5630C49FCC6E13662609AAD157D1C68D877F9C7CFAA8405
74BEF5C8743351DC9550AC182A98736A2FAB2889F19B47E871B05E8ADA834E77
5AD6948BE41E7CE5EF9290215DED7935DEC964AEDBB79D99AAF166A6244CF5E4
E7C970A7264CD5220CAF279A18F18FCB28C62E2034541AABF0209B70104DD396
F85A35087CC14AB94788C39601A57B190A61F2906DB83E901B021C755A314148
83C29C68C3260535835CAA54B8189562163602A8298579F595F99C5C3DB2A40A
668D7B2F99BE60A97A6494F32B015FA31EB5B9C93A2D1ED16885B5393B876ECE
C4101176BE636CB678AE18A2C4637C88125CFE99B5A0257F0D0E3595C2F2F772
B9BA189E9A91EF96425FFD14913CF80C1C63381CAE11715FD0493409736F4C3E
149C1208CE99EBB4BDB19A68DC6FC74B871CF4CA16EB943AF05A6D7B488CEC77
941EE8A8C07B7FEF9F5DC322B2896A8BB113EC93FF77C68160E080B40F56BFF4
8990DE66295E470F8E6054F2E751F5BC0E44E1DBBD59726FC97AB7CCA4EDCD27
75E401BF708F7D4FDD2789F57A6585929BF1028026F91A7A18859EDE149FF3F0
7B59EDA5362CDECCBC03A24909C684F7846DAFD3297DA381B75C76A6E80F649F
D6E8947CBD1E1576931687CA2A85A449CD30C3C2F63A9B25F33CD28F6F660122
29C694E4FA9BFFB8773574AF9233FF75D75EC25A96919B0623C4B487F73D78D9
C5A40095125BF5C1D8EF063ADA63F3351D5E8B2A5BCCD28448088D9F6442CB14
BD2C5658C938BC685FADEC8C6514A72C02FCC77AACC84E85075B2C3409B81386
18E9DCE7FABA82E8537A7E03BD98EE97FA23D768F48EA462E9C8ADE50F9D4E20
4506038E76EC13C6264E69B55D1971CD164CE047D3F5719F7941EC91235F9F1B
9276992A3011D630863CB0D89232567FEF3D544A8F9B896303A47E29FB0CC528
94C2D9852BAE98DAC79B40DA766AE9D34F34D5D2C3EE49617809FB8B2F24322A
B310F16A60F884A5889E9409DEFF8CEB2BF67DAC531B53256C34A5211FAE935A
116D16681FB9477E2A1243CB87523D2492EBC0F85F59A2E6AAA21208B5CDE5E9
10DE7DF368CBFBAE8B109F4E691B08A533D6412301A9881BD9ED5CE53C15A902
43751DB90F6B6966A3380F67C084786D192891C18FC29F08B44BA35C0F08B752
FE2134FF5A862FC683DAA0E0C001751FD51FD579661F3E2FAA54D811386573C9
1A067182FA6DD333F2B0E7F1B5B2EA1E8C322C161A6A43FBD8DA2B893B68A5BA
FCB4F1BBB90BC96AA1876AC4F908AE029BBE2CFDF159D52FD8455FE6FB031B48
D904C5120D434E1B0C79D30EB03988B4B040791D557DA31A46FD5F2AE1267EBA
143162295E5C1B8D5BEF97F5A1DF902E75A84E960591E989DFF06D565850B86C
A364EC8D0F8D3B202EB674E48443C95D238AB7B166C4CD509ED4C32FD3EC6A3E
CE8816AA5C60500DA5759D88CA155608F2C6B2A4B0C95CDBA6575225199CC9AD
11D7A02810341F02AEB1DBF258621405F4150E2D38DD80F3D20220DE73E65FDA
6E1339E870A5266126175413ADBDD3B11D19254FA937E95A3A9723AC39C646B6
7BBBCABC9F704A5E26DBE86A8D22EA4755FBFB59DCF6B09DB190C7FEB04EBDE0
D847D0EEBEFB340FFDC7F6243F3214502096A929EB4AFEE2C724FA4232830530
71B78B7FE6406870B3A796EDAB70644056B18F88A0264C6A7AF607BCB095B736
F605D8C1BCC6423DFC9D9A652467CD72E0A5ED130D65910243575ACA236975AF
EC2FC3FEEA48C6B4DFBD1301D8D4CAB2E29960E2A3F6F0C652CAB0DA0748E075
EF4EF1C31BF683F9E33941160A2BA3AC50A5A93D31607964E58D19D8317B77DC
B277E9C3D80A0B26AB9BB8BF1CDE1E8C0AC9B9CF49F1E196D69D42364FC91AC8
8F98EE11E8609E02E01CE344566608B46F002A6EEECA27573AB03CB34BBA0391
00AC675675302FFB9CE1AAC9DFC79FD1C78CB30A2F939E91730C3FCB438AEF68
DB0DF2F2FF138364824C7D41C3B93E454FB69C89E3BED625BB7CE43E2711F05F
ACEF493B0E560F5F91D2E7587E9F1005F29EA0215797828A9661A6011EC1B5F6
9AABE2F964CBA4C0ED5416A20F102C82BCCE1FD39204AC35CA6C6957C87931BC
96DE8BEA1505CC6145C1AF86E6ADC99C2B3950CD64B436889A2A6C9C58E70E68
53DB8998F9CBE0472F641CF6660A76C929E56E211135DF75C3EC5EDAB74AC0DC
314ECBF7546633B0511B4805061CC19804B7A8023F5507F52573A9829CB0BBD4
B5A2C8CF3C5FBA2F06DBF435699261B724A0AB02F25F032E14C851C05AAD242C
7810648056C4E875136FFD709A15AB5222CF808EEF614A417BA65910F6315D43
2DAEC05785E0611D82A36F9FC00D0A3B4AD290800E067E2A3D0BE8B253BD37B4
B3915CAE860085BFAF64B1C84F2D593C1D143101167E369AC65724E0E444BF6D
376C4643295F769C4B52529A054F6B673D04BEECFE5A377FF6243E9B38814F9C
FE771F4A5F8ADA3247141CDD91EC9F234AE3452CEB3D204B6D79703CA2EA9FEE
8EA7A79AE3E5A9D013F904770B1F2E9B707453F8ECC420A219AAFCC0FA245C67
31A2E8E561C63B7BC3147D789BDB7C4531253BFAD3180DBDF8DEA31BD5BB3282
B339374D2BB66A287D2BA92A6C662858584EBFBA53E8DB78FC65706F4DD2EB18
FCECC2FE44C19959DF9D1404A445DF6BD8681CD2FE5AFDF853E1020D7DCA0782
E78353BE6B1D5CE7BEA436FDAF8EDFC92BA4E94A3367170622D1F52FE3D8545A
7E516998AC134D241A73D31EAA8AEA0D61B754E3D03ABC8B3DA3F4F6C2DB5468
2F72DFB7E3DC31D138997444F69437431B1A4CB5D7E0CECF90EDC0B41EEE3B5B
6CE28F4FF9A83CFCB8CEA23617D59BE14C09475F81CDC2241C1C0EDE4B8C30E1
F06EC82B82F60534847BA949644F4233FEA24683F2370B1ABFB841B44E5800A7
AAE8E592C8998F17B7D86D4D6F2D1C5324484C73C05C61C3CAD184801C595958
F6B8E22D80D1148B449CF1DF8E35EEB625566A104408EAC417BDB461014FA86C
383A1C9AC7312036CB343FC7E6C72759F1A39580FC0C21944F093D661A55A83B
0B422A7C066A6992A50A7F4E244DE44F12C29765A133D00285C4FD7E49FA5D2F
B569061CAE94B1BD6E84F08F34019A1D2FA36F073B3CDD709F97E8B92CB875C2
A69221374122A032A775A37FCFA08F22E55B714C1110DE11D30DF7380AF3BB17
ED436DCCF2D7221490784231EA6CF28982A4470A715D5B7502939738C7354E92
8475B6D270825B0EF286176D73199838F447ED0267B378F6D471D546608D7635
70B061E23840267D7D1A70288C3CBA2FFCDF1A4368603D62490D15B92EAFC12B
BFC57263DBAF97EE00178A19721E29452E920B0B254F0B2DBC4988686B65B808
CFCC21F8281060D3FD11B81BD02950A753F3C460F00B5229B486F520D48F88F1
605CEB7402F291711607AA51CE0B6062D11FA5E2D1FBF36AD4440D61C4D899C0
1A1023D0FA02A5DB4713B15C80A2764EBBD622778943218112CD853899F4980A
50D39360DC793D9C260F9A68379C031C3F3CED4F102BFA3084DF1A69D83BC517
F09C0F7D604CB84CBD82AC8C3EAD6F518231408EAEF5070BB95F0EF502293F04
FBB0369F573978AFDA870D687224B6D27DA1CE686E9CC1D76A63340F74C3A253
FEB0680E5F7019261C42C5D42916BF2731E489463D4C939967DC46EDECD2123F
ABEF33D8840B9DBAB8682DC2477EFB73DB13B45BD482CDDFA1CAE9A9195D6AAE
6208F189D8CB0EF04C951E95714793DAF832A46FE50A62BB1A094193955D7FCD
8DF13BDC3257F4FB385BC71706A33CCB741E91C3792C2F3C85612CFFA3A83E57
39E96966039DA9F88A4D7355C5C129C9D2D48615CBD55EE4EFB4DBC694919D4F
41D01894C91D8E03F68DB55EC3A0ED752F5393470DD641BB173B202FB9C5CFBA
BED230B39EF10992274E1F35429B3718CEA4CBB0E0B62F9CA65D821DD418230A
E318CD9C100D3465E9F0918267336183FE59D248C6D982B908FDFF6E6135A30D
1F0CCA7F03E6E5AF5A7A1EB68C7AAFD6A174B76EC9B4E80F6AAB481486B34190
AC06A6ED10305E09ADDC767335712B4548F26C90C0313FC09C2F4991EDD9FDFD
B76A9F085962F2A8C658EB60286FC8CBB7109522E57F5448092DECCB94D1E801
8F284F746EBCFA56734DDC425136AB0EC6828934B1CABC0CEF169B7166EADD48
DBBD871AF4056C3691C1840C1183ABCFA0B54EB99FDF13AFC5646B30E3C1F3E1
4297B50E29B728B98DCFDDD5ABE83CDEF60EC7EB487548017132AE6CD2829E8F
F3313CE9948D3AE141749B4732AB18F0D41AC8464F333C11E132D63CE79C3A95
EB37F1B0CC6CC325B1E2FC8491CB3B1B6A0A83F333D76A43C1AB10951F53D733
841C684DEC9C7D9A7D1CBD85BF493182D4C7447E7F7B926EE28D4ADF2C9BA107
E0A5E4D97749D50B9BB64954D42209F5C00077A7B5F0C9BB86472097BB765608
1ED5206F2827191B4CDE8CFD750ECA9EA5D64B5FAA44144D1A6F2F8BFE9A6DDE
8802B52236D3C157A865295A80BC736A76E8ED54B8ABD6CAE0820B83252D79AE
DC4F8D1409B396758316044F4C1C269ABA04EC001E45AE4B4DF40380880F57CB
DC3C28E7662214960D3A72A6E4F90F85A780A61DF25528832BFFB99BBA75B742
EF3F56B0509C97448F2833BCDC09352D239145E53F275B1D67AAD9D534CA6BA1
959682A6CE823431E43B9475C7704166CD3DD128179D7720635059049FC2FE51
8A2561105F0258CE2084F898D7571091B18B212D48B430EA93BAF2083D9DFFC0
FBADB40AE130A9F2002BCD8A1D450086A09422A17124B098EBB0C3F25994A351
686285D60B4BCCF70EAAF9F8C37D31577E8C0D68A4B89535F6C1A091FBFDBF16
3B51D39167A93E61FD9B41053DB672B7126B6938C8CBB9468016965C81C7A1D5
9FD1C7F221E36711B1C7B596DBB8AF64EC15A553C2BBCBC65EF99AF5BBB5DFF1
928CBB888F0C20A0CCE499532A4F584E7947149E66AB7D8607B409619E79F242
CF52E618AC0DA7F8F863F4C53E435F8619E256E1F3191DCA7DDED14C0DE21E4F
6905F5C5C0F1B1EED3C582939C7E5F7B5BBB808EDB67B3946AEB89E04410FDFC
2E0B23C3575BA871AE66657BAC3A58A4EEDF997EB49F8D967E148F3810C2F43A
C53A51C4843802081696785BF15D76F545786F48DD0CEAD4A5479C77743044EC
0600CAE66913D3A89C0599484A6940C4A95AA66BE989D307304CCF1355C06D15
9C45D1B55795ED861D5C795CC4CFB84098AEAA8B39FC135B6C6C1D10C8EE64D2
5BEAEFCB3C6B1A85CD6A38282DC5C39C35534F11703E096E67CE131042A02119
59D274FB09CC341537B0DB9D711AEB0087BF29130FBD1757274ECCAA90DDF509
2C78650B56FCC46EB6EE6781DBB858D38C983A3E6B09916FC287C43E8295CF92
2FF601D611086AF1512F97A1679E86FE69D18BF7D7541264844F4A22747ED04A
352D2A2C2E4AA93E30D669415FD975B995F12E731A9AA2106F12D941A56A79A1
A2BB8A270E955AA5FE1958F1F11F1D8CDF5D97BACED5C77FDF7FC4652D3760C3
0EAA00FEE07D69338241A33BD7970142AE107ACAA475998188E3B76211DD2156
EF4849AA3354EEB9828B109526FF86F3C8A87D99F7EE404825DF3AE52646158A
299D3B15CF9835A200264BE94BDB168DBA8E27EB213A5C5A77A67C15B7E33194
D63C8978A7F2DBA72451BF8E2D00A405D133A283A7C4B324BB2F0BC34D72C00D
A7DA0BBEE78D0EEBDE80D3CA1D8465B97D24C56FD57A0A20BE95CEA95428844A
D4E49BD3FB642F286C0F34E644E4D9C6BB4A98EAF58C254D5BD16F3C0B51B5EB
8380C2FFEC9F2F29B590C54DE8C0A0215E012FEE2151C9B6AA4E8416D42CA37C
B5C7E1F4FF585F18002A2A5531E038276EF001BA57BA828D24248B9742A450E8
C9577DB8669762A2BD544ED52B2B9956157CF7FF4E6A97E719CF433774973C6B
F313A87911950FD65E905CFC49E853FEB3E19F9518B08E6245125A35480B22CC
22CDD972ED8B7004CE65B7AD62CF9487C1A5EF2CF9F98D81D8D42F0A83A735A6
08304FD026C0745B29D1A67E518178407024007DBFBFC166FB1D11CE52CCFB36
274DC69E4D0653E067388670F20C85DC125DCFC069A00465D3DE6551BFD9503F
A7DB5302472CC872A032A537338847CB2C0A4BA9F30D05A05BD452C0CFD0662D
318738C239BB05828E15AFCF2A3F0643F57D9E7C51029AE44B4A923CB3768BDD
5C13835A64858A92C343BF9AEC12C1C6FC906243D0E1FF9CFB9CE565E73392DC
92A6355F8483D233DE4656E4CCC110D23480579BC9B3974EFB602A875A94A107
59693CF4F444B55E6F2B4896A3110EA5BCAA581CA98BF8F3AD552A82C38B06BF
3412E7634D9B961EADDE27F3C1ACCF9D52F3263AC73A88F84225D9DF1C2740AC
AFE9339A0097A0E40096B446EE1C89E2B53E2DE4B1278ED08000F892E3E80ABF
4429BEC4FCE310572895281C024350FF31CE1C8CE665AF6192335BA7B165921C
E1FA3ED9DEE9F0E211C018E834195B876411A2C717F9813582BFA89BC3FDBFAC
5773876C5A45E10A35A37FB117755467C860A44CBE971439597F38A00B72B45B
39A1C882C019F4AB29286C4871296B992ACD76AC6D43009659FD1C0872236893
96AFD774603A4DC0BDE380CCEE59C9C5945109198CAE083653296BAA677F3CE5
B77275D453DFB3B8A24BFB0B2976660B44B9048F7E51ED76C2E2BBD41E82C1E2
B126BEB51B598EB43533D3476D74562EF14224324E916437C533373053C1CD98
1E7E1BB69CEBB4DA4AE9CF0DBFA127CD7EFEA214F3391670383D894EEFAEC00D
6FD6D5ABAC37B3830F1F14C11A207AB7725E6E45AAF169C1428ED05C0CF8FB8E
1FCE751EB5BDE563FC3ECDCF21D9C2D766ADF0C0EECD52CE85F8A8C30BC270F2
BE002361EB00D6585FCB876EEB63E324F97A227EB06295CB97B0A5DEC9D5B002
419C3F5C7204B3009387A6DE30106D9B63EC9EDE2E31F837DF86543684BBD7D8
216C06D3D1693354FA3A379664F1C4AD15A0318944B73455D293113BDCC19039
FE25C4F929B6AB50DDF07515AE430FD34FA892D3C7DDC4B74E9BE6C86BA8684A
5D1DEE8141EBB0808B6264F8F0FD465BA7A2933812032C7B664A4BAF2D67A766
FD9DF8A7297BE6E00EA1655DBEBDF6A322D93E36E1A026E7DDE3F1C1FCFDD995
9288D3E7A3755ECE8E661F4F6B6FE81C68791E37EF55555376CA11BB187946AC
090E6BA5A92DCF6775B1D7FB826F35BB13BA9F2CB72319CAE3B4E9124B197406
4DB264D666562AAAFE1CE744897396CEF4F5C125E71E2C5C3496E84790C72236
B5C3132A3E0998C5EE350473002D6152438879BBE2EAE1A5E1AEE10146D0B6C9
F4ADEF067696A05889CC5480DF733BC68DABD124EFBF8DF5F2D8535E3E129D77
0B99A993817DF03C16BE0B29D14CC97C33EFFC532BD0DB5848C64E02CFAAB0FA
C39137198D39419633DC3D10FBEF3FCCD1934BBFB3155FDB17A5FFAF17078CC5
E189F8E4E3AAE683EAA09DCE211EA9B5054F601E98AC30B3A37A72F6109709FB
2478095B126E0B707615B4F981BE6495329E00029810DC3C70FFB56A4FD9CE4C
A29435498A8E1C794B60270FC2CB7002F67ECBAAD32130F1B7F509DE97AF69B2
8430EB88008929E18BD80DD191788CB2D408C4FACE7D517A9DD69A1556800D67
65DF78EB482CD303FE61513502897A5B40C3529E4E849896283FDC1EDBE06EA9
0D28B689F96E3FEA51EFAD969BA00E9AE9C1CE4B02F4FFEC30F4D877FBFAFEE9
29845D99F8AEA7949C0BE48444B68A26C991ACA25CDFAD9C2738725278D4E18B
C29017A021FD23CC80EFCB4A17B989F2DDC4F72D1AE91D2777126EC0E706F133
E792ADF16DE256F0BC4307C6A4AA1CA12B373A02D2E663A45F9CAB77EEC50BEF
E21FBE10A972D7C977A144002CA6EB27F272C690288A0322573DDC079C94E621
67138520F00FECF9AB65E2282BBFE8A265B61F316D0BC8B5F2876FA05E38BAC5
D3FB14C4593E5870FCD349A8ED2FBEC8C5B38786A4C07B0E2EACFC2FD935B8D4
E6D95858EAE6528A806900B8FD3038F9221F22FB8A70624AFA256B433A819CB4
B2F836412ABDC1B9AA247FA3EF1C6E702528AB120E380EE7E2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4850EDCB990134F321F1FD6696F64BA101037918C9
F3EB2C616987CEAA46F6C052EB3FF6F2FB9A6F974915B82B6608CD85F75F0664
5644A5E3888713099F73E90FBC9681A6432D6944A68175A656D126AB96DEEC97
7DFB9A5ECCECE68B7C706A15EA93F5FA7800171D760667E1336DDDED349310D0
BB68B865F3E43C4275DFD82036752613F3FC722D561C0B5BA22C873A42C13AFF
73B7A9B8096208922179B7EDF55236F13203049ED2D3A304BEF0120285E9FBC3
921898A37465752B57535DF5054235CB5A713FDF779C161E40A8A8AD8074AABD
6A06EA11E40F1F4F4090C99D86095BE64A36FA8733362A8D4A2273879968020D
41EAA7F6C1A9B682B344B7DC94AAEDADFD1BD39385A57F9383AA235717AF84AF
BF5D808D32071618FA11E2F7907B9626CA16609BFEE67DB56CFE2E2B90BED39B
54D866320877A767FE000D8A3386EB1AEB2D99809C71C946EB77ED556CD01675
A5D45FC8BD04EAF80C756386291444CFC1D7F12BB4B1304696B2080A14F56ED1
959BD60C7F7F5BFAF8497205D4BD589967F17FBA10C2EF19C1679C5AACA4F9EE
B15E13977CA81B5026C7E1EF4FDDFF62E82B16CBE3D401AAFA4D973976EF232F
76C9D0C0793684D68FE95129C326682238CE9807B35B2C2C0C32F4122724C159
AA1C41DD94D0808809572A0A32125FA4D78B525B256291CA389F839797A13591
6197A48D453611484DA293AAA6B62F5ECBC9D32FD482C74A5387629E03895C5B
946117AA34217BC77B1E075A4BB99145EA55CFD1D12CB1D2E72636AE538232C1
3966FC6E07843E4FC7A8FB27BFB4FF67CD278CA322575D7590D77B4E03E63F7A
848E639AEA6DDEF55107E8C5B9DFFAA47CB3CB5A614B77D0112527C9AD97FDAE
5BC457971A70DB3421293E16959B64702BA858C1217A8B3B836A947462E0B59B
37C8CBC667F0052E653D33F067997638BDCAED6DF3A8F1793F71E79A58BEF6EC
47F700C376341D757B09A3E31F6ABE9EB9021C1A6E311CBAB6DBBC8AECB140BD
DCACE9B1E80979B7487BA2CB786018E20A5E0355AA33D6FCEF382799F62A9A8F
F8262E8DE16E9245C61CF3FFE09AACEF315932D79117A513F6863D275B80A249
01CC70FA943FF9A9F5E8D5716835F17CE3FCD6FC5EF10AC25471C19ED3B2D164
93293F09EA311F49295310B0C1AF942753C52402014764CE7026803F091EBA60
AD877E9208260AE6AF24100E2B365BF89C5B679378A7F6A67087C57B5519A988
04735147BE66CDFF2481FE35DBEE9CAC7E77D79BA760EF4C53A3C983853DE8C5
FD3F25925955F36A3BFF3454FF7B226C0F001FCBC5484DCFA46DD8D89C69C886
AA0247C5EE233C9D7DCFAAEA1E34B8938673AA6D760A80C38EFAE41268C528B8
5A14387C3E29D017EC16BE7E6918E11E7AAE31ACB6E85DE4B2B15B93B7BACB79
AC25F37A4E4D1B370E59C78DC9EB4AE83D1CB6E4DF546FBC914A6FF52591CCD3
C464AA14A393F61610D617E196C9252A013C9532C303C68553C91CE83431F239
BE883C519B643E9EAE5142F698F4B47ACE43BFE59E3AA4C8B47CA18016F95C6A
212208CDE1635F4E5271224CC19B6D47261CEBA3DB1E042443B665E915991D93
2209B3F4C86C9763861923B2F335DE040A8C24E73A0DC3FFAD5A6A9249A29AE0
C70F71EA41B0A4A505263D6A6C70BA63EB2814D31DDE792AAD7AEB4FA346EC85
0781604DBDF2EB65869969F265341938B2C7D6B979342D93A9F5A23A3CE8A015
130A0FB817DE38359C63DB215965E218E892C350FCADB5F66EB82D0813EF551E
F65992B2E24B4FC8353951C0A335B53F68A8F8286A94521BEE28D7319ABCDFA4
A21B5DE536B34845B32A34ED5CA1F3D3EE2B04DC4CBE12FC99DA94FB2648B842
54D4FB6729B1CB7E86DB55FF4216E2F57A08E04B44BB36F27129E5E93EDC061D
348F162C03BEDCDF0521B9F31D29543DE2AD436B75778C0489533F3FD5742FC8
AAAA8A72683C54B45F81F355D9D19496D0F80470D6B289B760B6851EA1A9D31C
01577A0026C7929C87160EE0D8EBC305A07052BD82AF003A0EEBF1D6FF38B526
E2EA0A91866201E08792F03323228B622E30142E47BC752EB0EFF7BE8B688A36
22826EC83CC42DCE8356DB43399E6A6918A887A64B2EEE98060E47C0F4276DEC
FDCA976E967EED2CE2C439693E2FD2F2C26823FBE781CE97DF06830FC498BDB0
73AD2CA5EC36B4892379B00A5C8564FC9A915C85B66EEE33EA460AF6141D60E3
76B4E430431F049992647E2B744E48AFD33CF5041056A43F90D0E6A47C2521C1
058E8C66894928964B332A89C5DA71AFBF455E5A68FDD4DF74A8F1572F8168DD
E778337122FBBD1485F73B4EEC2651C3465557A320A0932B65C1FF77F68B89E2
BE7D6D975EEC017C4CC66C88F5BF25B0D84AFD6391E81ACC544000E97C2E4598
BC30968ABFE8C2E76FF1EB04BB78E7BB3975C777E2B2B1896643B51D2D25F3DD
96B454547AA6E39E704842B17E1E8EC5B2286FB19DECBD09D239CBDCECBF8458
FF1AD9E18F9789B2DB9FF2CCC0EEC5007E8D72ACF2D32BBC4DA955E93C086058
929DFFAA13FE99C45BD3E6D13E2003F05703B4ACAB454C6CB74F0D9C95D628A2
62AE0E744AE5D671CDB05E4E8C74D5A790AC0553B856619A14029B25D522EA41
1652D9A54F1D1B22718DFD7CCA5443327F61192D3C6863DF4ACB9C745D059C0C
2180824BAFBDE47BB46F54EDD7D7FBE6BCC41760E7B2BD1AB594E30D797581F5
A0E81AB0F7A6DF463EA4D5F9F6C5D3CD3A1EFE3987BBCDF5458684C134520E0B
2FD3B7606368797241B5BA06E19BE70F4334B48EA578982D5FEB53407BC29192
867A19DBBEAB1696E0E2C1186D0798C1C3A319CBA04421D3BBFF8D46AC997C8E
D678DBBECEC95B1E3EB16DD6D24FD2977DAE76EFB3687808DA0E9B042362B27E
CF0A649BF5B205854F9BF1F07A7DB49C5C9C8318DF97F1C3266753287FAA1AE3
8EB626E9A41CDC6BE62BC7BD4BEE941EBE1E65D96A80F79FDE63FC7D2A4A9E53
638F6962857CE95295B3979711C27FEC43D0CFA62423E3A883D850F4F7E5F3A3
B3D2F64D8C9A780CE75C132DE809E78AF0299948B51235A529766FE954E0D7B8
AC10E08997786BA72E91BA1D2759753E96A327B6CF45A9850AB9E8BE225001F0
CB10F8DD82910F9A54FCDDC09F5B3A390C7084BA4E6E0D78AFDB692AB573384C
326BB19FEE02D4F50615AC4FF3F906E9D890A82B2F85FBD99BFB580F4481CB3C
02B7BE5576569F1014CFCA5DC3043CADA1010266862CF39FBB2584978C016BCC
16E56AEF474C916E6CDC9133E8564F7B6214A94EE4E5537AB3CF59805545ABB7
5134D45257B1EA5466F79ED54CE31B6CB18CCEC11E91273A1462E40CA1C471ED
3E37FC4FCE8F94921B3ADD526EB8E8DA749BCCC7507B2C2269BB2CB006F6BD99
D3015F6D8CCC0B18171272A0B7A3EBFB0508A873C045D666EF56F99123DB8230
B8B5DDE059919E9782026DC6A0B4570A2ED5366556730E3E898596F2FB14702C
04BC03DCAC12AC6F32ED869358177C88F66C2C6D8FDE6D0A18CFDB8EDDD550A7
161D67A54CA3DBE70D361D59302A37EAC7FA39E13B7304F3254E39EC3C293115
4D9B94338BC8126131A6A4306EB0CE8E5ED395975425328B0858CCFEA9354C72
0F417B708625D0FEC726653D449AFDF559CE627D14BDF05616FC958B62CA3AAA
8D5ACD94C2BD0401740C0E41DBEFE21209DD13BB48E376D67890C8348ED94D18
23AAB1214415D55F0490CF4A46C40D188F4E304C4610FA7CCCF0512FDD24CB36
B7AF5589704F30E19C52DCA1388C7F6E8A1BCD23DE641421783E06A2B40E8835
72A5A4E3B12D6C769FF65FC384AE728D7EF335D806C61FCB681942BDA68F6859
DBAF6E43916806483D74EBDBE42893C1E8493393ACEDCB10A1007AA229A2061D
BE986322BA4DD22FF76E7DE651DE14AB02470F678AB16FD06B69192A21BA6EE2
D078871F950D5B967A3B1F70EF4F5B94D1385846EB372D926893D98A56DBA0A4
DEBD5431F08FEDD1135217AC96D8E6DD20B00271236790E5065A1463EA1E21FE
CFAF8926D77322B6D8D15EBFFC5673FBD1F0E09303F8F6B6644006EED088561D
13ABFB757B8E552BD0795515FAD3FBF4B97A6697F6664AC6B6C1F56502557763
05892A6E3E441CB82D58C6BC26430662D2EA4F4ABD625E32FDAAE15B18ED44D2
F499C69EA518C750370797B96D672132CD2BCF44044625B5863BB09F2D2E49EC
313FAE1D5F0AF5D3D0940D0780E8B6ABDBB695031B40EA1AEE0B67BC4CBFAC08
694406BFCDB1E8169EE46ED1FD0594991D943DA0A9A93AD9B24EE0A930903AFF
3578A637E8D41E976F652C05D7FC8FD35C3A2FDA178DC51B0D9F7E1037D75996
C906AE612BBF80F4BD0A76B801C53369EF2AEF19277BA7A56131C3C3E2DB3D92
54363A00BFB2F2B2FFC89E1AB5E0A35453EEC505A64E4AC9B0D19B39BF010C61
44919D2ACDC9BA9D2A1B213B20B0EBBF2BC4A0E37DE2DF804499A2E888F7A612
351F3EFA520C1440DD9C539B4DE8D05FDCD9AFD595853250E9238163713290DF
698D8C6ED56E0810AE5994B981AE7B6F030E18F7DDF6B09AA31ED82CC4A183ED
86D278180D66D97CE9B52FE6821741766404CB5CD95D3946B1656F6C1ACB51B1
08F11594218D3B32A636FB671E4EDD08ACB06E6C5B432D1125C59700548CB12C
58D37F6D33C4FF1BA559FBABE759A0944D9AE66BDDC633EF0ABF651BD35A0973
6BCACAA46BC6E4F8C2F30330B0AC6E3AAF2734B152601F1049466AAD3FF9D4C5
4D0FAA5292F033D1466AD2B28EE18C377E448EDBB082B5A433E5D4A78743D101
AE523D2492EBC0F85F5F58E3C900A43B0115F76BDB75E9FAF644E1879C37A1E4
C34F4CB4FAD1E78E9C6871F23DD7DEA7C7D956560D89C1BD555BF349F40C318A
E9BEA6270F8BE9F7891973BE36DCB9FFAC965ED71736140A0D41AD571329C7FE
54620C03734D1C3041B13A105DF8C49FF35F3B9D8542966F58494C2F63E2CBEA
8A696E0EB35B17861E28EC28D50FADD72A8DE84EEC46E015BEB634516E64EDA0
EBF49A39B1E6E123C3FEBF42BD06F669C0CA2187337E87C6ED736D4835666E32
B69840EF7F14BBB9700EAD62D56AD09A5C7C90D9BB1E19C3D7C3A7E1B95516EE
38062D4EA75913A02C1C67BD2932A5244CFE4D1404FEBE317C761090137F223A
0565DE2352C00C1694F3526F0BBE8E4F5D2C4740B2743ED4EA226F3F70FBAE2C
25A7104589EF38860702262725A0904BCB5EA7C17A39552A1F26283F54A8AF0B
19C6F45FBB3B6B73E80D855F5EBFF6A5BCEC484D35EF5F00953B121F2D290C00
B763D73FF9D164A307CE12C4634683E26BD10F9906C19900699F7CFEFEF365EF
5F6C8032F9A26C558DEA1C921FB40C10108AD5B484A28D76D36FB14FF28B55E3
4DD28FF9F20C92E257EA85A89F59F718EED93425742D97CC0F23FBC88F8CD4E4
AC32C87FCBD73D1561064DA0D11E8B2EB840E1818F6F1CA1D2BBDBBBF4BFE1AE
855973129978F707C87462B67509FF2F88F1A24BDB900338B4131ECC60644983
811AE225AE3362817731F30F60B22B808E0102F0F13104AD668A3656EAE86EB7
E2DC73C347153B9B9135A79D2898CBF5107FA082E96BDC5D82872E30CA63DC5D
4FC31B8B27115E269E7D0BBAD6E383CF9E8D0ECE8EC47CB9D61C5F594F821318
61FE5B721D4F7B49FF9BB5AB5DE2C3E4B7FF39AC11750F165CB93993472033D4
EECB11AE61D7EA7721534D76D05C717514E523E0B7D90307FF79C0CF85CE78C8
6B79D745EDF39BD1323695BE8B6060942ACF0E3339383759FEB56122BBE0260A
619B334BDD7EA54C5BD96F79262F0FC065D56EB983207F1478ABCD112D3ACD5B
4AD35D994B25A9E343F133B43FBA30C52CA8A503F3FAEB2A661DA6A7C2E6C5AC
B12FB054A7F7E2988C00C40D302EDA92F22341D7ED9325C5E3AC9790D355444F
1EFA69BA608179C8BF28994732BCC57D928BC883B8E7606E9EB1D96CA73DB8BC
D3E76A862C33A0FE4BA3C647BFE240BBE58E41768AA815396C31F0A44812EB03
8060994068DD2A826FCE49A38C299F94BAD0126091EF1E08F8AEC2E62CA7644D
AE010536B0D6D72D3EBD3C54FDC1061FB18948B7C20CA00865892DFB085E6DA8
115834CF091A72862D70B0FBD115BE7EBCE816AB40D2ECDB17E15F2AD4838E03
ED4E13B10FBC49549701D11DD0F209FAD8DF4C36C20DA6CC8D6FE62BE6F81EBF
45FDD41114B05B40CA07CFACDD70B4E5993274D3E69AA6F6114C7FDBF9FB86E4
5D6283EF99E3302B40CEB3DF3E1B54F50FC1625DB1987DFAA3AC709DA4EED05F
D8DD83503D108C1640D74BCE72F75A1B652F87AFED67F2AD37F7F65938680052
CED9038CEFD264CA08E420FCBAADFE1AF8356BCEEEBDF0605A719EDD470DC4B5
A78173F07E3FD7A174C40F2366A89977662F52A928522D7DDE76E26C27070118
3E0047942C30D06F2C861472595D93E408092B5D25C568A69F9FFED6FB35F500
B79952819B5FF425210978F6869E3C1D26A3B34E5C9C224B0BA4B135CC8709B3
4137EBE447A68F1A9E8D0B2FFE151DAA84C3F9FB951E4C6A881D35642453CD34
9D40A9986794B83227FD4117B27984A141A4B19E6959808B13EFFC7DCD6BDD32
9EC69AF33E7FAFCC19B3590944CEEEFCB46E6DD65747A981438EAD81C85FA3CF
7A50237BC41CC2B831FAC8B35A70EB34886F37C2D18213D884A6A01B3042CB34
B1025509BC87450B4FD9E8A02BF5211618E5AF418B6ADD311C9EE0B282AAD6EB
A79E856CA2330E5893F1942DEF04E981DFB5879B9FFDAC29EB7EE86565FF340C
EC0051A4EEF6A495823192E78065FD67C7ED97E956F2BEC8DA741392C241057A
119BDFBDC3A0B81B2BDEEB2DCCD7C4B742DC3CF9CAC9D7E3D281E9C58C17E040
B0E9F0247510E377C6F0276C212CDDC0543A08D2E757F9E2781F25A1CC32F8D3
0D9DFD865FF57A91C2F858488B895E8BBB56D6E219891947EC692BF37A93AD9B
1F0BD973C7DC4B33F0B9EDAC698863266924C116D83E19B474AE0A92A80EAFA4
C3B8948DDC2F5C9F7B51D7E0407EC3DCB27150B53313281482B8E6E927CCB6FF
DDBB20CBE08D7F586D947798B81A45B40BF75688F3ED383465412EC695AD7941
AE16EF07E5A3FF885A77627EFB006332DC7EA4CBCF5EB0914FB97C16ADA21CC1
6C25831EF783DE2E3ABBA051FE3964E3AA5B8D06A527BA8055FF92C2678CD008
4F1DFA0EC2AE8B857358C6C1A929FB4B22474C84C7C3696AD83CA15099ECDF3A
273E8CECE1D50D7B576B958780A86E89DF637B777B16C0F388D03F1C66B3568E
ED4311DA1028846B3EF82C41D778B61F367F0F91FD8AFA989EB8BA0CB3C5BDD0
A24DDC0866AEA3BCBE49F32A57A4764E0C948034D90F8FB896D5153BD6EE5364
1BD62DDB9C5117227E44F8CC4B092D9A5273A8EE8AEAEF8F7D549E21A4313141
CC867DD5980ED1DA66B8549166AF006B75763481C3AC0CC33978205427B10564
21979A92FBEB7B5DD5CBB13A886B8BDEAAFFD170672A75CA6D2D249929BA4C2D
ED2BAA764A41DCB7D00079675700277EC06FC91C453613AA0DADA3095C755E4E
EA32DDDA9649EF7521D2F58EE489629CD8492171048D0BB7F0E6E195CBDAC59C
6559274CED2B0F61820249B00FB4364E9B25F1235800DC8E790D62F3EF215E55
9F8E802EBB6AC3949FF9CB12318E20B680A50E700B9A05B6767EC7430FE7CF85
FFA8B3E4DCE9DB3E5363BFA4451E0260FEF3C4CA75A04F88799EB9D0B6E1EF87
67FA6886C24BEFDB1660A6DEBC778814F8258589761269DE4E3303068AA84124
1000637A4E4DE72A14B9434281E59CF308A0BA85985588A0040BC42990D2D767
4A629756135925AF468029CBE73E441D807D7C55B4D4E68066D9BC9716F057A7
9C695180E97F6337D3CF24FEDE2EC799CE41D5AB54453E6A4C7B7F667C14A284
047744C14EDA3CF4C0A13A6CED42FC81FFD714DDFB628CF9E54476B4CA301A47
A6A323AB6C18D6544248F253F9761EADA629C3430A00F5921FC73097D0B47D91
04DE5CD76002E6418D94C8566459134119F76D5908B9A0C959105E8087607299
2404D21A6E25E7A787826AB00BFF158FDAE2D956531EB146679E8D06E8227540
FB60ECF6FF4D884C382B0CDF58AD19805671990839B326DB7673920A2C429296
C1954B4FA074DCB1E7DB0FAEAB0C693BCAB095B9E76C94149A3F1E463005EECC
0493EE58D7114581827CE83C12ADF5CA4EBC39A3641DA74561C63991870F1CAF
2D19998068C577020379CB994D8CB0A57E9F0B89DAC08D3A78235AD9AB1C4F5D
BD566E5BF8658DFBBC52C50A45F16B3214F218B98EEED0E860537BE0592EB3D8
735D415F9565E574B571300C699A562EBC2171EB10982D93A8B6B7ECF1E824FC
837517D46350DB7BA8D2BE949439027BA8466EA9B571B8737F3554E2CA08A329
867C70854183F15FD16270A2554ED192FB078733FB8B1244CC706508454497F8
42AD68DBD9D6D373C2F08F04A25C5ADBF51F3DF91389B04DC1C56AED7E3E83B7
67E4E968204B3BAAD195E9510AB6D46578E8E438FFC41BE6B509B844B73E5867
ED3C57FB3F215EC34D0BDA6BDD5326FE66ECCCCC22E97406988F18537E639DCE
4F416409386A5B5F2C28A995F50844AA65B6998158F0137612BC277D7908756A
336A6D1E5DF13F95F72715128053E9B14A055D9F688B1F4E5E8C3C498E27493F
F1368E57D1D3BB77BCA871A2411CEE6BA44AA2AF44371CA8B9A4450DA76EDC01
67B40151F0D26A10F3E75C36E9CAA4AD5418193E66786659050D6E1F5A4188D5
0BC8527BB8FD0C18F1B7B4C6F79EB001760925C2E0322AD914573DD12540F02C
2D847365CB17325BA1E94864DF4D44198440761FB582ECE3726EEBBCA72B3446
643AF9F1BCD69552B351076B53AF9F34FFDE35BD18942E5AA2C99D424B8AB1F5
A341530C88F6424C5C4D13584225045A6DCBDC95357C0DBA3F35EFB019FE0304
9E9FCCFD1C825402103D9335E69C025475EAD1CCC234F967AA81CD4CCC167EDD
FD894AB246D39134D41DFD7D8EBC624BE0FF069DD3891222CDA54C7892F94C31
BAC285D95A094415358CA9BAFB89AFBEF2079EE97EAD789A1C51A6C2EB39D37D
74812C42DCF57F7A60DFBA63F0CF8F2A6094E407A823BEB4FDBC9149EF33A77F
FBB713B060E40B6E071D6710FD81A5C59D0F9224DA14A90F1747EAAA0CB0ACC8
46F9D65187171002AC31193E578D7527B954631BD38C0D833343743003D9EBF5
AF03297DD12604027FA358E88242C2AB3C7666EB43C9A653D05B8976E23E3D0C
B6910A4072C474AAE956C8FE085053AC0B446833F17030AAA7B0A2CEB87A0360
124FD1504C60DE11498801BAACAFA7B2EB6C0DAAD46801979BF4D84691675E77
C969975DADE58C1A863D53B67DFFDE2F486526094C14ECF573EEBB83E6F9DE39
BD6CC376158231CA2F9C2E80A9DE69E7B499C26BAEF2BAA95ED2BB894446154B
CF96FCAC962C6C24DF5B892BE187B00481144E142E9FA4D0E98EBE61914102AD
4EA8BD547A362687198B725EB5B235A2A0A71FCE4BDD4F35233B8E5AB0F90EBB
C685C079F4AE0E06EC1C6B0C1E2BB69D215A219AB8431BBBAA5E860577578083
22DF216865D48A3DEAF9E889ED33DC41378E58BD33F44D76204AFF41F1F4C4CB
59E973BB06E726DBE53834FFFAC353D691D77BA1D424F359BB33327123B24688
B757F4AD4411072FF3300B99B14DCA4C4FB6B8A5AEEF3AF8D386610BFE936A0D
FA6B0ADBE0E6B465BC273668F22A906488EA35C8C0933C9A22F3F674AC5BE005
8B7AC46EFDCB88007FF162F64ED65962C52C7A22BF7AF3BC490D23DB320B4AB9
0A650D81D9F707976FBF4AE46AEA83F971E7EA37AB0F48DCD67C069ADDB74C63
EAACAD82CB3433EF490818EFC7B5FA079A5C8AB0D05E92A03FCD28BB36E08E82
49BD66A3B6DFD76B2E2739D3682ABD691D17998E27184C09A11B6C2A35FAC32C
EF66F68599EF9F21125AB79005BF428B245443934A6F4676E56F956B857291BC
DA9B6705F0B062A78EFC65E27DABDBDF5B7963E6EC917BC6FE271EE6C23FBF53
2ADEE25F1B7644585B5B5737FE783708345E70A4DBD6C5BC697C3238E38676AF
CDE9AD568319DC6F85E6AF68ED6993A309BC1BE9E1BF3011EE34B526EA480EE2
879F3C845561EB825540C8A5E11A3D7A81DD974BC33EB55CD468E0717B818974
CE8176C702685063F07283E49DBD9FA16BF277FD32FA1257A054A310E10A03AE
12C23098B235D5F448AFFB74D75189773983D4DE05CB5C6CE7C221A203846189
6FF0EBC22A43E4BAECD4A9FBA8B9100A31AD1DF7CE7CEDF45D8D70B5F51BCBE7
4EEC946B4412B0398A980FF85A6100CA4FF10B141522AEFA4CFC0784FB2B6177
2130B9931E01AC47537AD905D0E50A525C31CE5BCDAE757E052FB41B327FDF48
A615AFAE3F3C1C0B6787C4A8EE624C540143A303A5863328670D822220DF7010
49E106F04530708DD1E99417BA30602EBDBB815DB995569B3E9E6F95C41DEF12
83889765C4A31A899598D22EA55DE76735D3C2DABA0885CA723339562A07092A
DCA96F853077AEF7EFBFC2B58332284A8BE86436AAA3C6526E6DB6C905057A9D
4D6FA8AF66580344FDEDCDF9C693C5E7BC811BE21F547C9C239BC0503A5AECE7
9BE575FF8B14999869877BDE34A82A798FE75217B016F08681880D9EA02154A8
F563953B85BED7274A1E87749F6B1B05B6CD5047BF5B6F6AD189E955B170A73D
47EAE72AF8A8482D766DBCE0DDB5AD42EBD6053AEC9EE2CFAD51447F0D660BF7
CFF7EBC4AD0DA9E5F7552F82A6C3CF2AE1EEF0F6378AD6C04DB0CFECA0880E5F
0AFAB2498FE1D79954BD53619CA37601FD77FE30C4CC8BC7B4C3737F306BD10E
E5436208F85464655D3EDD00A965E58A75759041EF377B9C8FEE1DBFD282B02A
A0023E80872307E08BDEE03F6F7368F422D978F54C1C34CB4BF88039971CBF0B
811DA5D0453701393DAB00F5A3EC7103BDE77ADE41E32326604C59CA01612595
775BA3782B16BFCA3976097402F18D4B4395CB6BED4E7D9F45E94CE0A3DB78E8
BEE86BEC0C9B755750CE10F72A82E40AF2A7BEE252F72C3DB36D003C3677E613
4553BB2C4D7890DF8420A589993F6D8F839808711285E9B3E084DED97E6C129E
8DEA5117B3C82C11A247582DF209460F84A25F7DA6404DCE156C876E12918275
E17D92E4772F9A8251112452C18F8DFC654DF8532E4A4E5F663623EC786EE397
76EE06BFD3C04FF933CE48AE61ED5A98C597039C04A95ADF3F80F3C43DE45E63
1F363EFC42D0B9F1AB2E76BD8CC4C56639C29228206629B227617A2BA68D430F
1E8FE6F40F1E04584C8D69CCFBFE7E3062895E706E20DE8096399754FB36BBA1
098CD1D44BAE1D0D3F47FC383F86C8D8E7AA4EE36A4F5E7BE57336A0CC4F9254
15F9F6B65DD690FB23B2FC450E41190FC3ABC45CC60185F0C9448FF4EC6D6E5F
247706ADAF1B24FEA02222D4B0EE989B48B94474AF8EA12E6EEA7D38726F2A18
91340BF1DA9F49EDA513D01A252100ADAE07838F53B0B7C64331A13816323CE9
8B45593DFA570C5289218D585E3957F8A5F1A9FFB71AA63E3D1DAB34185C68A0
3BAB8BE3D59EB3A023876736C9C19F4DC972F44474CB35738074BCB9FEE4077C
C0C49B90B3C7D348B097477DF8C6C324CCCF965C397AF1B7F2397A1F74785096
23114B059BDE45E06DBAAB8396B471856BF4E88D7C1F3AC239ABDCD32171C737
7F7EBD25E5DD646FFC9A23B8BB4A46413D6F2AEF5FD2BA95D15B881127AF1C3E
2C76D4ADB2D5A08ADC1D399DA667468783A676FBBB3ECF535EC546A8CD9E1D5D
CDC5F03905A106BF7AB8E5DF3744C86A1FE55F5369B12A05851331961CD9F24C
DC950217781F9C6ED40C6247A0E077BB143C37E0A6BDF5FB5ED657B3AA5C942E
D0C061CC7E03513CAAF46F3B0EDB2BA4B97A09D1EE0CB37A713AE355662EB023
410283F97B956C132DB5322FC30E5BF06D0F86AD72B1770C96BA9839BB902842
5F71EF541587018C30EDFBF38A079D8C0386FC64BD8C6B3DF99D14037F8800B4
FB8E25701E16A819EEFAEAC7E06C9CD499F43D24E8A1A8197DE3FC168AC57D56
11ADE42414B45B9B2E8BF75D04ED3E6580F53F51C9B08071227756C4EF1AE31F
8C52A8B4B74B27F7370B134CDFFF3FC74BB62F8FBBF658F5D951B6C4700D3DCD
989022884FEBEE9FCA1B8B7B45FBB4F4AE9B19697682E4AEA88E2C9D3762C911
AF08BA10D696A406130512BAE13A13A9573AEB262077411083C2EF9893F61970
61B7E0724EBD5B2D76FEAADC98EA7FD3DE6DA6F86D736602AF9D374A8D11CB5F
883B5FD6AE51F457BA1EA14529BE16F9E7F147B0E3379E2AB5195667C2397E2D
42FEC131372A2D75A4AB18ADF4ED2688529F8DFAE9B530885A508D2B610CA7BD
6C31B86706637E25714A16789CCEA510AB3E173171554DE156E4428BA4CA637B
73EED73871579F724D3AE58EDA57944429061845287F0B83C7F7FC09358FD5F6
73DCC906C7E0FA7711ABEA994A5B62954F2E65342FDE538763E4DDD7B9015E4C
8B7B522DB5CA8557D4A9EEDADC0814487E67AF3608547AC4A69A51613E3E6A46
C9B7B1052C0A5491130E312ED6DCFD3B8EF85867862B8FFA7167A39E37833AFD
B4BBA8D182933E3498B2EFF70B8FCDE2984F8A0763A9D322E0CCB896CD049722
81DF8466450C56E73D1DF1A51672452F58F5C310AB3BC4F61C2FAD7957076797
9CEC35A110CFB7BD27C7EA54BDFAFB92C64EC82EC805FC436052C084816D831A
DA61B11F5EC2A7D2C1CEE14D1A67BCB8C5299DF770A26D72A2F390B82CAF5BEC
EBA08708A3D6B036440DF86ED83F3D39BB928CC90202CF18A994B50C1E24D9EF
BDD34A443F263B41A3B2076595CE2A7DAAA94C2457CC6394E725C19DF00F7DB4
4981E0FE11CD4256561448F6FF68CBFA6B9E855DBB08CB3FF1C008B69549CCCD
6088FADC94A77124E291CB27BF10E4EFC417FDB11F85BC2154C076B263342E8A
6977987E6EFB3DD2AF1E69EC536FB03D879D900E212698367D13499797B79D0F
03B2EB343EA4EAB4D57D768391594AFF7153A7B5D44488220699E293ED601521
08652CB1D729F35FA2851C69A293341A645D78CADFEA384D74D11F9273358E7F
80EE2F6EC03B2BEFCA6E17741DF67FAE0F0348D3C3EA3B035C10887F0E93C157
AAB6B168295CF1191FFDDE2C4273FCED809CAB1BC91BC2BBE4FE6F206CFF3902
D64929BFBA4E8146785C0C82A208F4F8F34A3DA698A69BA804B9AF1FC93FB1AC
FA385D9CAC57566163FCCEC2157AFC8FD8B8D90453682BB3519205D57BAC8E8D
1035C703855417B47E201F827CF41845BE0BF8AFAE8348F559D6AD28E295CF5A
23E9F871159B2F3CDA9654D2FCFCA727506D0143EC5789B071CF0454074929A2
3EC014E6F3D1E6E16D7A0B82E30B395FBEA1DC6D7DFC80DE646F8D21E6DAE462
6FCA16BEFED5CA2206AF0735FDA1ECD4B5C158C66DCDFDB1AD7AFDCAF519B4CF
9F2C38886DB3187F017A7FEC27CFD7EE20738DE07BF2CB6AB91D17C5793A8F9E
DA9EEDA00FBC634995A712AB2E112E3E6AABFC1D6F293F9703A45CC1BC7652B9
E76547827EFD90798F41EFF7AE1BD44C9571982039742230A411A843F1A39E0E
69027796E078D00E351A980FD7926DB858B91872F91CEBFCF681C5A374550A55
B6CB4A316825AD743AF24B4870DF4361030717FCC5768F673007735DFB1DE314
42656FB3A39FD2D49203B02F840FB06091C8BA03B62CF71D52FB4FFA2B181059
096C657BE453A22AFB28D18467CC43FF70D2EB8532A8962EF0DB618EEEB9F1CA
CEBF7299500D3DE70243B75E0FFA4E22B5A0CB4F3B30396EFDCD2095ECF278CE
8CF1325D3CDE7E1676A42E1098F3DB66448653E536A3D89386E1431C515235F9
DA53690FAF7F415B3CCDE7AADBCF72697BCC9D1461D50FF4423FE21D4D2625E6
46CE72588478BF941F1F715E15655DD5CBBC96D888519734F9CE5336AA67E42A
DBD3ADBF70E39BBAB45A9653B24873E7E9DEF64D7D71D17CED0DAB99A669F70E
BC4901DF9C5469C868EFD4927310DC3E3B8C71D54471DC77362E329CB71D690E
0261FC23F0C9EF55D46057C73CB15B8EFEDD59314CB5B5554FCB57A44E19E224
E9D306E08AF280717717DB055E4F3FF49C4E2F6DD48446BBC06BFFE286C366E1
F387AE1AD8923E27FD0132D5F48E5D967396C92CC5641A02B1817656E69FC285
EC1BB6E19BE9B1E902D8F01E5ABE8CB47FABD95A5D241FD3677E133346B521BA
E646C275A7A886D3B30555E7DE52288086AE6C8C6B3B5D4AB4CFAC6403796831
A69FDABF8E5FB7ACA43E545C1129D021A5E90A1CF10187B1C11A39A5F66D239B
14CD8EE411C90A03FAEA298AAD42D9AB73076F309317F7FFBDABE56B4CB2B53E
D9E1E542CA198D45C3FC20749FC2732040F1A77F75EE624DBDF2EB65869969F2
65341938B2C7D6B979342CE03112EFAFED3434FA017B58EFA18D7DEC9E43F0C0
1D800165239ADB5D3E324BD820BC6449A228E70E9C8B66028A6350B352014576
858A26DF969402AB30E0F9C56BF841779D50CD9F54798AC016FEBAA4BD6A933B
BEACF5FE6EAEF85056DED3626ADFB007B1E406F4F4168DFFB79A8A3E36999482
BF45A003B819B9240E0346C843AF00F7BFBCC0993871E9718A75DFFFC74395B5
32A58983B2F844547EE8021B385BD6E116AB4C51D88BB4064EAEF09F3D3A8EF9
7727B7AD57C1A0288517686B4FB0FA31AA050C18BF691A987A0AA0444A2854F0
D81B873BB2862C32834D6F9C78BFAA8D12A21531E713B80CD03A5FF4FE4E6012
947FD36BB2C736225102573D21FD0B03969BA7FDC51AC2EFB424F73D1CB7518F
207500359B651D485E2660DB4ADBB1652A3583ABE38CE55C584D2618007F44EC
CF08FFA71BA3F73CDCAD65BE820B80A22C9D2114BD14E5526FE20FEED119AF2A
B84D1DDB337E86CDADFF3B72732A4E082C00FBD73BC06D82598B1470D5B7A090
6CD92658FEFE5A0ADC08552CA630CAB767211584805688C232D2B236F56713C8
459A2E168DE346336FE0F152908B4D4E14C0E76CEE3C5B8B6C80DD62393F94B9
7579D351D72148A95277622125B11C5F2F7B4B30B38F39870841FDD91E749CCF
EDF6E48B9AB58AC7FE898EB349CDBE1919CC375D1D12A1B06B72A0647E574436
F43A7A7DCB3BCDE6CEE24D8172145EF7B1044CBD37A41767EDF87245ADDCD1E9
4D2FEE120C7BA6099C0DB3DAB9948677AF0CBFD70CD2844F5601EF69F81A823B
74ECAB561760E687C3BF7B72600494F60D3490D9DFC9B478AF69608C3DFDF5EC
927C6E79972AD10D4E8C2CCBAF405F4777D344C4ADF44538F045091160DFD4AC
9A72CEEC99E2C27DE59DBA46E6CD46404FC143CB2F1F7DD34D88904AD23D3FFB
F1AFBF1164062F545BE743C1FF8511CDBBFB04AAAA21C7DA9C8CA81CD3D122FA
B3511F41C1AF79C1DBFA2B4E18761EE75D3F611D602F5B7BEC1F8155D046D0C8
BBE8B77A3EA2591E651BE48082890966E952BF60DB989AF3F538CF0D5D1234E2
DB9A16BAF2707E96D7885472A1F3180A5D75CDC4B045FE299487688D2BF4F986
1632EB43F94C377753D001B0349E04524ED8AC4E15F520450DD45CD8A347BBF3
D26BE7AD8EA3838868BD961B60B7B836E2D9A0B51D2911A7C89234D810B7FB8B
C5B47A1C94B19B13CDBC9293A1FFA374A4B39DDD5B89BB6802C99584181241DF
13B7080F9D41CBE1C2D0524FAF5A47A27E13ED3B601C0394E61734599BDBF2C9
F6BBFFB1AE14C4D424DE61B5E804FEDA47A9608F15EE3B34C701082562B5FD5C
8E3637ECB28751217F2E359CE76DF29E1F9727187F433115C39F232E3198C5F7
90014EBB03B54596529135656805C86E5E23CA1D5EFABBB7C0AF556DF19DC068
E9E6806AFE1E5A4F1E267E79AA613A11636472F5845AF507C8EBA6518215D750
3416830DB0CEE215F5894EAE38B7EDFAFB64C0891B14D9915EB58A59EC4BE67A
1833D36D09821FD14DAF5E26CB16FE2C6C76EAA55B8824C00C9FBE33851813F0
E70BBAF2EF7D72DBBCF98D1F27843B34CDCE3927D43AA3D7106D75A27B059577
4CB7299C599D1E20816A6DF3FD92185E9E4A3F86604E4BD9C8800C055D26C3E8
E9A9557A1C42041887C5E63E9D3DBB4BF0316810F2CDDB4AA18D9CFF05FBAAD1
2DD67E629B4EF3988CFD4E1494A243B1E1EEBC9843CE36C3704818AA57471711
AD16667FF5D741737E2E97C3DD4AACBB0A0688C94329B65E14F56FAC3AB8F380
A19F5FDCDCFB687120DD2BE5305363037B0DAB170804D14F620B90A67F27BBD0
3AFCC4AB2BEA3AFA477AF3C2D328BBBE9576832C8BB650970ED7191985227505
109C1372BE1211C83BB87685F9444BCC8CB4BD8EB7E105C806D8A66A9C7F9964
4744A7A534343F293EDA0BF63C764D5C1F8BC4AB861845BB15924210F52C2AEB
68D2C31950A14708D321B4355A13B907D67192341F54B9B8C2E7820DD8290EA3
5CEE9FFDAD8E9BE063BFCD75A2FF1C89759965530D8DDD0E080EA9BE3146ACA3
809642F36A15449B240EAD655BE3739058B0E0D9BE9A11F573AEEF7B355999D4
9B3C1846FF96CC62C19AB7A17FBCD9E9B6AAF63DB32F24E843D79767C3D25DAC
75B94E159E547E5AFFB2FD99986B944E9C00198B2C1B52F94C37CF22EE2623A6
EA7E66E3AA5E0F3461CA7E171941EC1FC6270CB8D3EF0FD1797D6C8031569307
5376B76A3C53139A4EFCFA9EDB2F66B18080E786ACA62C2B01B4C51C9AC40335
F316E9429E354FAB39ADA974EE2646626C4EE633CB90A74F6F7E71AAA32B886C
A27992DFE071BD87F19ED84D2BC3F42B088A661E6B382F4AB9CF6E188EFC060C
E474BB5B793EF3AA8FA1AB6CC145C6441509BFA4DBD1974479E3AC52998E8F6F
0DB55B4B2A14A3595F0C054E96CC44F07ECD4F7DDDC8B8EB531837396EB53797
F500190DC79AFEADA81153E999076A8A0A6B068B495CDC26B5E3945B7EF64E29
2B8EC3B64B6692602EF62AB10CF64A245B35041FE1D9336A7A7789D5D4374352
B5DE36F619D8CD8DA755FB1A28BCB49BF136A476ED8EBCEA38BD1B340136BDF9
AFB2AD93C18D988667F9FF341C1F9F02F761D18346F6B8B6234B1AC0824674CA
C241CF88B00FAE14887BA39584879E241164FEC1D2A5D481A586610AF2D2336A
2FAD80B629C05F7217610D4A8ABD54307C4E1FE514CE4B9EDC9F3C088B3B9318
7E885AE2C67A80A50820E775C4064934FB530B35AD9155EF03D074AB52AF7850
49538CED34E669A162E422B331A3242DF909297AF6BF64E2449E35D6BD1F33AD
AFA690ADC8AC689D7463B31BB0C4EB41B43E78BCF52315E583A47B7C8A6A6208
D58E38C2F4F8B9A096FAA34296A1371D0CC70C55330D2AB67B64E1B53C23B479
6E5DDA4A4B796ADA69266DD4B1014CB06356F7E48B33A35756BB5DAB39144159
034022D70A422C33760C6EB61C196A29391BF0C7FCAAB828BE872C8B6D08FF9C
E3FAF64E265991CF32B733C2C647E40D994438354CC6B6928914606D219B769C
35E6F8066B42CD74CA092E9C32A4E396C957474C009797AC26EDC6562EF32AB2
38F8DE30787212E1FE6DB21816960A3144F089B12B22AD016CD039F3975C8C8F
279BE4D1B6B28599B2F66D61DD8C34D8A7DE0CD3F3486C32315D2F64FFA9D4FE
1E5F959107DB888C126CC40B52724C6120D0E2C60109743334A986A7B25F6145
8929D80FB626B67AA4537C7FA270DBED2A14005B28DDC84C15D50112D075CD03
2FA273B1C3ED6AB8EDE5C484BF84598BA1571E42F965BE166C4F4EBE6CBEC7F5
8247EEC1668C8E7AB9EE2B11BAF18374DEE98D644FAEBEF322648F56EA150A59
11EDE35EFCE34DB39D8690F6942035F22B85E22C581A88AAF49EB4F3DD609CEC
750422ABF7D211D372EF5A78DB31B51CE443102FDC03E111A25909411CA50F33
CFABD9408F85B08157FFE110B5A2E57D52451A31F998D0F47683C563AE50CA96
38906CE916704ED5BB6B9B29495826EE7FA0C0554D1195DFDE5662456DBEA0B1
C95AD2FD9CBDA80D115C7A52D58B1E2A208F0F1D48DE9B6BCD9D97A676BAAA61
0F62A9E2A9156C26BE91DA9C5E499348281DD06E89C7C54AFD5F0BAC406E938C
E0C18D958FA12D247E374780AAF49289DE4F486312DC6AE09073B38E8EC302C9
23C417F577823C02104440CBC84A5F563D99FA2ED03C47643479D4F97267EC2D
27B7DD816AB1D62641F2F1DFEA315457F7067EAF4E0753DF296DFCF3BAA12418
53DFB22A5F6ED753E21559FA2EC96426FBC4242F81435AF9A1DF6EE710CE7CE2
026321DBC4AE2F95E33FEE359779856B9D80E381DA461747BCC995E4C94DBFEB
932BED4F03B50DFF2F3CE5F5CE8A0ACDFBD0E87A2EA9DAF365763EC4B399E926
7DF174E6389B8F7471FC6611969ED057C26E9A9330FEF8F321A6F81C48DB804A
29C887F4C61355BEC3EDC1989F429F851FF1761922029E6BB3370D333B0019FE
9B712AADA29A80DB52A3258F4C58621DAF9EF215C3A3778AE67A0CCE0FB924E9
2F9491CC76AB38250F3ED5F296245FFE6F2230E759C76C23D6145E89581D1FEF
625DE851401A0899E756D01DFF5CD5F05E069C0768BFCAE3066809F8D03D155D
D79628C63B4A8A1C59ED895FA8F43FF42B04A1190B58818B714DB8B9F65900AC
ECD700739F954AD5CFBF3A492A2F69A33374DB0CDE66835065555888FD7E8370
7ACF013B009ECA3DAD6839B597386E852EECBE1E315834B8155662A8E9366E0B
EFB97591F9BA5D835B77624B250F7A9E76DA3B40C4FB4B25956D8E337BDDA9E5
5AEF3F2855582D7AB89D17F3980133BAEC94FA47FDE1110E02918A3B5ED9CED5
B439F24ABA4B9E2F52ED1DC129D713FCE0251D272303EFD7AF13A0F0E25B3D64
2BBDA643EDD9B375C2FC9A9C19B5A0F18B3C0F5F235EA956C0150F111EC5F50F
289FF5C28A72E8CE7A2AC0A21775C4C7307852392C4DD017E0D88D2790F1B908
9C58BF53DF6EF0996C8A92677F95421383C00D76EC469310DE15A1606133FA94
413F30F2318FC83E961BE48959C0ABC289CD66A64C24D2932F1618B53E7EF47A
258AF0D78F1E94FCE93880EB1AB8B0880C8D08EC248D145E1E4196C4FFFCE15C
7A490F418EF253DB60E97C2A712E64B1AA99B3AEC90045F0DF4716E912A1180B
DB609DC37022D4ED6BB8FC8308A8760651D019B27D2761B0A1F57708DD61C292
B24CA73F3EB7A1CFA61050C89764BF440ABF0AF45BB6CA9944962E09541FBB7A
00956D1ACA7D8C2350B501B3DAC7E417094DA35293F6250F7959BA7FE2053AB5
46A8A583C152A2130F5E79D4442574410929529D73E055C8D2728DC368AF5375
C0F83B7BC645A8677DC123A334F43AF5FAC80A55BE433D38E788DAB68CD8D813
AA52480FDC4BC70FD433D842B838DCF8944E5F822B3A766253D8C04CFE1A07E9
A779709DD245B98927CC32DB533F061EE0F95DB2A19AFD4D58CC51B932B42FA3
4B3AC889907D6BF227353114FFA0707A9F8A709D5AA5732EE5F578302026FD56
EA578E6B8C01908F281BE83668D9715871C53A42F79BBD7E6E530C8B3ED3DE2E
FAD93B34655482389C21F3570F0972F4F905777E8A974915A55C0C63721A2163
666D05B6CB85D78B7F9C7FC796FDED5BE7ADC20A70E80C53356EB45A68620166
AD7193EE1B5921228B1654A3B35AC4E092E52052A2D59782A84871B30EE4BE44
D37B498AD69D6D07E7BFE5768AAC6B7E6CF6CADA7A05A880F8BE79BD40553E96
6B7AE9AD4F5B979C9A7828D60AFDEA209F39609EBA0BD1FE89234DBA4AD8EFE1
4EA5AF59093E2BD0287A3C313E9F0148ED94969D9C91FEC54373EF10B50089B6
7C723B0BB1AAF5DE28CC5DE908E2A5E99FEDFE0FF45D8361080E7EF12B5D1C2F
7C57F749B506471AFA6F5580341643325B213AF6BB8DF120A39C25446A38340F
7C7A9E49738EEA27B73AF53441C90C2114ADD55D2566491F9E79AE3C6B7D2505
6665998AB7612444934088FF2FEA91C4C9ACFA21C3CA9EB3F9CC21013C0AFF3D
049F26ADCC242F0D9CC02F1BEDDFEFCD51854E61C90C5B01647D23F7A63785AD
2D9159CE57DAD109F91A73E6B2BD300208AEEAB22574BABF66B6253AFE499478
42BEAD10DF498DE6A9EC8162698EC8804F4A189CA05AA0C5F8AD7C035172A016
F6B8F26BCA383382384D305C4433B26C0F14F17E59A758BD75CDF53A942963C9
B2584CE14922AAA9E3456AD60EAA40FFC16951E3D2772F46B84E908CAECA64B0
9A6B156DAADE04197FACB989416E6AA9FA07A30EB80A9F2FD46685F0E92A3288
EBFB3C67AF740B3FA1B24F6630F31E90651B4A53E8ABE6A6FBD131E1691F749D
EBB18A5B5B90D141B74219A75D70CC55783504075A5F0BFED5601BB39A48E46E
D4385CA34363BC35D052DA9CCB5F3C86898D53251158C8CEC474C2F2A38D39E6
403F53174108C5B4E492A9829DED91405A8F61D74734DFF0EA7360044D93172D
F6345B42DD7E130928CE16EA22D8CCEA0191ACBEEC69186A7BD4C29C3CEDDDC7
504F546C2DED0BBEA28194291064F36D62ED3C05393DDCFF2297FAA4EE324CCF
F0B65999F5BFDCF495C2F780EA106F365321CE68099482B31AC5606A8010FDB6
92786E3940723D21671BFF6A5456AE306F5FCAE993BF8E0D75CF295C68091008
6D669D33CFFE404678A3C19701AE4F05D267D97EC74D69DED008BF5B853A713C
0CB3F71E6BFE6B0A78BDCF3B523ED8B3988CF338E5B1AE836D0F0E736BB7657C
F2A4FC99903C54C447743FDD7A68BA6E2D149AF2BE3F3F3D5F4E84F5448D473C
EF393DDE88DB2A233194730C4259DCE38F5A5D69E73805A8C6DADD339CA866A5
CFC0D0AE2C023FFF8C86A82676B1530D2E73729BF8BB9B40CED2B77D10755450
CE25CD7B003492DD412021B0B0B1BE66CF0F1964B2407BD7522EEFAB234ADBA3
F34AFE3A12649DDC82CFD615CE70C3AD06C3F93CEF6177954C5CCD85639CA85E
0B9CBB39B7FDFFF0ABB488E7045DF33975EC34387F5E4BC4A044FAA3A8187B90
A553B47F78162F06BEF71DF725CCB4DEB8C1E598CFA56A73A0A9048716C3ADE1
A5967A729F7F68AA853D2A4D719C2D252E8BAE01DB1E8C153E36092278265050
D25E49249001C606F5B231AC6C9C2F37E120CCB7CEA66EAB27FC198CAFEC8920
41350A0DCC5917C4A73BA22B047401131603EF1AD7BB91A5A8AB01C4B9E92B94
8B5D6CBB9F200BD9B048C75B975D7616B072E0EAFBC43B2B3AEB62C3E312335C
3B1D61976E510F78D1EBFD2F365A43ABE49C2D761CE76DB4FFBF91BA089D6E65
05569929C144F5CC164DC3D048350D8BB33316177D9B58014F09A859AD9FCD58
79179BB6CBFE528A33C4E84D465FE6FB031B48D904C5120D41EFFF88CB67DF1D
266655E2FF6B267ACD8E1FD4B60845AB956BEE7F16537827C936F574F6FACF32
04FF472A64BBC5D96018C90CDCF15D946339640C092390DDB31E1240DAF2054D
91E1B1E6AA11CE801B7A8D1547951ACA30AB91D87F6294DB836DB14EEE1057E5
C9E08EC2A6D2555EFF9FD622A9C9D0E2FB7080DC7C4B1328C68D25D4953444B2
9D7CB004560D0685F73E8772FDDAB8757F85D312B3C0056F607C2F368DC2FBB2
303E5FC195A42741814FE0653D003F4AF77ACD1B3110DFE711E9880F32325AF4
85AFF1AB405004CA0DEDFF110AD9468A0E47FF6ED8BBF620D38D020557C277B9
1824D544A070C12B23B4A3F373E18A9DD16830E2806DE4BC8000E49A10A90196
DBA2DD7079F8F2368FD8D8279CD98C44DB6835A58B78624BB8B2DEADDD475CAF
795663765031E331E896F5C51B59334FF64CEDAC3265364A4E39DFA0D9B107D7
4685F5AB4E3CCACC4992FE9163A2E9108BE6E81EC8F4B81F47C663D069B52258
FBC17E643E9488BEB1B92177BACD6AE82F973287D665504253CF1735AAAE1ABC
F4128A9CB37A533E44B181E3D5C980758432AD3DEA9DF525C7577F2777C4353C
1CB1B2C991E35B1B8CDAA339F9BC3E575CE433B72C57040AD12975FBC71D755F
8F7DD4F5E2996046854C8AE2A3BEB21B1A20239265A61C11462A034CC5D3CECF
547DA412A39684DB541D8D299C5CD564B5D7640752E5E0A538F67EB1148CEC06
85CE7002383480D234E2459CB363295A1E75BDFDC9405351AA3D4C586744EC45
41479537B9172756F72C986A30B168C8F410A3C0943974412205963B90EE8142
3B8CAA3801B3EDE7AC960DCE8C6822C3A5C6281DA79BD58C10F8E3C4E2908090
A6543950093B5BC70574DCD936D1472C08B6AB5593A0EC39F7B8B5A5F4476BC5
BEDDA0E3110014F2BD0FEB5381EEFE91BC6AA4BBD837DFE6D8153B283AC74894
CC6482A1D8498F741025BBF65F3B821695C0BA2A16A56AFB0D463B442112267A
63F8A23149EA978469F567938D322531C5ED72913EB9E1FC07FAD85429755092
58CAE5FB8C377E15B1CE2A7B98A776DF6FA6B0485BFAC42D7E23AE347A31E285
08C532845F5DBAD5F2D332F3EB0467B14C9893585ED5585B1783B68281952250
22EAD7A88C2775904C37733AB1F25CBC8E52CAED2B17C79ECD8361FFC431AF98
E56E7EF538EF6AFD5F5AEDDF552294F3AEAF6C98EA50FC36DF24F2008D619DB7
5BBA85281C413245BAC80142645EEFA68F64D2CF9B4EE9D6104CF88E9C3539BC
B1E52279AF674DA3AD4CA9A4209F6ADA1740C8B51F3A8C6A8448E7349E0A31A5
DC87E94A54F82D87CF7B6E20CF332F7D3BEF3CD59802B00BC68981047E34CF6B
1EAE1EB6F821778C3202D3D4F36FEFA72E11FDA4C818B0A3812B714D90258143
69FE71C3973258BFD5EE9253C6EFE87DFE5A7A153BC3AEEF9A0A9D6EA59BF550
3815316CCEC39102AF9E39946E9DC32181F2093D4E6B9CFEDBE610653497ABD1
66DC4D5FC755ECA1AE6328287759D3F3DE5DF99E4DCAD94D2642FD596FC4F3D3
3AB2570EFB504C857E54775EEF48EC95143F840625ACA63644534CF0E8DE3B2E
3D4508D1E6C3F4EC3510619779B08A7375452187D66B2A42D3F7220D3D16C17C
D2F83B9710F58FC3767D1B5C83CEA7F0A8915E996C5D815937844308472DA922
9030419ED96BED352D45F8249F59C1D8E64282FD516A547BA558E106D238091E
C31729418F635A6C340639AADBEE3D1D790DD8021B5A687D8908F985795BECC4
A2A263B7324F231D9898D3B9A1687237C450949DFE8A3AA5197AB7E3A91418DE
E4836924D044034278BD24C6D12FB14CE9B794DBF8E2C31D7DED9649310F01ED
5711ED4949F93F6F8369C3B911A39F2F9910911C1B892039EDFBBD48A90F706E
EB6A265DFDCFA3C40D46BBAC13A76A863EF30088F1E2C5887707CD485CD75B11
45E286DF190406409E997AD5336173B74333AAB5A8AB0DB6CC37838A6472C601
C215037E94AC894641A15245B1B9FA6290F8A62EF9125695552C33735B088624
C540CA9FADFBFAA83746C399D11C8CD50EBD39ECE9F7A47CB3D09FA6C4598963
199F10E1B486E36AB9EB37AE177BE3AC0F79F7D3565D0FF9091D224A0BE12BF1
9F76E074FC0FA712F94136D1DED57277191DF9F21C8F99A8771958C008DAA966
9FE5BD544BA558B04B93A4A6A198C04DDAF015EC8135543423DFEE55247866F1
E97A90D805E4B1E153BE677446E573B19B5E1EE71637C1DF3DC8FBF25138FDEA
9D060440CDE8F715D34B03AA89BF72D61E1FDAC3E5BADFAB94E0EE22A1890B78
5D302C38EF8C02F86120E587F7F3E308624130C75C7F9C638FE616B4FE7EF39F
517A6D2F788DB8B052B449B2C401E18976E5F8628E21B2098787765488A0BC7D
A6FE56FB44DF02452CC4BF7E37F9117E9952AB62A14289BFE2575672E1310821
155B824051900D43F09BEA09B37359A4EF5EA889861CD9A7048BE25A76797B7E
943F4F074BCDBD82DCA84E8671293F89071DC4683E093E2F0FAEDAB8CC9B6B3D
BC8A8BC696EA82AB8B717616B552BEBC1A6BABB00C93482CFE716EF0128A0883
94401D4E8B282364D00A486A0709532747C9160EE28352D87D86AAFAC7033B87
072A685E79DBD64EDF2E9A22828B6696F620A8D9C18C040DABCD2519424A7A6D
C9E950A01AEECE4BF3919A485E3ECC474C3D8B0EDDE2C4046215391A08721CE7
DBF77034F5B901BD533E5C7E3CC5C40B83B3C035E9C897B23FC7B2DAFF6236CD
773386E362EC787B18DA345FB5F045225C94BB5642ACBB24B738DEB7E0F2AEC9
4FC04B8D2004835FCCA49BC0DB43A773177FDB0480A2CD39AD3897B3F05423A2
5F3A15AFAEE80393C80E0863DE654FFE7954CD1D27C703275D956A27432C6DF8
613862B741740F0651DDB9E1E058AF15FA5471EE508119474B639EAAD0B49D1E
00B6727682B144E5A0BCAA48A472001B4185D5263AC2A476CC1E83AC137591B5
122F0BCE995D9D4EE4860BAA23C9B6AA555E2922EDB5B12AEF0F493C52096232
783EB06377FCB3E5686C79DD1C174C26DD1D6C06B1ACDBA7A21CA119F9F2EB40
6B2A959943135BAC0AC5650632CC14EC6ED90C2A07BE636C326A8FBA18EB232B
C143C6A6DE48B1522748D4F5BD7BBB36A5A543C2122F18ABCC0D24CC8C08E707
6D8D7079F3CE1AB6D2CA0CB8CB8E904E7535440A065493480FDA1C573E2B7AE3
313B8D619B84DDD8CD3878A4B306950873DED3F8B9245FA7CF327CD80AA98451
165EA950EB7286B0D6A09F0F2932CC6014BC40095A70E3535A76A7B6CB699145
88BD62694A5DD0BDB90C60A5EA34DEA95035262B4E0486D6A0CA26D77F403C06
D65B7394BF1FC7D06D3B88E2B703E33FFF9D78591EEBE7AE8E745F8986516494
5DA41569E1C970503369C085644D1DB7FAA39EB5F85C91B344893224BC9F127F
79622FEB4E4ABF3D5EEBBB1E1E473E9A944135231116E7E2A7145B00EF2A71E1
4908074BEDE4802290B8E6DA781F648BBFBFD9859BEB905B0B920E2247850CA3
9F16B26E5EE14DF3736A47708481E29B00C86C7DC9FCAC5AD634C02C8974BE2F
CD37F7333A585F7254F3190630ACFFCDE63ABA3CF20436472D2381DEA09B8B3B
CB109BCD72332A948726E4E6A8C24AB041F3C6E2B44AA95479E4E98133504A40
8D927B6D15C0293B8F417DA7D574D83165C98E4FCF77390A25158AC6596F4565
6333170F697E088ACB6FAC5A2BB60D4FEADC846E80E90B0115532DBE216FF5DF
786A047253875DAE598DECD3C4C26E19284730BAEC36E5EDE7273EF9BFE6410C
EE3D00C4493AF9F83295BD84759B7431D66FAFB55B92D9F7F7887E49FCCF051A
2EF3F5AD6A7D04A6DA2FD810951E80B63059E2A37E960982B14D781846F74A70
398BCDD71C39951662FBECA7AC75262A2445B85A5BB2D5E9259665E727EC0E73
2F575B4B72DD288B255DE285F819A2D3DD3B2AA7E5C0CE78025DA66DF0733077
9615B055AE00CFD2C2636C0FFE8BCDBE3CAE02701424A6D49E4F4149BF0A4769
85495B8E94E473052F20C5E417A6AFF4C5193AF4A23A6E5306072985B6B7FFD1
52AF9EB2A58F119235564F4BD7CF18486E33C6AD14424873AC449198C07C3A4C
13ECA61A8D261B3A74307AAC38B50C0E5526688298A66A0CF1DBB35482658BB9
D32B03BE83E191E70788CB57C2DF9E1FD89F2F8CEE388228A2A1E2FFFE98BC70
B1438EC56544F80033BA27F488A7C01DE9E12CA99C22F5515FE3AE65A05B6EBD
73A6F8C71AEC5523D2C03B7FDFC319EB39A15C0F25BE8979BF2DD2550A80ED96
EFFA1CF7E9931B513BC78CEA5E1BB76609BD4AF58D9A762C08F90E36FFB6BCAB
29E85C972B928314647503C61F5A8EE29C1149A2ADA009776E45AC9D34BC9496
04D635C059254BD934A0CC5F403CB09F7FA95067B190C34754723C82BD3A00C3
31CD7A43C0A67E248D6097F3D94233FB04E65A721177FCA5031CE4BC532CF815
79AEE2AAD37CAA75DF1EDCEB25144AD1A9FD16F9E2EFC5FECBCF0AC36CFCCA64
82544EAB11ED0AC9ABB1288AC7CC5D3A751097209868D0BF9495A13475B59440
7A62D6F2B5CD4C2C65ED26598D3999DE038A1F3C1583AD484DB376A12346D838
4C5FE9D763B06EB2B8E92ED5EC7D3089107839390625BDEC4C96743A5C20DA6A
81780AFEF209FD02965BB82CCEF54B4B689DCAAC170408185E91647F364BDDD7
DC57A2654DBDF2EB65869969F265341938B2C7D6B979342D98A49CDF16DC6A00
064D7077F2DEF495F3DAD5C26B046739E9CB52B350D466B4D20EE18B13834E8D
337B71AA0518F03B7EC414400B981090D4ABBA3CA1A3F1589C68D4C44F922B40
227FC0155005DCF3B8C87E7A4EE8FC601CD89A64CC8FC52ADD6E336ACAB282AA
D6EBA79E856BFA6A7F226107EB7B31F81CF5A08D19B92EF0646D2E04D6B4BD26
9418B1FAEF148615D78265BF0E0150053C6B0404A8B0EE013E80D4E092D8B162
CB1794275D6558A47005EA5058AB52E913CBDCE252B20E618A37188D0C475BA4
87A4BAE9CD539496AF6E50C3662352806A64F734EB4D4E85FCD8DAE1E7315DC6
41D6051E47EBE712EFC665D97DC2E35A7452CDC06460EEBDB06B8C68AA4F5A7C
E0CF3A2CA57FE42BB4D8B1D14914D60D4B46D9580DF995F43276848A63217C3D
E5E2DEACB843C103D20665114EB1B7517784BDBFAC667AD5080AAA19BD1522EB
9FF70554D114AA878E6791D2D603A9F27E558E396EB858681DCB1B37118A0B30
CC1FEFA6199B33F3C1173535E17C888072B6415323D2AA1E138960E3A2FB77CE
97AC77B38AE2123B7C9A4B24C0499FB1611320491A48DED20371FA6B07BBD7B6
C32B93B36DC34FFF3749BBF1AA29F3CFB26E89936D3E6240AE5708521AABA051
BCB83CE53A6F20F31EAFA92180BFD3F7FD1D7C0305D67A11D28A41208CB95F5B
7169E7DC255D9507A6BD73C40A0386907A14A801FA80AD101DF51A51B1902F65
0D61A0914635854E9607A981BA13994FDAA2E22CEEF3B0CE5DAE04E52EB15B26
9F539D16C9FE2A6C2AA5B036CC83B4DC6812E80C8B3144033DCCFF37BFE62B74
1E9977A0A271DF68B1E5313A46F995AAFE9FF793254C2B78D39BA3E59AD1CC77
63901191CACF97B56367EF01CA677B9DDD00BB3A779935CB4646CCB3F20DF1E1
DBABB78D607E9EE69BC38F393C72687074A49C82D6BAF3394444B563B4F6F79B
7470E54D8697D95604DF136B7FAFE91B94CA6D8512F48DF5462FC528DFDBAD35
0A871E159F9244B06E3B4EEDBB921C5ABCB503AFF4EB29DA18AB986521CF721B
28720D93BA96FB1ED16217509A21B1FE939511C13C1B20AB663FE26975E477A9
E887685334CBAB0202CD3A110D4F1115D38449D7BF21E585C70E3511226BD739
0AB0E3183922C055CD4740BD31A9BDA29B8D036473E7C5FF6EB74EE7B684B298
62F343AD8B98EFC32D0A1F2ED51B7A46D69338C1F7697F302BAF9183DC66E91F
CCDF996FD7D050F75E61DB3972D1C2E28BBCFD2E3D14C2F615B90B6ACB1D045C
C74E3D8CDE175BD200E61403E70ED416C5B52DCDDC5AC3E7100844CF77E73B7B
02A4018ADB15BCE78F8DE270F7B348422F11954A21977992FF67D0F3D800C7BC
4E5C17E0B6F539943F6C0FFF0841A58F5B2520A742EFA846FA0C20213DA991ED
3213174061E9ED3809498EAFBBA84568FCBB008500231C111B9BC5F9AE29CFA4
EA604E9706868E3BF3145ED75977BC166B833E1C716C58C3F6C24B5768A28E6A
9736AF7A7DA403253A44AE47AA3B8123A7143C2AD81E3335315027D56BA57A85
BE25266587B52BDA22DEF72FE2575EFBC3F9FB951E4C6A881D35642453CD33E4
28E5DE8EA1689CDAD496A73FD4ECB6E002F3B71C2CE05EC23D88B08711D1C26A
6F7F23E8A326AD8435612EDEEF01D2F599B2E445AC2AC7B230BAA6AE3566859E
68C63240B3D3495AF4BB04E2CBFBDA1D46AE8629363054F858E1ABF68E252290
84C994F74B14E072C513BE730B1BCAD1568D30D7FB91CE7D5939207416E9331B
A1E905414EDE19B7E153E9CC56C4B95E38AE2884231EBFD6AFB8D8ABD8ABFBA9
D53C42A61026E5BDAF599739777120FB450FC341D125DA3A11FF534B375CDE3C
A6DD7142217054DF3CDE98E3E91032C371857174769685BD6C650D82FF2DA214
C6CBCA239D767C972F4D3FFBB0FF94A037EE9E3BF39D6F288FF8E42E005745AA
D3D538A290FC43F15C014F5513F9A831881C26AD3A62CFEA647A6508A8ED9C37
3B50F55A041447594422EEFFACCE6AF7CC9768F725908A537FB7E6C9492C2FC9
F5B3B18C4FA5BFE8A5C213138E03D9465E2180A40A1C23A9FBC0897F01D7B319
FCCDABAA495A6B8B8F1919AC158DC63FF4600FDF993CEC2AF1B956D8D8F25746
6803DF558640D82C0BFCEE123E35F2D61349062226B47B9CB5B4EE7C60E3FEE9
78CD4BEDF492ED007AF10FA3426B053D086014FD45A8B9A857F2F1A452797055
0DDF9AEAA3DD5379376C15BD87A3B0753B1DD0627C5E37F1402A7A77F976FFDA
88226287AFA57C08657E59A5C8078FEFB8A0BBD19F7CB5B9FF5C6BB1C894E728
11402D547345F2061C553B519A9F135498B0A090E9A33742E2ED596C35A87934
55FCFE8EB2D6CF6BB8019DD284E6B82BC7CDFE0189EDCA472BDD5A7B8E16D11C
C5D85F422BF5995D9097EB61500A872F31A131A36BF2699E37F9180F3E81371C
BBAD448E0D0D9CBD39F5301FE564AAF893792122174BE3EF37A526CB17C1D2A0
E408AB6C93F6BD15331757EC9E50EE434084CF308B047CD43D85ADFF54FD7278
9EBA34CC609FA509C6886BBBC3E7323C66065826D34C38C598D8626BFED7CB67
2F132E065E388D100FB7BFBA84A84C9BC409B1F78E81309A27289A7C804017C4
CFFF374D1D7CAC781DF958042FCD04C2FAC2AA55214830F8D75EFD165CA312FC
1B0207BCB90441EC59D1E57CB61535E56121B29718F758DA1570B980F3596906
C0D7D69D800789533D3BAF64009FD11A081790132252D68371D08C9CD4D8835B
EF91F5FBFD2F3A488F7C144616D7149DA6F667EE13B4F6714D41A2D01FD300C9
1B5F5A7979906E7215776C277A087496601E91FC5E8AC509B9BE9452091EFAE8
9FBA64D95F0CCD144DF4E78F988FDBACA12A267EC5DF0634EF151BA2298107B3
0E470322BC840BD375490CA2C9A62E6A0087E30C8F91B3991BEB10B121C31DF3
A382819BCD7D440690CEC6D8F706168889EA49BD5A2DFAB27F34703AF3A36146
7D0F4BDD30DBD01665C86A6AFC2A77819C0C43376BEA19619D33120D78A5BBD1
F4DA65541E52F4A1C80AE684E56726F52F4A49A022808893BADF81E1CE40466E
1726819D04F3A68EB639C62B070461EC82931329F8B84DC8FD0713DE06080C05
7603ECA1F8EF3A203056BC2B3EA0F25725BDBCF5F2AF478C3C8CA2B2F12BBDEC
D52225B2FA6FD6F5B16CA72F10CA8A668887E85CC5EDFE08EA71D7BEF7E002B8
46C70A044641BC9E2C1F25C4AA02C112952E003B3A58EF11E937F248AE52A1FB
A980B9D431F172CB2FAA0C0BFDAD40BD3AE7D647B0FFC92EF531F8172222CD18
1FFCE8712BDDAD26D347D7F773575D75F9E90F13155D7EF12E4680AEF6C8EEC7
9A9A808D605792F85722DCC734C7BCC1532ED629EE23CE1E32D373B2FA3927A0
BB82F73A6A99029E5C0CEF1DBBBFD395DBC847CFC3ACBC9C4F94EAA7D811C6B8
B6D6DBCB7E571856E1F1C509A5CF888C544CBCA74106B81A74422A02DF15FA0C
223FEB058D833066E498C82811CDE551ECB3C8DCC93024F925D8D6276A1D8EAE
CDA46B81006526ACE68A28109E332454A36908D20F3953C0807B3E840E1D1D75
5B40C834FA1B74C380D0E850E11A43ECB11D072C15A3A96CB17215459E73C4F5
9E9819CB3CBA15FDF61AF966A8C18D2FB2ED4FD173B13B30C581527893D88DBC
F55453A1FA4D712A4A10E5C27A27B59664E856EDDE290103A0D490FD71D1BB8D
5C6585CC4C3D373AB6530B16F574AC8B12D71424605ABC8E80769A51F6D02061
86F857B2FB2F403BEF0E9CCB62135BF116DD8A23AD2C2B39CE01BDF9463E1EC6
70AA83D699485A7E03E71DA50FB2096EE5DAC923CF13413894775B2DF1F87192
4CE2C0479EA8C8C337504B6B247D4F770A1E34F0B0D3E761E0A154DDA036BA52
BD5F70CA2D1E3414E21C20B8AA569E68C1FFBEE8A6DECF438048B40AD9A7B337
F96CA3C6E1D860526021EE04A8964C1D28ECAA06AAA93D787053C99CD4A4BB93
6F109F74F08C398B5B6A6A2EE27DFA1F3F613094594116E0E93D6B34D56A7A70
D59AB73CA633E9DCB2D93694EB75E09E802D7368420A73984A0BAEACBA4E56BC
ADAD9C3D90AAFCA4793087F3633E6F39E557FD36584F535FFC2CE9539FD4B7E1
E64350D0E4B25EFE7175412C06AAB530CCE14198E7C9AE2DAD234A19054D3AC9
9917FD09E25F64B6827E9F8867A18F92F1928B97F03B97439C62C55E71761462
FE9F1C24F12DA53F9865CCE54C8C9AD4D2B1F245E01C1F36626E3819E7DCBA94
50A2BAC3177283CACA75B3E1991251AF9DDBCEC84F40FBD93F5411B1385023A0
14B87059314CC9332BAAFF7C1EF565FD35E2C180BA49BBA59E918E4FA36BA2D0
47B3E52E6B7F3A2C950EAC5A902B304B5D06FE54F10DD11F2CBFB04727456188
82C233355671AC35DC5B2B886C4663E7439126D9BA757902C2B35C13487F0BED
5FDC378F9CA52B69F8941A711F25E4FBAEBDE4CC1F74F1000A12E26A6938B96D
376C4643295F769C4B52529A054F6B673D04BF9B225655AE2B5647CB5CD00EBC
7635AEDB3F00A55FB3DF7612A243E94CE0A3DB78E8BEA10B7EAB8C470A74C2F9
F43E74CE3BA79C6180B67AD313816A90EBF14FECD490538827B1F80922DAE88D
33AC9465A5B60AA8FD4A64972D941EC585207C0E0AE908826A589494BC7B93BB
4DA538B31952E14D6E5B4077B438642E42F893440563F3F54B21DD7097DCBD37
D3D9C1E0DE785A74591CD769CCEDA164D10F07899CE069D8FF739EB4C02B7217
97395105806855B7175117B32C326CE730ADD907FA3EEDB73500B7AB5D1E6480
5DDC29213B39E32B2E9707F329CF82FB3FA057FA014DDBB4B3E7F46473F5024C
5EEA54F9C85DFD3E91235926B7FFCB34DA76DED556A5288EE785025BBD6B7FA7
56F09A85B07FCA32F7BABDFBB8A5B9E34D64B23AB3117F1B6E0B8D8B5320C73B
1BA19240F5E06833EC0D382BAA2D7CCCA5B27327BFCAD617463B1D8D5CB6770D
BDDFD8C0EC2F4291FDDE7B44A58B63AFE598C3EDA15CBB4A7E9B24DE17E7764D
EA33C89BE01AA3AFE8B3CBAB88C535BD2235783A80974DB30B750618080FAEAA
3627F5D26A5C91ED61947CC99B501F212C04DDCF148251E92337D102BDF46D04
B5EF23B54AF763EECCA28D26A41E5FBE29DBDF328597EA4285ECB3C4631E703D
F8C347C3AD4007DB366A878FE96D5254D90CFE6992138AB8D4BD793657A2E0B1
EBC2E7FE5747332A89C5DA71AFBF64E983DB53042978AECD5B5347A4163ADCA1
9BDBAC83E3D21601278F96F30BE5133AD610DAAFFEEFAA0C2F896A4B990C3EC5
D78446E98286E83E59BB3C0EE26B4DB6DC86721EF2BB8085785C6D2765176227
8975413EC6AF40656D93D61B65401FC24E1817A5D4B8DDD32E79D623087CA8B0
38EB9E71547747DFD7F0E0064CB52E2924AE00C209EFCA54FCD15AAA9096BD3E
465AA29E75ABB38512237061E7A19A3AF413783B5A0BBA6BB3FFFF82C7AD1633
52C8B869236136DF925649B8DD22CCB0191DCD440B4CFBAB7901FA703425A186
5413A76070C7CBACC6F4ECC52FF2FDD65F4C05AB48FC6E8F256567CC438C6660
AE5826DD6FCD6E4BB9B50412CFA5CAB43B0DC8AA91EDC8E5B7B915712E24D979
7ADBE4BFE6AA6E50E0A7FBE2D58164D82FF078B00CE92E92259BFA985C84CE1C
990C7E6582F2649DBDBEDFA6A68D51B6F3880C38FB2349BE51D981A08AA153E5
7C0F9250A84B49A45525603F5B0384EFBF74859197831C6E3D37894D054AA38B
C5095F322AE1B521B693B384A3E5B4FF6D21CD197B4C7B75948DE075B321B73A
951B8175B9C83406A402F3A83FCE9918EE8E8D4BBDEF36BCEB3DC49F69B43CCF
1D69F55D56BE380C358B794C2EE6132BC9D24CEFEC85AD6FEE1DC312F6D9F3B9
309B62AF4923C319ECA4A7C3C21E322AE6C2B6732D60633B59C2DD7A3D60E8E8
9DF07C2A11C0E1F89B02D061B7C9EE6272DFBDFF33E7989A96D0B2D0906FA92C
220CE37E3D56299776E659362334DECA487AC35BAEAA198D799DF62B56EDD4D5
4226ACDB4317A096B0452EC6A9DE25E9D271CB4515365C8DF402DCF27B1D0F31
9DD7E065A4076A4D467AB96D563049701ACE4F6E8D02D1B86F6FB8429E2CEF1D
E5141E9AA75DC4B7C0B5D6C66A4D98AD2DFCD5B3672278C447AFAA79DDBAA923
0C3B2CD654ACA8A513F352B24E7B436DCF461B68B397F4E6BE8E51D3B10F4733
E2405E3042B987B118A44D819878C8F1331D1C1A3A6BEA00A57C55B4D4E68066
D9B90B42031406FE22B8C7870AB7DDDB21B45C06CAA73CB7D1F28707A9105F1B
664619F2F0828BB054916D49D6940F0DDB4E931FC6D4955C5A3FE49EEB6F8D14
F2825BB5609CFAD20C17ECD640B52FF6C6619CCBA270A307B47770845E2AD139
2FFD87627E8E43F4E37BDA7D558EDA94EB1C029F3EBFC49E875699AB0AF95B3E
718C040351128CE2956C78B803DBB059867B3502E110447BB013DB59A52D2D2F
8261076E50D3C6387C3337940B8DC5963D540CB6441B03DFC44BC7B5502C46DF
4A11ACA54D221B44224932D25E0EB63BC4E4F87F52E02D7BA9CF50546101973D
85B142795C966C6B51B70B8851C9B2C588B766CC4CA81187599C2EC9C38E941B
1E7F573D8C0964194509C21E85600DCB741E14756957B10F325D4EB35F1D0714
A30E063355596CCFFD0DC7770D3DCD989022884F9EAE32DA3B6AD2FC6858B3E6
96C796021475C35D0E554E9784DA31BACDDDE264E04EC3B4065267A14AF1A3A7
45549A2C8D8F6C93CCAF12CBC1C77F1850D0278D6F09B8DF311CD16B40EB4BE7
2BA1E3134F6971FB0540D68A8B8B619F8EEAC1396B66693591F60F4BF93CE72D
AFC207F82CCD8250F4BA04D50D9B6D7AB1D7D1ED615803F7ADC6CEA91AB7B45C
A7AF8DB57AA51550CEB22BEF84CB75B2C5ED13C7E585454C75B14DB45853C1D9
54C67F805D1BAC04C66530C23DC8D5DEA90E75EBEBCAA640AF784CCEB771D227
81C30E5969EE3011690DCCB621D1A19BFBA973D6A218C80AF10042B24BBBE788
FD5184BC2E7598A699CAAE9C9F8FFB86FF1286CFA04302F7BFC5D5DF5AF784DA
0937C74083746CA9A8557DFC573A26C0D40E53D42DAF400AA41C55881CED39A6
EAD01854D9F35AEB919C11032728BF872D2B0E155A92A4F88A81371D82736D10
3AF57ED0F5B6AE95A022F1C722FECF62CC3B738D79386D23C7203BF068D8A609
184ABEC0D139E5F4FA3DDA4D4BD0C51B54B5C793B72598DB29E22F72F010596F
131B71830D84172E7CD7C05B2585A53C7CB0DC374EFF9A63EEB766D68A26681F
75A165FB9D0C92DE6096CCEB12C2BEA2C26F768EE4BDC1C612B31C7A4A924F06
72D8B37F28A63D57E2C83111764719E420C919C625844E1593310AB5CF3C2E2A
3768C7DCCA5C9F6BC48A4FB0FD382206528161CBC25F1D7566E941344CCA69AC
BB5BE8AE612BCCE43458A6735454808004710523E45436A01D6E798755FB13C9
221F730F4CE2BECA91F339C38BCEE015298D036EE89251243053505DB51B008F
8E9F1FAD130DAAC132339636BA60CF668C9541EC6D3CD6A51FFB76D29C0565E0
70645B29D81565EF1E13AA97507A9841FE083B062CCDDB666A455ADEB711A5D5
D489D543B8A20F0278602EA080B53124F361078A9CB36CDFE0F56146DB8A861E
46E024C8AAC0CA6400CD4307DB36449D0FE2113B3320C313DE2384988B6DEF29
C584E536D03A0671D75E4C0EC502908EC4853F3CFFAC8C7E2DBFFA16B26E7A1A
3F9D5BF56B5727CE35E1B336141E60AB6D1140D4C0B8869552E4DEF433A635DF
BB1FA3792992049C7EF9A0424265456203A7B67B30A2146F12D2EF5523597275
36971F0279F12700E9728B7CF7F5E86BAAD6E47C54382A79CED4CFF34DD95CC0
85523A710D1EE5F415DD9CFAA477132F81D5F408F32612D7931EBC886B05858F
71797745D7190FB42DDD2E192F81FC9508D2FBB8567FBFB835B72F954941EE57
882F78857C87E574E30710BA9731D8F27AE69B172124E6F0C83089B39ABF01C9
BDA302A7C5CB636C5864EF8BCFDD164C8A2DDB6E607138E02333C892AC77F0E5
7E4914624FAA4BF2B5FCA3448D360B18D5B8F984E2381EDB1455F0BD5FFC7BF4
304713942BCE511A8D1D7345B77E256379A863677DCE24A14BFC52E9210C8A69
23E7F4CB3A3B7622E5A704402F59B2EFB224107BCE6BECF1197A051B9D7580B4
5EE76F2C097B3D9123E213615A6B2E7AB3A1DD266A5E7349145F1547C49AD185
2FE7BA6B14B76787E4A2F56EEF9FB845A2F7E97795A15160D1760616C372A531
176DB59F10537A4717637CB9592932F6F19E1B5E8D34EB46F04E8ABC5F4D3676
39B4216AC473906E10F03083BB89F311F38E8043FA363DCA07A103B3BA26ECE2
8D9E58369BD6AD8A796052070F4C57807268BB4FE203450958CBC3FD7EF63B54
0316266D02C9AAFB8B3369AA12DE0124A4A117A55B66ADF5E6EF0797ABAC30EE
74060BE1BCD51B500B94E95873D7C987CCF12A2E3FDE9E9245943A231C088342
61370D2F6C20A2C756160A9001EF8E5D7E580816690BD7D579E261DAE77F5201
E288809F191B909754120080EDBA96F125DC33D721D5A5A7A18AE3F24C2FEDF9
1438FDA6761CB78AF51CF6001C4EC7A34A3965414963B96902F3A8451906C1F4
1C83276D034E28AC90AB4579E594DDE2FFEEC3C4B7B82BCA2E63775CCC7DB5CC
FD04C27390AFEB6F7F9E63AFA72E46A46B9FC1D7E38EB60DC38BB3033F979CDD
28E03D207AC9AB8022096601EBC60A5A372672B321B5EEF66ED148DEDE278A6C
AE1EFD0373F65E56E3CDE18ACD41B7302AF8D184FAB914BBDC5FD10A0EE4A832
3404FFF0F41C530A2E1640E7E0356795FB0630AE944938B053413D197C640215
3F660F52527B930986F6A2D28A4978B3C1FB0D69BCF71500B45323381EBA5EA7
C9C967CE020F8B03DB5C0B3C4B6F2334A68A09819C0F65D4556DE8A62EB33920
5740FBA67A89D3EA4FF93AE306B51E7C582E9FD6AFCA36E8928C550DE08063F9
326C3710CF762E0BF9E0E522789C073297C826EA0997903B11877B5041AD17F4
591E166AF39285C50A064EF7978EB34C4DA5C3B2616EDA93DEB11D5CD83479FE
9DD93EB4BE71184721207AEB15859DC761E22F14A0994D55BF6E4B5291B48DFC
03F1241E70A35D39A0F4AE0B3AEC8C782E69484B1011EA7C2B22A0A8B85B9FF9
2C82A96BE53A21388EB38104CD42245C53AFD230D52413254CF201D4F396FDF6
4E708AEA5F610ACF79E53893868171280FFF9DEB9FC8D417A071592BF07697D0
B581D71265DBE5375BEFB2A842E2498F538A56230577D7D963B5FEC064C9C6E1
9EF314D686603FA57EA6E3ED6D63D4FB6A2CA86FC83AE27F1FB728785F2B1947
157A0F65E60AC65E08B31380A496C0167E59038C8C349025B30690E8E5EA4D9C
F0124FD7CD9341AB557904290163DE9C743330E89075D3F4B1BA5F15757FCBFD
0665DDC72FE8375C34EB436A61A9AAFAA43F7933CD2F60694B860A383E775BCD
D1ACCD09943AA6BDF0D7B9F9F578B8B48B5FDA83A0A00D5C53B08B600FFBCFA5
C190B4AE522116B0D86DFC69FA37039A2E89E832614ECB1C99D08C95132383C7
F8B0DBEAB5B783AC09AC7F940B8AA7E1AA5AAE905B080F9AE859DF26DAA2360C
6609A05E5B55E0B9D042615A7BE91F7B8F86B75E62C0F5B7DEB4B1CC7B0FC952
1AC72E4E1326787CE7CE8A993E13E658B6214FF1FDE83D637FEE65804AD9F4B5
C183D13A1B01E97EE372DAE5D41AA7A4F62DFBA177EB1F414BD14771F86B4584
F73F88D356AA0569FA99C3BE78ED2B41913932C69E40D0F639775E120F01D1A7
FBC7496B6A7ACD99F9DCD2881BDCDCAEBDFCFB9094C1EAABAA0564AC90F8884A
461170BF0099669110CCCC78028EC0BC3685B55506DCB6E935DB70D2B3965ED8
4A84FC4F4C43B097DFC2B2056693B3D4383A83B202EAC8DB0E94312F0EC5CC63
C40C05222CEF2C770F09419DE901473C86BCAC4F39C2C5C8918BDE895AD2B940
E38536CA9CB0A953CC10C2A8213A8ADB6F2E3A3027928AFB11CDA7C60BB888A6
3C6EA71987525629F144D075AAA7AF4BB00BB24CE37CA8E152A2A0EBCC7E875A
64B7EC379E9D2E393A06AADEF6945EBB4C476D0CD163BAA3ECE3F8C28EC36BA0
E39FE48A4D32AF3F03CB35809847A727C85991AA2613ED8F715E86B9AB5A3460
260BCD0C148DD084F5E83CA084874748822D370B67F0731A8F113299AA463C02
CF793FFB726D0FA0619F59C9B840306217531FFC8F066460A6762889D03360B9
2ABD1B43E76B674C6F32A1E9211F8D94580D8FFC5BAEEA6DAC8E4B561E7E464C
7369287B12DAAC743EA01C0B987FB5EA2E872FC0FCB952B763D2A906ADADD0D4
656CE8560B34E553A97CBC12290CC93DE2B34EA3B23DD36B328545A6DC0F6E1C
7BE8F9AEA86E97CA8DE833CE72F1E5E3E65F0678E009136CEF0A9659847F8BDC
1E03BEDFBC5B74F8B6E61820B34513684831F77273FA22B1E2913B766CA2BA6E
EAF273E86541A2F17681B542D2100731AB055549883BBCEA65B6DE7FAEB94132
27E3BD9F935FFA1B3A14C9CB4F6E7B5B6B3B616AB76126FA3B5D4A1B5EC16F9F
D38D481584E30EC73AE00E974E15BBC6360D001EDB0AAB5AAE2FDD7A8B82AA9B
1B0CFB0EA7BECF47D9D223FF9A05D570F0E8B269D01C2A12297F0D3C2D86760B
F2353B456366B4CF42AE6B9BBD92FA20D3C406837188E49E8A4B8AF9701A7E87
FA566DF3E6D40CC772ACBC7A0A254B8C437E93990D359BBF11F7719D774544C3
E732AD2FE4F2B78F3EE8713C62E423B063142E611C9B4A6ECA444FE8CEB8C402
612F003BE9B8501098D6B314158D13F55A2A5872DEB5C785F3057FA1BD91496E
DD4DB5702447D1C6D280B5DD96A135DE24B41EA0B725AD3A3E3A35B15B00267C
25A55E91EE25FF6B76460AC3E14616874AD27F54DD0DE7C1011E0B116E0E4771
7B610E39C3F87452957DD5C13AD7388AB725A5D8FF8DCFE27E4BE86A26081513
AD51EEACFCE3DCA8DF51D3CFB0E2A5380933CEBF5B44B28DC3D8ECE199A9BCB6
05357F60A18B6DCEB7BF5C5A620635F10112E06D551BF23A50382065DA6BB134
0A4624917E378761B5BE886A90C8F83A637665F1715EA8407A55E817F8E5F64F
D1689A14EAF776CEE7C4DABC80F0A5B749CACA0167DBB4FB8F85AA6F25EDF288
75F78610F6A47D8A5ADFCDBE326532CD804EF6A09F58BD3216AEEAA7C1361547
D4D5221259538F0C1DD9FEC45D29BF853F35B68CB69AD4A9C6DEFDC0F7C22072
FDA487FC97405B4EFF4C7D6A78276216E5F7B384B486D73E205E25E5AD788CA5
EAA0FF2BDF89100A17BAA15F880C5FD96082197B0A5DFDE4392EAB7591D4923C
D3EF2E37FA8244651675B389DFE8C8FB404606A56F939FC0C7D927661696719B
C63DC7B186F5C1DE70C8ADEDED46DD8E03FAA0D71E5BD921150D6A0F7B99C687
CCC75CB867C8AE3EF39F7B9124BF8157F26A45A2D8EBA23572A9BAB41AF8C0CA
F3CCFAEC0130377E7818243C45442C4361FEE0AB88964E0A698CC862C43FF303
252A254FC7F6A9B918D8EC27F6061E2100D07B3A594266EE1B79104075344403
FA3F81E297E7AEA39AB98AE940C62C9D31E9049E2C00152A3BB72849F654B322
323F84414505FF0EF76F24EC4B0BA964942C4DD42B2B1EB50E8DC28F6E4C3771
530110582792B77BB53A7D1BB64F37FAEDDC737C2B4764DCC174346E4C66B244
04D83C2FBA04DAE79739D80EB4CC197CCFE26F42832EBEA840CFE04F59795F88
0E546835F9EBF4B1A69D4398474B4E006E1A037119B14DB11817A572B7A609F0
167E940532E3CA8507FBBFE5EE3471D8D564924D436CEEFCBB77EA15A481B379
57B4E7D3800554E2CA6AB3DCD6BF314DE02F0082748DE8CD411141EEF7035544
EB761939005AD58F296A80B2FEA6D59ECAB6F69FA9C463978EA930E8E6BBA3B0
243B0709BA1B000497DA6D34FA98BFA9D08818AF6DA1817286D46BD039A56572
7DFBFA00BB8161623AA82E746007EBB9A02016AD53E2FB149E8772530F3EE75F
E94362AFBAFE8A49C6649EAEEE7CBD332EB57640CAA16E42F89FC463E186EF98
C276A6C599A202B229EB6E9BF951EEC6C345A0FD1BD1DDFD0D967E641FD7B41A
648B83C93FF9C5E212DF52AA930DEB8D416CE50FAAC9E50911D0871524FD05BA
1862E00E3003BC132E792FFCFABFE565F3CC711175EAF225ADB78A6C75557194
F76810EB4E0938F8BF621DC9733FF0C698C2A8FB0AC68200BC8A315BFE75575E
29DC77F515A91D13F325483BB032E1DEE9ED2516BD76063FFB2D658FEB2FA69E
836FDD28CB10BA8311F1D66A0279FA5F221D87561E6E4CD950081FF4C50B522F
6498B85739630417EAD63888DE1C4C5648F80A9057FE198BF67BF6C74EA8ADD1
CB1FE1CDCBD4D30024A69E53A5D4AC6A6897CB82F2B8ECBF9B0825C43A366D54
29EBADA916455CF1DF2524612BE25D6A9137AE1DFA9E9F1961D682F41ABED76A
B43B6F9A78B324B0B0ADC742770FB6163C5E135D18B469A23557BA90F47C1506
9BEB7A65C91B920CCD89210E224A1465B1C25F0E732F518F6C74BE1DA63A64ED
9B44C56F22679078BB3D11F2E8504356B04A2E3D4A50F34E013799931F6DA251
5AF4FC751EDCD5989924A248C82512BEB8FF092DB3010D8810039BDD96DB6844
16DA89F824649EE4D3D3DBEB785E37252C0C873CBCDF94C199D78ACB67F2D40C
1B859901766C1A7C5445FFB8D674A1E9E7E08AAC5BD99D8E23F72BF05A23F422
5D1388B34B4FB06731EE262D6846277CDC0ACA3B751DCB2CC54F6FA94A232B76
F3DDD1138FCD3D813369AAACC0842D42DBE831D9DC93CFE45BF32462F8A48417
0FE02DC1CB8A2C448800375F1EDCD834ED6B239B526A8FD81D21C6A7D5AFC389
99116A046BC0C94FA9A442190EBC86186E0B9F02894BB7CFD2ED93B90CBF7EFD
5ACF616C3DC8386B22FD01E2C6FFDE9410C62219A2D0FE069FAAF309691A945B
00DD7E85A66DBBD4305D1A5CD0FDCFDE0E3AC5CC590F4367FD91C88AD7CE0DFB
C801895A9C9E42840EF361844EE52E8DCD5691EE6741EABCD21C69E3B6AC22CE
AD301AA3024685DD9A963B77F0F044E15A9237D48871DF9658CC59D534D5D8EF
DF0F20F8FD812BA2ECE4A443ABC54FE26197FCDEC2832484B088E446E2E1CEF4
C0D0E90F01FA0B070290C69861B72CEBE65675C723DCFC07A59E39D4B5EBD989
C9FEBB58C1D0CA7816DC3B3C57F7748ECBE8D395C718484811BDD9F68E780099
30676DD91B6BF3715E88D9E1BAFC6050F3AEC640A24153D537B29A4F752CB2B2
8443538B2FC34AB914C26856E8011EF034B675D442A5DCEC5103C634C4299304
F140AC5BE3B8DBA88D35791401A58CE9B81990FFE6F24598AA7E4E2220AE44D6
4C8758AB253433CCFE06931EBDD8BFE511077E4F7D49DA472F6186AE9AC944BA
3B7856E6C9E7E6ECC6BC429762B4A91378C7FEFD24593F39B01DE06F81EF6ECB
595F89B5036E6F6A118BB7E585F500B85877B67AD75E8973F1AE17C001C9DF66
C1FD411205D32637ADD4A2676A36D869C6F29701F500C264A645685B84D5989E
53E85F51351D266887C107A5AB1BB33EBBAE361A7BC5E9837550CD5C2A6F9DFA
036B47A9D9BC7B920AAB6FEC1B5D5814AD27502C7A2F26D952B6F5A0D47A577D
97395D16B2ECDABFF61CD57976E3D6AA32F4019CCB56C8DB83C8BC2E8AF22D2D
637BC63AFF92A63E47A10AF04772C13ECBC20A7682CCACB7F7E7CD54858D5651
A0491DEDEE59F33D9D24C7638D32BD067D73ED1FFCFE6CDD985B5521C9B91FB3
5466D1EB0528611520249698166CFA24E2A4AA21CF6AD7EA7F9B24E4964A3DE9
F59ED1D68969EFB6C82877F917594AECE1FE3685070713CA9B85F91821E2BC92
6FFED465459D52297D8896D4AB7791257F360B0D90A7DB137EEF6F9B9695ECBD
B22C5D186AE74550AD14E20BCF95C98E95BBDF770CAD838A828A98B67445C154
F7F5112BC93E01A048C5D5A7E2E353B7C4E726D59D0A8975AE705931C0501DA2
5AA2B87215D585A50F3DC84CF4636049B43EB6B1B62DEC7741B434C1FB836ABE
C3EFA3FD40CE8187B88F659E36A6C88EF040CCF53D9B6DB6FF1CA2F6676BEBCD
9FEE36E0CE88DD986086F1DEFEDB8CDBA6EA727A7775C5132C13140E7E9A0A28
022F1174F933B0203E545917DEF51EFD1255B0CC1C66B7571F82BEE80E63DF54
96E0DFCA9C459D0AC7A10EC3E8A2E93D36F8E24F496591332DB7897983813A7A
6F6612
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols8-Regular
%!PS-AdobeFont-1.0: LMMathSymbols8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathSymbols8-Regular known{/LMMathSymbols8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols8-Regular)readonly def
/FamilyName(LMMathSymbols8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathSymbols8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-30 -955 1185 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F035757560E05960E2C327020FEAE317
24C484AC0CD3C1AB9CF35516622A022D6CB83DEB8126DF04762C901617B35492
98158049D5C65DE86143B7F36D36233A115C36DF60D3C55816B2B0B341102AF0
90D7D4E00A7611262CCD366F870F0EE8175688261513076B608C7E160A9A79BD
2B66E2E2A89CBF6D1703854915ABEAFA09718FE338924B5AF1FBF1209786AEB0
0026C38A2C7E208E6C306BAAF037DFB0F3297EE1ABBA65247CF72D0F78A9BC24
038966CE124B94487282B69D6BC0B5E17441DA55415B5369E451E2B0D705FCAF
3AAC6DBEBB8AB0313C4C201F851DB96CA9EB49357C3C1AB73F0CA2110C994680
5AC8F0D760C03F71C92CEC2E1A3AB84813D389BEFE7E0C28FC76FCA70704BC4D
159EE8B490B95CB09DD01A4122A686AFB8B9C69381C8C303F9A3B695238C3BB4
CB44B3BBE50E2BAE63796BB51D945469BB75C69F7A758180B77CAAD2CFD5951A
23580A3D45083C8368543DD37AB49705B939804C12D4BDFA730845F7E42A6C9A
B3F0A376F44DC297393B85E8A18C45C99260BD499DE599CC0D76EBE4AA7D70AB
348FA87CA9A1000814C4FA99B4EBC35A0298AA29563B030707F3EAD9FFF7BFB8
3B347C4A00BFB392E79B79F413E67A73FBB006EBA896A65CB21BE940A0940640
34E08FF806A114ADD3FD42BB394F76CC77DD869C46DEEE20839C9A2FF73B840B
0ACF238D333719F5947DD4C39B8E3F070EEDDA1A39D526319828FA9F47F03D8A
245D8E215B37959566D26DD98185223E4FEF01676650EB4E26C0A425E6C23C50
4BA94BC88E0861476C6BDA40AA30151943B874CFB63DE5620A7A8F2CF6EA77EC
ECDED0887B6C00B24C7A463FC10FD2C2F18D67BFF9FC9E621DB4AEBA91880FDA
C1B255D3EAB46E6243AE85845FB84DC84256134A55488B1A6B00C672C13F4D70
9C289E50F5C1D8EF063ADA63F3351D5E8B2A5BCCD284480B0930FB24143DD785
1B5539E97DAEBC0C57E6CAD4465492780B560D7A64F4AACF00DD611A0D4AA2A5
9BF972145C6A25C355CF276F00AD5F5E4EEA8D2788534B0E643A05643E8A8303
8029E832F016A7F41B9B176926F360586A5C26C99195A6646B1336FDDC2FF0E4
0D5A3A2E5B7AF64A3304B9E86E1BAFC221A8165D453AEE422EFF10547CC2E44F
566E8880D7B62B55E06213C9491954D1A8509555EDD6F3AFA775472B61C784BE
8968101A50626A429AEFCD373482B35575207D2AA2476912EE771037F8D51B80
31B5BA4FA023A643AA617DC3B38D8B3697CECC8AA4F174F5B2C1124A9CC2E373
ED1F6F3EAEBD1C8C533E943977A590361A53953D75312631D6F07794B1D85325
1462B649443CE79BEBA97AE481AD4AB1DC86D8BDB89DADA55F2D1AE640852657
EBDB5BBF685EB2A4606DE426020640D534E795EF9019F887473996793F6FC92D
A11EA37B2EE094302A297311DA3110A873E6F7DF8F113DDE6AB0E182E5162DC7
0CD52C99C5542185168CA1F712BE96EE3F15292DEE4B72E4FDC197E724033F7B
B9128F40DFF15856EC96F5C3BA6E6CD5AA138B168C23814295B0BCA199FDEBF2
CC7849276A1AAA5F1598EC7A9A573A79CCD04CF98E4C6E81DE8EFBBDD3C355E7
3E38FF48F0FC3A3DF5B4891F92369E9379CE45F6CBE7E3178917EF80132FC8FF
0C7E7C01CED707EE67D626949BAA454CCF3DD58FD7DFF7B255BB8D78045C6F33
68050136CEEAB37F705812FB77CE978619015F83689687231C03FEB091AACD0C
096AC82B79642D2D6137A0EAFAF7E99E776758DE763ABBDF4941EE3F019C50D6
95AB27025E5B23E9EDFDC28477D4089FA7FB24903DFA8601A9A94DDC7CA8856A
61906BB7CD5369E9866D34B4787C34D8333876B55306EFD1EB85F4F7C4373DED
D9ABC33FDCEA9CEE604BA070EA8AF73445F2B3D162BF0BF4CFE393FC90D13EF0
3B05D613B253F34117B33916DE07122452693669CE60E1EE687CB3C92EFDF198
20959B28F5D6AD0907B6E4B8B338BB46DA634F07DFE77A4B16D1842C5AD87F0A
6ACF0E5B159F8FBE4AEF2681C2D96902480E4D107381C72D203BBCC9341E8242
EF8C770B22DE47BAE6D026B56A63B31C16A51E7B81164771440C131B17A026B1
1C35C6417958B3D6F3495EC3D1F62640E4F7CAFDA130212E40A68E47962DCB31
39FAF4746298CF54263F982CAE3C82B9619E3DBDECB17038BE25A83B43CA7FF0
A296819C753E396B1A1CF8E4487D117421506063ED26C7B061
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic12-Regular
%!PS-AdobeFont-1.0: LMMathItalic12-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 833 233 0
%%EndComments
FontDirectory/LMMathItalic12-Regular known{/LMMathItalic12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic12-Regular)readonly def
/FamilyName(LMMathItalic12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMMathItalic12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-31 -250 1026 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD11234369CB38BBC21C40020C4E57C
950DC4A5CD271B5530E91DBA55EA1A3BF584D9405556EF9C802B109FF1EB2B0F
C350D7F091E7B613B08574EDA3BF27099BC2EF0E503A4C4724614A73AA054756
A503BEB31E3FCD96F733D0C5815847DFBB66DE4968A9B389FC00C2146C4FF68E
076BA8B3847A3D8237D36A6BBDF0096290F1BCD02CC66B12E0070215D5D8306F
406DF7590940DE35CA0854D3609249AEA4EE9D3D377A7996C1CC2E940132A90C
F633C774985DCAE8E9353607B9059DD211265A0A346B1A062D80C64B5802A750
D9FEFA3C9920A3DE942C65BD08060AF33C91CFF62930F65F9A42F70B83B0E077
E169BF7F5D84F15D59F8A74BC2EE4A7F3ADE36F38C3A661F4CC9826BF73D7F02
D3CCC267927CAE22B5ED695D212FC3B669F9BE369B7A8D325C3FB9D552F175EC
29972562517E91E7B8D570612CC50B1A5CB6B94D030B0C60465EA21631F7A30B
44A47143D0C2F942B5D76384B8C3F2F197BB3646CBED3DEECB6513D3AD460F49
4BB874969A3663617EB537E75C1C1BF92749F9D147080EFF78ED285C315BAFA7
D78B7B4B8B7CFD1639EA303ACE986EDEEBA9350F92529C47EA7689779BD50CDB
D1B3A68B383B54B51F4FD77D6458F15AFDAB471DEA9909CAB29840091391F2EB
148588D02607411F2E802B9CDDFFEF1C1FFCC9EED0405371651ACF30808E8C57
682B734916EE806703B2ABA2F6910E0C75BCE10A94FDD1ED3E4FDA7857341427
CA0A4F7D30151BEB8E3D351E1E100A8A75959D11122C83A5C0C4C87214413B25
A6BFE44A42D446E9C4AC88F86B07C1097F9C5C5673B88582CEA8CD622F9B0C79
E463DF7F2F4C6640FF3852BEB520F7B23D8A22E7E601EF9CC6D0A2E6E82E6840
65B82C6A3A6692811E2B4F57723AA3A6E27076A2F63D6CE1FBA7ACD844E732FA
02797B386F2EDCE9FF9F84EEAD17B366D678E61C6176FEC09C94B74DFC090CCC
40AE9DA65E5DA02E7A7E8A840B45B752AF11A279BA06F821525DD0F477831176
84C80B29D318260FBC314986223F9EC4DB5B0EF2EF5D424C6DA581B49C709E1E
98149FEAAB15DFE7F94977CD2041DEBCB1FC8F4F3B288515CE43713570027C3E
2D68BB99DCDE2D950740A8EC16C42EFEC22B34901DA9B302C7B6492ADCF1EE4C
8C8D102B0C81DBC566450B0EE201286021C5A953D8DCCC8637FA5C02E813A318
F739DDC20785E785D3E86FA49B6804313BA4A5FED7BECB1EF153B7E79F9F449C
246733E425AA6317DAA66604633B159186F8846CAC78A7DC80655064CE701177
534AB9CE3BAE1E963098AB8D252B6668089F50930339C0DB023D08E56830888D
15578EE45DAB0A4848457AC88F0EFDDF41C475151142AD85180CFB2ABF3C70FD
4D6F5D2DB8636933471256FCFEF68BAD89962FB6264195185AA3AAF0221050CF
667F6493508B69352AD004798C505E280DFA90085DDE5E201035E216DC09694D
2406245E84F4D47146CDB5C83345C80493B3ABABB911186600AC62FEFFF4F775
4C4634DCD369BC6549D8D02596DE943C067A52E1E2498D67443C33B97B28C87C
6082D9E03E2570951103F75F24AF2D6CDB429757D2C24C9344CD28DA71588E53
AFC58E2DFFD98E311BF3DB0DA885F9DE0C994CCB29C9B64B01BD7D49FD2E4A43
9D9B97097DA9FFE744970F3CBF8A62ADA81E44A5540EB9365CC6A4E463ABF336
DF9B831BEC6A625FC6A18ED7B135C3300D4E6C8B686A49D427CCD0DA4D46C861
12A2D9E80690D779E5A9A4B01B3C370E48F709B43CB29B4D20B0BE8BBE3C81A1
7AF049DFB3B93CAC56475B73680E8EE8D8F87468D7513ECBEE27C9502F357ED8
A9E18D115F91767669A3D840FF92A66704671E550882E28A8D951207D7C494A7
B2784E050A11FE8B1CC10140930334B5F384536C40786053235B4B64AE53A7CF
32810C68ABDAE536D95D46BCDAAFAA5A8301F070FD5DF78932BA792454331768
0052CED9038CEFD1BB5F2E39305FF97E0E67C3DCADE11E6B938D7E564DD8AE9E
D80800314FB2500009740DBAABA4806AABB0D414CB35EAB7BD49EEFBEB6ECFC7
57B0FD0A10AC1127B4E7D18ADDEF5FFE63A9B85DD80BCBFDF28FA577B3900347
5FB30DC7204D057758F94079B1897D0B7AA498EA1B699FEB44FDEF64DA213538
D6E10EF3FA3985EDC86A7BBF4B2ACAACE83EDCB540C9115148CF54C8E0A9811C
70B6C0E888F5FCDB35D70E85591F04240901693A2EC85EF5F22F2E0D5B7063E2
A05804A6371D6659110F6D3A5B99F34847151EF64D57F39DA7E5CA0A68D62BF6
FC705468B2FE75B1F38FFB08DD1B4BA2BD20A4BBF8A50510DF29BFE324585880
3630C901B119FDAAB016B80B8BDF78BE42677F94FE5D55172F6EFE6D8B0346DA
9E9AB5993FA4C67765F4E8AF8930981A602FB5208DF198B5EDD466AB441CA8E8
763A11DE1308297B2A88E2711257EF51CC769D13CB9EB7C57906E500E89D1C1C
B5ED1E9716AAEC96D377CD1B378F24440752255AC3CE51E83585A0C2303697EA
A64068495AA395A9DD929BFAAFB46A0FBBA18AF8CC818B1B99B703C1F576D488
AAF47B7675A74E7EA0BBB7EC6791105D143BE093EA7F7764B84D31D370419077
7F3F14C1C7FB7F9CD59987C1511ED858FA1BF94CA71C0D71F3A6A97B53BB78E5
08C026AAC79A3CA6EAD8819640117CAC5FEEE4FA6996F6EB42AACACA8192E4E7
4CCA6B992D2784F5FE400A3C6040087084F9DD4431C7CD87ABD631E0168B55EB
77AE9E3397419B96DE02ABD4E2A4EC9C64DED8ACB08C9FA4E3C91D1BF92B6849
E1494284A4F8E838B09D531A1C8466FFF8CDDA782CC724010B2ADCF8A6D7B9AB
711064D969861A5EE6C4F0BC4BE7B8C7BF307FE8796965A315333F80BBF71005
23A575FB5751F57110877077C59E92E7C957EA5BF93128B45B30772EE9FF0AA6
473102D7265BDBB01C404D122E35B23A004022E503E0D230489B6F8221B58EFF
C33BEC423034C38E9BDE3DF371F452AADC5E3D7E4E910434F042EDF7BFBAD269
5B7A400F2B839D3942627E50B8F29A6DD9D861D8D7EE3C0E47EFBF152A6B4695
EA7117846797ECD0C55A99A18D0B791316B6FB802C78E931D873B31B54F16384
D540E84CA3A05433D2E45076AC98D41C4B08E56A55BBF5003EA693949ED87167
5EF3F47EAC0121FDE2B5D3D8AC9B3DE17F62A7ED6A4522A30C196774924468A4
CA3BD70D6D880AB3194F166AB5451392E2AF363F53AE6E6619E4A6BCEEC4F6A8
5383CC650B2F6775A2697A8A9764AF60FDF2E801B0DC0A4636C682023469481B
7AF44BD13E74D18928A34D6522A81888964F4B3816FC9F663E0ED9D4F78AD91C
1A34E6173D14A7C0A29F4F9C34583DE358B828A0759D4DDAD4E177103A056E34
1F88F1AD4BB684B4ECBFF05FA370AC93BA7A5C6F690153973D1E25ECB9047A90
E91B708FBB0304F0B8FF2280FEE106B51C791227D0D8FF71335393236E1359F4
C14EC9966CF249877B90B61C5553A05D51CF439A5827E4C46643682634ADC391
2E28AC34614A59AB51BE79CABB6B64267965815189C8CCBE536967E552647DAF
0954A661AB2E0B71D28BCBB5FAC10BE1867878DF04537BBCE7E232DA2D1C82EB
D0EF1BBEDD7A7D34449DD2145E85A7074BD01D83C9ADB659D4DCB49257E66D35
C46EB1F85724987177E4F56F95BA899938CBBEB5811B67A39CB8F8E0DFA21C04
3EC289855B3B8C274AA862B93694F43BFC1668250DE22B7E76FB0C286CB044F8
F16AB041AD6DA7DBD254819D71CC6C2AA7697B54AB0222BAD1BA813E7ADC6027
4A14E0027B1919E4532D77546938B09FEA18C989D432AA7398C30848A5244663
B1F6DD718D6CCBB28FC4B463A9DDF8EB08FD677B28735DE4B8426EE266A3F54B
22B935619F377EB88AA8F9FD9DD3EDF43F4D2C55AD9E87CF932FED284FC857ED
64AAB21A10A40EE9C8DBF84DA1DDAF7AD85A4BDE29D12C75A051D0572181BD45
356C55CD4AD76F5E1C765E8A0DB0EA0084F245F295CCC503B2B3C85BBBE0B3A0
64B6FE9B58A0438662E78B016DCFE36223F23AB18A7C3AF10EF4AA54B8B91D89
0AF062075F01D3E2B11C35E52FC301686D09894D1610438664D8484E612A7A6A
81088845433C85BD76210CC999FB1109F0B83A9F0AA176661E073D275A39E238
CE1B45E0FB4E607854D3817274EBC40D2E99E8917187C3179AF991E28FD9DDB8
3F8C3322C2C9EC19ECC6336320B4C5E4AE552861FA317F8AB048F7018C4E85D7
FABE771DFA2C44EDF4E01FB0E67CE9E92F276A63FC7CC20A9D6C5D0A3F5F6F77
9F8EFC980D7052C22579EB7CF7FD541F1E14B4D267FD16F8E059EB8BDAB2E9F6
600943B0A57E7F8F7CF5CDC073F3F836BCA598849E2AFFDC0BE3002BF12D3377
0DC788AAE1731D588BE8EC02344CBADFBFE112F5E0C7E935C9C5753FFFE26039
C6A38C70A731E1B1AD1EBFECEDEFBDD14141476142CC17187E271D804480D216
CC422136E3020F62750413639900331862F76711E2B5A9A1D3A851617AAF6F6C
FF87BF37DC53B485538FAC773C6C9815A0E5C937A5A39CE8313D2D3EA4DFB9CF
5B42467386B333FFF694250DF87D0C4B6DCB63FE350DE1FC7332AACE016F1643
636E5729EF3EBA5202F6F494E72010AAC06B25F4726D13A14DF9E76C9DE835AF
64D7F372A1B7FE7391243847A57FE59FC52C9DED3EE7CB5DE57F40A24CF79C7A
68A8FC9334418333F64B6AF27BCC2E1B04052F0CD549D6D3743EF225AF01C746
8B5371D9EB3E7AF58E0598144AB101E184A7E5715E87E630B480211C6F3EE0F0
92D61ED353415F8C953798914E0FA7F72783EE63BBD38C05A45A59E9852C84FE
0396EBD46C873A42E94CEE8C606B79EBE02D465BBEB74681823DCAED774CEBC5
A94EE6B766F31E33E6CD0CD1CB14CA0856730AD631F384A674CF3DAC57F0CF6D
6E3F8BAD1D5576F36B45F7D3D2F7E31CF4322436F05B0E231840EC7E20D30B5E
D830C0EA5311C21D3AEFF1B6644C4B7D043CE7D6B57F70A7C8EABFE6386F14FE
404196149D0047673B5EAAA4E35BEA88F3CA53C958AD76A5BF0F169023720A64
C943DF9352ED149B02463596BD2678915FF3E5702B08E0B36E23613C09B068E6
4D6159626F196BF574AA05323719DA2A8856A3503D87E39A54422622AC9D7195
0608F0FF037D2C5E3B72A8A6ED978C8D3971BE4BD5F812572E0825754BE2E020
A25BB626ADB6935AC0EF3EAA0A8CCDC7CC7AE1B9226F6824A5CFA33C67D5EA57
5020584ED34F2CA8B45EC390CA2AE8AC5038F6AC5865F2C73DDF5C18C28BF4C2
F1AFE84FD41F43DDFA39FF9F76E8A09380B641B069C340D4F6C5F96F895BA8FF
1A56D97CA15864A14D337EAC67143471935C2EBB2FDC33455A7694EB5173FC14
0A76C7878B6B663CA588D06F0E21B02F6B61268ED233CC7292D48FB3B44CECE2
D0A199704C262B6769A76A042A5B8F561155F0101A4DFCEAE3B96631FACC1F62
B57E53CF37F9F19BE0382957DC02A24B794A7BFCC2690AC881A98151679F4BED
C8C89598F30C5B9216
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E752429B985F23EBA0C9875AD055D8B1F640D10DB8F40BBF062F476691
EDAA1D05C5591EEDC1B75251BFF8576F1C9CC5C0E521392A2F0D5F869F8AA462
B3883A673A976328E1F0DAA22B80CB7737DE2537E7B54F5E1643E30046E87CF3
8D9A45A973757BC16CC50504033125D2A68A1C97CA095C56B3D62783960780B3
1693596869FAF5692AA8FA6643FCD7F55E72948D2DC55AFC5016FB2C48AF9D85
192393C682B739EB43CAD8C3FD4053B2D53CF911352E2BA87A65F8949B0B7918
EA727DE4A08DE07B71365B8F31103159F65D30A7A318C1056BF638CD20BB56D8
6F22ED3EACC46F750F405FAF96268E80A409CD8AE0F36B68AA8C5FD2E0E871DB
D2628AEC086AAFC9F04CC93440E1A8B0ACC1DCADB778837360339A25C08E3B0C
E768240F0E8CE9FF939E4B1A6365664AAB69761B7A9C7B95BD29B09B930B0D82
F2C39F9BC0B94E56C48DCB22D8F0CA6C633BE68E5977EB3D88103E4230C6A08B
B4FB0CDEA7D44636102D47AB90B92FA42243943EB3E77E6CC38DEDBB2DB8BE77
78936B70FAE12EB1E2913B766CA2BAC3FA555CBADAF2CBF6B7A216FC93470554
2C841542BC1FDB26DBE389CED193E28A19CE9CBA64FCEB47C4D9C7891741E0A1
23FBBE971ED93F797C02EA830678317452481FB78DFEFDB25A3645AD3979D2F4
AA17C624CAB35B85963C6DED262AED5DE92278F31B2E573FD86696D98800443F
32CF695BC103A3ACA687FBB3F42AF9C89123C719005844588667C3DA28AFA523
BAEADF7BED1F3B5D595DF571540D0855FA377DFA6880F525878D6A3D1980C7D1
05554ACC5D07ACEA1E0D27664F6DFB6EFF878D0A68604565D0BF75FD8BE023FA
36D164B7BE25F9F811A466CE04C2CE5A774EE3288A245769B7ED30FCFA10230A
D6C9E809341BF5E55E58F3288F7298D62092922F07027352BC7C9612CFCB7018
B3394AF7EE7076395E67C3CF9B71BE069AE6C6C412F86A496E7C77173A0CDA0B
CC46683C239700CF259CF668B9F5C990DE3196B84BE792F51E17583FD4A83178
989638A37897AA769D74E0B3A299DD94B314F9BAFA7217AC70D8D9D02544A545
F6880EED34399A835514CCB97938F3E012AF4D68C140C6CE231015D93CEFC522
CF56EDA6F3147B3861904FBF8BEE6DB3D2E71479CD3A02BE03C555B0808D40B9
53D2EC56876076A116EE7E81836676237F88C519F8DBF39EC35FE41D78CF1665
E3FFD09C78FFF428AC27BCF0318D0849935822699E31F5115E7854A22F46951A
51F24526F7190B18B313DC58AA2EAF631A48ABE394668C6F1CE9AEADFB56116F
FB38C388F96143BA870537CC8B3E5F2DC39F9B930ECC63475BBB8C5F9A45218D
E05C4E6F250F6E544D6011F65EF4808D3D0158097CDB6E280AA402229A6B78E6
AC615258668BFD3469CD663592BF1214E5EF1C116C4DB47B805E2F60771168CF
79CF10DC2DA8F2BE94869AA570DF2AA5852113C51CFC85C1E41516CE412CB410
BD026231E22A9CD0F664D76D385CC1170476B17BCDA45C640C583F16DA207028
0C58570A966383AA9F7CE59375525369CA6A559BEF0E05F11CA9C72A278C045B
1D2572EC08DE1424D2420D550177794FB3DEBEBE9E4105AAD34FF119AB2483CC
A034A95AF0B24B801710B398D9E9A95138859A819011423AB5921DE8EAC56ADB
58FB18C27A41CE503CAF2E7EA6F673ED5F34F1C1D20B609A152EDECFA26872BC
3C8C802A1517D9C6FDA3474591F19D573EB051F551990D0331B2DEBFA31B5010
3F6332290E522C15C69352124E1051A715399BBD1A6D3704BCBBE1FFF89E56CF
9C3EF605898309C7C3D20DFBFD10DF5FA30F409A76AE8021045DC09C95C9AE4B
4EF735A5414D985F6F79100E7045B930267F0EEA9BE820E13291132AE91118E4
7B8432BD1AD7A9CD912F2BFF83A2C4705A26FCBB7F8E45CB2FD9AA2EA98E381A
01BA4C4E31747123F20A0A721766F9D9A6769FF80B400B1EDBFCAC63CE15283E
72EC447BADD5BD58B053A11BD770399E31FB3B3D856FBCF6235BAD1F0D38E26C
3518FE6411F2A5FD4809C085AC2D60FA311DC99B9100C1A59CEF4C877053161B
59682BF5F2D85F2DA7EA0FE603D477F6E80DEAE0F250811BCC646D8CE2956C78
B897A5000D73AD32BD99B92E6E63BF8D79777859EC0F7FAE47F5A0CA878106F5
5462D3027DEA15E36AACC0E7349C8E60D6F2439E2D50DCB9D96C6C20D11266F7
913970C783EF6D587F638339D1E89A4878ED27E515FED0D26FEEE69602B2BD58
D146C077FAC71FD55A5490C89142F2844CB7E6352B01A448D4BD7A06D8EC0F00
E69984EC55E0B487FDEBB3F7FC3F4093CC6E13B87084E461E23A4D6862F0EEA2
84DAEA8343FE913EA90B9ADC7D025C2B8EA3689D75AA38B5222166C447B82E75
52DE05711B3883394BA9D683C161A48059A0463B17F3DFE8A73B46E913B99D2A
38E7FCC667A5B810B665519E7E1450E00BB9D0279537763ACA5F131550E83404
04E208B9C0B0A118F40332BDBB431AA70981E77AA5E5E76F43E730D9D3D047D0
B3EC66EF1D37916398FB8CE955E12D8A89ADEB1AE1EDCF91BD788D8F261962B4
3870D5928D160218A297BBD3BEA22E12E9C4197D0F3835C0942AD6487F5C9B20
C9A597910685A9BEE4CBA868D352ADC10A564782DF3BD57758FD145E769D4E88
BF43D19050DA58FFD64EB7B1D37BA13752B6C966C7A1397D80160687245269D0
F27E87B2186D931D624120B81967E58ABF5DD66AE39640224A518BF378B5CD26
761D1ECD916FC625A90EE8A7E00080300F0A05D265549982D56614814E10FB25
DA53070C2BBB4411D9608F4FF0B2E171820C734BD20399504F034BFE4C20E7A3
1326783358CF8D4FA48C1AB81741FA70BC0E0A4BBD104C7E5AC05CE49C6375E8
9F0EAB2B56BBB89144CE810C78D8CA02BD7CE2AEF79E27A7CC1D6B68A5B9F504
BED3487D1424CA82B8CC60A0156706987C7D0DB913F1BBF8A7B9A275E3345BBA
213B3DF67C4111E9564B59B724BD65916BFEEFE9BF03AF9D84DD2AB94847F33A
3AB3757D2C8CB688D50EEA68DEAD0613A62C3000C037092ED0A93F8486FDD39C
FCD0E8A6224BFA03E8C6D73F4B8F480327701262285C527828E5E203F328AD95
5AB433987B229534C53061C3350047FB20E3887F514B5897FDF225685D18D679
9DC141B7F6830D6771F1A3CAE655CA173FA57D400530CA6FABDCCB4325478D0C
93AC7EAA9DF7605213DEAF94C7281D9AC68D884E15ACA3BA68034F897A2FFC1E
F76FA2A69CEE7F1E9543904F1773969F65553C3469FD85B2F2F89F0E547BFBFD
F62A3E47DAA4EAD6D47F0305CCDB297C320A48A3655FAFC810CEC6F6D68ADA4F
AB5DD7F61DB94072B0AB8F1ABF62A78E43E1578DEBD2D05109DEBBCEC64AC700
4C28C4F0A5E3A003423B9958C73D306B2B4A7C67A95F8B4E737992642BD3701D
39FFAD94524A7752560FE97B8E99A12AFCCC5044D989BCAEC863BD15CAB7CE63
0194962E4183C3838D9401260A743447DF953444B29D7CB004560D0685F73E87
72FDDAB87125F419F90D165EF1C2A06A9B7500C6AD185B4115777C6BF9C24D88
653589B431FB84E4DDB650C2F783594DE6123D3142FC5C99973AF211F2A2A05F
5A756073B85FEADA4823BC1467EF2FC0E98A2BB28E5933E2F6E50D3580C547C2
54FBBBDC95998DEF2EA825E3BB2AEEACC0F30841835121B7A7D7A973F2EF67F2
795E6DD8CF55B9823AB2B15ADC328CC3AC493DE8C2F022EBFA14A2976D8E3559
B5FEDADF4E23A07F6C0E1387DD54F5C8BD071C4E9A716737B6BA413F846A887B
D1B3B89EEF73565F3D0D2D1E40E4C2811D37C9029692DF8E94F6FE39474EE13A
EEE65EC0E77188C18435A2E7FFBA595F0C054E96CC44F56301F6CFD2A7A42C7C
33C1362D901AC2B0FB255262754024729BBB2824C33C2FB07B4AB0E5BC4EF204
E240345C69F37D577CA917AA50C3BC9004C8FC0A5A8E517D39211861EFE9920B
3939DD770974B1929E48E48EB82274BCFE2E9D5D484DC7068B77CD864557E702
E4EB0C301062DB793BF0C98D7468E7D2C9EC10C2B121966B68222EB067A7E3C6
F0549768364D1935345EF4D1D5F8C6AE3C09162E8A4FC6CD4741B38836CB599D
F98A2468DFC2198D16044BBA796678C9ED23D6194A5CE79410133D40E5604C95
80910F6742AC40A7CB3E08E73FA1E15DD6E1179C390BC240DA061C9D539B20F4
FCFB72DD0EF634FB4137D55F76088819802AC0ECDE469085BCC3A24122DFFA52
6840EF5367946F3DF67C10B47377A99EB96C13C332632CDCC750FE6081ABD0F6
4DC19BE13680CC29CF0EF52F885E21F4CDF14F8A5BE651118D4F2436599ACD41
A728EBA6AA858A62BA34015E2E2F851AF557C8CF9586F5A809952F25B26C6557
DD62C2B52388A1B7B84A5BDD57BA0C39ED94DCCA571CD82C6E0BBE3DE5134649
8CD7D6DAC8936854A0E9B5873E0C43A98002905B196F919D54550933FC4B7290
C8C71C097F48AB5C03B5D053459D7E0ED44D117E1C942F56B51E615267D9FFC1
91A694BEB12CBF4EB3DFDA6A81788A92B5AE75375C8E3BABA0D234C04500AA3E
2F28C4863E4C426DE4581143A54D0EAF501057E3A9FF7B3D1A0671ADF319AA50
F054379798BC3C38137A81D75D5BE7E359EA0012AA5588403126BDDF5FC2AF9A
36305E36C2A2DDC690256D2085B1D4CB4BB93B1E736992E995B8A4F38FF8E7B6
0DC1EC1B6C746B6AEEC9D5B0D1C9641E59CE041594E0396A0BE7DFE162363F66
C0DDD904FAF6AB01A82A5E230905B36A862A8E30DE59B50522C8AEFA5451F931
870F2A99727DEA6C228DEDA6C25A88C4897BB9BFCE16CDE9E5F075FE4516E1E9
02D53E24B71DD4F1CC13482C48FD1456BB3B6710C69F0ABD2C8E0CD7C3900863
69D35D3E5A083C3E86374A2EA8847CEAAD3690C5D7BF9EC7DEE3705643B5F064
C6A8ED4630A58A2C74FF212B0A35CAD73632F8EE978BC33C8CB05AC2BCFE82D3
29D3A95F82D98F5E335A3E0F3980CEA094E6903FF9BB24FF67FD9F8598AD4F75
1527050258CB8B3F35F8ECC07BBB7E68F4BCB0B429D4AA25A2EE0287CC9B31D5
DDCA74AEC3B0951BD68B348D9C3656853E002ABC509706C00E045DC552B2E5EA
058D326D17411EDED514F2420EB640B4AF9CB0844D53C5BF81667E78A1837931
98838A2416018B583A55803F83CDACC6647227DB9302337CD98D1FA385DA5005
A64EA3E34E0AE3F5B34DAE23DC67DFE7BFDA027A952ED903E7B54769B3C48544
FAE2FEE14143654B5371B4E2EBF9784F8835D49F4E72B78BB5DFEDDF9BA465BD
FA74F2FF3B6E50CEAD45ED2C0C24E1B13B03CBA0C37EC251BD452805722C04F1
9A3B3C950F5252385EA3E898611BA9C4C8A5E0A6AD4E40D06FDCD6EC46527591
BFB94442A0146D8F93A35D8AA216357D0F96B8C07983FFA8FEC41B589A018331
D25E5B0F594F5C418739003766FB193DD7B97DF0F9A11121F9383E9A4D7A4220
2DCE9AB3649C01936660D3CB62D4FB6261D9D30EB70B6B0E91590635EADD02BC
13F010CFFDA00810855BC4D8EFF39ABAA0D3138F5E51E6484AF6EECE850DFFC5
2F6B458208BEFDD79BD8C4C6E6394AE72B8A73A9D1D8F443AAE0A3F0C050249A
333A1F83E14DFB045589F3D6D1DEF71CD3173441F1C3E12B9F46F91C415D6C8D
7FD5678AE5C1B8ACC9DC66783428D06E458F96BD48CCF7CFA30A7E12255939EA
6CF81055E5330CC27A4CF7A4C462D94D7EE9B48626D5D425D400528D5160C7E9
F656D93EB214E1FA04F01B61B295058E0FB0EB3C625259C36BF9AD2EFB5C64A4
540E4207BFCEA039DFB0F7E2C38F138EE0922FBDD3D7BC6FE12F0550746CA3B2
1B026E261F8D920C2BA8F9DFCCB31B1A824175717E5AD6E1C381A4C882B3C87B
0D1E0807EC239961D451D10743B0521AE48DC71EF5FF7BC09FC5E091BED2FF36
1ECADB0F68B3324E63C2C65B6338056AC11ACDDB5CD7B1CBFAF76EE833E519C3
715CFF2AC385F9BEDDD9296863F46279D85E4AE2BFD687F8117DA1A2235FC498
CC9E2C9F57EF881D478600C807DDC7F0A468EB61D185E06F8741AE6FBB6DDA9C
8EBDE42F5C0EB3D3524DA157F0B3F4ADE8D0DC6B9E205C7C32C27241713021B7
91DB1A56767B0A22F335A7A5AD395D681A059A12585DB05D6BC44417E8CB8E24
72EF2624C23DF65B82AEA0A95347F2DB16D3390FBDEFE059EC4B154FAC3E5668
263E11D3AAE27591284292FB1BF22EA7654C2797659120CEF28087F4E387C70D
495388068F4741728D4C96EFB433E255DAD15F08252EDF5979C14C46A1ACCBBC
666E9BAAB3B2C8FDB9A87D88D52B68DA57097C8EDD95A5F29B98068F254ED1A9
1F7031FA0B828C89F0402B564A9D9409103DE0E095F7129DC64B4012AC9CE863
CE8B7119AED87F3FCEBF2730D812FDDDD016B803C38B89238227FDD612653E3C
E63C5F1C17D7739FEE56260D0D7AC77995554693CD027EB52EA2DC82F92564B8
09A3F2D592898ECB9B4E44FEFEEDCE7B6160978ED7FF4A5199B53C97023C9329
B221ACB437B465EB4CFC51C2F6AF138BFECFB31E0322545CFE3285AFEDD87CF4
6710EA0724F6555891218D3B32A636FB671E4EDD08ACB06E6C5B432D12D54368
14AB3ED796B8189A3F739C72975C388195E802ACDE6BDDDEE4231FA5F99FD382
E78F26D35C407837CC1CEE9FA13A8BE69643BB244C9BB935BC5E655B8B3F2C6F
88B1A5F5559692B7327B67D3691BEFD6FB43CD0C44EBE127FED3E0DAD612EBA1
FE7F38132B7E187B4F875CDC2D0810206BBE5A325FD8FB253E24FF4AA72AD911
7A726322FD0A2F50DA64EF2BAC19C9A5E1CDCD8281564806615E4AAB5EDB62C2
F49106B027A1E5D547A55BE0E8FD19AA6BD9207104404D9D85C6751EB1F9F31B
DD08499CEE7A9B2A3369417B580A83C684F7A17F8ED87A4177E1103949CD1271
5E4C12A4DEBE298B7883E0DA25554FC82FE4E94B900DFAB447F083422F93DB1A
210C6917BB6A04E89C45507BE1B5B82BBC1E2071131FFF47E4533DA66CD99164
0317676F0EDFE1E7BA8E5424C8D0A899F621CB490A6823BF8235C4F5CA76EA74
AD464CD041B7CBB8892F2DBA833118BB45B377CA6B15C104868DB82A285837E6
2986F81259FB7E37A3AE935126E72E876B043B371F75F8E4BC40BA7CF7014A07
3BD9C333C710AAABDD27CD9B2644983B1A5F84F17CAD6C177E402043E6289A8F
C662399E3BBB19459910E0F7E6160CC2B113F5C9F44CFB38976D7D00609C30FA
27217258A6856E3D6F3B11321E3C7B4BD66D302DABB76CB486438D247D010613
EFCD0C6E1D1FFE3053925EFB1C1A29059487E75C5AD820804B763FDE9614BDB2
EDFD18C10D3E6FADA25CCC9396373CC7E6BFB2E25C8E5EC1E76C9D065EAED9FD
1C906442BE76CE28AE3DC8D73A84AF77A1A9B7F8FC840C4BDC95F29056A0E897
2D5E0FEDE1268161B9A03DDFE8F46EBF727A6A212D64423CD27DCC76148BCD2C
4822043BA0C80B821AF5E81F9E7FB6BF95349E3B7784FCB61A12F2DD28623636
7D3FD6206DF1B2B7701C20E811C28B11A67354B956C3ECBA3C55439ECAC3970E
EB60623D796019CA67DE7AE30BE86371DC189E1F2891DC18525B35DEA0A1F0B2
E33B166BDF7EAA55FF9CA297182A3985501232ACDF0AA00C21B654B16D6E82C0
6F383ACA8ED1EBC45A54EB4429BF719BF6CBD10FCB719DCC8CBA2696E0B6106E
CBEEBD976A1795DD32AC9F4FACC0E72FB74DCB60F072F3518233A258B54022C1
D3BEB7E4B6389FA76416155347AB064A53D346628FFCB7CDA13036184CCB1753
9CAF6DB91BF6FA48E94D48C1EC30A2653F62251D029F7F2F3CAFC7DD736BB0C4
879624730570683AE100F0C64B051D830DEEE49F6B27DD39AA60F846EF5EFC3A
CC0D5187DA632D4BCC51FE58FC26FAB5D818BE9727149100E539C23829946572
A0B160E33AB3F2179BDC1826112C680456C5008EB66FCAD369646C15DF7E6022
E9D50B285FC2BD24A871E66D53CEB552A134EB53A8090EE56333FFC26F63A8DF
81E537B689FE89AD254C935178E836E08D6377C7E031912478F16B0E889127D5
F0571E73928AAE10A2B290053C9BD61070EC189794018F1B9C56504B1DDA6406
1423632D64DE939F56369223465FDFFA2B6C855B29F67FBB2BC8E9AA0014C757
90B06C375ABA39B176C928BFCA648599B81B1E5F956714F9E17000CA4117B48E
590E4D63BF187D8A93FE9F8CD6208492E7A448BA5FA5C869D720DEE0FD278EF3
FE724AB849B4CD288D6AB3FCC3A407C19851D98823AC4376B8270587E8F3721F
A835FCD429CF844F9CD60DE04863F47F7A3607969ED4E124CFD6BA64E896EDB2
ACF366069ADBB1B9CA71D376F0D622BA2229C8B0D4A9DF0932F6AF67C63FB0EB
6EF54EC678D8850D009A8B3868F4A84AA68FD6EC42440357B7DCD0DEE307C326
99453037732F54AFC0BAF60689938848F04C39EECBBBC90596EFAA889F6602C6
EE756864C0AD6994482B242AF0DC5F16C8510E8CF5E5FAB4693453729B8D92F2
2E3DDFDA20460C55C375A40A34BF6BDB04BBE6B36FD9D2B913165B632D6D5383
0EC8AC16DFA52E7430FEA535971EECC6EA4C239D51CC54EEE1BA194A36CC4E1A
158E799D50610BA45F2003568AF44E2EE4DF2E8B84D1E74709C738989E93DF18
81CFE30E1D7D90ED00442F24D98DDD5269E773AEB6AE9F7EA6B4A09ABA00B1F9
FE3CD1E8FE988132C263A316141ED0F25A4455C8A1170D501CAB98B1E55CD8D8
7D04D8CE052366FB64420290FB3620929FFD88F15A1BAE76C6EEFC79C130434D
B2FBB40FD43949E07AA47353BD44058B858456FD04C704B0C26ADE2DD3774D90
3024A13EDE0D58B50937201B2CF74F0EE0986BD86BA865BB11FBF008D13A744C
AD6EBB3CB4905BEA0719B47CEE6133A69FD04AFC3342DA82BE6C4F5BF785FE50
E8724E521DEAFB89D35DDCA329734BCB1375A9271E681133A39732494A33287D
A4FA6ED2BB820BE860A0777ECCC5040518BBF10BC64FA9A28276D2C0207AFE2A
C435AD3CBE381E6B123AA4A7B165F5271B585DF5B91E9BCFEFA0BE81C9C8D7B6
9302790BA4FE28FE929BA62E662B9CD638C76C805726ACA01D118AA458EAD2F0
7C2FC32BD8C69DB194030ED940B5608179C8BF28994732BCC57D928BC883B8E7
606DE3BF85D89C0E713F556814E051C6CEFE7E83C2F379BB129DFF898EC6FDCA
86CBC4FF03E5A602F79AFDD12546BBF51D032370A8C3599C2D0FE7A8833905E2
E9E11C6B1CBDF53C64CB85FB1CE5F146193AE7AA7F7EDAEB65D5FC2E625BE41A
41B4E83E09AD7127BF672DA7C5F38BB090636A9700C081553E214361B2B57EDA
19BBCCF098E189FC0A908D3DEB35D08E2EAF4EDE0C0C64A45E3F43E95B8E781B
7F571EBBDC53A4272568BDBE227C15BF212BC02FBDD36FA9C48822F17C1071C0
C7FC963342019ACE493594A9775E4D26BE10DA6E3DF700D4D23CA5874C99FA44
0C869BD1A8259D0976FBAA6F873209E8915224006ECDA210B279F0F086050DD5
53553B3F87AC2CACF436A6A992AF673E323BE5D63D0929903FB45F56B11CC71F
B91B8609A61C08D9C48CBADB129271D8E3832758B95AF1AB5B9C0B5BA0C81139
0F96DF9FE4311BE9AB45B21FDAB27C8A28207547267FFD6B8A6388FADC94A771
24E291CB27BF10E4EFC417FDB11ED726664BB5DE104EB3D74860697B255C7284
6F1570C0548BEE3C2CF87D9D053A72A115C31F5EF4B600EB9AE308F208148F47
77479528FACB42CA8AC20930D814C6A3E6ECE761C6C940133F979F05F9CB853E
DF0D22CDBB0F12E75F746021779CA076D395B9988200010B28D99C6AB4E6593B
6AB680AE19B049A67FE1A99D03F851BF811AAE848B8F7F77D5075DEE3DBD389F
1A8CAFA41289633BA01D275A4878C535AA85A3D3A7C3478692CB7AC1136868F4
A544F0D25DEF0CF4C9A56DCABF4133E260320CB39E191970C0F0E81DBEF647FE
8310685F8DEE7A7A5D209265986F92AAF11143DBDD1960BA9D54EA09C0E2FCE8
507F619CDA4BACFA4A958C3A4F60F3417D147D88DC59395A19DCF6C41EF3B024
DE928957032A6D45BD084D6678957DF6391153F939FA6EAC6788DD87665BF143
F03485E11FFE1F67FB6D16AD326840DDAC291B0C4B29733DCFFCA15AC3CC55BB
F9B3BA96AD1E84E06870234B7533C1EE788B3D96A150044537D6D133019C4ADC
916AA6F4F5FE8A642DA2E54F4224EDE06957927B29F06CA32B3C4F6D28AECD41
0B347F3C0591088F2433B0E8C971CB07C66E1B7D10869521223EF5EEAE60AA43
6618C281E0A0E3B3A9303CC927663E41AA2986BE66A788D2098D50198DB6B27A
0F5A1ADAB1D6F246C231607FE829CC65E0C02E0F680C6DFCDE0AE9F9257D9AAE
53C60DE5EE3A1E09CE2A3246B9B5EA106E382CCFD79474385118652EB37CB702
1F80792262A4D2F4086F5C5E989B17A3A72248A138A3CA8622749CD748149E9E
9A5F87ED3D870BEE3C9F8692AF81C932BBBE93F6B14CF26E7A139EC8D793363A
204193F78172FF911C12A326830A38C7B58AF68CFECB09313F5745B02B4BB60D
B95A2F21563212B299C296401C85FCEFCB9B92D2B261135C2D18AE3897CF65C8
389617F534EC699BB12C33F0069EF7A0E4A8D5214D07B149EABF51C85F0C8A7B
7BA64071EB75304F9A5C8286AC95FD505FFFCE931B60115AFE7E9B839A4B1ACF
EA93279C7247486D79A3B628783F8EF3B32AE780CC9D48C832833999E78819CC
4FEBEAA876ACD6F672B517A89E498488371938C573B40D709C85657537432B01
750AD448731F49E12F1FAE92E92DEA1D4B42637BA1D16BB08F5F997A8523C412
BD8A0B47FE15694D1E0DDA0D4DEDABCEEFBB94D35FD6AA23331BD1E82BCCE5DC
0AFB32A9BCBECCFA292AE5BA0FB513964058E8764E7D35BD18745DE299429028
18A35E1689C4D582E9D62D6F6C8571B6512A8DF217954E5EEA59EA0C7513FEFF
9323A756E7A67C5DA7C09EC09D104723BB02264DF6F9E51C0C1FBF1F6C230C1C
99974CEC3D5F27E9BBB5BA85902DA1915DFCFA0EC338B03E7AF6EF27125F0BD3
838A119088C53490119121DA941D8F96C9CFB1946D4B130996B78BD1D5A73E15
7AECB9F3F59C0D736946734C6F51A3270DFE501ABDEAB9327E296740F0DD9B42
A45924E1F91BA5DA79D7AB6BB91A0A6D6FB96ED1A9AC8C200DD16578E6450E26
0A19C6A63993F8E10D744176653072FB2E5D15C8D09D13B0A98AB430342A8C76
E4521EF63CAABD89D50D48DAEEF9CBD343B8D23017AF0E768DEDDF004BC981AD
F1AA24A40520A6C06816598772E12C1B1F98709BAF0F79B6FFD29420D0F578D9
AC9A678220568614C14AD4D5221259538F0CA3263BA0B22C5E531A652F74FAF2
B50A51B1A4E64F58210DECF59C716CCB290B7B13268300CF5311083B89C86D81
AF27BDCBDABC5752456AEB786F9F7BB862DE9557DBBABF3A9BDFD6C700D9B505
2A4BF938AF76A97EDD40B7F6F9D15E91CCF9B8B9A148788AFC2729C73C29D2EF
3B5853650EAA263A1E1A8E00526F4C9FB31628AE92D61AC83A80D1EE1AB160F1
FC0117F7D3841355BFF69FBD6D8CB704D667F72EFF95032898842822EE91CA5F
54DBB4DA24D13497EBE633007855DE1CCA46A10BD728BF9EC22CFFAC50964EF0
FD105FFDE065A60B90AAFBEB4642A196A54035F672BA95AAD9F78704F05F0B9E
A64E6392B51B9BE1B48619F12AA6CF69A2ADDE6F26A46CBAD656899D01B503CD
DCEEC86BF2BAFC834FB2735AC09B41DF9EC06E5026856BDD3C2EDB6033238AC8
86D639207031A9A1CFA77B04FBE057972D3F93B78D5A80A6327A35B2741B0FBA
3CE446FC3614D05F2911BB5E61951DAFF2A3E9E9B46B9A5B29A2F79973BB7424
36AC513D1A305823F46D95CE210EA1EAAF36E6AC0D078C851C24E2B2C31D9A9A
1CB21383E4B0AC24089175B524F1A064F5474731EBA0B687076CCD14323BD3E8
EF069977E88971C070FBAE2C25A7104589EF3884A2C9A139680095425AD8B4DC
E63A5845CC77126DF2D802115AF20453A685A329867D8165CE82B70C6B443BBA
D9E35394EB34971F085E6275D7116FB37B31EB763428B683FF8FBC0529106312
0165B4379B1A4DC9D967DBF6AA4B869B254D39333C47A03616E42058B0F8CC64
25C29339DDAB879CD224BD2B3BD4873BECC873A9C71796A6D133081EA4EEEFC3
CD2FE26BE20AF71444421AD1DED92FB9D04102E568DFC9326B499854BCB7C7CB
CD9F9988D71C434C6DF848316629CA47FF9B07038337966F12D2D3EBA8801F32
D217226E080143A8E35F88E3464A38D52E457C4A4B362143F510C94C26647858
F142DD380FC1BD42F537F260EB79FA98C230E7ED5D4E509039E8A40F0C99972F
463F0D41B85D627518A85CC96B29B99A1B568579ACDE838EF96D043E0EEC1B9D
820CF93F5FC0BA150578EC3FBD69C55EB49363EF77AD6D04F8F648A3A9E33E7F
5C55AAEF32B582FE54F0B93A85F0DFC1C2677988853B1CB620CACD3A22A78819
10197E470E7277AAFACB02AEDF932280BC552ECD04E2C33B76A0F6172098AA77
FB1C7D14C30A993E766DF7D22532CF7B495E94E2E2445A4734A12225592CEA5B
55AD65B8D966406A86A7FE853255AF71C9AD585854C18C87EA13D0DBF19AFFA9
6590F5F2497C1211854463046528202A452C3420F1AB3ACA1F43B8B7D33B5583
9F745424D22BA34F1BA11FC742A3DF93FEC3FD0397C7EDA10C345F5F68747E05
DDC8CCFD0E9BF496041F09D34B681E4FB941B56A2D110EE04B8D3F8AE9D210CF
36B6EDE8ABE94C8BDDA908C412D1709E94F7007CEC5F16F1CEEDFE0241704A66
122055DBC4CA5C1054002A2DB1C9F9FF6A9DE9A3D778A6463E16EABD2AA9AF6D
CD95E738A5F5EA5A782D78190BE37B673D3BA9AF2FF03F2B0335B34C75863524
20262A6BD8C8C86B4B58DBB970F1EA2861AE50704AD81C1F42AFA8C29979F36F
9485ACEE1D388D5C45C21378715D75668080E4145808CF73B19653C3BCCAFA1A
A748409D3C1E1A165DB62E6A719A2D1B7F5A905DDE997F3513AF3FCC9BA70E3F
3CB3255870CD61C8CF7AA8DE567D174EC90945404C5E20ADA1DCE0E4AA6C193A
EA970F45D01EFCFBBD18095C11E123CB9AD2C26CFB2671B72D15270CD8CB1D59
CA2071BCAAE7FA181E97431CDD0935FC9D12DBA2BEA04B1F8D75A7F1EC64F885
5E80F6D18ABD45FF1F673470DDC6FA7CF27AA182909671965AC8849B3B885B7D
AA70ADD9B30120E775C4064934FB530B35AD9155EF03D074AB52A637B9FA80D0
8E4430665EDCEC71DC39584BC7A6769BBA8813E83EE1FB4E3367DE4DB71312CB
B85ADD21D5A405F9C3A1D16DF1D7F7DA574AD1206B4B1ED161ECA04958CD8774
08B57AA4D8980E5892C1A2F0D275488BD6D36ED2405F13475FFA748F1F456B65
C6329DA22E64B460DD55D0260C1157555524CED262025524283F4864FC0E7194
76AAC80573D47C104E1B561FFF5C981D0DFA6818CF9DE6B9AFFA3E9950914CB0
781D5442DC61E235A20B0171DBE38063F9326C3710CF8A8136ADBDE0D75B0C78
166B96DCEE3CBFD5DB2D469ECBDD4D11C29B962A65FDEEE9797BAA3658B8AD58
435B34B1D7D501B561D3E182D5BD46AF5D119EB97ECCF4099E01BE746CD92701
54AF14121A6D08A31D0797C7D0DF1D6D88ADC4FF697C5CC69642E160BAE1ADCA
B72565D3820C5DC08A7165076909DFA4F4AB6498FDD8109322DF0CCE8FE0405D
523BD800A15AF56106EE7EFA0BDED029D2273032E1C8A5CD079CA3AB1F6D0503
AA0DE9C012E610B9840E263707E73B9E589F39FBDBF92515FD7870D55FCD937B
60978AE0D5C946BE22F8CC741550397679EC762DDC1D253B978E02085D559096
50BD9404BED91639395DB88CEF35A4B8506167E7BC2591A87D0CE5AEDA30DA4F
11EEEA1031376187D23B0084F92B6FBCC5415159C5A2DC2A851524D166CB41D7
ADD253FE74A224D2F07EB970C525B6BF8E81FB5EBDC4E7F5D065CF5DF7846EDC
43649EA9B498E23B56146162722CAE43967E66E0671A1A0C7CE77B97D88F0FBE
FEA0933346464B14AD779F849D67106F1577A93E12C063CFCFEF51985E869E11
87E7CEE1A60488C0FCDCEFF9CBA83F8DF24B224695DE81FDA340A865FDD788EF
EA78314F418E617DEDFC0E4077566D4E41C8F0E9271017469F79C5C62FB8CD0F
00B147E81F5B6A79475AFCFDD57850977CEB198392CDFEAAB4E9A75A7A481707
1CADB86467E8BF9B7735371FE5A2F54624315981DB9E59213A1298EA910CD43E
2720F2849E4C3C7B62E653903867AB4645CB020ED7EF071525CDB93880A24EAE
ADF171B5C071CA62AD56BB2B348C551767F4AA82DF1FBF64BEFE5CFE31B34FFA
D0B219E79EDC9659AECA3A9E7B999C3EFCCC332BFCDD9467958904FE0CDB65F5
2BA057443EC42BF59317A81DD123F8434BE971D9EC8149468CC0F2C45ACCD2CD
2056377F0CF94C53FB691309C35E6977332CCC6F0489602025A3E11EF9BA85A5
C0ED82E75B075EADFDA29ED052A15453B3D87E5BA383BBED896F36EEAB8E04F5
85DB7105FB8A840D893F79F3230443D11313D6EBB93425E27A8E65B9F6722F99
0B9E8FD174DBD1094C561780E870C339976E9A138108F567FDA124069BD4FEFE
2F237241B97AE327215024ACC0134CBE91FD761C26A48EDE3EE591081DE21AF1
2C1240C57540E73362D1F9A090458F2AB15434DC3DB6BB2FF28A98266D9C2FCE
BEBAD943618D8C9B2131051DBED189118B9279A11243BF046098D4926CAB9DFD
EBA1E28A4944761D39FEC2A82A7BECAAFEE2ADB9F11C2D1B9D7B6576029D6C19
FCC634E08E4B36971C50B8850958B3ABDF0ACD98473AEDB5D83A44CE22DEE5BE
6AE2FE2C9B92279B960EA3D630838F6E008F920397C5D9896F2BFD0D101F03E1
34E14130A40933480511B85E51ADE05F6461CD7ABBF7382327A2F9AD203988B8
41F14796F1EDE6041ABA9018A36364CE91AA02E200F0F1397EB5BB488D476D4E
7CF40F9BC85B6AED675E6AA90E785079080243CDBCF22284D25B669F5D791A7B
179DE9EAA689EBC39EA345CDF83CACD2D870186012B105EB71EFB328B583C840
EF710ECB23DBE16BEBED01CAC61F35AF4899CD0B44378CD3B235D1BF759930EA
2C1631A47E8FE40D0D97E9BBA0D4FCF0E58E58CEABC579ADDFD5727BFCAAD955
DAEF48CAE860C4E1AC06A1EF4677F532044701CF8C14B23128617137DD98E201
6A73BA0EE2C639D2D841A976A9CC1A12AED614B2CD0995541EF0D32C2EB44890
07C555A6A08B437AFCF723A8F721B0613DB14A9C686303DAAB3AF5246279DC47
2CC0113E27D2A9368A77FFBF159291B59A52BFBB8E9E310E08D89634FF285D8B
E44233E4E54C8C0255CA77AAA035608BB2F37ECA3C0CE33E16D59F60B06D7510
39011DB94742CFADF349DF972895EE541BD1EC657ED5D3BD43A15CB7EAC92996
42015EDF22C12D9BC0CEBF5B09B91DDA2DC1E85BA177994AB0353B91D6BC325A
CA18621F9F14916D8DDCECDD037FA2BC4A92730FAF68949DD17C1D4D030D7C19
4B60169AB39AA25DC06AA5E5CDF05BA399448FBF3F37A4C0A96F25DD51429057
13EAD4B3A2D10EC950146240EB989553A694414D61A12A2DC73A940A4E638A4B
EB29138A4188CFE93CA4A304923144DC05F3167C6BF0695AE3AC7CF32B8CEC94
595206471EE6A14A987EC9417BA7A0B7CC3D890060004F1AFB35FCA5A82817E6
44BBEC432F24ADFC5F33896E28CDE05578BEBA92B1BFEEAF7A3DFF6F4307FC32
D07C60513B342BCBBA7B68255AEBF8932CEE9076199165EFB1AAAB0B14C732C9
35CCD9269C08EA3961649C0309CF1E532885A495990A9D927609317C50945E7D
EF65F98080F155EBCFBCE24CB8389700A21B5810911698D165FB7C1168258520
E43F33659D6292E8BB0A78118FA7920F3062625D2A68AD693CB22E01D2860F62
63A8565D137E9E1CB3BCF98A51ACFFC8E132C302BAA41C9FE067CD7526794BBB
D8A1622159D1A410D1ECF1369D4931A8B3F9AA465C5FF9FA326EC7A47AB19AC4
598E2964288CA798A9F62F96DC88DD675647E6D58B701088433F5C569F5C9F94
290971AC8CF1FF405D523BD800AB443F9C854E92615030AB62A6F06A44D8BAC1
EBD0995B6E7815E891ECBADF07F15D74912216F8575F5BE6A652012823D01E8D
D05DD7B31A4E08BC15D7E744EB439BD986A92919DC76FFDD18C4452906B9E29C
F195C72CD9F70B627CED25116B83B9B65E617020BBCB8C19EDAA6A5B07BD5C7C
CC9ED8C4B9514CBD0ECC22F07DD19B40D0767B84B9F1A2E09A094BB1F11166C9
5C6328D34C89BAACE6C495B3083C5E8C73275F9506E340F11BD24F55D48DC374
ACBA15C541BED40AF03FAC93C2E1D65172487469C15A89A494F32D78674B9158
5B778754EDE60122163F8F9D4B3F3FCAAE8EFD059496C2E8D354E978AEE7D7DA
B9CE034FC9164E2C8D128AED83DF6A2079545EBB7929E733CEF03E8A5996C9E0
C2E39C8C891341F49BF24679E45EE1606AE7B5270D8B4D52883D5240628324CA
8E9F4FF1CF7CF3A8289C499EB12350398A0C40DF6FA767690010FC1AE51993C1
7B6E9E6FFD40812C1F322AF9F122E8AA2D4546E7009072C15D3321941D110955
705E45F21F100FDBDC187A480D26A2B9D8DA99E95316FFF4261FB4AB31058AC2
7B6BF819770C7587802F6C66C3BC6E9DF45A22A24877E4A44990F53DEFDA76E5
7E0A60E1ED9EFD4BA27631BB1FCFAC5142E6C5425A6F7ADB67E6217C2B3A02A1
7AF215D939F9FA1DDB2EE8BF311D7B50DF95864E8FC67F4EEC10BCA7B8FE8982
DC886C4CCAA01436D793592E6ED0EAFD4E388C2211605E897C07858FD1E3AD58
9D01A25D3D1559646497542903555A7FF683D61843F9E2B82CCDFA271A38EF3C
75134392696248A73B1E1B5E6ECBFF23CE2471602138DE12327C60A038429D50
B027E628AB1E9CAD0E8B9672709A942F6541866E34BF2B26583DA79B073FDC77
CFB67A871236534D0359F9C85DE6B68A04129CCAC7AE2CCCBA24A6248BD67B0E
D5E2B2B63339C08C1048BBC0863923A67977975282962120BC0E738CD7909890
27AB9043E20F807BC9C2A57259E74B827A63D6D3A0D321FC39388733CA9CE70C
BF30BE8CE7DBDF4ED6C4085394ABA634F264C34F145188E3E0143A3980135335
40C2DDBBA409B815DAA0A5AD3DFB4D4A7AC650BAEFCB592FEC1313603DB22B08
66C41F0334DC6042A7B5175094A3EC84D2A99143C23F180B7B8CB51987F5722D
B87CEC6B1A747D06A6B99D97F0AFAD481FD67040018E71A8930C392B5E0ACA15
C2FF5F9E7D9B8237813F4E5A9502A4B17DC063D7F327D6A1D6323E592930E2B5
9D0EEAC699811B94E4B3C49809DE47FBF074D7F88F2AE1CE2E763C337CEA55F0
FEB5C50A77142A3DABC6C2B4ED75E47DF4ACC6EEC2FD2DED81097A19B0D7B651
2A12569D2FF3629E520A12CFE1748B5DB5B92C8B7EAA3EDB0EEE0DC67085A3B1
F5D06C121E90EA85D5B79452D397D59DC3EA9CFA52392959AA4CF97F37FE6C3D
8C3FFB497C1211854463046528202A452C3420F1AB3ACDA8800182863FF2526F
F4A8F358E419A2E076C7A04386F864C7E3B4B4E7EF301815700ECCC759D68E9C
85D07373E3A5530088F1500FE9A95034D488A2237F2D14798F9E09E87602749F
13834D073DA70914C5A40FE804DC74998C2E34CFE33ECBD34994E091138FC9C9
EA6406A2A98B8565401D1E979BB17B33EB3E941111DDE4D60B52A71EC9B602F1
28E7E99E45615BC9B104D722A933A7D0D89235C4863EAA1AD1370460364F7DD4
CC24445D3A17A3583DF9E4AFC70C426961C9C7FF838BFC4FB59A098F1ADD4035
278698FE32291CF611A30FF069367EFDF6B335C54700A78CFC6A6B0EE0A6A4BF
C20B92B35B9DC53CC6FBCE7384F10C2A31090685238186A03945425CDDB3EE85
429F73C6121CC893CC62D5C5A645823D46A2B7F0B40503B00B5FA95C2246E434
1C8A9195195A86D3ADEB481784B5AEDCE04FD6353EBBACEAE693D67613AF2472
10CF61364A83154DE9A9CCD73361CC952A83E09CA4735506E6A03C7A805C5AA6
51DFD7BFC5FC1ED41BC9A2E2D4AE26385ABF6CC82A01F18E577035FF34946AF6
060E87FF1EF88A9CD5AADBF02DA65BB417EEEE60C6F43B3D862B9389868FBB27
65D41A72DDBAB69794052CE9F9AE8FEAE435693BA2F15F1558CA3081D63A4019
F5224B5477B1865FAA8E339DE56E1D9F4EE6DB813FDC468DCB77FC547B9E307C
20DC1DB2A6FCD6AE29924B8C792FD62642A26DCC859C6A0BDCD847A4D563F4EA
D3E3E6E345796E7E72B0548598142D3C0429A94B703F187C693B5094B0596AA3
22A6F19CF3942DC7979F8DA667BFA48A9C0FF8AC3298B074AD3E1CA726DA2DFA
A43A5DB57AAD095647EB850421B0E9705C3F01CDDFED987C8BA8B72D68CA6B49
0E990B93B113F95EEF8F1D23575A3C84CD3760AAE7D6885417961A4EA7452F2F
F1F6287420403A0A31CE4A66F3EC223C4F7E56A90079CA7DA18D25F3681DD013
1C46E14DC06B380E2A15FD066508A0A63CFB39796A412E82797F038889FDBF79
8D18D81F86E55C66C56B5CC19FB4F5B5A277A43EAC800960840FB038FEA61D6E
5C26FFE6EAF094160F65D86760F77E2642B93E0758D90C3A9F517473B7A61641
D2D56A8D3F707349DC420E78A1E6B7262531D1BB6A78909AA55C94130C7A4AF8
389819F7D23F8A75F6D1464A7A8025262B1C95F281E1C50068822A04965BDC89
A31CDDA832A06CCA0A3916CAA75CCE08D9A100CC4229A4E33FA93A0FDB1AE200
E2F7F474C05B82C58509CC2E624E738FA2C0117AF693E5EB66F4ABCF66269064
9A6F4D6D25AAD7879608163AB9D9A2E5CAAB6E2ACEEDF17D2D7FE4232862C16D
1DED4159728E4D6A32629C7D9712D9756749C87104AE92798F81869F3A308F21
02B38B8E4DEC469AB05A1AA5B95803D0911E46D4D8CCD3690448186DF59CD418
54BE5E0865E86B8E2A773CBEB8C054BE1342EA9F857DC7C6CB2162E905AE70F2
E54A2E7FEE2427A38068B740771A6E60451B561C3718ECD9328432DE653BF6CF
DD4D387DB61B4DA142A28C1E1BD35339B918AF09A1B9C4792EEDC0CA861C551D
5625E2B3422CB593A30CA3F5CF1FFB70B20E70B8B42D8C0FDBBC83D0067A8069
A068E7AF13A54359EF843151973EA9BDE8FB7F834730E19E46C61A0E3230B00A
9EFAC8828C25C7DD412DB8410C0151D97D9F963CBD0D3DEC9CAB1588E1268772
307DC168E01E794BDCEACB517109806DD2CB6704EBB0D4389D1217080B72FEEB
25D684C53723CEDC5E42A4D17F35791CD367DFB43EA8B8A7786151F6431DE0F8
FEB630AC0403E67E41A23FDA339276633DB29A2965B077B575EA8E7F43FA2AFD
3C7A87870B7EE395FD539A03443EC3FC65FE9B01701FF501F14E165E4B751541
4DA5132736976F6BB74C5E653F0B17D7F91B7C90BCF40C1289C2967599FBEB19
8C1E264811EE43D670F33F423402B4659653D6138BD427F61F47A22779CBED2B
132A2915E0454B7E388008C2A4CAD064E43E501B67C9D0D0C2F61A648E0E1DD2
E9C52118FECA4C326D9D8B30A01DDE65747AFEAFBA89CB6623C51F41FE9A5F6D
3BE27796E51BE6945A8CB34C05B524702B8A8B07AC946D02E3B7D57D8AEB1D68
79F0FCB372678F0CA59C72FBD14523A181350D6EF6FB283BFA5828AEB51DE5F1
98A1BC7BB965C8818A538DAB1224059BCF429D4E3BEFAD53C138FDDE38A1D902
6A6BD701276DBCEDC78CF4DF83605EC6A874292066BF14043C649B7CB1B6CDEB
28C41FA1E484324910B40D1157387151D026428CC9E962B0DDB22AA094E07AD7
B176BF1DAAEDE320A0520A0B37487831DA1DAC8F01EFD3C605549A3F1FAC22B6
BEAF4AAF050F87D80E5979A7109D8F621F9791BCE50D4292DCB6E3B344BC44AA
8712C923E3434A097F3EEB52872BCC9BED3608B3264A1ED79B6E76A00D80C316
442C049CAA551E2521F0EB6D7C10E91CD036DD49358896B9CDFFF23ABA9BED81
5B159F4E5E5D833B8C6483506C6E111EDC91288052B52AC4336C801C993E8901
D31F55B80BAD84AE5AADFD1E4BCD68D656301406C1FD474D98B7555DABFC4427
C8E4FA6DD88C3A2FAC47231E0FFA19C8746EDA1E6DE86C50B07B5E18C603B153
DE1169113B1C3E1E2ADE4E44CD7FA985871CA8B465D7259BDB8881A3C6F0AF8A
4708F48028FDAC2305ED4314CBBF3F76F36DA0E54815BC27E7DEBB6740EBDE60
34D75B0E69F95487601DB395DDB0B8322CD1FF45C1800AA194524A59BD6F9A6E
325BFF601E21CC2C1E619079C9C9D5367C4DDF482B946E7D76B70643D0BA5E14
732687EBADD34378914075B7A31ED94233A9690AA696EE86875328320F60794D
B2C24EA2D2D80BDF4F0C0D991CAC8B665D8A2EE0A3504C05DF52120B60AD823B
2DBEC3DE48A3156975A4C66ED9C9757B771E61C865F7657EA114296951208BF0
3F2DCCE2B97951E2A368EEBFE3C2E086CA3F9350AD3A754AB83FF7A189190AE1
A9713D49F350639053EE164D9A8D8FFEF21B7AE77313DA1D861998B2FAAE8AAF
2112C5F47334623409DBC3224E615E1A621D5784661CDD3BC212FB48E06454E5
2F1D24111C96F2A5A3DB8176F9C4EB353695AD2F8B3922A6097DA81E6A3D4B3F
340503E788011FB6B038E8B0B2053E697EC9E5F6B58D51AE3CEBF03FC7054FFC
8FEECAC3F8F25A10B17C7073F433A51287454851D8F2A624490797ED1A91A817
57CED1BC4B2235207A9064B4D597834D491B3F25663158372FB28F07C7F4A654
76E997710FC4BB581210A74183C148458D756DC326C435C150F276290101A897
06786C8C6E76A951873B419669C19123B724B353CD32365A27AF3E1BA62C2CD5
C22E54227B51D2E7356F8DBAF82405E1C1D4A6961E18F684BC912923D0B089A0
F091F691721A06DAD27C4F5ECFB260BF6417594108A3B6D46447EF44CA579794
2D9FEBEBA34B61700988CFD7709F7523E4941D0EC9EA8D19B2CCEFDC74ACDD0A
59AF94E49CE0AEF387F6B59976806186DA10C9085101FCFCD097DCD12227CB51
FE6B4BC4441A5EAFEBE223A309FEFA384CED8F11D7A8F186E29F4496E8E5C534
6348DCC3DDEC9F01FE2A652AC7CAE0A87F950E21DE3E42AFC10328969B5A3AA2
0F43EB98B9B2314CE5A21B0E64FA2672D57B22AF759A63509769345D045BDE4D
D47A0263D5236EB01C2AD3C962138EC08826371B7612A21CE0C5CEFD85D481D3
03E4B79D3CF61DDE6CD87C52EAEEDB20AEAB9C13CA0DD3102A99B0973BCC6164
6F0F33D174D8277563877AF2EC3C9CE47F3630C69A0BC6995F62B053EBB67B9D
376EB2637C2963D1B37F36323E691203A3D130DD9525298B3E20A55FED1681DC
EA0BB40B2EF05443B44EA0ADAFAE877A6DC65D9457592A39D9FE0625B34EF61B
08F420DAE5DF1E808048534680D67EB7ABB72E564662ED3079A1F809CBDB5C25
8A74BB8E65FBA68EA605DF88B504AFCA2D0039FB1B603D49B8BB23067D122E41
BFBEE667DC686BF18F65F8AD6F0C6100044A3595DB5B1C1C92217D121C5DD248
92C60217EA7A55338B097C143077FE9C8991243760D452B459DF2D0D9139883B
BDE13DF3AE05BEC1771EDDB9B003555D32F8BC53E88D2C2382F99AC70EE4AF3E
C1A892FEF2EBC0BB58BEA03E60B2F03DCE134F3CE644E3C317D9D80F7A9E1FBF
7C6357AC8BA5CA4343A045DBC2B289F6AAC291E2993AA6F4D5CFCAEE99A9F60E
4A1B63876F4735431ABF7BC96F57E017CE40D0B29B213B63DFF938DF933B3BD1
7FB18FA47525CC3ADEAAE657931A600A2BDFDC69AD87459EBD703FFDE10B02F0
28ED1A568C839C80202007AC3074938B79538D78984B4F1CA3591FBE0CE48437
6041E8920F91C911CCAB996D1F97E4D45A4465BC594D266F8053EB5B5A5D9F31
859FD5C0D0E719A41F4D26EC7B74F1E8A369DAAB3305C440A686E566386C48B9
1FAB2F25F2391855929C2C452295D698C749DF868A93AEB936C2656B59AAFB74
F9E40E680D890903458CBD759C911FF9F693D459C15D45B4A02609393B950AAA
F07E97D17ED05868E556C18D0866E97EC8F77D6F54DCBE3CF489586A3763D21E
E42DA19A0B64EA08546D39BF65D260367E1AD60C8C1C9B6F831E681D4024F7FD
693010A75BA1C7F3B137EC56DD9F4D03D10E4DFB861F76155EFFF3A91AC02879
5A79CAB077227EAB9EA4C3FF09FF5BC7C92C06D912419371BD610BEA50AE2B49
95F42003728698A983F57D8DD6F324D739F3ECE761C6C940133F9037157C804F
104C87151EEC9CB09734C7A56B0DE0E4C870D065DF980CBD950730BEEAB8CFCC
9D4DA621DFE5FCF96190EB739D694CC143F591ACC0550C25C6B626BB7B7FC17E
C28A50E3ECC0157B6F75E8CCFB6A910FAE31FCDEADADBF729A059D721C74EC56
DD326E58FE258D0EA8BF415FE95FD9564EEA30EFF25A1246D976DEA9A079AD90
B197531A66DEEA87A5BC6690C3C90BA551F67AC7F6B882A039099E8733407B55
362235C1DE22ADF5FE065E4AC506EC00CC570A18DB7B5F5FE24ACC4C5687729C
042597D64BB5068FBCD5419931FDA3ECF14ACCEE53EAB89E23E9B06A948F46D6
E175C5B6F56199CC196F3608193772BEE2854B571F9A985507EF4ABC1A7FF760
D0E9AD38050D7784B535AE6D73BE63663BEB150622B48738553D70B02DA2F498
27CCF0F39BE0C94CAF9E0291F885CBB6D378C0AF8680D88E744861352351811F
FA1B07C5A04E5C5434D732318AE791EDC71A47F2AB39A55D98E186CC4C1D1A07
77414CA0B3EC93B33505DF478C8EFF32E3D7CF21012FAAAB5E2837E315B5547B
D1FB6063AF2AA9ED69D6A974D6BA21C4923B7B93F52AEB5D77FB45B08FF41C23
63B25504CD6DBD40DE106093A3E5B6E43989E4F8417201F0D2CDFCAFAC06766B
B5ADEA1F6F6B24E38FC40779C826C9E160AA06F3C0B6861BC85CEA8B7C65152F
19C026C89FE4A47F9DE9DA86D75A9D8F3BD7DCEBF98D81D8D42F0A83A78BFEAD
7F2B6BD949559F9AA23CF1DDD1138FCD3D8133FF476197F30B005D7007247162
FB7E2AA16B50DEA57563E4E7D3257AA9DCB5AA6D50F02A15D35E1E75D365323C
29AA241F22D3762F7646BE454AEBAD5381A933E9E2EC6A78543582AED8FADD8E
CB01444ACD693258A53F98DB0DF475C8D74928A381FBDCB589B5A8C4895D9EFE
1182E11CC0E7AE75FBCB648CA620C17BD9B7A268F55CD5423525A001FB54EDD9
5651780E0DBF8060AEAD5106824D748D9C085BAC95E033FB5F27D8FE5FE873E9
8EEF621E059DF969C14E19E1CC76680FCE72F40947889ED65C9A6EF5A6CC38CA
58646565E3FE85E297298427A0A7A59C07230EF50E21B88420A097BEDA77D9A9
AF7B8D570D9F88E0420EDB44AA568FC6832910E7EC1602F024D4CF3F6FEC445F
A2333A265236B4E30C65DCAF4326034A5CD9EC8F73EF8A10E9811B2898D889A5
81451395C7C581860483850B401EE9DEFABD0DB4DB4CBD2908537122BFBCD3D6
446C03A9770950858BE19002D253E44AE117F6277FFD93A30E4F82E120329843
02EB1804E12C941B5C1CFF9EA401C7DB886838EA9BAC3DB9896255E2BF030FDC
5073995DAC830D05E9B9C07303A41B61D3332D8B8F2BE89355804D0B23BC7D73
0EF224409C40046B50CE6085EB671AD64DB34BB4E245CC568CF8E8F6607639FD
0E9405108F71FF12EAF217B8680472478C379F18759A4E999ED5439FBE760C6E
E50476E136BC8DA0E5BB17AC361012FD9B87DECC51BC7D8A8567D535B43DED6D
4884B85BFDF8A699A64CFBF0FCA8D2C5805DC4926B0116F86F88A7E9660AA825
3D564A36E9602484327C3787BC304E49C27874E0BDD9B5299035A87E10E776A5
D7DEF679902FF59E3B86054DF5B3FDF838565A3D4AF565FD408DEAEB5EAB6FE0
8372EF4D4C1E27E7EABEBA7218D82EC626C936209AAE5D9735BBF8799A87D39E
1BCEFA37A93751BC46076F01E2D91BA27FAF9AB7A46D8BAB78C203C6D210C162
942911B3230B8D462CB20E70E4F8F66E8C07CC430D70EB815B198890C950FF79
02624DFD10251E69BA5F423D89991BAE6CAE8EA99AB61F08AE6EFD1C4BC76E61
923EB04DB1DFA426E752C197FFC60886770FA787F267499DA09EB7239641CFED
8CA46A95F2BF63BD012080A4BD18DE1AB6353B8AD44469296A4B805C187A7CD1
2B1A8AB091BB54759B184B30DA0E9C165F607BEFFB46A920E00A5BF781176BBE
BD60BFC9B2AA1281240CC0667E2ED796A8D6BC9CE98F2B71D986261DCA3BFE10
B6C23F1C7ACA39A6117CE4DB91E197AE372C78C1027BA442C95444525EE89C8D
CD0D60AF90C8F5EBE498A2AAA1BFA435C1D12E3EE491118E30492320BFDD5EED
D82C8A05333FDE93B6E2599FA8ADEDFE74B4031D7EA6E17E5765ED952B7346FC
02863430EFFB0E10A974AAE796B0550FD7BCC84F540599D64C4111AE5A16545E
6784C7C819A79252A5516E6371F202487188A7BAFAAD7699E573E26B49D2D1F5
40AD2F65B44221BEDA0C08CAAD9E7BD7F9FEDC0875FF04DF2DD460270A662287
738A7D1074D039004F3C408AA177B741C1462580F4A6FE4FE745496C17C57C24
A3FF370EEFBCD54039208ED7DA3A6C181536F50A7C9A7CD9CC027EE23F3B3BC6
1A40EA57044322C236F60C0FAC9792851F1CC40481634C777018C2E5F8ECF12D
351CB1658CD27FC5FD7FCA057EC2E3231296F67B889122FB151F7DB3788BD9FF
8E30545E13A3ED367DDDAB681985FADE184AF8C02A0F597E6E21FA55672F2268
583506E5C0B48E76DC5386F71635C1A064165453E801530F9A2348063FCB9349
271954177A00C560FD146A69FE4D2B5245D5B8DD6BC2CC6A6630E5D20931E04F
181BC333F0045055F162A009CB0744D99CF164CA0A192A9239D63A05A5C9457D
5645572CE6CA7214C93AC3E7E18EF2E38857C33CA93BD75B6570EF74C085E746
A99981833ED8F5A2349BBAECFA37C6E1501BB2899394E8B06390634A4AAED770
FA6788CEFB7A7C5DF2A069BE57A15D7B2579FD010E63DD5288FB72F665CC04C7
55CF9FC805BF568F3B568B799482052E05C3A5CCB847F4AB2E0D6F22E851DFDF
1315C0679C0906D77AB2144E860D1B2AE4DBFB279B7E977B884A6B7FDC9D4D3A
2D9487448C8FC8AA1C0A2E529502832B329B1EBC55089A05E75FDD21169F6CF2
DCBB9719463744BF0FD06BE278CB212FFA7BA5F8AC1B407524E5E2DD78DAE0F1
6C0867BC0566D3E9968A53C58AC990F6345574B85D3FB0C2C6BCB4D079FCDC56
E9BC4B1B59DE98C4438653FEF4115DF945057F6F2678FE3F05B74EF9CAF7C9BC
8BB1153CEE098D642D1086B455F8B30615FBFD28D3B1A15C87550923331A8797
6625402B39BB55D84E02F4D13E8D6809CE7B6DBDE25174B6919CC88FB05D871D
43A5848E1ADD075B1CE78189E52FF79091EAF4D42CF6A8DD178BA0034DD0FED9
0BA80012FF3E87024C249F029FE5AB1B8FFE42C9877EDD26B9DCE4C271C33EDB
0C544D1E8A5642FF50944258F3184E2842E26D4C932DF8A670E8710325A68A80
BDE43DBEA395F239EDCC0BDC3741EA44E97700610FBF38625B873261AB4C0342
38FB747EB6E236A366D8046477D04EBE5341801585C80305B27303AB8B01999F
036D0D49027EAC10B0F94AA800ABD362AC5CFF25395D9FE33FC5BB3BA7028F77
90AE2A9CCCC1FC15C1288AB410ACA8C41E733F87BE05852F9C004219582D4594
9B8C3A7907A725B4650C92FCFC8615892C4304686401B0AAE619F7F850ADBF3D
0A565A6313C91B57365C9E293CD84D7FCD00583C59FEFE632A666964EF77572B
7FB2D4365582E4B187B4D072C291338FE0EA5971F7D5D6ADB1B3B6C392AFD853
D2F0A6165E6117720C4A8B1D5D8A53A867D9742F029AF2D43B8A00CAB588BFE6
B370E2517839D51030B695AAE3FD7D55A650A1F10056070756BEAD932F99A472
956E59D6E20B70DF4239E2A7CEBBDAD3B6049A2CB2B6AC25BEF191D5FB42C421
13C538E707C16EE24A3F375E7C538DBE98B553DFFF535A7E5C6F41AA7D14736C
F32569B110CC8005F300183246F0377048AFE5035C9EEA108140CDA232EB02F9
80E5F37A38D93E37F87CACC31BCA921090A5DCCFA45FB0FD710982D1607452CA
AB956FA337FBF37E8D4EC1D4CC4FA02E8A65056F911EBF0514A85750AD1099DB
D932AFDD4D2EB0CBCB1EEAB6E93912278C0918700FF6D8B4CBFBCB81DEB75771
0B78B73C410D4A53C0BF268095AEF853656014CB715CD04AEF7993EEEC3894AB
74177521620FFC057E39335277EF2294332DC979314D208363013D8E09405D06
9A5E6BCE653FB8E561FC9D66FF7CD9538565425DCD900AC231610AB97D9968F1
BE88C20A59AE40E7A7DCF577F22D21E2C2BED78CD77A202C1FB3301369DFCF49
F694EB60119321915055061A84C068C7968AD16ECC7765C4FD0F70BEE9E7CB84
133022194F08E9A6DB793C1B727717EF8BC5C67DCB3E695C9DF9AE40C4E895D4
C244568AC55B650278448140B70393E12508FBA60CA6556B0473DB54B1C0BFA6
459AEDB6C7A96847EF66B919660191C515E6B00837B9806C9E41A58AEFA75636
CBBD065BD7A4D3CF83D6FCC1F053585739C74104100E4E8611373BBDE520ADFF
2D8D00712B7336F74C68CDAA672EF9031B8C956851F6AFA475715064F5282D14
A383B5F501E3CFB2542252B366C93E8DC3238D11C2E2B227883696C8248A0C9F
A7827546FC4F0EC5F155A314A1AF756FAB15316A5AA8E1B342C902C3D5B2112E
0896838275EA2A55A5187666E9D9BD19EC0057F585DA96C8B3F246CD7C05F0C4
B63DC1C10E03B9D34C6727AACF1549EC2A8FDF0E16BA13E4A36F92147E38CD27
1718777D77158C488F11D9AEF8DBAB34EE26443381C8DB3FA8E806D5239E8ED5
BAFCF31C113777EA71DA655F2B297466B08189385864B2CB30DF6E62F4C135D3
1756C2EBD23EAF89FF223A3B323D692C4C908EE66282FDF5A5C5DC3A76A037DB
D29CB89F48CA3794406CB57F20E678DF666D3E5078537663E0B0DD1698B9D1A2
777ACAD657DF7145069C9F7696B2DBD18DC081E29A4DDBD91DFF437FF75025BA
FB78370032D6CF19AD2181E35B02385514712540BFFCA19232F05636C7058B22
C72C3290EAEA3F725EF675BD9E9FBB4869162DE96A3B44CB97D6AE51B8EE6A26
F358B803419C1016875C2FC0B5FB8E0B64F5FBE3E3039D62DDE6FD8DE9F6E6F0
724ABDFC0AC60B233EDADA99405DAB8DE77DD5D3FFCD2B587BCE78AA488213B0
32991B4970B578C3AC9F05A1545EAD422EAF899F0430F8921A66E3ADE66BE146
9B7EC7B3D8DCA42149633DF4B4C0AF439351E9B9EF85ED875422A0A51F2333C9
056CE844D1BDE1D7CCD1A973BF297FE6A8821E03A381C468B9AB784947AA9866
3DA46206E7A75B1E7AC0247834B450906924A7B6E605242727E8CC4149D01BA9
9468207588CCFE93F08C5B690EDF00F3FE36C9CAA4C56E41279AC3E4ED35145C
AF1608528E74403A59A5F1FE7DCF86D9EE5F459D7E0ED44D117E1C942F56B51E
615267D9FFC196A24265E75053BDD0E5EB1244331BE1138C61BAA39B0F34126F
5D819F414AC0A8FA890D1B5C80B2844CD279765A44F658D020DB057B1AC3ED1E
8A75DCFC69B0F51A41482CC03F88EA12757D52C10FF38B44A09610AFDCC3EA9D
69065D1E7CCB38BA40FA80982D7D4CD0E107D7CF2593404CE7F52144B2D4AA13
3851EC30082831A288160E2228B1310CBA00608A4B24045FB082AB4FFE58DDE5
289944E64ED200494B8AE9CB3B6F78899482D13780ADA4C7325BE818E45E6D96
7E1BDD31C1116B6943E00696C6F12FD6A9E271DF332059121864C93A9F8678BC
7F77BF5C6F89AFBA4F271732429D0E7D2F25A4CDA2190A7C4A0F5E222709FFA3
7B6CC0AD35FC7D439DB85F7A95877711B5B64BE8EC85E6C9278BA3BFAD2575B7
B23BF4B47C5F5AA731ADC5E20D30F30CF0625DCA254C16904F748E8DCA7D1FC1
A124D3C9624699D76D7351A4A78FC2B13CCE757D2D2A95344A9BC70F400C8112
DE7DC23675245B14EC61593EC32F0C344B0DF25879638250E227FB0AD6D3B898
D079614C1B7F05AC96A5BADCD03553A59656261C08BA95DD600436E0BF5E8A00
CE3C9285996155714CF8C16EAE15FA42F2F264CE7F6E476A7183F278FC4F07AD
A24A73CB6CEF98D7CAAAE11C73A8E61E6C3FCCB186BBE6C640E36C36EB87559E
5786B43C7DDF00B856C14AC12D701A3262536CD040168633408F8A2EBB7E1834
62F00ABB3018C42AAE92197EEBAB524642B77C830532ECC754813226F39DB90C
3AC9AD11247C7876A4817A846A5C50425568CC6FB6A7D01150E5B38F3410D8AD
65DC3B10A72AB191ABC1C005CE38BD1FA7357A6B5182917E61CDB1099255E31F
2FC177544A6C425CAB68394A8874219D76F7B67E4EBA373810A19A9397D4595E
A3E14929085DB8BFB434DAE0370280ED092373C4BB5D5E33BD991325303FED53
350C650C18287C6E4392ACEE9A1C8FB7FD9391AA1F23F4584FBF0D451CACC514
2CD5AAC12ECEA343535940C641EC588ADB63BDBECC4CA5F187266ADB6959CCF1
79904D18569AC739A464A8DE4A6C1538BCA064DDB13B68D37A61E368A0B023DE
E119BF95755142A91F7303A2EF44892E214BA1E5446B31CE005A995647F75050
8B0076DF11E709041A3D43118ED30D3D9000A6AA1F71D6CC6FF051D42721B1F5
0E79B62C4F6DE12998A6A5B49B42DEAD1168555167D5DD99FD599854B6929F99
828AE51D66557482B3328CD416EC3874534612967AD795497F72ED1E0BA088B0
4DC1C56AED7E3E83B767E4E968204B3BAAD190E7F780E0543FB75D1649D0A728
732E3701A8BF70A3C634935DC22568FFAD1BA378B23B0B4CD310A6A36222DC85
01F5CDFDBEE9D8C7D7785F3CA28D13FD3213EE3421712D76F5171ADB17357090
B4EC88D8335D843D46ECE2BFAB530C1638F2719A9B86BB6A03E481FF5143DFAE
19B52393D9AE6064D879D9FB8E20F1A30DFFE27926F7BC36D6569E9801D5D842
3A4B836B0196960CA58A51705171C745774ABEF7DD9C5953ABFA381D0F9F5B27
9256E80136FDE95E2A8ED378FF72298CA4CFEB8009571A3182C4B66204478BA6
42D1B06109054B529149EF33A77FFBB716C34F1BDD06BC0ACBF3400DB1C8C3FD
C65A218FE065BE0E55982909CF872FC9564795593A72697DB76C3F76102A7A37
4368095EED5449C6319F47F9EA05615AB2BA3D1D02E218E04361B006A20F2A21
1C4AA5F7E0A72BB9661406001567873DBA3E418D394A00F57F7EC1B37599396D
B70424C67B69A678C8D5CDD137AC7A68E920F82C8D6C46CA36C01CECA219E2EF
410CF4A48032429D3C7381D84E984110C5AFAE51D0A8CDD7778F1D5E1C921EC9
198BC03CE04A0F0B2113C7B19A19D7E7F33386E184BC32D3AEC992B620A98338
F962CD1669D5C18F63536C67F00F622D32DD9A0656EE7273EC391D39F4C16F6D
A0468D5C98B4E9C99FE1B4DE04B482145F3FD875DB13E2A460620B8ED0372A76
B058E4BC1F616F695103EE0CDA0CA99B5144576E17C2AE2A5279A3CAA3E26B80
35588B794EF9FE03CDD26508432F9ACEEC0C86CA4AE46DFF545D63CA72EC4388
9DD76E590699BC2902CA976699B844379760DFA626612E7199553D3194EACC21
9D602F69370E998FC75FAB18CB6CF54976500F098A403B583856BAEF5CB6348A
09F6317954FA10DAAFFEEFAA0C2F896E87A4770CF1BF95BA94FE7D78285C2350
088D00C56F7A8EA28DD378FF72298CA4CF175198F196CF2AD3F92ACECDFBFE56
143AC03A0FD1809202444C7DA9C643C352F43563E51AC2C563B89563D0254194
DE000681912B168E0CCF73B19653C3BCCAFA1AA748409D3C1E1A165DB5647EE7
00EFF0280DC344D4320156E9721C0542A01A75F0D99BA3E59AD1CC7763901191
CACF97B56367EF01CB11B3620C56973E51B882C13785523B2218DF0980B94F1E
AA4A37242EA4B8119A3159E06F45C84054E62F752D9D33182971A143737D515E
C7EBDAB4AF1ECBA1C6E90D2CB4C473C510CA28AB90147613F0EBC94C3EA00010
4685122DF3F9D6BDE77DD5870ADEC8900D6346957B84CC0523DD7AF55F89455E
6E32D6DD9A702C92373F26FF38161921644DB87B5846DAFC19E6B8EBB7C7CEEF
80E0AA2FD9ECA512FFE6219913BB3D815E7369EBCB3CF6BAC7848B2E44F35BF4
C00BB310D7FBE5B0905FE332F659D0D19E4B122CE7102270790DD6EE29FEAC1A
A9ED90A66CF0E63F05AE6C09F382D992C08A6A9BFE89DE02B992AE7E8B82DA56
A8780511C901133D4082281F57AD4FB039E7899E181799C485A5442C2845C4DE
B52FB396156E71AF9DE7CB7EFAF25A8BBD0D017FDC3A69F76D911C8B31B07E07
4F8F00701775D335FEB4C45021CFE17E2DA671A7FA88213B596074FE4D777E00
D11E6DA46569FBD54C4EEFD5C1CFDB30B78F38C77D31643994D9B9956F920CA7
9EF87A9603BC6CD402A087A63E45BA5D9A50B153195536AE6A6E83FC0D04CA55
D144C544531B462AD740B4CB6070A178427707797E0E88048E987A3DBC73AF1C
90CBDA109F6CCC9B275F869ABF3E165B2F21563212B299C296401C85FCEFCB9B
92D2B2656D53270894FF4146054D73B08E3093B06D0B80CED64E2ABC04713BB6
3FB1C3717A3F9E507D6D8C32671862B26B4B46D768F0A18EE79FBD4DD4183076
657F699667B3BB37D15F47031D6AB1C300F291BFAA072F4BEAA2610EF1AD17D5
91BA5E7D65FB18BC5BB7642593932C9E0DCE8EB8C1C4FA538D03872375F0733A
AA9F00AA3A998A0ED42447BEF946795C131C157285282CCA4F4E8429A6639A10
795375478B68865970DAC97B0963E96D04B6E9D5FCE0A8864DEAB78BC994D6BF
FDB401BAFE2B95A3F543C0DDB466FE590C5277166E146CE73598264523AABF99
8DDA6BD9E9151B4B704964E5695E4E519B8F99CE69603FB198B3152024F2008D
619DB7E46B23B8C8C59BCAA7947F62810943B837095E0F203CCB389BC5900C43
05DC021771C4795A084EB7CEB7B465FD9380A16EBBC716482B6DA99DEEE609E4
83D00129B815A64EF273CA7BCE2FBC4D8FD6C0AF612CB8A2CACE0B6688CDBD05
67637ED5C5D1267FE9EB63076703B29D8D4DBEBE215533641C0526E03A79C65F
1EDC5CC0D8A503C01A1425D5A6527C30E960E0B3803B0FC882B80D1E1C4022CD
9BAEFB623FA73BC307827493FFA2A96BE684835558D9FA31B09CE36351C5107F
FFC9AF461DF6E344FB6FFA16DC77B781EF005C7D96E8D5460074555ACA3D34D9
3B16163FFBE3370940A9EF45046CEDA5A2C849EFB86F21F9497121887FC0DDB1
967865FFF5A9A7B1874BC6323027746D9C502C05AD4C708EA285579C42E26ABE
B34E84B90BB8A5986AA44316BC3BD7D3CFD31F6D7E24EE590EB517A534BF1BD6
181A2E7D9E283084860340A0DFA080921FF0C00B0C51D5AD9F2C73A829292BC3
DBC5885F59F4F24CB8BF3D5F6B39FC5F547B46893D3D682E071271783D997CAE
8CB160C572F85969959BA359F7F38A6D94C06529EFA9F2788877A3104070C2F4
0DA4C23C5294DEB4CC45527E162E7309E810471D50B173C03DCBC32DFE007C0A
53F5734202BF56B9672616F0FA276505206BD2E94F961E03463AD292A80F3233
9ACF9D93441FB80910E592C567EF82451E47D9598857392F29E6A8191E59DB8C
3986EDDA40EA2E35AFB8394D198BD438704294DDF959803AE89D6C57D1869FF1
5ABAD0083F57CDEB285C721E8C88DD562084190E7ADEB099198AC175EC85C264
2301187B06C8F53A1671515CEA06A2E12F72A2424DDD9A76F81AA7DE883F8D62
ED089401871C26C7DD593AB01CB9D54F22DD813DA2AFCFC03D023736BB61A25A
0273D7A255F27CF743F75DE5AC782AA8DC560AF93607187A9E6AC73C6E0544E1
FECD9BB47F849E41F426AA467129EC0D2C7E509DEC7093CC96CF93B81746358F
028FB0E4CA4A506E8C469BC54E103BDA65AF0146DF74E024BAA1CA2B9ABBF665
476321953CC57703A1B8107A902B03CD47305A63926A8F5874A11AE8BE682D61
7EE3101D2FDBCD666D1FE20A0CA4C30B735B653B9A2117D1328A4808457036F0
BC7C92BE6AE3921693A7B12CF11D5819ED879B838BA86F729FBC44942880F5BB
510A92BDFDBE3127DB3E43432CB3F9B7DF3233A49C99D1F59ED024CE35F97268
8C3402757B85970B1B7001E5EAD40B6D7B560B857A2C7E6B412E431AF56AB65C
2EE4A9C37FAA7978BFE78D088CC876A1C02A39820F382554D15DD9038515406A
4E5DD3285E4D3D3102272ED999E7FDF19BDD9D98769F099C8FF9080103B2FE3A
24E55993368EF17A19D2ABA44E90FC8FD918839E2A6C4E3BB9EB3B83B604D15D
096A2F81E4426F4A72099646F7754E05CE4B5DA4FBBBE49AC8209CC8DB383733
267E74B8F22025812476FEFFA4178B2B426D2A2579B1FBC346489E1B0272CA66
1BE3552DDB6FFF8D70F9914A79ECB75C1C39BBDD63CE6061FB4C720C7AC10DD0
CB9C24023B70AAD0BC9F95C4F6ADC601C09C7D2B217B30532FEF0D3B93E419E0
48652570BCD710CC10E9080C619FB18E736E9A5B25855B635B0432A04EAB4A79
40E838C59C2D9D2E5E59F36884FA5DC80AB71ACE53D6EB7924E5E07EF0571EBE
2A36484D57E57C9F358AF50B2D7603B0BA916602E0325211B8FF795602FD6463
1500622E4477D69043F652EFC4A21D3B7C6C10473588966176809F4721530BFF
BA2BF5C919ABC5F12A16909F1522CA8B9AAE9ACB560B68FB37DF3C3B9580A134
AA5E87C63E1A448404E5CDBA470620E9AF4EE88CE25681C2CCF3C2C9809CC7BC
517269D822615850CD18B3174AC44110978EC6DB1E35A5EF4974436B3A0FBC18
CCA6C1D8B57340A3A0A42037376EF91A8F93E82EF4D84157C4DFA60E8CEE3B85
AF41139B79BAE8F7AF7809B06EBDA742E4B95A6299615DEF55BFC028E45FC796
F6E9D65D465D372B6893B8270723603F09C295BB3638DEA39A70B2442AC3FB87
4E20D08F2B994CED0612B985AA1BB8A74BC3E4E4DFC5FA1C929E45BA7B462876
88C2C7A4400DF944970F13DD07010911E6A7ACD692F6958FB033111B97F1DAE0
1D6093B5CF512B9823016EFA8516683FA3A3B8D10AE18C38FF91DA9E02476FBA
1C9606A9504E4863B1416652D37E4207C9B611E290892EC0E27F08631318F288
69E187E3F3C6AE1E71C8210C98578BA2ED82D15FCC3FDA2D26EB9718B557C326
8773934BA4A41FB6562BFBA7EC5CCFF7B9589EF18E1AF40CE316AE61B4D3BC9D
46654DB259973FF677457C575814FE4399B410C7E56464719934B4342C44580B
05D884878064FEFF40E3F22AF392EBB6DEB689F07B2B47B4EA06A0FCDFC84720
4BE6BDBC0502390F87E83CEB41BFBCDF2329CB814E449D98B39FEAD498014759
67C60A02387C4698E7BBE40F8CA74440DB21AAA7719E793CCC620D63C2F3DF51
EFFE866862796BB953C7A57FD559770A7B01C48BF01F13FE5B3B76C8102C12E4
72D10B503D3D2CE77EB8F509BF576E74E155D0D6F794D4CD7A23C0EDC5147FBE
D02C02215C5946E6777A68BFC53ADF8F8803F35850C1EDC0FE7EAD42251F280A
00B4AC76989D99986F25EA437811CAE14CDC0191890203800F0C62FEB4E16E2B
5A5E8B6C500B654A62A2CCB3177C12CAADE290BCD8A109D5C208F5CA9D621275
53EE8D8B1990BB355A2CB1F617012B35549F6325D658530EC5DE6412EC5B28D8
121A2675BF73BD59BC5B0FB8DF4C36C56A0F01148984F739C8D4047A8909560E
5E33873522F6E51133BFA07851A8AE318408AD61684584D84C779094EFB65C93
D206DCC168B924C86143F9280DF19250B2A8A718CAE2B70E76F2CD1595BCEC12
7744E199525C73F1D0DD7A21E692F7EDEBF3900E9B1CF0228D8B69DCB568AA80
0670C292D46CABA29236293F6F68C080DFA988CA47063731D8FFE47F77826618
51B3D94D71DA234E582F4BC4AC0ED51EE8636988585254F16CE62894292079BD
5A7ABBEB933D1A469A390397F249DFA72027950306F5BDB57D510FC4098BCE9B
6EBF3B2B430B942D439CA8400EAFB23848C83EDEA575D9C1244D3A0E87459AB7
C1162378C7579CFA5EB14F4EA6CBBAB9A312F49053A010AEDEACE01E8E99A975
FE03167E09BA1415AD671D12CE3B74C03AFBE97FCA58221D80CA3A8AC154679A
2D2E7CFB43FD452D885F3CFAD49B6311C5A30F7E9C26D30900543563BF7DDA30
11D20FA2C271D2213736D2A027255EC442ACA04F95C7B50EFBB26A5AFB866146
CB5E74CCCA28778BBB125683A4A583A8834A334284FA86ECD155A78F4B81AEDC
081777105FBBC3C585BA25E761A9EF0AED6CCFF215EE6EA18504D409E51CB915
C99FE651C824960D9F26DE954C56B5DFBE391F205F7C13A6082E146BFFD62738
A2248C92B1E0313135669C2640A60C37154813CE178987609D314349327907D8
14D90FE1E3C490BD3B098CCE53DF667117F3D749C22B2523F3C603A4817E41FF
6E642F6CA3E3567C2A6179BF9296F4A35132E206921E3123AA7E52079DC93E2D
DB14079563D6264E771378B732EF0F402ED81971553E08B8E1DF089B74C59006
BB5FE70C086E862DCD10D9AF4C2BB35C5DC0F106522EFAE6BB3A0584CD9FC12A
CD353F8EC998C9DD5865C065A8AE9C4E27633AA79435E583AC3684851DF4E253
D202DC90BF0AD21BD886BDAE2F14A57CBB765D8748D99887532704C89EAEDF4B
913A713D8B4E5DBDC08E989339
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000
(C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktional)
@start /Fa 149[369 85[1033 4[664 8[1033 4[369 1033{
 enclmmathsy ReEncodeFont }6 1328.35 /LMMathSymbols10-Regular
rf /Fb 185[723 4[830 13[553 1[553 2[307 46[{ enclmec ReEncodeFont }5
1106.96 /LMRoman10-Regular rf /Fc 160[909 45[606 1[606
47[{ enclmec ReEncodeFont }3 1212.12 /LMRoman10-Regular
rf /Fd 241[424 14[{ enclmmathsy ReEncodeFont }1 664.176
/LMMathSymbols6-Regular rf /Fe 204[406 51[{ enclmrm ReEncodeFont }1
664.176 /LMRoman6-Regular rf /Ff 138[523 366 371 367
1[523 1[523 784 261 2[261 523 470 1[418 3[470 9[966 2[680
16[680 19[470 5[366 366 40[{ enclmec ReEncodeFont }19
885.568 /LMRoman8-Regular rf /Fg 162[361 1[361 29[1012
1[361 4[650 2[650 650 650 650 6[506 506 40[{ enclmrm ReEncodeFont }11
1328.35 /LMRoman12-Regular rf /Fh 207[255 33[470 13[732{
 enclmmathsy ReEncodeFont }3 885.568 /LMMathSymbols8-Regular
rf /Fi 198[470 470 470 470 470 470 470 470 470 470 48[{
 enclmrm ReEncodeFont }10 885.568 /LMRoman8-Regular rf
/Fj 135[739 3[470 613 586 4[1138 4[749 1[641 15[758 4[1030
838 12[931 41[738 25[{ enclmmathit ReEncodeFont }12 1328.35
/LMMathItalic12-Regular rf /Fk 3[723 5[650 17[650 105[578
686 686 939 686 723 506 513 506 1[723 650 723 1084 361
686 1[361 723 650 397 578 723 578 723 650 6[795 2[1336
975 1[939 723 957 1[885 2[1192 813 1011 1[469 975 1021
849 885 993 1[921 975 6[361 650 650 650 650 650 650 650
650 650 650 650 361 434 361 2[506 506 6[361 4[723 28[{
 enclmec ReEncodeFont }64 1328.35 /LMRoman12-Regular
rf /Fl 134[1136 1[1554 1136 1196 837 849 879 1[1196 1076
1196 1793 598 1136 1[598 1196 1076 658 982 1196 956 1196
1046 6[1315 10[1616 1682 2041 1293 2[801 1682 1[1353
1412 2[1530 1625 9[1076 1076 1076 1076 1076 1076 1076
1076 1076 598 717 45[{ enclmec ReEncodeFont }44 1912.83
/LMRoman12-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-2331 165 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a -2331
165 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a 1328 x Fl(F)-239
b(A)717 b(1.3)g(-)h(1)f(Luftfeuc)-60 b(h)g(te)715 b(-)j(O)-60
b(A)718 b(-)f(BIFIE)p 0 TeXcolorgray -741 4800 a Fk(1.)p
0 TeXcolorgray 651 w(W)-108 b(asserdampf)446 b(ist)f(dann)g
(ges\344ttigt,)i(w)-36 b(enn)445 b(die)g(maximal)i(aufnehm)-36
b(bare)445 b(W)-108 b(assermenge)769 6792 y(\(S\344ttigungsmenge,)317
b(absolute)g(Luftfeuc)-36 b(h)g(te\))316 b(erreic)-36
b(h)g(t)316 b(wird.)i(Die)g(nac)-36 b(hstehende)316 b(T)-108
b(ab)36 b(elle)921 8784 y(en)-36 b(th\344lt)537 b(einige)i(b)36
b(eispielhafte)538 b(W)-108 b(erte)537 b(zum)h(W)-108
b(assergehalt)538 b(in)g(der)f(Luft)g(\(in)h(g/)p Fj(m)43243
8302 y Fi(3)43769 8784 y Fk(\))f(in)873 10776 y(Abh\344ngigk)-36
b(eit)434 b(v)-36 b(on)434 b(der)f(T)-108 b(emp)36 b(eratur)433
b(\(in)22731 10294 y Fh(\016)23257 10776 y Fj(C)95 b
Fk(\))433 b(f\374r)h Fg([)8 b(0)28522 10294 y Fh(\016)29048
10776 y Fj(C)95 b Fg(;)221 b(100)32827 10294 y Fh(\016)33355
10776 y Fj(C)95 b Fg(])434 b Fk(\(W)-108 b(erte)433 b(gerundet\).)p
5712 14473 32141 45 v 5712 14473 V 5712 16465 45 1992
v 6421 15867 a(T)-108 b(emp)36 b(eratur)433 b(\(in)15598
15385 y Fh(\016)16124 15867 y Fj(C)95 b Fk(\))p 20468
16465 V 3521 w(0)p 22491 16465 V 1373 w(20)p 25165 16465
V 1373 w(40)p 27838 16465 V 1699 w(60)p 31162 16465 V
2023 w(80)p 34485 16465 V 1699 w(100)p 37809 16465 V
5712 16509 32141 45 v 5712 16509 V 5712 18501 45 1992
v 6421 17903 a(W)-108 b(assergehalt)434 b(\(in)f(g/)p
Fj(m)18772 17421 y Fi(3)19299 17903 y Fk(\))p 20468 18501
V 1372 w(5)p 22491 18501 V 1373 w(18)p 25165 18501 V
1373 w(50)p 27838 18501 V 1374 w(130)p 31162 18501 V
1373 w(290)p 34485 18501 V 1374 w(590)p 37809 18501 V
5712 18545 32141 45 v 5712 18545 V 921 24079 a(Stelle)c(den)e
(Zusammenhang)h(zwisc)-36 b(hen)428 b(der)g(T)-108 b(emp)36
b(eratur)428 b(und)f(dem)h(W)-108 b(assergehalt)429 b(f\374r)921
26071 y(den)462 b(angegeb)36 b(enen)462 b(T)-108 b(emp)36
b(eraturb)g(ereic)-36 b(h)461 b(gra\034sc)-36 b(h)463
b(dar!)f(Skaliere)i(und)d(b)36 b(esc)-36 b(hrifte)463
b(dazu)921 28063 y(im)505 b(v)-36 b(orgegeb)36 b(enen)506
b(K)-36 b(o)36 b(ordinatensystem)506 b(in)f(geeigneter)g(W)-108
b(eise)506 b(die)f(senkrec)-36 b(h)g(te)505 b(A)-36 b(c)g(hse)921
30055 y(so,)434 b(dass)g(alle)g(in)g(der)f(T)-108 b(ab)36
b(elle)434 b(angef\374hrten)f(W)-108 b(erte)433 b(dargestellt)h(w)-36
b(erden)433 b(k)-36 b(\366nnen!)921 57131 y
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 344.72083 a add def
/d 0.0 a add neg def /h 218.27574 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 921 57131
a 4904 53758 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 308.73897  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 308.73897  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 187.80515  def /dT 1864790 abs 65536 div viceversa
{ neg } if def /DT 10. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 2.84544  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 2.84544  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 187.80515
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 308.73897
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 187.80515  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 187.80515  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 308.73897  def /dT 18636000 abs 65536 div viceversa
{ neg } if def /DT 1000. abs viceversa { neg } if def /subTNo 2 def
subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0
0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 0.28436  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 0.28436  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 187.80515
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 308.73897
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 4669 55104 a Fi(0)2444 b(10)2210
b(20)g(30)g(40)g(50)f(60)h(70)g(80)g(90)1974 b(100)p
1 0 0 TeXcolorrgb 4904 53758 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 187.80515  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 187.80515  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 308.73897  def /dT 1863600 abs 65536 div viceversa
{ neg } if def /DT 100. abs viceversa { neg } if def /subTNo 2 def
subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0
0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 0.28436  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 0.28436  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 187.80515
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 3659
54044 a(0)2718 50896 y(100)2718 47748 y(200)2718 44600
y(300)2718 41452 y(400)2718 38305 y(500)2718 35157 y(600)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 4904 53758 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x 0 def /x1 100 def
/dx x1 x sub 199 div def /F@pstplot (6.510416666666667E-8*x^(5.0)-1.2239583333333334E-5*x^(4.0)+0.001421875*x^(3.0)-0.035104166666666665*x^(2.0)+0.8708333333333333*x+5.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 2.84544 mul F@pstplot
0.28436 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x dx
add def xy  dup 1.e30 0.28436 mul gt { moveto } { dup -1.e30 0.28436
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 0.28436 mul gt { moveto } { dup
-1.e30 0.28436 mul lt { moveto } { L } ifelse } ifelse  } if  gsave
1.2 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   3.0 0 0 add  DotLine
 grestore end
 
@endspecial 0 0 0 TeXcolorrgb 4904 53758
a
tx@Dict begin  { -32.121 127.96326 } PutCoor PutBegin  end
 4904 53758 a 5645 63482 a
 gsave currentpoint currentpoint translate 90.0 neg rotate neg exch
neg exch translate
 5645 63482 a Ff(W)-78 b(assergehalt)315
b(\(in)e(g/m)14540 63170 y Fe(3)15003 63482 y Ff(\))15369
63482 y
 currentpoint grestore moveto
 15369 63482 a 4904 53758 a
tx@Dict begin  PutEnd  end
 4904 53758 a 4904
53758 a
tx@Dict begin  { 128.04497 -15.63995 } PutCoor PutBegin  end
 4904 53758 a 664 x Ff(T)-78 b(emp)26 b(eratur)313
b(\(in)11544 54110 y Fd(\016)12024 54422 y Ff(C\))4904
53758 y
tx@Dict begin  PutEnd  end
 4904 53758 a 1 0 0 TeXcolorrgb @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 1 0 0  setrgbcolor  [ 0.0 1.42181
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 1 0 0  setrgbcolor  [ 56.90887
5.11853   false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 1 0 0  setrgbcolor  [ 113.81775
14.21814   false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 1 0 0  setrgbcolor  [ 170.72662
36.96716   false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 1 0 0  setrgbcolor  [ 227.6355
82.46521   false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 1 0 0  setrgbcolor  [ 284.54437
167.77405   false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 39080
57131 a
currentpoint initclip moveto
 39080 57131 a 1 0 0 TeXcolorrgb 921 61668 a Fk(L\366sungssc)-36
b(hl\374ssel:)921 64214 y(Ein)485 b(Punkt)f(ist)h(genau)g(dann)f(zu)h
(geb)36 b(en,)485 b(w)-36 b(enn)484 b(eine)h(k)-36 b(orrekte)486
b(Skalierung)f(angegeb)36 b(en)921 66206 y(ist)346 b(und)e(alle)i(in)g
(der)f(T)-108 b(ab)36 b(elle)346 b(angef\374hrten)e(W)-108
b(erte)346 b(als)g(Punkte)f(ric)-36 b(h)g(tig)345 b(eingetragen)h
(sind.)921 68198 y(Die)446 b(Darstellung)g(des)f(V)-108
b(erlaufes)445 b(durc)-36 b(h)444 b(die)h(V)-108 b(erbindung)443
b(der)i(Punkte)g(ist)g(dab)36 b(ei)445 b(nic)-36 b(h)g(t)921
70190 y(erforderlic)g(h.)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 47992 4800 a Fc(___/1)p 1 0 0 TeXcolorrgb
48228 6792 a Fb(F)-123 b(A)369 b(1.3)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 73665 54804 45
v 0 TeXcolorgray 24746 81281 a Fk(1)p 0 TeXcolorgray
eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fl(F)-239 b(A)717 b(1.3)g(-)h(2)f(F)-179
b(unktionsw)-60 b(erte)714 b(-)k(O)-60 b(A)718 b(-)f(BIFIE)p
0 TeXcolorgray -741 4800 a Fk(2.)p 0 TeXcolorgray 651
w(Die)434 b(nac)-36 b(hstehende)432 b(Abbildung)h(zeigt)h(den)f
(Graphen)f(einer)h(F)-108 b(unktion)433 b Fj(f)142 b
Fk(.)p 0 TeXcolorgray 0 TeXcolorgray 11403 32020 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 216.90875 a add def
/d 0.0 a add neg def /h 206.57112 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 11403
32020 a 20059 20822 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -100.74275 T 37
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 138.7186 0.0 -78.19016 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 5.69168 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -73.97598 0.0 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 105.40962 0.0 -101.1615   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.4523 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 138.7186  0 -78.19016  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -78.19016
 138.7186  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-101.1615  def /maxTickline 105.40962  def /dT 1864650 abs 65536 div
viceversa { neg } if def /DT 5. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 5.69046  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 5.69046
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 105.40962
0.0 -101.1615   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 138.7186
0.0 -78.19016 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 105.40962  0 -101.1615  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -101.1615
 105.40962  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-78.19016  def /maxTickline 138.7186  def /dT 1865050 abs 65536 div
viceversa { neg } if def /DT 50. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 0.56917  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 0.56917  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 105.40962
0.0 -101.1615   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 138.7186
0.0 -78.19016 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 18343 17957 a
Fi(50)17872 14807 y(100)17872 11657 y(150)17611 24212
y Fh(\000)p Fi(50)17140 27362 y Fh(\000)p Fi(100)17140
30512 y Fh(\000)p Fi(150)22973 22168 y(5)2444 b(10)2210
b(15)f(20)-16818 b Fh(\000)p Fi(5)-4587 b Fh(\000)p Fi(10)20059
20822 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 20059 20822 a 20059 20822 a
tx@Dict begin  { 138.7186 105.40962 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 20059 20822 a 20059
20822 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 20059 20822 a 19716 21108 a Fk(x)20059 20822
y
tx@Dict begin  PutEnd  end
 20059 20822 a 20059 20822 a
tx@Dict begin  PutEnd  end
 20059 20822 a 20059 20822
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 20059 20822 a 20059 20822 a
tx@Dict begin  { 0.0 0.0 pop 138.7186 105.40962 exch pop } PutCoor
PutBegin  end
 20059 20822 a 20059 20822
a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 20059 20822 a 19011 21154 a Fk(f\(x\))20059 20822 y
tx@Dict begin  PutEnd  end

20059 20822 a 20059 20822 a
tx@Dict begin  PutEnd  end
 20059 20822 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -13.740576233315798 def /x1 24.377393463682914
def /dx x1 x sub 199 div def /F@pstplot (0.1*x^(3.0)-1.5*x^(2.0)-15.0*x+100.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 5.69046 mul F@pstplot
0.56917 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x dx
add def xy  dup 1.e30 0.56917 mul gt { moveto } { dup -1.e30 0.56917
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 0.56917 mul gt { moveto } { dup
-1.e30 0.56917 mul lt { moveto } { L } ifelse } ifelse  } if  gsave
1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 20059 20822 a
tx@Dict begin  { -48.52745 56.82646 } PutCoor PutBegin  end
 20059 20822 a
915 x Fk(f)20059 20822 y
tx@Dict begin  PutEnd  end
 20059 20822 a 35414 32020 a
currentpoint initclip moveto

35414 32020 a 921 37997 a Fk(Erstelle)502 b(aus)g(dem)f(Graphen)g(v)-36
b(on)502 b Fj(f)643 b Fk(eine)502 b(W)-108 b(ertetab)36
b(elle)502 b(f\374r)g Fa(\000)p Fg(10)486 b Fa(\024)f
Fj(x)g Fa(\024)g Fg(20)503 b Fk(mit)f(der)921 39989 y(Sc)-36
b(hritt)g(w)g(eite)433 b(5!)p 1 0 0 TeXcolorrgb 855 44526
a(W)-108 b(ertetab)36 b(elle:)p 18329 45899 6909 45 v
18329 45899 V 18329 47891 45 1992 v 19561 47293 a(x)p
21436 47891 V 2746 w(y)p 25193 47891 V 18329 47935 6909
45 v 18329 47935 V 18329 49927 45 1992 v 19037 49329
a(-10)p 21436 49927 V 2240 w(0)p 25193 49927 V 18329
49971 6909 45 v 18329 49971 V 18329 51963 45 1992 v 19362
51365 a(-5)p 21436 51963 V 1915 w(125)p 25193 51963 V
18329 52007 6909 45 v 18329 52007 V 18329 53999 45 1992
v 19579 53402 a(0)p 21436 53999 V 2132 w(100)p 25193
53999 V 18329 54043 6909 45 v 18329 54043 V 18329 56035
45 1992 v 19579 55438 a(5)p 21436 56035 V 2782 w(0)p
25193 56035 V 18329 56080 6909 45 v 18329 56080 V 18329
58072 45 1992 v 19254 57474 a(10)p 21436 58072 V 1590
w(-100)p 25193 58072 V 18329 58116 6909 45 v 18329 58116
V 18329 60108 45 1992 v 19254 59510 a(15)p 21436 60108
V 1590 w(-125)p 25193 60108 V 18329 60152 6909 45 v 18329
60152 V 18329 62144 45 1992 v 19254 61546 a(20)p 21436
62144 V 2457 w(0)p 25193 62144 V 18329 62188 6909 45
v 18329 62188 V 874 66062 a(T)-108 b(oleranz)434 b(f\374r)g(die)f
(Ablesegenauigk)-36 b(eit:)435 b Fa(\006)p Fg(1)p Fk(.)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 47992
4800 a Fc(___/1)p 1 0 0 TeXcolorrgb 48228 6792 a Fb(F)-123
b(A)369 b(1.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 69795 54804 45 v 0 TeXcolorgray 24746
81281 a Fk(2)p 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1599 a Fl(F)-239 b(A)523 b(1.3)h(-)f(3)h(Bew)-60
b(egung)523 b(-)g(O)-60 b(A)524 b(-)g(Matura)g(2014/15)f(-)h(Neb)60
b(en)-60 b(termin)-2438 4622 y(1)p 0 TeXcolorgray -741
7929 a Fk(3.)p 0 TeXcolorgray 651 w(Ein)461 b(K)-36 b(\366rp)36
b(er)462 b(wird)f(en)-36 b(tlang)462 b(einer)f(Geraden)f(b)36
b(ew)-36 b(egt.)462 b(Die)h(En)-36 b(tfern)g(ungen)459
b(des)i(K)-36 b(\366rp)36 b(ers)769 9921 y(\(in)464 b(Metern\))g(v)-36
b(om)465 b(A)-36 b(usgangspunkt)464 b(seiner)g(Bew)-36
b(egung)465 b(nac)-36 b(h)464 b Fj(t)h Fk(Sekunden)e(sind)h(in)h(der)
921 11913 y(nac)-36 b(hstehenden)432 b(T)-108 b(ab)36
b(elle)434 b(angef\374hrt.)p 10939 13544 21688 45 v 10939
13544 V 10939 17528 45 3984 v 0.875 TeXcolorgray 10984
17528 10778 3984 v 0 TeXcolorgray 15486 14938 a(Zeit)12304
16930 y(\(in)f(Sekunden\))p 21761 17528 45 3984 v 0.875
TeXcolorgray 21805 17528 10778 3984 v 0 TeXcolorgray
23340 14938 a(zur\374c)-36 b(kgelegter)22410 16930 y(W)-108
b(eg)434 b(\(in)f(Metern\))p 32582 17528 45 3984 v 10939
17572 21688 45 v 10939 17572 V 10939 19630 45 2059 v
16047 19032 a(0)p 21761 19630 V 10171 w(0)p 32582 19630
V 10939 19674 21688 45 v 10939 19674 V 10939 21732 45
2059 v 16047 21135 a(3)p 21761 21732 V 9846 w(20)p 32582
21732 V 10939 21777 21688 45 v 10939 21777 V 10939 23835
45 2059 v 16047 23237 a(6)p 21761 23835 V 9846 w(50)p
32582 23835 V 10939 23879 21688 45 v 10939 23879 V 10939
25937 45 2059 v 15722 25340 a(10)p 21761 25937 V 9521
w(70)p 32582 25937 V 10939 25982 21688 45 v 10939 25982
V 47992 7929 a Fc(___/1)p 1 0 0 TeXcolorrgb 48228 9921
a Fb(F)-123 b(A)369 b(1.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 28999 a Fk(Der)434 b(Bew)-36 b(egungsablauf)435
b(des)e(K)-36 b(\366rp)36 b(ers)433 b(w)-36 b(eist)434
b(folgende)h(Eigensc)-36 b(haften)433 b(auf:)p 0 TeXcolorgray
-394 31999 a Fa(\017)p 0 TeXcolorgray 651 w Fk(\(p)36
b(ositiv)-36 b(e\))434 b(Besc)-36 b(hleunigung)433 b(im)h(Zeitin)-36
b(terv)-72 b(all)434 b Fg([)8 b(0;)221 b(3\))435 b Fk(aus)f(dem)f
(Stillstand)g(b)36 b(ei)434 b Fj(t)368 b Fg(=)h(0)p 0
TeXcolorgray -394 35065 a Fa(\017)p 0 TeXcolorgray 651
w Fk(k)-36 b(onstan)g(te)433 b(Gesc)-36 b(h)g(windigk)g(eit)434
b(im)g(Zeitin)-36 b(terv)-72 b(all)434 b Fg([)8 b(3;)221
b(6])p 0 TeXcolorgray -394 38130 a Fa(\017)p 0 TeXcolorgray
651 w Fk(Bremsen)433 b(\(negativ)-36 b(e)434 b(Besc)-36
b(hleunigung\))433 b(im)h(Zeitin)-36 b(terv)-72 b(all)434
b Fg(\(6;)221 b(10])436 b Fk(bis)d(zum)g(Stillstand)h(b)36
b(ei)433 b Fj(t)369 b Fg(=)g(10)-2331 41130 y Fk(Zeic)-36
b(hne)534 b(den)g(Graphen)f(einer)h(m\366glic)-36 b(hen)535
b(Zeit-W)-108 b(eg-F)g(unktion)533 b Fj(s)p Fk(,)i(die)f(den)g(b)36
b(esc)-36 b(hrieb)36 b(enen)533 b(Sac)-36 b(h)g(v)g(erhalt)-2331
43122 y(mo)36 b(delliert,)435 b(in)e(das)h(nac)-36 b(hstehende)432
b(K)-36 b(o)36 b(ordinatensystem.)p 0 TeXcolorgray 0
TeXcolorgray 11370 66605 a
 currentpoint currentpoint translate 0.76099 0.76099 scale neg exch
neg exch translate
 11370 66605 a 11803 66605
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 321.37497 a add def
/d 0.0 a add neg def /h 235.23547 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 11803 66605 a 13794 64863 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 9 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0  setgray  /ArrowA { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside { } def  [
303.39143 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 28.45444
T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 12 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0  setgray  /ArrowA { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 moveto } def /ArrowB { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside { } def  [
0.0 219.50452 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 28.45274
0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 303.39143  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 303.39143  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 219.50452  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 219.50452
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 303.39143
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 219.50452  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 219.50452  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 303.39143  def /dT 1864790 abs 65536 div viceversa
{ neg } if def /DT 10. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 2.84544  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 2.84544  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 219.50452
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 303.39143
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 12549 65149 a
Fi(0)12078 61999 y(10)12078 58849 y(20)12078 55699 y(30)12078
52549 y(40)12078 49400 y(50)12078 46250 y(60)12078 43100
y(70)13559 66209 y(0)2680 b(1)f(2)h(3)f(4)h(5)g(6)f(7)h(8)f(9)2445
b(10)13794 64863 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 13794 64863 a 13794 64863 a
tx@Dict begin  { 303.39143 219.50452 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 13794
64863 a 13794 64863 a
tx@Dict begin  { 5.0 4.56934 7.55675 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 13794 64863 a 13541 65282 a Fk(t)13794
64863 y
tx@Dict begin  PutEnd  end
 13794 64863 a 13794 64863 a
tx@Dict begin  PutEnd  end
 13794 64863 a 13794
64863 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 13794 64863 a 13794 64863 a
tx@Dict begin  { 0.0 0.0 pop 303.39143 219.50452 exch pop } PutCoor
PutBegin  end
 13794 64863 a 13794
64863 a
tx@Dict begin  { 5.0 18.34268 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 13794 64863 a 12779 65195 a Fk(s\(t\))13794 64863
y
tx@Dict begin  PutEnd  end
 13794 64863 a 13794 64863 a
tx@Dict begin  PutEnd  end
 13794 64863 a 1 0 0 TeXcolorrgb
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x 0 def /x1 10 def /dx
x1 x sub 199 div def /F@pstplot (0.006105006105006105*x^(4.0)-0.24297924297924298*x^(3.0)+2.357753357753358*x^(2.0)+1.6153846153846154*x)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
2.84544 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x dx
add def xy  dup 1.e30 2.84544 mul gt { moveto } { dup -1.e30 2.84544
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 2.84544 mul gt { moveto } { dup
-1.e30 2.84544 mul lt { moveto } { L } ifelse } ifelse  } if  gsave
1.2 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0
 setlinecap stroke  grestore end
 
@endspecial 13794 64863 a
tx@Dict begin  { 128.03734 122.35408 } PutCoor PutBegin  end

13794 64863 a 1 0 0 TeXcolorrgb 572 x Fj(s)p 1 0 0 TeXcolorrgb
13794 64863 a
tx@Dict begin  PutEnd  end
 13794 64863 a 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 47378 66605 a
currentpoint initclip moveto
 47378 66605 a 11370 66605
a
 currentpoint currentpoint translate 1 0.76099 div 1 0.76099 div scale
neg exch neg exch translate
 11370 66605 a 1 0 0 TeXcolorrgb -2331 69903 a Fk(L\366sungssc)-36
b(hl\374ssel:)-2331 71895 y(Ein)434 b(Punkt)f(f\374r)g(eine)h(k)-36
b(orrekte)434 b(Skizze,)g(w)-36 b(ob)36 b(ei)435 b(folgende)f(Asp)36
b(ekte)434 b(erk)-36 b(enn)g(bar)432 b(sein)i(m)-36 b(\374ssen:)p
1 0 0 TeXcolorrgb -394 74894 a Fa(\017)p 1 0 0 TeXcolorrgb
651 w Fk(der)433 b(Graph)f(v)-36 b(erl\344uft)435 b(durc)-36
b(h)432 b(die)h(in)h(der)f(T)-108 b(ab)36 b(elle)434
b(angegeb)36 b(enen)434 b(Punkte)p 1 0 0 TeXcolorrgb
-394 77960 a Fa(\017)p 1 0 0 TeXcolorrgb 651 w Fj(s)1534
77478 y Fh(0)1844 77960 y Fg(\(0\))369 b(=)g Fj(s)5869
77478 y Fh(0)6179 77960 y Fg(\(10\))g(=)g(0)p 0 TeXcolorgray
24746 81281 a Fk(3)p 1 0 0 TeXcolorrgb eop end
%%Page: 4 4
TeXDict begin 4 3 bop 1 0 0 TeXcolorrgb 0 TeXcolorgray
1 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb -394 1493 a Fa(\017)p
1 0 0 TeXcolorrgb 651 w Fk(linksgekr\374mm)-36 b(t)434
b(in)g Fg([)8 b(0;)221 b(3\))p Fk(,)435 b(rec)-36 b(h)g(tsgekr\374mm)g
(t)432 b(in)i Fg(\(6;)221 b(10])435 b Fk(und)d(linearer)i(V)-108
b(erlauf)434 b(in)g Fg([)8 b(3;)221 b(6])p 0 0 0 TeXcolorrgb
-2331 2976 54804 45 v 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 8405 a Fl(F)-239 b(A)498 b(1.3)g(-)h(4)g(Zylinderv)-60
b(olumen)495 b(-)k(O)-60 b(A)499 b(-)g(Matura)f(2016/17)g(-)h(Haupt-)
-2331 11427 y(termin)p 0 TeXcolorgray -741 14734 a Fk(4.)p
0 TeXcolorgray 651 w(Bei)295 b(einem)f(Drehzylinder)g(wird)h(der)e
(Radius)i(des)f(Grundkreises)f(mit)h Fj(r)331 b Fk(und)293
b(die)h(H\366he)h(des)921 16726 y(Zylinders)345 b(mit)f
Fj(h)g Fk(b)36 b(ezeic)-36 b(hnet.)345 b(Ist)f(die)h(H\366he)f(des)h
(Zylinders)f(k)-36 b(onstan)g(t,)345 b(dann)e(b)36 b(esc)-36
b(hreibt)921 18718 y(die)515 b(F)-108 b(unktion)514 b
Fj(V)804 b Fk(mit)514 b Fj(V)290 b Fg(\()p Fj(r)36 b
Fg(\))507 b(=)1021 b Fj(r)18596 18236 y Fi(2)19472 18718
y Fa(\001)351 b Fj(\031)398 b Fa(\001)350 b Fj(h)515
b Fk(die)f(Abh\344ngigk)-36 b(eit)516 b(des)e(Zylinderv)-36
b(olumens)887 20710 y(v)g(om)434 b(Radius.)921 25247
y(Im)445 b(nac)-36 b(hstehenden)442 b(K)-36 b(o)36 b(ordinatensystem)
445 b(ist)g(der)f(Punkt)g Fj(P)569 b Fg(=)388 b(\()p
Fj(r)34992 25446 y Fi(1)35517 25247 y Fa(j)p Fj(V)290
b Fg(\()p Fj(r)38026 25446 y Fi(1)38551 25247 y Fg(\)\))445
b Fk(eingezeic)-36 b(h-)921 27239 y(net.)433 b(Erg\344nze)h(in)g
(diesem)f(K)-36 b(o)36 b(ordinatensystem)434 b(den)f(Punkt)g
Fj(Q)369 b Fg(=)g(\(3)295 b Fa(\001)g Fj(r)37603 27438
y Fi(1)38129 27239 y Fa(j)p Fj(V)289 b Fg(\(3)296 b Fa(\001)f
Fj(r)42247 27438 y Fi(1)42773 27239 y Fg(\)\))p Fk(.)p
0 TeXcolorgray 0 TeXcolorgray 8791 64746 a
 currentpoint currentpoint translate 0.8423 0.8423 scale neg exch neg
exch translate
 8791 64746
a 8791 64746 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 313.5489 a add def
/d 0.0 a add neg def /h 376.1453 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 8791 64746 a 12760 62478 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 14 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.3  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 277.69861 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.3  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 28.45274
T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 12 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.3  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 355.65929 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.3  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 28.45274
0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 277.69861  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 277.69861  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 355.65929  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 0 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -3.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 355.65929
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 277.69861
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 355.65929  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 355.65929  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 277.69861  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 0 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -3.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 355.65929
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 277.69861
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
12760 62478 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 12760 62478 a 12760 62478 a
tx@Dict begin  { 277.69861 355.65929 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 12760 62478
a 12760 62478 a
tx@Dict begin  { 5.0 5.62148 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 12760 62478 a 12449 62764 a Fj(r)12760
62478 y
tx@Dict begin  PutEnd  end
 12760 62478 a 12760 62478 a
tx@Dict begin  PutEnd  end
 12760 62478 a 12760
62478 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 12760 62478 a 12760 62478 a
tx@Dict begin  { 0.0 0.0 pop 277.69861 355.65929 exch pop } PutCoor
PutBegin  end
 12760 62478 a 12760
62478 a
tx@Dict begin  { 5.0 24.22116 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 12760 62478 a 11419 62810 a Fj(V)289 b Fg(\()p
Fj(r)36 b Fg(\))12760 62478 y
tx@Dict begin  PutEnd  end
 12760 62478 a 12760 62478
a
tx@Dict begin  PutEnd  end
 12760 62478 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 28.45274 0.0 28.45274   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinecap [  5.0  5.0 ] 0 0 add  DashLine
 grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 0.0 56.90549 28.45274   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinecap [  5.0  5.0 ] 0 0 add  DashLine
 grestore end
 
@endspecial 12760 62478 a
tx@Dict begin  { -34.1432 35.56592 } PutCoor PutBegin  end

12760 62478 a 997 x Fj(V)289 b Fg(\()p Fj(r)14899 63674
y Fi(1)15425 63475 y Fg(\))12760 62478 y
tx@Dict begin  PutEnd  end
 12760 62478
a 12760 62478 a
tx@Dict begin  { 51.7842 -9.95863 } PutCoor PutBegin  end
 12760 62478 a 572 x Fj(r)13346 63249
y Fi(1)12760 62478 y
tx@Dict begin  PutEnd  end
 12760 62478 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 56.90549 28.45274
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end


@endspecial 12760 62478 a
tx@Dict begin  { 59.18175 31.86693 } PutCoor PutBegin  end
 12760 62478 a Fj(P)12760 62478
y
tx@Dict begin  PutEnd  end
 12760 62478 a 1 0 0 TeXcolorrgb @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 1 0 0  setrgbcolor  [ 170.71646
256.07469   false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end


@endspecial 12760 62478 a
tx@Dict begin  { 172.99272 259.48888 } PutCoor PutBegin  end
 12760 62478 a -258 x Fj(Q)12760
62478 y
tx@Dict begin  PutEnd  end
 12760 62478 a 0 0 0 TeXcolorrgb 12760 62478 a
tx@Dict begin  { -11.38092 -2.84544 } PutCoor PutBegin  end

12760 62478 a Fk(0)12760 62478 y
tx@Dict begin  PutEnd  end
 12760 62478 a 12760
62478 a
tx@Dict begin  { -2.84544 -14.22636 } PutCoor PutBegin  end
 12760 62478 a Fk(0)12760 62478 y
tx@Dict begin  PutEnd  end
 12760 62478
a 1 0 0 TeXcolorrgb 0 TeXcolorgray 43500 64746 a
currentpoint initclip moveto
 43500
64746 a 8791 64746 a
 currentpoint currentpoint translate 1 0.8423 div 1 0.8423 div scale
neg exch neg exch translate
 8791 64746 a 47992 14734 a Fc(___/1)p
1 0 0 TeXcolorrgb 48228 16726 a Fb(F)-123 b(A)369 b(1.3)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
66782 54804 45 v 0 TeXcolorgray 24746 81281 a Fk(4)p
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 3.3/FA 3.3 Gesamtdokument.dvi
%%CreationDate: Fri Nov 10 08:47:45 2017
%%Pages: 4
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: LMRoman12-Bold LMRoman12-Regular LMRoman8-Regular
%%+ LMMathSymbols8-Regular LMMathItalic12-Regular
%%+ LMMathSymbols10-Regular LMRoman10-Regular wasy10 LMRoman6-Regular
%%+ MSBM10 LMMathItalic8-Regular
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ "C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 3.3/FA 3.3 Gesamtdokument.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2017.11.10:0947
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: LMMathItalic8-Regular
%!PS-AdobeFont-1.0: LMMathItalic8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathItalic8-Regular known{/LMMathItalic8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic8-Regular)readonly def
/FamilyName(LMMathItalic8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathItalic8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -250 1110 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD112356772A65C14D49D03C7D456E5
1A27C2ED815B30E268B02FB1D2E769067ADAF25F28640307E3A89F0B04F44A1E
1392A44B8AAD82CED1539B6A9CEBF441EB81775C7EE4CC12313F31FE710DD429
4B1955DF2BF7A88E1EC21DA22A63BF63E89C913EC01EE10A0601D6FB239DF59D
2CEE7667F4CC4BAF660B24F635F981638F40E8CCF07F21F5B5FE3B5C115D1000
0E4B2ADAF7B1C53935EB7414421DB49A59F82D98D08351CB0BF0C06DE836CFD5
42D68D51AAD4069871F257AB7733F8EABD731FF9B0E3AD64000BCDBBEBE26F88
C96730B45C14458F42927E24318A97B48235E5FE200DB40706E9B41AF7CA33C5
67BF7766BD396006C5364D1E736B256538E5D163CDA75C4F419620D5BE5DDEB1
F7D7A55B5ACEA2B2EB4B78997398C7D38B3D7B5774D980C087236ACC7346F518
7607A19E85C83E2C6ED4F3FA8C15B65FC3D117BC5E3FFE33A5B7A69F7F7159CA
667D96B5D03E4C5E55FCB1F4E2148B4B8DA87567988F07CA181FA6A3C3C30A33
80AC6F4E92903C47BF489A2376AC02B00B8CD01DE080C96A452D52B4B56F9520
B85062F15C4828813D3694BB4BD3512541C82005C9AA5C065476148A4E47DBD4
580CB1ADD206D19E7D653E2690FD48B252BFECDB2C64C96F7477B2E5EA0593A9
84841E96F931F01B2B61C26E8450D5F2B37B51EC364BC2A1233FD108DFFE0F00
AE57465ADB0191B38D14E89413FCCB77A9FCAE09F59A3F5C352570F7390BE91D
178255E10C02CFB7B679DAF86EB351BDEBB8A7D4DBB9C65715A1355FC8D2C355
BB452D44AFDF7E25676F3ACE7772980137BBF6A5C4C136C45CE680D23B992D7F
7544FC9F70CEB83E2B66980ADA7E13488B61554D8CB264FA76074355F7FF6C55
FBF130009A03EEABEEFB1ABC2BF844196D67F7A6D7B5F71162E03FFD780CDCE6
720DA5752962EF6FFEDFCD9C2CEA3A186DFAC113892B6E7F1EC8B28E99D09742
86959C4335F1C11135880D99DE373D9861525270E0F672BE94EF236EA6A73421
3C4837DE148223916BD6808FBBF4CA6E666ADBA1D32034287198B0435025F69D
44C6149606533469447451C5A1E72265E853A84130ED220BE1D4AFDDF25EFBB4
8C987885054EDF05163804CF8D100E93E61CC40EF2EC83A8AD35E3C6B1FC8B29
9776B6E6585C74EFDCD92FFC523C63B7B3EC4ECC7F3CEC696F9A92DBE7966F8C
C1993E02327D0CC74E7D35608BEE0697EBDE1476806C21A9B6F3FE72223AF71B
66736CA720DF2D4215B9A3320AE8EF54732435114C85F5375AA3D12A911BCEFC
7A831D065FD4A386130668096CB88A1C9F8DDF5F67D25B303DBD6F284732C5A9
A1C3A07183C98355853606804AD2F83BC0D7603E6443FEFB74D73AE198962F21
6A5C212A3C9B42F3F969962C889095FB92AC1613D2475F1DFDC97F0E7D305BAA
B7C0B6B175983BAB35B500BA29E11DC373016423DF8D83E145EA94EF98E33E7B
20F6BCD609B01E31029EDF7B2D0357A13B234B4C876AD3B15579D93456B605EA
F22BDACCFC5A12245AD83B1F6DD5CDAD5B90BACC3249F07DDDB72A666613FE23
58B7FA3B475559D893AA2841C8479C4E7B4818F8A308D2F75366C8712A3ACA92
97F61BE2F0CCCC4F53FBF30EEC47DDB129B0F1B19C8766B71ED198570CDB6C87
A9167A9D651252E8E9AAB66F756562B4A46E241D26AD2DEA8C5AA1BE395FC115
27DC03618A5D58FAC047C7DFD2AC153B15FC72E74BD101EAE4E6CFD439
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: MSBM10
%!PS-AdobeFont-1.0: MSBM10 003.002
%%Title: MSBM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSBM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSBM10 known{/MSBM10 findfont dup/UniqueID known{dup
/UniqueID get 5031982 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSBM10 def
/FontBBox {-55 -420 2343 920 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSBM10.) readonly def
/FullName (MSBM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 82 /R put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943E919FB4E3240FEEED78EE63
0677FAF39AB2543D18C08A2B98B97451CD42CB7893DA8601CC0F45A65BEAFC64
EF72554395DA801CF2E9E3B03F65F1BD98F8C5F8EA06D7457842303C1A817E7D
69821807328AF426B9DDBC188A79A66FBB9E6193B4A3EDFE3136C6574B9C4C94
E2CBA4FE7997F949BB2DAC0D329C2AD8E4095BD18A037AC9F77B794FC389E5CD
56CC4C0B74D64FB0D02C92B88942C18B6DA84D4CF482DAF3A01E80BE483AC6ED
AE98F5F3E49BC762EF6BA937D528E751D9588B0A1E82EF0A5998150EC3854472
5A91EB983915BC1D6E2C3E615E0267B39D6937ECE0EC16162FE76676E5B69F3C
BC1AD934BECA284B89F0613B70876247D768BCD246883CFF4D819D6265302730
7E4BE6B2FFE7E91CCB8C6D2AFACDB4C5DB9688153E1D6B2DE136BF7068418A4F
2D1C0CA301B1B97290B46EE14B8286A81E709980F67382A5132F01B2D44DCFF0
9753E776AEAE2141D580E64C82598DAA6DA4057FFA9D02C3B77AE15A50AB457F
3FA5A10A3C986B22F8E154C1E564A55D3BE4487677613DCF793F7E1B57C9A925
BC57746C25FE567719A9EAA9CC44F1D0FF8F92C03132B205F57E3AFE9FB66632
D3FB3EF5BDFB9848030527FE759A5273CB81DBA2719611355F43E34F8FD7D0EC
9BE47685A2D122C9B60198A430C5F5E3F972376F0FF4BA52BAFF64095F7ABCBA
022622692231FF87514FD912B80C07A0EDCEECFA629E2734B5EFE2604E8DCB24
32A4C691DB4CCCF19EF897A9F4EA5B2B5AFCDF87AC06B93669F3007C1295E016
FF0A99324B80E37020B1080E80949525B3278DF111ABEA48E7182B6F4DE2DC90
B8D31A953343D5DB78B1F2CC6CE631EC7E3D0041A823DF2A4702AAC0F0A2F018
E5ADCD42EF2EC8AFF6F4705D30042BE7B6F866C14AEA1CEE04DFF82BF14931B8
D297C38E6DA6E587C23EF0864F69BB0DBC9C1EFBBB97B92BADC336A4AFAC6A91
0A6B158DC42E975CB5D8D2054CEF367FB112456AF50684C41F80B1E7ACAEA853
B843CABA76BDE9582090299F423519EE3AF8F83AE7F7828B314B6E36E9127419
F274E9FBF5622C5E48D7E95664D6C0C1006661038CF2C93BEF1DE34A163A2C86
693A13F4D0F052D2E183F36401F0C29862BC1B36A086524F76C7EE2C6D436A23
7009F146F1756DCADD3F70C51FDCE610E30C0F4AC538A2703423A07976ACA74C
25F4CFD6A92969E206375FB0C672E45948B0E832F2BE688EC22FEEB3E06BBC3A
272F73081A30830AE4214F2F029918FCA40BAEBED6299EDBECA01E08F27E5627
F53BC56F4AE7CE2D6273B27323AB829E2D51672A4990E3AEE84331583A99DA4E
63610AF8F10C50FE6196E3F4C1E4FC9BA6BE0ABDC81A0A7BF6A5792A97BD0A7E
7BBD31C3FDC01D734550843C8D84C6CC0B492CD1A6CCD57428F03A863E959C77
457D401028FD00FFA9BC422FD09D8B8A70446A61CB256A2FA0B59A2646D9C5FE
961894DB8B315C52008B4416AC35439E010BF90E43A05FCB2FBE8E62385E220E
588B7FE5509F1BB71150E159D01D24EE28008D4213227FE9BCAA34364B1039F6
BC142AAB19C8E9B15F0113781DF9C9B3BC145955552A901AEBA588D39D7E87F1
CAF27D315E168807021B0CD1B2CE13B611A7B5FC28DEB4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman6-Regular
%!PS-AdobeFont-1.0: LMRoman6-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman6-Regular known{/LMRoman6-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman6-Regular)readonly def
/FamilyName(LMRoman6)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -88 def
/UnderlineThickness 31 def
end readonly def
/FontName /LMRoman6-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-515 -298 1647 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF386043BC0B77B47F761487099
F3EE8B97E5F18DCAE51B94317C8F4DECC130CEC55EE16A19C81D4D1668127C7B
86C63787AA273CDA19F2DCE459A6BDCED90E3C60B9F7DA6A0715D2D12F8B805A
5203A948442C2E5796D5CD20544385DB0893AB62040E1E7F33167592F1944E2A
AF140EB52E80AC868A5E53B529B98C77E46244F0B9D46A2FBA3E0040CF5A1D5B
8CF20FDE7C876B9AF4A5F6798ED83E56E985DC30EE5A3B2D5EA30F640DA2DB67
1783F69DA070954570F579C316046D8A6B7EEEBAC73F338A8B7D40470B4468D8
CD9BA8B731E8581C69A41FE873D6ECF58F4962AB44706743806BDB909276EE0E
99E10A530147C9C14638387F89B169CCEA629DE9AEBC010589EE04588A992E08
30B37AB3DF923029B8F6BF19C1C728797AEB5C0F2044753BA4C7D1437E2B9B1B
3DAE6A15672EF1F238D1AB8F873DBF5264D704FB19F5C1CFA0E5168002B3741F
0134E79412F5B0AFABBF3069460C10225E6F7BADE64F07074C9D594F6F7514CA
5B8A7750FAF214600FB248AD5E8D9FF734EE44CA79A585268A06C6FD4E294257
0F814FAE80C1A7776ACFE85D3159ED173F8C4EF0456171564E9A2E1C26464408
16B747D137D37316A340FB72BC005029A06DF8BA48E9AACDF832BA2745C448E7
9225CE3A522B46E18F5733663105D638E571758C9E8D9121EE819E4A12676318
11F0C568B81E1502A5D168139F197F7A71FE60CCB05063C6D9D8A0048E60F9C9
5CFFF69AFB554B3534796218449D2BB97FE15BD1A6FF104BF67F8EBA5C3C39B0
24ADAC78AC4FF61D5847F0A110651C32F7372F56D5E845643350BBF6D0A6EAAC
D2586F3D71442DBEB5B1B049B691CF910A78299B8A9C0B39ED96503D55AF7610
48D41BF8E781511338BAF3A2E79B98DB9E6748C1FE829C1E574F41ED7A56E8DA
4EA2023CFC69FBCDEA39CB00C8BC5AC4B184E13F3ABA4A18487B10878E9D800F
8064BC68223CA5F86E7A9AB9BAC72FFF9546B6BB94F4426E5D273581A6D28444
44D82093FB03482F71774ADEB638DB46DCCB0C6BD2192A98CC4896B52E643BDD
07F61D79F78746C5238C5504416B1E2F271280ABB91D54CC819680322EAB72E1
250A760531BD7F2AA1DE45FC978490BB69153DA6D6161F7AFD7BEC1ABD547CBD
B6BCC20BBBB289486F6C7E238C2A7AE02B2539F6DACD88AD99A2B686FBEC34A6
F9EE29616642225A5AD8C4FBEB07FE262D75AA093A73E9E0B89695B5862C96EA
1243561331C2D9EE7B65B8214E519D57A88C79B55D644CAB29554F2E31FD6843
FF7B259AD5538BD0836F18ED0DE7F01D9BD148F8279585467B15C17D2D0C33C8
24A507CB2FB6E384BA8BAC55FAF929178B7AACAE1D371228606B58787EBCCA93
4E4F469709A6476CBF11C97862C34607A7DC2871810B501018824C0E0CFD58F9
7A957FF98D5BDA3E3E034C52405A6C2908EBEBE3E29F7C6A759857EEF72F2EC4
3A8642C108D34C4CED6F7DBE80F25D75116BBDA7CB4BBB73A61F7C685A3A9A51
8734F9E4D7E801AC7DE2E73CC759AC64F3CB8EBF8B5EB56F41B247F3F19315EF
7C24C48C184E2BC4350D72B6956D0C2F54961B34FFB476B8B54F5F249AD4F434
87F61D3712FACEC07D010DD43EF4D36C3C6BFC310B412ABDC95F0615C5BC5180
C92F0640CE6A8AF3AE7EB181C2E4C11086C530DF109AB7631B321258281DAADA
221C4D03BAA1CB2A3368AB891AA0006AFDE458F28C88624B7CD1FEC6CB09AFE1
5B7C4C75C0C00F4549D250A8D8D0B82FBBF52438CCC1953B78E7D9D431A1B5A0
4A73AF4A83C1332449D33F89196645962942DEBDD82A0C4A86F0317F943CAF80
38C03C57418377255201AE91F48B7FC6E0BEA32C7762AC27D37041D63165EB3B
E7A22843BBBC2A76EEB0E1C3F1A5DED8CBC163A406C10DEEF8375D51CA265048
A748D61C4B7C040606D6661334764F75102442574818D8E2E330E2FE5102B7F4
DF3E4FF29268D62FDDDC616ADC7E9F13E6B8A5628C9C333261C279378974A281
B8F074456303CAE324705BE0751EA813402C3D640582C972655ECB16686869E6
DA64131BED44D2F499C69EA518C750370797B96D672132C82296E416D4F3B55B
FBF76FD52217FB7A494737C74DC1BEAE9A4370CBCC6A3B60E897A2A10ACC9590
B7D182BB0BCBDA4B8FD30EBFD8E947926A7AD4A39C3E3BCC457B16FD9FA2606C
C3C0740F437DF5F1B361E2AB0102CED6B56AB56737158CF03B694FC508079D3A
31ACCEAF23100219B1CF3A1F09D967E429545A65BB9BCC05055A705CC4D79163
209A2105EAC6577EA6EB40D70A6D3A73572D79A8CBE198C9F63FFD1470AEB473
2DA147B30FA99C4C8C7BD336D401F5DBFDE3DB313266068F252FBF712D4F6AA9
CA51714523FC48BFBA1E33E36A67FD71C4DCEDF3CFB6AA5BAFC7DCCAEAA40FAA
E6D4925126349DE06E101868BED82BB51E91185394F31E2C049463AE81F753E2
F863AAF5E286731902E47CC79D75EC3262338CD13F13C659D762DB6199452CC0
3F88EA12757D52C10FF38B44A09610AFDCC3E9E0EA6D89BB91F93DEA53A676EB
142FADDFD883DC4F0C38023BDA6569691729EA004A3D96F0FBB300F4030B6606
13071727F3BA34DD98CFE4972844FBA68280761E4D48476D645F86023FE852EB
25C98058B68C3F7DE5C9E739BEFBDA9EC9C8F800F862999D20CD6BB97FA50A40
B29FC17AA00DB566B2EC94DE5934CE2EF61401B1AC09C515B31676917D11D6AA
C4F958DB61B11DAC0032A4A9BD935683E85A26C1F42BEEAD417F837272445BF8
5B73660BC2B57C89B3CFF6C85E86E42A9550DA129DC0FDC4BE50D5A5CD8DAB41
09CD47BC05EC9E0CBF809328C5737D7917AABD0AD9A87F485E0843606F7BF8F2
C0F92CCA49C489AC56BB4FAEB441E713B499545814BC2B3B2ED508A5547C4B8B
182CBE2ABB754E07D88DD634787FE1DF52B38F3EED60778915269E71DB74E889
71C070FBAE2C25A7104589EF38806E811726E41351E349B6167CA5058EE84D12
58EFC050B428623FD1E621555BBCA26C986ACA69714EE285E4183ECA0F278461
1B128DDFD3B8061FEAB76A85459C6339FB76BD776FFBE44A0D870B50D5C08E42
C27D4F909B92A16E8AE2275E83777297529C5ED2573FDF8BD7D6DAC8936854A0
E9B5873E0C43A98002905B1F09DFBD253E4F8EBA8FA68830E6BD9979FD51C835
5A7EC5C1747D467FB498E88120CCCAF6A701DAC4FE774492035D2304EC4F9083
716CA7906B80486BB5C79930F2D085E30DEBE15A07B6A046946D1BAEC088EEF1
31BE9C77E57EFDAB7374603762EAAA72B0B40EAF746A43B2DA7552C98FEA1ADB
BB93C025B00E2203899B2C287724BBB8E65FE1141502C1218C55773CA3C6DAB9
681EA8787E7960CFCAF502B7A3066310BE7A115570201F827CF41845BE0BF8AF
AE8348F559D6AD28E96669BF76C5EE35D36E883E3362E8151A38AD6FA6AEADF5
82AD81A19F11688A44032481C0698FF9E0E60C0930F7AEC84C4D7EE11BFC90EA
C5CF755173A99C3D0BF412FD30352B46B6FB6D0B977BF34FB3EA2C40A1ADAA19
182C7E3FE4F4251B1887A2C605FE1895D3045D915E59246A382A2EF44013126E
974503017108146FCA11C477865B61FF0136346A52E994D5242B0EDBF68D120B
D216209890529FBB3D24651664E84B70E52B35750A4D746C647119A3C81D1CE9
54F4F359CEE99946657FE87EFB947F6EF31DCC61CDDFC39A27718813E2CDEE9B
EE0507016F7651418558D452E73137413161CDD6645A9C7DB42FDD905FF9EE5F
A98B2F04DD744B336C400DCE97D3384AFA5C0BCEF133DD294C2AA330081B6EA8
216653BA182F7FB05BFD80CDF441BB594FE01CF3180D3C3C1F0B13A98CC0339E
144825766BC7D4CA384FCD2E9256B4C11C354D3ADB93059FC37FDDAD6C78C8A7
FD6219FC44CD0E30CF5FE94C5F95054EB0CAB8CB0BFB75B710119768A161F8C2
76614552655D1037F82FE0218C4D4CD7BEBA74BED51AFB08EB16469390FB9807
1BFB9020766AFFE943870234F365EB6EF863A8103CA6089A8A29528E45C47F09
C56AD5389C3EE8DFE85E6127D09DBF020D89506CD1270C0B3EA235BDEFE3E247
B0C655D9FF7B893CC31F7949ADAFA7FD22C8F9537DE472B6C31FC9AABE7ECAA5
701B0D2575AF8A8596254E937C142B0AC9512BCF447499C2005348B848036DC6
131C1F05FE139D653820FB3EEA998267FB51CF42EEAD7BB3CF28571C437ACDBC
56D765E2C7F61226CFC5613463DCE571BF49F20E7ADF22AE9612796DEB913805
9A4C12D608FD1228018A6DF526D5C66A9F11AEC07A100C7CCF020413C69C51E8
D0541100E3DF71D501F4BFA0AE8260E23761F29F3EF6B7AAFFB00FD028B380A7
31A931CCA7A1CD78F9CEFB9B43D1AB67E0C1B90B74C62FF8FD0FCC210E26E80E
A2C146A040FB4729A47526A644743B53CF0CD6CE4EEBB414C741759F68C2C929
2B509FC3F79A0124BA95F9FBAEAAC3B3A5CC1C9744253567A78303623728AA44
9365090D58BB4E0B099DA528E5BB6426A755DD97B90D0DF4AEC960EE3BCDED36
FEC31EAABE44B4E65AC2358864B4567F289298A69F79F6981B190F26774B50E0
D246A2676F9821158D56882769E3AF7B6C0F8F856AB15E34B7AFAD9FBEDC388D
8DDEEF29E5BA5830B9E88A403649AD203CBCAB5465F18682746D4C6A28F9D30C
71556F7C9822962D39A30A3D5D4331979C914CDACD8E52AB927C4F57377C6E95
AC3B74863596FA34250C38904577CB39ADAFC1AC17B04381C6754327FA7C65AE
AC1A2839AF94903A7EB7450AA2BCC638BCB6D2318C6E6FB8AABF70FC0CEC089B
5B2A64DC911A05B7D0FBD3BC15657FCC9D561808E50151C166892AA2415303D2
ABD61EAD6A46E042F2988E6A31D07C0EFBD835CD0C526CDF34968DEA783AAB27
AD15B45820BA2C8942FB131136588242112EA1F17FD3C2604EF52210F343C793
DEDEFB0A2B195538D4B0C6FF837473C372E70836D4C5747C4EEB85DCCE969D9A
7F061B9FA20CF2EFB32200703EF58C425B9A7D27CE0BA78897210D30DA8F7CD8
5D47409E582BDD2EB2D8D505FF764C914B4C11AEA7B23988D184F29AAC5C274F
5694862641C8ED8ADC2A7166E893618F4E1CE1CEF3D26E28BDA32D12B10ED201
A9F192758B996B3B8750FCA90CACA049EEF3CF6CF84697FEEEF16F2290BF3094
539F0406AF0030ED0D0769FFA19112C97076BFF950438DC37E9700A7BCA663C4
328967C977B430B63CE6CDFE50A651EC13D52174ED5C933E8C8525F88E6CE482
66186158BE0A5592691CD1E265DB2F523B702D4D0DBA35BE10A4F542DBD3E173
15E1E0A224FADE62569408F6ED842CA727BF331033E4F074D29DF85080F06956
1019E04A19756A102E1A32153D5C6216D9C9385A18202E78D9E7ABA944D21851
498AD5DFBBDFD2AD3A45C0FC93D273C16FDC07C095C8183E89A7FA85A0C12A52
763634899F898B819309587CAE703571A817E2A7D1FE8496B76E5248A3CC57AE
914AC32F028980AA50C18C5C8C44EE90A42542106F909E4F59803685F804B0C6
A98E5D37F963A15B1C0B736ACA11C477865B61FF0136346A52E994D5242B0ED3
7AEB62353B9A1D56DABD05371F9479BFA4CAEC5CBAAC32E2DFF165186D73C527
5BC9638D8A733D3E5905EB634982BBDBE878E238A3AD7D54A0F8D49FFBBEEA2A
08DE64815E836B7C7D1B6B6FE2F8CE38A96655B073C606ECCD8C3F2C5FF185A7
2F8B21D6486CD41A80EC051E875EAA89D64FA5F2126CCA7E93636A7CCA2158B9
9A15CD40585926E5ECB3811D95422BE5D90F0E736BB7657CF2A0A5233E11D3AA
E27591284292FB1BF22EA7654C2797659EB876A0CC35E0BD79F4A14F56FE1C18
E6232BC798A227D8F8F92AFC1924FF85BF0BD5547FBF0ACD890470AA5CB2E0D6
1ACEF149B0A7B73F2EE0136A9C23EF64210422CEE9C62889C3FB5D8D1371EDB8
5EFAE402433ED36B610862F00EE394976F0A2F4870DB0C0FCBEB6D1699049BDE
AE9A5B364AC04F853C9612C58189EBF3334336824F029CF3315CDAC8483406A1
AC1DF70188977249C809CC821BC0B7A2F8AAF27E7E115BE85D71C3003914643D
2327692E464DE4CD3E76C93397F7998AFD5A64D6903F2EF571F9A24136315988
08E0F91DBA758A23E515E9F18329599819EDBDA44E136B801A216AAE5168BF1D
DF74179AE8478DFF4DB502DBCCDBD61CA5B5E20E1CFC04C7B74A171F41A35364
E573321A926C7C3DE13338F52F2C91531C92ABA181B7CF0FF955A8DA29F11753
6ED7582733A6C86215121DCF5B0716611CCEFD11F5C5F00FCEA5EE9D46AA63FF
7D4278CC27249B1329305788A6AFBF6CAE00AA6B9DA46C51F1EFB3D014219FFB
966E070D8BE5B5CD57458FB78C6ECB6460A281A80F502523BC02292E16AA3B9C
A089F7320D1B9BA214E43E83C1FCBECD57341217FA2783DCEA90AC383E444674
6FC85E9B1D817C988AE526DA4338FB27A18C3E1F59CD6063225001812694472F
7AE07866B1F040B42849BB161F8C5058DA20F5AA785DC0E77188C18435A2E7FF
BA595F0C054E96CC44F56932D8FD589EC2438A167DD3799972464CE75AAB769D
CB32014BC32FD730F22927CBA09B8CD2167352E6BA2E96F35F1E67BC40979F9B
86E0222012DCA626F8A2147F672557FC3E08A242B2514C24CD74D2A6056E9B89
886CCCCBAE6F51A33757FD8DCEA2488E7B130462CAC1C61DDD7BD36BFA9D85C9
CB0414FA7B15EC02E8C08C8A4F789EA1A232F44B216B0A7C6B898EEEEA2EAE31
DBAA343678B35948BF6E9180221EDD0ACCA578928815D319AF73A7E10B5F523A
8B2E7812E325EA858A25C26ABBC4C25E327DFCCEAC871356DAF0CB205917DFD1
A8F1216EB4301EA62211CCB8909E9C8DEC28A6FA8042B461FB6C3A5425419977
1B7A614E53D6E49EAF8E8C75650D5793750C61F2D28FD6296AE76BEC4B0044AC
2984337F2EA913D381318ECB6383C6EBBFB2B61FE04B0B13B26BFA8A80D62E48
64239BF65B841617AD96D9D7F89ED64975DC69CF20F88E081FBADA15B871D8EE
AC0EAB134DD682DCBC9C187AD9788F635D7C1D238E43779FC2850256D81DD960
1364534E0C331CAAD340B7375427190D9ED5D06C044AC61F885A346AD0BCB540
FF5D3D13C722603FD1A9BAB8481D5ED4B852061899B5682BD0A153C50E9529CC
B01112EE116B684BA5B21D162765BF1FDA0BC109AB896DE24B0A0D57D9F4CFDC
4C1FFEF87FD2B0CA2E1A287BED88AF473AECEE97ABE431A8D1B05BCBE69CF10E
B696F21934226B6174010EE3696D11291F2E3F06359FB2DF0AD948D5F373AAE4
A4752F9BDE24042B95B58726FCFA82AF11ABD26D2D81FB0531381F8800FC7ABC
5436137CB6ECF73403915F269B7B231F5D9B1F61DF7CB03421C5F46040744911
2BDFD986A3F7EE975F79735FBDBB333D136FD72B54BDA112352814FB6FAB9134
72DAB4547A50C2C293458B1D854EB79608E52F06734E2CE9B3962B4FBFB2CED0
CD7D1C12433ED9CE0AF54C73172253EFC739D7552C51C4BBEB0896586854605D
658D8C7681595D0492047E97CECDC3FAB63FC92DE5F64B6FA36C08DA3B7FC06C
7D40B03E7F03EF36CE0390DB45EA1F0B6AA0630DCBC43B1E3BE9B7BA5722421E
932D83657C904434F3CD7B4C5C7CDE111CDFEA91C7326AC7FFC2A65A633FD028
806459C9CE8EE40DBFB9338561B425E7FB8A486E8BBD8925F744645C55EE47DE
4AA52ABD988594A7EC882C32556517E396269C90FFA27C5A51513DF558A8B499
C7B6158DA671139A282357F5CFD4CEE0BB8C7C8ED352E0A1E6DF242BC75F285A
7C4D903A367CDCB74C56BF8356F94810910AB18CEE5DD843B5FE4096F520222A
20FE01B307960B1F1030F6CC9B504E1FFFCCA352431A0D5BFCFCFAD30F97D9F6
2493B0CB7FEAFC9BAF90B7025D2E35ECC22A152A63EC110EF4B8FFD3E82A1F2D
18F3F163F77EF399A73A1B5FED7935DEC964AEDB4721F177FC89A5AB13A06261
BD660253A72E63479DBFE0FB8041A873898332B8C24FA875D3E200A018C78BE2
E930457BC33AD2FE3614781E71AB4D0073D71DC38239BC688D3F5F61CB43AE2A
53FADAA5926EA5679791D474BC0B7939D43C0AA387BDC9184255A3335FD10380
3857B8046544BF2723FF4B4331E2BC38EE8787EFC7FAF8A4D10DF88C738EBDF0
4155D92D9EC67D91F7299AAC56823CD4BE926D0EE4E8CD015DD85E4004694D39
E05F5E2AEE30F76D51A3CF5FD0316410BAC452BD8BB544B57ACF2F9FE83E3E68
109B182044F27CA200B432D886A12EF6332152F0E30D38E2B0F2F1E30D973B04
68FD4F84E83950B76B1A05B4DC730087F385C524B689F96E3FEA51EF125D16E9
073543865055A37AFD20C49BF08EF65CBC703EF6ADD2DB56EAA02A6C8649E61D
7F5B5320DB4E6C7F70B76CB486438D247D0100689A73A26C5E0137C208DCF1A7
143359F8EE27AB1E0B8333DD55B109F616080F5BF29107A418F686DD27656D1E
EBDFFF78EBD97F40F1B3C7C78221B0081DCEE066E353DCCC2B78551535EE5DA5
2B7AF5030F8AE1482313610CBFB4CADB3DB95CE2C74DB09F6C18D083A389BF57
68AD942959FF0302B3225CC885CFFC8807635C4262456DD0C12D6542D9EBA6F1
12F55563444FC3D79F4B3A2E9432F8E1948F77146199CC80880EA23BF76211CD
865BF221AF4EC556835774B08B04CBF20D471B7C228958EF19C9A18ED7B135C3
300D4E6C8B686A49D427CCD0DA4E7B07C8D2140B854F2E7C3CCABAAE3D2A8083
7BF7F8C88D26D37C4A69365579571DE66F500A75420DCB24BFEBE3ADB38A6CA5
8290D557AFA6B2F76D3C2C0D7C2FEF36D9A72D75E95EC194042007DB1738809D
C388263F3562D6BAB6320CB7B552FFB89F11EA22D02AE6333848C966B1B1E30D
A2B09FB2012717AC3CCA0F72FD3DD6E6E24621FEC52CE047DAB64EBA1EEF23FD
D6D15A5E4B14C74D3856E17C875B7531CD1BC116AC4F21FDF43764C2E9BBC3FD
8F6C02E213E218294D1063180597B8C427C9B17202A03F53B88544455AA87281
0C7948B1EC866883E78C9C909A89DB039C9E9960E315CC0D5A741134B101D1B9
61CCDDA1D8C89CF7B69B3CAC447A2D2CBE22433B7494A12D6898FB52E8D60EB8
F100DC970A6F6FF1EC5403388B6EF347797DF580DA0E0A4F13FBF20B25DFF786
1AC70BF7F778DA38E54F972D6A17B932EFECCDDE3DE2B3521F190FD862092C5D
24CE3B8037AC8FDD3EA687834689DE2FE4B7759C944FF72ECE869A601FD89830
4C6EAEF3D52B31B6CBA3D9E7EA775BBA2EC97CC91D926CC76EB3300E9B6FA5B8
477E9788C5245492BAF032951F69E716001DE419883FF01BB562BF7A8CD1C6CD
40BBB35A5685BF03CA5AA04FEDEFDF24B58001909B7B03761FF2070A0FA2CEAF
23100219B1CF3A1F09D967E429545A65BB9DA9111A6D08A31D0797C7D0DF1D6D
88ADC4FF697C5CC0F670731EC605C2C85F79D5C6DD740FA2EAE0C2119F4AEDB9
BD5451F2BAC4AF89052666E690F8ACD132C6B29910190FD862092C5D24CE3B80
37AC8FDD3EA687834689D1ABC946C2E4E79D4F3AAE440A1F525EEC2713C0767B
327F5AE99A990B727C6C7020F14175225EFEA39202B10588CB9B4E44FEFEEDCE
7B6160978ED7FF4A5199B53C9F904FB174E3C63454AFB214A8944B2299D75F55
E0414E65AD6A19F8F0894C659A61F005C6FCE1A0E970036566CBD52B4A8B1AA2
57C2DEB9689E200925D85FA23439452A82E6421B44C297B1935A3A5DE94E8681
FC6842809C1CD755943368A9554B60AA09E892F91A4B3291F21C9C651669E0D2
71F30024C0488C71FB30791F330A89ADF521505BF7D84597813143C60D3D1A51
5D52CB8732BA9FB066CFFD1C50E9BCD1885D95B60048D2EFAC8D2CC435BC0F25
C44B4AE7D581455520DA75F0AA2AD71C12CA16B7AA13D89CEE02664EA934E077
7BD01EEC83BB5674DE327954754A34A9A04FE68A437B8306B8463247F1E54DFF
D17B997EFF71C0B00B951A7570A341DBF602CED898087B72FD370FCBF53C18F7
6B79AB072E704173D21582B641515FE91E1433A56A4B1C717A38CF9C88CB71E3
781E9DD1EFDE5652E31772561D5A448F9B520EA55BFA4FC1C8FA49F5377E1680
6EDACCB60F0D8085FA97FE6D2E960552337321D82B49DE32AE60EB35A8EB1742
21DE36BBA0146AB08A3DFE98951927F9C3A83202250796C33F156EAB4EE9BB26
12B1FD223DC6C8A48B36B81681FCADD2C6095F052CEC01B7D399D097BACCF6C9
E10E5C114D067892630923CD601E96E722DB1BE432987A61FC0FC6820AA22F96
7BCB97046EA3C4A9A3A97D7C031F9E8AA24C0A18B40E952E098614C2DB3FA57D
400530CA6FA97ECC263187BFD652DC36561D27A9335BBCA18349AEF42BB9A57F
831F6379060E3650CDB2C87FA552F5999A1B5575D6CAFCB00B7BEF6E47AC23B9
20F7B535193DB8FCC1FB0DA6E544394563D24D8C87FE0F2722FBAC78768C4A89
FB6E27C2FB99B97F2312B6455CB547B771F0F0E66A2A9A030A92CEC7F3F1B26F
F6E2D1797C38DF3097789861DA2382708D050BC6A2263B7F797BD4F9FD0EF0E4
68AE9691921512F7DE93337F31701157FF310056D421E594F949B0E4980653F0
1704F8963B8BF87DC9CA5CEDEBE5D0088AAD263602357ED1BE61FD58DFA0317F
A126A715D3C293274ED2C5CAD0C162EBF98632D63BC149DC1379327ACED1EA72
9FBBF3D9C2829B9FA5A211732448B8F3125AC8AB538565E06699AE5D68759A52
096B795F2DFD666A3ED9C1AECFBC3AD200383477D05545B04A54FEA1159BA81D
2F515C46229D50F7DB0820570898CE57EB2DC4F2D4F37A3B26398A1D5AD2F84F
0E1339008A3DFF0A65F140E43A7EA149580132082317DD4A19E976C084A28CCD
E5BBCAB3731366C3B74072044D3EF2EBC1CD905BDBE9C01C812B0C32F4F09AE5
4B9C67CDBCE3F58B2E4658532D7DA349A085E560FA3A13FFD612BE78D9014A90
8651C8C8391C12719AC3EB6A7652B3689830029B200A417E9CD3E5580A9B0D04
F36C41B2F672218763100EA3EE9ECDDE8DD5AB6A6510CF16E8CAA48D18DE6EE0
20AEF0B89AE754BF7F8203F0C857CFAE8A868BC658413CB9D65DFF018B979021
09935414D50E1375DC1FA058A26A17105A2469DC27876F4035544028390706CF
1ADBB96A74355655EB64342E5FB6E18F2149FCF4C0F743AA1A1A120843D3681F
9DCB79A8474270CE46F97DD10CF6C8941D49919570F2E5F06D721403053F2058
E88858EDEE096C4034B5A2C6FEA57D50A9ECF4529BF907C09445B3E47801F2A7
157FAA847DA5E22F00136F21273615D5288ABEBB427E01E60CCE30B0F2B691E3
A8C1DD510CAC176665F9F845E184CC0594188DC4771B8904EEEBCC26570D5C83
6D34EF4DEC34F23A4282E1448187B3AA4BB9002792269E14A11BA6A5BC7DECE2
0029034C88696775902DF6CDFAE2AB99ABA68FADE90898D7F48AED17DBE9CC3F
44BB85BC31F795942D5D77E3AD79EB3B6CF717E5CD434CE1C6B388B901F937A2
99F65C3217180D4BBDAAD2E96F91B4DBF12F6C352FA5F0492B73CCD90086FDAD
B941A35FC77F7364BB75AE2083C7C66E6C13CF17915C99F16A44ED8B88CB1B25
44153A1AA8D2DAAD95397883491CB46911D35870C88509B392E1B931F0E402CF
17A63993FEC0044612E8EB5CA65ED931CC5E0FE1F28D6565F3C195C8183E89A7
FA85A0C12A52763634899F898B83763908EC0A1C9AAD283809A935DE0356C702
F538EB0C2D835A9CD11BC6D7C87ADA05A734DEE08CB62CF82CFB0166F0F1C54F
38D882DDE8DEE28A07A9E0A42143E0FC979F53C42E821C769735FB865860424E
A7F5CD9AC21C7B10986B3D714BFD49F6DBF0306CED94DE945B5A67DDD8EC188F
7FDBE2A9AD81F7002A27F2EDE3459E49C27632009CFD9CFBB246A971A093D8E5
027D67A89EB217A0AD71E56421A3B1386C8878EBDFF132070DF8A4E24787A29C
5AC9DD10D3BB974C0C92B89BF728B6BD03C5A92A87A52243943EB3E77E6CC38D
EDBB2DB8BE7778936B71AE27A5FA67289DAAF80C0F5EA7D9E67929CF4142CD52
DC6214105CFC9E95B7334F9BB9C94C9D81ACD2DA6F0CD9653A11636472F5845A
F507C8EBA6518215D75034119AF139B07DA441ED1B5D45704665D5E85622B48B
EC700AF8F765FD970E1F82C2659A38F8F63251495D697C3E0E8E7CDEB23ECBA6
03CE654F0B4CB297E3AA3E9EF091E6F7D0D07D34102A25E12F04FC9F4B80562B
21C6D0B8BE94778C7E73746B4845C1ADD96ADA56EDD51EAE4683113F66F87650
90E7AAE59D8053AE0BA8DB3BCB2AC0442D6E7DA7789B74A83724CB18C0203180
8CECB597CFFE81423BC0B3D05BCF9C2F8EA64AC3C5F7CE2DD08FA2E5253C21BF
1C0C1DD432FB523701060720730E9F51B7626597A17CCED52E42690F9808BF40
C0FF302E4E863FE458E0DDE830AE5FF2FD1A26930E14FADD837552972E4375BC
3F6F857EF419616A0D2E3D646143431C318824FC3BC21E55EF5123584D5A3508
FE86CC6FD9A1DBD506B027308CF215ECA53E73C0C347A0C47DE886A1E1F78EE1
8F3B7924E56DE4D18CDC352314CAEBF065F610B00B529D079F2291FAA610FE8C
4CCD57A7A8C9F5071193E20C5358A7495DDE0FBC9B11349A03CB50C3C6E5F571
A5469121D122E16010687CCBA357EC5C1C77239733D652E40DC6F755919054DC
900685CE73A8D5738C2BC3A5CAAFD59260886FCA15CD098A1B0611374A7A0A02
E4EB602399853AA05DC6ECC02F16174606AB2770299A4EAE74166D0EC9965C87
B89B8C1DB7526B19F7F0C20B11FDB0F0656E7ECADAF295574EBED60685F10EAE
1ED416C4346753181147EB065D30A883FD14933F4B11CC112DE73301F7F888CB
67DF1D266655E2FF6B267ACD8E1FD4B60843C4A4DEB96E4C3F6F3D70BD587BE7
BAFA3EAC91AFD9FDD8AA23A57F745E383FF8BB6DC0C752C8AE387F1D4C15E4B3
D2C887A3C469F9DC2A96B15D33FE7C565961C2A7F1CD5D80B4B11525BD2B8C3F
6F760C8245A1AD9F508AF0EABE76207E935CF4233C2614BB02993C18F5228D99
AC686A7ADBD6EA7163DD1362A8CE7A17C1064CB861BFA9277E75B0A8C76AA6C9
98C9AD482CED7C243C9688305E326F5741E280311FB6537C611BA2451F461DD5
2B51651F15E9BE11CB03C9FDCFDE3700BDDAAED61CD52A7DBF4395E223ACFF1E
E359821663C771DF990F78D69355A8C1D072E20D0E000DBE4A0656BE7F021DB8
63F63DE07FBB104CAA97C01188ABA1F0AC094030E2F0216F900EEF6D6E69E994
902A4C425BA976EABF2B11775929B1296FF602F903C70BB29D852EFCF3751A5D
80A8849721E155F887EAF14699937EC5E60FFB3A13AC9FCE3CC664E6C09D19F7
D23F8A75F6D1464A7A8025262B1C95F281E0164473AE82AA9B11484D9D6F8B66
D150591E00FCA26EC8CFB1C926563979CAD433B91341797AC8D4E9842A26D6B3
3DE375C1AB93D839DC4F2D41639E03C463B9D53DF9D649C8017386EB0C9E4399
A7AFD8703D384864AF49F4EA3FE72CC66F826A3A692434D4D3BE6ED6DABA6016
F812E8D85184C463B9F9044091F80D435E1366EDBD597C5085B9AC04EDAE551C
BE68E84519D138C233FED4D6CD32DE3F8DDD32A240FD49AEE908C7972AB2A420
AA567E0BA6781213329980CFCFB18CF7CBE6C7FA3C27329FE9A10D03889EDCDD
324E112D5BEB28766C0B807B8FF1FB8B81D0B4103EBB92A3F801177BDE9BDD61
E288E9C68A020BB9427C07939EB5649DED6075ECFF58FBACC2E7AE26BB9A0546
118C9BB6E9CA78AFB3C7D87A1C043EA301C3006F857EF419616A0D2E3D646143
431C318824FB0C49362FF7408933501D25922724867F1084DDAF1D0BF513B767
87E4A2F56EEF9FB845A2F7E97795A15160D23DE3668AA3D7DA417C906CBA8079
93A9162700BC9A16725D6510F607A4139FF20EAA6FAD50724816D76FE683810E
63BA4E40BA8E5C0A6D51ED6EBCD11B5068CACB85ABF6D9FC648CD35B1E038274
11BA7AD177E43BD16802D27FC2972286F2B152BE1F52E47D6BDD0DCD828F689C
74CE0750AD5FA10FC0E6B5F36EB62D69D698EEB767B4E9FFE73FCDAF8BD20876
DF126296187D1364EB31556C2401B79B8A2E285ACE63FCB0B137685611FDDAB2
E8FD8784FAA7132BE44229304ADC8A686D6732B0207BF2EB32EF468462CCE9D0
CEB6AFFC1DB954D41CE677D750AB42C1067EDFC2807B3CE00CC05F6CA1D87A1C
83530D8ED64611BEEC2A214EED19C0949910584F7FE49B03F896E7FCFD087089
E5CCD4368BEF556A281D166D457F08E37D782E7467A552F704EBEAF9F9AF6A64
9DD0F7E5D01633F0D869255EB21B016AFD3655F66750D3FAD23810392FFC09EF
C2864447914DF3ED2C719753BB1EED9C4359774194896CAB73A2F2ACED52AF9D
066794BEAF0EB7F06C1D428B9D34331BFA9C9A08BD09FD5054C8388DA82C3566
624F6F7CAD4242AE6C63D047AAC8EF82134EC418EA69430C0CFA1EFB2B4F9BEC
48808524500F3A6571A6EA4D65079538C1F9087E6FC665136B7ABFFE8DBF1184
D3C3AA9575819DDF023FF06A5F3B1A51AE4850C6FDD082AAF6FBB07DFB6A6227
A73AA255113DF4821BC5FB991DC6B178B121D38CE79E3AD729E30028E43296A0
548A7C64326F696544F6B1F129A854A81ED65184618E121FCB80CD031A30A0F8
7D7BAF534E49D13772304484CE3BD2A9C4955C7691B72AD442BDDAD18F30DB19
0E4D004697B5BD861801D55698E3D6ECE62CE5CC9FE34A8AAB8E3CB9409F8206
F24A189E57A0B5C178B7326860AF2A334383A1C7028DB9A3509F974F409FA0B9
5E779F2E9093E016D90FE788F6D726A04A5D06B0C05E69A239F52F5EA889627F
19006CC52D9E451DC21450FD3DBB18715AF6BAA336E150E02FB2831359FDB957
92B2E6431DD24BFFF2DB62693EDC9C5A4FA4A71EA0848A9364BA6446D5BD93EE
9AFA29111A71BCFDDA20BCD6006B0309EF0926199A60E28CFF48B79840BCB88B
39475A7E1C6815544584C34DF0E22A5EB61F0C232B03C08B27866537A9CA5F4A
B3D997E3153548794D9232AA20C29B6CF38FC8562EEA94D43B47E1F7AE890D38
03E91CE2738FABBC214C731AD70893D5FAF5B4BBEC5416501276491B79153F8D
F73808CA8940A65E5F0D1CD06A704E946B53768B5F92C841F47646E5CF24EC08
A8FA2348D271D2A84CAFAB1A979AA7E43DAAFD896177F1F70EADCF7E077FF92C
EEE279D1CD8F9B064103EEDACBDC40EB2EF6C28E91A0A1B0D7A7B0ECECEB25B1
8BCBACFAF313AC51BA6360C4F0BC34696FFE3C105348362C617D60BA3678C821
5B9F542D81152BD47EB69563510C525D05E195960D0EAEFB771050039A2F1CEB
A3DB1E042443B665E915991D932209B3F4C86295911FACB51BDAD45965CB3E4C
D451B5A1D6149A66BA1CA971CDE9629C0B16424CF3609285DAEB0115E4A8A145
939599F77990E19358425614D41218CD20852B1969CE91DB3F7B7E87BD9D405F
2E29BF660674457A70FF888A59085E68EB262A88EC25462A4A9EAFE20A956D43
50D8C90F998103A821C35734F0153950E5F72FF6A8AA6940836AB19ECB89B9DA
9A93D028D28EFCB73500DFC2F30D6C47A485B062196657C6B0CA8422DC11C6CE
AAD52991D1A9E5969D76BDE4FC976074F2D623721D38E3F361A941457847C5EC
09C01622C089AB3CB216A5C27D634731F3CA55BE5D1F91FFBA4A232B68F80792
19AA89F699A8C22C30EA308E6A5C8EEB5921F493C8F5B7691CD5C39E936ABF65
80C629A7592A909A4F89FBE2E3EEFC8BB99DF3B9CCE8FA93A71128B87293E690
C242ECD53B604B30AE8D7172F3E47139FEF1D23D2F930AF1B361E2AB0F5B11BA
428CD87225C7FF28FDCD4FB898A052A0B1A3C494AAB27E0C853EBD237F5FDBB5
82FBE603D54C4AA4887AB453337003BE0392AF8359E416849A0B2DEBEF46E3AB
2B8DE7532BD19CFDD69285BF725FB229FAC5B04008CA381E09AB94F1A9224922
B4A5C23593F8765E8124AB49FBC57F1B0A7E8F6FB6C483282DE613E28E0AB1E0
441517818CFD111E32142FFB160DB6422A5884151A4054D6076EF2F506E3DB3D
67A2D10FA038561B4D714B08BEC08EAA7D1909D5833FAB8D6671564F796B070A
2B3717577FF24B2CB8D87BFCCC85B1F91277DF1E391ED325F8383B11D57D9AF5
0EBCF7152E3715510FBF60F16750CF58F347797DF580DA0E0A4F13FBF20B25DF
F7861AC15FDBA1372D5D4D2555A2E8E23E29D8C8C5F39807B5A46FC1B70A9ACD
B172BAB4BC144943B3D3FE06E95C6B69FB006A083E8592BC01483D8DE50B9A6A
C86F872ACFC9489546968514D49014716D5975AEC37D2CCA662CFC60637C65FA
FBE78109CAB35AC2730A761CAAED96AFDADFC1FAE977B6BE8BB8B73909AA1117
B78A5506192B150BFCA046A36DFDA767967A43B3D1F3FC4F591BFE0EA1D77EFF
0602581EEEDD6C8F062E3E6783AD762482408DC1A5E5C900A43B0115F76BDB75
E9FAF644E1879C37A1E08DB03EDBCDA51187777E14F63F0C62F40BC85D30FFDA
81640FC9C58E6C4A95E1027273D38482DCFC5F6F6E64E4D57EB716ECD75C6A6C
AF0F0FB5F6A73A47FFFB9D63648979AD6DFC8C619CE8FE1EEE3B9FE2203DC6C7
5B27035ECC31BF4368E12CED705A5823BF6AC2348B46BB50393DD2B0D8A303AD
186A5DDB0595138C0E3D757E8DB9B67D98219241C0DA67E5BEC040A958B14BB3
D782151402720D5B4C77D25AE31C4A75BD8C7EB02722DA8D89430EC74AF0B255
2C97BFBD1C6C0062488763FDB07939C52A5D0D17AB4CAD27D6776A05245E5663
DB78466EFF0F8E67FEBFA63628520A97B48285DA87CED8A9520D6679CBA61BAF
3ADE6EF9B4205BC43BA3CDA488E512ED42BD142526394C5103BA4718D58F167C
B6741E06D4CE5E269D3AFCBBF060F416C0B747EC5BA54AA743154084CCBF021C
EAFA448258460E39549BC1781B89BDB53A9752A519A9BBB3CC59D3FBE6A84F1F
9521B6E05D0A0B2E0FCEADD4932A5E64E2E417C6B64D84B19F7C2D7C143E287A
BDB12AA1761639E638CE9D89C4CF0AAE1B38A2837E19E5AD8A4551A971DCF562
769FC5E4767C4CE91F8896FD3FE37FA5F235AE1BA3C6F3547FF24606651E5887
FE8CD61F46FFEAFF4A66DCCA05B42F9B762FF8905BAA1B6D15269F38A2D283BF
456D5D8BFEEBCB5B69717F22A0503101F9953D8EA3833BE27127E1C489198821
227C1ACA75B845E5D0C0F7D8416730AF4BE4FC931E965594E03272CE6647F502
4D51CD78D79C802EEABBCA93CBF968187FFA00C2E8D8E14D1017DC8428791C90
0E377B78459F629FB32E5FF3872C95854381F1D0D070EE364ED35377E1DCF455
DFB59E53117FB961AD0BDD708C34E6B895AEF03EA76FE4BDD1BECB4F085845D3
9491FEB49ACAAB78D15ECF938729214C68FFEFCAC997EC286F30AD0245F229D3
687ADCBF4D6FA08D7289D923565955106A2FFAFA8C9F636D647F334B648E11C3
659BA4FA71AB8342608C30E42BA95277382833BB9C14C6EEF11BFCEAE9139B89
256D5E8FE9B80F6DB3179657983AF5CC8F3C7EAEE084A74558304627D0C03A01
2B6CB42DBC8EEF10FC8E83696D58F0CAFCCAFABB836E9C1C7887C42265DD4193
C8618501A7FFCE13919D15CF5F00684B37087F633AB4C7B25FF2D7D54B31D2D6
96DC1E52C828A7A1155E6471DA39E1D47F152AF583CAE41F7F7FE0AA3F1F7DD9
175A2945C257765C4801FB768C6188F02FF2328F7D5B493D274CFA840BDE34CA
C6B57A04D9EAE9B90595D133E0CA2A3AF2DD6D4E50A9FA8AF67CE3FE823A4E3F
9E367C4D358692A287F5074A8C01BA5518911789F7767BD01F00D086DF326D7C
A50C1EFBB3AD48F21DC7670F524682E7CE6FB4EF66525E8F15F63E8A9F64DB78
90533FDF90C51ACDDB5CD7B1CBFAF76EE833E519C3715CFF2AC7C25F0EB8FFEA
273601D1E82984B8AE31AE343F37D03920CFB83E2DEE7642AA85B1615F9CBA1C
3C3197223C9F0D4AC9F585ACD311E1BA537EE424CCE1F22EBA8031443AC094A0
7EE8CC94D559627274D5026EA0DFDE5F67ABF5E84CC6B6717E8B794AB2DBFDDF
3A89648C906439A91CFB1AA195D9F12E03463930D05A3D71E1E9830AC1A31C2E
35BA7B396815CECCA18146C96709CFF862E8552E4FDEB7767292AAD81E5B4186
180C7D70697B73BFADE926163A5780E71276C60EAB7E25C124964778296D06C9
02559B89DA648B919EB362176B83298EE2D8B405DC67F2F888ABC36137C2137D
E0D7EBBF2323C750C674154FC6CA853B13A2D88CB67CECA9A1D3498D569DE012
062C1B959357A2A5903A5BA40F8E6CA80916037DB040BCE705D91E61D6FBF089
4C659A61F005C6FCE1A0E9700362C58C9FABCC46D24DB46E33983DE9AAEAA7DA
FD44C991F74087597F21C39DB6A2CA7C80E5410BFF7EA073A18DC2F6999DB161
EF7DB88DA4B0C592385D35F705BC2A9B1075F1B1568CE34A4F7FC812BF766372
E6F0277D8604E72E2594DF545E359F2932DB2764780688C794121E4A50AA7CD6
479A34E1B75657B41FFDB8AF1C9E3D3CE95EB410E74A1A29DC16D7FC12AA69BB
C23F9C6C4B24E6F0331C3747E378ED0C634370C3BAFFA2F1F9A03CCD801C4E1C
6911750F761F9907A438DDF4506C6ADBAE868F8E3D97C83E366A89B60E01C8D8
AAABC217C07193F92A25135331AAC542A41BAA9D9B246CDCDE58236DC29CD0BD
4C7842713E95F5CBAF73AB6456DF36FF580B2F42E21C6902705307EB16D94092
A85D8BF6BD657788322EA6A7F874F53F5EC3D5A4DFBE35B5911AC6E218ED62EA
FE23AC78C1FD52C0591102D74D3C6FDD1935694B7002E61FC34AA828BDB14CF6
B81946BBAE9D2B044B3F72DD84699E5735D7A8A57091D3709FA9D5314AD7FEBF
0797C5693895A99F6E03BF0F19D8246951FA87CA9FE08235526B59964E529D71
4203D3849619EB4D842660AEDFC5430F81C552C6AEA6BB170154C777A63D6404
15B9729D98238DF0E36467F8AE46C4A0A633D4B3F8CFBD1194BA8E3B5F981868
3EA2F04EE0AFC3AE4DFA747A1706F7FB6FCB5378D992B8498043D00CFC47D2AC
1081F1A0B01B07A92A8282B3EC6B7AB485F98415
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: wasy10
%!PS-AdobeFont-1.0: wasy10 001.000
%%CreationDate: Sun Mar 22 11:13:35 1998
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.002) readonly def
/Copyright (Metafont original (c) 1992 Ronald Waldi, Metafont curve conversion by Metafog (c) 1995 Richard Kinch.) readonly def
/Notice (Copyright 1998 Taco Hoekwater) readonly def
/FullName (wasy10) readonly def
/FamilyName (wasy10) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /wasy10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 52 /XBox put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox {-23 -1667 1720 881} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB02CB1AAE
36F1D7B67C605A37687A9C3F7067F07673039D1E3E1F5D9B09E6A389A55EBF12
06E72531469F768EDBC4DCCA572BD608C4BA8F7EC3E5BC61C6D949C94A843E69
0622F0AAEBF5CB25A2395DFF6342106C198751CF0B33691FC18800254AC54C04
02494A0E3670008E8BA57A3CD823BF47494F2EF9244421A8A0AED84D153D7201
BB12EE9478DF00CA573F64C2474817FF401EE94BACCA8AFC16E776665C3E1E31
89AEEC906A2B9F8974BEA7160C33F0AE7FB04B2666A5B16659D6DF66A688D80A
B531D9F866F21F15D55C6FE75A8787091359698E434EF9C129EED0427EB96787
B3F25C530E3664725C63D4C5DFF9D05CD13619FC41A001275A78C58F85FC7C4A
911CC31CB426231473202A698E5715B032D2206BB361EFCBFE3E32BC0C8D9BC1
353AAEC62EE632FC8FFFDCF6E7D928F562F689406CA00C11C7EAA723B62FFD2F
5F6343AF494085662CE2CE880B04F5589396EAAA8823DBCDE56D868B9E66BB8F
10EA91AF37D76A1BF27E69C2A2ED1D8B25434C0F205313ECB8A6E039093FFB32
983346BEC569B175529DAAD1FFEC1A9302918FC947C390A86C061AE0F6522D79
2D4FE06AE4FABA59F225D7ECE2EECD4BA1359DB18F8957F551C5D6F037F18545
CC6D03EB2DCCCFA294492ED72A737588457E5B18FA4CA0F6D6D8963CA35DFEDF
31A684FC0388D416D7BF6CD9837AD8692F284F24B80CF9F24DB10DAD0C4198BC
2D2A52D9F75CF6C52C7AE0D8D4598DB750E9CC97D0FD31EE8C598A2FF3745694
29DA808141AF4D8F8AA36D7DDCC3457D5E082B2BDF7EE060296721D44B092E70
3607B2335488925E41B22D659C8F0FFEE19A7C19547A147DB851262E47E9C4FB
0A8364BCBC1C77E29A1183EF185EF35B9A5B13170730ED52D5C52CCB460E7D37
F4F37F772794BEA0DA201C99C52F8AC2E4CE7FF33F6ACB796E55BA2372E3B035
52C4F57AB5C0BF828DC7E5A8F8F00ACE0120B99667816FAF5D736BCEBF7D45A5
79C9B5EAA32C9B672D764D2F51B2393ADC71A36AC0D5CA76F3F571D50CB4C1D7
CA77149B8F0C98198919DC43890A7D49B0A6C7268E399C6C68B6ACC0D1E9F5B2
931BAF9EEEA6ED985835323E85D72C6A607A99212BA2DDD24D57809EDE36890C
F8121121306593CBADA65AD9EDED7740C9A2F402E3908B54CB4AED249AE575AF
E64C76BA802490ABB489275E5A3F2B926955B0D961A0B9B3AE205C074AA695C8
68FC2F6997531FC328B8FC65BB06C17B212C8C06D5127A14D7989D24912D1CA2
1FF37457E65829B6E1C65A09C1A101047DF20ABCD57E067A7298091C88C4B587
84409C67D00F7D95FFA0D125FB938B5762D912E1C0E116AA0593B1231FDF3BB1
498BA3D20DF13C7EC6D40091B789C9FB7CC872BB73E6B9D4ED8A555CA31581CA
0F057B10C7A8CE1D7CDD4FE2D5332FC533158B8CE6CD3E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C071D06D71D60CEEC9FC68AAC0ADD1DD74B262
0156612EB4B21A3F4ABD34403540C124221FB9DA5EC6C7229DA9A1D033AB828E
9D80023B2C8E68FAF7A38C925E0587A1CCE432EBBBA598B201F5AD036BE7C8AD
B8C411BC79646781C4519B89DA648B919EB362176B83298EE2D8B405DC66D81E
C655DFFD1BB283F3C5DEF1495FF97C798C213036AD02BB07FD42EC5932E79727
ACF464295E75CFC635036CF27FFC42DC2919CC167CA4C2E673040B7909AA26E8
123B3D9F176F6510B9526E94D4E38E62F8B9B96E2D2D51BDA2FB7C6992B79CD8
3E40292315B0EFE711C8FCB37968B8AE1BCADE6BD8A3BA1009B34137B90D924F
B2784C9E13F0795427324E80C175BC99140171AA2F40784356690DDB982F55FE
EFFCF946C6DADBC6A907C7DC28850415D9AFC1C8A868801B990CE2D26AE40CB3
4EE0281A60063AA71E48DB8A35E05C2BEA1ED5BEC68717E95B7597AD7CACDA2A
6A4E8808BDF0AFFBA31BE1697149D7BACECF4481DC61CEAB7476A2E00CD8EFF1
37E476FE5A098E607E25ED29F4BF3409309145BD0530C8A76E85F59EB0890ECB
A12DE954F33220ECCE5E9CC4B52E97089790D08FFEEA7D143DCC7C07BB2694CA
6709EE19C11515E6E967043F9162C39D9BEB2767B7B31EA068C594A63173F7F1
67F3D6FE97087D19F73EEE205A47785EF3C453E6F77A08AE9F93F4060DD19EF6
6DA5E780DCCA30F180F8DFB0CEC4602AD1201C63D91450E7B5F44AEF32087A03
0D933A941134E74040E6E7E797E18AF57941DDF7DE2072ADACCD3BF8D4CFF06C
5B946E21D0F5A799CD011CFFE4CF0F571B4377AD4768FBEBDFCF6B49F09839B9
35B1F7AB20DBC872DEDA90B79F113F5A4BE581DB49C5EB8C9033B8050C143424
1EDB333D1DCB862DC543CE420CC26EDF9639E4256570975B25C6C1F06CFDB2FD
9035344017BAA39283C14E3AE66A14DAFFE2CD87485598645C39B92C18AAD014
7814BF27C8FA6DCA0BBA0FFA552B9FFDD54BDD8C7F84484031FFFC0AE8932A64
53D2632D9379F30231361D03BF91F74904C7106B6F8EB6ABBB29858F65E937CD
E31D67C847719779DE0B34CECE88A8F9A12D46B8FCA50DF4433B0B8AED6A63B9
E6512B667AC78A09A780813B1FF02AA967B12AAFAA0AF1B3DA27604A975C2DB6
FC1854457C67C54DC08DB989CA3267B2BE5B8178E6B7889A33771F86276E6DA4
F83033522871198AB3E954EDD88B5059BFBB42AFFC2738CA09B628CC646123FC
9C2BB8B9149CBADE7A7953FB4FBAEB6078B410935DF7D6D5064271899313C4E5
0DA12BF2F08521A17641A2F5541EC8419514939892C0E353FB1785CF9CB67C88
AF752C2A0DAB509A424DDB9649BD8A846E6BD3D374BEB6B9DBD5C10FF56E2000
AE4AA5B339C187F52630B52309834F266D778C720FA9BD9CBC1F322A39EFCAF5
85107BD5A5C188A6409352766D80E77B1270019E0EF57F31E9F13B9483F070F4
86122EE08A4870456161458B6C93A1602A5EE583461ED91A90CA5B743636AED8
1E5142CC0A7DC998CBCF84E39CE3B141286A5994C60855979B402FC1C092EA15
1A6F3762571629775247A6AC65DEFBCA10A51ED614E0C7FBC7335681207464AB
F8C4ED5B883E7A4D01199AFC3C88B0E2AB5FE014A84377451081CA0390DEBA75
7BEA45FA3171095052B839F7A2A9E41737F4A4CD704E8EAFC757116FE3012E01
AEBF584F6B34EB3F9C4B3893DF4E25B71CA17D427219E0E2F3F7ADB530841948
1FC1CD966965C72E9490C31153E2A0DAB73629A1DC0ED7C058AD150C4D5BE6CA
FCC7D71907232339F3FCD771914933CABF613F0F9FA3E206172B0B4ADD1D9744
00A8C2642147D4B652A8F1A7E5BD064E369FC591D4739533513C202E9DA91CDD
1581D1A58898DD6564B1710A88AEF94B888C52681BAEE1E3EFB4DBC694919D4F
41D01894C91D8E03F68DB550934E5D783537D2B57CEFE23ABACEC756F5D1EA5D
A74192035D2304EC4F9083716CA7906B80486BB5C79752270821CB12BE7ED0FB
9FEAA580CA187AA3C9475070809AF6881F745EC71298D454AD31AB998F5821B8
2070122634D5A247EE4D8672339B1D90113137D4FEAF3CF3A2456A8712556956
C5A48721B1B1E140ABFF7793081B2B092724FC0F129DE772236556BEEEBEBFB1
FAB1037FB0997B367483D2C8C0D44E6111CEE2EF443F84FAC7710AD0368D542E
8A629BBC3C6E2D85E984AA01B575B37DD1D9B0D453E3A73EE7A34FEFA5641BDD
67E694671B6250DAFA3D85E0A78E946C78E33A284D4F92B73D7AE87B13F108F2
C4611CD948F30F56B984E409650E9CDFFD63D996E25E5C0E0FFE02BBE2237537
8C945F31C26697A7ED159B529276995292581CB9B29A54F4F4B2D472C74909CC
47C1675DC6FB9A932C0552F8FBE17F4D8771BFC6109E6D709951694157B3CA9B
1F3952D101D6CE60D1A0A97C99EDB3FAD64BBD337BB747424BE88E67FEA44610
51A1F65159650D3A2FA882944E6E8DB113CE928969F6BE3E3B8BFB71302E87A4
5A22ED99B04853D66E5A22B56F79FEFE917A6F436B823B1A2FD914DDADEFB5C5
CA3A43E348D017CE2040752BF94A98902E608264DED8C3241F06469FE18C377E
448EDBB0823526BD66B40F0519F047195405629408224D070207499DF2F43E7D
52E442E3B6E9E3B08F88C9961E81373B96460077464C7DBE6C7C7887BEB3F685
B182706F5DB4C7C4BC2FB81A7D040EC5A04E5C5434D732318AE791EDC71A47F2
AB39A992EE304763BBA1AA81F9D74B24FA7EACEFBCAC72D673540922501841A4
F7EF18CA86AD20AD76325914FC0197DA6D7632947C4AB3AF2133D1A1E2719511
F62BEB9C879E76B74493C7D5EF38E01CC031CB4CE13C2EB6BA2695E1AB97260C
39A7CF8F690145893081D526990E92C1FB18CC4B968D70DFD13C6223FAC9AD31
2E1240ED981AECE8D13DC653D59255F868EF158EDD781E9D02889907B23F00D4
F6A0D9B74E591BADA348B09E22B1A783A8EF2AC87D34B6407522AB33411ECA4F
6C765C85ED1405A5F27B28A16751402AB278A8099E29940E719DE1E109E5BEFC
2A4098E77020110C37A90B5BDBE279918B0B31E08031DB686D518B4CBB8A4D0B
EBF6750A452A7F706EA676E3B3237FC5656B29CD5A3A04F82AC871B526CC28B3
A61D985EEB3610FCAA433B9C6D4683C512F0FDBF3EE6FF552D7BF0BBBBA37050
FCBE3F164189FDC8446ACDE8D0D4050278151B46E56AF826A0C2E9389C2B8BB8
E38579D281D5142944D3322E1C66D456E4C5DD727AA41FA5B369D5E10CD71832
A7DD40DE855B47289C449B6AD8D5F1D557102050EDA5F1641EAAFDDBC082E579
A06D8A3A323458808BAD0F4B8A2BF406DBAC4C5F555EC96E760C8245A1AD9F50
881DB475F892F868823CC55D4859C09148529FBA57A392127B68F5366491D1BB
097D8FF4A71966D42DD988F48C8A1F4DE0449E6AAE79500C42B4EFE4936D0D00
0FB339115493C16412F1D6DCE02BC7B485CC108C6321EBF1C609633933A576C6
B0758D49F3155D448D505F73A5206EC1C8886F5949790A7E4B850B6B8E31EC18
B7321E63AC75B6588774961F6B7D313B850AA4B368E48DAFAA5693CAA236E150
E02FB2831359FDB95792B2E6431DD24BFA8F2B51BC21E2E5AACC0CA211F50A13
075ABCF9F440CA468403D939B91520C652F1196EAF1BC975E26F8057F69CB972
E976F99070AD3FCD958C1EC54B3994EA142AA0615EF7BC00D85F75BF5F32B350
E2CF46BA0E8D0120BDB54910E5C27A27B59664E856EDDE290103A0D490FD76DD
09B152B3AD1C4754696B239D4B13935AC19769600943C7343A5E7A06C9115395
DC2F92EA95E5ECE5A08EDD16DF74B6297EC0220C91F8BB9AFE742FA96456E131
7D41CDCE88A8F9A12D46B8FCA50DF4433B0B8AED6A63BB5FFDFB8D48D04F9849
2972699B5667C0D2D206F4785DE20A854E1D4C655A690689B7B5A19F8162E5D8
454B7A1CE94AF723F47C6B168CB7269CC802B14545C8448B5C260C6AAED5FB23
2390D7239C22534FEE644AE96C5718EFFB9DF1AC47CB3022D3751E6B7123FB71
403E154150FA4A14EE2CDC8F0BD084CAB30272E8F065218BA88536F138B94AFA
D750F6EA9BB43271084CD876A14CEBEB86283BDB500BBC0F9E152C30059054EE
92951E4A202AB409F7D16443DE00ED69C1FA674BA3664F8BD00C08A27F475C00
E6AABE35B01B991AE910B7DC821CFD8A6B5C7F4B116E78065CB219C926D45163
EBF6E81EF0C38076871283D64FA5F2126CCA7E93636A7CCA2158B99A15CD405D
4AD290CD8F7AF8845CF78D4BE9C7F2E4DC00372530C64BBBB785117A8AEEC190
9F49C82BAD55AD174D38A74582CB367BB50ACF8FBB2C8A2EDB17FF267D0F21C3
5BE42CA518272C9F9FB2DF0780C957CF1B9734E9F49C0E6EBDB5D24ED5D673E2
6A25811D4BCA9D693EF8ABE784D2BE46DE1E57E1B738ADF6FD49E6A53BF48C6C
2A73026234D3719C72C2FB8B8274AB54A6853DC6784398A6B994BE424B6E9078
6C303D590747608AF3CDD6A51B5612DD5D49E1153A25EBEAC76FEC601CF4D10F
65DAE3EDBF9A163BEE244542BFD2849D498C239237ECDCB23458C7C3B9395C7F
900C2AC7BDEF8FB9D4574698BC8D4E374B34969A885A0A4AA26F19F8348EC621
89B42297868AD2C3E80D95C41FA4A5AF7A016D3C773E040312AA0240DE24C7F9
D662FC2E59673DEF563AECCABF724C09CEEB5DCA64FC6D24A091A75B5745DFEE
F5C1162900B5F1EF5A7102C27DB1918679E7E354A5DABF897D9C8EF5A14FA8DF
FA3A7B3D47542FFF5987268E60E7FD64B017EC6A8FDB4BA5AB5B5B58046899C9
C5993E7302C870678DEBE8FEF3F2438217BA5121CC668458620DB3D381D56770
19CDD612E5C0A267BE4F707ECE93B3E1E8BE65922315729FA5513AD13B562C5E
E145AB39905815D6C3E8B60AC5C1D4D7731E2A6B122C6F57790C42B0368AD7A4
99EE5F029AA6F8E302F4CD994EC08C00AC6A66C51254F71280CC722402E200EA
D4F6F489DCD61B81CDB85804A5EF00CDB09D9C2EE4F3D571285E319A78F90942
1C31359DDF81F38F6E8615BCD0E6CFFE077688C365888921E45608C868A0F6F9
D726CB2CD81B49A9F47C12FF76284D3B07E2C2E788036B4867F90D40C1E4FF74
60399F1F08F98A05A579D00D1ED5E8A86BE9DC1CEE3FCB03B9A0E4BBB81C849F
AB1A6089E9807455A5DD78B2EC3090E36EDF4D19FA6BBEF386127BBDB53D25E6
8448A975CD56BE0A93070F848850FB9B3B0285C7FADB28A3711C06273B79FBD2
A509FDF7AF81630306D67E0AAD0DAB78243E1B814F745234BA7CD57325B5A34C
C3F984018DC9653649786481788A6F58ADDB87DD0D883AF60455753850A63756
5EBCDE76329F5626E6328EBE3DB5770A4C3E21341C304F38845FE70E091803D9
D14037AC4AA8C4D17EBB62ACEFE5344982E0F489D72EF60183D8F2A79A3AA765
C18E0479B0255870CD61C8CF7AA8DE567D174EC90945404C5B928EAF3E8DDC1E
018442474EC6B0B42DF539EC1557722299347DCFF0347BA4273054B8062D3DF6
FF094944AE472D60DDF6CA62288E4E780F8614C7749C9406325C82715C866134
637DCCE4848D2B051B8E0EC7B88872E9AE68BB5DDC30F4A61119733F6F6DE0BF
4C6437A849A661B6A233B1C24238BB910C11D2A8024C89FB5DC745489AAC2570
4C61242B4B1983A5D0B134C8052495CBAA9D2E2E014641BD58F0EC389FACADA3
08A1723A5C2492BA0615B0222EDD152AD19C307118AC0086653521EA59D676CF
C36AB586FF1FD4C383E2785EAD36F41274FB0BFF9DFEADC612CA44A7392D8E79
1DDE1DE818BBF26CE3BCC2569F5CE6DC91D4F8B7800A05DECB300CD7A8C38D77
4C1DF436013901C9671F77F34A63F361C5579EC5E00C5A8E2FC97874F6459EFC
C1760E9C6C78E60CC0152340DA6F26C67B2E10B620750E2C44E5CB9DCE747E29
6F7E716E6BB12B699A2FCA90DFB3DD730D96D100DC5B1BBB1632D7015235F4D5
1C1C753EEFDD6ADCEB45DF4D00713744039C43B860B5A9C51AF0BEF11CC8E85B
067A402342896C9B3BAAA570C4900E12D720F2812F28626DE3BD3F3426B82718
259AD02CDB518BA4C4AD8F261CFEBF43857EC7A543ABB1E059247E276E206CB0
0BED125C8F78A665901F80068C9B0AED83074C6270B177BAA18F1975F43E9160
8B75D86D9F7C1E986C2DDA71CBF33FACEE675B943764AFE71B5A359C4A092916
3E8EF660794518DA4307AA5B38469000FBF31BAE9CE8703754A099D21B332D3C
A19A842755A79DDC1E281A8C34A969B80EDC946658B7579B5BCF07AC8B45C2A8
3664140E70CA62DCB3153CB4A8E46F12CC16254F52A26FE47FE41504D3E851A0
665AB60BC0CE5C72512D196F8D1BC0B3FC12DA2D13F4B9AEA2D017EE7E574B86
2576F5EA495F51E1B3A86090ECFDB57097EF73BFFD5E41E8AB6BF105F87986D4
95940A8B4A29E4DC974554DF975D026EA92FC09DBD65783663CAFE414B6F8C06
F00A26631D7FCC4527109F177093E7432F5FAA6CA14F1654ACCFEC8FFC127488
F604E972B695E9EF18F331A58BE4704E5130FB4984C3FE2474E6CF0935F90B79
7221D94774689E83E5406F5D9554C1284249C687A6CF5A6B4783F54267C48710
32ED406DE854CD5E243C0BE4656E35FA02FAF5101E1AE6B7CB286C9DB979D763
FEB468FC7AA2DDBE2E708D27D89164B12BD8BDF0418BEDF018EA67683158D1B7
73C6EF553EA897D5F2D53E75902E57D7C4E06D7DC83F1C557ECF5DE83748370B
00EE03A3ADB919976D4DBFF11B246AF9C2FE922A8A6F8CD47656ED2CBC816B17
3B01048BE9D1E4B54ABC0396D5203D088ED7A1FC7CC863AF414AC14AC2D75E5E
EDEB706CFB2AFE24EB580E55BD31B793E4065CE83795F047004ED88F5C38BDA8
7F5FA8880517429B9C4E5FE980448EDF3BD57758FD145E769D4E88BF43D19050
DA58F5EDC7B4AA76BD8CDAF0B8639BD5D2C7552AF5415B7F35B957F02B962930
D3D0C3AABCE7BF840A7A035F2CC57FC978684570CF6C8FDB960B9CC6E9435D65
77D1CFB71D362BAD7280AED8771C6EE2F7E2D86C5661CDBEBB354B84249E93B7
7A0E409B4D5E17600E1E43F5EA1F884939C0AE467119F1E155676D10A8A35955
BADB667DB10180DF404F43A166E2E533F1C050D35CE4AEE92C35EE391398EFCF
E19EDE2E31F837DF86F1800F59C89EF6401112AB73434A3938E1970D8EA3CD40
C7B8FB44205899626FBC269C25478E0A63F78F3460EDD4F64B4D2A5B3E660B64
D293F803C670E243F0B0EB1C548746C08C7F4FAC0D4A7FD8B7369AED2AE9A79C
74C0FF0E0B0C1AD3B59BEF79753FDA3E929B52F207382364B1C62AE8311C4337
297E030CC0CE93ADB4E2FEB60E28FF6D4AF0010D422AFC137F2254FFF6C2929F
CB76A235705EC088049C1F1B0E78FD2D357BBBFB0E12CD481F96252AB7402213
DF9BB4464515CCEA5FE4C0CF761E921D7D2992EB24625547D54E3F2C644ABABB
47914DF3ED2C719753BB1EED9C435F2D571BEBA4F76A0AD5DFDBA6EC952A4F37
948B63263FA4097587802F6C66C3BC6E9DF45A22A24877E4A4499697D46B779C
8609E85E4BCFE84319532B3AC9D62BD413CC127C8DAEBC28D7DE5CB57A30F23A
2859902409CD4FF43EF6A99E9FFA2DB4113C12AB9C616F074276C4840A546A73
0D24D8518117AD200014839545B1078F38D7284FBFC473C510CA28AB90147613
F0EBC94C3EA0001043705336F16E783FDADA674B361F951D5152C0011FE0BEAE
51286E4979DACD3F5A953BD9E918D5E46449525A4A597FF0F091B2B4794752D7
EE5D9B94524DF768ADA1377760AB1ACE2D780F5624CF53DE046A36EFB35B52F0
566623440D7F364C4030648BC39783FD7AE189510DB572D01093BC4C7EE0C09F
389FF828AA7585F9B7FAFA718DAF925AA837B8C0B647161E5C322CA820521400
5D234795C9DC1354D1C0E5ABC997C64F3C84D2C3B7581BC9566EB6D012B6B784
F740B8E0B360808C984DEC73EF57328A2347BC752EB0EFF7BE8B688A3622826E
C83CC42DCA4A26C504AB95C5232A86199FC1295D8BC52BBA9C5089A346CC5760
009233FDE0B38CD4EC1D07A9F817ADBD1AA6D303AAF94D5FA688675B55D40FA4
3C6D97741D9FE4C964FC6D24A091A75B5745DFEEF5C1162900B5F1EF59402CD5
E4D0C3953C9493D87F46CE4E9C7A543364A9B82B34154924F4739C650A8EF8D2
38C73BD6689A0657D8427446E44E2F5C77937234D1D6AFCA63944D3FE5126940
8ADA00FF11BFB205B9A42EC1F50B435E4D44E14E22056FEA071D0061F16D8879
6C4BA0C670D0E715ED9333A0FBBD15F19CBCE5F93259A6C4A8CAD50B9186BF14
62D3AE2AAEA8A45E9A29BBCF83E95F0C65B2D60169538EDFAAB935FE3468186E
CD90E2F15FDBB395191E6C4659910683768F80764D94FE8A746FD06C08F15F97
3A528084C73A3416B7D9498707C04E9115D411FD74AD771B5973E6D0A573A1FD
2E01CB1197990EDF8444CC83F1AF789DCE5C7F64567C9D80D1829D7FE5F45647
ED6B99C6D96B728840A77AAB12DF037473065B62E9F3775CAEDAD9508FA92283
6FAA01D50CBB9B12B543AF2A86A99F4D544B8974F01B52945FC6ABCF3ECD8410
335AE6CAAA4F740EFA8AE1742B115F4FA7FD8E330D0B86B191FF5B038A5D0C32
91053A42460468F6A1700953700663A85229385FB9BC726979DE858914A95826
CB2A8F0F17773C8DC86EDDB610CA36C8A6051774DAD79E4E3DD10CA06A919430
0B6FF769550AD34A047DDF4DCAD48C79C13C76BDB9A98E254804C9126F6A007A
D697659D0F4B9B7BE0BE1E74DE179CA649DEDD316A452509D2804B5BE0F6C5C6
EF94B0FC821BF1E02C91C149EBC163C14366CDBF3C81F57A352355320AB4F3E3
A84E4B60EC6CF57A1A00F90F224190D7BFAFF83C13AF40E46F7154198D7BC2C6
F10586634E82705468F167630971BC01DC641766DC254D9E9B06BD62DEAA105F
CD48375C11A3207B5A381FF8E1C163001513CC382BDC172026981E9CD05FD8DD
83503D108FA0BF72ECFAAADAFEE78E1D8D2B9E94AF57AE0A20570A74D0C84155
353C360C86120BE8A6A2B0C9D6550784FB8929369CA329F6A6D89A7066E845EA
FE223A6D26B84EE6B6ADF0D9950A195F64FD3209C6D47B46B7708F855E501D4F
6F9B939EE1663FD02D1E1D74F22C4DA4143A4D523E32A0A371A51F64CDC4E06F
544F2055F67F0ACD4E9D99C47877168E8977CDA919CA86D82794F04E7E98644D
98246CC6E5F85E045FE750DA4A9B403FD293CC436888B75949007FB2D0557A88
D362014EDFD3445233A03A005D3F670E67B8FE790851B16E71241433FEA5650A
3908D0B0BD195F64242395E6C807B7D00E12CC9CA711980842040899809A443C
00042C681FE3F9BBDDA09127551CC4780E971D3952648BE3ACB42BEC6D5B5DA0
CAF19D34A8BD8E904BBB589CA901E79BBDB311C102F70F1D2FE7EB3609B14BBF
10E66264FD1E6EAE175987CC0DE53E3799F86A71F96165AA3EFB39B7B13C5FCC
011F38E349AF6FB76AC51841B39F02662AF720242D74012508F26C7003A39A3D
65A8CE04E1583229836D0DD8CA390CFD14E80FC0455F34F89764223F7DC55BA6
69B8793F48CA8E9FA4C89E877948CA4CF92F1BB9E3825B748C865593BAFE4D25
F58B6C3937F7A3D8165EDF4C74CBB662283EA3FB964084B345CC06DBE98FE9E5
2BDF3CF8FEC118F0FE83A621685EA394047116ED7629C74E8171EE39B9968596
DAD2FB69E0425E6B527C4E25D28CDE453EF7A4E0988B62CE07D14F620B90A67F
273B311061BF2D3CE3DC3A689EF85714824E939267229AAFDE9C8C387F15F064
F68627E32241CA1AE9D54F1E3710F18FFA2F912FD822B05DDC146FDE82B9FABC
A9A986683FF9CB2E1937937AFBCCFCFB821CEDEFB4941ACB6488C1A608FA21A2
EDC0D22ED3D5F6735067D8C0F31C456BB35D31B98E4DA0CCE45277DB109D6A95
87CD6B0C5BF54A30D4E3072F05FEA72A3C39AA0DB177C37546FF0FFE8288920E
35A3B84D87A21F5043A04BE41F18B2CD19AAC871DF4CCABC332ED75E1657E2B5
531B227A3879412434F68276BACEC7094E9C4779051CB9421DE1DD7BC5D109B5
2B7093D785F43FD6DAE693B16645D354E54ED6C97ED4F591623645C99097F1BF
66F347EE1D6DB95461595C9938581921663D3A3DB29723187596489A8894E037
3BF6D0E1D56EA24BEE873E68313353CCEF779B6200A1047B20647CBC2F42292B
825608A05FCC5A87AD774203738D9D144919E98326CE01E4BE6B9E623761D24C
0B7CB02DD90DC8A2CBBEBDCC9B7EF3CDC194DF7541D34D08480F1A1CA16F2E2F
8A6A4A00EBEB709BB571CBD6D51C00B349268DE077F06EC59482927DF994271B
1F39BB29575F0D72916AF4B385735E3409FF6CC8F3C38638084F8F4F7DA8B4AE
EED926F2DEE9A34E92E3925484E3FA45344C7FD3D4D3A68B7A80D27AF606694C
DDFE9C6DD15D99ED151912F966FCDFE7AF5AC66080F745228EAC9B0EC2C3F650
1F4BA0C82814EE1605F5CA9D62127553EE375832C57F9ECCF6D8C3FCCDDFF2DA
B3612678BF24A2450F6E99DE896F7F3E4563B59A33344959BAE4CB57E6FF0CAB
1468DC84FE0F3F92EC4E129E00BA3BD9CC0870FB6060AAF40EB540CD50D3198A
9127F8B594F29CCFDAEA3CA1276BFC8969DA9B9A00344F1D4D782CA0ABA98754
1FFD5934A377B4E670B933462098578BCD5050EB47A9F4313EDADA4845CD6C72
77041939F7243D600CF7EE179BBD3BA15C58FC4736583A4EBB71EFF383DC58FC
1C6DAA3105C475E5D473CD591B11F1282E9A80CFE218A4B5FF0264F1EC9818FC
81ABBFC92DD26021738105BCED3E94CECEB2E6E552D1F135733C7ABB72957138
4824567D6D1B2BE5142DEBA285AC0DF74D696E55B08B672A1118DAA72C369DAA
397883491E11171B2040FB6637140BE927369F803A4FF311D52A74289065C1D0
E2663FA57A88150633F3F937E9606D75A53BC9AC8678874FC3486B5EC7D278A0
D5DABB7B1BC64C3BC771C29C5837FFFBAD42F40083C2E412EE5E6E050E99E1DD
8C3FC2A00E05F0D6076A34A4B833ECB05F190B1444E379817760012E1331E9DA
B047409E478B58C1E5D8811E1799E40445E29A10318D320D2C81AA5DCE6620B1
3159F6F0DA988C6FF06B7DEF84FD26D3794264CB02B2E1B8F18CC386797D2A9A
40DD7EFA8609D2E30899DAC9B8553DB4FC96FC35ECDC38C3E3223F9E340C6745
0386D3DC4FC1E20A83DFAE731EAD0363A7BBEC37D8A9CAECC16CEAA06FED505E
C60F7460026CB419574319DAD73DCF5A465E9F002FA79AD452E2CCE8D95B6A53
88F29F07A9F37C84D143DEDCFB27AD763C746E1814DAF2D759976B3D2246EBC6
9353B083453AA83AB1657ABADB9A30C6C52A33B45F9C7B9361F7C7F4EBB939F4
6ACCC32B19C5A5886DAD4EC3D83D0BF1564C00C405693F2832BA5827DBB7103C
432EDAEC18CAD42166EDA7834BE592C3B7C87AAB2CBBB8A87C093937215405A4
E4D84599E4674B52F65CD9EDBBF10DF518D2436969674D4C79B5F77B8D6FA2E2
26B8B932A195CC0EEFA8E39744C2315DFC0050BB4DAD4B0FF3779D39D39D1205
9B64E8C6097B5281C359CE4BDF4907ADA234C6DE77DC4957B683947D54583D09
C01DC47D2CA3D7E500C9BE47338665F1538F2F645757A6FECBE5A1590A6EA831
635F1E7946F9ED34797866D7479F81B25C8B73BE5EDF2461F63CAC91E253D461
23B796965124AF855AF2CFF8EE38436E7C68C48BA02E9F78B4EF39EC5CC133D1
4C2E464C13F5C41C3C5F8114A5650C07838E0D553E7E840AF3EA2B0E8D47E025
299E048097B778D17B0AA1C672E2020C946F0F8E03A35E76E81DBB60E01D4CDD
FC2E9BE4709956583F3B9EEF0A37F30434C3077A2428BEB3FA5E46ED9C413EF1
95DB3159AFA04AF25F0A82F1114AC09880F80827DBBE528FFC7FE26EB04AA53A
EAF4DBDBF6F0800EBEF9EA787C014E395791F73DC3A126EBEE67B036D93D18AB
91F771A43F256843EFCDCCACE4627CFE80E82179579BFE305B9AA04A6E9528D7
57CE24139474F15CA1082CF6930F992BFC83A4D983558086958FF839797DB451
68A9F3FEF6B8BEBD37ADA98518DD604EFE6715F50897F075509F64E99F3543B1
13D3A4716D2FC8CAF0DAFB63A8C28130E1591BC17273EBAD6AFB646F54CEC76A
C98678B54E6E3A103F615CA05A901D8B991528CC1ED3B30CDE23A07FFBB7128E
66FC9D66FF7CD9538565425DCD900AC231610AB9789DA62AC41EE688184BFE66
41C0D34DC5F77FEB37954682979666FD919D83DF85BA4F4B14D6A77044767539
C0C38F4EF65E5D900353EFC3A7D5BA1EB1F51ADF85A244CF55CE0EC7494D4247
243DFA8385DBC5760B397F0EFEDF9EF7769E0A6E389AD0B2A5D10CD4C41A4009
7EF753FAF0128954373F9718877DA7599DE0AFF6ABB520C27B9B698116A5787F
E211379BBC3E33DF49A031282BFAE588877B2A9A6426F6010B1050C5F50CA931
A8AED0902642383EF313DA6EFC55D3AF10B647078CA66EB88EEA899385122089
2D97DA2F0E5BB1BDD5ABD40D988B018FD18F5ECE08D9A100CC4229A4E33FA93A
0FDB1AE200E2F6C6B899AD9D53871027450BAA1FC67517CD5B69EA896122FDB9
20E721E0DB58AE8034D8C75D758E668485BD05C356D3255479B96DDEE53455F4
1AB052F11C588936C1837380CBC611ED14FB2F017FD1CB7E1E23C1459E378627
F323C6E6F04912979B3850CAACDA744B25D6FDDD4207C80A3636F3B7AC37F415
FD2F8EA734FA949289DAC5813D5C91D4689F7553DE7432E5B553BD7AFC2D8E6F
3071A191FA8947D12382B17FDCEBBC82F61E5EF76E8793195B9D6474F0070FE5
7D16CD12153DE8F377028125088457135DBB27457FB4CAE16197347611DFE63D
A3C7C9266F7ECB5B7E091D1B11EFF73F0B5E7A5748C8AFB555D1E26CCBF43EE9
C02CB6F255587300FD433C3B4D9FF1E96935A959D465B74109BA1843085C27C2
69C751AB2AFE4B15C13C6A0664475C3A9C192169487905DC47D2022934989F37
1A8F30B1B39DA9B1F203A2814A200FFD11E14CC70C954BEAA33A81A5EE27B922
0C89DF8C7471DED4067D1AFB8A49609DCCF844AC7E03278F56A07C3423C5B2B1
4B8D584BA7468DFECCF5BE1B12A00F107E3B1014C01FF888A9B1E40D31C73F5B
4E253538C5E0D0672F042A01EC5CB1BE74CE9522C06896B9E641673A87B47BA7
D4A91ED4903EE143F0FF84E3670B8D1D046FFC2E8400E63C1B8315BF63C3BA9B
849EDD5F620C7E451943A157C7CFE362567ED47BF94B63D67A9113921AAC23AB
1B8F7DDBE6F6DCF9A3C3CED6842C356858594C63EDBA2EEC06B6756F2281E040
0F776034AA7370C867BDF8F8CD40540C3C28B45B30772EE9FFBB8D00718C3430
10FAFA41B507DDED01318BC9A9C8A9E8D714B1A1D6BF89D4CB98136839AAAA92
BE85FE2786437E6FA70BA428073349AF15F2DCF43283BCA59F109E9740BCDE6B
C5813EA8EBDB20FC0C7682845F3E4266B7D327312EFB770916FBAC97E6584C84
9A9BF389B403CD6FF5F8366F9D36FB76A217CD9C3F62414281BCB53CA46A8161
D536C2D0011A2B12B23165BB4DE936CC3A4BF19EA1C5D6C0D79F9DB3B28A9266
CA8402BD985CAB49BB651D6FDE79EA92A7A00FDD42D5701AECD409DBEBF0C9E9
5509BDD99A537F5C974ADEB4C564C26AF25696553753718AE0425FD9EB6664B9
516671F04ADD10C478B7F8D9A562487A9FAD8D2C70C21A4F3ED7F9F55C21A04F
1A6DF8168FA2286D8C7EB897EC741C41A0BDB45D751F6641FDAD6065A36614A6
86D6A7B3543205DFF5A31866735EB1A931953CB0EDF319AB319EA996076E3AD1
F6363E18CEF8715CB464AA160792A95431549FB6A4ED42741F9996D7BB1EC714
A2F30863F354F78FF9D34A41EA24E7A2ACB665959298984C7B4B72564646B091
0BA9E173FD2222DDED8C4BB4813D97384DFAB387977946314C2FD50B1EFABC3D
291F4FDD99EB7C0EB047051BE634D62F6F164085EB045535E44A67A143EB6391
3019CCB8D949E25D7DB43EF32CE21205C9B33BEA2D1B94DAEE18FD20F24BBFB3
A2C968EF269DA1ECC28C2F9B079ED3CF9C315BA95779D124604AA59F92201234
15DE40C492F1036351910FE6B93342626EF81FBFA9AED252C2CAF15D3A748549
B6F6A61F79CC9DA248CA8A674045257BF43591473F853FE3A2A43B7CC317DEEA
02FFC7B4CDCBB6A5CE017AA860B96CA41C168548C5076500FD0985C57E723DE5
5A2ABED9B40D7BE674118BCF391F130DEA693AD05F6FCAAE4BFC1F60C355698E
32DED416EBF582A3D80351CADC60B733E50FA695EA1AB682A056B226DB767392
0A2C426EEF8DA67E650EB7B1DE643531FEA419BBA8067C6D0E964143A0906762
197B8DEA764ECFAE0BC6723E560B0FDAFB34E8AD48A2E4BA5979A58CCC637332
22D0687E1BA843C2E0831CC5C994179AF2BA4B7AA7617E2C8E789C621BD307B6
477A05334A8EFDF778DA38E54F972D6A17B932EFECCDDE3DE2B354F3681BB1B3
E49E42E7B668D99299AAFC1A4965F05C14791FA73964C470E1FA471436D8C6E4
4AC4C5010157D94FC1250822504BFA173CEED4E2DE5B7DA75EC58D886E9D64EA
069C9432AF8F2B50A91B0C7C55571DCD924B0C089E2515829D461CC7AC00155E
932FA3F5B34063E5095402C6368C2AEBE26D3157EE874CCED4EDBDA26B381A13
DEF3C35E4DEC459759D7D3575F6FFCC6B27F94965BBAD1D2156928CFC8EE865A
632AB4A611CAD82809B7204C28F45A55EA03A132AAA54B5AC1B745CA3E8A11FA
F9612B74D2950015F2EACCA793E7888C26EE723E78F3C894D26D13AAE036CEFA
B476721A2E3A65C2C5B0C7A8C8B2206E76CB6598DFD42AA22CFB939A914FB803
C324871E0BCF73B19653C3BCCAFA1AA748409D3C1E1A165DB626D7429709776F
04C4D5E4D04DAEBF5C475C7C3EB2EF7410CA53A9034999638C65F45B0F57D760
0215E8FC2552DB72CE2772DB7D5B3A765D09AEE0F0178E20124CFC1D434822CE
24ED6438F2103F4EEAECD38BB01B2C6F42C4C1B222707A748CC97785174C6E81
A614B95868CFEAD3BDB4FB04FDC4FE2F15947DE72BDE539DC79E2EDC7DDE5151
78FBC21A3BFC4E230375D47F4691E0E9E35436DAAB48FAB07CE7C933BD984EB7
13405D2B3F481244379A40283186D67327CD487B978FD50D9BCA2508355C508E
8C22EEDC232CA6A04E928004BD90C2FCDFB6DD8955D2D3B6FCF5943BF5BEEFF1
F9BF99301CB61CB5FD95EAD945BBE7141CCE4BD29366A97A5D740CCA11DF380F
90656717F2270C0F1D1D5A0C48774E2E3E1308F919F597CB24D48FD50D1EE2A9
FEF854CD6238126A0B323E6E84D554F59DB81033F4F4AEA1BF99F8070976D754
85DC4DC5F3C3D020E853171B0D1612A3DFA5264D6B64371271FCB4A74B2157AD
DE421D5F51D813B577B8741B68891BF8FF9BBB484DDA6371DFFA6222F88F0886
C7F8848E958C6F74CBEFC62A27FAAB38B52465EEE09E12C4482926B22743E5D1
A94A301D3ABD6010E43C4EC19A0D63112FEF67D69CEC2F78116EC8583ABEEB71
D9592AFE1D648C347BD72FF30455B7E6447D19E2611C39EC0DE9AA9AF9629976
79755C4CBD2D05F9A170FC269B792E8CF7A0462248EE95527AA116CF31B971CA
F5DBF65ECCD01FF04E6148A80BB2611AD6460F73243DB763DEDBF476F3516136
578D66103E6455B244B9BF9C400BC802A021411BFB80B334C4BD614EA7496D58
CE8BF62247CB10F893048F37A2FD1E4BCD68D656301406C1FD474D98B7555DAB
FC469D633FE91FC8103AC6DFEA6F007AF4A42C0A08C4DFD62E596AC1DDC11E23
572F8A2F5CAB5CA87E7A6693182B9561E329A3E67F23EFA6DE495C7C9D966924
F124603446F01CF73CEC5B7877077E421392293506C391705D62EEE3CF25BB0C
4EE70CAB7C5DA7C9BCDCFB67F1B66DD991E2E4C0A29284FD2C9A8740851EDC44
2490FAE83FAE3DCCD4447BE0C2D6DE59B1BD629F479924757548799EA068E215
35FA1B41FCC74614129FECD357C3BE8A07B61BA51F5781CAA9A414AEEA78ABC1
7DDD10E2B4D776449896677E02D47DB24D4967158F415484BF9D6A2AF010F8F3
BACF583EFBE1FF3856DF768AFD7C810A269760DFA831CF3CB5D0A73CCC6B41CE
8296FF0C92CA794AFBF04F8BB3B65AFFBD62E1EBC63C182EFEB487A03399B496
9F863BA0A83115E8AED878484FAD3448F4BBFCD65D1EBFCB6494575BE7C27F44
B99EBB6713BB8306E5B5A0947A00F952DBBB63C0DA21C717E348E0BE63120324
CF402F90BED39B54D866320877A767FE000D8A3386EB1E20F1194FD049F28B82
F4C2D73E41CC73C1C9F668931E64C8D467ECE84CF7A8C288F9B22E0AE6685047
D8BE005ED260ED9488E270BAB33AEC2A3A055F6BA3C3700A868E92B4E26D499F
BE545C804154DD343D0FCCA88D299600B0C26ADE2DD3774D903024A13EDE0D58
B50937201CDA9C1EA23BF95C4A3A8932F7D47100FF8A7D4BDE1BC37CE16625CD
FF321ADFD514B2BA1B66E7CFDB8FC93B6A8EE952D196EEFFF2D9E6B8CE8CF9F3
2866ADCA85FACAE68E9C7954B512463A86B1623BD5433F6551DE2AA71475089B
3D2BD411FB9BA4C621F23724D73B1079F7FA07AAFC9BBEBE2E4AC9E2B9D11603
4191A1A804EA935EF390C90783F6DA40C59AE09ED22AE971884911F452C33F94
F3A9165CAEAD2464D8D80FF6C61F4410BE7699FF1E5E942546C8A4CE88818DBD
E72D030D8E884D315F56536F6A8756826B7786F35D21E3098DC9CF8BBE54D707
A866B52B55E06213C9491954D1A8509555EDD6F3AFA7710F49EB3706A4BC08DD
6698AB78D7681FECCBB4BABA1BFF3FCB4D8216D136C4B20B96065574316F2EE8
2417F28EF33242AD35C5B3A99045B99EC805E25F46A0C1D1C281BA23D096EE2A
4B193612337A6D180D9FA91E94F858DAD0662FC9CF4D1A5F32B6E6F0DB26D2A2
BEF33383AA86D27BEBA7169F949B08254A985398CF9DE6AF7875967EE3CA79A7
97C3A4F27AA9924D6616FC860CCAA34024F5669DA02ABCD1BE3963D734D64B01
82A6CFCF064906AF5C9ACA3FD626CC47D247CC610668FF164EFBF2FAB76ABC57
935C81CF7CC61260CF2B227DED699ADDE69F0C644DB1B12A15889917716A5491
0E71FB6278604A400502100D8CDBF2947CE3218574CDAB399479F824738B690E
8189691C1EA942403339023DBC4A50793CC443112BECFDD6E018E867FDA253BF
15E1ADBB05F04614DDA701D1CCCA3404EDE621A85F81C42418F86A00F9E86AD2
055F1A4587DBA063C52E8210D6F5B3C5C23A608558756F8622A8FA6643FCD7F5
5E72948D2DC55AFC5016FB2C4CE14861F1909488B3C1295FB381FFE037D9126B
AEBC8B4C6A7EC8556845CF97062549BF859A34ECDE8AF4FDE1550774A9C670A2
833CC6DCE45D2E4898BBD96830A113AE69DA214B1AD5EB1B5B430AF25A20A0B6
36FFEE11D9F45BCA484AAE98AF60C2AEF608A1119AA13FB6FA40C2B7FFA305CB
793241192FD9C1B01AF5CD5388A0802D80FE1FB499545814BC2B3B2ED508A554
7C4B8B182CBE28D8B46C0FFA3AA93A437BD5C68850DC71A816B0D510076BC298
CB824BE6E3FEDA248248457A91624203BC9932A5AB72BC6AE0FCA66760484CFF
4BA51454712FDB8102D968755E73DF40B4E922D522E2CAF63FA0A8D22AF65683
9B0DBBC50EDC121CA1ABABDCA567BB9D28CB3E5AEC098EFA7599D096FC928471
D2FE294C8173E82B508A73108E3E857C6FC2C1E3CB2BB26E7000AC331BA4ABC5
12DD810F40E9426C8DE97C2E08CC0185E1B5040F60956E929033853C3BCD247C
17947407B92E406D62814013DC8B7D07EA8BCF6B09E1993EEFAA3FCCF263FE48
D2F58612E2E0943E125B1209029AE09E251D74FE3748704DEB2E2B9758FD1D18
BC412B0D1B1410EA26EEB7EEE691453DBCEAACC6A77540CF459337A4767D25AE
29D2578676B7D52AFDD05A75ED3B76613CDBBF70DD34936C6953124D7433EEB4
4C724ED69C8697D06A5246DF0D089BBA43C39DF8A664335F67B9DDE36DBA793E
C77E5A7FC825D34DEB46C4AD0D21BFC3A9A11405B0873D4E92793CCD7B29380E
EC1C415FE398C7CEFD524F132A4B84C65FC4E875136FFD709A15AB5222CF808E
EF614A4179397FBCBC43190EE840144F9F053FC85041782B25B9AD3F9717B8AC
5A4A9ACB17B620DDA2C76AA0DAFE9BBDB18C93484CDC022ABE678A7F2E298A7F
AD967A2EA7DC41B8475B6F39E58816C7A84839C069CFBB069C10AF00358CFFC0
C1779D733F531FF661381DC983DE2858E791FBE5A690808349DB8ECBF43DB214
9627D250AC3F036BF1377D071EA58A0D10AFF07F15A799749C255C27EBF31A30
880B57DB8FDF8A6088AFEF5FD1D7F8363E5D0A84FD8B9B57CB16B5DF771D52B1
8ABD206531B6B4968A465C12CF8259422AD260702C4419860A94D0E467A9832E
FAF798C19D635F88DBBC73AD3C77E7D0EC1C2534CB9A2016B605576CD6872771
4EBCDAB1E069FB552B244921DD51E77A5E23628762E804EDDD045FA702F68652
A4BAEF9590CA0A13E15C370563EA2DC1F5DC10EB0DD59EB53FE4B506FA04FC21
0E9E3DD63F00738AFFF0F2903EFF7EDA73C577BC8C1DEDC1B91AE582EFF2AD2B
9B2D6D097A7C9E12525061EDF9DB348304CE2D53493AEFE8B0CA716456CFCDC2
DE5A13ED881088B6B60682F4DD99DD79DED8693042FC09D14C99A69FCCAE3D3B
AA6C3EFEBAACF1427FE2982572E4CDF1C6E5BA5CBBAAF733DF941BF1D0C36592
4B43BF6CE43C9140AA5F8FE895E4093068661D8BF9F0DA75C9221E3F45BC7A8F
8AF3361EE4B989D3A028431C635C595DD6FC8268C8DABAEDDE41FBF8349AADC2
125874360EED1C72A524A9E19BED13D137DFE3F0185CABE18CC0C89440046421
9578846685909845C2A0BE9CB7DF7AC21D9B88457317ED0F6CF9FF5A2907997E
B6B068D2AF9356F39EC3901F4654DA943F55F75330C1BD055F17E7340B4E1A11
0BF7ED2BBBB9AD9B8AB909430843B101906D59FEA0253535C8A6DD2D07F4B95C
A0B01830315A8BE52B960F67D6D533ECA263D30C85CD8FFA9D4D5A11EBF823F0
CB12B9B888942681DFC2715F371A8AC15F1687C92D7BF00C6F8129E347C6489F
D4FC798AD913A7F0EAA156E3EF0EEA375E66905D49892B70588D708BB273A253
C5266654D1AA1FDD19A24674F7A8D5A62B6009C8031D505D69DBB5F5AD46B06C
B8429E2CEF1DE4692B1E2074B7116C3845EEA16B5282A7375B3C445C604C440A
08A67EE8CC94D5596272F4B60F7E43809709F8E6802082807F46295D607FAC37
F0413E0CD5D53DFB5225C201ADA22CA8D733D3A12A1999ED21D5104F79B84AB2
852CAC651AF16CAC17111963E719BC2BFF4C7363937480B58CD2256C232F8973
C6C5710DB3ABF8562E1D016CFFBCD753899CB8F87ED5B96927C3992D0E2576D9
850BC6F08AC6F1709071BF6A734F6CDD2CDBB4F35F7D6497774B221B16503354
4CC77116BA609E37E9038CEFC41BA172055892C47614A9035E7EBE5EB5D606A3
1F7EEDF4F0298C9AE254619CFD825A5092052D289A653949F11C130F37E27A62
B17E62CF33D2262F538E6D307965D35D68353E1FF42EA4870FE04CECD30821AC
842CFEDCAB3CF67B65D8B53A376CBC741F1FF0C7AE99E54D87C8AE7446DC3A74
512FE0F2FF7860EB06541D277748AF1F586142B2524A3820B01735AC4E879A71
78CE33B7FA4F5DB548F3000B0048C5B3845873FFA22DC68DFEBE8614E05A7EDB
61096A55A294ED70EB7ED647AA1A4FB74773690C29BBF86F53AE6F81231B8FEF
F1E98FDA2E6166780E3BA3852310C3C27F57214A1F2B18C45788D6B00A8B99E7
33AA64B039CFA5FDDC4AEA160F30F006E1BB2E9F3E4AAA7AA9EB7F75295E1CF5
1BAD0124C1C996F03578FF6E93F270C13863CED436BEB2A4BE3681818F820B00
324D5E6F6D00C1B164F14183C30E5343D2CE65C1B010A5F5C34F34EFB93169F6
EB3AD5A1FE45117A0C41ACBC43774A411032EB9A0A08480B94D57A95A639C79D
717D1A62CA14E018F71DEAFA448258460E39549BC1781B89BDB53A9752A6C92B
470D7D7F201AD2A486937EC5E0331D522494F1279A026FF6E7FEB0C0477DA65B
79AEACAF019F736B0BE357285D5D945DD0197A2B910BC0793E55132B9C12CB0A
CEA07FE1A99D03F851BF811AAE848B8F7F77D5075DEB91445B6011D4FE891B91
8DC0343A01080548802256F88608947AEAD6D9670DD996AA9FE4D4268A3FDBF8
F1A8EEEC68C6101A90C235679195FB197996371F4CF2448E3FA080F2F719812D
43D7807770C927143018447A70FD16A84D97A7DB4E6BB61E56591223190F13A7
72ABD2F45F92A17CCED52E42690F9808BF40C0FF302E4E863FE130F28AE4F7AA
E4A9D1779A747EBA5F945E05D1A6D9171AE48F32140F3893EFF849FE4E17A69F
02E7B4C69CAAE6531350186F97AEE58D9DFC7713870D1BE59FAD51FE8B1EEC91
9B75ED0EBBCCB03EF5F13BB2C4F0EF5A35DCB97AB21AC9F5DD453B1D3838591B
D4A0179BDDE6524A75ACAF60A9A45DBE10073E3505C3EBA20AC324DEB56675D6
B64DFD240A527264178991EBBB9338766F05519D98CD6647F5024D51CD78D79C
802EEABBCA93CBF9681B8231B2405D8C11BEACC5DCE371CE0F825A65B22E682F
7855684CB30A51FE61DE94D66C33CF7BFC8FCB5C2015EFB5070DD0E20298066B
78B7794DD450A9BC2708F01EEC4DDA2C386289EBD7CCB6319582D7B0F7571F47
A6673541937AEBF236B4D6F4854E03909A403F6731BA048411129DB0C939EB45
253B4022AB3359D2EBB743BEA31863EB72774923AC44C82D135453BD56678689
754F0DF6EB63AC7302F6B526482E4C9257CDC556314D5C972D31EEF4DEAA05EB
DFD7F0B5FFA9569F0CF2DE5F44EE9D993A463894775B2DF1F871924CE2C0479E
A8C8C337504B6B21D153A515079CC4F3EC104592D3D38E10A40C93C9958B2CEF
0A5232202C7F74C30A4646D8726DD73FFCC1EDFBACF5A0B609037E464AB80316
A44B5D596C6FD3CD220DB76EBD1D860A54D8E656ECEA88768396EFEC282EF301
A6AB5BEEBB25F619D67246632A04A14A7EA94BEED293412E4EB6B7D7B2A078E2
6A1657650D50CB35C74C886228984F609F872CF41ECABC321E0A4F6F62668E63
9DCAAADA19797B2A3AAC758995A7355F79D0696406794EA1CE9488C855936EF1
55DC90A020CEA122A36D71C5F5DD0F4BACFE7CDA4FFE64DCF7591F16BFC51EA0
DB9C210F2281CB50410BDBEDF24EAC2B1E0F17A856F22CFADFC5067FA0E5D929
236579DAD5A6BC105B8E6211C3F31F7E43EB1546BA7FE32409951CADA934F889
6AA603778ADE21E727EFDB1CA6A63F460F5B31AACF1C19C21C3956EF741C41A0
BDB45D751F6641FDAD6065A36614A684728E804DAA2B51B443839D49DE5CE537
DF8352F461141C01613F3886845CCAA039D56200AA2DFFAB67E3CF8D9F42606F
7BF8F2C0F92CCA49C489AC56BB4FAEB441E712F66A152CF9F800899D54676A2D
0D85AB1C7334C656E3BEF70A06E3344AB0A708FCEBC57DE835AB5980A3D5C5D2
A827FD059DF62DC7F89405E165A3FBE9874215BB7E335C72B31AB0E0721BF6B1
4C2F3295817E73A2402436CD148649BC421B7C750374E9AD06754F99F206791A
CD83E54B4F73CF066C2B9C5DF63FDC0ABB95E0C51F56A593B4BD17DA633529C8
7CB33A7E80B9947416A78AE939B689CA3267B2BE5B8178E6B7889A33771F8627
6E68AD2E41AD688458346234C0ADE6580CD710315C8C992EC4EA2F014B1E08F8
2E2D70948CACB1B4D21F131F43A783E91F21A754E413C55D5713C9D3ED528247
757063E630D6045F576D9C446DD56ECEEA07228F0B0DD14607161FE4F1526DCF
6D389B34C824538EC663458C94BCA7DD1C3C56853E002ABC509706C00E045DC5
52B2E5EA058AA13B033545AFBF576377A48059E6DECA5D00BA874DF1C0A8D1D9
28B222871F54B0B774CB1F93F83A7F1C70DB5ACE0CBCC50DBBB4EC8284631410
D4156C420D073AEF009C3F8AF10CCEE6956ECF413DC3A85CAB5CBB66B4656077
CBD73D1561064DA0D11E8B2EB840E1818F6F1CA6D4123AF4A23A6E5306072985
B6B7FFD152AF9EB2A58DBC7F4E90371976C5FAE1625D62879E4B5A7F10378A9C
AC2491C3E9A1771E30988479F2DCCC53E722341BD44BD713BB383C1215584389
5629B71900A3ACA96791E39E6A10B485F6884A7B560FAB7F0EB5F6FA72DABD6F
0BE5297DCB069F4A7B911B96C587E65FD0058E0576018C728D613DF1DC35098D
EA7E69B397DE95D81DF8AB287F2D64CD173126E3FDCF7D711DAC380E4F048050
E3FB3B7BB2E3ADB9A3915C53AD8A5BE8C2B56F53C1931C7FC6A9319A055F5676
9DE68B5A430916F45E36D0FBB705DB00488BAEC7EDE0CBCF1AC4B2432B5FC671
FC5A672F5C8FD02CD8175CAF404032DF21CBA457DB65770C16EA31CE31F9CC43
89F36295AF9A767AA3A9EB2E5C2790F8B1187C9BE2B4714126024DD013CCE6E2
B4DDF83466480BBAFA40730E278828CBF869D7E5E8AC6296D5821F1DFC98C4CB
8B995EEB19420CEE8E6B3A012AF00EF8A7E879A4BB01C27DFED27E3DADCEA182
D1C573C3883AF97D367A60AA9744BB874493329A8428574898A4431060C062A8
C25B332B02A1EC7167A159265490F34509A694696164222B160A6ACBF9C2DE66
992CF4DAB3368A64C98FAB5E483644BF7C85D411526108BE7B72351E48E30F6E
DA6F6AF28010B75004203E9C274FC1F0F59D7A86D619FE0173EC94BF04179249
4691B655CB9C88996A27E4435BD947A768ECC0CC7A3DAAA2650AFF078F3F5D67
D9ACBABFB0C03754CA811C2667B98729EFB280A85DED082F6CB035DA367C3FCF
5311083B89C86D81AF27BDCBDABC57569B2F2A420EC9F149FD6A55F1A51A895E
285885972115BE3CE57645355991B4511E39D8B71F1B8622A7A5D19C85A15795
DCE6245908215940818C0E1B3883394BA9D92D60D33271BB572126735E72BE44
078D1F71342A97640D82FF2DB3BB3A4EA8DE8EB3C6469D98A8D4937DF8B47194
81BFEB0FE849E292D6FA3E7B6584779D8BB07972C4268948DD3AE550B3D8CBD6
A090B9572E2881A8D9E4BB35CE2ED27DA4A0F8B83154BBFE9F13E4F119193F64
6E28BA7622E2E44E7C653774029E709393A4F8DDC88432FC775BEE16B10B7FB0
291B68BBC5DD2C7A5ACB4113C9AA0839F444CFE8AC2F2FF46DB2B95247BD8261
F39E31ACD1D8F443AAE0A3F0C050249A333A1F83E14DFB02F66C33F17030AAA7
B0A2CEB87A0360124FD1504C60DB8948A5C1C441D0C9D794B9902C9C1A8E85F5
75BC1E7907C57A28A440118DB7613A4CC0BEF80943F7692E2DB667DA7E075077
0213BF6188DC183302136FF6CC18ED1B0B8BA643AA958B11ED879178611E0E2F
AAFDF0A13E3FFD5C3925F9B88CDE5FA2B78E5652CA2B448242D63618E2D25068
DD374600A6ACF8B4FE9ED5B391A5D2DF077C55F3CB3BBC4F26EE89E4F31CCC08
72C502A1C8B0CDD349098F1106F98799495DBB3A05C04BD649053FD293869C55
F345F4642D12EA28AFB297DE661883CC13A06C3399BA82A98F151CA288979D90
7126C6A6BCDF7DD623DA490EBB2D09F2A0667A4E0B5D6BC5439622D0710C5606
69674F5FAFA68FDD22AD422869E28828137C706B0CC676490B725F50C0CC1C0B
40C04D1680D51033154CDEFCBB4752F3D8F9274D85C1B59A2A11E07EFD6044AE
D524B96BCC9F0661D553F814511378EBB3037BB0667F038447900CF0F71F72FF
52A8A4C819D119551A8B29CCFE994002D3673A778B833326CE8172363B1B4AEF
DFEF2308AB26931A723A236AEDFF5676ACDE6EE71DC9EEC1130741A68CC9E05D
7B24FADC2B172D329D0064066026BA374F067AEBA832EB995E27D36EEE7386A7
86E482EC5AD877C3ED6A86AAD4BA6096F6E76B47FB3B37634F7C143B29D61433
ACD2308168F1841D0C155198B329FB463D88B53932D7A24C782DDC093059E1F1
9DC7286BDE84468DE3D7B5691166D59F99616224E706E080926688173C83B958
8056D49CE921742A12D11F083A6DF8ED299BAB6929D9EE2AA44362A10F1795E0
780C412A606D33C0739D6C391159C5FAB5960A2E3E913CC7EF0A07843E37CFC7
62CE25DCB7C07A9FD4973CA9936C7CEBD55EB56E4256A94E79E8F147BDDB1DC6
07885E12FBFA7343990A15C20E561C7D72EFF375CC4D0754FBD4107B9A801E9D
4CC88CD0A464B57E4332F3DC5D5E4706C542AAAF276BD5E7F7BEEB9914CE4255
8ABC90B623AFF1FA2CB3EE64202DD46F253C83B32563E2C59FAE2822A98F20DE
1C232DE16A8974475F36FA1D9905A3E169A1A02B17E1E5A321FEB915FFD2192C
A8295936A18B42F96BE5854A7003C281F88FFC4DD9E2B7C8DF1C241030B68FBD
BA63C29C3A63E888B26E8171A2820119CC673B84AC595B4E3A2CB97107F9ED79
EEDD6FD3B6613D855D5E17D6020D27DC30DCEA9798BC49D9D9D49B9CB9429CA1
97321B54562509398CE92E437F4DB5105AB65C49426870C7FBAA8C2D1D513754
ECF44B9D06542B9F9833A1E36C15301FFDBAAECC111FA5EE013E80D4E092D8B1
92E25D2306A9907DF8E730AA237099C3DC5F258FE3C18EE0A1752532AF8D8908
3F4DD9562632E6B227DE1DA43F4B0D160100C2DB33BC4FB06C0E793DADEE3017
92A7EF4CE1047C153C87C51B704E3700C49E10091FAE714F63A24AA98A5781F2
DA400DB05B36FDAE4FC31181D59149ABEFB70C66BC2594815767B0665764B326
446A071B6F2F362D222A5CEB4FEF889EC88042C30A58B2473A333E603F36F68A
EFEF88DFA8F545B8CC39EADC00F42AAD7BDCE1D80995284AE927962D3CDE05D1
F89C5B497B45B3EA9A479B91525E753E3061256FCBDC8CABB9120CB6FE9C2A2F
5E9385BA8C8E4A8406B993088E210C91279AAD5922A3546551F93A058FD1CC04
1AE13DDC40D378D93B056E4D96B1E598D94C5DB1549CD557CF4DE95399C560D6
5DD1CD2ECB3FC35CD574419CC980B4DDF530330D2690839DC0AAE1F2A93E2E19
F5DCA53EA0A57F3C9E271DABFEEAE10AC5CFD56BC98BAC508CB4BDC8DB58FF54
C825E7A07327ECDB2E83DF3355DDB6250BADA65F839BB6CBAC21C9507357B0C5
D87B31D622120D6EA45038626FBA51B8409CA6FA9B28B735ED6E7DB302E9AC30
AE90D2AE24504F2E921D2551CDE2853071B8B14A6550AA382A75AD0CF739EF1B
49B03532FB47262C6D41E1A93375E0C9D3121B1EC95AEA26CFA55E9A4E9A5B2B
808890A43D9E7F59104AADCF797D13964FB174E3C63454AFB214A8944B2299D7
5F55E04BB7221B2D2658C06D45E63C9A5EA8EF66FCF240291EEA1EC6E334E0ED
C575DEEA0C73666D12F2D112B93EF7ECA3D1993A2B670C19B19D222051E7E89D
6F7CBAAFCFEA55E5D0A7AA9FB8E01FFE7121DC203A89648C906439A411D09BA6
DBBC7DEE251F5A950D0F62F276A9161DC1D4941C302791AA7F9267FFEE49CE70
902BC81395F39D911FC35330D3134DE8F40C716B11D0A6E396D355576B9463FC
161D0B6036E7F654E1FC0D9A9A3FBA49EAA38A1708D3689449C6D974A97D5AEA
4652625C005977FC252564C8B478AF69608C3DFDF5EC927C6E79972AD10D4E80
5C40B5D779A887A15B8604A3224BC443B7B1339E01FDC5E42D99CDD9306DEA21
534DE1FCA4F6C6BE4FDBCB6D1B1935DCD24D67DED3C5ADF52EEDE57EF3EAC944
D97EFEF2C9E2E43707530FF446F58B37C73CF2857A7ABB3C86ECDAD8A1324574
CAD1FD05A37844799928B4DA778EF4D4BA03548CECD9D12CA669D16A0C25A85C
F598BED7EBD29FCBBD8F6DA5C9DCF1E682A24EE12B834A6D01E0B31E568C3403
D78F8ACC16D72E155435171FF7A740FAF0E38DB7DF1DA1BB41D984B457154D1D
F0103E0A79E52A1898684401E25CC37C0FF9DB9C5064E2E468F590617041BCDA
B4F38A44C189BFBB5CBA860F9CC900EBA7E2E51251D0A365FAFC66389761F543
6DA107749746B51D550513626E0C22A301504A6C3B746E7F9A862C9343872F7D
BCB88B7D3C2AF94919F4B9EA6669666A2E0C195AF1FDCC1347B4D4AD31E7B1B9
3CB1A2DB181104E45B650F2BCA82B8CC60A0156706987C7D0DB913F1BBF8A7B8
FF80B01387078AB900626C7488A61231C7BE4C83A079FEDB80E93F82F7477A18
0FF3D6F876D5E3064BB81E690649EF8D1E13F8168F3DFF482F375F80F39AD1A9
760230747A6D7869F727AFA50DBD59B35B8BF199555798D5A831727B24EC11AF
D13D92CD744E53A729387C6E48EFC3641A1DC59A816C933FF5319AB34D1D2920
9A16487327DC3CAC470BC33A673DDC4423BD1B23F0E139BA03B56B4F220560CE
72BB55B8C0077237DC6BC48AB4BF001752E0793D5F65D8D54F9887042B709094
FE31586B454CCFDE1CB0F17F31B2701321F8D5535DC344DBD4BD58CD7D2FE44C
8E7DA87C2F677A6BCC37466E50D17FD2084FEA4387B1F76ACBF8C8B97DF061CB
5A7606AE4A6A86F7EECC222CA705C035DC49777BDCB812D84B5F9009000B752C
FA7E50A7F96791014712D201625E702EC701B68DB40148C9FE39D955FE41A893
49C725D6087973C557588532474D9E9B852BFF97CA0E3D67F352E8F9DFC8C909
3A07D46B3102148B03F0B16A49E10335AC90368B31AB3110CB4EB8D00DF6246B
A012F36F4F85A0222594D963206BE3F0DDA325D4D34B30CA26826FF5722801C4
4B73F726014E5F80CEC413FF211D31B73A3506F5C42C194788D20A71C7AB8A5E
0EF0CFB34CBB7A5C6B40C54DAC21C52A4D4991997862933CBC8591121667AA1F
04A4C533EE8B901CFD0AF403EEBA2C52871812F5DD26AA443B6B73E80D855F5E
BFF6A5BCEC48448BF4641B74BF8864CC28D7AAD8EA3FBBBB407E0ACC58419064
4EEDD4DD9074727F4FBD3C035BAEBD18239DA0C74B200C2A29C34AE6255BC79B
73AE14B980A7C35761B1786C4EE8337CC2563BFAB7A1C79DBE2F3BF63F068754
40F1A672DA6A04C28C460DA2A483E9826D8813326ECD34A188B0A634F3FF7824
578B03CD8EACE4E3DED172A63B965D6F9B998BDC34BC133952CA2B44A89F85D2
28EB0E9D2316DBF500217E18D4B2EBDD92068E8F51449ACE52C22175D508C60C
F8884E969FD66437FC462FCC201BE0F70AC43BB1D4751FD760C3A4195AD85146
E60C1A5DFE65AA2AFB5669696BA89FDC697F4714DD79C2409F77EA29BEDBDE0D
AE65E46E4AEA15BC16B9AF420812DE85BE0DDFE97636BC6CDF6AA45409DCC490
789170A2624C51339D1C6386B376FAE99E75FD5CA67707F4A39624F83658C39C
3DBEA4E2570779F50E7BF593502799DB7595E69C5A574C9BE0236C29CB832B10
1E098E86D766B266B19AAED827EDCAFE36C902D96C187FAF34BFA6434806BE1E
BCDAF6D4A26A62D71FAF1F34FCDAFD71F1D3B4E8E77778D0AC05594DDE0DAEEB
4C41EA7F65D44137C84E6385F74AF3DF4FB28C3864D72D8D7B94A64E89B6161C
E07638F5717D3DC8C84889EA000657D8244CF19E381A976BE6413D0E5D7D7D18
C4D60EDDC44F38CF67F1C4C11429C607BB5719C3C8BF4DF11587B446754714B5
CAC01906655133EDB151A97A8E2BF3399C81C4FFA474BB9BE7316720D6B0DCCA
1D3BB05F686632D02267CAE72563F58C4581BA97D682F833236949ABA7ACE1D2
78FE92D775C73CC68BBEF2649F3334109106DFBDFB96318995B388E9017F1CA6
FD60DDE8F3875690471C84B9C523234F21572B4DF407490D64A45B1E00B31CFC
BF9A2B9DCF133FE9A9E139ADF3B5BAB3EC8706F1B95A2E82795863FE3E5C51F5
B313935FE06915EC13744D2C3EA40578312D4AE9F368DBA3C023AE65D9F47930
02F9755905EACE357DA7BA92D34C5F66636A92A44E75CA20DA9DA4F0FA49B85F
1E2B61D2B53DD712E81AAE28
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE5020D74C7714FF08F5AE00F69DBED351708B1C760171CE5
5D0FE3BC5F6769FB19C7951CD5DCA774B841330A2C8CF59CF458230A1642F956
21D23843C4332F05F5AF14E70EF052F02F7E3F51D6E7D68A4FED8D2C4A733AA3
8973CF4CDF768C31E35C395C3BF67A79F8B1AC292F38AB2EF22A87A8ADBE2C55
747D7AF3101C5F1A2A1BF6C0E245AC583FE784CD69B918457FC63ACB5FA24E41
CAE39AA9386736476F5C0BD3D01ACFCABB35BD346B884B97EB5F467C93A2FC7F
82A0B3682C1D7B0CAE0165D6FE43CBD8FA5C85EDCD122FAC36F59FDA7CC4EFE6
1F9F8E88832737186037F9E5AB161B8A2090F5569529861FAEFDC91E823E0A0E
A92E7F1118BCF413BD355CD844D0F88C47B267EAFA1585B4ABAAAB9BF885D233
DE4656E4CCC1AC1A5762BE48F5FA88A0020AF17A438014B5902A55EE220152C9
0348CF590A07761415D2F53A866C95D4A6848E2BB7970D176670F90765843635
9C2461BEA57F9CC512BDC51EF25496B2C2253AE85AB38889B26761BA509C7F63
8C6CBC4BBDEA74FD3B43A178C86F9A97423815F5FA2C09BA590B8371D5B7758A
43F98F4DC4792308CDFE2779CA6F20ACEF23FD8FC11F483C0CDAFE837D984A76
1286C4DC5088F5DC4B8D59F781ED48736CDB2D0B9B51340F6218CDD622544552
9BAB6B88481D111091C2CAE5E19903BE5F2C90E79E2469EFE314329B4653D49A
0C4443075770A9194DB7D3777D4901301AF6DCED2A2582A84CCDE87EC3D05D90
115BC39699CB7519F3F5F0804F97F09DBC446660D41870421604A0C358B2A020
18ED03A898F2EF954BD52CFFBA974BF4F328367BFFB792B5D9C892E36023DBC6
1AAC4B0C4575435F2D1F805151CD6B4F4DBF909B2858AD23DC09FD78F9F30C3F
CE412F9950B76D767FC78C7D03EDB704B1E2EDC615A72DD6C19F2B72D5554592
5A4A6F9A16630E5ECCC72C7611BEADC8F9D55E27BCA1589504504D344C2BB8A3
9587D78FD74CFFED06693843EBBD6285170CEE126C419497BE0413A52DEC1EBC
40E971791A3AA8A06DB3562548B1D7C2589571F6321D98FFCCDDFED51B3B1175
B78DC2A289AB53F249112CD8901A4DC34BF037073432CDE6AF38A2A69F5C24A5
959405EB206B78132A77998D4A8AA65908C33B6D0368CB211F1CE6E2DEE28705
27DDCBDF2A3062F218582CA5646CBE41B6913DC01212BFC8E6FDE7E2E73F3B55
E35CCB789C0EE1E8BC74B41B2A6D58FC705F1D14A245BE7AC383CB9C37CCB0C6
F7AB24C20C3B04155EE84BD43967389EFB5EEF8DB22B7E0E40C93A76E4D3C223
8E0D3B5959EF46D51566CC0C9F2C6AACE8D042D8C4C1C462D480A4354C602371
4BECEC77762E62740C622C2868DD66F6C490A9ED8F7E92FF91B899BAE32D5419
0BCBBBF57E735B4720138CFA91AF0BBC4ED6A9EFAFD440B2D7E5430145B01138
D229D719F83712E12C406154514DE4965D22B434C35F5D7631BA0DAF2844BE09
3CE45C99F1B938D2126B47AE0C3A1F732148B5BF0297D034
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic12-Regular
%!PS-AdobeFont-1.0: LMMathItalic12-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 833 233 0
%%EndComments
FontDirectory/LMMathItalic12-Regular known{/LMMathItalic12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic12-Regular)readonly def
/FamilyName(LMMathItalic12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMMathItalic12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-31 -250 1026 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD11234369CB38BBC21C40020C4E57C
950DC4A5CD271B5530E91DBA55EA1A3BF584D9405556EF9C802B109FF1EB2B0F
C350D7F091E7B613B08574EDA3BF27099BC2EF0E503A4C4724614A73AA054756
A503BEB31E3FCD96F733D0C5815847DFBB66DE4968A9B389FC00C2146C4FF68E
076BA8B3847A3D8237D36A6BBDF0096290F1BCD02CC66B12E0070215D5D8306F
406DF7590940DE35CA0854D3609249AEA4EE9D3D377A7996C1CC2E940132A90C
F633C774985DCAE8E9353607B9059DD211265A0A346B1A062D80C64B5802A750
D9FEFA3C9920A3DE942C65BD08060AF33C91CFF62930F65F9A42F70B83B0E077
E169BF7F5D84F15D59F8A74BC2EE4A7F3ADE36F38C3A661F4CC9826BF73D7F02
D3CCC267927CAE22B5ED695D212FC3B669F9BE369B7A8D325C3FB9D552F175EC
29972562517E91E7B8D570612CC50B1A5CB6B94D030B0C60465EA21631F7A30B
44A47143D0C2F942B5D76384B8C3F2F197BB3646CBED3DEECB6513D3AD460F49
4BB874969A3663617EB537E75C1C1BF92749F9D147080EFF78ED285C315BAFA7
D78B7B4B8B7CFD1639EA303ACE986EDEEBA9350F92529C47EA7689779BD50CDB
D1B3A68B383B54B51F4FD77D6458F15AFDAB471DEA9909CAB29840091391F2EB
148588D02607411F2E802B9CDDFFEF1C1FFCC9EED0405371651ACF30808E8C57
682B734916EE806703B2ABA2F6910E0C75BCE10A94FDD1ED3E4FDA7857341427
CA0A4F7D30151BEB8E3D351E1E100A8A75959D11122C83A5C0C4C87214413B25
A6BFE44A42D446E9C4AE60ECD7A2C2A3D6E67CD11FF1A6A7EC287BBD3CBD188F
380ED6A3510D5B77129BE46FD56832D316727EA0F825CFD86FADABA26B5433D3
CCFD0B03DC83F15287234F09C3FC9BB30533EE75223739B24444094B0BCFE497
2844FBA682856FA896064B802D074CE420590DF2D981849F5805ADCBADBC2933
C1D0DAC1035A5A6B41BE612088E67E1DAFDBFC032CCBB03D0964DF8D25F7BDCD
E786941CF1293E86EE719C9BAB6263470C7009C3933BD677D7394877C88A417A
449A88485A0EF2349E60A381E3C7686A50DD234EE73CD469E24B979DB7A9EA08
64F54833BEB33867942B175B089E488167D367AEF9D1AF88BF14CB44C210BF44
141C72291EBB15648783251B44EE1C72727E7C4CED16E588E312BF15D39E3B03
5FC6A31FFDA12E1AF5FE9BA08CA7D9C2DA3DCA24B738CB9B68B3BEF23C4FBDA1
FAB83787997A30F0AF714A6EAB055E1A10705AE534E1FA147835FE0BCFC55CE0
5D377D3EC454B9E8E4E4B7897387234F730A1D2E0EC08BC400F4CC30DF20F770
307817C09D60F57096E4ADBB28E969382B124072BC0D21A599EF056F964BA478
FF15C5C24ED9F31705A3AEB52BDC6806DBDE302B9AAD9FE982B9D3DE386FBD80
3AF0FEB814FB8DF1C9D185D98AC064D05908317079160F9D04C709FA4BF53C29
7A795976B7A9F9A550835455F4F39629920D1A4ADD82A7C3334AAFCEDAC985C6
81634D78E2F880D2D9FFFECB4C8B0AD03A06F3D80851323014A769719F75B427
D1C676FB0D0F29D243A5B453EF86A337BD182780389CA0188B02EFD8D26DFF15
751C77BD07F61749F324A403989A44B25BCE52DD0B822821CC6141F7640B0969
9C459994EAD3AED27088ABBF5E8EB7B4A549C12EB0F87A8E86AEF9CC2306051B
BDA9CD42EA29B28437C14DB800408A7D1991DEBD4EE080519EA0C7C71608C3E3
20AE7AAFD876E1D5EB115E9BC3DF820CDCF22FB0CDC77CBD883A6DB37316889A
602D35C397863E12587CD8B08E0C708B74A3582481E5A3C91C70164AEF02AA90
60BE6DC09910AD3B6FF6FE0480B80B0EAB9548F7A2F6FCE42E203F23D982AD6A
71C0A89B5A8CDC8A71F6B3200D926FECD4C38D173B74F3B3600F45A65BEADFC8
D88FDB3D9C6AF48D70FB98C3ED8321284C17986377B0BF22B95AB6BC98F28C83
17E75EEC58ECACD916B8CE6FC871733F1FD9F5ACB1B1D4895CE82822B6BA5400
8B03251A896297E988DE0454A63BA7EA268BCEB91EDDBB21F9310A74C973DC00
9B5924B509420550E52EEF24F8A52BA8B41F2C1ECAEBD4A2D72D0B21CDABCDA1
F089E5448E5B26813CB6B60DC06FC208DB58C1052E3831BABE2D85CE46243354
1FF723956D35AC1003BA9B1539B62FEF7832E8ED67F695622D9B6BBD816D30D6
0CD7DD648C18DB1491260A3CA243B16BDB5E1682A93BC46321ECF18ED3B7A9FB
305D5077D771A803784F91ABFED1D4CE3F01E4F463184ED728556B4481C7F7CA
B99D74CA029382B88F6C010661951C28877ABE2482D7A8420FB8FECDC53FC8EE
86EDEE0C44EA931F795D1A75E44671399A790B719BE533041B9AF1B24077F60E
8A6B169FEB6A6202AB4F0752603A70A3236F3595A8AF05885BB37B8CAA5B2880
36F17E5B0B0BC458CAD0303E75794AFA875749F01608867990BFDA711E73F6CF
45F3AE3481F2942F8F7E94C6F7F46D31D67BB26DCD8972E9D6D2B858D9DDC7E8
8CCDBFA21F0D7A2AE8267B8538743891BCD0E11539FF0F59E43D1A719741B0F3
44F69177D8AAFB7DD54BF6A98D7D27DA6ABCCEDD6F01ECD6F24A04FF5C9F3D84
F178BD958D3986BF189636B06B1EF9C460D8BBD060A66551D1FAFDA447DDB6E1
CCA93007F744EFB420B89211321E5BEAE3ED943E08099F2BCBBCF8FD2027C242
4B9786F0A8AD5C7C6F0DFD49060B3384A0BF8DF9401DA185BC0F659C4C93C4A1
DC615F8D9DF540C06F36CB3B3C9347EA6D46E26E75502048AF931F78B1B20448
DE507BF9373D1B906005C30F351CD943D553B11A2E7342FB8A47D04C5D1CB399
8DE98F0B12123649524CD3F8924BB397C5C2EE0239DC80DB0126ACBD026EFB12
3A8DC53C16D34888A41F34EBE82FEB66169C9058FD11FB40D881316DEB666C6A
E6F4EA2A079FC11A5443A1BE064170E8B07504EB9B144B67C6887DF591C16061
63401A665FE3A71B84B8FD441C39680678C54BBF3D977B8FD2C7805C00CDAFBD
7E01E4856593A4186B75CF40619D7BFE13ADFFDE4CC2DD7190942AF9F7A4349D
DC1B54143E053CBF17A7738482102329B469897C5D9F1637C31B755E1B6466C2
1430B960245A369C55BA0229CF280487F8E6208ED580A274C7DAD8D0ED0855BE
208E29DCC1164D243E94DB3DC28CE68F481AEFBBC794053862ACB98378C6C5DC
49F30BACB5817CB377012E88E884A7293637031FCA5CF2C0CF03EA9F2C66500D
D969A30E90FD4559373E7133A31E6840192A69B9AFDC9D5102FC75B70A202E89
7CC80F7737095F7697B35B3807C3899E952E75ECF448235F31A7DAFA537A61EE
8526426BE404838D7708DF2A37B66D79F3C46CFF454543988A6408A56FBBAB73
7A0652692F56458BD7022554903002EFCF0BAC9C1182734C42340133BFED6B5E
234375DB4663B9B6AE9E7726353FA6DD750935393D706382B0157D9FA32ED7A3
60A4696977F9D7FFC8A676E84D768BC97B46311BA46420A6797C1A0255723F8C
76A39DD9F14D88AC865A6654CF96C170284D4A300899E825F0832AFFC0C29684
19D2D3F67D7D85F7B10267E391A5558F6D348C55313E96DC4926D2B25A934B57
23E457ACBEFF6BF8A058D6D76AB4052A59FE8A2ABBAC34E9FA29E655A8A6CB40
7807C5AD42CF818869E6580620B45856CCCBF0C439E7C0F0EB9BD5BA4661CB83
2D41031CC5AFFF10D6714D89546D30F7FDA099ECD6133855BA67F9C161CBAB74
E45FEFD3AF7AB7DD6827A0FA025BADE98BA2EECA990FFA63F571BB2BA219E2C9
DBE62F0239B1E4518EDDA19912590B6EEA0E1A19CDBFB1CA3E6CA5EF6BDBE974
C587D6853953F261DEFA42959C25C7236D297B3D92E6ACD4E3E315B1880A9A37
8254CD776BF92B99257C002687E3E09DE3079E10D387ACE3E035894BFBABC2A9
8053A94FFF72B4694823F27E5F7AB1184356D8B9ADE4C88502F17556C853F42F
6AB4E71057BA08CA3DB671E19A4A145DA84645E93E36857E5696D695223DA966
0DED9152896D5680AF3D93E14E45544E3436BE464585D12BC84BE15BB4700156
802DA79E79D83C7C4CFECD9CB305D5EB8B101AF79BF6D3AB876A7966C880D68E
4122569A36B044245748F302D4AF641B3C0A8430B08B37F2A1CFAE23A1F9A007
D72BA80B158B4194593C60E8ADAF135D63DB17CC1847B663915597752BDB41AC
F613243CED45810BEA910CB022CCFAFF750B97C0B8F4BD19B145825A9FF878CE
4CEB7A35B62BC4E8D2B126600411ED
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4A2DE9AEA203B209385B88D9E708FA615ADAD672C6
BE223D5855C0F6753649EFC00A7683A9EBCDDF1610B2D942987DAF090BF54FD4
E7304082BF34EBA0169EC3F6190879D5D8DE05CB5C6CE7C2212251BFE8824A87
3A277D0CE8C588611AF4987F7203DDCE93170428CB54EFDA16BCA73256C1FF85
2C85996873C9487906AB70DAF5E4FF2EBB5C7489358365EE072EB45FE7328E73
5D241828F39C98E813E0B142027DA0842BB3BB3A4EA8DE8EB34BB81AE7BA9B29
193A289A9EA7EC158512A268417204F047097E042BB52BDA0AA3ED16B4315244
E3BB451A99B211EEA2F1CD0A5709AC8CFC3EBA9A0C45B48925B43CD4417517CF
6F42243C234413756CA68A0F125A0E7C1CA1F6166685C3FDC27532C931AC8B86
E81FB0223686025707E5A69C6BF3D0C6660E636D6AD25B03A44355855B2712D6
F84E63A541739B3F161891F0FEF72180DA1546675AE16824DD84B6CA375598B6
C439A2E90E30B7AF6043F860D5D548B166C25921D8DDAD3398299D23D94203ED
FEB2A8899B078698314F08981397316AEEDFAF486F58FEF25284B5B5618A6762
967822C2B91D421D3C8CF5D76D071D3748C32BF1C779E9131603E8C0EDE2D696
E60DFEE5F15D5EA092DCC4D49B16373FD58807C44B06016EF5E2670A911AE147
CC5A9756F870A1716B4DC3D868BDE539079576E5CDFFAC34E165C063768ED394
770CF07675657587CB8A56596847362B00E9728B7CF7F5E85673E4B8C4F424D5
94F93A6861828F6251F206B9131C951D1ED4364A9CCE5383C0DD92E3E329CFC4
E2B36E704F5A2E99A7CBCE624FD99EBD4EE699630BC16854CFB80EDEF8A6A652
03EA75BF1416D23DA37B18363AB001813EFF029266FD7220DF1315C0E76AD8D0
3FF4CAB5E5114042B951CB9E36B323D53B28643AA12877E269C4D95E1ABCE508
4B1C0EE6096E008A5C34BEA647B937325FBA2FAFA9F834FC7F5DDF178584A24A
214283F53AA2D015BF620BA5C87D84E4607F3A29AD8DB076BD9AE6E949DB069E
5A8CC9484A18CBF278813319FAAF6C66177F200389C2015EE81663AA56EABEF7
C4CDE32059DC33368DFCD76D138D0BE636CDDE883E1CB4ADF94B4DFFE102DB0A
43842EACD9168B620439F55FCA7313B67CE7FA22F861B2BE1B1041C5C68C45B7
1A717B81834A23F54E80647B84B6EAB895BA6138753EF23A95D41A8069B91B9B
0B327E651C06AAC2897A2E839E3A2225EE93EE41B03F3907EC73E5B4F9B71156
B357F62608909B7E4D0D6E6DA17D2763E1E130164942DA5F704DE35D983D12A3
6140B8DA142FD05AA44E8034AB75C30DEC81BDC725D2CC7FA26EF0C059090FB9
3A5747EDA57889E0E402EF14AE8BD323700B083E6FB9B54FF40B63FFEF520AE1
5B9882BDC14A6567C19ABE55F8186365B30C9002FC88AC0C591F66241ECA8269
A34B5441CC0CF92EF7F66E79D3B2B7687683D34954230DC6E93A7772A7BC9056
B27636A3AB7844D6308C174441730ED96BE3E09FE4561AC4F28A2C7BEDD716B3
3B820BA74356DD9FC8C589974C55513AE70589392CB5599C789178CD1C1C86B8
FD8EF3FC186A8EA4C9BE51D592FCDED41C3662B6A487F14B9D9A5B20898C25C3
4DD931F1B09E72D4167DB96B594B7F8296FCE3845ED8FAF19EF067F6572E2787
8BAEE83AB15A7D8416623122579EBFEFB21DEEE302647D68DF3B50F5CAEA8BD4
F3E91ECEF9412CD96BC9190FF4B231AA728E36BE2546E81C23F4584FBF0D451C
ACC5142CD5AAC12ECEA34351F85390338ECC499C043E346A4DBA66B7EDE932FF
D84DCEAD5F98337B73527537B8FA58F86F01329F1C4BDC2FBE36276FCC5A538C
B4A58590A3D15A7909F012E909D4F3C596C6F28C2EE0009E717CFEFBBFEF27CF
58AB01C17F7F53615F79D689B6B02532EBE773369461C682C841008292750A37
6D0398DA95DF8AA168A0A9EC40CD9E45022A81934CE5B9973ADF81D7EC966369
AFD3D36EDE20B10EE93517665826A01E9F0C9B401CC50F9B0A3DF60AF84E3C2F
621C38C0CAEA89B2205499005327DA99E494D9E1FE8EB703797B611CDDF7DB31
F62CD736AD7AE654A7A2D892EA471590989ED2A8B9CA97C357ABD25D6B8DCB78
E81FB5B8D5C70217A7BC930F472F93E247E29CD9852001BD2E16E51AE491BFAB
A39D0F2725E0DBA7C8CE305DE7C1B59DC2184E09F7B7B2AC0F915A89AB253EFA
653E29CDBE7BEF9D40CA8BFEAB9B506088DB3CF99C78613AF62054AE1A32A95B
595E32FF28C330E73A2D5F605E33B1B0E45BE31A8DA7AFFA42839CC734E717BD
D52F97832A24A6606A5065F649FE81E6B3B1E8D0ECC21206BB80B2FCB7BECB03
39036F3C3B3A2FB108872E8860AB6F67961567329F5626E6328EBE3D35B8883D
AB6FCA8A2B979837A433DEAA348233900A5BA22C873A42C13AFF73AACC425448
8A571F1CF7A9B7009077815F2D3488996A754F0D89465BD9F32B061E78C54C77
BC1DF51167138A612BAFE409CBEF302E61421FC31A29D22A5C46B2E75557BFA0
C123C0DBC44BC7BA77E553FA3B4CE88FE87326511247518E629A2B70B0577881
BA6D9347F9A8303DAD8BDEEE87084A06B962B7E28A73BE0B2713DFD32DEABA29
3EEA5ABD85A37B1F3D63ECFC9C885D638355D76EA0130CCE173653E1733940CD
BEC9B476678A7BCD0C6AACB39F1863ECE4DDE11AA3604E2022AFC909284A4D43
B90779468E29838365121EAD77DB71CBA6FAE1532A4AB7095F9B0A6F329CF352
2C813AFD3714B9A4A8A22C26D9970DF9F48A4C3A801E35A650279607C8CCD738
1713A93E5F02E55EF58E729E06BA415230C0578017DC87B4B835C7DE472E783C
F2984139C440B1826E3D41A3E8AADCDB4D18753287AF757E77D486D15908302B
0425976C12C80E4D9A88629DE47E52E3669AB62A75EB16BCD26BD752DE5BB21D
C9C7FCBF815D3F994BF9AB0BC0438C5F9AB06D6FA688C48C7DCAB3FD13EEEB24
95BE6DDF7C7106C66F3EF6A89F9D6EE68EEE45A1E9807DE85363DF1E37946025
9D44CE016453B2D233667BE25173D9C0204E159D8118F38CC7E8D94F702D9143
ED9E898E52F2294018E293B4D500F009C2ED820B75D4FACAEFA4489F2CEDCDAA
EBE72E55AB10A4980F44CC84F8DD351882D0FCBBAD99AAAD749454CDC40CBD7F
0339D4128C54EB3CC09A62F2A89E84964B2B68602D92E9EFF00404D754001050
958C69140F1F2C1AA25026527B2EF907DFBA55256CECAE9184C1E3851FCE2BA9
A86A1DEAE130B5530C1917A4F87FF7F363B07C255B5668BCC4131C4B68F931B3
8C1B6DE01DCE214039661FEFE4192FD100809C134A2832CD7CC85B9E09A7E4A3
E6E6A2A78B067639910B6935A8E302D671DF62BBA5AF20A2AAAA97D4662A0852
631CCF8BEF92621606CE2CFA8C707E2BD307DCFE31154FD33D8E79B4C628C92A
F3A011B67DDB6DCD3851E1A88153CFCBB70E29B7073AB33F7BE2B6BD070ED972
739DDB5E76905BDA40053AC0682B3DA7C3FE91CE873318EAFBC59BF0404A36DB
4A079CF92AFED25998FA64BE8C6EB7FBCCCA5B71D3926A5888D4EE45DEBA1EEA
B80C419DC8C616BA9F1AA22C72790A97CE703AAA6CC20E3D27A37D4D89E34BD8
A09FC863DBD2D14764D82C2AD22BBFE55282BB6318921169C7F112991FDA6318
1543D422A62B3EA98F5ADA485A644A34CD0F70B5ADA7DCC9E1BC9550AAD0D3F4
DE56356F862D6764FD9EA134359F4325E47A8EB324726265816EDBA8EF142D29
40FCF6BAF56E06CE4F88864914D7D81C5657BA7B9731022F6162690200A28AB4
B66CBDAA6FAF5FE860DE4F130A0B512508C2C20415E9373CC6C277134E2D1F4F
68497AC29C25BB37EF93A77D572B38C926513148B56545824357824C0DDE6173
BBF3709EC3E06DA87B352C112826B536E97BD80A864C4B86F081C13CC7F054CC
DD5814AD3F55788ACD7BDB711D176644423FC14B3B6A521FDAF9659437755CAA
6C23D8D3709555171027D0D8FF71335393155D5C4F6C2842EC99D61E3C89A3CA
8622749CD748167B9B8C3B8974A281B8F074459F198B873D8966D47877D7DE7C
0F59C4C2E2B803F299EC1C19CF2417E6CE8288EB6581FD0F0738902FA33771DD
1F4C5BEF5A58984745B628FB90A37E236FBDD1263A9AEDB29E4E4BB676DDFF2B
9DAB14A41206C3350B9DFC1DEC1CA575453DCF00A0FFECC8A7D0D58259E53A4B
20129777C73D93EB834B271794C994A3F9821E4E9B9023B08C7CE8D31D2A5267
D426490071462F24E9823DD5AC2A249D44E4C356F4B84AF763EECCA28D26DCDD
EBA956D677C9E906BE2DB825932C2779C3B008AF46AFF74781F045E3D3F22855
82AC13268CA45E353D5F4E3378154FD0C9971F4185BC72EFB20DAF8A28FF1410
DDFDFFCC9BAFDC23595C362AE27EFE633C28A2F142B8069EA0BA7A8CE3B177F1
0B0604B3C16CEB0953DC37D84551822035499D4D963D707AEF431E09602E47C6
5C1BDD1347412F127F53BD645BE24281BDC1FD61013AB7602079B3C763CEF768
ED28E1E6CCC05F61819E9D2C464D0E3D7358A6A00DAAF084A753B513A289FBBE
D75E3EE8C1117912BAF8575ABB279490402EBA1C517C4D39F288709F39BF4475
3446E7C82ED6B9ADD6CAF63EB65E0288B9FBF074392D462BE1D16E320913DE0F
6F5038EC5FBFE0A25EC67059960046A1D065E1C970503369C085E43BF6C2E3F2
57F4649984D3AD1625E1E2E27C86275428DDACCF52A8DD6A877DE6AEA9C31716
B90E12DED216DA70951F397CFB0152D3DB9960299762C614569978F12A7A34A9
12BC2CE3D2B8F62307FF377AFF3E08DCA18B76F49F9D6AB129F905F7F25D0B86
F81C2D98511AC43F3A71CB424C72AF75C1818F6A1D31936CDB2035BA06E80AA6
BE0A001415F381236D5875F91343190C4D60994B9841785A373BCE4C0A125D46
6AFCF396F6DA5F25B7F09726EA135FCB1195C608C43B81106ECDF281A3C0B28B
692C979B4525E8416562C7BC68E80163A53996AFE9580C5338EC127B9D910ED5
9D59AAF9D1D918A30005C31F177816336B74AF8B9931BEC0C36D91E186CC4C1D
1A0777414CA0B3EC93B33505DF47884AA0A1DB2E4C4AE4356CE80939AFF6ABE7
2FF971C3640E37544A0768AF6483293056805F5D584C42B434EAE978CB24FA02
785FC4D548C25F5724F829D372D558AD603C5E040A1E996245BF51EB4895D435
8CB69DCD788070743D0E2E7FFE9382A570237B4D891245EB3074E0D4D0EDA5DD
40DE855B47289C449B6AD8D5F1D557102050EDA0F73764E81E3594AC3AF5771B
AC834A3CF62FF78338CF581EE96BC106975A61A8C6A1AC0878EC2EB7C1B7E2FC
A9089A8A29528E45C47F09C56AD5389C3EE8DFE85E64B2F53EE9AC0EDD494087
DBEDF3E9C4678E6952E324200EA11D6366AF685F88D99F32705FFB5C31909190
4FA8531D232D35EC5F35D5AD07347B69DBC55E6DD283F3B17DF4B50BA78292EC
4A87C2AFD19F1F2B77AECBBC38AF8EBAE45C678123B4BDFF5BC6A4897682B3C9
EC9D8048CD9239790F6B0B3DD6FACF052D2E1C0EB34672AA7DA83076F41FEC04
B5C12B40DD1B386D89AD8616B4153C01975AAA6FC10413A373A9E0DDCE6E0CB2
0084673727A2E7BED36EB2C52BA18EF531DE09B52B7093D785F43D7EFBF4C903
F54E22E2B141D5417FC4E56B370A532047D92A947F2328348B3A1D3B71F26F2F
83281B0E9F6BDD348DC91FB8489CDEE8BC223C4281DDCA5F7DA80BD5C2D49C62
DB73373C3843AC9611EE9F5C09B646D3235BC30D4E9BF6B5FA6D56A8B182BA09
4D5712E7D033481A51D2F6B2320F6AD8E6CFB0D2666679C13A65E1D6872B1D7C
251769E060E6EB754F8E89B075418D032D7BD972EEA424F03CB596517EF1FC46
5570CE0EE6B820385CA362A33BAC1ACD31713A7D8FEA52AE1C01905E075CD64C
D576B635554C9B7F8041AAC5EFE5279BBF86B6202987549707DB4325410E297D
9CB2CE808E380D41EBEA85F76EBB37D2B0D8A303AD186A5DDB0595138C0E3D75
7E8DBDF8DB662D44654351CE8F69FF905AAEF9CAE80C6547E8935DB67B666B84
BC164518713BBBD20E129189FB1A1752C8CC0C922AEF593F091226BD53504A41
4099BA8E0F093A487C130D8C59F8E6BC0A3D6A21AA60543F3470B82918D15A0E
BF2C8F288214125072AE15C467502382EFE4E780B54AA85ADF6C9108935595DA
856256A5356184297668260F9660B2CDB579997221C2C67CE3734D2953D9A0A1
B9125089C81E44D816B21F76617F02A6A47EB1F349BF6C97AEB8FC5D08D236FB
614E30E108FAFE34394358212CB5E6BEB03195FD884DD681F71BF2430F208782
A53B7D888417DC58B0A0269A1FD38BAB95AA31DF4BE8804458E1BC721376F31F
E8955F98B6EB4F83AD59AAFFCECC01B36F9A00C6661BD18215AF41660910B4BD
E9E7492FC44758D679C99B501F212C04DDCF148251E92337D102BDF46AEB31DD
0AAB719F6B84DFBC58782E1C0A4FDACD3B0BD6B58A71FA1975956C403D1DB5BD
D2DC150F2066AA14CDF78E2E3AF05887FD5142811C2572A1D4B9F9539CC6DB67
C54BEA418AD1B5584D35A6E465424B06337662B94BE074005B2F4608EC1B5CC2
A72778AF0D1376B04486A402FDDC2C3746BDDC39F1AE04D2E173B080DD050FC4
A9DF743C98E8231D2093E8410180C54A379DA75BB9DEAE1A4903FA06B7065EFA
3285D927651C376B59B33F64866F978D5BB2C31BA3728A7511BDF21EF0A62A75
12D5D8ACB0DF7AC21D9B88457317ED0F6CF9FF5A2907997EB27603B3C75CB936
8D70ABB56BFF966AB6C821B1B553C5C8E19749FBBDDA118FCF6B4397EA7512A8
4CABADE679E3B50C2513F3E8A5A080D9ECE69F8E6598B835A0B93D8FFDCE9E83
3D47C83BC55DF53C545CDE1D2EA1E6F34D3263F681A94BDE6B38446C79B11166
08A0A6190D8FA21EEF8AEAEF8F7D549E21A4313141CC867DD5980ED1DA64D217
9CA649DEDD316A452509D2804B5BE0F6C5C6EF9DF8799474D9F296B3DD186F8C
BF4513BE3D30DEB7F340CCBD71BA5EFFA726B9F40FD5B411A70C229A20B94366
FDA8F2ACE7CCD08AB8F2C3128378B8FF538B6D98825511493E68C762C83A6DA6
3D6CEA621C8FEF383714904366378014AF2A02A509AEDF7464ABF8C4ED5B8F83
03EBA2CC4A176B1EE20A0A0709D6C9E30AC4FB02F2C820CA3CBC729416976BF6
A20BBED57C6C0FD85C86DAB876E04C9E37D08F89E84B1DCE7F2A0BB0078EB6BC
87DEE1772D9F4081BCA683FFECEE5B7BB6173763C2E6DB6A12B9B65106E140A1
492D6F08906900399BC707F7B64BB8500F615B1B8F9B04215F91ACEC454312EC
1DCE08F68D0E36344E84B603738B2776D1C11C1CA08BC250CC659A1AE8ECD9FA
81542BDF2407E3E0FE8D8BFD35065269E4B1733FCD50FD46178004C1FF0F2606
AE7022A337728353D90DA82647B305ABCBD6C49ED9DEE46462D60C1F70D9DB19
7ED12D51B0342A0216A769BB5F0967CA88965FBD9EFC4F8B8906C6A7E33CF071
6850CA543604E9C5FEB56DBB4892268FB19A5038B92846A311D5E9443DCD7865
280CA2AA2A7399918BEF0043812F3D717898952D05BFB782A22C8D118F3CF720
3C7C0C191B6A7AD6A2A575F5A8AB15B690C97A09376EFAC08A9B5DFA2D0044B4
938293FEF7E667094888C4727B20698DA61FCA950CF27D7DB0E684B3B6C374B0
615F4E274A69159AE7D5CA4107DD345E2C115CAFA68D28538C4D2A07F2F83A8E
25F155E256891ABBAB7980B1B1B4711FB26D09C83B08742DFAFCE4C848E41EFD
CB5AA1EE1DB0E3AC051E6654E8664D519CD63CE8E38A742078EF5DF4BCEFC854
37AD3A731974D956A9A0270655811051028B571E39D1A96CCCDC655F9FED4865
F3EE0054B00A6DD9D4CE36E986DD73468BDBCFE1EB6D086F2AB69CC56C9D1643
787415A1CE767F96EBE43DF30BC2D1D1BE0119D4CD81C73AF83F18A997054D54
BEB00788F4E0AB06E89BC42607DFAF10487A08DA90262AF1516B3A5102C6E78A
5531EEA01521912308EE9159CC9EDD86B95AFC6AD41274291D620B9A63A81A16
B94C06753E3CB718F94496A4A4AB4BB2CEC3DB5566C8C9D6DB92F2C0584F2E2A
42AF6AFB07EEA9557D495AD15DD25C3F320532141A22A82D5D31E12982091514
A13462CB38B21F897429B05E20B8B896CB5C585958034D9F9D421C72D1B13763
E933553FF09378E5799447FAEDE1209962BD3406653A98653F419EAFBB18DF86
BE795B888ED50AAE660D1728CA47403283BFD52DDEC2D7DB58CA020B53223CE3
C96EF56EA63C4911728B598303CBDBB0B4E4A0DEB874CDB1570739B1A1A21326
2E4D4ABDBF33F14383339606F4670595CDF4378BA86D70CF9AF7CBA0D87F3FCE
BF2730D812FDDDD016B803C38B892381651966B3568EED4311DA1028846B3EF8
2C41D778B61F323E7BA779B740773A951BBA93D08EC234291027EBA9F091E0AF
D080DA0CD80D8DF7EBC89DBD03C02B591D979F38B0D9C59C15DB93E45AB86731
E47F691F9E8A3366A851F6F4383F779695C9A969DE58BEC9A6FBC5BF379F8829
06C89697DC6FF5E875146F413F4C42D8470CF5CE4D9983598FBA5FE616E33EA2
F454625BE4B1D174ACB0919456D7837D8F9A6060FBCBB8298ECBDB5E62590388
5696C00EAB746B3E6A119B0E7CAE91559DC6A5B3BAB236B46361861E4EAFC127
88E020E9A0C5FB78EE0EFC3865E4699BC069A8BE8F827227EFB37969C2356F93
88614E70FD5C8356184088CB97755F3116CE5E9F6A43919C495116329C363E6F
3E54098A247468922D2DB38A4044C265DE2D3771680A95614170157B3E33BDF1
37A1159FCB709FB67E38C4D733D233C25036608C08812A3F39074B39E47D6904
608760D111F44625B25F470A3FF2986C68578AA9F06957159A569F6487BBEB0C
1D62CF242FCA104D7CACDE838EF96D043E0EEC1B9D820CF93F5FC0BA1459591B
08E34EEF27482FCF08F25CE8E6894AD20C707AC52CBB85A417BD2D7204CB6ED9
9662794202DE1BE4788F2754B2752F54C04DBD85A788063ADCBEC519652AFA50
3346561655B15078A2719A4F0BFBAC0086F09BCE50AE522C2064A4B9ACC3A1EA
B8E54A9709BAB270C0C77B09BA27C41F4FB4365874CC0D1A182B42E4E0146BBE
CC81B47DC0DF9E4ADEA85D9F8C77DFB4AC7ED4A60011BFB59F84BE687E7A805F
13CF0EB2428C5D5CA1F39BCD74572C181059096C657BE453A22AFB28D18467CC
43FF768E9771234506BEF22737891913D14DB366F3BECEB347E3076F2041CB83
7A1F9DA29079555C100265D82C9C1B879CC2F3E4EF7005FAA7AF98AFDF750035
9B651D48580BCA9F9EB1B6EC876A8BFF9E51789A1DE2ECE16909ADCB9EA8379C
3AADF23AB9DC687ACA989BF86F24F23F6951DD9A132955A674C60D5774E77E0E
D24E62F5A85DCD24BB9B15A9BAF2BC4A47C0DA91237C04915BCFD85188131551
D7D3DE3C5C637BAB17542B5DDDA45B6152366A6E5505CB504793522591E005AE
22F2902A11B8BDB8955183610797BDAFFE1E626FCD53EB2EB03400B20F87FB97
FBB1AB3AA57080AE5C40688D4A3942D852548EFB4A1BD9121FA9366181D378A0
0798C6F1837ACFB223F173BD86C842D1C9ED10B006C9498D723A6F138CC0DA1C
8D108B7CE405504E312FCE2A820BAF531C4712985DFBAE3A98AC2B541BD5A979
10BAA4B9435F80EEB4230EDB8A61DAA027B0EE59368220EB2EC579B3977CA259
01BD4CC597B395DF7FE449FD56CDEEDC45692985D6BE2F8EFD3E8C1B3F973E0E
05E7AB4E888FAEBCF74DB7CB457B511BB1F67305D3A251DE393A3F94CF0C7669
ED9E365EDC2D5A99F18C212AB6B356A44F9AFBB3A238B7DA900CDF822A476164
98009F53A84FE2C7A802F123A58715D6017F27C6AC66C0B04A4FEEE505776D90
A2D1A68B51C0B83856E9927C936DF458388C16112776678BB400C75DE3A3E70D
68714FFD8AC24FBA5901B3A2480DA075AA926F4C487ECF1DB6B57666EED9888A
92A58C06DD81C768CB12044D3E4FCE17C7E64E6C188DF5D80ADC90E648C069C9
F0A17399F5569529861FAEFDC91E823E0A0EA92E7F1118BE51C88494FC22D2B2
E55D5BA19C31A5805EDA613947A8E735EF76316462C6B8077A367FA8D052D2E4
7A9725EED259EF54EFE72CD0D2BDB735D18B4103C1DBDCD8EACA6EC7765385D8
B5DE106435BCC52F1F278910A7453E1A34F3E674FFBC77AE08490A2CB947A3C2
58F61589051E5EE2C82368E361D4034E462F659DFFB64C404825C329C11B60A5
3BAE828D3411D613F0CCAC20A2E48B37F8BD8D1705A76CC4A6F6FABD063ACE8A
01DC45383306CED44FC0C8F94568E2E17613658DCF3506FD4770918757F0656A
D446AD3B7B58E928AF7F0DB257A40AC29D2907B4EAA84B2A36FA46AA5CBD3DD8
C1CD5E3E5B2E3195AF58DC09D81D4F0F7E49D329237064384825EC71945DF03C
CFADB10C1E4E91CA5F7A54D5F433E3C4634AEA50366912D0F37C940A8F4B3E4D
CC91413C3273DAC2A3FD2C4B5F8AB9806C19B7E9E550F0962A137CE362192A34
7B60D1489DCF7630AE1F32E2A5255FF980420131F5D01C86CF1D73E1FE5770AD
ECFE05C4FB0862A406960705C7BF2AA1B8DD6BA34A437F711AA636231EAE65D3
CAEB80400E78D78F851D34B6EECC77D163847E63D3C9AA412D1203F1A94760FF
7862337BB4A2C3A8C8803E49B6071264DE1F4569F2F4629141CF756FAC27DACC
81D3B0B0BBD9C4676C1228B9B2F296281350C23CEE1D869C4B895055CE9EBA43
C39DF8A664335F67B9DDE36DBA793EC77E5CD71A655F5AC07D7CD353D9A69D62
C98039BCA169B6BBAA75BBF6FF970DF619B5B1C26C512FD8E7AB105F0C7AEB6B
F2620BC3CBCC7B27D9618E04A2EE6E3744D7A34F9191AD4D104C87151EEC9CB0
6B3771F1B019073774C6477493757530AF7AD352563063A1A6B764F66CE61D16
CD9F6A5C51ADB5595B333A06C8EC4A42C6CD98A11CF5E747B1B12A1588991771
6A54910E71FB6278604A4003A9A8DF6C1724878BFF7A7084B0859FD5C0D0E719
A4199177946FF72DA1DA89CF6F9FBFACA3A735ED0119A05C7E327C3412999870
F0AD19B5EBE8615467F7A94246A10BE0D39D8A2E5157FB5FAF0580A2591DB59B
DAECC087BD360B3B50F5CAEA8BD4F3EF36D39B705CE3A205C3F29825075574FF
2D8B1042DE5F98C035E9BBF6582493B76EED4DFDA8409ABAB35BB214F275B90B
CDEDA619912D6E53B350637A1C6B75840B10062E5389C0CAC1CCAE761DAF98DF
D702EDAD43518F2F93D418247CFE6240C82AAF61A7D3FB6C48487185D76781F3
C76518B70B7A86FFA7A4E0AB3F6104C8F05A2A1381C0D2F8B02F89B429212C58
4FB9461A52DAB14D19C7C4A8E2465D8DFA46EAE6ABE863D7AFBDB909A0B9A942
DEAE3F20BDB5286981B17F8932DC580D22FC84A86870515243D27ED225F361BC
0F8629F97EA3E4A864AC9AF8DDC171BAEA6C706C3433977EC0AC0CB08D9B0296
9B769428CD3CBABB682FE69863D29863BC86FF201FAFEFEEE0A35F2D504F45CA
A0E02507034F043B65E1238AC2B9995515D9521283139769F56B466B95CF4D41
2DF23AB752D10811BF959E4F8348015D1F8D9591F91F6A2A22894F2F08B35157
F11930C8756A84FD681880B3CE799AED7DD13F4A900FE2081725F4AE20FF5356
642D5BEFFB65C3676C1228B9B2F296281350C23CEE1D869C4B895055C99603D6
893CD2B43CA2E06AF86228F0099D542E9DC5F1AB5FFFA53A6D2A30DB96AB7BDD
560A8D4E29B7FAAC3A30A6BAF8FAD751BF26B2493DFEE44FAC4B028833908E98
7780C15451EBF292BDEA8C0518A94DFD65EB4752208D7BF840312068D7236450
B39F6F363E3AB6F8FC5BBDE228E36BC5BAA44BB4F42B537DE4174FD68DA8D6B3
7178D42C495F3A0157E54C5133C1136DE2492BC07C0E7A68E1C578BC1B886C07
064267C1B2123FA24C9748A7A85C3DF8D3666728FD0CDF7BF8C6BAFEFADFB285
A859F6AB49D3AE53F560771D493F83C8EAD6D875F8B1D7A15452387F04D97042
A8BD165987D17B30479A245505728214568C3403D78F8ACC16D72E155435171F
F7A740F1B694FB632CEBD691C1F29AFD52CB18BD258ADFB0B4BCE42B956ABD52
B5595B333A06C8EC4A42C6CD98A11CF5E372F38C194C67DE0043104AF5E61366
D0E9E9307B65E655CAE65CB5F398F0236CE827CB5650C62A7615667051C4BB92
8EDBF84BC2F29B7ECECE6266769BB9A4F91DE27E95F73AA2A50EA7671125D3AB
854DDD7DC1FFFC25B076FEB72F3EFC3DF5F9C35B0D6BD335FECFA17526820253
4DD6544595D1EA952901FDD537C1B1EF54E133B78FBD743A19C6C86A732C17AF
9C9B220E0DFC4ECF5B413A6599EF4332B8606F8473AABE20673348F59F48E71B
F6484CB7B3EA0878BECA4DDA1739A4456E73347CC3336CE4E207B003F88D6813
9F4B5205598DBDAAFDFF5A76D08A0A7DD9CCD7E506C19B6F8D5D91FA20CF96E4
D87EB1B0E465A354B42C8975742F75BCB6C0CCEE1136FC79A72FED503815316C
CEC391025FFF8E6838E92AEEF0BE743044BB85BC31F795942D5D77E3AD79EB3B
6CF717E5C1F774FB98BB757ACE99FBA6A695301F5613B47C29CCEAF142DAF6C6
58893DFBF0DB8BEA767880B7064D05A4C5FA2A8570054C243ADAB55F1BD0A2AC
1D73029F6E0C05666C1D1441189CCC7CDA06836DE75AA40C0171FA99CDA57067
ACCAFB470469798AC194B31AA1E693DE59D2C67F3BD5D837416D3E85CD0D1AA5
F35000BB2C95BA06AA6947C73B4C28293307F22EB28C915A6423433A1805C809
338BD4134C8C65B2FBBE4C4D1209DFEFAE4490774EC60FBE3A63A34884DA9097
C0F903F0F05E0F77EA5913677F23E21C499ACC7B5B6A1A3749C1342AF400984B
CF5B570A966383AA9F7CE59375525369CA6A559BEF0863CE16D35E96FA40AA84
7DA5E22F00136F21273615D52562AEE4F2810BDF9DB93C5466961AB212A8520D
B33A05C9877589B206A1363B24D9F8E434FFEB507EA58F36BF83663C2F134BB4
B5EEA3039CCD3F02DB45E13804E965266886E27FC021114A82B2810D3098D7FE
2935E62F93BC7A664AB5EEFC7B820575D35624FAA504892ABBFF1C6F9AC1D22F
AB8AF8D51C4A902402B857A5992B7C4BBACE68CE7A4C9CDC63226D68B6DF0E41
67A1A8C656DD39A9BBECD38DAFA3F671958441085A247E4D927532D0F5F4D25E
12AA256C9519F4F823F3A4FBFB4195790050753EE9C9E5B4450986908EC3E769
861BB34154B0E15BDBB2EAA0489C6D09EA559B9E0DFCCA1A39673371E802369A
ABC66D73678FDE76E5E2EEEFD24F40D32CF191430AD3E9A2CD6663718F996C6D
DF899795F71DE1CD9747DD81B3FD8695CC7E4D624573A635B65951DC366F76FD
076CB03490D061C2FDBFDA953408228EEF66661F70AAAF3C3EF292A9E582B78D
D2BBE4BABAC7DD277FC23AA17B67422FCFC22D86B42FF91FCE7E06435BB29402
3286576837E6FC9CE04E7AEA2C7E4A824F8054FE402799ED48BDDFCE60D218A8
996ECDDC6138478B29F1588ECD66AC91083EAF823A4650D794D14775C5749E96
8CB439B35306197D7542BC10E7F9CF2FDDFE83B006FE1A6D13CA7A522EA95E0C
8146B860B8E47A40077DB6A434E5A592663765342C32BD1B883F76C6FB37D758
C33E3ECB2C8F802967FBC1126DF53A0A776C6E876C79D6AE577A3784FC94031C
64514BE9CE80266D85ADD6F1B8A83AE84F8ECCECD0CDFA74FD3C4FA486464600
CFA03BF9215D938C9E3212791453800907EF65D0E5A068E3977C4C730F2A3798
8D9D03CA305BED5E3FA226033F74813A6BAA4F7CF2CC57A84CFBA77156ECFCF5
A7501D50B7EEF3830A87973887D5BE9141CBE10E0EA3BCB2AC9CDD2F0925A0A6
51920F48701D6092ABBD8568436BC65F2976481C945DDC14D93FA25FFA4F3241
FE1E2CC9830DEC524749A6C5C0F20571C577ED03D63028C77626849F9E24D38A
620464A7B47B4E1CEB70BC1215D8964F9F067ECB8C163606C3851355ACA79EF5
C5033D48ED1E151BD82968B0B15A5FFB4EA63944C6C33736FAF27520BB54E07D
94B187D72A93518C1C686CAD65DDE0CD58840B519F7B53237A6BF0906A6DFF38
E77DCACD3AC075137C817FDF26B95211DDA7C94F44637ED9DB8797D061AA3CF1
DDD1138FCD3D8133FF476197F30B005D700676FCB048D5A30D1827179CF6B4B4
5C14C9B744BD98DE840739675FFC9C10517B0D218C2C21DC0F3BB8B3BBDDA670
0FC0CCD8482EC70CA6A0A4A162381D825F45C118ECA565BD01F4798FC6992CDF
5BB179D88092E01559F3727477AC3BFB5ED0BBBBF6414EE5858A463D1D1546B1
7163FEEB32602DA2B5FA880C537F60E1394571392C3AB73E3A3958BB81CA51E5
B0366D04BF6D10592B7BA0C9CA567492B339AF758E0458C527D07286045CE90B
A96F3CBA06FB78D45AA402B5EE099644E30CE5DDE591CB21680C458C9A4495D2
062DA1D8F6684D096AA1475909CE6273C05B74F523248B1E8A05F9174F51D45E
B4EDF6B468385A5A2297F5A454645FAF868438E075EBD8AE3E519BD4E5E9F22D
72CF86CE1AC14C47273C857025C0DF9B20B0323EA586CA1B50B9C689AC813A38
38FBF0BD10A246FACF420622EB34B4E3DD2D6BD77D42D4F1646CD21A8A1BC4E7
6ED59F3EA547541714D6C5511CC846D0058C8739619D46A2EFD36F9B6DD070EB
10982D93A8B6B7EA1CDE21E4E77865184F7B0295EA77E2BF3C8D42BC0E41D2D8
44D18A68D6A1959288FFB390E842A2EEF5D51BE02AC50855B9158840F97FA94C
C038A13F8287DAB64850A522D33B09929C00B48C2CF4E9FD8F3529BC281516BD
1A6C353C9BDE6BCBBFDF1728633DAF603B41B8D938169C832680FEDF5BCBAEEA
8FF207B05729408AEC4A8149338459F8BEE4E3EB8047907EE7F32F2FA95D10FA
A84DFFE90A240EF474ACBB9E6B044D9BC7A3A1EEFB478579F9F9259E4DDC2098
FD5D96D215A3D218513BBA722CA46E21F697AFBFEE1989A09F9F9A0AF4F0C718
92A3BD971AC9AD345A4E00C5190871F5B1F5EA25B39CD927968771EDC9EF952A
81E23ADECDE189768E9A2DC0597E82C67732CA1D8C8F14F65C347E47E9CAAF0F
5DBE9B08932B33CC7FE1E9E6473AE9140BEC5E049EB04D0FE79DD930033C7C2A
C6AC246E5EE27646205DFE65706F4DD2EB18FCECC2FE44C19959DF9D1404A7D1
927CD4C3CC78C6A226B0717DC7A97528F63B8A14862A7DCAFF8081B614157E35
B519BCF359E1537EF69FEABA53452944B5BF3F9610B68E57D33378ACB8ED7DE1
B1839AD896F8E6E8FEB1113E961339770A3620A6D219203C7B0870B7575D6783
2B87E025992C81E31E226BD21BEC4BAEB0F7B210A16F187998265FAABEC62552
3524D296706514AEED350F45EB766C4ADF2EBF18F155CF537C732EBE9A04F981
5DB6DB1EB3472A1CFA532E87B80603A4E423CEF7A01D7181D637A568C6955BAF
A1115EF0DC712E962145F5946A54C6C877AB635544830FC4BF2E0B3727026DF2
2C99A95BE117650A8DC3228C19ACF8BECBEA2D0EE0C203F1A1D8FC0D370CA01E
A5D8E0134F65A6595C35C22A5ADD3968AAA90EB3304DA308F9D1BCDD07968AF4
064981C0CB7F2CD42EBE9F74A0E4F9720757B8ED37597343008D251B5E433698
8706D5FAA9E538D2691E1C43E7F93ECEF6845AC077921BBE65B1D8A8D152EA07
9A30BF544B69287836C5E402D3A0A807DA8C72ECC65B26D0C888082F3DDEF655
8D68EEE57DD7DE2478A2B7007ED442F649EB701A213ABF73C242AA4314B9EF98
E3F84551CE9D70C78EC698ADCF13947A866A8ACE63BB85E616B6009EAE101A77
4CB61844FEB21466DEA111589A13274F62B12B6FE90C2E836AC1073CEAB42913
28FDF78A0B79CD1279556CE1CDDB3B9166F2745D91CC2905555B0D6EF6FCCB40
3BB32423D86F7281591E35233A0DA0CC4CA872E4A682A2A6BEC0FF183C7D344F
FA07C78199C374C8ACC687BC290C716FCBAB509D6B39E2E88387EE5C29FE91D1
5FF6DA4FE2E16B9D894D9EBB88CF0D55C3ADDBC19AA7AE38B4467211A9EDC511
1869CE9B5CD45B7ED1D863259E87971801050D2310347D9695D3C70BFF91C18A
162D40504301DAC55E00E3043E6B5E0DE0BD141B47BA9E9DE5E31F3F3BA9F7ED
7D399CE4A0C9BCF3BA2708D532F4F5933A2206AC7273009A2E4E6D1BE1137338
DA2D0A9C69E4D88EA35B0E66730E679AB357C8BDD698ABC0A47E1FF4BA4E91D4
A66F436D08B1637927F22D8C85E23ACC02366C618DDD86044F16ACD68622AACC
BD7D079025B9EC693BBEE0280D2A0A8EFCD56561FE4C2F166C4B7D5EDE0E7F0A
D1A35F7146433BB29187C390384B4B99F21728D169CFC8073C1EBA7DD9681B30
B67934E4BCD51592A6A772399B1364C2ABA737BE9082D03D68AB306115336782
73F77D1FCB7A5182583B179FB6B3934B9F2ABC99149C12C75666B5065C8BFE7E
698A18C516D55F238EC69B6EBBDF021E2AB9F840300D9680CC4B041C91CF6770
26DC80C78BCAA6F8D4933CB172D7B6EF60B363B7E6A32B1ABF73269AA96D47A4
6CF2AF1B7E83B82ACEBFC5181C9A9A1E61F8A42A8A8D9CE6FBBF28A67F2D1F5A
BACBEE5F04BCBAB4C3AC56A313571721584C7288AC3112E81DD8659D77B40314
ADFABDDCFDAEFC76DAADE6A74C74609E43D1C77140897ABBB239426DCE864EF7
044D9191A8371FAE97E7EBBCFE8F1025A6369E6D0D4BECE3E565CEB8B6734E0E
C4EC4DD2EBBCCC982AC15E2985AD139C3E88FC9672FA8BEA130FB2FD4AE99F5A
8595EA811BD375AB4AADB1E2882A00FB05DEE27084854A1EB6342AF1497FCBB7
C1220C5FE36799601CE72DF8F2762BBCAD4984F9F56B7C952B12E664666226A3
79770348A4844BED5225C5E93D9BFB243C328372D0233ACEBC6A61019ECE082E
F8165970C4759DEAC95E123C292E100F279268FE0B0751050218B075119D5BFD
2E3CF9E0550A7BEAF0936DCA97ECC0B1B5E983BBE2BFAD6A4177C53977BC6ED0
267C6F72A6FC0CE775D77EF347C2A97588E1252C0610EDDE410C83900EAF1A4B
62411E6DF77D4A4A439E5513CE80A9CA483589174BB8A0D4BE97BFC28D2DE870
1A8AF8E8F6607639FD0E146D6B621865797B98922141F3FB29C88DB6EA541956
B90446BB424DA840AF06E61911E2AB3BC344721A973EE434431F706AC69903CA
BBB3FAE269BD685A5C8368D9ED2A03AF798227305BD9885A0850BF340DC8AA79
202CE62896362FA0E6C2614EB8F826307BC5EBE3E5D747D065F9D5F71AE9DF9B
A5EDADC1C7BA83D3FC04941F21E1E72660A01CA28E5AF96A152F2EF43368CF50
1F710F5DDF19705B612FD03F5AA88F9D0A25BF5B2B3E398C6D58AB6DA5D85749
24543D55CCE46B7EFD3920A3CBB23590873B49432B92C7B997131EA9F395C4C8
3ED80F2E8E13073B30FC3869937CDE2766785B6939FB1FF0BB2232BA259FC90E
D3C86640D152AFA68FDD22AD4228E961075DBFCBDA40630BCB88A27DDAA060E9
CC8021E11B341BD3F0BFDBDBEFCC4044171E72026A6E95A06E43E39C4B063899
4239DFC1FF0FC280C292D8220359BA5884CEB13AABD974EA022646931A2339B3
D2A7B23339CD80AAF20546B86559F8D5A2B45E9A84BA356D15496BC5F4B1CC09
CD8E826EC5E5BF846DBA8DAA51D2E55EE4325254DC70F6CAA235EB7BAD4A2236
656E7D275F85BAC81ED91A757D2A9505BD7472253892339CADAD60EBFAFBF28F
66B704F8D44DEEDC0E618598707B54B39B97087B2CF47C9BF182B7698321F65A
D3A82FCA908591B8BC0E0955779731544EC295B33B7BED4A33F9ABA1895F36A5
36F333C1AB1CF5001C4EBCB7B33F1E819112594FA0114399CCE639EFC39825BE
D36730B298D14298DA5FADEBBBD6E26DAADE9135CF3335A6936C10EAF2B85326
9DBD21EC0986C5350312E62606145645FC32755B5CEED304E60FBE05B62DCB58
755BEF7B4F3AECEE97ABE431A8D1B05BCBE69CF10EB696F21FE2CF0A869DE983
7D710A56F1A2149B53BEA91A5C184A53BA7095F8496B2056997F2D35C3FE92D2
A98B5B1B986C61EE8ADC5FDAF9F48F6B6F4C84B14266E177D6BBA968720C1C0A
6A4B4CD9684676F870997905AC2D21E0AAD6151E7CB29095F32A016508E3891A
34120D065BE96EB45ED0214970BAEEE8A19A754222D1859649142B9E8D421C7B
1FDE13B2D663E40B7CE6F6638AD6030B494A8705B7424A468EFD0BD284E09F09
234A170888991619CD0F8361837F4FF9C8687AD27658A448FC502A8DBF8D959B
786221774A27EFFE7261342F518FD5B9E01F4C23025AD0CA12430DE8F7FEEA43
856FABB28E24F1D800A70E8180DB2257AE782D9DE9FA015DE98D18A7E2837B0B
7463D8701B1C4828E3206AD8E4238807CD8752AEBE29CF3E0878C66125FB6C02
B8FB955CB07BE400BB6A54030620955AD9DAAC44F58D0D37DED34396179340D1
24A010CB8026BEA4D95AADF6C4CF1261BD2325B000A30B5CEE7DA6F970EBF657
651C903475F812A4C16A689A2ACF3BFE10B6C23F1C7ACA39A6117CE4DB91E197
AE35B9F125EB76137CE8CECB8FEB6EC54B90D77C103A50936519434CD0FD257D
5DD2E89BD76D1FC81967D04F3E063B27E38E2FB290B19FB34F4A721C88811DB4
541C9866A34915CB75106EF2B693348F5D0B50B7D1597BF9E0B7A38E67F5B232
717E3494D37C3614FD05C40974DC45029E9C26CB4E3A48DBE76035090123490F
DDD7E411D27A1E7D47D19FC0FD473648BA1171FD6B7587E2C1A77BC15BD54EB7
0435886BA7155A9563A3B3009F37E856E1E39ADD6AB74B4A14EBCF44E9878EC1
202C05C19AEEE1CF52EC0E66BB72A4278A5033FFFE6DA4499EA25E748BAFD57F
FF803503B0121A51EDEB614198A621CE597D4A442F0B495D1C4FF37BC9831CA4
4DD844791766F836D14096DE48A47CDBB73168CED9584E2683D803B474042D43
A6E4215A003FB9E0413D86558AD8783E09DB10DBFEC76182BC2C85E89A1F00A4
A9B6B57A1E24E9A65FF1BFD84A236F3ED3A26B7E8BAA8EDB383DDC0BC6740305
C40C3412005DF575C816B98325804045852688C32B3EB144FAA5AB8873F0D6F8
0BD20B824C727DD0ADB597535D43CB8AAA2F2F905F62F901C51A8820F58BB7EE
A1AF77D796CE3A7C0FE7FFA040E1C835883706607C5A811CE6A6FB5AD211B612
87091ACE84DE11A6B7B67094CD22E1CEBC9947E32415CB4F4CFEB38A76CF613C
CAFDF9F2627F31E8858BFE5C92FE1A7294BCE299B90BC0E2B108B4FB6461A401
8E9B93AF3264BE01D6D6CE07C3CEC6A3EFB48454E1649C067599F41AB728EB0D
B447AC33DD1720EB5B86EE03FCE235D52D16016BE1E326F54B3667684CC91275
D7A7B2C3048AB9EA1FAE3D5EF8A97BFED7F7C6BBF9D118A28353D46F77F53883
A18E24AA4ACDB2A9119841C603B5A6993B71BE52626F5C6488D4874D815AC8C9
DC75C9221E3F45BC7A0FEB324FE5D15A871347A6AF0DE3726874B2FFD13B4B51
A36CF8EDBBA06AE8EBA84544AD9491ABD8EA251C28A16201098B07B2D75D7721
CC231405426E159C176507511A9123443157A501525898C3BE07A09703E1BBF3
C7ACC94C5BBDE574F8E38A4B953FC39864BC27CBA5669FFD0DAA5FA394260A34
96C4C35E5FAEEDE6A3DF23AF0283C1C9B860B740F2B4D53A8656B4EABE3095AF
28A2D6076F7361B44D08FEDCA5017C16E6B195372FAE4F57A4B96604D73F003E
662859D8C0F692A22381ABB958B159B4FD85F9AE85700C5BCF23B335EAD7599B
795CC1B4ADE85DEC43047BB3E45F751EE861BAD6507AA0F6A5CECE9F6967E362
3006F57A08D8D6D7F4C72073F273A3C548DAFDC9BA27F26A5A3389398C7090D9
912AFF7D58BC1670FDD0DEF4384FF2505404AF6D13D7DBC3DD058E6FBF55C933
FECD28DFD09DF2CAA72652D64E9F04C58797AE58E5F0DCE2552ED21238AEA62E
6E7240427AAECB0C0707EAD5379B2FC3EF3F0A5CE53D202FB095676AFF428E7E
B1A0EE3D603BEA4173B638A080250465BF892EFA6AFBE907F0ADBA6C90A54BCB
73DB7107477F6B58E2B17EC7130089212D1B2B1110273AF995B9FD4FE4773C29
908823B382EB3B65219D176FC440DC6E987ED46411F533AEEFC57030E5A06FC3
D97E241A28130D500CA304734A2D53C1F0365766914EB20D11268CA5B077F786
413CB23488BBC5F1262458FE24318F902755E76F2067F000D583958DD261D98B
98534BCE2E5C3F61A28CDF1B9D892DB88965B8D22AB04A724DED273BA060E797
C1BB74FA68F6245F0130221CC58CBAACA63FE9B7A43CEA24F51FE11380860A16
92CFCA02182D2CAD2A2C8A437A5201D8FBADED99CA934ECBDAEA99EAF86C36F2
AED27FA5A8504BB7D67F0D6A3837A725F37815DDEEC57AC098D292AB762BA053
A8664AD0E99BDFA981F4BDAEE17C58B5EEA60409A48F8061CD6B1DE194DB09E7
89B5E0DDFE8087F4E387C70D49D346B6F95776B5F080E06CFA8BAE819A247F91
7CCA0F792321782C3BC52B04EFC2E5BAB975FB4BBEA9BAA5D06A806380915286
A84502429203F5CDE050B9BD884D4210CE616E8DABBE9432F96B0B26C030744D
FC565269B20E630978C459FC77B37EEC59A516F15F22949AC658037300F1E113
F3BAF5481FC4ED171DE0B4C6A03AD84073802CBC37881BCFE80E127C8C53CC9F
D6927554B0C5B250371B992A8A2D4D69A945392D58A06E620D0F71D33E076B48
8AB0BEF6F69F7D53BBBECCBE9D6F70C67F1438AB423FAB6E39135D8848E103E1
65CE2679BA958A413B8A502117E16AE0F874816B902E6812216BD5B757C5ECA3
3F35F17BC136551AB9E354C905FC9C5EC7449DC2A0DEF793FEF6C3EEEFF10DA7
810976DB3FD153B0621A10068D492E8F96961363AE5DA4833A6312748078EED4
FFB4B88FCBDA10B603AC066E958CC3A20D9F43854E0734597EC164960677F5A4
FBDA46DA33619CB2B8E6122C3ABDA8008EFEE4952E24D5140C755BD0FCB226C1
5D4D1266239DF7D586577E43177A2C7EA13BAB3751E9579C8219DD72D005EB5A
F6058565D1E8B5A1C11402138F3DCB54A3624AADFFC21A737456E016B33B0262
CE0FCACB72E14C2FDB87A97F47425C4B48973861A2D5FB232390D7239C5F04B6
927B07D00E43EC477CE7BF45AD4ABADEBD8D7DFA1978E5B7863FAF2FA82C008A
EF0DC7533C258A363CEA7555B66A8DE44F367D29DB7722B584F86B7AABAA645C
E36457F0D8DA46344C83E55D2CFBE05B925F9FDFF4BC053EFBF73A8BB9AAC82C
B9B512D59498E96DDE4F4178CCC0B726A87C3D300F04A981598549F9E4AC043A
1A15AF2CF671481BB46B91EE932517DFE2B815D288DAF8F0B7806F5239CDFD85
C441C0D7A174C40F2366A89977662B0349261EEFA7E4AA3A5336ADD33204A9E3
BA4FD94788337525644EF64DC83701888603B69CED4B47ED59DB2AAA1219D950
E9BACAEFEC61BCFFCD4E2F3975C5EAFB9229BA17ECF3B8886671E1B1081AA962
46E185C477A9D5450F4DBACAE653F92046E1E5B3E1F2BCAE32004FC045295A41
6E85D591FDEDD77A214B7E3A81C3B4661E78D2AF1FDD8B71F94EF65CADDB196C
9B32E6BC49E84224AA18B876B5C18FB90C5D90DF2A39CA634BEC5256BE26D86C
1BE71AF7EAEA17C4932E1CB09843818AC5F3BAB1049939800B20C7E958E4BE5F
220A5F80F60DEDA5925C9BE9397D67453EEA946ED823D3E701FD14E74208B718
A770AEA21A74741DA5DBAB38CEF16322AF15BA7E7FDB8DA6634656E5F25960C2
B37A3BA857CC2F1D48435E85EEDE1132662530AFE57099F9EB6D2B45F6BD9209
1CFF0C3B7B6E4D81FE3741D9345283927D873E019DB32D4D817D360A44091CBB
A8C8ECE31797F1C630C03CAC63262F603A96E9460180489046B4CE416A1EA471
4B2C1D0EDF1456A32E93D85623D214D01A50734E49BA51AD7BB23E340AAA3937
6FEABF5E1DFCB81D645112060B2C7A5022189A482039957C64E89BB59C4ADF00
EF15D6781E8F6D46439C74C71CE6E5B1BE946A79F33006A0C209FCE35E61D66E
6F272423EECDD72A963A39814DFD3F3807A576A59AEAF129A77B692C5CBE2A58
B7172822ADA3976549CB0E1B3A285D6326B0DA56AFA0F238B31BD940EF73A839
8EADBBEAEC939B381A1D372AE2CFB7BE47FBC0B64B3A625A257393916CBCBC6A
B44B240F4013F2DCF43283BCA59F109E9740BCDE6BC5813EA8EA29C067D9A0F7
6FF4B424C52B01CCE7D9BCE125B0F1FDE1BF5B4C466AB28321509833654BA9C8
DC47BDE297BB1A347638D54F5803063AD9ABA88CA7C620FBE3B47C9B2FA7334C
EA19DB3CAE4E805F8310753C4417E06F3DD3A817F7A972588478BF941F1F7093
7A517090BE92D4EDC366D10C640E2BEEA25168B07D2BF039B07DA441ED1B5D45
704665D5E85622B48BEC76202B1B4EAB00C6C757576EA0E4384C558B389070EE
3C4E9CFC345C711631BFAF810E4713A98BA8A3A835C78EB8C536E88DE88AAEF2
2D777FEE3F62B90A8CE9105065FF06D0E67E7B552774B535A186FAF0B9F43EE3
DC57811AD719F000DCDE89001BB2008E75C2E6354E0F6220F6063DD3A44072F1
D24EEBD0E9D5EDAEFF4BC403699D16DFE9901520D079FFAE41B4D49BEB1697AC
63B38A80689A6B29881A019F1CB45B82563CF769058C79787410400A5ED6950A
31CFB46363618FF8CFE2BB7CCED38D4169ED00F4B36B14DF5D6592DC14219FBD
7A7A93942A40A8E2F65453F244CAF590A0C642597373C612E87B273DB68A4A83
F1390445F0D6D8D58737E9038CEFC41BA172F50393CD55BA9B96DF5AFC860C7F
EA5B8E3FFF78D6FB45FE9F7415EEBF5BA143C94DF933FE1772D3D6F69D0175AB
E43C5D4ABB292E80B9B23F6C47F74B82EC5CDDB25C2B5EFB12C8DC20F4615C9C
3A23D3DEE03B85711E3B419346185A13BD10638D8471EF80438FB02DA52997D4
3AD95F614F8AC6DB3F3E54B5DE3D9670D3318CD8985AFB1C0139EBB7961C260C
49AE6827D955ECEF6CF97A9DD83AF1D85207ADE83693A8A2CBCAF1F5160A2883
46E7667FCCD1BAEF260BA2B66D4B1B99C2EA760E3719909EA9E493F973B35BC3
0657733FDAFA02BC164490D334300386D8BA92EB845169A6111E425BECF28937
EFCC79274DCDEC538E4257458F3C59603B9AED05B97B7099B400E09CAF55F08D
65A28FCA65062E70F4703BFD19C4AD77072FB9419F12077754BA3854A60A3676
CE5C849E39FA5AE08E56576D2148D4A90A7DB5437D587ED895FAE799A32B2385
9A4CDFB52C22ADB4DB30D313BD85B64B3C38D574BA9A237BD00A733EA05D6133
01D6A4D37252D8BFAEDCE7792F6B9CE9F6CCDF3711DF5C6BB2F99472621648D5
A1D0124CDE7CC9E489AF4B034AFCE38653AA3DD7F96496A70F081B141C7F47DE
7F6B7AD0BD4DB560CC3A239C8C9F882283AA534E834CBFDFF74725841D81A7E2
CDEC71BEFF7009DD48BFDF977DF5C00EC73685E19184ECEC244A1F30330B1C24
95DBC7E205C4B0C7F6B243BDECF34CC81038FDB1F0ED2F297115F853CC86DAC1
6BEC17A90E1FBEF6E3778DE10A910F346C4ED33D75388632DDC84C1A29DC16D7
FC12AA3C81F5C43388ED23531DFB2A762E4ABF9A2A1A66BC1D438B7D5110265D
D52F259AAC2EC441EA0411B0A168673899B5B925C5C4E14AF82EA7DAAA1F1ECF
98ABA8C7734012E6A25AF871CA19AE6A31C15E4A1934500BD01ED8AB7B79FC47
21C6799A64BB3F2D290EEED6B668E8516A0603526FDA2F6FF94F9E1E6F3DBFBF
D327A465041292E7755583B40F756ACC51751C08A31F2A19EA77B55EA0F968B7
5944FFF7E0337232BD9C8C09493CAF9000534CC7B235AB584B2D20615D9B8F27
FB6460B52B45E55D5BB0599649D6096FE9E2576E7B319B175433ECDF6F8FDC10
89F3B32AE780CC9D48C832833999E78819CC4FEBEAAE2D6DAD6A016F90A9FC98
C46C9284A3C1C4A3989223E87E6E36612CF3C4DABBC9AE011F806CB488405B22
4057F9EF2F4F01820CF22CA8A3A96EFAE20ACB93C20CE92F17F26DEDB1C48ABA
276998B02CF8B8A7D71C1B106C8104BC8DB6AA0E3A664DFEC1064A05C3E613E0
93228678586D1590F4C85CCF00ADB957954F393FC406C0129378B091F6E0E0C2
ABC7FECAE53112EFAFED3434FA017B58EFA18D7DEC9E43F0C01CD3B2F28F6095
2D93E3AB87C6E8624038186B76DBFE94AFA917EA73EE0AAD14A6148B140749BC
F7BAE63A8A6EC181FA712230610C8D83F4C9F5CDE041E156D38BE5D249198150
989F4B398FD87BC27EF47166DFB2C258B6D15CA71BAEB952053C409CFAD43A87
7A7C420006CE3E9ACA17DB100BBAF997DEA662B7342E8972E4D091074ABD8770
A5EE1C6ECDBDE6E7CCE3CED54CF3D4155958B51CE6AF7BCDFAE30B8A5E1A5CB0
253DF184AE4B6F6B5AE3D2A9E74D441094C7233B1C98303DF6A6BC2B0E11E9B9
661DCFDD9639899E5D9FEE38BDAD79DA4738D0A6B8DBC9A0BA53FE83E3858C8E
8D7E1FD045ED9CB5ABF69F826ECCFBC849C74259C8FFEC4ADC96C80FEF53350C
650C18287C6E4392ACEE9A1C8FB7FD93930F549CB24FD22BEA989E0E0919A4EA
35FAC630A9090798581E1EFB7AF0F1EFF4F1FD4C20B8E3F22CE2C0394E8FD72E
41FA74008E7919F1710B910C1606DDE3119DC1C7324B0FB13575A3128991794A
D36351F8A8B4A09FC2920E1415954373AB66CC420BDF3B63357D83C3C70DD9F2
3F9AD5A80DC8A9A5AB7918FAB070E18406BEC009B71FE69D2C7D3BB63FB1C371
7A3F6284879D390A28DF1147641655C135D20D597599E784DCED173FA7B07BDF
37D53FEDEBF0E3B4CF736D93D12BA0D3DB05697AFC74D7C4EA8280E1DFDAD75B
23E62042785FF149970ECF1530AB92BED886B0533C7E6B27BE37E5B125D4DFF1
1B0EA6601D83CFA2183777A39CEB3FE5F40AC5A42258DC11796E8F834E7FCC4C
523D9D419D7B8B274B84BB526F68F932A96A11C32D2AE1A80AA67CB6961FC49D
BA6673C707C4F13E833E87535CC996F5A25D43B104DB39F02F686DE4B50AC46A
084588F9C12E70131A55B77E3CB0CA12010DEB5B132FD4C5CB81AC884115CCD2
2A8E991888FC447F1F0D5A7F3EA3C44ACE97F4BD5C61B72527EE55DC55A7ECE6
AE8CD7477D5201D4CAC9CB2600A4A8529077F601FFF29FC192468E18F86020EB
5226AC4AA63AFB2154D8487846F7A0B2D5DAC354F556C5B3297194D8E67EE98A
5BF2D71373EA20F24574E67549127DD84E9E34BC69B6CC0979FEDD96B4FAE7A4
0EE4A56DCF7B5A180BEC62107AD70DD81CCEB228F0B38CF55FEBC3A3C0A20108
9663D101BAC1D91114CC7163FAE44FDB03B6DC1452701BF67FF30DFFE27926F7
BC36D4FEC0DE3408126E4CDCC23EB4C4C11D3258CD1148F1EB8E749D0BB0FC29
29C947EB798BCBC593CB25AFA78136D81CA57BC0DB1A1FD91C4EFD87EF896E2B
0FE4E7F1CF585A570BBC4F9DB7BFA685B2B8C6390DF5928A63B5DF27655E2660
22111832992AB6D2E106750CA2B661277D352BAD8BABCC04A55D19BD7552913A
39AA12B1CFFCCB645EE61F22AB20883A8D5D9620DEA594A44CAACB562DF7E455
E9479E359074FAAC55DEE7FCB56C3A942B263A7802E665BBABACEF2ED4FA893B
D5B7C7C5181BF0C42F2ADBADF0736B7C76075299F9194272B213253D1A8506BE
F79EC5245163561E4A46DF541B088F55D76B2F86DDE919FDB952BEBCB3C31FC9
AABE7ECAA5701B0D2575AF8A8596254E97BFA06B1E19C9249E4DF21EC925491C
9DAB191FED40361DAE880F202DD21BFD7CC9E5E7B232CD9570DED42DA872461D
296DD7D44B615A6CC13CA81763379F634CC44F12A7A1ADCA4A70F9961A02B350
570BC020E9C61F464D8853471FB6E4184C0D86C89DB57AFAC88E1B0706A71C4E
6BFB29773F6CD973891298906B9A5B635BC4F7461E4F38E19D26A747C4740748
F9387D8A5E83CC8AD922B2A8BDECF188505120AADE0A635C595DD6FC8268C874
324408B4C205D19D01CFCCFA831F6CA298CF705A34A33037FC7E1FB8E30C9CC5
D55015F85EC6855DEC2EAB7B123D4032CDC678C4A49CD912C80C87E3FFE1D3D4
047BC3147C419D0E92C1FB18CC4B968D70DFD13C6223FAC9AD312199579CE312
9549C594D33B30DE0A59DC9A63C681536E3296CAB854010A9DF87C786FAB2366
A812B1724431EC8B35B4C997B3FE3D863BD1FE2D56BD513E5BE907EDBEF32C86
BB3061C215420F75A9D089C7BCDEC50559B82D50247B7737782B74497CF608B2
937568560967020317A1404543F552B9187C731E9182C7C6A1D52CFA76989FFA
E66BA465DAC7EC07F731E0BB8C7C8ED352E0A1E6DBECDF9BC70E96B31C3CE4C4
F64DF379F6E9B6BE0BBBB40898DEAD1EED925C55E4B0DF0EF148B6BEEB20AD04
C92944669CAF7E459463C9479A29C3F294EE3C5E96167E98477FBA2EF872F805
7ED2EEFEEEA3F537B46BAE19BFBF74A04A18DF5410EEECE6ED8587BDB04660DA
44963FE1431EBB1008D8BC9DAF2EA84715738C62BBA2C6AD31A0D44B1E9FD3E9
E8CFBC313CE3671DA58803170DB43BA10C7628A9A8A5208EBECF343643F13839
86C413CBF283AA4E1B6102C1BD67947E7C878597B3E9F6D24F2C44C65C620FC8
01B9A0375562B5E22A6E3A800AC4C443525D0FA14085EA1A862537B5FD475E93
1A056CEC4952227A4E7E867CEF3D39F9FEAA332AB7B25766DAF5EAB13A5D40C9
18F5C9D02E38A04BA16F900438DB5AB1A197F379C9822FE6A53BF48C6C2A7305
F0681D3C420526F9A0BB461B4C6C0582F6DF048C0030FA87CB85B3064FACBEFF
A4FB08A814F2DA38D91851AF92F6F700DC96353D0447C94ADA6BC0B6E8ADCA4F
3F6713690B69FF69374D5E55696870CEE3AAEB03B082007DC7047F11C685DA2A
4AF9DE5A504103C04969E95C6756DD5D25D068D3A99B6BBC12CED6CE3CFFE778
F777CC3E93D15C4CE6E813A69875490B11C062CFB93609AD397D730C39ABD488
316319472E8C674C2B2CFDEFAB9CE811355328EBCF64D8BAB0A091F57AA4822E
BA974C6CA677643FB9DEDD5A5D241FD3677E133346B521BAE646C275A7A88476
6D0284BED39B54D866320877466B3B77034B66DE606C0D426622270E7A920D9A
6787EA57296B1493035A8AACAFBF0BC297E8F9E386B977638CCE98A000C4A744
C5907208CB4C4E9A8C6C0BBC656A2E0483FDB1E148F54856156FD25B9D550C35
5F134180185E63735FD9BD724BE45E7FE52203587CC0898BA840393237695B92
C5148526A6D9A6D7D8FDCD2B2D8D8EEB1F5D86EFB76DD8171DBD91458FF0C15C
4187B58421CC6D7EAF2726256E80B2FACBC56E34B4CFE1E9FCA889C9FE20ADB2
204D28C27F0BDACE14F6C5485B5F6388CE2ADB1B7390B6A1BA8F0A55F5942ABB
B33A3F5422CE37CB58B87ECB400D1B3FDE031EA1CAE763E41AF3807125AECDFC
2B1A23F157DA4425317A8D8DDE3450CC30F037242EA8FCBFA18F2CC08E3B0CE7
68240F0E8CE9FF939E4B1A6365664DCE60F404114D9A5A4BE0615A047B77289C
D1998D457A4C9E9F77173E5FBD8530DC9CDE44DC931AE06231CEEFE460292F0D
0805FE95653F0CDB7F14E2BB020E97F454FF52713A373565B6755CFECD5AF774
1B12929B9F0348C8070C9B0C9964843B570D56C469638692028C70ACF91052AC
6F8CD045BD8724342C0F026204955BEE20A2C08F0390FC7B12AF3CEE45979BA4
22D15C0A93C2BE6091FF0FC1F756FEE0E51A3A5197A26D31244C0990CD5D264A
457C0B7D8A0B2087D1106B5C8EB03EDBCDA51187777E14F63F0C62F40BC85D30
FFD9D17D7C5BFBAAD917E7F290E6176347D1BC22C2F723DF9685643AAA4DF176
FF91D86BF336D869112124C58DEB491D48D06EBCF95E2674720504D701AF157C
A75FB9E0134CBD4D225B77A88166768942CF7E11D8AC59AE55F0F7D5F69DE07D
FCAE1DA5FBE871D8035F777CF210384EFC666F3654F89637A3099F1E6F704C5D
05B3DE9003CCB87BCCB65D0CC6E61277E23AE3D35A9206DB8F5959CDBAE7DC0E
CBEDCF76159FC0311D52E6B44E5A78F827CB355DFFF2CC1E4B7B414A39B0EEA4
060A4F7899121254ED08F74873ACA04FD2C5AA94490BD2A0759BD3D69D22D1D9
602FAEEF9CB210342EFFE68AB510036C9CA95806960DF734AFFD732DD289A3DB
D48DAA0E8A71A059E26789B12EDD6E57CBD83348288C778F0F49D6A4E429D8FD
F6C33B5F6934EBF08B455B33BF56AE6BA4A75FE1CF748CB6C0489438BE89DA50
BFAC7999BE4A27BE266196D2E4BA1BAE2EAA53FF433AAA6D12256F204E491041
71BB3F5BEEB210E4A527D78AF0520DAAC510066065302A501CB5FA4A51F356AE
B1B446424BF56A7B1690AF5D4527A1727D1082647651CEC46292B3F947818628
AF05105834EBE00C63DFED6DABF4676155F23A62F9C9077CB806FC908E723E78
A42E89FB6E428C3496D8543B1108D33381F69597A338F34B8F706E66B4481823
B60F89780116BFF3788AACA2DC8EFBF1825630B15574DC1FEEC023C6A52D5D36
2334DECA487AC3ABEE33594D4E0E7060C7DA482C84EAB93A287431B6D9C3046E
D297BBD97B3B32407BEC0CB68BDA78F61B61AC98702CD6DD0FE4D543A62F8ABE
3B31E04FD876777454D4220868A80E4946DD1F1C5C8605253F97C770F77036AF
9130EB66832541BE111E4DDE896216459CDF3E65EBD8F29C2869379261E46BF5
A725FE56025D1BF0E162640A289060DE4202AFF6751FB0E9271CAAD9E4D8256B
35E8D6A897962EBECEDD21DEF42A0ACB73580AFB96DBC17E8CDAF6DD7B3F01AE
728211B0CCB196A465C85436F7EE791CB407A7959F66154E5554A687F011A265
E1C354FB1F20455B218B89D148304B6721D41335A6014C1E7AB8CAEB5702B719
F01CBBF0613EDEB93A5B58BEFC06D265783554B035FE324B7493BD68F02121C9
CB4C44F3D0AB042838C763686291F5C8652F345FE02FE7C0F87541416B915336
37D5D26AFA0DA6E544394563D24D8C87FE0F2722FBAC787689390A5C3386D1D0
94605C22E58B9F9C3E9C6D2F7025AE92FC1228018A6DF526D5C66A9F11AEC07A
100C7CCF059749F1752C33E6FDC967E75503D554FA90FE87FF6A567F95F19017
DCA4D146BE0B4BC9AFCD01C8702A0376B8EBCB9AB4835FAB0C9F2051C82B75D8
E0E2385270883DD1F55A86F24E434AC076E2A9559B9B8752EB8E57C508AF4701
72004C2C2D3E3F4BA139245E95B76F3695B0B014D1996B3C557F2EF918269225
5F7A98CE9B93A645D176035EBA0B028ABD6FDFB38BE88C6F5D704FB871BC4419
F83900C42DD44F3D393FC62DFA07074E9560A88F80C626336EE7DD39FE52747F
FE5802597B7E6B04B22D94CE00B2E04F97555E41856D173C6976B8C3A88F8D12
054E72C6644723A622FC735AC8FB105ACADBEE6E9E1E0D6F81F30265162EB57C
84214E9F17E255BABF9FEEFEE14143654B5371340E1067A2A61839FCCD3CA7D7
B47F2FF82DE2060102D12C16BE43A0786A9DEFF14DA969A656E7F4E76D7634AB
97167A72810BFAD7E40BFB5781397E9BD4BA26E2B8960CF88D9EB312118BF8F4
3D1784108F18DB3ECC698A6A7443C25C291BF7DC9A2B286DBDEF48DCE63F3F48
69DA9D77CAEB4DC19B2081ECEC149972C29C0B7A875CE9AC11C85D90DF254B1A
246437AF14D447E9492F907BD5AD2F14BA35BB6E9431F3B1D4402813197CF8F5
95F1555AAA669C28B477CE801EF0680407DFD556E3AAE3C6CD20FC30E38AAE46
D5DD4914B117ED27EBA786DEA3D1CD36DBE5110E1D36C2F94E2E9FCEC297B61F
93876FEB436C6A5EB19872F089F84176B025592D13AF7C2E28DF5904DCF1B0B7
E1FEFC305197FF2C9E98B6DB2F35257FAE66AFFB6FCA8EC40F156F3C1673682F
43F27810437CEED4242B5BA9B8B15E67BF880AB2CBFB7909B93FBE74BEE6955D
3E4DA1C90DC252CCFB36274DC69EF2D60CFF2873563D5F878C7FF1D4F0054D70
678B01042DD4773FA69236E0A2EDD2D4D70E20FB136B462024F6EA736DE893CD
2E5F494A17B75DC6D6A847B5D14C9792317664F115F11C8CEF34C6F6704BEEAE
D43C369736360FCDAB675DBD3FBD41A8221FFB627AB23B530FBAEDEC870ED930
A542FC76B47AAF16104E604DC05C7990B3E9A8315D6B938837DF75D79937D901
4102CA922C49DE8429FA026796EB130B5C4412C3F8FF663005AB32CB4B565D62
0C2A709C44F011D146825C1B3331DFA06E332B681A450A2957916CC7BB0BA7EF
8AE939DD00EB511CA34A70D944561F1DEB1CA29248FE9F7C891290A2643009F7
C21A10C45E2BD3C34398090D18EE2A58701D1389AE6E5484C48147AC9926A4E7
A830C08427347126EACD37721F2E64224E0C8868E14D53FF0C5A434F40E2B093
DF53AD147134F40174C648FD2C212DDAE6A4F7EAD282646DE0ED1D06828DCE13
D4F8E57C0C66785D661A19C6090D596AF51562994954916522F77D528434019A
1D2FA36F077E64D5BE1190CD97E584443228458B4243CEAF182EB5F9EA1DCDF8
0F8DE0071DEFE16785421668422A49EF8453EABC2064828A2254F5568A8D9E0B
88B101C2E73CDE30808BE614306731BB0705FF8A83B24FBA2ECCB1CEC0F08187
7B3177968E6FAC6F35D0E9C1A9CBBA658AE8548C417942738639656F728FBC72
577848C5DA4B9D780BD6AC703262537AA03AB6FD0D5B742A7A450921EB4CF52F
89A6BEF1FF80DA5C0703CF3745A7FAE6756223F2FF5B5718B098E5951AED115A
E9D4C6DABB42C2035536E8F7DBDABAE435D3C02792CB44A20B258ED67194ABE9
DB2D7C6AC84013B6B4E693A1D158ED9866DC5BCACA8616749B95B4F1AEE9D2A6
EC2B2AF1D74131FCDEADADBF729A077899F7AFDAD204076F8CCF230961BE8AB8
9D792D6902A35DFBA6DEDC6565AD6A3725DA591572F4AAD6612EB12B2A3A5010
975536EEF28F9B03CA4C49221E676C846181D3FA93BD49E7FDC803C2554A8CFE
209D1497290B74D6D2EA3117ADA2CF91C6557EE2ED5B4CDFAB2976D7994CD3C7
3CBEF771A594437E6E1C6B0F15FB3102DB7A3E86E3A3BB7CDAC928ACF5E79F88
0F462C4BD3D9B421595F244A4E5F4332877AAC803213ADD83E2C032BCA772681
F26A5B51AECE84C5E04B6B5EB9E250F75311BEC3A57223F81F1D692458D1034D
72FC084FE35C452E303E6F176642D0E8085D36B6E7B352D283B22946468FA6CC
0A0616F0CFF15E0F0B55B5AF9FFC5ADD3D2B5BA7E164B1EFEFE15727DBC431CC
1EF45E7241D4FAF394D14F4872A43C571D9F5F844D4988A574FB12CDDD4F1347
213C932753C6B1FDE68C185058561D1B33F89DA1F4B06AB0573FC983DC195650
563864E4AA635E37C5BAA633B6E50693E1CCDAC46BF915273C6EEB8AB8A970AC
962596E5DA29211EE28BBBAD5C07718362895909DF66C49523AB41242F1D916E
D69D1B7FB6EB6F5A69BA3C34DE43B531F84B485EF8F360082659FFD2ADBF5F5A
5543B4D7C02512F2C2F5165C65665F766B45B6626B71F5C9928F47AA60DDD0F6
921222592127259D529DF1B677C942518C43DC9DC3A194F02B5359DBA130BBB2
D58FAC482F5747A414639BA999DB01344E556154D78DCED121FF17DB462F6176
0437AA24BD8759105F6037F0180333B6DC801358DB3440CE8EC1F099A653A655
17C9B58FB6BDE6F8CA61DC15A001EF34B710BB4BF2752A0771954D78A1D2CBDE
F84D33056576A55D654007E09F408B6FB0408FE86A138F430E8470A2D7137E9A
69AAB13B8C5C0B2D0DB0496A6DA3E670E6D13BC51C01FAFED3D47621376F2972
37F5B6C1A7BE4066E1E941A608D1ABEE882F8B8E78028CE8FE4A400A7141F2B4
2864AEA61576CC7CBCCB3C05BBC0027C40E0F9DE9385F79D598998FCADE704A1
01FC29A0624592BEBF74CDD68340D52E137B1DB6FF17B4809E911CF3E0CF8648
D24473A7B6BFE9313BF8FB4E5548CB6C50601D15F422103E9665B2EA92450EFD
0039F5AC3ECCD606D87B91B4892171B37B2FCEEDC2C799DD4089CD19FE8F7F46
E6BC5052775F943FB2EDF4ABD16D2FC22656FC34B31DF296E51991008C03514B
0F8F4C05D9FA435C60FF5E9512F88A4B57DC39AF183F556376AD9D14395ED249
0A114BABC2D268C833BEB10F205B7C98854899BDB2E4E555BD139F7D3911F48E
1BE5D86F74CFE9E43CC26690F0968CA1CD728569A52EF8B6EACAA0199AE671FF
03C2E7D55DC081E8B58F2F29E19F7D715AD567F556BF4F130DD085688DEBC02A
6E020EF5101E41C289C854F746DAAE6D9BB09426778C3D750976876ADABFD96E
5F335561C019BEE7F28684F2C4E0FC0D4D59A75FE8DFEEC83D32631D8007A8F0
5175C4C7856349A8B2410135D41EDD8AFB215B78478AFF62C3E3342FC26AAA58
D46BECFF56F22C1E232C1E9F8FA4AE4EFDB0A7885941AD2293441F1293128D0C
9D92CE1AC3301B7E99A4A14404AF24867B32215B0D48FB75CD72BAD117EFCE8A
DF16A6EE7923393DE28C8107A98B612A4BC3C2E8B2504E0CA6E7B65FEB61E02F
060655DED219AE758B5A5537E8AD1DA5DD739C12193809B0AF19ED917C49C746
0B2C1E8DA8866E52676F8168BD0EE5062E73519482F206576B3297FE1FF9AE44
9970DF43EF8DB3471214D9354A86460ECE5D5F768CB95EF9D81C6294337DBF62
09693644014E579BACFDB7DAF89C5D10CBC2237C9BAAAAF89F14D3B913E320F9
F732DF9D07CDD357005F19BAFE0B28A607D5242312EC254311435101EEE86C72
AC6B102CFA346BF944CBBB0E7BABC0413F678204811C567463DFC21669F4C261
E06BA93FF60A94E255AF8AA00869295F4288751BF400B06308A19A4FAC9B75B6
C623DDC0E219E9E5F154AB0AC3CB19AB4DFFF337C125FF31952767B84DD954B4
776D965B8B4DD8E7B6F0B4BA11F6D5EE1BACCAB251631DEBE79B3715AD941042
EFD4976ACCE231C870B5D68FED31371E9E7168EFED80FA6C7BB214D4F06D4E74
AF9515BD25333EC54C7F4B1BDF2D2514B0D6B969FFB46C0E793DADEE301792A7
EF4CE1047C153C87C51B7EF00AC19E1099E777C86E198C354D1A5140E0073F87
CE74F740B91CEEDB54EB08384809CF652F1E602E7F2113179185FBAC13AC58FA
76B08A81656DD25A7835DD6BA89445B188B00469201930BE3BAA9104DFEA7D36
3CC8C59D4D9C21CE25814E30876470A4E5662FC2C0B7ACEEC776DA23B6C0E2A2
5259399A981CA0FC0A6DFE97CB6991FBA6F70F7F30D3717A2301CA0EF153FA9D
4AC7A752DFB4AF49D129C90A05B4082DC1A02EA0E2E87060FC7E3ACA78E59AA8
1C0B0A6BC9DD687A18BA25D37CED0CD4E163F60AC25471C19ED3B2D16493293F
09EA311F4929576988745ABC6D79FEC5A3BE33A9A0285EF5BAE463184112B22A
A1761639E638CE9D89C4CF0AAE1B38A2837E1B44CA4A16581287CA52C91C957F
37ACD579854CD11DE71E1FF054A18E11BFC8F0677F7473BBC8F898D0459DD714
6C494FDB620F62B87A086EA682370C732149B77D4E10D7AD8C044FAB16B54639
0EB9A51AD650603B07F01FD68EF9A06F477D8C572F99D36611062FABB2C20004
3FBE7416A78ABDE36C7112AF5D2ABE34E3EE372E89B7F4BFE1AE8559731219E5
1CCAAB793F654A075B7F9DDF2F69BA310ABAF715D2C3A01E85412EE818632FB6
53FA6E491D33E594461685A92D915998E44876DA5C8939F06A78DA0591C05E28
6A2B3911DD2DCAF057E61C81C370D1AFEEADC3833A540C75F955891180493205
BD2DEE65CA84F47E1D7D24FB24973AB2520530CC695A3BEF144714E73815CEE8
D0341BEA5310C65FAA663F5193A8C83528A20067DB95276F5B088C0682FCEADD
7934373523D53572F45D9EAA99A3FC8DEFD1C316C433B594C12BD673D3276EB9
2C3086463D31C63E82795306E7D17958C6579A912052020B8A3E93A1DADC8144
3986A5AB34EE8529ADDF8D129360326A52B684C0DC9CFDF430F8365C100D8AC8
991F964F19600904BA77D97C5AC75B7B24DD6ABB9FB2082A9831232272E947DF
B22028AA3C61C3B398D5B18E655FC1D5879BFA35884D9911CF355A9EF3F02849
0157D3AF93C4466EC5C14E5899C67505ADA7423323B83BCAC3E4B3C66C02CE16
7717341B0BD24017EFA1DED6BE4CF37AB68E4048EA0F1C09E29F5DA09955BF41
E583B2943F95BD6EBC634883A3649AC48A70B88D7628C89B68F500C3349100E2
E041BFD171E2B9BB9070C8CDC4493D4327C493212D0EC18EC5FBFEC8E252B42E
7ED6931928BDF66FFC0D4195B660D3A17A6127F1BD57753ED7FC9E20485FCBBE
63297C3A9742F8C5D2AF2F5D99AC24128B20E7AD026B5E24A49042981F034749
97BD400029751DD4FAD1ABE254ED9418D4C043A98F87C140F936CF346EBB49B5
A0E536FA06821F2C5159AD41844ACCD02ED791FA047D48013BC3F4A51D27D4E2
D6E2102CDD5D3FB2418924C58E3D03BD8BBC9F0634622BC349B9DBF0147EFDAE
52C0E437F48E13E483D3EB2263224CF93C5B88DFE66649FA4B32EF49FDB297CF
402E29FC6489D7D99C7C3120C19BBF4358852713E627F85FEC816EE8908F5157
706D62B383E1A1E91A6C2E875A04FE1F93ECF1BA8F9BE9CFFE15D71FCBBC380B
4D7A852FA525DC0D71BC11DD0EE4F42D40406EEE5A4F13538900A13A8FAD0244
738DB58EB64C1F5739C1ADE9B4055E20D746C15AA5F11A93FBC7EA976E731A98
877F399CCEF8F36423024A6BE8F267F25F7D61A5F605B51C06374E100DF357C8
513B879FA50FFC65E5DEB3B028E1C608A94379C82EF325DC1FA56990994AEF1D
9BC4C13D9D2C27ED558F7319366DF7502816290DC55E780A0E6075CC8E27C472
6F2783FE91FC663FFAEBF3970D61806FF7040BCA28BBA6DA8D07C118D4558E58
B7E0692E1E49D6B7AFA8C0D2EFBEF207657DF38517AB5B65C91E1CF88F1BE7BC
17196B7D186FA0408D62BD50730D18F4CC52FF4C65EE6CBF0452EB5D9A1CBC14
6FC9AC451E60F8F416A56627322F6F6FE45BAE5CD84530A61178AD34C3711276
23497EF9A97032D91759C6CC1A64A53F8544FD780E3152D0B4CD101A75796D65
9501C7F1237E97D404F5E1BF4693821D06E19FD84CA87FFF7E5528627C390CDE
744A840DA731503812D4AF2570CE67973FC9E94608CA675915665B1DB6969951
1F0608D024BF73AB654ABB538C3B891799292E253B941312855B22EC1ADA6604
1499E52DE652445BB1DC141D05460335B45A4632C609B15EBB0AAB59C6D19BB3
5A17BD4EE00DE95833BA77740BC0CDD0B63EA856DBF48CA2635DD76BE98617A3
F627A47418B5CC047EF9F41B938F9C9BD6355BDBE9B8E19C68C1F48F8D19A097
9925868C126B588B9DD8C48348B13DAFC4D7538AF44A083569FC38C7CFB77662
1E302748FD6C5AAF331DE4CFC4C61A89C261AB396B152075E1BE0B3EBA0B11B7
A2C444C19DDB2E11B32BB8F371E0FD5D00D6B30371349E3DB2881857C2E05B01
ABF53B071A2DA09604E1D4E903968F312D0370FDDAFB79ED84456B36DA0515D1
0F757B89980F906016F5F8AC5A02B26BA09170071077A32C976AEEA77525E5ED
6A44ABCD7C412714F84B3C470EE2D541590572191EC825EC2A3A5FF20A568532
519B0EAE5C0CD8792277CC338F345EA56D9F24F9F8BAB4DB71AB6202371D344C
D85F43B496C2200622A13BA832B8DD0D9AB88719455336D35C305D82FBE22886
813C952468F096348F157A7CD12B1A8AB09126F11996AF18A6925118C95717FD
3B754D136360F5075351ADE05F6461CD7A1F6EB6EFEBBA5104ACAE775349A5F1
0B2675E9D88AF3B09124A9E47F4F5A8AA013C5BE8A4A9F3E59992D0444BFAD73
9879DDF488E5850C8D6BCED7173ACC6376DAA38DF78E2497B1028A6597BA0C8F
2E42D4D0358B380B0229401E7E7CA7D841132579683385044C7EFFFE6010BBA7
694BCBC555E556F2BEC8DA74139265F9876AE05F0CF18B80F33CE74ED10C1312
EBEF4D8E80675CEF5EDBD37618D2A70B57FBE380948BC95C33695F8F54FEF0BE
3A0B2F1040A849F745FC1E417D8EB0D9B73D098F29F52D6BEC9748EB500B32ED
3ED63F00107E191614DE292E2E0F31BCB1EFEC0FF91D76B565BC0A76AAAB672E
97BE4592CA960CBA7B66EBA645D1C7B756960DB5749FDC61D95A042FA5EBA937
8F7C919578F56DE9285D360D07AA466F565AF5A70AB9F9C732D5B0E1D9DF53AA
BB9551EF900EACB563AD476947809D3B057CC590D6A7C5C410AFBB152E1D3EFF
7FDF3E8291193FD67366EABC1E2EE100DFE1ADDAAED1A55A48480D80AAB82614
6F210C8100146B91A4A8DF5D4CBA085A9212EB01693CBA2E0EE6E95F3A826658
3751FF06E3C80C04FCCFA7861D7C86B646C39DAEED20CB723E6F4273627FD090
ADDA8D61C84F0A4E0760C48CEA73CDA9E8C41BA7F55327A7AF1DD8F58A54E211
C018E834195B876411A2C717F9813580227E9165B53632705D3EF74CDCA12EE9
AE21879F60692EDF56E5C3AEB96783DF5DD853BEAF6C8D177C4519DECE82D1EB
9B7F60801742864330CC00384599FB6722B0C785BCF951DD0B52B321A3613553
C1896591905A71F13693F61BD1BA217C45A8D633420C3246C42473E8A93BF9A5
3519FFE4A4B8B69A793790A30B5AF8082EBDABBE34548BA12DF26ED63A99B16B
FCDD7FE7507C2C270AE5E428F44A8250A2FD5396F6D518E4C8FFE607E39FA08E
04822118F7C9A8003CE1A92A3B68970270D8A0ADD51924E2A765590994E90391
A7C91B849882AF626EC7BF67B478A14BF05787B0BE9ED2D47E34001367591233
3A66BF26C0BE2D1CE64F4567E6B99008E22759E372DF28BB7DB88ABA109140A8
35F6D1E0BEC0DB12296CBB1B5970900F8D19F9657BC55D6B95517D685A8FBE6B
FC71D9117985AB13C803A0A55F2CF767976FDB222BC4E9512DC72662C2143310
464DDE8661B109A9DA76E16B618294A0691D8529AF43ECDBE2A8396646BB5400
29112B883840CC0A296F5930C50B0D900F414565B1E95947193604101B161A8E
575F87EB282F3AF53D2B2D798263C7A9760FE78B7DFABB2880E42EF49920A783
37983A155E3C5877A8EE77D4F385B26C86E611D63014E1AB644F9F198DE1F6CF
67ED3DC207F01AA766DFC37B1355EDFCC79BA5630A2A382B165E51DA03090888
2981EE187BE7780FEB3DAC686A435C6B7359438C42FB1CFFCBA48CCFB46D8217
0DDD5A2293FD7D5345D27062E51F367812003E61C1D78B8252F31BBB05B43851
D82F6C3FA92BD43CFFF6D009C25539CC7E10079EF0FB44CA8119466CC69DA318
8E744A6C568A8CF7E44800DBF2C81D2EB66615FCE14A1A9091C49477F9B60217
FD8D06E873A317B93A4A0FD41D4FB71D0D5026DFAF5DD4D27CDCC170216FCDA3
0F572348D928F429875FE38AA151725E01E33E59D627DFBC7460882557C57224
36D531C2845DA81F479F4342E8A47136DE674C7D1AF1235847759A71F19DA56F
AD4DA1C42A15A9499B0C829F829132BE6077E4D42D0B1804227B1F17AE2B64F3
F07572F722D590CE4E08B5E631F919F638D693615FC33E49B6D154985D1DED29
E1B713DB47905EF14B30C026381B17DC016D90F533A5DA8B4B2457B417561A0B
4A1A90D55FC042F648A991FCDF096CE251AB40E97F0ACCA986769AAB4945E737
07D4786BFE5D20486347FA5F68B7E3C1B119892EFC476E7DB1668FFC287B5325
7DECDB755692F7BC37EB68E87C2581EF64B95532026CDC60A84F9126EBEEF1D7
F366A538A7A84F38695B6C7D38BE1C0E69759A73C22EEF36A76829FB638DE00F
948EAF2E2D87156585876EF5E626ADADD9AC133E999E183ED9E426D8C191A0F0
7D6FA3435DBF766843CA7CE4126B7D9B5AE320D40E5DEA0158187DD47CDEC445
BC6932D734444FC5CDF472525910C72431B96D0381142C9BED1519C678F6A234
0D5D5BF7691095A4BA338FD78AB9C5A2A90F1496D89EFABEAAC2B44E6646ACDC
FE4642792D860A410D283143D1519A303B79D4C6D3A6C02B0F84308AAA7B5C21
D73D22652C5D57AB71970D18509B51DA828E9EA39387229765F25930FDCE7173
8CEE0ECDF9B2EF724FC7D93FD7442E4AC14AFF695E6C3B28A90E801F789D60D5
DD21228F5A103BC0D8A58D47EC3224BA6F27B6223EE3F4048BC112A4A7365D3E
CCD2BC7E94DEEE22766C5CC5F413BECF95D9493AE0894A174AA3A76417F59854
496CCAFA9397B745375C40E036332BCF689F9795290CF77F4108107EBF3D9A4D
EFC8E6E917AEAB0C873B531B4F76DC77117A972010464F6801C2ADEFF5371F47
31EEAD6A11B614219ED57681D0D43A8719A9CAD998DC2EE81F352F5ACF474B8D
BD4F64D9120C4FBB4DE7FF355E42D5598FBB94A5E379FC49DBBC7C7BED0D9F20
225C83AF71115721A5ED93B7C1ACE605505FEBA93EBCCAAE26CD5A3A04F82AC8
71EED355CE4DB9C09E208A79F5208BE9359F1D50DA20AF0855489CBD59E36A6C
AF172474B5E40EEEE9FFD33E6050484656C9F98120B432F8D306FC76E664C22B
30E067196B08E22A221FDFA78D1C070ADC92B1326E999B67A534C35E5C05681D
E6D175DB139E96323E5B135A2B9A791D27B69A645B73759C510F9226ABDCDA68
9F208914921DAA768444DB8EE5E4A3AD8853D85BDA80B7A3A98EF329D9DD9E1C
30D2E5E0AA504AF57E0DB1C2ABF2D5B09F69E851696DBF0A0CDB066CC90634D4
D598A19CBA9A2B675B4F9321837773F5FB1037EC29FE983E3A188D3AF53F6196
BF8A5BB4D226FFE77F5E4A31FA9FE013710440168DA7AFFA42839CC794AAE7BE
689F3EC7303FCFDE4551CBCC78D6D37843F2D59CC63F322941026B78BFA3413B
F743C2DE3274414E58D1534A4077CD9CC2E7123C7CA02BA1C1D99AED76E5F872
180A9946D6C6E090259092606C088D4EB98CD70A376525C80D8C42712A3893A6
E4ED0792FE5D5C97
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols8-Regular
%!PS-AdobeFont-1.0: LMMathSymbols8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathSymbols8-Regular known{/LMMathSymbols8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols8-Regular)readonly def
/FamilyName(LMMathSymbols8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathSymbols8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-30 -955 1185 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F035757560E05960E2C327020FEAE317
24C484AC0CD3C1AB9CF35516622A022D6CB83DEB8126DF04762C901617B35492
98158049D5C65DE86143B7F36D36233A115C36DF60D3C55816B2B0B341102AF0
90D7D4E00A7611262CCD366F870F0EE8175688261513076B608C7E160A9A79BD
2B66E2E2A89CBF6D1703854915ABEAFA09718FE338924B5AF1FBF1209786AEB0
0026C38A2C7E208E6C306BAAF037DFB0F3297EE1ABBA65247CF72D0F78A9BC24
038966CE124B94487282B69D6BC0B5E17441DA55415B5369E451E2B0D705FCAF
3AAC6DBEBB8AB0313C4C201F851DB96CA9EB49357C3C1AB73F0CA2110C994680
5AC8F0D760C03F71C92CEC2E1A3AB84813D389BEFE7E0C28FC76FCA70704BC4D
159EE8B490B95CB09DD01A4122A686AFB8B9C69381C8C303F9A3B695238C3BB4
CB44B3BBE50E2BAE63796BB51D945469BB75C69F7A758180B77CAAD2CFD5951A
23580A3D45083C8368543DD37AB49705B939804C12D4BDFA730845F7E42A6C9A
B3F0A376F44DC297393B85E8A18C45C99260BD499DE599CC0D76EBE4AA7D70AB
348FA87CA9A1000814C4FA99B4EBC35A0298AA29563B030707F3EAD9FFF7BFB8
3B347C4A00BFB392E79B79F413E67A73FBB006EBA896A65CB21BE940A0940640
34E08FF806A114ADD3FD42BB394F76CC77DD869C46DEEE20839C9A2FF73B840B
0ACF238D333719F5947DD4C39B8E3F070EEDDA1A39D526319828FA9F47F03D8A
245D8E215B37959566D26DD98185223E4FEF01676650EB4E26C0A425E6C23C50
4BA94BC88E08614769C017F6D4F14C52D7189D4AF8CDA367D8B04CA8D3F2307C
0A7A179419A80695912F456637F539123745CA8E696E250E0BA6B7C6277394E5
98A8799C29B6272613C152B0CAB05F3C7795791EC9AF2BDD416861A3D13FA858
BCB6ACF5BDE40E5DFBC1A171A7280E8FF4AC0D4C8A2199E9E2BAB5CB9131A76D
EAC166A7C449A549EA5111F1750CA2C6E1EC6F00CB6C62BA52D17FC66E06ACC9
1E6B858F9393AF9AA5E69F799E01D301B647DA57225C2920E3BCEE9D09CA5C60
F22B07F24A26DD8F4D6F9C78BFAA8D12A21531E713B80CD03A5FF4F3BBA2AD82
3BEF7DA8C97C30F1452006AA3B1A168483F6EDC4089ED02E567923AE6DBBCCA4
8C246A080448200C2A29C34AE6255BC79B73AE14B980A7C357681BB0962894CB
DA32FF2B70B21AF4D158E0F74652684A7150D0967F83E13EBBAB33588541AEEC
0DE8C53851845A44FFB46A93CEE3E8A0263882542F7F103D13C367EA8E1ABFAF
6486A9DBF6668550BE7858F5790BC87C66492C0FD34DB08EDF842E1AF58A09B0
85A9B7FA402029FE2439769D67DEBDC8AD8C861E90E5322951A2904FD702766B
36916DBA8F9C96141BBF4788FA435556B2B4E1B37DE4506ACC4224CFC00A8F83
33941A050B51B9508758F4EB2DC074D799F5116296B8822ADD743A043F9A6426
88D10767A9F99A072BD4C88CB579B34687BA4953B96DBA29F33211B12A0215F7
5F2F873E5074A7D593DAD0EDD97270FB9A87BE870321A49958B10E32850F0148
68E0A1D795937E61D4556BCDFB7F4DA63A884F9B4B07801D30B1357C3432D6D4
7B72B7D6040410C194EE5124ADFD7A40914BF569EA1F9CA8C8897E839D262395
5EDB3E97C591A3A5927DAC229EEE864B8C0F79ADBF88C0E6C41CC70D9010F07C
1CF9C05960E34FABB6C5DA4D789E39F35FE01F0B22BD9C63B3098457716D6B22
5EFCD0A960F3A2319252C7A0F73A4770E056209C14D721A714D713D5F2BFAB32
EBF815DDDE792B2556A87C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFB8DD9B92CCD508A09171BC12C8ACA32FECEB20
7CAA1C2C81ED075E3EA7E712D95FC612CF97F3402658E90924C75CA278243C52
D4E02E8224F197E555143D563819EB1ADD2248C18E02E18FE3DCF624E37ED993
3C7DAB05959E694040B7EF5F92D80AEAC2CF58EC01BD61D7CB962C4EA678C5C0
62593DE423E11AF90918CFC6E1E8F9DA428296FF0C92CA794AFBE2067C46264E
EEB0AB0FBF2EDA1A8420EF654A1D4E0A295D1DFECBE39D9FF712C85C748311C9
CB8695716F72FD4F80E77DFD7E01E9FB8CB1F2B5971940EE4E7B14727B086F27
E43E6E3EA6EF0DE68E17C9C0F050085274ADB56BAAF193211E48D1B82FE44A59
2A9F5FB13EACEB54AA027C1B87380F9EEF9D500DC327702B132335FF288ADF62
578F30CDCCCF826E4C4CB57B5D5B537BD2FF89086BD0C4CAE557ED66306DF3F5
BA9D1007C869E8594D4138161162682A719FFCB1A982A5CE8765E2681E64B8D8
4A7CD7504E58CB81D0EF03A3EEA97D43741F54987AD65FA54A1BD682F7EFED16
D35D034F1AA5CD4EB628353F1FFEBD0CEB905F10C183245F1B733C17D3B854D5
3BA686CF4088BC6C0FADF9A6C05BE3499567E930F710682B8954108AB7B126D8
255F1A0F1BD08158F94077D191F62DD73838E0CDBC99204AA6AD1309BC5668A2
A524C6D1C68B4E416B248A6FE29A67DCF4E1CBFCE603260A277AEB7F75627333
3E84F341637A1BDB292EADD055C97A12CF0B915E39263AA9F03B21C1F45C87C2
CCB12B59066B6DA2CA24E020A0FDDCC0498D74594AE3ACB0EB4CE7727EA32222
07E864C7F39773638E3BD2FDDA11C79177AD0A23CFB7F631E00CC979AD410F81
3119C0543E091E4820C12FE47E3154789E02FE363C319139350F014FE8A785A3
F66FFAB8D8C9E7E26E49BE5FE558491D1A57B150A5B386F7ECCC0EE8E31695A3
36BCC7BB9F7FB26DA3444238CC33E2791CABC1DCD0BFC3372E1DE72D93AFD1C8
E2635A5E428AB33E24E81346D13A9377EBEFC6206D372675CF43235722B50C78
8C4A02867C68BD8E5FE9A45653BBAF2A5DCA560DB5BEE7054FB8B0A13AB598BB
C481A3240450D1453A1CC1054A06B962B7E28A73BE0B2713DFD32DEABA293EEE
AAA8C0409564BB1ECD1249588C18D01D8AD4E0F0032FD811ADF35B869BB210E4
4A57178893AF229268DC5375F01AB676E600823FEC28C30D2208A868EC0D01B1
4845736F9DEE02D06634547729442ECDC50C90989CC881C3D8E85B76FBB10040
F0DADEE5ACBDBB43307A30FDEEE5F77E621B130E4B824CE23100BC08DC65BDA3
46307E3BD497D7F1E2F51B557FEB6AA32E84F5E55E5C12A81B73F370431F3842
A1B0CAFD4ECE7F0DC8E2A6D644CA8735A4E96445BA9CEBB627718F858DC051E4
3963ACD7E7868CAA4488EE815D40E28CA54C83221810546F0009F98531353C9A
8EBFE7DB9C9A120C2A4E2FED0E63F90B8DF65026707BD39B489E54425A5ED877
73C6B3A8ABC8ABB13ECC3B249F1878A8F76D59596C63BCB936321589906AB242
14F3C046A1F210FE287A8192CBA7D2A89BBE7A7B2DB6B1E19224F04262D6403E
3B41787E1449587E28093E66A9837BB94195E3A4A5C17DE6823755F59BB9E3A0
52F69C7808FB657D9270933D8B167D2575CF146336BB1C76735BE5CAAAEDBE98
C69F89E7E71474CFC7515F73F86727442EC24D46F92C99498946CAB6DED8F5DF
0540063DEC2EF3F83AAAA3F4F68A8E892C3D0529A466C6A310A6101223949B01
79CF7DE6B550657C91BF3116EE7F85B0178B3227810D99B48361133B54A6DFDC
872745DD45766283944D7293D6FB1B42BCDDF2F241AB267897BFABA39D0F2725
E0DBA7C8CE305DE7C1B59DC2184872FB99578B809358856E4E99B28E138E2DB5
85CDCCFBF2B46F01012CC94E2FB30C1E4411918E892630F2AD07EFF1919E9BA9
0194E24A69649F0DFD0046D2EED7AF90313E70594EB5C354023BFA07912408F1
72E39AFA29111A71BCFDDA20BCD6006B0309EF09261B7AE1C67BDE0D385104C7
C0730BEF94DF3D9BB2161C7346FAB11805152716480C0984BA13A8433ADBD629
229C446AF84A690F56A09A84EBB1CED5515C36F2798A89689BED966ADC9AC306
D01B6E24DBB2CFFBEF205FC921305B45B1B8FFDE2A09CF6301F485C8B7DC2E56
82DCE3042DC9767C407C0DB4D0FD1A4881A34FA0EEE7810D69F2428045CD609E
23CE37791362950FB435D1899A47E6E69EDB17BC08CA1B092D4F20BE1AA6BC4A
9DEAAB1B74EEB7B908245CDDB7A093C1AA307DECFFE53A1FE54984DB1360E320
862F2CA6E0258507C6D3DC1DB94102FB88F631211557D3A4F79A8E5FDE69B1F8
4E9FB2EDBFB4B8853524F58D4E1EB98EEBEF1B6C2D330B1CFC47ADE896255DE1
FFA8CC1A09D26342E89B9A39149E124C564C5251F613393060892D5A51B78BEB
3E44B78C50316C61B6FE484CE582EB7FBDC53D9427FE267051934E366F7C7B2C
ABD2C65921B5520C6F70C1B6E7AF8E11BA4798C1DD2EB7D4F962028061B71099
8E5EAE433D8A82CFB15547B339AF376E9341FEB9433AF21E8D84C50F75043419
1ECF16684180B65D9CD4C8CDC57A0BBC0598B3AB03652A6AA459894E119B5356
CED765F73F6935478D5133B9E761430A39CAB0DC109B02A80626A9ACD7856ECE
4D6569F5D1D918A30005C31F177816336B74AF8B9931BEC0CAC75380C714BFB1
BC100B05D19D7BCFB18CDAFB0310935E6C7EAC6B9A8134C4E8F4969C9268F7A2
C306146CEC5039310EF1F4ACEA1A40014BA27BD58490D24B7885E4084932266C
621A42B8A3139CE953DFA9687BC439A31644BF123DA78DD615C4287ED7DD43B6
79CAF0EB2F9F428C431683A41C2C61A429E3DC0D87D76AB6294CF8CC9918A6A4
6873A1769ACCF25B59CB4365AC451FE1D956E1254970C706438805E25284C7CA
AE679F2B7C58BE9909CBFCD273EF5617183CFA64757627D2D567877FDDED97FD
7C9E73DE4D6D4ED370EFAAB4E52F30E55B902ACC35DE87E70DE8EDFE7D803CB9
B4F8D58998C2ED6B93CF62F8E991B754899CE46B900DC93C5A58EADB30BCFFA3
A71EF23D13FDAFE72642854A3340E64896CC6DEA0F7E3AF4C39EE4E68AA31889
A372F02266FE65ABCDAA308258FCDDD13DCBB18E462B56F956B94CE97E870122
A0A46CCFD6B4158BE06C768C73F0377CE3F21E030748189C553B9F62C83765B0
149330C96EC3496F9F2F9B289307D7E0C33BCB7023200FC3221F12B5FDE01011
87BBF9960E56CAA899438C90156BBF2B14596F131B71830D84172E7CD7C05B25
85A53C7CB0DA5729FD6CA218A1CB03FCB945FC24376A45F2DE0C21378769921A
72E46589CC08EA87EECFDF36B819B07306C448777163A723A9E71F504DA5D447
AFE8CFDBD88089FA4802F449B477BE528C3667F06EC5479B0824B87C47EEAF1A
0A23941B8257A2A5EC3F63FD62DD09890F4DF33AA1E70376A9CE8E4B6C4211CB
FCF9709AA29144F3A40001AB98BE816619AC543753969AC5B540ED39E51F5869
98342686761A7C070EA75140331D7A0DD5731F0E395A6CB0412028C2FABE2E9D
C3B57F412A5CC05FA7599948E6B8B50BCF16EF9825F6B20090E4D6280C528375
4EBCB42B38B7ED6634AFE0B2C249699E212509817638845B5604BB526053ACC5
C0FF6206B2953C9350E57657B374600DA75B6B271326A2E7B313EB4598DD7FEA
4A5D95437CBA46D85A5EAD76FEA956126B3EEC337FF78D906699CB9CD7B4012C
474EB33D12DFABB3BF569214525DB9B2D4B34136FDF936F96FFC813FE16DA5F7
9B0F2B3110B1F8C90170E014FE8F31A5FD35CB74EF0FA13C6DA74D7264618562
DABD7DB8E7F480D0521581902848649AD3EBE39E618667C59EA499B7081A0844
B6DC10555D27819E6CAA1CE453A7A68EF1A3EB2178BBF9B9BEA9DEC679DC10D9
E3553DE260FFD590BEDC71CA9AD4AC12B09E86D933AF49B4CB901556E63BD639
1B3C3C3C80C46745E1CA7983B9E80168018E04A84AB47C854C73FC58A393974C
1AFF488EBB29B293905951355C4D4A4F65BF1A72956515750DED0B87A8D3282C
72C634347874775B6F29EB873134F6BCC2EBBD3703E9619F762D64128A18C957
22E6C0DA907A17868AACF3229C176FC26BFBE255AD62737D234986AFF04FF03C
1DB4D1F2D9F60CF2E4DC5DAF88EF3517A2D91CCCBBB8753F92B3E0CDA5D26523
B84CEE3A0429655F8F25C89E65074A52CC6047885F4105DD62F1FB8CC7A4CFE3
22EBEEE15E3395B062B933EB55FA589373CE26568F78981B480F688646A5C8C5
63B8FAAF19A1F6166685C3FDC27532C931AC8B86E81FB0223686074ED596FA6A
922B662575F23B53B7C6B245AFE90258E743F284E22E30D2B418CAE285AA38F9
FB436D39371781DF4FAAD1CFF3BFEAA81F5D11DD76BADDD8122A4AA44B9F863A
DF8127F1FC35DB9CD34EBC684818AB259FFC3C7CE34C9DAEE69D70D010C70540
3B359BDAA5B9ADD10F6F7F2C19136157C6D83B33313266F1BA8B9E065A0C831A
47D767D4558876E85ABB0B8396FEE0C3327CFFEE23D0D7C24466E5410DD289DF
78C335D2BE90B5C581D536596D97F1F463EDD0A9C0118790E5780C0AC27A05B6
4DB13A023A3E5225E0377ED38749AE1F7714AE5E1D649A3AFCBBF060F416C0B7
47EC5BA54AA743154084CCBBC2A47037DDA09D9601412F731039746C1224A29D
191D9E221C06A7EF3CAD09AD5ADE65A51B6A915CA708D66C3EA93A0BE63CDF0C
D9A4546C9325291D11D02F4C2284918795A5B6E6CAA4CDA0371D452F65EC9097
657F51E83FCC22A30D649B80CEFD9F6FDD51AD33D3DB732FF26650A90912822F
9E77D8AC13393AA1B04DEDDF6C37B2D1DE50258300B9BB455AA872810C7948B1
EC866883E78F23DC9DFF60701F4F7C66B61198F8066DD493031D1A5EF91231B4
470B5A034CBA00791EE592FB4DAB538C280A8047F6290E265C8A88331305E67B
EEEA9A03950593605886E125446E5CCB325BF943C3D7F32D49651F5744A27DCE
6004208003A95DA1371E2EE456CC692DF7B71EAEFA2ED09E82012484AF7649C3
FA87A3AE44D93FB7A0D1A7A08A419AFFF7DF7065992B084D567645EE4D2FC29A
888E5E51A42920248E4BF77A7876799B1FD856AAB0EA73DCCBF7FB5979EF5F01
2CAF413DABCB3290E29A0CEE18F02BF93ACF5E651F75F1C47F2699BD0DA86F7C
5E18E1895ACE4B125EF346F608ECCD4DCDCD47DD7717EBC78AE3DDEAB5333174
18A8E967F635ADA03D2EFF80D463A521EB069C2B6271FD736442AF38A52EB58A
59D7A62D97171B45D2A6AFFB7E617C9265B466295CF70CB228FB295850D653FC
3FA379FB4FA0AD9F83269A99D550366B880AF05F913C074EEAEBE390144ECA2E
ABD1ED2BB6C54FAA70C9BA6C6794E3AC06D503EE876C915252EA75E6FA113380
E4E2A0CEA310D96BDFD883642BDB55525358ADA70C5ED0923B060EA6EEA5B735
D0D62E41842C07B79C0E8DC56C55084EE590D2BD58FD9784BCDCC3D498B69CD1
D7C24466E5410DD289DF78C335D2BE90B5C581D53AAA27CB98A914D22E25B41F
E35179D5E020790534D6BA1670B6783FA8DBA0D35DABEB8E162D2EA2ABCB6CC8
DF8E44430383881E5ED0F7F184DBAA9A394D0E08138E5B80D224D4E8FD6F8BD3
255103D823B86B712CD58FC2FF2C9B963C235A59BC191B84B9B6A2D87B85F21F
39F33AD118513BBA722CA46E21F697AFBFEE1989A09F9F9F7F29C1E0C0F28E3C
C64BB4933D3AECC99FEC69C3B047482C0D6F22E851DFDF1315C0679C0906D77A
B2144E810FFE3A942963C9B2584CE14922AAA9E3456AD60EAA44317BAA8D81C7
33BA78C0DEB8D1A2C9BF7CFAF3F6C87EFC09B43D790D3E80AE0EA0AEE1984C59
0DB7EE142C2444A3F4DFAB0C651407A58102F825D9534F2C1768DE55DD354014
B4AD13F8F95AB9B462F7A5950046C9C4A8CFF3CC3738D894770AD27F2BAA1A8A
C49D55D311D7B27E77C664BA4DA424125D1735CDCF888572C3D4E2F0230BB1FD
DAD562E249FC2F1392F7F378BB1754A2E80DE0D9FB55FAFEE3CCC1C812E9FAC3
31FD70975E3A0C72D37207D8A6034994F5A338B85C4ADD0A28C7A8FB765C4A04
DDCD6E0E7854CB47132679FBABF1DF31D16F8FA295CB56D75A836ED366963BD5
7A5FDDECE89ACF7D2EAABC3C655C247E6AA58C7B3A65D90C4598DE6DF2AA81DF
1E7AD672C058BC13013E94942CDCF8E20DEC5CD4696759CC337B6514AEED350F
45EB766C4ADF2EBF18F155CF537A97C212FB23022E75D57D24147D284196D0A5
17320294E3C7A3A1A1BE80ED8FF0A9C509420006D2229CC525B2E21332AF97ED
907BC5FAFBAAE31FCE73C77BFD275F6CD038A6DB9EC1FB4AA5AF31A16FC07D58
F6AD35B345BFA1CF7B0E9545795A6E62188B643BE9FFFFF69BF0E7C694E07807
E04F51013AA2E2215C03ADCA175FED41854EBA64EA1BFCA7B9ADFF7F4ACC6DBE
671126FE078F52AB62DB59A9B9AD1018F245F33A42CF224F327CCEB361EF2E2B
DD7DB751EC8C146E17EAAFC942F80C2313118CD80744B1160919C81067D75442
072E34982759C289C8F929334930B4AAC76A132C32DCBECD227134E7F747AEFB
6809685156270A536E5DC0236DA24612993121152E7E72353B4E4A19BC80F638
158DDC1B6DDD5CFAA56386D2232E51B3AA708541C4671738A1E0CC16CC401640
5B0F10C340F24A30B1C3E6AD87C7D4424486F4D2504B044E802A8B30DF26FC38
1D8D871D0D96566F0E4910D17124056A1F0AD7E9C1807ADA0EE65BF63372B918
2E8CE99142953DBEE0C0104B1292A1F83517BC28709D3864CA389D6CD1041740
7AC6A0DDA1E77D37AC83F0991A4EB1258E47A4E04D0DC15BA4F0C1D12F27F5DE
5E37A07F94A89276B909954466C7032C6FD3DE6ADE20EBA3FA90A309230B93A5
B74FF64283F15EAA51DF4C74CBB662283EA2C98CCAA3F64D2E64AB21C48203C6
08CCC92CFF820CBFE005BB5D4B098F3CC567E9DA9952F5F95048B505DD5C1BAD
049517C3A95D471EAE9D83E664D7CEF78D51D427D2A9126B689964B87ECC23E8
3F19351612FB0B1E70D91934375C410CFB8AC6C99D8665CD7E1CF880F99229AF
C16232CEBA6D7B35526797A8C94EA0723B3062409182103B078B6D4120137695
A8BE5DEC8383E556D1067F2D10E43F158978ABC35805453F84CC5EEC991A5CDC
8C33DBF86934B5368C099B59A7114410C608C749D1B7D493E67EBD9DF99EED9A
ABA70EBC005B7E807A854FD70F27639BAF68211DD20AF3D34A3498F21B00999A
CC476DBE2C5E7F404E59340CA51DBFEADFF2D6856FA15A36EEA17FDFF093D02F
B419CDEAA8924DD923B74F252664C67CEF45743658D8D43AF001ACCC0284EE83
D6B900DDC00EEB5E881FFE9B414C45B06FBC491330279C671334298D0621D516
6AC107F3AA081661CB91E004CEE7220A24C71BBAC196A23123BB399318B4D2A8
36F88D24D6FE3898D6D1C76D8F8E2C75D7460CE135C4E1D0349033D576ACDFF8
68AD600D610E32BDC63998EFFBD8BB34D2423CC6282C145F3F0029A07BA8C929
7BF8B0B016EDCAF80B9043EB61A3BA3E78F64ECDDADF68975D97F94EA8A698A5
CA287EBBD5193878AF0D3EE755BD5958FD3632E670306CAC950F8A1F66D4720D
DBEDC0E0857B057D019BB4C3C1C751481ED7C692CF08BD1EA6C5B30BE280953F
B8FFF50082E28A8D951207D7C494A7B2784E050A11FE8B1CC619F387E700EED9
D0956AE651C28A61DEDA9859E01101F5604685676CFFF64C9F2630CABF2F83D1
37D226BD5EF6EE8EE1EDC4194F1012D8BB958B6940681AEA50C7C8964FB0F377
23C0C4BFA4DFE3FD4AE99F5A8595EA873728E2C8B6D05AA6861E3ABED84D6761
ACEDE777F2D3BBF85031E42B976BF76149CEE298FA46B57981087E31FA46D2C1
91A16ED86E07D8E45FB322FD0B3D25692D2A0E7C4DB93BAC55016AE065951347
39401B0D8ACDA770B340277CE3950462318057F893A50B1BE89222348D7F09A7
FB9144E9162A946DFAAD95EE0B346EBBB899F1F37A0F89D4DAC9B7B0F3348A1A
FAAE48BE88E0E16B8E376035D6D75C10FB83D7B0EB9DCE189314BFC6A128924F
34C083E289918FCC37040DD4771C1218921FD978D54413617494E68E34391E25
42903355658BD278E67696161CDE14626D101B4E117C63F2E7A60627DC40CB9A
B1634701AD9AEAF5D11607A783874D716DC73DB1CBA45D33E0076E992C7DACD8
026D7F4C5AC1E5D796C0E5A79C61B5BF586A0FFF6BD2983A840B68D656FC1584
2D694DFBC7D7800CBAA90F3BF0022E66A54BE1059BD5D224B674AB4D2AD930F7
F724A305C4DB7BBE9E3E9D166FE9AF6147A8BC97C6834B365C39F4F5C39DC16D
F38ED4E2751BA59C0E99173A4757421323238CD6EC545ACBB56D8F72415A1AB9
F0BDF5BF10AADB64E9DC21E5EFD3BEC41F18FB8C6D2B457E60950E1CEE746B8B
D1C38DCFEC33DD7CE3D15A7413BA7221C2A0183B7AF9C14AFB2666D0C76B2A40
4F1C741D14A7855891FE38AF4673CC7172645BFA492CDE638EBD00417A24C048
9BE85952A6776CA88C806DDA31F029D26AE7BBE53504F2B08A80874CF0D88928
1F4761B0DA0610459A383275F46B0E17949612B89374A91445818CCF84403DB8
37A6E6EB5B52549B010FB206FC42AD1B3BA2F939E3855A521224E6698290BC0D
0742A314497D1EE7B94205C9F5DD453B1D3838591BD4A0179BDDE6524E42EED7
7F004F7DC1CCC96ADE0D02904BF3E689B2B265E479FD23BC99D34FCB2E6586DE
317EE3BC34234AEDFE8C8810BCB5B93E04FAA62C2147ADCC67517C05D3140EA6
39BB37343980D51CDD3524F0B146BB99BAB1D6B99E13FC74FF67A48296D205C9
2BB06A4B0C18B1C5DFDCAE53E87AA0B079C664ACB65D4AE6108365BD70298F04
7D7DEB8854FDFCAFFAC77871BD7221E8402A173E563B312F24B88D66A61A47B1
A58998B2A1A17B6AA78EC05276600855DF7CF3CBDDFFFF470794606584B538A3
2295BC5FEF5DD3550010E0F50AFA773ED03BE4C5E64936A40A414248F478860C
841769777C502E4DD4354539587BE5AE2347C835DC00E5A73E95668DD0484B42
1E5FCFC898D707553AA90560AA32BFC1FB1353D8E28E0FFEE0C28522DAAFFFC8
4B3AF701CF1AB4DDF43928DA047C26DAA8165842A4DDD43FC3AB8DADBB4D53C5
BC75E92D9FFC4CF5D97E5C253EC6CBC95C776157B2644FBA911DB569BB21CC18
F997D4A44DA8C2AE04EB142AEC7BEF17A9C1AC42B75BFC767EECE17C65560A0E
E4086DEA06A2D2352DE559933C8B4E514DB0410B1E140095EBE6C361D8BC48CC
05727B71589342370F8A366E11B3623E494B8E802A47C2278F2BD50DE2A806B0
D7FAF7914123A44D9570FC82B6D231B37E2AB7C7143731A8483D8D0E8D865CB6
02D83CD2DC870E1AA53E3712C683F56B2ECF78FCCEF9C018C3D8273DA993B9A1
CF9577C0107889C2EBBBC688FC7FB98005BF250E91BF91F719E5568DA6B69A91
1D746C4C8EBC0A4E6AC3CF08AC86548A8FD6D6D253095D1CA40B9417A1DB1BC9
CFD7A726E5853FD3695D297EBA5400A1B90902EFE6792F207136E1E16B417B2C
21287771F728FDDCE8BB0876873C49ADF8152818A07E8372B9E6D6A900BA4404
6812884F2FEFBBD39715F12D929BE313B1A5F23EAF1A32ECA307C440566D8413
DBBEDE3F4E47F96B61BA0F88E99544E109918AB0BDCA926BA1162CF6F8D703C6
508CB2DC5D586678999DBFF6A39E853134F6BCC2EBBD3703E9619F762D64128A
18C95545E4C79B52D7003FB0F27D5FDA349D52907413D171FA2C0F43B7C69F2B
C1FA11191A2974874205A7DDA96A49166276E333BF24A5894AA474C9F08EDF66
B627B992C9E596047831B16841B250CD148557D72DD7E683BF122A0A267DFC37
AD7469C554F21DA9C2007FFA851430CBB5AF83475C093525EB5729D8AF505B26
F99EAC72A872C10BE7C60AA2C2AD169FF34266D8A72C91C24108FC0F3D955887
236884915F331A5CC5FF426B674CB4C72B22588999185585F81C9FE7F420372D
E86F10868948EE50880C3185549890A6937621E60049B6EF549F775AA2861FC7
EEEFCE2D6FFB37AE8D53E4AF5C970E67BC73C920CA64074B3649FE56AA0AE265
4BA7AE69654EEC38CA4CCB5F26D1C2D5C8005D2871DCD98C3A637137DC8441EA
7B8E6A353FE001C63AD0C72E1EB219C4864D18C4CD499B20534D33C822226FC1
99D26114C8B47D73304B66C6BA835EBDDFC19E88CF11D2E7FBC549CA5D86A25E
591E0531A442F63B6D86590198C5957155006779D9CE0C778599803EE49EBCAF
6C6E111EDC97C368223B86632842682BCD4EED2766A69EF6B97655A930494E6E
1A478D5C2A0D08CB39DA7D5F522A4ED633E8FE6D57A0821BFDF2DA7DF431DEFC
08A052F306F0BD86130C630B5690DB1906123D949ECFE82F7B51DC5267C06989
1DED23AF9D42E7E92E35F3CDB35836193EAAD4C88DBBDC9E20AE49D3FE7B47F0
B4C5BE36297E9DA5DB6AD90AC5A04E5C5434D732318AE791EDC71A47F2AB39A3
FE73AE47CF016E3B3AD1A5C090108D4964C7FD5E57B0D504F8030FC501B4758F
1C0CDF3A5FBB4A0CDD161BEF105C8697B33CC8C54E71E075F1693EFA5483DB7D
EBB1EC30D6A719EBB7B5AAF66866359A3E7724F400933CED59BD7219595A46DA
8FDDB20819F2337432A326ECCE7F6F636B38272829C49B77DA56D8C3459AEF93
56949ED415099A0B82D4C0E326AF1777FD532A369531C4F38A540CBD0E96C682
B067F1525DC438EA0076574A376BBA70183152AD7577C8EB4BCC88ACBC5A62EA
1F054D8C429F0F7FF80AF8B32B1A30C9F7923E3E12C1BFDDA721786D7D6000FD
0985C57E723DE55A2ABED9B40D7BE674118CFCDA53690FAF7F415B3CCDE7AADB
CF72697BCC9D1466D942AD5D2F3718A2590BD1D0A6D49E62478FF7256CE9396F
4491CBF50E1AAB4DB1875D107D8180396BA6046E8883A9FDDAC13FEAF57217EC
230CCA301F89A1016CD2DE577D0A8F874806B28DD649CB35D90E6345B12F46BA
3332097DDAE8237E4A34D9C413290538C5E297121D50C81741C15D5756CC52CA
9EDD64727BD3BE976D4963BDB9B0D1D1FD16155510EA7F6410E1511C924FA76B
3CAE4867CD22E3E4A8E70082F0C085AF03D89E764E467708D4185A1600EA8BF6
80C97212992BB2F5000FF23382B07D5B059D8D3F20870038B6EA3C5E41A3E6E6
EAE70E6200948A2B24D0AE624CB648EF0A2E816D6C1C3C83FC0BDB90052DDC7F
055DDF6A6EAB9E62CBD50ABE89F5DA45968A4FD41C738DF99235FC8AF7B0A7FC
07C2E6FB4A960BCDE8B36D06B51FDFD86A22BE594113A00F62F7A579FB409842
47FFAABFA9652CE7AF178B421B0DC4AC696FC634D09507BDF345201376AFE24E
D8E855C8EC0A4F10A8DCC2EAAE014C26BF75ADEA293858333FAD8A5DF5D5CE64
E34060F98FC38430DFD56AAFEA4135F59E74D46E9C0DE71D7EBF3D9A4DEFC8E6
7F6FC526DDEA73EB9B1EA95C15AF3E1BD133241D58DDCC67037061D453352531
380C21D21C82FCAB5E878414ED99200D945BCCD36E1BA17B2D4E2DD52B5848B2
20B04AABD14C5092F60F1C33E6A77A9E51EAD2D9A4C9C6B49ECBA54DD1C476AE
B59C2440A668262623D6A60F543D13185DBDC938B5A37FA2838C251BBA1D812A
10381D0456CC203C348DD73C1D3F3446A4E306C676DE7CB1ADC78A861EDB3837
55242F3E168A938FA99A616BBD1008CCD083D9C4180B08D5361C6A1952999FC3
37744781995E82918639186A928EF12BAE7FDCC5357E6ADF9AD8C35E6A43B682
3C4E3D2E01A271B4E229F6FAD115EB0ECE8AE791EDC71A47F2AB39A3FA3BDDAB
879CD224BD2B3BD4873BECC873A9C71796A6D13D182F1FD33DCC71554DA83716
98B3536CF6FC0B6134E4F3AFDC577DF8F4B125C0BAC2EA874D558B0F46BE4CD0
45739E04FD5DEA0FB07BCAA18723F901BF5F6B6A8A8AEF1CF8DB5AA29D60B224
C9B8872CD9E55B2E3AE2819BAF9BDC42C781963830BAFE4D6CD2356A3D2733F5
4A29072F126379A165479BE72057F0D6D0311BF204A4C6D04CAAD2542B807009
054090770432D63B1C903E5700D6940D54DDFCF2DB627140ED8AD5DBF7D86C88
CFE9A37CB06C4BE02A9FC63EB240C890DDA668C586795967B2B1D5ABD93033AA
D7057C0C7678850AB645FFFDD403F440028181B75AD590B3989A7F340FD59C3B
75CC4A85E5B3FA0541F2E746E3F5A7F0A84C2334C2D0E64590A2420765F24470
4AE2B065259EE821CAAD682B251DF56033F47B4CBF6DAA00B960B965E9C7F789
DD05BC094546CA4F9CA4E3B35C0BC7079A2CF2E2A1529550D55D4471991B7DE7
59C6BC99788940F8ECCB6AF7ACD216131278EA1107F3C016142C1A8B337A0907
F9192DB48AAB64B6AC9E0FF0F544CE8C5C086BEC650C87AC6908D0C344FA4F94
E91B0A972678A8E98315860D63EFE6178FD39A8CA2F4D538637FEE65804AD9F4
7FD5D09FE551F142955918424CB632ED0C2C1FB31D3A72F9889F590D1F350296
EC270CDAE87B801C0C536C101AA0D77A3B65651CDF72E001E8A3010266862CF3
9FBBA573AADD91993E707C3189EE45721D0F6D8C3A1D8CDB3A7574A94AA01579
67DF66E162668F8D8A3F36DCBB5352490FACD6E9EF0C86845248DC345FC8249F
699D5364BBA3E4FC59D1F7378FB61F7DD6CB7D3DDEE35065C082B37FF060B6DB
75AF203FCA2D6DBDEF48DCE63F3F4869DA9D77CAEB4DC19B208341194569F2F4
629141CF756FAC27DACC81D3B0B0BBDECE5D54AA8023B11FDD5D37C1B60D5582
E03F083CF716C8D2572DE33AA0A7E4A4F64A6E5C39382501F2377EC5E1BE06FE
FC81EA3A88B4024C64A79740384D09CD8FC8DEC08F3E43237D86822376F40EE3
FDB00E6D5249BFE627495DE99814AD4A0798392364FE0BEFFF89A5599AA1EA70
6B50613961F9E542A99E1E9EAB27BEF2BCF74FB40F2D01E2F2D09E731C6C2F9E
4493F6FF4574EEA2B17D2645AC7A467CB73043A75E693DFAA0BF9F9BA10DED03
E01737F4A4CD704E8EAFC757116FE3012E01AEBF584EBE5134087E17D7717C9E
B78CD3364BC4D5B263A7B255D0918EBF55EC09503BF1AFD89227A574BD8D6F62
83BA72533B7C3CAFA5F99ABE792B377B97E059D705A0D83ED2233BB7EC99ED28
D2B4A7B685B9B278C77FF850296C7B8CC91E377352CD4B970C802740F07F64C8
800959147D32AF178C2E2E968248D5B79889D9133B6ED6BD14AAD42F8DDD825D
7E8041DCDA231DFB8E6ABD97BCDCA958BEE59EBFF0D3BDE9B4FB0A540610BDB5
9FC4EFF8586BCF2DC5D496ECFD6D06B9A5AFC8C8C46BCFF335C364E086A66D84
1ADED0348EF0A843D0F05CE3F579148DC114120876F891DC1CBC2613C7770AFF
963ADCA396EB26D50902C8BDDBDDC8BAD0B87F3BA50D36D20926718FD370099B
6BE08F5766FA4F3557D0CCC9EDF31BF84531D664F70963D7B37ADE87C03A2DD1
CE4DCED3C6423C5CF357B67C00FB8A600F088414D8992ECDA0ACC39AB210921E
39DAB25974FAF91DC77B8AAB2239DEFDB964B9A39EB820B0594A04C8A90B658A
61B785B8AEFE9DBA015D717A3CEAF3A92E5909A8F0811FE2758B6161A8A96054
6C2385FEE3AA4828CB103799D5A8121BFD5C984F519BECDCB8EEEF18F331A58B
E4704E5130FB4984C3FE2474E6C95273532B64A356B32A047802C9BDEE75029E
991753E72D33BB3D28B42945DA4A9455103CC33474390660C14D704E6CA5597B
EAFE42535A8C88F9F1937BFB87FC8AF336B6E6B7268BCF2B4DDAA573EC35918A
52243149770D7A638140F9EF7A02B92E75A597785BBED4857290DC1576BACC8F
67701204263E971278EC573514392567A82BDEBB7E3AC567A69429EA3D1E7FCC
F0E3330146F527C77164649A42B061255C93ECD9B8DC0D2A73720893EA82A1EA
0AC894127775162D0438F882845B8A24DD727260B4B18E174328A4B90D93FA21
5065DF8C19C153EA76C60BCD0C0FF79B4E98495C38C459297F3E0DC1BCE6086B
DDEDF8F4E9B794586A9CD11C14D25342DE63682A24C569C99EA4E22AFDC4B35E
149F7EB05AC2BCFE82D329D6332B1E5F5EC98D713D700F4428E59C4D8FDA511B
CF63CA7B0EB34D1BEF48C8FC4FA189D8A962AE59456EC1E2FF796E37DD6D1B9D
E5FAB1CDA68C7673B94ACC38F874D92C1E2074B7116C3845EEA16B5282A7375B
3C445C622F7765443ECA040F54A876DD343BF69D7B2F16E43F5C41A8EE620EB7
E7F02C11C1B52C95B6B66A2DF1FBE1991751323DA2D16A5420B7A869207023FB
C27FE57345CE26EE4FA1566B96E221864A45A24ADAEC63F61C9FD186843B64A3
B8BA56C65FAA99BB540B469C141FF7FA87416303FA2EBAA4303C4F4992D05A21
F628B7901829DD810E10D9DD4D39C32F79AACD665ECA7277148AE89168C46840
BFA42B5EB6D2DC10C1B440B5B316FA8F6565B7C0596FD023D6BD1C2CA79CAD7F
0FE9BAF8F71089C3F94C1A9FE844D514E123FDBBD49FE36AA88DF9E59107C892
4E34E442E4A7B0DAE50CAD34EE9951CFBB3E23E96C7086E8D9E5015CBD6DC0AE
B49862AB0712464EEA52BAC576A4BA45363D3B7FDCC2F4A81E47370B18001316
F0FAF32880794EA774CAD2ECA4581BD58ADB6AB154DAE7900B7C4B60F6343B92
F1B67E0B8B99DCD7EBB4E08F06C3A4F52203654730006F3A39B43BFEE5D80FCB
0D3A83798F244EA38E7D327F0F4C117F34AB17610F5D7F76C202F7697ECB0E22
541651CD027D5B23BE4FC86005E73CF251B746D86FFB6D567AEF67B112126E2A
CF3642047B512AFFB892DECBE1E9CF7F118F554E5688D5246D21E1C4BEF63FF3
123E5BB8ACC107D8B722419A9C1F8EBE330B864E6D9CB09895FB773DB25F1A4F
BD03CEB58C7EDF1577444E6F9B5C63BE4DF55743E0DC918118BAEBFCC476F9F7
F52DC619649FAF3BC7D3F0867D1B8D78B9A9DE9DA1FA281D38D992F1779CE576
DBC43DA0B3D52D76D907DD2BA5FA67289DAAF80C0F5EA7D9E67929CF4142CD55
62FFCDA62B59D893A5959E924476E93CF7DCA4E9552E15B0C62E64A0059FD24E
9E54D410482DA1202736A20A2C8511C202DC92A263CCF305021C674FC70A8D1E
5B9FCE9EBE0709F542F3EE5DFB1C1A0AB40E808537744BD9F54562D7B4167C0A
622AFC28FD1A1F890D10DF396A72D110434C6DF848316629CA47FF9B07038337
966F12D57747A2957AF8F20D293F17F5521D3311F85DC40CDD28FDCE6ED8D979
9646156E1491E5521FC8B9CD9158D750D9AE1D1645E399B20090DBB60D0B3F5E
A1A13FB288A9C0D536A297936EBA8F80BF5B2ABD3536A2450AB577891F3BF378
698BB17CB6118EFDFA622B219121677E28A1CB84DB96F62E89B545CC8CE8B786
D388BFB00807370CFE577C1141A7903C924ABA53A4B5C7C390F436CB4C08BF45
547F698E0DC00CC722B65CBD277C5DF3B4B1275640937E5325EA8D2985AF7B9F
14EA2C7C51096681B774B9079F2DFD5420F6D2453D8A30572DD2A12550B2D61D
32D43CEA6CFFA363D804FAA42013AFFAD1401B54E1E86AFFF6D7E6A9E866BAE0
54F5EE51C829C26F9B88AC109A4388B2362A3AD1F83A14BA94D46350DC9C2286
F9A29749D657CC05714F170AC2B490A94F98BE39F5EBC58E442616A88E8FC019
4CE3B471CC2C4DCD7EE8DA67D9B82DAB5601A9125A3B90CE131D3B48612958B3
89F643AF4EF40437BB056519FF432CEA503118F0A2F57D33E98813E044F87B8B
46C868D6D2FAEF826C12ED0AC734005B3FC8E636D5951411C6F46CF31F03D351
7A96309E02D4153F7F64C21C8767DFAB7E5677415F55FF32E4308FE161C7315A
12FB600B92EEEC2CE2B6C918A7906736E895F3154BC4409B9A97CCAB9DA5C761
48888F30AE04C7EF468C8FC8AA1C0A2E529502832B329B1EBC55089A05E432F5
A19F77E45AB50CDF50B9F75F0A6338BA2148B76EAD501C9C1670B8A568F69091
BF0FBC9AD619AF7C31436CD5130B3B64C1EA82BD4445555CCC8D8C82839F55A4
6A84383A5CF1546572770BBA3CB09E41AB8CD211371A43A1F9F4354B5BF2FAED
4B00F36F2CE5F46491EE8650568A3C4E497D1E90E7A0F10941DE0F2AC2D90107
4A7BD43D4D5B05FA1A04F498C68D3A49078A7E2CB48A43238E9E64127BC951DB
04055489DBA72C24342D68B5C8896AFFF13F6C5D87F9C357CA8E2424585B9D34
982C57A36A52CC3D3CC3A173A7346B4A33C99BBA62EE86C30D0E93B2BCCD4A74
3DE63B7A8395F625BA36D9134FFB89994E5460C89EBDDDED2D74AE20D4B29604
D021B8CB1F3AD3CE5104318FE113C2FEE0BE9AFC4DDB110A7AFEC7A193835DAC
ED6F47059CEEBBB988E953AC22110E3366BB92A8B570377A356DEC6AF110FA0F
C9274961C7033B715C7038A7CEBFE998249291D97CD034935C3A0DF3CC39563B
4230C6A08BB4FB0CDEA7D44636102D47AB90B928C3FC68D277777AD2F477516B
6676A165AE58B26B9DEDEE02099393336984A0495B5AFDFA147835FE0BCFC558
AB6171CBF0AF8D53B79FF544A0C6F98C72AB9F84F3C402380D6677A1F2676225
A2299BC2E64FAD2F51D2218D29E57D8C2C8B7EB292D0E4ECEB60C79F9DF0F8E9
2B8FCC8CF0717532E4799F0DCF5D2FAB1DBBA602BEDD83581EE4119973AB763E
3B857A6D32903A4124E2264000233BA7E9B1E80979B7487BA2CB786018E20A5E
0355AA35B05E219F5E55187DF09674F324FAB81E61751AE62138DD04BE3F1DF3
1CD64AD21688B2FA3BDF5E36CFC585953C95FF27739E9099A4B58BB53E3827F4
65279870CA842A232C789B363F4B77BB6F513F2D1CF82BE364B0469E2E163414
EA231376981947B80419C6552BC98F10E252C17CC9CA5E9E71CAAF5A17D5598D
8E8BB772EF73E44C8F5C4B69EEB8584D6AC888FDFEDE4783A639A6DA91EF82C0
84C1C89C0B70F7654DB9EDF8305228BA8CC8209364811257891A08FAD24873CC
2C75DA3473DAB2832331C2F3DF3CD45EAC63D7202E2F23518545A75568CC03D9
528A3DA314C3781B6AD8A675B3985D96DD31C832B4812AD67FD873378141C0D5
E654274F0A884B4E81A58647CC0C2F66BF8B28CC148252E90F6E7536E42E562D
803338A8B8A330B36B22482CF96FD2696A48C832F41C5C234E5A477B14256AEA
DF217F5E4092D1D03ACD2FADCF1422BED5ABD93033AAD7057C0C7678850AB645
FFFDD4055C250801E1B884A635A73EC67F26C4A36894C4120C6C7FA052F8979C
7A5CA5D52FA1B48C90F140B934EB585E3DC75A23E9F871159B2F3CDA9654D2FC
FCA727506D00906AF8DD24262D80A1DDA1396947FBE8692B77E9A6F5B1286C5F
FA28489391031EF6DC2E9040E85D23934571B2C15D82EBEC804D15C0FEF51E81
E63603AB1E9281C2D8B798E7CDA3D88B9B026AB9A677D0A13C4AE52D001C95D0
C24AD339181124180169F3AC7E7A19D8565769126D2B830F708F56A8327BB7FA
5CC1E56949F31D5077D185A6A8C1C19267AD441581D7A43EC3324CFF3DAB7E16
2F0C63A0687F065CB219C926D4511E817E1D39B34D480522E9DC062394210332
CD9277A4CD1995D21351D824C0F8AB1AB137E7F6D35AD957835FE482F81CD228
FA2227DAF5336316139B1C3959321B8800DA2D2E66DBE5B33DDDA58222CDBB75
89CF09DA07C6EAC8D8FE03BC36A4649EB5F77E9930EE7D89C8DE35DF4911AAC9
B7C62D6F7CA19DA5777365A7DE0EA36661EEDD0D99F80734662C33FF30DB7BFA
31060D48507E4F90994CCCEB2B11C34946640CFDC74AA12724E13770A8817E1E
619793C85487C0571E75403D111C5EFE83AB5351D1812A8B8743AEA49E26DED6
E9861BAAD4020FFC9E1E36598BB8A970AC962596E5DA29211EE28BBBAD5C0771
8185F2E6A707C1CBCB5F7BD74B934EE2BC8350E3A8F4332D19994238F3B603EA
8489EF99E770EED78A968F1DC07FE09105B30F327FA3BE68C5416EEA99D327FC
24376C3213224CB700644CF44FC66D9118186CFA278E47EE2D0B419B93EBA193
7F83EEE9027F53A79111AC130AB4A246A18F1735A73665A2731B4B56297DCE76
B0044C5AD81F01E220370DC8099CA12BF2C5AD035AD6DB4B6128E36279CAB175
64F0F604C2CAC70727F24CB5F2B23E93A3CB703B62F86E41FBC6421EDB9FF682
9A42E3952FA29C49E2D9F885C42FCEF1BC56E92FDE53A26F9395671BD1653E8D
F6C5992563BCCE12B4EA70A67A6BBE9A02D18CA44689E5DC1DCB1767179A1B63
E40EAE3829BF4CE47841CC9958B70AF6D0D07D34102A25E12F04FC9F4B80562B
21C6D0BE5704A5B17E3209DF9F81567747542BD1857B6F5060D31C481C37D159
D01BFF4511CDC412A885258111779F31BBAE3304BF771CEDC1ECC1EEA9D34523
544C00B58BDB14CA1DC0694534AADB7CA1C907C3EAD979BA7BFDEC43C4901AD5
8FE29E46A3635D2AE3390593FC7EF25EE5C264CE4BBB73A61F7C685A3A9A5187
34F9E4D7E801AC7A5134A76D1FBCE0045C8F147537B7C2221103C664299859CC
73266D8ACED067119C4592AC1DCD83087C2DB81FBBCCE75EF02F7E3F51D6E7D6
0A9C421889066A22AB0574D96700D6A10203D03263B1C28B26EADB953ED292A0
674E017CEBA3A38EE6BA2063A650CBC87EB9D1C2DBC7A20BA2D76D94BCE9E2F0
6F49A6F65CFF1A4F8BA05BF9DE746905C1624923AE6DB8994DD4DB0D452EE669
0A8E0CE736A59918E193BFBB4953AB21EDFDCA58BBB7775A75886631416C2190
B36C30927C412A0988C5298471BA2035819B7619DBE08DD2EE3C007463730DBE
8260970F6451BFD1EAE7FCA4E259856EFD5CB9A80D1CAD55D9DFC9B64DC3402A
A1DE45FC978490BB69153DA6D6161F7E3EF19D51D17FA7017754C7B13E4890D4
53802BE679D7D30A907577C8B8DE4E695034A0AFD7D67EE73457204600BE34C5
3EEDB7645170A6A6B6C1A85D0058926158D3D3D81E3013A7856D01915A184EF2
573168158585CB5B398351233CBF49B756D42FA0CBD862C56A5046047DDC604A
4DAE890620BF249A218DE01B8B920F09E9FA8EE4B1CEFFE1421AA0F101BA284D
079A7D06D8D7E20E0C27538A6F7E4290030E99140D3932E4F572642BD80270A9
D022DBF622DBC6438DF6625367A51A814A040839172E350457EAE0585F0E658D
E2D96CE4E32F2AD8BB9DAC4ECF39A8F72733B7F3B44F48E78519E114A8BDC93D
400AF5B67545FE192430635B74CA8893365038EDE85D89C7C75230DADE15B8EF
D806EFC61625AA46AA34B6BD18DBEF779562C307DCBEA8610E12D792CF039DFA
B1ECF15319BB2AE81A3421D0EBB8CB761FC76D93D759CF9C50207336FE0171D9
9ED216F355139D0FFF6D5A812EFB4132ADFA39B4F873B845ABF2660C775A4704
DBBD673F79CC1DC21B27ABFA53F4AE2E622FD9C4587AA9B51673BB078799F0A7
52F3F7DE5CE57978C0AC1830248B5410C7C68DC45383A6470A21648D9F06AA92
E81779BE5DCE90183592A2C6E2FFB3AFF49BBE499EA940E619D58FDBD331C9F4
59A557AD41F0DCA7EF4768DA319D4B2F3D95477FC12ED9995399EB66829AB49A
42016F5E76DD0CDADEFC54FDED78A9446ADACB1F10AE1A860E302A83B960B624
C72D86913A3221AE9CE1E7A23339ACF55167FE8A2F947030413B8C42BDC2E33A
BEAC42E0A3DFCDAACDA7BF1E9DD09B987DDE9A64E9BBAB13E9E5AFB65565788B
7370527464C55762EC46306800B751F026ED5DE92278F31B2E573FD86696D988
00443F32CB27EC3DAF35E795A2D32193DC2E11E51EAAEC0F6DFE29F24B034A8D
5B69C16F750F4788B6B3C3C2776D4DDE217E123FDB2D3B8D6DDC59C6DA3DB9CD
03200959F34BF01B6785A13393D9C3B2D96ED57FC55FCF060D13BE6123F4292C
FB54C356ED031FA2E3262CE664683870EB4F2750798F380B47051133EC68C746
E4F7C5DB3B40A4A909B62BC0631801A4B89C40C2E1A1172CE064648ABA64508A
476F7B9B5B308EFB52EB7278A36712CA21E2CFE07DEA46CE64D8A8853C695C66
5F456A900204055B6FCE3025B3EFDB81F6555F09A25CB68EBB427D11ED7860C0
DE22AD177610374D182906892912A954BCF7BB00D53F3FBD24FEFC0C19947A45
ECC6B9F49C83EFCB2DD144D59AA23A265D273C60C32D8DEC992FBD7A83016D00
286C69375E9E0B1B272B51BB1829FEDEA7A8D8E361ECEA4E7DDD253666AA024F
FA986DDF098E40E2EA149E2D19C21EF5F5DD745F323D016D893B5198863938C8
E3B4CAFE23E8BEF99C8D9B8645A54B519859A8579CA0ECCDCD40CE7AC49715D8
BD0A6803D8B14E7552C24309F4FEF9ED2417593C51061309D2F9A4742DCB0951
F33E6F861A0A32EE23534ECAB1259C875ED86B49895A31C1287938562B220356
5FD277C13BD2342C13A685521D2F9CF54295649CB73D27AFEBD51084FC653EAE
29C85C0951E0B20F41B614C43F5ACD9126970121B0F16BE41947D12B80B6A14D
2E4803A47DDC45AB8194BE9FCF8879E26EDFB90DA95B5899C9FE409D491DB422
E2CF3F84D9B7A5B18F88BC747DC2510E822259DDA43D30C339AC2B795FA517BC
D14F2BC5B745A39B9BF94363EE9662C30C69B5879BBDC3E431A35F75AA9F2EB2
A871F588D755414CE43C8359A162E7A5D6C3533F250818078B97D490CEB91374
1254040BC520FE1C36A44796BDB5DF0FF5C238535735FB2F12E8DF9C6EF0F015
C8184493FC6CD10DB2364F1C5172E6D0D74FF44EAB01854639169FD558750B7B
9D4E483227880E1DA76448326A47FCD6200A4C1DD19594B4A2FFE379FF40D788
D5C00F3E5029A1ABED5E2529B13B00B99D8EC514B5026EBA991AAF4E26E2F552
84C3B4E1018FBF44527E8355633F5C77EBDBADB775033C05D96C09356FD9657A
A5B9A9AA4522C68A1FB049E97F6C22EC02CE64CE9F9DBE52947CAF49A78FB907
EF96552B4F2B9552C8062FD3AF6DB5E64B0E98E3DC0E2409A4459BC9CF7B2BA7
69BCBBE17E81F552B6003F302A5E1BDED74C9BEF3D01A082C36934BDEE62E99A
65F052B9EA1278E210D305677B9A4739C67ACF82AAC6528E4EF65E5D900353EF
C3A7D5BA1EB1F51ADF85A241BF8634666F2EBCDEBE0CB0CBDE736DC50A51AAC9
346700922DDEE91AF18427CA61F1FD7081F840EF225854026C776CF9A6D08728
DA3D95ADF1C5C812B03E2569E0FEBDCB5417866EC07D54C89A8053FB4C205413
CA5F8090413E2C948CF1656FA97A05A937A3AF22EA39978F1D74938E7D314BBF
92D3F1CABDC48E9156123182A8C9355ACFB9A5CD32D55AA3E61DCAE5E57A9D3A
D3DED4F1EB8651A2C612CA44A7392D8E791DDE1DE818BBF26CE3BCC5EC51E7D9
853223CADF1D781A7E4D07DB3D4F16AE2506A7CE1E86D9435CF699EFFC1E7CAF
E1F905DCF098DBBCA46776FB0B75C2FD27FF98722F32AECA18B7F0FCF82D9F69
0140B0348C326D6283FAFB4F618A83C42FE1F93C815E060A973FD6AFD09E1F5C
08ECA6B49A6E98ECDC132B67706E51CB96E8561C64782374B5BB113B860B595D
0EB37B68ECA8E317C53791E197D7688AC4FA0BFEA6F19F871C5461E2339EC468
5617621545E85237B81BCB4FD62723DF9D30974A40872E176EC0052337061489
7E97E006A0FBA50CEBE2BE28FD8E6DE5582244482747726246DEED68118F3352
659297CEA9BF5FE7C0220D844E3E5996771D32D380D3E9212C270F9B03075629
05FC6B007A287AAF68FFDB416935BF25534EF2624694FA389B03B827C361CD8E
3DE146AEC03E2E23107132137A314EE064C2991D2EAF8F1F26C506DECA2CB27E
92FED95B5EB373AD6DCEB0ED314523E81CC6D0102B969D7751807F6A041A56F5
A6771D14EDB3216934A39C1D621945DFB095C0A07651B302DA747B08208D5026
049FADDC1D69A9229FCA424F301FE8EF7C082F7AA3D0B09E098130CDD8F5E9CE
385EC4DDAB84CBF286173FBCDCFEC6A1A9CB03B54B9FE05A283B34E1A60F1699
9113391FA794098F3F01CC82A92938B399848B8F0A694CA5139AA6D4E7C9DDEE
2028ECCCD9844213E41BC82D098077B21B33C6C9938C2AA4C56E468BEAE99C61
35BB2A0DBC9C1EFBBB97B92ECF06C7450D833CC54309BB9A7B79C4E91724F312
EAEB8EB52DDDE6A5B490374097FAA2C1DF59835E8856E8DFA486E54C4E5A1318
F12E614AE73E51EF48603F4053F0BB158FFCFD6FE8447932BEB150E3A400CF8B
83ECE855B1F64D83D1A6A8A3F63EEF5726CCCE0DFD72D09F402E0261E4A5D20F
55666D0C1357B0953D8E9950803E1A5D4672FB06379D3A469D9AB505B94F2B82
BC63104BB150918AA7A74DA77525E729101943FB1073125C8E145DB24750954F
393FC406C0129378B091F6E0E0C2ABC7FEC93DC6E66069D56F6579693CB65053
BF56062972DE5B529A730D5ACBCB0882F35AE8A3E3B1FE3903A941EA20978284
81D0B4103EBB92A3F801177BDE9BDD61E288E9C4265B04D585E6AE259EA0C1E0
60B1C495ED215C9E3B589FF0F0DBF6C62D83149B03B5B9161C5B5E1FE556DB17
D9D16ED69EB52BC90411BD034E11E6B81735AB30E65B39860948F76183A847F2
02D77815ED3E8E7869950B22734B56B59A0A3ED243DF5FC4465A19DCF6C41EF3
B021BAE7E6ABC85888DC059DBE81F40B65934AD2E4DF3C2A219661127D80FD78
3E271DBEDD8994F8A2E9F96F4F86C836771EC35651395E03113FFC2CED08DE46
89EFEAAF3B66E0E00A028B98F990B4D015153CCC2E1853473BBEB42EC8B79B20
990536E070A58988992B1EBC6837AFBB5526AE3B0A5D4BA4A68C8F9467EAD475
06D2F6B52756A8B330001790770D058B9FB23098A309023373FF754F3EBBD93C
D89B84F14D18A2C653EF52DFD5BD5FA826AA0901B9070C1A92470E3AD7F1CD94
4E91ADBD1EFF5559D97B1D3B433DD2B301F57E978BA76768086AF935F710C1B8
A8AE43F782C9C7F3EAAB68393918581E5D402BDD9FC2DC4D8FC12744123F2946
5AC5267B36561BBE6293E3C059CE994AD4BD0065D122E44FFE52EEFF539E3EF6
FF3A0D852582BDB1EB6971F2EBCC0C538B9F4747E6F7BD506674263F62D3E6D2
62F980CD3240CACFB36B9EC30FDF06DBBBAF4CAFC20B5773FA4FB82F8CA5E93F
C02F1F40FEA458ED232D3F24C4839AAF0BA7BFEF50AAAE945DAB1F6C849635FF
109BB34E10042752C0B839FF9E58FE1B77A50542DEBFE49BE6CC438036AED93D
9AFE101F28C08DB367464FCC848329BCBE84245A4B5E96BA220FEB629C482ACB
47B78AD526567B3635C2DF2D8A778075A7E7F2E7D41FAA5D19294AD7623E0609
77AB9233338CBF612BAB2409BEA0B2194F8237AB16453B9349050645B3636A96
BFF33DCF1124A4E0DF06126E587E8F5ED4F7DCCB35E206C199AD291CD4F0E033
445E86EED3003DFC7429E2AA49C4DE54A05AFB1AA6C7CCFBD9F72150DE258B4A
292B55A210FCB74F1B7D0C32C7ECB4241699220B107223F8CB5838CC4F288F75
56007353D88969A3F3D9D8DF3787C591C3F2AABA930D964266398898AF43B510
B472A9AB0C9AF04166E26851EFF3167F964ADA843672E870B90BCDEDA619912D
6E53B350637A1C6B75840B145CEFC54611D9D515EEBB7192C63D22D02BB2A5A2
727479C9BDEBD3DC879377A13C5DCB4A7FC08F8842251411D7F5FD741603D1E0
E18571D3DA62557A0376C2E7162271136303DF6A79C301E00600AB38A00EEA61
310B34A1AF4E53D785E1D0E5068ED5F42F2186618ECA4318D6826E9B94F98412
9C446DD56ECEEA07228F0B0DD1460717C7D8956486C96942AD652B9188F2FFA1
495493978227CF35A182E84F87163A97D16C6DE238383AC59698E080AA93420D
8EEF6ECA04DF85390E261B43A555BA97B9FC5DD4799C1BAB6E8626E7E9F3F6C2
AC944B7B713B63DF43BBBD240FB7E694DCFE132CC1F6E0EAE7BB26824CCBC34D
71864E9788B3C1295FB381FFE037D9126BAEBC89EDCE83B2F52AFC1924FF85BF
0B256F7F383F4F86A402E12641C71508D9E5E6ECEBF585AB8C7EB2B980E23521
148368D3ACF952C9B77A828446BBCA803D774C5E1D01DAB1D5433BE8B3506810
4B041AD7722616B477CCFE4F4CA1017F56A865295A80BC736A8634DD46036359
DFDD4EF9C6AE3C09162E8A4FC6CD4741B38836CB599DF98A228A141B118B0D04
51FA5C0CF712548B9D164B87B1EA798C275059727637A7399FACE02A9D3F119E
9C9E53EEE9534A40ABE963649785F697D2DF5F0241C05C449D8DE10D45301E5B
DC0E125346571C3AC8F053A09AB668003A7606C8BF13998C676F5633D42863F0
263EDD8FCDF7A810C898C94B6D69CFF950270DC1AB3B2964A1A9472231A6F17F
D3C2604EF52210F343C793DEDEFB0A2B19553E8A4DFC3929AD9700B3205A4330
16971AF248EB25722C1D494D0A2A7969C4C1E24E272A91C5C70D329E38BB45C9
A516F0A3D3A6EB0F7FBC3BEE47C4336E84B4597EDAC408FA5F7D6FC1E5AAE5C8
33E6B820F706BFB74203504D4FFF9F5B3A390C7084BA4E6E0D78AFDB692AB573
36EA77F5DA72A975945FBB6481FBC4F25889CCCD84E335EE7A3234A963F7F6C7
4C3424F132DB46B106ABEB773A7A0B01B8A20B93FD8A6C6511665267B075C5D9
1DDA598AD2A3034BAFB367CE721AA7121C80D154E0955DF11C4420919D12354A
FED37CD28F168AA61BB6A1D0581D6E772F7176C9524D7CA2AB7B9C639CD9CC80
2AEDFADED63BC8FA7A0F008D1751CE85D3677E2992991F8911FC331BDEDDDFCF
2C960CC7D5E2182D31F96F99C09696A839E835378E0843451E4D9840AF87F800
D3B6E0248AC51C4A17F50C7BFA2F130478C2A03674870F9FAFD22BD2AB57191A
3196210E0C1363B06E0C4CB49A374F2A0C1638A1093C95E5E87308560F434CC0
370A7E797D91200686FD4803DCE12FB3CE2044B4C5352C0AAA24AF697939E31D
FB3C127BFE62B7892E7B84E9F18421483857B05435F809450303520496959774
571975046E21FD503A4A93AF550285DA91183C4F754C307CCE056DCDD8F80D77
97AF86374130E0E7C7A57F1A67B6246167D10A7A979DC0DF7EE8E51C4BF6C70B
C794C6BBE8A2AF26595BCB0EC9013F7EA391C8922ED288DA4ED0C81666751413
8A90F3893CB2E0B4C75A713F443B08792A50891DB97A68F5366491D1BB097D8F
F4A71966D42DD988F48A29F0D9FC648CD35B1E03827411BA7AD177E43BD16801
26C9B220EB7D3F8A7C29ADFBEE0043D4664253B09D53ECFDFCE4C848E41EFDCB
5AA1EE1DB0E3AC051E6654ED69DC9F3564BE4C153AC91451F122BDD5C724CB80
2331A64C8D3BC19ADEA42AE0AB3741CE1DEF5B751D3B44CEF106F7290E7562AA
10DF6AD4BC9BF80F3188A55927B7EF3CFCBBF060F416C0B747EC5BA54AA74315
4084CCBDA3F4B8C354769FDEB9633D3380A5EF6871CC7FF4A8DBE390972EC5B3
89955A931A37C06AD33548F4F4AC1881AB632AB6CFFF3022D1FFC91F6F2C6B28
808CEB9BD6EE3B67D7F16A7043460436FE0FFF031CE20930C273EA5B88EFCB50
F09C029DFD240DD11799F2F6B3FC0438504B2855F9540EC304140C4E1569529D
433336951DE4EE9E3D49D26442237EE2121C14F116A1114838B333EF11A922D6
8F5439374C40C301C201A9B3E65AA5E0D230265952573AFBDADDC996E9EDE494
5EFAA728C4A18A407BCC2FABE82231873F15E4EA92B37F9045EB711B4939EBC6
188DBDF1F5449C2169315824D0A6BB0AD8D5662A85E8BBACDAE4BF534FC07180
E277C771BBC84A300794A6EF80B9903CFE41A030BAED3FD73752C693BB69DD30
9850915AFF65AA47D59BDE98DFF72C676430AB9A60F28F08E167682B10F81053
6A999BDAB4683EA838449C729EDC5A757C5B5E1E1C5F4D2C469DEFE3F85C8595
5800D2C374F256A3886969D17E57EA78AD5E0DCF6FDCD74B2049E4C93E28E86F
10868948EE507B47172D7B52B098280728DF8DEC200EDB3A2C7866C977678C57
1CCC9FFFBCC26FF6AEAE7FD7AF2F2D88EDF90670519FC2E69ED8A26807CDE334
E0EDC575DEEA0C73666D12F2D112B93EF7E36B764FF4DAB7A5A32ADF28C1A2B3
1DC98AA67CA359ABD5C37680C27310CD065D11C45046EC33B07469F871F97A69
69B3069E84EE1A7A786E1000B59EF234B71023BC83F771481BB46B91EE932517
DFE2B815D288DAF8F0BA2E3FDE32DC8120E63045002D044B71370D2195B07456
F8DF0E2577130E254DF39B4DE56AC726971985A0C26CDED6473B8267FF196B1E
52B808F3091EDD87CAD5016470EA1055E94D2FEE120C7BA6055FAE88DE894EE7
FD9B7283AF109382E0FFBA9018C104F789AC508CB4BDC8DB58FF54C825E7A073
27ECDB2E8C17181030F6CC9B504E1FFFCCA352431A0D5BFCFCFAD9235D909650
BD9404BED91639395DB88CEF35A4B8506D31B17734D27AFAA023B97C367CEF27
6C725B73F6E2214A0172520647FA07B7B6A0D06F3C5A9923AA703FDE1C2A48D9
9AB786A3D5D0C5AC216EA68F8F7D3A5BD929E65D6A3A14590FA2407BAB1E8BB5
63A9C89C0F79AAA6140340522035B2875A44EF7DAFEEC6B06D7DB4B3BE25B008
63398C839ED8D858AD4C773175799B685B89D40194C126593508297A962130FF
121C9621988B5909B8DAAB8F31E2C7FC6ACCFCA617E5ADE3D0B721C751699D83
E2EFACAA1897A0F984F440B9BB0EFDD09656C615245BC9F224ED20A96E8F4430
344988EB94048545A761892E458270716170C5EA7DB77612DF679C0906D77AB2
144E88EEE0330AB6BC5E2CECD68B9981B2BEF1AED8D00A3AEEB1E9C54063AFD7
16088B6E8FE0CD1702C2C331273573F7B244323CC083D9D5F0CC23C7493D971C
8AD739BCE21D5D27DF6EC29E90C08D7617119BDC68150065FDEA072215BB383C
12155843895629B71900A3ACA96791E391EC2AFF0C278E99D4E81BC6A80EA827
7251A46A054E33FE15EBB91EB3CB214F4F214DFD130D697972BB11E9FAEC10BF
4DAA942280A326B0C4356B774DAE57D209909698FEB6F7430526ACE47406FB01
6249A334141B4B1E22F272127793DC4DFE03595BBF57B47B6B47F36194429B83
A549DF505817CF5FCBEB7DD5871EDA1C1A748286128156F0F8FBE4B0AC369070
B3EEC04549DCD60CB7B23EBC7DA2DE64C1D02FD6CAB479553AA9B765C965D691
1223ABB7FE79F11FB59B0CFDAE2C9D3E76CFE803EEFA03CED1A83ADAAE542768
9ED559EBE5BEE0A331DE6080D7EAFBAECDE040816E3AC20786DA28A3711C0627
3B79F297A2252DD820081E3821F226D8D45B9E0A9745747E016355E3FC61B055
2D00C4D311498DE7499F9653EEE4FCE22A65C2A9E7E256F238A0D49BB81A6E5A
0C91E869BA9FB90C0447136B3D32ADAC080E47FBD491626CA771E2B69CE5CAAB
AADF0D6B4D0FB01918E8BA87EB21AAB2C494C6F6FF275D1E4D9DD4D2B1F245E0
1C1F36626E3819E7DCBA9450A2B429534465334A41156A070819E98D7384DCF2
0A308398FD62E704A7ECE39370AF0A1337290A562AF46CE779AC7F7FEE7766DC
CD9B30F171DDE639B45488B890196AC4A256DBE87FA2B9FD5C78839321E3B2DA
5B6697FC6F0224F4F6018C8479E187C50BC36C500B101DE6C11079EDE135A3DA
AC7B4C83F112CD364456A7F5BB6C3088238C4838202830E4F2AC7BC9A0512C55
98CD6A8558B8C48946EDFDAE0712EB238A87FDC41A647D79A3E56C4B5AB817A7
F318F05DDEBFE49BE6CC438036AED93D9AFE10103551553B02B7017DC7778496
D1A7100D9A915D2A8FE391555001FBDAF0D485BADEEDCC18657062F36EBAE123
8653DBEB37050E53DD4E6AA8EE1868EC97A9100D213D75FDDDD758D466939A23
D7A779E813657B78B7EED0F79EAB0E79D1775A4271DB221ECCFA25639CFDADAB
B26748D0C122391FE6A514D300575C2EF67386F05A45B152FD75679CC1F5AFE3
453AC21512E0FB7C64CA58C9FEC679E82E40874F4AE55118EA3F62891AD4DEE7
C73D21CCD93E232305776F93F69C855F72D8A37A9BA1DFD71B7DD86DD0BF2C7F
B98B15F0F0384477A2A5CDBF02F56FFDB54335F9AA9F42C1330294869C78868C
09C04174BAEF8D5181CE3B705EC0FFC1999CCBEB73DDDD93879C3EF192DFE5F7
BB3E4083B8CA604579C3AC38C58F6235EA3E61DF897ACF304881CA6D0BF77E1D
1FCAE469761CB721E4ACAB68BFE954359C172FAEACFCD4BDE28886E9CC71D71D
C563BF3162AE741D85DCE22D655CA7EA6F16C25D5FA4DC48C8E07366EA974854
E793CEF79D1168758BC59C550CF527AF9B4338A594BBE5139DF586A182EA65F2
A12458F69B6E9F731B075C02BF33470523EE11A695819A4BEA1780F81C441DBD
E9B70731E34CA0E11E8CC506068BF444477183AA5E5AC7C7C6B120D6A180C6BD
E7F9A323699EA95D99B413A3A5A7A10D5681F72BB1D45ED4696A9025AF7ABCF8
00D7C5D651DD129EE4EB60B583320A18D172D0B30128964819805040983095F0
7E5775A0444513B0E5645BC1D17B48D67133BF0BFD4E32CC94D09E67394AEC64
3774EB44F3EA113A96971D017FB330535788749F3C53AD7B863C08D3ADDEACB8
D02A0B891DBB4C9916B03C58C164979E02A351E0A91001697990C8821408006A
B81DC0E435E865799F892C4368A6DC439247F84FF0A7278EE67FF2642FF192B1
2415251A79563B0014F00FA110A94BD048A963BEC67E2AD4BDFF02633D5705CD
09FF927AA94EE2A966ADAAB08C4CF5482858C35474401528A7A913ED3FD8D87E
00D5600224EF84A67716773D9DEC452F742EA4FA3C89760EDA39A78F0E9DE819
15161753605ABBBAF43FA1A2C2DD181195AB2E140A84C6C5378603BFA7A5D925
9F47B52232AE0C4CC3A7235C31C5FC50CB3FC22BBBCF0C69
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E752429B985F23EBA0C9875AD055D8B1F640D10DB8F40BBF062F476691
EDAA1D05C5591EEDC1B75251BFF8576F1C9CC5C0E521392A2F0D5F869F8AA462
B3883A673A976328E1F0DAA22B80CB7737DE2537E7B54F5E1643E30046E87CF3
8D9A45A973757BC16CC50504033125D2A68A1C97CA095C56B3D62783960780B3
1693596869FAF5692AA8FA6643FCD7F55E72948D2DC55AFC5016FB2C48AF9D85
192393C682B739EB43CAD8C3FD4053B2D53CF911352E2BA87A65F8949B0B7918
EA727DE4A08DE07B71365B8F31103159F65D30A7A318C1056BF638CD20BB56D8
6F22ED3EACC46F750F405FAF96268E80A409CD8AE0F36B68AA8C5FD2E0E871DB
D2628AEC086AAFC9F04CC93440E1A8B0ACC1DCADB778837360339A25C08E3B0C
E768240F0E8CE9FF939E4B1A6365664AAB69761B7A9C7B95BD29B09B930B0D82
F2C39F9BC0B94E56C48DCB22D8F0CA6C633BE68E5977EB3D88103E4230C6A08B
B4FB0CDEA7D44636102D47AB90B92FA42243943EB3E77E6CC38DEDBB2DB8BE77
78936B70FAE12EB1E2913B766CA2BAC3FA555CBADAF2CBF6B7A216FC93470554
2C841542BC1FDB26DBE389CED193E28A19CE9CBA64FCEB47C4D9C7891741E0A1
23FBBE971ED93F797C02EA830678317452481FB78DFEFDB25A3645AD3979D2F4
AA17C624CAB35B85963C6DED262AED5DE92278F31B2E573FD86696D98800443F
32CF695BC103A3ACA687FBB3F42AF9C89123C719005844588667C3DA28AFA523
BAEADF7BED1F3B5D595DF571540D0855FA377DFA6880F525878D6A3D1980C7D1
05554ACC5D07ACEA1E0D27664F6DFB6EFF878D0A68604565D0BF75FD8BE023FA
36D164B7BE25F9F811A466CE04C2CE5A774EE3288A245769B7ED30FCFA10230A
D6C9E809341BF5E55E58F3288F7298D62092922F07027352BC7C9612CFCB7018
B3394AF7EE7076395E67C3CF9B71BE069AE6C6C412F86A496E7C77173A0CDA0B
CC46683C239700CF259CF668B9F5C990DE3196B84BE792F51E17583FD4A83178
989638A37897AA769D74E0B3A299DD94B314F9BAFA7217AC70D8D9D02544A545
F6880EED34399A835514CCB97938F3E012AF4D68C140C6CE231015D93CEFC522
CF56EDA6F3147B3861904FBF8BEE6DB3D2E71479CD3A02BE03C555B0808D40B9
53D2EC56876076A116EE7E81836676237F88C519F8DBF39EC35FE41D78CF1665
E3FFD09C78FFF428AC27BCF0318D0849935822699E31F5115E7854A22F46951A
51F24526F7190B18B313DC58AA2EAF631A48ABE394668C6F1CE9AEADFB56116F
FB38C388F96143BA870537CC8B3E5F2DC39F9B930ECC63475BBB8C5F9A45218D
E05C4E6F250F6E544D6011F65EF4808D3D0158097CDB6E280AA402229A6B78E6
AC615258668BFD3469CD663592BF1214E5EF1C116C4DB47B805E2F60771168CF
79CF10DC2DA8F2BE94869AA570DF2AA5852113C51CFC85C1E41516CE412CB410
BD026231E22A9CD0F664D76D385CC1170476B17BCDA45C640C583F16DA207028
0C58570A966383AA9F7CE59375525369CA6A559BEF0E05F11CA9C72A278C045B
1D2572EC08DE1424D2420D550177794FB3DEBEBE9E4105AAD34FF119AB2483CC
A034A95AF0B24B801710B398D9E9A95138859A819011423AB5921DE8EAC56ADB
58FB18C27A41CE503CAF2E7EA6F673ED5F34F1C1D20B609A152EDECFA26872BC
3C8C802A1517D9C6FDA3474591F19D573EB051F551990D0331B2DEBFA31B5010
3F6332290E522C15C69352124E1051A715399BBD1A6D3704BCBBE1FFF89E56CF
9C3EF605898309C7C3D20DFBFD10DF5FA30F409A76AE8021045DC09C95C9AE4B
4EF735A5414D985F6F79100E7045B930267F0EEA9BE820E13291132AE91118E4
7B8432BD1AD7A9CD912F2BFF83A2C4705A26FCBB7F8E45CB2FD9AA2EA98E381A
01BA4C4E31747123F20A0A721766F9D9A6769FF80B400B1EDBFCAC63CE15283E
72EC447BADD5BD58B053A11BD770399E31FB3B3D856FBCF6235BAD1F0D38E26C
3518FE6411F2A5FD4809C085AC2D60FA311DC99B9100C1A59CEF4C877053161B
59682BF5F2D85F2DA7EA0FE603D477F6E80DEAE0F250811BCC646D8CE2956C78
B897A5000D73AD32BD99B92E6E63BF8D79777859EC0F7FAE47F5A0CA878106F5
5462D3027DEA15E36AACC0E7349C8E60D6F2439E2D50DCB9D96C6C20D11266F7
913970C783EF6D587F638339D1E89A4878ED27E515FED0D26FEEE69602B2BD58
D146C077FAC71FD55A5490C89142F2844CB7E6352B01A448D4BD7A06D8EC0F00
E69984EC55E0B487FDEBB3F7FC3F4093CC6E13B87084E461E23A4D6862F0EEA2
84DAEA8343FE913EA90B9ADC7D025C2B8EA3689D75AA38B5222166C447B82E75
52DE05711B3883394BA9D683C161A48059A0463B17F3DFE8A73B46E913B99D2A
38E7FCC667A5B810B665519E7E1450E00BB9D0279537763ACA5F131550E83404
04E208B9C0B0A118F40332BDBB431AA70981E77AA5E5E76F43E730D9D3D047D0
B3EC66EF1D37916398FB8CE955E12D8A89ADEB1AE1EDCF91BD788D8F261962B4
3870D5928D160218A297BBD3BEA22E12E9C4197D0F3835C0942AD6487F5C9B20
C9A597910685A9BEE4CBA868D352ADC10A564782DF3BD57758FD145E769D4E88
BF43D19050DA58FFD64EB7B1D37BA13752B6C966C7A1397D80160687245269D0
F27E87B2186D931D624120B81967E58ABF5DD66AE39640224A518BF378B5CD26
761D1ECD916FC625A90EE8A7E00080300F0A05D265549982D56614814E10FB25
DA53070C2BBB4411D9608F4FF0B2E171820C734BD20399504F034BFE4C20E7A3
1326783358CF8D4FA48C1AB81741FA70BC0E0A4BBD104C7E5AC05CE49C6375E8
9F0EAB2B56BBB89144CE810C78D8CA02BD7CE2AEF79E27A7CC1D6B68A5B9F504
BED3487D1424CA82B8CC60A0156706987C7D0DB913F1BBF8A7B9A275E3345BBA
213B3DF67C4111E9564B59B724BD65916BFEEFE9BF03AF9D84DD2AB94847F33A
3AB3757D2C8CB688D50EEA68DEAD0613A62C3000C037092ED0A93F8486FDD39C
FCD0E8A6224BFA03E8C6D73F4B8F480327701262285C527828E5E203F328AD95
5AB433987B229534C53061C3350047FB20E3887F514B5897FDF225685D18D679
9DC141B7F6830D6771F1A3CAE655CA173FA57D400530CA6FABDCCB4325478D0C
93AC7EAA9DF7605213DEAF94C7281D9AC68D884E15ACA3BA68034F897A2FFC1E
F76FA2A69CEE7F1E9543904F1773969F65553C3469FD85B2F2F89F0E547BFBFD
F62A3E47DAA4EAD6D47F0305CCDB297C320A48A3655FAFC810CEC6F6D68ADA4F
AB5DD7F61DB94072B0AB8F1ABF62A78E43E1578DEBD2D05109DEBBCEC64AC700
4C28C4F0A5E3A003423B9958C73D306B2B4A7C67A95F8B4E737992642BD3701D
39FFAD94524A7752560FE97B8E99A12AFCCC5044D989BCAEC863BD15CAB7CE63
0194962E4183C3838D9401260A743447DF953444B29D7CB004560D0685F73E87
72FDDAB87125F419F90D165EF1C2A06A9B7500C6AD185B4115777C6BF9C24D88
653589B431FB84E4DDB650C2F783594DE6123D3142FC5C99973AF211F2A2A05F
5A756073B85FEADA4823BC1467EF2FC0E98A2BB28E5933E2F6E50D3580C547C2
54FBBBDC95998DEF2EA825E3BB2AEEACC0F30841835121B7A7D7A973F2EF67F2
795E6DD8CF55B9823AB2B15ADC328CC3AC493DE8C2F022EBFA14A2976D8E3559
B5FEDADF4E23A07F6C0E1387DD54F5C8BD071C4E9A716737B6BA413F846A887B
D1B3B89EEF73565F3D0D2D1E40E4C2811D37C9029692DF8E94F6FE39474EE13A
EEE65EC0E77188C18435A2E7FFBA595F0C054E96CC44F56301F6CFD2A7A42C7C
33C1362D901AC2B0FB255262754024729BBB2824C33C2FB07B4AB0E5BC4EF204
E240345C69F37D577CA917AA50C3BC9004C8FC0A5A8E517D39211861EFE9920B
3939DD770974B1929E48E48EB82274BCFE2E9D5D484DC7068B77CD864557E702
E4EB0C301062DB793BF0C98D7468E7D2C9EC10C2B121966B68222EB067A7E3C6
F0549768364D1935345EF4D1D5F8C6AE3C09162E8A4FC6CD4741B38836CB599D
F98A2468DFC2198D16044BBA796678C9ED23D6194A5CE79410133D40E5604C95
80910F6742AC40A7CB3E08E73FA1E15DD6E1179C390BC240DA061C9D539B20F4
FCFB72DD0EF634FB4137D55F76088819802AC0ECDE469085BCC3A24122DFFA52
6840EF5367946F3DF67C10B47377A99EB96C13C332632CDCC750FE6081ABD0F6
4DC19BE13680CC29CF0EF52F885E21F4CDF14F8A5BE651118D4F2436599ACD41
A728EBA6AA858A62BA34015E2E2F851AF557C8CF9586F5A809952F25B26C6557
DD62C2B52388A1B7B84A5BDD57BA0C39ED94DCCA571CD82C6E0BBE3DE5134649
8CD7D6DAC8936854A0E9B5873E0C43A98002905B196F919D54550933FC4B7290
C8C71C097F48AB5C03B5D053459D7E0ED44D117E1C942F56B51E615267D9FFC1
91A694BEB12CBF4EB3DFDA6A81788A92B5AE75375C8E3BABA0D234C04500AA3E
2F28C4863E4C426DE4581143A54D0EAF501057E3A9FF7B3D1A0671ADF319AA50
F054379798BC3C38137A81D75D5BE7E359EA0012AA5588403126BDDF5FC2AF9A
36305E36C2A2DDC690256D2085B1D4CB4BB93B1E736992E995B8A4F38FF8E7B6
0DC1EC1B6C746B6AEEC9D5B0D1C9641E59CE041594E0396A0BE7DFE162363F66
C0DDD904FAF6AB01A82A5E230905B36A862A8E30DE59B50522C8AEFA5451F931
870F2A99727DEA6C228DEDA6C25A88C4897BB9BFCE16CDE9E5F075FE4516E1E9
02D53E24B71DD4F1CC13482C48FD1456BB3B6710C69F0ABD2C8E0CD7C3900863
69D35D3E5A083C3E86374A2EA8847CEAAD3690C5D7BF9EC7DEE3705643B5F064
C6A8ED4630A58A2C74FF212B0A35CAD73632F8EE978BC33C8CB05AC2BCFE82D3
29D3A95F82D98F5E335A3E0F3980CEA094E6903FF9BB24FF67FD9F8598AD4F75
1527050258CB8B3F35F8ECC07BBB7E68F4BCB0B429D4AA25A2EE0287CC9B31D5
DDCA74AEC3B0951BD68B348D9C3656853E002ABC509706C00E045DC552B2E5EA
058D326D17411EDED514F2420EB640B4AF9CB0844D53C5BF81667E78A1837931
98838A2416018B583A55803F83CDACC6647227DB9302337CD98D1FA385DA5005
A64EA3E34E0AE3F5B34DAE23DC67DFE7BFDA027A952ED903E7B54769B3C48544
FAE2FEE14143654B5371B4E2EBF9784F8835D49F4E72B78BB5DFEDDF9BA465BD
FA74F2FF3B6E50CEAD45ED2C0C24E1B13B03CBA0C37EC251BD452805722C04F1
9A3B3C950F5252385EA3E898611BA9C4C8A5E0A6AD4E40D06FDCD6EC46527591
BFB94442A0146D8F93A35D8AA216357D0F96B8C07983FFA8FEC41B589A018331
D25E5B0F594F5C418739003766FB193DD7B97DF0F9A11121F9383E9A4D7A4220
2DCE9AB3649C01936660D3CB62D4FB6261D9D30EB70B6B0E91590635EADD02BC
13F010CFFDA00810855BC4D8EFF39ABAA0D3138F5E51E6484AF6EECE850DFFC5
2F6B458208BEFDD79BD8C4C6E6394AE72B8A73A9D1D8F443AAE0A3F0C050249A
333A1F83E14DFB045589F3D6D1DEF71CD3173441F1C3E12B9F46F91C415D6C8D
7FD5678AE5C1B8ACC9DC66783428D06E458F96BD48CCF7CFA30A7E12255939EA
6CF81055E5330CC27A4CF7A4C462D94D7EE9B48626D5D425D400528D5160C7E9
F656D93EB214E1FA04F01B61B295058E0FB0EB3C625259C36BF9AD2EFB5C64A4
540E4207BFCEA039DFB0F7E2C38F138EE0922FBDD3D7BC6FE12F0550746CA3B2
1B026E261F8D920C2BA8F9DFCCB31B1A824175717E5AD6E1C381A4C882B3C87B
0D1E0807EC239961D451D10743B0521AE48DC71EF5FF7BC09FC5E091BED2FF36
1ECADB0F68B3324E63C2C65B6338056AC11ACDDB5CD7B1CBFAF76EE833E519C3
715CFF2AC385F9BEDDD9296863F46279D85E4AE2BFD687F8117DA1A2235FC498
CC9E2C9F57EF881D478600C807DDC7F0A468EB61D185E06F8741AE6FBB6DDA9C
8EBDE42F5C0EB3D3524DA157F0B3F4ADE8D0DC6B9E205C7C32C27241713021B7
91DB1A56767B0A22F335A7A5AD395D681A059A12585DB05D6BC44417E8CB8E24
72EF2624C23DF65B82AEA0A95347F2DB16D3390FBDEFE059EC4B154FAC3E5668
263E11D3AAE27591284292FB1BF22EA7654C2797659120CEF28087F4E387C70D
495388068F4741728D4C96EFB433E255DAD15F08252EDF5979C14C46A1ACCBBC
666E9BAAB3B2C8FDB9A87D88D52B68DA57097C8EDD95A5F29B98068F254ED1A9
1F7031FA0B828C89F0402B564A9D9409103DE0E095F7129DC64B4012AC9CE863
CE8B7119AED87F3FCEBF2730D812FDDDD016B803C38B89238227FDD612653E3C
E63C5F1C17D7739FEE56260D0D7AC77995554693CD027EB52EA2DC82F92564B8
09A3F2D592898ECB9B4E44FEFEEDCE7B6160978ED7FF4A5199B53C97023C9329
B221ACB437B465EB4CFC51C2F6AF138BFECFB31E0322545CFE3285AFEDD87CF4
6710EA0724F6555891218D3B32A636FB671E4EDD08ACB06E6C5B432D12D54368
14AB3ED796B8189A3F739C72975C388195E802ACDE6BDA5FDF5C92005ADF6BDB
1CC337171D3E59114374660BD6760B31870D69C4C15EEA09E1831354F7C4A166
69310B38B163A986ED841B89F943386A45621E1298AD095AE1633C8085ECF572
713053E9222838472960976C9365761E9A49C5275E66B11394A9468B30AB81F6
743BBEBCC53A5903F65176285D4E9B4244ABF690C1F60F5D2BC00B511DFFA589
B201FA0D2DA694DD328188D4117CE4DB91E197AE33D28B403B7929EE7053D34A
C69C59EB7680E5B815254181F071A4BA25CACAEDE760BBEA210077CB818E77F6
552EEE7B621ADFDE8A66A223AD7465B8FE68A59672D71C72E9E861E8273DD8B4
FFD3D75466F1B50FEAF975D31590775AC2166849560F8D49B60CA4A2711540EA
31238C83DBB5E47AC0EA6DC98916E823C45690DAD910DEF45CDE0864135B202D
BF7983071104BEC1B29CF89388AD43A6F26735142CF5043B84665099AA896C86
3DAA8FAFB63363920E22A90ED50572B49954D81E4244C3B3129A7618C77F6CED
9F0A836A180EF459D1526AA6F963E953F33CBC743DC0034904248227A65C597D
D3DC6B3CCA6E436B3DF24E7DC6AD37137B49327871EA80F02F75AE1151B6B6AE
BC41CCFCACF35D9DECEE6F9E9FCE139604CFCC4F19E3179C158DA9A9BC7675CD
DC2D678D3C0312102B0E000E57AAD5BE45FAB1C522AD1C2E54E6AD21EC14F219
950F42B6322E6C5FFA28489391031EF6DC2E9040E85D23934576BDEEB86605F3
0BCF8E570B4341C3751A10FE6C3304EF5A5C304BF5FC0B6D5703402E7D79C6EB
A90AE3391FA1F800223056560C55438755D243C5F055EB9D6BC53305E57E47A9
605D5D86CC06E8029D4F57A392D2738F846251BA76A2510DC749CDA64277E23F
7266DDB047F5283C4373C7FCC9878D2F97D0E3E98DD466CCB4EEC3E1642D2EAC
0DD16D94EE5537FD244DF8D6AD68ECC29592EEF2013BBB30841E4EFC9ED18583
53AC4063789B6A407EA8199F0FF0F544CE8C5C086BEC650C87AC6908D0C344FB
7748FE778149E5795166423DBE5D30C0453E411C93968FFEAABCE9B1A574BB79
25D7A9359641613AC4ED06D45839D23E2971AD86BA12E901F630BA50618AF4DA
D11D691A83B545377890D32F0FCF2E78D333ECDC77EF69826C9576EF9D067195
1505993DFCEFAA29DD4C024EAF0AC1C993B6CEB761AC8A4993D34A1E767260AC
2E4348B5DF2B548C85F859F54BA9AC10B505F83645C20CC044DE8B99D6205FEC
E23D72A9F61619E09C929C4B8159E8A7AA9D45889CD4D6B6A19E38AE2F074713
343AE6379B316D2C00518ABADDEAE0E5DE2FF5C4FF662C383663C7EF44E3E24E
3A304AFB4241ACA20A004300D26465A3B7C450A0C270FA4C67D483440B4F38FC
4386D057A5B67F97297EA0C6DA760514F3096D12ECF20972B58E10A8538F7BD8
5B78570C1792AC0CF18BAF9E6FC668A573248CAB68730206D037F912A27BF2DD
909944245C93323C8145F36FF6EFFB5644503A563F06AE3300870CC9795DA24E
8E8B3113D15A5BF828FA3BA2E3A39502476ADBAE3D9D97B7EA59C953AA3EA578
8239D1FD4176B9C310D775443680BB5FE8311964CE351D3EA13DB52AC6F6A1C3
F8D5518EDF042BAF9CC5380390D36BF31ECF83D795D880A41CF7E26D50B3AB6C
8314B26320139577B58B735C1F44C5DB27CB91AA2F7760754D8ECEA334EE2672
56720D6CE4B056DAF673A91F6451F6CA0AF3C9D75F66C83E885A167B3220B466
55E37CD7AFFD757B3CDC29CF12046CA3F4657D3A86043F15602A346C1667DC62
5491A42A8BF5D93FD05B387C3E66C138ED90ECD7446B93CCF9A39CFD45FF87F2
932122CC04FEC35A0023F82192384592AD70FFB05FAB611EFAEDCC9135C58F8F
73D47D434DC4A4E0C28927AE98E2212BCB115345D433ED23F7B0B9A7414BA069
BA70150375E57F66F06D0F943CB8B47B6498BAA98F877F5B2862CCFE1FD43197
B1C7953BD8F4DA1AEDEC773E0D2A97A334CE0B60E80398A5776D4CBD63C7ACC8
6AF62E6E56FD8086D05B4D5C88D88BEC3ED1305354BD3093B8C3E7898553FFCF
7C0D7862FBBAA3043BD6D5775CC79E2B99FBF847E30932EC89D7AE31C1527659
0ABC46649BC898648560D837FB67D3FBCA7A93A80A32481524AF742EC8B15FEC
BDA4BB89EDFAE2D6A52C31C01B3AD72B7BB42B85222C6861BDBCCBF5B17AA9F2
18A80D732FA18FDAEB4ACA8A2DE0CD63FF09EC639486E6AE747AD18B582D5EB6
4B46FA556FF6AD04D46529E9BC9A1876241E5C601BB620B435C1F8C806B6F2B2
6C65BEB92B97EE5D051930248B5410C7C68DC45383A6470A21648D9F06AEEB39
9C2689CD65C961DFA7A9D7D6FB18945214C6F292A54EB6E35A6BD346FC6F4EBD
5E29521069406E924CA453C5266654D1AA1F2E90BF2E6377E41D13B607BEAA7C
F9812FD9F7776E65BD926D0CC55115953153DF93F7FBBF5628B0935E1D10CD7E
9FDE42E218AF66022E024FEBF025DEFF64DDD067A0EDF374A32C4DD51FC6923D
312888E865AC3E7626167E369AC65724E0E12819F990C5349F494200A88FDA22
E24F5D5F7DF0EE62FCDBD6EC46527591BFB94442A0146D8F93A35D8AA2150C92
06E15D1DFB6E3E5386A1D75068986D021414BCA6A9545DB414D597D45C6E71A3
C0EE7BA99B94B170F45831D038145A944F02F7C57E3591C33DA1DF09481F9390
737C0D591519AE169E8FA1F66C2F88C06355C6230593DE1A0C79D30EB03988B4
B040791D557DA31A46FD5F2FE4BA94F73B5E091A7C7480ABD73CBB882068CCE3
5AC791049B3F637DECE05A34BCFB971FB63CCEE8039BB288D8780045CCE64066
306B98AED8E8A2C89898F7DFE1265E563D2BEE7D6858FD8EB114AACBAE769A51
15F7BFDAB4B8EDD7382241D8087A946368F8147A7C3F74FBCA04320D747D7B02
9B872A79EBF733935B32C7BD683654D9D9E1E7391968E87568A844EEA00EBDFA
B2DEBC54F70E270E506F7130F3FADE59740C6880C5F70C2E005213489EA21075
A3BAB4C488358206CA24D3AA5AF2BC4423F2FC4D1F287F3F28CF40C1414A5DB5
B509983872C58A3EF67D2D71970060C270EE7CD12BBDD93B438FC6FCEE4C3382
D4022244DEF5B5B67045CCDAD8BEBC692D09C897DF92DB7197A9152E517EF0F6
5FC96F998CBF98917D845DC94D2D36AB334DFE50F72B508497462FA7C43F1800
83CF5AF60AA4B210562480BA0819931393831F1DAFC1C5B4C225ECCEA316CDE8
A62D377AF3CE7952B654A51A12B78FC5DE5224FE992AE7CB66C69DBE7886D7ED
3F261605B674EEB14A276935114F1DA253C4E2C6915C9304A8EA084CB0EB2D29
6260F8732F097B701FE5EFA156C6ED8D467E4B0756936D8DB0925290F014F7C5
A6B6186C22447B863AC7E6CCD3D272C580211B33A99DC5E168E8BEBE838FC0B5
926498262F418310539EA4CFCF5990D5763A9C5D025EBFF341CDBF4A20257ACE
AA3438FAC6FBB1D8EFEE1980413950EE4337ADCCE3606B1AB98B58BDAB96BBD6
F4E0797A9901190897C68CB4165D6103ABD6257D5172C8C7D6DD63223EFC56D5
FA82C1822A630990221B074347A9CD1C4F12145EAF482EEFF168D3385ED5043E
F4F2C664871EB1A07B3A6946D45571FC760DFF6EAEE4FF16D3AB8647D6542B4C
6CD77F4469A676906BA26A80FE7B406E5F1F232517AA77DD3875AF98FB1FE6FF
B7B25948CC0C07337E21EF5CFA00FA6412F6D7A5FF1363755F663D97F3701414
56A5DA72442BDC46D862F6CFC8EAE45D3CE6524CBF56223468C987C1883B8012
6A334B93DC5543674EA5327A63F01ED14BB1ED9A0BAF084B46CF2CC0182361A8
6C0A5F0AF4DF9A88C88D0D78143CE03D695B524A6C07661FE6953BB4C0EEF805
F7A0245884F258E4E877FF83DADDD463072AF184A4C3FF125A01AD93E30938C5
AB915450BA57E0BEB16DCE1DA35C7640EB406B43EEF7035544EB76199525FA7D
80B4A7D80DA314408FD741DBE14E0C10896BEDBF25262B1C95F281E7F989AAD4
D543B49841D3CAA4C16EE8F2F9A7D5DF58F774CA299613813684DC597FE51BE1
3F6E5753A079544EF44A47CBFB95D27536CFD0723A39C93D6B5D08E759E4D1B0
F0B7928D3BFD35645B530C49140EA4499885CD96274C990A02FB8D8D33FAD0EF
E99AC276C13A86EF3DEF5FC7BABA111186A0F38F642261843011FB3389DD944B
CB2B6B7ADA3AE06F801E6C37B04B18441D4497E178F97A848658FF50E33D9AA1
F3C16ED65A333DA3732ADA27726D5191B65FD609DA87EC245ACA71106229B206
E648FD8F627E25E329840D68F0ADF43FAE666EA92F348B251A61F327D58731A2
41E11468BBA16BA3494A4E80FF14EB3852C1F8296D44549A5ACB293CCA55299C
1B7FC3CD930CEAFE3BEB7F64B895346429B104706745B73D7C28DBEBA5204F51
014203021E481DF4FC81BB0EDC41DFBB5CA1B3216CEEDB1DC252214E944F88E3
9023E2C046AEA112807D539C91F3FD1AFB8E35446EDAB21346AF2FED393532A0
F08DC7B007337B680C9E0CF3E5440B37DFEC0471FEE4C6B0BF4F58336B495790
F2A96F1D10C8EE6FF1304C63ADE304189A993413F74081530FBDA87E66FF9AA9
7BFDC7033B87072A685E9CA46236EAD6AD931C1326088CB65E040980BB509894
6A6A5FAD931AADA4A4CBF04DF865FCFBE96EC4737CF89BD48165E45DC671B524
AAD9766F92298023B5A14A5EE325D1C4CA5023439ECE5B91EC4B3D758F2C2368
FAFCBC926D5660E96B9741B5F974E3FFCEFE1D9D56A1660DAE90B755958197A3
35155223CD9E84D94956A1404882E6A29731FFADE7B18706C5E6E5B6A63B0039
BE04F56586456A82408AC4144432359CC3BB5F4FEECA2A8F28EF2935387E3210
CF1A247F864599A66A432D5FA8044190358D9A42B02D8D79081B04C202BB1A85
98FC3ED021147E2BE3B76ED36626C93F08860E9342674F814BAE3BBDFFCCAA3E
FA2BF0762C906ECC373A5DED53C65CCBED35671A31DDC35687CF41E76A6CAB1B
4F59F97F2A13C267EFF9D7CFD1A202580A24E5E3E06FA21B47A2C431ED3DEFC7
267AD9DE87E23C25C20321D991171DCCBA54503EAC4692D81CE4088F3E281B92
8D4550C09E8E89E7C834710685AD77CD51634BA5ACE74A8AC97B3EB2FF024BFD
60C0AD7FDEDB23C805F27248D71FD442CC584FD6EA914F5FCFA9A23037BD3217
5D405ECFC9B42C21EB1D9BA4DD79569DE87FE23F11E4FFCF9477ACBD92D1BA24
E033458D3727ED4B961BF04E0F67C96808F2767C05F932927A0AC4F7CF00E9AD
7B06EE12852AF470C83BEEF5C5DDFF15367F58DA60B8FB8AA1FBCAC0A225B277
91F6AACBD6B7E01D3C30B3D66BB5F4A4D8CF343D8A73BF2B8DA03BA98D8A95E7
D14DA39E584495E0ECC246A1A96A67E7EDE8C1B81FA5A78EE72F9E2D27168456
1F9742380EE8DF0026663246BAFCD57EBF597B8243F93B3BB239B9D01065B030
8708721563C3A45E7CE7E75A8F7613805064BA22FE6411CFF2DF507E8562FB08
BF9D15DA7739FAB5D8E03BD8F283FB6832C3E7241E8DA94598691F7744079052
26AC4AA63AFB215274914A9932700C0D7D36755706C2751B3FA5FD95D94EABD1
21E0B7682D0FB7097EC5DD812DC7AE3950B73A93DA91AE704970FAF1BCA49C71
1F6B0E79594F1CA14635DBC49E093B65AA059139E380F71124DE871B3CD1B8A0
859A9E43B6A83BC488F512F8067175476917012FBF04B5111D9E4CB3E69641D3
795AB67934B16BD1AB6370182AE4E5B46E92B59FBD94B1C5CCD4204A19770A19
0BDFA43D0334C3F081F0E15D5D26A72F48979F8C3C01E7D4F5F3980E078225BC
8614D6C29F336C5E9F60656D2F7EA8D14EE2BBA631A61C5CC3289354D143CD1A
9EDCD174930F91684979154D98437D6BBE4C8EEC74B6D9BB7D6CFD551E4A46DF
541B088F55D76B2F86DDE919FDB952B8967B4305C8DE89D0F22DFF10997ABEB2
FD88C69AC5E31475991BA1488AFCC110AEE7D7440F1D63A362DD4E2400570620
6B00C684371EBCE5B655FD47D19666640C705988A4C7012428ECD18DDA85175E
3CE67FD4A6528AC40E2051BF9AE51F8017ACA1F189103FEEE7B9BA528C4F3F60
3BB8F2E403EFEB2E3BD728621B9FDCFDE691BC8F235DC1DB11E62A9D8E6729DB
CF6DC208C10B6070BB64310B4BCD78BAE1B1255B139A4B50B093D58C17846DE0
2D50A1ECCCD1B930A2439EF269055E7E139BDF6ABC49037759542BA952A714D4
54416CB94A007509B3DEE24EE5469DCCBEAEDAAEF7F7DF4CCAB29A5B26E91670
45CEC2AC061DF0417F99C38DC963AEC0363B88C91C86124A5EDCBB799E573A54
E8C194DB4365A224C9813C036CEB493BBE623D279E89D2256A1291C9288EE3B3
59ED857EBB84560E9C740446C3D311F71C48ADE52E5362083348B09D1D1B7997
302B451F10650B9C1473622C6324425BF7FA450CFDEE641C9F45CCFF5114A249
1504BD8B5A27FE5F20A58FC99E7B93748B7B0B7D5F050B809C364552D5D69876
27D5844580135B616405F42758BDD2C8CC2FF121664F6DFB6EFF878D0A686045
65D0BF75FD8BE024A6CD188AF98414ADA57B34316D07DC570EDF6AB622BCD8DE
C120C124BAEF8489E22A13C30552196E99046204520D0E1F21DE664153B48D8B
E48B2DC09FBFE366A8149A4B134565813A441931DA182401251F09576C023ED1
0F0C6820204B83A1EB775861645239EC6EC6B59F4712F39F7D9D4CB1DBCF751C
748A7ECE0F4FDCCA3F1B81FFE577AFBAA5AA9EA029F95B828F816484772203F3
CE700ED58C252C028E75F84C6EE21374CA267D25115DD6C3B1909D6833903A29
6C641CC83BA1B169B1729DA75FB0D03AF420175E17CD0741FD87972D92438937
409FC218EED9E2B830669F8630FB55709D85C29E7014A84F5921A33D069214BE
BFEED880C0B57EC099D813172E3F5536A681C9F8C3C012829FA69B8F87FBA0F1
F8CCF619FBA3FADA06AAAA7942D7ECAF59DDCCB44754D45D2DAB99845F02099C
FC3E1E4DF8435E646688A6CAC6190A4935721A297BC5A6641770F5E9F75C5726
75AE6E69E7AE376324D7ED6390ABE1CBB68FA80D3BE4430E9C9FFF5747D19700
3A5B338211623CB5D6A5B08187792D7DBF6792253A21DC1BCC1BC10458CA6C43
95659B0DB6B612C151539E2B498B98DC42EB96569E0644A8E59488469DF34ACC
B93D580E9B582F75D5CAB7B1B0B530C8CC5C411A0F6E010F71CE273F61F89C86
DE2F31382706EA33D769A6AE24AB5AC51DCB571982706F101B216B4AF3523974
3788AC6676BD5C9CC6EC08DB9DEC5670442C353BFF3858929E1108D7FAF7B601
661B2E2B92D08E151289F0E62B88C7F4194F830D02D1662EB023ECFD1BFF2400
1929DEE46370419E006D51A92C2CF0046A5F542DBC264C611E8C88D4267FE9EB
63076703B29D8D4DBEBE215533641C06DFAEBBB24B4044034791B7D7003597C4
740A96A9278CC878684570CF6C8FDB960B9CC6E9435D6577D1CFB71B5437F9DE
9959CC5CDE05CA9B914F8749608248E964F915C6211F81404A39FDB273B64ED6
85BB2F05E6532BB97263D413E79CDD37FDB07131FDC420EF525CC0B5377AAA91
07DA39BA7C96926AA7769E7702305CEF74EC07C6D4F4B3177C55E3ED89E370A6
20C414D729AB077D7C9B0ED333791866C96228D08CEB58EDA5480EACA609E4C0
FBD668DAEE4E1255BF293797A1BD1FAAB9AF2BAB480385CA52AC024E596C0C46
333C5424F9C5EEA9F569F1E77642976FF5A8A85F9EF6C96C1307464B56036A71
43F0A3890E36E6AC08E1506441E64A09CE495A0D1979852C33EBAAD917FA4196
62D95A579ABE56667A9B1875C81D9A6592183B89A5F6281F58DD7BBCD7B39756
AB4CF8D724A80BC89376D17FC6E1CB89FF20F37A9D63DB60BD038A169EAA9885
472587284CAE46FDDF5CD68DF5A2AA0E4F90AD4E14D9CBAADF8EF93A933795C0
CBFB7204DC6721D3405ADA3E1BF030E67C7B8BCD803B4C9ED2CA50CC0FFC36D1
64B7BE25F9F811A466CE04C2CE5A774EE32F6B0B0F70652222FC11308DA39AAC
EB2C15E617A5536610B7FD1661523AE5AF8DDD8B198AC29BD3B8DD91D49CFB07
73E43408A883CB2046E81CE317A0B867554FC41F0390AD1F056CEC4952227A4E
D3148AA8F2010F195C23209B6CC48999B19367801BA59E660FC5B2B1E296511C
2C49E885B786A3D5D0C5AC216EA68F8F7D3A5BD929EA937C035BE0DFC05232D2
596FF0A2CC89C048FEC738F40089F794BED5E77E07C36E69E259E3E3D4156C91
52A090FAB40998E518680AAD2CD473A10EBA3DF8E102DB0DEA290A8D5E36FB78
3A63D4FBC9842E2CBC2720A7206A5FD22D3286D03DCB55AA7896A27400FC27E0
BADD73CD6625EEE41EAC3D35A3AAF9348E13F1671DB099C4BA107B4B89655D79
EE67D722E54198E66CA6EF6FD2B82E58997DBA6DB828E48ECA9018B12EA9801A
93F1D2EA5B38FD3F3B421BB8AF0E7365683A159EAC40D59B99666C590E17257F
EA86B3B7FFD2698EB665811A41E7AB20C712ACC3D0722FFD3218887D32CE5995
79BE99EBCC1B00E76FC1A3A1A1BE80ED8FF0A9C509420006D2229CC525B45827
4F64AB620EE152ADFFF6FB35CB22667E746FCA5C84EF22A7C55F1E6927BD33DC
B19F6D34A59C86F056194D9D052DDC7F055DDF6A6EAB9E62CBD50ABE89F5DA42
00C6816137832A56C48FC89066B9FF63B80A84B36F7336038B8FFB0F430342E9
A29FFF81E59CF308A0BA859E0B94D70F36330A4787B95D7A39E3BD486EAC8348
05AF26F47CC1EE9EB90AA437D14EA2377CFD4893E36CE8092C855E81E7565448
E89FBAF4981ECE74E2406D3AA083AF3EAFFB084C8D099A75D89D6A89E962E01B
CEE4B4190AF836D7A0CB39AA651AAF1C7B11A87394AAF5689557F5C345DB288C
6C3B3C1AB46BFCDDA190E9E93C8DF81CD2E256C0E53AE60EA5DD2C7E20D97A94
854500DB60FFFE896B61BB3EF75A4C28F97005DCBDA06C26EC31A2973ECD13F1
627418F8F4940D3540E2AF4F8A18D77D2B24D0D8B0EB8F9D63ABF6B44EC47751
9DF6A63AB1F1891E03E044BA4FE23466646B0AF5A6394ADA0ED1FFCEDF8CA2C0
8E30C3FAC23C30A0A0A78B3611300E6839EFB83B01D5B7E3F78C3F587A518CA2
C279D905584D69759137D78845ECD7EAD58D6814BEB601FD760095EEB716240A
71B72D7580D24E269BF2F55A8A2A7E3EF0153C27FB28DA6FFE385A29283A5134
B83B6FD6018B15D4B72D3E5811A35C9D1B23C2D93FC46FC7B16641B6060FA359
6CB16EDAFCE1B0A0E9BB5D894B16E7911C17AEAF2810038F86E493DA6368697D
2AE8EBDDD407CF137B6506B5E94A36254A833EC69448300BBFE53D0F73C8D07B
97A3532EA3B27BC958B8D32CB7655D45FE3AC010D1F9147ADCF4D54303262C43
17ACEA999A2DD7FBDC0C1E52D240C37361B699534811505B00C00DCA778DFC2B
D5A48A4BDE4C7BDA1A1CF019F96B277BA05D928A193AC2863B41DB67BDBF4EB7
22FF4A62F9CD4A10A9B75142A4F86E27E5BF5701F9D4D8E4170760746B6AEEC9
D5B0D1C9641E59CE041594E0396A0BE2DBA38A41B25EC78F06F126D2F0B1C09D
0BCEE802E6D5091D0EEA183BD30C2FF72F7CC38CB247AAAD42A4382A953E4FBD
F916BE2460C0ADE8F13B0C619BFDC4D9C063049826C00AB0FB6C2F710D348FB9
E2EB761E33BB8CDC3E4447C3E2B49FB48FF62B489F54AD984EACE1F44545E68E
C37A008719F8E0C800B7AC05078E3A2096372D7590F8F7C0691C1D8D68CA4E64
1CF47704661C7EBD7C106FFF9EC2B0607976380D4E729C5CFCBA9C1035C487F6
765E17FF9439443FB4126192FE55C04EC988F98528CE2BF580724B588C348665
435FEC66DE52F5C5040D3A3C5705F7C6B2F24A8C1C45515C6EBE002309D7B369
9AED715E76E5AF3B1416FA33761809ED61D8D0C9120E29A132A2082C932F89AC
CD8C1C9463E09775E94364A57968963FBAADABE0AAA77AEC8B6B926934E27409
509366F0705BC371C574F363E22ABB9AF34C9C8CDA1888C510862202F2DC563D
9EC2A33B437A046425CB6A5ED788FD1C9E1CF4FD5B7BE3931F0C964A4CF98CBC
E7C8D0697F11C98A1A2E0633C7C357DC0778F42D3F43A2B168AA5506DE6A233D
CEAAA9D46DF7133E8CDB0682EC53FD322AF0C9804C82AE7A9996AF4B0A1E4A21
9C2559BDAF6F4C56D862C5F214366B869088B553B8D19BF698CEF5C9340E6B78
F6D61E1955A03372E991B495287522387BE2AED46912DCD161758A0223D5E202
0DB8F654D7CE91AEA0A81051FF20C4A20A0EE2C4B3D67DC284B69708464FC3C1
381380CB2DB35A2C9C1078E548BBE445AAE6147EF5AC77A73DF4294150E26F61
E07348474E937B18664CBDFAC6E2E0B2C6C0788705ED408091DCEAD44E87E665
182C42688F73B0D0A843939EE7AC7E351E26371C14CBB7B14716DE0E867BE3AA
FE1B801C0EFF49DB5755B1CBC24A8BED0D5122890376894372B84D03D1BDCFF0
3606F42819D52B47DCCCE8D129A4C05778EA6E4F7125006C5D5EF93232509E52
94070393A54339584A078F73AE58E985A3E219735768D7F84609F9F372D6D554
A3D7F144EF734C82DB01354EBB38A5F35D3E7CC2DF94ABF1007B631F6766DFDD
7342CE2CD47F1FD7792F04D4B3A287DD7901E877FF7A7F6FC54356D993E01A88
624B6FDC1E468BFA21FD6D081161C0260434E3C71335D5F41A9DDA5CE88C2431
AA728E36BE2546E9C5D3F85C1B776014F9498AE848C5406640F76ADDAFA23002
BCCBE6562B37767F774F205A1D9299CA1203401CEDED01F42BE99CFAFD2B8C5F
1CDBF2483A955389329A617F811DDB71884701581730D112BCA8CB896302BF05
2EA87FA1E212214F6495CB547B30BC5D7766CE538CB2C6284628880F56EADF39
3A6C44BBC2E912CD620871039910203E6882E1BD67A2D046EB62E915E5F6313D
BE8E42D4B102C024FB4A657CCE94D311F51A49326E93EBE93FC66383E2BDEF5F
92D80AEAC2CF58EC01BD61D7CB962C4EA67984122A46B866F4C7596B3D3867CB
E5B6409D4903CF302DF9D25C8D5208E1E3019BFD5218EBE79578A0724622DFF4
CFFB27FD3848F64407C7277470146444F69EBF2C934779F3C091C040D12CCC32
E2570479F71F00C8450D0DC1C68719C140F26BE0E9A42AFA08AD93FEE1D87B5A
E88D08518CEBBEEA36FACE4A378F3D918C756AE870B928DE39E11805C9A5672E
6E1309C1E0E3D10ED3F212F1D9F79584AD27A499E1612A33D1657C95C45F7843
FD99CB484610BC2C48943F4072013D02D833EB5FBAC0C354CE0EC01FDB2258A3
7AAC3AE51CEFD4CA263FCFD9B41A4BF1D7103CBB0F39EF6CA005C53AFD0EC32F
1C092367EFD9F77289A1E3BEF88A0283897AAEF7BAEB1C81EA3E7D6C117DCFB6
86973DE2BE548D9F30AAADA2AC7BB83F98A7C605A533150A3FE8FCE2AC23125C
BF3665B4C952B51F2B125E5000DAE503050FAF079CC0B4B7E662AC6466ABB94F
ECAE417BA958D6EA80A4A0DA06E2338D030D055DA1E852595090477D06D62ABD
3C799F56F118A3C560877E3E93018458908DEA65D16F9326156DEAD8DCBA69F2
453BA598B419C2A1D7B09A6B79350BC03F46912686468BF03C0F633E2B853000
445B969A38F3FE175D39CB192F7E2F52AD4F28DE13B974FC7DBF49F20E7ADF22
AE9612796DEB9138059A4C12D230999D54550933FC4B7290C8C71C097F48AB5C
03B5D4902086D794D5E8EB01E9169E93845117CBE2F0B59808DA909D518D3980
A3C18EC4503D3FD53CF1B755587847DAD811783B7210A8F3591BAEC3067F1C31
9DB184F2EB2044D14703B1505D3B12033E684D7EAB42970B85F4C6B8E3B22846
D34A256BCE01AB0484F9D66D6D6B5E6EF02EA26B5B278A8B67561B957E207107
297FF4588096CC0C39A66DB06C66C5A798A8B866148B5F4AF37B677DC5FB7D45
B0324F1F3964D3ED3CF7DD1CDA83C24FCD2FB69D65D8D9704337A4CA467156DB
A004130347E95DBAD49A8F1A58948F97FC0C7771F0B3F5CE0DBCB8840EA6C61A
8AAA98A9BA1B6210A5E0204C8704BC794506298405973E4CBAAE3A945916C690
BCC12AD175D7C06E5B788817C4961BCCBE5DC7581D8525B1A280E4E7B1371154
6625E2887F9FA071717B3DF2205019EAF0494ABAC8B0D0FF9FF6BEB1469EE1E7
D6B1093F9F3749B84F64B1FD5992C1EF09AE2E436E5CE8615BA35B4E84ABA374
862AD9E38D889D054189B71E7B7DB927892F912C82043AF87BB073F1980C9167
13679DEDD46B449735CDBDD4F02168637EBB97232EE3CE81355CBB0AA5513EBA
E281860A7773F578B4F676F7817B7558D0751DA3E0638643C1CDCDCA86C6B819
366649D51DE7C08DD209956AD54BA1F31F96978962F3E7EF39B8EF08395577DA
FECBC1BB8FDF33D609275090A70AC4C86959A99778AF1F4BDB22E237C3BDD3A0
C1D3C9EFCDCB97A67D65C3DB534D21EF12F5C04637143A801EF90632E54F8CCA
66D135C9FF8E6622BC1E8DF2FE07EBE974E57542C8384134B8D52B4AE39412D8
F6502E826FE5744D9124F140CAB5A38B00015D36330A1B0E5BCAE58D2BD1CD35
B951386E54DBC419CC9586278AF8FAA806B5363896756BE1DA362E912BFFF45C
FCC8700487E25B4836992D3CABE93E6565FF9F34BBB77D3DFF7009D77066DE78
879C36143840EC16F0B2A0EF414DA21E6354D056159F69ACC6681A6D7C5F703F
CD96F07CC74AD17A93D3206EF4D481A294B8874E05A18A37973108785C1400E0
D96EDBA20A78D585115EDB223EF3CF4024628056A672802384A5E5DB25A29C3E
F7D99B72D598A43D47BC256016819AE4E9D95853BA4CAD952821D6D4F5B3A381
74526C402B3F08CEE5A7E239433965BFEE089AF2C6CC99FAD2726E5180693C7D
F6E185055E47AAD5F49FF530E9B2BD87EBB101E1FB697AD8FD4AB581B2482372
B2C20ED895E24A946B868F9AB139E365AC6B4C6445370A3F1E0AE7F74F1BB339
55864E47099792FD006CFD2327DD0406D7E094095014D829FD1286C236A314AC
AC233E71C53E2C4E7CF3DC3F56EF3B255C98C31E5F035040047BF544BC0C818D
EBA8E18CE6F1C8CA47954A11969774649CCE1F7CDD36445CB0DBCCCE6BB725FC
4C5563E3C1EEAD846888F724105E92031BF88AD26FB7EE9A331172C242FCC8E3
D582A3A1FDF0100D708C06A34D2E1D514FCB4FB9A4D6BDB195AA3F168156D4D3
249712471E85A059529C7D6101E2D5CED2103B18E469300402E5DB75B1E8CE74
75E411A54FDBCDE8D41232CEC4F122C60362BB49357FC46134ADF633B0026046
AF885127F9CA9FF2C838AB5DD82A652227EB416B245732E5370401D5CDE8F066
E9BD28BFF355124A6256DAB404B36901D33B8E6B7E0642A3443674A4D11452B6
12B02222FD34FB3BAC70FA1887F8D67B026E9B7FFFF499B541DAD3EC5B913505
63B60E6A5CE0D3D6783CAB640B3E6C0A978472DE2027F9D61D0E7E48CEFAF4E2
0DEBF937A669F0196E3580C957316CCF8EB790E24B807938646C13F56E05354F
B0FBD0A62019DC215877A8FD836C6CC0F428084C577311871FAA85099D9377DA
F483C9F83F7B916DDCD573E08845D1BC5E4EFE77037671FAAF08633A13C303EA
E11BC5E3E04D21571DAAE307ABC484370471B95F2C131C7EAA07EAAA18D5097B
56688675E0C1C196594A883EC07FA75451C91E99A6EAD6F4DEDCA3D1E319F3EE
AEE5B70BCDE25FA31F41814F3A4BF0E2CE188BB6B98FEFFD91DD01D0FFFAB790
7876A50FE5CC0979F6B0D67D47A692FABA4639E6F8A087C274B1BF03D94F4CB6
F2ADD48DE313485BFC24FD1CC370B51C17E5A38BC492E890228316162A20AF3D
8CA197EB10B290F2018FC13C5D7844F40FD2CFF0CF29BA0E8E5FBE8E4FEBAC7C
9ABF20BD3CE8F375793882A8E4A436B6E2D127D6A9573EE7B643C808C0771AC9
74729E2B5C3E1F75342B6A6F7A9EC9384DAD66B5F7FFD5D3B1C3FF8330DE4009
C485220D21CD87D5FC22700A456252D1446648C11FA1F70FD0C9C28FD713683D
EC1DD5E9A11FB047C2226B4BCEF2A6410BCACA0E21C2416A9B2E71D3C687D728
B448CCAE4A1C82DA84D4E5ADD6C56172382A1E12D1131226CDA63719CC0DCDB2
91E6D91AF10ADB55C647CD719120FAC98936CFB69FC9AF1E3EDA39821F326D00
788298C556D70678A33A2A5B0E6C5EFEB7E099C29AFF653C2FD3734F9C710F41
C9D59948E7D6E5669C0EC13FA59846364CD8EDAEEFC2B06F8BE03AFC1BA88831
D98BF3CCF251C95E560B4A690E7BF4BEB7FD5733825CDF4A716744D3D19D55C3
36992508BBB18CEA58D596BDEDBF396FC3F3B002187A9F9824B3D1FC746A4E94
B188DA76338648BBF8C7F868B76C72769F65BC8D1F8A863109F3463E8C93142E
4AADB63463CA358CE495F2A9B2AE85558739F3908D345BEBCB20DB745FAA9A61
D44309CC652FF72602B2DE57FC3010B5F5A2777ACAD657DF7146346B1746D8B7
A5F0E76AF213582E46962647F86CEE05300D51DA7D048A63FDBFD917BB8134C3
1BA0380ACCFA2C841F764CA68B0EA5FF76C2958B291FC38E7625F84D8ADF30CE
5891B243B470ED2394DF94CBCABA4170F7337FF6CA75B42E10B18AD71B2BB2A6
1607FC24D26CEF2A8919C3DEA6889DB157A72AB431A3146628D371C251C7523F
E5A9C2ACF3C6472DB21070746CDDD7125E01168CC0DC91EAA6A65F23059A9FA7
99F0C7C23C7E2AB16B7913F0F55C6ACB8BC69DBD84E990F98C739D69872EC89D
CFD49C1B6655BB48F6307225AC5E82DF5CBD3F1D0E9D0D05DF4C44D23C067C14
FA4BF3C9ADA8D85CBD3F1D0E9D0D055FB016902D4EAC4BDFA87F463AFE971556
FD2B01A49D4848EB7CB172BD6BD07C5B032C14F4CCA763809003E15CCE833B1A
6CA47FE5C2731008BDA8856E72E86BF139CCDFFF82F420D8D57A166E0B77E645
BD6614DCC348F0CC271208DE70870D9356931C53BE9BDD3A9DB16092B5A9B5BB
3C56B554A849FC2A25A8B5CC5EA988A2944C7F48D8C2F65611C05411EBDFE595
46A72CAA3445F70B180AE873F140511E99E6E371A038F640F7C8A5B32AC6B254
0EA9CB04A62AFD6CB5939A6CF9937D0A558DCAFBDAB4D968C5109FF036FCC9F7
4A510C5941F83318E76520BFE146C917E2B53242EE444B5C07B02C711B060818
0D273CDA746BA5AEA5F5E7AE0F5C34A01CE6A4F8BA8424390446A3E1C9F947EB
4DF0A80339DA3229B610C048C9632E3A34B75A6395BCB5FAB131F2C788B15569
ABADE3BC34D3FCFA801788D0E700554C4584393872B2D7B38E77EFC463478E13
4BB12CC9BBA701529B4301B03EADCF20926DF2C689E23B92A52A7BE1BF336A56
93FFF535FA8FC0C11A94E40F2EA5F1157133B5BA419F7D29448B4AD79BA5DAC4
6748F342D478FBC55B5156475290CAD39AFB59F56412B25154C6FC8022B39F10
593945025BCEAD0EC1AE32C4FC947B9AB855C5965F15DFDEF8EAE4B2DA0E2145
BC7025AC368DD7902FC0E967F6DECA7277FCA73E841737D9AA43A5E3D51594B4
72EBD68B46C87FFB5A530833A191B902AFC89F08E56C9637125725BF8CAC5473
F8755B70B4E1C84A4D5DDD215780BA71E493103B563BFF48BE11CB2C53937170
6E846D02F57F18066ED53549CF9E7C3EF3050F27E80A653A7155A83360304FAC
D0B5407C1689288FE330EF292D5747CAD06B811D582A57A07EE042C5721D5002
4675862BE9450CEFDCBE39493AEB1D45A12E4F275135ABD333045D04DC85BDCA
14CA4C0376D4D8216E207EA719C07540D50E78DF91F7C963C1C06032FF51C595
68E0323705436BDB5756815FFF25B265D451B1FB398B9EC00ADB9D2B61165C82
4C1A4D173F41B249C7A383AB96F17756F9DD2EA1D3BD4A576A6279070D9B0D87
CDAE319EA591E092DCD817D1E8B4E4C5CA92FD4FBB8C1DC90331A02CAB6846A7
F4CF7570DE2068F62C7AC313AEDE0CE988491CA25CB465EA4A4739EC9E30ED3D
8235FEE4024F5066AF259AB19350BED5EEB39F63DB382EDB1DBAD2247975F65E
9C754D405862948D7DFF25140177E0E1CEC2BE4A4948893B4BCFBB9A56ED6588
B1D5ED010BAE88FD7E024AC6BDA33E5C762000E3447581D244DD70F89D520865
7A632C6512BFCA73A8E3CA36B2D599F7712399F2C399FBB04C9FB9BCCA731B4B
F18A5D23E151FB514D0FEFBBF1F53606B8481ECD5FA685C54E9F38E669628898
FAE6DAF369C50781157E739C254AD376D16171F3EB972479D537F63B50E8088F
4AD38D69271421BE35AE5B6CEB2B2A3C2A5085BB0E87DFD0B90AC61DCCBCFD26
A7241379C2955D9BA1921169B16ABD7E4CAA85720839AD6ABE1A0B43184BB79D
88C960053AD6C8938649AAD50B17254E6D298C5297546C686EC19656796EAF27
C913C7BC985CDE0F17C218947A9729FC99474D493A118E0F3FCD26977D99755C
786C272911BE79350150E6772F6385CC9AA8C7C3F9F0BEEA3D102B9C65136567
91C0BA6CB7E33875B819AEB1EFE37A3656C9B2060EC2D087DD8699001A1C74BF
DF954E13911272789134528E3F8AC56F08B34DD7BDB2786B121355B5A7E7B543
3D7E58B9716843F33B7143D941433B11A9FEEB5D4A9ADA7C9B2CB6CF32C5C5A2
58F7DD5FBBAD95569477046CEA656DD99CEB46A5C38E81F3C5AA93D24A2FA558
62DD786753A2709D6973CE3C2DAB27202B6994A1C8118C566281001E5BE69F2F
B9FFD46BF3CCC4319A1EC5A83FBA311E7D4526871B2C50F5B279CAF980DDCB7B
8A63E3BF73443DBE9008E88CCC394CFD3B7A672D73C22382AECAC943E1626641
060E55159270B4794F9C0945FEAC295D10DA71B782F24BF7ED544AE148467180
DC2293FA812D81720D1F02A00C87824C930916890A7F87C68FDC7940E740E9F0
A92F26505C43586781B6BA4A1F3BD1B8490BB99767163F4D72FAF2D79EC8F4D4
BF3D849D27EBDB2B214169D7406F2C075B87AEF6FE35C55601F999B512A802DF
1AFFA2D7625392D30FF0094E0DA23B418FF169EE4AD1A7322F75079EFB568ABD
139FD93BF5757F5F520E3A4527099E81E158FA845CED994319ED41F63A2500D8
AA1EE22B4FE02E4A735E950F92547FE18E5EC22EE6EFBDF35B82CE3F296081D9
CCDE1A6EB87BA31CD0EA3DB921E6781272F0B02A91928B2A07B4F53B9FAD6119
8B23CED58E4F0C5E5755C3E622FB36557EED69D4B2B75607E529EF17CD7E3A64
44131777DEFF2AC94E1FA8E4217CD07F7BF02FCD2F52D4A3FE391CBCE2DB0AA2
9186BCC078A6E546FCCE22E495799E4B1AC50C2372E576B0B39D5736EB891101
032D9E0E2143B98C7C6F4F0FF1F348C9D3F1FA454D98E25393738C5904701A10
570D63FA6FAE3C75627720146C67EE26A7AC6EEF620D9B8A3567DDE34C83AF01
D54A2CC7AEED9306E5E3CC6CE631EC7E3D00412D24271B9FA4FA423357678672
08ECFD4FEB93F67D4250619BFDDA4FE45BA459D059BB400940D12507B823BA98
875C002332D5924293E782F58B199F71C9B3616A0F7573B82A681D124DE7E1BE
BF79032814BBABA742ECE84EC3C70C8281FEEDE82016012F633C08A3EBDF22FE
FA476B92D1B071F54300258DC286125D9A3FABF08480D6B95F1A725A726F5545
99A7DBEB4893ACB7DFDCE534023FF4E38A4235863275549543875E3A7F03DC50
F41C4657934151303A0733B908B164F0144089B9A683BEC462C4D7F52FC3B278
571FEB042AF03D3603D6B370E688A51026B6FD8EB28564E5D919E570890BE35B
21F16DC109337723093A9C6CC536EE1139852C74B1D27C25684C3B97F38034E0
EB09FFF007AE5D00B7F0EF81158A47BD89E30392C286528E7CBEA97A8B61B4BD
800ECBC87E292989833A88FD27A82F1A8906897E9ECCD04824EB17C031562FC9
D3A9511B27263629FE914A9AEED19BD22B2F3B625724CD4ABD2941B3FCD5A155
C783D9CCBACC11268FD7A3A1B81718F3A994AA4CEAEAD1F1FB02B305291D96C7
DF060482EBA48259A09CBCA9C9A3F5959E012FE85BFF4CD49FC4556390B0524F
0552E8F912630464EB8FF0C60E90CAB6C811A2518FE3B3AB668214ABEF32B6BD
E1A2038CCC141F0E9803BBF7BBDAAEF0CF538742D76A759A08D6C227C3182E3A
D32BB1121234BBA19373CFA7ACD6ED9F9174F0C5658D20FB0D8E059A9AC47710
89559C972F241B85C3465B3C551DA0888924F966022950A86415391A609A7ECF
4FF731353DCBDBE2495D2CE96C095EED5449C6319F2DB9F1065F9997AC8861C8
D2A94F3081FED4A12C27B85C46CBD6335D2FD4BDE991A5FE6DFE54C397E08E1B
94A7527FD015390CD47924AEEC76B9F64F8CAD4ED0ECCABF724C09CEEB5AA6B3
02555090F15B7722380DE5DF9EB663B3AABE16C26247F0B2C420C933D861DF1C
DE86578CA97C7DF76A00D71269F7BAF4CD5C3FBD7DCEAB0FC229362E10BA4BF7
2BFA3709DCFECE91641FB02964CC9DC230D914B8F2F9B89C563B64B64B27BECF
681A10EE422B725EFC0DF8627A0F398B4BB5EEEAE23AD2E69F6FA58CA180D2B8
411D129BF11366629E309A2ED45FD58E16782495299F5F6A9BB3489FBF700882
77714B8AE8CA8C2BE32602BF055FC21822F84466E3BD897F50A7A62C8A3F5556
8C50BC6080F85C9B1C3377FF508F942233A79FE1E56B1D58F5BEDDCEBDB2D359
C73EB3C16D675E2A9BC70B0D5205BA278496AD12990185B3FBE9EA94A833BFAC
7606FDE857B70F6365CC9ECBA22C35FD51A8B0FB8130FF721654BCB7C7CBCD9F
998DDAAD6EF9B1337447EE38A02F764CD3F10B5BF10C7951781CAB9ED5CAED0B
DE8465EE2FF151FEBA1339F0D1F06DD8125AE46DC13500212BBBC4AF4C684F44
F2F767AF2CFFAAA7F2F9A383507FB9BE894073228575A9E4DEB8CD7FAB420991
50FDE9A4006AB74F8BD0EC6492F63E7E365442CFEA7936512C2064A4B9ACC3A1
EAB8E54A9709BAB270C0C77F4B19D7564A10214171DAA063C19C3BDA77BBA38E
5747AAB17123CB5DE1A7D75748289177E0A82C18ECC445731BCBC88B60477515
5F140870FC9FC05C5F447BA2B4EF7B0D0274CC120718A9ADBE6505AB4F96BFAA
2C8A8C89D44EAEA1A45BB6EC900FE2CA3CB24582F3642E6E7A209CA9F2CE38F2
D9564CA499D3222A7784310F008387BC0A1B71F7DF06E3FFB9CE6166DEF0E311
B910026FAE0677156B7946465D1D51CB09D9297237758B75F5ECCDF503383715
F45158FEBE4D41356D1C9239E6AACB28D629DE12C0CDF25A65582B0B2F1D8156
D4D3249712471E85A059529C7D6101E2D5CD2796E7922F4D6DD0447518D11B4C
EF600EB513433965048E45EBC6DF72B8D560BEF748B624FE17F016DE82329736
FCA7120F8F3A8E42134F1B6B0C248D56F247AA6C3DDAD8277B11607975CC29FB
B8D7229DA29624B70E86B16F326EE8F91642618758ADB2F329BFCA914C8AFC05
737C108A5969895654C00A5F30A5F801DB459733371C748565084F358E7E6CEC
1C94E4CFC3000F952E0666AB40B9437D97AB42BAFB1097B2E2952E86C88E94BA
7027B7828ED039F009AF8CAC68605216D1D1053BFDB834F2846A97F75D0E91CD
F9971D84DCC900B9761C13791722D84194DD4AB3A859C63CD7F12D028D1969F2
D9366C0676CE8271C9A2EE3DF7A2FEA974DB97D441132CB5443D332BAB22529D
EF3B3902CD0D4E6630A68D7D594E1FBB5E1A45E0FB4E607854D3D03492D8CA38
ED4C60280793A3D2A0E887225B4432C779827332E0C4FC00BE5D72EA01729BE8
A6C5A16703EC9115B1A100E0941B81A425A733242BC98C5AC006030B0E5C758F
7A279110D8E907EC344D217432E9C76E6B590845648531D696EE46C6A703BD9A
EAF42BD39A75248C2A76C5007444F9E4780E3EBB31F876BEE000302935A55EBF
E1CE914272A8F135C4B178B121D38CE79E3AD729E30028E43296A054889EA496
9D1C62952C6AEC9BB506C8B67C217A180DC7A0EF56B7CCED507E2B1A7084EF1E
ACA5BD84BB78E0DAD3C330418312A0E076AB0951A98F6689070E6437B07E0D6E
591ABD90B6D1A3EC389BD83EE4E880CD492EC24D46F92C99498946CAB6DED8F5
DF0540063E9C1F89ED270A3844C5C96C3FBD0D4033DC5F23B5A755CEB18A036A
D9AEDEB6D134679398A9CEFD72AD749043168D737148FA863EEA050C12C67D90
4B24129BDEE930A7C26DFB0B0302AA42C71D9E2730DA325E6FB37D067425620D
FBF780639E03D66E48AC9E178D8C1FD05FCF8D81ADB2A3F7D3B878829E0C4DDD
2B41219DDA8FD87341F337F112E6E649BE407C85D3D3F03B3A3958BB81CA51E5
B0366D04BF6D10592B7BA0CBA0F65D930B080735E2D8211868BCBAC5AAC7ED3F
108D54F7CF2C4D2EB942BB3D915186E222EF53C533AF3B2492C683BC31CDFC0D
FB5D8C14F78D70E6B9048F394009E9040AF6359955E433247B049E04DF77E9CF
0FA1E09BF680B98CE96563219F82D9EEAFC6F78AF8033A688542EF95D172E116
0FA3192D02B42E1A706A9BCD0865456241134E0A769E95F93F6629DAE30D14F1
CB9EF105609DABC95D81353D89181D89CF74F9995B40E5C55FBC81DB40BB5CFE
D5955203C9A0DFA23E1DDE26ACF3E36B6D353363DBFED606D2BE7269DC0B20BF
D45B54EC944621B1D4030BFA59933EB429768915539C49C73A5021D490B3C706
DC93C67FA75D32FE863C483B9252B73F1E4CDD4912B3995A7DB9B4C56C828F8B
B0B0AFCEE2C65525E3972E426CB8A75DB1D127B4AE7A074EE25D0F6220F6063D
D3A440821E33E54B39F6BE9937B5E6F68E9B42FC64052B632AD9B4050F152206
A68FE7CAA241A4025CC6615FDA70F36340D8417D27A83D007491C542505F3BD5
D71822688763EBDBAC71788DAF6CF106DFF90F450E7B27181E9136CB9924F00F
CF022C6BD7CE581962C9DE36EA81EB55EDE2B2B915DCA5D50A7E3512B325253F
EEE5F43245912CDF2DD21BFD7CC9E5E7B232CD9570DED42DAB8ED03D7D6E5062
0550430364C88A1DF224DD3EE51109F413B4872D158E88EE3F59090FB93A5747
EDA57889E24969C323B85DCAD9AAD5FC33F29A921D427EEE0E0989971559688A
E7F151076AF9FAE9424B0E3DAE6F2B4E66E30644C513B87939EFD9DF31C42A62
BF096B816BF1E79F01EF66C5F23DD00C6C48AEF676230A41BA29DF7C0BDCB016
58415CF702346306E88069A03FB214ED307DED999C19F31AB198A63A8378E87C
B57435D91CBCF393CC071B3FDE031EA1CAE763E41AF3807125AECDFC2B1A23FB
48C93A3C6D20B40CDED1AADCA60A7E22E14EC367428D249ABFF386E03D9C1C9B
A3F119A8D3E1CA21561EF4BA3CBAAD27AD91C44C28F1D579989D8C3B5D6AD116
42638E0DDD5C6C2F44BF832E4D54880BAF264A443188410471504FD142F14DC9
532DC0FBF66FEB2F423D2C8BE63C07A4C680DE63BE2987A7D26AABAB474EEBD3
B4BF180469E1129AF438705D08BC04174D1CD50A27D94FB41C09029C0EAA200C
1BB9070C7F6833CF29BC0C5CC42986D34A2FBDC4EDDACCC1DDB52E196DDE7816
C1741468E2FACB6B0C091A7A2F6B6EAC7A5B4D39DAA5C0E94FECD94169098003
5348B6E613150446293F3A2B353C3C99D3F252E8AB5344E8279638A023CE465F
FD649C3C85B40307FD38AFF85150DE7788C0671D43789C64720154FEB608531A
E5F01B60A744721B8CEB52027E61C4E080C3A2CE1EC52B05A50091FEAF534CA5
28E5D88EFD8566893F56B21D08AAE77F2EC02FFCA16E51B80A519D24B1E2A278
771F4DD46BA4D8CF21F49B9F8E7A7FEBE37CCB1B2D860519303D08E9D4AB856B
9CBC75EEEF8D77DCFD4CD6F5A57CE25237199C9877FAAA0D6E5613A6C69F9267
6D92FBF6546D52384BB5EDE175FC7E481EF74C90360755DFBF7B3BEF632D2BA0
04081709232DDB9F8DB99AC039EF9F54C5318849BCD8D4A0106ADA2AFDAD6065
A36614A685245689C672AA53D222D84CBC9EB9BC1C8ED0033F5C27A9CAC8FF81
BC81C7B1E4411F3B475DAF165B9432DC74B9D81546675AE16824DD84B6CA3755
98B6C439A2E9081CEA1DA3B1F5FE15650CF4487A13F26844FE5AF5C91F988663
438323B9E02D4DCBBDDC52E7794AC04E72812426652267EDA2FC5643B5EA52C1
5F5AEF6F3D61FEA776369098745B751B1C866536E456C00A92BAD2DD31D36979
C599CAB77D4C47A8C0A60533013871A003565DC771ACF32E6708AE93310E3E65
B053A2EAB9C183BD44FCF0C48079602779F0F04476C42C0BCE3308F1E5DF5343
790F3E7E657DE7D246AFF35AAA4298F411E56C523B56189036954131C8EB4E81
74C2AA327DB9601268D2C877ED5AFAC1C61B8FA53F157BD60FAD7449153823E9
F7778158B67FD0F6C6AE6F34FB76BD776FFBE44A957067D3B23434B29AE98045
95E3290030C6472C0EFD04B72B41AED4C200126B492EBD33342978D99464D28D
F9957893CABFF4EC3BCC994C125ABBCF643E3E69CF0FC2BA2B9CE91B34625058
FECF097D2BD3B3729DBE862A50E9365E8235B2F2617402C25A3230F195AE7E6F
4D20CAB9F8DC6E18CFAF1B03123EEA84AFCA8D7AA9FD3459A7A0E1D38EFF958A
E17E8A965D460402CCA5E70934685EDD34D72237161EE357656A9B1AA080119B
84E388B7E41B5CE8E6894AD20C707FC9647C2D9BF139C9AE75C932AB97EBC00A
E1A2260C990C2486D55DFE985951304701D12D3A66EE38027BF506FFC84E003F
D01C6450DBD0DE1DF6EDE9390A0A2E49EFD4BC1E142FBB8A6141CF88745074D5
E0316ED412957EBD168670A3E4B3FAE0E757B49F463C526CF7FA2E48176AB586
9BC64A0C6E9B0626C45A3FAECA7D979DC0DF7EE8E51C4BF6C70BC794C6BBE8A2
AF265CFE0A973DDC9DB6DE7E7596528D2582B82FBA9FE332962F61640BC70FDC
E0651BC5889E2441C56B90093EA4FFF72B29D0F8A3B2AC6F0EC2D0D72D0BB11A
F8FF0AD030E068706DBABDC86EE288A39DB1879EE205A354FFDF637805C7DDC4
88A1BB87169A9B365C4C2E32841D44984F332C9156B30A6056497FD3351D7C0F
6F281460A7624BE30E39F00BA99FBF0F58790DB69856591230B56C914EEE84D9
1E56CE2440A58D277753A4D9D6A7E2A9CF14CD62E1A99350025F131D697CC0AC
DE8CCD15659B544FF2E9BD1FA0531017D74B47E173553F7727CAB5EA16F1D815
3C781668E87568A844EEA07E229F2DAE5CC5DEC3E7A75972FFE9A3209925EFFD
FD141BBE150141C36D1C1901D8F99C1863ECE4DDE11AA3604E2022AFC909284A
4D43B6FE86147C048B07CFE453C8070B0CC35C26E83223783878583DF8D36667
28FD0CDF7BF8C6BAFEFADFB285A85DCEF7A4AB5C77B5FFC96866641D00B0AB02
81C7CD4FB952A0B57DE7D10EA7D651D2112D36C1AF4F2E921D2551C0691C7FAA
3423B9E24EF0954EDAC81CBC55BF50587506D0DD02347E6B3AAE64A949E5C87C
CA39AE1F17BCA51CF6BC5758FF0C9116BB0D00B6E24214CDEBB2918B9058EE20
3950EDFD6CEA20D0649071442B2916EBCE5F4B59CC79863C9E50D108A802E91C
5459F5CEFCBA7605BD6778CF94D46E085D6B51FD3EDDA3EBD21CB5B571D21F68
D063FF359543D3E20D2F490B50F61445266E23D69D00238DDFF0155D293660ED
7E91B9B93715831C55BCFDE58F14EF8783A327DFB2BB3751BB4CCD9DD813472B
74E8F6E1B541E7E94B5886131E461AD28A9416FDDDC36974363444ACF4512C2A
19338DDCD3991EC1F98F12A9E59DF189DE3653870E8C664C6F732F6D1ECF9485
CCFB48448A3ADC1A074A815AE958F08D41996153D1C6AF911808334DD1510066
D981A51171A1C0D6E3D543E112900802C50D22E0E714FFB304B8A933D9575E91
17EB7456C0F0CDF4F9C9E361C08AA256350D05EAF182B0746F03A829573C7964
8B3F5FDC321715AC7BCF299D8728B868B9FC5AB023B335EAD7599B795CC31701
FE1FCCCA6BC89C2B640350DA641882E8CF028D9AAED0465492780B560D7A64F4
AACF00DD611A0D4AA2A4DBFFA6B4C111BD7B2A4307A0C3F611DF40E7AABF085D
E12F24B661713294A95BC93A85507348C08215013ED26C48BBB4CC5C7C3CB31E
874A1647684B190468BFB7BC781A5FCFBBFBB71AE71A47B9E18E48F5BDA5D89F
2EE6A0555AD1447A7FE4282BA1294BCEEA64B7B3BFDC1BCFA1063273D8D6B92F
86979F67036C2938DEAF61D75DD942CA11519B3F4AAD5AC4DE679C5AACA4F9EE
B15E139143CD160E22513C8895730986DBA9A8C89CDC8AA291BC6219D5192763
98707B066DA22EB77764E530DE619BC23AD135E487C20BB53D87CEF1C564E90F
EA605DC6AEC7D2C835EDBFFDEE3E46DD584F04936B53C3C81CD9E76F7E14D518
A5849CB4888A353080A6446C0D86A6F09F18684C6F1DAA6FB08FD0F3114A137D
9E824312DB0DD3608630CA8CABE530EF9226DE04C1771C23CDC5B31FA66AC666
BA3735D4459905072804AFA49FD2723E90E176A53A88FA0D7486A027F5B7FDDF
FD534569791150A380AE7E6B3DDB3C2DDD181667D315D21BF6D4AC2B193FEF9E
332888F79E6386062BE839C1F9D30AFFDE82CADE3492084128512A8C9D7D1960
C869B02BBC47434C1FA9AFF7F9A5F7DF1C9C512BF46E5E8F8DE7D91802CB02A1
E205CBD1870DE90DBCD8AB3972CEF5BC502DB98B9C81A1694B54FF61F2AAB48F
1B954211AF0A38D6CAB3BCD66979D817888B053D6CBC34EC86D2CA91E32214DD
857E80C707F0B6F107F10F868F5484EA21898DC1DE852E6BD09DBE40A4E306C6
76DE7CB1ADC78A861EDB383755242F3AD07E63DDF3174A09E363E92A1EAC874E
4BF7544FC327508FF6B2094DA04EC769BD543F9D5AF519812BE51E76CEEADFF0
E5BADA0CDF82AEFBBBF29912DB4DDB9BAEAEEE461B7EE0FAA9409ACD63741043
063EFC3D44B6BD0228D76DC7FB9583937F0BE8B41C8D713E062980C851690AAE
AF4AEEBAFDAD11B61F20999D0F242DD7D4B5C46EAFF99589528DBE0C561289A1
F539FA6D1158139B6B81B36092C4BF8702498F872031449E4D885A33AD74A56B
D84C5B343248EA1FB14B6B1700AE32B70EA9DAB3BE35589BACDEAAFEC6373D4D
DE1F0230787D0F976E9AAA2AD74F509D24025E3251B46FE2B616B6E38FB7FC5E
5A3935BD8548DD5092D851CA54B624ED98EA06F2E69CFB8BF3D5FE023992DE91
5B456381BB76A88C4440621D1573EE344B122200A16C7C72FD32FBF31C4A5E9C
ADF1E05B7E1EDACC4BDB75B937A7FA42BE486392901E6298C4225481723BB6B7
6B4C3C8D67920D6266DBE3DA4958112E2E930055B19031E8D430A3B53231A679
F56DBFC2992CBBF26A36D43256521A1424B0C5F0ED58FADF492F39A03602B1DC
AE4B0B3A76793F359A43F1A7126CE11F48FC08FF4CF111AFC61FA1C987FE1FD2
12D3178BA776B7236F42B0D5515606AC0E32328E94D8FD019B01852277523B00
CA315D32C1D48CAE9CEB284BE4E97C402209725EEF433321450CF0F079526A17
98B982DA025C7F917E15C1AD0C9B41498AC81254445277C899FE86E5F1DB7244
63EC5E073FA9A0A42D39B73D4466CD3DD128179D779AFF843ACBD57C1D14DC3B
D75C493F5EAC45D36CD67826C2CB969F1FEB572D0CE4D02CD3CFF14894FBB509
B8A12552B683D3A766F878A1FE610F845D5BD762A7673DF1087814BA0673A456
0F112CC860A42D5FB5A454FA6F461088EE7DC6BF9268A967A8F8ABFB53C14DCC
C40F4AFC79977CC3E44AA1EA09B9E8C6DDE3C6541E0F0E6E421E0AAF8F846911
7DA6275944FB08FDC081438438E6C1982EEDF4C0106324A7D76733DAB4B2FC2B
868A4E76EF4EECA841D19C8EE2AB74BEDCF4A0A4785B47863D3BB74045D690C8
7C54A681AA8635BD9B3F8AE4BA250C671F4637AE61246D4CBF058DC706B2CE6B
92D49909E1C9313D3189C9D1ADA2E43B852E967E4FD41CDD60D62C0E320050E3
4272115CCDF79AA8B93C62B35A236261C3BAECBD4EE45D669D9E4A4722BF7314
6E72695D9D7141213772BACC150C49619B32490CD8E2C6EA57AF5FCF93512B57
C5063096A4D350EC885F15CDD11BF253E04BF11B7B7AEFE7FD54E8543C4D2C67
58539823DBE1D37FCFC704863F7BCB42D86125D3B07DA1B44912BD0D12D06BB9
C07B23C61D987552FAA978B26A314536730D88D65BCCC9A14AA2727016CE1267
E9E65A75DE6583C66F05BD955A77375C85E31AB71A5E77AC2A57695F265A0E0F
4651439DE9789A8EC86B474E3A3438EDB94D25B85B91C6AD51334469AFCF8CD6
006A74919FAF6AECD67955516B400240C2CDB6D2645F8EA27F2558BBA48F1E9B
EF533A52ECBE7666063812C7474753A387E4FFCA3FA3DB130DE7E6E5AC48898A
D329B23C8EAEBDD3869ED81344FBDC7E4DEE7E90743689C79751C03188725BCA
282DF4F3C15296DDB13A3D2A92A056644577F8CBDA2CF5BB17CFFE502B964EB6
18654018CFD27CA289476D1A17963FCB60DE0B23A5F4E9C349E7C791C1429223
B3859527FC54516BB55170E658ACECF88D9F2A764D7E3FAAD3CA6B0747FBF975
403DB3B474AD8BDBFA82BD9A0A1EDC6265ADA01A9858F614B596423107AA1820
B86F45ED9B961DBF42CB16BFB2D70AB75E803C563CEB9EDC66DC3C75430242FF
B60CC0D7E1C0B3600A7BA34D7C656227360EEBD2DD87968883CBC879E4A944F2
BE75056DA6DD1FB403895C1F5A399517F7CB8BD0CA08D09CCEA17A7CE5D543F8
CA1332EE85125CA8EA348E47103C1A3F922161EFE99187A61215F58BD091610B
739BA5AEB1A6F91F0E135B7A5D29F2EF6A2775F39959872CEB81B2DC1EF641DE
4BFFB90869B77937C3FA5DBBBE6A7BED0558BCA463F3F2DC46DD4CBA524DBED1
B697A470091F7D00F392F55210F730AD20AF98893672C3DEF7A7920C8A2EA8D2
4EA806DFC79EE0F69C5DC73B0BBB15604E06B119CA0AA3E422A3A0FAD9BFFC6B
DCA9B737B962732C4C5BD424A28E43DDFECF131E9DF4B4A66A90E8B2A3141595
9748EAE56B4BC2AEEEC8A7A1348D9823D2D3EA73BAB53FFDE18987FC32091528
7ED87559DF7337AC83D0C167431B02A39B5CC68A357525332C6AB6C95B723728
12C61B1331D163EF2B90B4CD473E9BEC8AB0CBE47A3D6821E0137C4CFB36DEDC
1219A648CB7A5A2FC0588694B9C4D542B9AA58921218BE6DFA3AFDB5FE5AD63A
697DE831E883D0C9301DF7DF3E565AD9472394550388629CF249D1AE92C8C247
6078E0B0042D8EB80E3805AFC08614240E103F357B924258AEDB9E80E0D119E0
F9FFA8E4CDE12392861EF62821A5EF8FB0EE5E16F7840996EB57A5197C33D1CC
8A7C5FC0193CE0914E87AA69C009FCF5B67C8307DC2B72B4D6E277FCE5DEEDEF
EAEA9B87BFADBDB1C825755EBE4604C6763C00ED5859FDC43D5DABFA4AF9D4A8
7A07C1BED67AB06DE87AB9B32722AF9E5DEDF038F258A469C4CD0C20E57C0B94
72ECA108F35A8448F6E52F8F36CBC8B50BEB5314541CCCB8909E9C8DEC281CC9
6CAD0FBF6A8274F2C378F638CF62ACF07A7118400964C3A7034BD05D83CFC2F5
E73DE2592ED11B7F7D6E5B78A3023F85871CFEB6C6DD8BC4DE131830181FECF7
0C24F5811B530064F8861EE3AFA08EC821A9C73906579972E6A6F86720A9A109
3F505391ACB2F66D4B310F195DA9F8973321CBC39F248291A3EDCB5FFD84ABA2
971F04229115C6D298FD26B052E06391250A12D34D82A7A683024D71908160B1
EEC36B6E5D9B91BCA5D4B38B690479B90052471DA6DB9AED1B55B66336A92050
B3CED3BF81CFE7B091B19650F3D48E8AF232D2EB0A8E49D33FE230E2255E1183
CB768E1E738FB6A8BD7DB7B20D8B2E0CB43ED878D7300A8F5CC04B623589B41A
CBF92B862472F6DFC087D25E6211527D34F7F51EF111C1F3EDFD1E28808C8C26
55323EC02B099EFD747462BD823FE2FF72A920A5FEFD6456DC4C83D8D0497604
2AE4DC43A67D858AE62FADD311D2CEBB69EE63429905C84646D84EAD6F852814
9042B2BC2D37CC885DBD2701BA7C2B5246290932104C356E7EF05A8D91EADFC0
6D0048B224CB35A382653D72074E53F1311C59A59941AB41800D2A698E852163
70B78CF620EC74283A7959085B0AAE70EFEA121E4463EA0572203AFCAE72ED44
F53993FC5C9340E1A2888CAB3BFF64CC9C91608F0A5AB1BC25571701B7018DF9
4FF0D1A8AF539F7AEAFF7D7F64A4FEECA725C91BF86ADB5D85EE2C986B9714CD
5AF3B93043F3ED792CFC379A5B4C030DC0CCCC32FCA1D001A9729F280E6D4C40
65C0096EBF8C38C630570142D6849BC512723A38E2F501AAB8BBF71046D824DB
906D4EC98C4431CEF86BD83CE05BC8233F35B2DDFB52B2653A060BA4AA1C2F17
38DC6D9C099BBBC6EA14EF0DD6497D4513DF0AE4D793AC73C5D1715EB8B992F4
F8A2334654BF41DA8B3AD8AF625CE7030911956B240D3FDC78520A66DD3DB99E
7EC7F18E9FDAB38A312E6AA43ED99F13D4EA2E72F4108C246DF09B915038B740
2F2120F3926E6A25BF0A059D2D6CDA875F9BCDE0AA4112F3C8C969B4C498C981
4E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000
(C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktional)
@start /Fa 140[435 12[452 102[{ enclmmathit ReEncodeFont }2
885.568 /LMMathItalic8-Regular rf /Fb 173[959 82[{}1
1328.35 /MSBM10 rf /Fc 205[406 406 49[{ enclmrm ReEncodeFont }2
664.176 /LMRoman6-Regular rf /Fd 203[993 52[{}1 1328.35
/wasy10 rf /Fe 185[723 4[830 13[553 4[307 46[{ enclmec ReEncodeFont }4
1106.96 /LMRoman10-Regular rf /Ff 160[909 45[606 1[606
47[{ enclmec ReEncodeFont }3 1212.12 /LMRoman10-Regular
rf /Fg 149[369 51[0 3[886 48[369 1033{ enclmmathsy ReEncodeFont }5
1328.35 /LMMathSymbols10-Regular rf /Fh 135[739 16[623
641 1[676 560 553 683 16[838 17[1012 1[1012 361 59[{
 enclmmathit ReEncodeFont }11 1328.35 /LMMathItalic12-Regular
rf /Fi 194[1012 9[650 650 650 650 4[1012 1[506 506 40[{
 enclmrm ReEncodeFont }8 1328.35 /LMRoman12-Regular rf
/Fj 255[732{ enclmmathsy ReEncodeFont }1 885.568 /LMMathSymbols8-Regular
rf /Fk 200[470 470 470 470 470 470 470 49[{ enclmrm ReEncodeFont }7
885.568 /LMRoman8-Regular rf /Fl 650 2[723 5[650 17[650
105[578 686 686 939 686 723 506 513 506 686 723 650 723
1084 361 686 397 361 723 650 397 578 723 578 723 650
9[1336 1[975 4[885 1012 975 2[1011 668 469 975 1021 849
885 993 939 921 975 6[361 5[650 650 650 650 2[361 434
361 2[506 506 6[361 3[723 1[759 27[{ enclmec ReEncodeFont }59
1328.35 /LMRoman12-Regular rf /Fm 133[956 4[1196 837
849 879 2[1076 1196 1793 598 1136 1[598 1196 1076 658
982 1196 956 1196 1046 6[1315 2[2223 1625 1[1497 2[1616
1470 1616 1682 2041 1[1685 1[801 2[1353 1412 1[1554 1530
1625 10[1076 1076 1076 1076 1076 1076 1076 1076 598 717
45[{ enclmec ReEncodeFont }45 1912.83 /LMRoman12-Bold
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-2331 165 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a -2331
165 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a 1328 x Fm(F)-239
b(A)628 b(3.3)g(-)g(1)h(V)-179 b(ersc)-60 b(hiebung)625
b(Quadratisc)-60 b(he)627 b(F)-179 b(unktion)626 b(-)i(ZO)h(-)f(MK)p
0 TeXcolorgray -741 4800 a Fl(1.)p 0 TeXcolorgray 651
w(Ordne)407 b(den)h(folgenden)h(Graphen)f(jew)-36 b(eils)410
b(die)e(en)-36 b(tsprec)g(hende)407 b(F)-108 b(unktionsgleic)-36
b(h)g(ung)408 b(zu!)p 0 TeXcolorgray 0 TeXcolorgray 4296
10123 12721 45 v 17017 10123 4523 45 v 4296 20347 45
10225 v 5005 19402 a
 currentpoint currentpoint translate 0.44102 0.44102 scale neg exch
neg exch translate
 5005 19402 a 5438 19402 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 227.62195 a add def
/d 0.0 a add neg def /h 170.71646 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 5438 19402
a 18037 9953 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 113.81097 0.0 -113.81097 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -113.81097 0.0 T 9
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 85.35823 0.0 -85.35823   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 113.81097  0 -113.81097  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -113.81097
 113.81097  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-85.35823  def /maxTickline 85.35823  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 85.35823
0.0 -85.35823   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 113.81097
0.0 -113.81097 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 85.35823  0 -85.35823  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -85.35823
 85.35823  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-113.81097  def /maxTickline 113.81097  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 85.35823
0.0 -85.35823   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 113.81097
0.0 -113.81097 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 16792 7089 a Fk(1)16792
3939 y(2)16060 13342 y Fj(\000)p Fk(1)16060 16491 y Fj(\000)p
Fk(2)16060 19641 y Fj(\000)p Fk(3)20951 11299 y(1)2680
b(2)f(3)-13434 b Fj(\000)p Fk(1)-4351 b Fj(\000)p Fk(2)f
Fj(\000)p Fk(3)g Fj(\000)p Fk(4)18037 9953 y @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -4.0 def /x1 4.0 def /dx x1 x sub
199 div def /F@pstplot ((x+3.0)^(2.0)-2.0)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 30635 19402 a
currentpoint initclip moveto
 30635 19402 a
5005 19402 a
 currentpoint currentpoint translate 1 0.44102 div 1 0.44102 div scale
neg exch neg exch translate
 5005 19402 a 16973 20347 45 10225 v 0.9
TeXcolorgray 17017 20347 4478 10225 v 0 TeXcolorgray
1 0 0 TeXcolorrgb 18795 15692 a Fl(B)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 21495 20347 45 10225
v 4296 20391 12721 45 v 17017 20391 4523 45 v 4296 30615
45 10225 v 5005 29670 a
 currentpoint currentpoint translate 0.44102 0.44102 scale neg exch
neg exch translate
 5005 29670 a 5438 29670 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 227.62195 a add def
/d 0.0 a add neg def /h 170.71646 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 5438
29670 a 18037 20221 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 113.81097 0.0 -113.81097 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -113.81097 0.0 T 9
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 85.35823 0.0 -85.35823   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 113.81097  0 -113.81097  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -113.81097
 113.81097  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-85.35823  def /maxTickline 85.35823  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 85.35823
0.0 -85.35823   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 113.81097
0.0 -113.81097 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 85.35823  0 -85.35823  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -85.35823
 85.35823  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-113.81097  def /maxTickline 113.81097  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 85.35823
0.0 -85.35823   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 113.81097
0.0 -113.81097 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 16792 17357 a
Fk(1)16792 14208 y(2)16060 23610 y Fj(\000)p Fk(1)16060
26760 y Fj(\000)p Fk(2)16060 29909 y Fj(\000)p Fk(3)20951
21567 y(1)2680 b(2)f(3)-13434 b Fj(\000)p Fk(1)-4351
b Fj(\000)p Fk(2)f Fj(\000)p Fk(3)g Fj(\000)p Fk(4)18037
20221 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -4.0 def /x1 4.0 def /dx x1 x sub
199 div def /F@pstplot (-(x+2.0)^(2.0)-1.0)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 30635
29670 a
currentpoint initclip moveto
 30635 29670 a 5005 29670 a
 currentpoint currentpoint translate 1 0.44102 div 1 0.44102 div scale
neg exch neg exch translate
 5005 29670 a 16973
30615 45 10225 v 0.9 TeXcolorgray 17017 30615 4478 10225
v 0 TeXcolorgray 1 0 0 TeXcolorrgb 18759 25961 a Fl(D)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 21495
30615 45 10225 v 4296 30659 12721 45 v 17017 30659 4523
45 v 4296 40883 45 10225 v 5005 39939 a
 currentpoint currentpoint translate 0.44102 0.44102 scale neg exch
neg exch translate
 5005 39939 a
5438 39939 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 227.62195 a add def
/d 0.0 a add neg def /h 170.71646 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 5438 39939 a 18037 30490 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 113.81097 0.0 -113.81097 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -113.81097 0.0 T 9
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 85.35823 0.0 -85.35823   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 113.81097  0 -113.81097  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -113.81097
 113.81097  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-85.35823  def /maxTickline 85.35823  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 85.35823
0.0 -85.35823   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 113.81097
0.0 -113.81097 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 85.35823  0 -85.35823  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -85.35823
 85.35823  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-113.81097  def /maxTickline 113.81097  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 85.35823
0.0 -85.35823   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 113.81097
0.0 -113.81097 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
16792 27625 a Fk(1)16792 24476 y(2)16060 33879 y Fj(\000)p
Fk(1)16060 37028 y Fj(\000)p Fk(2)16060 40178 y Fj(\000)p
Fk(3)20951 31835 y(1)2680 b(2)f(3)-13434 b Fj(\000)p
Fk(1)-4351 b Fj(\000)p Fk(2)f Fj(\000)p Fk(3)g Fj(\000)p
Fk(4)18037 30490 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -4.0 def /x1 4.0 def /dx x1 x sub
199 div def /F@pstplot (-(x-1.0)^(2.0)+1.0)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
30635 39939 a
currentpoint initclip moveto
 30635 39939 a 5005 39939 a
 currentpoint currentpoint translate 1 0.44102 div 1 0.44102 div scale
neg exch neg exch translate
 5005 39939 a
16973 40883 45 10225 v 0.9 TeXcolorgray 17017 40883 4478
10225 v 0 TeXcolorgray 1 0 0 TeXcolorrgb 18814 36229
a Fl(E)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
21495 40883 45 10225 v 4296 40928 12721 45 v 17017 40928
4523 45 v 4296 51152 45 10225 v 5005 50207 a
 currentpoint currentpoint translate 0.44102 0.44102 scale neg exch
neg exch translate
 5005 50207
a 5438 50207 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 227.62195 a add def
/d 0.0 a add neg def /h 170.71646 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 5438 50207 a 18037 40758 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 113.81097 0.0 -113.81097 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -113.81097 0.0 T 9
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 85.35823 0.0 -85.35823   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 113.81097  0 -113.81097  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -113.81097
 113.81097  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-85.35823  def /maxTickline 85.35823  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 85.35823
0.0 -85.35823   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 113.81097
0.0 -113.81097 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 85.35823  0 -85.35823  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -85.35823
 85.35823  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-113.81097  def /maxTickline 113.81097  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 85.35823
0.0 -85.35823   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 113.81097
0.0 -113.81097 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
16792 37894 a Fk(1)16792 34744 y(2)16060 44147 y Fj(\000)p
Fk(1)16060 47297 y Fj(\000)p Fk(2)16060 50446 y Fj(\000)p
Fk(3)20951 42104 y(1)2680 b(2)f(3)-13434 b Fj(\000)p
Fk(1)-4351 b Fj(\000)p Fk(2)f Fj(\000)p Fk(3)g Fj(\000)p
Fk(4)18037 40758 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -4.0 def /x1 4.0 def /dx x1 x sub
199 div def /F@pstplot ((x-1.0)^(2.0)+2.0)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
30635 50207 a
currentpoint initclip moveto
 30635 50207 a 5005 50207 a
 currentpoint currentpoint translate 1 0.44102 div 1 0.44102 div scale
neg exch neg exch translate
 5005 50207 a
16973 51152 45 10225 v 0.9 TeXcolorgray 17017 51152 4478
10225 v 0 TeXcolorgray 1 0 0 TeXcolorrgb 18744 46497
a Fl(A)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
21495 51152 45 10225 v 4296 51196 12721 45 v 17017 51196
4523 45 v 0 TeXcolorgray 0 TeXcolorgray 26826 10123 4567
45 v 31392 10123 9209 45 v 26826 13484 45 3362 v 0.92
TeXcolorgray 26870 13484 4478 3362 v 0 TeXcolorgray 28597
12304 a(A)p 31348 13484 45 3362 v 32056 12207 a Fi(\()p
Fh(x)296 b Fg(\000)f Fi(1\))36081 11725 y Fk(2)36902
12207 y Fi(+)g(2)p 40557 13484 V 26826 13528 4567 45
v 31392 13528 9209 45 v 26826 16889 45 3362 v 0.92 TeXcolorgray
26870 16889 4478 3362 v 0 TeXcolorgray 28649 15709 a
Fl(B)p 31348 16889 45 3362 v 32056 15612 a Fi(\()p Fh(x)h
Fi(+)e(3\))36059 15130 y Fk(2)36881 15612 y Fg(\000)h
Fi(2)p 40557 16889 V 26826 16934 4567 45 v 31392 16934
9209 45 v 26826 20295 45 3362 v 0.92 TeXcolorgray 26870
20295 4478 3362 v 0 TeXcolorgray 28639 19115 a Fl(C)p
31348 20295 45 3362 v 32056 19018 a Fg(\000)p Fi(\()p
Fh(x)h Fg(\000)f Fi(2\))37114 18536 y Fk(2)37935 19018
y Fi(+)g(1)p 40557 20295 V 26826 20339 4567 45 v 31392
20339 9209 45 v 26826 23700 45 3362 v 0.92 TeXcolorgray
26870 23700 4478 3362 v 0 TeXcolorgray 28612 22520 a
Fl(D)p 31348 23700 45 3362 v 32056 22423 a Fg(\000)p
Fi(\()p Fh(x)h Fi(+)f(2\))37093 21941 y Fk(2)37914 22423
y Fg(\000)g Fi(1)p 40557 23700 V 26826 23745 4567 45
v 31392 23745 9209 45 v 26826 27106 45 3362 v 0.92 TeXcolorgray
26870 27106 4478 3362 v 0 TeXcolorgray 28667 25926 a
Fl(E)p 31348 27106 45 3362 v 32056 25829 a Fg(\000)p
Fi(\()p Fh(x)h Fg(\000)f Fi(1\))37114 25347 y Fk(2)37935
25829 y Fi(+)g(1)p 40557 27106 V 26826 27150 4567 45
v 31392 27150 9209 45 v 26826 30512 45 3362 v 0.92 TeXcolorgray
26870 30512 4478 3362 v 0 TeXcolorgray 28685 29331 a
Fl(F)p 31348 30512 45 3362 v 32056 29234 a Fi(\()p Fh(x)h
Fi(+)e(2\))36059 28753 y Fk(2)36881 29234 y Fg(\000)h
Fi(1)p 40557 30512 V 26826 30556 4567 45 v 31392 30556
9209 45 v 47992 4800 a Ff(___/1)p 1 0 0 TeXcolorrgb 48228
6792 a Fe(F)-123 b(A)369 b(3.3)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 55224 54804 45 v 0 TeXcolorgray
24746 81281 a Fl(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fm(F)-239 b(A)717 b(3.3)g(-)h(2)f(Wirkung)e
(der)i(P)-60 b(arameter)718 b(-)f(MC)h(-)g(BIFIE)p 0
TeXcolorgray -741 4800 a Fl(2.)p 0 TeXcolorgray 651 w(Gegeb)36
b(en)394 b(ist)h(eine)g(P)-36 b(otenzfunktion)395 b Fh(g)442
b Fl(mit)395 b(der)f(Gleic)-36 b(h)g(ung)394 b Fh(g)48
b Fi(\()p Fh(x)p Fi(\))368 b(=)h Fh(c)216 b Fg(\001)g
Fh(x)37583 4318 y Fk(2)38325 4800 y Fi(+)g Fh(d)394 b
Fl(mit)h Fh(c)369 b(<)g Fi(0)921 6792 y Fl(und)432 b
Fh(d)369 b(>)g Fi(0)p Fl(.)921 11330 y(Kreuzen)433 b(die)g(b)36
b(eiden)433 b(f\374r)h Fh(g)481 b Fl(zutre\033enden)431
b(A)-36 b(ussagen)434 b(an.)p 5689 12296 35006 45 v 5689
15515 45 3219 v 6398 14238 a Fh(g)481 b Fl(sc)-36 b(hneidet)432
b(die)i(y-A)-36 b(c)g(hse)433 b(im)h(Punkt)f Fh(P)550
b Fi(=)368 b(\()p Fh(d)p Fg(j)p Fi(0\))p Fl(.)p 38285
15515 V 40650 15515 V 5689 15559 35006 45 v 5689 18622
45 3064 v 6398 17419 a Fh(g)481 b Fl(b)36 b(esitzt)433
b(zw)-36 b(ei)434 b(Nullstellen.)p 38285 18622 V 1 0 0
TeXcolorrgb 38993 17422 a Fd(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 40650 18622 V 5689 18666 35006
45 v 5689 21737 45 3071 v 6398 20534 a Fl(Je)f(gr\366\377er)i
Fh(d)e Fl(ist,)h(umso)g(steiler)g(v)-36 b(erl\344uft)434
b(der)f(Graph)f(v)-36 b(on)434 b Fh(g)48 b Fl(.)p 38285
21737 V 40650 21737 V 5689 21781 35006 45 v 5689 24844
45 3064 v 6398 23641 a(Je)433 b(kleiner)i Fh(c)e Fl(ist,)h(umso)g
(\035ac)-36 b(her)432 b(v)-36 b(erl\344uft)435 b(der)e(Graph)f(v)-36
b(on)434 b Fh(g)48 b Fl(.)p 38285 24844 V 40650 24844
V 5689 24888 35006 45 v 5689 27952 45 3064 v 6398 26748
a Fh(g)481 b Fl(b)36 b(esitzt)433 b(einen)g(Ho)36 b(c)-36
b(hpunkt)p 38285 27952 V 1 0 0 TeXcolorrgb 38993 26752
a Fd(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
40650 27952 V 5689 27996 35006 45 v 47992 4800 a Ff(___/1)p
1 0 0 TeXcolorrgb 48228 6792 a Fe(F)-123 b(A)369 b(3.3)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
32024 54804 45 v 0 TeXcolorgray 24746 81281 a Fl(2)p
0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1599 a Fm(F)-239 b(A)717 b(3.3)g(-)h(3)f(W)-179
b(urzelfunktion)714 b(-)j(O)-60 b(A)718 b(-)g(Matura)f(NT)g(2)g(15/16)p
0 TeXcolorgray -741 4907 a Fl(3.)p 0 TeXcolorgray 651
w(In)1037 b(der)f(nac)-36 b(hstehenden)1035 b(Abbildung)h(ist)h(der)g
(Graph)f(einer)g(F)-108 b(unktion)1037 b Fh(f)1178 b
Fl(mit)921 6899 y Fh(f)142 b Fi(\()p Fh(x)p Fi(\))369
b(=)f Fh(a)295 b Fg(\001)g Fh(x)7718 6046 y Fc(1)p 7718
6209 406 45 v 7718 6756 a(2)8608 6899 y Fi(+)f Fh(b)221
b Fi(\()p Fh(a;)g(b)370 b Fg(2)f Fb(R)p Fh(;)221 b(a)369
b Fg(6)p Fi(=)g(0\))434 b Fl(dargestellt.)921 9444 y(Die)501
b(K)-36 b(o)36 b(ordinaten)501 b(der)f(herv)-36 b(orgehob)36
b(enen)500 b(Punkte)g(des)h(Graphen)e(der)h(F)-108 b(unktion)500
b(sind)921 11436 y(ganzzahlig.)p 0 TeXcolorgray 0 TeXcolorgray
7667 33490 a
 currentpoint currentpoint translate 0.99562 0.99562 scale neg exch
neg exch translate
 7667 33490 a 7667 33490 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 285.66534 a add def
/d 0.0 a add neg def /h 178.68318 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 7667 33490 a 14344
28766 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -28.45274 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 225.34567 0.0 -60.31967 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -56.90549 0.0 T 11
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 136.00407 0.0 -42.67911   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 225.34567  0 -60.31967  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -60.31967
 225.34567  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-42.67911  def /maxTickline 136.00407  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 136.00407
0.0 -42.67911   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 225.34567
0.0 -60.31967 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 136.00407  0 -42.67911  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -42.67911
 136.00407  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-60.31967  def /maxTickline 225.34567  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 136.00407
0.0 -42.67911   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 225.34567
0.0 -60.31967 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 13099 25902 a Fk(1)13099 22752
y(2)13099 19602 y(3)13099 16453 y(4)12367 32155 y Fj(\000)p
Fk(1)17258 30112 y(1)2680 b(2)g(3)f(4)h(5)f(6)h(7)-26033
b Fj(\000)p Fk(1)-4351 b Fj(\000)p Fk(2)14344 28766 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end

14344 28766 a 14344 28766 a
tx@Dict begin  { 225.34567 136.00407 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 14344 28766 a 14344 28766
a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 14344 28766 a 14001 29052 a Fl(x)14344 28766 y
tx@Dict begin  PutEnd  end
 14344
28766 a 14344 28766 a
tx@Dict begin  PutEnd  end
 14344 28766 a 14344 28766 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 14344
28766 a 14344 28766 a
tx@Dict begin  { 0.0 0.0 pop 225.34567 136.00407 exch pop } PutCoor
PutBegin  end
 14344 28766 a 14344 28766 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 14344
28766 a 13296 29098 a Fl(f\(x\))14344 28766 y
tx@Dict begin  PutEnd  end
 14344 28766
a 14344 28766 a
tx@Dict begin  PutEnd  end
 14344 28766 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 1.5200000842441344E-8 def /x1 7.920000000000004
def /dx x1 x sub 199 div def /F@pstplot (sqrt(x)+2.0)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 0.0 56.90549   false
NArray  /DS 4.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show
grestore } bind def   1. .setopacityalpha  newpath n { transform floor
.5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 28.45274 85.35823
  false NArray  /DS 4.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 113.81097 113.81097
  false NArray  /DS 4.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
14344 28766 a
tx@Dict begin  { 21.05518 94.4633 } PutCoor PutBegin  end
 14344 28766 a -172 x Fa(f)14344 28766 y
tx@Dict begin  PutEnd  end

14344 28766 a 39289 33490 a
currentpoint initclip moveto
 39289 33490 a 7667 33490
a
 currentpoint currentpoint translate 1 0.99562 div 1 0.99562 div scale
neg exch neg exch translate
 7667 33490 a 921 37475 a Fl(Gib)433 b(die)g(W)-108
b(erte)434 b(v)-36 b(on)434 b Fh(a)f Fl(und)f Fh(b)i
Fl(an!)921 42012 y Fh(a)369 b Fi(=)p 1 0 0 TeXcolorrgb
433 w Fl(1)p 0 0 0 TeXcolorrgb 921 46549 a Fh(b)g Fi(=)p
1 0 0 TeXcolorrgb 433 w Fl(2)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
47992 4907 a Ff(___/1)p 1 0 0 TeXcolorrgb 48228 6899
a Fe(F)-123 b(A)369 b(3.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 50025 54804 45 v 0 TeXcolorgray
24746 81281 a Fl(3)p 0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1599 a Fm(F)-239 b(A)725 b(3.3)f(-)h(4)g(Quadratisc)
-60 b(he)724 b(F)-179 b(unktion)722 b(-)j(MC)g(-)g(Matura)g(2013/14)
-2438 4622 y(1.)717 b(Neb)60 b(en)-60 b(termin)p 0 TeXcolorgray
-741 7929 a Fl(4.)p 0 TeXcolorgray 651 w(Eine)397 b(quadratisc)-36
b(he)397 b(F)-108 b(unktion)396 b Fh(f)539 b Fl(der)396
b(F)-108 b(orm)396 b Fh(f)142 b Fi(\()p Fh(x)p Fi(\))369
b(=)g Fh(a)220 b Fg(\001)g Fh(x)30207 7447 y Fk(2)30953
7929 y Fi(+)g Fh(b)397 b Fl(mit)g Fh(a;)221 b(b)370 b
Fg(2)e Fb(R)397 b Fl(und)f Fh(a)369 b Fg(6)p Fi(=)g(0)921
9921 y Fl(ist)434 b(gegeb)36 b(en.)921 12466 y(Kreuze)433
b(die)h(zutre\033ende\(n\))d(A)-36 b(ussage\(n\))433
b(an!)p 1062 15499 44260 45 v 1062 20561 45 5063 v 1770
17366 a(Der)344 b(Graph)e(der)h(F)-108 b(unktion)343
b Fh(f)485 b Fl(hat)343 b(zw)-36 b(ei)344 b(v)-36 b(ersc)g(hiedene)343
b(reelle)h(Nullstellen,)h(w)-36 b(enn)1770 19358 y(gilt:)435
b Fh(a)369 b(>)f Fi(0)434 b Fl(und)f Fh(b)369 b(<)f Fi(0)p
Fl(.)p 42912 20561 V 1 0 0 TeXcolorrgb 43621 18362 a
Fd(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
45277 20561 V 1062 20605 44260 45 v 1062 25410 45 4805
v 1770 22473 a Fl(Der)409 b(Graph)e(der)g(F)-108 b(unktion)407
b Fh(f)550 b Fl(mit)408 b Fh(b)369 b Fi(=)g(0)408 b Fl(b)36
b(er\374hrt)407 b(die)h(x-A)-36 b(c)g(hse)407 b(in)h(der)g(lokalen)1770
24465 y(Extremstelle.)p 42912 25410 V 1 0 0 TeXcolorrgb
43621 23340 a Fd(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 45277 25410 V 1062 25454 44260 45 v 1062
28524 45 3071 v 1770 27321 a Fl(Der)425 b(Graph)f(der)g(F)-108
b(unktion)424 b Fh(f)567 b Fl(mit)425 b Fh(b)369 b(>)f
Fi(0)426 b Fl(b)36 b(er\374hrt)423 b(die)i(x-A)-36 b(c)g(hse)424
b(im)h(Ursprung.)p 42912 28524 V 45277 28524 V 1062 28569
44260 45 v 1062 31639 45 3071 v 1770 30436 a(F)-27 b(\374r)433
b Fh(a)369 b(<)g Fi(0)433 b Fl(hat)h(der)f(Graph)f(der)h(F)-108
b(unktion)433 b Fh(f)576 b Fl(einen)433 b(Ho)36 b(c)-36
b(hpunkt.)p 42912 31639 V 1 0 0 TeXcolorrgb 8196 w Fd(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45277
31639 V 1062 31683 44260 45 v 1062 34754 45 3071 v 1770
33551 a Fl(F)-27 b(\374r)433 b(die)h(lokale)h(Extremstelle)f
Fh(x)18386 33750 y Fa(s)19310 33551 y Fl(der)f(F)-108
b(unktion)433 b Fh(f)576 b Fl(gilt)434 b(immer:)g Fh(x)35772
33750 y Fa(s)36631 33551 y Fi(=)369 b Fh(b)p Fl(.)p 42912
34754 V 45277 34754 V 1062 34798 44260 45 v 47992 7929
a Ff(___/1)p 1 0 0 TeXcolorrgb 48228 9921 a Fe(F)-123
b(A)369 b(3.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 38826 54804 45 v 0 TeXcolorgray 24746
81281 a Fl(4)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

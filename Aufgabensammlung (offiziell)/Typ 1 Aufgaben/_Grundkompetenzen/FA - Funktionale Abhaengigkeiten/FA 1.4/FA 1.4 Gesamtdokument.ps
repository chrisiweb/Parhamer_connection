%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 1.4/FA 1.4 Gesamtdokument.dvi
%%CreationDate: Fri Nov 10 08:32:04 2017
%%Pages: 13
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: LMRoman12-Bold LMRoman12-Regular LMMathItalic12-Regular
%%+ LMRoman8-Regular LMMathSymbols8-Regular LMRoman10-Regular
%%+ LMRoman6-Regular wasy10 LMMathSymbols10-Regular
%%+ LMMathItalic8-Regular
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ "C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 1.4/FA 1.4 Gesamtdokument.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2017.11.10:0931
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFB8DF7740107CE11D9F1E95F04ACAA904AECA8C
66082082F59CB8E5E7A96FFD63BF90F69931F3D5B5F81C3E234904D5FE5CCAD9
17381670D1548D72FE715FFA30FEBAC715513E0525049188B9D91BF7EBFF4444
ABA5490DC6A5CD8C1BF3EF1341A126980C7890794A85EF6CE32D227A9532B61E
E1FDB83CCE8849508A3EA0FDABE92387B526ED0C9A92315083DF5BEC01ECCC91
62D605160067EB251A8B40D3229C18FF655220D3DC72B74618CE98CDB7E370A0
BA04A0FFC4D3C3AFAD0869003BE33A0CC74D81D8BB0D87E5C0AE932B4309387E
9DBF69C52ABE85006D83B9020CC042DA9597CE1A2C03653896E07940025DD68C
11C8EF41CED336BB116AB3BE6175D6DD1CAF80144DD5D921D9F734EB854BE550
341FD8148EBCF4482E9D97738693472583DD53F4D15F219219825BEA068392E9
EC101A958BA3D4C45B156302AD722B13F05F71D8C40C2ED1766F45ECB609FDD6
6F3014B11E63D70CA13D96BD5AE19DAD78AD44C7C99DD91D71CC2A3E0EF74012
0DE42BF30706C80B42BB37178508EB5EB02F088194A4AEF86083F9A849BDD896
A9B2F6F431345964D7EC4F60EA071D0061F16D88796C4BA0C670D0E715ED9330
13619BC67D712BF7CEC27CE0B7ED8D31A29D7F2D8884AEABFBF6919D7FFD1E7D
0B2FA582811CDA7DEB06661A2D27741CECA6F2956BF0F2DCDF5326BD8683B5E3
828D8A7AE0C2040DE5F9ABF2B4CB8517A00888053AE978BDF45C9B464B9DA129
0584B298711CB71771E933AB92CA36C6D06E8D4E51000F60EB69CFE870326E00
4D436C27CC46EEF80FA1A05AB90D788643BDAC66F405924BF40E49AE3D7453C6
30FC3431FA13B333D69F672BCD4D19F6D70059D309B72D0A48EC241A28AE69C4
8B50DDF960297D39DF2B708BEF605075EE15741BE0742A7D74895BC47DCAA02E
982F9ED1C700AE14F72B455074678DFDBED70D546BC7E2C50ED4DC57B3D87551
CE86D4E2DB7607F065FACA01BF64480CC5A1E88D7CB8E40CD6C4FA69CF3A22D2
52AEBA66664944DB03B6DC1452701BF67FF30DFFE27926F7BC36D2193386935E
6A69C5868A268D1D3E1D71D757DE1530DFCBF7FB5979EF5F012CAF413DABCB32
90E29A0CECA45791C7D4E00573CE94A026B0FA081F6FFDBAF51A7673F6D60381
9A6EF16E2C6DA9D1EB555908CF057ECDBAD28147DAC67EB875748BAE25E1934F
0645BB84A6B098DCC8D21513741301029A9B2BB3A41F6D0503AA0DE9C012E610
B9840E263707E73B995B2EAE18188849E708A4E69F2C5A3E08AAD4A9BBC747FF
9A63EEB766D68A26681F75A165FB9D0C92DE633F84CCB5E4C8DFEC0195E99B6E
47CBE1D39D16881E6FA636A9B0CDA1509D95CA8A85A9EAA164A4716C56D153C9
6EBB269F3BA80EBDEC280D759C8B913411189CAD4224A4D4C8BE1515C1FE4492
D9383063C18A4DB69B44B73455D293113BDC0CCF64BA27965D2B38AF8599CBCF
DB6C84A32807C0BC46CFA13B270AB88AB7AC36E5075280062A516E93E883C04A
C3D262EFF193B26BFC0660B8A3DF7F12B1FE17E8AF3E3265D6206148C02FAD5A
125A6A7A6376AF4D646EB2A26E66C47738274E1AFBB463A91AAB97CBA9741C51
F951D86E0E4C62BFF030F461E614AC870A28CE055D4D77035D241AD41FAE4BB6
93A50E24F925F3A8D884C6E9A830E9148B0D9987F1BF8FCA62A6C6F745E45C34
0DB70968FAAED1226A949C78D176733CA1427F09CCC7D131A22F9DDD18A15283
213F9B0F7AAD043EA4F9F7EEE92BA769DC7E4C5AB3F50FE19F3A3904EC4C34A3
A78F5B436CF000514A8E7BA6FB5B44EC192D3FED3CC31D9AAC0C0C31DD9C7DC3
4C4784CDC350C8E81DD6435FC6A7C2B91B672FA23D9F875C001E76EA33DCB1F8
AF334B793677DC9D0D6B2CF2ED2DD23008CBB0A24F5EAA684B8EADC5D1A71CDE
74161A5086EE45A4C8FB699618C2AE3E8895EFBED6CF7509792BD183F5402C4A
A3E91301863DA4F8053BFCDBE68F1C2CD728BC91B95E7E66D0DE5659639825AC
78EAAF8F39D804D53E29C57A73059478EEC666E45CED43099074B3CE53E504C6
BFAC2BEF3663F1C2350D64791158CA280C98EABA19973BB596EEB41C7FAAB530
481B4AB41596674B6BE12B56A9E6EE5FBF33897F01997D214276B8B091875471
0147A13BA938FA06BDFE812F0FB311D0E9CBD331ECA61B000C13A681B5D7FEFB
9C0CD5A2FCEAFCB4B635CC9D88D8EF06C084C8DEA328EEFD604685676CFFF64C
9F2630CABF2F83D137D226B8523263395579F2B2D33E0A136C429A9D806C2CF8
AEA176A608FC51751104BB96EAF8314E2322C457EC60D2DC1454D461B2681AAC
16693FF62D9E03AB3AE26A53C93306F4A89AC8E95965A3C79C82898315CEE46A
6AFBDF1A183AB1941874DBB0AB81350F9F2283A52F8E07C3D70161F0724055E7
8899DDF3BCC34D14196EA4CF3C6BA6E9934C3911316220EFE099455232455F7E
A208FDE8268D1553651A1C434283570DBC57F42BF44CA3DC5AC833C4B0091084
660574D12B0EADD3B8305BECD06D47F6B05A5E7A47526378D488DE309608294E
D0A53C6BA6B301D3F42EEDB6BED24CEA54F2A2B020D2CF9F5F9F1FFEBC01C83C
BA3F6CB29E1EF0438DDC5EB12AECFAF8C4FCED792AD8C7B9CD4753C9727B327A
CED1EA729FBBF3D9C2829B9FA5A211732443B600E966EEB4D3F920E55F0E6BD4
1BAC278FE141FAF49FAE50A6507512690D2D5104B3992AB11DFE89911266E217
CC46FE08016C3DC5161B74DE04DA7417C7EA8C27B1E7BED385BA0DCD0C6ACE9F
E03A28780D3844CD4BABF0DF9B431F70B6C496DD25F8FA41BFBA01E07AE0F522
702E81A86686C5C030E18A42C47DD0FA1EE3521C98714EC451AB552F3EE72CB3
3BFBFED297799B3A802E0D2A06C44FD9C6B47AE6446BE3AF3FCBDE28D0DC1736
5CDB51FA59DA00CED66665A3E4D438F8BDA315D1E8670BFFEEC078E705BCC0DA
272517598EEA3CD6A1CFE29E8EBEC7D7E9A4DBB41CEED0EC58FEF37C9A7D9A7D
F4EFF9DA9D4652B327C72374404741498C4000C2162FB111DC49791DF75F175D
249B2D4A7B7413FEC95C8BCA7E891C86BE20492DF44B13A76A105AB3EB6E4378
F5AD746C2D25F4CA2B2F446208CDB468374F1739988E6D14A40F26E5328DEAED
0A901DF0CC73E8DC3A5C9DECB3581944C7C85F0A44CE535FE171321AE710E464
150C87BDDD09769ACF79E494464447C416FC35CA59D535567B2F7171AFB98424
E76D01937F9CFE3CF4E3779650D7C2DC3F0059915AE1A7B21172D02E3D78E253
519DC0941103489730ED6E7DB302E9AC30AE90D2AE24504F2E921D2557FAF16E
195C0E3F2B12B433D7DA1F634865DA6E5ED7511D694186EAF63F04F9415D7F1C
CF81D513116A2E9E6EB45092EF95A63990BCD918F159DA7EF9DF36E7380620F9
D73BF6990BA00B058A1C5C34638E09A21350BF64EA1E955D0F5EC4D983DD924F
F55317301762880139E036AEDC755475660D1AFB1F5B127A43914F29527629DC
EA9CF9854F6C51AD5D540ED0DE91985A236F4DC8677076CA4E4B0FF551ABBA11
FC9785DB9CD2CC8890632A1E50B6F2F4222034E26E42AED14A2966BAA5D3D3A3
961B7D738B10F304E91752899F9A3C1AA557285C8C775F413B373AEDC78AC0CE
9918EE8E8D4BBDEF36BCED98B84E5738188C4FFCD66ECFD735A9689D004933AB
E5E6C0FC027EC47FB0EDE4D2906CF1B55597831D98B646DA6B0C69F24E83A084
86E779A1BA8CD02C1BB8503242A870087B9F85EBA19C258FED32D4DD880655C0
CDB8C169ACC4ABB03DB2896A8BB113E12F4B886ED7E9FACAA68FC2FB7A553605
C6CFA1B2C02D360678126BC086FF6FFF378E0AAA0718A697547822B3B824A70D
A042C65F687D8908F985795BE887C1E4F85E3CC5AEF1EAA75C658E90F0246C18
C21CF384B32CFEF4FBF5EBD18C5BE8703DCB70D690515B24EE4F522613D9465E
2180A40A1C23D4216A8062CFB18651FDCBA25228D7B6683B6B51C027C06BCD3A
FF92A63E47A10AC688787E601DC5625947B3631DB34AB2DDB4A2FFE739911B51
15C55F586AC878E93ACF92274001003DDBFE3E55C525FD30BBC70CE036E5186A
0F8B4DD78A0A5C37E9B93E79D1D9B0E84535512013C74769E497F26D5398F8F3
6DB986C6C618AA75E527C04ED4016B8B54AC707EC422BB0E85C1503FF644C252
CB4F4DA0DCC64C94C196F2C10D4575E5CB29FB0A23F9C53B79046EBAC28FE44A
5C6567E3623006F57A08A575EA6C588C1995BC6F44655D0AC8B12981937937B0
E43F42F1AD03AC1325A524D676161B69DE290E27E9657E4FD709BB1F796F7BB9
128F40DFF158553C0116CEEC1724DBCF6E42D098C441C774A7C76703D9959B42
63530CDD9F31B7C8F2A54DFDE784CD3305A7DD1F97C80BA68B8A9403FF86C783
AAC1757F4BE23DFDA51D40DD9B05F6726E240C4B8D19A8710BC44799F3CD5358
9DCF268F5D3F506FEA7DE13ADF46393E057DF60E818663EBDBAC71788DAF9C07
FD188D0619DA2B13E92B7FA7AE6066B80CE0D7C7E5685138A0638F0C8EAC59E3
4D0C2E929AEF3C80B025322E66068006703767078952E44D6777D90350676B3B
2D3EFDA6667CFD49D2238D55D45C48100D4763E7A2F6F71C5CD8623B1DB3F5B9
33E3C7C42C5BE577545D553E8660DF4FC881B1B290AB76EBD11A36DF260B0B66
A960ADE0663431603335A8DD49D99E769BD738545F4D6B16E18F9986304859D5
F2FC0E0D81998509EAD65DE194EA5B249B7A07735A36737C99E1B7D6043FEC38
69C8AE6C99D80E14D8E02C1D3C4CD54DCCA57CA4B5329F4EA68F0840A73BD2DB
04987EB5A2D987AB37DA101E80040EB580E8B7B48ECA10C3B9FD2498D84BAC4D
6496461C46FCE4E987E770A4A7512B5276E36EC3072C6DC05BCA0035E1B2E05B
20D542B7E6C56A492E3BAE4763610CD8710C28A8E56506DDD2F63575C488C369
0FDD80D52109B4D0045823A5B4C20D441996D671C582A6F5E57840EBD7706D36
B4D7B1080089A09EF7487C5B23731B3E3C83CA192C3C660AE3200CD9B5E64328
E0B31D43DA5529BB528DA9ECC55D82EBEC804D15C0FEF51E81E63603AB1E9281
C61275262BE5CE7D28E72B129E947AD593B48B3DD05D0ED92CAB580509F4B91B
6C2E1D3D80994B414731F0AA42B16157021F6B56DAEA3577DBB01E39FDA69C81
621E5B7081832A95A95C52C13894C915E3F05B371E3CEB103F2E31E09BD7F56D
0235ED4956A5EF2128C39E8FA4E174E180BBCCB105D64D6003CE433463FB7D0F
9B72B0B0187B4752AEAC66FB3667FE41735DAFC1B0B0735977DEC9029164F27B
0BE5FA0703E0FF738DCE5A41816ECDDF97DC2C8DCF5C8BCCCC03EA09711FAA87
8E6791D2D603A9F27E558E396EB858681DCCCC6893AD2F241B5CA8B55BF28DBD
16720BB1C42C9A95DFEEE39B0EEBC6FA6E3E864C1CB47AC6A13A8BE85932B013
2B27BB1066DB2997DAD67D8DD823096C2AB6C4A6CA702255BE42C0D46989251C
9943BE92E307ADC2CA3AF2742F42AEE90AC92E1B0CC8FA720382B406DCB59972
FFBC57BBBB493F2C1B5C38F173A69A7586758AAE0DB68A07DEF72DE86D4041A1
AF04BBE5044A9CA5643FD07D8F6E37275108F7168F45BFB5024F2A0D0CC0CE93
ADB4E2FEB60E28FF6D4AF0010D422AFFBA89A3B3C4C135EEE52000473EB5E85A
F7F296FAE9140597BDFD258BC893B732CDE0BDC342A927FFF8372D492BCDE057
FEDAF53561D04A85898C0BE02B519493C9EC0989CAA7291C667912F605356708
C088557AA274C223121E85B25F4F2E598302E5493842F597531CC8EA5A0C83CB
1E8577E62993D24B8950A268426C61F8C5B3DC72F87B79A5306D95C0FA5BF2A4
781BC334769960E30F055ADBDC473B38628981CBDC3F64303E863E8F5095B40C
478F8BB69EA1BE414FBFF97A3843716F052D31C822DCDF6415E2E933F65C2DC3
85666F77BCE8BCBE2D8EA485D5BCEF24DBBFD388A89FF398094C479D4AACD3F8
F6AA8017D950A70713AE1BDCD3ECD982ED8D24ADD7FF8D9918C339A8E8B41383
64F92C71749274D7BA7ECD77D24FE42D1BEDA90BBECB8D725EFBD7C5556CFAAA
F11A5DEA3BE0BADADF50CFFF68D3130BC6A46490A7E48B2BDED7B82D188B4D5D
A52464882CFC5745047EC2FDDEDCE8220E400E7F38B995AB331DB8290888942F
CB8B27C8C1AF5D673E82AA4E63443EE00CD38E13EB02AC3AE5CCF5E025B32A17
8A1E5DB965018AAB7C7884EB7CB454222F97D8C00B3D93C7BE15407485744D54
2521314697AE7C101CB8A8CB6EA47F3B1F8BB5B13D7B90A4F95E5401303F877B
819434E200FFF0DD0E0604021508FD51080085BDBAF6B3769B667D2EE5A3923C
FC69FBCDEA39CB02BDE9BAB3CD7528965453F099DFC891293700BDDB4E29B796
019B5DCE5BD7A774F8DAFD20F05C37F2EB54F2D62E1FE41854631F388B1327B6
AF6AECFA67902D0150EE738E9575263C4C2DAE8E5FD3CCC8747BD12E63220BA4
FD13A0663CFB5DF462A15DB507610322A4E259A6A166A7D3ED620E6066CE322A
34927B8BCD0708A1B45270B7657C7771FD3ADA7DEE0A77B08D7963706DB8ABB5
5A638CEDB9281F63DF50E4AD899E67574F3EFF17D317785665A3CEA866503D32
708C76C30BBAAE0F953D5B8A112314643F7FF162F64ED65962C52C7A22BF7AF3
BC490D204EBF3B7B3D9A1C7A80F2C01F63C102B5019042738303A6CCA1889B7D
6498A0F0C355F94E92659245514FB486376CE474C1D8E9C4E792D5F6A3926027
C477617E266F19688F1B02C9134BA366936CDFD7FCD6257906262C8B1A01AB4F
4962A697CA30668A1809DD72B71A4BBF6C60DA6F46E2CDBCCB8CEC46CFE5E3F6
E7C0BA866518648EE6AF0F5DCBB866F3148AE22AC1F787677CDC3C2F1C78D5EA
4FA610779DE56FAF0E6E738B7FAC8B9B0E66A1239705BF106AC063E2B8EEA19E
C3ADE5245DD627628FF3A77D59F77E4972EF4477EEB05A4AE105D57F922B7F2B
2D17B52E10FFA5E4D49A757617AB120D9B747303C1A831C60DC3D3C5CD3B5E05
13A540D0C7575D56000265B67771716170C5EA7DB77612DF679C0906D77AB214
4E8236EA9C60BD01F527175A702DA1EB03A769D84C9E5724A84513F52B3921E4
8CBD1046A9F5D5BC258A8D370AFF736848244E65F7A54E14EA3DEE4621E32EE2
D2813675D1E0D9111F7FE8777746FC09ECB0D9D8A6F6A1C0F6E8463B2573BB92
43648A1BE2569CF68FF78E4CACACDB3586E3F07E1AE8908C75860C8EB024AA27
BFD6032037E61B33C0844CC2D620523FE20328A0C23830544D48FD3B419EB4B3
1F53AD21C32584A34DBD8A45BBB0B9CF8EA04B1C8E54EC3176CE6D4FF9E16724
15F7B96061C2E7376F19BE9B78D0F4DD3B3B23D69A58E2C82C1981EB8E1960DE
91A3380AA884E7CB26A243D7AA497B71C1E241F3FD1231B4470B5A034CBA0079
1EE592FB4DAB538C2809D55479E430CFFFEE1E8B31F501B401651FBC69B8A864
5058AD89C7A604766FFA65AEA58C77DC4ED68C27DD8473850C2B0A3844C5C96C
3FBDFD4730D55851D0844A4492A687161444B807727C458C2826A13D38F8908C
BB952BB1FEDADF4E23A07F6C0E1387DD54F5C8BD071C4E9947EBD5214EBAB9C2
99FA31AFF925AB8F21B25AD1B105CD842BF406DBAC4C5F555EC96E760C8245A1
AD9F508BA5C5E8B36D06B51FDFD86A22BE594113A00F62F7A578CCC8ECA2BE88
D881CC03929299117F82FE4F8D74710AA976175FF02C58724CDB27DBC1BEF925
17B2A7265C397F22931A723A236AEDFF5676ACDE6EE71DC9EEC113025F8E1A02
F0EE31E786B24EFF373C9DAC05DD3217C879BBB3577CAF6C3C4681ABA54C4621
F05B2BCDC438FD2A1A6119C830E0BF310C364C44C6C465F7AB7CFEDCEDA4DF8D
E21FC60A9895B6CF391CAB3B0F645A4734C6C3BB9C5F8E2EA52E4183F35ABDF0
5D23A0031FF418499B3E3C593892F7C7C03F1D5F4748B5DFC1F8D787F99305E4
E2A426D43F2D092368CFC4E14862D0B702E894290BA347B1F317360AAAFB7C19
8CD8DBE03A3CE7728D8819B94565AD507F97671C9D7CE4126A05403331F8E710
D10234C2FCB101A40DC768D5535EEB54678E70AFD52D5B632EF471499C8D6F9B
BF0D8560B43A388E4E1DC51A85089E5D11BBB5B54FF7A64755981F6387E865FF
8DBE3545C36D77DA0A0ABD46A72802B0912C5C20B3BCDCC053DE0164A0539A03
5AE3749991DEA439FBF139A16A55342D3F863E675C5C28DB99242A8330E9DDAE
D388DB7A0B4989EC6329DC8FDEAF158B62BB107A8AFA280C8538B731EFF25C08
C3F2D60F8105103B2ECDC5CF6B02E3E963DEF05055BF23970378F0FB1E70FAEC
4A07FD215438A7FE08025B5CA39F2A0405E2199F3AD1DC69B5C9EAE7C08AD259
CDCDE93654BB87A9482A58049F71949A19C8573C364C054BBF7F35F0B627DDC5
FE2AA948AE738E07D39236BDDF5936B95A2DB43452C78FB25F02D3C2265F2865
3B317A87B49D8713DF67297C00D508B81DDDF2A74D0D4BAD47CAD5EE287FF010
AF55A4B864B822E4BDCBBE29EC531D24870365A38AA8C5EEDD3B474825105848
755C8724E649F9FC87745C2CF446055EF14BA832B6DEC1BD0585986D0C5D4575
82E9A0B7A3EBFB0508A870B0F8D00297CC6C8EBFEA08384809CF652F1E602E7F
24A58001300D51C912BE7CBA6297E68387A161F72C87504800C661A0312C0A93
0453867D1BDA0D5AE27DE839402BC92993DD2C3848D655AAE8601E71562993AA
3BB06BAA80358BD38A52F34923E7C63E9CB9E28405DA733CA68E2F20FD0665DD
C72FE8375C91FBD9035841767258B82611C4111563ABB27AB6E746CEBF9CE816
B349CE7E2F103902D306BDF393ABD5FDB4FD28A6ED41D5F9A215581A6650E92E
971F6A42046019E11D040BB87BBB7ECA680918A6C439B5A799005E94BD1FAA0B
184B920E187FF0C9C622723CAC55F4D5236628739606D8EF5ACD55D678FF4F82
70E1C017E33650E24F353E423A9254DC034E6B035EA5768AA9E2269D0AF9511B
662551A7BD6FC76D57A0019DD266281C6D23D511F2C19D734582361C964AC832
E3D1FB3051B3684E4A333CF8039301D87997A1B6DE54F405706C2C4248C626E6
4424562BC814697134143D76C8B2EB0031913BA9408BD12BBD7336A1C9A7955E
704EC7A9D64D8019B9011E4D789FD52E782C10FBF3263FB1CAD08931021C8AC6
718F554CA3351AC9D5C2D42B5DC972A1D6E03480974DB30B750618080FAEAA36
27F5D26A5C91ED65D0218CE4F7F89B3BD508E371B2A78B89881D1E6F9ADB870F
E6F5D1016D2034CB499EC864B2332429C9661A99847CE98977914082D89337BB
2B8EA2141B1DD5E631CED0C094D6FC7B8B746C4B214A485F9CE57642F42A032A
AA6BC8DBFF7A20AB9970CF4226B84C5662274AE08FA935519A631574101F055F
3D4BA05DA84D16682D55FA95D73D2A00F7B2C660A6C778D1886998CE995F3814
1E9AB69F495A137F1F2F7B1F66D714BF628B5EE6D4F0BBEF26102990E06419C4
DA7D4534463F25D7CB281DBDED9AAEC7646DD33D9E3568F129DC626FBF5DB7FC
B6081B9F31DA760DA7972484D7891E88C5ECD07383D062B786BC3C6651B5FA10
6CFBDF421D427E28CA614305CD8963925BACDA75535A67AAFA98C8079953F10E
FF5F6CDA941932378AD8404A8AFE19078D46B457600CDA06438DD9B60E78E658
1F81C57C6E5CCD259DEB522558C07E573EF02AAB7AA0BD4B53CB11A18E83F552
8F8FE29802D2A8F04CFAAEBCEE88DABFAD208F05DD64C591F2B82C4BDA9CDD98
220F90B819388DDF3C5B474F5374D80D469AED90BA08D8A726BD1EA14529BE16
F9E7F147B0E3379E2AB5195667C3E7032F90D382DA5AB07F54D85456C0563274
3157DFEEA1F65B5BA2F0E744ACCF23EAB3C9E0437A2F11AADC402E7362FAFDBE
73F8F6F99550EAB6973C075EA14B305F99BC40CD8D67922DEB40A3DD61EAA537
8501DF9DF8284EDE91A04004D2AB894E7DCC7BD80F2E8E13073B30FA5AA6CB78
723FB40B625D7418A892CFEBFF58AE1CD0F2D1395B1E6A133B6C9AC1E9461009
C0A078862017B2A40908FE42EB033DFBE2E387A0EAEFD03A12376C5901B01325
762975AEC0D0D84A962DD0A04F4B6B420E0A981619D5F731B5477840F1FC1BA2
ED183B5106346EC0D1CB74175C9B833F41DA40D17653B80730495803061FE194
CE81739DE018177CDBDC528E02E2DB1D249256E80132A54953E8ABE6A6FBD131
E1691F749DEBB18A5B5B90D778B2D32C3D557ED2F6F284CBCF8856B2A22E72C0
C522C9CE7C911D9DA790DAB33E7A62605E65509A8ED6790EAE481A4E4E55F03C
DB489351C9A869BCB90A84060921A5E0DDBA2549852043B5A93B8C7DA6D16F64
C3CF84D09BB56F0FAC105EF2FD4C3E73C6003F3356AB44A01ECD53500EA7D9EA
5958819F5CE03BEF6B59B669723240EDE5AD667ADD5A9DE04B77BC897F50A7A6
2C8A3F555689C782AC89C85DE712A769E4CB151CCE23D37EBAAEA6EF0D3F2339
4E6966BB1DB680E6E63029FCE2CF0251EE1EC69F3E961D9D741703E35DF01723
49D6FE770FD2E541171C6F2CFE731360E35AD60073525038B0684FCB2D957B29
FF0C278E99D4E81BC6A80EA8277251A46A054E38E5C92BEF0A1FB8C770A16ED7
6C337AAAF0CAC50861F7B630A152A5C611A52AE12A46588DF13131F9DB843752
7C8024533D2038D91F478CAB43D0323669266AE5AECA2CB27E92FED95B5B2BFA
8BAFFD015D26518F6351047B64F54579663DF0C6F49A5F48E3EE6E5DC43C4E98
19F846DF68C0ECA6E26BB1730B9E3B0398AFB51F7863CED662AE5E45124495CB
CA87983B8C8F29F97D117A3D578BA261CE4E68C0F77F30F59EB17C807FBE3A71
C4D5C14170C38F61FE06BC63C0F4441BFF30B49EF330A07650344DAF45A4816F
FF15F540DAF3B96062722CAE43967E66E0671A1A0C7CE77B97D88F0FB9F7DBFD
C4FCD4B1697443A99FFA4491F2B85D31FA1938211CFD557F47386A45E5EBC9E1
25A002A6E1670ABBB1292463BCCE12B4EA70A67A6BBE9A02D18CA44689E5DABF
5EB06B99685BA8DD4359D2922BE9F1809A78FBB5DA4F450EDC6802C21B5561DB
C1B19BFA4431E2C5647892145B1BB92A1356887584B94B00DABCEC84A5888BA9
078A3E7DFEBC3680D9D81DAA415A151602766105E7EE946990030793B4EC8601
1CB0106EC22428ADA49CAFD61DE93CD438B15409AB90833C957B8902765548C8
E22E9F466EC8D807EBDEFBB74E9894BF0EC793699F0E682639B76E7CF24DE702
9566695B04E40439A30337C834EC6E759AE760683E6CCC89ACF2A120155637A9
CDA2CC27813372725ABE25F4729E57EE06E58446A7F3AA81126A7DF850BC7621
C7DE55DC385B2E2E3B2B5CC33DE5CE03D8C9F7714E57C8F6AA9362E8A8C69E14
731135956DDDCBDBB698B4D253969673DFF8ABCEFE681765B54067A2EC3C910B
9CFB518160625310AF4F5F81EAA90BC4FA26B5923AB5271AFCF83EA09EC1FED6
A31E8789F3A05B1B2C95E006A0FBA50CEBE2BE28FD8E6DE55822444827477768
7BA9CEE602E9075C5E509FBABC9016E62D7D5AC2AF741974D956A9A027065581
1051028B571E39D1A96CCD8AFA4C7D441AA62D48801769531ED7EFB3C438EFB1
B51E90C19D635F88DBBC73AD3C77E7D0EC1C2534CB9A26328375B8B18D8D9B9D
2227C7649133EC6A81002AE7A33381941D7387A2F92A69CAD3FFA9AE559D3043
D71286676E96D2F6B56E6DF1561215B3FB914BF35145019FE7B78230DDE420CF
CDC65ED602F729B35F40CE459B572BECFC8A00A17575CE998B37E659BF832908
C0990F5DF4B58D3B7E33F4A6CAA53EAEB31A1C8701545ECA6EF2160CA7018895
B617ED9387991E7B7E2D7A8185EB91514A80F81FE7226F6720890FD29A29BA90
5766ADB2EF24EA02CF97B1D8E1021F51CF13F5DB788DABE303F21C10B6F8E9D1
D9C9580B3E2E711C6CEAB4DE668AC382B53765C19B4218DA3D841B0C351BA02B
8FDF5CD52C65C27E8681CEA83A39DD8F7B7E06E0C3DA760514F3096D12ECF209
72B58E10A8538F7BD90B57F7E90CD12E44EDF8487C1626E9F42099F4D9EFFCCB
99D70EB58740DCC4BA984C3010A88692D4F22EFC35501642688054ED5805F378
8325FAB9397B4F558005B3604FD5C63D07B8B577D80F66EACA440D77A9179EFA
6259E5BC549F2A430A703529E5DB46542534F225F840CAB9B004723ED0B64CEC
33739EDA87ED682689A81738CA438E92AA2E5B0B2D36B70B46A1469509A5FE89
68FE5C88C4312E87FBDBC45E45A08706F0E124592741656B618FF53A7ACA2BC2
70E4E404F8A08B6EA22077FDDCF0DA0E60D7FD59BA1F9102D5A13492C763050D
8E3ED64E5B8C6301D3075911DF2C7F74C30A4646D8726DD73FFCC47193BB01CF
CAA4BEE49A64845BDB04BF025D7C70D0C2AEAB4B2A36FA46AA5CBD3DD8C1CD5E
3E5B2E3195AF58DAA8D9518E4DFEAB5DA339847235425AC5056E7AD9D047F91A
A784D08CFFD37CA7DC832D75FDFAD81AA210A09764C96989C887314DAC65BD94
8453194CF67772E6CDDF31F78C17CB202849141A1F5FC0C086DF025BD411A821
D9EFEE1980413950EE4337ADCCE3606B1AB98B58BDAD7A1C76FFCDE3DC72DFFB
E32D06D800F52E0882EF0527DA6F992B460A7114E13F2287744CB89B862CE68A
40A62B04F28E6DD3CAF0134F9E19DF8F5ABD86CB0F8CDC069A6A5C032629C857
24CC1B73E3AB241E4E95C8D832DC2B85F427309125949CBC1DBAE54FD404400B
355B7B1B2C0FA657F157C5239A213A2BF53DC4A68B4EF2356C9377FEE4C6B0BF
4F58336B495790F2A96F1D10C8EE6FFD87F0D37FCFC704863F7BCBE3A853130C
1166EE98EBA85F8A55BDAD410D13310D332113ACDC8BE5129A3B43A7BD40CE91
F39076EE06BFD3C04FF933CE48AE61ED5A93D71792AEC6465F89F9EBDD06968A
80A8CF7BBB5FEA692548C08AB6F43F7EF7F2E24461AF56F587343AB6A9537550
4BD81147F35D8989D2CA44BEDE6B8BA09F511127760748F9387D8A5E83CC8AD9
22B2A8BDECF188505442E6B86016F847845EFF4DEBCC1A2CFA0BCC95E3FEAA3C
67E1DB5AE4C1D0D766CB53D0E2E96A6B4EDF5FB545E9B1561EBACC669C0E434C
8D1FBB1EB0E9F429E9DBAEFEB0C31FC9AABE7ECAA5701B0D2575AF8A8596254E
91895B89C0361768A3432BA668F5301555CB7F97E4D8A9E0C1E5003D5F23F7CC
75812D2FCB2475F074A0D44FB6CEAD8A4127CA7332E5039A2A7E32F2389255B0
491050DD6876B270F40BBFCCB4ACF52F6E794ECB47CB9B8C88E06C8721859666
4E82300CB1C94471E8E31695A336BB1980C7724296419D91D7204489394054D1
FC534C1F0127D54413B317E6F789048BC0373F3DFEC0732A013ED1BBA1E9B1E8
0979B7487BA2CB786018E20A5E0355AA34846254733A9A1DE3328CBCB8FF1DED
4C52CF8342120E350B4E797EF349A0EB76D9524D9345E8226E83D3291BD4806C
7C0C0289A1BAA29D4467B2EDB0A3034370710E8B4980240DFF74A2F754FED1D9
ADED600804B7786C242BD6151719BCEC7407A248870FE02F00F8F1692EE006F2
B97CED9A9F49C1D826BAC04559C4ECB73A3C9B5FBBC835A43FA3CF732F443D1B
302755CA7C1A3014CD8988E383D4A26FB7E1C09ED409A37537DEFEC58AF2BD0F
4E449DB1D7893DF52D57BD6C1A6B744024CFC65AAF32058AC27A14C6F913E666
C27F082A4720C63E0B47C3BA1158B186682BAC2D53944F47E4D257CB1798520F
27F651A5353788CC991B61ACB6AD7863E30EF2DEECFCD5E0AD8875BE56D5B8C5
97A7E175B5B422414744779BD6DC57D96882D55F6343E2E21E4F330FF9D869E1
F2FC3FF4B46CA8F9F7EEE92BA769DC7E4C5AB3F50FE19F3A3904ED7AF6212A67
11889B9BDAC517D8BC6677CC095B22141C6C5BDBBE2B0F22F0DE8EF8B927DC6C
54ECF3801E5C2046EC7EE665F4E74227B5A328BE08D81F6EB1A4EF484E0671AF
A5C4A05A721D82217626167E369AC65724E0E7D57310386D7B091F80F91CF68D
BB9D8634DC48F6EF5C9E2EA78154EAD1B0AEEAD3C32B85164D517561605044D7
1F6DD71F93F498F4E720FC9819E6C6AE3A34049A9946F7E79A1ADFB94FEAEC65
4AE20E3A693C2D57AF9590D6F7208584D5DB0E5C30E5A42DB22DD8E13A29F907
AC8F5060353DAD6839B597386E852EECBE1E315834B8155C1A38BEE360177328
7512DFA96E2CE6100C36281294F618D2B983EAE3970CAAD43ADAEE90F3C44316
5E3118C26412943296B481440A3B2A011233C57EBA78A4B34AEDB85CF9B8FA63
EC47083720B5281EFD4DAAC81D82ACD509EC9A164C369C237DD28FC4BE284303
6E872B2A05F345E83755B8EC83AEDE8A77CC28080159EB390801ADEF7E918CA5
5C5DD4A52A060D1725C26E6940371EB4FCE49CDD4E92B61AC064BF43F064D1A2
FE49A02A2E0B748186E9016F978C6B2B032599C3B0056C797110E8AC87C9EA7E
1DAFDBFC032CCBB03D0964DF8D25F7BDCDE78423E632B1102E0641EA168C293C
33DD472FA6E37EFEF7FF0D92424B3BCF60A5112A8F05E7258AD6BD59ECA92591
419D7B8B274B84BB526F68F932A96A11C32D2AE1A935EF468462CCE9D0CEB6AF
FC1DB954D41CE677D750AB455431DAE2BB997196CD7EE878F929BB0ED1195074
A540D6506E19FE361FE6870EF2EB19DC31D08B3B506F8E79F5DBCAF910A75A1A
BE13802EBC5EF7908D61DC742118D80CBA452D2D6C23FB8CF651A7798C58CF32
7A7A4EBEA010E08997786BA72E91BA1D2759753E96A327B6C2C0D95F044DD7D1
A1FB182766565B59F1021509A8EEF2A8D2DFF58FFF4C5A60CCF5DD51CC3DCE51
8DD210DB18D2605D1FEA4CE01663E3BEC0954E1391127278913453B29841FFED
1C2FE09E0AF9A4D08C642F9C07E1C32909B4FB8F6F08F06BB44BD9534030A4D4
593C5356214C59DA012232DB38E4735EC693888CB7590966A0B7ABA94A0713A3
9182F77754CFF68E1DAD714EF0EE4F9F1687F5E19C911208B258E1F1DA5B86C8
D277F8134D0136CA2E92E11DEA2126F3A9076269B99888609B62B7CBA5C6A71E
98709BAF0F79B6FFD29420D0F578D9AC9A678220519F68A2A9661DBBA68175A6
56514425E96DD970D81D4B0033296683A898B0C9B0D6A251BF1E8DC9D091F67A
969B8AF2FF6A4C39417962E0DE97861AD72DEF9AED159C0CA69D3668F7FBE41F
4EF6A81C0F9EBF9A4CF024C1D051B823D34FA3304DE0E78D628646C32C1D95C0
DAD9F40412958A6F1BB73771F35000FB9EA55A132F9B151BE9AC081337D7AD3D
3487FFA46B54D3305A460F868CD85F99704B93F10457EEC1BA9D5B210A013642
B16C7147B59ADD1E33CB9B2676234FCD139977D35F2D3BF468947317C057F78D
75440D43A1842C41D9535EEF0550084F465C1B13CE7070F27AA426B145A147B8
823D214AFF34951E2524E0B4B5FB1029C16FE8241238B7AF2503A3671E0C36D3
C7CDF50D3E9219F908B315D8FC4DABAC6A8F154E4C53E92C12B26A2295E900D7
206F8293785364A5FACD27D48CCF3F5864E1E2B38C83022B58077DB66E401EC1
6C1CAEB8B735C214614FC182A80EC7377F7EBD25E249182C60922C20215BAD4D
4B6271543A4BCEA5CD545112413894775B2DF1F871924CE2C0479EA8C8C33750
49F7F68AE181C974555ACDD144A6062953EDD79A71710D97E6BC8B5AF7C649CD
D908D2A09232034154E661202F2C5044CB0AE12FB168192AEE4AF696EDE54CDD
8A7B0E50FE0F4CABB31D5E51339D70328ACF0B7BAB4EBCDBCECD97FDBCEF4BF2
8DD94C99136295744B66327E4D75515642B72F90D8D8FA2CE5E0A6F404520555
E8225778CFBC84439E3EF1DA39316309EE927BF908D57E0BE99050FE4F53EBB0
8AE39BC8B715A541515BA68D3264DF633CFCB6F474A9CFA2EC28FEC13422167D
2F49D7601A570BEA1B1C0F12BA04D7AAD47D978D9E27B27A5E810DA32EB19AC4
CDA3C2AC3A46DAD7BA069CF80E2A626FBA2FB2D04D4F41DCF28BEDEDA81A4DF2
9ED7C8C7FD903BACA9CB89134B1C53AF1802803BAF5597570A8C6B0B4A5E08D9
D87C7CA74633545ACC6E1B0078A6D40CF7C7D8E431EFC84C9FDF536ABDFFA429
B820A82AEE9A73D7DCF77169D1940D54DDFCF2DB627140ED8AD5DBF7D86C88CF
EE9A3E73297761AA5581CF8198041C66E6A3601D9EA9ECC6DFCD73B2B2A80AB7
B924F1BEAB9F601CDA2C40EF913E00A975858A4445ED454DF0B009FEC9F8CA76
F8684FA195B99B8816D5ED80C3BB5BDA3619E904570286AF4C5872D2A71C5E47
E6EE3B813136F26CF1BECF1D09D6246E7F7C58E5E0A5E1340670398319FEA4E9
FF01B22C0D0E4720DCC87145B9C3C3C5CE0F22D4B5DEC2A17886B4A7EBE2A452
9E9CC7EAC192042268BA800B6AF8B46A5AC0B8CE75E467680764A4DF585AA8EA
461D7B9AF3392E3739F14383339606F4670595CDF4378BA86D70CF9AF06A1AE0
45E850DA1DC3B6C24BED7652351676B6000317EF37ECC4A22BF194362C862C90
4C6646E450C3BDAECC0EFDC16BA0900825A18A3DC8F5CE8472C0F6AC2DA72A2C
82548DB7D37F18CA0AEEC4C4A57FC7997D3EC9C30F8D9E8BDD84149AFFDDCE09
BF6427B2F8548CFFBE68A2F70AD819985D01E1550C5264B8EB0D3936894DBD46
60169B865704B3CC39DA6270DFACA8C3611EDBB6DA7678107F7259BA58F115A1
2C0D838690138FAFF734F2E3B0A94445F0B5F5978A3FC55B7099C9F6EDE1080D
905A38280BD78A4D5A13A5294A43A57869D21A83C2C94DAC75928AAB7BBB73A8
C475477E1E085902458C96E91070775AF4DC5F32566CEECBBE3EDC5CB643AE0E
6AFFF1E134F075913E3561C72800157712E85E97349FAC7329FEEEA4CAA54DA3
3831938E9392DEF7594DE827864CD1D0B503DCB28FA508F31573372865BD27C9
960F0FFE55C2D81AB5E3D61836E7D79DE62BCBF08F883DC5E7C0AE5E22C698FB
6074006BA0A1E1A4A307BD9015DA3F03FDCA01371B92295BB7FEEDE3A4F983FA
3424D8908193BFF7CC977151DF3DA72DE6C083E4FDF42A54520864E06191CCC1
20266E492B1B5B5FF9F02CECAAEB60BE4ACDBABF66E1A20F3E1DF278C46A4F26
DE2E100C3D4C9D4B8874189B38FEF1AF35C45759E9D71ED8DC943D2297325558
0A87FE31881D85C822D90730ABBDDC0F2CF53AC189CA3718CDF48F1EA6472B99
4806D02F28988112405F80F2BF1B97A3FBEAF9140B86917135468FE006F159D3
299B3A3BB9E134E17AE9565160895CA8D5C119C9E649899F6FB196C3EE64D775
198719E3D7E8C725C04969A9EF331BC572CFC1932A19D7626D40189FDAF12861
42524FB2074C68F74AB56C301672A0BE31E078D0A011258412B977B7257F9BCB
5485888E3F74362E408C5F84E3E7781B5FFED36400D878FC92B08DD94FDD0788
C9F699187671DC9CB84A9046A350839CC7A06F95CC4A98B9DE4976D3C6586E1C
79BB3D11F2E85043560FF3ED1C64D62E796ABE126F77DA0A0ABD46A72802B091
2C5C20B3BCDCC053D91E989CDADC98DBBADC85EB73C86F5A88258726D2403513
6E7558378BA14DAA5A4745550F8B3480EB2CA0828FD2814A8F02721C3E802E0A
F989FD869A2758EE44D5EDAF761728F0E60F20CA1636023C3B45D99837E560B8
5577222638CB2582F75CA7F1BA6327B0A39B251E10606684A92CE1E3192849C4
397A469C12B20727A4CA38A6CCA533B47C66D8C40BE57B43B38CF6526E92ABD5
7D4F60E752918C6403086BFFDB8FDE34A304A2DBBA0A7372D7692E9581B66517
CCF9BA6AF4B64224B08B63A2AFEC17C66D2103B709D4BEA1AE0B754780B83CE8
A84FCAF56E0C9330545E5F1A84305228C09DE7CF17A5DAEEEB65341B2C4789CD
5DEA3A71E87422C86454C5F3E347CF6A10534B3B660F0727E60D17ED049E1EFA
E3F7C4286980C3FDD306BAFA50BD3AC550A4A86D4297D4C0F6162EBF2A8B09DD
E053696FA2C280AA34F45ABACFAC86B71C16861A22CA69B329677A34F611EAEF
843B42B699C5237DA077F5C40F7C7768A67B861D5FC2887F1635AACF2784E563
33FDA0C0AC392A2F772A9E3D9EC530266427264D686AAE4EC64D8234BEB4BBDD
CEEBD9A89D932E55F14855EF9983BFC25CB9FB0D893F79F3BE17CD6419E6888F
2F93612AFE5B520A6382D79202F76003962FD604901AFBAD454748EBD399CC95
E20C81643DF37C2020C89C015D109DAEEBCA5E259586634D966578E3F76EA36B
B92B5E72FB360DAAA88D8EF93A470CA3F4B47BC4B56FFCAF0AB13B30BE389216
929A42A35B792C0C24D76F2DA9715D97BB853914BEA36774B1C8433ED0269A49
467C64367C9B3BFCF8CBA8BA022A7D0EC05AF2A0443222EC7A91980D8969DCDC
650921C23A510F66560DD94E9E41CC1264209FF7B82D87A7814F5D6AE5ABDC41
D668F20AC79B6145C924520DC0BDE78AFE39B3CFC16E6468BB98385F009C20BB
8434DAA8EC8FC416BB42543C6B904264A92A74FDB2B29ECD6CF81A54A3638211
FF23E1B2A58CB6466492608DE7978A3789B28B3C01C7D7C3A0518F7B5C15DAD0
C3E7E82426A2350D60A8D9839391FB760ACAFEB8562719507C29ACFFAE9239CE
207EE97B51C1911E3A749A8192970FD46387B6CDB56C0D1348A150DA4D8D3E0B
23FB7068F9B9BF9176DC8CBA30BCFCD4AFA9F80C0A1256DA6ECBE5891BAD9BD0
8605B5304E27CB576DDDC7A14BA63D9A1FE949788A59B0276AADA56A77D98390
C7F962FF33B9A112A02001859803D433027613E1B3740F5D5823856D28F35596
8A63426452881081FAA63FC4238D71517DA16345957DAF0E5640EF885679B521
76D5050CC74FE61207B71CF58C6C51F6431DE0F8FEB6C3091AFBCAEEC0FB3F3D
EBF75DC095FCA2071BE8C67EF945078DCDD901074A7BD0F9BC5758FF0C9116BB
0D00B6E24214CDEBB2918B923FDD901E78AA828FB9ABAC42443EFEBDA80787A0
F0A8BB5B820CB89134E4575747438DF6530A3C9B160D225B6232D43DC92AFE3D
FB24004666BAF9CBE80E31A58AEAAD176292F2B67C09018D977A40BA4A18C86A
ADF79A8BD09ABF633DB7AB5AC1BF0D90B8353D5B07ED17864916FADA382A6705
D90986904BE57AE33090054156D9F43EB31B884694999D6B4FE19AB506F86191
D4074381B027157AA5E2DC157576775773C734EB734D943B821561DC9EAFA2E8
605720849236C6B184FB0493D03E6DFF562B7291DDC6D2A44B2C0CF33741BDE9
4EE280DB0D3ACC31A362E330D73AFD363CE13CA8990DC9D06527D7F75790571F
65D0A1684C94BC96A0F39C297CF4D0E8B5A1C11402138F3DCB54A3624AADFFC2
1A737452A5195DB7EB209E1E665209BF7F436E36EF8FDB117FE8F18701BA194D
546D7AF44F895844B0C2B83BB642DEB8F55F182B68A1B09693ABF521BEDA2EF6
922A1E6C05E88E3C430A3A4988777B0BA5695043605E23A0A5015BDD20A934DC
128C3BF8F4F548D8AEC23EED37D0708AE6F7D154AF768D0A14CBECAB2E0B6140
ACE78977E66925640AFFE593E6192B4DA838CB797F8B240E23F546621948E6EA
4DD9C5099E378D7DB9755267D9540197749D405AAD6A8F5BA72E6B65780C5641
8B79CD715603DE5C207FC70D37015000B5114C5E507E856A931CCB05A58C30CF
4B9105E2B4CE69239856F03E138D66F8F733E229271102112611DCD0C379F90B
DE98CB15B4BA24624E146098A7CC2A669500BA7BD6A9F971DFCC0433D3116D7E
782BDE11359FBDEAB7DDB9983A97A95C1D97479ECC18F73683CED568E518BCE3
5CB6D949F4FD9B13B4C057ED56911268DBF17022EEE33B26C739F5308A5C440E
0E271040C41F88422BB03DBD5DB5C2B338A8522B41DF6E560E1A166F68366DE0
4235248D79E99E85D89AF32E2988AA0FE2F79F58214CB17F5BF6C695BB47B0CA
4881E54824649CC6477D0DFAADFE1113852C8476BFF7D383580FE3B44A87BCF8
421B1CB31A02D676046459FEFF45B0F6AADB39F36AC8B434DB1433ACD2308168
F1841D0C155198B329FB463D8A17E3736958AD16073794C893B9CE977F7FBF95
D2C479EFCACFE987F6155F34FDD9BB4E9228C50FD4090AF54C1853EF60B2EE65
A18C3B511E6E19D381F4A7689D0358740A4C24BBB1A4958905D8AE78B4E94AC4
F08BF60A7896A79E6C1769D0182C37E81A64F8326E643610C97F0947BE4EBD3E
4DBEC05812210682E3335B976916F144E1D07A94A8EE33EA4EEF4B5F67A6DFE4
AF31F9915EE4F285FC85F517F3C660BBC681779300C8D878F43A15C07460ECCF
0CBBBC51BE77AFA443ABCACEFF8F837083F21026CF303DB053CF094AB39334BF
4368E12CED705AD8A5D5A07EE4871F502E821B6AF6E0D41DC9AAFBA83810E1E9
CA624C08D9E612BE864BADF1169AF69EA1528EFF083E05AD91A3AB5EEB576D04
6A636B373AE5993C35765BD8E89EFB7BD34391D9A8C9EAF57A9A0EE8F35D38AF
375DBC655C67965C452991F6378D4F950896F9947034BF3C69D273781BF8F245
67F7D6244DF68CE4F145B0059B8B8D55072A447CC414E57C667988FE72D1CFE1
2C39BF8193E0E07675107FF684DD3752A16BB7ECB5A0399A30E57C22B2EF03A5
B72C63BE4D6F31F6EADABBD65912847DE06CE08FF7AD1CB68CBD087AE28332AB
6D1D5BE6DC56582AEF1AFCB0F1C8928A82530DB3914B4BCFA82CEBEC0BB523BA
6AB44C3DE996AEB10790DA3987B55D86DCC8BAF9FD5B079162F70D750F3C4A3F
7BFABD9F862DB21E013DDB386D2EB50D62B4F2563802977C4835B7FD092D90F9
5391BD170F0A9893EA6AEB74AE4201CAC808C5A7D0ED4889D8E150318FF8A137
C7B048C6B4AE01230B611EF5E51C80E82F6E51E73FFADC5F0CA2BC01F52AD7C5
ED80B448183A868689CF391A95DC4C962D8ECEA8E753C2DEA7E42DB47D17F33D
6E145EEF8AC9C176A22DBB6F44F075E19B050DCF304E00F560878BAFE5BB329D
5CEF02FCF4B5C0AB22C0A0A42AD2B2B0D9D80B7B8D035216B54E3AF69AAF6317
2E2AC252175096F67F03D17AD2A4C093CB1A314425362EE2D1D9C12B1E324F17
10B2003699198A053D9F362D8D251390471FBD381152783F04725610210B7563
D3E69FBCCC5924146E5EEF76A3EB43CC51C6213212E127B968C9D09176613CDB
BF70DD3493632CF69C367F0DD4D73689183798A4A2605095672AF310DB41BD07
B4671FF09BFAD35E4E556FBFC174D395D21C281E5EDD5DEAA97BC86C94857006
3933291D78AB51D8FACB3938D4F6120313BE0789A496A7ED316DD9911D6DABBB
B3CC59D3FBE6A84F1F9521B6E05D0A0B2E0FCEA609E96B095B4D29114FDD325E
6CEF2AE08263950FE5162ED90877BB4BF16337454E773DCCE965FFDE0940ABF0
E2E1F3E01D6E3E6DF0D2F3424047A5CBDB888C84AA880F8D941BCB25FBF929F4
9068E8F65763CF259036D8038AD0BEE992576552117FE414B31FED735C95B1C3
625C7DBFAE9D0815C00C901DBA156BFA6C102025D30FF6B41AFADBCC426F03CC
5880E2D2323AA5AF49F729D8191EF151C7CC329BA1C01D4FF3C592B538C3A024
09B30FECC512DF8D43424E095C789AA86D8B760DBEFBF5A18E58B8C124AA9FB7
70A532801E9DA5E8E24EB6D7D4F12257220848415ACA63D09F86A8F042EA313E
448AE7D6012157FB1F4443C57298C31C85B336C120E13953E61397E706857E0E
05FFD37B9FC84C9B18019929D74EB6D283861D0455F1B592CED07362F616B964
0E69B6203671E2423ADC3217BD00B9D1A852AE750CFD0800ED2E2005977A9ABD
2D308E9714010FA5386F0FA28B38C36152D3D00F88A0A974783EE9E6D3E2BB6C
1B3E3EA884F6E1CE5D11A5F0ADDFE1ADCCA66441A7C8314D18454648E1D373FB
F4F85D075E716EC6FEFFF3F2097313AC379B9ACB087CB6F10E546BFADBF1B355
8BDC8DCA725BEF111E53CC600A72701A3C8659BD86682BAC2D53944F47E4D257
CB1798520F27F65301CAEA398F97AE8DC81463B6EB76250CDBE461FEC4C571E4
1DAA3E65E3627DC24E3B67669C584B4A14D3736BF6B81CB8B83BFBAA95CF70E9
0C68A6F5C6B09A6779FA470576B339469470BEE1B0DD3B4CE574769AEA4887F7
631C60083532374070AEF9D7AD17A6102E66D06A857DB3F0C6AFCD6063225001
8126938176792926E857CED60024172E360E4B169DA93627B060F30790DC31D5
F15BBEBFCDF0409CAE4DF288E9F7DD0A56A802C65011720B337658E1F16E079E
663932EA1152C0DB6C8A3D8661F3F085EE06636064FC2194C9E9788D081607B5
6356431843BD99370C06DFFA8B6B9916CA6AA582FE032901CBC4F909B9106554
ED5C615CC3F0FA0231ABADC990E20FE362FE62BC704DF6773E9A05B46D455663
20B9CC4C5C8464190E4298622FC1CE08BF7F9AC70D9147DC584C3D59D9595FAB
38B91BE0E94D2FEE120C7BA60B76F00C148A5BED21A826EC20ACB33AA1EFCAE8
0EAA5C1FCA293266B197F0F2BEAA3F0B20416C145769FCB5535F5DA8E2376824
62BA9A99857C6D987CA8350C0593655777F53C95F259138CAB0B71CCE6DE3BF4
06E331931837FCB0C1A96AD485BD56300DA794ED5456BDCBC829C038EEF4F07B
14F01B02C1A4E8BE81DA3E3FF42C463C6F1E62512F86E3D9709E693D04ABE2A7
EDA15767D18142144D77BAB2ED0A4447580C3A67A90DC8BDF89FEDCA6F80E6E4
D69A0DFF99D86DC88F11FD5B67F759DC33AB828E9D80023BAC482F8B93AD55F1
D2787C9F5DA8E831C6DE24F6B5582D77576781FC646BA90ED1443AECEE97ABE4
31A8D1B05BCBE69CF10EB696F21D0F932A7D629C80E8D82ECB79DE3D2D5E0BAD
4BE96387C88CCCF54204BEE4FDCAFE4E20C28941D261B08BDD970B5C4F503367
3D2F6FFB4A3C2CE2706229012314970F7E0059642D847EBB0856D594FBDDB0E5
2230D6A1704D1E07353FBBA4C41939DCEAB10F0B899E4F2E535518DDE8800C66
22BF1EC03635E0A8F5146DD92B4BF81C53491FC19E2A7D7C95AA320141BA36D4
25ACB8A626D99B130E3BF16633398900FAE158125B16CE6FFEDDBFD26957D4B5
60D0C63CFC57B72C1D15505CA6FABBA6270793993A88B848B68BFBC84342E7E0
23CF789EC597B59F1256661C3A75AB5A33A1BDF7AB1B38141BF702E85BA26675
B8521C7684EA2EE992A4D373882E1F66D35FDBAA7D14736CF32569B115C41124
41BB2A5F77E281FF269C4EECE035BB6FFA544B23DD7DB751EC8C146E17EAAFC9
42F80C2313118CDC5D08223056560C55438755D243C5F055EB9D6BC53301AF63
3C9F180BFB8D66CA8CE71CE3E84D7B77D65D423C5092192330E9CA13D9C379F6
D4BF688ACAF9F67A36792FF82BFF7603BA3CF4C6B4C95926DF2099D19B442955
C4B669DDA29E77F9419E4E98666752ECFBE462E147839A429E52CC2B7FAFB9D8
C02386CFDA079737EBCC3196A51D56121AA76BF0E9D8E5825A329C16C1B94BE8
23BDF002EA97D62CCC9F29DB1DAD0D66ECC7E3849BD4AFC8811D4C8F3B8D3031
204CF442AEB1783E9549B6E792B1FBA53AFFEF94FD342BC3C320F721969C7BB7
463204E96F011EE6CA8DB22595295295E60C6C736077F129F899D9D42D0C2EA7
C77884CB7BAC1C3F3C112ED828E9BD8DBB5A60E88548BB1CB4FC4266D66EE1CE
CD38BE03720F7A2937BAFFF8038910C192352E1C66D456E4C5DD727AA41FA5B3
69D5E10CD71F94FC6C67AFB98FBDDDEC71DA8737A84BAD294030AA8C5E3D3143
2F5D4CBC310CCC04B69F50626EABAAE93F521C12961D71CC4D1A11BEF388D2B7
B077697FC8F45130BCA983264251DE61694597FD026472CBF13D266D599B6455
9F1F157F440987F49395F92167322CD9ED269E8711BCF3ECA2DEDE60059F4E91
9D289E675ED3D9A84E756BECDA28E69A47320BD4101E4A9562B54BCBBCC00F87
08472210B315FAE39464058A10B69EC42DB816F7256D63EAB4508237AD8427B3
3BC81AB18BB70E41527D3AF6803EF1844544E50E7E44723EB4242FFA778AFDC3
3C0B57B8121AD86C5620623B98752E1EA6892F48805AFB7AE91E3ABA270E8113
D9B5F52630A063F1CB5B2E51C53203FDA5B5CD32A625A15ABA35EE1306E27C3D
09AE1D4EA30C6A66BF516B6EE4956742C5AFD31B1D483EDBA5E66CBE6C7ACE7D
99D562AE7621A2DA5D62B266C68434F7C5C2C5484DCFA46DD8D89C69C886AA02
47C5EE233C9FDE6A093F2F1386A15CEBD69E49C8FC7AE15E6B525597DC1B327E
86BE3330CD1A5EEED203F62B05856D5DFD6823231E8F44A164E01F163796FF38
6A76B4783DFB489775C417AC07053F2F7C393998FABA570490D3ECCF05503BE9
F65C9272A9220E52B85A9F2D191ABC2CD63DB685AAFD8B408FF68A6E64A304E5
A2A51FC399E81BE9094C21C8D7FAD2ADB181B67A51495543AAC99F499DCBA7C6
438D0FB1C687604D09B7D0F438904BB943CBEA676B909226DE954C56B5DFBE90
C804C68A75B2C92CBA4EADCBCF96948C6A0F57223555F70B4116FEBF8041052A
32C8134939CD28AF21976B42B06A63719C44432BDED755C23264C8E7977C4C06
D2A398200DE19882B5A302804A31C3CDF7BAC10F74AB6593296A0F0345D4D084
1A3B39B8502A8FB3642FC273354710741654704A4035AF2E1FFD6BA215009118
36158B1455DC4E3E2050CF509E729B5823EA9497425941EC3A8C8B68673C2D1A
2560C2A3B762B94B9356A1042FA5153ED54458934E1CA2A191EDE7D0A573A1FD
2E01CB1197990EDF8444CC83F1AF7CD164730EE307ADCF51A5008A5C59658E96
431F1B79B628A9278BCC171AFF8FC6AD256E9F8372C08E4D7C1483C1893479CD
04FAC6AB02D603C6D5FD7768C94DC89CE8329648C7D719289DAD8D7AF9223B36
7B4DD87672765FDBC026E044AA92004E8D5B1BF3E4E9D984A5787BB6100F41C8
8F39280980EF82F43B70A924C95344E2866DD32FFD5A5C88CA09C2F076AAE8EE
FB31B5C7924E8DF20AD09BF951F417584227ADA62780D7327E29C77D86D0350A
FF193FBC924E59F0F3CA092540059C20131735E08A042D4F140AF825F8A37088
CE90EDDC8D5A052F4D53D6124E42DBE041634239F3A8202C5F5DFA3E3BD4FAC1
56F2A29475536ABDC88E7E28117C615DB7D1E73042BBC47A3AD8197B8CC6F983
C13FFA22F79E93740936E1DA9A5A34A59A599EEBB4250B3B4DECD66BDEE5F1EB
91E8328FF2FAEA463F9B2AB7D175D54EF92EA8FBFF456C51F705D06708885C99
476CEF3CF0E7ADF301FB1C88A73950A4872A735A8A832EA27DDCECC3A0058D5D
A8A112CCF35FC15BFD9175D71475D3880518D304882DF30569D86C3FA13E9E9E
4534AC2F079A5A8F064E5523EC18B9724732043C890248711496B906E3EC9201
BCB6037C927F524EE70AD24F140AF825F8A37088CE968324FE2647C4AC2955B7
719019C977EC66869BD8259B1946D8CACA5F0DCD4EDF3A72A9A4A949376BC805
C532A609C6993B1740FB4DA0E7D4337DC690EB8B5E77F9950A23C814DD9E9F4A
DABE41B81C9EE22ED0808E84E753C7F9270A852709059136424787ED2FF8B8F2
999D05762BB31D84F63408CBA90A682E432712990194A6BDF47448819DE8E8AD
38D9632C6F9348055F9A8B00B39A74F0316A3073230FB9529CD140C0A65B8F73
820F99C64E5C2553B1294A174E2A4599A4A9EA45F1B5CCA62500EFC060E492CB
FADB12AA96D16B31D7AB5FA316B8E4C9A886CC058522ED902FF5DCABE32A70B3
E1A3329A815BF3142D4C4C1CFF7B722234C7DDBAF72611B36FA17074C82DB774
E7362381D889D42769B96D5A77B0C43821F0400F653C6FD56EDDB76DC502CBE8
1F9D33C17E0756D67C8194BB011CBADBBEC510AC62312150CE9C03A963704E74
84AEC67CBF791A680916453227C6CA9E498F72529C7B9160BCD77CEE63A9EB52
E8D335ECD7550F66B60B8A46E53AE81C554AE7722106CFF4B11238D46C315355
3EBCBC87F068DC22BD4096633DD07FEB9D65A57C287DAAF60AC55DE95A37D9CE
F904EDEC7EBFB0E60995CF6457CF0CCA676D9670FFD34A14D9AE40C155E53CA7
CC6FD6300A87C79AB504CB4FE1C4F7A53B8EC2FDC7614E23F7D32FB0A2445420
63A45F21700DDF5F6CA1D87A1C83530D8C71FCAECC1EFDCC281D68285BA128E0
9B840E807E6F69C53B0789C48BFF4EDE18EC80DFCB31F8F48678CCA96A9D65AA
4C2B12105263DD9CDD5F4C9F35F878B0FEF0F5B25BC7CA4B0DEA8C54C99982A7
045BE6DFB7DDBD80A2D6E0CEB9D2107D3540BCAB2A14D21087D22EC91EC38B37
989EB6EEFC121F01818FD4EA8182D993627B44BA043603609C7F9164990AFAA8
6C04ED313ECBFF60CA3A0CAC47579752BCF5C8B0040059CDAF1118CE04D23880
F95CCAB5A34569ABD9811593AC6AED960159774FFFC6E6536439FA5A60BC3719
653E525E49FF6F778D8BACE3BF9DBAFD749F78D8C87B5DEE8390E323339D9456
E29F4E2471C6B0B117AA039E23F4CFC91B0A48553A7A28D3E8FF3A7B3D47542F
FF5987268E60E7FD64B017EC6A8870CD06CC4E7CAA58228247DBA2B741188B73
332A47C0C103E98442B3B12A017B1A07A9612E0AE4FA8ABB03A3AC67624F6F7C
AD4242AE6C63D047AAC8EF82134EC41A42233698EC7F74892831CCB18FB0F415
637D9DA636B81A50FD287BBD3CBD188F380E53311BEE3EB789A64FA07BF6161F
C40C6BFD57170F1DA7E160F8BCA6C4CA2028066DC0020AA4187F41073245C90C
E512A1E2BA08651877A3AA6A89D4C2BA634CA7599A74A49F9FF46C7B4D72245D
533A4A20BA741F9A9E0FDDD9189DE5C3F2A05C77B8E5E113D4A0C81B1006F225
1A814B274DBC4407A5EE23CA63C407654A8C311D3B3C8F5901B2AC785B222E5D
E26C398E9E176E41C955A8775EA01738B40E635AC2EE57DE47C281C7140CC128
F24D366E08106B6E18E6596B9C1B0CCE1D30460F049B89171CAE75226FC30DE2
682CCA7C78FAF7EDF2347DFCB070CF8E3093B06D0B80CED64E2C1C756F93C58A
259860E29451D98F0B263012F9F28EE789938CA3849EEB62CE49814E7833AA1E
9B8ED51EAB4A8D5BF77DE0552ADA3E14BC0B82F2CC37AE635B8766D6C787A115
FD9FEF3D177FAA08B4EE28BE2C5BEF083CC2D54876D3FD2B0A21E719D5677DB0
E64C7650DF6FD9512363BF87271B5DC4615D281B73F4DA92823A4FD6651FDAD8
25468C1719C88FE99BCB814264267F9BAF6C2E9CD515D6A52D150B988B64D610
E55FF3A5DF2C9C173F7FC8BBE7C6AD7C515B4CD42FC14144A554C62461266866
1A22FB9D4A8EB84608A5E95A2593A77AC3B48D44E4A876C73C39F2CDE81B5A0F
4EC52F0B90F9BCC715CD030960B28EBCDC53F99202BD5981A1DA4AAB04C9721C
7447D9309119FFA17AE501F7D5CC9F32A4EFFF109D3B8A2E27B825E565911469
F5DE55D0282AAAACD9DA3B1559BBA47CE285FD0187ACD1D9A52D5C7DA6E229B2
7B32CFC272BB81DB009C5DCDC2220B7A66CB3C14BFC848FB954363E85095FA0D
F9538D50441B5B1405BB15DA7FF83A5661C9E8BA24358EAC006A594AFCB83977
8FD0925E2DAABE7250FBFD741603D1E0E18571D3DA62557A0376C2E7162272CA
4D22ADDF0461EFE9B291839690736C7086A237125C9EB171D3164AFEA971AC5D
52418747725382444754CC22F264B755C5463E0192FBB2D917F1E49241CA0D3B
9F169028EFA930C25B6C0A7DEA262569416202C10F53232180BF87465683D5BE
3BDE0D93A7B31C60E4EDD91447950E2F52641CF279206DF52D943BC285B007D1
135D87349020ADCAC79395762E2CA39FC90AD187C5A27880A2534D8316C59777
9652C5798AE5E4FB24C26D9465BE1397E021E9C4D49E716E828DB19856261685
4D1E757A25D45087B19E408F778E8EFDC8054B1A49931E22563699D4270B089C
6F91831CC4E37F45317A49497D48C8C7F268638053911B05AB6F7A67DD594B40
A96499663C88B604B2A8F947700A630BFD6A552767836239546551F5E6BEC12C
895C1F84907B95A2F89F6CCE0419183AFE51105AFEA0872A2552443B0E331CEE
779E3D9C3668A71EA6E3A508B70E113C92688F8EC816A07A326C395BEAFAF400
2BAA397B0700523A142389DD67B11928404471EC4D5DBA70AB2FD13E097966AF
5664BCE70E228A23BFBD55719707F0BD15F19CBCE5F93259A6C4A8CAD50B9186
BF1467DF7C068BAB24F8B63DB23A8D04E527B7CB08B225368A123F276550CCE0
7BFB7D64322D8807C18974FFB9FEFDCDFA94801D42F753F03FAD50F50A730A89
D7925003BB63C46296FE532C382FEDCF04C5612FEA6C98F92E3A81C8BE23BEE4
B7EFC230F62253BC1FAA5AF1ACC19F09D428AA798213F30C7CA223941FE3854B
772DC7F59993B9DD1B3444817BAA67489DEA316065C353D3C42E27EDF59F1A79
2CFB28ABF419D2F8048845782B4282A66030D729C4DCF2E9E0ED2A8A24A32CAD
D00A744EDC642E12E3AC1F8D85467B5146B72FD47EC0C3BA50FD3242FBA0351F
E639313C561BB821C5577F7ABE93726D82BF37C3726993CE2E3BB3F4CDEBAC6A
13D24C034E143EFB8A2D96FE16DA2F528CDA5592C3247B8CDF4D7CC1FB29FE4D
5CC6EE8458FEA2FE94385B2AF841D9A2508CF7AB6217C9CB40AD1A30249D5301
FAF2F3A859748474A8B7B88E1A128C703B117F616F6E9F716F03193562C5A9E3
03A6B9AE1AE673AEFBAB29855FB3D8891C1DF59A767983ACDC2D2F02720E9EF0
83D3E979DD3D75F724A1CC53A8BAF39883AE261391BB667719D9F90D4512438D
406903F79AAA866A8A7C28DB83EA999658789FD61FBCFA7ECC015A8A680204C5
DF33CDDDF36BDA88CB2D98FD62B8E9874CAC4A694565CE801EC068A99627ADD8
33BCC4FC1E1CA352F141B9062451F0E41DB036202EFB584ADF8F82E270D23A90
373F2EC8F6C646E9169D885AF04A627278E243314F53B6026E4E516C94E1B466
D72162EB2BBC2E9E121729E403E152CED9B37E0C4A117BBD21E6691069272A6A
E455B1383F3C25A641920E62DD5F8A91B4277A1F49C67E25F2CFF3F85C021CCB
50C167EDCF79DD47A9AFB16F310778F4BFFB0B8BDD86421400B49D57E5AE8FDD
ED5D706EEBEB2B22CD9D03BF83B142EEDBC0070FD5A06D71B982A46BB10E6061
3E4625AC9E5575F4D308AEB8D134992D845576F65338C38A28CB408B261F7E0B
1D2B370671C52CEBBFEDC5437B539C91F3FD1AFB8EC5721C20EE25414BA102F2
3C9AF9D99EA3A7A5D5177B10DB46D26F0DB1839F069771D693FF27A73371F407
9DF50A479B8467C8ABBD3F4D0954D767BA87EE1CBD3BF7B3620B1F2AF4481822
0BBAE9B11B05A685D4C7E7EDFF51C6FE37AE9617B92DC66EA71F3D3C3D8DFD37
D8FC6B3FFE84E57210CF08D885343D6DEF53574FC70B3CD1D2048FE03A283B62
5606F30F1DD52DC3204FDFCDC64AB5373E2B0D062396C161A166895C5A155E47
FBF87CDA6638B8F8F39C85A9D7782E28FC4610A58C8A18DB8D5C1A36E8046CE2
5A5F5C5E63A8C72AB521937FEBFBF491349E8E75B2C6BF826C21E8FDA06ABF5E
1BE28DE2D87B5599FE1072EFC91E8130F18B83D8AE0CFC7CCE65554700C69627
B01ADC0D5921771A89C2C65B8BD47A1136A9CE8747794625B2906C4E0310DF2D
64F17FA59D0ABEFA11CE987CCBA3D4A91ED4903EE143F0FF84E3670B8D1D046F
FC2E87A81D34E74040E6E7E797E18AF57941DDF7DE2072ADA9BBF1DD063901C9
671F77F34A63F361C5579EC5E00C5C6445EA0224D826BB690432609A67E306F6
F7C2CD4CDAACD7AB54453E6A4C7B7F667C14A284047744C14EDA396C49EE941E
BE1E65D96A80F79FDE63FC7D2A4A9E536DF9F9E3ADEACACF4C3FF495F0D33147
91397ACFEFCA7C2482AF27565B737937A78A0CD52246B2C1ADB069D7BEB4251E
02E8A25A8FB4EE0B1A53321F0C144D1E1CA77D24264EF2BEDDF0E45977B41B9B
D11B28F3A10DC9BFDD5FB6A54E7F8BF0DECC07116A05B5D6D42730459DD44EB8
6046894B0709D87218971819C5862487694E43EA7C42929BA17DAFC86DEAF365
FD771809C58128C10B33D443A3A07E427188AF910B5E773345F9BF012F26E9A5
CA265C910AF297CDEE3BCBF5F13387863FF2526FF4A8F37D153286BF7186F882
AE68CD60CF264DCCC18786F17F10B877B34FA43A6783D419145D9D7638CA977C
AEC8DB96D911350C351418EB5A898BA95D5857F0E6D8CA3BFA418BED2038CF61
94AF036EB3090451311D2E0315E7E13CEBB691460381531F9216A04022FDD663
FDD73F1821CC9BA3CDB0DBC05574F7670085AE08BFBD0425E1C1A557BF4BB726
ABDEBEA9D1A4C30F511A94F8F89B7F01F8A97EABEECF0FD6F0342E5A28CEE4A4
C1EF108F323C3A9E709393A4F8DDC884395900E4721133F3D8831697F7A4F802
E76BE91554C7E65187257CFF0651F978A09800A142DAA73B7F1B157B05840C14
A6150680EF84597F1E5486FD79F660C4DD1F311B8FFCFD6FE8447932BEB150E3
A400CF8B83ECE854832CAF48D65FF1C7E8F8F8A34611ECF2FC72D04C39376DBA
614581292DBC5376334B89E7A9716DBF430CA68C33A50AD677263F336ABCDA93
6F1A9CC881DEFE4AFA5FFBBBB4B41E647DC94470C1B8DE914D79EF7E0F20E706
1A73A39F761F19C2BCC97B7E3E1222DBE1385139E269E64D334D267FAAE6B6C2
5173FE0CD61A81954576B5245082524E98A37879A65DD2F8F59860ABBB27E54E
2CE29074EEC9142F4A62FF3F2F1B193327958798E2D27097B091DC0CF035D505
C8739A4E95F9FAC8B432F32257AA3442EFDFBE74DC234CEF5DF0659993DF1C0D
E4AE70422757988D43159FD814DAF574818FC2CBB204337052FF61F2AAB48F1B
954211AF0A38D6CAB3BCD66979D9CC160E22513C8895730986DBA9A8C89CDC8A
A291BC6C00F570A4249E88B67A19036F9CA8F73D54F2F5ECF0D891AD49598230
971DAF473A5C5536CCD95377E0D3FE9FA14092D1CA9BE1635F769E2AC1459B0B
3AC1DC117177BE50AD842C43F9E09915AA76E99B648B685B409A7BF149808B58
72580E379881BE02909D7E57B80AD9F00081431AFD77EBBC9E01AA7172A8263E
C13F6BDB84509B85598806C91B89B273ACD55CC4DB474EEF8563E9BAAC7C9BFB
11F476D76445B4E57E827974977E1210E201BBA9A805612B4645162EF6350939
AA6373037ADCD10E8F00818EE88AD2EA98D6B7F1EE775623F6CF7E88A6606860
49CE34E3D38D861DBF4B44A68EDC8DE9EA553056C0CB82ECE81B5964E65894E1
863F33CF1DA0C4BD0F9DFA45413DB1BCC3DA8F5A3D194C108CB03AB07C8875DE
7D96261C02AF3B27E36352F8DC93104295E3A4A5C17DE6823755F59BB9E3A052
F69C78056C15EFCD0C6E1D1FFE3053925EFB1C1A29059487E756A318EA286FE9
0C2E836AC107BC883A33507560FEC3E0F765EF693FCB9A03FC5A2F9039BCA82C
8D2494985BCA72F158E92571337086F8F37085EAC0D0347E6AF999E8A3226817
5433ECDF6F8FDC1D06CAB5502C46DF4A11ACA54D221B44224932D25E0EB94438
2413502B1F128D874C1D119798EBB0E11BE341F8B8EA116F2067AD2F9B62E5ED
D6FFDABAF6A0834A8A3894BB058188DD8A8691F3FE1D7BCF80B13627DC05122C
2EFF57B11FE91C146DF5ABD8FCA6BB02BADCBE200EEF4E11B786F235E7F39CA5
D52385DE69D0726FC65FDA29EDFB3ADB36781E4D3BA60B95605DA55C67C5F6EF
7AE2049EA3DCDD28137B05A079E7C728D8AE7462A5C4D2D09AC4B8D594F78622
7B12FAA9D620113A18D118B979650E646A0F95CAD76245EC3C0E5C70EF98249F
918C88CEAA124F5B5F424D2D99797AFAD6D411D3427CD010DB16A9BE748675E4
908C31A711748EEA4132F47399C1241AA3613DD291F5D1DB6100818B0A158B78
95BB24BFCF21A45C95F7E64231E4D02B5638493156301A8EB7277801B6E41841
E2DE90847467D804B89BD943B49ABF548E5D92C1D6151D1ED9692A9DEE31C878
18324ACC8BE54953A284C888D0AA47246869CE01220662CB6FC9D8585FE53E83
7723E7EC88D29CBBA8AE43F782C9C7F3EAAB68393918581E5D402BD2E31870B7
F934387FDE0B8736AC99C312BCE1CB7C2B0E2D41C8C3A9D70992C1F31DC67532
22850ECF459A7BE64CD30E8D0E067E2A3D0BE8B2D378E5E3EAAD4EA0CAA79C46
040F2758B4AF11A7366C4F637F74FEB98D7C6124070B11D30EEF6CC8904D9B9A
77475A4C6559BC510E9BDBCD96973F8D37C19E1C9DFFC4820B9DB00F337979DA
0482B2DEEBE4EF31AF94CECEEBCE850678BCF1B94FC897FC81703700A128E7BD
DFFC22ADCB6DFB9CF77EF07C44F6F4E45ECA89C32EC8E7C5313DC6AB3E798147
A3419672873EB1D29CCDC59A69592BEF5E33460D9F1BE63C5E9723D42ED96EF4
960F525B70F69B13BBA1A52E351CE932CE3B50F0179B013150BD57032052DFAA
4443C1A42A7A6133F46882944B7D444B9CF969977681A8826A303A6D1DFB78F6
9F2F4C1262592B843DDA6AF0E9CC5DB3CBAF6CB9F61A2A7200F7550BAA81946B
574F1DD5F736A94C65F169BAE1A8FFD0E02480C07978BD5B535218E806D39AEA
9D2738669F444AAF97BCA6F7EF3A29313FD8950B75AF0B6BED7C687B26DA7A87
6D795FBEFAEB37E5ECB9D2AC29C93F376ABEFAA8701140399917534D94483A53
83BE1B747B07F3A54C99C3B2CA3A209D539A899B48AA16BBA71A1D06D2FA9ED0
B02168B32F6CC0FE765F2AF78722263EFA5B048D8DAB71802509AD1931F14310
5ED7175C2CF182099C4AAD383FC67EA4612F4F154D279848B23DB77DE648AF60
35431A4605A7B3BAC62156DE158E253DBB32FCC219DFFAD9A7F7A6CC1703EE06
340147C6141C3D87C1553A051391F0246769EF99A69AB490C0733120E7425537
3F4A5B8F17CEFE2F0CE7C65074A99F9C08D10675F1D60FCFB1B6D26AA2437776
0FEA6FEE94F7DA64133F4EDB0BC61B5534D7D828A053B63A3FD4CB622EF2B71B
39F1AB2E0EAFE181809E56BD799B6A93858BDB2B9B605CF1BA9457012E53E363
B61D07536BE1DE42173BE028BD249977E2D0EEC97E1E7DB9D79E662EAD05D6C3
C61B924612C160DDD5172D98DC5DDFA80D995E280CDAE87B801C0C536C101AA0
D77A3B65651CDF7E48EAF483E279574CA2D0D685C7D7F56248A987EE70979778
38A7E04330032BE44DBDAD4DBA489BB439A6228638AB73C0CBF12E5D461EEB70
7165E2DE855E3DABDD8FA6FF0AF3E4D393CB671A8560E1AFEF56F125A70D6D9C
98A66E396DD5989E8B86EC521D9A28C39182964E97C9EB3FC192A211B473C060
6C869C980E99761E066F7FCA3E57C46F3F924AD3D83219C96EEC9E0A85124006
B220B251F5726861204E0B4EB5EE2DF21F938C2BCF038B07211DC4DECB087755
393D0DBDC6754E048183F8ADA8EAE1063401B9A4A55067B90EB1B23DC5AF1CC5
5599032F38AB2EA44155FE838236710DC4B744782EC8AD6E9E60C07909D06D85
7204EE3BD4A4EB350DE65C2CED6E64D0BD1E9C51FEA42231D2910BE05BBADE05
A040875B7E0BA97CBBCC4BB7E212F3C305861DB2B9C77136C410098D76951ABF
1833FC363346F08E6D152CD938F62338ED56F109C66FCAC867723CE6885BF2F7
FF74AF44126BAFB7DF0A15715152074D453FA81150729EC428BCBD1B2B2C0633
CF8D5B41206893A48BC5F6C0D04593A87D5D7D64327A5A9F9BBB53D8D1CA5E08
32E93DC1AE6DCCEB381A86F39ED1308BD8CD4200274C4EFBDAA8B8C3EBFF6DF3
559269B82DD9C101E82DDA2286B324FADE61413753433DFF8F62018202BD647D
3298074C93EE086C4860FC8563310AF34797D3FFB7EBCFE0B4B1B9B1AC5EA584
959551659AD3C7258F17EA7E5DBF6E4FBD885C14F191F850BD820D668E9F3885
BD4AB3B9BEB1221F9D991E4BE3C9B005942A1845E3F5044131DF29CEF5B57E47
AE70A57912100A86966B316F2A64A8F46939D853522373F18D58CA7A47616B34
D6526471F2DCA4A9F3B2F8DACB556241567A1C84BB4008DB254FF83D3A89B45C
A82FA4612E6096DA9F84E8307BB1D6377DA2D599C6DCC69AB9257D409892BCD2
B0DE4F0571DE851F7509854D16573B1A973863FA0A85EA18E1BAC4268D0876BE
A0517DCD1C184A05BC084DF25F0A82F1114AC024AB00BA15C727FB8C168CAAED
6DF7D086B72A630E4A183BFDA1B600830CB70B01F7E736742FCC81DC80B7FE03
0173EC934BCEAAD20A41B91D265D6195F064C0445E79E4B0BDCC2A8FFDCA8ADE
8B55A30756798891AFCAAACEE77FD22A1B3E2D7BDA2AF1D08C3A719DF968F5B9
8A8721179B77E64EEDEF0CA24784020B5ADF9DB3247A93D8E8672B5184EFCFA0
37F7D677DE57DC5419ECB36087C3F480B11507038B87BBE71A17586E5AA35F77
769A3D70CA17C08C081624E00FF2000E4F2704100C4668C64FAE80DFE19B7BB0
46DCAA8EF513B95A8856DFE3C9509FC0C24D689FEBB0E99D30D048E4336CBF02
DE7F9A81B23C4217FC3E877300CC15FBC0D8583FC9337C5ED71903FF1A85B241
CDEC25C502C2A6A30BA19946E340FB87EFF4FAE08F434AD8FE0E8C152A204146
2A7D19006CC52D9E451D09087C6ECCF32305953E4CD7A6EEB3D2E5C4DF65F15A
8827AA58A04F60D032122FA8D79CD2315DC229ECA2827DB7575D67832B87E087
BE1E042C9493ECCD8FC1FAD59AA8F3F5DCCDF2804E745A2F3209D4F9DFFBA417
D6778AC0C185DC50F1B519F6CE23B354E55215D779A121292D935CD73D0ADB72
253C37013C6CADFC166BC13903606DCB84E7C4E82B0D81FF18BC7B27B47AB8E9
CCE289B1A349ED1C8FB9294EA61808733F6648FC050A452E4827A14C07647ED5
B22C99EF4A05938A52C38EB45B7ABD8222985FAED709EE17E83BBE09B1219B2B
DF7199F53AC61AA2317C6304B31BF5CC6A0CED71CAC475506731AF6AD7F6C7C2
BEAE8CEBC1461957D706E0C7BA5210D6D9FCC6F9C4D2A639541AE4B3BC77F849
C7DA55875A3CCD9450C74D32538911B2AF01EA168DD82786D13F3D16353C6320
3050C1C7D3DEB8E2C0F908B11268D5D6B8FC9B53B9CAE79790444C7C21997AD6
83BCB6146C4AB40535E4200380743A9B3443FEECF50724AD78A4D082BDB00280
901D01B986E2FF0160BFB420ABEF7858B28F7A4FF1D18DE69AB81CB79366C38C
B265E97358DECFA6BE9B86AEB6FD69CE21435928AF9867A2DE174AE8267EC937
2DA597CD3EE64F49991555B2AB19806C5589E97A5F29486D8A9AC180221CBD8F
F2D38067C9472278407D932B5EB5BA36D9367F570122E5CAFCFE58C271284FBF
9B9B401FD7F686D5AB6860ECCB87A1516CD505F22060DBAB749090871F6ED316
998DDA51055BCB055499D59E525E8CA28E7E37B62F1ABB66CC2EA6EE183056E0
A6067969A4B6C3EA9B4358DCADB8BB6958FCAAE52C3527E7C87DE598DE30AAF4
1BDB04BE6CD68B00F80B02DE1C540D81873D531DF4FB63EE0477E3B5EACD71C8
CE918D766933DABED5F04570BAFE03572A4FE32CBE9D5DBF74CEDC0D5D352168
BA954185124BF976A7E6BC62E860B5F782809D8F6A3718F37F69811B47C3DBA8
938DFDDEF06C39812F2ECBBFFC96291091D05FC72CABA57D69CC6C4A6BAB8699
D0E626CE21D6C41D95E9F36DEF1E2F69CFCC9C6E3FC5B0FC3B04ED5B8D465F4A
4A6846A0756CD1631E92DAE511A9A6655397C5E57ACCD0A038B6BA98B60740D3
068827929E5D44EF8AF6A94B6D91F6419202979085E18EFAC0D438774B9334F9
2F98B17C2FEE96FF07DA140E22D6ACCE493DF7F4ECFDF76300C78A00AFB79FED
AD3A733974484802F7E5BFA094B2954A1217D7BDE504E248DB2C11B1793B7DA6
9E10282D1C0EF486E2CFEFA95865402D72F3B88720C1A79360150221FDB7C961
D3B874C3DC96C7BF0AB1853C856562F5DAE61FD92F18CBAE2F999B84267A44FC
D60A295CB64DDCDAAB0A86CF32FBF31C4A5E9CADF1E05B62767569C79B2E11D3
08A1F0DC097F4E0EA511BE81DE3BAEC0A751AD5C83F6F34B1E87EA39F1550141
A85262D9C6A61FCEE1DD8BC0FB59E2045DD10F23C369AEC0ADEC839D4500138E
BAE2BBEB004F4BCB40D9F9F09CDEE7733480AFF8EBF10AA098B8679406709E67
E4252564D91B6BF3715E88D9BA803D2063FB185DEC2D467A4E388CA4346ACF1C
18D2A1F4B4B770AD609309F2F929EC7F2865AD5DEA612761AB3CD223E69D7B82
23534B3144936A83F2B92EDB744DC9801AE95C69D7E8A72CBA924D6DE1C21CE8
6070B28D8D4EC078B97C27FF1B1A00050DC1A5866CAC042A9D8D22984E9028A4
F0523338FE513B9F243AB7DFA2811A4F2F5DBCA50289FF26C1DB8B885ACF9EB6
2F66E730C3C5E9C092F619806CCB6CAEF80CC2EA9C8BF7A642C2FBC08D2E9A18
A465E3B8C0E1239934F61F083DA2CB54E5BFE69AF5D9F7D189D0049979DDA863
3BFC1D66BF66AAB9D764E56E5438E47B9459AACDD0023DB741EA2FB8E5F29E70
B5108B8857BA5680003AB4705A5AF6EC2BA552E909B8BDA0F6D075CE1012CBEF
9D22F02F1A71491347512D7F5DE68236B20B014611E25FC1C63A3D8929B6B988
5958A86D2539939278B7A10646478759F07DD37A311D41440845869689478C89
4C9E0EF6AEDEE3C7E4322A528F25F35356417D69206DC03CBB42E2E4B8E0061E
4FF30DEE1508E5CC5561BD18B92A9BC3C330938D1E1311C8497366F47B3F6784
F452BA74CB6839FBCBAF9C274BC31EED2FF0EEEF8F4F9F3ED8215E5CEA0EC615
63AE95D935174FF57E4CD373A5D0CC8BA8BB73C019DFD82482AD55C5E3A1DC35
9B380299427E04129B8890C6490BCFC1D2C21B83EA9B39C7DA00A7BBE507D1FB
C8783E9D084452D3AB79FEE52BCE3645751A2473B1308933A7A9C89E9E844852
683DB0726D3C9B00CEDFC230DAFD15C52A50939F2089DA59BD39211540C029D4
29B30AD0B896C9D809C5A514C4E58361F03F63193BBA2D9F66485C2576912814
54E1D9374BE9F24D06B761027CB32BF2FFB56921B85E59CDADA2547CBDB6BCC2
B590DE2E8FF5ECB949E48C1C6A43147D63B543BF852931A03A7E285B11F4BCF2
58809202D60C1E9F5813F1E53BA35596352AF5645FC10B3FF3EA69348E6777BB
A322F65B109D848048DB551E0010118261B05D4FF5FDADA95FBF32529568F265
3B668D3553F8C4ED9378A427490E756A11C99B12353D40F8BCD872B52A7C60D9
B9E3CF7E05ABBA4BF27E6A88
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE50715EC09E2695DEE674510EF3316D5063189700AD11B06
A9B158A5C9F8A936CA75D225105149EB6052FA14D619092D73F356FD3F3C3FD5
D1E94DB7F9314D07150C7E075D88B33AB63819BF6541E7B7F30C7626F08BA3D9
C9446A52614B36A286CB84C14FBD5C09AF84E16A5EEC8E9AB476DEC31843EA7A
77D900709AF60D09B87E6267D000C4B42E008204127AADED7A882206A9B9F627
64AFA068B17EB5FC1ABB0CC0FEE9CED0464C4452AAC3BDF2DC70C0960FD7239C
C62FB9394D207E119322EF93C0251D6C38CA9300CAB8B2EC47366C332292ACCF
165EDB7F32DE70541D0996D457C4AE4F5A48CC25E6097A206C9108935595DA85
6256A535618254824B719C8B575FD784DA7688FA287F7069D48D1B9027FB4B44
9A39B1ACC05BA466540F38E107AA7064A6F44AB8719B95C8C26C9CA26BA670D4
EE35112407698138FFBB16C5A1132F73A6E14E09CCB4A017C05DF5F69DCD8FB9
2B332FB6509FC3FA395199FAE67F7666DC78AB35AB252E997A735E96485E6D35
BC239860CD9A02E15428867CA41ECC3FE33D8C93D241AB51389ADC418F07FC08
9E8E4F3C0AF189B9B778BBF068DF8F6908BFBCD4CB3919422021C88AF96EA115
C4D321CEC4BBAF38898B8C86D6D7E35A09444820D755C4412A6176272E78B44F
7FC174B5D2220B47F86D9427D3C924672E418327D2B6C648E57A4CADB9551D5B
6876F38487881D762473F82DA75144E70BEA368A436BD55262D08914A36FA0FD
3B44752AD4AF1735A05D5D7BD0846A2187B70AD9390B592058557EAFD1C549F8
5657DABE84D440FF54F0E10321CFA3B45C8BF8BC643C87DD94CA2BB111E9EFC0
4A40BBC00F65ACC7ABE1788B71831D722338F85706F8333A6EAE175987CC0DE5
3FE645D49E62BD3406653A9865AB8C6E87758301F03E03187A0F0789882E02DD
19824FD482F01F84AD8AEA9BE8792EA8379AA90AA17AADDE64DCC9318096FD87
B5398776E61268689E54555CFAE6843699E4C3394FAD3479BAFFB68772C8D40F
191454F3BA5CE1AEE83C0F18C0BF515ED2E51BFE2BC749BDCB9CDB50E93FEC72
A2FC963C0452BA078878444F014F0E51A933EFE63C4EBF67A26B2E5F1E488996
6A264C55CFDBEEB8F4042641B09271133B82E8F0EF44D827C184BAD23950B28C
00F4AA5499F600C1D901FF87C366D96F0D88BD23B356B7A1488785A64DFBDA8C
1A6BD83F18F5BE6522EB6F846291BFB27710DE625BE375F4BB0DE91283D49A06
4993FFA04AB3BA401B7C66DE6594DC34AE34485BFF97A223531FEBB328A45C41
93A7584373DF3A1C758A8584725EB89FA59FDCBD913F9952447CC3591C9E0189
838343A678BF6A25D81979941291722A40DCF6B0D3AAC764315E66612E19CA4D
7AC2A48CEBAB6DDA154A954BBEE6AA987D9C09DF49C3C6EC57566DC7D2F1DC43
4F8AF25D893E425D27B6AF849884F76ED52128D0771ABB662E130FCCAFF405A0
082B9A4B95D090CDFF8E001A4FEDEE10646B6133E7574A064BA50387D3DEC4B1
98394FD9E962CF3B6E82F730DF6C8CD58218AF0CE3C5C9408C3272C6AB4BC7E7
1CB80F42570062D80CB7B5A7ADEEFFB00165A7D2D91F755E18FCF0E15F9C7ACF
650C33C1A7E1E260D120C6C2F7BA56B96E41854C3BB529E358C91C2A643EFA59
EA34140F3893EFF849FE9BA823DE51230D97F77FFA6D3C8C18F6C29BC85BB707
F818127ACCBB7102B7BBB7B68935B868F18D7164BC597A281DBCE99C2FCBFD56
3089A830F87A7E3B3C9C112ED27500A0B77C53249B6F00314B50B912652035F3
06848768D127A4285BE4C3DD023B7F06018071450AE3F18A80FDB32AF4914F69
77874414DC123BA301396DCB533316A9A965F665B5F7DCC7CF8D4370C3447E5F
22963F3F7F65B2F386127BBDB53D2533A87045F6160B92D687DF321AF22D3953
C7822F428F29F8E3E474B313B5A3E652C706A20EDED5B4A2513A45806E03281B
35DC473FC753FE94EE0C65C162738FD8456ACE84C72E0BFB84CAB495DD2DFA58
F2B7D434ACCA63F0FC71270D81E1ECA58DC04D3E7D0693FD554B687B38B9D503
EA98C257F8E7F2701F79C694C2F585F81454AC7D5409C3CEBBFD1A69F9A7AD96
DE079FAF7DE89ACA0BD855A94677AE84C569EFD6B9049722ADA487DDFCC38A1D
00781932F418CE1CD5B42630B7313CDD30ED58742554B38059CD89D91EC52DF6
C4FAA7A8C5E08D2A8251BE59E94958F7F5D7AEEF145358E297A4A7B2FD33E58D
D9AC5A06C200BC53687CFE6D3E2906F39CB2741A37CE462EE75D418ED5013BA3
AF0AE35C083AB69C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic8-Regular
%!PS-AdobeFont-1.0: LMMathItalic8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathItalic8-Regular known{/LMMathItalic8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic8-Regular)readonly def
/FamilyName(LMMathItalic8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathItalic8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -250 1110 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD112356772A65C14D49D03C7D456E5
1A27C2ED815B30E268B02FB1D2E769067ADAF25F28640307E3A89F0B04F44A1E
1392A44B8AAD82CED1539B6A9CEBF441EB81775C7EE4CC12313F31FE710DD429
4B1955DF2BF7A88E1EC21DA22A63BF63E89C913EC01EE10A0601D6FB239DF59D
2CEE7667F4CC4BAF660B24F635F981638F40E8CCF07F21F5B5FE3B5C115D1000
0E4B2ADAF7B1C53935EB7414421DB49A59F82D98D08351CB0BF0C06DE836CFD5
42D68D51AAD4069871F257AB7733F8EABD731FF9B0E3AD64000BCDBBEBE26F88
C96730B45C14458F42927E24318A97B48235E5FE200DB40706E9B41AF7CA33C5
67BF7766BD396006C5364D1E736B256538E5D163CDA75C4F419620D5BE5DDEB1
F7D7A55B5ACEA2B2EB4B78997398C7D38B3D7B5774D980C087236ACC7346F518
7607A19E85C83E2C6ED4F3FA8C15B65FC3D117BC5E3FFE33A5B7A69F7F7159CA
667D96B5D03E4C5E55FCB1F4E2148B4B8DA87567988F07CA181FA6A3C3C30A33
80AC6F4E92903C47BF489A2376AC02B00B8CD01DE080C96A452D52B4B56F9520
B85062F15C4828813D3694BB4BD3512541C82005C9AA5C065476148A4E47DBD4
580CB1ADD206D19E7D653E2690FD48B252BFECDB2C64C96F7477B2E5EA0593A9
84841E96F931F01B2B61C26E8450D5F2B37B51EC364BC2A1233FD108DFFE0F00
AE57465ADB0191B38D14E89413FCCB77A9FCAE09F59A3F5C352570F7390BE91D
178255E10C02CFB7B679DAF86EB351BDEBB8A7D4DBB9C65715A1355FC8D2C355
BB452D44AFDF7E25676F3FC1BF0704751CDE35A5414D9859A5779BC3DC2CAB97
F476CCF9D71E410FAB39835E0A11883831DE798AD51B78B8279EF7A89A36FD27
86151C49D857A1542B74D7A7D21A023A48D6303E71757A8D909A61E99A6ABF8A
97D7FF0D82F2E478D05B769292B48547DC3D2CCB95E09A092BB0355FAF18AC8E
AEEB99B34D37764CCA28A466731CE2AB3069ED10EB8C4212CEAFBC79B61186AA
832CA1A95446DA7D8F3577FD992B46486E8482D66A8180C215CE71B98086E372
2B28571052662AE666F72CB54547AD014576858A26DF969402AB30E0F9C566E2
808F1D8B26E038E11B8F39F3624BFAB0758A0ECF6B72A26F7C5BFB146E5B3864
3081A91DA1D968D5BF98064235E35172BEC6F45883ADC3736539A60E2744717E
29AAFECF97DAF2895A63AC3C4AF43BB38CC763FC30FEE4ABC1478F45103655E3
360C494C3C5B7586BCC78B75D5878B18CCA055059B7B24A0069127404EDFDD58
049F48790B9A77DDAE722A0CEB31752B86F48F40D7497CD1752DF6AF33E5A668
4C2808B26068C3C451A20291A53E733DBFAFEDA660D280035EF1EFA9690459BD
56FAE1D72577D85CB3D77E7FB193BC2092354376AEF7374AE1D709EC9A164C36
9C237DD28FC4BE2843036E872B2A008D0DDEB3B88C188D4628203670A1D58AAF
2B38E86546A6F5BAAA7DE84F37BDE1CB37D95D9A23DF2C1C11F89267E3DDFB81
1CD23BD168B3DB79DD1AB184C129C9D2FE95D9CA9E560994047B73B3E9D47B2C
214E7F84BF0A28E9201E0D7B815DBBDF77169037868DA00501E53C59FCBE1720
868700BB445E9DC99DE3BFB208F8B85EA361C4B2E5E9A22B678B403B1A1AD52C
C5CA99FF089FF516EF2D95E0387E2CDF22DE6969053DE9BECA3936A1E57853D1
A603E4475341C95A636A80D795CB3DA2C01CFDCC089204103C6882FDD5E8FC13
3B2DD912A3E596625DF53BF05FE4A35D2CD1D5EDB5E5857AA779E97788B076D2
564E12FA6395E50270A62F61AAC336BE8EACA2F1FCE71BA49A035081CB9ECF43
4AE0095091DDA1BE65BF6E9DCF78266E6AD6E816B6BB9B4A5FB0123308042763
2D354EDF6B5E569C21499D607C145921089AFE1D3E5DD02CB29888658FE36A5C
38FD3B8B6D017177D7095C7F185361EF576326614E016F6BD67EF3E06E2EBF27
05ECCE7B2E10A3DE87B2920A4904220EE8D6D40297A2EA0D08D267A55A677E14
B0B75E75DE94A32AA48DA9D796F2BABF3767699B22D941AABE3F2065E365A3A8
4A892D03F0A942EE48F74A75E19F95B93E23389222A30EA4DE5ADCBCF2A5CCFF
75DAB1AA87046BAA07EB7CBA2FFED1C37771326163C178EFD69DA39819947210
4FB045F1F5C8B4F70582224A6066BC14D5AA143DFA7BD35E92C2A4EE259BC2A8
A8D03DA7DCD693300A3CB2BAD03E37F95F4BE7E00C9E02761F23F3AFDEEDFF7B
C30D0F65381DF49199FC3F6636F84AF9BB7464EB12C969EBA14E67C78B50CF23
30C2D02B5FDC49482BAFDEE715E7CE946C81F0CF91F2126A341CC9D16F7F9B02
BA9CF940A376214977D360CACFAE7E95BFEC31EE887684B1CA50EEFE3E0A1F6F
4D6F6572BFAC62496A84
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: wasy10
%!PS-AdobeFont-1.0: wasy10 001.000
%%CreationDate: Sun Mar 22 11:13:35 1998
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.002) readonly def
/Copyright (Metafont original (c) 1992 Ronald Waldi, Metafont curve conversion by Metafog (c) 1995 Richard Kinch.) readonly def
/Notice (Copyright 1998 Taco Hoekwater) readonly def
/FullName (wasy10) readonly def
/FamilyName (wasy10) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /wasy10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /Box put
dup 52 /XBox put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox {-23 -1667 1720 881} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB02CB1AAE
36F1D7B67C605A37687A9C3F7067F07673039D1E3E1F5D9B09E6A389A55EBF12
06E72531469F768EDBC4DCCA572BD608C4BA8F7EC3E5BC61C6D949C94A843E69
0622F0AAEBF5CB25A2395DFF6342106C198751CF0B33691FC18800254AC54C04
02494A0E3670008E8BA57A3CD823BF47494F2EF9244421A8A0AED84D153D7201
BB12EE9478DF00CA573F64C2474817FF401EE94BACCA8AFC16E776665C3E1E31
89AEEC906A2B9F8974BEA7160C33F0AE7FB04B2666A5B16659D6DF66A688D80A
B531D9F866F21F15D55C6FE75A8787091359698E434EF9C129EED0427EB96787
B3F25C530E3664725C63D4C5DFF9D05CD13619FC41A001275A78C58F85FC7C4A
911CC31CB426231473202A698E5715B032D2206BB361EFCBFE3E32BC0C8D9BC1
353AAEC62EE632FC8FFFDCF6E7D928F562F689406CA00C11C7EAA723B62FFD2F
5F6343AF494085662CE2CE880B04F5589396EAAA8823DBCDE56D868B9E66BB8F
10EA91AF37D76A1BF27E69C2A2ED1D8B25434C0F205313ECB8A6E039093FFB32
983346BEC569B175529DAAD1FFEC1A9302918FC947C390A86C061AE0F6522D79
2D4FE06AE4FABA59F225D7ECE2EECD4BA1359DB18F8957F551C5D6F037F18545
CC6D03EB2DCCCFA294492ED72A737588457E5B18FA4CA0F6D6D8963CA35DFEDF
31A684FC0388D416D7BF6CD9837AD8692F284F24B80CF9F24DB10DAD0C4198BC
2D2A52D9F75CF6C52C7AE0D8D4598DB750E9CC97D0FD31EE8C598A2FF3745694
29DA808141AF4D8F8AA36D7DDCC3457D5E082B2BDF7EE060296721D44B092E70
3607B2335488925E41B22D659C8F0FFEE19A7C19547A147DB851262E47E9C4FB
0A8364BCBC1C77E29A1183EF185EF35B9A5B13170730ED52D5C52CCB460E7D37
F4F37F772794BEA0DA201C99C52F8AC2E4CE7FF33F6ACB796E55BA2372E3B035
52C4F57AB5C0BF828DC7E5A8F8F00ACE0120B99667816FAF5D736BCEBF7D45A5
79C9B5EAA32C9B672D764D2F51B2393ADC71A36AC0D5CA76F3F571D50CB4C1D7
CA77149B8F0C98198919DC43890B0BBF10075D53739F7E84CEE95B40C3DB68D5
6E9847E37B7920412068C3DE2065A77281345980956AFAD312499818890B454F
5DD8C92695818BA4DAFEBCDD4D268763515CE077A64C5F3AB384A6DFD7DD9641
FCDA0A3344B3A14F82D478B4BE7BFC2822A4D67AD3FD07B11589B93842066528
1E51D954D7E6019F6921DB9B00ED303B4B8F557EAC7A0B0340A268B0DDB25B3E
BE0982129B0D3416CA5D07ADC689CAA181270B8141F9D0F60C60F156CB305E5B
E71D9A5D5FB3216BFB66284FCABF6D74564D1288EA99D3FCF6F29C3AA690A596
02C0AD2BB29A2D457C66031E5571A1454758212EB4D053F4C28FF629FA94DBF2
9677AC4B92C4DF5C7FFDE31A8F2D6F9477896C11CBA890DD464C9231B1C350E8
E8CEE17F2E0F5D10416F7D7FBC6085E9BE09E692951EA7B93A9F49CD458476E0
A380E1D122F275093ECFD398FCA6D714187CC12A2B16318F9E1D2B0E9EC134A2
C4D2674AA68D2E7EDBCCA383
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LMRoman6-Regular
%!PS-AdobeFont-1.0: LMRoman6-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman6-Regular known{/LMRoman6-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman6-Regular)readonly def
/FamilyName(LMRoman6)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -88 def
/UnderlineThickness 31 def
end readonly def
/FontName /LMRoman6-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-515 -298 1647 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF386043BC0B77B47F761487099
F3EE8B97E5F18DCAE51B94317C8F4DECC130CEC55EE16A19C81D4D1668127C7B
86C63787AA273CDA19F2DCE459A6BDCED90E3C60B9F7DA6A0715D2D12F8B805A
5203A948442C2E5796D5CD20544385DB0893AB62040E1E7F33167592F1944E2A
AF140EB52E80AC868A5E53B529B98C77E46244F0B9D46A2FBA3E0040CF5A1D5B
8CF20FDE7C876B9AF4A5F6798ED83E56E985DC30EE5A3B2D5EA30F640DA2DB67
1783F69DA070954570F579C316046D8A6B7EEEBAC73F338A8B7D40470B4468D8
CD9BA8B731E8581C69A41FE873D6ECF58F4962AB44706743806BDB909276EE0E
99E10A530147C9C14638387F89B169CCEA629DE9AEBC010589EE04588A992E08
30B37AB3DF923029B8F6BF19C1C728797AEB5C0F2044753BA4C7D1437E2B9B1B
3DAE6A15672EF1F238D1AB8F873DBF5264D704FB19F5C1CFA0E5168002B3741F
0134E79412F5B0AFABBF3069460C10225E6F7BADE64F07074C9D594F6F7514CA
5B8A7750FAF214600FB248AD5E8D9FF734EE44CA79A585268A06C6FD4E294257
0F814FAE80C1A7776ACFE85D3159ED173F8C4EF0456171564E9A2E1C26464408
16B747D137D37316A340FB72BC005029A06DF8BA48E9AACDF832BA2745C448E7
9225CE3A522B46E18F5733663105D638E571758C9E8D9121EE819E4A12676318
11F0C568B81E1502A5D168139F197F7A71FE60CCB05063C6D9D8A0048E60F9C9
5CFFF69AFB554B3534796218449D2BB97FE15BD1A6FF104BF67F8EBA5C3C39B0
24ADAC78AC4FF61D5847F0A110651114C532EAFDAE505116C77AECA32E2BA067
D87DCBEA2E893E1D158711B852C3C963EA747D4D9D93C0454110A0F3F3AAABC9
6302B04163FC634E361AC5E3BD486EAC834805A91ABB9CDCF208058849435F76
2110F214C0CBCB2F5EA46AF9CD76E9EF75D86A4440BB59404C17B1179CB9B56C
EDE060E0D478FDAADC38FD62BD678F01664FC69FD05F2D761B67600C571B4377
AD4768FBEBDFCF6B49F09839B935B1F342D9F3A4760004D1BBBF9DB45283B2F5
631D37BBD4D1AE02E5474D3559A88CC1D71DD4372EE9DBD254F01ECD5C2CED3A
0113890BD4180C41990C4DA7CC21E16657398D5DC47EB68012394F7EEB8B381A
C03F1D01D1487F4031379DB5C7666F555041C9F9177629893133DBEA5CD1A744
BFD64E7C8D7380386797967F074F5B3644BB3F93D7F96770C73499AC0AFC3D70
89A702EE7999C2A97A199035EAB7BD49EEFBEB6D1F41C515735F1718E0BB5606
C2C61197C0E5F91561F22FE0609FA7DF61DB5F15EC186975859E069F70F57056
459053227D9D94FBA34793243644B8A33EA339F22E5B9575E9569E23A6B682C0
62DC90867363947BF10C1C6B0F97B27345AA8316DE4F130A0B512508C2CA853B
13A2D88CB67CECA9A1D3498D569DE012062B6FE644D6303E71757A8D901A8680
00B4A48732764FEC514E0ECADFAEF80EC2B6173E40E41727528710CA03E98442
B3B12A017B1A07A9612E0AE4FA8ABB03A7FC1F523A2F174B13F64268A18E8E77
FF6F775ECFDA960F501A93455644ECF8414F66199ABA373DB1AEA9623EEBEC6F
15E7F3F48B41A3CEAF10FD7581BDDC2776D8E381C851DC3F31614C5AB3F50FE1
9F3A3904EB9B0DBBB869C08B929591DC20A23F814F53B9901E959FF524CE9ABC
E9B5DFD6E935B1D43771DF39AAD3ED6AE7D491B5803E4E32D24FDE0B7C567329
57AC35E0658EF6CB0C009BA7E3C884840A95B9429D4882427E647838911ABD2A
1FB29A5124992CD43B1100ACFB21FEF0D9BFE8B01C6B3DBE65473EE16EC1039E
D262710B2DFA3C80BB7D7E09A12CFDCAE0432930CFC34EF65275FDCB5F123917
81D1555E66E0D67549FBF0833E668140F9EF7A02B92E75A597785BBED4857290
DC12E123CB9AD2C26CFB2671B72D15270CD8CB1D59CA27D10C1AEA9C0ECC5E17
87985544273ECCB27B5D11115D2C21E5BDD170408D11B95BB8DDBD96A7A874B7
AAD301206EA0A9CDE765E680474B9F978D9375EE8C916337E77E7BEC314607B4
04DDC863F27113B024BB298FFA0AF72A54105E7A572DF254355335500897F21E
F2862F2CAE2F8B6A8DB26A1287AB3DD941A92AC57A73B844C372AFCF6EB41D3B
5ED98C6D02341ECB3E859D5F11356E462A7E8180271AF307F9D7860592710144
E3E8808D61754CAA63E526980A6F1295C15C74DBCD373A5DED53C65CCBED3567
1A31DDC35687CF41E08D744712F5F7235A497AC316B10038C608B4DDD70D143C
CD63701C3C4909B75D5369025324B818204ADDBCD8C4C44741A535D965E48F0F
4AD114076E79FD9FFAFE6D22E975678C98EC8A9069AEC8E237722DBA54F0436D
AB7E1F3B2B1417451DF6A798A1CDF1DD1BC2FC346EE621E1375BD57EEDA02398
84B2F48FD7E2FA858F7B6EE2FCA7825AF4865C8FBAF1AB0D4645AE226620B2F9
44CC07F6E33B9528DDAFCCA9D3BB807F7CB306F90142AE5891F32651524B36A0
6330A30AFEA44E8FA6BD5C2B6D5B95D16AA4BAE01BBBF1C500EA0F82E6D25FC3
104B1292A1F83517BC28709D3864CA3F6C3320D2618AC4BD618B14E85CEC3D63
192BB57428EC6A492EF0633D73C071CEA58830A18AE1C56554ECECB585F5EC34
3516991E7834FDA0F1AF41BCCD590AFFBC56D7731B980EF3C793B89AD3612894
309F1DD1EF8BC26CE436CB8730DD1D4D5EFAF5FA6A47330C628B6380F5E99436
82A51642BA27C943B460063E42F6D808162D9718D28BF9E906D9591370733139
78F2D699ABC5B7123EC9D0708FB4A2CCE7CA5591627DBB349FC3EAAD652E6D5E
754B9ADE46841E52DF90C3F0D2C1CFE91544BF5FFA32566D2B54F3F661E2B4C5
73909261E023AD60CF2CDAEEEFEBD12888FF26D3263B094C4542817B56BF7DB9
3B51B70D52E4CD68E283D187A7CDB492B2E6977DB02BD25B136FB202B9A33D47
AFA532531BDDBE618CC7DD66B56AB89C1B289D953CEB012E09C30DBBC10E1086
65DBADEC977F6E7846D7396E9219BC87F668804CDB793530EF5B16FA667198CD
8995DABC4ACF593CA80F3E58961CB4947776D74FB447B113866881201429FDA9
49FE1F364C2F744079F4E1B01FF5642C36D1F3B5AA4B353F54F6AFB0691A9D65
44961B78A8800AE691524EEFC7176E9ECBDD42DEFF02379B2BECB9C822259177
9524DA99E494D9E17EFAEF147D4E2A99A2BF9C4A75DB0DB9C236C6000BF23A56
FBFBFE8478F1CD00150EE39F03C7F677D3E2B31056F217B2BB9C6F38617CBEE7
62AFA533B73EA098C2C32ADEA2AFD571BCB630EE4DA998F03DA4C509B1150ECB
F843C38A4E32C9EEC6B7BDE829B88A69051E420E3781813A9E7F06D9AB28A203
7BEB5FD141D570451BADF0EBA854D9D2B0A27A20D80995B4ECD8E58D2AA0A9A7
0203E05F26F0B3F3342C66ECA5F6A8082C5D91442EA1B50E761A116748EF16FB
F0CE9B3FEFE3946CA837B0FE2E97B6A09C36A90A76489768372CC0E84BCA8627
6BDBA191466083845E18BF50D84C0234D36FF51BACC4A8A0A46B077F872C4A47
B3087A021FF5FC22878F6C25390030995DBF48DBC939DB010332BE7D2DB97CF0
8AE181C974555ACDD144A6062953EDD79A71710016229961818A54D0EB5353BE
47D53DB0D8DB88F2BCDD7BBA57F79554AD8BDA842AB063B025F5E50D42EB8455
11493E68C762C83A6DA63D6CEA621C8FEF383C18C14AD4D5221259538F0CA326
3BA0B22C5E531A6F1CDA37A526CA38BAF2C8E92056ED8AE3BE873992EA7382B7
8039D2C3956923C9DD71A04C7A9CF032A8B822FD30303273748AF2AFD97E07A9
C2A96F4EF87545B9D0FF6FA73D9595C826F333231AA99F9D731A3BA6DD580AB6
D46578E8E438FFC41BE6B509B844B73E58645D111908E46A3BBF2B8B22DAE7BC
3650E52286E6F70B15B2A8DA1B30A710FDA8E19C96C0CF4B8DD9CE727EB9DF70
D06977F200F881FC5238ED936026B990B444882BE1DFFB5B856A8C34BC6B1DFB
B5E5E0FD6150E4A8F797157830F27565EF2D8812D285B9B59F8C8A49FB435D43
99BC7B5BECED688C38D5AB822DB77434BDC79A29F579CAE4A7AC0C4A498C6121
EDD820F2CFEF6999F99AA0A53982A4C448122CE2721DF8373367309F337B2359
B092FED28EC622C9E512A9B2024A9C0EC0CF7753FE13B5B746A0F3B6102F19D4
C26C51B773151E91659F532E4CFB0E844039C0FF5C49D1AD996A67AB0914D83D
859C06AF74CCD49B3B53718C98D58C9B03171C5A32A41F78AACABDB9CA03AA5F
701B6F80BBCDF2C427C40A51597F0B1BFBE01C421EDB7A32B298BD9B107D2A0C
DC7A6C18D0F3AF11EC929FC657A99A86DEDC1737FCDAE025AA14564481D37B1A
FCA6A50C22CDE6A2F98968D6F283AED79E493699F86A71F96165AA3EFB39B7B1
3C5FCC011F38E34B0DD3DDDD4A4A3EA5B0A1FA84E55ECA7617A41124595DB72D
BCF96ED9D3947EC669D9E7CAFBDFCAE03ABFD55B19D787D681C4F4C411F79B1D
2328A1E6183172AC3CF87AEF753DEB92924B8AACE490CEBDED9AFB5157288201
B6D86D6FA4ABC7D8500C4BF4C285A2D8EEC6E2A0D2996EED16D62808ECCF4F42
C01B654C23864BA929B5871C288011B28D6A6235824DDCA2488CC18704FB8322
977A15C8ECDD04BE95BF3724E47095929FA09CB534581ABDDF50D5941C63845E
8C5B821CC805380C335DFCD90C3F5CC3AE9D0905CB5478EB974053B984E40965
0E9CDFFD63D996E25E5C0E0FFE02BBE483C5C454F9E31C71A08EF5FF10CB8DAC
BE7AC4B2E7512E8510BD36256D46D93485DBEF2BAD146E4DF93B37E66D87A53F
A2D0813AB238367A14F0ED1EAC26E444B6BE5E9B7F187558084D9CD408EF7FDC
E23F465AFCAA8EA8643BC8134939CD28AF21976B42B06A63719C44432BD9E82F
6F8EC7A6C9F63592C6DB794714FDACD66F22FBBC6117F8EF3AAB303ACA4121E9
C92051578244155F5D446CFA68A2E7192DAA0D6F9E1EEA8D75D9A93A375C05DE
67319DFA26A2CCE2DB8A256480528D81018CB12244C586A08BBA1FFC28AA0B26
60C443D24320003930CD829CE54419800AC8ADC2206AB30653430174D252E3FA
20771512F99146A0B2A0E257CEC93330A149C5D9572A20B23A177DB5DFCF2450
270BB75F181704FC3ADA152A9B3FF0E2AF24F2DC8433F4C1AB8E43790762CC7D
2F2B08DE31DAC21B126F607D31F950B24B2C9042139D5E7DD43BF347C3E5389A
ECCEE733A2DFE5343CB6D3F245E3863776B00587AE6DA5D759909821BB1FAA64
201B5D90923284E7F91B1730A230B9886D898CB6B51822E9C6092E959AB0ADF6
155C16A31569DDF8C689DA7A3EC6DA1F5C22F0B4BCAC17B19BFAB8B2E847FAEC
BE0ED4C9FAA806A2A4244C87890C9DA4E53930BBDB54CA2AEF866BDC2078EF0B
3F73831D36EDC9C25E494030DB3421C8FEE0E6B0201DD42645D8C77E55B9E967
CD851175CF4CF409D99AC33F173C5CA34796C233E47EF014766A31E2C1CA2E4F
448C13AAF1AD1906A8C811424567A612B2057EA73F2EA89F0E10CCFFD5C8C14C
34C3638979F568DF274069AE7AB410E612F0EA2D31C7B31D6FB22A5EB39BD9EF
06ECBCD35F10C42EA9DAF365763EC4B63977C8D6CB46D3A904810C8A2370F4DB
0B95DE9F7CC688011F0F10E38BFA8A6B112756C704C7969BF710B6924834855B
55381BA275FE5987D3E5DF6638A080553B2A2CDEAA56A0800FAE7F4A9529C22C
4891C970A04C42CF7216E5DB8CBE124D00B4AF84ECCC1E55EF5123584D5A3508
FE86CC6FD9A1DBD506B28903D9C18D6565A29B18C26A4F1D951390AD6A52E1EC
EF2E37237A777F33D08DDDDDA07EB0380EB95329B5EB40D43F480BA555064186
D54221F9905123E9C78A275F768BA56FE46F120B82CDCB74A9E5E232F73D2721
5F9E6FE8BBC70968AEFB7F45C8502E8D315A417268C5346223F9FF41E8E1BF7E
9CB02F2E46976B514E496BB4EC07880AA4FD6A4DDDFF737BC32456C980EBB4EA
8B81AC19830F8A78C65E7ACA7CBD3EDB705695E407C55AE387134DA1285C9898
C63CAB854E80B0886B08A72B1D7674B8391CFFD1A36A573708C2EC010028C55D
9D6688C530A9CCBD00ECEA5BA15FF061F873DA9220FF3CA685CCE2EBE1A36D6A
ED2DC26C28A403BBCA3435C3FB7971E9A566790C28C0A71C1499CEF50F2E8C97
42C8432AAAB19E4EF1378B6E89C99A848AAAF1BD143560B559176CAF28B28018
C38D36DBC927B1ADC31A3AC9695E984ECEA0E37FD797CB6FB74220158EBAAD27
211EB43A348E7E1F8382CCEDC46C10484C6729380651984B1191C014875D0B1E
33C0AA94F414ABCA46ECF689BA685F1BD831B4271EE26275EB77B4E6CB800674
0B0AB54A7784D3EDD40001AFA2C7C092EA151A6F3762571629775247A6AC65DE
FBCE6B77CA4C0234D36FF51BACC428CC989ADD61913D31D2FF3251E92DFBFA78
3B47A38FD1B0ED7F6D53F76F3056CD176D047C31F0AF1C2FD75C48023CC0FB7B
49A95CD2AE65D2D8F3A71464A4FDA8F96C2E130157F5D625228C2330B64AFBBC
71BF310E83A90F29E6D56D9F0D120173EA18167D762B179B038D83C173FD9FA6
14F46FED6BE89D543F9326DFA9ED12F08B91B7E0983965E2CAFA437B3A8D3A71
4E15A869A760D44D5B355836833BD1FA7CE6F071AFB821326C61BF37D232038E
01DAC007D632AD6939CE8589D0D52DD944C86245BD9D75B49EE17C674DFB06CD
E334E0EDC575DEEA0C73666D12F2D112B93EF7E5D6F5FAAE5666BE3BDB48DE31
C5AB6BCFA7D35816E58626C45D30BF42550ED9739076EB30477D455C7DF2258F
BD260D693391DEA7CB26D4A418E48A2989167B7DCE26C5904489A4A227F60027
459721E0E7D5BEC1C0E35C4BEDC334250A5CE240A1171441D03FD75811F371B3
895AABDABAD4BEA1951EEE0ECF5E0BE575C26270EB3CAD869458FA1F1C691B9F
6A82EC74B3996022FD4532F533E8DF8FDEC637330A3A664A1F08E4F43E7E80E6
45F7AEA192B20DEE8C41911D8273D0046F9CD7B7528EB0A09D432F43FC399C46
C1426F4FF72A744B8EED9375BA41440EDD6D0F7AD427325B4998F156F54D51D7
6CF525A8998309B9F7A56B29B7FA10CA7213829FCEAC430A54AAB1C4D242673D
6230D5F2776ABE58CB9B13DB857C0A6824B7C7DD05B45223A6504CA4D48826FA
E6756223F2FF5B52103EE9C864BF35AFFF004977E13B9EC65F0D6EC848B00D06
197CF4D60EA6BB57A6AE3E00085D24ED6C4682EA8854E6174C5C555DAD5EEEB9
110AE468D1CC587A732C6D09C0880C2DEF08A6B185F274EEB557DF134CA24FD7
1941E9F80D1180B1FCA1A75090DCBAE8DB96C15B184D135D2BCC478177F585F1
5CD2912847D0F53FF2986C6851D07D2262EC7AF31ACAC176D11DEB3601A993B6
641F717588125CFE99B5A0257F0D0E3595C2F2F772B9BA1D84863187169DC6EC
DB5EB835DF7B000BBAB0B84DC6837D62BFEE089AF2C6CC99FAD2726E5180693C
7DF6E182FA14EC901A7C9BD2634ED9F6F2F7F847D39053135644CF45A4ED3EE4
2458BFF881F4ED4F4D5B8152B9917A24D075483CE4272074EBD88C9DCBDD1E51
AC1353F7C1C0DC3B2059F46A636EEEE6A62B6E1214CE593C8E6A44DA2FCE7D8A
AC4A74715CFC76B176E1104CE528460DD0284E0201EB5DFC9E470CBFCCFB150A
E9088E7695DF1250356DC68EEA00EDB0DAB677F5EA9680FBE092701641522B2C
25AAF41A24D9B74A0FE9BAF8DF5F77D27542FE442940A2663BDF01C8867CB36C
961FB9DA5EC6C7229DAA6284273187F24F9D209D78E0A2FD3FA71C28EDFC157C
C088BEBB427E01E60CCE30B0F2B691E3A8C1DD510CADC3947813C88DC88FFB06
B300935D7C9C8B8A04CFA89B4CB1DD2380CC96B5155C7598D6D71114D161E132
C418C4F5A4A8E408604369101BD16DB8A70A7E46F92001D56CCA3203CD0D1A78
AA64AA9FF80D4AD28DBF9913982E0058B085054144022BE6620E3BE3BCFF07C0
29D465A6294F4906BA1E1ADEDDC9836C789139796AD76F219F2F7BCF8AA5CA60
411CC615B9778A9B58A168969D018429B757D11929E44C07D03436CB49F934EA
D47B45692A4ADDCC5EB548911B66840F812555122B46A03394E8950E44BE3C53
C762F8D785BCC025E1C5AC920040F5ACA6EFBA0623474BE8A196AC89067C7D65
9080A08A54C3602B55B30C8A5BED21A826EC20AC4384A8CFF8CECF07A5900B4B
BE15F1D299A11567DB72442CC75D9D2B65F3EE7DDC2DA828C424B94677EA2E35
AED029A5EF3D3C9FCE20640DED282095B90D45EA22620C2FA7D7521D7D4B3FC1
F6D6508C46AFBF0AA67F5ED46485047C59B8A6F45B308D576D652AD737D670C5
4B521EED1D06828DCE13D4FC2243ABD3D68FDAF7F8756B84668463680AA78A41
E4BEAD989BE313B1A5F23EAF1A32ECA307C440566D8413DAF4E46BD62C6909B9
FA2B48549448241EE25E1B5D8219C09552129BADF8C69BC5EC029BCBA01A455A
F29279C8A5CA2997474241F59317F44A60ED73DAB72A2F1AC1DF2A9676DB8C3F
21E3904411CCD832A4367EA9C08745AF51BFE2FE4E9C61DA16A1DA992F01F3B0
BACE3AF24DAB6218F50883A2233E299B71E8DFF3FA4DC4369115AF76C5F374F8
92A5A105C4D667B99B8E51118A29A53C6F293947C7BE92DE482C8FB5537B8522
2094CC28A53CBD94C8BEAC33218BCA18B0B8D728F5EB7AB0D7C7210B0257B651
C70763B2676327EC212DBEF80F9865CDBD6441ABCCD93B451CF6BC41F06633E6
CA268D547FA3B451C7F568F472DC8EA68B65E68BC7AA8584379A6F7E21D717BE
20283BB5B470642E3F575F4CA3B9DA9E2DC2EFF49CBEDE957FB5912A1A4087B4
0585F1CE54AC20A4B455D0657BEE59701A97106A29A46DEDC6B0D1D60FAB3C51
6A95167676C8D42EF94FABFF0F417B708625D0FEC49E692238CE9807B35B2C2C
0C32F4122724C159AA1C41D8958F97D25635B98E9B51FE570826C75E64296714
584CA5880931DA86BBFAFA13291C28312DDCB7FFB35DC608C4A21F5A74905ABE
9530283E6BC72AEB17EE83CF198B82EE57A865FEC1A4D1579782B6E455DCC39B
A86A48931F35DCD24D67DED3C5ADF52EEDE57EF3EAC944D97488AD9A55D8DE6C
754A61C5905BCF2ADFF0F69FF58058CD74CEEC4CA652F989068D45ED87B4D7B8
5771D393821723995BD023F95E71A2A3C258F7D7BE6DAFE1F3D2CDA1E8F9B9BB
8E4B55579F650836B2FAE102A8BEBC5D665A50FE027D7FF581F639942945245D
8F3401965C94603E85F88992CF0D52A2D4AFDEA7F2191ED663BE4CEC9D956699
EF4332B8606F8473AABE20673348F59F48E71AC4A1EA0864F54833BEB3386794
2B175B089E488167D0DB7BCEB212E0F42F6F95DE7370CCF2E687548BF00226E0
E47442D9E34B3281BEC63A84CFFFA66D1C3CD57454430E03206D85A3D447A4D9
46BD503062DED9A4E6F584EAA7117747BF9CCB78F9F8A3F5D44459BF81997F9E
7BECF1E510DCD8F0D33CFE7734AA15DE36B9FDAB2AB6C75567DF0AAA5A4BF65B
0FA7D0BFE3869209CB0FF2A2C9274945F23AF2CC8C8B621E9E3271620735C9C7
C11C22145EE2200A5873FDADBBE53F14CDB6F5079C10E2B961247F83C940266C
B994EB977112BF47327A70393F396B4824BE3733502E1F59F53F8A82820CBA3C
57AECF77F31A1A47D0F75151398B14A65214F97869C2FAEFF9B4FD36E8F07DA4
26CB14F48BAC985DF4B9EB28129D8B11204DE621FCD11E65FA0356054FC5F9B0
C2A769D94B8CB62091F4C2DD17352573C90177484F7E742B00B7C92F1E2F9B16
15938B81AFA5C99B02AB37CB7492A3032BC29F96CEB1CE5357222E5B02DFC7C0
E8BB426574719FF18F1F77FBBB3ECF535EC546A8CD9E1D5DCDC5F03905A10761
20B07D3813F871C07E725DB927C4A31F0982334E7A93DC7808E8A177AB68481B
CB9DA87822AFA2C2BD6012CD8F56DDC31E3C30CC36F3BD12FDBD8233796A985C
0C3A69446189BE6CE558BCEAB2253672D95FDB5AE7905781BD26B1A463F3F2DC
46DD4C7847179BC0AB88D400A2C37C3968A74D112B40A94279AA581FC4FDB124
B11B627C6EF74BE92989C382E8FAC254F543E8D3E7146C9A055BA4BCC1CDF469
2D601ADE5D83133EF0A5D0FEFB9C088AA850C7E8898926E201C9E847D513189D
68F0EAE6D2F1FAFFF3E574A8B3C5BBEC36409B7C691225359FAE9CF28FE21E92
4E15E480A3148A7DCBBF61ED7769F5DD268E215A2BD31BC49F3F6D36A5F979FC
F84EDC4C4D95FB8E77994B31A6E70BB982DE2C8C9866B0758ACA2BDB1C660F4F
520C5AAF132A27B809011676A70056DED9C4C853CEDB3E0DAD7D09451AD9CCED
0E89320F996E99C810F90F70BBBA23026B732D964B0495E4EC7E279F1F1A1324
0EBACCC9B5C71D0890A63667CC5AE766518F978EC55812FA24CB75FEA6380742
E8106BBFF2B4E2F28C0A86950E1415954373AB66CC420BDF3B63357D83C3C70D
DFAB5DA419A9C1F47891F67F19E3E2051CF3F7733A0623AA881D1901D385F268
E06414083A4D17B0334995C1574AA7FF5005A959C34ADF2D9D5AEB2B1483938B
B1554D75F8F5F339D78BE6FFC046E5BF380DD0B4E7DD1C0E0F8CEBAD0EE5F36F
6CD5776D5DB1B74D3FC87DDFA45128C2A500013340CFEA5037551A74E6CD0E1A
00C1D85545FC952DD92E7209B2CCDFC5C711A3A752FBF80C009DAE6969556B92
79FC9194E2846675A21436F96354CB974688EAD60548FC8B0996B192D9CEEE79
A7012A045FF72F350FF934EAE9355F75676B21D53206AB65DD1F7D42348A7E41
9CC980B4DDF530330D2690839DC0AAE1F2A93AECCCF2B25832107BBECC4E114D
01464F125E0A6B762B42E3C6D70148E8DD6A47962A2FCC9DCD6848CF3FC5DC78
FCADE8B24223F5B5025384B43478A75304F3BBD86958EDED94F499FA98E9FC63
4677C6E3604B58C6E6BC32B41A4B18DE71F20FCD180CDD61C4DDB6310B59817A
BD46A22723DA0ADC91D3BECA6108C60DFA1D9FDB3B90EFAE44EAFF49757E5120
442C2428A177FF01BE719F6DD2F44248DE66B6EADC060269F2189B19204232F3
0EC774AB6AEB948CBA6F1699DB566B50B27750973E175161DDD5A5C76878980A
10B81B9D2D6DBCBB8F3C63EC967AB33A8BA1A97F7FBF66B795FD506C06C21B62
6085A290BDCF236F813A15583AABB1400A178A07F4A84C5DD989C47288DEB2DE
91E7A5A4CB45C0F2BC50B51C7F0AA44BC1842D76C4AB68473467C57978AF08A8
D70AEE51EB0ABDEEAC94BF3611A6C3560E652B5028AE5DA5139E8DBFBEBFF644
019D08C6614920FDDD85544C9A64BAE28239DA8BEB1A6A96E95B783B1BB4EF73
39161683C3F4D34A8751256D9D4B1A16D4D3E26648A68C4F8F52F0A87021F773
E844F7E60E12E4EFF60899BA400A7FE6EE1551AFF52F20E24FAF645634CC61A6
2BE10001B3CEBD719EEB38B92EABDC75BFF945955A669725E724380AE722EDA5
8756E4FA9184D9C324D2DD1C71C33BCE44A458C5F5EF1602C01D3283CB3A4287
33AAE613D71837FB78CD002E65B96BFDE4A362D5BD17C1070EBE81EAF66A0A03
0E6741C060A09262425C9A4028AD1EC9C3A83B0675726AD12544F2864E4811F7
AB3C0304634B355E9E71CAAF5A17D5598D8E8BB772EF73E44A2BBB1B75FC1C50
36EB454C8FE7410BB44BE3BD2F430565ADF5535FEB1867A1526B2BD122E7A2BA
60639A27F5F33D70FED1ACEA5B74B3C146C6C2BAE17F65580F59FC0EAEEB3D39
A3B9FDEF15DA1F1505CDD37755796CD5FC56802F192FFB2B5BBAD18B95F03136
2CB594A3D6D3FC84213C0BE4656E35FA02FAF5101E1AE6B7CB286C9DB84F5869
A65EAC76ED7C42F48FC144EE377D810BA7902C297A111D5BC2A9EC89E2F19716
811BA35FEA5AF6530FEF082644914E1531F0AED1621CCE288B42F92DDD085B66
203111B6B5FA34108CE6151D158AA7D6F4DBE64EF3EAEC307ED49717F2E9B515
A37869A7146A097AAC9BD5C4BFB353346C0A93FC6C2B43FB220A086948CCE7C8
6FFB2FF5E90DCD355962158491A8FD8AD2C7F470E48D271FC288691D35FDF7B2
A3B17C6456A86FF9C72B59ABFFFFA24E88426DC433391AB62250D7C4C702A0D4
5D43150678809B7735371FE5A2F54624315981DB9E59213A15218510BBB651ED
E7B5DF05C844D3978F8A4FBCC99D5A66EC8AEF27E536BD4963C694A57B12AF3C
EE45979BA193061E2BA4404CBAFAF99040CF04CE4DB5A8C71723B397A72FF276
010D7AF738123415E277C62F8D923A4F2249B00E71E7D74C36412F614BC37849
AD3004BA89D16D4EA9EF45046CEDA5A2C849EFB86F21F9497121887FC429FCB1
AFB1D8DCB2B603A43666989974543B3403BE4704649BF5B205854F9BF1F07A7D
B49C5C9C8318DF97FA0D8A71169DD47A3437A02EF556D9F32B061E78C54C7367
799F179EF01BFD7E637E171B8F2C7547249332D8E776E8D9E78621ABDDF6149E
CBC35E7209149B2F24EDE7E8A737087C92DEF6DFF655DFF39C5B92C79835F6A0
471A7978572EC9BA14A0944E37480AD3FF9C10590C070FF56776E2FF4CEA1273
35272EE8EDF83B37DEB70C29F8C81F821B58BE53678574253555AAC69C4F5FDA
21D1E7A450881F0C1E9BD75AF56BBDE24109B2B136AD0292B7A2DE9565077533
ED98A07018AD82DE63434A9CDC1F80096F559A53BFC7CC1CBDAE2D8231BB7CD1
98E97C75921E2C894A15F60EA95A74CA355A6197A5A51C16D88F97E2ED91DC3F
7E9F8BE834F74A616E8415CF27C45923F672D32750F78FA3820035607BDBC19C
7399F90508F5CCFB881F251F863683A1ACFD7164EAD511A3BC7416909123CF43
FD679E3102A6ADCCE7665F36AB8B9BBDA8C4692ADCD5472EA4AB02F0D34C0B2B
C6AC92B769213ACFDC91757B96D940C773591DF0BF885847AE5E7A34772BB4EC
FAFB821CEDEFB4941ACB6488C1A608FA21A2EDC0D224E55034DACDEA2AE6C8D0
C0CBAF7A73BF883DD295DB8B9E377F048A63FDBFD917BB718E9C44F84195CC47
24B30AA813D9B83BA91C2B1EA4B102EC16763EE0F5092CACEA886C5417DA88F9
6BD9BD67E0A5EBCEC560B2C88D16F2F85F7F266D95AD1FC0452CA116399E3814
C8F1839E86122746ED4917BC8493FA539B98E93F5B9CC9E1F39D38C1FF869429
8FF8A5AFE94A066340F20A782776BBE6D44D88904AD23D3FFBF1AFBF1164062F
545BE743C6E81F62FF36B049CC836C975870BFD49306F07C03FFCDC97B4DBEA8
C96CDEAF8149911A78DF6691E34EC130A9DBA7669114BCBC5B20BB6045BFD5AA
4BA26DC69F2A26255A2AEAD221FD1572A0EC8FB8536E6374281CF76D35DDAFF5
832E0D2619B8C1EC0024EF9121CCE324DBD5304EA586825B401F34F07D2CFE68
211086CE3F6D27219484D67FA9B2F62B5E5B84B16072EDAFDA40B773C76279A7
FE86F0213F6D2790D9F623C83753963CA85E894406AD358B6E89C99A848AAAF1
BD143560B559176CAF28B78F735F377C51A8FF392A822244F5550DDDE2FA0394
8FB8A6195E6E3BC1FA23789B498F2980228C0188F99519D76E5D10C2BF46D44E
C8836B9FC33A70C50FBFAEF60D46E804886A269544DE0EDDA501893797CE2999
5D5C6F559CE91804815203BED8972A2E4B94BDB2FC07702E1FA9772B9746A623
3CA4939C2CF3D6DEA8E2A780F2D96804B89E4132E2BF7FE56CF6503EAC88E8B4
F4DCE6515420080C9D7CDDEBEB00524F2A8AA21C85408FA4D85B5C05549E3924
7A5CB3F9C37AF849E9C5F06214A570113A069B4B4F931C20D002682757152A2B
E256F305BAA5813EA0A4B9F6214465171F3AF111E2722605554A46271FAC0946
E0963399EB3291F47FA0A05D57215EF92994876F6F33F0EF84E03C60BE701384
D766CA8CACDEFCAF9C9F097ABCD781F10873619010B4C21F46955BCD54FA2588
83F889200505C07E64B2D4509D1270CDBEFF01A028AD58D992F2ECFBEC965700
730C46F4B358C2890599A5A1EE444C6CDC7C6263B93715BDEFB354398CAF586A
A49E4E4DAE890620BF249A218DE01B8B920F09E9FA8EE5644E54CCA4F9703826
6A4F21190000CEA2845E755D274D43E0BE6E4DD3C751E3FD6AA8BB509B508544
5A66B1BEEA5D9B8200B32D7368EC958971F6DD8D5D97E9EFF50525B13159F6F0
DA988C6FF06B7DEF84FD26D37942631C4AF62DC6AC474AC2F11808940D6E9AFA
A51EF6C23B0F31BC5A96106B05FD0602066C95C5C4BE2AD8034CE1068DD6F9E2
676A7EF904B019D3B6AD98F74FD0374319138E26AEABC40B64A430C0AA868759
E4C0A2689D828A9BC190138AA7A9BE8E9EA76D1DED1866D50107820422048BF9
132D908BA2D4057EC3592A03E259D54CE0936370F33764E81E3594AC3AF5771B
AC834A3CF62FF7833D31387328F6F57B13A373A9E0DDCE6E0CB20084673722BF
1ABF46364D9C8E8A7E042AA371E061C368E357E57D151C6F2CFE731360E35AD6
0073525038B0684FCB2D92EC5817FB9397AC08625C202E9BB2A81577A0BA6A22
7919D5CE8031E1273A9000C8139BAF088951C2DCEF71238163E562EEBFB3BF76
48E199367C0FCF6C832EBA5B2A17F3441533543693B08E585F25B7A66FF85EB8
6075656640D41EE2F48F13943C8B81DBFA5C3092E0E82F217A7333369731F5B9
5646684EBF41E264D943C1929141E3380C178882FFEE4C84A9A10F63CFF96C4B
2E433893093E7F419099F0279F6755E232669B65A7A46A6161F9A8DACD5D8135
3D89181D89CF74F9995B40E5C55FBC81D9EE91388054E57BAE66CE447123DF5C
4349561CBC7B1307CBEC74FB6018521C35916CDE56F61099321A702FA0B00E10
87CD690D714452D9A6EF9AC68D884E15ACA3BF5420D0CF463BCA4DE70B280622
D99C8FD8E295AEC15D1615C1B5A95933E7854EAD8F2C531DC518453ADF92C687
4EEEAA337C69B5681BE101627FCB6E622B8AC60B81A9386C25C9A3DA1093D6BE
7C00C7FE7D8738744D88F36605649E488A00C554429F72F81976F8106FC0C276
CFE6E5F9EAC13ADF5D5249AC0BC2B157F86990D94315B96902181EFFB6FA3628
B1EB9EAA51B861EEC948584C8851C74AF133C1C758731AA348AB2BD113D4C2F5
C4ECEF3FCFF3954FDAA2E22CEEF3B0647E26F47A1BE4D3CA0B34DD220A3FC75F
1DC0671FE71644C4BD2B8CD02B4E3A4009DF8066CA8F1EBBF10A7E363AFC6ACE
C2B8E7CDDA498623748FA6380541C130824BE560C8F0674BB56DCB53F9792361
238817BA3548735C48CA3A0F1D9A942543FDE90924C9DB3A5D667E0AF18066F3
070EF41078AEC60C1F7D1E448C74467F8D71CB310BBC7D60CBA67A52C361309B
09C897726DC616466250AF1CE663648129D85586F1E197DD0994AD9DDEF9A9A3
39D68659794A4DC92BF186068C71B851A7F85B6333C19C947C0A8394FCEC5A63
98F275C832B0315453DAB180934E7AE145AC583FE784CD69B918457FC63ACB5F
A24E41C81061F57F4B04B03D4460F5B8EAF3E626D7B094035B9C63C57D5A69DD
11F6760850FD686F798015231BA851FFF5ED77FECD107853612CB37BCB221B32
8D41B17F7A1D1B564155A42F6626A6E7CFC849FBFFBB17679ABA8C32DE02A788
4AE4336F3FEBD08B7B93B550CC6D1ED120A98BA0F70B7ADBB35E0F1641F66881
7E64481B4479C73FC6BFE88E3299560DBC638C18325B5098B04BA53758C08F39
83A49B9CAB51C523CED186C921878D36BC6DD37DB1BC790D93B0A8092E176ACF
C8C5A4031DBF1B7A9F81FA891B645C5CFE109AC7A355699319C74C3F859B9D4E
9CBC866D6317C9BD700703DADB9EEC88B89E5D79A841A83A5D542924F4BF5B4F
3426C6C6E12E081339CDBD4556C2959F46F3FFEC99835C3925BE0A67E48E8044
9794A28F22EF5DAF152DC870F653E379F706AD6E68279120BB95FC5A0371FAF1
4E7D7542B1B42D692328847E72861951E530279E4DB9DDE98CE3D3D9D7F36EFD
601220D7FB32036354C6BF79126C436F4C14079CD216A6C58ED2E4B42B87A7B6
BF4FEBD03132F9075C271F205407839A012D287724BBB8E65FE1141502C1218C
55773CA3C6D66A1D38BF65DF1F1DA5439DBC802B4A9D803BD635C05877C0AA95
2844DF49F6C532D429E5C86F89D1E697FCED16177EAE6E28CC683E82F754CFE7
9598457D94ADE420B6ECE78CFC2B6D4481AA22D69BD9E88E5FE0464CBD7F7ED2
A91919C80165613FD4BCC174D4FBD61DE7DDB8C5B65C2F20D5864807AE868310
51F55FD1C3B0A09767B7433CCEFCB8A59AE9FB7ECD21F133B000DA6224A2584C
6E57D630EBD5471DE274B7485EBFD009F8EB5CC90E32FB28271684561F974238
0EE8DF0026663246BAFCD579B9A427644DDA7044E0146ACC2771C893B96FE305
B9AFE0CFE2A3529B735031ED0B3FF53DE7A8FA45ECD89CC7147A7B3503F6B4CA
4588D5430DD9943FA6EE299A4FDADFFCEE8EE1EDC4194F1012D8BB958B694068
1AEA50C11ECB160E70DC726AFCBC56E7963B092951E7F28E41BA433289138F9F
262633B88CBA65ABDBDDD8DB22470CC24235DCE1486937FE85441BC8E861EB34
8CDF8229A2AD80F97996DB1B6A97E165EADC6CE23BD6CB9700745AF516436BF0
FB5A606F7A211F72225DB3DB146BDB01C7E9B719A73B5CF621EFA31491F57165
95A08356F07039761A317BD243EF56A477B3DFBCC8AF7B6FB67E620200B4F329
2A410A7CC021A3B60D1D8504A693DE5A28210BA0E8474E6E1A478D5C2A0D08CB
39DA7D5F522A4ED633EE94BA2AA0F5E525C03402B8AF7F49C00D5E266D3F7776
A802E40DEF001C0EF439972F57369290DD3D9879EA5DFAF0C5593A7FBE0018B6
85A34C3C85CEDAABD9BCE6C56557C0E1421AA0F101BA284D079A7D06D8D7E20E
0C275B0258A83970B2B20819C87E06075DC32A70F10CBCA84E22FA30319B8C68
F8F7DCF39E5FF7ECDAE3884DD8E25FD52B10D69B1FE7A3D115E94D8392FB0960
5D7DAAA5B46EAA0FD28A52F5B7ABD3D5A3869872ADEBD8F475B2949F526B775E
728DA3272A0001F10CD44C332AFED4067199D834DD2AD2C122B68DE21FBB1DFB
FB93C9B277206CD0BF3DE5428F9C66D972A2713079B44167DE2E07057C52AE90
A617BDF164CC417BB2CCB5D9DAB78325F5400A3F43ABC8E16D68EEB42D48AF1F
9E4A63205E062A151F0B023B89C5FC1C6C213A2A51EF5CE27489A00116FAFDD6
6C3DBFE6419612225D642CEBA1AF07983C28E90BB62A03F77E45BE54A5F49E7C
5BFEBE18219C9CC407E449AAE706D13F6186F857B2FB2F403BECFCFAAEAFC0B1
5FEA65ADA0703D3F8956FDC4CE39D277C803470A7BF6EB039F4D5DC1D8477988
E9866A5B274A9523D5E19A9D1C769735FB865860424EA7F5CD9AC21A83577240
E389590D1BB9D82D6C8D5A1ABF35B5586301487C7C2E520070772C3C9151C874
A5BD55DE020C1F9746529F1E94F3C05D2ADB50B7705DA7043E617C4E9E9DBCE9
40458600B1A87AE31E65B7EFE7B1CB025613E53035236DB82305D352F1A909AA
D94A739F7445A7308930AF9A61348895A44DE7A4942DAB5EEBE6BE5B5221CC26
25928A5593168035A6E40F9EC3568EFADBF53104D2E39C168FEB3F44BEF775B7
258B7B64888C037FBAC93B31A9C684E539CE988317533F3209C334D1BC4DDFC4
D2C21939688314E19F704D73CE9A31B760AADF626B353C4D88340D01B3A81C22
D87E4DA978668B93FD193C9FAE37945223DF24B81AF00212A580DE1D705E05AF
212A9BA163E86613F20FD329A6F76E74882A24362888BEE48D6CDDE2D9D6D965
663679FF1EE1CD1464AF3C0128B036DA98739F65118904A06FD3AD3A9205A17B
D54BE09082E8353D9C5E5AF62AB7BC7DB94F56A0800FAE7F4A952D028B061B6F
44475375C49819775F2522B9208A27D9CF2032190DDD5250200A157151F7625E
63296E325E2C329428397E82B1E979FBFCE731CDDAE1D91474488C312E9416EE
1E2FA54E38977031156C876E12918275E17D9447D0BA03548CECD9D12CA669D1
6A0C25A85CF598BEDA7656C65182B961927DE098C08A66D1E33FF54A29BD64AE
BEB990584A9351DC689D69CB7FFBED316BC6EEB5C0389E546F4AC7FCA094F324
99C0F8AA33D2C7D00283848308F8A166071BE79D45CFE4070F971EBE827C4A23
2A76F9BF6CE7C365D68A64D44FDF8C65B8FF34647199204E9B49A6A25A26E3DF
4FBF136DFD7EF4BB6D14D462C14DAC254D7DC8EF0FD5AF6AFFE3075776440B98
64E7418B550AE616D7CC864B7F781EBBD8C93AC879D09B847047114AE0939254
6A9760E5ECEA9F2FCE0B991E85351CC77B6E33F6C990D6D2CBED701DABD6A225
F8D9565E6909D3CFCB0AF716DA20A789D041F1383B525CB4C439D80D302A0708
15DF24EF4D73EBDDBA3CED00D4A4BDBA00FC50E72DB7CC193F2AF16670E1EF2B
509EDF403FFDE4089A7571EB97D447649294548B54F4C7C8D5E37DBEA423584E
05F39E674F8471C67EBC8D518591EB6BF2EAA4A55E7D4DA0391B3C3C3C80C467
41AD963A0FEA2B8B3BA7C089CCFA75E93D123597254F889AB82529610091D8A9
F09161A41BAC6A15727CE914A544DFF1F43B5F2C93E3DE4D211B78DC484B8020
16095C8F8A360DB66DCB054E84BD3442D366CC01BEDD930B2387B8C17190CDD2
8490FBE5CB149A68C370D672F0EF59F7774DBF2975364992B3996EA3B4F30C40
106141EEBDC1D187DE8A6A3C971A03327FEC53F1F43913282D7DD523AA8DF6CC
2BC0390A0C3394F1B3C38D3B5C767E8C1604C80E47ED8B3B0E866001A84FF1B0
619B98F65EE74EC488BF9F2F82E1A8B2ECEE35641512CA9C0ED68138F9424638
9073AC94EE08DC1CFC9E0C469B09385B88D9E22A046ADAED535A8E130B46D3C9
7F4DE0BF14EF07EEC4B507F72EC8D2A2347451F3EFA021D02B02DB6D083254D8
65EE0B8DCC3F56219CF698FFD3BC5E89C0FD5D7B7F748E9C7A580610905847A6
49E4477773B87686F7F28F758F1EC2ED337020C0455852748C0477712A9A9258
B3B0473173D9F296B3DD186F8C3F8658C91B59C58B51B53D070CCDBE18D9A900
3DF1EA7A2F228667319B6262F4D0AA467D4856A8FE1E3057ED9B6CCA466A3EA9
18A1ED1623CB40D1DAFA83D894B657908A112B91C0E426E31149A5F6166685C3
FDC27532C931AC8B86E81FB0223682CF6F609118F846A805E5115D72F39A2750
0D6DC4DC8A5CDD4D5CF8A46B2C443B163F4A2E2C1969E740707263B051EC2767
CAE72563F58C453F45C231219FC9727D59703980A6619960C0A619B8A60AEE83
82D921A46D8180CC07F57611D441ABFA4008696745229E9C45D9E34D7CD11F05
2CC0C91B16810537328814DE8EA3CCCAF3F4FB18EEAB32A36F4E7290A36AD6F6
2DA38E59C0420436EF977562C051D55FA18ECB5809B9FE4D405306464C725F7E
F33F38C4E67D3E702F25F5E6D7BD27D6E494FEE2CE7BBCBB7CC2A1E9E1786607
42054A8F069F831C8897E39819D7285533EFA7F4B85C04D8BBB173F3A1285DEE
9D690E225B3DBC6CD0F0F5D5CEB1B55022BA9D729630C537E79CAD8BD61D0963
6D8DFE49F75A1FEA7FB038BD30EB764109C1870F41B05B63CE0F9832AE6CF22A
86CAFB7DD0E3092F635C8A6336457245B77DB5BED5AD6908690534228562EBD1
6CAD30ED18B6F832E45704E5A2A51FC399E8184508DC03B613D3BCB378440790
5226AC4AA63AFB2154D789077F5F527D08296ED66741FC89B8DEC03AA4910805
66C7EC0CB0AF19ED917C49C7C6E431AD33FE2C22C0FE7AB597A93A53F57F031B
013AF6AFE36B88BA8145B3A95495209905EF67ACCD03EA4E635390247BC852EB
E539F55979C4FF694B7467AD7CBD0D9B13C4A0FB05B8D3B71EF134FEDEED3C46
215766F3C351EFC43325645629AF1B3FC5D973408F12F02CB8EDDF6CE870E720
C4A9EB5813CB2D7A47FFE389777C340C370CB8C93B08A135301A669456474606
B11420FAA7E595971F2E3ABDC080C005055A705CC4D79163209A2105EAC6577E
A6EB4184E2910E0CF540BB459E4C13C070931C27705BADFB24D249F31CA82B27
8A73BCD044A7886164FFD25ED2DC87126BDFDF80DB1BF5E73B33A29B7B447820
B08DFDE199BFB74CE228D7577825454E0141D0646662E4662D5565DA6B2F69F0
619F66D685B74FE4D25BBAD498CBED5576CCD91A50473E00BA34E8A58FE1BEEF
DA7A42F0C8B7A112C02FD829629A95B525D7BDCF167C530A27E72675F528DF88
4FD9F5E9548E3A8AD5390B54CF05D20E27DB3EF28D71D6E3C1C44BB64CC76677
CC854138352E3307AA7E32813310DD8017AAF4834EEC0A79C1BF33D934069C9A
1C704E9F50FA5EF36D8232C6D07D47F91E5863B299777F3EF64630BE7AB036EF
31218EA963BC3139E4C92A13FEE5F3E115B3D4AADC1A0A12E27D2945007F4FEB
F12BA3BAD27A85825996EA8F810591B0C92761BC20D9E6F8ED30903CBFD913FD
669B24C73E424480138614EBA261D18BB1A26E4C25992A4DFF582F813D523929
95D75B70F69B13BBA1A5231EC5B47A34669D01AB55C1F205BF58BB378428AF52
D7CBFFBB7CD5B013F3D522E48DA28A4D2B22F8F3F7246485C40783F6DA40C59A
E09ED22AE971884911F452C33F9EED9AFE2D1C610195FA32E61F5D12E43E43F6
E03942B06743B8CD86EFCC6050DAA8B204C4A83000BF40B90715B126B2A8CFA3
C86296F768E749F3AA8A56ADCC26A265901F80068C9B0AED83074C6270B177BA
A18F1975F0E5D1831A64AFD7C9D8F85A009814CA9068F00AFFEE9A3001ADCA2C
A74B5DAFA70C389BA8798B3CB383E42499187C688B95BDA8F401BC2AB34B2B8C
C71EBAE8F6D2C8C4F4194F830D02D1662EB023ECFD1BFF24001929DEE6DC3EA4
33733C96A4EAE21E64CB8F397A76C5D84907E75C18922E16CD2FA67010135937
6A5587CB6364E90F8ECCE014CB39164B65A06C6F602FF3A2A62E9567386DAFEA
92A173E4B6F3271396CB9B90CE73A3467090058FD4C6C042C987A026992772DC
2A0B06D5E4AB1186D8100697D16700D6A10203D03263B1C28B26EADB953ED292
A3FB92D1AEA02C1033D9793F00C5BD05B748D152049364C4EBC6A57966B1A383
BCC2FD3CF4B5E526713FFAC8C980DB7020402FF8E0B391AF827DAB714D59E44C
0E2856EC8BEA615BF622CBFC2D1CEF22898F1639376A8639A1D66DDCAC8783E7
57EED0CE3161DD6C53C0B88A491B4DAEBDB5DEBDD171A3100D4D69D8A56566C0
FA3EAC58EE738E75EE2FB374B1AA261F22CD75F66E7295A254FEFB920A10578A
E30297EAD2323771F7914E4613130324717D0BCAF403BB449F19BE418B41F69B
C01816313959F7209006B45104E76E3846515C25C53DBF61FB3614B78B020EA8
B17C7BED0D9F20225C3C204A716744D3D19D56F7BAE307AF675A9D995F60BF5F
23A3216557921404D641489BF079A64E39E02C98CFBED9D1B87A8DC71DD684F1
D2373D078C8AEAE9C9724A178F4126E0FF0D2F872A96D14E32B3BF31CD545E76
8800538C35281667EB5A6DAA206C523F0B540C9F57197085AB69D4AF68B7A17E
9E3C725F8934D935272113399D2282BEDAE14864E48C57D0F833DEB0CF206341
9D57981BA528840E4C5F98BC050A5C19D339591112299DC9E465A7892D5DFD4B
654D2973AAAD8001ACFC18F903CBE9183B3F48D68850162A7AF46762375B3B86
A9D059C3F09D46C1354E5FC1A63D9D5B91BB6B95C298D29267FAFA9FAADC31EB
4276D688354BC5F1CE123DC8A771310FBF6E3F04EEF4DDAEF048BA3AE91E22D2
F5A3F1302F20F35B3FE53F0288488FD9DF63FC20CEB298993B0CB66B2BC184BA
D23950B28C80497E259F4634C7DF6BD90841CB0C6AD90F780EFC2FEA24988396
DF3B2EF0169CAD7E8D1F0D615CBD7F3E302E4430D8AF79983D51712AA64D933D
D82E32144FAC0F0E34F1D0ECA423C805F77FCC4ED59E641B30C4AEB214FDB8FB
2B5595BA0B6B4429107C82353C2086E551C702935BB5111089F167B793D62346
59D3409002CAE1C90459BD22093A222AF420AE94A31BA88B6EC44292E1044905
1823F23F527DA1D5806DDB55D54CF0086FDEE6B7CB2EADC49766F44593DF897F
CDF738AB415B034B567F367CA2E2A8AB4936EA7B2141E79749FBBDDA118FCF6B
4397EA7512A84CABADE67D39E638F0EC679E1C63E8243807390B2D12C8441935
6EA54524CF9F0BD77C9459D61FC212A9A03F9BC4CEF9E04B51A36AAD43975ABF
F9D5FE2BD1B4CF419D4E5E8D74463FFCBA6F6A16C6AC2AD453E6B3AAA9C3299C
1327087A34FFB5F7B1FF17874AA7CC620939F3BA8AA5ABC5427108BCB004707C
AD347208550D08E577A77801A1136DC7199E57D08320BBD1C8B50B510D20B331
16E3BE8832FD5C053450619018A6C954ADBA8B5989A7379BD912296E6AA3D7FE
399A8E57839D2B36186EB03E4293B28E3223FB621E3963E8A9EF7165583B1AE0
9C3F12BAA82365202F06E30AAAA7D87D8EAC69E3C8B77D780EF389B8367EC465
A4E5FD49AB7955B7A0C9770887DA7B5A12323956582F7E1BE1E5AB54DA1A6F33
2BBB71BAF3F8354E4A92CE207585140ACACCFE2E33C88E99FCFC1CF940705E98
D8BCA98DC1028C98A0BA0B13783218D83B3FE32871EB3B517ED7A4FBCEADA219
4F7BCF7AAE569CEF156BEC782E44657D693AE72F666D681A4FA8B2477893175F
3008EEF552FCF02396A4B5F518445A66CE9C98832B62DA6AB4EB2C6175EC6B08
F2A0B3374650DBA970A8893D25DCBEDF51A78FBEEB85E4A31E174DA9330491EE
2EAD0AE6BC9EE8C564C932D2853045D5A283D7A2C7CAA60C3A169EF903A2B7E6
B23B1DDA74A819B97A3F23EDFB82C88901DD8807A21C3EC88A2E0976C2C2C711
F0E82BBC208850A78671B463909499E455D87412DECC667F8DB576258F9DE448
9D1EA23BF95C4A3A8932F7D47100FF8A7D4BDE1BC0D26FA351A188D28F5A8F45
B9E3C5AFC31A41ED57E3277A3233CB439446AF333242F316A00A621DBCBB84ED
8748CF6F3C1B32CF296B055401F202010A82A04D099A3191836A0EB4505FB3D9
03F370CC97A75EB1286BF813C7D8D977FA3A83C0B30298037AB5D5AFFF833C4D
59C1941E1776D068039B663EDF0EDA6DA2414F34F3F8539D22DA488D2E559E42
8C90D30E716DD99709F634C2D6DDD254E7E2AB3799469000B23C8E5B1D5724F9
99161C492A4DB92148C20F8F1937214062CDB5F5D36768699442FA8DAA11B85B
1B6F95770B364CF19DEA920A1DED65833D946381442386CA175C6B403D4867E3
6489B8E9C2DC1DC7E2C50B9C39B371059B93A634A4A8C7545B9B85783186FE82
3E233878108BDA98CECD5A4DA3117A3AF53D837D6F5F4D766669D56F6579693C
B6D02BD0D6E6BCDF24E1316AD87F45C6CC6DF8B8952E1AB44B840A52D42A29D3
8E44B6EB94B61DB0E640A1BFB8817CEBB4AF797B3503F6B4CA4588D5430DD994
3FA6EE299A4FD87E62851B56353CE9DCF31ECA018225773B359FBC14A95263B2
BC961B806063B735900768E75D440300F0BB4896F19BBB484DDA6371DFFA6222
F88F0886C7F8848E96BD4452F7909571CD4F5B063685528C3842B0C5AEEFE87D
F030C54E6609CBF4A5DC01AD6F3500F327B50EB05EE468DB4B5C3DDA2A8BF0D9
878CB87C82F9B1263614FC767C4009D7EE630434645AD290F47482AB1E4868B8
F694FF3A7ABCDB26BC852F5DE03B3D0A4233EE942AB48B47115BA1F4CEA6F23E
7D025234B7C3DD2F5898217F5A2B9FF8545C3BA182014CF26B393DDCF887B705
F6FF3C065774C96A7C7E77FBFB92183A182F9A56C4A9F4086448517D0A8F8748
06B28DD649CB35D90E6345B12F46BF364559440CE6FB005A43A0861A9033ED76
B763A8DB61F8E51604738285C8AF5812C45EE88C7CC13EDFFEE6B58E1EA5EF82
37CA9D177321F9F6B14AF21276B0F2BA22F06166025BB984A519FCED4498E4A4
CD61BDDA5F652FA45F51C97073905D5F48F6F789FF4E73AD9F901D26B74D3107
2495E724E633F2433A5ED9413970F91DBF8F60B43AADAFC1AC17B04381C67543
27FA7C65AEAC1A283E9D121141AFF247D80A42CEB4EC7A6BDE7A10B32CE40AA1
DCE9A34E92E3925484E3FA45344C7FD3D4D3A68B7F82BDF0069858293901A027
3116E89395A49AB5121BE9BB7F2BC65420878D644F5986795F8FB41731AFD808
8E77FA472686B200B23FCE6AC13FAE056EA1B304C5FA72E94A40DB786E290974
F9FA28FC998BBA0706D024C4B4DD3F02A2428BBA8209D50F647728F58AFB5CE3
F8E83CB17C4F257028C2BD74CBD41DFF5CB88D0BDCBB4DB843CC88902F9850B1
E071372B6BCF391E58BF827DCBDC8D35501E042169E60B4CBF586E6627B5968B
5BC6C000D8B172D635242F0D9CC02F1BED5F60F5C9977D820E70CDDC586739AB
4630018BE647C048D9204778226D706C54A2C9CD673EB39D7B945857632E23B0
12393144D56BE47E5A26B4280C0E01296A4C3B457A2A0E5005D5FE3AD5A37905
72F045B32289A2AE66CC44A1C13FB8BBD4E182AA055BAE26B394E8356F6C295B
3A746BF7C32696272152D8A2F9B4BE5A76DAF30053CE655A7C984B6BB390F126
7A492BB8EF96B9D0B8AD794FC37229A534DDDB4A6B5DB2D0FF6FA73D9595C826
F333231AA99F9D731A3BA0260A571B4377AD4768FBEBDFCF6B49F09839B935B1
F2A512F66105F277E5B6745FF4A5CB0EE90FA42E152943F95DEC2461F4B71B70
28415CCED34DB25B1C87ABBB92F6F62B5E1A22FE803AFB2171FE5A3E58B2FB78
17577685A5117747BF9CCB78F9F8A3F5D44459BF81997F9E7E77071A3A1138EA
6A07CE358D979C7BCF0215BCA4082D769503EADAB83A4D8C332E2221AF8F6F4A
4954501CB81113D2E892576552117FE414336D3F93A306F062529283D1CFE461
6B871C7AFACD58F93FCD83DCF3EF58FE4A6ED17FD9F40D12C0D6DDD6E89A3BA6
468B6322EF1EDABA7328C656F8349C249464D3D477C052773C2829755C85E888
63A68A20C7E32793E2DD54B41C78138AB27DF1ACF84A706783A9D304EB9F5BF0
6C0DC121F56BFA1D3D6C06AF094626764517629855E0D8AABD78C0F998B96AB3
E3E182E29B819FD861E52B04E00C0AA61C6F8B4D4D32F2F7C002945F2928A218
DA7B66F8C2A116FC934705542C841542BC1FDB26DBE389CED19670B5EC43D3EC
315817DD65934A6057B1351BF5739DB538E698716C9F052D6C66D3FAEE0166AD
E5F16BE5F1CCA2A35A77ED95A850AB40148468011D4C9AED4E13EEAED7C32A26
A141370CA486620AADDBCF844B487004DD8B31C635E9C897B23FC7B2DAFF6236
CD773386E362EC7AD86C68FE648FF1F57DAC9EFBDAA60B1ACC4627E104C4D39E
8D2AA2DF53F6E853C7037FBB63DB74A5D79874B30B4D4CE7F52144B2D4AA1338
51EC30082831A288160FDA3CCA6BC0754BAD59DF4558D2D608FAF16668DAEAC0
8014622E98E6B2E528F9898DAF77BFAF6D425FD2DDF96B85CDD344748ED15C9F
359968E28BC6A05471D5CB6E487773BD5D654BC8C65B80932130021597309113
785DDDB57372105F841A259EF699DB0CD08D81478BA57338A8CDBECFBF3630C9
01B119FD2A9E94E2DD99CF4DAD6BE727FC0F2E650741BC21A839C49703BC1322
D1F2C585032B4C548E3C0112562503832AB107A179CB30F3FDE24B51F1D8D191
C796157A282D8B46BED35979540555CE0197D9030C7F326A042AFD3105DC6116
92793929CC3D419262481870D2C0207AFE2AC4355EDD30E62A1FF4A14E4AEA17
08D1BEA397E35C7F91ACC5982763EFA34A171A446EAA91488B86B6A05134D14D
0B4E7DDC42E3039E13DB24C03C036D6D31BE6393730E9182A7E9846B0C9C8DBD
ED5E88E93AAA4F12C642D0F5B9E942A2D8F6F358A5ED8D59A573546B97FE15F6
40911E342A125982936B54E14E7CE1C7FCD757C04C263AA2A4A08D7E08055E5B
922B2D30B9E716D79199A4028F1AF8776256C0E934F6A011C904DF023342C9FC
75F522C40645058A7E9FA375989D4F59B995912980707299900AE4F349771B17
DBE1B7F83053B14EC4BA6D11343AD3B5D2A864498651C5705B1B19F1AD1D39C8
74E4C934D42A9179BEB917DB3A3FA128E6151BFE6C5386EBFC169C15FCFDB19E
6844A301AAE7286BFCDAB3C435A41BA366ED709A0C2579ECFBCFB7E7721E07C9
503B49A36EEF3F6E157210A3A46A4A30114F032BA029D8207CC825798DB0749A
09F2EE7F6697E406B507D64CFF45481896EDD20DAF7877F9B2740CD60A8AC940
4B71839F9CC255180832F10589F0FF9F1D002A4194A89B0BE1A6F2DE481625FF
8FD008BD4402918043BEDF77B840B2BE0B340A3F777A6B882F96B951F92E5D4E
51D532F29BCDCE7ACA7347A049AF60C860AA9D845C3EE9692A939C59ABDF0762
42CD2F7BF079E4557AEA1F9C18CF250FC5195ACD099E9DAEC1E9643545D179D9
7E7159C9710FD0AEAFCF6154A1055F5158F421692CBC815753145F3F9F1A713A
9F874ECEC5C8683B558AFED820387436E05EE2FBCEC40984544DB1A80833D083
1D0F1B5FF1501A1E6B6B36D3E621F2D9971412E29FBE30049247EC92CD5E3594
9F48A865039011AD4C5F22986EA0FC188FA30CB08809DEDF9D7B17BDC34F34DA
91337E5469B32C9ED1980C4CB5C1FE442BC91FD47E1BA93B0C8B4BF4C285A2D8
EEC6E4185F50D653FC3FA379FB4FA0AD9F83269A99D550366D6B24E38FC40779
C826C9E160AA06F3C0B6861BC85CE817BAF282AF59619638A93EC62A029471B6
078CFFD8AAEB3CFA3C61AAF973165EC8BB8D255A909C780017684ED4BBB38202
73858FBC0B31DCB01D1535DD82C80647CCF5A01C3298FA99C53536EDED25435C
B78EF0F4A8EA3D3ACFB075801F323729C9FF29E681FD7B0C080A5B57E5DC89FB
99AF0D7FA4DA1316C3C5279767142D132F62EF68C8C43A4C530DB3EA06EF9672
983138D713933F6763787CCBD73D1561064DA0D11E8B2EB840E1818F6F1CA783
41413C3602323512D5D98E29A6CE6EB31F175724D63372363E157B01E8B11BB0
2FB00762A522A3DF2BD0201D09029C0EAA200C1BB9070C7F6833CF29BC0C5CC4
28C967A1B412502AA76AC1FBE852B7993E98FE31DC936A3C71144E5291FA4017
E674E4E3F6B8002890F8CC80404B82804D1C0062CDA6EF5CD1062CB8415E4E38
5507F17AAE0E785079080243CDBCF22284D25B669F5D791A788C1F2BD93005AD
E59DF6C91A88861FF70CF100E2D4D7DA18647BA03560E06391BDE9A02514DB9B
144641A5B0FCCBC39DD554294996C46E69902090E3E51F1A1610F248492D0DC9
065A549730A059B4021CE25A2EE7EA03B31E40413C3602323512D5D98E29A6CE
6EB31F175724D6324F63CE8BFC7E107366EB901113730D86C49854C81AFCB416
88839B0C980422DA618CBFC03A7AA614FAD299B9386252EBA4C0622D2B0E8629
AC3D2BF93B07325DF94658D4FA336D2EDB9B6D48AFD2AFC82E953903FCA106EC
59180FA2C10BB2CA96A7BBAA2A7BE60CC0152340D3816E07B6D5F290842B8E7B
D5FFA88AED9D5E2C2985D8D9F77EFEBB1BFA166A088B8F232012896F12272752
37B58B75BB691459DCCCC211E44D10C0CE6B2EEAA9BD1235D67740E0685E046A
E1B99F5177F66C4A4B2D5FA122ED2B4170750D3891D7D3447483F0977A944BBF
51C1EB14732537C4EFAE92A0EC0ABD9DC217A467694AF23234F2BE45E5D0C0F7
D8416730AF4BE4FC931E965594E03F8DA17B22B0C55EB698ADDBB0F8ED15C971
AEF113C747B50F37F9E58752F5CEBDBCC73079BCB0785DAD1A291C4B6FC98CB1
12889DD3B16E3C2BF4191D7947DD3A946FDE551BEBA4F76A0AD5DFDBA6EC952A
4F37948B632635B1830E6C6A01AF6C1A517F86D2C6190AFE9B31BC89203B48A6
8E87D470463759F200DAA04B33D16DB6B31C523536378B8552DB87DD0D883AF6
0455753850A6375657D743DA2FF180A3D7E8EA917D96B6B1C07E4B12A77A5238
0A2230B8380F806B9B25AAA171D4ED6E451CD86F2FC565674E029201E4829028
29EDEB0D3936894DBD466D93723107EFFAA50DC64C2AF35A5470DAFB4CD9C730
D2A65FF7C57293CE73C4EBDDC79DBE2F3BF63F0687500249F6EF84B53657102B
0F94FBDD07575B385F038E86FAF242011E70880A8AEDA809E90BE4203C3F857F
7EDF0D21AC770E51AE71C71E6B7796B6B54F27FEB1D9F157F1B59F90EC4E7901
33AA578C8AF018B06D7B9F5E1CC7D7DF451636E19BC9CEA795AF21EF3258E523
8D15F447A1AAF89F14D3B913E320F9F732DF9D07CDD357005026C6F438FA558B
BEF71C2FE003573A03979A10FE8BD986C5DB554403EC5566D6D4B270A06BA454
296EC17A8FEDD2727A88730D6AE8D68D1D5B530C884868B786877B874D5C47B6
AF1DA4DF3CE3826A8648A74D83D12EB45554442C289B000983EE6FC981248775
8BEC50CE0C7C16678685CA35DA36AB230E3D91EDC1384F92AEFFB951482D01FF
A68E2C22A6A080AA60BCA9D5851CF3203E8B4D807D21C17A3DADA085369937EC
131E405546F42C88469C8FE0976D5F3C82542C5E344F803547170067B51D0F79
37C81FB964E824A7C9994B56C119FA5C3274FEAAE8F24B2C29CFDDA52C2D3958
D6DF5D860AB55E7F75E7F3BF203D3F45FB77524B0DDEA8B0BF636BAA4AD81F5E
73A65357A25EB2C2005DDD22E10544E2874E044BDDD560DB9DFD13A3FA61E6E1
44A976DEC5FC534505568E6AA8432208B9DA7ABD1170940C4715B9C30C5DB5F8
B44339674AA6FA2A939FAF9678A0A7A4BF1FD44339B8103E2C76D4ADB2D5A00A
022389EE4DD2BA3E6F326450295A39A7FD55D42E3F4F5A18E1AE05EFEA5DE1E0
7151FBD8B3F065B1B3798422CC6F434D3202BA6614AFA27170645DAA0140101A
9A40E476682F3562BFF48856CE35E812EDB26DB2FF8A84A40B5A350842C0954D
9632ED2ED8951A63D5A953F7474830DDE1B478B2530AE44ABF5D43BA2475448C
B5643500AAEACF1625BDF902DB051E78C8AD0B306D64E334D0E14E7FFCD2D36C
DDEA1FB14C1DE70E523448CF15908F4605009C30BE1A9DD232D2D929CA2E2EC8
AFB8FDDCA4E41F4FABA550E7E786E25585FBD0AD281241C08D4C228867305F11
524B436AD0F239D3F4508E62CDE6CE98AD14C17D7BB7A7D77152E29A7D3FF5E1
45899750C5B72C94F2F5EAA7B6E8D8E47438FA94AF22EF09D42D79D347EDE84D
4557533D597A14946E3362CBD90F4640F77918F9B32A20DB55BCE3428ADBF0D5
346EAE50AAC812931D8EAF14E1A73A84C0EA98D9EE0924FD85090B7AB1239D44
7DBA100F5F9066A83307EA9F2C47F76F8A6586728FE7387DF5DBF74867D3A319
E0693250525D9151742EB2DA48144E8BBE89E535D63A11AFE18E772A42860D06
2A98F6E74165CB01F8544B5FDC477D1C8626C7BA5C66E694D039A732D48F61C0
7F92C8B8CD3CFE1ED5F7E31EA89A855F202E6DA82A2BD69D6A9CDC9B8E1A78D6
3EA03F8DCC573A03610B2F3EF9F080C1D7AE472D0F4576E1DB539DCE840B377D
7B95BA58AB1BDC1B8860988EA1593D735684BA3BDA79E30E021A548B042A5518
FCCE695CDDC1EE6D81C80913E4F135AF77320C9E190500739E33102E24E32695
CFBD6E2EBB878201749284053CF3288767BF3D76702F6E87D98ECD8BDC61D1F7
44D3FA650CFCD0835D575CF88D21ADE5FFF141D20AF372B517A89E4984888738
A6FF09F99A5AD46D82E5435DC6CF9F3B0F6CC6E93E5C94803EFEA988E08FC724
3DDD20DF908D4E2AB83ADEBE63B4475E5F8DEDB71E965594EF59AF2FF9ECA6E0
2B37B2B3F2579D7AEE3D719B0CB02451F181BECDF4C823887A3D3F97ACF07FE6
7657D992F67D59834740F0018D3D91AF16E7A60CCD
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C2D74449CAC20DBDDD3380C5439DCB36E82A5A
72E24259E976632937402347FE0E201D60308E19DEA3902F3C361CBED5CFF784
282EF746A5C778F2C04047A5CBDB888C84AD3CF84D54A2CAB96E83FFA40604A0
1EC8E8810CCF5AFC45FD42ACE7AF59B50DC33F7A65D806A3FD22988D44043964
7B2BA0C7BC5A9BAA7896608E7C20CFA05F71EE0B7C7B67D8C7AEF4721E7BB6D8
AFFDC6C60F4F30BDAD96F4316349A0C9B26D646AE3703B6892B61D3CB4AB4187
842AEFF43B202FB9C5CFBABEDDC1257ACE67CBE6928F02D22F3D0EC630CFA02C
0F9C4E60E3A54474E96780A532F3F6B1F8FF071E03D1BB27C6A591AAF6BEBA12
81240CC0667E2ED796A8D6BC9CE98F2B71D9862113C69F0ABD2C8E0CD7C39008
6369D35D3E5A083C3E82E9BC568943DE1A68599E2F3EF62EA528B388FB28E80F
116D6062165B9EE0BA0C870AB44BB1683934B4D4429450A21C9EA0419C3A9D9E
4014CC17E17E0CA2B89117411197AA294D99144EF52364BBEF00969C9FA34784
61D1319CF4B7FFAA33E67189A63DFEBB88CCFE63251C667912F605356788B310
59712DFECD2A63DDEA51BCC61B14C231ECBC73C511681AD69F4B470F2ECB11C3
5BA9D7B664BEA7448A6B067FE9BCAA3B24E051FE87B31B6B7BB613ED01CA4D65
F79C7CE47DAD329C8020A4D71BE0F7AACCB3BE5EF63B1C4E79B49BED733F52A5
3D468179AC6BA242538EC564F080D8F2D112116C9B9732C4AF86476579DF658A
C6B29DFE3FED2EF67B28A1DD29D10C7BEEDAE714ACF1277D793D674E60F47D9F
89D1C1D46AF5304326F7002E83160972074FB6F90585C75CD51EDB22B4AA3644
E0B7B8CB2A919122800171B474419D914DDFDEFA36EDF85949E44024E035D446
8AE5C73036F3704B16222179BC125FB2A341ED546BB25A11C28B5846B2474652
31691DD7E1FA97D2920568999A59AD14685C049D0ADFE3ABFD04852B9606E8E0
74B6742A1847C136340CD545E53D67DC709556101053958976A09D4D8F15D141
6F278BF7C5416109CCEFEC324FD2DF976CFC21F029256926C39829DC8A2ABDFC
584BBBC8AB8932CBFDFB9FBE0269B68A357DDA4E9A4396479FD092AA676650FF
0BDE0BF634E2E96A083378107344FDEC2A1324ED781467AFD9C6B8612064088F
CC4B30D4DFB3EB1E58EC97A5F617E7831D0309FC06C6CE580564F6B90D2D374D
18181410FB6167E2955AC798BB373A6F933FA2EA68EF9D5BCD4C4FB87316BC32
7ABA5D5F5FF14BFAABDAAFF2259E1A12F791CF64CF7BD79623962FB0309E6E84
391E09FE53FAA4CD9E8C779273D47755CAB6FFF04078266A6A1133D8151A000D
95E13EEBAD4F215628C30F1A5B6C282CD2B7284B83AFD2E33DEA0218424EB16D
60F1DD6EAAA05069536268C92FB0729C26A6619E55124C58E6471FC04A203EBD
502D6C566B0425564CBBB7D252F2854291E6187C1796B0B28917D4D32AABE30A
EEB73BF979B76603510EB77DADC3A90F91F2AF4A64AE823BA1F14749B68E2B1C
F93711A744226081131E105AD89529EBBCBA731385F8462D0CDA1D4800C7450D
833CC54309BB9A7B79C4E91724F312EAE87FBB14725E4813E05782683C877C7E
C4C86D6FD37C58A577527F476AD6E7850D0ECBA5FFA3879BA056B0788BED7C11
B404A2CD1093FF6A0468C6D06CC75138727B5095BACD95228E9F1EC81341C19A
B6FB7E261BB4FDB9224466CBFB46E98286E8204C04CAC5ADA41B17CF151CFA0E
4C201664D2D13D77711F2B0ECD5C73ADBDA46E862AAEBB04D578FAD4737E69DF
DD49FDAE75FCDEFF3F08E2A73F0204CBD6CA094B6FEA7C1D4EAD89507E04EFB9
6476A3B4A2511E267B16645FFDB0B1EEC921620E668D20A9C04B43955C060044
982540AA5A754D1EA8407725FF461106D388E2C0DA907A17868AACF3229C176F
C26BFBE255AD659AAABDAA73D54689812279C95FB7A4F7E840DD53D8CBC061A4
4DE0154738DE06D361E0D9154FD2BB8D1725D1225488A9B780043DFE114D2536
479E7D64EEB55093C35B2D84985090CA164DF0AAE5DF997D62692BA00EAAA554
E64ABF5421FD338F17B562E955B4EB2C6231A4A81BF6562ECE87586E03C99C4F
EC726E5D5EB56519EE8B3A333B63D44EF29D334A64C61964CEF3EC1911DA542E
1CB8C3EE8569817F00EACC5F0A844C6A8780D69E25CB2C0BB3B0C945159998A4
AA4E2F34435E7D9E558D3F664D554AD0EC1866268A8C63765C5880511A27D667
AE834A96925698006601802F57A3F2E2E240900C2AC7BDEF8FB9D4574698BC8D
4E374DAD4D67659C31F4F6F7DECB5E57E0C7B6EB1C817BBAE8656640B9FD8DD7
D1F131D312C2CF747D35FB85D8915094EDB97DF199549D54852AA8217E48B2B0
BAB6E1054D332ECD422011A3968D9FCAC28875B34AB842FE9DF1F980D05D8533
158A7D1941871D0016ED45ECF617C4718C0547FD9B19E74D0E18F6908E452806
5B1D4959D18974C288F493E8B146CED8AED058C5021B5621C9A52A0E0884479E
F4ECCE39B566F1E10697347FDA8354E5B65B92A6310EB3C3F577F2A16188D243
15F4FA30CDFC5AB855D56C6B1D3BE08AAFE98B38400938D35AE9EEE8D0A68AD0
556A281D166D457F08EFCF8B9B222D0C72AE259AD5D13B6537F6890BF500B4C9
2991584BB7997B693AFECFB56A60D19EFED7D657893795AC338C57A05C4E5D56
A4DDC4681B41A2536CD43DC8BD297A515FE2884433EF7B5209CCA57B423E4E35
05A4903919EB6C5635C67F93531283C6275E3B1E2C1F59B4EB9149B3472AAB59
12493829A9EF5B253DDAEBC5CE6923ADB7239A40283186D67327CD487B978FD5
0D9BCA2508355C5D02919B918511D079AE85F0F152088362E431D578EC35244D
8AE9FFF3F592BB136F41F11AFA8CC986D798BD903794DEB838C8B360EBFF3824
770C10E231141A7022460375FF69B34D18E0EC343274DA68CD751A72052D4FD9
83EB8C149E08183A09C60CDF17E6D6E4E78CB9D61F3FD30E78D7EE3B6BC8D97A
90DD4C972B69C05585BD438731D0DA714F403173D9F296B3DD186F8C3F8658C9
1B59C58B51B97C4CF7213C1D22AB8C5F24DCDE8F5BD88CC2F21D20EF72C6AF95
3BF4821182D7A3485EB66391B6C8D23FB4ADECE4ADDF86B859B45AC35F6A24C6
3CDE613C9A788FB97E6882D804A6EEA79B7034C1128484ADB7FA41228D7624D6
113A4313C58D9F29B540741736A2973F521A9E6EF90FCF6163A409D01F675623
732B3A669C3098666CDFB11F52CD207CB7393B5C193832EA480EE2879F3C8456
16C84939898C09C04174BAEF8D03D2DB29D0B08C51C82EB6243433C3E79DEF18
F9A1718E46EDED17CF6418C4CA1E6D3F2F99CAB5906B761B5DFBBA2DA1745E4F
1EACB4D6A50538653A4591C923F2C85E2222651F1241C6E2B89D5A96BB6DADF8
78EF8FF5E5DF6314E08620C282FE1094CC0EA2676BA81D5448A7880542E4C62B
2ECAE693F327D25D98C9AD193F94381CC27D5EAEE3F282ACF4715E5D2780FD3B
DDC55D898644B39AADB65565788B7370527464C55762EC46306800B756F8BBD5
7B97F5CD56CB80CC88111C9E1CC5A95D86E6627A16888B053D6CBC34EC86D2CA
91E32214DD857E80C15841C8C0A3C14544F068343D3ECC39B6820E33508182CD
C0FC03C091CEC66A50A9349FB3B1C2A695930A1980999D4CD41E0B290F4767CC
576F85D2ED391BA053E401E1C244B7C5E0DCD6D6D2C4E3CF6589E9D3E6301F8D
9F0BFA7CA381B2031371BA1FA319D8FDF0131FA793AE32CC056F4621F4C29048
731516E16076F3482F71DC669B52024643F4B76AB7BF41CDB0A2CFB2CFF7A3E0
22256EDFC9D767EAD0681E616D4350FA55A7F6C79275EFE825A63819D0573BAC
967DB05685E1E2031A7EA3B7A971E4D7C842CFC3F4C56D472FCFB5C942F5517F
AD1909D38C43FC024E4521C755D34B49654CA7AC01EC0550084F43CD4495ED0F
74F86AD1E5960BCC178CA91E649ABCC49E4BA0CEA8B3ED641A48ED761A7E9A48
53CFBC7243882A62B9DD406B9079950669763106C9D8B16D0AAC8815FE88A4DD
2AB665537FEBACD5BC7C774D53CC63B57F7C9F1443CAEE609B63A22ADF574D31
4348DD5A81B96A24B40D4E73AC4B4C77CD70726187BF1AF3B82278DC6ABDA774
DBEF0E112CC860A42D5FB50529EA6CE284EDCD95DEBB3F47185DCE6F433F2277
1880DBCE0DEC48F2EAC4C6B981069CFC0057FA5A3C638EFF6CA83C3702CC4241
F2E8E129216035F189CE7F8679AB7F6989B76A91534C2598F051AF6F87B99361
34F423CCB9B6735E5BB12E61F1C47C4E740A606A92EC75A314AD06EF339B64B8
E7DE46FB6609E8A7AEB011E1066195331B09E735DA73C0682EA3800CC8AD97D8
50987CBDC0981C25E3C081E278A3AB9359A878A64E913DD2482AADA5F7692E9C
F8CA1ED23207470711B42AFEBC63103C7DBC88D99DA041CA7716779D3C541DC2
C630A67197666EF6308772F76681769749CBBAAA03FC80D55C1EEC853C13A147
9EFBDCFDB925E45B3F17BE776D928EBE31B6B55069644487B786A6AA482D8919
918AFF871534A48FAD31A981655ADE7177F5966ECD7319CC2ECC6B689463693D
20446633CB481DC110FC14AAB8E9264F5EE99A07A9F37C84D143DEDCFB27AD76
3C746E1814DAF0701F78CDDF9BFF0F7D37498A6E2F8AC2E4CE7FF33F6ADF54A8
0D32A6E6302E20A88B91EAC2D1F8961FBBD25608E19C66AC18D5E9C36515B2BD
D48481B0B8843277A8D55A18DF8CEE4B9E59CE2420515A0042EF7592DEE52CB8
0F32C0C6C59A860FB262168EBB9F88CE3EDA258CBA3DC029938FA16F33A24555
973303D8CF202979524860967DD36E3071F631A523CDEF3329DA1D2427F462E1
B328D9C760DE72B50F3E8A04A6D73FD8F2419CA77C367F92A58351CA80AB4E92
0481716E9E5301A9C483A41C464DEA83B77229E55CC6DB71752DD0DEACAE196E
B3927A7C193996E8212446E70A536F16AC52A07642EB0FCCDFEDE4884A09C190
EDF2EFB4D637C3A90F4945393B60449303B1C24D5916E2A6F58558CA274E9D40
717DEA9D0B62800559760771873D48F813C093D52026755C64BB9117411197AA
294D99144EF52364BBEF00969C9FA35F2CF3FACDBC455F5007030A8DC866FAF4
CCC70AA8B4D7A79577580F5799C825BD4B9786473E2C20F6F8CA94AF9B1E97A6
6B2E9B937B85A69977BA8352BB68ECCA72B4D8C4C44741A535D965E48F0F4AD1
14076E79FD9BA68B2093700FC74B0439374F251F8BEF1154F701F3FDA285D23A
361ECCC811521394472DEA699E2EDB0BC281849C352741C980265570A42113C8
3ED727B5BFC009FE384D29F8C71C37CA3E7472AABFA16C8AC88C292CD50D2293
2E8D5823D50EB25F6836C91B80D273A703DB7B15DEDC58B418A416E8EE8993FE
E04F4EF5B1F3E105BBE24FBBE46728AD90E833F397246EA4C44A12EF33A54D23
AB5C946B3FFAEBF3970D6180CE16EBE8021E7A49B60F42644E97A63FBB1D5283
638A1D4611412ECF92AD5331C41D62FA4082C61FCB9E7659E230D79F8B8C4F7F
1339590EC26B2653FBCA66BBF1E695951C726032A1B619D061FF15F22DE6C924
3D2CAAA5ABF67ABEE3A6F53110EE19746EF950B9189A72FA9D81252C72C2E592
DA2BE2A7A2A1B8421E1C7672AB569D4419E7069A9E7E1E23FCDE7FAB4EE9BB26
12B1FD22BD8763C341E28C989F856CA5BADCD03553A5965077E836DBD3B89455
CA9BFE2FE8ED26203A2B353C3C9F8DD88EC56BBEF2B917A8E8E67A32425B32DB
025CC66647AEABAC0AC6A605C61E4920319CB934901AA2D80ADE6639DE6E9C8E
81AE5C0DA212DEFFA85E2C93AB0EB50ECDF3BBA92158C3CD36EE89D88A6AE6A0
70411208FBC3926818EA72F20358E40044BA7B82BEACCD1049EE3C45863C77E2
B117E7D3C26BEE1B2BAB189AF46FDA4F46E253AE65D3FAF1703E3AA0E1EA27C9
AE258A3823E734AAC3759C10298C9CD7F72DC87B7DD2D3F935E7805075C913C4
75B2B6924D04D56650578358B43FB42339A40DB40E44CFC4A423BCE1E4E7A3D3
9BA992FBA53674987267180A888AE97ABB152C60E40979EC324DAE07EEDA4D10
42BE0DB0311AAD05E48B2C312C503C705DFE721577703E5588268DAA86547889
8C645295BA856FADCECED92235FEA97BC469309EDA85DEE4195BADF946CD7C05
F0C4B63DC1C10E03B9D34C6727AACF122D4C4CB7B3EA0878BECA4DDA1739A445
6E73347CC33187501BEA703A23B7AAF7BC504565A426421AB1F43F6B553CB130
D84AB9618A4CA77BC722FA601A6123A48DB0356F14E557CA811C2667B987296F
C13CCBB15360E8F578B756E0CBFD02AA25E4E527F43FC974B43AC1FA919F23A2
F2CF7A16BA18DF3377A95B34BE9F30BE03B0B8FE5F8EA006251B9E33FFEBB1B8
443844BEFB1931DD7E2CE0E540A398AA83F571643D6644CA36C77463E1D9D374
179B3272DB9F483B4E3E83CC2024B248D5F6D4027FDD43242FD0C11C69E5C568
E7158FBD49E97F6C22EC02CE64CE9F9DBE52947CAF49A78B6340D325073CFAC9
39FDF750317DE1FBEC467D089738DDD539BF6423C688F32BFA5256F93585A43D
FF3C144B5C8A1192FF5FEF8BF68D616695ACD14B3594882B491EBB822BF67E9F
DF6FF3A0842C93510237B819027F631EE8954B2CB6DAD323811A946008743118
F5F9852614175E1C96EC8D2C2382F99AC70E64D36D236DC6CB62103267713265
6D15736C339C5BFB43AF47577453FF94AE623A5B3DF8D3666728FD0CDF7BF8C6
BAFEFADFB285A858C229DC076EF963EA3015DFDB2A56BAB31A5EA4CEAF8B3190
EB54F16863203613AAAD505CCA785EE521B5D5394629F6C28E0385E17E680AD5
53E283775875126F296AC875D2A7A9362E8EDD114145042751E6A5DAFD97118B
EC1F01B563FB3A21150ECB02E34FB17C301764186393AF5DF32ECB811357F69C
CACACF897A7A1B155C720BFFC5B157733811FE1F00D6221A3F0677E7155A03A5
5E587409D05418124E11ABFAF29103ABF419D2F80488457D11B430BD40ABD4B9
459C4AAD0A5CD393B69534D6E2FD5FB7D63FDF71131FFF47E4533DA66CD99164
0317676F0ED1572C623DA41AFB80699B22545368AF6CEFD61643C263B72521D7
8213984E0E177E9C7360E93C5A09A5933B842487F80F4DEE34DCE95E75ABA3A8
5139790DAC9FD9600D2FC177544A6C425CABE8D56D747D1F82D049A7D97AF35C
D7820B221FE0B71A0CA584024C9645755996CC5620D4500F7D6E49783E9FC958
D3954BB4737612EB3A63289B557663D53DE4C578F6993FC10789AC6FA67A3299
62DAF28A240D66F004AD731FB19DD0D9F5CE5A972BB08A2DA52D5BD2F0B2A939
C42476B611F1F52A0406F907821F105AAD8F008A01ECC02E7933E19CDA965A89
738ADF9B5AAE73A04E1194CDEBD673BD2C25E906446EE98C929418AB684A92B4
187DBA74B626F82379048B15D6C38490F7C5C62DF833DB9BF71445C13667865B
D39440DFBEAB1696E0E2C1186D0798C1C3A319CBA04421D95007818B0A158B78
95BB24BFCF21A45C95F7E64231EEC00DDEFF8CEB2BF67DAC531B53256C34A521
1FAE935F1EE1E6A80F3AF65AE92A9089683DCE3EC5E6EC689DE88FB24FB52C49
2BD8F7DA28DE71D625BC1480D494B8CDE68DCE3679E2524F1346CBA9E958A86D
B67F479D8DBBDCE0043AFA55C6AB9E1895E036BA65DE15BF69090B75D90A7F87
B1A8BCF98679477C99FD90ADEF904B78C9BCEE8324C98DB2C9164F52F31EC79E
CF1C6DDE2E45FF52188FCA5ED5CC9D1A8CF9027A5F84AE6F93F1BBA96FC7F552
9206548AC78713D07238DCF799AF1E832485E5028A6DA869DDE0468D6E268DF9
B2C4DF56EB8875677A3C0E43DFC2589FEDFB3036079F4F10ADC8CA8FAF5F5DA7
088992959FD536274984B73FD1A0039F86E8489003F84951DCB6A80B9BFC4919
F2483E9868E0D59E613B99092C8C086C92636EF8C890D69230D0C80EF1256980
4A23475AE2BBF6DF3F8C21D9CC04E187BE53F8FED4F33633BA03A4851666ED90
4CD82CC3FA28DA344B632A658418710D37490767CC04960E6059F6BE26EBF8CE
5452C6167A41DFC3EA7FA4713C65620D09F8EFFE7766EDBD7CE06A64C11F7415
D2DE0197C5D6AD69FA6B299BF0C52073450E1D015EF3FBB2E6D45D87AF79C754
F223D3795482F7EF558C8B439F809D15DA7739FAB5D8E03BD8F283FB6832C237
BFF562095F81BF4684EE4D0ACDE9CCEFF38357C8ED9D7003F4C29E1240F90533
E281EEEDCC3F5E4DE80BCF6D8C307DD211433C8276293FAEBC789B1F6DF42411
B53DCA6EDCDE5659639825AC78602AD07851D8FE9BCA94F330816F33A524C8B3
74AACE6A19F61D91E38DF8E1473103305C5A43ED712BF53C4AE44B7870D343DF
102BE43CD5058C3BD0263C68658D4143055A7ACDAF5C195B4D4014AE118F07B7
C4CD0C68004FBBD05EAB603FD46909A3D892F83A2264C4FB2B8ABD47B8D37E3C
B1D5F4BC78BB3017EFB793B2A86828E3A556CD20AAC23DBD644F0B3F94722F0A
1B4D56F1127EC87639FCFDD2D0C3D928471C2065C639FCE1C3E453051446DB6A
C8045322CC1A97A9B09A3109294271780BBC6083B0267E52474998E3E6319EBA
B3D1D4F44B21AD51517BC04AB08EB03EF22105AE17B1F03D21129B5DEFC99AB5
04CB4FE1C4F7A53B8EC2FDC7614E23F7D32B79F7EFB34152914F040EA59ABB2C
76A6350FFDDB71BA80225FDEFE6E9ABE7B6415B64E2D49D8F1265517D9ACA052
6AAA65C66CFCC6ED8239419A867ADC08753733A94EE437ADD2B1F010484E86E0
B72FD23C4F60F3417D147D88DC59395A19DCF6C41EF3B0258ABB6A87D4C57E54
9D3DD9776FCED36FD33CF75390058175501A1493419F16DEE7887AA1DFC93138
9878410E86487E876D3A2E7E499D9D4104762FD19BA0526D38D2B885F94F5F40
1CE18E37E72D710F5E78D3661C1ED93665EEFC4B58E6CD01B59C73A14DBFB287
B7017F6AE0F5CEAEB33B073D9EDA2B181D5A6F82071BD5D814AA6BA7D13D182F
1FD33DCC71554DA8371698B3536CF6FC0B6002C8FA34E9CDD920B0F7E2C38F13
8EE0922FBDD3D7BFFC692EDB65FF7D35562BDD6DA3C2B41467B2EFE6358A83E9
D19DBE673E1D7C76577E34ABE80ECF2F5D6E13CF3E6FF29016204C9D6FDC7AF0
C1A9BEA45AD2998C6920F2BAF8CC84F36DE8F89E9E45939F6BFE0B3C411DEE77
42E6910BD6004EAB05E713C3C62B0853381B561B1DF15E36F3CA55BE5D1F91FF
BA4A232B68F8079219AA89F0F3B953077E9F3D4C2CB294E44392A8BC97A6EE9D
B3DB5196C537ED08172CD2FFCE0795A61E3665F5DAC374E9A17AB678E2109B5D
A84969D081742C56AF687063FDEA96D7A219808309BDC1C176E6909031B3B449
3AF8F6443208E5BAA9114C2825753B66C370B6EF2393B15EA8BC4D582059B0C3
CE52C3F11EF27F1C85D2D2F86B2B420E9D7325DEB5AC61AA451C29E535A2435C
3C00C5CA23DC0CEB40DC2ACA4777930A53702E62937C18838A430C60992C0D5C
C5090B71FD5D04C23C0C73641430D64D9D93C0454110A0F05EABE46C593BA22B
C17E73DEC03B775C6DB41E9274E4DAFE506762286E5F5AA0B73BE21C91DC891A
BB0F75E2101CB9B65106E140A1492D6F08906900399BC707F7B6433A233E09A7
514F41BB6502768B60981F6FCD12FAFE284231C3CDF7BAC10F74AB6593296A0F
0345D4D0841E71C41219563BADF2CCA50EBB691FE3A66334F85FAFB7D1EB08FD
AADCE219D41E2FAF4E6B6393343A1ADD11C84B79A6CCB1FF14094FEBC224574A
15296D35DF91D2428A27027374A41C9AE494AA74D5DA4F158E624C2437B78656
C620B1E6D5B8288CA707E7FA2C69204A4608398F72055FCCC3F5D98ECD3DCC13
EBA3049418E59C5418E30FB5DAF3EC66FA0B727FC6AE134C01819BE812383100
7EA742E85E9BA72134CCC83B6EF77480164AFC42453ED55CCBAEF1A5D87ABDB4
BA5CC79702807DD1402EE89A2D6D1BB7A2FFB0FFC63B7D9F12B2F4A61E66537C
09C7A5EB9FC04D479C6F4123EA812EBBBAC6B6F48D530BB0FEB3E7C62A41BD6A
201AB2E6F518890CFC9820CCC2FC665630B7008EA14C41EBA75D41C7B997E60A
DA11E534EA8D3FF88F5A0A4AA26F19F8340544FF0BC01589F86BC8F07B5C9A01
E53529C2FC2B6A1EA45B1E416388E2EA64FB6FE9ED851FBC932E136E957D964B
BCA3B24E090B54A955B49215ED238729BA9972B1C7AA6B2E0C46153DE956997D
20685466E067D971958F3D80A9E5F127BCF83A1DDB50E23253920D112AAB2211
BD76572C6F1E7DE759C6BC99788940F8ECCB6AF7ACD216131278E2868C847E21
917F8043CBFAD9A3BADDFC68DCCF67E1A8330DCABC26DC1B8FA3FE14E2B23356
9BFF15D659002EA83EA9F973E3F4E5F1A14EBF827DCA38CBF9A44C7739BD129B
AAD438E87189F2F6AE7C86F4EA099DEB2372CD51FBDCA1E23E47BCF2C96A9C58
E53950DB59E4322AB733A43967BBF036C87602A1A166AB1BB4A7E6344A0D4A83
134B1C53AF1802803BAF5597570A8C6B0B4A5E0FB7820B80ED11E59D700348A5
85D49827535E9EFEA0E011B813FC226A7F3FE390001B600BB327B726927DAA99
1CC21C4E3FFF97794144F0343368A9170BECE87FD5175421F440BB8106043B89
324AFE19A881799DEA617DFBC940A106827AB2618F74F1C4C1B88D66A61A47B1
A588E35DD715668BBC03B92FF441FC74C7773F68111CE4A4BEB5C0EDB1A574BB
7925D7A941014B105752CFDE450530DAC37F35F29CF3FAEECABD5306CE4B824F
02383FADCA785AE99A990B727C6C7020F14175225EFEA39202B05C78624A445A
EEC02EFF10D47E585D0ADDEC4F95C3A87E2035D5695E1B8D43FB421979DCB016
E5CA2765235F9A9F9BE313B1A5F23EAF1A32ECA307C440566D8413DBBD2EBA70
E63BB928977EEAD4E7CE6AF5644250CAB9845DB994F4426E5D273581A6D28444
44D82093FB03482A7AB8323B21D5808D636ADC789843A91F21C6772E26158DD2
269C55270BAE0FBB7520FE622C074734A1E2370C04836EB67AF788FDFF37ACDE
A67110CE092C31968B97E95B023F4168EDA727CF0DFC3ABE725F0FE01EBAF6D2
448297FCF8347448BE6E53709C51019EB4FED063631A83E7F544BFC3F91502FD
8CF7E8104EBBECEB0B630D6D01FAC6D4D861139650117E65776EAE08242FF836
0FA3D5762C29295E4316859122E7730C26A70C09FB28FF51657B8A929CD02CE2
69DB2D367E68EF2C3F555A3B98ED30070CE54B0FF3450A5DC23CCF67CA8BF1B1
274494E363BF0890FF5C1FBE24BF424BBB2D32079DD408226AEAA0C4DCB8DF16
CC66B0F52BFF29C668B8081D81891456B5C2A458062AE8985DF625EF5CC6B22E
DC09857D3E5F676DD05F584CCE1AC79CBE04511252844A19555227513555CEDF
1054341354A51AE479CD96B4F9C3CF1D39123EF1C1ECA9B83CE4473AF4229BF6
96B159AF031D2926ED0C9A92315083D991F49AF1FB5B7B7573816388541ED991
DC598699A43081A8F6B50A8BB53400B855E1847674FA971744DA02F7B7636A96
BFF33DCF1124A4E0DF06126E587E8F5ED4F38105B79952819B5FF425210978F6
869E3C1D26A3B34CFD7512748E3893178EBCAE7F5E1C2AF64EDD2073883AA16E
3DF718FCF9190B3B86C38960B5D418A3D4AE53CC978A06EE909DE8C5040FE630
E1FAFDB99DFF29348A9EE210F690C7CF1CD8CF6D0E1335A4058E25F6D9619B9B
C25500E0BBA7D524EE4C5B5C706FC45D40CFEC0BABA0250A5AB7CFFC1288DF89
BE3A55A7A6C770D4F7E864FD9B28DDCC2A5D4F1C948FD5F508EF79A6E58394BD
8317A93F1CB031F09CF2DFF49E3A9A25496738EA0E3A81267DE0DCF7155D2936
60ED7E91867553D12CA559E3D625B90802C3678DF44F20E718545C2F6F7E7EA4
526FBC44CBD12BB7515A4CCE0A21281D315563895972BEE88BBEE8E684AC1259
45B02F5E350BA327DF3F4F721BB71491777944CFC2D8E9B7C6A23C5EB43F03EC
45DE69B3911C0BB2E6E27D58BDBDF02AA83FC9C8C5076876ABF67E6D72C65F09
8EE928C73D0E6F2B209BA791971918903CEC0173AFEB695F8C92EB33721DD3B4
1058551019C4E123F08CAEDB4BB096DE59622A2EF791B46312F7CB19B8E6AB9C
78E669300402E5DB75B1683103305C5A43ED712AC5835A9F89E29A8E86BADF6F
6924B140920B73E76CA110B081B14581C6E968DAAAB2896FCFB745795C4D2C83
854EEA03A5D6704780155DE7E7B00A8B99E733AA64B524342EE3D97319A0009D
A311F4899F65E76D6828EC858922184260FB89D5A9EEAC9E6E45632E21D0C09F
9B73200BB2B7658DF687C9A775D9EA3C72674A561939FD243D7B63DC721E0041
BB3DDC3172FEA590380549E139F7ED906D39A70A2F3F1509F1D9C57BE8500B09
EB7F877FCBDD2BFA3DBF496A99DCC954BE39E51507B12ECDD92A44C0238049BF
932E05C2EED82EA1183B102B4387AB3AB61FF75B87EF6A13484D6EE3FC55A66D
646D83D4055B9A74338E0B37511CF3AB6B7EDBB237ED747AD16E7C39C336CF07
D050F04D4CA153663EFF8A63016F79C7D0E4655B651C251B9EB5A26DEF9EFA45
B44CC4377562BCFEC90CB608160740F68F4364E12D55C4EF5739C8802412EB75
60AFEACE72D47D75003B5DD518CA905BCE5758C39BAA69C7433BCBF6334A59D6
DEDB23B6D652E67D314595B0D4B10ADBA185A1AEFFF7E715CFB0FEE3C5642BD7
85177AB718101083E94631B8295834C8C3BAF1CCD31409871ABE597E0B54F69A
C8457AD087A193B7BA065478C8D27FAA68D7A5407E0BA263CECAF34FF58FCCAD
408D626238AA0D62613C595D1E9AA52AAD14BB8222997717B186472097BB7656
081ED5206F2827191B4CDE8CFD7E46B09110845142660F556F69906E2416B755
0D5216AF5B34121D0DE5936E270E3B2DB28DB5013126B6F2C95927C2B86F3EDC
61AD43FE9BC177C7DAC8DA44B2655D8FF830A3C5CA077D8042C15732284FA8C0
66B5436D54BC8294745379D6645D0908A9F5DE65F7AE355C2A57257ECC3DE440
AD490C5F12862DF943B06B1FEDAF188610CDD9FBBC56D7731B980EF3C793B89A
D3612894309F1DD34AE231826A96B840649848D40574931AA278F716A937653A
70499DA9BBE01D0385CCAA4076092B169861541E7FC713738E35732216736F12
E3E76D416DE4318230675D19DA63302657F3B8E1D9231EB1EFB3402C2A4583C1
07113414EA231376981947B80419C6552BC98F10E253F1A29E2A091C9B89611F
1678E6FA2F0747FA565252349D4E18738B957C21F9F65A1E0E99276392472EF7
838F4A3ECF064F5A123CB8C7A62FAB9DD62DD40022B4AB98C83EC2D3995C6C5A
645EF436498CFC3ED5156D12DE4A6E2D4D4862C26B1BDFD5E9ADEEC72918FDDB
C862112F1D90D9F62493B0CB7FEAFC9BAF90B7025D2E35ECC22CF2B6CD1F6858
AB0DE8DC472DE1C044AE0C6870CE71FB361CE8DE7FC8EDD79922578A095F71EF
4FB9E7BC9FCD5A9FEB562924278CF8D650060CC2923372C0A870FCD5E5FF36A7
D076155155214A256768C846557A983C753AAFDE5FB886582579C4C79A9FA526
3AD720200C8B45797E827062262A67530B2F73EEE1DE2A68B5B6105D8764CE91
13E10848498C341054EBD5FD116DE2BBD1C0E4878B80237C3338EDC66E14A05F
7429969E4E7A93AA0159E56104B09B71A9DE12DF6BA8E12A369E2B8947FD5F5F
057BA9CE343DC452615EF60DDB7E70F095A1D511491C5E77AA8FF8597B279B8F
D1B911FDBB4D30735E62DDAEA21C6E7B0C5230E9DE6E29C0B90BC60B67486D36
57B89940277D65733295C5061ABC597FCF12002F30135A05B8723FDA3E929B52
F207382364B1C62AE8311C43372F17FA84740B68AD9FEF4DDB7A1169F5A96C3F
D32EB202CB9CBA400A7FE6EE1551AFF52F20E24FAF645634CC66AEB964443EB7
D0F6C3883D195661CA3A1BBAEA7BCB4CE72EBE87991F755B2DBA4BD765F7A4F9
66BDDBC05078BD0C60DB82EC2453C76DA0E3EF221EE13C10CE461087B4688030
74D86EFA1D7CCD206638F69FFC139BB72D650B5F15AF4C6B62C52FE635D7DBE1
DEBA4603B10AF17646065E0FBDC820272D681B7584F215C6D1AF652E422F0F5D
E61514378539C64A60A92DAF8DDA4F790910BA6B864D93CBD317817EDCC17260
36E156CDC649D036DA3DF10FA75D40119013F43D9AEC9AEC5A51E00AC57C8E9D
B52541ADDBB9DDEFD18F912AD1238B5353DBAAFC70972862FBBBF11FC3780E63
0A24EFB520A6F60B505174A46C2A50F91AC088F0FC67D0A203C2C5F8EA79DFA2
CDC53267534F8E7AE523E0362AE977FED22B5D04F2E705895046040B5255F62B
D2B6A93C68B79E9026102990E062B04946B8CB0250E88073D2DCBA11371D7F84
6959F2A32FC5CD674B510C09A2BB479C57B9143F8C0213688E60C7653B0EDB2B
A4B97A09D1EE0CB37A713AE355662EB78EC6B47A34669D01AB55C1F205BF58BB
378428AF52D61107145AC6937FD2F58EE35BC4DF7DEF9096D27D3D68DF215570
41F8215E8ED4A289CC7ED928B3E2A225304113DDCA91E0C88FF6F0EBFAC5F983
7A7EC7AE3F0134DD3A283F09AB7709626F52CC421949017016918F0AB2DB83FC
ACF1E8957945A8BE6A43975C5A69197C7C3BD369974F52F65CD9EDBBF10DF518
D2436969674D4C79B5F0922658D3CAFB4DC5964EC24364FAC4C11F2F85E0B961
825FE2200A5873FDADBBE53F14CDB6F5079C10E2B967C6B7CDE19E8B67B5DC82
9278B1120A3A5D37A68E599C921338BA2C25389A4A4289945B806CC14F198DBA
7A8B9C6BD1B490097100D50B3825D862525CA5E696419DD60AAF213C866648B7
5738A5C8191EE933637A398B71BF66A083534F982D43F3953E7F8BCA35605815
E0FFF7B82D8005F645DF1A4A5582FE6AFB6816FB7B2DAA62C67B9EEB71B03BCC
BF26142DB2FA5FC7D31442097396CFFAFF7B9B5160029C2C808865F2E4A0183C
3F12358E6645DD2C7701F2107138F9ECC8E5E4F9095D27C310BB63F582382448
52267155E9595327E348EA30C10EC4FE555A33969C94C53ADDD85AF53C31B80C
1B952D9DFDD486271815F42B476B322B43D601DADA1DE6C35BCBE54593D0632E
66127A60C776F97ECFF94C2307EB3C44EC877FCCE87A55338B097C143077FE9C
8991243760D452B459DE7D1508D4F4E1E2CC64E1E88EDE9F237ADA30D3C0E248
5C2FC9A937B9DBBC40F6BB6BFBD9CD7021261D2C81160FA54E243D08DDBCB12F
26FBBB8F9C43DD7BF7665D597DC897EA59A3646AF2B83590B2F1AC3A3F1C9E8D
46537A2FDC1813F4D2BF5379B7F894A8D822CD8B8115CAE524E00542C7D93C5D
9FD9416A2662FCCFEE48E79225D5D9AD6A25CB7A543B33ADFBBBEC29E29CF234
7AA6E815B89E2B2794CA348FF578A21D0BA0BBFB4504ACEB87FBF308E236D848
BF0FCAB713EDBFE54E4BA5BA08543D8716F91495B2061F5F4BE3B7C96614710A
E128438AFFB2B06D881AD3F6D51D65318915D4C9BB9730C4539A8F3B4225B6EE
0EE9D75EA112DA1C60FD628B806D89E773968932C691E3688E6A0EC0E65F5063
436840DBA4375893F1674ADD1846EB8213E9FA165AD7C08FBFE6E729430E2ED9
768DB2F8314DFFB54617007C1984D443CB98799D84A0606A02FE2D7F65FC9B12
C8E0531F33227904D8D08548A3891B01066BA36B19BFBB47A27984EA986747BE
B5A9507680ACA37850B30D1BBCDD128AC48359893725112953887F68EED03DE1
8F36FAFB39DCB99A05EBF832C4F547F772C8099CDDB5F3D586B9B5A9D9CD9D7A
C976476DDC7C3774F70BA7655A9F09F2965D6AC9C1B17CA3D7EACB517109806D
D2CB6704EBB0D4389D1217080B73A27F8E22776519ABCB28AB7779FACA1B9683
1C17BD9AB3FEE769D481F38DD868CD2B4E085BC075BD7242ACD6E7E2ECA5BFC7
3C09D36274C91F1149C89024DA3E3E052014464F24F5E4E1A89954B77EFF44E1
C7C5B7562B0AA2D30099D9ED7B1C564626D94B23D6B63755279D438C8B7BE59A
A81C0B0A6BC9DD687A18BA25D37CED0CD4E3C1F23C12D7E0B65E32A8EEA690C3
3C850A8BC6988EC0238FC186834F549D3C3FF963013711AB72B76C72F0989FBB
73734418A4A802B852FCD1E62A7C503538F9EB6840AB9EFF1F396331208B8544
B26995F07752052A37B5A7BB94F4426E5D273581A6D2844444D82093FB03482C
D6D2203D088ED7A1FC7CC863AF414AC14AC2D75E5EEA5DC55A532BAAEBC8A228
B58284599EEBB4250B3B4DEF7CAF606A5065F649FE81E6B3B1E8D0ECC21206BB
80B001C40848F81D7791BE55A3D2349D8CD1B9C42470787CBAABD6F1B8A83AE8
4F8ECCECD0CDFA74FD3C4FA4864777647DD00B951B641FA734C93E9A3DDE30F0
1CD013170BC3A16B2F5431B34B0B08C970F39BB0B33254A1DEC9E567DD30E6FD
18BABF43809C925254830DA1CB099A6827C90A816FB91AFC16D82DECD741EEE6
DEF7D4BF4E4A49AE282C565D63BD51FCAA7D8BCCFC7792A18449B152D1E00DC5
06C91037C1D31075E73026DE84CA9635BA904670DA8E024D71908160B1EE7C64
8F246AA8FB60C78CA37C5924E9FF4B42159E5978724D0874215B49AC3C1A5E1A
8FFB0C8BB5E7D0A50B33234AF28E55765856F9C19A01440A8AAF20088C9CA414
A4210153D5311EC85D7D8DAED233F3ACED3874214E6075A658B3CC670D60B0DC
2E71F38FD2923A2BA43BA9064D59C171AE87BB22E477D5F530C7855C59CF9E78
2CFB09DF52F10FD3856029C88362093880A3C18EC4503D3F55A3374474F1D4BE
727357DC2726A318A0F0B8118C26DC90A6170A08F68AD5F92261EBAEED6EAC75
FD753B150D76FAA4EB347390DD09E4EDECB89C6B7E2213C6BB5DA31DFB05876A
64386E8131AB4B5A860155B96B4CD17D25C1F6918616CE476C16F32D2C78281D
D6B46CDFB5424CAD9B2753E3A579E440BEE06C3130FC48E2B2AE43AA5CD63FAF
844F5300D7F9F2FED0D5B5FCA6FF6D2B9DDEF1A56DF68172A2FA4CEBA6A569C6
C28E3394A8764C9E185E8609A92942B5CF2DDDBDE7ABC7BDB8E2830239F397B1
662BD176230EE136750DD45908186740C9412068CEBAB515DF56E83B5251E9FC
1F8C27504FFFF0BE8E237AD5EECA0A809F8EF09A07284C686C87AE283E6F3B63
483AD8A2AEB5805C2D446CE7FE32664C8951308966F5427F75911C5B90FA361D
460F2954AD5D7484716FFDE7B882CADC56552345D690D8ED9A2887FAC7A3D8CA
B54D79BB7FF1573C2FB9405078D374E07CA2BB35988541C96FF775BCB4FB7C6F
B85A8D048CE03F862BB01C30566C90DF0990ACDAAFB55D931F499DC93AFD9020
BD28B685E2E5D38C7AEF7CB6D89E3691C220C0086EE913D280C698BCDBB8CED1
8AA5245DBD160F0ABC7C44086BC9088D84F77D0BA3F6A345EEB3C8B96FB281D6
7E3B28B421338F959AEF7D3E933A0345DEAB218936D444BDCCB32D592B00EA16
242C2CC6BFCFABC1F3978630F65EA5D6637D5F9E3781F9B21AA9AC2A2D75DA82
D3784C82D6188185870FFFE100AD9EB380107DAE53D1963D180EF18D90A8CA52
1577DC386FFEB272A838DE3CD408714E8E7C016ED719D6A4D045FA24AD86E874
4ABEAA80881D2272C1B9691FB5D5274499BC130391B9AD47D03CBAF47C14B4B9
3BAD310343816BDAE9E9B76D8CDE87C535EBB201D3A169CD9DCC4C3C256A0964
16443C57722A7FAC52BA1B67DA2B7114DC06904F0684E0FBB04888664F82675A
3DD3ED0601E5F8D083AF733C59B765186DB2C607FAA760FEABEF17CBB9C34FEC
C6E0BAD9ED344C0A20BDBF4582011DB242B488416118607BB7E3640D89B4B8E8
97B8A153A3B153A0FF2F4F59F75B92A29A24158569F13BCFEFBC700CF3DCC758
5F89457B00C11430A6DCB1642F75E025ED7EDA420A3AC189CA371C040AF4FDDD
9069BEA6501105C9AB89E142758EF9A5CAE7AB66E8AF5859BDB0E2851C158D45
F5E84699D183FEE8959317DFBAF837DCB81BF77BDC45E4E6250D89654B93E55A
395DF0E9989EBD4CE838CCEC1AEC33A784D90872F8BB006B180067B2F9E68C55
28E0DD9A56E20DB0839AD896F8E6E8FEB1113E961339770A3620A6D21921EE59
77CF1700323489C7DFEB4B7AF909F18A9D0309260E5E5F88BE5FC4DF7C639F17
5EEB5F7604BA90E329415382B31A7F65CA867AA78DCD3E02DA706BB439B99196
429E2CAF7A77D9E4EB01F6273C4615166B744C8FB736CCF28B53C04618D95482
259878AC644B0963F7B5639585BA9B530D3C220D48F5CACBC90ADF941D228D5D
350C9219EBC4611A9E6C049E550E3C0FE7104B5A1CD2DF1FBF9AEC4825C327D6
FDFB724A0A5A837E41CF26F8D93053F1CA0FFC512EFFA22E01FBA3A3C1ED75FA
6B3C8CDEB0450B99E5E00B67A1606E6E19F8DAF17D45D9824F6FCEF996337362
1FE77C0EECD2AEF41245BD0B6A3C3A32C8646E17796E994E31508C80A90C9FC4
DE6B646163F146841C55D52376A55A4B67C836F7757DB7FF8562BD59C4FC12CC
2638563B2D8A113722B8846E22AC3006A56027834E09D9199B8EA85185747BE1
FEDDB8D66E48712CA85A5F815E8C6D59FAAE8D32F3A703938403CC4714057729
5F4A4A6E8ACC3C497A4BAE5D53523C335DD217852B75FC3219A3777E7F26C3A3
3D8BAE4628F7B51DECD886D93F3F45630436BCC3F8ADD162DEA2677D4291EC9C
879E76B74493C7D5EF38E01CC031CB4CE13C22E13D7F60C5C73F8591A02C59FC
1DD6EFDF7863400A9E4A0512DDCDA17F04FA4D72F1798681158A5BA93B1ED0BA
D8DB22F2CF73919254E68603BDD1B4D777D9FEBD85622B986B7D68C8B6580CBB
A49EBB5248B24C5CDFEE6042C61F02E023B0048377C9EF2B2410E968868E9CE9
EBF5D403BD3B2E9E3188D1E0E94A07D9DD0DDFB4F3EB5C899D6159DC1213A83A
64F27B0BE5FA0703E43431D6D75C10FB83D7B0EB9DCE189314BFC6A12892486A
72876CE1CFE159231A026D3A3F89047579FD28BBF82C65C235D83B848E819175
C4E9E5718AC2498022087730F2FD087089E5CCD4368BEF556A281D166D457F08
E248C197D6FB92307C9095DFF47B1910C57A47825AA81ECD5A7C109A1FE5AAD0
C27B860831DA5DEC10C655C724AB81D136919FED591DAB1EA4C6472AC255CEAC
FAF482B8BE94CE4B47E29753741C69A39C8C4F5B031BD65739F90EA39FD5A6A1
3CD4D3440EA0BADAE4F89D7ED7A9F0886FDA5AD98925EBDE0C1E3AEB29E18FD5
A75E0323CA8604AA4C591584F1896B5F9411A8EF414DA21E6354D056159F69AC
C6681A6D7C5F7035DF12E47FC03B333A7F09E8D2547F6D8D16CA42529CCE9E19
475976933B742305066D1656493996A2A6290B803A9EA2612902D77900C11D9D
52F70E14CA100965B591F49711F44C1487A8A062B0E7D307423CF2852AD050F5
978A2FBB6CCCFF80326873EBF3777A633245F6F5E3D140D33443468D728C3398
841A300A61B2948067D3196406194F0A345B9995CFA857CBF14CFB5DC29F0F00
59456B5E0BD5312EF638DA56AC41472404F00234C90BA39F90AA06720D4AF483
33640A8D6B549A0BB6363B8DFFEA04BAB0803E618C02E16B7DB5970B85A03AE6
CAAAEDBE98C69F89E7E71474CFC7515F73F86727492EDBF35F8E1228EC06BE52
C6F7398CB420DEC645045D8C183125C43E7F0DD106694E2A18A232D38AA3EDCE
09614524503DB75CFA310263EDD27D32D83A216241DDB23416A3CFEB9E338EF0
D7B0FA721D7D11990750232DC32F268BF9E57D092A699F1B16C863D36E89D087
5D92D5B08925D2D8F1079F4627A77E10F9998EC85985AF4EEB782E1CC6303802
63AF9696C631620CEFA5E53A203EB9DC68602D46F27DFC4593F05DBBB4C53465
EA90FB69263ACDF2F9BCB07E7EB12EA86EE4280918BC7D96FA3713003EE6A200
28502FDD7CBBB8DB980EA7B22089247B9B037CCFAB6B8AC894D3DE5A07441A79
952846B0AD9E0C6B440ED863242A2203F226507612115330743692D0D96F21B1
80BFA90C5B560C52B771DEAC9A8B5866AF79C9C3217298A76611355D1CC11788
88C7F0600AA23D46492DC79BC7C0F4C7A421734301813921B971F6B6E7B419AE
841EC27B0F7ADCD10E8F00818E6344FC5C36CA014F0DE1B4BFD9F59EC553146C
534627CBFEF39A0FAEDB1385B36778CDC5894177C517CD7756C52FCE09EBE479
4A43C8BA98107B6CE6DAAE73CE6D0890685B5AAFCCF1F973BA1949A345C9AE79
053FA5A2ACC174731E8DF9A7CA615A4AADDD819DCD1FA850D6EFF19D4CF55B38
22181427D0C65B19AEA2363A8EF97727B7AD57C1A0288517686B4FB0FA31A8A5
3EB130D84AB9618A4CA77BC722FA601A6123A48DB781EC5F0752FBD4F15CA338
023AC44C4DEF14D92C2A0671A3EB3E3CDD069A8D0083467D88AC57C62ECEF68A
2E63D2B929533FB0065C5DD17075585EA332D29630559022B8F9F07E996E67B1
730C0D64D471BDD24DCEA030A8A569C320C05FEF8BF68D616695ACD14B359488
2B491A6183BDF1F5449C2169315824D0A6BB0AD8D5662A85E961AA712CAF7F30
09025CDF190E9C4738695EED42E02B3E200A8959D899C05E423C089EF4C75043
7A96608C14C96AA1B11CC252B957DFC1A97D52ACC417BC66BED2EF5FED643681
F7D08161AEF0B129EAB4CB6DCA6D86BA6583670A6C43D8E19417E6992A5E1190
BEE14D4EE92CF4C5D806CEF46E6F0882E04E4E5088DF37688909EE4BA7A5B1E3
FDAEF4B019D215EC282EAC9802B080EBEC7733CCDAF905B2796F17B54A16ACA1
30DB52A6860F927EAA1BC80BC534E9DFE3D3E2FB855CAA285CC23601B87BEE0C
2D68709583EE48209986024DD05A9DE73BB5EA6859E205CE049A905D72325B43
D5C07861240ACDD461E98F650FC1440E5DBD3A6EE6833DEEB1F3E4A5DEAB77FF
48D10E557E129A97D0E07C9F64FD49DCFE0BDBF9AD4B23046F22C34D970F8C10
F2C3AB348698B469B071D48F9C2906F076D0A2586694A3354266C6F9D5F00F75
E691EC815A22E47BDDBABE0FC838B58E39F3C9523A9CDA2788892BE21376CE60
D429B2A34E99206190BB0BE4E883F74B4E6869EF9FC9222EC676ECCA7817CBAD
B867549DC296515F324E0AC66129784B1AC69DD598E605A0CF42F3872595F4B3
B9F41DE8BF953692FD1003A440B77C7E49C56AEFD7B660EE88175E481416E0F8
6108525A437F4391E79987A4CCDAD31438FDA6228C414095D3732590B5E767CC
184E9759AEBEA33FBFEA0D390D890C31D55BBFDA0D8B204A207C0A6EC27F3B2D
0FE27D9D94CC8BDA95366F7DDBD1D24AA8357D042DADA2DDF2F1CD6BC5DDE111
3AEF8489EAED90C3122F051AB5237ED1F0B4EB99EEC0962F9FBDC6BC078652CE
AF3BFDBE63A7DA04AFB529703AF2E9FE82A0B3682C1D7B0CA0E6B01EDDDC6AD1
2BE81304B8918937A1619D6CCB78B53D25B2E5F8D135C3064BE89C531EA87E21
5B96063E71E837BF04A724E8F3A205CA4A461D100A465EEA758F05B171517023
BC3AD3B64467A37B86E9187CDE5F70F84582F0C42D7EE41620E83C8ED3A42C4B
B8D5001F149AEAA171EC1B4F0FA82A500CD0611E94DF65CF9CC99F0A33FE83C9
73E6AA4CDB9334125FA84A24F2BFE120004AFF049144FA92B2794AAA5A57C03D
E6268D8C9BCFFA578D45A371E94671DB38BC4DE5651F4B42F44887BC7841AB01
901099CAC52042BBF275F7EB41C4A893BAAC0C3C88DF126FA04C23DD4B9F3CCE
B8409330156145ECD3E7327278A76889381C32767A33513C42F736F107668883
E67BD4EAA01B457E517B2825EA5C6912116488E57AE9B7B392D167B63BFDC110
2565649B536A7986D4A626666BE886B3315158838DC59AD0A09488335FC7DFF9
4FBB5CF83F65A6F1952EB4096C1B91B6657FD827C67B2E10B620750E2C44E5CB
9DCE747E296F7E766DBAFAD5AC9FBF383B3364B50D5860E9A1646A92A94F58A3
DD449577EBDC00412F2189F2FF6EC30EC7E3EB3F62B401CDD3C429BD4CC3F965
84C065FAFEA3EEC98A119E98C3EE64D775198719E3D7E8C725C04969A9EF3318
B8CF7FC2A27A04448B7C4E0655C8FA2515B038118444EE2CB2E52302597BFF0F
12D7DF5CE219716715073170BD0DB12D5D3E73DF2756AB6AB85A6184278D32B6
46912C5EE8351C45FD7E0F586CBF2D666D0004C929DCFBDA7EE64F1732C560DE
B67F6944CF6809CEA6510C8601D9035605246C8E2C963D1727CF4B65B92F5BD5
2C4D99F587ABECDCF8C7DA96887CB373624038186B76DBFE97379985C305F35D
0F54F815D0B05D51658F5BF3F6123DFE56F10E1AEEBA7F7C29AB8EE83504AEAD
3639924BC12FD8BA7501F4785E4ABF64A35F04A78B1F31798174F7F9E64FBCF1
12825E5CB10F5E5B8F56996BE2E5186292AE679E6CAD24F497D993A4B132A6E7
DE5D7F3998678417926A131426C498D274ADC1D97A103530EFB969DD821152BA
32A2B18E8749620221884F3C2C79E2436C5D16359139578A84C133F093D69199
94450A41E53551EA271A0EAF9F63E320D1603696DBAA9976A7DFB2AA3F8CA7E8
FEE4F02A68B4A2BB11E6B5B3B60DB45B506B00778420C722DFE796060CBC3F4C
577562174762F97B1EA411CAE61DD44B85B1EF68F2EAA7AF91B4F4FED320224E
31986BFF94420C676C848048C747852D8101FE415E2799015DBECC14C76245AF
FC42F9C2BFBD24A27FC5ECCE1E009D85B425D5489030C1FE92774318FD733462
3409DBC3224E615E1A621D5784661CDD38B9369F504F4B02A95DD4FD063AB4C3
8C1F07CEABFAC1E9002AFA3E5BEF8D7B942444975C89293EDCE4112DB68D7321
A0554EA68CD2276F23985B0041C332096ED816276BE1A8125BF2722D1D27172E
E86F42DB020BC07FEAFBBFE55C6D1DEA631967D663565DD2094B345C3C32C920
783C9BA08A087D28C9FFD6BC993137C87A7B3713982A06EF97D620DFFCD216CF
F0DB2E60B9053B0C71F73CA4091D9A942543FDE90924C9DB3A5D667E0AF18066
F1A10F2DFA3C80BB7D7E09A12CFDCAE0432930CFC34EF3CF69EAB6A39A337C6F
4B3E72DD4BBE6CF595DE4DC41BA2F8B71B39F1AB2E0EAFE181809E56BD799B6A
9385852D026C4670C92D7236CD1D199C612555168BCFE359EF9FFD11CAB973A9
2078EE12F3DEB4E33DCD967D167E9E0F3223576A523D336C8523AACC8882547A
C619B7153D5EDEF54FA2527C9F05D84934498CB1CA294DA6EBD87E83BF50AC03
D73F4DFBF1005237BD3132973E3F84D6B125938BDFFBEE6578EF6BC38C012E30
41D0437B84A779AE93B5C4E2BA30E02B88EC78FF896C6E4D672452A4394E3B17
6AE382C902AF1A86C6E9E498361675D2B472AFE2C515F95D06470E7CD2B15183
F5B3507D7032AA640FA61A426B798433263E6D36537E726577CE1483052A0E8F
F5433D6923766B1A50FDEB0587BCA6D9CF6A1B1F7EE43246561655B15078A271
9A4F0BFBAC0086F09BCE54E5140D8D0F224B875C05157CD351DC708D082D9A9F
C804D2C48F6D4440488AE7C9B57B85DE61CE78FD29960EC5333F0722046046DC
94B5017D456E865FB2E416C4EBF6200B13F44F655AD6FC40955A3EE68C16EF31
2027D3E4D48ABFE53BBA04D117B1E1CEE5EA815FBDD0F08D8DBC832E541C1A3A
FF4C57B0BA196BDF885DB63DEB07C4A7D64101114C31C9004D74B3EC7B0FF05A
9506320FC00FF023975AC4DF7C639F175EEBA1455BEFAD1856BD919303F7E9A1
824FB4964DD2E0B86E6AF05FA01DFDDA3494FEC4F094FF86FFA036DEC70EB09D
C8D2F36B6C4613AA5534221D084359B02ECE352A5D4A8BE3F89199BF4F71E1F6
FBE8788FF95705DAB0FFA50DD4284550397AE68035EF3FC6CB42AEE39CA3E37A
C7F52A84EF98CF8FFC6A54709ACC186A9078502B3AE4C6FDC7340740A748F4FC
18BC16B98845BBE333A7D19FBFEAED6C07D533D00EB4386870643CA83B5ABAE1
6CA0ECA45A71B1418AC11E31ABD7ABF79F18CC4063D04D66EBC255B8679004B3
5D754A18A615A3D23ACD78645D8A3A58B75D9B390B0FB0E5C3F4CB0D2C1D1430
C83390DBE4E4542EE86C72A3EF8A138E760F4241574033C78F36806A365D093E
7E9FD8A52CDD6E7FE34AD91CDDE1331177720D7C1AF095CDE6FCD85AC7CFC58D
6B3B244FD347B41E20AF75320ED0C4FC71F7412283067F4B899D0465B5E6D3F4
53D75E250335E05CDD95497B403D06C89EFE206AAFF38EDE1697B30E2CC73611
01042C32DEA50D24406BEADCDC888D7E5D20B9238AE020911D5039D7E6274691
EEE70699446F8157AB9E59947AE5E77AB2682DF63665465582CE63468E0AB162
0CF517E98EE8437F47D2A1F30A79504072AE76A679EA447B94DB5CB272D0E55C
2C138EC2ED959011C9F6AA26EDA302B3191CECF5AE2FE329B1525DD5AD5AA046
8323052D1205BBE6E794D7FC7861CFD89BE3AD83BFA89BC3FDBFAC577A4A0FD9
CE931442CC2E734BF58A10397DC3AB72B5D164A8A0E162B100E20F1D1350839A
D048434349EAFCA976E2D25DC71DEFC46C10484C6729380651984B1191C01487
5D0B19C4EB5CA6AE6961E7DE6E547211BB0160372E4C019A9937CB5A5073C3B6
353A0004D94E1EB83F6FC35164F4F5B99C3C5AFD9B42A8D53BC397F9936CBA75
29A4BAD58CB05D0E09B98F3D7FC0D4926A17C42A616EB41B2EF4EAC5D4D49384
8923E60F7C67FA6AA8062594F122A48C53F7EBC7991A8EA9B6374852403126BB
D1C9250EF146084B511FAC951672F5D7278419D07A6C2DD95760D29B999EB557
222918F3411BA647A5A118F61D5B9BC426EA49D373D49D230CDAB56A290CDBD3
A620CFF7748BFC0813E9A21265BD6E0992F1D07D327F86AFA89101B672D74A7D
DEC789195D75610DB4A1A6ABC96302B04163FCE3091F2FF0E1AF77CCD2963348
AC55486089CBF1E7EF9C21B3457A2E3D641BFFF79A207C21A1979C1AE02943C1
B64EF03A51F7913DB650A1A1D18153C753EEB26B8C9DC98FD353C84BD01E0158
6F3AF4DE2FA6F8F6510098CE1F6D443E39867E28F6FF56261B6FB3B119F39AC4
A5EC21778AC2ED1F0B89E277F52CBF744AB0C7D0C4166E42246934DD00C08EF2
18B03254F3561DF5AE6B1F9AC6202BEA5AD2C4142CA7D8CB954B8D0C0E8B4268
1175F8FE3057BF6E9FBCF3F635F1FD8DA05FBECB6AA4F831E99E3176CBD2466D
E99C9D70145F783D9BD5C911273AEB78CCE20956F1F48D71825B795DCE254D74
CE653C300F52896E5079721BAF2348D62292CD5E2450513A4A93AF550285DA91
183C4F754C307CCE056DCDDE90CF571D31B97ADF9F19960B8AA81E1A6DA768E9
9FE757BB4F31114F6BB6EB3FD64AA40D1E89750D1C3DFAA07E144E5291FA4017
E674E4E3F6B8002890F8CC8040437F42F151A79EA6C4A94926DA108B2D144D51
319E44570EB85685E5F4495B9DBAAAC15A99D8920C2D408F6E395E4FB2F2F821
A5C05D6BCBA30BED7AB26111AAB0ED6DE4BC8000E49A10ABE09E4A6AA5B52709
A8FBA2E4C924C0DA8E4692793C740F802A9D877F399CCEF8F3649C5C29291BE3
1C3427B0DB0A907577C8B8DE4E695034A0AFD7D67EE734572044ADE546372652
4A2D7C07BE53A2306D288160160A42E267A42E6E372DDBEE44AA952CA42668A9
3FC84298A55AF4FE3E6F861A0A32EE23534ECAB1259C875ED86B4988AB82F0A0
37A2A7930D8CEC27BD050B78ED02FD02BD6E83203D3C8C26B70C9DA498360107
2BE845DA623DF351D2BA437C16AD70B17B9AFE2E0C0729E5F10461A8DDB859EC
35135D445153AFD3F9CADFF576D65850FC5E56500C674CFF5899A0884293BDEB
690DC928A68EFFBD0C1084670ED0ECBE9814BD19184B2C0F3B04B2D3ADE2358D
3C6B32692DD1F7BCB905A78FDFD2C31E91F4374CD9C3CE1D0383F85FB9B692A0
A29241EE13B4F6714D41A2D1CB01E62533F9F3689D9F8CA2BFF3F9D381CB388A
15F9254CC893D942C145C2204CFCD6A5C69FEFC25B60E414AEEB862AF354FC6C
EB056DA1425749E465FAADFA4BF557249D19DA50258CFA1F636B0C9C441A03AD
99788F23DD1C0999865C58F3455FA101D6EC4A0F58B4662E40A001CAE509179B
FF215C77E14D23103A8266FD5430A3C9FCF86620AB28821A28CCB8B83A152394
C3F35A60BF641057213332930D0E1BFDCF3B80D8C07EB52F3849F14FD66B8A34
A64B53A37CF300EC57FD36A69CBA81196B6EAE3CC79B4650292C8F30EC9A7C5A
4B3EDAAC1F28BC96B2CA44854FD16417A7461A5589AC2B826ED390CE1B274925
14C9727830A7C933913E480AB843C46AC6C97DA00ACF82C54A4A49847E7FE2A8
2A3C410989B6F51BB7DDD2AC5E0C3B0637D4B3683E14225DC626ED3A0752A698
D4275D81725E961D50F182C68FE81E9D4875A753BEC3BF97265F7C2DB58B3204
96C6262463E815E5AAD0C27B860831AAD65F254157A25A38C6E287380400FC08
8ABCB3EA3AAE621B41E56AF619DB97CF51E9E5632757D86BA40609651BCA3EC7
5326188E2B543BADAB0927738C97BE7A624D783079049A962AB3636BAA34AA10
D12CC0C35B8399330235BF13206A3DA1E6253C167108CAA90BD20054D9309038
5F7C313B4F646EC4882548510A255027D81C4C17B989618FAD6185729D9DB1E5
8E41768AA815396C31F0A44812EB038060994602702C6A41E086DFAC2247BE09
4A885352C70B1CECF63CDFC814493C6D26742E16DC57FFF25B29C3CD32B8140F
F013BD355CD844D0F88C47B267EAFA1585B4ABAAAD72C89A0641CC2097EFFB9F
6D14FC983E99D27F9136DB6CA7E168E4BC682C4552ABBBFADE42E309377B26CC
9A31F55E891EA1EAF0F87013AF4CE74DD05B327128E4098595605F4863ABCE86
4936DAC9EDA3B4747194BBA7DB96FB69B1E7FC95425457FDD01BB55D1FDA8580
53B47B0CCE5F99D70C705C46DF7C5ACFE8ABBC57FE8C92AFFB9ED72DD8062C58
AD95A173E4B6F3271396CB9B90CE73A3467090058FD5F10E27BE49D91455A33A
2690A182C04BEEC7772DCA1437AE086EF1D9291FE9663A4F2022DACF26DAC5A3
245E91DB78B8619DA47DA7550ECAAA8F63C6C2A74A199E3D96062AFB72148ED6
C631EA37DDF577BFA71B8A651C06AA0304B5612395461652E3B2D6B3BCCE3F5D
699B3E2713F8CD74640A44AC944737792B49EB984BAB5F5CEEEE6725A09EF714
E4BFE0D7A1352D7D4274677B103477A0E63B7AF9C22A2B3DDB491260E067DD76
7367DAE1B68359335FA1F1AEE941D71BD74833CB42F7971264162BCFB322F67C
9281DDE7EDA445CEE41C9073FBFB6DB15CED3D9B84BEB5BB38161FD1EAE07711
0A3AAF7CFC574836DC062D2AD2B24A76AB48A5F30BA8F41A4BC3C8794BDDE4A1
8FAFB63363920E22A90ED50572B49954D81E4241B1039606ABB79888AF725FDD
4473C6D3F292CA5A2119CC75B34A2667078DC841CF1D862635DEE16F4DC0B6AA
347A4DE13D04D023692FC74AE7FF1F486B78D68E137D1E6B740311BC1929F9CC
772D4890F05058B3311810C6867550C0BDF00AA16EFFE1487F472EAAAADDBC48
486C5D96FF0A334C29C81514A006458A52B68E702ED7D3CFD31F6D7E24EE57A0
3ABE9B5B3A390C7084BA4E9E25DB6D2FB12EF435F2797053E1B369793A22930A
1D49D4FE402449BE6E3D70F8B0AEAB762AC4F3557FFE145590C912BEF49C28CE
53D3DB4CA32256D2CC8C4AA2D7E81DC82DC430514579079507174CE452B5BDC9
4E1ABF95D33B8396AE9B26342CC1D2A286A07BFCC93E3811030C29E471B39B28
9B7E88A9EB85AF354E3587132E7BF195905404945D7ED18ADD64A0A7AC23A3A7
E8C3BCA79544B1A2F756D81ACAE235A58C64D9811A48CBFAFE44700EC4BF9802
99570960375835946C8E9CD8913DDE9F3B04019CE0D724C1F6521925BD4FDE34
35A151A2A42FDCE3C59C556E5235557DA055A16C341972DFA5428CD87225C7FF
28FDCD4FB898A052A0B1A0A92855C6E8DDD9C64292AE5E1BCA039C077F149BEB
0569AA66A2A722EFFE99DB1202BCD1D3A011EA04EBF7DDA79E2FFE5D6B9A2EEE
56C744DF16E42C78F550377A900991E884D6817D9C9AF62EEEAFD20A8D4FA989
73E2BCC93E5C262F94088F9724D8A2A5A63EC593C68A7F1709D0C336EE82415A
BFA3A1C81BC3D6DE2A4541A10752B2F39052C9D81A8594108772A4B5E35B3E8E
06CB4BAF3910FA14A5545A805926FA00A1ED4CF20363A4562F836EC514D418E4
AEBD84D95B8A5DAC624EFFE6B1E94F1DB5B3628E247CFDB930CA989799DBB9A1
D9170D6DC4BE37356C0EB3F52026FDE6C7AC7ADB2BA6B75F4F038FF6AE864A21
702963EABD4FFAD0B219E79EDC9659AECA3A9E7B999C3EFCCF4A4E8BEDA3DF52
9A995E2CE2872E1D93AE15DCE2969EC464D5BBF8FBEBF27B617F9877876BF683
7DEB39CC78D571AC0BAFB2A9B3C457CB0F90009ADF7DF22E721B8B48B67CEE9E
6B7DC7DF1BA50119F71AB4967291D8F4C3AF037BCE9413D853847B32CD7D5C50
97943F10715FADA224C3CB242C6FB9252DA514A799C9ACFD90A8668309C532DE
3F8DDD32A240FD49AEE908C7972AB2A420AA55B851979A0C70147753E076B736
87915D05705F38761BFFBDC196EF729BB5BF404B88E88E169AA5732CD5420120
E3545CF34C15E337E74DD4026EA56FA92178834CCC48076F43C30C68DF3DCF39
C650A0AEA4F138A94D68379E62B1DA340F42A9B5EB8973129B8441E1F89917F0
1C5AA950BDD7B6C32B93B36DC34FFF3749BBF1AA29F3CFB2605F64E0B149DD48
2B26C72BCF3CC553E5E8A17FFA5B8965CBDFFD53A6555556089ADAB4DAF9B826
BC53D97B4AA8A8C70CE864DE04A5F35FF43687CA3C69AFA037EC6CB745E9353E
D745B33B41F83E817BFF94DE14DF4739170094855095603F87F4013542378934
CE97DEE6FCC9682A985DADA42875A6D0A6F82672D8BA08ACE9588CB985344BCD
A2AE446F02349130D3022C37B291851D973D08D99E12B578C4992EA47CC8C099
EE85B34A9A5F22879FB0BD63A2938F9981B2C526378C10BCB5B93E04FAA62C21
47ADCC67517C05D31404BDA94B8B49C81270862B8528051C67824D505EBA49CF
9A45D87018D4F17E60D3CEE00CC979AD410F813119CA42925B8F5DA833999F9D
8865D8A7FEED34D4B3BB4503B2F62B2F0CA3130E229B74A3CF91E2599B2F6F44
3D36959C0241139317F55CA58FAC0DA236A9F644AE16DE16D2FDAA09793C8A74
DA25396CBC1484DB565607911492F40DEE03A3ADB919976D4DBFF11B246AF9C2
FE922A807DCBF45952353E6ED578ECFAE357393BDAA439A6A4CF520624BBA20A
FF928DAE47397075327EED7195DEE9E116F16327535C49207CB22CD7D371D215
6E4C040D7FF63F263D8288A3C4DCEEFA1F3076BB941B1832E3FDBFAEDBAFF1CF
8F38923B7507D06C197FA0962EF63BDD5B5DFCA425FEF9D2CE5A85658788795E
EB8265C7F2726F8D9DA87675C2A17F9507808BF601B37DA16253F41785B27FBA
43ACE6B352A0B859AAEB15A52403FBD562D284E54C75431B2BBE0E8478945588
437D4BFF6C26513246E94445DD8BBD767AD3EFBE479ECA5B7529BAE86B985D62
AEA8EDDFF0491AD6C66659BAB7E5ACADCA10C7760F91CE3F48F037CAEA67B6C6
7D07C2E64FAD2F51D22180AD4365B70E142062C5823246B268F1DF66B627B992
C21D124959844CB66C168D3636E4E4CF454DC4F17115F2C2A14B2BB7F38FA45B
8809B42D17EE04102304F2F5938E9E3162B9C583897864E59CE6F46F213B0EA5
2186A3BAF7A86232F92FC49DBF4B870C28C308C0373A7CAC17B2FEA31F94C8E1
BB7887E2F0C3159E457BEFBD4C38BF2CFC0F77D7562823BAB7D15A4B412BAB85
999BF8DA8733528EFE98EAC2702369DFC8CD27783C6CE8F4217C2A536AABB5EF
1C11D89D826CB5889D4C31446C85E1117E316218FA3F19D1D8303C39AC1A889D
7B29349C96A4FE994637E964794C805E66A8DBC8B1F0033CA699C2B75B547565
B861D50AFE8646CCF705322EFC4802EBEDFDEA9EB53252D8191EFFC574588DEC
1E180341DC959F8EF56ED5B87E35BB806B7D1146CDD7B5AF2FE2AF7C8824D328
72219CD28A0D5A826235FDAE0F2269E6CCA5E6E543778DA860DE39DCD0C86F71
8C6C635A02048DEB6A82E53214F5A5DD3E3A0B788C4A729282F1DC31318DDF05
BF42F1E33809C44E8A3EDCADDF8FCD6E289C19A7056DA7167006FF554F2DE812
CF0A27F44E3AA88DE45F8F70D60AEE9A566C2B7BE25FB77A60D04DDE53028BEA
FC09870C49D9A26EBE5E4D11753CE4F2239662ACFCE740832014D1155E636219
F17E801AF5F30613E7A2C3D32301ADBCFAA3ACDD12132C5FF185A72F8B21D6AD
3AF4B758D4514743482A213E84C73940F774546313F46B8F14CDEA0AD0B5B736
538520EC2DEDB930687BCB5D36849122443B06C8391D3EB6485B9681903A5ADB
E9C01C812B0C32F4F09AE54B9C67CDBCE3F5800B93F649B2BC583D15080EDA86
B614EFF5AC56F4B05B9413EDF6CF4B28799093DD8F65BA55CF0B996B1649E0A9
8F4723504C746D801C6BE04CDE0D28488DEAC6273CB061562E59FC6D52EC845B
E486ACE592F718017CD2EB4B2C821420255B64B2889C780DC45D78DD13425781
594296207D36B41B4B6200D8F97B14F6497A32C654088445DE89E0FF1165CF26
0FDA213DA094140E4E4D4D48611DE908F00707EC53E1CF114795631E3B14687B
9E3516D8740C66C48385EFCA29AAAF9A8F77EFDD88D608FFE08B8FF47D0E9E2D
0CE50811AE95E98C8E56CF86C591BD32E97276C8B62F82F71EE259411685F5F3
63A593AF547BDD90490D2E07EA36553A97F164D73EDD84489A99864E20D511AF
8AB17DD10B3AAA7E18BC7AACE9AE959F778B274DF810FCCA90D78E299DDD9AD7
BA206C3661DBB230A0275E23B067EF8410754DCD176A1789CE4A979D8225ED78
4DDB2433689A14BD5085D49ECD0494A8052752156CCB015F934D378CA34DB473
44353BB1A1E38BF3965C4EBD3FBDE0C51D92E6E9F1316BFAADBA9135D64A7DDE
C789195D756F48B00F5554A12B671BB2CA1398F65FD0A764A54500FDC3B20DEF
C01D6A46682D801AAE769BE7F49BD6526B97C50571780BA9BC2BB7783E87F373
713E9E7CDB3D670B8037077C727D71B203DD11F7F48A63B781E608C0406500AC
20946FC093BBE4CB287A03CF94937386246EC44D89FECE9B4DFFD97C21A534C8
A75EBE18C09C8CB07D8CC6F0C9E0ADD940B62166FB7C4C085B8D0F10DFE6507C
26678146E8E615D349ED779B787232605BEB38346E3CDAFB37CCDB435C20A34F
783A4280E8751DFBFDA5118C5EE9F46934014D46AC803338804C29F44C10F41B
FFF224FF7F18060994B3E92AF0B9183F250A8B171CDC4E98EBB8C1DDBF693A4B
6439FA31CC8CC23725100CE23356B08B9B83CD5A7647A120994678DAACC510A1
E87CC4EC8C09C57C58D869117465095379087757A3B402811A5B3A2279EBED8E
98A4C8A6083765FCB74FE2DACCC8609241D709C263E3011779EA52B7EB8B5C31
B916673AB0DE60E8E794A957F6F211E57F18323A75DD33DF5CBE81B735350B8E
5A67E7AAA90A100194F86FA58B64FDB4E1CBB054D2B20E19C557E9208DD54E3D
6AC6EEDA1510173B23C75CE2AC17874F241B1591F0321C49606B759229C60220
CFB93E136777C0CFD6ABD4E8510F300E7D6FAB2DF46553EC07D4FA4DCA8E6176
D5CB36C15E8240CF54347B1B14471AA388B15F9CDE4EA62351A81791078723B3
B60DA266C51355728ABE88BEE913A376191F1D5DF1C10F47FB671C91A74D652E
AC910C217305CEFC3A12C6A7FA4168D2C58A56E4D895AD49D2958D1F43042290
78FC696D18787EF54BDA48669AF63D6D8AF394E11D32666D1F81FE173BD6F734
F8BA2D25E877A751684E0168E12EFA0363045533841A38B9E10A0239723D8084
085EA5DEBA04C3BD2D899BDEBFE222CC9E04899FAB30FD958468F0CAB6A60005
1986B0C705BADF6C64AC4CD9DAB01BA056E8187E798A346C934A72101EED2922
6DC366CD2803EBD635F5F397606EF17AD9E96C58620A909E58844D4988A574FB
1261368EB1C148D933B005782AB175FCC3646E5F3C75320B4A2F7C652EF60EA7
01D42E7CAAF9EBD90311E349389F5CA8A34D8AEC4A814933845954B1F9EF02D7
76044D3C646D0FE0FA17319324E301AA10FC9C4384EB279FB379906CB5FB036F
2105EC54AE813ED02EC0E84FAFB23773647EF1AAD0574081A9157946B7218388
748E51DFF927D0C357EA2F03FB86093BEE538C5C432ED7AC838D145DC1AF3D2C
07FF82C278EDD710082BA0D57149F9A404CC803E0859564EC9E0A87D14AC3081
420F83DF56C2226DAA2DAAFE643A986C50A5575B05C88612FA9A0A9DB5F6BBC5
D95D358764E8AAE2DE80813B00EA64F1217EC749F520C8AEA73C395B1B24DB44
395E23A4AB0291B9625435DD12E8763269A1532A3B062BF88C8C80C42C920FA6
F43B5A01B4FF074F94B47F34F0EEB2A956A4527F68A19C96441BFD4502ACC3F5
54170D1B226972AA1912209CED34B075091C6B79840125A669504916245E6F60
C90B77B6C4BE1C39B7DAE237196AADDB322C222A34AEBD4C5F77D0650310F739
4658AB8FF676AA14D808605C86E7B812502199BA7356D44091108514E011D1D4
0024DC5A11D6953BF8AE59A8F576BAA03B651B5EC4A7F3E8314A5E8DC57A6A57
92190460D35753513A6CB64FA405ECC299FBD9A74A6CE00D5331136A854122D9
FBE5652DC1CB6B6FB878036C6EC2CD97BA72D8A133D606B57DAEB4AC337D7B78
A91AD38D69132BB3CD0210CDC0BBD9712522E9A0863F25E2980137BACE402ED4
CBEC346B577BE40382975DED5E9C129B7F7D24D1208F5CEE3126B6D64A0E647F
43012D961BDF4079D8B1643BC5258F86022E21C2FE4982773AB76D07C3EA02FE
A2EB5E8BC43F73A2B373836993AA7E9CDEC04818522DFF8E547819CB7BD52296
A951E655515FC34B522946AFB93ADC54565D1FBB93E75B16B5FA06C7403A8B81
5724CB2A57065FE3BC686F994078FD7D195CEC950D994C18176A2720844B1825
018FC8FCCA822B506C724172DD147F0F34420E222C1D9C0F88126F6174213A6E
6A1B5A5345D80B04C952DB534C9C1C84E043F8C18692143DAF6DF30DA48B93FE
2003BBC5EC46D887614BA569B0566072CFB2653C6642D7754C8FC900F747A733
E7C091719733F73EA4768708A6059D855598DDCAE0E615CF861FF5BA89906339
18F56AD40F37ECF3032D3DAEE018D8E87F8B396F5F8A034F287E8280A90348BC
5E8DEC513BD88800A6A5C184973F92A54B2AD603169005A3CA177CEB4498076F
754669CD62905C97F19DB7FE6163D48C5616557E5019CC7EE31ED8AEF62FB191
6378A5A1DAA4051CF757DED23EC53E73F6C06C482F38F07B11CE7F2D6B159B31
EDCB566AF2FFBDA94DD27F8EFE8FDD84F8CEB8DEF9FCF5A9D69F05A33246D5E1
86E6D654BB5A89BE73923050A026CF96FF352099656B978154E36A11381B94EF
4CF03AA92DF3C32D444364E179E84416F2B557D8F8F53F2479E0DC238453BDBD
18EC314A42BEB6D94861B841005F1956F030D04F76C3CF058D12B751B8FD5FE9
D47C72E03128DBD4DADC328977A2F5D9D638BFECA5083FC6DA68B04FEE69CBE0
21027D34049091918BA8414C1AE699C448B92450EA6FAB8F94EBD6B5258F105B
3B6932A8900E5B5FC4AD974700171056C9B867293CCC90CAB0554D61472C3088
B16C329BD7A7DB1FDC30BA826BE171E19A4248C5D2532B65AF713430CE6FFEB5
76B1C7AE7F4820239B102C1E8374CEE1058CB0BF58143428E04CD10800D6DFE8
7A24DD39C873FDDFBF7B62143009B76CE071EFE91015AAA9EBEB622B2E1CA5CF
839F82CC06322A415AEB6E27A2DC37F3B109394376E42B04A41A3DBBBAF5F6B9
2A98079097C3D5EC34BB32E377FA95D3514F04CA9A15AF235AAE4FBEC8FEFA46
529C8C2A177A79364702D3207C3E4E695D0C5B32C08806198EC6A881BFAE4A5C
EB918F70AC0E260F82D71B2497DA2CC9099C90F2D54CAD2FE89356FA8E5F05FE
698FEE2D4A3D953E1F7D7F5AADC8C4242A7B4C69C7B3B342FE05A2F9819EB2E8
91ABA25AFA96F8B9B772875D162F663104BC72D57DE5ACECFAE9F3CD946D2D36
58A0B07581E1552FC0C75A1E176F2485A93522BD409246C65A6A3C6AA5051839
C8554F6C4993FD22E0B0525A40ED6C2757E5DAE800A6C2D7246FF88F7462B295
A1DB2D9133C29147A843D5C7F8FC72FB5737378E3863D17154BDBA404F36CED5
66B165770D08A97941285E679F997AFE7A2D2674E3F12A34
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols8-Regular
%!PS-AdobeFont-1.0: LMMathSymbols8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathSymbols8-Regular known{/LMMathSymbols8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols8-Regular)readonly def
/FamilyName(LMMathSymbols8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathSymbols8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-30 -955 1185 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F035757560E05960E2C327020FEAE317
24C484AC0CD3C1AB9CF35516622A022D6CB83DEB8126DF04762C901617B35492
98158049D5C65DE86143B7F36D36233A115C36DF60D3C55816B2B0B341102AF0
90D7D4E00A7611262CCD366F870F0EE8175688261513076B608C7E160A9A79BD
2B66E2E2A89CBF6D1703854915ABEAFA09718FE338924B5AF1FBF1209786AEB0
0026C38A2C7E208E6C306BAAF037DFB0F3297EE1ABBA65247CF72D0F78A9BC24
038966CE124B94487282B69D6BC0B5E17441DA55415B5369E451E2B0D705FCAF
3AAC6DBEBB8AB0313C4C201F851DB96CA9EB49357C3C1AB73F0CA2110C994680
5AC8F0D760C03F71C92CEC2E1A3AB84813D389BEFE7E0C28FC76FCA70704BC4D
159EE8B490B95CB09DD01A4122A686AFB8B9C69381C8C303F9A3B695238C3BB4
CB44B3BBE50E2BAE63796BB51D945469BB75C69F7A758180B77CAAD2CFD5951A
23580A3D45083C8368543DD37AB49705B939804C12D4BDFA730845F7E42A6C9A
B3F0A376F44DC297393B85E8A18C45C99260BD499DE599CC0D76EBE4AA7D70AB
348FA87CA9A1000814C4FA99B4EBC35A0298AA29563B030707F3EAD9FFF7BFB8
3B347C4A00BFB392E79B79F413E67A73FBB006EBA896A65CB21BE940A0940640
34E08FF806A114ADD3FD42BB394F76CC77DD869C46DEEE20839C9A2FF73B840B
0ACF238D333719F5947DD4C39B8E3F070EEDDA1A39D526319828FA9F47F03D8A
245D8E215B37959566D26DD98185223E4FEF01676650EB4E26C0A425E6C23C50
4BA94BC88E0861476C6BDA40AA30151943B874CFB63DE5620A7A8F2CF6EA77EC
ECDED0887B6C00B24C7A463FC10FD2C2F18D67BFF9FC9E621DB4AEBA91880FDA
C1B255D3EAB46E6243AE85845FB84DC84256134A55488B1A6B00C672C13F4D70
9C289E50F5C1D8EF063ADA63F3351D5E8B2A5BCCD284480B0930FB24143DD785
1B5539E97DAEBC0C57E6CAD4465492780B560D7A64F4AACF00DD611A0D4AA2A5
9BF972145C6A25C355CF276F00AD5F5E4EEA8D2788534B0E643A05643E8A8303
8029E832F016A7F41B9B176926F360586A5C26C99195A6646B1336FDDC2FF0E4
0D5A3A2E5B7AF64A3304B9E86E1BAFC221A8165D453AEE422EFF10547CC2E44F
566E8880D7B62B55E06213C9491954D1A8509555EDD6F3AFA775472B61C784BE
8968101A50626A429AEFCD373482B35575207D2AA2476912EE771037F8D51B80
31B5BA4FA023A643AA617DC3B38D8B3697CECC8AA4F174F5B2C1124A9CC2E373
ED1F6F3EAEBD1C8C533E943977A590361A53953D75312631D6F07794B1D85325
1462B649443CE79BEBA97AE481AD4AB1DC86D8BDB89DADA55F2D1AE640852657
EBDB5BBF685EB2A4606DE426020640D534E795EF9019F887473996793F6FC92D
A11EA37B2EE094302A297311DA3110A873E6F7DF8F113DDE6AB0E182E5162DC7
0CD52C99C5542185168CA1F712BE96EE3F15292DEE4B72E4FDC197E724033F7B
B9128F40DFF15856EC96F5C3BA6E6CD5AA138B168C23814295B0BCA199FDEBF2
CC7849276A1AAA5F1598EC7A9A573A79CCD04CF98E4C6E81DE8EFBBDD3C355E7
3E38FF48F0FC3A3DF5B4891F92369E9379CE45F6CBE7E3178917EF80132FC8FF
0C7E7C01CED707EE67D626949BAA454CCF3DD58FD7DFF7B255BB8D78045C6F33
68050136CEEAB37F705812FB77CE978619015F83689687231C03FEB091AACD0C
096AC82B79642D2AF6CEDCB5190340A318A5F66CBDB3D64C3E9E49ED75D95704
9B85E0F168D4D12950FA8BA9E1FC687A5056FEB861893A67198B49D5704BCBE1
4EA52966BBF2629035D0209A74C21D10B0BABEEAB1C52E626749175FB4B267D0
D6F8C04CD391EFEDE4224FD7CE35E7D5460EF05BD7AA8B7DA39A26DC8F9E6003
B2EC15444EAC35A6E054D213D0A6FE97C994ED2EA14FE6FA12DD0D4E6E52A32B
048D621B04296FE74CC3CC0336E26E4AF4E9A6A0BE3FBE05D453553E147AC46A
2F2F1F5ABF0D0F03D78AE6E30F27C037FF2BB6C0229DD7564D4BDC48715E8499
206DA2C42BC1E19DB531D2A35036D25CAC3FEB287907389CED035FDEB68D4F69
6D170E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4850EDCB990134F321F1FD6696F64BA101037918C9
F3EB2C616987CEAA46F6C052EB3FF6F2FB9A6F974915B82B6608CD85F75F0664
5644A5E3888713099F73E90FBC9681A6432D6944A68175A656D126AB96DEEC97
7DFB9A5ECCECE68B7C706A15EA93F5FA7800171D760667E1336DDDED349310D0
BB68B865F3E43C4275DFD82036752613F3FC722D561C0B5BA22C873A42C13AFF
73B7A9B8096208922179B7EDF55236F13203049ED2D3A304BEF0120285E9FBC3
921898A37465752B57535DF5054235CB5A713FDF779C161E40A8A8AD8074AABD
6A06EA11E40F1F4F4090C99D86095BE64A36FA8733362A8D4A2273879968020D
41EAA7F6C1A9B682B344B7DC94AAEDADFD1BD39385A57F9383AA235717AF84AF
BF5D808D32071618FA11E2F7907B9626CA16609BFEE67DB56CFE2E2B90BED39B
54D866320877A767FE000D8A3386EB1AEB2D99809C71C946EB77ED556CD01675
A5D45FC8BD04EAF80C756386291444CFC1D7F12BB4B1304696B2080A14F56ED1
959BD60C7F7F5BFAF8497205D4BD589967F17FBA10C2EF19C1679C5AACA4F9EE
B15E13977CA81B5026C7E1EF4FDDFF62E82B16CBE3D401AAFA4D973976EF232F
76C9D0C0793684D68FE95129C326682238CE9807B35B2C2C0C32F4122724C159
AA1C41DD94D0808809572A0A32125FA4D78B525B256291CA389F839797A13591
6197A48D453611484DA293AAA6B62F5ECBC9D32FD482C74A5387629E03895C5B
946117AA34217BC77B1E075A4BB99145EA55CFD1D12CB1D2E72636AE538232C1
3966FC6E07843E4FC7A8FB27BFB4FF67CD278CA322575D7590D77B4E03E63F7A
848E639AEA6DDEF55107E8C5B9DFFAA47CB3CB5A614B77D0112527C9AD97FDAE
5BC457971A70DB3421293E16959B64702BA858C1217A8B3B836A947462E0B59B
37C8CBC667F0052E653D33F067997638BDCAED6DF3A8F1793F71E79A58BEF6EC
47F700C376341D757B09A3E31F6ABE9EB9021C1A6E311CBAB6DBBC8AECB140BD
DCACE9B1E80979B7487BA2CB786018E20A5E0355AA33D6FCEF382799F62A9A8F
F8262E8DE16E9245C61CF3FFE09AACEF315932D79117A513F6863D275B80A249
01CC70FA943FF9A9F5E8D5716835F17CE3FCD6FC5EF10AC25471C19ED3B2D164
93293F09EA311F49295310B0C1AF942753C52402014764CE7026803F091EBA60
AD877E9208260AE6AF24100E2B365BF89C5B679378A7F6A67087C57B5519A988
04735147BE66CDFF2481FE35DBEE9CAC7E77D79BA760EF4C53A3C983853DE8C5
FD3F25925955F36A3BFF3454FF7B226C0F001FCBC5484DCFA46DD8D89C69C886
AA0247C5EE233C9D7DCFAAEA1E34B8938673AA6D760A80C38EFAE41268C528B8
5A14387C3E29D017EC16BE7E6918E11E7AAE31ACB6E85DE4B2B15B93B7BACB79
AC25F37A4E4D1B370E59C78DC9EB4AE83D1CB6E4DF546FBC914A6FF52591CCD3
C464AA14A393F61610D617E196C9252A013C9532C303C68553C91CE83431F239
BE883C519B643E9EAE5142F698F4B47ACE43BFE59E3AA4C8B47CA18016F95C6A
212208CDE1635F4E5271224CC19B6D47261CEBA3DB1E042443B665E915991D93
2209B3F4C86C9763861923B2F335DE040A8C24E73A0DC3FFAD5A6A9249A29AE0
C70F71EA41B0A4A505263D6A6C70BA63EB2814D31DDE792AAD7AEB4FA346EC85
0781604DBDF2EB65869969F265341938B2C7D6B979342D93A9F5A23A3CE8A015
130A0FB817DE38359C63DB215965E218E892C350FCADB5F66EB82D0813EF551E
F65992B2E24B4FC8353951C0A335B53F68A8F8286A94521BEE28D7319ABCDFA4
A21B5DE536B34845B32A34ED5CA1F3D3EE2B04DC4CBE12FC99DA94FB2648B842
54D4FB6729B1CB7E86DB55FF4216E2F57A08E04B44BB36F27129E5E93EDC061D
348F162C03BEDCDF0521B9F31D29543DE2AD436B75778C0489533F3FD5742FC8
AAAA8A72683C54B45F81F355D9D19496D0F80470D6B289B760B6851EA1A9D31C
01577A0026C7929C87160EE0D8EBC305A07052BD82AF003A0EEBF1D6FF38B526
E2EA0A91866201E08792F03323228B622E30142E47BC752EB0EFF7BE8B688A36
22826EC83CC42DCE8356DB43399E6A6918A887A64B2EEE98060E47C0F4276DEC
FDCA976E967EED2CE2C439693E2FD2F2C26823FBE781CE97DF06830FC498BDB0
73AD2CA5EC36B4892379B00A5C8564FC9A915C85B66EEE33EA460AF6141D60E3
76B4E430431F049992647E2B744E48AFD33CF5041056A43F90D0E6A47C2521C1
058E8C66894928964B332A89C5DA71AFBF455E5A68FDD4DF74A8F1572F8168DD
E778337122FBBD1485F73B4EEC2651C3465557A320A0932B65C1FF77F68B89E2
BE7D6D975EEC017C4CC66C88F5BF25B0D84AF0E70ED77B0B380397149845CE59
EEEF6DDDC9E7C6127A68489B4B19F3D15F6C72AB8DD43CA69CE0AE0177D2B999
3DB6EDD24B6A4FBFAF7245D800115B62C9BD6E97A52671CF3F69A78D19654F75
3822663BE5461EE982F36B0027977D6B3738BA7EBE8FFE3928E471DD9502DF1F
41F853B486CBF6A62EC2D4975CE0BAE9D76A833969FB573201280B149CA91AD5
F57D3A240F66B12B30C0B8C3C25DE1E16BDBF5FFF3CD111CA5FCCCDC96631D0A
2B46A37E422D648CF65D7C1392E322DAD8CD3CB42B3FA767FC185F653F299CF0
85F2C3AD7BDE7C44FD3DA32993CCB41A92B29BEB26E60B05B105EBEB7A7476D8
31D2C0383F39344255823DB7D1D12E2435634CF69890D14A1FF76CD20F731C4D
09ED15BFCB1DC5530257DEDE728A19496AAF9D8BBCFB2DDF39DA7261CD6B1DE1
94DB09EA1744A0B6E3A9A1704083D27D5690B18843ECD420763B9E7F42912756
39C6DE6964F3607C90166D11C291D467B35592E73C61A2DC1F13CD09369054DC
5695355C6FE73DCD523582A4973275B64B3D8058783639676B4F8B47476E4098
ED693455F82F098F49FF487626BD1A4D4B3B7961171D67F8F6B26EBA8AB37B5C
35D075C41218D0E9CAFBC8078A26AB4F29F821A015135CD43127434DAB18D387
013C388D3840182F35ECB411DD16BAB8CB1DC80EE2D09164F7CB2EDC0827D2F9
73A1460966368EA8F0D42E7A93BBD492847AE57C85675CF04BFD1410B56E616F
68C3927EA7267C0C4BBA87AA3EC7166170B80B7355E802532D38053D427DA3EC
5D297AB110438F9AA9CEDA887E63AD877E9208260AE6AF24100E2B365BF89C5B
679912C69C51E8D0541100E3DF71D501F4BFA0AE8260EA4119883BE0E2CCD156
1113CDC4983460A31A70C6614DA60CBEA3A564539DA028D46BD8A6C8E870451A
F92C3A3D555E94EA81503E0D53C0AE8AF190625DF8F48C433C5CA5E61B61960C
10E340864F2D181B835CC0F9C87C9CC0E95FB3F1824BF5ABE0DA3110FBD87806
4770B0F94B263E2C7A3D9DF14D9BE01BEF9882A1EC2C8DDA5931F895D02E4FF1
CAD0158061CC26D5256590E51541844B9AE3A861D6412B59941B7186BC31AAD8
9CC7F07EF9A36CF5C32F54ABEE8B83306227DF64A1F4E9B350DB04B85024FF0E
6FF4C8FDEECC5DF7106C24975E54928A3679928D4D84C98B3D33843CFCBD8AED
A1A74438EFDB0BD68AB2061EF46D65CA446C190A6BF6E0D8DEFA1E8EDDFB5541
473187ABC3D34172433CC652E9B2516AD0EEC9F452135D6AC8D97A90DD4C972B
69C05585BD438731D0DA714733FABC30765D6775BB68C69704D0BA5D6DE6BC5E
10342040FAE3CA1C359295C7D2967195AFD2D94BADCE1E95F17F0F95B5A683ED
8DA83806CBF2B803C94B5A135004A20823158454E29255E8846AB1AB9E444B82
AC000DE047EE32B5C7659AA3999D8CA1D3941D1FF042DCB7834420A2CB78723F
B40B625D7418A892CFEBFF58AE1CD0F128156868B917147969EF8319C216ED3D
620588A8D3D13C4737BB89F1FE17EA91AD0A119E1754916E4957C40F7642AD75
0E847F04D456B101A89F4E76E6BD785EB1F605D78CC0AB1425CEB017B47C1D40
BE68CE2BB94BFFF5120F91CB493BAD5966F870FFA6AE560AD6A82C3B0AF0C810
C12CA6C41677519886FD5CD163D6FB351E2918F4E5B5D5A27FB8E57A24EDF9D7
42EEFF2C7558A4479E25DBF75353BF0CB3E744B9009BFCB1D37E21EC06E4D7E0
2762A656C0E348FB75DA17FAFCFA53893D1ACEFD8C3EB97C9E7E5C3C5A303193
004DF6B0E2446527C65DDDF917C6C8B730247D89C817FB276D85EB671AD64DB3
4BB09368AB12D82CC4A183ED86D2841E499B785084AA21B81AF837A206A50773
FDDBF92515FD7870D5A35EA64BA957FB2F6990DCDDDF2859681D7B7D5566779F
26081CE1DCF8FCBF985B41005EA0771D928990C0BA6CB7E33875B819AEB1EFE3
7A3656C9B2060A89B3D1A0ED127FEDDC4387DDB2E10EF3FA3985EDC86947215D
585BABD246585FD44C7FFBD5B878504A44F08C38AB4A35ED5CC53EE38F810C49
4CDE233ED8AC7E692EDA8CE219D733D37296CEE1118362904F622FC22656FA58
65B5E26CAD7951FBF3D7B27121FF01DEA6F49C7A4498656B8A12ECA7752E0477
CC7F945AA8CA30ECC8B017D3365E4F2C4D6F555DAC9A6D17C263F63D55D6424C
58ACA31C6B17A617B342EC92A2FB13D4FDD77DC3A85B2508B70FEF36DD289991
A16B4097497EEB38F0274AAA1341AD3BB645B0D7F97ACB233FFA576119456D0E
E8D5F85BD47E3C79CDB4AD769ABB374D1B705D61C428B44B213057725969D808
B280BE2A969D2207BDDCAAB6AB26EFDBF7E27A57CE61292AAD6582B3A661F4D4
8AFE06644856C8C9DCCC07407A115D6D45B7DF6929B1C79277F3957EA1805B97
8529CE833B1EECAF947E67DBA704AF3F29618A894235D7DBFC1153A5F74EED26
102EEDB139492E743E82CB61CEFAC99D77B61F60FD9B0C1645E399B20090DBB6
8DFAAF4C6C1919FEFB6E3E8EBF926C2A91C5281153D5B28BEE5E71772C8921D6
9D11ACDDE095D43077D6D8E8EEF114F60F85935BDBDDA3362A11E0BF7854BF4B
BC52EAEB261E696CD413485DF93CADCED318B5FA421EF0BC594EFBA262EB2C41
4E43D8ACC9CB195D12F3B2ADBAA0D95A443F525372BDE229F13C485324C60FD1
D7DFE515B666ED51FB61F69E18AF955D6620C95021DF41F66204845581723BB6
B76B4C3C2E2E5B8584AD015374BE36AC1E08E1C53C079B8BEAA3E0F907086AA2
3BCD6FA9812375C8E8D4ADF7A319E9EAC6238093C798878E5D558B30ADAFC1AC
17B04381C6754327FA7C65AEAC1A2839A9FF799456B6E5B9BF421E82415746B3
63938E88CA325AE4BC6B36475154CACD25A07C74FEAA2928802611B4AAC8DA96
F7CA93B7288B2491380B2F4F87646F6BA42247F5B593A0787ACF533199348D11
730EFF7C25DD5ACD0221075ED47DD6FE8909C387D8F02A88FD24540AD71A0FED
2665CFCF412B99167152D35BC0E671E657EDD876C39BA0ED4E790A79D8AD6723
4A2C9360790E4981671E3F898A1157850F48A5E0F299DD9078866AC4AC771A7E
ECE3275C26835080FD2AC78DE88BF65298A8EB4181F1646B5867D0EA3446F4FA
176517141B75FA51F69D54478E279EC2855938CB532FC260FEF5CF3FE05F4F6B
1A6AC463C1D1A24E7B41EBAD57574D43E06E13690F831AC63F570D466C8DE97C
2E08CC01056475E95FB467E2F3B08917792C1DAFD35FDA10C0E14D125C730ADC
BACC2CBB9BCBB0BB982F75ACF33109F8AE7ADE4954D0B1E1802506DBDA73CFA3
DEC72E83650F240B54E88E51C065039ED16C5B958CF632FAC74FB900E04B0B13
B26BFA8A80D5663FAC4A5C3CC6895C0717E2271C6A3F722B2F6C2CCB04097EAF
EF211683EB8F6FF2306B741C9455B48094D2958B832B76458887F0FD9D971D2C
75AAA237EFCFBE0F14F797E71B0E19D074858D2BB30FEDEF6C34FAC40779F603
770BA127BD4B9E4F5EC52314B25837FD118062685FAF4391CC91AC0ABAE56089
30E599D101B7ECAFC159AC2335D6DFEDAAD93A074010C5626DD9470582E82C12
2DAC32220AEE7C75A5BAC24E9E43AD56BA6B5B915CA1A908C4180B7DDB99E3AF
5C45072D5FDE12DD81276D7304AFF3059366F293191CE257782F236FC2299F6C
60070DD031F172CB2FAA0C0BFDAD40BD3AE7D647B0FFC9298FF9481A19CA03EB
E2F1EEE59A3D6E3FC23B65AED24295DFD94966CBFB46E98286E8AB5BBCC5A8C4
31D8D7BB6D38C459ED7811962AD08A130D7781F378AEA20293910A7716341DA6
4093C33CE11E30603EAD00851CC85FB116890A7C58F795071033711947B65B0C
07BB7FE129E446F1A58F097CC13CA9BC695F782ADBE50737CE43B15AEE7EBCB9
0CE9D7EB1913D307114496116FF0087A48789461E310DE9062984F6951B5AA2E
BC98536501922114CBB2D9698493EEFA925E555E776D6916E68159716FC183FB
83834CA958EF2A4210A873E6F7DF8F113E86D87F7B364763BBA1AA81F9D7B871
D7EAAFDE0578B3E819F2D472E963C4FB539A61127D80FD783E271DBEDD8994F8
A2E9F96F4F81D178EDFD36B63A9E05D8F4BD13318C16396253CDCB9E1EE7A887
8F02E0B498DE9C1A5F110347B7B612146B59530538023BDA6569691729EA004A
3D96F0FBB300F40752DDCE278F26B5D50F9C8BBDC7B3D5D144869BE59F0BE9FB
57853D65DB474E4CEB98EAAAE80FEA3557FC29E982F4E43B182BD85FD6FF9604
20E3B5F8A1C120887EEDD7CEC673B6BB38C9AF59940CAB5680A26E061D2F6091
3A4AE258C4D983DD924FF553E5B12C707C05D2FCB11CA6C96A19EB6A3E1BF76F
90C6FFC27B544A46BFB42674F71B807D539C91F3FD1AFB8E35446EDAB21346AF
2FEF93F6548AB5AB1461702C16DB6B9FC7A6BC09A67527FE42925CE4722801C4
4B73F72601CDFAE5FC65DF37FD5B4619235607EC39E49ECCEE0FEF9BDCDB5024
B0A0542130D26DC873AE2FDD4A72EEEE8CA21707B3DE017D2EE6B73A28813DFB
7765742E60E70E5C5D5BDC3F1D01D1487F4031379DB5C7666F555041C9F914EC
54FF90B4DADD8E3D4CFBB672948D6CE6FF549C179AAC235D8F5B912FCD30E0A3
6D1F72019A09393FD526BC32540C6C6AF3F1381F095C03F918532C41F7B8A1A5
51D5D6738847CBC436C8E761E295BDD7D0CE95FA51E9CE6F5E366C4A455C353B
7C4E59A633B5520AD35DA8A544F253ACA01F7DF1FBC74556BA1D6050A8EE0769
70EB7D5E19A9E738A5B85C27A89285E0FAC1E69C54CBB3D5DF44E01ABD547CBD
B6BCC2F87A80C1DE282DE613E28E0AB1E66551CD456CA179E313C19ADFA5D0CA
2792EAA9B3D183B5F501E3CFB25426AFDAE364B249DD482B26C72BCFC0190ABE
88BE00BCA9ABA2533EB147F95B5ACFEF157AF713BD355CD844D0F88C47B267EA
FA1585B4ABAAA80F155D2359AD152CAC44BEFD085CA5CFA8294D816AB165AE27
CB98A914D22E25B41FE35179D5E020790534D5825031DEE791C64EA44DE30162
31B72467837CF7FBA911AFE7C86504CA41D3562F89437CA7CE8267C80C7AC5C1
1B8731A458EFDACBAA48397E97284B8A8C849D61C0208212F4ABA9ABF1ADE79C
00350F35CA47DF4C4C6CE0F6194D426E46FDE470D568BC4A17A44A31E61DB881
C20437E442E4A7B0DAE50CAD34EE9951CFBB3E23E96C76B5500EA460E36E1FCC
24D0148C458B745876A5FE59181A278216A45C23F6D07CD4466A31B0CFF132F8
AE3AC5B1E86BA1E22403433D97EF143C518E3BE33F0B75634DFD834039B3D944
6D6F27C2CEBD637401A381FAE7F3035643F6290E265C8A88331305E67BEEEA9A
0395059363EB3AF9D85D052DC85A50080668D9F648ACE56F31BE56702835B978
9FA83E1FDAFA7FF188F74F08626093D94D5A70CB0D91FF42EF52D058EC4F1CF3
E1F346E742529B6D950E55190F83CDB687408F072FA39197584C3ACE029FFE31
D7C09F9B727A027C5055BF60A81E14EE3230FD368EEBD32FF81664545BC32BD4
61939C8BBDDB40AF670FDC930AC84CA865044E86FD1D4E42D1749C19EF3163FF
394FCC8DFD903B4024745A9E4418DB109D3925CDC344089CFDD51972D8DBD2AB
C7D011C6D2D65F03B4F7AA7905C1E12F9ABF4E0DDC231A02CDD4EC14DE67DCD2
E501677858F156E9EAC6EC03872BFA8D9CB1975BB90751B692EBDDD9C64292AE
5E1BADBF96AD2D61D9FD8AF4B5DA28D5BF0F0F1E39055E86180C7D70697B73BF
ADEE28F63E9C85E6BBC957E31B7641D4C53DF245937308E8651E778AB9AE3082
F13883F9D6EEE678A2D7C1969B03B1A68694832C766C7F7ACCDEF81E59321F01
48F932557CCC2FAE2B1691AE16FAFD94635268A1523DEE0FC929F9DD87211E88
511D6215FE06323FA1528398BA1EB061AB58683909B0D4B44FCEC7CAEEBD3857
D30C70D5ADD8BBEE977F9C240C15C95C97C114F3B5536CDE53D4A4D505682DEB
CBEB6ECC8848D17A8CAD80215767A67AF3BAE02C93A4D1857442F0D239185EE1
A37965201E91840763AC80BF4E42159CEFCD800BDEB4E8A4B6523D92313C397F
0A208E31913B97E9D3760A858901DD600662AA1245C97832CAC2D5487DDBDC27
DCAA73799D9308C7344ECB332EDA92F22341D7ED9325C5E3AC9790D355444F1E
F9BB2602A3C381186F39ABF5F90E52A284053108EEA895F5B0A1BAFB1B6E4F4B
BED8DDA2B596018CCB25ADB0EA69D07FAE6D0CF0B2BD75AFA2BB38DD97C6F426
AC06714B0B7F80FC9B4384EE6F9A1528F7E58A9CB23E3EDE4023FE499DEA1407
9C31D65CD98FA769BDC5386A266731F34BCC5528FB85163B2E2D8F055A5D0964
6BB6027B5416FA4F0CA9A2241619C4B2F00E32C603FC2A137FC9C38C0D60AB33
B369EBFA1BABC1CA2D5134F45D29A6B34C186E14E37F10FD04479236E61A1F8F
270BFD806FACBA28D1D217ED437B23DE309A360FF60CA82A8251BE5671A1223A
8DF6D5EB3D2751503D159D3782053293E9ED0FAF2DE4B6F41316B3B768C81C0C
A3DDC57409B25DE986D21D0D8C8EB11C4114060FADCEFDF326E2FA25F24D796A
F7FDD85B80344D2F92CEA5ABCA369A6C9857B8186CF363ED173A46B3719D7280
A90EA7038A2F6390BC183CB432710CA44BD9587ABEA3DB9951EE94DC5F5AB1A6
16FD3DF03FBABA548EB67ED18D437A2AFB114183DA45B72F3A32A71FCB2C6626
79D6B69220D4100EEC1EBD67AF85BC1E6D57DF9F0427C6FE820EE594D64D1FE6
765657E78062F8DF1BE13CC06BE30D434EE42C60407656EE331C272E879C2455
A1A1A35DCFFBC0466A81247D0D69510A67DCDCF81DB674AF26BD3389F8ACCDF1
DCE3D915F0FC99515C532ADDAC4883F517B56CEAA33500D6497B38B4D2E5CAC9
5B7C0F0BF79744EA95363F54A5B19FD37F01D02FD609FA48078866C7B64E60EB
F783EE5FF928B84859D6892AF19D50CFF1C8E6F121CE477BC13FB3235F52E7EC
1604738285C8AF5812C45EE88C7CC13EDFFEE6B14ADA06DB6E122547B3B8A766
71E69A4AEEC0DFD78D5F48E8BBC4518671B8D6440A282859DB641ED9F940FE4A
BB222712CDE44538376F3F6DE9B58E8220749D58D423E16E2A04D26899399FF9
1F4FB98EF6E228ADD22D093BBF785EA0700277DE0ED84321CC016331B03B13C7
45D188F286227B12FAA9D620113A18D118B979650E646A05A0E84B1ECFB9AA7B
9F0E4E6C466BC0F5343D79F05E97208617ACC3D4B521916C7DC872CEADA88202
7B22AF77C4678AAB2A9279716CD037E0BE94EEEDE0F75C993030AC6F634CB6AF
599713DD1E567F2853184181B65EE0DCF0830C02BEA2CAE21DFAAFB537D8D9F3
C6749B839A4B1ACFEA93279C7247486D79A3B628783ED5431FC2EC1724DBCF6E
42D06B418F7CC6D43D43344E31C52D816A955259A1419C8C25F4F8378BAA0E75
64DA5FE706A23361C0DD06828CFB7991365B0DE01F3B42F08862621E161F8CA3
82D2869FCF8FA0E81B4533C04CF0B51E574ED111E6813DD6C846D77AEEE4631B
565CA5149EB72643B4AE94DF0B25AB6C9FC24425919B38849C108DE3495306C9
98127D976DDF58DD9027AC28D80C5DA6F15581B40A07068317B975E878DD5C69
4C6020CF4CA1C92B4BA8F8C3CD46A47764358D7E1974A8B29838E0ECB7366458
1B515998ED64D011DD48D7068AB293AD8E2545D0BBC786CB8401765A3EDCCDA8
B1329836CC6136E0B2DC8292E36DC444F34A138A0979A0392D5BB3A270FB0302
14674EAB94B9D1735921653201A8230C66DEBA105E89909D76D034C9A85E553D
82942B1302FD3BADDE29F623EF50C9B12A3005796E87D240911DF09A7B362D7C
BEB0CA28A1E598EC4278F4B48A3A9830ECD85E92A8FCE76F32E61F3DBA34151F
3B1D9412E42FB01F5D430B2D8E7FC93E1AF8AACCB2BE827CF6452875BADD2BE3
4A5C203539D1F5B72FF2EC71264DA12698E42574B3738108A19EE8828765AE66
51D18A644CD56667FAC7FF3740E5C09933C8B22E643BDD07F61D79F78746C523
8C5504416B1E24185D522FDD1A87B85850B6C8CF8B22E6CC94F1660E4B4094BC
CA48CF7562D5D69CBBA4F21660E0A95A841DA5B7F7826E6964A1B3C9B2D82844
A39AFF5F15E60E0F8154CA7B02A60319B227A40368158EBD90EA17E949ECCC26
88CDD344748ED15C9F359968E28BC6A05471D5CB6A71C2B58CEBEE82D396F2A3
B3276D8416EA2DDF4471798E28ACBDA9EADBAD6D7267995C72ACC0658E69A52A
687312B0C567B17E1E0B3EDC325FEDD473DE05BEC164100C9ECB6D7F352A877F
875BE5113B3CC5C384E1FFF89BC83C0D852582BDB1EB6971F2EBCC0C538B9F47
47E6F3653993E526F03E2AF8328791A97E1F107FE09C53EF74C7D4C0CF2B8E9F
C3FF3B65E9B480E59D1FDE2AC1E481A4AACC22E480CD066D10196C05A0EFD97E
E57F50C5A33A11142109F06B678EE10A091B29D3A9A54D2224EE0EFA9914A910
801C278365895F0BE4511A6A0DB25F6E9F01F1AB9C6BD12A8C843DA6CF1498EF
18BE533ECE9AF59EF670560C0AB39BFD238A0859BA570499CAAA419F54A17EDF
A6452E0BAA0519CB64DDE6282787A7F448D78C3B80BAE1D9711F4E4088D6466B
65753C25713CF4D6887CF81497E97C252D233534F47521E168D225F364D6DC97
A550734A6FA75DBB849279484E894C016528933378FDC74D20462258D5DFBFD7
DAF32CEEA2096AFE70E804C25481FBA297938A3C986ED15B14730C7BE5794100
261478562AE2A9B800166E14E49DF641E5329F12B7A6E161EFB224F1772C9C96
32A517073D4E8E1C205588BDD280493473D73B85EA118A1036DDF61B515C7E8D
D9DB763ED698C09FF8CD54B3DB005C33AD91036672A632BF4C17BEBEF8EB957F
817C5699C7293E47DAA4EAD6D47F01ABA3B290EA1AF0A8EE76D79BE9F2C07CB7
B9CBF2CC3E89E91F21A754E413C55D5713C9D3ED528247757063E3ADD2B92F8F
73013AD9CCB7B29C953456EBCF09E563800F740AFFA63FEA9445FB1EE103D9BE
C6DD6699F337EF5455E0A410FDAE034C078C7208E4569620CEB3F86995C281D4
4D9AF5AC601F550D8A22ADA1AE22778230E2D5EB6497E5FFC3F42F921D984841
389946F115492C8F03055C82927FFAFA6E43AB2424597503F40F4E3D39ACE81E
6816449AA859A9754CAD99EDDA37871241EF7A195D4747C9FFDD581537610B95
B7A76FCC99CABED0A49CCB78273C3585F37FC059FDF17E12D254F19FCBAE6C1B
B500C839DC25CB07FD277A265340E2E8110E700A8CCE20183026D4B921C47328
9CD30B7069BBF83B38E149825FCFFD89AEC9CAFDB57DC0C4C51CDDA3D6EB4CE7
AE86F0DA8AEAC48426982C0CDB79DE4F169AD06FAE9113F3D8561BA38C75DAB5
2F0F1124DE827DEAE0F6DE8434EF087320F134579D9E18D1E0A10F0200BCB784
75E4BA09D03745D763AD531A9573CC39EA06FD4C7FBCDE46F1D9E6E73B1BD662
B3C599792AD66B5AC898CF87A13A3A9771054905A58B78CAD093CEBAE35577B9
DCE91B5AE82CBF821D0CA2394715CBF564DA984C20B4310AE24068B586C679D0
9BFE9CA36B46B1A4ACAD869EE18DD301AAA69044E56DCC291482EA4A2A2646FA
DDF903C17E5B0BC25F89AE84006216080ECAF450D9A02CE809E78AF0299948B5
1235A529766FE954E0D7B2F73FAB21BF4D1ABE0CB264EEDD6BE0658FA2747C56
814AD6A1372D5D4D2555A2E8E23E29D8C8C5F39807B5A2F752845BC5F4C4C487
917187C1967BF3983FCE912039E3CAD13A373A18A001810E42B57078E36F74D0
3028962EEFCB5DA1D8CFD55EB82E0C85A089269EDD6833F4E66CEC4CC2FF8759
11D7F9DCF56786FCEEACDB83FB1ED1380E3D8A001880D27C0F7D73029F171028
FDDF8B550FEEE2C82C9F43A749101509FEB31E38C10077F1BAFD0E11EE116DE8
A806A98D112379C8DE23C75AF530BBACF0694A920693615747CA7804791C610B
B1ABB2DCC1FC2A40AC1BAF3ADE6EF9B4205BC43BA3CDA488E512ED42BBBC63C0
4DD60F4A12976872F59B63BFA4451E0260FEF21E4BB1B12A15889917716A5491
0E71FB6278604A4003AC3287D89BA1939D7E997D0D0045D200A4B5D7338A9E17
2197DD6FFE8D8B8EC081349683FC5E1C323236F7159A4E3C25F8D3E3D79B6AC7
1A3913971C253B5A055B94A3261F05A2B5F750ED1A437DF6480BC21F9903195E
AF28E7FA7297AB17B4D2307FA2839FCE196D5BD93BED4773B1500EE02F9B9B87
74237EF1899A326BEAF8EDE7C91B616FFC9A23B8BB4A46413D6F2AEF5FD2BA95
D15B8812DE9AEDFF832696F5CA0D4BD71FC54A1D783BF1258D028BD7A1DC0430
AC5DA38AEEBAA87DC3DC4E5149815DB30A40D534E795EF9019F887473996793F
6FC92DA11F5526E2AA96012837CA40EDBAAA2ACD2B44574480A0701374CC66CB
C040648C9619E4EDEBACEB1DCFFF624E05CA96E07311783290A0EA08384809CF
652F1E602E7F25681A74773B6175E00D6236F113677A591DA6992A609736494A
798E44625D054460A5E12BAF16E3919F29F8DB5FE3CCE0AB011371A1F3477648
500238C40EDAC04F03CEB0E0D1EC6BD197D2FBC30A1D6064E2957B001530E3B6
599CB0CAD5FE88FF780E752C4FD8E749DBA0FFB2CAA73FA9E8C2D786CB4E75B9
CED103496C03093961B8215977E57A04DA8A7CE4B86C16DAF34D8EC2BAF04A0C
94F53B6ABCBC147491A0EB8BAE82C9F14E9F3B744B51DEBC6C8756826B7786F3
5D21E3098DC9CF8BBE54D707AE10F51300CB89C57B1EBA597184F5E0582C2DB2
09479F00C4F7392CCD4C3DBC3E11E2D6A185EE6A8152A3119D11999FA7597579
F551F0450F18DF8EBE13214E89E0227FC2D7977A09FAB0C4870C8E6F613285A7
13A00574669A052C81B8CDC9315FC86703508D2380278FB9B8E12F94BD7B5967
08B8642BB1BBDC37026546E6537F776BC6F12ED2054A61BE3CF773689ED45069
B436AD8E947AF4328AE54DCF5364857EA20DB515C86F99D9F39C0C4E34217C98
264D9C9D22F16E40184A3697C368E4E09A0E24F43DDF16D6CA98017C7C118D8C
67F71A4BC3C8794BD9A11989E93AF80E182633300AB8BD06D067F53E41FBE43C
F84446797CD20753F196A12A09781F4BC06848F7FD6D491344E414D0D88A66D6
B4F56BEB9360478E29A0274C8B627E25E329840D68F0ADF43FAE666EA92F348B
228E23372FAA078DC8AAB00146550EE703A14B531D522D2341CF66BB4C006E14
1302BBCAE765F2778C34894E1AD847DEED68118F3352659297CEA9BF5FE7C022
0D844C5BA84E89C36AC72560140421800FFBFCF4372B123AB5D2705B72B4368D
643CB7D82BA474B175215A540A6422DD758D7B70BABC5FFD5F430DA7E226941D
3C4B6C268EB100BC068A00B757D6F9DCA2AE54088311ED782D682EFCD8C840D4
896A183FF4E395EB7A69DCE16AF779DB5C3C76946FF72DA1DA89CF6F9FBFACA3
A735ED0119A05B4E8030D2B8FDB828986367E2C4F0243B2FEC24DAF9FE469EE4
36D6B0129745977065519D41FEA05DE277A2B0EE90D9277A7ACB3C766C747C19
97953D2DE0551410F28EA1F866227EB063AAA1E730C86B6E9220B796DD1A8F7B
8348601CE72DF8F2762BBCA403E590AC0C65C7D792B49F53AEDC755475660D1A
FEAB231200BE54B387539858F28C3C108C0E6FD94CE8C0B19F9D6967AD053D7B
484EF5E6955F9BBA365964A126510C7EAD6A5C182C775FD8878D39F160B10D4F
5E8E6A93CB32BE355EDAC9632EB2FB3B0007243F409731FFDA563AE576453559
91B4511E39D8B71F1B8622A7A5D19F103FB6E81F96156EBF5B7D624A8032161D
54A462A9BF6EBEE88E3299560DBC638C18325B5098B04BA53758C08A361376C4
7B399F2136B6E9A563BB6CF6EE049BC37E74E79D4469DC7E5A9141AD2C56C395
D1B1542BDDF61C0B67A3306EC5B8DFD78A27E926494D5F4D94DFCE0A737C7BB1
F50F4FD191DF5CB22176634BF8015CEB70012B2B8769CE7950969557336AC8DB
3B61E01D64D56E8C4AD45FF3581FAB9FBBE250F5A649FFF45DA2C8C78EE355C1
DAA4617F3885E9F571940346E1F33FAD7716A5520271BD1FC960603870583723
D3E94A3269EE3FF46B759BEA538D3091C99DD2D487D033EE9A75B7ED9E43439B
69D7075AE4E6BF0D1AAB8077E21BE3E767CA6BFC0A34A28B9C5B2267C747BAFD
5934D95FBD2640BFF7E94C4C210689521B47C6DA9DBF0F87E5F9CC7BE01927BD
85A77A2F046C41B5B2AD6BE04FA169800228BAE3E6D4040A1A4D1F5C9F8815EE
6D17F25A1C8B7DA42FD174A42C50B316520BDB6A833969FB57320155CB1B5B58
6E2C8AB305A7A9473726E1F3D6DA978D71BB0A50519CEC6E1EC233F6710B0388
4B153308C0197A5AF0C7005F6503160BD95409E236D848BF0FCAB713EDBFE54E
4BA5BA08543D871A35B2F746F8517795ED6B0BE7AA1CD29495FCB31167E14BDB
D260753B64030759472D938C84A71C114A5626804BD8A05A139AC2C2C6486D26
60348916BF68357886FB43D10F3A4FCE7A438E9129F4DB2867A9FC6F3B6DA3A6
72BDC2CF7A4927D841354301EDE00ABDCE8BDA33B8BF3B0CA12B590B9F0FAAD5
0DD14ACBB98EF7FEA5F5451495019B108DE3495306C998EEB3A70D1E4575718C
F2D375C99D4577A5362A2A8AA3CA6CCA54B86EAC72D850AC2F500060B19CB5D3
F27D47EA230F6AD9EA30214411A8EC22E6D306A76C391F9759AB2B9652119833
995EDA4207BF15B4BECF94937CE559ECC41CE1BC35087D6FD299F593C8B9AAF8
A89DC4606E778C3721EF5E4BABA9C7632E6AEE83738BEF36982B7B68908FE784
444A8879B3E25D0FCADD4C7520B11492D5F71759040A1E996245BF51EB4895D4
358CB69DCD7880757CB406FA04FC210E9E3DD63F00738AFFF0F2903EFF7F87C5
11514EE22BFB83C77161145FC0E4FC155733F1017FEB6595CC97E266BEA49D45
404044876DA6C1BC54F49C3484CEED0DEC3FD062A50C0E36B85BEAE85AF88A22
3943C2844B75D062880309987DFE73C7357DF3C02C18747C9544C94107DA1B4A
6EE178FE71B207D088EE8EE8CD8C4D3C542F83821C56B4F44B70462F9975A6E3
14A0DDB0356A2ECEE5118D86CD0DC85A9A53BE7E1C0683550AF629A27AAFD876
E1D5EB11DEB30BF7A3CC1FC21E73912F795969C302215684E0A2A8A1CFFAB249
39D4C91664F461EB13C3AB22FB3F3EF644B5B47DACE807262DE0C2F1EE5E5EC8
E91FA2E4FB940228C74017D2A82AB72405609157A217BD7A0F49DBCA253B5A47
F447584457069CEFF3DE2BD2DFA545A711B2BF58BAB1D382CEC2720B290D53F1
53AAC4D8526D51B72E18F4D38022545893B243C019E83AA5F2D8120ECA4EED74
ABF85E3E44D28B0D2344AFAED7520BCF31E3CBE92822A51A8A1745A6A820EA7D
3788C5644A80765F3F99685FCA54566CE2C6E026A977FA4CC2E8AD8530A5B8F7
7B7B64262295B57E2FF4257921D8A287F3B32559F5E5BAB87E1B2CAB08F56337
C36087DD1D42488CEF01F15776FD7BE0593C9B6167A82C162B887F5985EDD229
FD0E55EDC6A944B8B2630CA13BA034B5CAF1009C5548B473E68201CED8C563DF
3C79B2FA77157B2A33E7EB61A2FDA8B84B593EC8EB38DD406DD3BC5B6B2EAE63
62DA4037ED8361D42ADCF0A5F9197A695C8EDB00FEBBFEF051806B0984B004F3
D2E93222EBB7D8C7BC445E500C128AA2B10494823BE831209ACEBDC4E975D7CD
A6B6B8371E23402A6FC3F35F3E3D6B4E66740F646A568BDBB13792861B1CBE47
D52B9BF1AE0E382E0D116C03EA76BC43A6FFEAC320C9393EB3248F493082908D
8EF1D37DCA63287CF07F5DF58AEB829B24E8A2B0063416F914890A7B7E1BF4D9
36CC2E56B5F1C494331CB56BC3E7C54D3ED7994F2D2DCE4B18574849120444EF
295332DAC41E63D01C9515466AA2CCA6D741FD8DF4A42E77E426EB2B7A46DE42
B9B260F09E2C0B7FDAFD481C671690E1308818A1AB590B7E461DEF5567CABDE9
4E7B47ECE15B865346D956FA91D2C2028FD09357F95508DB8C3FF60A8C9D26CE
809FC08AF051FB4405B5CB8B5AA772A5CBAF0D9BBAA5B1BDD2535F37B4D82126
2B836ABD89634AABA1E9742D75A091E558E82BD7153D69AEA9F1A73816018190
F4EA4D6E272C572FE2D6F38C4AB2F7A87313B726A62B1005920584FEF747B1B3
356FA2834D8E41B597E753E136EBC6528200A32B93728C1AEC2639C248DC6C83
A83705D669ED70CB031120353DE6150F4BD912139A47C8607F4881E4CB90952D
3CEB2C5278BDB862784E480F5912CA8EE0827585A3E4C44F3A0C34A97E5BCA94
B746C9BF7D75231D8E7797AC53A7BEBE2F6D421DF42C12D4D4BDF023AB06DF0D
A81D41CD1A859B1C1E201B871F387A7BA8439E3D4F70E4FBEF7F91E25831EDE0
631FF11914D5571F5F8959E3D882379EF0C4D6A1CEB2D166E1AC40540533D4C5
CB920B81A9B5E51751F39CE2A1C743415930D153B624B4DAA951C70E3DB4836B
02E982B7F48F07224DB880FBAE00397C2C06A525E7A8002197EA51F0AA7426D4
3B406895526DB1A66B05139C5B7357386DA40E666ED855AA4BEE83CB67116BD3
37C6F06D1F600E8B6F6FAD55919B206035AC533BCD190BC0D9355F6696557BE2
FF53D69625B8F1F7C874A24D8765F6AE4E1C2C2BC4FB52E29646935341BD381B
51CD220AE7667129BFDA9D1899CE5D19BDE9D8D4D65552AB2108F75BA7339E98
2A0D62EA4431C3764AB8AE827C244A5804CD709D8E867155D79CA059566D037A
22CB5E2825D56025CE0062808D13D4CAAEC10717CCAC6514D3CFB932F1845EAB
551BFF2CA861D444C8DD23BD2B826940B2BD309ADCAF86E044FEA61692F51E75
97F50E25E723F931FBE97C3280638522517A28472D25F7E7928544AF474ABE5C
BBE464C23FAFDA17D7CACCE44601A02779AEAAEC92840A5CD75932CFC4BD30A4
981679567566BA4050C9B4B351AF17E0C816AEA2F5D3BC9B70FBC55DE4418B60
B25F8A618D455B3B13A9AAF2BD7442D393B3431CDC6F807FED090B7FE36AA71D
4111CBC1389910C79D89AECA924DD2BA008653122A26AEB28C1B39CC2DA12B12
A5D2AB43CB3E06EAD88FA03F146177E18F83E637E517E41582625821B36EA613
B385A86B80D3F6502F10613E32E8E00DF2C8E91CB992E2A9F3ED0B1783245693
1478B427272F417A96F9F8DCCD09991C0964FDA9BD20DE3CA24FE9FCB257C92B
5A0A5EC5CA42F8B32E1766E711F2A72D734A7A767EDE855B520ADFDD2A6F2ADA
AC1A8D751BD3B82750247C07AA440D9DD0F8BB7237CC11C6F0F8D163DF46260D
0B3FAE329A5C88190C0DB3386826238AE93D751103187942D2687B34B72C01C1
EC77B413963A45AD72E67FDA672D617F01CC9063BA637417CBB61E90AD8E48B2
069D110EEAA74FA1C87514AEBB1854DFC2CBC62F2CAE609FE08BB869FFC30197
EAFFF1EE98030BAD4418CA57EC6A9DE39FFA019A0C8837192D99320CE3F254DE
1F3F4688C3BA852173755BE33EB329A0FABE90DEC8526A4AE0817A33036238BC
6CE339D315193003BCDB5A9ADEAD07135CBB70B81D3DD53483BE7CFAA66508B2
9A7C761D5A865B4771249BC09203DB032F04BA472BCD29141413E9E167C78E49
43516D9D88318EDAFD96360826844EDA31AB8898AF689F96ACA46E6AAB733ACD
C7ED713E36B5BA21A431FA1A52264AD7FEB236EE2835510D008A062B34CDD2B7
2C885BF6B143D37F7920DC13A456A04DB350BD0AB32289607610B3A34F1EEBF9
3446268B1D5391C82B0FCA224DE9940432D805268A9BBDF653844BF878AC585B
FAD291BFEEB2F0A0322AB8D0360B546B02ABC41630C9FC86B2420DBF59029DDA
04F02EBC3F72C41A347A7F8DEFE956C8FE085053AC0D28C9C067E081B140D7E7
3D6F6FD77EA8CF1DFDBBD7C58B30DB5A6A23C30EDDBB288EA85E669115212417
EF58586D436B9D38F10FDE36A5B2605CA69A943F1B5EA02AF6F6883CC7B75366
2A7723F52C35CED6110FFFF13423257CC862270985589F5AEEA91D1B35AA854E
A930984CC61250363181F69F894B1D8EDE36923D8E86E11B1AE93147B814EAB8
3895D598B176C59EFCFFA1E0DDCE6D182E8D66637970E80ACA4A37BFA5635A9F
209EC6E920EA97B59C1D004F8AC204488588120B9BBEB376731C8B34B8A90C4B
C225B994AF86B5B1E99607E9EF555447A62219AB979D4B4B6883C9DF3F0F5F35
A315BB920A2758B250EB1C08D948A0F3D84C028174E86A5F96DB04A877528944
3E9BE5644BA7FF3855E03E1890A506F0F6230CC3680B29D0A6152E1263D4E1B1
84EBF6DB06B5BE1F1F85EDA991971FD0E332B41748DF086C994FDAF97B51C4E5
A105EAA89B4864359F988AA860C6F359DCC0DF568712CFFC415C8E030B5371C2
FA2214F61F7C124EB9A5AAFB7FB94830EC1F232CACF2867E6F462C044BC20DA8
85EDCD480677DD21E46EDA743CE5D7BCA65AE29C4F00F2FB20F2CFC2D29ED63F
C27344F7F087692E1C226C05E1DC52F8B44664C94DC79CE2D51169EBD3F439BF
B328F2C754010F481EAC59DA2B6757EA1D32D424E49CAF5D23BA721CF7FABCB7
766AD5D3C15553FD5732F3310978AF4063C26EDC831B37121D2240B07C67D5E0
2D33EAB596FA7D60FE7F91E75E60468F9191B9FBDF104B2986B97AA189222920
A1EA1BC54627674077C5BB9A0EFE1B89C6EC6ADC14438C360D6630F41032D6CE
57F78AD5FC1640FCB272353931F53C81E7598C412ACF5C03CADC95393F2BEC12
B34B67A887738A67DCE7DC43ADF9ACC6C4BE30D8B8FD892980DB5EDCF194F324
964207EDD36E068B50D03AEFB2A33191B1438E97C545553B43E182773CA2E9BA
52CD5A2FEA59F471E0DC5FBBD8B5367C954DEED8B69A08B6D78F5A0756030BFA
DB681059FE9AF7B83670CC39C40EC8E48204365A21C7C49FA92AB5E197AF64A1
F4CA445EE743B538E8BF636BAA4AD81F5E7F7BC63B2DB6D061C03E8F8192F460
DEEA954E49E7A351CD046301725C39C1D365474E1A030AABC49D6D105D7CB40B
95F9915F1FA5A4130851E9E828F6F5C75892CD71E12E79FD8514EDCCC3411919
F416B3590CACC03CE296AA8DD49D922ECBB00719DCAC1A033192E01A2D0490C1
1A9B25A4DAB6A0D0BE4F7715BE019065A03B777CB434086E87EA4AD820C35920
1054F9A917906A30A7667D7C591B61DA5CD1229D99F828673605B993F5CFDB50
2635117336387D170AB42F95FFE67DE861CE8AC97E89ED5CD37A5D94F60990FC
95B4F0F754B3CE247DE2BA1FFBE9E2BC788CBA26960C758E979D529291922523
B0CD8F3BB6AAFDAF3B171BCFAB8FD771F14F2FCE849FEC961AF407E2DDE43353
C5967D92A201E79EA073FA12B32B1F13F6586D56F7F96E3567A655986B5030CE
1EBCDCE2E2A571ABA6F518BA625EAD76F9575F01943EBB9299176F21E0820E6C
1E537D98A4FE5CEAEFF2DCF0028A96F473AA3A62D68785283B628CE960B8D969
B2680DCAF9F8894FC7D838E6AA380A985717A6878971208725F7BB1D6CC69442
5697B4995B4315CD94D3925BD5D6536550FA3C4EBFB45F9AFC9A4F2E8627FC82
72503B1520E2DB24A61286D5D9E81EF897231355D3988D24692EFDCBE137C8E3
2917313206B28864E924658BDCF27B26011F4EF909C94EE5DA7DF716C9AF0D5D
82E5E88EABAAB3BFBC7FC0C5453502D6CECA4A60E4285ED673E5C8B37D2B233E
6CE581D09253F6D6ADFF67656B63CDF204850DD14EF927A2F0C3A83E80A33894
DC858133D5B3B799DD66102C12A8200615B359FB95915711F5D565BB93E33A61
1D6F7CCB290BC6A219F1D72480ECA210B33F7C5EFC61A6D71D75323246624C2E
61E407EDCD97F8D649F48FB3D2C8A63A6806F9074BD707238D2FE063D69D9959
183411E662AF135F07E3C83C5180D79172DF1A3287C67DBF14568BA175BE3631
2504D8F7F6D15D368D93767FA0A22DEB04D1D5679672A93CA0CD3320047327BE
05128A5916F9EFCD3E13A542F3F8EFBCDCD805867E8099DF3480FF67F05E3FA3
33A9FD9206C32166052183E6D1ABE9F38FD9F98786DEF81B1D05C74FED33A663
BD7587A488CC2CBFCC591E6D5618807E4D3726066D96B70E6607BF1BB47FCBDB
F90937F82300BC48E3E961DC389E20EACCD3FC846217680275D69E3A05F5583A
5CBF5E1AD66E5F8FF4DB2C27B2AFF6A6D27A0984BA29BB542AC9E4071392E2B1
978058AC016EC9CA743572CBA740D8D319123BE8FC3C30D7CE5653B410378B2D
88321D823C3D91C79263378AB9AD4A0207290013609C02AF9C0DB75F5239E013
350104E5A4A9054DF03BC9571FDE1A190C40A598932F59934DCA7640B13B0C57
532648A5E341E6E376A63E8DE37869EC0DF2A546BE6DD1D5CFBF9D84B0EA7776
154C0AD0E445C8D1F75151398B14A652E775FE48996519F74481AF055DB54EDE
7C5AECDBF4554058246241A27623B53B32A44130A576F3210BDA23A7A13D864B
8461BC716F03B74F31D49ADC32BF326645285DB0F47EA4E5EF0802C2EA7FE361
3C3F650250F4EBA02CDDFAAA7831F77307211FEF5F720209C490127582E2A12E
4B9E8ECE9466871B2B4F9EF4764142899C35E199811DD294CC46CE6F395BBD0F
42D0CBEE87AE6D68A4C0336BE904ECD3167C89638F9ED604F7674CD3E28DD94E
7A08D50778A5164F5126E3FB296AD59910E1B9D09517E44C5B209DAA529A444D
E2466A1AA423423A7A198C50C080B42A7F9FDA39ECF75D0BA162BDB2F1544B10
84CE45086696181A85CF2DCD9A2C8F2988F91E5BE006687A356EDB21934EF7B2
EE7E98639379B70DFBBDD448BD5060CF9DE6B8B23AAF47731B1C0CFC7EFD30AE
FA1980FF4708ACC2DD3875AF98FB1FE6F9816B1A24A08553CCFADA24266BE7B6
0A912247512D9CDD06A07CE959FB07C05E436C8FD2B1C1FEF3D418D63F2DC9DC
E45CB7AC624700C54C9C7361C42C2BA07A6CBBCE295BAB2225EA5589AD6170B0
DC1C1881F17CE42379B3F61C04337ACA753048404F8F91D92C2D7D015C23732F
E36873B0B42DF539EC1557767E08B9EE9AC1C1ED728808427CE9E6216F201D4F
CCBD20FF5E2D103D73B67032F11583A1B4AD4E744F14576F6476302196652966
23613A4024B85E0AB4A54668C8E6DCCA1AEE2427E880019F294681C20117CAF4
40242028B32ECD592D3C114F4D142DCA53FE99BF9E76D5B83B7F70FCDA9464B9
980B233F41B6FEB9FA78971B73E5AA22B4AFE7BDB357E06FD42C77C7C41C084C
24B6EC79A48913A44CCA6CD43A262F4D04AB43A775DE88FC98C2839CE66EFBB8
FDAAA92A3EE6320E5F952925CF4B2769836EDC19404204BAB2A88D4FB17269B6
2B0A485BC196F1CDEED6ADB8B81A80293968F112BF233FD5315693F0CBFFA4DB
6EA3D26E0A39B61175DF0A1010FE5490AF4FC14C099372B99F7F5AB7624DA081
45733EEB9782898E6552002A0B37CAF54E8A06AAB9D388F95A566D1A1B4C2B70
956FE77F97CF4B66BF66F28BFC3E676564E85191366905A66FF3A40AEF0486B7
45724E4A60857F2A2B850FB064D8DC8D5412B5FDE721F3ECB14EC533059AD9C2
AA9681EE1933F1230E3A1C99353679E52C88D54585C683A0FF09ACA433251C28
772511AB9C668D1BC3DE5341C0CD554300DCB79BF86028FA508EA08521B0DEE8
5037F68A1FCB059C9AACFA4530B025B525FEB521E06B4A2EDCA0DD16E47115B6
C6036B78F50223BB8542845A4DAAD0978658FD4057155043D87EC39F44DD498B
9A2ABBD5C70393B9B0FD426E370CB7AF49F86B77EB77C505265AE418B37F12B5
CDD9C63B139F05892D02F9680FBAC2353C4E1BCA81CC49F2ADE09A412F7DCF5E
CC83877040DCB64BEB3E0A0D5FD35B09EDC1E6E870E2C37AFB6B198DBCCF38E8
90AA005CCB34433C44478AC43FA9ADB7341C91CE95562DA96A4544B9FDBE35F9
20374A4EB91C3D3DAA187F8514E4C01E83FE479A57FFF48BDA61859A9223E65F
46B361DC42AF1D6588CFB530767B1E970AE65F7001B75840782D0CEAAE542E4A
0958A83970B2B20819C87E06075DC32A70F10CBCA84D73B0CD9E6DB66F4979A1
C73E9CE4E8B2ED99EB20DBDA926368C9556F3F88B809C282A76AD6F3347B2775
59AB65F8D87B04C5C48741C21EF9B95B9072FA7AAEF920BEB502E2CE668CEDCC
607B36414A990E4C43B52954107C0BC41460B5D0609CF2D5AD496A91154021A6
FEB13BA42E68F4D206835A732A12A2F9F9B0AFFA7BEEE82DF0DEC553B7A38773
889957734715DC876858FE41B0281F6267A6287097F6DEB3B539B8D7335D204B
81284BF49DC86580119FD063A3A752FBF80C009DA8B0CD5EF8352A3B2C0C3249
870E1F82642B687E0179050E95AD49598230971DAF473A5C5536CCD95377E0D3
F3E3F701513207D9C72D6CD3ACA35686FB366E3AD523D81C680C621A29587179
63AFA5FC41F748EBC6778AA23C2B8CF0C2C11EBA62087467877B785B9EF307EB
5BD4063577E5396BDCB1C2F4268158593502CDC78A21147C1AE674458B8D566D
65D3BD2AFE828F1440FFC294E2F19B18F9B2BDFB518416B9DA6962DE8223ADC4
D21E8FCD58CEDD5B6DE63343D5766F45ECB609FDD66F3014B11E63D70CA13D96
B906A32DC550EBF77D4670DEE06369BFF206BA9A14F10D191C5C9B833F41DA40
D17653B80730495803061FE19252B1E3B7BA31BABB682FE69863D212CEDB2A52
6B3CCDF167D9EBCE9C9A46E707C2421019376164BF376271A365F2EE53BDA408
6817905C51D93378BB7FDB01CBBA97D10B6F0768C26FE373D95B4335D1865E0E
B6D9E1226327E34B1C1E9068C94E659C601110E6E51338A6918C415D1319B651
0B25D277FB5F3A48DF5E0C7F1C2F42580989B6F51BB7DDD2ACDEFA6140F3F788
22DE1A1134008080E970CA9573D50CCE372101E556DC08717B564C8917DD8EDA
4886335EE24915BABF20A0646C31CFE43CA6B7FCC57A8D4CAA58E1030BB3B9B7
3CC54CDA5327963C9BA0C32D0698DCA6734DB38A15E6B577374C6F891E998FE4
206B2389D03360B92ABD1B7ED7C5A1BF55A53C0F45365E6C07A6A308A9ABFBBC
611899187C605F91FCB501E437918FB0C775DCD68F91E2684CF94A7F3D90E236
700FC5C7013FA412BC21C334BCCA798B1AC946E1378CDE9462605F1D9B5DA43D
B1A04D0A8271D212587DEFF12DFD0C0431F6695947B37310BD7697AC087AADF7
636F7E878C0592C934FF2AC5B65943ECE21D9AE53BE7016386021CFCE2612B21
B964710FAB5599BF1618CECE08043B5BC7905DCA4C83973465AF30C3A401070F
92A3189AEA1B6E3C2F59A2706A342A9E60FA34E55E7D8EE68C906A74E7BD1762
D8D2E5727446BA99B81BF43D3D3BF07C57842269E8A3115B94FFCF3F62FB9A14
2958C6A919FEA02F5D20D2605E4AE05405BA85743F9426C284326BA0D4D95BC2
5B242C73A631A39F65AF1ABB6235197721FC55311DC9FDD0120E4BC7AD94557A
500FA4F225A3AC3409BF9A63BECEEE3E801DC4B505B92FB9B9F3351219AC4D6B
82E603A59259A94FA126B9D03C681DB0E3ECF6CAFCCA58AE39545CE9EB94C6C5
13F18EEDD05881BCAA85F3F57B1438CD3CF811A9B7270AC4A6F7CD311C5443FB
20CF288B149E773682D475A3FE5832D62EEE6AE9E96398EFE5F94798B9DACF25
398AD63F34DC2880A0D90C25D60065E5830272D819A09DFCDD2C6C2829087835
F7049B4C4D31FEDEA78674AEA32AA74BC4944BAA83B7587237320023181F7440
EC711165B5D17B5035E32169CBF9A7D897D7E9C788459B39B30321C6ECAE276B
63BCDADC2F038AF7CC9A7435EA85ED70ED5BA3E14DBF02E9DBAE487A89D996EB
82AFC370AAD61634282B469F3B39AA8CB829C9CF5BCF3A287BB4E321B1C31C34
DBAF8ED6CDDBE6F1DEA41F10CA0C98CC79E829E315AFCA84005D29949348801D
ECFC74F3865CBD9DF7FCDB799D4F640E9DFBA9626333A5265801CCF955C1E4A3
5ABD990108D3846FE48A7B088541F51D307AA464BF92321A685E9CD47B107087
3F9D80FD1AF26349A2D0B08FE7C464343EF743DFC53A62C21F705AA5A296900A
AFC1389261E9CFDA43BEBAA57C57EA9FB5A65AAF23CD267A00DC62ACFB2498B7
0CA4DD68C5F8527F60CFDA26EE3324D451960267DD3DC015029A4189E4F84A7B
1E1E3AD1380519B5616B70CEA9A03573DD7D407828F95A42883560FE9B9220ED
D1FB736178D4855274B83FE2184AF5329313CF4ECC20D0CAE12610D124265C66
7727FD982AB69353A95F8B10C048DB3B3105101FEDA3BCABAD441EAC54BB3FDC
0E20B2B90D707363AD877E9208260AE6AF24100E2B365BF89C5B6795DFFD95AC
ACE17BB106CFB76288C36EE1DD997DB4E2B2298B48B0536FD423F3B861C44251
5ADDF084844FF1B0C05A85EF2B7412F43F6225EFD82D88C1D80B65496853CE6F
2EA9EBE4DD2E4ACA345BB401A7B127F68F2914E399EE27522E182DAB2869CD2C
2B0F39016EB778060F316D55AEED573BC8C9410138B76C2521CA19B0DE4E54E5
AE1CB0DCCA479B18BAD72A47543D2CF6F424070D942A5E8F2DED9D6D2F6D2C83
2308E1C6E4FE33F2CBB7B239970D84136F49D72AFF42626C8EC72C05C7454B82
F991CDAF31EA079A2280BDA66B52594D58C5953C7EA0D0B1B51485F0997AA127
1EF351D758D345B8E5DF46680C4903C04CF877D7F0396D8FD86BA18B10EF3D18
CFDE548C64223AAFE248C624FFA6029ABA03E33AFAFD3B6F7C02C8ED058C7876
BE56D5B8C597A7E175B5B422414744779BD6DC562F97E2E6389542AAEC2E389E
9C3790ED94CB2CA47D39D7E56D258FD388506DC7D27EEB8E2E705202F4856F26
6F8271A242CE95C59417C1E72F93A0CC572CC9D1A75DA774A3C339E8EC0E12E5
C100581D114D641C614732F83B59C9C29409A56E87F26DB79CEF085F849361DE
030DF600AB13D46C067DEFC27FDCB5BA1D19DC862F93B03A24C94131987565B6
0AEBB0164D8FF30F4EE3D8ED6F50AE60AF3E00B6E524774D439910AAB34C1ECE
9D5E75EE053C7DC5E9415BE35C9DFC6B4B73490AEB1251C1ECC09DBDF48B0FCC
55A60CC85C8F1053261362802038B8BADAA8BD1DA7DF5EA0AF626CD994CC8C60
87C8F8A0BB529D4864BC37F130A8277458BCDD0F6FEE0C9B3B76B029D2DC1DB5
4C7DCB8D72862D87AE87F9249B2FCF932EDFDCDED25D994B25A9E343F133B43F
BA30C52CA8A503F3FE2371F74371E704C8F7037F433A0AB962F52147208D9F8F
757193371852BDF637C110ECA86E6D7058108DB19E070C3BB333776508F46884
3263A1D577859C49042A0C5FB4095A1B6EF1661A4DA77B723EEEAE8EF961E3CD
B6012C4FCA748915856FE50D442BEB8A77F9298A753B42BEC7D138B23DEC0D80
52661C9E566BC5BBC90E3E7D0330EB1DD40C60358C55E4CC8E22EDE7B3F23ECB
DA863AC87753FE18320B9E3451EBD233B80CF8D5AB370054C45D520EE74315B6
88244CA62521E760B6E0A4AD9D17616AF373FB4D01214BE7350E0F86E062D82D
9C5625449AB9103D21485C471CC0FAFA2CEAB50EEF79CE7C1A72558AA4D72346
BEAEBE004B44DB0B1A5F983FD3B2231FC059D035EF5F6704B0FBF632F92F8726
573BB524A147A0E22E36D409E7F908A1CB6B4E498A7BA86292FA7B8AA3866FB2
47E9FB01500448E7447559630FACA049EEF3CF6CF84697FEEEF16F2290BF3094
539BC11BAA9866F81A02BDF349FAB129F23E86C9BD62FC09E5414AA91EBD84A3
94F47883D04366386D92945935DE40BA681EA8787E7960CFCAF502B7A3066310
BE7A115886BA73C080BA84A84C9BC4093E2151EA61F538857EE8B74DBE46E94F
31CA3C2BD454C2ED823A21CC37359E62E494077A66B303FEBB2C20AB71891358
7A881A3FCF37B735173CD1C2164D4CA6802069AAD5DC5B67CC2131DC0609476D
7713EDF63A4ED45432B739DA942C2941F85E7D31037432C838B2732C78310425
72668EA0ACB4864161E2DBAFA96610EAEABD2A6E97F0D816D95BDA0BD99EC493
2E1CB09843818ACE34244FC1C48152CB31E6A8B9AF90B8D4563F32399BF70DC4
1E47B1B478FE28C2CF995DC875B949E8EC26D42716683876EE0F8E07FB898E46
B33A5B0338A896F9B21E122932898719493BEC545829BC2C9C99BE09D7BBD76D
FF4FDF4C1C0D8AB9DB1C4EDF7F1982539FBBD85CE4FDE8CB5211ACDAAF2CF94A
6DFE87F268414B07D42B6A582B13904497023CCCA2CD50E0F10EDB2B1940872B
417FA014E2F4D37D856933D473F31DA9A1C176FD60EB81149BB0453587F5F161
3F5F05D8DB94C306ED089525CECD505DC3DC50C01BD0C11909FDACE19F75D0D8
198C452AE08D243C968EF53E1F01952A82D0F430430EB587CC49F2E830D12A11
3FCDD0002DB095AE0A28BE4B59E52034DC74D508063DFA0A742BFAAEBD91144D
26AFEB983E71575A697C88125CFE99B5A0257F0D0E3595C2F2F772B9BA1A70F8
1776AC612FF316DB418557C34A04DDB1D10C03A8422764EECB0DA9385544914D
524BC93A6D98C83D321260B1FDCD89A4D12038527DD835D29377F1B90CACAB37
80DDA2FE8DABCC821BEFA442C8B70B371C8BB2E189D2526B190B3ECC0D968016
F8E549FD9B745C7851C96F7B16DF7B40B101BF33525F3E8686C44F4EF5B1F3E1
05BBE68AB22B87A7B6BF4FEBD03132F9075C271F205407839B3ED16DF3A1713F
7B08F91118994D889AD5E3D180A567FA5B18624C0C4433CAFD63636DB911D7A7
51031392E72B4651FDC526F6D52BFE927E39CA8DCE1B3DBDF6F5AA9A634B5BDC
28B4395C7F900C2AC7BDEF8FB9D4574698BC8D4E374F028AF7AB6217C9CB40AD
1A30249D5301FAF2F3A8597674B8101F29E047DAB64EBA1EEF9A63383C0A8AEF
61CED3854A48F885C501882D59C2CF49BD567588B59FDFB2A6AC8404AD79E4AC
5777D8BF9114C0C72423EB6E7C372733A87D22FDEE8006721EFA2329B797E1AF
1E95D4939D33020C52054F76ADC3DBFF65EE19016B50905C922E0FC274EBAC4E
AF1F31FD2889F302A9C5496EDAFD87464F1586DDC0A3C14544F068343DCECCD6
8EFE7B9336785A0F2C0402F2C03EF989F3177CDB06EE3FFCE2DA74C8D3103F0E
A8AA4602B54B7A1D2577F2B87868D85B91D2389F1C2E3B262CF45A6B22C8D611
0A670636BDAFD89171B3A6B28090116B562D19C251D0FC54A5030FABE5296DA6
8AF815B904519938B09747F2EFC98A165EA607E19B5B0BCD675BD9FFADD63EAF
737DCE1A9DAAB8D0ED0684490C619A8D931DAED766016F748BDB8EA194DA5864
148CC6D0F730416FC7940668F722EFB7E8ECCE37D4138083831028D8FDA30485
C8416E8156E83E814C7DF4DFE157A0FDD58E5318CD72CC4BB057439C03CB5C9E
7751731E820269E5C9D6102F1D3AE812694F637A69A84A663208CA1154002A2D
B1C9F9FF6A9DE9A3D778A6463E16EAB83B74C33816113602163D500E957D7591
699856E4445633538E2F994F235FA96862D6E547C966E53777E6C610CF7A7C5A
6AF81F6238F1912F06CE23D9B929E7E8CC21C7E560F8878D64D0B7F7B09CA3A4
80CB24681C6A11FE62CC244A90D39CEA3D28B6228A242BC2FEDB9E4593D1F589
9299B1685A25EB4EFE6FF2C9286B421AC8136B70CB4D978E50A8840612496108
48743BA41419B2C5AEA47D9E0140E2EF8AE58083EF8EDD463EDDCD1BC0364A28
9222E6D4251DF41E0518AE853B53549A6BD12A8C843DA6CFE77817ED2C862171
70C1889B26F538ABBAC7C4ACB29ED3C3092195B510158D8C0E0E37119774F3CA
9E7CAE25DAB4F8B42AA721622CC8601C4A3AF0171A58B943DF0EA5A8F262A2AF
D930F5BAB2D6F3B11B1803877676C07649CA8BAA896189B60DDB2132C6DB1ADD
F012449CF3F0BF7943C5B4CF7D33D444DCC74AEF729EAEF9F44BFE96822932FD
7BDAC5F82408AE2CFDC4777EB281B2074F5A123CB8C7A62F57A750C66E24BF02
6E2584B05EB4EC257BF3E0C1C5602245A894FAB234F471DD2BABBA8D43956CD7
8E6C63AE14D7B62814ACE9DBD58150157C64856FA8B09B5C3E973F69EF7A9807
7963B5017C7EBB3D29226084B9ABE03EF7B5DDFE6468589AADF921AF5085BCDE
41BDF9134C2DF0B66FE3B7A59F656BED4209562076442AB39951D5F71A1DAA0F
D1C0239051DC4AA3DAC3214D1DA4F4C51CAEF0615E3284B4F544BFC85F781ADC
0FA79056170F697E088ACB6FAFE905C803AA09C67102F8E00C4A026AE47EF137
9BF1890BB2E86AF33F9A1290E91C46383F45745E94F33981E749370BB0AAA3F4
FC5CCDE76B864FD98AB927E9CA838A9BE4F921A72186F90E6E3B5E074C4DAACC
8E57A60A342E1C8FFFA49408DCAB3B2B7D233D68C4A77BD3291829A64F790E76
FA3B09F1E1BE0D811C280F8861635A415B67B9A522843F90601DFC9A0CDAFE74
FD3885E1331EBF42600250EA36CAB1E4B5C0C75250D59E728D9E330928C1E5F8
F8C75080169F7301CF3C4BBFF09A901AFEC0709D6C3C39FC9A15AA5610C82FE9
B6F9C2CCBC0FF2E710146CB25CCA9AB463B9C5500FF2F234B77C2ECEA1D2A745
61ACF56B0C0F639C80B7845B1B65A3C2362DBCE177C3417ADE393739127321DA
36B17B5C691FED64CF37966812459A285A9E7CDE0A4687DFA328E4FC4AF6E619
E27C48854B0026A8AA88B823F55BE1EC85402591781C3A2705DF6218D49B75DA
6EDAB4BF85E06E9F919EB5EF964EE3FD4DA35CC169AFD69C818410A1E95B3BA4
EE2ED540C9EF83F55A1DCA47451CC8919DFF8D7C682D9409756BEB1C5D71FA6E
6D35168F1F935C27DD9E5673ACF25BD60363B0A0B9F2C979EC6473443F9C36A5
43B270556C1EE2C303A527A46B56355930F7B3AFCE68ECEEADFDECED307B8FCB
33A871F20ABC9D25F28534423441BE75923794035C928270BDA228063C4936F3
0929B0DBE87AE05AE418048176CA678928F9184861E58B1CD606419D43D12A30
D31AA9FF33CA9F9C8E6FF154326F7C3655261C4AD986D631F172CB2FAA0C0BFD
AD40BD3AE7D647B0FFC92EF35A93C6DF9E1FD89F2F8CEEB870C409ED13E78B4C
9F81BD78FECC74DAD0DFEF443B395C94C477E87B645C9649DE698D153070DF96
140E8F4963F51A4AEF8D56EBBCF1D79A4F4A8174C2AA327DB96098887D3918F1
B0CDB477A2D2ECEAD9BB8759A26BACAC5D0C9891C7679040B77A15837AB2264C
D7BF86999531ACF80674E0DD3195BD4AF65F0D154A7FDD41ACAE12434BBD45FB
2B5FA634F542804658AEC49CA90FE476B0E5EC1D333B0D089E6F336AB5515414
2632CAC1B4A3786D54D5F56BBECC58C179FAE1F3C18ED06FB7BF26299ECED602
CBA338A3580225CE07978539199BFCD1C4FF3CE4851D494EF97D357057B13BE8
E9D19845D63A6ED2CB38988BA640D58DE8CE8101F2482420F2CADAA3BD67CD0E
7937F8618D376F699F15D8702CF7B2160A2E4E7336E661FC6E4FEAA8BBC31888
6A33BF3FB23DFB6509D4E08748E624C86DE6BE1AFC4028F57F2A241D783908AD
56EECF4C09B41756481D7AF31066A5CBB86A87D4C57E549D3DD9776FCED36FD3
3CF753900148D5A464D214FB66472621113A58784CD509F99594814493164542
9F6E711C14C8371C8864425338C6326C241045AFE8F910EEFDC8B9F6BF2313F2
1F721F75CAA1E4FCA9D33156E3A76B45CE93813E445DE8027E1B0B5AC9076C21
AC751A93480A912B488BB9EBFAE28C455A7114A4AF8F73AB49E99ECD4A4F9F6F
6D780E64C7B8C2B1375AC12C4E3A0CC950BBED766FC6160B5FCCA002300DA9C5
B92A11EDC335D079E6ACC69BD64BF071A2E2380A1503DE8EF1641407D8477D05
D027FB4BCFDFA6568CF6390B3019B7A60E0F6FE7D7D65F2EB94F7990148D36CD
8B4AA143D2ED53A9B2D2762E11F864DCDE4ED63CEEB367F9F821BC41A7FEB9BF
2AABEBCB954BFED808777D2040627AFC82897B554DE510D2AF52CC2C7CE07478
9AFE07857CA76441D239A5A2B5ECB4A36A40DEAF4B0DBC9D59A559B2BDBAC48E
AA0CF06C0A583F692B0FDD0A5AC9BA68DC47213CDE3086E3B533A5DAD6EE5AF4
36B7DE1C16685B030B7E8A14A0D2B6615C60A40BFE495B58B6FE3F2889A00E1C
88A370E1AD62CF483CCB9E0B35F80D031402C7ECC13A8AC424553F137AF0D768
D30B369C529F9652BDD053FFE1202CFD020A6F63D1CEC36D63E60F77F621292D
2915B03068667508BFB96AD4B0E2D433F2CCB44BF941B10A0E7ECD11AA4FF54D
EF798007EE0CDA0CA99B5144576E17C2AE2A5279A3CAA3E312BA482B0520835C
F0A83D7BC9EA53EB09C7821BC2D456A6C716D7F355F7123EC1F23CC91A6A19AA
4D48FF051B7EB67F9F479AD3612894309F1DD1E833E8062A9F9101ADD125A321
95B8CB98C9B19235F9CE18EF92110DE83CAE92CE11465828F27B526EAF33A50F
3022A0E7C1503E9D4E483D185C17CF5177A73CC8FFC10EBC5A34EED1DF0D272C
713BA3B616903678A3833636F8B33B0C66ED837176BEE6E6A8F6BDBC305FA06F
66D2F6C2A3A0DC334616335E5AF1AE9BA1F75AB5B31EB70F31F472166B18FF30
E1425EE578CF00F8785EAD78F90A75073302BBE875AAB138E21F0E5C17AEFA82
08406582910B81297027AA56C87278A53DE98F69670494F160518D98A116DD0C
0D839B036AAE26150715BEE977FEA781C3B8034170F9FCF6324AECC25046114C
389D7D9636805CF8C33334E27B52300EFDB9924C60B7575B1CE1913A21F06F84
ACB4D05C25DBF1552700B73F6E04619B81578C0EA3C3A72402DFB9B35C8E562A
B66A831D89D241613946E097CE77A82F68C92DA11A6F3579853832A0FAB421DD
0C94FEA80CF0B4EB9243386B70D2A5635116C02BA07760B668104F6AA99A8029
7F4A094F03978B68992DF55C08317A4D56166C8213AA69DD048C4FCEFC0BFBD0
98994ECF216FFD1521BDD1387351F132628786B0770966896C90BB3CE33F9699
7BDAE4EF14F9E60E487517C8ECCA81ED1DCF60CDABE211A057549489EB815FBD
E1DC64691C3E5A6DD7C5C49622969F5488761BF2229D98546B4D60320FA0F0DE
F460444E08EA8214CD4647D62D216E540277D26CC7236951916902C2CD37D254
925C8492A676F6B639809B3EFEA91779D8D31983B6A9DB00F59D4B5A63191244
5626E5724B162FB38A27947F73ABC44D1DB273AE5E9034052283EF46C9112242
E0BA2FA4BC0C1E7A6B6E3919B677C2599BAA2696DDF00B27D9E1AA2D9DBB1389
EF28815477997EEA26D31D194DA347C0CBC91A1D5187F4261444111E1CB31670
2DAA740300CC2654A2C493543E871C435AAFA50BE006DE128A8A183E58E8DE40
E2EA3D477C0433ADAD9AA04C4B6A9E56344507DFC7C50C613DB4F863EB2C0E88
E8A8554E0365188450FD823E7570096F2168B6852B84A789872053E993070158
3FB3BB1A1DFB78BBF223A60624E11300A768C5D30AEC5D89C9F5E299E0C0F7F1
D0C83ECE888457C900E82C413732D702B6D812D8E1177725E4F0DDEE18080D23
859E7447CCC392E98C29986B14D002EBFFC08628185D92C9E86A1B4313B3C118
C2BC7B3A4524312B3054781C05A71EF8FC3F41B1498F2C74BB9A0ACB0EB39DAC
44808F634919FCAB7FD694A528E49E9D1D3B0CA76E2500DF484666287E462782
EA0F5A6889396A4489D046C32FD5EE2B98E0C1D30AF2F4B677D1DEAB83F49CF0
37D3158661EADF9300AE63A15A7D983219EB991B300213F5CAA3BC917668432D
EC0053CEC73F742E075436749B7E9722D2375CB722F10E3C6F192306BA045FF0
748B833C91D3E3FB29A8D904D02BFAB883076602733EF48BDB10E5CBDD299308
56F063A068A1F4E5208EAC11593C9F26D9E7E76154B10A5FC990066F9FFFBC83
CDB194942113C4C87558E42265A8E189EEF8AACE2BA9A86A1DEAE13F9D17CCAF
AE1EBF87F75FD4FACE99F2C517A07D5CF58232B98AF93FD7D193649511D688BF
4A4D768DA0F275A4273159EF074905FEB993424FB4A58FE5DDF188F011DB32D5
B5240EADD9B21BC2CFB46A86B89C4E827690BF7B6E45B4F8674A6FA270F14B49
44F274EE018B8FFB0F430342E9A29FFF81E59CF308A0BA859C99CEC8F94568E2
E17613658DCF3506FD4770918757F564BF34C783D8B7162B0D094CB5DD44E6AE
702FDC9D3AEA801F25E27E850602B6815EBC8B2E47F80647CF6FA05F9D6F9684
60AEE68BBA7B44A536C51F3DA2BCA08D51A198B3DA57E85C9C51C0B33092070A
EED0706E83E9C3BC6CAA22BF3413FB84F35B3C00375095D76AB986C6F03BB5F4
8E5DF52FE36CBB9AAF6B921A7BD81CD4C0BE810BFE4398F80268BD269E4CA2A5
11097587B50CEC70058D312D3E8078175457EC6F8440BB2AEE74C29CCD362A6B
1DAB744B42F459F52B7D7C4574F0F0515712E04A3702FF1AC28B04BF3DAC8FAF
80A76343B35EAE532419A5C06831964ECF32DB9F9D928DFA21A20E947C200A1E
B32924A93AFC986C34C0835BCE713BD6A3071152823274A655C6F2172D8DE4DF
49ADF051E23AF85329DE60F44A3E6DC42759F1F6A486C80226FC7F1A6123A48D
B6D3519CEB733ED58E344E9105D9B163C7CB697A27E092BF8FAA9CAB0F4A2E56
DAE4337D90172DCCA6376EC5A1E7B2B36E46818A3EC1242CACAD4D40E8251B82
8B5BC88ECD183315657D735F2AD892A6B37B684187328DF1A498086CCE1E87A9
43572F8A3E9B5F81CED307128F7F523149B24460809E7A442070AE47CF016E3B
3AD1A5C090108D4964C7FD5E57B410F56DF6E9B62353C3A97B9BC866CFBD491B
08704C6F12DCED60D7967278469F8151750EBC9BF2355EF3F59D4F0554B9E985
55507F9422DFBAC2EA874D558B0F46BA0B3D9582F7A23284DADDA9B1AFBB80F5
A0BD1C7A2F76A7E5A2F472BAB2F4AECD6D198EBA263056B5AEEDFDEB498DDEDA
95AD49D2958D1F43A3CCE7B7B9DB269FBAD60A30BA0F83A021B9E3E55B3ABF6D
D4AD66FA521AF1D071E96A1F9BE27CD71CDF37A945FDDD071A0D756B5C7993A2
1BD8CDA5E62DFB940A1A24F3D5BE6CD45CCCEDC62F90BCCA48CF7562D5D69CBB
A4F21660E0A95A841DA17CF05424EC1C28487B7D93628E039E14526B19E4EC13
F8273CA887AFEB2E05BB7966CAD0D392F07923C710F41869047B158A7CBD9C4F
1834FA0F151E7B2892E94414ABBE946E583741122907F0A3DC00C10F078073E9
0FBC9684C39B161412B28D4DA44C60ABF5751A90099A4DAB23CC93B2C6F9947D
613D7508533669497454E52766AB705B0B8F66368300B9BB455AA87281FFC0DE
0295595C1DDB19E4B916CE4AC985BA6820685BE06FD62A8FC361A47535286F10
5FEC8DBF2221E432B1C20CD382EB8EEC2982333428081F09F426BDAE9AF86A71
F96165AA3EFB39B7B13C5FCC011F38E34DEB17E5ACC76D12FCB66B4CE9040608
5978F8EAEEA9386E52BDC980CB56870EA2BE9D0BEEBB91356F4ADBD9CE9D0C0A
4050D019827216CA1488D2FC9DC8C603A66616F6673C396A8F1B3BE2BD081CFB
9BE57CE622D291FC22D2B2E55D5BA1FA8158F8AA6718C2ED4A2E0C2C54C2BD50
E1F17771EC28EC031D692A19DB2DB8A458244C3F2DEFA6365ABB158BF01C7E08
578D867F27B3A1A3F8075FC5AC38C955D3C0248617A7ECB24394FA5C76CC0D35
52167ED72A65831C6DA31F7D92C87DB57A967B9736CF8FFFF663F42648567DE5
96269C90FFA27C5A51513DF558A8B499C7B61588BF5B7B8DAF584E040F89694E
7E7977975282962120BF9185C94F47EB00EC544A2B7421AEA5AD7328CCA5F07C
042C92E46B89D6A8A5DD4551F6D8F7640542184286F02E496E8B60B7A41022CF
E04283F4BCA5D04EF4625F1F84251854E2CF583E8C465362CA8E91B3C7599437
97C24CC83176CE2C66D1DE6028AF926E27403033E2AE41CB905AEA0B1987CC6B
CA16BEFED5CA2206AF0735FDA1ECD4B5C158C66EFF8D87B237C1C5D37A94279D
5EA776EE24A4CBB9A0A697EDCDDD4946C3BB844048F778E29F2DF95EB5EE23CD
91DA1CECEC651B0D5E120C09D37BD1605AFC68C6C61B7606A35B7BFE2FBD4147
6A887BC494DD0813A44CCA6CD43A262DEB59C953AA3EA5788239D1FD4176B9C3
10D775443685A2782C3B72529D338E22402A30C823DD655DAC472358DF8BE1F5
618CA219210BE64E980388B8DFDB208F9A0572D39D2EB451EFDFA251E9C4B888
392C07F151CABAE423BFB3507B5B5DD834C67160287FDC43608E195E9E7ABAF8
5031E42B976BF76149CEE298FA46B57981087E340EC59865F8697ADC8391728B
5D0DAEC2FFBDF432F8A65271010ED88BA5053465DD483F36AB6A169951A878D2
FFC9AB38547FFF70A5B6DFBF7DF68BBFEE25456BADC31A49EF6B051FBBA7EAE4
D5967EC3646F547C1BB5DC50F0A485A80C440A6FDC9D19E8E4F78CD805598AD9
8986C98C3FFE0E0D5D4EF5E4BD8A5B894D2C4E3C2722BB296CDC0CA5E3B3211E
20F739789086EA4BE455FC5FFFA3A5D3F6DE9C0C761E7D5C5329ABE1A153B16C
84D37A6C706D4E64AB2F9488EA7B1344329A6DE47FD59BF4A29B821FA81ED58F
A8598C55080A06D587BECCCA9A75E08AF06EE8C9EB3820144C7EADD2B727414E
AE64550DC3DFD8BD3C88884BE1A23CC1D66528B801B90B53B06F23819CB4C1EB
4B417A21BE154E5F268F21D8A30E825AB46FA473213D474C7D71AF080DE6F49D
4494A93081D9EDC3E6F33C0CBDFA4AAB10EC41BBB65155F6786FFBB998B51757
64E68AF9FE2FFD5CA7A4BBEF977F9C78F5BB0972C50CF4E76121618217038D0E
9BDAD32E10DA7F6F68D77D416B0DF038CFAC465E3F5A9ADF8F984C6E16CA3A87
9C7C103FC9C4FBAE97F52C961BA3A27EA9AC00C0C25D34BBF540E99D2C1A19C8
0165613FD4BC6CE42CCD901AED4910709372C1FA8DA05679ACADDC2867B9BA17
35E4E0555A5C4192B6FE5E9246C0118081A704AB0A86ADEEA94D90E60583163F
8CFD187B3D4CFA32EE58E4A05EF150A8E7026A6B5FDDA6BA17910656948887FC
43B114DC87451DCF945D4BEE5A82042B746A9240D5B62573F9FA72DABD6F0BE5
2F2ABC4240CDC4A30790A98F2ED8F648FE2285E3198F417DD80141CFC69B62A9
EA6B300D08E8929D7014098080A9D0B7498F2C74BB9A0ACB478A992AF2EE0118
44C83A075DE391A8007917ADC7938942B667EBC318A717CB47BDF8AF9B43D645
218D8042B0BA08F9998AA0FF1D6E807B3D4DF659E6F7F57BC58432C12D463329
0BEC74657B4C2F53C1B5DACDA40C053B405CF97D19305E964A58E1532DACF528
A2F998D9B711D0DBFDE94205CA706005B3B61C2C8030D9766918526003B04D06
03504C84A6B4DF2B33A6DCCFB1EAACFEF71FB6BA29AE444274F7221AB35919E9
E4F465753B660C39F52FE0609FA7DF61DB5F15EC186975859E069F70F39E6AF6
51D9F7ED759091062EED2A868E004E417D816DD6B503498A3906733A92966C2F
11E260A5524656A9A0A1F48BC56E6D63DC99F2728F99C9484517D7C558C8E916
6F77DA0A0ABD46A72802B0912C5C20B3BCDCC053DBFD82DABD285F4BA6FD649B
E24C9024E5A1348DC7B8A9DC585475BAFBB0C2CC97274C6E5C643E53E9B1AF63
2D79B82F5F9320CF2450270BB75FF3EA346BA50264EAA7936BCC14BA9EB4B019
4D0586601837945505112BD7326EC4D7384A9D9A09994282B995485CE83DD7AC
E0B4DA4A9A088196A877CFF45A841E69D472C0CABD9FB9D0B182D5559EADE473
2645584FACCC8F3F77654D1B1D39FEC282FE18E65AC702828AA6C3680E97E17A
2DDD7993658906FEA3E72C5B51ADB930C595954F93BE8AFEBE87C50385D3C38B
FCAAC9BF900A8A6A0B93FD796DC88AA75152930A9AB6A80815EB8C4702F89F66
0AD32B6D8FF3C9261819603A02F6187E305461FC059ED1B7F705137F4BC16CC5
897534908C408C6626DC38782F03B3D11AF2FFA63D64A1E36AE56EB89356AEA2
9E2855322EC3BD8471D2E993F52957AE43C47C3EBCCD57F324D3A2D61EF2B50D
17F37DA5CE071C72DC7A9F8311F4917274E3D2D63EFBE95F32D4B4F11DDA428C
329E2CDA61D7589E80F0F312628EA9B05D4833FA0C06E77EA1F9739D0EBE62BA
0801FD58C7124E8AA0D01CED80C9F27F8D0E4B22C979E607AC5A2DFB2C53C267
4C81B7FF428519CFC796E1E293AC9ED59C7EC2F07A5245E3ACACD6511F7BAD50
736D3D16F0A75BA689DC4CD0A970AE9037BAF2779E24512F0AF47B97A9DE4BD0
695A7352BC83AFE74A465A1663101A7F39DDE70CE3E5D7D71CF197674C498BCD
8C2FB2693174D21D3E56E373484CD1C054CAA5F926B9B2A7CE78DDC6A7FB26CB
5BA8A57ECBCCC725977BEE53704CA3FC78285E4CED0C25D34DE2A98E6CABA2FD
F59F14D3B913E320F93D56FB5B10A786801E9801494FBF70ADE8375C075BCED4
89490ADE623FD53D987B439A041762F1ADB0C0202AE90EA22F5A1FB035A55052
F1B5DCCD18F7FE5FA60F8FA1F791385AB934ED2C85BA333F36AF9280B5365CB9
DB879CC8667AFA12D9D5C57281CC47072D4D6F088082D6950D36D142DF06F358
2168412DEF9A9AB99D409D88490CF9C09138AD1956E9F5E85C664E7DE2F9716E
F31F0B17682DA7B8CE677A410195C36715264AD460BB0F6505F78E2E1A618350
DDCE16D874408AC9C3E5DF8A5540B14FF649EB701A213ABFCD55761B3926B977
8EF269E147231BC991B2A0950DC211AEEF629BEFFD52396CD807386D60D80A49
19570B8F6E31FCA9AB604F23FA04803F1485F9020B4462B33E8E920D7025FC51
CE421CCFB2B6E14FC125B86E6B4C0907C589D48E0D2996EF1542D23B4C2D87BE
7569356677D15467C33ADE345C6AB919839E8C5927C299D8BDABF084FF4E537D
8D956D4DBE5AAAB47FA9DD6A40740E5D3EE35FB61FDFA5A4C7318A4D6B232229
800076D2B9BCF86013EC925BE8CB3F327403BF5DAE1E31D36E10E470C6719BB6
ECE0D92730177CEA7B60FAA052E42C54189F9A03C06F26D42483231B5DE2BBEA
41C11F987B1F740EC34EA893A3B3D4C4B11D1BE4719F0E7510729A08B0EC022B
A1484F17687D2F390053350A9FBDA06E03E1AA0662374BAFBB7D7661D5483798
83FC1D6B88B92D489F631CD200D347C24A110C761F7569910DC5C37F41958C87
C439A07CB36B087A463E0D37195A28949ABC3C07862F365F55C6309749F6B40D
DE43399E6A6918A8871950CE2620F424D0051F7515C58B6C21BF8BE6B1756F3F
060B0AF88B92A1D0F588A4C00A899DB26E324CC1A19712B59591729BE5536DAD
B44EA4A600E1A2E165C483DAD1745C5651CC28569AADC1BD72F02814E5217179
58948353EA8C7AA2DAD204076F8CCF23A81CF6B0D58F08AC4AF9A011714DA294
07E4BA750A5AA0299C9213D8E0FC90B2198C2C36A20DADC3F29C3C1EF8D90F39
B8874D727AB78C2E033B214B59941D37BA582A4B7423281FCDF6C1C7CDFDBF10
E8ED180F50DD5FB1A3231405F5ADDD7AA5BE009A950241992A1F28B5B7FB30A4
8695696F8C0C2B32038976281C23AB6B8B104ED3A9AC9C7CFAC8CA56E2DB48F8
AD2253A517DC995D8F9EF31801F64E5B1A985343A193887404E2939AF0B8AA14
B0331E13A6DA34567B816913E77E9C340AE61E4D4CD6F5F20DA22F97292D91D4
8ADB226EB2B96427794F1F06DEF6846FD572A975A6D610C0978F95CCF6AD251A
65017A1F5D6B225A35923A22C148FFE6FD00D74F535E97087328F352A9AC6301
D08EB9836D95DA209F143F92A4CFF2B293C1F2F885045A50EA73C8DE1E4E9709
F52B3A0F18786071FE57304A4653F72F9FB3F04FFA3B27DE6761AEAE3B9C3F8C
F3B9BFF4BB9603A62C00F1FE6BE3EC07F6AB1693378BB90F1E76B402751AD017
8BDD21F32E58EAF3AAE840BB975A7BC72FCA641AAB5CEF6F85A54562F7F4A488
9973D8669633E05B89AB7E2D57C5D0017F632DCF22F7A2DBA221FD3DA515FD23
227FFE6009ED344479628EB062317256E325DF783A154F370E5E2AC68722BCA6
00C6C757576EA0E465595B31D967518F9AEBE870BFD165F1AA3ADFFE8226171A
D27E25293610C61C895F9C7274BEC0CEBE928AE47631AD00DE57B6054833F913
45BEBA6ACB55FB438B2B27E36AC44885D5636832319888600449AAD05C9CFC4A
14836D12E81B541B9541D60DB921C27F099EF335AC666EB364AD7BF583744757
D1AFFA90845391445AEB84660374CB48DF1F8823CCA8249BFE48F21F6E2254B7
4599ADAA95B041522CD6388F012B26E679CD44351FEE3F8A8AE5E9C138A22AA5
523B69E2CA554705D4D9E5D1CC13BAF8ACD0045589A7AA9AC8B6930A45CA9C28
32071013223DE54C805F3E3187B1BE5EFBC303A16BF27BF995B6E803A0A99CAB
A8E0E63EEB47A77E625D235D36A96F56097E55AAEB6CC057307DDC3E595E5257
EB0644D8DB402E0014F78C0C92BFBFDCC4D287931F2478B583D2947F2AFF2EB0
5D0667098B9D61A423F4444B0F7C55A0B48BE295D25B74F523248B1E8A05552F
4A5DE0E71501C92D27029824F0EC8808386FCB9D0911647015138A903540CDB3
76F36CBF1694BDE51385B0FAD31FD740E2599E510AF6CA88763A8CE431C10BB4
D94A38436DC03AF6C631E8C95D13E0127C8DC6BFC56F2FB48F5AB66B2F202276
A7F9857FDAACD05330F97AFFDDACE8E9D23CB12254E548F336355E2E4ECE098A
EC27AFAEA94A810AD12A1B21556D0552650D8E390FF51F53A8323F9D0A55EC39
C81760452C29DA514F9D7F2938C8EA0DBC0E751FCD129CAFAF04E24FCE56372C
316A72B97955C528B1560B30D6CB3742D4EA33FAD70D272ECA0288D74894A93B
8C89149E795C54F806D08D88EFBCBE60B4A83CC1B8E696CC0065B269ECFF1D66
A412268380BA0B88FAA3D1A4667CC9A1D294C0644898816AA1B60324AFB6A6AE
8BC3DBCEE831F1BDF199BC1D8766A4FEFD11DE717BC604C810B275FE8A4B4FFD
A13F968BC5D14437EF66ED133ECED633BA4199C2D9291F8D89CC52C763744B9D
B5E84C9CF0294C40AC1CBBA7BDD35F63D12C96E8D5F13BE966A91706DDC9ACA9
6F9BF603C7FC57A88F9942E2F6DEEE78811B06ABDF13B37F9CB39B5028FEBC33
1D2A6B274BAF73992C3D43CB1C9B1BB874B4B0DFA916323398D5BB15862154EF
205D66B30B8B46147EA1144A970FD8571DC47636F42D967CE2E670C6DAB7BA40
5D8D48CB838FCB5C8158255809E8B612DCA9D78C8DDE4779AE3762D6CA0A4B2A
70767814C9AF149C8B531D6A12E0E8CE96F76D52779A17F0FC8E0537DBF48609
2617AE08BBD033817DD8090133A137AA41B87D5D296707760ABD6377D67E9F04
7294726F422F64ACAED0D0D68492768C7F9CA5D2AD6C2C362FEE63F0B3044777
1ABBE31925253A2A43CC11FD4AC59E86BC92DCD830A215F986DFC5B692772EB7
EC2F517C862696AC59AA870013964252D5266E6F6D946715A1350D15ED31C313
1692DA9714E9F964A87EC689F763DEDDE186300390AD240AAEC5F8F017DEB2FD
DAD45C5EDBB7EAE0DA4FC756F9CFD8FDE80E499B5B8D5F77AB325AF19A6E3B17
45A114FD075C19FE6DA3E9BE2B644DBD670625C2CFC2EAAE2E2A2073B56B4114
FAC2B77F7D70B8DD93CF4C535D31906B48AB51FA6E784CFFC2A59A0095FB4F98
3E1EF1142155DF1DA462E418039577CB68531ECE474BC693D174483D779981EB
3D0063D1C5F4E20605A32152DD1B07FDD26FC729DF5F4CCBF6F6F17E95F7801D
E7A886B043893B64684843EB35440ED4380B37A0040EBC733187EFB57BE8DB69
2CB023E6BA7CC131D45C4DBCFF54513822A58693C48FA49992F178F3FC285456
F48FD3EE006902478AF0322600084CE65FB9F38F17E387705376306E9B74070B
63DBB846DECBD13693CF2604C8DE07C6DF40978C11AC402EF18CDA227A404DE0
705746512F654025BC32B3F858816ACB57F8567EED93313AD02339F5653F1880
D27C0F7D73BC9A8642992545905481AEBEE6252C1DB19A05137B4E64E395E6D4
D00077ED3A36FE938148944B1E6CCB758DE9327A09579C8B61790857547CC371
2FEE87DF4B5716F04A9F14324388782D83AE1DE8A48493E8C718FC66EC7E0BFA
8BDBE0639A248CFE79F004AF81C8F3568DDB8D8D0A49B9CAC411A8587CB4E15B
231DA96256A9C8141D2C5792187B72C0F103A8BA1DA75BABEFA3ECBE6ED09E06
1240B40C6678734197582A155AB9928BD7F78B6048CFFDC9C7804A29CB7BFCF4
863DEA8C91306FDF35AA59D65A8528D9CC0F46B30E8BE4089C8DB9F21E0C9B4B
1B177A94A1FD0C53BFC1D93DDC94B31BF789657B7BBB684BA4AAE04B8BE71805
A199EBB097ED887B733BB64AF5591B6A29CC7E50D3622E9B25974E7E211FDD6F
FBD070113134B09F1C414EF167481A4A2D25E7534113714982A349A2AA13C3F5
DE067C87A4BD53CC4955C1DC011C272BDDA295FBFA52C0B15EFA1C577B00058C
420F0ABBBDA9E1491B6C891C678DF4851784EB30CAD632823E2BBD4FE5618230
6A445635DC82B397766B414A05586DC28FBD337E2B0FE24A35301B270C5EED39
75629494028907384F7F2E680671EEFA5D205A09D799732643EC9FD9A36B8671
BB8857B66FC9E42278F20386C3FCF0848A65F365695B5779FD65B76F730172C1
F923E05F02B414F87D4F3AD4F4DAC719BDB5DB1EF8B805647E92468D3220AF8C
1B2DDAC5BFEC3CFA51E75F4F67F14D6C385F4C209F273093A4B017479B5ECE76
B135FFD7A30C3CEE4348326DD0C374AF10BCC800511D465662FF5016AE31E725
BE5424630E6742F710C49F1049AEFDA79B54E14B6FD324BDC52B006AE370CE37
63719B68986BFE777D7B7BC5C3DDC9425E2AA793546789E84A2FC9A1DA800EBD
B8202AD3F3CC91C40750F218AB621544353E5FD703F1CB65E8607343157B63E2
35F6DC35098DEA7E69B32895F817F5A17FBD920C01DA74477AEF47CCE32031FC
FAE273DB509023BA2F9DFBEEB3406A2F1CD9AFD0CB495A1E6CC7D1FFDC567A97
A5D04FEF44C54D22475CE4BB78C9E6D957730B849A1D0B8341B926B136337E91
1964060423142DB12090B61933124AA909DB248E8D2CCB665E7AF2FC24DF5292
D16E9AF5527B40595AED6862DF1C693C76A35FD3D7A4A095AE3D2EE7F0738797
D83D0A1DC6337B0A6A0EAE82F88D46712B7940473457949C5C1D09BE0E2C131F
E0AAB2C39AF087FB7D928C77F202487188A7BAFA3BB5CA7D7FB17AF972C4092E
E381F8BCB347040BAF95CFC3542D828106449CE56CB6CD65F9985433A33C6CCC
8D8DF49EA66417C0E496AF5CAC23FC033DBF62D062C2333664DCECEAC8669F2A
A228FF564DC9BC283AB4AD12B654748C03DC3414A0EA65586F3C7FFCB65A89BA
EF4CD5A45586C864FA576C3DCE16893D093914B53B2CF42B82DE586832A690E6
D1C023C9E338FD0D55A3837A320CA72C30E12962A0985EDCA4A6667BB22C848C
410CAB29FF5E960CF2E7F2398FEEB2AD0E99A678A12E34C6A7ED4B69E23BE79A
4F435A12C3BB07514701BEA729408B0B5E1694E10A384D6F2C1F47ECDB8DBD13
70514AD2A86B250CF2B90306CC8AB88F2F973479E410487CDDECF7CF43029EF8
988490903E6CE6EFC52FB6A986B498EFF474E883A61C1EE29584D29981554186
C3D54C2F08BA5E03D72399A74C6FAF21DA2C59E92CF731348D0FBA86D01B0DBC
3CD3D7AC7A2333AEEDCAD2EC2E5B73B427F72EFFB2FC62A1AA953D72DE3F4F21
AC4BA984FCECA251CAF34AB621D193A99430B96076B88712FD36C85273EA509B
F26CF1AAF714E14901782DEA8176B0A0AE855F34D148E581E868D7471AD16F9A
EA07543F90EA495B4C1564F9AAA82C1BD02954A5E6F14BA31AD32E44BD269290
5AA1674242E0A39B23152492ABA740F4A3E40D9A23C4FC57E170E61E6B7F4BBB
963439A602F41B5B9B5595F01AF980248B0F8F2D80AB84D03E7415C80F013D73
00C905AB452642D5986CBF00D4C0A5079AC58748DB1DEDBE17859A338B4394A3
1F509D8317E49CF8D910665FFBF395E12ACBC4D33DA48C69F818CB504EE9C254
19E720EA05CA7675A6F1A150CF000FD74A6AF022022433C25BDDAC12557B8210
A00928670437C40A411B15FDE842AA54F70A9389C462917F87D133158C5B2FD2
4A66733B41681EEF2DD92309CE630913D551DEEAFFD91BB1C9368F88F5B4851F
6926614316DA8C800B157FBE336E30517493FF7BE6614951BE48C3686CF72E98
238E297EB6ACA7B08B446AC9E607B1794F72FB6A577B09D38290380C9EBC8B4C
CE94989AE8F0A2BC871A5695AF280AFDBB52DDA50A93489BBAF432930D7CA2D3
967C70CDE1994240E09CB42C7227361AA23FC1892B9108E626751EA9B29AB964
8AE780FC87CE6890F9DA6F81039EA65207730ED561B23B0917E31E7B31834F4C
A5FBCADD7BCB74028A53077D485483EB8BD19FFD9B0B1D053B2DAFAB61188D10
A28BC486763BAD2406C90C8B1896695D789B1A25357350D327D84F851E360E4C
7800AD5CAA3FFE027EC85A5770A26A57B9A634B2E3C8C38C38FEADC87DF8209E
19A5F298BB88FCE657466E5D23FB0C34D4DAC6EF8787CA8B225B427932DC4777
9922EE80B26A01ED55FB41D7ED6C1719B0708A5E9C4145792F9789C154AF855A
6E71A2351B9C7A47ADDF0242A6A359049EBC76A5FFDFE02DB9BF045E258D2C5B
F025FA7BB2CDF7FD
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic12-Regular
%!PS-AdobeFont-1.0: LMMathItalic12-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 833 233 0
%%EndComments
FontDirectory/LMMathItalic12-Regular known{/LMMathItalic12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic12-Regular)readonly def
/FamilyName(LMMathItalic12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMMathItalic12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-31 -250 1026 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD11234369CB38BBC21C40020C4E57C
950DC4A5CD271B5530E91DBA55EA1A3BF584D9405556EF9C802B109FF1EB2B0F
C350D7F091E7B613B08574EDA3BF27099BC2EF0E503A4C4724614A73AA054756
A503BEB31E3FCD96F733D0C5815847DFBB66DE4968A9B389FC00C2146C4FF68E
076BA8B3847A3D8237D36A6BBDF0096290F1BCD02CC66B12E0070215D5D8306F
406DF7590940DE35CA0854D3609249AEA4EE9D3D377A7996C1CC2E940132A90C
F633C774985DCAE8E9353607B9059DD211265A0A346B1A062D80C64B5802A750
D9FEFA3C9920A3DE942C65BD08060AF33C91CFF62930F65F9A42F70B83B0E077
E169BF7F5D84F15D59F8A74BC2EE4A7F3ADE36F38C3A661F4CC9826BF73D7F02
D3CCC267927CAE22B5ED695D212FC3B669F9BE369B7A8D325C3FB9D552F175EC
29972562517E91E7B8D570612CC50B1A5CB6B94D030B0C60465EA21631F7A30B
44A47143D0C2F942B5D76384B8C3F2F197BB3646CBED3DEECB6513D3AD460F49
4BB874969A3663617EB537E75C1C1BF92749F9D147080EFF78ED285C315BAFA7
D78B7B4B8B7CFD1639EA303ACE986EDEEBA9350F92529C47EA7689779BD50CDB
D1B3A68B383B54B51F4FD77D6458F15AFDAB471DEA9909CAB29840091391F2EB
148588D02607411F2E802B9CDDFFEF1C1FFCC9EED0405371651ACF30808E8C57
682B734916EE806703B2ABA2F6910E0C75BCE10A94FDD1ED3E4FDA7857341427
CA0A4F7D30151BEB8E3D351E1E100A8A75959D11122C83A5C0C4C87214413B25
A6BFE44A42D446E9C4AC88F86B07C1097F9C5C5673B88582CEA8CD622F9B0C79
E463DF7F2F4C6640FF3852BEB520F7B23D8A22E7E601EF9CC6D0A2E6E82E6840
65B82C6A3A6692811E2B4F57723AA3A6E27076A2F63D6CE1FBA7ACD844E732FA
02797B386F2EDCE9FF9F84EEAD17B366D678E61C6176FEC09C94B74DFC090CCC
40AE9DA65E5DA02E7A7E8A840B45B752AF11A279BA06F821525DD0F477831176
84C80B29D318260FBC314986223F9EC4DB5B0EF2EF5D424C6DA581B49C709E1E
98149FEAAB15DFE7F94977CD2041DEBCB1FC8F4F3B288515CE43713570027C3E
2D68BB99DCDE2D950740A8EC16C42EFEC22B34901DA9B302C7B6492ADCF1EE4C
8C8D102B0C81DBC566450B0EE201286021C5A953D8DCCC8637FA5C02E813A318
F739DDC20785E785D3E86FA49B6804313BA4A5FED7BECB1EF153B7E79F9F449C
246733E425AA6317DAA66604633B159186F8846CAC78A7DC80655064CE701177
534AB9CE3BAE1E963098AB8D252B6668089F50930339C0DB023D08E56830888D
15578EE45DAB0A4848457AC88F0EFDDF41C475151142AD85180CFB2ABF3C70FD
4D6F5D2DB8636933471256FCFEF68BAD89962FB6264195185AA3AAF0221050CF
667F6493508B69352AD004798C505E280DFA90085DDE5E201035E216DC09694D
2406245E84F4D47146CDB5C83345C80493B3ABABB911186600AC62FEFFF4F775
4C4634DCD369BC6549D8D02596DE943C067A52E1E2498D6744292F1C935F264B
C418F82DC6E6BD61DBFE4115EFD915BC35CFBAF0B302D1B51345D93E3AA87D79
02FD7717B220EB681772F7DA60FEE4B8550AEFC8DB84F40188C27BBE3F428015
515987EC197F07C4D191C75FBC0707877962A117040A6C7C0C44194D9A9925A5
E7E8DBCD2179606DE0AFFB919FCA0D249F96C527822305F5F1DF0AE468D1CC58
7A732FFFE842F77F654EA4164E2B9B5ECF4C3AF95914984A19B7CCB335F8BB79
9763469022F5E914632FDCD8B4989A371F2C643F047468CD003E0AF43F6E446B
481DA8CAD50B9186BF14612D0994835DCB885EAD2CAB26C38E09AA6F2F974332
8AE061D048243EDAC700BCC0806B28C9B3DBA64B9236A524AB0CB99A7BDD5832
88EA40716A2C0937F05659BCB61EAE20D81160B6A5A4468B2B2585EEEF01CD88
2063EAF595B3596D9669CDD67A9629027DDCF71D6B8A5E8F5E3341B469ABBE23
B9816D9C4310706CCA7ADB1350693988E186D61126A4A2245E60EAD4BE77F09F
AF5C0BEEA7B9B6B745459A36D8F643413CD4B4125AEE2C4A30C930B4FA07C657
6B9697457E6FF9E0F1EB6964C2FBF17DDD6E73ACE4F8C24106E0D76B60B1C9DD
0ACC3620B4E1D7EEEE181122902B657F0F50DBFDFBDE02F9BD3606807AF84BFA
C0997FD3F54BEAB6227878AB001472B32BD540B24672F73B410B796ECCF8AE79
4B156F8ACEE5D44FEA7D1F21B9DD0568C791648DC9CDF8A3938825C0449B0BD8
7C7282EF07B80AD83E7792DE58F7A29B4AAF1EF7B066D049822B405C667ED830
5E2C673DA76A56E5369E6F41F1603E2BD30E360F2C1E9D5B328837D5D3C6B3CD
8FAD415C20267DE1734AF047779E97AC1E8E985FEC263E6C90BB9854981D7C99
9B88588E3BDEA834A3B0F64592C48BFFE07A077A88210B7A95379D2D7E532DD1
55061B0B6F5DE161B8DECC065CAE2939F99BDF7D2DAEB9186E25E63E4D723572
3125FDA6A45D9B4C62FE9472309D8D9EB2352BDB6B1F9B82DB52CAA1EA5753CB
80A198AFC3B4C5FFAA6EA38EBC16AAFB4230A8058224A98ECBF84AACE7E8BCBE
2C51D3C318817279EA0DEE3C1E2D15F52F5BD3D3EEAD97B4C7C0DCD19B4B006D
FF646FA8B5389CDB61569A8F536EE5C93AF3AEEEAA5C5A180D3DD54C336DB0BC
75EAF3D8E9BD7B2659D95B6273FE44A04DE221CC25C21921C599A860A232E4B1
E2AD1DFCD0A6E3532E99469F45E1D5AC75B2C8345E38BB6CC21AC1C5FBA8F5EE
16123961C71B212BB4CA518C13A86E71C7163D6CFEE5B3C7C5E2DCC7A70F5875
0DE7695DB91018F720FA7776EDAD7208DFD3B82D35DA8AF616933E20D8940B2D
F3E9DB22F9C9D6125DBD17A576BB93623C5316F36AD334C255FEECA67D566EE4
E20272C72E687390F09AE82C4376393EE1CF3EF6101D7DD08C71D3792EEE4B57
0868528A508A3E7E36FEB380E7C66766845423E0A7998CFF3BB446C93D49DBE2
4C292358F580E84693668AAFB1B24063773E924AF8E82C9E92C8A1A2D4CD2DD0
16D11CF1430A2CD44F6ACA8A62AFB83457458C65B59E8DC687A4414340BFBF40
DEE66F80635B50349835CBD72E5CAF378D5B6A59A85FC6E06E1BE157FF9E9E48
89D50BA9A824EAFDB054ED797A630329D778D9218373885549F4E2B085B9D37C
FD7421E1A682A661F8BE43F75413790E04230E775C6C978AC07C43297D3D44B6
CC9BC9A52D2E18A0CAC504732305B8DD404495901DE7A69CDFE08312527F6B8F
140AB67539C1156A03A57BBFB0294D5D480764715B37669A2AD0C17AABE89527
63541C6672A84FA01D7B6428DF9A22BE471BFA30069886B7810016138457A788
217AE9B00B9F84F9B2E87E6C79F5C56F9F58168CBEFABBF54CAAEF221D473F41
907B9DDAD5764869D23AD7CE0A9AB08B2A4F252EDC1922DA9BDE86ABCFFA1BD5
7FF7884DAAD600C8742D904319AD0882D86E87FF8C7D9FA1705F90577ECC422F
69A510AD48AB77D0CB22FC1E76CDEFD3E5D7C8FE547B46C9F30239D2CA820D6F
E3A3BEF1FD1380D23D19AAE16585318C9F3541BF3CF561F0940D29A7B6A1579B
871B3DE0B26CFE55BF2E3EE2C018719C181E232245ABE925F826E0D96C7790A9
D3A1E37CC9BEA623482B0F841A2AE0F5562E6C04C7F8CEE79E35B40EBD9C72C0
9FBD39B06588280664A27793977A7A1DA3A3AC1A22AA9755A969A9EC11E583CF
DCD6B82B786810D5A4789D8EDB6D32CBA6923184E9E759F36A1A4EE83537A183
059BA944EFB51716E3BF21453489ECE5FF2249B75DEB15954F01DB19D0B293A0
37DEAA1060F5B66CA84BC193E622FDBD8A245E7EF778AA2308D740EEE4507C9B
676EFCDC4DE3F516BE4CE9576A2884A51F0746B4EDCC7B10B4791DEF19F77367
8414E8927856546BDFCFEF9A448A090A4E4CB68AC041584F208BE634090CCCAD
9A02ACF7B07EB7199E828A4964B6C073CCFB249BC0DED2D4E7F2F63014807E18
88DC3807444DA2A6B7ACEDAC46A57AC63381B2688A7157340BA664A9636394EE
32031151CCEA51E5380C64ADEE027ED354887588CBCF0A390BB34427E65C4301
863704A06B0EC65135BAAA46A20D5BE8838760197CEADA7F71B8ED1CD41D9B64
DCC24E00F7E69FA8A108DC3A08510DA031CFC25AB9BB3562845DCF19C647C2FC
E9A1A0A094914A38A07B42DAA230F485EFFB61F5A6AF3D002F02755C70D3502D
93CE352036F748B1FBE24FA82C5DD50753C22C61F32B6AF1C47A8D4E4F7F3B11
64B18E8714CDC6E707E47D092A699F1B16C85D975C845D13211CA336F7130E23
18CC27B645F206B7175B3A685189FF4D6CEDD80139B5A6197054A55DAF3CBA0F
7741B89A3C4CF485C7D7EC53D28EB06A7D90D3DCFC480E9CD29C0178791E8566
6237703ECEB739AE265032957BEFB7E25FA46C6DA628F096C9FA8A93903DBA8C
BC229BC7CCE637137298F77D4A2C5C06160F22F69A2495C1B0B00C4A6191FAB1
5A7AE7DCDC060E3286AF7A33E611B75868004A8C49F5DE449F3F3B73C8DB032F
03F3BCEDF3E66D1AB7BCA908E1DC887D601EB11307B61ABFEC1F6347C09805E1
F38F0DBFAD6B4221EBA31E46DBEA90BDD85BD22D15A931AE7B4BF4D6BABC0ECA
176496A08E129B014465B5A498ABD6E66E4F0885FECBBFA008787484F29BE5F2
C6DC9D581D5DE72F5978F17CAAED2142498855E2E64A7461BF5F3594E892F14F
AFBD73F07A431C3496DD758395478E092A8D03CADEFB56B2499CE5060B09BFDF
DEB98E7125341EE90AA23107DE6FC74290983C6B317DCC27355F50847D1EEF7C
9A3AC9B16EAF36A2BCE8635A9D36AC2897D936E77644A116EC99631BC9CFBB2A
C009A0F02838ED4849EE8BE01AD04A94DFA83282AC9B7DAC6BFBC80755EE52B1
766D067D8FA08640376746110A6C128E854AF9F9D273F88AB33FB90ACC30C949
1F017E433C0C11E5B9A2CB4F4DC54223F30FF7E64C10518A09ED321B68B196B8
04C97E28D78A35849300E5EAF002E47AD1589CF1D678CD5277F966215F86CD24
8FBDC386E41032E4F3471555BFF5F603FCF31FC02A040AF7C5C73E5AFCE24046
2BB56D3A309E02BA6972E52D12FAB51BBE5B7001BD8A97B2685C52C768BC7E32
48A7D663A343D523EE05FDF3FE4823EFE748979C18B33C7E5E2C75E18D1BA791
70A01DD87C9FEE28129236373FCD68E736722D9B5C5D0D735BED02CFE724B402
73822137EFC063660F7FDBF65AB16E66F8DD33D183B2A5F6786D39D11021F086
B43AD0C68B689E594AADF9EDDC63B62B81F5ACE1CA8483C532D96FA7345AC5CB
2E1D49344E817717A0C3B598849DCBD5E43EB990D13B7310AC11428A7756AFC5
5BDA19064432BA4F00CD30FA80ACF054458B6A7DA670631A9140C03EA3373A34
A277F5D566F7D3319C0AB70FCF3AF042C3DA26D860DEDE287350EA3571815CA9
D4D1816348330DB903C6EA1C846993EADE9E3E61EEEE3F2751B14DD11A77A88F
42D3A78AB68DED8C40D42F9BF2AC84511AA9DD639A61729FE3E5BD1B35B933B8
9D32D9201AA79AB168C2A571D47250D48962DC27969D9F1341E657B183689D8B
9635D427ABCBF201EA7CA1540EDC9C4B8A2FDB4B5AC0F349903856F9558D7790
DFD1FC31D58736D066DEFA8335758B4E7217E8D03A9F0EFEAE626AF7B17C61DE
F1312AB63A7C6EBC622295DFFCE40426DABEF5672A1A42CB513A0CF9D71B024E
072747AA714BF7402D7332E89B6E2D51BDE01F4CF211EE10896C2FE6994DBC32
6E544CBAD12CEB8EF76207596557226EB24D5BC40EC8A305E54D8C26DD1C068C
F34CEA25F5DFE462E3E23758C99E1F39C9C7D5C18FE5C2737826E314F5204642
1BBC80E9EE18E1ED1060B52D5AEC27178940884D24B225DAF003CBB3E7F2ABDB
633D79DE03F090A2C182D92E74324F5CFA59F9B366EF8E2FE5CBF59C74F0B890
4221F2F30F441E401C85D20281A743AD6DB7512FB8827F8EE4A2A2793483F37F
A4434E0B5F824E4758BBE80FFCEC643EF45BE08955B58161313648A9D79FDBA9
63D3D967884DEA88E7080A0CFECD1F5CF961E4A3716B18ED622F8C4B5E81F438
F763BC039F823861AB6DCC1364A7E0E86CC9D8CBA505F7F1A5AE5D277899A7E7
3B394DAA35147CA43FB128D991DAD4BA5B5B4AEB2CB23902C65B0E701D35AC5F
85C4C42ECE2FAACDE1AFA06A0DF05C4992AB2826C2527AA722369F9D5D343787
C52C6E1600B8B9B84C294F951656DCED6F3FEE0FAD83770B182B940B080735E2
D82118FE4FA25CBC42F298F009B1D81782ACD73A036C90BF6F4064F6658974F5
D47BB1E406103B13E2F54F0768D8D950A8743B3E380A898CCA4A70D7FF74614C
3009779AD94650878BB93E35F6502731C890F855B4C0B670EA2DFFA3AE502415
ACFD0A128E0771A77BB279E68588EABE964108A5EFA4E374B2A21C34E2025D64
C866E5200477C1DF19F4D5B96546FCF40076E0CBB17EC7A95C3D352B3370B962
3492923B82855CEE4A25A456C6812E559E7C729EC23843A1CD357A5A9907E2C1
723EE12DA4C3A242D196EEFFF2D9E6B8CE4535D5E8F74C80DEEF464AA549B402
E7085063A2B8B4D1EC1139815ACB34563C65A1C3DC53B3F066BD463E101DADB3
21319BA46E6310CC003029E37DF5268954D7D9BFB6D26EC5C3E5B27B9F518438
3DC56824575F07820C2D12183A53A244186A21B1321CFCCF5A8D9416990DBFEB
B8507B874D48127FFBB57440B0869C5ACB09CDE0F53864203FF0C888B845EC13
46205699CF500706CF98BB7BBE82F1A2806DE52CFC26C98305372B7C7BD8DC83
0F2F270931D040581135EFA8AB5D5B2BFBB4DD4944F371721D8602358E7FBB74
0BF81F9280129846F10115A786CE0174EF9C03C382362D8D2EE2BB612B5BC099
4B172E5AE4046F4822BF5FB49F4D310D0C9968DD03D431A5B33986A1F8C902C9
CCF7872913799BFAA268C7F9CCA495A5F77994909FA894DCCCEA0717C37043B4
25A809BB11D70E9EF479B9DDC5B68113C397AFCE9B25FFDF9E86BF4FBB56BB70
EC05A477396A436E952424A756166EA85C135F60246DEA9EEE634798F4C01C32
12289782096ADD120399967723E65350C1897F5A1E22298046192D2CC4D1DEC1
37609779B243F28A1024DB4F7EA69C69581C77A93C781FE1E32F98CD567D62A8
D54728A41978A867693C4D546148BD5469C5B93531F87112A522DCFF259BB78A
DC9AFDC0B194B3F69088C8877FF9D119C0CF15292C2A6C517DC33B4A6439CEBB
3D491830995ECB4662E99A5CC7DAA724B57646590C281E205DC1A8F6F1AA248A
C085804473F0941E6F9D501C5A732053B62E0C661C9A96898034CF6FF8B968E2
B537FFDFF507DF176BC89F2C01306A2C81752644E73F22E5FCAA223645F5D6B8
396367E67FF6707870E3F203E0EEA8DAB3476C5116CC99BA434014485F0C41CE
2EB5A87A010D2639A704AC644D69CE88716692E7ECC61558325CA4F819DEF0C6
109090F79DD81876490B1628B42D8D97E6E507291B3E99918C41C9F8DA28891D
923F5A4265316129C2B3182867DDB797E78F78ABBB66CDAA795BBA5995D7C2CA
2875BAA2998832237BA0821000DB72BACA56FCB508056FD9B62B59EFAFEA62F6
E1116A419166BF773A0089731791E184C65603C8965A5CFCBB20FC59C842AA49
273188C163295816692AE61B5E8D50796E78D82EC5F6694A4F55D8B87C9F840F
20A823A88C7E731F64D5162D9B0A8E26621CB0DA7CD38E6AA255B82A45CAB037
7F89BB0A4F188E031A3B5D75DD5BF4D7B1C46624B1A49B39E16028E455942820
EB70F4948612DEEF9E72CEF1B3A479B2FA9BDB51EF427EE9CBFA22DE02226857
8C12A2E8D5A61A130CF5DB9F9B141D4FFC66A8D2FA430308E9204DB86BD427F2
B12F7A4C072DBDAA2CFB58D8E49D950A28721956745C10722731501D0538A55F
B92F7F02F3745BB58EDBA461D7FB282348E3069139B41457F54250503969D1E3
B8C751F6FCB2899EAFD71DB4BD7534F7EC816CCC4CFDCCA1C0AF5602E8CBFAB6
A2EA3F64948E0C8228BE4238AA8109B3A21C8D7F5F0BC62DF2C5C589B3F3A0AA
04F14A09A583BC6C38EF366CB0464897D1B7C4A7088B4FE24CA0C5066ADF495D
FB9E4E2C14E5D5E9B9B2FFE4F63FF1CA0DA0C913DCD475A8470D31121FA425FA
61523835A1F42F14AC7B22CD1079E52D3C3876C2A54D901170132D3A34BD0617
6CD3844FE0EAC245E90463021BA27DB7B69050CA0478041A06CFAAD0943DEEC4
AE0B74F114FF6A7F25DB3306A8AD31934C2DB261C850D1BABDF739F460246C3C
354877EC108D20464E46C7195E2648F4F505656DFE556E718F7BE7AAC5A46E03
3233485529C49BC7BA5E683C11C6B2F3281BCC2091A157C069D270F98EBAC875
D24D83548AC4B6EBC38F68C744242FD56ECD40D913537EEC65CBC866D38900FB
6F5635FF0B907A43AADF10261171E787F4062212B670E95144EB58F33D368C1F
E540A08AC99E771B9D0182405469135E3CD7C610D2E4B76619048C264D13DFFE
16ABE1178984D3424CB7136DF2DD12922FC336DA318574D98DF133E802D5EFED
6A78C5974462E50D34BC82F18316F06A62014446AE90B8EC7BD42AFC5BE71B2B
54DD0B1DCD5870FD8753DCC8CF8B839072737272FB6A38AF7CF8706023514A41
5B3EFBCC5402C69AD8867264FF32F48DC100319361BF4373848BC966C8A58EC6
3D919EA854779BD70F6F52643D2F5129EB8CACAB6BEE1E2523E015
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E752429B985F23EBA0C9875AD055D8B1F640D10DB8F40BBF062F476691
EDAA1D05C5591EEDC1B75251BFF8576F1C9CC5C0E521392A2F0D5F869F8AA462
B3883A673A976328E1F0DAA22B80CB7737DE2537E7B54F5E1643E30046E87CF3
8D9A45A973757BC16CC50504033125D2A68A1C97CA095C56B3D62783960780B3
1693596869FAF5692AA8FA6643FCD7F55E72948D2DC55AFC5016FB2C48AF9D85
192393C682B739EB43CAD8C3FD4053B2D53CF911352E2BA87A65F8949B0B7918
EA727DE4A08DE07B71365B8F31103159F65D30A7A318C1056BF638CD20BB56D8
6F22ED3EACC46F750F405FAF96268E80A409CD8AE0F36B68AA8C5FD2E0E871DB
D2628AEC086AAFC9F04CC93440E1A8B0ACC1DCADB778837360339A25C08E3B0C
E768240F0E8CE9FF939E4B1A6365664AAB69761B7A9C7B95BD29B09B930B0D82
F2C39F9BC0B94E56C48DCB22D8F0CA6C633BE68E5977EB3D88103E4230C6A08B
B4FB0CDEA7D44636102D47AB90B92FA42243943EB3E77E6CC38DEDBB2DB8BE77
78936B70FAE12EB1E2913B766CA2BAC3FA555CBADAF2CBF6B7A216FC93470554
2C841542BC1FDB26DBE389CED193E28A19CE9CBA64FCEB47C4D9C7891741E0A1
23FBBE971ED93F797C02EA830678317452481FB78DFEFDB25A3645AD3979D2F4
AA17C624CAB35B85963C6DED262AED5DE92278F31B2E573FD86696D98800443F
32CF695BC103A3ACA687FBB3F42AF9C89123C719005844588667C3DA28AFA523
BAEADF7BED1F3B5D595DF571540D0855FA377DFA6880F525878D6A3D1980C7D1
05554ACC5D07ACEA1E0D27664F6DFB6EFF878D0A68604565D0BF75FD8BE023FA
36D164B7BE25F9F811A466CE04C2CE5A774EE3288A245769B7ED30FCFA10230A
D6C9E809341BF5E55E58F3288F7298D62092922F07027352BC7C9612CFCB7018
B3394AF7EE7076395E67C3CF9B71BE069AE6C6C412F86A496E7C77173A0CDA0B
CC46683C239700CF259CF668B9F5C990DE3196B84BE792F51E17583FD4A83178
989638A37897AA769D74E0B3A299DD94B314F9BAFA7217AC70D8D9D02544A545
F6880EED34399A835514CCB97938F3E012AF4D68C140C6CE231015D93CEFC522
CF56EDA6F3147B3861904FBF8BEE6DB3D2E71479CD3A02BE03C555B0808D40B9
53D2EC56876076A116EE7E81836676237F88C519F8DBF39EC35FE41D78CF1665
E3FFD09C78FFF428AC27BCF0318D0849935822699E31F5115E7854A22F46951A
51F24526F7190B18B313DC58AA2EAF631A48ABE394668C6F1CE9AEADFB56116F
FB38C388F96143BA870537CC8B3E5F2DC39829DC8A2ABDFC584BBBC8AB8932CB
FDFB9FB917139ED02FB419CDEAA892CDB606C133DAA908377AA57FA5E2A16FE8
F9DBC207EDEAA72C2F7D4B7B7112BFDD1A5BC950F254FD477654C63037748411
037887C4B65D8E1DBFD8BC7F2661AC6E39CB510EDF4CCABC332ED1A5E5FD49AB
7955B7A0C9770887DA7B5A123239565BB1D04FA90E615D06A805EF2EA704243F
B382621C073D18FEC9D5FFE44F8C791C47B490C8E3D8B586D529D30A9E40FF7B
C1C8059928ABE24544F41569DAEB26F1186A550FAC789DC46BAEA1D028891BCE
072BC4077D5280C8337FA283BB4340DDEBC4D256E13F78F42DDED30EC42990D2
D7674A62EACD13CBBB381247F44161A0539A035AE3749991DEA439FBF139A16A
553429E039046EFE39B6B9B33D252B140142EE927CE5E607C1F2BC03785EE94A
E63B97F0E34213A1B0A55054B02E9C5BCE6B0E9B760FAC62828B9B2C3BAC419B
073E6FCA10420F989127A04BDE01D71D3C32869196A7C486DD1CCB62FEC5AE72
4457E9628C077A0C7218B75BD86AE495A872463510543EFFE5DD50FFC2FCDAB7
133032D62176E87C9CE253A193BFAD2575B7B23BF4B47D1997E6DC26B83665DB
71ADF03DB565CB3278F5B72C3E42823F4F7EDDA13852C3D2523C98C6613FBB7C
5DFB870023C31C1FD013E274504CF62EE88454734AE583D443130A9533C9769D
375E5A0DFE646D603F49A26F9E5F210B120CA7EE5A3EFD38C40BC343C18EE38A
6E5EC1E16F206873FFBAFA03266BF0D28259D561A56EA1DEFC0D6891AFA3D1E6
DE83FBFEE99829CAAAF9FE809C13BE788C42E74A8A162BD9BB26137253BA8B58
1941E759A7CA7AC42EE55AE3ACF0B696E4444DE0BB3491FE84A6315E3725A28A
20C7E32793E2DDA8ED6D90F8041298B7A4C1E2A2D16FF35C3D8F5FD37B1D5760
3AF1ADAD3760CFBDD46FADABA26B5433D34C2AEB076031841EA0296AC711128C
794F77BD223CF144C0FDBF1576BC1C20D6A4CA7FF78D906699CB9C2B43FD2042
ABADEB88D3FB46627EADDC9F2827BAC12E0E45B310AD8C11FEB1DE5440585524
AD00C04BA139245E95B76F3695B0BE5FEDE9A0B810C0D8253B244EE74C47F8B2
0547A2ADFAA6E40432CB09DCCF5C286D5EB04E5A7D952E7167268B30DF26FC38
1D8D871D0D96566F0E4910D1712E7151AFFBF5AB2C8A5AF1CB6DBF0B027ADD1C
2409375ADE1F82292CA07F3948B726E9D3DC6F3AA19E84CDD50D789E56263362
340FBA8CA49B9AD210E2B4D77B4553E8ABE6A6FBD131E1691F749DEBB18A5B5B
90DC695349522715A6B6AF951007027352BC7C9612CFC105C8BDDBDDC8BAD0B8
7F3BA50D36D20926718FD37D86663C2F134BB4B5EEA3039CCD3F02DB45E13804
E3B7B4E4EE45019BA6FF7DF40D9FE58108584C65DAC1D387D9CF2FB4A626EA3E
546717AE6E23981338327681221810546F0009F98531353C9A8EBFE7DB9C9A1F
83F6E3CC814D6844FF1A23AB32B521C1A09010973B310CD03A0ADA22C6863683
473B13FECAED39B923980E1691F99CB068EC99B0F5292E5450773EE1769530D9
051181315AEF884EABB76C5B134E7E0185E7D5929C128293EEFA925E555E77E7
2F0216B34D71875B4FED0EE2874DF99ADFD2E19382CC90DFFB25E67F6FB762DC
D3C3A8C76F4F6F7298116E7FF68A8348389D3052344BC6AD77FA9B4CA05CEA57
E184293362DFBD0B5D90A7909896CBD0A038B6BA98B6078C9FCA1556AEB8E16D
CEE96FF74BE92989C382E8FAC254F543E8D3E7146C9A0600F9A0BE530EDDD8A9
01220A971045A9A8FC9239809D764B6036E658222897A77DC3394593C5B714D1
EF72E72786BDDE985D872823D8DDFFCCCF5ACABF850C801E14FB8153C749EF79
3EE03A1199D0A9EF4C5D26725C6A658DECFF150A9D0FD7AB1F56F507EB972BCF
356EDF826023098738D40D1E2F1976A39CB1DAEB62F9F7729E6E985765D126CB
E7FE55D3E2DFC75C0F145FBECF6A2D130D4840A799889CB9DCCD3FC716139294
FDE93AA5F2D8120ECA4E117C31227384B1C5B443F68FF78E4CACACDB36B7C4BC
FD26A7241379C2955D9BA1921169B16ABD7E4852648FEB205E020B27F5307E54
B6F4A4858CEF9F21FE9A561AF418FD9D6B8576F8DCC579206AA9F21A1C50D38B
556542BD5BC0BB3EBCE2E7C56E180C73756CCDAEAF24840E6C6A01AF6C1A517F
86D2C6190AFE9B31BC89297D17D4564C28040B982EBF82D0914F7C33F549D305
58B5E8ED6D88D23E7530C2BB5B2FADC5B34ADE0644C0F54B03AD9E14CF669C7B
38CB2D16EE53FCC59444A3FDDB80E6632FCB86E990AD1C8A0331513E0B6F2A90
442F6791C4741A0ED35AF47FF40F2DA0B75EA8C8FB72576304008495771DFFCF
89E918F1702F5867DF3636C4F5C221A18AC30E1CC4C35114DEE607734D0910C3
0DE2682CCCDB283F082A7EC77AB52B21BA9B8D4A0B9D7C5926D1B554B27D7667
FB385C61FFD25725C9AC23F19267358C01277ACD2BDFFDF6C33B5F6934EB0309
218D450C2B313029FCE2CF0251EE1C689CA70589839EADD20F9A8937CF51FB16
F1C47539D72BA1C4B1D25AD3B03234E859CC8B2A72266D6DADFFBBD1D06ABF2A
905EA2C1A854E05F9811643264D84794B53E78FFB7A45A990CF0F174511A28A2
99E8106180DFCDA1E7CC4ADA95093D064B0E6917561D7DD13F68F7BD1366A3E9
9D1D6124A3B4D95382B4EAE5B353BC6D9643E64B8A3796A3043842D5E8D3C026
93DEB59FAEB3A14C1547C6C46C24FF3513EBC971E0EE222D4B369FC3919EE24B
8CB02E12CFFC2AF1BD142036C87B6AEB753E58DE961F654E12385D1EC21D1A91
A03C2377D779DA1F0DE6FC09910A13B23860D75CE377E967E216D0BFDFD8EFF9
C41FA280CD6F62F72BACC9B4FDDAD562E249FC2F1392F7F378BB1754A2E80DE0
D9F16599E907FE5C491EDD336C6F661DD25A5D56725C7732CC830280F33CF486
D55618FE6BBBBA1457A7B9AB98F76F6A94470FC8ABFD342B6906A5399825EC88
4CFCAF1811F2A2BA4CD7BF56A6A10DEC60C98145A281C544F8B842C9265E8ADF
DB8B4CA7CD4E69E70AB0073D6C92F19F6E0A1170816ED400EFD373D263AA62AC
5F6B517959F2F94382E4302DB3EDE6A964FBB99F8AF170A5FD7DC048F85C0B2D
2810B26906E9E6BCA2757CC7FCAEC0C164C6A5D0E6D1814CCB0EA56FF036A434
FAC6E77F6A0B96C34D21C73BF7B55D769E02B6E09BD7F56D0235ED49576AF71B
A6A38E10F51F646E6A282516B7800BA8ECBE1A671D3C420526F9A0BB461B4C6C
0582F6DF048C0037592A5AFDBEB9631776656663828AF4AFADF09D8FCC074085
D3EC4901E6A1582683A09AFA8562972C5181D180B9BD26EDD6D2075A3EF22C10
8F4E44649AF6BBFBFA1E09D6B8C8131539566D7BC863F004227E862427E6DBDD
DBBE101270D15AA6590DA4E9FFFDE23B9AFBDC82C3C8FC7641CD8C4B451A4376
6C89DEE2E639514CB1CF6E1FD870D2A628392368D68C28ED60CDCE0CD13F54F0
F6F9BCF0DC2BA3169B38137F026528F5A2C526F147B5A3E7FB5A2572B1FEE2E0
E999C6052FB2F4C661672919A4E35223FA2937BB5AA042CC8FC0A8317E7AE5CD
3390D061C2FDBFDA95B4D949450224B287FF05556CDD7FAF7FDE2799170E21B5
9E05661E646D8173A5BE71EBC504A63CCB5FFC3569911E100A036EF590EE09FF
D84314D9394E0E227D1243257B02B8CAFF2AC2FB7868A7FC61E6AD2CFB6EB203
E65CC1462B7C3E811E4FBF589BFD5C15D966FC84C490B04B0CA0A969E41E3F04
FA629E2B6649661FBA1C1C0B922F821C28ECD4340F6C8EBEF4BD16060B9389A7
211AD7173A71ECACCF4E002223D1B4ACAB454C6CB74F0B3E87512A6237605D7B
E1D821C6FC022FE1731DEC1CD1E149C6D8FE899D287AC34EA039D94933409D49
1DB422E2CF38247F553154D22FEF718ECDBFD7503A0750027042AE2827F172AC
4C6B37FEF23A47B5A4038752E723288E6C559819F448337E748995A74E9D3DE6
0DE90966B9A2828946DE70F22F8738FE52A7252C221F88F1846293F4F56DE1F8
963CADC84DA9CE87D81D4F2306F0F4CD8882D55D5723D5E5514CA68BB67B6D0D
AD8CC299A8CB22ACF60A9294E3D854243B2D272CF5C16F0AAD1815A417E04377
715BD2CDC00635411C8F8802574F7C72914BBE9E892BE746547E35CDF1465C24
9CAB870818FA5CC7B9DE5158ABBD215534DDD10D943833A0D213E955D2550A1E
22227BE15D33B938FCFE2DE44EF169F237FF87C2D340EBF5AC170988E763C2B1
A931953CB0EDF31C3D1675995DB61CE89F8184AD68C29359BA34A76C8D0D5425
759623A9EC97CF7C183FA6844ADA6C3E83A317B3AB1294CC34A4E8E335ED5B07
852E89B86D1DE768F27D74A552D962B051BE2AD06C8870D1AFC62C10CE19B162
C80D4F9A9EB4D699114A950D536C1C44746579957E655270D736A3181C7F0944
360D37BEEEDCC2D4DFCFF453BAC55B059FC54715439CB365500795122379B158
1BBC7371900F2CFAE1111C8E0CE9342B06AA7C8A26591C2585ED7AE8ABC6811E
ABCD71C983ED1CADF268B85A208F1EE34D43D871B3DF88FBB349A138F00F4AF5
584F6BCC0D8CB3AFCC1E30D0DFB9638E9DC9E65F758F0FC4FD7904B1860D0E82
87EA387090CEA410275AEEC243C01B50D20110E6504A1371463674793EB4F5D2
4B8734863351AA1809057CE8CC71AA4BB84DAD5C8732A428500D51ED2387317C
876E836A1E6009BE548E105149EB6052FA14D601EF29C41F9D6B880D6A47AAAC
CA3BBA4F5B314977087F678FE867857D585ACE25A158AED63B8FE391030C5745
EB9BD2F314B4595C18B7A2C0EF1F5A33B8BE57F38234ACF2F1C45331C30D2D0F
083CEAB1020D895E1277AD275D8D9AA0DBEDBCEC5599C64DC58CB532690B4BB9
EC4FCE4DF06341FC891C28C943B570A7A38C595E07707A11BD49B93DD14AC40A
4E4226F5ECD3DAEA01CB260407B8656D715EBA1C3063499F2468B192BA1CC682
212B91CC217629286D48D6529E15ADC93E621833FC3E90469E6809428ED37AF9
44D326EDDB80820D550FBC010FB412D75AD714E42CF90800DF87BD77BFD898EF
9C75EDB108621D20170A3AF187C72B119BE5F19E2D9777719D6D1746E2343E16
C08B047148E29DC5E5EFF4711229E2CC5A25431EEE99304F22B4BC7CE51A6036
DEE36B990182A4BBB35527A43590C6F1759DCB70F1D04C517645CC5CEFED5636
F0EDCC75AF25592EB7E7829E4EFAE3C6BAD0D1A189B87F0735CAD73632F8EE97
FDD13E6AEAE0A3F11E616B5310AEDC100F849A935F1E5BB788B2873C258334AD
2B89B95F39D796E52913515D71E3E829A8EC2F386BD818C86819DA7A0A6DB452
6FE345B5E929CB01DFC6E4AE406203A42C91FF4C752EB91FF0437ABABA9A0D03
16F88245A78056FBBFAA7B2903CA1DA764DB623D1E0A59B9FE47D7D4D67C241A
9ED3E20B70DF4239E2A7CEBBDAD3B6049A2CB2B6AC21616E24D80DABC4D73641
1942BBA8CF08157F21D63C139B9FD0EB4CF1F136C8C443D98A6A159358C7A5B2
5E22BF2A8E339620A52776770935A6A193FA21A3DC25DEE1FDA039402546DB20
8EFC3CE2DA145B6B40DA1DF5E91B3CEC509AE4E6E51A2027EC08AC5CF1017434
90953E53F8ED4F7092710495D7A30239E7E76EFA9CA18600157A08DC601006F8
ECC930DEECC72781066085C13AF52E333B4AA4E2D29711B655EFC1D043C7BB99
785482A577F9D4DA076F7361B44D08FEDCA5017C16E6B195372FAE48F08953AC
015252171C713B12582F6D29ADDB80A225B4B9B970907F63153CBBA652969B46
C96701DFBB9E8883EDDA67B70C5D841AF76E112AFB947365B17DDB1A85BAEA83
832FE9C2D786CB4E75B9CE229D974D2C2B80DDAB1C93DFF9FD4972DAE07A8CB7
D40247DC7BFDA8939AA82604F3C12F8997F1A4004F1C327E86BE3330CD1A5EEE
D203F62B05856D5DFD6C6323EB1A8750DF7E7961AC02510F5B6EE04E45B561E9
9CD5E5EAF6B977FD1DCB5EFC2B60537995FDF06E84662F424E32E8600B503A5A
C47D1FD7B60137D712DDA34A2B1C4F99E13190C92480439ECC2081B0004DBE82
B869A642C32AAF8918DC5AF8A1FFD1E491426C72519022708342CA1BB277BE9F
492E4D13C3295C2234F3CC6854EB40CF52AFFAD95E18348CBAE03FF8269ECC9C
3CBC78B58AE13541F64F647F4B19276732947EDEC47841C0666881F2B6F74305
26ACE47406FB016249A334141B4B1E28A5E7A5204F51014203021E481DF4FC81
BB0EDC41DFBAA93BA84186863FF2526FF4A8F32CAB78EB85ADD5174CBD6E3D89
445F207623DDEC6010BFFB0A05D2A431CB447D19FD60F946A660DACF72BA7154
67566FAD5F9901D43D8E2B08A04783C5E1AB77A3E641BFCD7269BC56E8A92F95
31A9E80120579A2560FDD25F5477D351C24235F261538F608C93ADF044C39BD2
A560B752BFDAACEDD800F8BD0C2BB9CB46128D960A10918E369E641612CFB9D2
FE13E54BC833576A95C2262EAE7BF2942461ECD4C5E116863CB6E924D7A8EBC9
7593FD81E660B222CC0E6CEED42780A8F14FBC5B5194C67F888EA52AFF689579
42DB5BD94BA2059A136A9DC02D0DA02EBCB5036675013A692E01582047B93FE8
5F460F1ED1372A84A1AE47BF09D6A0EE8B02526ECB12044D3E4FCE173420B130
353EAC9DCA97D0C09B953972BCABAB06157DBFB18A3A746FA3102EAEE7B993CE
5605FF93A95A46C4E63570D71786AB04B97D1BC68E7EF2198C005568E9DB85B2
A0D87AA2DC2639355AB5092AD872B158F05CA09EC0F50AA7BC09F3067A7AAA0E
747D7B029B872A79EBF733935B32C7BD683654D9D5ABF3059366F293191CE257
782F236FC2299F6C6004FA0144C4920CC2B761F94727DF477D8DB77017269150
1E76CA29A7E1CBCEFF5D8A901D7FD1EBA71498638B36BC06BE8F11F7F211B86E
827E1D5139ED8A122CB8657A72B3FAB479D9B166D442B6640CE02C62C4CE72A3
5BF97EBC165E6F804BE8F048CBABB1F17C135472030108CBABCF4A416DA82241
BDB9F204686895F1936FFA3A8CD2F57C05713A9B31042BB5A1A3B74395F8AD7A
723EC10656C245958391589B431E90D4571106E2AE72AA71D6D176D6C3AF7709
8424004666BA8435FE10EC622EBE16E77C327EBCD51C597C1AF6102197A1C871
4E87DEE3F0D3A64BB2C5669521A43C7D05ABFF693F43BE126FE61C3BA375BD7D
555403B83025FC259D4ABAD69050D64014F264AACB9F06D2110DDA89A3CAE0A3
082B99772D58532A6CBAB0F159B8E28B279CF25C047A9E542AF625A84CC60764
4AD22CBE0DA83FAD44E0969AB3A9D824CE570B011221BDA2ACE6A6AD26BCB0A0
AB1A26A0049604CCC83DE392CE9D804C05019B3A82879EDB943E49C22697037D
82E1EBF094D3B7F6541DF57D2C3DD302EF1A8522595C6596EE370423883BA857
C54F7B3EBC20098C6212DFABE052654DE99E0AC88121A279AF959FC3BF0ED249
587896378B6ED605A56DD7F4307D6BC1D1C283A4475CEAFD2B29B797C9234AAA
E7D3B6E3905815731051460362D16F7BF80E1B0470E60207001B8CCF6987FD89
A82E15F49DFF7496521F2361A1E013338CA388A3A22D536E8B1CCA917354CD7B
5811A30278F04A58A152EE40154AB370C7BFE814B66CD6662F897D83ABBA7610
5B71E2CFE1038F5DF515548C2D79D35E06C8A1C712F18D7F5D4B754C6DD16020
6DBA83310D820B6904B356AADFDEC120C124BAEF8489E22A13C30552196E9904
6202FFB8D1A16E9E60C07909D06D055FA464D3C8B1E6588EA0C29EA5D64B5FAA
44144D1A6F2F8BFE9A6DDE8802BF1EE6F3D8EF686CFC5506C7C15F6B9D5EC69C
8D84107A04D5EA81FE1DA580CCB52FDE7CBFA758E990A77EBB86EDCF8C2277D6
65B99993A80FBEAD46BD124EE5DCEAC46AB677319C3433A852EB0B3E5A1B0528
FA9F8BCF9EB3EAAEB41E72EAA4265BB0838D519432023A2EA97D0B4A9CE22E23
DB94A0D96E085BCDACC4CCAAC9DE3F669EC52993591AC1624923AE6DB8994DD4
DB0D452EE6690A891478199029B3C52A85E3A069D5265B78DF1E8A68FD34AE39
4BDF4FF32CC5BA82DFAEC4C878C506E54F467864685EF8C7C52F0052A6652E6C
B6DCA3252162B0A68F36003F80C40196082485DFE88C095D46C253252AF7805A
C4DBED629AF717FAA635DAE480747CB9B79EE21C29D22CF77E11ABA3DC2932E9
D0E06DE10B5916E65AB744B6FD259CC8D48D85F6692F098914BBC569D9F80305
E6C1C2C634E83B6570EBC5B25A67EE76AA8FF8597B279B8FD1B911FDBB4D3073
5E62DDA883B1754F1F377352CD4B970C80D4E3AB8EF77C4551415B0331D50EF2
E7C281D422AF0F8F45B3B08141DD5CDEB790D76C36E9CBCA5A955DACD62384F5
6B64ED2E391F08E5C6D966478C522E1DD3ACF47C207A5E37031A4C4A86EAAD87
BFB1ED2F7198DEBEC3ED6251A095434D81B1A68AFD88B506A966D12421DD0DCD
BD7CBBF0BF03BE50426089EC7071143F5176B7CE8F5C63F2AF356DEBC9B82C93
8FA20D18544670ECC84BEC2F9EA66E8AB516C9FD3846E540D8F39F442BDB1AA5
3178989638A37897AA769D74E0B3A299DD94B314F06FC7E6EB24B1CE1E87CAB6
B6187D2ED0CC5BB2D006660E3EECEB207CAA1C2C81ED825DC2E7EEE6D14EBFB2
7D06EDFFBB18E470BE77630EE925BDD46EF192F5D0498272F68FD0DA482FE338
FF7162B38E70ED0FA6771E3F85E13820815555A1051370EFCD4B0586BD44046D
11F49933182971A143737D515EC7EBDAB4AF1ECBA1C6E909EEB9DC9CE8937288
DBC4F96661C812D31312FDBD0E6D0589AB78C203C6D210C162942911B3230B8D
462CB20BE56B0299D8043C4F35B031A2488E7B130462CAC1C61FB001C8095E69
8E6912C73DA5562FCE42FFD7395CA45DFD437824330F5052B43E42A8D9BABC1C
3DDA7B54BE6D8324014CC1C4571AEBDF9A96304B33046CABA812615ED2037D1E
B275BC1AB6F8847D80E4BD474269F936D2A154AC6386324F98654398F592EC7F
B23A37DFAB7F41D9DE52180A692C03E4F4098C746D99066929DDEAD48EEBD1B9
E55EF1B41BDA01D7778687C22CB79310A9000BA9A9304FC2FD02F3F6970F6306
B22213A308C0C5BC567605A967591CF5565A0DCA782650D54B8ECC37EAF5F568
B0A72B3EF73B4F903EE544DAB90F0A3BCA7A7AB68701815621CB29F03CA5FFAD
39377CA1DE2D3AC84FE965057FF5DBCAF910A75A1ABE13802EBC5EF7908D61DC
7426065869BA3C34DE43B531F84B485EF8F360082659FFD6EBC9C8E46642D95E
4D5E8DE9927E16E5582217693A5436262BA52DC028A438B9DFA0D9BF845CE38E
33893E5F9C80F497851499E3E82C66DB5D38FBF245D7B5398125F9EF604FBE70
8825C7BA991F36C587C30D3C96BFF902777D4ADF4FBCF10F61C9BC429B5EEE3F
AB3E8E69689CCE20202EDF2C3F52D34947E0964D0E8E89F6043C0D2E7B8579A9
B632488C35752639E1A74D9676E4E99291D5768176CF183C5CDCF006E69DC0F5
DF0E67B983327319A342EDE22B273B7B00D0680BE629166D338F02FDC92B910E
15B832247B70D47FBDF08233CFF35B5743E932CFE470F84B35178F263B2DE22D
D4B4E52D3B5386F68A54730ACFB5FDBF4A734C8CC44B4628750575455420B15B
31C0EB8C910767C395ECB870DCD89035E81FF295C9CD39D97DF78A991A8AA436
40ABAF6B77626AD8BA752A7C1839B5075C8314C20165192F0C199C953AB9B4CE
1751A5903126FD80BD493627782C24ED12F01F5FC98C4431CEF86BD83C5C530F
F9E9E77B6982E0BF424B829E81B2E9E3D43B31BA437E2958EE9CA27A885B0973
1B90C4F19A0999B940D7B30E13B1118FD1A281E8CE8494FC22D2B2E55D5BA19C
31A5805EDA613947A8E3FD8AB4B56F00251395F767FB698F733380DDFF117069
5227D97FCB8387218CD94EF127847A48B648FD0B62B0F7B01ACA426DB4BC12DE
AB10227260EEC9FEFF583E0B581F7CF09A046115D45493F7A67587727B64D2D5
65CBB175FA168681C055D562FC34461835D0FB7A9BE1E3F083B68DDE13F0F967
1B2E7E4B03C30FD2970B441E2C95095C30CE4E498AFDFEE909382EF0E686A3BE
BF3DDE39220E4D2DDBA4D4E7848A25F2E789C18EB54A635296A84FE3BFEDB380
026F89F98AE88D73D7174B84787F6127F9DD1A4A661491A4B0B3969F01706210
F5F3AB39EED84C9A6E729BC52112E16D2DA72BB391A2F176F0F1C2A0F593269D
7952B93A2A83A34F026C39DE1959072241D7CBEB4F03D3849619EB4D84FEF013
C5B4BF8CCA17D6AAD860127EBC1F408930DA173B4CA5A62F687C9C0E26F9CAD5
FEEB9AD584935A58676976DDD2B6E118FD1D44ECBF9E446913C4321E200B1773
32F44DC0F2A1DD706BD4B3CBC69E106EE07FFFD590BEDC71CA9AD4AC12B09C21
0EDE2FA190BAB9326EEF9FE6A563644E59B5BF52095FB4FC8FCC9E461E1FA37C
EDA39B40C3291F44280562BEADB41C3B8C70FBC5D462FB486614A7B50251D861
E611F7DE9470FFA0D0FB9916ADD4348282DEFEDAB18C6AE2635B67819159F7D3
AA4123426FD4AB3FCF34FB7781FE1294660CFD380BE8DA45A7FD3452FC17F10A
319F46500E6820204B83A1EB775861645239EC6EC6B59F47151983221A48FDAF
5135B233283FECCCA13A43A6EC3478F95C364560FC2FC21825F52F9F6DD01569
B77B5F48CF4E2BF72651DB44BC63C5E50C9DEED687E06F23A0D0ECE3CBD5FC66
30CBFAF0BBB88A5D0EB528D09D059CDF5F9D85FF8FBC05291063120165B4379B
1A4DC9D967DBF6AA49294E7DC51C69967B97BD1F1DA360C4CF05A5F07F943708
1B6EA8216653BA182F7FB05BFD80CDF441BB5B2BC6280C98EABA19973BB596EE
B41C7FAAB530481B4FBE701BE37A3855D0EE58EF88C8D04C2B23DC47BC6EEBF9
E156C02723505DACC792086E18039526155ABFD0D3C117DEF45CDE0864135B20
2DBF7983071104BEC1B29DAF50F624CDFE1EF9A647275BA31FA3B1D4E0739E94
D7C03BFD9E69AC60D04886D1063742D723EB1C06B948EFBC3498CF87A13A3A97
71054905A58B78CAD093CEBAE359BC866F5AD692F5610B75F9E7C6B4A4F61477
3EC4E70DC326634F3D05C8F61EE2068824B4AAE5F3D674ADAE7FF3DC2FF0E40D
5A3A2E5B7AF64A3304B9E86E1BAFC04CC7B83086D6AED4460D71BFB257752C5A
EE42439A72DD999502DA3268A9830D9F9BA8A9B6D46B9163FEB5A9817FA2DE64
C1D02FD6CAB479553AA9B765C965D691198C4A7E86EB5FE4B3AD545CF2DC302D
330A414824E7D22D2251EC633967352C75105A1222751EDFBB3E8B72958A2C3A
563F05010888D8AD09FDD0EF576A9BB05860A0712F15B1B72102DD4C20619428
DEB2182D7A5B4CCD3E807F93DB3F8EA2A7E25B58685556C172074527E2605097
57A5AD8F1B52BE124FAFF443C0A979D48F768640F502E19D5BCD4C4FB87316BC
327ABA5D5F5FF14BFAABDD339D52EDE5612AB895CEE0901707F717AB92EBE58A
47A95DABBC285EB77B9CAE2A1D3F044CDA0AB26FC8966F13814CA50F5E1CE54A
E464C493C65CEDA434824D694AF59433E9C9B38EF5D524E99EAD57A66C587F16
F3B41466D3465492780B560D7A64F4AACF00DD611A0D4AA2A768D2B64EC115F1
D1E455CA8C5C8B7674C429EC7A0084BC97F9FA2DADC766577FC0EEFABDC23E27
AE1BC097FD97FC10D3A249AD283F5387224270F8133FA299289B24A9A3E240AE
D6A5419A36CDE36ED173A1CDAD47578435E71488F5199E88AF05E9E6696DE4E3
9CA05A8F919A4ECADC3CE8358129796FFC38A7CCD6BCEE19C4B704FFC959D75E
47B494565EC8255433C2F1C95528EB4E2FC012DFB7A7B4C1A498B33CA161CE90
FA34E9C85636E79B49E8846022AA04BC6B893BA13C1A07155EAB53871FBA3CB6
41984239EFBC4A36C40D9A406871E2FDE9D7A8A0D9E9877FB8D07AFBC9394BA9
313FE3EC851B9D085A7DE442D95A83BB6C66B998AFDD35BEEFE05CE8ED74EE7E
53AE49F269BFD4C2DA659C00B09364F5192ED3D27273441CDF94D205818CD5AC
4E30E92D029483909939354ABF6934ACB6E85DE4B2B15B93B7BACB79AC25F37A
4E4D1B35AA21685EA394047116ED7629C74E8171EE39B996820D9E189D99F221
F2160539A2A7A5A9E6FA0D8EB2C07307AB5FF201329AC69D41775618AAD8209A
2A32E8F4AD2381E5FA947F63826D67520A9BB8687BDA378B4444C4251FC023BB
3042979D53166F6570B05CA0CFC94ACBEC1210F6637DB6A215655EF488D040C6
3ACB5FA24E41C814A465BC8048C20DCB99FD2BAE6853877991059EA4348A85A9
5CFD480503000FE8B587F1BC09B2020349486F688BE2EC78B6AE37A5F519398B
89ED671BAA88D51C5154F8D47B989162975370A4EE24C12429C8A21A0EE94F43
65B1FB07508634A07D3A46006B0252188B7B980206008E4039B3D9446D6F27C2
CEBD637401A381FAE7F3053342449E3E04993FDFDC22CC8FC032E38B815EC475
EA8E35E72C290E08134D763B15BB6B2B3B7C1EA96FA425C63957FB4D314B6A2A
1ED7F7DE652552C3C9F1DAC881036C4467B82C1986E948333E1D0B5BDEC27230
D29665472FB6B29C6FB2B8487C2466496CD53654AEBEBDB8C1B98FF83E5901B9
DF69318790CC766E7D53451C02C6F4EB08CE1D30460F049B89171CAE75226FC3
0DE2682CC94EAE4A37242EA4B8119A3159E06F45C84054E62F752E44E0668B24
430916ED58EF36404E3B912BF4BFE16F039AD0E44465D651D2236F883F1F42EC
E339B694B19D225131C39721EA5C3464B0245E02013E1666DCE85044D0BFE13B
5C31BBE28C4347C76E89E28C2D4AFFEC504703CB56452810F9349B099A38501F
2314DCF08578A30A66385BBA39BE0765A7728CC8E15684C683D992894DD9C7DD
3FD07AA6F56EC07545AB05B3175433ECDF6F8FDC11BE14D7835669581477FBFD
614700D6BC3A1C4E266C13E37943BB86585724C654445C1E0C615A8E98AC0BD7
4396527498A7B5262D6F945FD708A4B04A9E22F5347DE368B84B56C64477D228
181C863A4D48BCF4A4D901C8CC5170A721815A222BE811B4B8A038D3058F1911
9A3DC15586929418AB684A92B4187DBA74B626F82379048B137DCA01167F0840
F3EF427451F2250A597961B66368347C2777B037B0FBA022555B0FCC1421A0B6
60B738180C1A4612907A0811E8EC4075D24EB0682E7602CC252BAA008D573255
B54C18DB0F5E3923464EA86D1C8E6E3F0FF28D2F4FAD459D4943657ADD842FF3
D6D1143830B3796B783C9969AF06A708F7CEAC99A20BCA3573AEC93790333D9E
AC1935F8964877EA22D9E5D4256F3134B7F3A44A1580C04908F595816387879D
6569D2E42BA1351FA187354D2A356D2DFF4254DDE3C571B9C6B07B09618AA9CE
DACA9257FC6F8AB4327A93FFD6DD41384C155A7898DC5E27A9F0DC4B7EF5BFDE
9EA4A64D445BECC73A40BFCFCB1E9A94780A7AF45966CEEE10B25B9A4A279FBB
C936B3D1D335D2BE126B6AD9BDA8A46FF9260E54AC35157C512F8168DDE77833
7122FBBD1485F73B4EEC2651C03CA00259A9ADBDD053FFE120C493DFF9FD4972
DAE07C6D8F59B9584224CD65C6361095861A84EA1B7A991DDF9FEECDAAEBE72E
55AB10A4980F44CC84F8DD351882DD7214E74895D1B415315CCCF6ECCD15CD3C
0C3C3AB1F6AE001F0D8CD5BB65171F3AF111E2722605554A46271FAAAF2B83EF
282429D430CE35AA150D692C3EA405779CD86547739DBFD8DB8B19E152524A12
F8C4B27C5C38BD6D17F3802AF740BD9C765861A95092B7CED26EF1639CA12F6B
3467D9AC4A08FD88BBF11EF3B6A9B45DD69A897FFC9F7C891290A2643009F7C2
1A10C45E2BD3C3439AFAF6CF2C4D2EB942BB3D915186E222EF53C533AF3B2676
A211750F165CB93993472033D4EECB11AE61D7EA7238C529CDCA512B82877CB0
13CF131D789B2B17B64D3778CE19ECF2D3EF075DF53BFB6E634E134443FFF918
C43482022ADC8E75DD413871CAAB11C9262D553D7CB133C680BDF2F9D1E0768F
69FC6275A5B482EDC690DB0779E6E44963B05614804C9235E28F5D93FD74122F
BE17C51887E736D52B75FCE3C8D5D0F6C89BBABF49EEA8A49D2679DCC5357E6A
DF9AD8C35E6A43B6823C4E3D2E01A589987EF595994B249611BEAEE18024C8F1
DD696623956D7E000E0371CF87A0B9587FDEE3C33267BBB586D16EF74F26427A
F9F6CCA0B4F853F1D5504ACE4012F2CDBAB5A156BB825FD8CA03DF53A39AFBA8
BC23306A9F6E36B7CC532CDA7723F2047754E5413227083D2C951C0FFB44ABED
34EFC736A97C1A9090EC2A2E3FA081DA85A04839A6EB147B3EBB27EF069E0452
6A53DC330D778AB0F3FE3A95C3534C3618304A599202DB812E88E20AF5D0DEE6
68BA55DEF869F1EAEDCF8266D724C7E2FEC273F57377AFDF3784DC26B85B5D1E
506115CD30E630BCBD0F8A81DF33DFB5C17C1B9227C33769D614A7E09C640346
0E18B1C5D8927011392976E05154ED10D45BE68B8BA5EF2050FA7AD8F3D781E2
6D47E9089A6F04995E798A463A6DB8F2FA3B041FBA8C3D808A7BC28AD31B98CC
37C12D8508877135F550472C76797B52673661C1C284D1E7930690058B9F9016
D5C0BD0B326198CFFC09C1582DCB563D62F205C2D74893F281EC4258310DB602
1975E0B83BF24615D47A897EEF0502BACBCAAD5FEF89E5722C14B7DED7E9AAE8
5B0FD8CDCBE39EF78884661E8D470C8FCE4FF692081A3B705F1A42195CFB5262
70E8A8EEFB2DDF8963A60C78D96C12C2AC5575A00B6E31CE0ACBA92DF764C127
A62139A81F681EDD04C007CFDA9C4208BBC6163640EA82B12754910B1879D6DE
B6936F6B32B1DC71CB2943893B7C29F6F119886B46646BF97D3C9C2D8CEB0078
10C39E09CD63F6D75E4C719D4FC73AD23BF548C3457C4E1D869683CE1449920F
9A073C33C284906205E04EBEE5F8CEC3FD7AF9228ACC7F41C5A7AB4077FD0277
11DC6A0E0D402E8DCDF7C26C71761FBDCB7A300E67A0E6BE78C14D51A144A287
89581BAC2B4418115AF8D6B7B93852C670D21EE00874C6A877122DAE05396EB4
1A90883A677163892191F07D2992175BE2FA845B9429BCCAC88EB2A67D80AB99
D166D4650FC0B2585E7168D982D4CFA597C76A5DDE07E2FC6E974F629C930054
F46F1A3DD34903919E75B75A4E4C57AC4C09727AACFD1EA7489CAB77C4019E16
85D4F822777517509D909D41A5A65A71E268231C8785069398EB15425B2EC572
9F7C1A9E5C58CB97C867565998D8AC4FD383F2848FB7400AB6DEAB25AED736BA
D6161E6FB4869FE5B968CFD6C3B2608D3124B8855CD9481B648D036A7F7CF6FA
3985A66C73397DCC3891363DA8489E41C0E31AD00344C43BC4080235CBA55B00
2D26434EAE656AFCB14834BA122862E7B9EC84EDF58463087ECDFDA2259DE769
2961D5ADD8468422A784A586D295A54240E72EF0B20457EFF047604B861D3766
A2414002D0CBEB15ABE6BBA7D524EE4C5B5C04DE500B3B240143E16EB01BF578
C7C8BDC3D45A7182394D0B0FFBF8DF78FAF46188458969BADC0E4693A9696ACB
33AE926CFEF56B6443A54F57A396A38C0ACF844C5E8ADC40CFE0FB92DBD5CB61
4FCBA0343E492C69E2E1FFDA17958889540AE90656700896D0E218102E95C9CC
BFA1EEDCC4195C7E24E9D8C904B17E1550D617CAEFB2C64031714B72A32FF3A1
D2E9346C4D84693179511692A1EB1D755CBEBDE5D67CCD48FE9C4C1E574B22CB
CE853D12AA645C67846728B8A869CF7EEDEA7F0000EB47E09001AE6542757D6D
41727945040A8A9A2846D95B1ABF923C595966167D8E114E43CDF5C01EC06320
7E092270467F406424611F9C6A42157531ECC366E889E691AA1B7AF846384C13
41579A4581FE0978FB9DFBE0D18A778D94506F15150B0B9A60702FE6B4105FA3
17B6B3CE7441FCF4229CE86A5F353CA7F5A9BA00B4A59A4685AB042928817DC6
3650006CA561D467841FE23F8472CBC3BC363659DF2BF4A4374D39B144C20C63
CFED1150AB262CB67D089EE3A1854A8D37F1FF307943DF89183F2CBCD2F6026A
0BF72B68B2C84DB4416000A82B7A78B66DD731DC519B5A4E0E5B1DE965B89552
8EC9017860DDE223A0E3373D811A298BE06358E0BBD55357AD883C512D2EF27B
E2F7DBA7DE187A7B2EE7E3853CED8A91FB6A6575D5A49DF4E09AF91066B3EBE0
127B5507B47E3026558BE5644C54B2257A4BB6D8798D2E21C1AFFD6DE621F63B
F813C8F6901DA765C3869D379B4A33AD88667AD95919DE01A4C2A5BC52E4A200
E2B56775A9C3FC9B89C73A1DDA45A04C4A869DA94241C74F689FBD2E7DFA6786
6BDAB1CA6F4424A1CEAA02C8014458A0CD789C5A0CD9E8E5BC9D3894B6B25682
CFA5E686C7E24377FBEC0CE672CD7F281A7D0116D26EB4017C11A635EBBB04C0
AE0FB4F043144C99F35A215B53DD2A8F4652DD302BB918BA0D783D56905A5D77
14FF21B7787C4CB02C4E0B28C8466A35F331BDBA91E607C715A879EEEFA85DF6
42091C64B2158729273C31FF887F0AFA738B0AD7CF73A37AEF57B38558288DEF
0EE71915CC725C2B07FEC8B99456E1FE51D197AF8768C71112CCBD084D921FEF
ECE399536DAA23118E69C0BEEE96BEBFA97F47AAA145DA78F32DAA4BEB1BDA0D
5AE27DE83946CAFB8EDEE9A25C7A008D5D6D8FB25D4ED3636484C89E7CA55649
D8DC2C1C377AD1030AD2572C4D4077BF9962303DB4B8C638129C24BF29F00BE9
15147F7C10F4EA4FBDDAA978FD60E7EF784F4EE0277ADC7D6B289530D4F78192
2EEFDEF0BCAE98CE724F65EE1E7F0147459C1DAAC574FD5B19EFDD258AEC2874
D9B7F876D24FD4F90C1293230CF09F875A3C53E49FC00845D01CFCBD2DB74105
301D095007CA03CF560A545A7BA4701A203715E313E311E51AB1D8B9E25EF34C
474E9D6CC7C8FBF86B398FECB416D6317CCAF12ECC6EA8BD938949438A3D3510
D28B3A9C69823910C5BEB7AC4005F524A46A975729C498A5B4D852613B703617
B9047242756DA1AEB2DB39925AD16896099C85057D7C193344FCB29C007953B3
A529135BDD68553FF87FECB65EC277677B9FD379CD78A9B1A6315DBF323BBCBE
A65D1769CEEDA5E6853E4A6E9CF3F4AB8618A08CC5AF6BEDC6E5A81AC9479787
C198A20FE42AC5A57AAD6E75F0DA34FE75AF1B03539AB61B59D657AAB9283D0A
BB0FA249299BF0C52073450E1AF9ABE9B023C2A3C14544F068343DBEA5571A5F
A17455DF6D6F07CFC781FC36E1C1C8DFBBEB44A71B87499F802855919666D06E
8A0D322327D58593790DB6A94E94D43D432C37DA65346C67B206FD0CEC673C3B
FB3F02000BFBE8F81109EE6B6FD7391A9BE30090C7E8FB33F5CC4BBA948F0C4D
80FFB136105A37C0A55196D9BCFD7EADC3FA5A495D982351EC633967352C7510
5A1222751EDFBB3E8B7293267CF2786AA78EC0527660082810DD4D12583633A6
C96A03271AA6593AD35710EFCF4C5C1807B0005ECBF42175BD7922DF0D05B292
887F37DEC8BA1000E02A8B3CDA0FAAF77B209EFA9A01C049C6543B0CC6DC164D
9935AC176C345606FF09BB0ABFE548622FC2D323FB0BD0799FB9EBEB37077762
2030A2DE3CD307B0BA41B1698FFCED3E0810ED8F086FD4DD9BF51C14034F0995
8769534C173292F991FB117BBEC591905DF8A66DF6D30AFFDE82CADE349092BD
E88DA719EED8109D87C3B4C791E5A440606B0FB1A6B7EA78395D993202153A48
DB1A6B72F3D4055F6645C0A1DEC7DC709A049802CFD861C09DB190022A67C8D4
88155FB9E592618A32506FC7C4F83DC34EF929BD84610ADE201C64B6F38D1AF8
73CCFA6A0E772256DA4114881CB233AC88B01D9F1916A3E481108FE1CDFC7F19
9BCB9A743175E523595C278194E98D799DB6C264F50E102ABF9248706A04FD5A
33F584995377DC0A38DDA8CFDD58B3F50FE19F3A3904EC4A402FF4F71DC5AA36
8E0EA45AE3A0C9A76C320DDC3530905F10B4FD088BD3BE37C6200E44974C097D
E0CF3F3429299AD32E960DE2CF2E3C9CA94D43E219F06892F75B2AB52A590DA0
FBD0CCBA3A05B25B0E98968FBA2BFEE43E6AB61BBD949688B30F0B4F3F53DE56
23911E77D880B9FE86E8F82E394C1A272CA4D7A7FCC095DEECD1487B9925494E
A103A3933F46EF2333406D4FC344F58F6695BF9AD24BD34C70AF1AA6018EB56E
B97C22A263FA56DCFD4117A289F1AE2EB7B01368C6C054538468FCCB89734949
F1AEF0DF67893C1D06F198FD4665A096F0D92A7A8A44160B83CFB2E11F65727A
FA573E05927E44B257A02A809888E13C91441867EB58AF19142A8F8BD2DD2CFA
45603529A7F3ADAA7251FC4B24C2EDD74B4080CFB9A108B75BDCF4A5ADCC1B9C
E00FA2E2E4F839095EC8E4071ACDAEF004BB925AA39072DAC4A9B73AAC8381F0
EC716D7F31902DA7BAACBFA1F2E5510A43C5C8B7787685EC6EE93E0B015F5F6D
7DC35AE3663B03FD2BCEBB3ED6E58630321A6B6CE162B13FEFEEA3132FFAAD29
A8C4DC91644959991F00571832A34453E845E20BE8CC4084BE411A3BE3C3AEC2
027CAF7D65AB11338CB622CDE7D3A958DB99DFF6230C498504B647B845EAA6E4
0D1B9262FC37DAF37F4239F4A671CF096E191E227D41F1A4E131F6D4FC0CB2F8
3F3B4A939D86FB7518C7167965813861A383DBF1AE8B44DEDD7C92FA3787EC52
3534848FD17AFE1A936796E59409AB7BC232EAB93115FE510699C478DE479B98
77082D321C9FCC928638FCC2FD5B04E1FDA31702AB584228A5949744FF40C709
1B9E2032806C14C1925D849384A1DE2B54620A995BD4265F05B9E7756EB355C2
2625F21D76F88238482A7E414392D21E77FCC9C04258E056A5575CDAB2D1AF67
183AB8B517123389133862020A075767A77348536B8965B324D17E0F39B26867
305477677C8AB69BB2D93907C657139216D40EF6F42EDE8F0CC8C412EBCB2C28
899E9F5A68FFF66BDC6257CE21571CCC88629DE47E52E3669713F43B89DB80C0
BE7180B2E3DFE4DA4BFB0A1FB9B173DEC286156CE992DF92C1C48C46C460BD86
052A3299800412BEA43ADB6541CAFDA3564E1B2F38D0E6F1F853D815381F5B2E
84F9B9203E075395077CA3B1AD3F4D32ADFD138658D935EE7918F027B6F02B69
62A51C96D42368C3162662B079771918A17E7DE4FC3AF05F5FC13236514525F2
809B9018ED791A9CC881DEFE4AFA5D1744808C9F98B6EB21FA6D5B0DCA2EA3BD
3134232F258ABE1778B61835BCD85A17F93EA5161FA7F4ED9361C4DE47DA5A59
161EDADC3F0E8B76465E442D5A5D4DB05393AF4EEAAF5826FD3912A7E578273C
23699882ECF0926EDF2D12E4355A5A8C8CFAC80C5CF39A0B63B587F23DA75075
B8D5B0B106414E0C4F690944377F50257C4E0B1682F7F64B38DF8CA7182C7EF5
95755882E751A70A0EAC8AA1880AE784071E6B3E2101F0B663DE14DB1ABF8B78
AB91582A0F7A3BC051BBBF4403653415FE55B8F7FBB248ADBEA55D5259F321E4
4B65150A123BA4F71230909118069B13EEA322B42460A6D1FBFA26686FB8B430
B172C6CA696A2856BB8AD46F4513E465DBD15553CBA2F0418FC7876194A90AEE
EEA34E3C7870A13EB66B727C8E343A394530B014D62164BA463DC07147B388F4
343B283D1E9906259C74BE3535877F54B62159E1AA87E4FA193238B26A7DC6BB
321D23CCE16C49D5B21F6A5C8CE317225BEED285D6C70FB97F26245ACE9382EA
F7EFE22A0BEFE38B588C644CF5F52D4F171AC9699D26696091310266B2652B9E
71D3AFF1CEDC040CBAA7909AD1D2EE0FD314E3906AC1AFACB770B06E61E78DA2
1D0ADD66AA63DB28B8FC3BF73CD07503EA87E35C27CEA4CBB0881AAF8D49B939
C1C9A2B2E5E52054C232D2CA6B7D5D5551F6B72963DEBAC9E6156B6014AA26DD
6AEE3E49A548602A567DC65C8BE20EE57A52BB799580D5BAA96E767723A3A08D
455ADAFA8F7470FA0888A89C6DE90D57997B9538796607766AD28F7DC3CAE25D
65127B1CABB84D2439BE88596B165E5DA6866E0E38FCEFEE2A6AB6C95B723728
1284187196061634F8E979A24FA1076E9319BFB2C7E7A5876FE57F843501D023
C99A1A2EAC5D6BE07723F9BAD427A59AEA62DCBBBB9A77B80D48AA68E36A4E53
4EF009D0398316ECC5EF3C7DB9937903C5B962275A000F610FDFEBB571AB96BD
2EFE727F36708ECD6D4CA39743D90725B633A70C6B03FEFE0AA5201A69D83BC5
17F09C0F7D604CB8419E21266E3C05037F1D2545E9FACD008B4ADB50EB9F03E9
857BE7D75CC27E5859EA562EA1F7C8776D35327B6DA286E6D8D47D5DFDFB271C
7F99AE4C7AE4F0125C89FAECEBD726006FD69C4A28349E8F71D7219E5E96696C
4862700ABDF23024F26A8A5C2C6AD99DCC483104C0B9872C8CA009ED9A255BA3
B9326A0502199AAF7F906A3695655721468F62A7EEEBE21D50A78203644E0A37
11C84B787E56E40C9FF69FBCD3A6F1A08904835C9D46C061CFB60137236B4458
521F9A57418DD449946AD8E49A0BBB9F26FCCD06FB5D3E31F5A102EF32A633A8
2CD56CEEC31A6B498BF5994D3565CC1FE60E08064E2198077957675F266B1929
BCF6F52BAD54256B61886F19B5B15D74CB098F56CF1CB341A14066014B29D2D5
67877FDDED97FD7C9E73DE4D6D4ED370EFA660A86D6D312AD872061B3852B74B
74315A5BE77206D30531B3C596ACC94100FD822D02717949016A7DA4265A279E
08C53CD50C42D93408A3C47CCF9F489BEFA812B28A40C18D38DC1F559D239AB0
5B0372B773DD5CA4EE59F8B43407EE009FCDAD6BCDB5D605856403260016B969
248BE983824993B4314E3D3C24CB4A6466B22221ABFD96F1664ADABB2B6DDD4D
CE3E2D9E705A7E0A796B3892A48FC9415E838D72FD3DB7F995DBCFA08C1B5C69
DC9941DE3215D97552E4BD1266C68DB1C3C41FAEB067D9A596F51B109BCC3910
1FE1FE3921C328C0DD24C12ACE15804C6E00FF06934385AFC4E8E285495B76F3
88D8FD19684A1333A4C7515845898469C784F767570062D6E87E55BD525A7798
9E7F7E89F93CE7A1FD53A56FE4CD666050C0DFF397BEB804B5500D4CF4345DD8
69B82B4A1568FCE058809B4819B3291C2BA01340C14B1F9F6B0113DD39047084
7C621792B82F08995D14DA9E9C3EED32239AB20F0A5F74414B28E6DB1ED7765B
A8883CE5FB85DE6F7A14B744A031E2DBBB9E165D579FEA760A9EFF8D1A949C2B
C6B3C886F857B2FB2F403BECF9664855121FEEDC70965D0185F5E174F0758420
612675F7F498400D6D7DC137A904C96EB7B3CA2E65F64E879C26DA9E2137BBB0
50747E7D512F9C67296CB735C4120CE077FA8319C9FB4E2199F5F63C87E1528F
B85D3E6B67C5EF6F38F0DA110BFE456A4BE2864E4CAEC37FF6388A8C29DD6E0A
DA3CD633711F7EBFD13EF354814A1575BD305F1E51907C9F5A0FA8A76B946AF4
D12746D04CEEA18D2AB3AF1038F592944DE489AC392076135ACE6FF8990EDA77
A33413728AB67AA3A8F061EBA940567B7814B47E09C2B12838DF827ECE6D26AA
07AF011B3040C8E053C3F1EEFBB76F995F9EEA82C85ED5999C3129160FA0CC41
255D9A7A69F09603519EC8049C389B98100609DE28A1AE7578AC29ACA2D498BD
65468FF7725B271D72CA5AB1E77DEB092CF0B320F979FD4191B1E41720D5C59E
99A859913E026E132E8966443807927CC92A55252BC0B10F92E1CB9F2E8D94D8
DA1C02F8F13A52ABF449013D86C196BC5596FF1655BC0B1759602A4FF4E5BB58
640A222269D236DA6A1597E42B4AF6CEF297120DD8E29CC460BCFBE64D454281
7B56BF7DB93B51B70D52E4CD68E283D185CE12E4E4573815316CCEC39102DF93
B156F7DDE3F1ABED348BC91E43D4347B8EB7941634F3A6F5B4814BBB7E573A20
1E1B1E35339312EDB51CFDD2FBB946DB8AE29D6D71ECBCADF9BB6598F1631D0B
BC113CB36736AAB30F8761286AB85FADFBC4E67143B4AF5EACC12D2733C29126
52BCD4D0A29EA131D482990C36B0B207141225EEC9CD4A74FA575548DBCFEBFD
C0D757BE3BDCCC596FE5D5FA2B5291F715781C25F3AAB84B4E7231D7F0DCE06E
EAD30F06D2C91645A1F5CAEEB4582B2F0C81C1F104ADB89F170C55819D14FE3E
D2226BFF781C78113CFA6D9FCAB9F78C97BD2A52D8B2BAC132B7A06DF0704EDA
DCB15A38B031F1E4F74724248C6E0C15BBAB4D36C98E49C82A26E87B87DD6EB0
DD026D8599070FC1F62B45083BC120DF0DCC3C67E65CC5F7A2E252C8FBC051E8
D31E948BB61647010D307D6AFAC179F40F6471526D408712B81394808DFCF605
4FAD9A3878CFF580CF3ADEE518DD9C97023D9026AFFE78CC564AB11C8F4D1376
E065C6419B60AA22153E602B5E7F9F063DBB62D7AFC065E11AE2901FFA0A86B2
5645D7DC476804199F4B053482045F9AF9790D865268F7FF85ECDB306F226579
8768CD17502E8F696B9BC94199421DBA5745C50261869BA559C69A4B10B8B671
5D4EA68360AA588EFDE7D7CBEC9743E97ED1696DB048D811D22C9CF7E3FFBDD0
37E88E0B9BAB065363BE20DE3BB528C7324497DE41C1A62D1EBD7A84E7E78ABC
A4B231B9B2E3C784B2B7AD90BA1FA4C3229B2185CB87C43CD58E4190656F7B35
2E24890560FD200359BDE49D4469DC7E5A9141AD2C56C395D1B1542BDDF61D32
580EA7D9EA5958819F5CE03BEF6B59B669723240EB0264253EFB7750933EB3D2
690B9A9B887E2E8D782D8BCEDDAAC6BBA86ACEDC40036200C3BAE0532181AC95
9301E176310BBA8471D2E993F529576BEE97F30907C5703486D8AA02D9BB918D
FB77A5799351AEDDB450FC0CE5E2B3EA4C6D628CF5876120843CD936A74B76C4
2B3F3893DC5BA43629AA06A0BCFD147F2D7C953345DE243983410B51E666BC96
24D041376BCB10C41986E2BF4B1A27CB1B023BF341D2644E89F28DCDB4FFD3D7
5466F1B50800D73E235866BD297F621C92AAB3D4CA2A75F011A7EF448DB33BB1
857992A848ACDB8BEE57291383D94AD054F6BA39F657F974B324C5EA66D3FA4C
DCB3E0C759975022989F006B050F53DA5A45E8DCDE96043F9231373D11A7B664
5971E0393570DD6F43C00191B24E20E69945CB61E166735B719668CE0620C350
DE67B899F9CE09DDA0B187D498980B8DC1DA7D1FF73389513D0B919F91B7D530
D52150DF3910B8966FB3884302494BABB9680E42EFDF2397B3E9E572BA0238B2
4A74F3E20766E7960E89088DAEA1805C96613FB5022F220DC7C268E278945281
FA219E49C2F4D2C8EC80D9E187F9E15825F57F8E373A68A6510AD6BD87E9BD0F
7E93A67159F5E75767C7F5A70BB2D26624227E54D76876DC36BBFF11D1720724
99170E21B59E05661E646D8173A5BE71EBC504A638F248C409EEB53974A69D2F
C7B2005207EE7676D8ABC67B52D80244BC4D6F73FDE34846245FB19B5036E5A4
081D43105AC946A2667805EDDEE005AD1BCA7F9663DFE478D42804610E4F730D
AF2F2D5AB767C320C62543E261FA7D1D3F3B7588222674C1BA557F639F2EE9C0
FA967D4A1852CE9D872CD46D534EAAFA2CBC4627306C58257C25B15D0CC6E612
77E23AE3D35A9206DB8F5959CDBAE44B4A0173814A7E6D2C681AF408F01D5792
A583F9279603B1ECF2180C18F4CD8BDF40B4F08B10FA58AA1737E85227AE51FF
F051896FB41AE222DF8A67CD805EC55122AC71363F967091B8B375C0E70D39D6
6ECBBD069BC21B05F8E51C0C1FBF1F6C230C1C99974CEC3D5F27E9BBB3D44EAC
99E70422024A7111D9A6816E165DFB4DC616F944EF0AC894127775162D0438F8
82845B8A24DD72726177DCECD341D45C249533277FD8F9B93A877CF541BCB18D
8E81716368E01D9130D3010FCB203D50D9D28E441AB18364E7514F44EE67F914
7F84117948C4C6A871D82E69FB9A142958C6A919FEA02F5D20D2605E4AE05405
BA8EB2AB0A2F50FD97666B5D8929A96E6D27DD8B231EE333DE10A913779C7DAC
B01E8E1587D9C2843A426FD7317353E8655CA35DC781C4FAFA29952E8587B76F
B21C73368563AFD414A4FFAD0D0845B34515F09D63390E2A61346FAD0216B20C
4916BAA2633224FC0F1CA40CFD8B5272A444B956C30C7ADB2DD5A9F66C4F84D7
0A89026F9112209530A35FC6145232C379D553953BE5824CBAF11E2FE0CB1B0F
A2E6ECB9EF217B8FADECBEC150D8BE2DC7029117D29FF0A396A4A4AB4BB2CEC3
DC161751D4E0FE565DDBD45AE4670EF30B60D2BEAC3D37AFE20FFA92E85B8E23
9BF268A2F27D3FB37CC861278BD05F8144D53A8BA6840304B63BB75527D56934
EEA2B1E37627C02D3EE2C32D85B045EE2BB8CBD88725B10C08A5B355BFF3617F
0AFF3E247587B5B9B36B622485B7F929FAA9B6A0D15DC0EB016E58ED57F757EA
CFCEFB6C6C2C12E1DA61F129305A07B32CFC40E14E0622DDBFAB29C47EB673F3
8730E2C28CDB73139BA9397B57CD7CAC1B9E570FF69A6A7A1BC4B8FCC1704166
CD3DD128179D7720635059049FC2FE51879FD0B194A2E03372C07EC4D6535417
772E66F4D60ECFED2180AB15FA42F2F264CE7FEED86A019485EF31E401A6C2F6
C646E9169D885AF04A627278E243314F53B6008749231981EB5DD9ECC1EB5EA6
3F458E2766BD9FCC07A36EF34F0E0E01CFBE5C0B970995157DFFF12F7A89C206
2C1A17E31F6B2F73C307D1F7291ED6702F34F87727C4CF78D5C5F114418ABDB4
46243B76C402C5DFB99BD8677BB3AECC0277307A20B641E77FE267003CC13493
0B868DD9FC36A722247FA31962915386DF94300EBD1E19B5C738F9B14CE26284
76B9275789BD46C6D55908AE35CB8763834BA239F9CFEAD9099FDDD037C9A189
1DD8656751732BF41A130E71D69709DF330DFD848D2C21604A3D4B856D8709ED
4FB4DD697B9DD91D934ABE15F1D299A11567DB72442CC75D9D2B65F3EE7985B1
AC6DCE622EBFF358E63D9F6000F11FC2357FA3ACF95E6D652AD737D670C54B52
1EED1D06828DCE13D4F8ED895BF10131BC8969A7E52BFC97C3C1CC59ED40A975
EB8198D0BEA2FCD4557D0D226934EECFDDC7D0B0B719FBB15AD25FF372CB9CFA
F7DA3C2F60740F4BB5B92736FD7F65DAB635B2A1063E5C454668B8DD1D7E88F8
114011575FC051D1F6C4F7C9286B5D519DE29097EEDDAE6BA56A6630E5D20931
E04F1BA0D10A0E8E06F1934736F8BF9AD49A10A4C6F8A176223303670CE24780
821FA1756569ECFB83ACDC25907E7E037C27FDED1CFDA18F88CC3A7091EF88CD
2133095183C047A18DB27E78A2E5EEAABC37B6133662BA695A3ED67566D63B22
F90AA9047B20647CBC2F422CB5FF149430DE3ADBF4CABB0D9F723BEB408077B9
CAC7941F66E1A10AF87B6F4ABF63C36147A10C05A9672D2FEF3132D7A24C782D
DC093059E1F19DC7286BDE84468C36F510D636C264823E4DCE5C273AA5F927C7
CB2A967F5DAB58B975F27196DE883559CBD7BA1B3B72D536C1E5AA1B7A4C14E7
C0DA910BF12C3ECB20CB5D86A162EB80205044936800D6F7BD0FCCFF837E1CD0
A59D88ABE3C8FF2C6D18F387E700EED9D0956AE651C28A61DEDA9859E0155CBC
000DA5006A049FD3B3507458C203C3E1497BA179CABAD4A8A3332D52D5C12EC8
46333EBC19292800482E1E32579ACD36741B5AA44E38F3F4C243CAD31EBC84E2
1E512C46DF4A11ACA54DD2FEBEA20D520F727609E7E3CB29A719525931969CD5
3CFF836236F172FBCF9B58CF7A5E6491C61FFE49829809557E92202F8BCE3771
C5140E3851D25DAA5973353FAEB8D61343BFBBB5CD8F2A200CA20E03972C72B0
D9E5A8625F7C1EB6925B698482B7A9ABCDCC4E4F314E5934C1814B210C57700A
47487AA35A4B3405EDA8AB8021ED155E58FA101D56F23B893EE3313C01A17890
9ED2B7EDAFBAA48EE80E7C95EE304763BBA1AA81F9D74B24FA7EACEFBCAC72D9
9ED872CE2772DB7D5B3A765D09AEE0F0178E20124CFEF0F76BDC376382226C92
B9537D46853B13F2D572EDE3352647E8EB04A4A9584F259817DB8DF4FE27EA1C
A0A8EB8F75A287223C5886E995E6242FD24812CE169D6D2686D4EF61EA4CAB23
983FF47E4CA9C7BD0E74E4B314211BA147922E0B7794CB0F980B088535759C06
A00C412F959028D81777B20B3D1958ABFD1DF06F509A118DAEE30B6F019006B5
51ABFE4DE5DF820F1B9CC6160CEBC4F8E80A54D110435B8D61DFBDBE592A165E
1CCB1BB28AE2BF8E9F267D621E7358A3AF8A5C4C8C861408D4F4E1E2CC64E1E8
8EDE9F237ADA30D3C0E24A3B87512DE776A9DDF64744F8EA46F07BB8A4E027FC
937D0B029AA5A697C3F18F402EBF90F499B6F9D06BC0ED49C59AEBAEE0E5CA7B
5EE3FADD9DF3E203B823FBCCD030A1880AC6D87BF0D60C43FAE52FB74DCB60F0
72F3518233A258B54022C1D3BEB3ADFD194339A4E509E24B79BE0F91D28752AF
75F0431A685FA1E67ECA1EFD6CD3840D58BDFB5771B2375598968312A21FF24E
82E600DEF14EDB515A2389958D9AB73D5DF04B3BF096B274A94FCD5719F16351
7FB66E333E7C1453FDD0B65D64E40E60CDB474EA041DBE2706B97BC4FD641B74
BF8864CC28D7AAD8EA3FBBBB407E0ACC56E33DB3BECD84ED47AD6861D3873CF0
4374F19B0E8277A3D932EA808C4DD41C0FEA3951EB2C8D17C29BA94682B9B19F
D5A5ED804CF9A763367BEC85D9D26CDF0AEAD0719FA3191D04A56EF39F058FFC
D7E189206F6568173C359E4334BEF890240C606276B34A7453D932AE04BA8EFE
F70515793A51CC50822E4C68A807C1A3FBC4EB6399D6A4E3A689085A034CBA00
791EE592FB4DAB538C280D15CA84646C78399E063C0AAF44775E6D1570F08B30
85004F9E54A2428FFE3F0A1088EA1A28736D50D78DBB5C4817B40E071A35308B
6630C3F4C3472B2334EDB0E8F2529AE564B40249A606A39FC898CDB1BF77AC82
09528C95396564C1EAA8B47964430623203A2F366E7DCAC3B6BF9BF11CEC82AB
A6A3CC2BC6F585B621FC39F101606767151FDFE85AEDEDB77D624EBFE2AEED64
EABEBCCFCF7601EC1E9116EBA67D3BD9E3CD84953C52CA370253121A6526BB46
544F2B9ABAD46350DC9C2286F9A024B00D1EA14E7B8EA8A5BD31E2FD4A3C65E0
4F45CFA1B18AA7A79AE3E5A9D013F904770B1F2E9B707453F8EDFE45B1E3F135
AF77320C9E19C51CDB28026A4E4AE6884735E803F42A5648E6561C12F0CDB0BA
121D3B83F8FF990036845AA83D4449A152933BB68BD3E22C49F950AC455534B9
947434E3D15B0899D73B9758615C3E52D1AF586917F946D325307719D876A65F
B0345222C9196544AD26D561D9C8844FD1466D192A347B65DD1964CB5483D7F5
1523208644416D6FA5F5C34F34EFBFEF3CB5661B02C76A1E62E9B4CD2688FF91
3D3F49F86D639766FCFA00A6EC2C658547487FC2B6844308370E20C2B945B853
DFFF535A7E5C6FB17BFF5F6C0EC6CC6CF9950DA07CF08AD4353D52F4A9139970
E062B351AF68410EF6497987700E9FA4FE331B7D598B33B68992E7A2F38FC010
2D37B14D7743D971968B88C56FFA843B1EF3AACA3FCEE17C7835239CD826C409
6247050A0D7757A4BC7C0380ABEFDBC4237103603FE20E39A3CFAEDCDDC84FAF
D1AB548A688C4F785963A8879978D5C13AD7388AB725051F3287EE5C4D96208C
DEF85FBC8B632D158A299E13B3FD58F627B164A6E78E1D00F8D32D5A7179D025
981DB0F1AA37EB7E091123B26371DBE0C7AEF33086981E774B082BE739B428F4
6FBAD2B52DA1745E4F1EACB4D6A50538653A4591C923F2CF24B9513611ED0874
B55A2F393F513C09D57D1775AACA1114792B19A3F53E9A4C8A796EEC74147ABB
BD5F423B7CEBBDC85B12358E8DE68DED71F1E32867D6D45DD553F7D83EFFB3FC
12DA2D13F4BDEF5BF8C30E907C72052513A1B20808585CACEF9C42677B70363B
DF86FC1BB235B2ADABC5EE6FD28B3A9C69810D387F6543889B0C918B4D806094
6ECFBA5ADCBF48BD3DA176778177478BDBBBDC518BA31D1085426E028867CC0A
82C854EBD963C203C1EA3322869DAF45F0068B8C3C4E8F387C78E203E0D14738
908072C47C3B4A2404A102FEBB173400073C269139B6E81F96156EBF5B7D624A
8032161D54A462A9BD88779DAFD2048CEC24861DDBB8DB69386D274AE08FAD71
173963E8A9EF7165583B1AE09C3F12BAA82365202F0BEAF3DCA6DAAB758BD7FA
7D29C266129C91A2A5804981D272A8935320F972462CEBEBD4F449CB10357090
B5951F30248B5410C7C68DC45383A6470A21648D9F06AA9A610F64F18D7164BC
597A28D5E06E1A1833C74A1F01890C879AA4149F93605BA3D670E7ECD6DEE6E3
D1420E44994CA6132AC03A25067F45B16521AD0199BF61E02C90B00C8A5BED21
A826EC20AC4384A8CFF8CECF07A5944A84A7D65C10357563DFE6085FAD3790BC
C95E85894D273E33CAC268C6BB20D3A288E01E2B9173557BD09FD38F5DD0F1C9
8A2EFCA1A117133DD39BC60F687306A1023ACCCE892965D7D4CF9DB0F7ACF7CC
00AD38CE90C43ED619F5029011D8526850A8606A7EF26357BD2707948EEB140E
E06D051F08F732339935D44D24D6B25F8554F8C6570594C0AEED4A6EA5971C44
52557590E7AD8930C9777AD0A8A8761D6B86ABEF80DED110C7B0C9E17F1834BF
A8B62AA9957124013901C9671F77F34AE38FAF75FF5774E26D0045CA71C17A3C
4A5D77DC92ACB665959298984C79D88A420854DE15AF291ED675A634C151193D
29AA6E03367EE012A4ED81A8493B153CEC0FAFAAED622EF1906DEE0BE049A86D
A160390743698C6DB495B96D2AB7F85114F10767090F5A01C7B35DC8851C4CC3
CC5FA14AD45D2C2D3FBA9AE6B0AE4D83681CE09B1BAABAD5DEF2C0ED1B606D72
14981A0678BB2138B7FF05556CDD7FAF7FD80B4A14BEEA12CEE1BEFA574643EA
EED50C843AE02AC6EB048F1D76243E898F2442AF858196ADD0AB7EC59A2ECCCA
4E1B9684D8855A6EBFDB495DD527919765B2CB69BF4889655D79EE67D722E541
98E66CA6EF6FD2B82E5B2B54C7B5A51D29A3AF781F1551F23E2D70CD53E72374
B468836D6598FD8B539BDCA02A0A1C3058ABF1106798F4ACA236AB35C6DCBFA1
165F47F8F52B0787EB4B70B9CDB7BA4321B7A7D7A973F2EF6772A4E68C034763
01F64F89E157D671BEAB398AC9A1DE25C9DCBD080456E7D7DF36AE141331BE35
D1D5308C927BA3940B773F20E04EB1E86852EC0BD581F6982995D8A72DAF1603
94A4644C42089FC38C3033DCDA518AB8E4A92179B2E316C10ADA9308390A3A4F
CE7A438E91297443CF298DD34B7CFD6A96B8CB1340E1D2D07DA7E406853D3ED8
E58624564DABAC8AEB59D846382E841BBF95A07528C8343292E178983EAD80B8
04EC3117E38FB2A662D90BAA6234DA26D0C1005AB8A01C3D57BE4BE182B460E8
A72F356B76A6157DFE1897EE6A38AF461467424E49952858431A3AB81FC61CFA
1C2F53DE49D65F468A51513C6C0C4E7C73BD8E43A845AE25BAA8D824714345E8
9DB88F82BF737AB469730545F2036D66DDA4031A8E608B103688D2E860B9BDBC
D50DE83834309BF5ED9D8632C4BD136C89169D45718A88BAB8753A2C93A9E54A
AA4E9368A2B8D449F404C30909A4D05A86823D8DC18BD53F159FA646A53C8849
FD2391A39F0F8EF0AAE7286BFCDAB3C435A36C19995F378FE5CA9D10043EFEFD
A019677D9C76DF7005DEC5CFBB4C44F805C188A743934719BF489DB0EE5B1A26
07DB3ED0285C3F45243852820EF03EB99A23AE97938041F7541CCD2694F09FB7
B0B0227232E6FEE461134BDE0DF9A847490B82EE2C63C2051C289EF7A89A36FD
278669BF4BC0F66A9B68D7E0B423CCA3B6DB3691CDF4657F7AD0A0C738185A22
9FA40C1B4E4DB9520C5179B62502A6AC0139D5F6660FA394673BA5484CC6C201
DF87F0F105C79882D616159786943018FEC9D5FFE44F8C791C47B490C8E3D8B5
86D52BB01FD7868D9E0C4930379FF87D4EFAAD7ECB3174498164F2CECB8F3ACF
AE9D36CB7E06F9DEA2FF2EA4BD68A04BC3A9E1CBEA85B21AB5007580E98588C2
4B5910F261239971403114E83232F59828A82927ABDD00DDC694120CBE30014A
62A5BBB1FB0CD99C8D4C0D16D50CB7FFF46CA2F1CF8F38923B7507D06C197FA0
962EF63BDD5B52DC16BB39702F57A0E7B290025C06CDD26B204CB34A52A6298A
7286BDD41AC562AEDA5BC1B4A7975A24E261497A97192330E9CA13D9C379F6D4
BF688ACAF9F67A36787C7F8E533A2C71F469930F2967664F0D17A94A65D60B44
B42C4D2B57D2E4BC003F05EA7B0CD2FC041141C384305029F1D102860A54D8E6
56ECEA88768396EFEC282FA0D58580FB84C649F65CA60EBBD48A30C0D666B86C
F2F2FD93374EFC9F1ED8F847C453B6B2253B6D86590198C59575950936554C29
EDD3DE5931CC93B4859A21AFADEEDBADF79D871C07242CA31F3ABBA9BCEA9643
8C90156BBF2DF401CFA272D42BE6DCF11C448EABAC1E6A7DFDD8349E5BD7D5F6
735067D8C0F31C456BB35D31B98E4DA0CCE012768035ADBFCF366596F5E3DC4B
EC30136B8BBA284FC36F875046D7A2E46445C76DFE13BA287373EDBB248B85BF
1F354B6FA642B5FDC187DA279FF7D54B40F9549450505DB595D29361F8253C26
C37E09B4F87056EDD8CD42B5A93D8EFEA9A41172D1D82E14B0037ADC38D7A958
F4CBED5524BF40246A18A8D921257BE9AC6BF7CB079F7CAD8931A2817EC3709E
EAB74AA7AD3CB3BF89F4FE0AD95E3DF95492E74983439AB75BC7A21F225F83C4
666F459F6A54277C0FA4C177C140D2DE5C58227CF3923016BBA0EAB77747D567
C3175D8DA358AFBBC77987CFA982D1EC42F237D3D5DE48A02214EED3E50445B7
E848F3E3BA3CD4B95F0AD583FE897B8A7EB06DB42B4BB954C664B7E15D8DDD16
BDD352C1B0F86BDE60D76DAE129B7B9388A3B6308CF68A69A619735871F82FEE
A2ADDBD13A692EEB4A6CBD4832C331ACCF855469B059AED17AD342D00A30E330
69458799F0610C2DD39C40FD3B1D0B39B9E37B967FF1D9A1926DD364A1D0A65A
33EBB6A2FFE379FF40D78826AC5275EE6661C4DE7330D887DE8A6A3C971A0332
7FEC53F1F43913282D7DD785E5F54472863A43FD9895C72B839A36171E129FD3
DE1128D37893BFB424316E1AA4B38746A4ACA9B0683F0892663DF1DC35098DEA
7E69B397DE95D81DF8AB287F2D626DB971B6CF075F42771C2E91CBA452A8DF88
3C90ADCE0DFD3C1E5807203C5389F960C2262A263D11F3C1C2449623DA45BD60
B4BFF2C7E594C5E9BE1BD08EFD522B9DDE52BAEDC245455943A3DFE5422C5E45
E5D0CD32FEDF7259245BD5AA1A57DC0E956ADC19E19CA5DF2F8CDDBDDA38451E
8ED99C8495C8421BCEFB6FE8FCA1DCC7AEDA58E17EFE2DD72FD72ECAF8623AC2
C6E1DE8EF9967EAFEC0ACB4D27E6C934A2155DC2E79631499FB05BB3750EF49B
E885E5476FA451BBD9D72C49B6B7A529DA186EA40FFD8FBEDD5EC891750D70F9
9C2645865C0356D3C1AFFA17748AA9B720742A415DAA0CE1B8745736395AEAE1
7F258332DF75579CD24CCB5AC373837B365611AB4425F52FB89717B3F29BC6B2
E7A74C1FBA9B854899BDB2E776E3FE4DE1CC269861657DAE11CA5F1565C3CEA8
9D5F878C83B94C88C8934ABD872C2FFBF3039A46C0D7B4AE8479E5A521803D86
2FAD967E05BC4EAE56F9DB92C257656AC7421FFF27A307C640037491175E5CC2
3A30FEDD7BF2AB65B7BDC9F704E15D8F7E4DE009307129C0401940FF982B41BD
DD559D900C5BA1D89304BB7F34C33B6CF56326D2D0D44CCAC8ED86576612A466
C00A9A045FE4943C5AFD9B42A8D53BC397F9936CBA7529A4BAD58D6FACCABAD9
EBC22A55727BF40CAB44696D80CF4535A1A479F63DE42402DA190130A7712BE3
B76ED36626C93B3B5230FAEDAF5D6C7BB6E40E631D6C201F2CEB2B654C086932
6F696544F6B1F129A854A81ED65184618E121CACDDA2FE214955FAA891C7AEC1
8EF33485035BD4C47CCEBE5465E17E77A8B4E0B5182C76F97E58C9DAF0E2AF1F
CE9967369118E1EBF597528D5C10AAA5DD348B3906B9D46FC709E5F18DF65430
114C1C7BFEB1E68A7D3D06321D6DB8FC84753CB71C8851D20151DDB78016C88D
DEB81858823331882A9F6B05A241474B56B085C3FDCCDDA3D04C8853C4F236D4
85E44CFD668499623AA5AEE97A2B2C3B6A501D620835BB5715353EBF1E5A8459
BDD68BF1664BE26112777DCD938D48E28466EDA011CA7AB059DB519AD8D2B05A
E320C9BB32829A4BE7BED642A2CD023A1848E1121734CA2C8491573B6FB607C0
1679D8ABC2118648DE70567C63DC411F85EFB4A16F7DB74AF6D8B7242C7CD98E
2F03251B511C7ECA401489DFD9745881126D186CAAFBF75F50805881AB16919E
63B6FF654B151FA3FC43AC60378CB829EC8D5E4197E695E02DF7696931449F00
EBA9BB822D709DC4C85E653CAA8E2DC624B2C253F7DE8979A0760C5FD4B5C58B
72FB28FAA2E079CA3C6A67C5D70161F0724055E72D6FEACF699D162ECC097FAA
F973E54556E1B74A2964AC79CB7A4C9BC62620609E23E4F954F261B90B8647FF
7184330D340FD2D1C5942EBA1206DD37CC2A0C2B9B7DA57DD58285626FA2A283
1E45489794E223CE3A1F986F1E3144336BA74B14EA1FEDAE79DF712724241118
F2D4A03D96FEB71C687E69E22334A6925EB20DEE975C917FA1A0FF36A58BB760
E6EF27069DB6EC1CA2F744AD45FC5377EB57F78AE5C885DD67D047F410CD1709
FFF00FFDD35603FCC4F04942F0CFDB28356E715C338E9F02C96C563483235CCB
B99C905FDDA547F04F0CF8EB3792E8F151769942D8C667685B3D7DEBCB364878
F8AF03519A3AD4244C11B2AFABE69FF4B9B2757749651C4CD4775ADFF366D7DC
B1FEF0F8E90DCEBC9164CB93BFFF5CEB1A2A11172FF6872AB3AE3E73FEA3630E
7DA1C0D8CF64DC5ADC6B9D0CE543F8592313918B21FE4D7A6FFCE5EC45979295
BD5ADD46A004347CA24CD7CC4F63B25FA11507D7109E8AE2B92621163EA6AAA2
BDE99AB03778BAEDCAAA365949E983D98F301B04F4663162DC5EE3D37FF81D39
B613569E25EB7D48D555679A61C45D621628BEDDEF64192FFECB883665DA5FA1
EF797DCAF104225F4822B8CE0D8A2B8989FBFD8EC6A35645DD8C7F6AE61D17EB
8974A92AC5B487B43B54E0B773CA06D59D7147BD860AFEE3C20B747ECF5A1C5C
1705DD0B8E6EECA2D71B9FF9B24026C194AB6A77A605D4E2B6626A6D19BEF78E
B7EA699973C457BF3ACF494DE1AB58ABEA03458E19057C5B52835CB722DF5B48
9C5972E7FE5ADBE6910708703F3C3F913B5B500197B95D3563F20C8BC2B2002D
AF0EC93A637CC8580098961C1EABA125AAC6E82BD50EB3F38D72698FC95DC044
5EC0CCD13942836CB6D626CB4BE27FDB89D37F5086926DB65ED4BF1F0E271276
EB9882511D7F617510610EDEC5B16DB10EB69783EDAE1FE69761EE4919BE4592
75E2477155576F01E363E6B5832F3C73A7C87FC2D2D184ECE0101187BBF9960E
566B836164C9561A6026DF2BD0B735E48784337DE64E7EE718BABB4A57E6C037
8E101B889922CBE63677BADB547A5179C4104D8B3695EEADBA11D1FC6FD65F1D
BB6FB623756E9BD8781D2FED80CFFE8445B17598E923C4F367D1B383FAADCD14
50286FC19405DBAC82C73B53660B1BAFAFA10E40E1485903F81A4044A3F59518
B09E9F6D1B7859A831F3F8F5D265DE81D2354679B863457FB4470B17D5D28074
4AEAD3CEE445EBC7F8251E51A932E18F9EC9E64DB9D97CA5F622E8B96E4DD3C7
51E3FD6A090908DBA87DDA851646331C092715A995A5FDB4685C29D7AB7F1D2D
E27E68652687F7F4D3A405BF36BB96FFCC14D48EB113A3E347B579787ED4C0E0
D15B388E85B41413BC626BBBDD69FEF743BE8ADED113D6C4D64AECF2BE8A5F07
0FAE2509346390B688F97C3520D36CFBB3ABDA814F7FE78D435F64CC48F3C66A
D877E63E43B0EE2C454DC4C75B3DC93224B0703C449DA481DCB94ECFF2363C1E
C4964404D8C9F78EEA29B1143EAC69D8B3C3E79FBF37BF42550ED97390765702
66729731A9CC40CB50235B87F4A87DAB405A774BB2242E7800FDEF78BD5B80F9
D723F245840AB8A7D2A8936E42FC3A0E81B795F7583F70AB55985C013859445F
C0155619A543691DF942574A2E775064D19E989907121EFCAA022E9C5759AEB7
A63659D9C93E2E65C5822D9993BE6943EABA39AEC2F33693D6B46DFEFAAD63F5
716194F5E39B01478393188539F8BD7D6A4497FAB92DCEF40A96A4D5760B3187
0D69C4C1E0B884AD509D4D6CAB7D23345E4D2D8DBD9B7388D29955898EC4A35C
33F3BE545B3392E5E9D8452B79FF893FEC186F93BDCDC4DC8A4B848A191D147A
E01A846BC5B66EDEF011AAF096CEDC78F1CB1154E63BD913A9D7D865BA674940
5CE3AFEF272B450E9081CA665BEE16B10B7FB0291BC9BC08B4DE368EB43BF032
1EED2CE938BBA5668791E1D535150A6AB248ECB3993B0A111FC055C5EBB4C23A
6534ACBF597CFA95B9397057D3AD589E9DDEE6F3A210490D5877FD0C1B81C1C1
34DE86266260C4D6E151ACA5B82162CDAA5861F8A67C3F9E5C822BD887501AAD
2F523EB085FA47F8E6DAA4E2DDF80317A5090D8D28B937B923B2449C32254128
F151CC589D79D213AE815A56ED8A5C1B1D9A7D9D8FDBE6252C4AE298243AEDB2
25B24CA1AA56B084705531F7C0B65CDEE4DCFD6FCDBB15439DE6BD9D6580E843
D4FFE2E7FBC40CE3DAA15072E61E39663DD13F8547FCF06131ECE69C829438AE
A858AC87323085277367752E40326AAFD2C28222CF1C4DC905B3815180AA41BB
6B804348C93A288E1B8E29CCC2FCF1A0B58CB82664C0812A4D0D090D5FA17049
D983C37C49B727C30AD1F6BEEB1663D6522D775FADD5F61560A09EC8D2E7382B
C7DDEAD4283C3B038491DCDC7CAA32BF9D5C297965F0F9018D6BDE554F38AE88
C788EADC56100E343B01FA49490F05ECB660EA16D79199A4028F1A3AEAF61A8C
762C4572930E6CB5DE6231FD7F98E010B3D9E5B9AAFCC79BC2566F56D21DC0C3
4348DD2BE2973608D3398F7FF032824E497EB4550EC13FE0BE8056F9834FCAF2
81B8BD5C43464CB1CA8C5DF06DE2E3A8D63D2276C423D61829AFDD4B504487A7
816900B5727552FEBAB5FFF59DD233DE4656E4CCC107690973F9DB40E50CD8C3
4BCA8736F58B0BD3106881C30D6E4EBCAB2CD7599575E9569E23A6B6337BE0BD
9FB298B36F24144F130F7A844AA83FCF720CBE65A2173066A2357109A3CE8228
853BE7504D3A256EE621E1375BD57EED6800A322A9CEAE4AF3FC12065FD264E5
D56D6970B0FA6883858124FED6DE601F1C2710404E89E858C231F15EF1EEAC0F
001C8B33B48F80C395568C3310503077A9F196AAD45C9D90693F8460E1E6F817
3E1F724931D9490032B42FBFC33E9C7F4A9B2FB4DB05636D8DFE49F75A1F42F8
12CAE2D8D95EF9AEDB675A4EE075D7DEF8A073BDD9F0AC85A24B7DE00B3E180C
D209CE0ABECBECE2DEDF24159EB0AE1E5B9D69E96F5770A845747C164AB05911
E7901E94F2F2DA79189BFD80ABDDA46276EB03F599E82CA08968086FB3FE973E
99DEACDF0935C5F162413CA3A747BBFBFF136736623F91C127E56B1B62C6CE82
09C64260C2A771A5BB9A500928ACD65CB15C2A5E448A74BB38754A375CC000C4
B1B56FE2AE468928AE099D5B72C102215FA250B9AF8F48C7D94D9E4A3C6A3AB4
3C8CA85117D7E013FD0E4D5A2B8EFD9C3C29AE1F0F29F033F1C439F6FC74D7B9
F2DC2528374C066089043F659CA463DFF0CF512B445C7748506CC72A3F45A4F6
DD39F210713180F76ACF9497ABB25F2268FF2FEA803C6DA6C6C4ED711F973F0D
E9C252D8EC03DF579AEF54DE912187AAEF71821C76B82501314C054BBF7F35F0
B6B19BBBDB55751344A43F7CFC7D943B35EBA9B18485D68EAECB18FF1DBF6AA3
35F8E5991DD7842E4C7C5511B38D670D9455E1EC9508CB564E76A0D00EC31204
46CCB95C0B6D5354AE1A2A284FD71358984A3232A9F4036354585C60161EA6BE
EDC925DF1F7EB06D1E1164ECAAE1949B5B6C55A6B878F70B754BDFB36997E1B7
6CA2CE9CF3053211920E9A64A70638678CEEA92FA281CBBCC63832C6538EB5DC
B0E0E613C7706514B14A24089AB49E0FB00AAF675A9D995F60BFF584AF52FB74
5E79D42FBC776B13BEBEBAF3530DFDF3C283D4C056CE60A6419E3F6601E5D9E9
2AF9DB339001EAABAB353157501EDF0E55878C8399564C393985E8DA776880BC
839FFCB9FCAAAD2B850030E688D8C995B300BE399A1EFFE6AA02EB599DE827A9
B51702C4261F544DFFE4EFA2ADEC54DA200FB56DC483BB1FE5C048ADE2013450
9BCD1FEEFA2CDE19FEF24C4E1A6D19E6C5B3F785168BB999A879C913AFF6412B
18A8D6236A64A0577ABD2065CDAA9BF144F4973D390056D0B7BE888E9FE790F1
EEDC0FDD0E278B676F72764CC9C1DBD67E744EAFE2ACEA8FEF7C49898F48154E
F45AA6EFC5CAAAFBBDDC1DA612464E58A021E1EABFBF06EEAB6B2185D6AD84F6
42BE7A42ABE30BAEA89912E2BCC8533F0AA178EBE77AF9993BF55CDB391B1D7F
CA0E89176FF82547F2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000
(C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktional)
@start /Fa 136[680 497 523 366 371 367 2[470 523 784
1[497 1[261 523 470 288 418 523 418 523 470 3[261 1[261
12[705 1[588 731 3[738 21[470 470 470 5[366 366 12[549
27[{ enclmec ReEncodeFont }31 885.568 /LMRoman8-Regular
rf /Fb 242[1594 13[{ enclmmathsy ReEncodeFont }1 1594.02
/LMMathSymbols10-Regular rf /Fc 153[452 29[773 13[261
58[{ enclmmathit ReEncodeFont }3 885.568 /LMMathItalic8-Regular
rf /Fd 149[369 55[886 24[1033 4[1033 13[1033 4[369 1033{
 enclmmathsy ReEncodeFont }7 1328.35 /LMMathSymbols10-Regular
rf /Fe 203[993 1[993 50[{}2 1328.35 /wasy10 rf /Ff 9[406
129[320 324 4[449 664 3[234 449 2[363 10[492 17[595 30[320
320 40[{ enclmec ReEncodeFont }12 664.176 /LMRoman6-Regular
rf /Fg 185[723 4[830 12[553 2[553 2[307 46[{ enclmec ReEncodeFont }5
1106.96 /LMRoman10-Regular rf /Fh 133[539 4[673 471 478
475 2[606 673 1010 337 640 1[337 673 606 370 539 673
539 1[606 1[909 14[825 8[951 5[909 15[606 1[606 5[471
471 2[1010 37[{ enclmec ReEncodeFont }27 1212.12 /LMRoman10-Regular
rf /Fi 241[470 13[732{ enclmmathsy ReEncodeFont }2 885.568
/LMMathSymbols8-Regular rf /Fj 198[470 470 470 470 470
470 470 470 470 470 48[{ enclmrm ReEncodeFont }10 885.568
/LMRoman8-Regular rf /Fk 162[361 1[361 29[1012 1[361
361 1[650 650 650 650 650 650 650 650 650 4[1012 1[506
506 2[1084 37[{ enclmrm ReEncodeFont }18 1328.35 /LMRoman12-Regular
rf /Fl 134[634 739 1[629 1[470 1[586 4[1138 1[676 2[749
623 641 1[676 560 553 683 10[758 1[762 2[1030 838 1[1042
1[885 13[1012 650 1012 361 33[738 25[{ enclmmathit ReEncodeFont }25
1328.35 /LMMathItalic12-Regular rf /Fm 650 2[723 5[650
17[650 105[578 686 686 939 686 723 506 513 506 1[723
650 723 1084 361 686 397 361 723 650 397 578 723 578
723 650 6[795 2[1336 975 975 939 723 957 1[885 1[975
1192 813 1011 1[469 975 1021 849 885 993 939 921 975
5[361 361 650 650 650 650 650 650 650 650 650 650 650
361 434 361 2[506 506 2[1084 3[361 4[723 759 8[613 1[613
16[{ enclmec ReEncodeFont }74 1328.35 /LMRoman12-Regular
rf /Fn 27[1046 105[956 1136 1136 1554 1136 1196 837 849
879 1[1196 1076 1196 1793 598 1136 1[598 1196 1076 658
982 1[956 1196 1046 6[1315 2[2223 1625 1654 1497 1196
2[1470 1616 1682 2041 1293 1685 1[801 1682 1[1353 1412
1649 1554 1530 1625 7[1076 1076 1076 1076 1076 1076 1076
1076 1076 1076 1076 598 717 17[1255 27[{ enclmec ReEncodeFont }58
1912.83 /LMRoman12-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-2331 165 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a -2331
165 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a 1328 x Fn(F)-239
b(A)634 b(1.4)g(-)h(1)f(P)-60 b(arameter)634 b(einer)g(P)-60
b(olynomfunktion)631 b(-)j(O)-60 b(A)635 b(-)g(BIFIE)p
0 TeXcolorgray -741 4800 a Fm(1.)p 0 TeXcolorgray 651
w(Die)1531 b(Abbildung)f(zeigt)h(den)f(Graphen)f(einer)h(P)-36
b(olynomfunktion)1532 b Fl(f)1672 b Fm(mit)921 6792 y
Fl(f)142 b Fk(\()p Fl(x)p Fk(\))369 b(=)f Fl(ax)6626
6310 y Fj(3)7447 6792 y Fk(+)295 b Fl(bx)10046 6310 y
Fj(2)10867 6792 y Fk(+)g Fl(cx)g Fk(+)g Fl(d)p Fm(.)p
0 TeXcolorgray 0 TeXcolorgray 9916 38375 a
 currentpoint currentpoint translate 1.60298 1.60298 scale neg exch
neg exch translate
 9916 38375
a 9916 38375 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 152.08253 a add def
/d 0.0 a add neg def /h 153.03899 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 9916 38375 a 14403 33767 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 111.54816  0 -40.53438  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -40.53438
 111.54816  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-41.63367  def /maxTickline 111.40532  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 111.40532
0.0 -41.63367   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 111.54816
0.0 -40.53438 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 111.40532  0 -41.63367  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -41.63367
 111.40532  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-40.53438  def /maxTickline 111.54816  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 111.40532
0.0 -41.63367   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 111.54816
0.0 -40.53438 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 13158 30902 a
Fj(1)13157 27753 y(2)13157 24603 y(3)12425 37156 y Fi(\000)p
Fj(1)17317 35112 y(1)2680 b(2)f(3)-13434 b Fi(\000)p
Fj(1)14403 33767 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 14403 33767 a 14403 33767 a
tx@Dict begin  { 111.54816 111.40532 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 14403
33767 a 14403 33767 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 14403 33767 a 14060 34053 a Fm(x)14403
33767 y
tx@Dict begin  PutEnd  end
 14403 33767 a 14403 33767 a
tx@Dict begin  PutEnd  end
 14403 33767 a 14403
33767 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 14403 33767 a 14403 33767 a
tx@Dict begin  { 0.0 0.0 pop 111.54816 111.40532 exch pop } PutCoor
PutBegin  end
 14403 33767 a 14403
33767 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 14403 33767 a 13355 34099 a Fm(f\(x\))14403 33767
y
tx@Dict begin  PutEnd  end
 14403 33767 a 14403 33767 a
tx@Dict begin  PutEnd  end
 14403 33767 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -1.4246261533503426 def /x1 3.920473665668872
def /dx x1 x sub 199 div def /F@pstplot (0.46889485785129065*x^(3.0)-2.2491205922977713*x^(2.0)+1.3006525188293812*x+3.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 0.4 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 14403 33767 a
tx@Dict begin  { 33.594 77.4501 } PutCoor PutBegin  end
 14403 33767 a
915 x Fm(f)14403 33767 y
tx@Dict begin  PutEnd  end
 14403 33767 a 26751 38375 a
currentpoint initclip moveto

26751 38375 a 9916 38375 a
 currentpoint currentpoint translate 1 1.60298 div 1 1.60298 div scale
neg exch neg exch translate
 9916 38375 a 921 42360 a Fm(Gib)433
b(den)g(W)-108 b(ert)433 b(des)g(P)-36 b(arameters)434
b Fl(d)f Fm(an!)921 44905 y Fl(d)369 b Fk(=)p 3411 44905
15749 34 v 1 0 0 TeXcolorrgb 921 47451 a Fl(d)g Fk(=)f(3)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 47992
4800 a Fh(___/1)p 1 0 0 TeXcolorrgb 48228 6792 a Fg(F)-123
b(A)369 b(1.4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 50926 54804 45 v 0 TeXcolorgray 24746
81281 a Fm(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fn(F)-239 b(A)717 b(1.4)g(-)h(2)f(F)-179
b(unktionale)714 b(Abh\344ngigk)-60 b(eit)715 b(-)j(MC)g(-)f(BIFIE)p
0 TeXcolorgray -741 4800 a Fm(2.)p 0 TeXcolorgray 651
w(Die)579 b(in)f(der)f(nac)-36 b(hstehenden)576 b(Abbildung)h
(dargestellte)h(P)-36 b(olynomfunktion)579 b(2.)h(Grades)921
6792 y(b)36 b(esc)-36 b(hreibt)557 b(die)i(H\366he)g(\(in)f(m\))g
(eines)h(senkrec)-36 b(h)g(t)558 b(nac)-36 b(h)558 b(ob)36
b(en)558 b(gew)-36 b(orfenen)559 b(K)-36 b(\366rp)36
b(ers)558 b(in)873 8784 y(Abh\344ngigk)-36 b(eit)434
b(v)-36 b(on)434 b(der)f(Zeit)h(\(in)f(s\).)p 0 TeXcolorgray
0 TeXcolorgray 5418 34050 a
 currentpoint currentpoint translate 1.61359 1.61359 scale neg exch
neg exch translate
 5418 34050 a 5418 34050 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 201.44545 a add def
/d 0.0 a add neg def /h 116.66318 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end

5418 34050 a 7371 32412 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 5 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 183.8049 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 28.45444
T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 8 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 101.86688 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 28.45274
0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 183.8049  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 183.8049  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 101.86688  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 101.86688
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 183.8049
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 101.86688  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 101.86688  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 183.8049  def /dT 1864790 abs 65536 div viceversa
{ neg } if def /DT 10. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 2.84544  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 2.84544  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 101.86688
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 183.8049
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 6126 32697 a Fj(0)5655
29547 y(10)5655 26397 y(20)5655 23248 y(30)7136 33757
y(0)2679 b(1)h(2)f(3)h(4)f(5)h(6)7371 32412 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 7371 32412
a 7371 32412 a
tx@Dict begin  { 183.8049 101.86688 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 7371 32412 a 7371 32412 a
tx@Dict begin  { 5.0 32.5943 4.5 1.5 140.  Uput UUput } PutCoor PutBegin
 end
 7371 32412 a
5567 32578 a Ff(Zeit)276 b(\(in)g(s\))7371 32412 y
tx@Dict begin  PutEnd  end
 7371
32412 a 7371 32412 a
tx@Dict begin  PutEnd  end
 7371 32412 a 7371 32412 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 7371 32412
a 7371 32412 a
tx@Dict begin  { 0.0 0.0 pop 183.8049 101.86688 exch pop } PutCoor
PutBegin  end
 7371 32412 a 7371 32412 a
tx@Dict begin  { 5.0 39.32204 4.5 1.5 -40.  Uput UUput } PutCoor PutBegin
 end
 7371 32412 a
5194 32578 a Ff(H\366he)h(\(in)f(m\))7371 32412 y
tx@Dict begin  PutEnd  end
 7371
32412 a 7371 32412 a
tx@Dict begin  PutEnd  end
 7371 32412 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 5 def /dx x1 x sub 199
div def /F@pstplot (1.0E-50*x^(4.0)-1.0E-49*x^(3.0)-5.0*x^(2.0)+25.0*x)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
2.84544 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x dx
add def xy  dup 1.e30 2.84544 mul gt { moveto } { dup -1.e30 2.84544
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 2.84544 mul gt { moveto } { dup
-1.e30 2.84544 mul lt { moveto } { L } ifelse } ifelse  } if  gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end


@endspecial 27717 34050 a
currentpoint initclip moveto
 27717 34050 a 5418 34050 a
 currentpoint currentpoint translate 1 1.61359 div 1 1.61359 div scale
neg exch neg exch translate

5418 34050 a 921 38034 a Fm(Kreuze)433 b(die)h(zutre\033ende\(n\))d(A)
-36 b(ussage\(n\))433 b(an!)p 1062 39075 44260 45 v 1062
43871 45 4797 v 1770 40935 a(Der)h(K)-36 b(\366rp)36
b(er)434 b(b)36 b(e\034ndet)432 b(sic)-36 b(h)433 b(nac)-36
b(h)433 b(einer)h(Sekunde)e(und)h(nac)-36 b(h)433 b(vier)h(Sekunden)
1770 42926 y(in)g(20)217 b(m)434 b(H\366he.)p 42912 43871
V 1 0 0 TeXcolorrgb 43621 41805 a Fe(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 45277 43871 V 1062 43916
44260 45 v 1062 48971 45 5056 v 1770 45776 a Fm(Nac)-36
b(h)372 b(f\374nf)g(Sekunden)e(ist)i(der)g(K)-36 b(\366rp)36
b(er)371 b(in)h(derselb)36 b(en)371 b(H\366he)h(wie)g(zu)g(Beginn)g
(der)1770 47767 y(Bew)-36 b(egung.)p 42912 48971 V 1 0 0
TeXcolorrgb 43621 46775 a Fe(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 45277 48971 V 1062 49015 44260
45 v 1062 52078 45 3064 v 1770 50875 a Fm(Der)434 b(K)-36
b(\366rp)36 b(er)434 b(erreic)-36 b(h)g(t)432 b(maximal)k(30)217
b(m)434 b(H\366he.)p 42912 52078 V 45277 52078 V 1062
52122 44260 45 v 1062 55185 45 3064 v 1770 53982 a(Der)g(K)-36
b(\366rp)36 b(er)434 b(b)36 b(e\034ndet)432 b(sic)-36
b(h)433 b(nac)-36 b(h)433 b(4,8)i(Sekunden)d(in)i(einer)f(H\366he)g(v)
-36 b(on)434 b(10)217 b(m.)p 42912 55185 V 45277 55185
V 1062 55230 44260 45 v 1062 58293 45 3064 v 1770 57090
a(Der)364 b(K)-36 b(\366rp)36 b(er)363 b(b)36 b(e\034ndet)362
b(sic)-36 b(h)364 b(nac)-36 b(h)363 b(ca.)h(2,5)h(Sekunden)d(in)h(der)g
(maximalen)i(H\366he.)p 42912 58293 V 1 0 0 TeXcolorrgb
43621 57093 a Fe(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 45277 58293 V 1062 58337 44260 45 v 47992
4800 a Fh(___/1)p 1 0 0 TeXcolorrgb 48228 6792 a Fg(F)-123
b(A)369 b(1.4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 62365 54804 45 v 0 TeXcolorgray 24746
81281 a Fm(2)p 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fn(F)-239 b(A)717 b(1.4)g(-)h(3)f(Argumen)-60
b(t)716 b(b)60 b(estimmen)716 b(-)i(O)-60 b(A)718 b(-)f(BIFIE)p
0 TeXcolorgray -741 4800 a Fm(3.)p 0 TeXcolorgray 651
w(Gegeb)36 b(en)630 b(ist)i(eine)f(P)-36 b(olynomfunktion)632
b(dritten)e(Grades)h(durc)-36 b(h)630 b(ihren)g(F)-108
b(unktionsgra-)921 6792 y(phen:)p 0 TeXcolorgray 0 TeXcolorgray
7566 31302 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 286.23322 a add def
/d 0.0 a add neg def /h 200.08005 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 7566 31302 a 18655 20400 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 186.06381 0.0 -100.1694 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 11
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 101.59734 0.0 -98.48271   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 186.06381  0 -100.1694  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -100.1694
 186.06381  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-98.48271  def /maxTickline 101.59734  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 101.59734
0.0 -98.48271   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 186.06381
0.0 -100.1694 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 101.59734  0 -98.48271  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -98.48271
 101.59734  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-100.1694  def /maxTickline 186.06381  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 101.59734
0.0 -98.48271   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 186.06381
0.0 -100.1694 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
17410 17536 a Fj(1)17409 14386 y(2)17409 11237 y(3)16677
23789 y Fi(\000)p Fj(1)16677 26939 y Fi(\000)p Fj(2)16677
30088 y Fi(\000)p Fj(3)21569 21746 y(1)2680 b(2)f(3)h(4)f(5)h(6)-22883
b Fi(\000)p Fj(1)-4352 b Fi(\000)p Fj(2)h Fi(\000)p Fj(3)18655
20400 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 18655 20400 a 18655 20400 a
tx@Dict begin  { 186.06381 101.59734 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 18655 20400 a 18655
20400 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 18655 20400 a 18312 20686 a Fm(x)18655 20400
y
tx@Dict begin  PutEnd  end
 18655 20400 a 18655 20400 a
tx@Dict begin  PutEnd  end
 18655 20400 a 18655 20400
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 18655 20400 a 18655 20400 a
tx@Dict begin  { 0.0 0.0 pop 186.06381 101.59734 exch pop } PutCoor
PutBegin  end
 18655 20400 a 18655 20400
a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 18655 20400 a 18312 20557 a Fm(y)18655 20400 y
tx@Dict begin  PutEnd  end
 18655
20400 a 18655 20400 a
tx@Dict begin  PutEnd  end
 18655 20400 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.4 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.520548185502567 def /x1 6.539401678352975
def /dx x1 x sub 199 div def /F@pstplot (1.0057181080940905*x^(3.0)-2.017154324282272*x^(2.0)+1.0114362161881811*x)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 0.4 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end


@endspecial 39251 31302 a
currentpoint initclip moveto
 39251 31302 a 921 35286 a
Fm(Ermittle)433 b(denjenigen)h(W)-108 b(ert)433 b Fl(x)p
Fm(,)h(f\374r)f(den)g(gilt:)i Fl(f)142 b Fk(\()p Fl(x)295
b Fd(\000)g Fk(3\))369 b(=)g(2)p Fm(.)921 39824 y Fl(x)g
Fk(=)p 3474 39824 15749 34 v 1 0 0 TeXcolorrgb 921 42369
a Fm(Durc)-36 b(h)433 b(Ablesen)g(erh\344lt)h(man)f Fl(x)295
b Fd(\000)h Fk(3)369 b(=)g(2)434 b Fm(und)e(daraus)h(folgt:)i
Fl(x)369 b Fk(=)g(5)p Fm(.)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 47992 4800 a Fh(___/1)p 1 0 0
TeXcolorrgb 48228 6792 a Fg(F)-123 b(A)369 b(1.4)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 46103
54804 45 v 0 TeXcolorgray 24746 81281 a Fm(3)p 0 TeXcolorgray
eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fn(F)-239 b(A)717 b(1.4)g(-)h(4)f(W)-179
b(erte)716 b(einer)h(linearen)e(F)-179 b(unktion)715
b(-)j(O)-60 b(A)717 b(-)h(BIFIE)p 0 TeXcolorgray -741
4800 a Fm(4.)p 0 TeXcolorgray 651 w(Gegeb)36 b(en)336
b(ist)g(der)g(Graph)f(einer)i(linearen)f(F)-108 b(unktion)336
b Fl(f)142 b Fm(.)337 b(Die)g(Gerade)f(en)-36 b(th\344lt)335
b(die)i(Punkte)921 6792 y Fl(P)550 b Fk(=)369 b(\(0)p
Fd(j)p Fk(1\))433 b Fm(und)g Fl(Q)369 b Fk(=)g(\(2)p
Fd(j)p Fk(0\))p Fm(.)p 0 TeXcolorgray 0 TeXcolorgray
5418 34554 a
 currentpoint currentpoint translate 1.51753 1.51753 scale neg exch
neg exch translate
 5418 34554 a 5851 34554 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 210.28224 a add def
/d 0.0 a add neg def /h 150.76834 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 5851 34554 a 14681
29613 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -28.45274 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 130.51767 0.0 -79.76457 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -56.90549 0.0 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 106.13164 0.0 -44.6367   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 130.51767  0 -79.76457  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -79.76457
 130.51767  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-44.6367  def /maxTickline 106.13164  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 106.13164
0.0 -44.6367   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 130.51767
0.0 -79.76457 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 106.13164  0 -44.6367  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -44.6367
 106.13164  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-79.76457  def /maxTickline 130.51767  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 106.13164
0.0 -44.6367   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 130.51767
0.0 -79.76457 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 13436 26749 a Fj(1)13435 23599
y(2)13435 20450 y(3)12704 33002 y Fi(\000)p Fj(1)17595
30959 y(1)2680 b(2)f(3)h(4)-16584 b Fi(\000)p Fj(1)-4352
b Fi(\000)p Fj(2)14681 29613 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 14681 29613 a 14681 29613
a
tx@Dict begin  { 130.51767 106.13164 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 14681 29613 a 14681 29613 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 14681 29613 a 14338 29899
a Fm(x)14681 29613 y
tx@Dict begin  PutEnd  end
 14681 29613 a 14681 29613 a
tx@Dict begin  PutEnd  end
 14681
29613 a 14681 29613 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 14681 29613 a 14681 29613 a
tx@Dict begin  { 0.0 0.0 pop 130.51767 106.13164 exch pop } PutCoor
PutBegin  end
 14681
29613 a 14681 29613 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 14681 29613 a 13633 29945 a Fm(f\(x\))14681
29613 y
tx@Dict begin  PutEnd  end
 14681 29613 a 14681 29613 a
tx@Dict begin  PutEnd  end
 14681 29613 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.803403244712866 def /x1 4.5871737839810125
def /dx x1 x sub 199 div def /F@pstplot (-1.0/2.0*x+1.0)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 14681 29613 a
tx@Dict begin  { -60.49333 62.48827 } PutCoor PutBegin  end
 14681 29613 a
-172 x Fc(f)14681 29613 y
tx@Dict begin  PutEnd  end
 14681 29613 a 29129 34554 a
currentpoint initclip moveto

29129 34554 a 5418 34554 a
 currentpoint currentpoint translate 1 1.51753 div 1 1.51753 div scale
neg exch neg exch translate
 5418 34554 a 921 38539 a Fm(Bestimme)434
b(die)f(Menge)h(aller)g(W)-108 b(erte)433 b Fl(x)p Fm(,)h(f\374r)g(die)
f(gilt:)i Fd(\000)p Fk(0)p Fl(;)p Fk(5)370 b Fd(\024)f
Fl(f)142 b Fk(\()p Fl(x)p Fk(\))369 b Fl(<)f Fk(1)p Fl(;)p
Fk(5)p Fm(.)p 1 0 0 TeXcolorrgb 921 41084 a Fd(\000)p
Fk(1)h Fl(<)g(x)g Fd(\024)g Fk(3)434 b Fm(o)36 b(der)434
b Fk(\()p Fd(\000)p Fk(1;)221 b(3])p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 4800 a Fh(___/1)p
1 0 0 TeXcolorrgb 48228 6792 a Fg(F)-123 b(A)369 b(1.4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
44892 54804 45 v 0 TeXcolorgray 24746 81281 a Fm(4)p
0 TeXcolorgray eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fn(F)-239 b(A)717 b(1.4)g(-)h(5)f(F)-179
b(unktionsw)-60 b(erte)714 b(-)k(L)-179 b(T)717 b(-)g(BIFIE)p
0 TeXcolorgray -741 4800 a Fm(5.)p 0 TeXcolorgray 651
w(Die)297 b(nac)-36 b(hstehende)294 b(Abbildung)h(zeigt)i(den)e
(Graphen)f(einer)i(P)-36 b(olynomfunktion)297 b Fl(f)438
b Fm(vierten)921 6792 y(Grades.)p 0 TeXcolorgray 0 TeXcolorgray
5621 42274 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 321.37498 a add def
/d 0.0 a add neg def /h 301.53671 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 5621 42274 a 9996 35639 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -56.90549 T 11
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 281.85304 0.0 -39.52194 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -28.45274 0.0 T 12
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 241.5965 0.0 -59.94022   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 281.85304  0 -39.52194  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -39.52194
 281.85304  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-59.94022  def /maxTickline 241.5965  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 241.5965
0.0 -59.94022   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 281.85304
0.0 -39.52194 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 241.5965  0 -59.94022  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -59.94022
 241.5965  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-39.52194  def /maxTickline 281.85304  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 241.5965
0.0 -59.94022   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 281.85304
0.0 -39.52194 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
8751 32775 a Fj(1)8751 29625 y(2)8751 26476 y(3)8751
23326 y(4)8751 20177 y(5)8751 17027 y(6)8751 13877 y(7)8751
10728 y(8)8019 39028 y Fi(\000)p Fj(1)8019 42178 y Fi(\000)p
Fj(2)12910 36985 y(1)2680 b(2)g(3)f(4)h(5)g(6)f(7)h(8)f(9)-32332
b Fi(\000)p Fj(1)9996 35639 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 9996 35639 a 9996 35639
a
tx@Dict begin  { 281.85304 241.5965 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 9996 35639 a 9996 35639 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 9996 35639 a 9653 35925 a
Fm(x)9996 35639 y
tx@Dict begin  PutEnd  end
 9996 35639 a 9996 35639 a
tx@Dict begin  PutEnd  end
 9996 35639
a 9996 35639 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 9996 35639 a 9996 35639 a
tx@Dict begin  { 0.0 0.0 pop 281.85304 241.5965 exch pop } PutCoor
PutBegin  end
 9996 35639 a
9996 35639 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 9996 35639 a 8948 35971 a Fm(f\(x\))9996
35639 y
tx@Dict begin  PutEnd  end
 9996 35639 a 9996 35639 a
tx@Dict begin  PutEnd  end
 9996 35639 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -1.3890340559331749 def /x1 9.905998761504648
def /dx x1 x sub 199 div def /F@pstplot (-0.019450467641740948*x^(4.0)+0.33665411810640195*x^(3.0)-1.6121260286149794*x^(2.0)+2.0317693856368777*x+2.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 9996 35639 a
tx@Dict begin  { 161.12468 132.20435 } PutCoor PutBegin  end
 9996 35639 a 923
x Fl(f)9996 35639 y
tx@Dict begin  PutEnd  end
 9996 35639 a 41196 42274 a
currentpoint initclip moveto
 41196
42274 a 921 46259 a Fm(Erg\344nze)358 b(die)h(T)-108
b(extl\374c)-36 b(k)g(en)358 b(im)g(folgenden)h(Satz)f(durc)-36
b(h)357 b(Ankreuzen)g(der)h(jew)-36 b(eils)360 b(ric)-36
b(h)g(tigen)921 48251 y(Satzteile)434 b(so,)g(dass)g(eine)f
(mathematisc)-36 b(h)434 b(k)-36 b(orrekte)434 b(A)-36
b(ussage)434 b(en)-36 b(tsteh)g(t!)921 51741 y(F)-27
b(\374r)409 b(alle)i(reellen)g(W)-108 b(erte)p 13860
51741 3150 45 v 17482 51693 a(1)17010 51741 y Fb(\015)p
18604 51741 V 3560 w Fm(gilt)411 b(f\374r)f(die)g(F)-108
b(unktion)409 b Fl(f)p 35493 51741 V 39114 51693 a Fm(2)38643
51741 y Fb(\015)p 40237 51741 V 3559 w Fm(.)p 0 TeXcolorgray
0 TeXcolorgray 10935 53113 10226 45 v 10935 56198 45
3085 v 15722 54895 a(1)15250 54943 y Fb(\015)p 21115
56198 V 10935 56242 10226 45 v 10935 59501 45 3260 v
11643 58298 a Fl(x)369 b(<)g Fk(6)p 18750 59501 V 19459
58204 a Fe(2)p 21115 59501 V 10935 59545 10226 45 v 10935
62879 45 3334 v 11643 61602 a Fl(x)g Fd(2)g Fk([)8 b
Fd(\000)p Fk(1;)221 b(1])p 18750 62879 V 19459 61544
a Fe(2)p 21115 62879 V 10935 62923 10226 45 v 10935 66256
45 3334 v 11643 64979 a Fl(x)369 b Fd(2)g Fk([)8 b(1;)221
b(5])p 18750 66256 V 1 0 0 TeXcolorrgb 19459 64921 a
Fe(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
21115 66256 V 10935 66300 10226 45 v 0 TeXcolorgray 0
TeXcolorgray 30427 53113 11587 45 v 30427 56198 45 3085
v 35895 54895 a Fm(2)35423 54943 y Fb(\015)p 41969 56198
V 30427 56242 11587 45 v 30427 59575 45 3334 v 31135
58298 a Fl(f)142 b Fk(\()p Fl(x)p Fk(\))369 b Fl(>)f
Fk(3)p 39603 59575 V 40312 58241 a Fe(2)p 41969 59575
V 30427 59619 11587 45 v 30427 62952 45 3334 v 31135
61675 a Fl(f)142 b Fk(\()p Fl(x)p Fk(\))369 b Fd(2)f
Fk([)8 b Fd(\000)p Fk(1;)221 b(1])p 39603 62952 V 40312
61618 a Fe(2)p 41969 62952 V 30427 62997 11587 45 v 30427
66330 45 3334 v 31135 65053 a Fl(f)142 b Fk(\()p Fl(x)p
Fk(\))369 b Fd(2)f Fk([)8 b(0;)221 b(3])p 39603 66330
V 1 0 0 TeXcolorrgb 40312 64995 a Fe(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 41969 66330 V 30427
66374 11587 45 v 47992 4800 a Fh(___/1)p 1 0 0 TeXcolorrgb
48228 6792 a Fg(F)-123 b(A)369 b(1.4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 70402 54804 45
v 0 TeXcolorgray 24746 81281 a Fm(5)p 0 TeXcolorgray
eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fn(F)-239 b(A)717 b(1.4)g(-)h(6)f
(Kraftsto\033v)-60 b(erbrauc)g(h)715 b(-)j(O)-60 b(A)718
b(-)f(BIFIE)p 0 TeXcolorgray -741 4800 a Fm(6.)p 0 TeXcolorgray
651 w(Die)449 b(nac)-36 b(hstehende)447 b(Abbildung)h(zeigt)h(den)e
(Zusammenhang)h(zwisc)-36 b(hen)449 b(der)f(Gesc)-36
b(h)g(win-)921 6792 y(digk)g(eit)388 b(und)e(dem)h(Kraftsto\033v)-36
b(erbrauc)g(h)386 b(pro)h(100)217 b(km)388 b(f\374r)f(eine)h(b)36
b(estimm)-36 b(te)386 b(A)-36 b(utomark)g(e.)p 0 TeXcolorgray
0 TeXcolorgray 6673 33909 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 302.37898 a add def
/d 0.0 a add neg def /h 205.6333 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 6673 33909 a 9661 31946 a
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 56.90549 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.4  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 275.38544 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.4  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 28.45274
T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  85.35823 0.0 T 11 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.4  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 172.13918 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.4  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 28.45274
0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 0 14.22636
 0 0.0  ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch
def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore /yStart
exch def /xStart exch def 0 dup 2 mod 0 eq true and exch 2 lt false
and or { /viceversa 0.0  14.22636  gt { true }{ false } ifelse def
/epsilon 0.01 def /minTickline 0.0  def /maxTickline 0.0  def /dT 1864679
abs 65536 div viceversa { neg } if def /DT 1 abs viceversa { neg }
if def /subTNo 1 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT
0 def } ifelse -4.0 4.0 /tickend exch def /tickstart exch def /Twidth
0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0  setgray
 } def /subTColor { 0.5  setgray  } def /MinValue { yStart } def /MaxValue
{ yEnd } def /logLines { false } def /LSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0  setlinecap
stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch def logLines
{ gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10
add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MaxValue abs le { false { x minTickline
exch moveto x maxTickline exch lineto } { x tickstart STsize mul exch
moveto x tickend STsize mul exch lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul exch
moveto cntsubTick maxTickline STsize mul exch lineto } { cntsubTick
tickstart STsize mul exch moveto cntsubTick tickend STsize mul exch
lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick dsubT add def
} repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave false { cntTick minTickline exch moveto cntTick maxTickline
exch lineto } { cntTick tickstart exch moveto cntTick tickend exch
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 14.22636 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  0.0 14.22636 0.0 42.67911 0.5 24.185
7.11317 7.11317 tx@CoilDict begin ZigZag end /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 14.22636
 0 0.0  0 ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch
def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore /yStart
exch def /xStart exch def 0 dup 2 mod 0 eq false and exch 2 lt true
and or { /viceversa 0.0  14.22636  gt { true }{ false } ifelse def
/epsilon 0.01 def /minTickline 0.0  def /maxTickline 0.0  def /dT 1864679
abs 65536 div viceversa { neg } if def /DT 1 abs viceversa { neg }
if def /subTNo 1 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT
0 def } ifelse -4.0 4.0 /tickend exch def /tickstart exch def /Twidth
0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0  setgray
 } def /subTColor { 0.5  setgray  } def /MinValue { xStart } def /MaxValue
{ xEnd } def /logLines { false } def /LSstroke {  0  setlinejoin 0
 setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0  setlinecap
stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def logLines
{ gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10
add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MaxValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for subTwidth SLW
subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0
gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 14.22636 0.0 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  14.22636 0.0 42.67911 0.0 0.5 24.185
7.11317 7.11317 tx@CoilDict begin ZigZag end /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 6299 w @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 218.47995  0 -14.22638  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -14.22638
 218.47995  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 187.90636  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 0 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -5.0 5.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 218.47995
0.0 -14.22638 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 9661
25647 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 131.00087  0 -14.22638  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -14.22638
 131.00087  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 275.38544  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1 abs viceversa { neg } if def /subTNo 0 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -5.0 5.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 131.00087
0.0 -14.22638   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 9661 31946 a
tx@Dict begin  { 50.40315 -5.69046 } PutCoor PutBegin  end
 9661 31946 a 837
x Fm(50)9661 31946 y
tx@Dict begin  PutEnd  end
 9661 31946 a 9661 31946 a
tx@Dict begin  { 190.06412 -5.69046 } PutCoor PutBegin  end
 9661 31946
a 837 x Fm(100)9661 31946 y
tx@Dict begin  PutEnd  end
 9661 31946 a 9661 31946 a
tx@Dict begin  { -11.38092 59.75093 } PutCoor PutBegin  end

9661 31946 a 837 x Fm(6)9661 31946 y
tx@Dict begin  PutEnd  end
 9661 31946 a 9661
31946 a
tx@Dict begin  { -11.38092 116.65642 } PutCoor PutBegin  end
 9661 31946 a 837 x Fm(8)9661 31946 y
tx@Dict begin  PutEnd  end
 9661 31946
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 2.5 def /x1 9.67869337535049 def
/dx x1 x sub 199 div def /F@pstplot (1.600693461179837E-4*x^(5.0)-0.0034810814259901876*x^(4.0)+0.03498610256146386*x^(3.0)-0.14379345448686695*x^(2.0)+0.30820218412900285*x+1.5560218059688455)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 9661 31946 a
tx@Dict begin  { 213.39557 11.38092 } PutCoor PutBegin  end

9661 31946 a 610 x Fa(Gesc)-26 b(h)g(windigk)g(eit)9661
31946 y
tx@Dict begin  PutEnd  end
 9661 31946 a 9661 31946 a
tx@Dict begin  { 241.84831 -5.69046 } PutCoor PutBegin  end
 9661 31946 a 664 x
Fa([km/h])9661 31946 y
tx@Dict begin  PutEnd  end
 9661 31946 a 9661 31946 a
tx@Dict begin  { -14.22636 184.94283 } PutCoor PutBegin  end
 9661
31946 a 664 x Fa([L])9661 31946 y
tx@Dict begin  PutEnd  end
 9661 31946 a 9661 31946
a
tx@Dict begin  { 5.255 184.94283 } PutCoor PutBegin  end
 9661 31946 a 664 x Fa(Krafsto\033v)g(erbrauc)g(h/100)157
b(km)9661 31946 y
tx@Dict begin  PutEnd  end
 9661 31946 a 40145 33909 a
currentpoint initclip moveto
 40145 33909
a 921 37893 a Fm(Gib)634 b(diejenige)i(Gesc)-36 b(h)g(windigk)g(eit)635
b Fl(v)682 b Fm(an,)636 b(b)36 b(ei)635 b(der)f(der)h(Kraftsto\033v)-36
b(erbrauc)g(h)634 b(7)217 b(L)635 b(pro)856 39885 y(100)217
b(km)435 b(b)36 b(etr\344gt.)921 44422 y Fl(v)416 b Fk(=)p
3347 44422 9449 34 v 9818 w Fl(k)45 b(m=h)921 46968 y
Fm(Gib)335 b(an,)h(wie)h(ho)36 b(c)-36 b(h)335 b(der)h(Kraftsto\033v)
-36 b(erbrauc)g(h)335 b(b)36 b(ei)336 b(einer)f(Gesc)-36
b(h)g(windigk)g(eit)336 b(v)-36 b(on)336 b(80)217 b(km/h)921
48960 y(ist.)921 51505 y(Krafsto\033v)-36 b(erbrauc)g(h)433
b Fk(=)p 13393 51505 V 10316 w Fm(L)g(pro)g(100)217 b(km)p
1 0 0 TeXcolorrgb 921 54050 a Fl(v)416 b Fk(=)369 b(100)217
b Fm(km/h)921 56042 y(Kraftsto\033v)-36 b(erbrauc)g(h)433
b Fk(=)369 b(6)p Fl(;)p Fk(2)221 b Fl(L)435 b Fm(pro)e(100)217
b(km)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
47992 4800 a Fh(___/1)p 1 0 0 TeXcolorrgb 48228 6792
a Fg(F)-123 b(A)369 b(1.4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 59776 54804 45 v 0 TeXcolorgray
24746 81281 a Fm(6)p 0 TeXcolorgray eop end
%%Page: 7 7
TeXDict begin 7 6 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fn(F)-239 b(A)717 b(1.4)g(-)h(7)f(F)-179
b(unktionsgraphen)713 b(-)k(MC)h(-)g(BIFIE)p 0 TeXcolorgray
-741 4800 a Fm(7.)p 0 TeXcolorgray 651 w(Gegeb)36 b(en)433
b(sind)g(die)h(Graphen)e(der)h(F)-108 b(unktionen)432
b Fl(f)142 b Fm(,)434 b Fl(g)481 b Fm(und)432 b Fl(h)p
Fm(.)p 0 TeXcolorgray 0 TeXcolorgray 7667 36487 a
 currentpoint currentpoint translate 1.12999 1.12999 scale neg exch
neg exch translate
 7667
36487 a 7667 36487 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 251.68886 a add def
/d 0.0 a add neg def /h 234.43903 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 7667 36487 a 10355 34268 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 9 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 227.4053 0.0 -24.28355 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 9 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 214.39803 0.0 -20.041   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 227.4053  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 227.4053  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 214.39803  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 214.39803
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 227.4053
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 214.39803  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 214.39803  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 227.4053  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 214.39803
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 227.4053
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
9110 34554 a Fj(0)9110 31404 y(1)9110 28255 y(2)9110
25105 y(3)9110 21955 y(4)9110 18806 y(5)9110 15656 y(6)9110
12506 y(7)10120 35614 y(0)2680 b(1)f(2)h(3)g(4)f(5)h(6)f(7)10355
34268 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0.0001 def /x1 7.9923785887858365
def /dx x1 x sub 199 div def /F@pstplot (1.0/x)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 10355
34268 a
tx@Dict begin  { -9.95863 213.39557 } PutCoor PutBegin  end
 10355 34268 a 572 x Fl(y)10355 34268 y
tx@Dict begin  PutEnd  end
 10355
34268 a 10355 34268 a
tx@Dict begin  { 216.24101 -5.69046 } PutCoor PutBegin  end
 10355 34268 a 572 x Fl(x)10355
34268 y
tx@Dict begin  PutEnd  end
 10355 34268 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -0.8534760248867364 def /x1 7.9923785887858365
def /dx x1 x sub 199 div def /F@pstplot (x)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
10355 34268 a
tx@Dict begin  { 173.30357 199.1692 } PutCoor PutBegin  end
 10355 34268 a 572 x Fl(g)10355 34268 y
tx@Dict begin  PutEnd  end

10355 34268 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -0.8534760248867364 def /x1 7.9923785887858365
def /dx x1 x sub 199 div def /F@pstplot (-x+4.0)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
10355 34268 a
tx@Dict begin  { 83.919 45.52455 } PutCoor PutBegin  end
 10355 34268 a 923 x Fl(h)10355 34268 y
tx@Dict begin  PutEnd  end

10355 34268 a 10355 34268 a
tx@Dict begin  { 9.43156 180.68246 } PutCoor PutBegin  end
 10355 34268 a -258 x Fl(f)10355
34268 y
tx@Dict begin  PutEnd  end
 10355 34268 a 35528 36487 a
currentpoint initclip moveto
 35528 36487 a 7667
36487 a
 currentpoint currentpoint translate 1 1.12999 div 1 1.12999 div scale
neg exch neg exch translate
 7667 36487 a 921 40471 a Fm(Kreuze)433 b(die)h(b)36
b(eiden)433 b(zutre\033enden)e(A)-36 b(ussagen)434 b(an.)p
17981 41438 10422 45 v 17981 44656 45 3219 v 18690 43379
a Fl(g)48 b Fk(\(1\))368 b Fl(>)h(g)48 b Fk(\(3\))p 25993
44656 V 28358 44656 V 17981 44700 10422 45 v 17981 47919
45 3219 v 18690 46642 a Fl(h)p Fk(\(1\))368 b Fl(>)h(h)p
Fk(\(3\))p 25993 47919 V 1 0 0 TeXcolorrgb 1441 w Fe(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 28358
47919 V 17981 47963 10422 45 v 17981 51181 45 3219 v
18690 49904 a Fl(f)142 b Fk(\(1\))368 b(=)h Fl(g)48 b
Fk(\(1\))p 25993 51181 V 1 0 0 TeXcolorrgb 1485 w Fe(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 28358
51181 V 17981 51225 10422 45 v 17981 54443 45 3219 v
18690 53166 a Fl(h)p Fk(\(1\))368 b(=)h Fl(g)48 b Fk(\(1\))p
25993 54443 V 28358 54443 V 17981 54488 10422 45 v 17981
57706 45 3219 v 18690 56429 a Fl(f)142 b Fk(\(1\))368
b Fl(<)h(f)142 b Fk(\(3\))p 25993 57706 V 28358 57706
V 17981 57750 10422 45 v 47992 4800 a Fh(___/1)p 1 0 0
TeXcolorrgb 48228 6792 a Fg(F)-123 b(A)369 b(1.4)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 61778
54804 45 v 0 TeXcolorgray 24746 81281 a Fm(7)p 0 TeXcolorgray
eop end
%%Page: 8 8
TeXDict begin 8 7 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fn(F)-239 b(A)717 b(1.4)g(-)h(8)f(Sc)-60
b(h)g(ulbus)715 b(-)j(O)-60 b(A)718 b(-)f(BIFIE)p 0 TeXcolorgray
-741 4800 a Fm(8.)p 0 TeXcolorgray 651 w(T)-108 b(anja)434
b(erz\344hlt)g(v)-36 b(on)434 b(ihrem)f(Sc)-36 b(h)g(ulw)g(eg:)2437
9592 y(\022Zuerst)515 b(bin)f(ic)-36 b(h)515 b(langsam)h(v)-36
b(on)516 b(zuhause)2636 11584 y(w)-36 b(eggegangen)321
b(und)d(hab)36 b(e)319 b(dann)g(b)36 b(emerkt,)2683 13576
y(dass)491 b(ic)-36 b(h)491 b(zu)g(sp\344t)g(zur)g(Busstation)g(k)-36
b(om-)2683 15568 y(men)302 b(w)-36 b(erde.)302 b(Dann)g(bin)g(ic)-36
b(h)302 b(et)-36 b(w)g(as)302 b(sc)-36 b(hnel-)2683 17560
y(ler)367 b(gegangen)g(und)e(hab)36 b(e)366 b(sogar)i(no)36
b(c)-36 b(h)366 b(auf)2683 19551 y(den)338 b(Bus)h(w)-36
b(arten)338 b(m)-36 b(\374ssen.)339 b(Mit)g(dem)g(Bus)2683
21543 y(bin)684 b(ic)-36 b(h)684 b(et)-36 b(w)g(as)685
b(mehr)f(als)h(10)h(Min)-36 b(uten)2683 23535 y(gefahren,)497
b(auf)h(den)e(letzten)g(Metern)h(zur)2683 25527 y(Sc)-36
b(h)g(ule)379 b(hab)36 b(e)380 b(ic)-36 b(h)379 b(mit)h(meinen)g(F)-108
b(reundin-)2683 27519 y(nen)433 b(geredet.)-181 b(\020)2683
29511 y(Die)864 b(neb)36 b(enstehende)861 b(graphisc)-36
b(he)863 b(Dar-)2683 31503 y(stellung)376 b(v)-36 b(eransc)g(haulic)g
(h)g(t)376 b(die)g(Gesc)-36 b(hic)g(h-)2683 33495 y(te)513
b(v)-36 b(on)514 b(T)-108 b(anja;)515 b(die)f(zur\374c)-36
b(kgelegte)514 b(Stre-)2683 35487 y(c)-36 b(k)g(e)474
b(s)h(\(in)f(m\))g(wird)g(dab)36 b(ei)475 b(in)f(Abh\344ngig-)2683
37479 y(k)-36 b(eit)698 b(v)-36 b(on)697 b(der)g(Zeit)g(t)g(\(in)g
(min\))g(darge-)2683 39471 y(stellt.)24758 36208 y
 currentpoint currentpoint translate 0.75162 0.75162 scale neg exch
neg exch translate
 24758
36208 a 25191 36208 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 313.6709 a add def
/d 0.0 a add neg def /h 330.90497 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 25191 36208 a 27788 33600 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 59 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 316.36513 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 5.68695
T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 60 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 307.3365 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 5.69046
0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 290.21347  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 290.21347  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 307.3365  def /dT 1864650 abs 65536 div viceversa
{ neg } if def /DT 5. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 5.69046  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 5.69046  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 307.3365
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 290.21347
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 307.3365  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 307.3365  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 290.21347  def /dT 1863500 abs 65536 div viceversa
{ neg } if def /DT 500. abs viceversa { neg } if def /subTNo 2 def
subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0
0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 0.05687  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 0.05687  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 307.3365
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 290.21347
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
26543 33885 a Fj(0)25602 30737 y(500)25131 27590 y(1000)25131
24442 y(1500)25131 21294 y(2000)25131 18147 y(2500)25131
14999 y(3000)25131 11852 y(3500)25131 8704 y(4000)25131
5556 y(4500)25131 2409 y(5000)27553 34945 y(0)2679 b(5)2445
b(10)2209 b(15)h(20)f(25)h(30)f(35)h(40)g(45)f(50)27788
33600 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 27788 33600 a 27788 33600 a
tx@Dict begin  { 290.21347 307.3365 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 27788 33600 a 27788
33600 a
tx@Dict begin  { 5.0 41.77852 7.55675 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 27788 33600 a 25476 34018 a Fm(t)433 b(in)h(min)27788
33600 y
tx@Dict begin  PutEnd  end
 27788 33600 a 27788 33600 a
tx@Dict begin  PutEnd  end
 27788 33600 a 27788
33600 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 27788 33600 a 27788 33600 a
tx@Dict begin  { 0.0 0.0 pop 290.21347 307.3365 exch pop } PutCoor
PutBegin  end
 27788 33600 a 27788
33600 a
tx@Dict begin  { 5.0 33.94519 8.26648 0.0 -40.  Uput UUput } PutCoor
PutBegin  end
 27788 33600 a 25909 34057 a Fm(S)f(in)h(m)27788
33600 y
tx@Dict begin  PutEnd  end
 27788 33600 a 27788 33600 a
tx@Dict begin  PutEnd  end
 27788 33600 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.9046 22.7478 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.6 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 142.2615 79.61731 56.9046 22.7478 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 170.7138 79.61731 142.2615 79.61731
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 244.68979 270.13016 170.7138 79.61731
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 278.83255 278.66058 244.68979 270.13016
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
59914 36208 a
currentpoint initclip moveto
 59914 36208 a 24758 36208 a
 currentpoint currentpoint translate 1 0.75162 div 1 0.75162 div scale
neg exch neg exch translate
 24758 36208
a 921 41050 a Fm(Bestimme,)361 b(wie)g(lange)f(T)-108
b(anja)361 b(auf)g(den)e(Bus)h(gew)-36 b(artet)360 b(hat,)h(wie)f
(lange)h(sie)g(mit)f(dem)g(Bus)921 43042 y(gefahren)434
b(ist)f(und)g(w)-36 b(elc)g(he)434 b(W)-108 b(egstrec)-36
b(k)g(e)434 b(sie)g(mit)f(dem)g(Bus)h(zur\374c)-36 b(kgelegt)434
b(hat.)855 47579 y(W)-108 b(artezeit:)p 7141 47579 9449
34 v 10316 w(min)921 50124 y(F)g(ahrzeit:)p 6358 50124
V 10316 w(min)921 52670 y(zur\374c)-36 b(kgelegte)434
b(Strec)-36 b(k)g(e:)p 13891 52670 V 10316 w(m)p 1 0 0
TeXcolorrgb 855 55215 a(W)-108 b(artezeit:)434 b(5)217
b(min)921 57761 y(F)-108 b(ahrzeit:)433 b(13)217 b(min)921
60306 y(zur\374c)-36 b(kgelegte)434 b(Strec)-36 b(k)g(e:)433
b(3350)217 b(m)435 b Fk(\()p Fd(\006)p Fk(50)221 b Fl(m)p
Fk(\))p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
47992 4800 a Fh(___/1)p 1 0 0 TeXcolorrgb 48228 6792
a Fg(F)-123 b(A)369 b(1.4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 64113 54804 45 v 0 TeXcolorgray
24746 81281 a Fm(8)p 0 TeXcolorgray eop end
%%Page: 9 9
TeXDict begin 9 8 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fn(F)-239 b(A)717 b(1.4)g(-)h(9)f(An)-60
b(teil)716 b(am)i(Umsatz)g(-)f(O)-60 b(A)718 b(-)f(BIFIE)p
0 TeXcolorgray -741 4800 a Fm(9.)p 0 TeXcolorgray 651
w(Ein)617 b(Betrieb)g(stellt)g(un)-36 b(tersc)g(hiedlic)g(h)615
b(teure)i(Pro)36 b(dukte)617 b(her)f(und)g(erstellt)h(zur)g(V)-108
b(eran-)921 6792 y(sc)-36 b(haulic)g(h)g(ung)433 b(des)g(Umsatzes)h
(die)f(nac)-36 b(hstehende)432 b(Gra\034k.)p 0 TeXcolorgray
0 TeXcolorgray 6543 44826 a
 currentpoint currentpoint translate 0.92139 0.92139 scale neg exch
neg exch translate
 6543 44826 a 6976 44826 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 326.80942 a add def
/d 0.0 a add neg def /h 330.21855 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end

6976 44826 a 10063 41834 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 12 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 298.92407 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 28.45444
T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 12 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 303.18684 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 28.45444
0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 298.92407  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 298.92407  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 303.18684  def /dT 3729580 abs 65536 div viceversa
{ neg } if def /DT 20. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 2.84544  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 2.84544  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 303.18684
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 298.92407
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 303.18684  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 303.18684  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 298.92407  def /dT 3729580 abs 65536 div viceversa
{ neg } if def /DT 20. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 2.84544  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 2.84544  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 303.18684
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 298.92407
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 8818 42119 a Fj(0)8347
35820 y(20)8347 29520 y(40)8347 23220 y(60)8347 16921
y(80)7877 10621 y(100)9828 43179 y(0)5594 b(20)5360 b(40)f(60)h(80)5124
b(100)10063 41834 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 100 def /dx x1 x sub 199
div def /F@pstplot (-1.4205528526390973E-9*x^(6.0)+5.533401886746866E-7*x^(5.0)-8.645763481735611E-5*x^(4.0)+0.006640598812841227*x^(3.0)-0.24791868679244727*x^(2.0)+4.715025027110896*x)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 2.84544 mul F@pstplot
2.84544 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x dx
add def xy  dup 1.e30 2.84544 mul gt { moveto } { dup -1.e30 2.84544
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 2.84544 mul gt { moveto } { dup
-1.e30 2.84544 mul lt { moveto } { L } ifelse } ifelse  } if  gsave
1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
10063 41834 a
tx@Dict begin  { 139.21126 190.56262 } PutCoor PutBegin  end
 10063 41834 a 922 x Fl(k)10063 41834 y
tx@Dict begin  PutEnd  end

10063 41834 a 10063 41834 a
tx@Dict begin  { -28.45444 241.04936 } PutCoor PutBegin  end
 10063 41834 a 10972 58118
a
 gsave currentpoint currentpoint translate 90.0 neg rotate neg exch
neg exch translate
 10972 58118 a Fh(An)-34 b(teil)404 b(am)h(Gesam)-34
b(tumsatz)405 b(in)f(\045)27256 58118 y
 currentpoint grestore moveto
 27256 58118 a
10063 41834 a
tx@Dict begin  PutEnd  end
 10063 41834 a 10063 41834 a
tx@Dict begin  { 14.22722 -17.07266 } PutCoor PutBegin  end
 10063 41834
a 909 x Fh(An)-34 b(teil)404 b(der)g(Pro)34 b(dukte)404
b(in)g(\045)h(\(nac)-34 b(h)405 b(aufsteigendem)g(Preis\))10063
41834 y
tx@Dict begin  PutEnd  end
 10063 41834 a 43153 44826 a
currentpoint initclip moveto
 43153 44826 a 6543
44826 a
 currentpoint currentpoint translate 1 0.92139 div 1 0.92139 div scale
neg exch neg exch translate
 6543 44826 a 873 48810 a Fm(Anhand)458 b(des)g(folgenden)i
(Beispiels)g(wird)f(erkl\344rt,)h(wie)g(dieses)f(Diagramm)h(zu)f(lesen)
g(ist.)873 50802 y(A)-36 b(us)412 b(dem)h(W)-108 b(ertepaar)413
b Fk(\(30)p Fl(=)p Fk(40\))h Fm(kann)f(man)g(sc)-36 b(hlie\377en,)413
b(dass)g(die)g(preisg\374nstigsten)f Fk(30\045)921 52794
y Fm(der)402 b(v)-36 b(erkauften)404 b(Pro)36 b(dukte)403
b Fk(40\045)g Fm(v)-36 b(om)404 b(Gesam)-36 b(tumsatz)402
b(des)h(Betriebs)g(ausmac)-36 b(hen,)403 b(w)-36 b(as)921
54786 y(umgek)g(ehrt)414 b(b)36 b(edeutet,)414 b(dass)g(die)h
(teuersten)e Fk(70\045)i Fm(der)f(v)-36 b(erkauften)415
b(Pro)36 b(dukte)415 b Fk(60\045)g Fm(v)-36 b(om)921
56778 y(Gesam)g(tumsatz)433 b(ausmac)-36 b(hen.)921 59324
y(Gib)432 b(f\374r)g(die)g(b)36 b(eiden)432 b(gefragten)h(Pro)36
b(duktan)-36 b(teile)433 b(deren)e(jew)-36 b(eiligen)434
b(An)-36 b(teil)432 b(am)h(Gesam-)921 61315 y(tumsatz)g(des)g(Betriebs)
h(in)f Fk(\045)h Fm(an!)873 63861 y(An)-36 b(teil)906
b(der)f(g\374nstigsten)h Fk(70\045)h Fm(an)f(v)-36 b(erkauften)907
b(Pro)36 b(dukten)905 b(am)h(Gesam)-36 b(tumsatz:)p 921
65853 15749 34 v 16669 65853 a(\045)873 68398 y(An)g(teil)1060
b(der)g(teuersten)g Fk(20\045)h Fm(an)g(v)-36 b(erkauften)1061
b(Pro)36 b(dukten)1060 b(am)g(Gesam)-36 b(tumsatz:)p
921 70390 V 16669 70390 a(\045)p 1 0 0 TeXcolorrgb 873
74927 a(An)g(teil)508 b(der)g(g\374nstigsten)g Fk(70\045)g
Fm(an)h(v)-36 b(erkauften)508 b(Pro)36 b(dukten)508 b(am)h(Gesam)-36
b(tumsatz:)508 b Fk(80\045)p Fm(.)873 76919 y(An)-36
b(teil)433 b(der)g(teuersten)g Fk(20\045)h Fm(an)f(v)-36
b(erkauften)435 b(Pro)36 b(dukten)433 b(am)g(Gesam)-36
b(tumsatz:)434 b Fk(10\045)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 47992 4800 a Fh(___/1)p 1 0 0
TeXcolorrgb 48228 6792 a Fg(F)-123 b(A)369 b(1.4)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
24746 81281 a Fm(9)p 0 TeXcolorgray eop end
%%Page: 10 10
TeXDict begin 10 9 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 54804 45 v -2331 6795 a Fn(F)-239
b(A)717 b(1.4)g(-)h(10)f(Chemisc)-60 b(hes)717 b(Exp)60
b(erimen)-60 b(t)716 b(-)h(O)-60 b(A)718 b(-)g(BIFIE)p
0 TeXcolorgray -1391 10102 a Fm(10.)p 0 TeXcolorgray
651 w(In)403 b(der)f(nac)-36 b(hstehenden)401 b(Gra\034k)h(wird)h(der)g
(T)-108 b(emp)36 b(eraturv)-36 b(erlauf)403 b(\(T)g(in)36862
9620 y Fi(\016)37388 10102 y Fm(C\))g(eines)g(c)-36 b(hemi-)921
12094 y(sc)g(hen)433 b(Exp)36 b(erimen)-36 b(ts)433 b(innerhalb)g(der)g
(ersten)g(8)h(Min)-36 b(uten)432 b(ann\344hernd)g(wiedergegeb)36
b(en.)p 0 TeXcolorgray 0 TeXcolorgray 3169 56631 a
 currentpoint currentpoint translate 0.72705 0.72705 scale neg exch
neg exch translate
 3169
56631 a 3602 56631 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 499.04846 a add def
/d 0.0 a add neg def /h 524.04427 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 3602 56631 a 6206 54412 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 19 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 475.52858 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 28.45273
T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 18 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 503.99655 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 28.45274
0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 475.52858  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 475.52858  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 503.99655  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 0.5 abs viceversa { neg } if def /subTNo 0 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 56.9055  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 56.9055  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 503.99655
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 475.52858
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 503.99655  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 503.99655  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 475.52858  def /dT 1864678 abs 65536 div viceversa
{ neg } if def /DT 2. abs viceversa { neg } if def /subTNo 0 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 14.22636  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 14.22636  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 503.99655
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 475.52858
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
4961 54697 a Fj(0)4961 51548 y(2)4961 48398 y(4)4961
45249 y(6)4961 42099 y(8)4490 38949 y(10)4490 35800 y(12)4490
32650 y(14)4490 29501 y(16)4490 26351 y(18)4490 23201
y(20)4490 20052 y(22)4490 16902 y(24)4490 13753 y(26)4490
10603 y(28)4490 7453 y(30)4490 4304 y(32)4490 1154 y(34)5971
55758 y(0)2313 b(0)p Fc(:)p Fj(5)1949 b(1)p Fc(:)p Fj(0)g(1)p
Fc(:)p Fj(5)f(2)p Fc(:)p Fj(0)h(2)p Fc(:)p Fj(5)g(3)p
Fc(:)p Fj(0)f(3)p Fc(:)p Fj(5)h(4)p Fc(:)p Fj(0)f(4)p
Fc(:)p Fj(5)h(5)p Fc(:)p Fj(0)g(5)p Fc(:)p Fj(5)f(6)p
Fc(:)p Fj(0)h(6)p Fc(:)p Fj(5)f(7)p Fc(:)p Fj(0)h(7)p
Fc(:)p Fj(5)g(8)p Fc(:)p Fj(0)6206 54412 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 6206 54412
a 6206 54412 a
tx@Dict begin  { 475.52858 503.99655 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 6206 54412 a 6206 54412 a
tx@Dict begin  { 5.0 4.56934 7.55675 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 6206 54412 a
5953 54830 a Fm(t)6206 54412 y
tx@Dict begin  PutEnd  end
 6206 54412 a 6206 54412
a
tx@Dict begin  PutEnd  end
 6206 54412 a 6206 54412 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 6206 54412 a 6206 54412 a
tx@Dict begin  { 0.0 0.0 pop 475.52858 503.99655 exch pop } PutCoor
PutBegin  end

6206 54412 a 6206 54412 a
tx@Dict begin  { 5.0 8.48598 8.26648 0.0 -40.  Uput UUput } PutCoor
PutBegin  end
 6206 54412 a 5736 54870 a Fm(T)6206
54412 y
tx@Dict begin  PutEnd  end
 6206 54412 a 6206 54412 a
tx@Dict begin  PutEnd  end
 6206 54412 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 8.356454160613545 def
/dx x1 x sub 199 div def /F@pstplot (0.25*x^(3.0)-2.75*x^(2.0)+6.5*x+26.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 56.9055 mul F@pstplot
14.22636 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 14.22636 mul gt { moveto } { dup -1.e30 14.22636
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 14.22636 mul gt { moveto } {
dup -1.e30 14.22636 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 58845 56631 a
currentpoint initclip moveto
 58845 56631 a
3169 56631 a
 currentpoint currentpoint translate 1 0.72705 div 1 0.72705 div scale
neg exch neg exch translate
 3169 56631 a 921 60616 a Fm(Bestimme)518
b(die)h(W)-108 b(erte)517 b Fl(T)181 b Fk(\(1\))518 b
Fm(und)f Fl(T)181 b Fk(\(3)p Fl(;)p Fk(5\))519 b Fm(m\366glic)-36
b(hst)519 b(genau)f(und)f(erkl\344re)i(in)f(W)-108 b(orten,)874
62608 y(w)-36 b(as)434 b(durc)-36 b(h)432 b(diese)i(W)-108
b(erte)433 b(b)36 b(estimm)-36 b(t)433 b(wird!)p 1 0 0
TeXcolorrgb 921 65153 a Fl(T)181 b Fk(\(1\))369 b(=)f(30)6575
64671 y Fi(\016)7102 65153 y Fm(,)434 b Fl(T)181 b Fk(\(3)p
Fl(;)p Fk(5\))369 b Fd(\031)h Fk(25)p Fl(;)p Fk(8)15596
64671 y Fi(\016)921 67145 y Fm(L\366sungsin)-36 b(terv)-72
b(all)434 b(f\374r)f Fl(T)181 b Fk(\(3)p Fl(;)p Fk(5\))370
b(:)f([)8 b(25)p Fl(;)p Fk(5)20019 66663 y Fi(\016)20546
67145 y Fk(;)221 b(26)22428 66663 y Fi(\016)22955 67145
y Fk(])921 69137 y Fl(T)181 b Fk(\(1\))579 b Fm(gibt)g(die)g(T)-108
b(emp)36 b(eratur)579 b(nac)-36 b(h)578 b(einer)h(Min)-36
b(ute)578 b(an,)i Fl(T)181 b Fk(\(3)p Fl(;)p Fk(5\))580
b Fm(gibt)f(die)g(T)-108 b(emp)36 b(eratur)921 71129
y(nac)-36 b(h)433 b(3,5)i(Min)-36 b(uten)432 b(an)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 10102
a Fh(___/1)p 1 0 0 TeXcolorrgb 48228 12094 a Fg(F)-123
b(A)369 b(1.4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 74862 54804 45 v 0 TeXcolorgray 24421
81281 a Fm(10)p 0 TeXcolorgray eop end
%%Page: 11 11
TeXDict begin 11 10 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fn(F)-239 b(A)1121 b(1.4)g(-)g(11)g(V)-179
b(olumen)1120 b(eines)g(Drehk)-60 b(egels)1120 b(-)i(MC)f(-)h(Matura)
-2385 4515 y(2014/15)718 b(-)f(Haupttermin)p 0 TeXcolorgray
-1391 7823 a Fm(11.)p 0 TeXcolorgray 651 w(Das)496 b(V)-108
b(olumen)495 b Fl(V)784 b Fm(eines)496 b(Drehk)-36 b(egels)496
b(h\344ngt)f(v)-36 b(om)496 b(Radius)g Fl(r)531 b Fm(und)494
b(der)h(H\366he)g Fl(h)g Fm(ab.)h(Es)874 9815 y(wird)434
b(durc)-36 b(h)432 b(die)h(F)-108 b(ormel)434 b Fl(V)658
b Fk(=)16865 9292 y Fj(1)p 16865 9505 471 45 v 16865
10273 a(3)17763 9815 y Fd(\001)295 b Fl(r)19049 9333
y Fj(2)19871 9815 y Fd(\001)g Fl(\031)342 b Fd(\001)296
b Fl(h)433 b Fm(b)36 b(esc)-36 b(hrieb)36 b(en.)921 14352
y(Eine)331 b(der)f(nac)-36 b(hstehenden)328 b(Abbildungen)i(stellt)h
(die)f(Abh\344ngigk)-36 b(eit)332 b(des)e(V)-108 b(olumens)330
b(eines)921 16344 y(Drehk)-36 b(egels)435 b(v)-36 b(om)434
b(Radius)f(b)36 b(ei)434 b(k)-36 b(onstan)g(ter)433 b(H\366he)h(dar.)
921 20881 y(Kreuze)f(die)h(en)-36 b(tsprec)g(hende)431
b(Abbildung)i(an.)p 0 TeXcolorgray 0 TeXcolorgray 5199
26794 16107 45 v 5199 42029 45 15236 v 5907 41084 a
 currentpoint currentpoint translate 0.59059 0.59059 scale neg exch
neg exch translate
 5907
41084 a 5907 41084 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 203.69655 a add def
/d 0.0 a add neg def /h 204.13026 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 5907 41084 a 7038 39905 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 7 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 193.47873 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 28.45274
T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 7 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 193.47873 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 28.45274
0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 193.47873  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 193.47873  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 193.47873  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 193.47873
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 193.47873
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 193.47873  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 193.47873  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 193.47873  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 193.47873
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 193.47873
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
7038 39905 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 7038 39905 a 7038 39905 a
tx@Dict begin  { 193.47873 193.47873 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 7038 39905 a 7038
39905 a
tx@Dict begin  { 5.0 5.62148 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 7038 39905 a 6727 40191 a Fl(r)7038 39905 y
tx@Dict begin  PutEnd  end
 7038
39905 a 7038 39905 a
tx@Dict begin  PutEnd  end
 7038 39905 a 7038 39905 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 7038 39905
a 7038 39905 a
tx@Dict begin  { 0.0 0.0 pop 193.47873 193.47873 exch pop } PutCoor
PutBegin  end
 7038 39905 a 7038 39905 a
tx@Dict begin  { 5.0 24.22116 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 7038 39905 a
5698 40237 a Fl(V)289 b Fk(\()p Fl(r)36 b Fk(\))7038
39905 y
tx@Dict begin  PutEnd  end
 7038 39905 a 7038 39905 a
tx@Dict begin  PutEnd  end
 7038 39905 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 2.45 def /dx x1 x sub
199 div def /F@pstplot (-1.0/3.0*x^(2.0)*PI+PI*2)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 7038 39905 a
tx@Dict begin  { 45.52455 133.7278 } PutCoor PutBegin  end
 7038 39905 a 907
x Fl(V)7038 39905 y
tx@Dict begin  PutEnd  end
 7038 39905 a 28456 41084 a
currentpoint initclip moveto
 28456
41084 a 5907 41084 a
 currentpoint currentpoint translate 1 0.59059 div 1 0.59059 div scale
neg exch neg exch translate
 5907 41084 a 19889 42029 45 15236
v 21261 42029 V 5199 42073 16107 45 v 5199 57223 45 15150
v 5907 56278 a
 currentpoint currentpoint translate 0.62103 0.62103 scale neg exch
neg exch translate
 5907 56278 a 5907 56278 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 193.71838 a add def
/d 0.0 a add neg def /h 192.88698 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 5907 56278 a
7038 55099 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 7 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 183.50056 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 28.45274
T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 7 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 182.23544 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 28.45274
0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 183.50056  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 183.50056  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 182.23544  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 182.23544
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 183.50056
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 182.23544  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 182.23544  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 183.50056  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 182.23544
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 183.50056
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 7038 55099 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 7038 55099 a 7038
55099 a
tx@Dict begin  { 183.50056 182.23544 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 7038 55099 a 7038 55099 a
tx@Dict begin  { 5.0 5.62148 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 7038 55099 a 6727 55385
a Fl(r)7038 55099 y
tx@Dict begin  PutEnd  end
 7038 55099 a 7038 55099 a
tx@Dict begin  PutEnd  end
 7038 55099
a 7038 55099 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 7038 55099 a 7038 55099 a
tx@Dict begin  { 0.0 0.0 pop 183.50056 182.23544 exch pop } PutCoor
PutBegin  end
 7038 55099 a
7038 55099 a
tx@Dict begin  { 5.0 24.22116 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 7038 55099 a 5698 55431 a Fl(V)289 b Fk(\()p
Fl(r)36 b Fk(\))7038 55099 y
tx@Dict begin  PutEnd  end
 7038 55099 a 7038 55099
a
tx@Dict begin  PutEnd  end
 7038 55099 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 6.4493110859082226 def
/dx x1 x sub 199 div def /F@pstplot (x)  tx@AlgToPs begin AlgToPs end
cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
7038 55099 a
tx@Dict begin  { 71.13185 93.89413 } PutCoor PutBegin  end
 7038 55099 a 908 x Fl(V)7038 55099 y
tx@Dict begin  PutEnd  end
 7038
55099 a 27351 56278 a
currentpoint initclip moveto
 27351 56278 a 5907 56278 a
 currentpoint currentpoint translate 1 0.62103 div 1 0.62103 div scale
neg exch neg exch translate
 5907
56278 a 19889 57223 45 15150 v 21261 57223 V 5199 57267
16107 45 v 5199 72417 45 15150 v 5907 71472 a
 currentpoint currentpoint translate 0.62103 0.62103 scale neg exch
neg exch translate
 5907 71472
a 5907 71472 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 193.71838 a add def
/d 0.0 a add neg def /h 192.88698 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 5907 71472 a 7038 70293 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 7 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 183.50056 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 28.45274
T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 7 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 182.23544 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 28.45274
0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 183.50056  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 183.50056  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 182.23544  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 182.23544
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 183.50056
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 182.23544  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 182.23544  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 183.50056  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 182.23544
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 183.50056
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
7038 70293 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 7038 70293 a 7038 70293 a
tx@Dict begin  { 183.50056 182.23544 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 7038 70293 a 7038
70293 a
tx@Dict begin  { 5.0 5.62148 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 7038 70293 a 6727 70579 a Fl(r)7038 70293 y
tx@Dict begin  PutEnd  end
 7038
70293 a 7038 70293 a
tx@Dict begin  PutEnd  end
 7038 70293 a 7038 70293 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 7038 70293
a 7038 70293 a
tx@Dict begin  { 0.0 0.0 pop 183.50056 182.23544 exch pop } PutCoor
PutBegin  end
 7038 70293 a 7038 70293 a
tx@Dict begin  { 5.0 24.22116 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 7038 70293 a
5698 70625 a Fl(V)289 b Fk(\()p Fl(r)36 b Fk(\))7038
70293 y
tx@Dict begin  PutEnd  end
 7038 70293 a 7038 70293 a
tx@Dict begin  PutEnd  end
 7038 70293 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0.01 def /x1 6.4493110859082226
def /dx x1 x sub 199 div def /F@pstplot (PI/x)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 7038 70293 a
tx@Dict begin  { 42.67911 79.66776 } PutCoor PutBegin  end
 7038 70293 a 908
x Fl(V)7038 70293 y
tx@Dict begin  PutEnd  end
 7038 70293 a 27351 71472 a
currentpoint initclip moveto
 27351
71472 a 5907 71472 a
 currentpoint currentpoint translate 1 0.62103 div 1 0.62103 div scale
neg exch neg exch translate
 5907 71472 a 19889 72417 45 15150
v 21261 72417 V 5199 72461 16107 45 v 24758 26794 17100
45 v 24758 41944 45 15150 v 25466 40999 a
 currentpoint currentpoint translate 0.62103 0.62103 scale neg exch
neg exch translate
 25466 40999
a 25466 40999 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 193.71838 a add def
/d 0.0 a add neg def /h 192.88698 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 25466 40999 a 26597 39820 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 7 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 183.50056 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 28.45274
T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 7 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 182.23544 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 28.45274
0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 183.50056  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 183.50056  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 182.23544  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 182.23544
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 183.50056
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 182.23544  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 182.23544  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 183.50056  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 182.23544
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 183.50056
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
26597 39820 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 26597 39820 a 26597 39820 a
tx@Dict begin  { 183.50056 182.23544 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 26597 39820
a 26597 39820 a
tx@Dict begin  { 5.0 5.62148 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 26597 39820 a 26286 40106 a Fl(r)26597
39820 y
tx@Dict begin  PutEnd  end
 26597 39820 a 26597 39820 a
tx@Dict begin  PutEnd  end
 26597 39820 a 26597
39820 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 26597 39820 a 26597 39820 a
tx@Dict begin  { 0.0 0.0 pop 183.50056 182.23544 exch pop } PutCoor
PutBegin  end
 26597 39820 a 26597
39820 a
tx@Dict begin  { 5.0 24.22116 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 26597 39820 a 25257 40152 a Fl(V)289 b Fk(\()p
Fl(r)36 b Fk(\))26597 39820 y
tx@Dict begin  PutEnd  end
 26597 39820 a 26597 39820
a
tx@Dict begin  PutEnd  end
 26597 39820 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 6.4493110859082226 def
/dx x1 x sub 199 div def /F@pstplot (1.0/3.0*x^(2.0)*PI)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial
26597 39820 a
tx@Dict begin  { 61.2835 122.34688 } PutCoor PutBegin  end
 26597 39820 a 907 x Fl(V)26597 39820 y
tx@Dict begin  PutEnd  end

26597 39820 a 46910 40999 a
currentpoint initclip moveto
 46910 40999 a 25466 40999
a
 currentpoint currentpoint translate 1 0.62103 div 1 0.62103 div scale
neg exch neg exch translate
 25466 40999 a 39448 41944 45 15150 v 1 0 0 TeXcolorrgb
40156 34701 a Fe(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 41813 41944 V 24758 41988 17100 45 v 24758
57138 45 15150 v 25466 56193 a
 currentpoint currentpoint translate 0.62103 0.62103 scale neg exch
neg exch translate
 25466 56193 a 25466 56193
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 193.71838 a add def
/d 0.0 a add neg def /h 192.88698 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 25466 56193 a 26597 55014 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 7 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 183.50056 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 28.45274
T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 7 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 182.23544 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 28.45274
0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 183.50056  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 183.50056  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 182.23544  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 182.23544
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 183.50056
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 182.23544  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 182.23544  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 183.50056  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 182.23544
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 183.50056
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 26597 55014 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end

26597 55014 a 26597 55014 a
tx@Dict begin  { 183.50056 182.23544 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 26597 55014 a 26597 55014
a
tx@Dict begin  { 5.0 5.62148 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 26597 55014 a 26286 55300 a Fl(r)26597 55014 y
tx@Dict begin  PutEnd  end
 26597
55014 a 26597 55014 a
tx@Dict begin  PutEnd  end
 26597 55014 a 26597 55014 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 26597
55014 a 26597 55014 a
tx@Dict begin  { 0.0 0.0 pop 183.50056 182.23544 exch pop } PutCoor
PutBegin  end
 26597 55014 a 26597 55014 a
tx@Dict begin  { 5.0 24.22116 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 26597
55014 a 25257 55346 a Fl(V)289 b Fk(\()p Fl(r)36 b Fk(\))26597
55014 y
tx@Dict begin  PutEnd  end
 26597 55014 a 26597 55014 a
tx@Dict begin  PutEnd  end
 26597 55014 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 6.4493110859082226 def
/dx x1 x sub 199 div def /F@pstplot (sqrt(PI*x))  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 26597 55014 a
tx@Dict begin  { 73.9773 99.5846 } PutCoor PutBegin  end
 26597 55014 a
908 x Fl(V)26597 55014 y
tx@Dict begin  PutEnd  end
 26597 55014 a 46910 56193 a
currentpoint initclip moveto

46910 56193 a 25466 56193 a
 currentpoint currentpoint translate 1 0.62103 div 1 0.62103 div scale
neg exch neg exch translate
 25466 56193 a 39448 57138
45 15150 v 41813 57138 V 24758 57182 17100 45 v 24758
72332 45 15150 v 25466 71387 a
 currentpoint currentpoint translate 0.62103 0.62103 scale neg exch
neg exch translate
 25466 71387 a 25466 71387
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 193.71838 a add def
/d 0.0 a add neg def /h 192.88698 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 25466 71387 a 26597 70208 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 7 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 183.50056 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 28.45274
T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 7 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 182.23544 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 28.45274
0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 183.50056  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 183.50056  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 182.23544  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 182.23544
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 183.50056
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 182.23544  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 182.23544  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 183.50056  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 182.23544
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 183.50056
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 26597 70208 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end

26597 70208 a 26597 70208 a
tx@Dict begin  { 183.50056 182.23544 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 26597 70208 a 26597 70208
a
tx@Dict begin  { 5.0 5.62148 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 26597 70208 a 26286 70494 a Fl(r)26597 70208 y
tx@Dict begin  PutEnd  end
 26597
70208 a 26597 70208 a
tx@Dict begin  PutEnd  end
 26597 70208 a 26597 70208 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 26597
70208 a 26597 70208 a
tx@Dict begin  { 0.0 0.0 pop 183.50056 182.23544 exch pop } PutCoor
PutBegin  end
 26597 70208 a 26597 70208 a
tx@Dict begin  { 5.0 24.22116 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 26597
70208 a 25257 70540 a Fl(V)289 b Fk(\()p Fl(r)36 b Fk(\))26597
70208 y
tx@Dict begin  PutEnd  end
 26597 70208 a 26597 70208 a
tx@Dict begin  PutEnd  end
 26597 70208 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 6.4493110859082226 def
/dx x1 x sub 199 div def /F@pstplot (2.0*x^(2.0)+1)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 26597 70208 a
tx@Dict begin  { 36.98865 102.43004 } PutCoor PutBegin  end
 26597 70208 a
908 x Fl(V)26597 70208 y
tx@Dict begin  PutEnd  end
 26597 70208 a 46910 71387 a
currentpoint initclip moveto

46910 71387 a 25466 71387 a
 currentpoint currentpoint translate 1 0.62103 div 1 0.62103 div scale
neg exch neg exch translate
 25466 71387 a 39448 72332
45 15150 v 41813 72332 V 24758 72376 17100 45 v 47992
7823 a Fh(___/1)p 1 0 0 TeXcolorrgb 48228 9815 a Fg(F)-123
b(A)369 b(1.4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 76490 54804 45 v 0 TeXcolorgray 24421
81281 a Fm(11)p 0 TeXcolorgray eop end
%%Page: 12 12
TeXDict begin 12 11 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fn(F)-239 b(A)972 b(1.4)g(-)h(12)f(Daten)g
(aus)g(einem)g(Diagramm)h(ablesen)e(-)i(MC)g(-)-2331
4515 y(Matura)717 b(2015/16)g(-)h(Neb)60 b(en)-60 b(termin)716
b(1)p 0 TeXcolorgray -1391 7823 a Fm(12.)p 0 TeXcolorgray
651 w(Ein)407 b(Motorradfahrer)g(f\344hrt)g(dieselb)36
b(e)407 b(Strec)-36 b(k)g(e)407 b(\(560)217 b(km\))408
b(wie)g(ein)f(A)-36 b(utofahrer.)407 b(Die)h(b)36 b(ei-)921
9815 y(den)435 b(Bew)-36 b(egungen)436 b(w)-36 b(erden)435
b(im)h(nac)-36 b(hstehenden)434 b(Zeit-W)-108 b(eg-Diagramm)437
b(mo)36 b(dellhaft)437 b(als)921 11806 y(geradlinig)d(angenommen.)f
(Die)g(herv)-36 b(orgehob)36 b(enen)433 b(Punkte)f(hab)36
b(en)432 b(ganzzahlige)i(K)-36 b(o)36 b(or-)921 13798
y(dinaten.)p 0 TeXcolorgray 0 TeXcolorgray 9916 42056
a
 currentpoint currentpoint translate 0.92659 0.92659 scale neg exch
neg exch translate
 9916 42056 a 10349 42056 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 259.18149 a add def
/d 0.0 a add neg def /h 254.98825 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 10349 42056 a 12718 40446
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 9 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.4  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 237.78593 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.4  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 28.44482
T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 10 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.4  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 240.45003 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.4  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 28.45274
0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 237.78593  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 237.78593  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 240.45003  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -3.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 240.45003
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 237.78593
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 240.45003  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 240.45003  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 237.78593  def /dT 1864160 abs 65536 div viceversa
{ neg } if def /DT 80. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -3.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 0.35556  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 0.35556  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 240.45003
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 237.78593
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 11362 40732 a Fj(0)10891 37583
y(80)10421 34434 y(160)10421 31286 y(240)10421 28137
y(320)10421 24988 y(400)10421 21839 y(480)10421 18691
y(560)10421 15542 y(640)12483 41903 y(0)2679 b(1)h(2)f(3)h(4)f(5)h(6)g
(7)f(8)12718 40446 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 12718 40446 a 12718 40446 a
tx@Dict begin  { 237.78593 240.45003 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 12718
40446 a 12718 40446 a
tx@Dict begin  { 5.0 44.38898 8.26648 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 12718 40446 a 10261 40904 a Fm(Zeit)433
b(in)h(h)12718 40446 y
tx@Dict begin  PutEnd  end
 12718 40446 a 12718 40446 a
tx@Dict begin  PutEnd  end
 12718
40446 a 12718 40446 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 12718 40446 a 12718 40446 a
tx@Dict begin  { 0.0 0.0 pop 237.78593 240.45003 exch pop } PutCoor
PutBegin  end
 12718
40446 a 12718 40446 a
tx@Dict begin  { 5.0 55.80853 8.26648 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 12718 40446 a 9629 40775 a Fm(W)-108
b(eg)434 b(in)f(km)12718 40446 y
tx@Dict begin  PutEnd  end
 12718 40446 a 12718
40446 a
tx@Dict begin  PutEnd  end
 12718 40446 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 7 def /dx x1 x sub 49
div def /F@pstplot ((-0.--240.*x)/3.)  tx@AlgToPs begin AlgToPs end
cvx def /xy { x 28.45274 mul F@pstplot 0.35556 mul } def  /ps@Exit
false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30 0.35556
mul gt { moveto } { dup -1.e30 0.35556 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 0.35556 mul gt { moveto } { dup -1.e30 0.35556 mul lt { moveto
} { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinecap [  7.0  7.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 3 def /x1 7.67 def /dx x1 x sub
49 div def /F@pstplot ((-720.--240.*x)/2.)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 0.35556 mul } def  /ps@Exit
false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30 0.35556
mul gt { moveto } { dup -1.e30 0.35556 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 0.35556 mul gt { moveto } { dup -1.e30 0.35556 mul lt { moveto
} { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 12718 40446 a
tx@Dict begin  { 157.91888 100.33527 } PutCoor PutBegin  end

12718 40446 a 915 x Fm(Motorrad)12718 40446 y
tx@Dict begin  PutEnd  end
 12718 40446
a 12718 40446 a
tx@Dict begin  { 91.04869 130.7278 } PutCoor PutBegin  end
 12718 40446 a 915 x Fm(A)-36 b(uto)12718
40446 y
tx@Dict begin  PutEnd  end
 12718 40446 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 0.0 0.0   false NArray
 /DS 4.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0
1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 85.35823 85.33447
  false NArray  /DS 4.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 142.26372 142.22412
  false NArray  /DS 4.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 199.1692 199.11377
  false NArray  /DS 4.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 85.35823 0.0   false
NArray  /DS 4.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show
grestore } bind def   1. .setopacityalpha  newpath n { transform floor
.5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 142.26372 85.33447
  false NArray  /DS 4.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 199.1692 170.66895
  false NArray  /DS 4.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
39040 42056 a
currentpoint initclip moveto
 39040 42056 a 9916 42056 a
 currentpoint currentpoint translate 1 0.92659 div 1 0.92659 div scale
neg exch neg exch translate
 9916 42056 a
921 46040 a Fm(Kreuze)378 b(die)f(b)36 b(eiden)378 b(A)-36
b(ussagen)377 b(an,)h(die)g(eine)g(k)-36 b(orrekte)378
b(In)-36 b(terpretation)377 b(des)h(Diagramms)921 48032
y(darstellen.)p 1088 48741 44209 45 v 1088 53537 45 4797
v 1796 50600 a(Der)434 b(Motorradfahrer)f(f\344hrt)h(drei)f(Stunden)f
(nac)-36 b(h)433 b(der)g(Abfahrt)g(des)g(A)-36 b(utofah-)1796
52592 y(rers)433 b(los.)p 42887 53537 V 1 0 0 TeXcolorrgb
43595 51471 a Fe(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 45252 53537 V 1088 53582 44209 45 v 1088
56800 45 3219 v 1796 55523 a Fm(Das)h(Motorrad)g(hat)f(eine)h(Durc)-36
b(hsc)g(hnittsgesc)g(h)g(windigk)g(eit)433 b(v)-36 b(on)434
b(100)217 b(km/h.)p 42887 56800 V 45252 56800 V 1088
56844 44209 45 v 1088 61641 45 4797 v 1796 58704 a(W)-108
b(enn)433 b(der)g(A)-36 b(utofahrer)433 b(sein)h(Ziel)g(erreic)-36
b(h)g(t,)433 b(ist)h(das)f(Motorrad)h(da)-36 b(v)g(on)433
b(no)36 b(c)-36 b(h)1796 60696 y(120)217 b(km)435 b(en)-36
b(tfern)g(t.)p 42887 61641 V 45252 61641 V 1088 61685
44209 45 v 1088 66821 45 5137 v 1796 63626 a(Die)434
b(Durc)-36 b(hsc)g(hnittsgesc)g(h)g(windigk)g(eit)433
b(des)h(A)-36 b(utos)433 b(ist)h(um)f(40)217 b(km/h)434
b(niedriger)1796 65618 y(als)g(jene)g(des)f(Motorrads.)p
42887 66821 V 1 0 0 TeXcolorrgb 43595 64585 a Fe(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45252
66821 V 1088 66865 44209 45 v 1088 71921 45 5056 v 1796
68725 a Fm(Die)h(Gesam)-36 b(tfahrzeit)434 b(des)f(Motorradfahrers)h
(ist)f(f\374r)h(diese)f(Strec)-36 b(k)g(e)434 b(gr\366\377er)g(als)1796
70717 y(jene)g(des)f(A)-36 b(utofahrers.)p 42887 71921
V 45252 71921 V 1088 71965 44209 45 v 47992 7823 a Fh(___/1)p
1 0 0 TeXcolorrgb 48228 9815 a Fg(F)-123 b(A)369 b(1.4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
75993 54804 45 v 0 TeXcolorgray 24421 81281 a Fm(12)p
0 TeXcolorgray eop end
%%Page: 13 13
TeXDict begin 13 12 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1599 a Fn(F)-239 b(A)681 b(1.4)g(-)h(13)g
(Zerfallsprozess)d(-)j(MC)g(-)g(Matura)f(2013/14)g(Haupt-)-2331
4622 y(termin)p 0 TeXcolorgray -1391 7929 a Fm(13.)p
0 TeXcolorgray 651 w(Der)458 b(un)-36 b(ten)457 b(abgebildete)h(Graph)e
(einer)i(F)-108 b(unktion)457 b Fl(N)596 b Fm(stellt)459
b(einen)e(exp)36 b(onen)-36 b(tiellen)458 b(Zer-)921
9921 y(fallsprozess)306 b(dar;)f(dab)36 b(ei)304 b(b)36
b(ezeic)-36 b(hnet)304 b Fl(t)g Fm(die)h(Zeit)f(und)f
Fl(N)139 b Fk(\()p Fl(t)p Fk(\))304 b Fm(die)g(zum)g(Zeitpunkt)g
Fl(t)g Fm(v)-36 b(orhan-)921 11913 y(dene)477 b(Menge)g(des)g
(zerfallenden)h(Sto\033es.)f(F)-27 b(\374r)477 b(die)g(zum)g(Zeitpunkt)
g Fl(t)443 b Fk(=)g(0)478 b Fm(v)-36 b(orhandene)921
13905 y(Menge)433 b(gilt:)i Fl(N)139 b Fk(\(0\))368 b(=)h(800)p
Fm(.)p 0 TeXcolorgray 0 TeXcolorgray 5418 31810 a
 currentpoint currentpoint translate 0.79156 0.79156 scale neg exch
neg exch translate
 5418
31810 a 5418 31810 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 410.64548 a add def
/d 0.0 a add neg def /h 176.55464 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 5418 31810 a 8009 30448 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 13 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 387.23578 0.0 -23.4097 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 14.22636 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 12 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 164.24702 0.0 -12.30762   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 36.98866 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 387.23578  0 -23.4097  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -23.4097
 387.23578  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-12.30762  def /maxTickline 164.24702  def /dT 2424089 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 36.98866  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 36.98866
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 164.24702
0.0 -12.30762   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 387.23578
0.0 -23.4097 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 164.24702  0 -12.30762  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -12.30762
 164.24702  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-23.4097  def /maxTickline 387.23578  def /dT 932339 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 14.22636  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 14.22636  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 164.24702
0.0 -12.30762   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 387.23578
0.0 -23.4097 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
11868 31793 a Fj(1)3625 b(2)f(3)h(4)f(5)h(6)f(7)h(8)f(9)3390
b(10)8009 30448 y @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 10.469037037037031 def
/dx x1 x sub 199 div def /F@pstplot (8.000000000000002*EXP(-0.2310490601866484*x))
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 36.98866 mul F@pstplot
14.22636 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 14.22636 mul gt { moveto } { dup -1.e30 14.22636
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 14.22636 mul gt { moveto } {
dup -1.e30 14.22636 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
8009 30448 a
tx@Dict begin  { 347.73158 9.9584 } PutCoor PutBegin  end
 8009 30448 a 543 x Fa(t)8009 30448 y
tx@Dict begin  PutEnd  end
 8009
30448 a 8009 30448 a
tx@Dict begin  { 7.80342 158.5798 } PutCoor PutBegin  end
 8009 30448 a 664 x Fa(N\(t\))8009
30448 y
tx@Dict begin  PutEnd  end
 8009 30448 a 8009 30448 a
tx@Dict begin  { 88.27419 80.1112 } PutCoor PutBegin  end
 8009 30448 a 610 x
Fa(N)8009 30448 y
tx@Dict begin  PutEnd  end
 8009 30448 a 50874 31810 a
currentpoint initclip moveto
 50874 31810
a 5418 31810 a
 currentpoint currentpoint translate 1 0.79156 div 1 0.79156 div scale
neg exch neg exch translate
 5418 31810 a 921 35795 a Fm(Mit)540 b
Fl(t)3990 35994 y Fc(H)5426 35795 y Fm(ist)g(diejenige)h(Zeitspanne)e
(gemein)-36 b(t,)540 b(nac)-36 b(h)539 b(deren)h(Ablauf)g(die)g
(urspr\374nglic)-36 b(he)921 37787 y(Menge)433 b(des)h(zerfallenden)g
(Sto\033es)f(auf)h(die)f(H\344lfte)i(gesunk)-36 b(en)433
b(ist.)921 40332 y(Kreuze)g(die)h(b)36 b(eiden)433 b(zutre\033enden)e
(A)-36 b(ussagen)434 b(an!)p 17671 43291 11041 45 v 17671
46216 45 2926 v 18380 45072 a Fl(t)18850 45271 y Fc(H)20115
45072 y Fk(=)369 b(6)p 26303 46216 V 28668 46216 V 17671
46260 11041 45 v 17671 49186 45 2926 v 18380 48042 a
Fl(t)18850 48241 y Fc(H)20115 48042 y Fk(=)g(2)p 26303
49186 V 28668 49186 V 17671 49230 11041 45 v 17671 52156
45 2926 v 18380 51012 a Fl(t)18850 51211 y Fc(H)20115
51012 y Fk(=)g(3)p 26303 52156 V 1 0 0 TeXcolorrgb 27011
51025 a Fe(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 28668 52156 V 17671 52200 11041 45 v 17671
55418 45 3219 v 18380 54141 a Fl(N)139 b Fk(\()p Fl(t)20537
54340 y Fc(H)21432 54141 y Fk(\))369 b(=)g(400)p 26303
55418 V 1 0 0 TeXcolorrgb 1373 w Fe(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 28668 55418 V 17671
55462 11041 45 v 17671 58681 45 3219 v 18380 57404 a
Fl(N)139 b Fk(\()p Fl(t)20537 57603 y Fc(H)21432 57404
y Fk(\))369 b(=)g(500)p 26303 58681 V 28668 58681 V 17671
58725 11041 45 v 47992 7929 a Fh(___/1)p 1 0 0 TeXcolorrgb
48228 9921 a Fg(F)-123 b(A)369 b(1.4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 62753 54804 45
v 0 TeXcolorgray 24421 81281 a Fm(13)p 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

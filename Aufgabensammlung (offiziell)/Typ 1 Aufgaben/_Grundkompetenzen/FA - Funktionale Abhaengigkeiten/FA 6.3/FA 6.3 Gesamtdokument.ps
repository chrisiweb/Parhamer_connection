%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 6.3/FA 6.3 Gesamtdokument.dvi
%%CreationDate: Fri Nov 10 08:59:33 2017
%%Pages: 9
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: LMRoman12-Bold LMRoman12-Regular LMMathItalic12-Regular
%%+ LMMathSymbols10-Regular LMRoman8-Regular LMRoman10-Regular
%%+ LMMathSymbols8-Regular MSBM10 LMMathItalic6-Regular LMRoman6-Regular
%%+ LMMathItalic8-Regular LMMathSymbols6-Regular LMRoman5-Regular wasy10
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ "C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 6.3/FA 6.3 Gesamtdokument.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2017.11.10:0959
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: wasy10
%!PS-AdobeFont-1.0: wasy10 001.000
%%CreationDate: Sun Mar 22 11:13:35 1998
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.002) readonly def
/Copyright (Metafont original (c) 1992 Ronald Waldi, Metafont curve conversion by Metafog (c) 1995 Richard Kinch.) readonly def
/Notice (Copyright 1998 Taco Hoekwater) readonly def
/FullName (wasy10) readonly def
/FamilyName (wasy10) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /wasy10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /Box put
dup 52 /XBox put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox {-23 -1667 1720 881} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB02CB1AAE
36F1D7B67C605A37687A9C3F7067F07673039D1E3E1F5D9B09E6A389A55EBF12
06E72531469F768EDBC4DCCA572BD608C4BA8F7EC3E5BC61C6D949C94A843E69
0622F0AAEBF5CB25A2395DFF6342106C198751CF0B33691FC18800254AC54C04
02494A0E3670008E8BA57A3CD823BF47494F2EF9244421A8A0AED84D153D7201
BB12EE9478DF00CA573F64C2474817FF401EE94BACCA8AFC16E776665C3E1E31
89AEEC906A2B9F8974BEA7160C33F0AE7FB04B2666A5B16659D6DF66A688D80A
B531D9F866F21F15D55C6FE75A8787091359698E434EF9C129EED0427EB96787
B3F25C530E3664725C63D4C5DFF9D05CD13619FC41A001275A78C58F85FC7C4A
911CC31CB426231473202A698E5715B032D2206BB361EFCBFE3E32BC0C8D9BC1
353AAEC62EE632FC8FFFDCF6E7D928F562F689406CA00C11C7EAA723B62FFD2F
5F6343AF494085662CE2CE880B04F5589396EAAA8823DBCDE56D868B9E66BB8F
10EA91AF37D76A1BF27E69C2A2ED1D8B25434C0F205313ECB8A6E039093FFB32
983346BEC569B175529DAAD1FFEC1A9302918FC947C390A86C061AE0F6522D79
2D4FE06AE4FABA59F225D7ECE2EECD4BA1359DB18F8957F551C5D6F037F18545
CC6D03EB2DCCCFA294492ED72A737588457E5B18FA4CA0F6D6D8963CA35DFEDF
31A684FC0388D416D7BF6CD9837AD8692F284F24B80CF9F24DB10DAD0C4198BC
2D2A52D9F75CF6C52C7AE0D8D4598DB750E9CC97D0FD31EE8C598A2FF3745694
29DA808141AF4D8F8AA36D7DDCC3457D5E082B2BDF7EE060296721D44B092E70
3607B2335488925E41B22D659C8F0FFEE19A7C19547A147DB851262E47E9C4FB
0A8364BCBC1C77E29A1183EF185EF35B9A5B13170730ED52D5C52CCB460E7D37
F4F37F772794BEA0DA201C99C52F8AC2E4CE7FF33F6ACB796E55BA2372E3B035
52C4F57AB5C0BF828DC7E5A8F8F00ACE0120B99667816FAF5D736BCEBF7D45A5
79C9B5EAA32C9B672D764D2F51B2393ADC71A36AC0D5CA76F3F571D50CB4C1D7
CA77149B8F0C98198919DC43890B0BBF10075D53739F7E84CEE95B40C3DB68D5
6E9847E37B7920412068C3DE2065A77281345980956AFAD312499818890B454F
5DD8C92695818BA4DAFEBCDD4D268763515CE077A64C5F3AB384A6DFD7DD9641
FCDA0A3344B3A14F82D478B4BE7BFC2822A4D67AD3FD07B11589B93842066528
1E51D954D7E6019F6921DB9B00ED303B4B8F557EAC7A0B0340A268B0DDB25B3E
BE0982129B0D3416CA5D07ADC689CAA181270B8141F9D0F60C60F156CB305E5B
E71D9A5D5FB3216BFB66284FCABF6D74564D1288EA99D3FCF6F29C3AA690A596
02C0AD2BB29A2D457C66031E5571A1454758212EB4D053F4C28FF629FA94DBF2
9677AC4B92C4DF5C7FFDE31A8F2D6F9477896C11CBA890DD464C9231B1C350E8
E8CEE17F2E0F5D10416F7D7FBC6085E9BE09E692951EA7B93A9F49CD458476E0
A380E1D122F275093ECFD398FCA6D714187CC12A2B16318F9E1D2B0E9EC134A2
C4D2674AA68D2E7EDBCCA383
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE5020D74C7714FF08F5AE00F69DBED351708B1C760171CE5
5D0FE3BC5F6769FB19C7951CD5DCA774B841330A2C8CF59CF458230A1642F956
21D23843C4332F05F5AF14E70EF052F02F7E3F51D6E7D68A4FED8D2C4A733AA3
8973CF4CDF768C31E35C395C3BF67A79F8B1AC292F38AB2EF22A87A8ADBE2C55
747D7AF3101C5F1A2A1BF6C0E245AC583FE784CD69B918457FC63ACB5FA24E41
CAE39AA9386736476F5C0BD3D01ACFCABB35BD346B884B97EB5F467C93A2FC7F
82A0B3682C1D7B0CAE0165D6FE43CBD8FA5C85EDCD122FAC36F59FDA7CC4EFE6
1F9F8E88832737186037F9E5AB161B8A2090F5569529861FAEFDC91E823E0A0E
A92E7F1118BCF413BD355CD844D0F88C47B267EAFA1585B4ABAAAB9BF885D233
DE4656E4CCC1AC1A5762BE48F5FA88A0020AF17A438014B5902A55EE220152C9
0348CF590A07761415D2F53A866C95D4A6848E2BB7970D176670F90765843635
9C2461BEA57F9CC512BDC51EF25496B2C2253AE85AB38889B26761BA509C7F63
8C6CBC4BBDEA74FD3B43A178C86F9A97423815F5FA2C09BA590B8371D5B7758A
43F98F4DC4792308CDFE2779CA6F20ACEF23FD8FC11F483C0CDAFE837D984A76
1286C4DC5088F5DC4B8D59F781ED48736CDB2D0B9B51340F6218CDD622544552
9BAB6B88481D111091C2CAE5E19903BE5F2C90E79E2469EFE314329B4653D49A
0C4443075770A91A1C8F4179E4167E37B2DB2FB55576CE3A4FB2BDCCC49ADAFB
01C7A6C0A0CABBB72135D782D6D302DA6F67A5A31664FD4312483EA00066C08F
2E907B83F704F9E870AC27EBF1A21DE55E2E8139EEC0F780FB83BBAB87209B36
C1E995ABB0450712CAF436627E0FA539AB4047E252ADB05C815832FA26D5A46E
6E6D081665CDDB47E5F4524EF2CFF89AE5639E089330F124508E3A00E51CD32C
2B1D7FC2F5632F32B024FF4066E30D94383AA882E38281D84775A03BD1F7B995
9DAEC7640944CC7BE3791DDC409CD8D537C3308195EB55597D9E6C5410AB7DE1
82463159831D8EC348AD05386348C3E9977F2E748C3B018195B5031E3F51C95D
9A061217DA9F3B704B75F1D6110C7D4F9DB6CCEE47BBD06941C667CEC41B0F43
4CBF4E08767B6F023C89659C6661CA363D2BC38DCAC52E6C67FF1AF9B6A0FF16
6C4164A695E66B3B6E55D7183E48E3F84E99225FD4EE99C3BFEDB90B94740F22
63066D80D2C9CCAE054CD0BFFB25C7AF92F419E57D9E910B719BB3E00FD7F8BD
14FB0CAEF5370AD7AF775252ACE49DA73B0D2AA9F15408179612668B7E8662B8
AF299360DDF702A333A109BA94A4A3600C16E04899E47073AF80A3CC059D6366
A37B864D6DFDF35F7F77B6B130C5FA0AEC8A11C893E0037B0D4138E2C5411D63
56857185E1E0445A51C67BE74F11BC20309B35A2CBC0209F8032C8D0BFD97EBA
0D5A0F94355FBD634729E049E1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman5-Regular
%!PS-AdobeFont-1.0: LMRoman5-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman5-Regular known{/LMRoman5-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman5-Regular)readonly def
/FamilyName(LMRoman5)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -73 def
/UnderlineThickness 28 def
end readonly def
/FontName /LMRoman5-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-566 -303 1772 1126}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D5E366B4567F8B1C71179751D38DE
09EAB552C14DCD4DE0B086BE80D484750E1D728A501EB36DDA2232012EABE46F
4F54C36AA715FC2E594CE94E9690253F9AE872DEF9091E25A9D7FD73512FAD46
941B8C772528E3A80A92F12CA732DE1460CB5FD1DAF819FA9E1CCFC106AA3832
D37573160C919A633327D54A78400F470079B6B1329E9F88AD384999BB626184
99F2C26CDCF35763273F3B6F226E9E54F4706F7F64DA9B9CA122118314131345
7EE1C14F42845F235E6A6157F87FD2B0069A3FFE68094665ADCA2D6F09103F68
59300BE424E5E62D6BA15D1B9FD7F2A4E40CC69D8D827A3E2096706B0D2EC51E
12E43A43F50BC93F45A54F86F4E198A10176F1AB8198B9466006B468AE2ACF69
986BCC22B224520F72BF6F2025D79AFB148408C463D4C05FBE11047FFD978A94
19F22274208AFC00F45E7C4532A936319F63B4448769CAC01E067BAA94B81B3D
E16DB13FF1E0AD85933DC6DC4B1DCEE12252BE0C7FA81D6A188EC2AB50395C52
4CB5EF83F76C36901E73833E2C92CB3020547825353EAE49B08B7BC575A1C765
3F09FB1B8B4432BA7069B1B411319D3B1F369DAA39789F637C2E35775412CB50
97244C92598495506F37518CE9A0EF8A1BB12EBAC2ACDB8234E068B106997D75
C5E7799210C1706AE188F7D8C15F484FD68C83A3BE8EA1B574CD543FE4C87F54
B65B51EAFA28D03D9519786575EB3A201BA07E91114DE53AA4F1E8CB784A0755
D5FA7C3D7AC97EF66D31A130F8EF6A3A6274B93B617C3B82231B0A7B6F06155C
5A3DBBF7E1A189309F8EC19BB343EB5477EA3D8BB5988CFD6AA26BDD781F814C
CFCE5240166D84A2C48EBAE7D4D6CA0636EE1120BF9DC6AAEFD8E6ED3CB145CB
AFA37081D7529F9449BE76828FE8BD41A7AD83B227CDF579CA57944A22B273DE
AFDC61B6199F4036C2DD237344E5950F20D821F125DD9B4396F2684BF4963FC1
8B01443D485AB9858152E3FA121F9BDD04B7EA8A00B2A5C1AA4D03113B2FD8EB
1352F664B2BFE42F0A95B387F06E8E01DE68CBC124049EA103CD8FD9A3278B8F
C81C7A93EC9FC3BB5BDA3619E904570286AF40945FD86ACA7C98EAE4E54EC58E
B7B7A43566311A1D9C1555B2AB19806C5536397CFB0152D3DB99602DC08E3B0C
E768240F0E8CE9FF939E4B1A6365664AA3F617E7831D0309FC06C6CE580564F6
B90D2D374F8F420A8C664C6F732F6D1E62401C3DAB3E3D1F7E6481E9BCE3612A
C5B63E40D01916ACDA40E27990D9B1911EDC838F9D7E350B1DA59C2F29FC3F86
936EE711CF57F48767637093A0A313BDF17ADEC6B5D27A5D3EE38B7C706A15EA
93F5FA7800171D760667E1336DD8F229A27AAFD876E1D5EB11DEB30BF7A3CC1F
C21E762AFC09F2A23D9835CAC736F607207AC573291E6E56898F67901B527155
57491B4DED0A19A1E6464D99B7A1B80D4DD2F9F9347E39F037E0B3F85762A088
176661EC8FB1123A12157DE158671515E8FA0324852EFF0E5F624689BD1D5647
A80038419AABAC1F233E8A6B973648EBAD21D5F92139BDF11DEC505B1920E5B0
8CDFA19A3E01CE3A2143E7A9A40EAFFD714720506AD0A949D0A85D7764EBB311
66A29307F6343DCA5AE98766D699B6E927E8494ED12C35F6AE4CCC6B4D451E2C
65FF7DC04EF40B1690BA902B26EF0FEEA4D008B69E432C2B54D5CA04E5DBC61B
22BBEBDBA394B908DA2B7308A17B497CE7CA888BA8717853626F8FFE3B37172B
67A65F4894A78BC7DCE5396751724841DD385D4E42089FC38C3033DCDA518AB8
E4A92179B2E316C10E17EEEB978E51957475B5717AC1BB4AEDD87AD40DD35B18
0E21C8C2269AAA8389158A7675E0459FCAFC4AEF64B09E919155997990277E41
5BCB9C0DF2342B709FBCC991BF7A13A3A5BE34409C002DCF2B05C095A1C1566F
492BE91D3E606E4A83B0F6AADB39F36AC8B2513C364C054BBF7F35F0B627DDC5
FE2AA948AE738F38DE6E9C8E81AE5C0DA212DEFFA85E2C93AB0EB50C61583488
59690E918B1F43F4B7B7AD9AB673C87D6706E590AC0C65C7D792B49F53AEDC75
5475660D1AFEAB3580E315F57C2C8D2492246BDD86DB936D479ECEB5681AA303
1BEAF016845F0AB0AD49789380E1912B7ECBD1C137BF68BAE02943FAEF0D36E3
CF03D2E7C3145713CCC90D54FA5E0E7CC8DCA642CFE5A4A98D4AAD21394FF1F6
17FACCDFEEAB0A37F0052282AE1778E6965163A200CDAB98D323C10918F931D3
C555B5FE3AEB016EFB6EB11CFEA1E3EF6F42974E0BFBEE0F5CF7049B0DDE72B9
F10BF392EEB7EB8AED2B53A6F2E4D7BD004DD1920351A6A59B6E946FEB8F2BC2
24D1E7C801470254C5502AB9797B8CD0224FE1EA2AED9428C92993DD2C3848D6
55AAE8601E71562993AA3BB06C59DC9372B038A82F59FDD0AD40A42DAE32BFF6
737382CE9151EF2A4AFE4FA32112954C5B86EF7AE3D011A6EC13432AD104E1E5
88A434ED028A2F301EC9B98DC8CA86705A16F55D895A66DF69692F9DA83B1BBF
D7302CC4CF7E8DA48AE10F19464273ECAC6A6CB033D172EAED1AA2DC43E40AA8
23E706B59A366BC76F01E36BBB2B8842FA5714AFF9E5F519ADF4936D2D0C1BD2
945F14B9DB208D130BF5160D289564770D0A5EEBDC44B110CD5686E53931903B
DB6E01494A1E6E628244ECE50529E1F15174DF4AE9067EC4E67725672D654F32
9DE411FC4B41FA37916D6925540323301C441362556397053840C0109C325E58
20D3C9EF826C2CABEAD72FBA7F757259A5D32A90AD3A6AE94632209346563778
7D2C5D4E00A09F155BFDF971B5A4D0AC102C2E439E5D0087CED3DA9536E8E3F4
3FC7476E29B41AD3D6738F398882D84DB4F253934557C4E1D8CAE8DF90DC847C
8260D9A06D9CEE4499D8C2C46D33022CDD504E6DCD748D1F24E11B7818B6347A
AAA74FA8A5BC6949126038CD221BCC55C37620632553EEFE7F587C81C896F2C1
0D4575E5CB29FB0A23F9C53B79046EBAC468BFBDB5B9834EC15C047FDCB4E0CC
99AC20DC2E5192A4DC9EB1F79F2E67992DD013E75358392AFDB35318983A2C03
A2967EC7E8754C5AE41D324FDA33265B5800E4721133F3D8831697F7A4F802E7
6BE91554C7E8206C1608ABD57E5A6E99FCCD4E9D867A7520BCBFB60F8596FCDC
D85BDAB9EDEE5A57CEEDF7D8FFC0B384C5450E68DDC518F5DEC9963D8500CB57
D81CFED0D24998FEF28E49E7BBA32CFA12942CEA6EFBBCE1214B6D9D3104C43D
C8C81BE4EA320E3BC95C439EE69E12DB45A65DC61852339A38D7BC9D8529FD28
B57501911DB7A1C0A3AA55193D4601EC0BE3CB303E06CB7FBD1C694F39C1F8EC
E526BBD51C74F34B0DB7C5804355F951D86E0E4C62BFF030F461E614AC870A28
CE08ED797BAA3658B8AD58435B34B1D7D501B561D3E18EA35A7435A10F4DCAC9
6C9561A92FC09DBD65783669E6209BE7062DCA91768C2C9CB6EE2741F28F26C0
FE9BF00955FA377DFA6880F5D6F64FC185A3BC3BA692B2B71474C3E0205E0BBE
039E05E2833378762504BC587AAB3A6F5F1E07791446F9E9D18741DD7643D812
F47FD24038848D6697C68C519487D2C0D18EFC7788125101ADFDDA5711CF4DDD
77C9561F3682A81CCF9D2E54BDA112352814FB6FAB913472DAB4547A50C2C973
FD50538677F469C6352D659FA6F3703FC79A130291A8962DCCDBA5432CFA5205
0EF03C0F93AFF40954FF0AC78C389CE68CBF1557B048F8C9E46F213B789735F1
FCB2560AD582DB153772FA61136A0A5EF8DA1F487308EBC12D763FBD6503011A
BA247A0AF3051EE16C70A3D6471A1F8D2A1F257E423086707AD2510CDC4D4076
A5067970D22734B027285AFF2C77E0E26F3A52D5D05CA5AA9DBDFFC35B839933
0235BF13206A3DA1E00B44AEB6E685240E829C07F1B008DA0116634DF8773088
20B6EF8FE6D2DC18EB4C02C6BFCEC3E71E20E6D9854745DC97296235DB29CF0A
F628AC3C30B11F1580B25861169DB382F2181EC00A0208E0451F6B0CA3360AD9
9EB41A789FD4BBE40DF2F03232480D73FE00AF577494DEB989A4DA1DB50DABC0
C0F1EC4248CFF24B78C4B4DEAE6FA34E88426DC433391AB62250D7C4C702A0D4
5D4317FD911D4A47FA52E1221C072B8C983B8A83BF9E6D8821137BC38FBA8107
608BAFC9DB86B570FDE7E6248B6EDB4D15BE6B35AB339ABB48DD4E40E0EB6E14
9CCA7713C56628BECA4634F060085FE5EC3F1666585B4F1FA778D484AE8BBF57
A4FBF9C5D261A449C118DE8B1B9EDBF53FFD3048AF0E1DB32EDCD71B48CDBA04
9DAFE3EFBDA7DB0A8542A13927989ADB385BDB052206F0419C55E36B4BF295DB
A2903489ABB6B2EB9F977F3F4D690B31E8F6E083B8BD240FB7E694DCFE132CC1
F6E0EAE7BB26824CCDBC30106675EE08763A61D27684F240CC0EFB5043400409
2AEEB6A027BEA7EE7554248140D0CEB6EFA6CD05419D1F89B3B60737C546E9A0
1A591EA3B121B082110C686C4B3C3B8DDE1813A84E326E34C67DE72985041253
E761B95919FE284DF3EB31BCF8E2D748EF30C1AD484DB1134FA2CA4021C282B0
9B20BA9B4009B3DD6A5FE918CF319852E670ECDEF81609F12CEF6394D939D937
ED8FC8892EC369DA41DAB8861155A0B48DB7048568AD27673324289527D01989
A45B5543596F832A953F8F0CF61F30820F333AECCEA316CDE8A62D377AF3CE79
52B654A518B765BCD370455A98A239D58B788D47EF32CCEA3A27074E87ABC8F6
A233E02A715BB6E2465189FC47B9F74D7919D503A874EBBE8395A3F64AB35A92
C36AE66F30A2BE51C64DF2E82AF19552D766E652B80E10105FEC8DBF248320BC
F83A1DDB50E23253920D112AAB2211BD76572EC812F8E90B351B015320794A89
E84C34F32B465E20100B633933A576C6B0758D49F3155D448D505F73A5206EC3
AC69C48B50DDF960297D39DF2B708BEF605075EE16296AA8BC2A1119161B0C97
025B02598E2A483A2A41332ED27BD7BCE91BB83992C45710ED1D59C50642A0CC
152FF6D1C909CB4C01DD94075FE397D7BAF3405079A9EFE700DCA311A0ACA938
0919BB7EFCF84433ECDC98211003A755299F5D047CAFDD08829CE775C1F5D2A2
1749E611147950BDFDEFA7F8098A0F0581B16C51AC3CCB3B6F4C31F73C6233EB
98224973CD08AEE3EEA3D66C3C979812D32753AF1177739126415AF93E540BAB
65FB6F4D4974FD0D7067FA57B561F745A1E86953865D451F5B00287188DF38CF
6194AF036EB3090451311D2E0315E7E13A02470DE511FD6F899938CEE7A96580
7EA75DE120EE0E87D46042CD991A055D41BC77DA4210A8D394ABA1B3FF6B4CA0
2F868921AF5438A780AA5094B9437176290ED2FA26DDC2402AD389465862718B
6186BB2CF4B290AF5FF2F763249BFACA0785AA219F85DC4E78C139FF3A8FB1B9
17106DE9470F037FDD15E6113A181DCB5104577F675FB5E6E0F98D758E1F5808
0B91D193781C39D765EAF7C1AFB9CA97C357ABD25D6B8DCB78E81FB5B8D5C702
10D8D2698E18525BEA63320AFC3D76ED738BD5395DCD55BF69A5DD1E06D19E0E
44804AB992686370EB8BD3975DC1EA935AE0DE2D8839376A78D70FA44F1974AB
A413D5B6BD56EFD9800F98038B815C5D1EA498A138CD5AED408DA17E8D1F0D61
5CBD7F3E302E4430D8AF79983D5176177C68244A2EBBB9310ACA9EF05193524C
4E85AAA0DDF28AAE9526C39853101B9461F4C1862A4534F300477C5E40B8B7D3
3B55839F745424D22BA34F1BA11FC742A17F3089138F9F262633B88CBA65ABDB
DDD8DB22470CC69A574E85513A94BE894217DECA2F18BF6FA92CFB8D56E51743
4F254274D012BC8E21B5277ACC63EB23D7C8349E4D174FD165CE4103019F38D5
451344CF5637BBAE79A4A334A8D815FAA4FE47E401B22682269B7D393B8B4741
1ADA345FB5F045225C94BB5642ACBB24B738DEB7E4365159428C13E4D090E308
86D8F1CE06E367580D62A1A521EEB55D6E64436B8BB1659AD76F75EAF78BD044
8C0A07F7FF672FF7CE4557E2E105DABE212A040FCA30A5BBFF91BB4E32ECF145
5DBC3E902F2AC3ED51A3B3693678C1F67124B5CF48327FBA645C9485D04E301A
710BFCE1C3E5BCE6D4AF2E318F2058F294D236578CFFBE68A636C896F08AD747
1F3A6AE580F7C454CD775D439D8A073E644C2A432E1514664240BA7C78226D4E
8ECC5B15EEB9043681D7BAC7CFBD831106C2C195D22E11BFFA2ECF9716BE9B78
D0F4DD3B3B23D69A58E2C82C1981EB8E1A179D5CE161651614384D7F83214B97
5BD1F082D7E51304DAD13280106156AA2D5B790AFDEFFD04B04AB34698668973
6224120CC5E432226FBD4681AFB83A9E85CE3FEC6288E4F97D9C29E03AE381D3
4ACDBB00E3CE315A4D61B392D5FAA6A668B2585A3D6006683222F07BB1F0706A
7CD804C5B83051BC46076F01E2D91BA27FAF9AB7A3B7FF5A348681AA246047CA
29CA6B442FEADE254C7582DD28296FBCB5FEEBABCD6C455A139D565F8CE5847F
76FFE8BDEF7E850602B6815EBCF3E19A3AD3094F5C09C98B36211CC88F0595D6
BE89E46F5232B759A4516C6C2DAEFEAB9F24EBA197C783B2B6DAD6D6D9CD9C8E
87EEFB5887F199C29064CBC0503FA4BCED3641265F815F8E6CC80D916F06395B
B9C8ECAE542B030A5E40CE0811225968F8A0A4270372FCFF69A5BE0D06021F93
2030C47C0B9779EAE12A0EBAE828FADD77BFC2ECDC1E562DAF56603982A6FC5A
51E7F50385C4A11076467D5A11AB8455BCB97E05C1E12F9ABF4E0DDC231A02CD
D4EC14DE67DCD13EC7D88A4CBEFE5BD31C5B14B003F38EA1D7463ED69CA5179C
594986C30DCAB511686A2C699385B3CD763CA38BA2DC3D574FB8F5C503C55B5C
9E34E3DABE9FEF9D9FAC64FB0C77BE269DE3B2C0C46E879C36143840EC16F484
D274B7AA7709AF2B990D03584AFE558F0C647A6C3DC6693EE8E6192E8598D137
46B031AB6DB7538DDFCE97D29DE436D6B0129745977065519D41FEA05DE277A2
B68657946B3FFAEBF3970D6180CE16EBE8021E7A49B60C3A21FFBA6D5301445B
8B5EA3B5FFD7CB15E2DFD2F64F868385646B5CED0623606D46F4B4E8EEF169B7
85AB38BC2281332CF1D679F5BC882E15EA2D1720BC5258423F3393939A0EF5F1
3443A9150F35AAC5623BCBAF6CC5D24FCAE8B36D06B51FDFD86A22BE594113A0
0F62F7A578CEB65DD3B94BEC96107E64F621BE09010CB6F43790AC6FA578409F
D6B64BF03A46E17307A879D563BDF6745088B281E1D4193954E87405F8A3441B
D4D94A1A3FEE729288CE673D94DD4A12913ECF9F9DED12CA0A3B389CE279CF31
F8B5061C0CBC620D7CCAA0E331EB7AB0AF62CC72DA9565077533ED98A07018AD
82DE63434A9CDC1F813C25E9CF217F7B9B18573B6CBD958A80FA14221F9ACC5E
27F5D5AF3CCA4A47F78B4368FC5B9567CA5876B77945E63A784541FE0DF9146E
08836B3CF6AB7DD202746AF5C49C3EE1D5137F787D92AE8801D352D3F80509D1
0A4642C2844B75D062880309987DFE73C7357DF3C02C1E2948D74BA02BF23DF5
2B4D11FAC152CC6A4B2E4116C45C4A896469D83A6A168B34B0F1FF61A2D99F8C
01DF70CC72C9358686071FF45FF489BCA0F4BAA4D5D965566DA9774ABEAA8088
1D2272C1B9691FB5D5274499BC130440E6188F7FDBE2A9AD81F7002A27F2EDE3
459E49C277E1D38AB23412E7634D9B961E4D5E2928FCD08612B8EB15C2E3874C
DD4ED921463C0A12389EC9A25555EF5E6ED124C501281A34BBC6A4F3702C5279
D4C414D7511069F6882D91085B4E047C7F92AF7461811CDA6D6215BE2A5C08DF
BCA4B2CB226B7B79D0C98F360AA384A8CDF19E0A34E294B3EE43660E70D22D1F
9F4F865B7E3D72C20A2805BDA8EC83116100D776044F91CB01CA73C63CB786E4
90448823A4D524A0D895539C05B4FFB0432DF191F6054666D9ECB58F8095D33B
8396AE9B26342CC1D2A2831F40E4C2811D37C9029692DF8E94F6FE39474EE13A
ED35225FC498CC9E2C9F57EF881D478600C807DDC7F0A78F2B8C4B94348E7ED9
62708CF7AFCE68CF821605ABD6F4A7AD14D52C8ADDF2829CC78660199E665BDC
F1E6EA2D36F1FF6B6816C5B0312BB90A50F932A3247E4386A4BBA011C50445F9
2A42F13233346D21A839583F9FCDC5101C3C7C3BB39FB24F9C16AF9C4EFEE51E
F298B5F603558FB109278BCECF4B659DBABB4AC20EB75E7EF41A4ACBE1B65BA9
E30013A0C6F2804ABD8B60BDF036C8391A331C47A1E8E4DF661329FC2710FF62
DDBCF951C4868E9E75E4D15D0E8C5B0F468202F91976A5D9C8BDB55140A78428
444275706266E620FBBF4BE80B2F496F0CED0AF7B82F2D852601C07CE9AA6921
F12872A0D18DF926B5C75D43A1EB5BA0431C918A879828150795CF2BA78D4DAA
86BED7274A1E87749F6B1B05B6CD5047BF5B6F6AD0DDC68AA4496B318283B80A
C61EDF21B109D7DC8DDB8FEC3729CB969639BF2C227E8BFB63807FC36AB88C65
65267B1A8F30C66C22BA495F96F4ECD23EDFF11182E78DF33ECFD1FF296038CB
A5719C17A44F9B5F4E39D600BD47DD6F9D30BF27F857FFFC90C7BF80F1363A04
FABAF3B8221769E060E6EB754F8E89B075418D032D7BD972EDF08B582AE0966D
5DD6FD949F99FC4AEABB777A18648EE307C8BF13998C676F5633D42863F0263E
DD8FCDF7AD1975483DD8451FE4FF72E37B03CEF0E2DA4C842ACF78F864B673EF
FDF8F0815D7853C6F61278341A10182865623A369731F5B95646684EBF41E264
D943C1929141E59C2CEFDE2D57D0AC1341F032BCBA162134FC3DADB6FE91C144
B05593FA8FBE53A16D11825E06177BE84F2C50641FCA24662FF0B6783E357BF2
DB29034B3007E7EE680FD89939279A093CEA32F30D8B9715C091CAF8D0B9822C
7E1BE1F52347C6E3CF2FBDA627C06AAC52F08DB31D30103C7FF4D1B05DA751B6
C9A85920A1D2428155925F1879D1103036B695EDB12D5762D8075F69A1458298
628CCA17645EC1167969BCDDEBF9C837634AE662E06B49F6C31DA3CAB38EA818
991CA074C513BDD76497FD980277505C2D52F322CC455711C0147CB76F4723BB
02264CC1539670ED2A2073826941E9AAD904A05CDB5B692AF723C9894D177FBB
F1DA7D23111F9CE050A46D17DA14AF6335D7C8840351C3BD6136F0361F26BD31
45C75C837A8E63F5AFDBCE03E88F208A05B41A2507A6E6908560B67CB5E22C79
E8CF744F0A8735C3247550398E2A60F51C61021CD28CED6DA01287AC96E605DC
58670265FC8FAC57BA530330233066FCBA83EE6C45350AA213AD5635DFD70363
A4B86A2F487BB059DD7A3BD1CE641C8300C59702803467F02786B0C20CD61091
CA81D8B0118E50A9DAB324401EB1EC420A711AA2C73CA4D3738F09005FA73E7A
61F418EFA673A641E499437DD79826FA99B797CE56603FD15C8E490FF120C6DB
AE75E3AA5B8D06A527BA805C4373096C72FF867ADEC79EF58EE77CC9AEEB43F8
04882FCD3CBABB682FE69863D29863BC86FF201FAFEFEF9A8DE6A04A0110DE31
6A16B9A8A6E831396813D3F552ABE92FD56D9A2D450A755AE435B474352A65C0
756F8074F5E6A68654E1695F8958AE4D69E5076CE4300137B898F7554B874AAD
2B92245CCA4AFDA80D1C7AA14422355E59AD8FF6D402754F0A59F7B466741F35
9B651D48580476EAE766420B9C6EF72F6CA9EE71D716A24400838029B604C060
8395A9C2BA9A03945E029527E917F17E50218E2F1C653843A05DCE23E9D6C133
9D085BF92634D1C1E687B9ABBFC82C68A2D816A3DCD667B80FB1086D99865BF0
4ABA445FF958E4CA098C9D022FF49744F3F1DC9D2DD21B60115A395877B1E42F
8AAEEB135141C89D859B13BB8964D3312AFB91898526FC628BD2AA4BE6827BEC
6BF5CDFAAF3113D089D7C85E5859F27B8DC4C5D8621E50FBAD53C403EC4BCD0B
75DF8008633BCACB1FF8C079CBAE6C4C9F01745475B1E3429B7F0736227E9211
3B0FD5F2EC93227746654ED73ED27B057EDD4280D406B67A0BD081B1C3243248
5155F92D59DD66907ADFA1F18B2F05BA7FDB864CFE04BD7CE6070FC5EF576B1D
E985AAA4723AFCDAC01BA256DE73FC8BE63397C8EA891CD41DEC3C2FC4CDA713
0CBD47865E2E2970795EE44D7022750AE5D88D4E27E5EDFBCEC126CD722AADA6
DB8732764E3F62BBFBF36CA5654039F3BFDA83A6CD672E3FE980F109D69328D9
6F2191AEB4D4ED70395961900B71104E33D0DFBC5C1783618B011F86C9490704
010EE379908BC6DB626CEFC459AEE958BF6F00FAAA0421EBA206AF5CA28A4629
49821305F52F428048F0AAB4D1B588D2612B00AF050A5A1A72EA11EA272C5C8B
83FF8F16ED7860E2AC62A9DF932280BC552ECD04E2C33B76A0F6172098AA77F2
D3A0AC5EFFB3126DE50C70065D2A42364D5D18B9C2E71F54D650098C5B7DED63
743F272E00F8860E60AFB317B6FEDA920DABD2DE584E5AA557D8472935F85E54
D12A39E413955F0DD137D42B65BD9AD563ADC7E1A2C371F6AA46C0D98A81B0C0
C4F5D74DA957171B12AF2E7528DC47E64B4E57F282A1DE2049B163A4288A69ED
6EDE20CE2C90099F97D70AF54E554A8F28FDAC53748FF1ADF62CB4DDF16634BA
0704A37BE9179EDA653BCA0422BFE9B410E419D578FD3B4F48133328014035CA
46D6A6DA0E1F756F2A7D77A990393CA5CBCA996BE2E5186292AE629787CAADEF
27878C1B92C19CDFB8240F2FB9A930E7E51F46B9A96FB08FD0F3114A13C2A8CB
BE519A8F57C66923C5AA9575819DDF023FF06A5F3B1A51AE4850C6FDD76998C7
AC6FB71C40F8EECDA336259BA0D0151DCB3F2953F9FE62A9FA3A22300877CEF3
45E6A7DF0D81E0B7E351CBFD7909FC251378DEC6CAC1670457E00E1DB009191C
2CE27EFE633C28A2F142B8069EA0BA7A8CE3B177F3E7F7840BB82101C19895AD
CD9C269AD747CBE7CA39E9CC1C486531C69E8D6D3BBA2860F25AAD9DC341467C
20172EC804AA0C6670967F6C3C2A7310CCC64AB48219EF16ED5D9A010ADDBDAD
28D36FCAADE15A574DE45CCD56958D31554F4EA2D4B57ED13A8A07C06F3A5AA5
8030660AD66EA65B0C82EFC57F42E20CC880EB0682B9BB414C8B6DBD64BDF181
EFC6631175E77D6B6FA4121E1ED7FE251E57E7A108FE694A8C7A1FA5C03B6E07
436B6560B4D1106F5D819F414AC0A8FA890D1B5C80B2844CD27973C42DA421D1
4A0B49DEDFA9B15A961EB62924F76ACBE7D79698068F254ED1A91F7031FA0B82
8C89F0402B564834FABAB54EE46C97533DE11EEE3B9FE2203DC6C75B21680EC9
6516FF99B484797CA92E65EAA84B8478A465C06FEFE1465EA9D63C064A8F5957
283CD9698B571A0239BF0725925E58EB63AB2045E56C4B20C4A5320055F8EAF1
EC52D7D222DB53543E61AF31D100DB3EA0C3728F2BD1BB38692995EE0690A278
917A0BE8BF278B612A84F082AC1F6F8AE4A0BDC673CEC32191756A9E98F48776
564230ACB531A076037755496C3DF9CBE5B8211CA8E1F76B2279887742EE60A9
D67E9BD70A8BE51524F36531172BF2C600A6F211107A589D047118BF18C37230
24E23AAF6E398C839ED8D858AD4C773175799B685B89D4019FFA9CBCCE3FD4E9
C75A824F521C69F2786AD0B68F19B4D2F5554E0BAA2290B2082F996026ADC420
C676AD5973981CD2BCF947E22EA79D2C8F57868E2AAB61A3C1D0E82C27D9A593
0533FFBFA7D3873F8ACB0692B310ACA0D9C58F65ABE2703BB52ECACFCE5B1A7E
46E3F2ADACDB66D5834D6E1B63D9A188961A3A75B1638F4C12EE82A6060FB242
B58F12C792CE24D1E84C8CE0F5FEAEDAA325B6EF95975819549C86332833AE6F
ABD7868A1AA52DAC77F4DD5995DBCACFBF885FCBA160DD6CE6A7A490C010EE71
8B5FE456A79A38623745FC7BC778B3765D421C915FD4BBB8099660B2CDB57999
72AB6ABCD46FD5E647C809A0B0230F54DCD8AA3CCE6DC74199B5AC793F7177BD
0E8D8D49798F63224FDA1E2B53192E3BCE538F58048FA6B3C36BD95CBD6A63F3
CB3D55421CF3C996993FF175FD6272B5B59E416AD654E7057B937C6F1531F3CE
EC2B8BEB557F2029FE2439769D67DEBDC8AD8C861E90E5322B302C31E60E5F86
52CDAC1C07FB4D3CF9F916F91539507F9625415B084F754454ACBF44DCF4961F
68DBB0644C84AF7FE1A99D03F851BF811AAE848B8F7F77D5075DEE3BCB0EF177
EC0C2D3AAD49BD2A0BF511A722FDCCD191E3A064589CD1AF7D05FAB4DA62F0C1
C6E3D9A9FA3B7E0C5F70AB4E3C9DFF0D2BB80CB291F8E334678484A16F98FCDA
BA745D35659462E92935F859422E93ABBCA911103A9C205C00D78E6E21B6D372
2008F40245D72882BD9818EFC05BD25D51283D153D8785DD1AD632A308872F91
5940C61989DC798351E5887C989E252F50035966E052526B2E3741E710238170
6FAF2CF674AD2CF636B21E0C8F56D90B90C3F3C665E41CBBD9BE223629132D9D
77E51A15077A8CE5BD7B6F4912D8BF877A487B252B5C881356247C321C91DA2E
F7558D272A4646327AFCA6D3D24EEC55B170A73D47EAE72AF8A8482D766DBCE0
DDB5AD4B2EDDC2402AD389465862718B6186BB2CF4B290AF5D12C103CC9D71DA
601D5CC37B484DE55BC25BBBB53FF5F77BC8A181B3F44ED7BD070FDF39E6B052
58DAEEB7490526D60B7E1633F36B0D94CB7766E8A5AAA2CEDFA0BA35634AAD88
699BBDC9D3FE09EDE49A4B4785A6F1FBAC364B1C37841C114A889F2AB95CBC4E
E87640886D955366A8D9214BC7F3D1E370B1330D811FA76A32154D39CC15FE9B
BB484DDA6371DFFA6222F88F0886C7F8848E9327808401C9F67679D26D080195
21E472CCDAE5AE3841D5C44D233E20BBCD42F78C46D62EC4BE01C5454E0321DE
C66232477D1F39A73F7CCD64404AC251E82C6F8DAA7B8CF52F4B16916E28A582
57322FC8F59A6B5E67035315AF79A4821E48802F50EAC63D9917C10E24B9304C
2046FF3F4093CC6E13B87084E461E23A4D6862F0EEA280908088C67346F1C231
70D0555FE7E966F8BEEA7D5042DA9A2B2158B7FF166C507B49AAF6FA4A71C746
83F2BABFBA1EA60064C5EF7B5FA8C516B07DA395BCD78139D4DB61803D251445
6D6EC34CA66C04BFA09E8706E8C9442D79913E3561C72800157712E85E97349F
AC7329FEEF53760A2E8F726DCF297BECFB7A93B4B422089200AAFFFB9E515D76
7D44083E38BD7E8696D363ACEC5C7B9EAD8A4B61F1435B83062809E10D36AF5A
15D4C162357C5ACDEBD915D7E58D777D53156CB5D90105651F3CD4CB93746997
36BABFACACD94FEE02EA7EDB7DD9DC1B2561245F0EE0FF1D61A3392B13C2BAA4
F2EBC705FD27CD6D2025CC41A728EBA6AA858A62BA34015E2E2F851AF557CD34
8225F8CAF3D67B0C1CEE2B4815FADC64B543BFCC1024D4953444B29D7CB00456
0D0685F73E8772FDDAB8744F5460C89EBDDDED2D74AE20D4B29604D021B8CB1F
3B9EEB3841A77B4F636BC2CCC320100FDBDC187A480D26AACDCC0DC5B4F3268A
8831F3391A7B2A17E1A8397AD34E18F66734602C39047FD0BAFA91D2389F1C2E
3B262E505246BDF7C38D8480A71A9FCF98F4F9501DCF69FCDE2C7428C656F834
9C249464D3D477C052773C2829755F138AEF12C035039A8AA12C719C0339F766
BE627551185345AC7BBA575CFE7F484C71714FCE652FA38CDFCDBE25EE9C31AE
54D8964596F15509C0E96F32AB08B88BD82F91BFA85D103528A79957F00BF884
9A73B9D49874E6CFDA0FE48EBE9CBE849A02868BC24DD755FFE818E62A0E77C2
972286F2B152BE1F52E47D6BDD0DCD828F689C74C6934012F72CB5255DE620C0
D7F00FE39A5A22133883CD0BFB75B710119768A161F8C276614552655D1032F2
0C9AAA9C14A35280EAFE1FCB0328B9C4263703BD6CF51CAFE3F1E75D12229EF8
516D9F749879287F2FEF8352BA530330233066FCBA83EE6C45350AA213AD5635
D93BFACA979043CC0A9796E0080E45D33C5A4B75DA316026D08B96E1E4A91089
C233532E8B068DC248F98C0672B0B041209BF77FCCB5ABDC05E978BFAE410EAD
0B66784B4D839AF3D5F4DA9A0824C92C7757BAD964F6AE9BD12ED0822007395A
5D78C698C7366C1C453FD7CC6E94C29F5CE7DC0912EAC8754AE29EAE5AC87616
C0C26855C03BED8C24AB9157BBA1DA686CF52E982FDA7C9EFCDC6FBF795B702F
AC227FD4BA7F3C8EC1D91F691B46FD11A61B34B3D504EE78BE77AB036D3DF824
9C4B1B0A47FD3E1A9E41FC34FEFB523CD77C171DC673154B9C531003F34EBAD7
B1080089A09EF7487C5B23731B3E3C83CA1929AE4B516C94E1B466D72162EB2B
BC2E9E121729E403E206771722FD55C474A37022FAD1348169A0DAAD30374D30
6C924B43BF6CE43C9140AA5F8FE895E4093068661F6CCECACA5E2D35E33B794F
D84C274A4D9C2643EBEC14212C82E58BCB9BE047B377F3257BCD12030D71140A
E730243D3C8C26B70C9DA4983601072BE845DA623DF35285234C865573C3D6A9
EF2F678184865BC49CDF6F54B3E262AEF85056DED3626ADFB007B1E406F4F416
8DFFB79D2B726E1487A6B1B4871A83DD3058E645DA10A428102E53BB4241E8C2
293947D17AC2338EAA75CC72516F8D05CE97D6AE51B8EE6A26F358B803419C10
16875C2FC22B8E26DD3751C6FB8E2F2860942F2C184DCB96E253D3BCD9DFF5DC
38E426811BE86A560B49BA721CD63D78543DA85E9B8256EEC2D21A8441536789
E87ABC36A6AB32018FC4679EE1D81DC3E988A7D9BB43AB6E6B63E503BCAB1F47
D767D4558876E85ABB0B8396FEE0C3327CFFEB9E7462FAFDBE73F8F6F99550EA
B6973C075EA14B3059FC8B08F7B77C47E941C662450EDB414B01D0395B48CB12
0ACE1DE39663F2876B13FFA5B6BDE7BC6408A9C8216B747C8875D901C9EFEBFE
0078093EA47D0DA522E23F0B5DC23CCF67CA8BF1B1274494E363BF0890FF5C1F
B93D93EC4E818B2F64AA3D78C308C290FEECB6BFDFFBCB96BFB5D9C27C58AA43
2F300714BED0094A83839F08E098CAD24CEFEC85AD6FEE1DC312F6D9F3B9309B
62AF4AD6D90BF0054F72ED0CA0451E5D8A813AD6697E53A43ACACFD85F422BF5
995D9097EB61500A872F31A131A36913798A9C95C58A97DEC9CFCD7E12B1206A
AB94B430C7767662E7E0FE022796E62FB435868B8E06FFADFC82A8186B6A6579
2B16720DAEAC440C578B2E507397E65DA76D29CCD8F7E31EA89A855F20E5D15D
D4620EE569599B09C345ABE590232CD6C8E17FFC724B0190424C7B39DB0B5BFB
D2A97B4D2CB1B019FC4EA512311094E29D5FBAEBC5C4F5D509D9C3917237D7D9
A9A9E39661AC586B9FD3210C71E9EFA7845A3A760A507B3D3ABC525B35930B76
C45F0E4927B5D413A21080DCFDFED080F13E5F04E6DA5EF049C399BB8E5B2681
3C6054B0EFD355444F1EFF5105231708623163ED2DB636BA33208269330C24A4
E66A8F32FEA362D83933ACA7B1AE394824C03E2B60F67EABE2DB6D9AA6689BBE
293616A6176B8BD6BC6579118FC935C6C62E9CF1599E25A83C693812B2CC6054
CD1C5ACE4480258EF4843C39EDD64D59FD94E698D0A65005A64AA97E8827E0DF
689791A637409A58A274BBA0351E4D818BDC3BD70EB627D06BB45DA78C776FB0
386158298CC21B26236D8488CE4EC4CA405368ADAF00BB2C95BA01B2FE118595
C0B230144E5805C3362F459B92E5EDE493E781BC69FFA69B14BBD009A0C0F023
D4D6706CCC05450EC316BF6A36F4664A3DE9436CB7839559D98C723976A80CD2
DD9F52E223FD098660B344B76A7FE3FC83B58E8DFE31881D85C822D90730ABBD
DC0F2CF53AC189CA36649F77824562A0E86E19FB8D49646A4C3BC15E371995B6
6E28CECDF3CBB46E284416D53C0A0FB5538245F2C014C75EF9B6230D3123380A
ADC1DCD8BD9144CC9C39DFCE204ED0A53C6BA6B301D3F42EEDB6BED24CEA54F2
AE1620FC08BFD08FA0800DCC0592D879092830CE4255C80BB6031EF5BA899063
3918F5A211CC9414A94BE79E294A19B54F35AD3A5788C3B5485151F4DEAB7461
609D1840D35F044DD7D1A1FB182766565B59F1021509A8EEF2A49C2B23DD184A
0643CF7397EC2FD1A3676A2E5FA085F300ED282095B90D45EA22620C2FA7D752
1D7D4B3FC7A2E7C7CB2179C428025E953E8AF7C9E4428FA690CDAF68EE0A7B58
F0B3A71010CE8BC3CBC4698763770EDBD05720BA70E63BB928977EEAD4E7CE6A
F5644250CAB983A6E846336FE0F152908B4D4E14C0E76CEE3C5B8B6C8186F544
44F467C36F9AC3EBCB65C2291B9DD91661821331471B02F03C0CD7781B446102
3CA9B728B39E500E10FD9BBBA1F76ED06C85C5B8042D50FD4A7194CCAAE06FB2
036F2041CB837A1F9DA29079555C100265D82C9C1C4E7CCFC54A94F447A97175
E18373A7A108C2925DEC6604750EEE7E8463FFF7B0A03F7B5931AB2418F069ED
517C5C9CB0CAD5FE88FF780E752C4FD8E749DBA0FFB2CC0C7462E42758C78552
E5B1B77418EE03F4BBDB2F7C4318B76970DFB390317A8F1B0971C84FBB39F5FB
23526A03BAADF0D9950A195F64FD3209C6D47B46B7708F85595017495FC08007
61A6A974597A6591BB772B7C2854732B9EA7D0ADB4B19A95CC2AFE686E55D88E
47257C1FE2B8D432181E239065E32B17AEB326540207E4A52B755FB6D1060ACF
1112FA31D10565B2B293E7A6C09E2E8FB9083C38E0CDBC99204AA6AD1309BC56
68A2A524C6D1C180BED2984564AF660830F40F5E27E6D5BE96DA47CE4FBB1B02
A9F69CB191E2F8FCFF6FE23A3ABC8D6EE1377519AACE7E1FC3DE57410DA12E70
7F36C2DD237344E593A300D6913F9101D522DA03412A6C4C6B34EEA836994AA1
76FCC28AC760007A333E41E6D0E62CDA7F4B100C6F627951A20AB170F8254061
779E767E4CD18A44A4D916C8E046336FE0F152908B4D4E14C0E76CEE3C5B8B6C
81841AB85C1904A00E780E2B0EFDBF5EF51C5C3F8184C691E0AA0CB0ACC846F9
D65187171002AC31193E578D72960FBD799DBBA44556E34A99F2D9ADB9FC1A3F
2A4497150D83C684F7A17F8ED87A4177E1103949CD12715E4B668E8FCAE17B8C
982B8395B1F8ED435BE07E5CFC49BF3EC9EBEDA67F83FA8F1322A68097441DA3
511D8FE63443DDDF451636E19BC9CEA795AF21EF3258E5238D15F94F33FA62F8
BBA320A942EDBB45A07A97A220217A257157ADE856783857077CCD79A9DE2B73
A934084B0429E54E088CB367331B05EFAD2795D667D3E495794B2EE280CFA265
BC8048C20DCB99FD2BAE6853877991059EA435B41AF4FBB1CAF8E7A179628E59
02565EE38D5F437D050A4BA5A856B4A806FB8CFDC77DA03B4BD6210B8B4298D0
6D9154EA8C28BC52DFF62714BBB110A4121E1ED7F873449B22937E48C950802C
C7B24EE992477BDAE8844B35761664EC5561996C797412E8EB7FE362AE5F0C08
62C3D42083040BF71A9A9B369976055E2BD80245F249E81FBEBA24101CC96B6E
C14A211B85FD78B94FF98D6283BB8944F3BCE71C6E4D3DE65D88CA60D30F9BEA
B0C838D10072520647FA07B7B6A0D06F3C5A9923AA703FDE11085EB99410D0BB
68B865F3E4BB7CF3CD00DA8E491D355836498D8F26C915CBF178D2DF9A4CD59E
657CA1CD0A9048AEF39EB9E7FD8FDCB3FC09DEE424801F24BCB7381A0D33AF39
B9107D1CAEB1FD3F4872FC42C5FC6E75B18697FF6577CCD7ABB62ADC980A110C
9A149E416C2B25A1DB131905861A0B2531B522ED3183AA810F1ABF9184F7765C
5C0A5984D7B936ADE2C72B2F38431662D39CCACCA34E8FB7A57FC793C4B48C66
7D28C6050B8CADFECAC1191EEE5356E2F7BFCFBEE219B77E2C70D9AB29A0991D
83972DECD70AA864E70165263521E237CF8B319C4365529345773CC4AD5A66FC
0A1B4F6645BEDFEADB446D4B4EEEC74E7C89EEFA26499C65FD9D98D320AD3C35
9BA3887EE95E13FF091EA00A0AF3EDF15BBFFC526FDAC4D0D8CF3D8048F11742
1440E0B4AE6FBE9166A65FBEC96076B8108952
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman6-Regular
%!PS-AdobeFont-1.0: LMRoman6-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman6-Regular known{/LMRoman6-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman6-Regular)readonly def
/FamilyName(LMRoman6)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -88 def
/UnderlineThickness 31 def
end readonly def
/FontName /LMRoman6-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-515 -298 1647 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF386043BC0B77B47F761487099
F3EE8B97E5F18DCAE51B94317C8F4DECC130CEC55EE16A19C81D4D1668127C7B
86C63787AA273CDA19F2DCE459A6BDCED90E3C60B9F7DA6A0715D2D12F8B805A
5203A948442C2E5796D5CD20544385DB0893AB62040E1E7F33167592F1944E2A
AF140EB52E80AC868A5E53B529B98C77E46244F0B9D46A2FBA3E0040CF5A1D5B
8CF20FDE7C876B9AF4A5F6798ED83E56E985DC30EE5A3B2D5EA30F640DA2DB67
1783F69DA070954570F579C316046D8A6B7EEEBAC73F338A8B7D40470B4468D8
CD9BA8B731E8581C69A41FE873D6ECF58F4962AB44706743806BDB909276EE0E
99E10A530147C9C14638387F89B169CCEA629DE9AEBC010589EE04588A992E08
30B37AB3DF923029B8F6BF19C1C728797AEB5C0F2044753BA4C7D1437E2B9B1B
3DAE6A15672EF1F238D1AB8F873DBF5264D704FB19F5C1CFA0E5168002B3741F
0134E79412F5B0AFABBF3069460C10225E6F7BADE64F07074C9D594F6F7514CA
5B8A7750FAF214600FB248AD5E8D9FF734EE44CA79A585268A06C6FD4E294257
0F814FAE80C1A7776ACFE85D3159ED173F8C4EF0456171564E9A2E1C26464408
16B747D137D37316A340FB72BC005029A06DF8BA48E9AACDF832BA2745C448E7
9225CE3A522B46E18F5733663105D638E571758C9E8D9121EE819E4A12676318
11F0C568B81E1502A5D168139F197F7A71FE60CCB05063C6D9D8A0048E60F9C9
5CFFF69AFB554B3534796218449D2BB97FE15BD1A6FF104BF67F8EBA5C3C39B0
24ADAC78AC4FF61D5847F0A110651116B7DD14A3129ABB2840FCA3727241C8C4
C3AB23EBE6039BABFC0AC5475A644AC8EF343B2C8BE0428AC71A76D0DAD12CB9
B06D3122A737C3157733965D448D505F73A5206D01A9BE7EF0EF6B0BC1B16174
95AA0382A6CE823431E43B9F000BE2E075BA5DC715D0339BC3114723F4B3A4AA
8EED31D7AC19EC755071FB29AC24467CB6ADAEF85C31BE5BB7224525D15D0FFA
4E22B5A0CB4FC82C4BB848D07EDE0C151CB8A8CB6EA47F3B1F8BB5B13D7B90A4
F95E5407FFA1D391A7728D51B18A0E1DDB27E711C889B7D5D466B82F3F53CE91
6B65496DF9FE3E1C4CA174425B63C90BB1162AF602DA2D5D4F3A3328392B5F3F
38E978BDF45C9B464B9DA1290584B298711CB71772990B6D3A86FB04163ED364
91F24D7C3D634B25C2CFB92154C076B263342E8A6977987E6EFB3DD2AF1E6B42
AB01B45966A9F6C2FDA093CC4A456136B6AD2D6AEA9955D9F5B0C3E791528069
D2131BE1C7C43CB9DA21E1B4BE829E3D5C3D4D773182176A93892B3360AA39A5
E7FDB9D0A5B7C5A4AAF583DF1E93211411DC7691EDD20DAF7877F9B2740CD60A
8AC9404B71839F9A6F621F2D21847A702489B28CF62768651196F757C6FD641B
74BF8864CC28D7AAD8EA3FBBBB407E0ACC52AD3833A612643316CB420AF3DB29
F008BA36A2EF0180D95B8A5DAC624EFFE6B1E94F1DB5B3628E247CF84AA1D0FE
0D47AD8E7849C5C3EF1EBE917BB0AE076FBBFA04C041A0E29BAC5703A83039CA
96985A76B61D30AAC8F75EA67125C72A4E324619D1EFF42E23907A561105F86A
9C9602A5308D897A052CA1F6A18D7C66805E539CDAB99F4897713982986AC73C
DEB3B4766714F14AB9A908E48303B8902D1DAE6A674D9909398E1F23F35A5602
5DDC8BA582214CBAD469249AF698FDFB7B4EF64B20C24ADEAAB40D5907656CAE
0CA0780B27C5D6CE35E7D5460EF05B1A5136CF2C1DDEB46F7560809DF7154DE4
38CC9B047350D4E144978CB3DDB79C3F45CD82E6891224A5614BF4EF1DD2FD31
DDEFFE8162A878270D2FBEE37AA230330D81EFC166DFD53207B8F2098A92C807
BEFC56908B359302BDFBCBA4C379A33C5E7EBA96669D80EE6F3E05905CCA51B2
6403A2F70903410B4C7EE09941F9ED40BDCDAFC20C8BE740A27A9AA8A21F616E
C20C91834AAC2A80D5684C5229E8A44E42451F694443F3C4E2FC9541C8344D35
777173ECAC4D16FD02C19C53EA68FDE62754AEB1E15AFF67186C96E982428FE4
9289726FC97AB7CCA4EDCED29E00021831DDAB3D794484C4A85B8F0097DEE9B8
406CD529CF49A29030D28090CA803D774C5E1D01D98749DB98F222CD610262EF
74F4A0A389F9BD1A4076CCFA85D117825A1595466DD4A1542B74D7A7D21A0483
A3ED3F80BAD4BEEB39C3C16C6C9C2CE8EC07EF399A4E2DE8DF3B36DB44DA46BB
19EA1EAF0425B8B8CCAAFCF568BF66A41F3B3AB8D7E33C4FEDDD970231A28228
E55E3F16D464B4FCA258AD32BD99B92E6E63BC6D9C4E661EA30107B2945D98E8
E9B81457552073B261087727DA51CFF0E36D2F6F445CB662BD8BCC4CDB877030
ACD3CBFE8B51B341628505C51D9D58A1892191F649B2BC583D15080EDA86B614
EFF5AC56F4B056AAFCF66BD9DCB19A5853273485E72F65B9817B90D49C546F4A
C7FCA094F32499C0F8AA33D2C7D002838485FBCB7641550C829B842802A4139B
CD07D076306A270CA7DA81F744079461180436BC926F08D69F8EC57C81F2F662
252C0709FC2C8B228CBA5632C5C642A5E89D476FD2FC56FCDBA6777B31BFB424
421ED6047E392273BDAAA73476CC26A32F37E719C0931FB872A195A2575100A3
3E0287C97F91021615427B7572E8002DACBE1FAC3CD9A004F3ADF4F2DE14E190
F50D2770D32BE1E435043FE03050AC7BDCB219499738157FF361C35C72743413
D41A56566E5111ED7DCD009BB3E3B6B330D7FD29852913C5BF793ACB714F9B79
7B2669D17D52F256FFCDF706B456B6886F5FF5F416C079AA846FD8D85DBA9094
E105CA0C6CF6C122C2ECBB711D518693AEC75AC0AADD0C11B0065E2ABCF51132
F38CECAE9271978280C6753045C840785F033D885B728E89E3A21E12FD05D033
B7BB01DD0B9469C910B7A7D910B071BB90419EFA4512B1227E6D1174CC7D3D57
B0590620DE35BA53A5028CC2FAD6DA11F18120152D073CF4219854F51D3B81A2
968A2633D19D19CB2F97354DE86AD607D2F962729B4543399424634FB4845081
66B03210F3BF96D6BF08F38611A67040608203A5C5B6C62F58C1E729F224EC05
FB4EC009EF48E7E56CA368DEB5AE7DFBB73FD1A0039F86E8489003F84951D921
87CCB41F8F9F578737059CCC46416ACFD62C7DD73845C80493B3ABABB9111866
00AC62FEFFF4F7754AEF054D40CC21F37FF38C445257E21C166E3EDBD89CCC5D
86A25E591E0531A442F63B6D86590198C5957A988BDD84149AFFDDCE09BF6427
B2F8548CFFBE68AF71DD6B19F8454D63D6D7B882B2A0852348DA855F03B9023B
7CFD7BC19B7456A83B17083469EE367CC1F13B143ECCB38C704FBA1E221F4025
EBE109E1623BECCB8839DA1968122EEA8D652BE7479621A99C4CA4F1DC54F01E
CD5C2CED3A0113890BD4180C41990C4DA6292A4089F04CEE35C0B41847C41C14
3A8ADC78D796FC7CA0BBDB2797107FE76CCC335F6DDBADAA9B42A7E20E8E1292
7C72729B9270289731E6155BE79E19E7A9A40E38B7DC25D78E2AA6DE2D8C18BD
F9A390CB2FC2C6ADF1A8ABF2C8E1C883EDCE8BA8A0360B28CF72A35796201DD3
6642B5A8BA107BAEA2B7086DC2E48B6B2475EF5245111EE91BAEBEDD15FB6595
5F91EC050A8CB65E040980BB5098946A6A5FAD931AADA4A4C186D958844F5450
60C666801C182AF99D4A8A3DEAEAC97987BD979A997165997EC12D816E8BDCD2
3FACA303FA5E411392AE9068155217696DC44E74C5BFFD47D693400EF318EEA6
EE87C03DB2E340B1D2D23D99FAE30BF0284CF9E8F505D5DBD7BBE242FE071FEA
0094A5564D8A8B0406CA423CB281B766B177D60EF103E8C6155D3FDB500BBC0F
9E152C30059054EE92951E4A202AB40AA1134FD48A8C8480D9137F359E6287C5
369650A0642A0F9243CC31AD035DF3642872150141C36D1C1901DE94E8214322
20026A57015ED62CDEB4AD85F262EC11DF033176F41FEC04B5C12B40DD1B386D
89AD8616B4153C074D4DD8DDB484F625BEB57E28405D014E912B80B490CA7E96
A5687BD9F33D193276CDAA152C0C500791C76B9D0A0A14F56ED1959BD60C7F7F
5BFAF8497205D4BD589F26D909F8B129941C49A1B9D9D18DFB3515FCECDBAA95
466B14AA51BA7362F9193CEA8BF970E6879DB85A356C5931DC620F62B87A086E
A669CA7CC9C0DBDF10DAF2F8CDDF4FC55650DD5BDD8F860E60CDD9B72B0340F5
A90C5D915E59246A382A2EF44013126E9745030171081CFE3F151D0BD24017EF
A1DED65711B579E0B60F46E594F776E93E4BC9355CD59870B8C57F2F7EEB6B87
7B917BFA3D462687AE0F3B838C3B4527EA4929E4C6E6FE9D65660B14283F6EEB
26FD0ADA6AF173221076CFDCEC914CD42D09AB2960F8D54E965C4D8F99DE6CD6
9EFF58A2B6AC974CA4DB6E0CC76939E99373CEBD7DF217D01146B9AC973F45CD
82E6891224A5614BF4EF1DD2FD31DDEFFC2420F4F33AF3E02DFAAFF16DBFCC1F
93AFBEA0E6F252F817CB4A80E94B9F75FA7DF1AAD0F96B2F1290E8451D8DD5CF
B5134DD46C874040B8B4DFC0DDDDF3EFAB0519A54FDC35209300AE63A15A7D98
3219EB991B300213F2BAE991DC3F7E9F8BE834F74A616E8415CF27C45923F49C
BED40780F65DF7035403CA0F72E4CBC21733BDE36178084BCD78BAE1B1255B13
9A4B50B093D58C17846DE283C4435D8DE1064D3D38BCFD0A94DA868981A99E24
41CB80D1C7CDA6787DCD0412235D838FC71F9E3CBB1C294C6800FEC0A6D60143
CC3D55F1DF6AAF7C9D25D99E47E39D972D0FC17976DEB8C98ED2B30FFC89509D
FFBE1CCF8C3FFE0E0D5D4EF5E4BD8A5B894D2C4E3C2722BB2F1C3839C5ED535A
8E130B46D3C97F4DE0BF14EF07EEC0746DCFCF46E43E35EF09F568E615CE9415
8D9E0A162195CE5FDE664A83A2078F2618C6D2AD6B30AB093918063F327A4949
7D48C8C7F268638053911B05AB6F7A67DBFC81E3730FA073A68EA7B6BEB3D8CF
73C66752FAA10EAF84BC9F306B44A7BDD35F637D616C7003024B08E521E96934
060334D2136641C1AA345C7642D1913555EA1044EAA64869B9F4ED56C6C5CFA6
8B814B94B7BE0A5F23C22EA787903E034A2D141798D21C74A0F0666B13E89748
8269CC02DE9C5B6A9ED253D993C5C6E67459D92AC84FE2AEC2B41D8D1A84EC04
FD8731BA938A4163D000A21B5AED19750A1E41123ED4BBE53BCEED26A72ADC4D
9E342FEE04A350718B7C2A2C0B9BB8973BFBDDFB74A18636CAA7CFB6D6CBAFB7
66754C0E8934F9AB738930EB75A6B4AC9F95B142AF31B68D3AF480BF49C4C5B4
1E4E6C0CD5B8CA978D6AC89C5D7D115D20015326BBB45A5A17E377332D8273DE
D975BD53607ED94253CB78FFAD6ED43D54332849ECE66F8102383F02F7401C34
81B529E3E5D6A2053B7B143C3488E373FFEBB6941EB9F43E42D721DE4B808B58
72580E379881BE02909D7E57B80AD9F009C6BACF69858CFD235685341F0D95B2
7ECA06AEA1C21646AE603B41B8D938169C832680FEDF5BCBAEEA8FF20248B0C2
6B121DEC57BDAEE01FCBF6FC809FF182D689831E6280623B6CB8ABA8D9B716C0
21A65FF920CCEF8C950A219C8ADDD4BC7CB4C9ADA51ADAA643EB311F9C71D383
5B7822B3B824A70DA042C65F687D8908F985795BE88387B5CCCCD5FD1F4EFDE4
4CD22214DD1C4B36E9D2662EFB5421B6DE423A1EF22B2D0A83C48263F887FD33
B796169AD53821DBC6904AEE4B0127D26A7B5B38B038A531F6F7A78A0E6A37E6
7CA5BD656A03E46BC6EC917F222D4A3DBD38A53BAF5D1862C652D48774EF42F3
6DB750674EC03E8FBA90555BE6A705C385974EB527CAF8159AB9B3734507BB66
B609F75D8C1684111D9FCEFBFD625B7348402BEE59368220EB2EC57A6EAA6C74
95948CB7CCE21BAAC7D1358E4BBD39AFEA379FA6CF8E5755258959D93624FFE1
99D39A3DA75EB091FC2A717444C8E2C33EA2B27F17185FF2C992D480DE31F225
DC04B524A3A442C7E50D342AE0995D1280C93ECEF114BE6C34B2553C2E428381
8D4AD21DD19B49525A49A85F4C426F7D16A648D59D3B346732D4328E297D2572
AFD038449D1D3D09D27EA8C1CDE68F1C2CD728BC91BE43AC75E07B866F2FE7FD
3294F1669EA97B3BEEEBCC24F05A424F73BB55E9EA795D3FE450576F09B34137
B90D95E9A49285A45B4BE4AAB05AF4C971DE2097309D269958F130C60447FBB0
C3A3A15EDC6C87355C5F7C8F82282B02EBD0893FF0CE4557E2E105DABE212A04
0FCA30A5BBF82CD1B7B1450CF9149C462D21871C2B71EABAC5FD96EB28E469E2
FF07E68F50C828BC2FBAE79527F0C70673FC604685676CFFF64C9F2630CABF2F
83D137D226BE0EE535E60BE83D8AAB025DD37D558C37D51209A50DC05364E23C
189818822E6CD053D8118AAA25FC998752DA97B3E3B0B8DC46F0BD3A5958376B
794F2043A295E20CE9214DFB53F6FC0A5BC9192DA91A270938270A0BA4B5DE15
28AB74393AB3183B6CFFE1D0E2948B24D2A7E6AC237837E38623E0DCA16B183E
B03A367918C5AB7825A21FD9354920B90DA95B5899C9FE409D491DB422E2CF38
2A1717828F1F96EE07F8B09D8C19FD0B88366F92ADD98B6E9C1E968A1E1A0612
8EFEE6422E41DF1519C73463AEEB2CA630B01A0EF0761F13888A4306667786F6
967AC17A40A5F235AE1BA3C6F3547FF24606651E5887FE8892D8BC5FCFF7B958
9EF18E1A4A35F047300D6074771B12E7CB82B7D0594BE5C1C51F60FC8DF07EEE
E87EAC1F91521383137F464150D390E63D23EBF909C3772B458C05D12FBA8C1B
5C69DC9941DEB2E1BD49C71652273016BF58FA4D67E59B58C6D9BAD063D24778
7282EC4820B16D3ACB438AEF68DB0DF2F2FF138364824C7D41C3B938A2EA1E9C
14B91C2F1A8D34B1DDDF6531B6B4968A4658C92BF33DE79BB830A2F69AAD4FEE
1096A89B45C068EEDEDF438824406B33720880BFEF9E0ABDDEC4210CABA30839
DB89474563B87923D523CFF87D0A87D9C2A2B7BBA7B9DB77866DAEAA53D1D80A
CE9C3B873F2050025DD29F7BED120FBC0D19B0B8A9EB179D36E67B902309CAEE
BE099C46EEA673F31E8E07AE5C862F196EBD7415B5059F3D5DF5F7CCD561DC7A
BC388F4539424239C618F1DADB9E78E7EA09785BF8E7F0C64555806FE04D6168
15B738C0A77BCA95B6F655020E2964AD82AD77382DFF4908DE24631F2C05A884
542E408BFDE756C91AB084E5507766A32ADA33A74E38C401710926936EF0908A
0C47C11951B2C31D44C06BCC58D737F7D239EBE3EEE1A4F981B0CCF1E9A685CF
A82CF91854D0CF8296ACB49EA77AFFD3DDD6F1F7013609DD1A67D6B5D1A4F0B3
0901535E7617E70CFCABD1B9A9D2DFEF1988B2ACA4C132F1F0507C890D96B0F8
4FBB8EA3200E3F69ADF949853808E163160D84537ECFC5793EB1C455C989AD02
4EDEB72F0E9058E784769C1427815484BA6E80A78B0C28C68CAE5A330D8FD9F1
CE856A4417B9F66703DE69A65DE65B00A629EF3A9A4788BCE1FD1B1BF12FB534
F7899E4912EFE1B93D0D9C81E0C180641E8C2B608D98A273ABF96524385F0384
97480C80EDA4C7B9E7AA036C519879BD2073F6457536F494EAC3A4FCCC293862
54DE597AE4C6A8897F9E44E6735D340C36307497E0CE91B6D1F1607EDB09F9C6
8ED7A52066FE65ABCDAA308258FCDDD13DCBB18E462B56FA07411FC067B29749
B49E74A594BFAE0CF4E8415EDFE5B5A043CD7E8E17FCB8B4ED57D7C61B0C7097
2F86F670A90B18ED26CF4ACB665CF384897F3E5156C9C207F4D6D24A62BBD075
2ED2E819C5510F03B635BF3CBA3CBEF05E584E68DE9C1D521D4C22816E43BBA3
EE96B446C0F1C166DE168AA57C32E41FCF507E742CE254F19EC5974B76A26C76
1AEDE8AA97262EC0173560C8F5722743E02E1E4AF4D37C1876C615489F76449C
05CDD1A3E631366E21958C665E166A285BB1029C6853A6DC3A6C6AAD5F00FE10
08D1BEA397E35C7F91ACC5982763EFA34A171A41DCB2E777B75520F5B6993A26
C20A2114E2BF2E1C37E803F70C4F652DF6A4537FC25299BE55008332B6ABA850
FB9F9FA4E10EA00ABC6139496272CDB27D6B56D0EAAA9F7DF0231FD18090D6EE
761B5AD3510CB3E47EEF53A3E89E352741C980265570A42113C83ED727B5BFC0
09FD73469E5E03218E29844B569E2EBD6271DBA6A5B619FA4AE846617AC1DA9E
DB3A2ED55D49DDDEFA61EA1F01D92A26434937BA7ECE3B966FA4A35BEE2036FF
9C5C423970741C76B14667721A220ED3DAAF96F20E29D2F08BB62D5CB5D0CAF8
AFE2FC900790F7F6050818D727B4FB3B46792EA4AAD3D5A9753BFEF2BF2C4193
8C4F0D045A0D14A1E6062C563D31E7FD87B97C86E430CDF1CF6FEF782330A15F
C937EDC90FC7F5D9C04BB5B655DBAE33483AB97D3A4C13ECA61A8D261B3A7430
7AAC38B50C0E55217CE221FC84C21560E71E1FC313776DC3717FB397BEC20C22
D5E14C169012D81142499024D4B396724448C274816D4AD3607A91673A3DF629
88DE97DA96C5C43CC63FB8E5FAC30CD882C2D90B88390AB7712AC342ED568842
60B501C0AF945259EF364631E8E8DF511894E8900D7D549842D3C0A8DC3082D3
5617129EAD7C8B3AF8FCAAE366D19234451BB972B559AC50EE733462DC6CDFB7
D0D7371E2705E323EDB4957F9A271F30E71EA8E2F40D990DB80E0BB98FB9C596
8B35E4D496E63195374AF98B9D102F00C3567F94414FB8334C42FEAB58B02F67
E9CBC186080DC2C27956D4647D2D624D9688C49F9C1C2FBC208002CB0FEC0524
2DBFF4BC8B67AEFD8E69441FE11F56E170EAFCB3E4B078DDAA6B27C4336A6E83
06B1D159E316B6036638EBE33CB1F3D50FAA69DEB2E80D58B526E647D6A5EA94
4C6D241A966FED368CE34E23516723CA3A9D6C19FCC634E08E4DAB02027E6F9C
6592605A206046CDABD9D54EA413DE4F2C0FDF06EA99B3174459E7BF82AD59FD
366E775F2BD9F48FECBDD6394953021068450A1F811E0D5971206D75965FA8A3
2224F0C87186BD352E33A39C6E994BD86803E88EEF1FB0A24A449B1D1D0B47D0
C8F0B3F8CFBD1E7F8B511E480FE0BB79A2DC3F72DCCA2A8F59A0CF417AEC618C
8B77FE83EB160ECB4DDAC282C68500194FF7CDEAE60DE7EFE008301D60083FB7
E8BDA75A112D1D27E92469076217B5489E162385C84F86E70D3BCB5ECE08BFBF
3727AE3B0A5D4BA4A68C8F9467EAD47506D2F6B527526022E4E007AFC9A36515
572732015C2BDBE0299E0CA26FB89FE903A205E1854AD4364CB8A30547FBF908
AE0781A7216E4DB5EC85E5830B36D54688036EE18D07609B53B0ADF0D9950A19
5F64FD3209C6D47B46B7708F855E5E41C8C0A3C14544F068343D3ECC39B6820E
33508181190387850F9073E30FACA80736C0BF828DC7E5A8F8F01D7FC3897E4D
B66CA9AB7408DC9222E1E405A7ACDF23B5B56D63F7D3ECA60C0878B250E28059
F269B6B1980DEC239A0D0344E6E5627D613BA2540DA3F064922470D63EB31C6B
D483FD867BC2938609EE52C0271A7ED1FDEBA857C981B51F8E8451802D4821A8
2B8A241DD366C39EAABA219AD8063ED4C879861B97A9FF87F80D8F8693448104
DA54C4B38AF1AAB91097EB7945141F506ED9908D8538C974B43AC1FA919F23A2
F2CF7A16BA18DF3377AA09497483C92E626F78D80C2E8F4F3D250BFE64BCB923
885FDBBE2B0F22F0DE8EF8B927DC6C54ECF3801E5C2673F00888665716037A35
F574BB08A82641F3636C82E364AFC94258EA016A586610F633947FFAA9702E5B
E4EF7CA972E2C284B9F6E0CAD92C3E68A715763FC442E8A736E994EA5B249B7A
07735A36737C99E1B7D6043FEC3BF1432E9D77EACBBE3D271C3DD27C28F75452
1E715BEF128F17A3CECF4206E3629520D3AE254B77057D96CFB3DA354109D6F3
AB7D037E509C5DA4A954235A57F0F59ED1C5067FA0E5D929236579DAD5A6BC10
5B8E6211C3F75B21A9097AD89DB843535B0E35ABE92A93C34702F93E2A590D14
A57EE877A5081B3F9D9B232AD60CA1EB8A423F9FB35F62D185F051EC5EA7FE37
F49D7B9A7192A22C566250ED33CCDF1DC4CD54AF2B27F3898D35DBACB95E33F5
0E6BB75FD52D81EEB6FC227022120BEF4803811E73BB37D1639B616A81B2E183
49C55F794B95622CF9876EBA850B6AC8DBA8B6B0143F4C6645BCA7AAA9947638
28DDD30DC18FD7A0C09F19E9C0302071E598DDE8D620619F0DB8FF54513822A5
86932D1B1219BE525A61FFEF80DB97BDCBF231E098CBA8E94F4486024D3F85ED
159B5B9A5AC9DD10D3BB974C0C92B89BF728B6BD03C5A92A81F5C6BDDD95BAB6
91BB29CFEA534319E195268F9BA8AC5BBE4DABB07F7BB64332BA41E584EEA50F
61F4C7066C1AD4F4EF77F2783FBEE4A0333AD0D3897B1A83AE9899AE69C60F7E
720947950F2AFECF78C15AF1FB203F784ACD13AF4DF00F86FCCA06B7DE925085
317CCF8666F075D42FBBC0D754AD58FBF92629DC8866A0698E72EBE51AB504A3
C238DCFCD3AD96645559ACA5056F7FD695D5C43EECABB60C89FD2B50EFD6580B
E5028569816D280D64CF0033144207DC526F24B186BF758FFAA8B678DF16A06E
747A7AC47A9D2F4A10FCF32787186F2650B1FAC3F22874A60AB7B789DAAEE741
EB538E3AC7E38B333C7D881CEEEF9BB535B3BB2DF00419F59E7D9B9BA37245C8
B8AD6664FA20D07AEF6DC4C3D25B0E6BA61F704CAA3AED4E0DB58184D56DEFCA
7213829FCEAC430A54AAB1C58184C186834F549D3C3FF963013711AB72B76C72
F09EB425566A104408EAC417BDB461014FA86C383A1C9ACC3B148072DAE9C7FC
A9F7EA5A376A808EB33CB9E6053F9EC4BB9EFDD4B00ED3667B5FDC6BE303A380
537800818933D735233093AAFA54FFA50A3C775B46790D67CC0CFC1B0663525D
6DB5D83E17A2EF9D954C1DAAD9BDC21AA657EAE86EB7E2DC73C347153B9B9135
A79D2898CBF7F1DBFF1D94F0F773B7D545F7521C2C0B0340F42BAC76722A397C
3D4B3BC97F1CC3EEFB3E577C48B5548AF393B7B15B87259D35AA0847B7E9A4E1
D5C3FED9F2798B38A29B55F2557F29EEE84D0D1410A9669D374DAFE46B1F67F1
A70A7F40E6350594AF318C9157FB09C1BE6A726E2FBC9FB9C1F083274F2033FC
FCE759E760131E50759FEDAC9FD2A364E65BAAFD767FC8DAFED6774B61B7E032
16A358F50893E391398AB4EC04059368E01F0739ABE38B149DBDBA916602E032
521102C48CB58FD53CC14CA3A1A4409352766D80E77B1270019E0EF57F31E9F1
3B93DEA04A3135D796AD9D354808CCA6D13C45C28B8A3FB41EB8E7ABB9AD4392
7837F9B19E1BC01AD5D9081E2479C772D44D6F7D41AC91E8404D8AE952C3C78E
4A6BC9AFDD5DDD26F745E1D1897D334FD59840C5A257D0849700EEF061EBA0BB
60C59D40F48DF92AF2EB6EC67815D27BA88BD835221447A44807B5D89D0FE464
663AF7A14D5225730A2A8A15EC363DAEC92DC7E8BCFC67C2C33B0C6383B5B020
3AE53A7D864F2C9E474CA311B75106DCE52C129CFE96F0DB34732D1EA6B32230
B3EE7BC61EF207D948FABB73EB127855B8849431DA4E0D14DE737964EB1C709D
6CAB9DFDEBA1E28A4944761D39FEC2A82A7BECAD074087293DEA96BC70B99CDA
0699595E3D66AE1107062395406A0635F4D60C3D5A5D5AA54D4566C36A1DE47A
8F3E1F128C794D9D6EF7E18E83010405CAA3AF558B2209D1E14466BF3406D2AF
6DE5C7F46BE9F4D5016AAF1F8BCCF2005BBF75779BFA8022F236006FCE1DFC3A
DD6AAE63F0F68085BFE4DCF0C8E75BA8EA33617F1E8ACCB5AB1EC6639823BAF2
248AD544A48273795FF8EC6F39C9C62D19747CEC01D9B10A106F17B39A5A1AFB
A562AA94C4FA36A7D076155155214A256768C846557A983C753D3DE795CF892A
F4BFEE6C45D4B46C6326BE2E10D764440E59594189F167F40EED0DF7150DB40D
2B141DCC1B60E8ED7E124378C3831944967B1FD708F9EA78FB55C05B0D65A5DD
1E06D19E0E44804AB992686370EB8BD3975FA67B42F775680FF6AA0A18E74DC1
48E58116C90C7B21C56537E4850A34D673727FFDC1C64F6ADFB046742F762EB3
667DDFC36995ABA438032624891D3480D1DDD17468D4DE6664E363591C86F988
2372BF002C07632B51972967E92DA968494217E7F75A8F8D124357B24AB26A43
876FF9839FA2646BED8080D44243E74485FB82236249F00CB9EBD541AA9FBFDD
EF1F775BE0C411788B054AAF22F09682A94A759A52DABC55192C708AC32DD473
9F359B1008EAD7185675405E6E48BB1722D84194DD4AB3AD437FE65C6C610743
20443A855CDD8298F94DB433419F0B6E7F23E21C499ACC7B5B6A1A3749C1342A
F400984BC110AB5978361D83B9D6C514372866A572B31491F9B9372D204D8D0E
C8AB2AB23D244FDBEDE098610F35EA16B5E86C9A7DF4EFF9DA9D4652CE666141
182F8636310688B8E55C6D1DEA631967D663565DD2094B345C3C32CC4869FAE5
4A5D3FD3AB69E247AC2F1758689851A9537CCC5D31AF98893672C3DEF7A733E8
39622CCF93615931BE285E034FEB45E9425DBEF583887879AD93C362A378ADE1
E8E7B556BB4DD1B0EFDAF667A918171169D8669E363C51191055025C731C7642
00BAC03D1AA472AD0ACD31264925810A365A9D8E21D9FD21944D8BD1E10A52F0
9D67A50F6B54A0464FAF0D6CFEA129267BEC1DB4C52ED827A7306C41216FC6BC
6F51EAB6C222623AF1935758DD30F69500C16AEFE3A6FB08B00FEAF1D31D9470
ACE2BB0D43B1D78411D194A831BDA3ED9E2F2B40A297D94F25FB8BAE37BEB148
2EAB2DA6DFAEF53253549A5BD518A6854A3F5B8AD99FF719D6C5FFC31F458936
B9EAC17F8810AC0338BA7DF2E210640AFC4EC25EB8DE48F54608B2468A5EEBF4
3CA37A12B2E1CD2F18F2D5563CFAC92827DAC5144A85A9C6F9FD6818A4915EAF
14592EFEDEED8B6FD5D925DFAAC92B25E543603F2B5A4EBFF4319C11D0C1A24F
299EFE32DBF5035ABCB18BD682234879B242AE1761CAD4FF35F5419CFB55B689
72EB810AF897C0C90D3EF420175E17CD0741FD87972D92438937409FC21FBDA3
72B3F3760F5FA35BCD767FEE4E9808EBF05438BD1342C4DFC75455A2200DBC80
5F99EC797F49979E2087FAE20B58957A46918DADC4502323B2A791A83E9FCCE8
22DB28D5BF0F0F1E39055E86180C7D70697B73BFADEFD307E7E3FEE4E2BD0B1A
1A036DA5E99BEAB6BB88A9B70B65A991BED6CD2F0AEBB87F65D5E67BA200E39A
0DCF5F1F1C0DDB2999F26EED9D32C373613F2E788C56EB08C7E451F898B85720
0B7912C1FE9229D78A0C17BEC5FD895DFA1FCFB9788F34E0A1E814732B482450
5623842220E76AFFE3CDE50F7693D5A4D6BF6BA810B780AD3D7E35AC2779ADE5
03EFBE1DA2772892E691EE8576E76EFE95A49A50E08D6C4810474C709515D6A6
557ED09C2D30E4B73598392F103306F731AE6E2AEEA36696E017DE193113F78B
17C4CEA5EBC76C94D6DB8098AFEEDB9891A27ACEAA9575819DDF023FF06A5F3B
1A51AE4850C6FDD086EFC37539E2EE3D2BE32CCCDA6ADD87E781DEE29445896F
8446E62E36C18B53B5C7E530268B4D8550213E1B0DE3F8F07FB5BA6C7412E47B
00C8822094FC1EA50095E5D3604CB862B72FFA7E7B566BCAAAED470B4E2C6097
F0FC74499B24DE5052F41A8EC5003DFEC0732A013ED1BAF36DF5E525250725A9
5D15EFD0B5EC317437135C5D33FE0858970DDBEBA58D71854ABA6BABB05B04A4
463078EF6BA0AE68F883D9F85B81A3A160369B6F94F049EA27E2AB66E8AF5859
BDB0E2851C158D45F5E84699D182C88E74416319D720E3C79EDBE00878008538
C79938E46927723823EC950F683A6BFB55D22DFB161E1D6B6DB108965906D58B
A77D787C4130038FF6AE864A2170296055A1669114BCBC5B20BB6045BFD5AA4B
A26DC69F2A21261FC2AF85CBA7D0FCFEE888CC7FFDEFCBD573725715885005C9
183E5F70C838F679EE6982C30F3E1C939E01C3B08BB720CBE08D7F586D9484EF
F2E090F2B7B83498FECBDA947260922F22D2F2351D1147C61EBBCD7164DF65A9
ECE52E4B3584DDBD03B345F3ABD2897BC9C6E093D11D6CF0FABF10FFEA6E4890
8043700037651B1F31AC5797DAEDB801F01459540E1BBAE50115918754777590
F30082E28A8D951207D7C494A7B2784E050A11FE8B1A658D4116388E7C2CA43C
281567835CF037ACE47977EE4790B102B3BF7DEF41CA3B9DB089C0995E743FAA
61D23DB8D32252F00C260C61B660C0AA450558474AA95A6AA033661632CE15CA
D67EA78AB7E80316B269223DAD309EA15E9A4E9A5B2B808890A43D9E7F59104A
ADCF7971458E6CCC0007BD95BBF88379F413BE60C6CA25AE8C26461B380E6BE5
980537C58DB8E18E1A64A349847AB619D0058902BCD28BE99FC267519C065890
9F89D820F6833D13BE6FECE60AC0DCE98C901A79E3E0354517C3D9594188F94C
E7152535E781B50D4E0AD7377674DBCD9FAA2AE864B2D5CFF784282EF7462564
CBD49D1820E68CCC9DAB40664679E4B884C970AEFA2A2075A1AB8C2DD02377C8
A7CBB1F832A94E176F8B529878D4C5E8A0F09E2703098CB0AFA895CCC65D5766
8EF3864D2CC46E07875E4BA2A7E8C3BCA79544B1A2F756D81ACAE235A58C64DA
B098B8C4E12D9F9E97E5DBAA2871665E9B2C0C88320E353F314CA658190A354D
AC0D391F423C16690D1F50D588E92D6FB9C6EA7FCE6A387A1572B379E2B0F9F7
939EAD979C94C53ADDD85AF53C31B80C1B952D9DFDD486271BA9DA14E2A8D719
7B0F7D204DE6A601E8C160B0436C3F1193BED1C39420BFA3EDA081AA379231DB
5D3C332F12C995990ABF2E14210890DEA4EC2B1364DC3AAFE9A99AE5E06966C4
A23F3F49740365E82A7A293938440D2099A860251EEBE74E7A1D47BA78CAC708
C675AA7545CDC2563D140A3B9599A6FD7B8FF7AD0711E9D787E7D4BB468E6D57
8FDAE49D71676C77EBE2D09016E1AB71D7CB9F043CC134930B868DD9FC36A722
247FA3196291538467984F0432AB3EA1F5D8579CAAE0CBFD02AA25E4E522F0F5
32E256F125A70D6D9C9806549F775AA2861FC7E9E0DB6DF3B254084F00774588
9B9F3983211CF964849C8F736F141A0A108ED471DEAEC54ADE2497021A2B138D
4E5173D7CEE75B91B36DB3081871CDB3987169479C4198BBCE75E467680764A4
DF585AA8EA461D7B9AF3392FE0D813D860842BAEC5EB5C217FC685C06C5AE447
C997CB7E6E865018CFA9A68FC5D652D383688537E7372AEC13F4C0A0522F8D6C
B3BFB57F14A00BCBA2861736B09DFFACC58FB9E5E1A03A3210CBFD7A84A02588
0635EFC9F7DF6BC48AB4BF001752E0793D5F65D8D54F988704273C75BFE8CCD3
F6A21C5A0CF54DA689745B877D7ACCD50411ED8A7793FD6BCE759F8302447FB2
69D6C55924D417E931529A024711AFF1FEB19B20AC9A3E1BA1D49D6AC9A0D5C9
0614F22E02626ABD343F3AC0A9698AE84CBC80E8E06FA21B47A2C431ED3DEFC7
267AD9DE87E23C22BE18F0241EEAC306DB1C2695D6DAFCD4F28DF3EEA1A396FA
93271EE576454A86A0C216B224E0DE81D66ACE4062154AED3709422940A8C369
62BC1D166C17512383CEB74D9B4238067509B89C71E9B881551E150BAE5EAA99
2258B2A5C1CDE2B37C804F50577B6D1308DD9C414C5DC3FF3778462E0B1CFF46
90692DDBE68A92CAFAA72A6D860DD45A0CE4F8EC989FF10865E58A7BA55D337F
12B277CF7987BD979A997165997EC12D816E8BDCD23FACAE2B8C56A9BC0120CD
61B56115A4207DEF9096D27D3D68D2A52E6E372DDBEE44AA952CA42668A93FC8
4298A559CF694B84D116EE6F2F9709180CA6A8CA11AE1447F8070CCADD74CCF3
D403C8992A070CC18EB94802897906905AA46F02FBD40708F6E4BDDD108241F6
8A7BCA1C18DFC2DBCCE9171FE3C81517DB81CA5A9C55306AED6DC20B6B8EDDED
690D96080BC8A4AB8CFFE1809DF7903F6844B9D815F3AADD855C9CABD5BCC174
D4FBD61DE7DDB8C5B7023749DFF3D8C391A5FDDF2318F6D505E8FA521F1AB0D9
70F22F8738FE52A7252C221F88F1846293F4F568F69A45B054F4F1357F07BC9C
4E894307828CEAC70309B0777EC79BA23405490E40C2C038A89DD8484D4B114A
84B06FEFB4C4B82001A8B4E7DF01CAE49DE944C25FE57D36A3C5CA077D8042C1
5732284FA8C066B5436D54BC8BDCF1F43B5F2C93E3DE4D211B78DC484B802016
095DB3694DD0A6D87EE94E783D9B3A2F97C83025DD7225A34118652C11440F02
4431328D961B72BF5435880D10FA0F08607477B471844EDDFBE24126D4B28B93
2406BA5D3E400D4BAD47CAD5EE287FF010AF55A4B864B822E4BAA34B57AFAA7C
E31278DD472D9F6EF7A841D89700FA1C0652BE2C86DD8CAA9E18C093BDD727BE
5CA54B9CCF4829B721358F3572C613CCC6B7436CB4445C100492702CED2DDE26
F6A94321C8CEA614A5A206295152CE0A04DF64A83832242A353515B5B347774F
32B8B6C033ADC43CDDD07FABE92C29B5F50028523C734F57DBDF65731F1F3FE8
25D684C53723CEDC5E42A4D17F35791CD367DFB43C365661954DF160077B16CB
4AFC85B4C391418EC9A3159D590663C03DB348ABE792DB5E7DB73311A007ACCB
BEC9EF0221B8690A03412DBCBC3FEEAE3DC364060DB590DE107E8B918D946E25
0F561E5E394ACA6EAD2890CD44B966C3DB5DEBD271270A478AED964039213754
8DA359B01D2CA3146C19FA9B1B6B2661D80704753E7B5355A1AB9D34E4295AF8
3BA1604D89E7D7C3A2511C0DDEB1E7990C44350085E0428AAAC1CAE08123E5A6
FD958CF50755026BCD278CA322575D75103851939F8F9C31AD6C8BB89033481E
0B0BF46B0980D70618A821BAD346F8019AB18BB46736BBB09EE9610D507A4479
4CEB9A3EAB4A4CED1B6E0B10EEBE23B5D3EAC1B0024E13C0CCB254546A9A13E6
C313EAB94A45DE82B5B6D6483725D0EE18CECD74F2A8ACE261620AA95755D694
1EB85166FB6E72383139CCD6BBCD792189A12FC9366BA7134EFD67A22B4D6BA1
3F5DB00C952DEE1F6CE6A0752411EC61354347A4CD14FC73173819BABE5F350C
8F07C35FC6931CB2408221523F6357B54389C5E44E2817807494BDA2645D0FDF
CDDCC816801ADBE116E0E90E6199B6C6B3594E3B7002E8D19BA75C28AC30B740
FD86ABCD594DE52FFE1E8D9AB23A9251B352D6EC3623F663BF60052545C40B1E
231BDA28148953187801CC5CD18FC784F3E7FFE8F2DB95A06F6CF9326ADF1CBD
423F1F8D2826EC115D9473006122BAC0B0075FAA6FE3D21E5C1928F4167F4553
0C20E8792CCA2BEED71E9593D31072A4AA9719189186CDC274F18F4CB1B12A15
889917716A54910E71FB6278604A400504F2BE0492528714AEC1260944AC3AF8
AA19E1A8D081A7BF41C900F763D120827D33E835608D20AB4D8D17FE174A3109
1E0734D5756FC85E7912093C24FC3746946A7DF784BECC2BD286ED1699466E9B
22D219E80B8F40DF268A84370323AB62FE64603A0B721A721EB5F5DC1A1B3482
A99DC9094E33D3C7CDF50D3E9219F908B315D8FC4DABAC6A8F14996B53EC634C
8BD5A7A63F99C76DA23FB3E8BE62FBE613C3DB68A17EB81101971427A77C3819
B115C4F9BD57440847DB2791AB32CABC3FAFA58B5089FD5B584A49F6FC6AF1EB
94DB2F0F49AFBC11E92052F10FD3856029C882B1620A402E6AB0585242A0053D
A04079E1FEBFA50A5C2521E07FE801BAA667CBD7057F40E19915B83A9A6D712C
57E46527F2606656AF0379DCBC70D22AA1380CFA803B2FC59F47D51B0A17B5C4
241A7100269C2D0D6522A41B86FF82D8047313665E868A55ECCA132DB1AFD32C
7C7A9CDB70A710A482795A73AA2AA542F626C462394710A19A26B65A73FFEABF
5EF51C5C3F8184C69799C9E7DEAE85DC7A673BB1D8E2B410F5C5A738B3CE473B
CF00130673D6B4E81751ADA6184B2FA4640F53BAB4C61C4E3FFF97794144F034
3368A9170BECE87FD511BBB68D8D7589DAF8148D380D77F8E7DE4DAE00D18C96
F48F13E980B20CE24ED96E7EE72A3AD5AC654B29BE5805D71AA87E3A80D75383
603152011530B8ABD2294D0355590BAF9F641AD4C1079E68EC0040E30B315523
8678DDFAA0BB8BB34B51C9B4AE7A36326A5B4B5DB26DD5B45454CF62C46683A8
1AE2BA83BE28EF402C92B79B8A0D4E1A2DF00014433A1D8E062D5207D5E38FC5
2F40EEBC468FBEB9FECFEFFFADBDE676D98DD6204B3EAD5002C472F07CA6681F
DE22BAF340B62D5A42D43965B5BAB0A0CFBC448F561301127397DFD637DEBC5E
48488380B4A4AD3D985DE1FB3209AC2A22A41DAC5EEE976789ACCCF2DB41709E
9257F64B149B32EBEA6AFDA717C344A62AACAABF57614852C80731BF779550AD
207EC4AA25ACAC6282A24588AFC0AD6E1734CF2D6504C544DD086A8EB0BB3380
131A59E8063C5F6AB6131F4DF4C12C78DFA328105220EFD9806976AA4D80E4FB
2C64C79C4E7B77F70EC390DF59A9B9AD1018F245F33A42CF224F327CCEB361E8
4F48BE15F1D299A11567DB72442CC75D9D2B65F3EE7AB1A8319FAC5C83038807
C1CF9869ABAC639B076F95240DAE213E0A0CBBC22A3CDE0856BD8640D2B9B184
4E07FE0219C2F050BA73D021C39EA26F677C972818BF8C836B2720F35B3FE53F
0288488FD9DF63FC20CEB2989938E27451AFFBF5AB2C8A5AF1CB6DBF0B027ADD
1C24093AE198FC2B423322A0AE12786688C1D5C8740F766D919183566CB18039
0D43CF505B0C6D1212CCC7F398B49BA573E039D75E944DBD9996FE7E135D1784
D793B1DE3130E4AD330777D907055650B89F5EA54F9A330B972958351F61CC98
96FD453CF3AF2307B191F79C5C6F070D7E877B84A7D1E170C47AE4059FE85CAB
BB066949A02C4E37344CE53B170C19D0071038D64FE15E5D2A5BE446EE0D1806
366AE06337119B2CBB45FDA60F526C6C598BBB6E78278545E290F3722C395B2F
0B03B4E05F14021486C02F0AE40C6E0B8CEAEC427757048ADC8E402F8A7548AC
42F947FA43FD9B42A8D53BC39779FF307118D66C902026F767B543FA062278FF
59B1BA989030FE6BA494E75D21B1B84D11BE0249C482182A9F70F0C16442B535
427C7EDFCB14CB59372D72A739D92CF597083B88F0771BCD9730164C6A098835
E130519E962D8C51F5CEE500F74AB96D945E03DB5F670EEB9F4888F33180C655
F25DF117A0E96107F19C9836330D22884A4D20F30A48B80911B2E3ECBEF2374B
144AF090DDAE306D863B04944AF31B076E97466BE492864EF5B1E303C579007F
72FAACD5B515042DBEA629F283EA2657B9565CC416AA9AE958230047A8E49B43
E537A1186D7D24D36C0DFCD0F9CD3A1B4F8868FE17427C8CE8695CEEAF70E3B2
0C64D4C2B34A084B5770B66F1F9135C70CD0214CF04A4EC5AD120D492F25CD6E
1A485B12C20120B99667816FAFDD247E06D9789127D2D93030E0898958555F52
18EBA03EE4F33D65E7E7286734A03826680D97565FE4D1E216A9C768A454647D
B379C3308A62A878270D2FBEE37AA230330D81EFC166DFD534E755A8D1E0553E
0BE93F884A17BBB0741AC2E477F3C8C84F85A7529ECEB3758E9DFD534CAC1AAF
06A06E4D4CC164B2BC961B806063B735900768E75D440300F0BB4B34A2810402
1E7720C1A97D522C07B0F972DB969DB7763D6DA44AA2AF44371CA8B9A4450DA7
6EDC0167B40156F5C414331F7A91B4F74898E2FAD14576F81B1D688DDE9EE3FB
5691ED61BE4D288EF4DAAB5311C545967F311D40A0CF8C1F0C4EC952C94AD319
C715F1CABAA2BB9F72C62B0FA5E10F441BADC966829374E4CA55CC716EECC277
4496AA2BE4425CE64BB950F41DD1564C4C19ED32F3EE492CF57917D25EBF495A
D981F81CC9C41EEB1B4601178FA25C0FF5F0D840032F95D39F257C5FFEFDF1E3
0DE9F879C79EC2E13B44602369AB74EF77341BF520553493B63A00C331CD7A43
C0A67E248D6097F3D94233FB04E659A33B5E7B1A6A403CC958FB840024382EF8
F0841DCE5BD8D2AF4ED82E1BF056123ED8131724F0C8DF5E82F3D10B20DAAA10
AA02B9A6E6EEEC07FD93D19F9C0A6F6B13CCAEF1F8A76A367BB2EA3E23ED0ECD
F2560422F4402638B66C68DA69B1C281E248D4D9F8809DDD97C73CA721E7110F
6C11E1FD27431377F103A3AD8DCADBE156939CA01FE8C83D61D4BFB90D4C85EE
83847C478012F9831BBE34A019393CE6696FE4CF2CCFB1DC829FA60352D3B318
C10153B1F3D3192DA844BF8FDAE90A29A844D1E454A973FCF6A1485D5CDECBA7
EFF5B4D2147499E925725513C77F875DDF3CFF1728AB547CF20EF66B511B22AA
67D8FB88D514121328DBDC4022B5373E2BAE652F5EC68C16E1B87E5EF34B3365
DCC7C3A012E2A56AB34DCBBFA7094AA4DD26FE70A69B58F455646837F53728D9
3B32FE3DA1235728AF9156CBD143BA262279BFFF61E504C75364B39D0DC2611F
CF84832EC7E798349DA14A17A7FD1F9A78B4EF39EC5CC133D14C2E464C13F5C4
1C3C5F84A7DA4264C1B79D2B64DD10291FE16F35C17D22DB84BD4A56881B0721
8CA48BC688FB299CEB1030A8A9959F374B7C4F5744027B50DF95864E0159B477
B94FACFD9D6337F154256D88CC4BD4DC84B5EEFE217BE0B436583B1A0BDB5110
17E77DE30E4887C0E7B8F2A0D884F8C09A5F6BB4222963DBAACBD071C3701EEB
814F06635F9B5BE220874B112A764FB4B7694BE5BA08D6CA0E890CF427C5C712
0804D743E635733BE09CDBFDFC9B81ADB62601A04816F42A13AFAFA8AEE419D4
CCC751E12FC71ABAA6E7BE1F04E06BB7EC873DFABFAAA713F9F7D2697844E0F8
2A82E219D733D37296CEE1118362904F622FC22656FDE4385419C1D2AF7F8A14
A61F8D65CD6998E813BAF9B723CD42CB0B4E8D09C7061B705F415428D5B4E246
EA4A87BE00BE9FDF96A78AB04B239E4EE0BA0904B7CBB3F2C53D695899B1F2CC
0C69C7195DDA63FFC07231A6AADC356DC8AA3C212DCE2D3E93D61D8095462EC3
70ED6038C48FFB6E27C2FB99B97F2312B6455CB547B771F0F0E3C276419F816A
5CCE657A26E927CAB2BFFBF4CC1A24AC90775F30BF915A60F7C027C153000E97
5E7513D0156F8298D98BCC98001B381FF0A1224CBD05F6F7703414FD586ABE28
CE20A9E7D22013BE81AA88E9D000D37BC697576ACEE8AB284A1DAB3BB85A73B8
9D2C339BE392B5A10CD68CEF69546070869A8885FC8D5DC917CA1724F4A327A3
AEAC9D5B0044DAD0C0A700D86B273726A480CC752C5926FD3BEE0F3F77801D72
77BCA6B2F6B2855EA66CD991640317676B37B6591D050A96023009555378563C
C457D4B9EA8AD9AAF4FE19F4B68D6E3F6124993AD4487628511CC9D160E258A3
C6FD560737CDB9F6D2D41EEE9C9AF8A9F1056D83723DEEC46C8835D4ED6A1528
F49EC644D1963C92351F4D749EDDD73C4BD9A0170CC19568A0E08CE6352CB796
29CB55B4E724039ADA8A80553F052F97988D4B276110BCA39FC3EA4C69DEA538
37CF42F98ECC48772B99FBBA9D68F3616F7E79FC4721C6799A64BB3F2D290EEE
D6B668E851695610D2E892576552117FE414336D3F93A306F06252934C154702
C42C30D07D729FD4F2FCC3A6B97E1F5FFCC2464057DEB8FEA60D5D46F43FBD58
B88F8C80CB0D552250AF11DAE5DB81E86A55E07B024D8B822CEC255B464CAB83
4B10A9C5FDC801B144AF82BBCCC3E63B027A4C33820E7D1B7C37610A75DEC881
250886C5863A4D3B7258877BE57A04DA8A7CE4B86C16DAF34D8EC2BAF04A0C91
563862202487944A1FC201C6C5263EDD2A7CC63B5B726BDFB3B31F1C72FE37AE
784561BFBBFF0182B969C8B4647B7C2B1CC3D8A8E589C4A4C52B093C8698F388
4E19537380781A3933176B6D2F9F20CC9FCFE265DC647D4F3DD98B67929C0607
DCCF8B945948370BCE1B20E379D249098F1106F98799495DBB3A05C04BD64905
3FD29387430CA42D3FDE9E9245943A23627AE0C1C34B5E6BB155495302694842
41A8D61FAFCCB13A3715BAAEE70345F0040279458A5C88DA8147804B50CD957D
E5C2AE9D179EBDB6BD240FB7E694DCFE132CC1F6E0EAE7BB26824CCA171CF385
63E9D926F0DA88423DC2849432C1F9581425FDB1675063A2B3BD3FA2B3E0E04E
D9832582F5515AF00F37FA6FA9F76FDD45FCC5C10CBF2640628BA4D6D6466239
6BC1061EA7062E1616C58AD50B99310A0DAF0C020AADC1CAF14A0F012805FAA4
DE2E937E03744732E3FDD9978EEF981516AFFBBC84D27BD1ABD686D1351BD5AE
CE597905A91173BC23B3D1657C9E8DCBDAB522E1F4A8EC9323DBC6BA6CE88B5B
C2A63B18E115B756E125867D626E4216D0F4E0797A99011908647E96031AECCD
B46CA72F911E449FF4475F7353D48993968ED7EEB184A884DF94DCA21D5F3FE4
2CC39E4D354CA5AB93F4A191F90B5BD7AEB3AE7C39D6A130678100141B6BA1BD
8B5A05FD0E43A207F5FFA4470C68A59CE174383774F265C098A20D5BCBECB3BD
D3E0907D3E933A03468FB587F3261124DC587C5DEF6FF091ED97A96DA52D988F
0DAD6ED1D2D72D9F57A11CDC27CCFF840792065DE8B2DCFA65ADE7B824DCB675
3DCD8534FB2CB20A8A656E9425DACF326AD2F36FD2EB62CF4C2B70796A23BE19
403E44421240850599926BFB60AEC2B30D2A6340553EF8099DBCC94463440702
5ADD94489BCBE0D1B74F8D5C7F9F7C19645E1468A2277FA7DE48DA99DF7F2F14
60A763712BD8406F63B2CED073C5F6916F9AF0C5F519C9B8AA2961E28C0C9CFE
E354F75131FEC6BE350D2289231F091EC32EFB6FA0A9802B8B22DAE7BC3650E5
2286E6F70CC359D4483699548992C6522649274648B6D218EE5A96FE2CF7F7EF
76DFE5D49BF413AA1A5444502CCF78BFF74198742336A93039AF47F5F3FD6ED9
4DC2FD9C5DEB0EC918C50E1A0D3251BA7D3E82FBC4218BFCB1270A2852EEB103
4E376490F561BE71948F64280100C3C5BA1F5D192A53583CE2ECB852105B7F1F
884AFCCD3B642C0A13BF3013C13DF3E50EED85DAD3A70626B5C9CB7934B5B4BC
CED60DB2D69ABA96673E399338B988234E9E9616E85E060044982540AA5A754D
1EA8407725FF461106D388EA64B390E97E52B81F3057209621E7A2F40B50A4BC
244552261706FE5DA56E84A1947299D5B636ACE7B2E2E04E03D20F3953C0807B
3E840E1D1D755B40C834FA1B74CDF3935DE246C53A274F9D51251AA043D7D652
B330C2BD106303DF6A79C301E00600AB38A00EEA61310B34A0F62E1BF194D091
29E2021AB9B4DE3C8C0567E70FB8E99E4E277CE3950462318057F893A50B1BE8
9222348D7B3A80245635FA140CEF7FB92E22D07071D76B34DBB96DF57ADEF2DB
AF6FE031D8137E49BE7E6673C82693474AAD22A3CD41B29EE521879E4FE07A9B
E5700C1367B3DC5E3339777EA791A503CDE266BD99CE1D2976040390C9CBB545
1532B9E75E499A4499A52A7E549AE4DD1FA1B0FE4E1EB3E85EC2F094AB06D427
B5E1E7412B3369336F94791039A1379C374B81944E671E72CFBD77CBE0A950C5
5F40C15E725CC5F28BAFD1E94CFD3A29AE7A70CC03D431CCD08D89506CACD832
3BBDE8EFF318AFBA650A3C9A5A1041B0EE4D1E1AFB6B6FA6EFF9D626D24C4FCC
95663D13C77907FC344161A50B22D67F4575D447A18642E12EEB1A7AB2695ECF
4ACCAFF8F2AAE4B0B3B89FE45809F43211B599AD6036A73F47EB0137A2E7FA75
5939918BC2F8FFD925675379569A1DB1723E07A385333CEAE39744E19638E7C6
E4B118CC665F4B861D3766A24140012AB4C31FC9AABE7ECAA5701B0D2575AF8A
8596254E95D96BE3179B50B077DFD0DD1901FB57909918D07EA761C7E910C483
8A45A08EA3FEC1B88AE0F6576384D456A3F17410248F9338A58F8A83C0D8481C
4B7FB4BD0946A6AC383B10533A8BE1080729D86FEAA2193FA6D6C3442063D571
B7F94B263E2C7A3D9D0248A076E7C94D63E4E375E1708F3A11FC2712B27C3157
314BB5A8D210044D0A5FA2DBAE0C452EB77B9EB60BC8E8DBAC5E4424AAD00922
39B5F15529115D38B484207D8F70375F3368518792438E3E9B5F81CED307128F
7F523149B24460809E7A4421265D891F5D5EE25C7E2E642E6FEE5FD39DCBF8FF
3EBC8027330B98BB42BAD91B4964F6832F2946B0FF170186DE98963EA40E7028
74DEAF5C865DEA06501B0FC53623FB6D5B025A7B766FFA65AEA58C77DC4ED68C
27DD81E746814E1FF110E5BA8697379A27707AB74F4D4C6C176B5BC59DD39D8D
40759EE9B3BED754A63D9D962E225D4377D36F643201F5FF971324F72468AA5A
D6D13FFC9D1F66FC6730241A41A2AEB1DE5FBA892DFACE7CBA9407ABD8626B83
0A357F32DEBE2F5CEDD56FD132FC9354FDB8B8EF53EFE0CAA60432FB85C12519
0EF73FA305264AF25E4FF3679FD580042BED8B2A1EB380A4CE242F1745EF03E3
446580262393B6EFDE32C4FE7F1B0A607197A651A4216B17742ED304B2996DC7
7BEA528DD00039AA507A7FC742585727C12F16E867F7B692C959CDB7A45A9966
FF024E380036EC605313952366F3C351EFC433256639DD8F3A8C7100DDBAFA84
7E6CC4A1E70CC7CD343C7A32648A36CFD52E35476EDDFB262C71A697E8B15D38
0C9C3C8B6E89C99A848AAAF1BD143560B559176CAF28B46706E4BCE7F0FB33F4
C1AB8E43790762CC7D2F2B08D81D1DDFECE6C9A7CEA474FA9151DA64C5A488EF
D0D6F658CFE5D39349BE33448D2F6258DA61AAF47917C66C7D7B21B94F320D56
406F4EA3202920FE665809102BA716A5B52B84EF2F7E4D217C525226CF6E0C61
09CE4ACCC4139E944FEC39EE946A6047F674EC3844C7A79BAEAAAFC8AF330777
D907055650B89F5EA54F9A330B97295837F52F075D1D40A984E6E75ABA2F4AF1
A7D59300C44EF2EC4A4F40E99C0F28418B2C29117FD2F121037B11163FE11240
B2DCFEF2FF7909D06D055FA464D3C8B1E6588B184A1D58F1FDDD9069BEA65011
63192ABAD98104C6744FCFAC923806A220DA875797AA0365EB40B4665A905A79
154FB2D0E363BF0890FF5C1FBAE263FA446E378D6300D9788ACEC208CF1CEE59
A30E3AD8727B631358D3FC010FE936F3CCAFDE0C2408E39D331EE2346FDA4604
790E97B39E274197FC6E23FF8368CA3C9CF9F929C0FF50BA7D6D0E964143A090
6762197B8E9F568081E9DA1E05406F8E32BF80E146C917E2B532400A5F11EB05
74543D4AA0D04B945257A16BA754214E93002C5102B01F5FB9CA6867E652C67E
CEFA041D118A85F3C77EBCD51C597C1AF6102197A1C8714E87DEE3F0D6CF6E1C
7A7102779082F718B9B616E07B5DFC25F609283B9C2ACDC9BA9D2A1B213B20B0
EBBF2BC4A0E37DE2D9E885515086F457B5AEBA634AE5C75971733044D6473B1E
F9A305BE5821CFB8DA9DEC9B6DEE0EC34592289E87E0FC8C837E222A744A6173
17C1A2DA959EE5B4C8D47210E2152FAF7E1DB701F8E345E74FFEE4F2237D5BDD
9559574796775A09A959DD8EB2DA66990A10275D0131A05F769C161E40A8A8AD
8074AABD6A06EA11E40F1F4F4FFC294C2580BDA66B52594D5820D99C7C2C98C0
799EAD60D045C10E91E5C321504EFA0E519E0A66A000D54972665934BA7CD573
25B5A34CC3F984018DC965364978622FC81D72F9F8D4F020C558383A14BDC6B6
BAACB3668393AC933445AEA45169E6F0C558A7C76703D9959B4265CA553A485B
0615F0D3D880CAE4ACC7B6E8B260A180B6B049C3F814CC14ED33F79B2FA72AAF
170F20B33BA72489918C665E166A285BB1029C6853A6DC3A6C6AAD5F05E0C1D8
881540047B466EDDA8610C578650E9B6EA14B843DC901E78AA828FB9ABAC4244
3EFEBDA80787A0F0AA1D06652D924259CE629A4C114C8032A9F3A9FE3660AF19
F1052E929369E76CD017089645873DC47E51E1E4CB84863767EE6CA0528232C3
E4AA6AEAF8E2CA22AC03C720E8696AEF56F99123DB82304BC662D8D46B342E53
11663FD5102E8DB6FFC8039417A0D61750E1EE624DDF041AECD61A9C9A71CD02
986992B15F4CAD81E8CD4B2A1A4C14986ABB9A3BF36665834C3DAF26E5A7A574
2CEF31B6911EA9FD8FD240463F1A7D0DB3CC6395217A0845410F635F6B7EA884
C1A171A7280E8FF4AC0D4C8A2199EAA7A1330604D0E557EE03662BD31AF90587
A45AE742EEE53221EF5E4BABA9C7632E6AEE83738BEF36982B7B6B27D9F3A2B9
511EBD13E6A5D5E64C41B6BD1F16D657CC2A89B68D6CA9C60D3A774AC7448624
EBE6A7D0067E34B00A6210060F6439E9CCA612DC7ACE7AD12F478F25D1E97E9C
4B2FEE740BCF8F66A707BB17DCF1991BCFAAD6AAA8CBCF96948C6A0F57223555
F70B4116FEBF80410477B59FEB7B66B0473396CC9E439029D8912AD08CC1598F
DFF371264C2592CCDB0D90F33A44EC9D5ED3D838857FFAFA790C503696509078
9D4F09309A682485948E72844E317060CB54C640DCDD7CE47338B92353B26F0C
D995CB7C61DBD34AC593EF6F48BA96AE35A6BA0B596199AE7E8D7EF335D806C6
1FCB681942BDA68F6859DBAF68A357DE1D4BF32F18FC16511464CBB791F2C16A
1FDBBF9D7CF6333A5C0F5514AEA4CC65C257EC4A6C0F3441CF708B13E83EE1FB
4E3367DE4DB71312CBB85ADD21D5A7A65E99D1F143795E2A0F0A30C13DF094D1
4F4872A43C5C0726F68EDD3146F069085199CC16681FED2AD0A7BECC3931437D
C8BC95BCDC6E602C3A04F637137F04DA2B0B0B3C64E5F9E5AD6C0D954CE341DB
7B455E4A937B066F48A5AB0E1FE82E76C8512482444485E8AD4CE8585A501C74
C5AB5F77B2C4564899F5DF9BA49D9D26DC2FF80856421C2B6EE7B37D178BD491
74E5E639B50D8F4EEA41723875079EFB568ABD139F70C1EA8869611D9D4D50ED
0433274256B42EC01BA2C8189D5556B71345AC51F1A184F91CA4EF832E7D6DF3
E9E03BCCEAD202AABA71421FDB0BF0F83B4EB5D4796E42FB7053D4CD9FEEB842
D3520B31BE367A364877B96A40346172CE44FF83A7FC468D263C082BC703ED67
F8956F3C757799D61A801701C960BBBA44C2565214A84FB5C4307B6786088867
E9C1742F5168F3B5F4FCFB4ED010744C0D753396941A903A90B6354D47A725E2
1021B82B84CA0A8C1EA072FB59BCEE6BA70DD628D2D969B17440CA9AF1A54675
CBD7ABF2B8A8CECD91515816F305001A0B464FC379602573F4AB0795421FC320
4748B39BBE76D32933BFB3185C3972FFB87373F5C40F7C7768A67B861D5FC288
7F1635AACF2789E8F6BA4AF93B4D5944EEFAC690FF1C17DA3D4B6BCA807971C7
49CD28214D84AA201E7A8E6D59B712B2AA3D74EDD5AAA394709221D78BA6858F
BE3C3CE57006D9060BB4AB0E785079080243CDBCF22284D25B669F5D791A77D6
0993A5B74FF64283F15EAA51DF4C74CBB662283EA8E378C59720CF563BC40245
3DBFDE39102D154693DE6EAE1A527D1B6EFE8EE62F1EA78733B8DB6940BBEB78
2081795C4D1CB5CA19A4D834C88A24EB1C8B163C6D8A6A7B854FA6681A66CCC4
5F84D7DFC40B172B0F5F6CD72F7F9C926BBC4D3F77B3C2C2D5677EE9B48675F3
DE80F31AFEC07E547A1A360F27D48540FA56F817D5C135864C2A1F430484FD18
417A8D80E54ACF903EF605898309C7C32E5F90A5F8B14BF33499E52DE3157B5A
EA9521561B3D9CFA0B63884D6AFB8A7A63A59B14CBEE704E3C7ADAEBD08BFB73
08947D48C39E04F4C7DF5019A3B7A245B5441A3820001D77FD266D6AEB55550E
6AC1DA5370EDF2D710DFEBA70819670553F4815030CFAF2A2A009E68B70D8B80
3F5A6DE04B8BE71810CC4B464EAF9438306BFBC8B4DCB7100573EE24467B0026
5D6EAA24632B21C90AA8A7868528F0F147EFE84130BD4D15BBEFB1D0787E7DAC
E961CEDB2C4E4DA6AAC4C19688EA9042D10A83BBAA280427981CFE224ED9CC8D
10F0FF6B476C1787F8710CB030BE5ED6D97B91661E126FDB57662DAA9035B929
E224D69C2512D0ACC257D16E104B4D96A16FFCBE378483B97E30DCC022B26EEA
11A1FEFF0678907A7CBB1FDF9EEDC40E090D0291AE9938BB00D9A62E35800745
8F943C4221739BAB6C23511E051C1AC7DB7A141B7CA5D39B4E94259DDA5307FA
3270B0DF41D25D494690EA2D48599A7C1E2D05382FBA320ED3988B410364C118
601A62B41F872E0E7562AA10DF6AD46C6824E3F5D4EE96343CDBD87F3040CE15
949E2ADA87C424CC015FAE7FCCD5E3656DEECFEEB5BE5EAD6871DF19501BCA77
E560DB0A202D7913BBBAAA37B04C197911208D243EBF81DEF7FCA62C48B0BF0C
E151D028AEC63D423CB9BC34794F74A21946A3F4B9433AF21E8D84C5DE201D50
4CB69CA2497DC90E9F3308E08A0412B4690D1EB332E1BC9E20989C124A54C75D
B38A15A5891C1639AE6030118D7B5C9630EC46362EF3814427547D6C0FC78C31
5D7FB3E53FC85E4C58D4591CB04F5DDB8B49F0C38C28D90DF40B017769239312
4238BC08C4DB3F4F09705E0E5E0C8BD0F9004425AFE7A66E1A2C3401E363007F
BDB9696647AFCB98B125E3B3CB00FD6940898BC3E8D85CF1402AFEE4E773813F
30492B9B4E1001295EA77181D8D379EF49E09C5DACE2837411306D82B0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols6-Regular
%!PS-AdobeFont-1.0: LMMathSymbols6-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 417 117 0
%%EndComments
FontDirectory/LMMathSymbols6-Regular known{/LMMathSymbols6-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols6-Regular)readonly def
/FamilyName(LMMathSymbols6)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -88 def
/UnderlineThickness 31 def
end readonly def
/FontName /LMMathSymbols6-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-4 -948 1329 786}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F1E34D6494BB6367FA2B172011486EF5
844F5B89DBD01F38E82689CB16E2BB46A5E39043E718382C77B554CE0F5BDA45
B555F543B5A4669091DF58B79AB8A54B63C4D96C02C4B32021405D3A086D8A06
2E73A4A478789C6E51C058FDFA980ECB2F964EA385ACFC9A15416BFD38DD998D
35255414BABB9C6DD923B8E866EB22731B625EB76647E680B79EDD64B5B6D9B0
ADE8F024B2CE77FE9D87C1A1286ED288D3FC51CED96F6009F87E505A8B9D4288
4AB9134B8325BEF5BF60359BD06C20186FA72EED84622454B0848BB74A51C541
E9F8468308E20E4D41FE78074ABBEFB80E7B5B58641F660CCEFE5A36C7E1DCC2
862B5005575BF1D4A7845F976D9A52A7E2A33558953A65CEB6601B904A42E75B
92CF31D9B57842CA62CC666700C974D6C7B88C4E3D1A1B143DAE1E2DDF725758
E2E6EB357406DF364D2720E373DCE143CAD7FEC1812EEDFFDEAE20D75039850B
0314C68931A618291AD30A299FFD982858215E9CB25FFE9A6A805EFEE2B01B62
8A682DB0C011615552F03DB40513901CE59ACCFD6C2D6F05E2B6C8AAC7EE97D8
80BE1AF192DE2AD3600CFE96D7F2280FF1D7AB28635B3FFE975FDC6329DEC300
1F56A4424DEA4A64D855B319ABD08B73E84F536BD6331778706987D7AB15DD1A
4BD7C272B4A0B383C6A680B6AB91AF0A3442AA8D1F163221902D87F9923FA77E
3346F09DE23C25D4CA5909B956FA16229BCBC3FF36EF6933F33D529CF2847EA6
D3A482CAA539ACAAEDB0299025B307CA410FBA6D82B4733763DA07D521E34DD1
6523917F436B78AD360BAABDF2CD7016886C28EF390A51085691FFA140FCC6C5
1D7EA07BE7F71EAF563D92056FD6F12A603AA2DF6708C73D283DDD92B043ABBF
3DD2E24A4D5FF0DD4EB111616C102637EB49E17B440AC54D21DFB7B2411B2B72
CF35172ED4505DD175A836C0B599415C638471E3F0B4BC30296704D41973F487
D4C1B50A848F2E8C0A77E7FC13B044E5D336C31BA0F189C36F9D48CABEB786FE
A0EA4CF0DD9598A9036B749049229902B646FE10BF4DAA942280A326B0C4356B
774DAE57D20990968A49116A09BB7F320F0CCD98F2F7DF378E1BABBCA65215C9
F425C048AEC1C929FDAB375F3B47EC3157488ECF3EF7B3069EF25ECDCE357DC6
CBCC1EE0BC7AC38FBA8107608BAFC9DB86B570FDE7E6248B6EDB4ED358D5C45A
FF2A3ADDB1E2963200F24C20A0D1CA998BD258D1C694069BBD9DD80466FEF509
9993B56E1544A2EE08946129664626F0AF9F7E546F6AFE62DBE7DDD5D3DC32A3
7C5BD00DD016072EEEA098A86BA7B6AC9F23CF55920502D0BC7EFBD5CB140E02
C5A8CC261C06A7EF3CAD09AD5ADE65A51B6A915CA708D66C339EACCC45B962A6
7731C76AC98678B54E6E3A103D82F070F486122EE08A4870456161458B6C93A1
602C336D492C4F6A7635B85ECF70EF5733EDB26731D14B304EBAF0638AC6F539
C21436A7D25573FF22A0D0A0D452A23F35B688B79D566F17691C3E15ADAE0B32
D5928724D303A23819484A60305B58B88920CEA06984C65370B5ED6B7F0EC00A
2490B48D7DEE3A263A115E406B099A5C0C9572859C117C40E1883818F638FFA0
C81307075E817AB54644AE5B5CFE5D573FB3C23F20A445B43A5E8B41778D313C
FB95D5F337FFD07328565672AF18C2E86AFB4153C60473DBD16C9D39BC08DF9F
8ED8D4C25DA3D8A4FEF6F2E4C954C562318FE8C3B8A7DBDE8F82AA3AD68BF81E
205B482B0C4AB50BA6450E56AA8DB6DB7E2DD93B4759A32B6027EA855710C966
B7B3541BFDE160447700520B9C18B41BD46A1F8EFF45F926B9E1B565C0F0D458
67
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic8-Regular
%!PS-AdobeFont-1.0: LMMathItalic8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathItalic8-Regular known{/LMMathItalic8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic8-Regular)readonly def
/FamilyName(LMMathItalic8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathItalic8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -250 1110 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD112356772A65C14D49D03C7D456E5
1A27C2ED815B30E268B02FB1D2E769067ADAF25F28640307E3A89F0B04F44A1E
1392A44B8AAD82CED1539B6A9CEBF441EB81775C7EE4CC12313F31FE710DD429
4B1955DF2BF7A88E1EC21DA22A63BF63E89C913EC01EE10A0601D6FB239DF59D
2CEE7667F4CC4BAF660B24F635F981638F40E8CCF07F21F5B5FE3B5C115D1000
0E4B2ADAF7B1C53935EB7414421DB49A59F82D98D08351CB0BF0C06DE836CFD5
42D68D51AAD4069871F257AB7733F8EABD731FF9B0E3AD64000BCDBBEBE26F88
C96730B45C14458F42927E24318A97B48235E5FE200DB40706E9B41AF7CA33C5
67BF7766BD396006C5364D1E736B256538E5D163CDA75C4F419620D5BE5DDEB1
F7D7A55B5ACEA2B2EB4B78997398C7D38B3D7B5774D980C087236ACC7346F518
7607A19E85C83E2C6ED4F3FA8C15B65FC3D117BC5E3FFE33A5B7A69F7F7159CA
667D96B5D03E4C5E55FCB1F4E2148B4B8DA87567988F07CA181FA6A3C3C30A33
80AC6F4E92903C47BF489A2376AC02B00B8CD01DE080C96A452D52B4B56F9520
B85062F15C4828813D3694BB4BD3512541C82005C9AA5C065476148A4E47DBD4
580CB1ADD206D19E7D653E2690FD48B252BFECDB2C64C96F7477B2E5EA0593A9
84841E96F931F01B2B61C26E8450D5F2B37B51EC364BC2A1233FD108DFFE0F00
AE57465ADB0191B38D14E89413FCCB77A9FCAE09F59A3F5C352570F7390BE91D
178255E10C02CFB7B679DAF86EB351BDEBB8A7D4DBB9C65715A1355FC8D2C355
BB452D44AFDF7E25676F3D6F6BDD983146333DDA29DB81DA54F44DCF5364857E
A20DB59006F78BA077D29ABE7A537D2358B1DC13AE97ED90F7D1AE27A1CB55C2
F534E2B546BA5531AE88840CAA741A57ED1F4587A72E74AFA15F15C69046ADB1
B3B6C392AFD856716F96B850D6FF61144F6A9E51CC1B8A86A35087D4A3A37081
D7529F94493EB4739C267B8C54B3A1FC2146237C1D110D4A10112D496250647F
37A36F59299DD9529CD003AD4E0847689E519FBB2B7796420D8EEF6ECA04DF85
390E261B43A555BA97B9F30C1CDDF679DEDA691E30773C286B1BA80CF1950B4D
B1835826E276E14DD0C69117C6D60A211DA5728E51F1E2D512647277B9CE8FB1
6D00896BB88B0A87F1898C0405B118619CB1786D4976E95D7F665952CD09A9DB
9B12A5D759909821BB1FAA64201B5D9092328325E5EDAEB91BAF1279E7930E73
FDE400C7E7A7EDAA030063C3D390A2674066DBAD1A9C3C1FFEF085A0B5E1375A
90141467A712075A718616EB0105CA91B3F4BF9007CD86D2AA045ED8F5B22144
D82C90F5D0F6EF0542C7D93C5D9FD9416A2662FCCFEE48E79225D0DEB8C81315
39566D7BC863F004227E862427E6DBDDD7768DB2F8314DFFB54617007C1984D4
43CB98799B2FF9725F59246A382A2EF4409482E8E802CC73A46A824E9FED1CD9
9590BA5D6EED60884337BE00E6FFBD6C170BBACA4E997940E90C4E6A2E6A34DC
95A6D67BD4C4E854BCDECF5DFC2CD7D09ED923234FD2A4613FC9AA1D2E76F129
264A99875D3CC1A3F0416B6A57D5DC1BE1810AE5AD8646CAC4CEE0D417E875D9
065DC87FE4B0BDCC2A8FFDCA2EAEE85FDF40CA19B78BCE05EB5A096396CA62AD
D6CF71B58F3F96A0EF46C7A8AED252C2CAF15D3A748549B6F6A61F79CC9DA24E
E28A184D87E401ECCBF6DFD3DEF05D530F2504362D32C8EC9D3FFB2658CFA615
819B889A7655CA63B822AC5E9C3317FF9859E31BCB65093E96A0FAAA1B688591
74DF2EE89F828D3CA981B1080D221D05B8F20F3DA36A32796E9EF6CF01CDF9B9
95FDEE526F8689777BD80A56CF580246A8A3A04DB4848F9BD474843E3A99ED69
86DCAC79DB20904E41A09C8E7725B4F629671C96961BEA8F3C44C56A09C74FEC
9CFF8E3B0CE768240F0E8CE9FF939E4B1A63656648C1F2B427326DFC2A455157
B143D4667E5FDB1D83A09E72A7BAF80C0F8D698486EE41D9864538FF897AEC55
226C5CEE963A85DE6B4B82B735AFE6B9AECBD7A3A93A3B12EEAD9007F5E80CE8
D4EDDC0B6B8AF51802727ECC7F96AC4BE2F98C9D92C6F2F6C635A2C1FC13A7B6
A78C9B3F3FFDA30525567D308974A281B8F07445C0EF22B8A909837B783827A2
04E58D5254AACD159898D933B0CF052A2F4DE200B819668A4B655741BE6713AC
F0037091AFDDFD544FFB089D9657463D20D81F353386EAEC4C2634A7BC3204FE
73870F380A3CB4F79FD9869D9FC19900DD464DCA49B4E75ACBFCFD9787A23BBA
AD5439DDC54315BE4E03C60804A61DA8B23A3171BE3F30DEF1940B87F93CBC95
22A11424AC9ACB838235B4F2282A651B6282D3DB3D0104D1746364DF897746CD
0533B082452E43C85651097034D995575A7F6230F54A89E8D8CB1F59C8E7EE2F
5AE759173C293BD18F28D2B2188B0E51975FD91D9915C64E5489103562FA1BCA
5E23F601F2720A7C9BCD2E313E2E5CA63F727D0A8E5254F2220FB14505E8F524
3D86E4ADF3E9E931C1D5481168775D04E71F73FFFE91300FFF873A19B6788CBE
8F3F43DDBCB3AB830A53E169D848BD36C040FBB75E8BEC5A18A72E8D6D614EE0
CC4799888899F5B3C8254F3E980BA1679515F00D435A6F30844794CF83156458
19B2DC81AF9AC003BBB9E5C69FC013DECEA4206EAF3DFDE7E05EB580DA8C2456
BF380EC7C0AADE69682E30E9CE0DBE0A6060109E6D6E723FF8BB788FEB0612EF
DAFA3FDF0FA251AD8649B1DD532054525960C3FE5057E08A6C9826E4FE10435A
F1DE3F9015F14716C5E374BC69CA58CE22D3AB0EEAD87BF1D08DB25BF0B421C0
1142950A21344307AAE1EBC6EE7019D705744189B8FFAC6DDA2B64BEA19087AD
A58D717671BF45BF16BE72F99F48606767E3AF0C5A72E0D599998B9E66615538
07DA45EEA60730ED0D0769FFA191B9D08912E62B529546AF8045A8D1F2BB91B0
601496E8F19787D1D56DF571F1BC3A6E62DFCF0684A6534EEAA1AA5DE94DCA60
E240B68B3A7815B5D1F2798D4201A6C59705B30524DC51D3604B05A7EC076A2C
CE61226AA319D190C6E3D99DC2C7198640F9EC58FE9C9BDAF2C05BE93B8C051F
53A285185C495EA417BB02D09A4596E33E8B0A87B940DB222FE237F7846A1D7F
CE128888A3ED7BA92D77A4FC90C1589A19DFCB2FABE3A923C3B02C0112D9CC30
986CF27CF51836900AD6C8FA31C6E5D75CE54DB33AD78A8A6FB59D580A38FA9B
E565D4C89753AA4C4890D36556D12B8D064B20FBC1EA28AA9F7E1F8A9D8C64F6
148F6F54FDCC12C898C38C9F1917365895E5B8EAD7BFBC5CDF2DBF14835892C5
E1ACCA31D2739F3747E2DECDA0B7BCABBA69910F2C2CF640F62A24EBC99CD16D
5FB2B41107493E16DF894EA65E52771795616CE12037B55733E40BA0CC34354A
F03EF24F8FE028B8B989E133C420B0DAC98BF52FDE95D48541516CDFD1D307FE
67568CB2CC779438A628F937D0D8D1F049AE1A1BFAF91A2FE2D3028D329B8BC3
1C8292CD8FC330ABABD757ACF62F41FCEBA4DBD9ABD658C1C34CBADF8D83A962
2939CD55B5F29AC31A4FE11CC9E3F921783395AD14A93BCC
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic6-Regular
%!PS-AdobeFont-1.0: LMMathItalic6-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 417 117 0
%%EndComments
FontDirectory/LMMathItalic6-Regular known{/LMMathItalic6-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic6-Regular)readonly def
/FamilyName(LMMathItalic6)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -88 def
/UnderlineThickness 31 def
end readonly def
/FontName /LMMathItalic6-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{0 -250 1241 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD113E9A4707A44200A15F1431F9E64
6F74A5028622F1CCB472247A2D3C92D19C0AF82A97AA93420B2252C089999F87
E9B99CE919915A7841E47F18EA2729DBFB8D0F265978077327D4885A16B99026
3AF09EBA03D665F320B724646224778F5207197EDECD6BA321B46A9C7B1BE014
C7AA72E7AD74DEF4CCFD1905F237AF725D38159039E347BB692EB0BB42D933B4
A4F5113867999A3BDD6E56036DD46F7BAD9445E0EB69D6BCF844741CD349792D
3F6A794164344B7301C4BD8C500C92214EAB1BD409FE0D61470E69C69E668D73
F1418A89939E9AD8AE9F3EB718A13741D72F79B4E51DEFB2029F4979E0C7F79F
8178AD7DFC03558964BF7FA8302240FA1B7CAC01375924C41D0200C60452AE3C
2CD5F7EB6BFA476372518118DAADC1D6E053E534830EEC37A0160A24FA76B86D
3FD75B97E83D4B1E1216C901748E31B5AC51D15BC8B8EB18D83CE35525239F0C
0FF52411E08D5893C09162BFA0EA49E1290193D19157A30A5F21797106802635
1F19BFECA6B40461144E82A051FEDBCFA7B096E34A7EEC13F93B74652D2EF4A7
08522EB97A15EABB2AF74CE73F5B8935F65DC93EA24E129BF18D5F8B4E890B81
105D0673055DAC2775314AC07C1D99428076035B0EA20A382B61A8B4548BCFF6
0F0A48E059E7497260326AD89AD9815B1F9B36430AB8527D61C5EFB8AA5B6B83
2B5053D7C25089EFD48A2E023C219158420D77BFE7CB795628865715FAE6EDB8
89F423F0B97DB7AC2927F97EC4ACC2E9F4BCE46EE66B37A2F169E33177ED4408
5F93FDE909FA829DE0AE5D9BD0BC4A75A0141AA472AD0ACEF816F27FB4A6CB04
13BF8944FA31EECB2BCE2983E7CD2C9C68868890B42D91D3182096A7719209AD
32A69532F10D71FA1567B10B0CCD4813495F34F89764223F7D45F888FE1889BC
F7E9E0C3E520C1536228FCE80FD44B49B8059ACFE6DA964B7D4264039022F974
E8A6827C6C472B256C93764DB10430FE72F5A3C8568EBFC881F7492CE6F830A0
E4740C07E9AE4DD847657DE23503184AC5405471FA5702317CEDEEEBF7EE39E8
3A822A47B5069F752720F8C5746797CECC7F137F514B0C910E877B6A3279A380
80748357D666F5C72E956E6FF34215CCBF009327020596BB522F42B7339C0C47
375F505774BDAD7EAB787645B767282FD930DC09D410913C4A1E5B86BCCC4FCE
DA60B99872B235FE862AC246DE159E99B54B02FFDD1CF3FA3DCFDACBAD509647
C1A420FA77DC05630E2B441B58FB2F92345E65092713E604049D4E328DA745A5
B61156A3D7B23591D30D89DD2BCDF16F68041DE21AF12C1240C5A1CDF254FD32
FA614CC0E7F66C87E1FBA826EF86D317B603E3AF7D3F476DFA334A598166463D
E1DE56496A102F5239C3F80B2FEEAEAD38C6C6FB9171B559BCBCE4E812BE0D21
FDC75BAAD657B05A0DF74108453AD997D6D7048F70CCD04CEECD68A3D13A9726
46959C2CFF4BC676CBBC33AACCA4F06D8D2C960D4737EB3D011C189A064FF380
038AF5E385E7E61A6D891B83C4919A4045F8C7CFA3C26F8674A8C50DAEF38E3C
E8D779A438540F15F9F409AC79B9EFF2FD8BDCB8B0920CB812002D1DF9760E35
4ABD79CC0852B8E0EC493FA4527A0ED3D9E2D672786C4D663180146A552AA75B
1EE9F196E0A34845AB4E67CA891262EB157873860B8EDAB05E4701A0E30C7312
8076010462E13B663E748EBEA1927480BED66DE24389A108A36533A376BCC5FC
50AE9DC6BFA19122803658E7D24AFC0A01B7573EBE7740C05AFE7DA8539BEA02
63F504C38B863896F1A63987300F00ED000B01B4891015980CD458C53D16080A
38435A701A3CA8DFB318A364FBE0E1D311B8229F290C7D413E7830B6A9039F68
FD9C5E09DB1020AEDD8A430B47B5C83E2C5CD8C8B8DAF68E2FC93399B0EA57DD
897E358BC8709DD2488F08374067EB521816690D1F5FBF644F174F77616DA73D
170D09A76C45A7CAC43B39CDF39151072EDB3C6C3EA4BA92F91DE287155CC047
605462BADD04D5D75B1ADDDD8D4676FF4993
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: MSBM10
%!PS-AdobeFont-1.0: MSBM10 003.002
%%Title: MSBM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSBM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSBM10 known{/MSBM10 findfont dup/UniqueID known{dup
/UniqueID get 5031982 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSBM10 def
/FontBBox {-55 -420 2343 920 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSBM10.) readonly def
/FullName (MSBM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 82 /R put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943E919FB4E3240FEEED78EE63
0677FAF39AB2543D18C08A2B98B97451CD42CB7893DA8601CC0F45A65BEAFC64
EF72554395DA801CF2E9E3B03F65F1BD98F8C5F8EA06D7457842303C1A817E7D
69821807328AF426B9DDBC188A79A66FBB9E6193B4A3EDFE3136C6574B9C4C94
E2CBA4FE7997F949BB2DAC0D329C2AD8E4095BD18A037AC9F77B794FC389E5CD
56CC4C0B74D64FB0D02C92B88942C18B6DA84D4CF482DAF3A01E80BE483AC6ED
AE98F5F3E49BC762EF6BA937D528E751D9588B0A1E82EF0A5998150EC3854472
5A91EB983915BC1D6E2C3E615E0267B39D6937ECE0EC16162FE76676E5B69F3C
BC1AD934BECA284B89F0613B70876247D768BCD246883CFF4D819D6265302730
7E4BE6B2FFE7E91CCB8C6D2AFACDB4C5DB9688153E1D6B2DE136BF7068418A4F
2D1C0CA301B1B97290B46EE14B8286A81E709980F67382A5132F01B2D44DCFF0
9753E776AEAE2141D580E64C82598DAA6DA4057FFA9D02C3B77AE15A50AB457F
3FA5A10A3C986B22F8E154C1E564A55D3BE4487677613DCF793F7E1B57C9A925
BC57746C25FE567719A9EAA9CC44F1D0FF8F92C03132B205F57E3AFE9FB66632
D3FB3EF5BDFB9848030527FE759A5273CB81DBA2719611355F43E34F8FD7D0EC
9BE47685A2D122C9B60198A430C5F5E3F972376F0FF4BA52BAFF64095F7ABCBA
022622692231FF87514FD912B80C07A0EDCEECFA629E2734B5EFE2604E8DCB24
32A4C691DB4CCCF19EF897A9F4EA5B2B5AFCDF87AC06B93669F3007C1295E016
FF0A99324B80E37020B1080E80949525B3278DF111ABEA48E7182B6F4DE2DC90
B8D31A953343D5DB78B1F2CC6CE631EC7E3D0041A823DF2A4702AAC0F0A2F018
E5ADCD42EF2EC8AFF6F4705D30042BE7B6F866C14AEA1CEE04DFF82BF14931B8
D297C38E6DA6E587C23EF0864F69BB0DBC9C1EFBBB97B92BADC336A4AFAC6A91
0A6B158DC42E975CB5D8D2054CEF367FB112456AF50684C41F80B1E7ACAEA853
B843CABA76BDE9582090299F423519EE3AF8F83AE7F7828B314B6E36E9127419
F274E9FBF5622C5E48D7E95664D6C0C1006661038CF2C93BEF1DE34A163A2C86
693A13F4D0F052D2E183F36401F0C29862BC1B36A086524F76C7EE2C6D436A23
7009F146F1756DCADD3F70C51FDCE610E30C0F4AC538A2703423A07976ACA74C
25F4CFD6A92969E206375FB0C672E45948B0E832F2BE688EC22FEEB3E06BBC3A
272F73081A30830AE4214F2F029918FCA40BAEBED6299EDBECA01E08F27E5627
F53BC56F4AE7CE2D6273B27323AB829E2D51672A4990E3AEE84331583A99DA4E
63610AF8F10C50FE6196E3F4C1E4FC9BA6BE0ABDC81A0A7BF6A5792A97BD0A7E
7BBD31C3FDC01D734550843C8D84C6CC0B492CD1A6CCD57428F03A863E959C77
457D401028FD00FFA9BC422FD09D8B8A70446A61CB256A2FA0B59A2646D9C5FE
961894DB8B315C52008B4416AC35439E010BF90E43A05FCB2FBE8E62385E220E
588B7FE5509F1BB71150E159D01D24EE28008D4213227FE9BCAA34364B1039F6
BC142AAB19C8E9B15F0113781DF9C9B3BC145955552A901AEBA588D39D7E87F1
CAF27D315E168807021B0CD1B2CE13B611A7B5FC28DEB4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFB8DF7740107CE11D9F1E95F04ACAA904AECA8C
66082082F59CB8E5E7A96FFD63BF90F69931F3D5B5F81C3E234904D5FE5CCAD9
17381670D1548D72FE715FFA30FEBAC715513E0525049188B9D91BF7EBFF4444
ABA5490DC6A5CD8C1BF3EF1341A126980C7890794A85EF6CE32D227A9532B61E
E1FDB83CCE8849508A3EA0FDABE92387B526ED0C9A92315083DF5BE16201B404
07019A28B699901B1A6F7C9D6981CD0DC5CBD97109E9E4E462E58A293CD1BC4E
240FF934EAE9355F75676B21D53206AB65DD1F7D423FB9FA7332AAF569948EC5
5BAD355BBD85D66D616844C0DAA6DD5D5492CA1736A52B8B9D95AE23A9C62EA6
A323C0FB989D53EB4A5AC25A0858B10DC043CC9D5E8CE27B8C4B6E8B4F056867
F1C0B014E2B65B5C3158BF4870481D8FA433728039209E7FDD13ADBB921F3715
DC8998AC0E556F16DB74C13D05E062FF9089F981D89FFDEA459395AEB1FD2A23
13C4619C3924D516D06D7C952B12E6646662A651EE4185C5725607F457AE1E83
C41C6AB175C3200BE7F1396F9CAF46C80BB7C866CD45B80656513B6871E5258B
4F80702ADB01E522A4FFE4E1A156DDF0127E2C87A8AD82DEE1B8090D5B0E4BA8
59C4668A7EAC8CFEDABB124F8CBF10A621372FAA078DC8AAB00146550EE703A1
4B531D522B476453DE7C661ED5D3477A95C24980073E63DD9C90CA8D00E81400
9234E2A36EFBD854F868BC9301D33D0762434E5810C493EEEC7F9BE98C8E56CF
86C591B705CAF70989799D9D24281EC83E6536996D29B4A70F4A479D38E0ECB7
3664581BA1552F680511B5FE3EAF7C61513691DC7010505C0F1C9BDDF1747CA2
F97096DFB28E72BEF671339F900E204FDA3CA9C2B6D2FEC695D860792433C3DF
19EE7B5C27E7BE0538ACEEDA4C755FCA8F3572C613CCC6B7436CB4445C100492
702A703EE13DCF5C2E244DC85556F666C7ED81894089B685DC8A4A3A66DC9C52
96DFDE89C5BA45AA1E939DFFE83840267D7D1A70288C3CBA2FFCDF1A4368603D
692DF9729847B5A4A1E37B766568C833B98C74B15426DF65C9CEEE3E3153FCAB
3050CA75A82E9483EC5B384BF87B91E7273975069C907199D36165A282C7C6E8
5A1C921EC9198BC03CE04A0F0B2113C7B19A19D7E3B17E6B882EFEDDC7E7567F
116654EF98052AFA60869686385A3FE61B5BA1369DB20EC80C8086DEE33D0297
BE0403E7694909E0D4657B9A187A73655F4CD055362BBD43CB8103899EA8517A
B8C18737EC2FAABD1DA7EB3D39A3B9FDEF15DA1F1505CDD37755796CD5FBA681
D46CF9314CC3D7E9AECA005DB43AAE1E43E95639D799B5CDCA5A5527048775EB
15B80C65DB647AED3D3068FA9D4ADB75BEA4DF343AD30344E6B4C7F83808900A
54D9B875E95CA8166B84CCDE9FB92FEF1C8224A481E31A42902243B83DA90CB0
F503589D4D806436C1287938562B2203565FD277C13BD2342C13A687C6CACA5E
2D35E33B794FD84C274A4D9C2643EBEC142CDC1A985E6F3CE8B6695B3C201F4B
7CD67C0896DA7E0638810834D55746262B47195560253D16818C5EF8A7D897D7
E9C788459B39B30321C6ECAE276B63BCDCAAC66E6F6EE4CE4ACFE894C33EDAC7
5933CF06BFDCA9E282359D114C1015DECDE764D6A2B3B5DF5C4A154702C42C30
D07D729FD4F2FCC3A6B97E1F5FFCC19203D7FD140B5D3C78CD706A23DACE1AB5
B13A4DEEFD88C8AF7468EB28FD5E0CBDF9E23D1FF320EBF19F28142D78CD96C1
1B52FE223AC12C65643F2111724CCA0EF177EC0C2D3AAD49BD2A0BF511A722FD
CCD19792FE94B9FDBF4065FC6CA66B02202BFDAA805E647AF9BF332D5EB49BE2
1977146C8872ECAD4D82A933A8A5E16FA17CBE3F977509340FF834EA210BF0CC
D3EC84AC8DBFABB91D54CC819680322EAB72E1250A760A2AC753F817F94AA693
9DAE286FEA07B203E7227497062C30026AB518D1BE399DB38FCEF12C4E988752
A88D8C98DC43DB22C6537028798198E2D3B0453ED720B08BB46736BBB09EE961
0D507A44794CEB9A3EAB4998A31F59584455FCA7617F2744370D43F5E2B9EE5C
AC85A80C440A6FDC9D19E8E4F78CD805598AD98987F3158905238F53B5565761
668A6EA34CABAFA33A7C345CCD46EAAF3E000C9245F536030DE2F2AC2B228E07
453FECCD0AF58C15FBDD5D36338CB0ECF40BA237177F6DFB6E00260EDCED9A6F
C8E5B7B915712E24D97A3E013429A238307E3A46BFD486834A752E5C0D519117
BB643C87DD94CA2BB185BCD37C128178A0F79CC8ACE6774BCE7CC77605F93ABF
EBD803E01C35504AEAA61F56E5B463649E058E104A8537D3D81053D9DB65EF6C
050296ECF0188950E744AB53050CE216C016608427C3FD501865604B85880B05
3A592E36D0A04CD581917A0935303EC1823825BF2E2F5C26BCB2EF1C38F3C951
2D50FAA648A9822FEE5B4BB37010E988D53382FF192A77346C86A5D1487047CA
DAB6064D531B1FABFC5730E478369E2FC89F2F28C168E6B988F7655114E5FF71
10BFC9D5E0419ADD2F5CC1C09AD68EB2CE58E9288356FC2CB43FFC49E6767BD7
DFCFA10CEFCC78AE7264D6AC158960359E31A4379AC573D700B7780D298520C2
D0698C337BF594D24900FECB67287A8B4CDB963B1104272310678F74491DA157
2344FA545EAD39D3BDE3E416E13D6B23272517D28E9E093AEFA728236C3F0625
42EEFDCCA2D1CE0A5DCF82C18687DDECD38E11AEA8AE17B02D3D65057422BD31
1717EAFC337558AA398E37BF984F934C66986C2EE9A510A9C87045DDEC6576D7
46C1AEC54ADE2497021A2B1380CE9F6DDE8322DE6BAC3A3A2CF9913A8E082F52
11FD815D7E55560DB1D261236A9754D3989E1B31830CB493F3EF4BD87036A247
571D2628CD9A1A562F1481E9D0D3BFB17D34C090BEAD2AD29936E9CEC739A140
2A059B6BEECEA23B623899E68B5258DA53F75F1F875792A26AAE7F316592E7DE
134F775A835D46A69D1C4645B5BB958F763828B23FFB6DAD516D7133BAE9E3BF
3252B057ED2C599B423AC51B24F2313F3398B4923812486BC1A70FEF47DE1D95
4392B61E683BB1437FDCD532FE3DEEE6E26212A073EC154B21A663D18B4643E6
6382BBB50E715A7F2E80A0F9D2A69E656BD47EE042F4BC7B43D24C652E1387BD
302832DA3B044A853EB94D553D542B818689CF391A95DC4C962D8ECEA8E753C2
DEA7E42963A21EBA9E3D4D08CBC96D16DDAC763D90BA0719EE76A3568FB8B1E1
52E1BAD8C1A223293147E2BB65236929E6A93F03186A29C68611D47F7D0F55FA
377DFA6880F5240005FCDBDD3874D7952E86C88E94BA7020EEE34967B45D9924
D8F14C06021B403C11DCFCC7391886BD4DCD2A5D1CE3C5DCF36A5C431C4FEE37
2219E708F50CA2A79E72C1E086AD76C19784527E7D439BC23540E225075C9CD4
7B1070873F9D00115D6F5EEE9257AC0760A0751C40846188611E976891A2BDFC
66EE858D35E6514353D4CC2C65CA76AFDBB19363D152800AF844B9D32CA7BE1E
DEEC9794CDC1DA7C9208B2FBF7164DD4B02BF9C23D616143FFB85D78805A95B8
CB191C775A2DDEB0E51C02A882A57957CF45F4702A1B12C6D0D4D06D60D9AD6A
E23E4FF64CEDAC326536CA1F75ED1BC7113F02600B6918D058D7B7A624A24E9A
DD421346F6422F76D7CD23E1AB6364E2FA747EE9A89161F93F178D7A24AB2C70
3D7B1D3CD0359C270151A551915E7D192C28D984DF2326E9204D6FF38C1F6ECC
DC231A7A00FE0279725720B9AD79060CCF85CBBC69F161B45D309D716C1D3564
7E6DCC6FB6A7D01150E5B38F3410D8AD65DC3B10A72C2CA8776F44F0AF34047C
9A780F3B520A8E750230D5045B7FCBD08EA5AC1920F4E395EB7A69DCE16AF779
DB599005AA6824BD46D237D5AA012269135E586D85A70DDE33647869550C5C73
D8A9AE183F083F4068CD684517F33593EDA2BDED8920A21E23DB7E05FECB7CBC
4A049B275C086C41B5B2AD6BE04FA169800228BAE3E6D4040A1FB53A0CA3B022
3A63BA100BB2B4714AB955DA07C374F20E5C68403768D472C7A3BF07DDC78A7E
0B1B67BB5D65D83FA9BB78993FA94BB7CAC40F7628FB106D44FEBCC79849B69E
C10B0CCD7C0C2478EB2FEEA0C69754128BFC9CE69EEF33CC0AF6A8C1095C81DC
1E52C828A7A1155A253F961731D322161500E15ADA373D503552C0B76FC65321
51B3F78D75DBDCE36109147088AC6F4ED2BCE9A0D5B87E3EBC4D1B2751AC7FD8
5A8E9725D8D3AAAEC158294250B9EB097FF31C13D0010E4A3B947F6998826D13
3477AA51C2086D8E71C34694CF2C4CD167F58BD2BC30166B97677D66B683C75C
0023B71D456F5039788CDFF600B3BA21DAAB34F2A1CD801662934D7876C663B7
9E1F8C52AE4C8E2478A28257BE4461BF0D5737FEF579DD917FCB9879E4C129CC
139E86E1BDC3F13FAF7100C965DD33455E7C1D5CBB3A4F47906A09156C939949
92C526D869C325D941674FCE08A60064CB42F4B5DD688729F3F25029B9ED09B4
9109257898F180D2EF552359727536916795C304ADACCABE3D5AC2F814D8413A
9C3C1072C81AEA63FAE4C9D1BB679CBABE4996D7829CA57157A0C2191F993EC2
36A4D9E44AE3E5B44B2AE9041C1553FBBD500D5114E47D092A699F1B16C8ED11
5437A8EA8CD328F756683EBA28E9A425F2541111694F34BA48019506EEC3CA1E
4EC47E7F27B2F662CBA3E7DF323942B77D128367B2630BA3B1DE132F1BF1D988
69BFDBC9E1DDE716C4A15A3FE66B594BB6BD224F9E55B1187997532BD69AAA72
5B43A26538BD1F7F090DE03CB62E0F8601FC4D79B523353C61CD892B5DE37779
08625E1A91DDE6077E98045B0815694DE62B95341CD8FBFF1C35809F0B6AAFFD
9C0853A7F8366FE6622ECEB154CE3857FB4314F2EFAC60F810959CC588E29BEA
16B3FD22EBFB9D13E7D7EB59D752063455DC42F2E66AAA8E40FB4F9A575B9C83
CF9529ABE6FDB644C505C324413CC9AA82CB0A51F6AAD0A5B01A5E8E1DBFD8BC
7F2661AC6E39CB510EDF4CCABC332ED5E6AB0AD7ABE3064F74DE76B69F4B120A
FB3B01762041CA2B45346FE7CBBF86E3722B28571052662AE666F725C6D9768C
31E35C395C3BF67A79F8B1AC292F38AB2EF724E93FB56440DF99E6DC49E4D01F
9286E11085D68EBB0AEC3DAC7D1D4D52E872037221E7F6EA9377730189C37A68
E312A2D5ADF6881FBD66D03721BA9C1B80162589A74753E92C12B26A2295E900
D7206F8293785364A5FF35B7B2ACF8559569A120F9BAB156215EA752F4C5C7C9
7FB488D4DABAC4BC89F49090246D84C30C58439B06AEF34356E7A1F53FF5ED7B
2E617D6273562E2837A23DAE20229D1968E9DEF97FF74420E1159DE70A8E253D
C0FDC5AA0D0486B75FE82E88EAA03F65077776C747047E3415BFD1A7AAD2312A
280F0C0753434F33D438BD8EED6C9F3FBC15F2BB7C9625F4B09ADB0BCD6162C0
BA1320D30B5C8E2F994F235FA96862D6E547C966E53777E6C61793238DDFFA01
5BFD11310CB2B5A43C34CF9EF4889F6AFF0FA1F200A5F7EBD0A7DEDA931A3F3A
B2A52ADDF6EA963BD9D6D92DDE4B0DA61C03BF4360FEA49064FDE91297737557
3080E67AB9F074981BA85FE7B19453C201381B6C9A963DDFB35C8A0EECF09283
4CE115EBFF2995FEAB6837077555E885B67794B458C37CCDD9529393C60C0F7E
2C38BACBC1CBB32F277C3765B969071CF2D0CABCC3D1AA7351CA42570F44CF36
440962A3FB2407FB95EF0D975B8EDBCDE9CFD2BC34DF6068C72D3FE008DF3211
FE260FD0EB827E12F79C9CDFDACCA4E46381A1B3B7EEC5DAC3A8C76F4F6F7298
116E7FF68A8348389D30523443B850D88EA0547B54C7469642A1D00411D46454
6F5BA68A08279AD9208BDCF859CA4F3A080EA998A8B3D6477B3BFEF02E3CF252
22317FA36FFFFDC8DEB8DE95405D087CD69842B10468046D3114D54BD3389E38
DA769C5540ACCC265C01B8B693840EF15076D542F1B7856738005BD7C5E131E5
5AB411974C623C8BA08E65650BE118AFA77F8BF15F78C8E8ABCAEBB05F873542
4FC707DCE60BF20C69B4069D6310476781777382D05A089F2CEE01CC78EEEF1B
F8D4003E95F831AE1D7FA22B15E6DAC8C7C7FAB4A8AFC4CD1348704810FB5805
25AF98AAA049AB16C4459DCEF584E4F33BD1D1F421BFFE966396E29C4388FF21
F4F041822FB77ABAEB31C82A8073EE674510EF31AA37B7AD283A44C701B0C580
3D57FAFACDC9F059CFD9390228ADA6938F1BBF331D54AF9C627586F74CA84274
BE6AEF3D36CC0FD6ECE0EF01BCD9EEC871AFD57FD3DF1A7493BA19E9B52F29C4
A4A908677E909606528BCB2F6D0ADCA7C8FF82B7CE2B2A34C7E0359D0ED47D8B
C753399DAF55B7ED5A627CC7EA4CDE0CD5E0EEB0FA4D0BB8C9147D17BC7A036D
8AED54591271ACC1809460A8DC4103E35CA1F3D3EE2B04DC4CBE12FC99DA94FB
2648B845FEE1A9F8E0AF2AF7C74DB79A2B45A47D4119D363B0AB3AE2D83D5A22
30B4673692A3A3E95A52591D7947341EF7266B64F780D2947F2AFF2E0FFF984F
022FE12D3D43DA82C00F2CE00EC61E35AE94632F3BCE064A0E572C6BF7192D46
B6AF48AAE86AF2661052C122137838B8BA1D33399C264A28CAE78E3BBCAC1A88
1DF340EAF1D60DA34206677B5EC78742FEFCE44BF6E8AE22EB1DFBE8CEAEFEBD
FB7EC65FE35BA71D71B119CC7C1B82EE830C395F317324D2CD1BC0281FE40CC2
D3DD1B36FCCC46801181816B169923CEB18025FF4554899EF60A69BA10A8E425
FD8B26DE3B3D389F221A05A6D6BE4415388F0972D139F4C503CDD10D18F3D243
3B05EF6B1F64A14FAA7DFCBE938698D5F66A9DF2917F9F373AA2297896E42772
AE35D89B8028CD5BDDF48851E1F958530DA41C2A68047308D199826137D6F140
1CC1CF6E291DAD048F1AF5732A5CB49C21527F91F5F20D556E956F19270A4455
D81D673EA13D7A4E04BBBB4676534794CEAB380B1E461C5432A91CAE2779ADE5
03EFBE1DA2772892E691EE8576E76EF8FDF8E45F73DCA2513811A6517DBDFD7D
818F48E683560D2DEFA8FC9237938FF8642BD551DF6E19A3D52FDFDACFD4D7C1
4095298EDCFA5A018474F811BAA904267AA3E0008B883EE21D9BD24B48E4D1E0
3E7378C05B62DC03F49922B662DE05805DCBEAFC5985067ED28606969DF8A8C5
8AA092B9C46DB5891C5B4803C011464FCEBF55E8914E062ADA05D662F7C17BCB
9130CF7D71980C9059C3DD1D7DE4E19B4429446C0981B34070CFBF71A5FD3006
4011985459988C67DCCB845094983454A37FAC420C7A0C77E4D2A0C4E727BA4D
422508519AF3280921CBE7804BCD7045DDEC6576D746C1AEC54ADE2497021A2B
138BEFC66EAED3764694E07F4B4DD8CB81852F3379F1C70469E0ADBDA8CE8FA7
FCCEDE1BD4B8566A268801A7242BC3D7B89A083526C79010E937DF2CE903A7C4
D6C1C0082E412318C2C88A955A6054DC9013584E066CCC93A58F69D0D6EAC709
B039F529F615707BF2D2151A145089EF095F4606C9F70AA43390728A701FB14B
6B1700AE32B21A76C7FCC9878D2F97D0E3E98DD466CCB4EEC3E1642D29A3C777
6E54A682039510EA5F62BDA21D0F909C5A85B13FC73E02B5065DDE064D64B07C
5041BDB97BAB801C7CECE8E4AF40F73F7C7BAED2D2F3FFA02D3F4C69964CD6BA
5856B0FC7626D42E7B65AC7ADC46008D953CD801206239828B171915FFF4545D
5E6198DF7C495B95A55CC8E03798EB43CAD793E287BF3CAD7E8CAE1E9BB5F524
88DCDF2BE90A92E2F1DBDDCEB0B89F8B1D06278E80D0556E0B74207F0434C959
9D055D786DC25523AF3CDCDD17FCE45F73DCA2513811A6517DBDFD7D818F48E6
83560A9E3E63E5097B3C418049903E3F36885AD45509FC3F18BBC569D9F80305
E6C1C2C634E83B6570EBC5B25A67E2A5134D9DAFFA3EBF6C9D6B4E9B7DF27DC6
6C4E39CCD5C5D6B20CEC70058D312D3E154FEE43CC06FF89A8289A750AFC75BA
B14B817CE2AD91E5FB8C735C681B6128A0091209B70BA56CBBC8F894B06AB69A
867B1C0322F0BB4BE89B9A39149E124C564C5251F613393060892D50677DFFAC
CEC903E9ABCB6ADFA4EB07AC36443DC19A5A32D72D634ACA4FE2E0A3A7504E4A
466962C44C451D307A6DCC6FB6A7D01150E5B38F3410D8AD65DC3B10A72FBCBD
F899FEF3A2EAA4A823554E47293FE9A250E723A326E1545BF465C1E966923DCD
1D8AC4D0D2CC09E75AC1DDC5CF1EE514D77041F132E00B13A76A105AB3EB6E48
6048F31CA82B278A73BCD044A7886164FFD25ED2DC80B0B3920A546C3577E87A
DE936A6A10BF199A9527D50D7F028E8970E70524F9F7AE081E64AD1F71D6CC6F
F05467CC25DD384DCDD067444272BD8E263B7E189B06583440A285A85AF350AE
717A8EE630761C9167994D589C28466BC65F2976481C945DDC14D93FA25FFA4F
3241FE187003B2E3F01E5BC22E802FCDC4A042888BFCC7D504CCBBDF511017E7
7DE30E4887C0E7B8F2A0D884F8C09A5B1755EBCE127F142339F566E12D07B194
4DBCAAE4DAE0849CDC5543674EA5327A63F01ED14BB1ED9A0BAF084A91E815F2
29C7D109D80B8B72A6365A4A9445A71FC40FC6D2E81805BDFC625C5717D4CE3E
694D40620979205C101830531CAA841028DCD2ACA3094563790CC22C49190EB7
829531FB2A32A4C0367F3CDAADB9A370228BDD7123E9343274DA68CD751A7205
2D4FD983EB8C149E08133F1FA5BC7A0102B359B105824C00A57C24E914B8D25B
E7CBCA36897740E4696E90C512A7ED64B4DD0A85014604CE90B3658EDC786857
B905C7F1CB57AD26E5C5B015E644DFC74F758285BADF331E56D2E9ED9C7AA803
C33C8B14E0964533EC806BFA4FB77C5EBDDD89E6F6A2A28D47019DFE0986B398
1A7AE50601FE183027E7BE8F3B72A50D5E941631878B1817E0576E72FA80D7B5
A446BF526A58A7E0E9ED42A23970C846AD855F9F8395469839226D18BAC62A84
904AD23D3FFBF1AFC23AD71D52E4453E11605E71EF63C7AAA8C771A83D9CBB7E
FE4BC8C228D93F3C1D90089268E6CF430574944083775F9A69CA824B117CD993
34626049A9AD892D4D31764C8639A2B649DD1D242FAFB7D2DB31CE40B7477B87
FACC1C5AF40EC09260152108652CB1D729F35FA2851C69A340815DACED6F4705
9CEEBBB988E953AC22110E3366BC579698BC3C38137A81D75D5BE7E359EA0012
AA558843490F613C40802E0D32EF0DF8FE6F2D4E2880EB4A142DFB126E7B0C52
30E9DE6E29C0B90BC60B67486D3657BEBBB56D63F7D3ECA60C0878B250E28059
F269B6B1980DE233B94AFAD750F6EA9BB43271084CD876A14CEBEB8575B20555
E7DE52288086AE6C8C6B3B5D4AB4CFAC64042959D448E92E67031B18FCC25577
26A60AC1B8AEF5E32E1388F4986D0096F0216A62A4CCE62E5E2182AF738F83E0
B891DA7F0794B9AF93AB2AA8FB3DCB5CF14010371E368ECE59A563B4BE5B7CE1
DED13F0047C7A6B6CB3C885BAB01C17F7F53615F79D689B6B02532EBE7733692
8C6BEDB55DDBEFF4B5B4EC83A35F1581E47CD7DB9BE661C7E42AF88FA2A7B54B
F0E68323C210385FD72FDE4CA6F6DA07BCD171F0ADE61D639FA2BADE1817D8A9
D9136AA5D6F62578515EC78E18B045F400D54B000D430634CE1A11407B364EC5
961CCA9140BBA1CE8E49FEC7EA9113FCAF203B8009E97A7707B1CCBF6FFF66EC
1EB8714890C3BF825F9C769CD611F343C793DEDEFB0A2B19553AB58E627F1900
6CC52D9E451DC21450FD3DBB18715AF1B66490CCD4E31B19BA0AFF64E9C89BBA
BF49EEA8A49A829EB969C1C36C72AA60D2759B3D6FDBD9B88CC93C48A2601A2C
A6C84ACED9E02D9E46CB2FE2A6C3F956DD965EABF7DCA4511480B9077A8806EF
DADF015452EE3199841914F4A9915064E7EE69353131437822B20B5E396554E1
278DEA065E0CE1EAC06C17C307E771E6A1D218CB9DF7D47E42C0D27D21F892B9
AE61ABE4B1EC1E77A025073CD30F0346E71ABFE42789F541822FB77ABAEB313B
B60941DD5D58B1E3C2BA483CC406987E41DA572B2601547D1CFE9EED6BA3315D
4C717CF34D427347EEA32F65DF4F5E8C6E2F8437B384E23D011FD59BA75C28AC
30B740FD86ABCD594DE52FFE1E8D9C2EE117942F71F70C30735423F6F13DC7F5
015DA9043DCA4FF1C1DB0CDB39307FBDBD27D9816175D196832A206F48C62BE1
B20F349525DC3AE759E21AEED1C09E80094E8D59BF949132B1C6D12D3AC91904
0E598853720D37026EC57B7C497318CDB711169EE774783650F59A037F580D06
300A30CD7AB167F8259FCEC503AC5A3F9D962F7D3FD3C64B8D2004835FCCA4CE
0FD94834479279EE1732762988B08711D1C26A6F7FC2E24FD64F7B74BEE200B6
0B7F572991AA890A8B6CB720A8FF751E0626BAED7D904BCB70FBB014CAD6B16D
E5757CC78503FFAC28422C6017AA34217BC77B1E075A4BB99145EA55CFD1D12C
B02BB748416F609C27A9147FA843862574D48B8B64014BF57189A44A0757EFFC
671FCFE41CDF60A34B00B0F3D28CC96EAE85CBA7D0FCFEE888CC7FFDEFCBD573
7257127CD04985545A41071FAD8EDD01651746F55BAE6D20F4A4B32C4CF767C1
37F248C852F761BA72D53DEF1DCD2D6A684DBDF2EB65869969F265341938B2C7
D6B979342B317E5EA0700277DE0ED84321CC016331B03B13C745D0C56B7913C7
96CAC09567214488B8CCB2721972CF98BEBC5E90655801BA3ABD21A88C7DCAC6
BF7C344DD11EDFC2582CF67DE36BD013A05DB41B01540963159E3EFBBC0E1D56
5FAB6A85994BA52B3E141B2AF76AEAF89AA074D56C5F69FA82D22266532F87CC
8DBEF7EEBD525766E763CEEEFCC10F47FB671C91A7E12A8BAEE00B6C5F344D16
B489CB6623C51F41FE9A5F6D3BE27796E51BE6945C6888A238349B82BD0EFB82
FA41790431CA16082699BE0E419E2C7C0817245326322B9CC4939BAAD44192B4
775A71DEFD070173D7AF2FFFDF728B7EB14228DDDDCFF13748D10DC21408FCEA
6D747C1997953D2DE0551410F51FD16FC839C05297F8AB66A0093B23CD49DC99
8B0E424D19647BA03560E06391BDE9A02514DB9B144641A5B4CBEA668F9B6380
CAE5E75DF3B8B749E7052BFF9D02D1327135C7751E074BB831F91F7CC5FE7EFC
FFF578C1F8A924EA20F863387174E3B1B6DDDCC4C462A2895C9CF95F3547B57E
E28268FA3F2101AFF38BA1917A296C2BA2093F143AA22C166F6DAC8C06E300F0
9378E5799447FB923657F9C838D08CE835765AB686D2EC1DCE1B89A214850D64
6F79745A41552F95F74536C803FD0E67B1A002F985355A0F0473D5983C8671BC
0EC4F54A9B7A7F52C7988252B62E5192DDCD272649BD4EB7B77185936FC36924
6C8C0D59356D2B2CD44371D02D3D040D8F121CE31DFD5A5CF204E6802EAC46A0
352A8472EE26110DFDBBE862966BE08F5766FA4F3557D0CCC9EDF31BF84531D6
63C13CB49D0C265EC2511211833F8C475D7BDC3959C33522A049DD1962C77742
A8C011C9628BED9C7AD8647A15B51FB1385023A014B87059314CC9332BAAFF7C
1EF5608B2D7C68D12DA90476714F26416A8A1FCEB0ADE8277F54A2DF9F5F7175
382997B8DDC1BC31FF9BB31C29200506C1CA60DDE5810861C4659C00112EAF39
8E2A60F51D13D9EB4ACA8A2DE0CD63FF09EC639486E6AE747AD18A96B069AF57
03F015A210D9182678AF5F984DEA53961985952799D11555CED849422395DCEB
AA7D01D4CD352EC60193D081A46611D41A85C25DE6C3BCD88795EE88DAE21CF4
F8F96019FB2822AE4D7FFB00D18FF44D2B065829CC7B0C5E6F7F3C437BA65A9C
A6FF7677680B4C952515DCED60D7967278469F8151750EBC9BF2355EF3F59972
32C7897B9EC592F01F97697A17967D344A4BC9A569D664BA81ED16B267CF5797
437F0E0A3CD668D7703F05D09F8AFC0E3313DA7375B4F00FB401D2AA2D4BB0E6
A0E85CE8311964CE351D3EA13DB52AC6F6A1C3F8D5518F8005E954F32340FC82
E3A2ED3AD8E3DDD108A573F2D7883D8DA5BB8BF813CB9DB27CB44AA47AA0D4E6
48240F637E2D1DE8C9A6F35977B13748FC54F228DFA2673089E055C5CE19DB05
CF529A5DB0DFA4F1AE311FF2EE1317EC9CDF8709D217496E3C3AB9B3DCBE200E
EF4E11B78D509CE8F11832AC295BB1D4ECD9FE817B07AA754B523B6D09E5C3F5
8B3EEAF656E361942F5BD8DFF8B5821ACB67607C2FD31E9717FE5EC1A550EF9E
2FDEB0F43558C6E59BB1D0CC7DA0E98AC508DEC67BED70EBD6ADE595B8F588BF
9EAE16CD83AA19B621749E3F10736FACA7F6BF4AC40A30075D550FF51F92AC17
0973AE1F7D563C43EE3F41E7A34F7B469091B4182B33BF1DA6FCB815622C7D67
F3CDA62B59D893A5959E924476E93CF7DCA4E955291DC667050FC94531DBF480
716F1FE7FDB6FDFEF44124E4E9E39FE29FFFC089D72B14CD8F671F9DDF2702FD
FBED3EDA7AC5BD0F503D3ABE63C3D4530E353E5270D5FB130CBE8C5822318FF2
99F6967B7B4020B64FF37AE7FCA91D3BEE72F0D67A10232543AAFA3E7AC77E51
E1E4C87745000722046046DC94B5017D456E865FB2E416C4E913E4F2E59D2099
F8627118EFD202D351B7AC1FC6D95F9E32EBE22DFE1A015404C4DA9F4552230C
E29AD1F7AD209E2C0552F8FBE17F4D8771BFC6109E6D709951694D2485DD1E02
CF51DABBDC9C6B4F1C8E0DBB8ABA0C945C9546B03984A9B36906B7EE0A734C90
647664B563B82402A939145A2BFE6D055580AF134B7DDDBB9BAF947740421563
D67FBE4BF01A7ACD72330ABC9E413D1DC2AC8F1404A03835605E573A5E9DB593
61545F5AD98E4A7944ED78FAF030A10ABB310B4D67130AE7053A2C227BF142E5
FDB4D9C31B610435FB22758D56CD1A3E3D67162B9F1A10C726EC1E2ACD0EB3E4
0BBEFD56F4A2EB659F0F1BA6CA6F3DD0CD46FDECE92D3164A4778B3F91C02B6F
1EAD8A8C6ED56E0810AE5994B981AE7B6F030E18F7DDF326ADC25C72216D96C9
CB51264A9DF525C7577F2777C5E71B1A80092C9ABE53C544DE02DABFDC209098
477C269C62FEEB32602DA2B5FA880C537F60E1394571392C3AB55482D36C0950
531D1AFFC94017D741EB32F0C45B2044B6645B55EAD0550D79E5E4655E10AE13
C40486C062098079DF343075F34F63C258AA0F1E42E9C4C5BEDB9FFD29DE518B
2CF2EDE51F8138244BC64548AC3433A8075F35146860F07C6E49ABE4594E37BD
C0C07689341A8B9481B0429586DB6610FC1E7C2FF53F19060E6B43DFB3682BAA
31EB86B25B6F4766BB606E8733151D3FDA0B3EC158D5A3A254B508C25C05E1E6
4067D6A39719AB32B5060BA03835605E573A5E9DB59361545F5AD98E4A7944EE
216DE34650381E96D9477ED1CB332A3DB42F317836E9791FD006A27B6DFC0B5C
B2A4054EDC8C7A27E457965765B973ED254B7542D9840643A543F4F6CC5AFEBD
262AB545E754EE14A52E72AD3B8B87225562F446E9C58EF8D8CDCF48BCFE5AB7
71064CB45C5F5D156798E31BC4875A2862CCFE1FD43197B1C7953BD8F4DA1AED
EC7738566E0895146C40ECE0760D71E25054717CCAAF6D21D7462F689BC105CD
DCBAF905C19B77D2A48075068836C2FDD6C48D353FC68A77014365407D48C135
0E58ECA8C11C6CB6C09D747B2DDBF2CDA5AA9675662F1D8CE9F94431EB0B52E2
47D95BAD5D9ACED37A7E9CDA86B3581FE84F2FE278CFCD460AA15777BFBE8159
55AEB9C37A06978933B618349FC6ED24879F02A9B2C2924CD9E921B84B9D5F3C
57BF673D0276707BF3756FC97D20E7034E1FD34DC31B5470133F24B7EB6B0A4C
88BD415FF70F0BF584470D51DF4BB71BDB3DB5D7275AC8492ECF2B562A20019E
42806B34C259E731AAA4CAEE1301430A39EC155777297DC99ACF93AD67257341
9DE238AFF3C64D29B8D53D221AE02AFA30376221ACC298E23BCF88F60EB7177E
9C64991F84FD665C1D5A0C51615A5F3B4CF27D1F0D90986B88CE3583664AEFE0
C59EDA04A147FB51227A5AB0C44CBBE495E6C242EA7B5C525587613D33514879
1C6FB0E4E1A884D64921DCE789C2EC332B85145112D368489103108B57F4DE85
5DE567BF2A377CBA7931BA7412D4FBA026A82A3B2D14EA94DA77871E3E5DB662
E87168ACEEB494D645A9E26C29A8311282A2DFA57985CEEF4463EB4AC6F84FA0
9BD0F0F01A5C693C8659E5ECE5F23D716645C8A210B279F0F086050DD553553B
3F87AC2CACF430FD110E17AA50A7E01776A21B4278637189D45A4CBFE4EA0208
08971FC44F0FF1C2D569AC48A0E6E0162331A647DA69829C1D3E652292939101
273E6F733D0EFAD93ED7ED7BB2DF1E3AAF5C41EBE3D6131603EF1AD7BB91A4FF
154AB7C1A7BE4066E1E941A608D1ABEE882F8B8E7BAA358C431D3DA016F0C8E9
4A5C3AA242C9A7373C3A433C5FD1EF02842E0B8EE7C73113FB217E372888F11E
020538E97870BB576EE3FEB641B33A39173CC1AFCDF3D03C09B9A42F9ABF48FD
69D228F722EC13D6CD3D48CCC179536489EE5F1548A11C21562D863C371D8202
AE3123CF4B5E9289E06D03AA72F51E926AE304CFFBCD37501B35C161AB32971D
E549FFEB8FBB595C6EE6FFA12DAA8B8DA087E7C0F083740C18191F515E47FDD5
BAFB1ACF918BE2C541568232CEF707373F07E753AE55712F2E5C5819511E1B78
FB92A8A32F408CD9208A66A14DD2BDC5FEE2434B8C49CF740734665C5887D21F
219A295EA233C467B3724E562CE367D96B03C0B14F5DFD867ECDCEA7757694AA
EC6CE3913A5A406A455C4AE0BC827DEAB8405201FA36D6DF2322FBF59875757C
3637C45159BF0E1C358D813E37CC6630F796F8CE5ACC4F49566EDF37EE388C61
3DCBF2CF9B24F12BFB5ACF759FC36E69B32230D2A28181282AD5D20002B64F49
68F175ED215CFC24750FB2A9A67B5FA35C5E30A79F2EF46AF98FF43B1D23ED27
C852F0EAC9E499BF4794FA3293666AF2774FCABCE014D7B2D52083040BF71A9A
9B369976055E2BD80245F249E9C2A1E6017118C37AB2FE439C0785F4006CB6D6
7EA8464A936A8F4B739E114B2C49D67BCEDC1852686CB041E0548A1192FF5FEF
8BF68D616695ACD14B3594882B49188C1F51A48B8D95C5D8F6870640EC964145
5796196B233CD40078346493080868F56A5A0BE705E9DAE32D3C3C5818753F04
4D70B5366304116296EDC47A40EA032F254227C66518608AC5D90D8ABF8C1492
282910DA2DF65573EAE3CDEDFCE5AB551ABCE205DAEDE1A49769F27E55EBC680
D725B3C0CA9868A1B4B066C40F22F2334343E1BF9CEC4AC9EFDD9DA23C2B6E2E
8EA618163D2268734E10569060D2BFEEF8BFD513B0380993B8D52A6546D69155
16D9DC197DBFA7ED11B3B415C97314D28889AEC6B9AB919119BDA2FC6120F98C
489E47D1E5B390059F800D51D9C73355C84532F7A083D5DDD9A52A0E8E38C858
45C26A4B9BB5CC61C9EB26AAF4454591BFE11940EFF64A71244A49E4A05E2A67
BC0B4901E9BCFB5BDCE3DFEC1F143ABF8B5872580E379881BE02909D7E57B80A
D9F00C678A84D0651F4644CF51DAA8608BC3B698A22BAE29AB99A2516B94E2CD
50F72FB1F8887DA5CBECA34B981309DD6F461F5345962DED3B80B0BA1D11FEB5
9B435F3A448C7DDBE6F6DCF9A3C3CED6842C356858594C63EDBA2F9EDD0453B5
64B8FD5D5C6FC917E2A4CFA8FEEAD0D314F78AD1C7CDA6787DCD0412235D838F
C71F9E3CBB1C2D882F6DB03EA3E996BFBD4BD92AE5CD0F2636239BFCE2573068
90443C692249430BFC3D84DD1BF24F80D0975BC1C64CCE2E2EC8AFB8FDDCA425
029BF91E5C3F4E0A5B5E75005B2F4608EC1B5CC2A72778AF0D1376B04486A031
75985359956C3289C70D9C08811A878A19C1C03F5B3F70565A241B9F91FB0604
DD8A6746D4B6E7DC9B82F5BAFE0D725EB5F1A1B135B5E5097E60AFDF729A535E
06C310613781FCC99AA56713FCF06F2D8196D967F64D7CD364A99DEEE609E483
D00129B815A64EF273CA7BCE2DDE981253D17E3EB0A8AAF4771B1F3AC454B9EF
3437433A58449A46CC5716E1BDA9EE77AD3E44DB02447082FE89E7A7AC0C4A49
8C6121EDD820F2CFEF6999F99AA0A1E1FD3499BBC0AAC68B23C5040989825428
B9A87CE2977D91EA727C3FD9D0C0217C05798787881D07CEFE01978C9D57994F
61B3289BC269D6321696B1D9C4208BDE99721B3C7E73D86FD65663DA0E08018A
CF34CF9BA5D7A871FA85C9314928780772064C63F1B6CE3B19EA98823A333A76
8B7F6B8C3381BF4903A735B7746BB6812FE53D58287D4307DFE77A4B16D1848D
485679E592C1AB0CB1D8E078032930976128CF0D4E36F4147CF1BE39E1089A98
F6F523CE96CD5CDD217EDCA671E554B36E5C41F966A3119C29074B680191367E
D29A5A7FBB4EB2423B73BF3020B7C11DC4C275DB0A07C5E530F8868C534D966D
4279886809813EAF27D51349DE00E3FFB283B1F17EF146148AC55AF0293FE27E
698D4BFE18850717B51AAC0CB697FEC766CE61958B5C07E80379887CB0264E9C
DFB2C8B6E610DAE6F7DD940F08764DE837286EBB53EFC8AF3FD2B0A1A6ABC963
02B04163FCE3091F2FF0E1AF77CCD1D2FC5031E42B976BF76149CEE298FA46B5
7981087E36E4858A1C056D80B361F6C2D8C97C2D2A77E09104B5A6A5CE78A24F
7AA2BF1B70E7B535D37B0F69BE1FB27F0205C5009D905FDDA547F04F0C596B99
077020341D0C8D0325C3CB242C6FB9252DA514A799C9ACFD90A866830BAA4058
3389847B65D114CAFF0FCF67585A6BCBE22DA53F4C51926CF3F0DC1CE20D4262
847EB62ABE8AF75C2E46E25E2CD0FE1C8162B1A98B9069DD8803284E85962237
E1B86605F30BCF8E570B4341C3751A10FE6C3304E8F7FB6FC103AB903AED90A1
F74937B9894F811BC6D7D276FCB280BE8D374A8D48A10B2713DFD32DEABA293E
E8F2CA41A6A77F829E3F6CB40BCBA184059390CF33937561716462889DF510CD
E4EE303C2B52AFC398377A8B3FDCCDEEFCB46E6DD65747A981438EAD81C85FA3
CF7A5460E975773BB43D2C30A95318AE845CCF5EC97CB96B0FEFE1B988E443D7
62F78EB550A53730ED711AA6107DA4661DEB0F94AEB1E311381ACC86D0856C90
A91D904C97BCFDE51213AA578A8B93C301A831AE893172B7D2FF252F4F4906BA
1E1ADEDDC9836C789139796AD76F219F2891B392EBDDD9C64292AE5E1BADBF96
AD2D61D9FD8AF382038A952BE760F64560F50B146EC0F3B3FFB1F9D7B355DBA9
12E47FC61D09F44A31F7D88B072B10C44A60DB609E7CB9524FBB56170E9ADEF0
2464A57D0CC0A75084940D486EACAACC508B9D267C79A91646478075E259EFC2
9E706F9754F6798BA7B8225E8763679D012D9FB774F890F4C31014265EFD9206
DDDDD45DD3F56823BF8232BFDDF6A26A5CED53E0EB42B4BA1A423FB723392E3F
9D8495AD125502A33F3E65A94AC101903963A84EBD442BDCA6C1CA787AD3FE4D
B63D88B1635A924D1ADB5CC56ACCC062E505B8F2C2B04BFAFF971E501D57B520
0319875D7F5B9B7EE10182BB0031B8FC61850ABC5EFC93B69820A9E4C88C5E24
2BCD237E4BA6CF63258AB82A1C0B643B47D77E0B5F6A64BED8839F5CC91B71BE
B037E87617BBB8DD2B943CE8C8056118FF81FE7833B49B84FC9F6AC736FC4526
0FD8C35D0A8FF6237DD31F492DA2DD68C11615DE79A5AF18AB0B4C937A1670DC
A738581BA544DBAE76989A3848E0F3EDE26279776AB950CAAB8FF8EFC8DA34C8
73E57D38B01DF4873772137141FE05FF30BDE997DB689CE85F6312A6A94F0B83
CA610744C281C7140CC128F24D366E08106B6E18E6596B9EFE4EABA49269C8F5
47DCD6E7B147D53DB0D8DB88F2B077EA92310FD56056AB112633DC84FB7743B5
F73E9DDDCB8689297FAF6DD7825A6CBD56847DB5863E1295E94AB17D66D92669
AC9E1CA84BB00C99A5623BAC01B3B3C904E09B4E8F235B9C6E200638904E1DCD
5CBE2DCCD7E467DE220373B1F15C33FC19514AC316D0F39C86860C090E68787B
DB0EF76010A1D0EA9A658F1F1C9482EF6E646CAFAE116C7127F67F4A68120DDA
56FC6E466A3CA47F0F2383A601D22059CB14E22749372883A262140C4E6714F5
D76BB05BAC7671FED1E50936B0CE6E364B62411E6DF77D4A4B7F9146C5C4317F
A16790393D8EC03581AE7F5CFB6E2A6961E59E603962D53EC890318A5A719277
FAF74DEED357C64D21C73BF7B55D769E02B6E09BD7F56D0235ED4DAA84F18430
B571D1DE58FC6F22A3C5D499DB9FE842BE1DBA69A367EEAB44967489A34B4601
72AB269789DDA7D0E7B98A6869F882BDCD3130822B4C9F05C103D6A4AC194928
5766C06EA868F915E051139ECFE22AC9B8466C3FB14AC7AFCC98A914D22E25B4
1F9E66FA1133CFA1622A6BDCCBA28C1CDDDB31233F5B9709BDF4C6B6FED6A1F3
5F6ED6A9246440CC558EDB2EB71727F95DC21777A0F128B218E5AB141F910A3C
5B3F1B33EDF98988CD30A0A6C7C51A993C1731C5A23BAB096145B991A2C29892
7B7CD8C5495897BA43AB64A2E30EC7B7DA1EA0EA260ECE834652FEC885D999F0
1243F924A41402F5DAD75B4C172ADA0D306BB9EF9ACF41A6A77F829E3F6CB40B
CBA184059390CF339375622821BC31B97295BFA4099D141E0E884BB5ED23AD52
DD416F49311E5EE678D4649CE913CD5429445AF3B16F7FD5E65A0EE2B1DC29A5
200476AE13D9197B0D2AD4C7B65A8ED6A12C24C68EC2E3DA54DF1AA08EC71CB3
C6F63DB19EF9AE60F0AF67EB044A3E300066B22D0D4DF67D792926E857CED600
24172E360E4B169DA93627B383F8220C9C272DCD31C53CD08ABD163F8DE60A45
794696DF7BE923FF89D32454D66F1BB52E8328A8A65998685C9FA7D2E4922E00
C3EE943AFDB0739F75F0F1D250DA0A6FB9A6B340F5BB512DC333468FB500D860
BEFB092E88FD8C8FAEF2476515A41387CA09174006C8F2125DB045EA4E129E00
BA3BD9CC0870FB6060AAF40EB540CD5686826FDE14047075A8E61E672A6496DA
97D96749677F0D58684673BCEB1C016B7C469D93B8CCF13C4D3F2E747F6ADD32
DDBC7C4519325DE1D2E508C9294D558161DA183A8307F90041D351B844947C40
B5D8C75ADA3F1A5FF7B8CC892B3D97CCC415E7627F582F66801966E9C1CAE8E7
56C42B2E9FE0492FCCCFF5BB4C531EC8F491AF58EC234DFBE0AE16560BFF5C89
7A1477441B037218C4BBF2CC36C4BBAEDBD7CD236E6D2E8F4A0A24C4BC96A187
38ABD233F3ACED3874214E6075A658B3CC670D60B0DC253415FF4B2EBA5E902D
9C5ED30617417F403ADD5B2D4A4D7E86EB5FE4B3AD545CF2DC302D330A414824
E7D488923E92A64E782EF8345AAA0EA74EFE4492AC0F942C89DEA7C73EECCEC9
0B036F773A35572FE436EFCFCB553050777FB0F4FF5BD2388C81D975E2B41B31
09A19FC08B8AC1375D3328E0CBE8D4C5FE42198028A9496278C666FE4FDF0487
FDE1F2AF63275435ECDAF50708B5A9191C4CBD9F09692A2995E54A8D5BD54677
4B5376102844F8F0222C388E13CA1E1B07D0E8FD5F08B92BEF424388C476E471
0CB07394116A8835131B6FF18676FECF4780FC40685D29268F09D0EB598A9010
44A712E637B0E644D780C9FBF747711691D8C1ADE1E1B3B1B7657E7B291E803D
142E37E7ACA66AB279378F3F27DFE46FF64199038C006B74DD8D060CE5FE0B0E
AE370658AE75843EEC7B5DA65FC5113028F5CA15C2FF5D3A45E9282348E30691
39B414FB4171EA645516FDB1E9C8FB7D6B89CA8103F7C53355A5E7C09E211F59
083D4EB1F4ACF79771B4E47D07EA87335F94152A9A489FB0D395A198E955D662
DC9AD78F82C29C3DDC08B6A551B0C06AE532E78EB9C6F21B2E82D19EA46567EF
A09929F749F7ED2B103889A61FD11075AABCE9F2517EC9B53D7DB227533C3316
C7EDDA3AD5A84ACE6F8C51299E860EBF0D61F0D000126B2CE72AC322B4D96253
7889CF225B3384F8960B9FB33BAA1560B6E30AD78DBB5CF7F1BDCC7E29DB5E17
E5FDB9A55FF38EE51356B2B3C5476FB0F676D1D4DC0E2210AE5ADE0322DDBA57
C4B946D6F167A57E11A5A26429DB906C4339D22728E703150EA72F5529C68128
4C454DEDD546F479E7D69BA4A87586562F7EAF7EE547E2EB110DEBD28BCCD7B4
2E245579D29D18D7BCEC07DDD30FB1C80227D9B633FD5C536A261B9CC6A56073
FB2D92243EFB20D792FC6BA87AD98A0BAEC9D3F17AE9C9C82ECA82B8CC60A015
6706987C7D0DB913F1BBF8A7B602B120AC85CB745676F87833CC5803627C6DD6
BE70386379D36E3071F631A523CDEF3329DA1D2427F462E1B4D9090E1EA0527D
FB9564EBAFB4292516657B11080A1AA468DC7C3774F70BA7655A9F09F2965D6A
C9C1B17CA1631777D1902E2C12EB0C7BBAD9D0E9CA6A557359E8AC019AA284DA
852A52084FC4C8FB0597BF37F598B85755F1F2E0CBBC936650D9886E8C3F79BA
7B78FB84A3503679C71248A4D19B97CB47F87BB44B486BE4835A8BB9153A8FA2
5FC81B91DDCE0CA3E5B551096DD5762189E8BE2745D8A0E83AD725089C8E78B6
8456B61D69BD45526C33E64D6AA330B97BFB4A6AA66A805ACF593CD86F510268
92D532709F7A5DC180608370FEA2F20521FBF9165DFD6B065D1E7CCB38BA40FA
80982D7D4CD0E107D7CF2598B6B7400DD215C4961B4BF5DB2BC3064F6A82A224
5C669A03A4B5CBCCDFEEFC01872476101D65E487A587BBF1D881CCB85B91B03B
BB90B546A8132BE0FCF7FF5E37F1652A055394192D922641ADBEDE3875523CDF
FF0F3A65DBE81986BAF8AFAA241DBD42E7FC2458BE65CA6106356D199E9CA3CF
34E140D7DBDF0CD2C2808BF33DBF1C2734771F373D3A63E8D2340E009242CBE0
2ACEF37732BE581D25AD1A01EC4C31819D2DC7B35CF2D9F0F492A65356C982B9
EB2736D453D66E3EAD617C93F431708EC8EC4FA0FCEB4503D281F5443F84BE6E
C4ECAF1BDF49C7F956F347797DF580DA0E0A4F13FBF20B25DFF7861AC337E191
0E59364B690E72D49232D229A3A43A98760A579A23798C2F7EC4992C1B5044C1
52197BEB399437F35C705169A6EC77FD3EEFDC15E662E4E766AE5F6AD0EDDDBB
1C74DA0C8ED4C094D0E56E9499AD2DA32386E6AA487274A807F216E2009FFE57
F6CB0CB72BC26EF0ECDD29F2CC39714F30B69609C9FB9BAE5CF3030EE1A0A113
053E08E96B095B4D29114FDD325E6CEF2AE08263950FE6CB9E911208B258E1F1
DA5B86C8D277F8134D0136CA2C3F816B05FFC68D8337EA8295F7A6A319ED7849
584DEED6A6579165C6AD132C70D61574E96AA1069043F4BD53463C2B029EA8A7
323F271A6643341F7720B16123685B10BF9A33344959BAE4CB57E6FF0CAB1468
DC84FE0F3AAB3AEBE378550A55B6CB4A3168A52E7A8B688051202A06307F83AA
76673F95841748070B0C03F260E3A5B824877CB30A30C25249F8A9CD226A7176
B353764F9C64C14A1BDA19EEC5B1FBDA089DBE218CBB724E745DA7382728BC49
F5FDFCA8BE38549AE53F72B85A6F03B58AE413F4433D6923766B1A50FDEB0587
BCA6D9CF6A1B1F7EE431B880BA7173C589DA6156B9860ECC1EE9D29DFA67F2EA
9985A94EA970D57AEE7F99B2A930890EE2689F24076CDA20C9BFB9FF931ECEEE
556BCC9C4374EA6B2CCD2B4B1267A7938E3F656986B6C8C05D7A56A704DAAF9B
98A33AA5496813687BB411678EF3357786F66BE7285F15CFAE6ED037138B3294
CD515DB323465DEA95A929C67796FE666140D9EA8AC68B343772084D45B94B82
34269DB2697D90CF0F8A4B01F9F1848E690261A5E37FDACA9387A475D5677912
89908F9708D1FFA5F4099812BCA3F7FB9680726F63DDB4ECA19DE774DFD67310
53FA1402DB6FEA1BFCA7B9ADFF7F4ACC6DBE671126FE078F52AFBA795A1C33E6
2D7A8D23C21F63B4642608AD851A31DEA6F55CEF880B78EA68DB2D9BE7768741
F927B1B78AE77410057471F40AA31896C6DE2A54F2DA9D4ECDBC0486113B2CAA
A2E1A47767726BD5568FEE2FC810F9149095D892AC24F5B336209C2254840773
8EE40C97E7A79C33F1B69E45EA683DF15336D07AC3B4F744E0A34913ED4BF8C4
263642FA5DF59E7F3AF5AFFE939F56F9162BA8BC6FBD6A57928E5DB7B48BD20D
22D55B9DEEE859A2E5B2DF7334E2543ECE021E45E6D60B1DD6F4C4423D10F8A0
666DB2002E68A7EC2AC67823AFEEA01521912308EE959FE463591E79784A8017
5E3E4BB0392370980FE8C496737F136B67E2F9CBBF7CBBE4CCACDC779F68F2A2
183C38FD0602E5F63A71729A13D3922AC2BE00E1F189F9A509FB97B4D21C5AE5
8CBE93BCE3B522FBC3532394EE4737B1ECFD4473683CE752445A56F3C953E008
0C2F6E3A3F1B7F6F32FB29D6A24B2FD42F2578CB46FA0487DC1CBE779180758C
B5E40FAD2BD0E4A563D1C5E94BAC3B25343E9D1B5FA83270898C37092D4C0A77
C664A10D5F26FE331CE2F890851EB3E99946DCD9A40E25DD883D396CB2FD4148
B6FB00A5F0328A6CD7A8669E539995283045FCDFEA57F8154C88A985B0E0E306
B0F9CF07D37C22958F9F9277AC6FD3CC08A5CC35AD1A28A299E8106180D863D2
91A3380AA884E7CB26A243D7AA497B71C1E241F7313B27FDF4F9B8788879CCBD
500112DF4690D60640964D3F60E8E89DF07C2A11C0E1F89B02D061B7C9EE6273
84FDF498400D6D7DC137A904C96EB7B3CA2E65F64E8405BDD2CA0CB8CB8E904E
7535440A065493480FDA1C555B76F8BABF1AE471DA2362995EA9F3E0902D3752
08072583DABCF46FBA30A15F3334CF0FD9366B5A94E01D41E4CC5660A12C174A
F75DF1CDE0A18C94817F54639ABDB3995F16F0317449079864D54B26A575D9DA
9B920B20A5BC3A06F2A4771CF854FE240328C4A2F37B9C73FA6C5BA25C1FEB68
3C95C33EE38356E67716A643DBB780E221B5F0B3DBC36B1AA378E1A78FC7C507
BAB3555B26539824557041F8215E8ED4A289CC7ED928B3E2A2253042C47967C2
59A83EA0D92DF798FE51658E2648D8CEFB6DDB4D000722046046DC94B5017D45
6E865FB2E416C4EAC36B86CF6D9DCF7F3A34E6AA3CCB13CCC61FCEE7C776034F
577EE64AA9725A015C1E0CA2644D426C007E56878AE2DB9FA111CD84C513E2A4
2DFF6E5073FAF13FF8D857F31161BAE67A549B42F8CADFA8355E5D8462C53838
EE1CC66C0FAD7DFCB05E178555E2314470BD7E64EC7CDCB74B20478BE98D0CD6
403A0CEE82391AA72FE8C0059B60B0315A92169AE858D3975C73059DF8D9FCC4
59B8EE3643F145DF5577981AC9E0BEC73764560BE3E6370A9AB81359C32200E7
96531DE4EB663282065974F633EF0FAA7A350492CA1038FEA46B99D05AE5ED8E
32080530206F387E8262E46827BCB1225493138D2A491E774EBCD9AAB8A2FC43
AC60378CB8294F8A392BAE3346AB74102B99DD4E92B61AC064BF43F064D1A2FE
49A02A2E0B772C30C2027A88763A7F0AF2DD0CCE40F2CEFD4D785A4778C078DE
C141D172973277D9E8C57ACAEFFCA669C4F1EA2B44D3B1F3590135FAD1A3EF9C
F15BD96008A6B536781E241BC72354153521F52CEA26439A9CAD543DA05F7D2A
E27C86BFD7AE2B988A390BEB352917E28C85B86E87BD98B6093CF9A023EC2263
A7D1305B6224EA5D456A09922DADA3728C9E3E0893C478B3F7443D9A332101D0
3A319ED965A99750A337D1FCB6E77FE5E754546F80AF61E17D3AB833626938F5
6939283DA37B18363AB0018440792E71E4B4F1A2AD2F2CBBD1A04CAD375F74F8
6A84E5104F98AD750DD893E306CE5698A8FAD2D9BA1B57082AD28ABD60567F30
7D6EC471F99B03CC7B5E8140DC01CA1816CFA275D9F5743FB69CF161B63A8698
A10F249356BACEC417F721A1CA704913C49F8BC8243EB937E8A8FB51A57260CA
E36E35E6CDF1C75CFB93CF0F6B4392FDC4D537871241EF7A195D4747C9FFDD58
1537610B95B369D68197B65DCB42CE6B0DDCFC5D114ABD5949AE733DBCA60001
3340CFEA5037551A74E6CD0E1A00C1D85541A79FC61A41F2B4CCCA221C3A72AB
7584D24400671CD57C22A0CFBADF5B6E4123196031705C8B89F0F7E115C91A2E
DA6C1A4583A323BB7EBBC181F5EBB825558AF48C148F76C329FAE1045C5C6E47
DE0F7213002E5CEDD409F709EA4DCC33AF8810DA1360E320862F2CA6E0258507
C460D9CEB29539BDA71BBA7E79A8A11520BE2B47FA5C0B102FCC451CDF550851
9B9B58B5BACA7207A8E469C325F8E18E43FB703A7EF38F9CEC2CB0BFFA436CB8
AB9EDCEF61DDF52FAD0AB9815F70E9FD168C02851FCE51F36AC9E14F562D8778
CAD47E9A3C6781ABFCBD46714EEBCC653320D2618AC4BD618B14E85CEC3D6319
2BB5742A4740B2743ED4EA226F3F70FBAE2C25A7104589EF388069AA0E6573D5
CE090C2DBDCA93B57A82AF52A14DB5E45278C103AF60D5E05063DE4A025FA500
7DB8F3314CF39ABD1DFDC228FEDF1E2C50A9D6BCCBA9AC188BE84D9483C8A542
2AB89E041D629DB8446F058199B31DFD6084425D8056D49CE921742A12D11F08
3A6DF8ED299BAB692A8153797B53E64D40555EC96E760C8245A1AD9F508E3672
BDC1198838FAC38B735B4584A802F598762196BDB017EFCD0C6E1D1FFE305392
5EFB1C1A29059487E759CB0DE234E05E9C82777BDE4191AA254EDA92887905BF
31337C314B681131808C68CFCBCB920E8F4E2836C05C0D711D5431A1EB49A99E
4A0751F8D688F8FC122E9DE7018BEC4B7C853424E5B6499A423E0D54893CE161
572D4D552B376B0A90C2C569416F518B0DC255726357D3CB97E342F78AFDC691
400DCA846F44FC45B77CBD3DE6AB078CED5FB3D4EC94C08179DF1D96F5D2C926
97E82635B2542128BBCE02EE3902A286E7ED3B553326AAC58D3403A416F243F1
B58CF54E94F3DBC93516356EBD65E858850E6C6CF9E5CA28BA647584F5C1CB17
A02B9228F40892C88B3F789DCE2539DE30CA17ED4ED3C8B9D8B642914AD1214B
8BFB43159501BAEAB263FAF9236685CD0C910FE12D8CD6A6C6A3E4A1518E2BCD
F099D8987C3DFD0C7883FB18213C770555759AFCAC5C084DDAAD54FD29FCBA3F
AF5E895BE7D9C19A71046795247497D3874FD41C738DF99235FC8AF7B0A7FC07
C2E6FB4A92349617BA30602EBDBB815DB995569B3E9E6F95C41DEBDEE6B530D6
C6977137319321BFDB6A526B7AEA07EB667AF60E3530E2B903B64F1AFC905D7D
B85F544A47035399C53FB02BFD3C100E7A65751929D0797D1C23EE0302D776D2
C4C8834BE9EC41F48EE50AF6797489236880ABA3EDD77ECC1C66D4720DDBEDC0
E0857B057D019BB4C65812FF03FD597F2B8695C894A282C56BCE1F787129646C
EDE4F02616F1D45745A47169DFB74A9DC82D26722D928D5450771F19B59A2760
C52C87C36694BE5257D9DEEE102A11BAA2FE592ED088AF61FBE6210FC290D982
620A4EE0030656C55146644AB4081DD7906687B7E22B3C0293E0ACCAB225D733
E123302C0C9B054E97386886EA0FEE509AE4E6E51A2027EC08AC5CF101743490
953E560C65029856DCDEE6F046C9253F3B443E5F62AF90BB96F31EAFE270E903
5F12399AE9E99E066688884DBEA2F201E4635BE37E23FB873E2488086BA27275
3E307CC057C2878ED0D273EB6C5E74C8B1810ED416C5B52DCDDC5BF9311E3B43
704BFDB66CCE11234FDDDA3EA1A434F7420F5C157C03EFE10F06F1A23130C0BB
4B083155753E2001AF4A346B1573B9F02724722B9B749AFD87E637298B97E3A9
FAD85863CEC1B6C58479A1DDB40393AD8FB19EAEA0D341002D08C85443D34FD1
DCC618F3F16299CA901E1ECB059C9AACFA4530B025B525FEB521E06B4A2EDE17
9E61E2A837C34105FC0BD6ED0484606D5341C850CD9AFAE76AD7232F07F13A18
F68E71FA1567B10B0CCD426CA5D017EE7E574B862576F5EA495F51E1B3A86090
E6C755C9833A144F697E1407791DE270911E25370499AAD99D871D883DBB1CC9
F5BE250F123027EEAC691DE58AB931C488FC252FF5B2D5F53DF4BE1A7606D112
DC3ADF429D31660176839FA5D28C58903720351361EC624A39C11431D8A6FB12
D3E8362779E967C588F2D30B451182FC6C0FCF9FBF4D804332434281EDC9F0CB
D84EFD9EC148AF4245BFE780E23BB321DA5F1CD9DA70174FD46DA36BEAC07DF2
4404E050CDB6C3DD1E79F96D2509BD44228EDB076F9A2CD31FC5A9A0E5EA32F4
450FC341D125DA3A11FF534B375CDE3CA6DD714C14ECD833EF1073BC902817AC
EB8D723B1868C5ED5B326B51C98DE52FCAE577C7EF0A72CB1F4170BFFA487346
DBBF944146B3B7D9CA452453C825B92E606247E509F03F10C2DA8F5E3A027390
810C044FB4980C9A43404896A152589BD32FAAAEBFEE0F7C1DE0499D8206BA89
8499D53640117E6FC158723526AD7C92DEDE350FE3E8BC9A63F9158EC0CBE445
C9127E26A13D3A8E987C451BBA331CFC7384C9D2DD211B4E26DD455B8C450A38
45A5435B70B27D76B43450F22F40CD7C3F94CFEA86A00D258061D6D3A528C6A9
2646975A56E261E3C16937CEA1C949A563253E14091FB92373C71F3F9B1649C5
F3C80FF3CBC973431937D3114220AD0792429566BFF55537F41DC59F7169BB2F
8DB8234F076977B2016F185EAEB3B74487C6BE64329E77E778CF557909376EFA
C08A9B5DFA2D004EA5A11F9990EF6C927B65657F25C0011DCF5A74F5D7ED8015
0978E1A02EC362C667544098AE47E5F9E080732F23EC0158768D48F3BD89EAA1
1B5E8927F707C666AE2B21EFAB315D335B1A481FE3DB344A5F50DA95EF3F0F98
3215AD97AA7AA98DC6CB5052261D715735810768798355978BD15445C0D8E2DD
CD9067EDA333D8394D3C4E9F25FF1259C4DE58DBD2DFDCFC03E61F0DEF4EF5FB
316835D12110999B1647582D91BA6FA0CFA8861BE3814E0C883B2934FCB32995
3875F95C55EF8381B2F5168DB2FF9A2F1F04204D895014DD676B0A17EACCECA2
56F6E8349B3B3500C656827B3B49A5F4F7357F9C88B45034BDC13A6FC93CBD6E
93F7B7FFC1350E762B993469585A68327817625CE37D8AC7115190CB24C6C0D4
9BA6630E748D9F3626340B9F9D22F16E40184A3697C368E4E09A0E2F9F1467C0
699B939EE1663FD02D9B18E34B7A0F29C9CF3F1B13435F375EFCDC2C9454A97E
E5F4A3056AC6B8D52EA04CF93C127AE25370DB907B2A19150135B79C45529155
3EFA10D2A12F704EC37FAA311671BCD21B2926BE4C650BD6D0D1A489A01B0BE8
A05CA56FE842051FE87EC913E4094304BAD072C291338FE0EA5971F7D5D6ADB1
B3B6C392AFD85DC2D1601F2E8ECF2936E74C53FB87A0B0CBD175F000E56E5F3F
31DDA29F1C35F212F6315CC620EC0118A7769601D7A4617F3885E9F571940346
E1F33FAD7716A5520EDB76E7B36E3DCF1C4DC905B343BB72416574240E31CC73
B814D169EEAB36866911279BC4AE282B4D57589253AD75C7FCC9878D2F97D0E3
E98DD466CCB4EEC3E1642772EC7FA5F235AE1BA3C6F3547FF24606651E5887FE
81327F68F6ECD6D8FEE82559F008F29690D07706D953C8CF5670C47904DE9A4F
6B520C1ED4EB1C67E7E16CEA4CA9AC99C05183A6B338DD38AB086689E8B7CA81
89774736E9D3EB490278F07B602A7FE79C2329CA1F65E78BE3922894CD52B8B3
CEAF5CEA7C3AE566DA6FC9118B7A2601207A13C6FAB4BAF10C72A23626BF6849
FC82D56084FD3CC78BB32742316AED9FB75942C9699A2519D59B1F362E36996D
EB087871070082410933B8B6339B6106694F9CABC4361533A4972259416DEC3C
9CE47F3630C697E7B520768B4AE4336F3FEBD08BCF8311F17194A3B00139EF57
775C73B4A34200E147B2DECFCF2088DF21EE70E0D1C6CD40BBB35A568FAD862F
1A63D3EA2BA9EE7756AAA3828C6DA26AB36B3C11345CC1225C4327407F538E85
401CB97445265D1A8ACA3A7E54C26F1727A525F170429ECDA186071464EE07EE
9CAFAC282458ADEC1223353192A0D3D4505D5979FF7DBD3EA2B016AA90433F6C
86610370E439CE80ADFB4DC73EC54A79DE1D198993FCA9811E64EF6F803866BC
86B84A2595331AC52B89C79A7E6D9B4EE63ABF3DBE29C6F18F78055A59A2203C
05D97035874D2B9A7DF0D973F8BB6898F8379AD5F8947DF994271B1F39BB8D7A
C8582C4C87E5A23C990444A75ABA76A7719531823B7D357973E6AA25F4859A3A
77FC892A4008B985BC31F795942D5DBC69861F10EA5DB315DE047FABB959568B
86E771D2733D719F1A43122D41FB6F1AA986416747FDC1889DA6079B6E27AEB8
BD7964F3636E20D19746CC2C3D5B6D184F54087E4DB0B4F88B207DBB4DDDE9C5
77433F1C3481F078ED710CAAB7142849C0237E61FCA81D930EF32524B1656574
54ECC60B1C866536E456C00A92439CDF8F0A23D5F3AFD51A0DAA8936BBE14F88
80E9F70D2C0A1C0B4A16E29186C6197F72E9ABEE8ACD43F54AAD3BD9FD7E7CBA
B57ED0D0B8CADAE403BD62D979A160DE98C0D0667A2B75DDA36A25EAF038BD67
FC0DC8C1890D795883768BDC54CD2FE3F43927E6C19E3B3346385A4BC8951C09
E4BE1D4C3D272B7A987888C1E91930714D52F3C44DE9638F62132697358732CB
7E9458557789492584F0327D9C345D862EF4AB8F5743BD618F0DAA794E6F431C
46D164ED444742B5ED42ECC7FB1139DC77E437E0F7D571FE5ECA4A553FCAF16E
CDE914138CFDC34B04AE0940A1DBD234BC732F6EBCC10A6B25B55296B747C14F
A3C5D8613BB87BEF204EEE7DE5949C5735585B70711A5EAA2FD17E961AE123EC
76924C5F405497CE9BC6692650C64AFFEC350F560E64C6EF20BB0D80B1F28EB3
83ABFDF48C048248A9C67E3E9D02C54CD9B71D0CC9C9E11729277744BD89C64D
69BE544AF9458131799F939A36A7BD40CAF3D145953000A03497D458D6931EEA
4A860EA6A661A604E2A99EC18131BE9498A328B1AA5B888E5B7A1D493F21D108
BB49036E40B7DB5529EA43F58F7E360A7068842AE857CBEA284FFF0D89A173F7
89465A40FD8C80D72AC42CBA6FA876B08A3CEBF5C78E1C89CDB38DB28039D2C3
956923C916D41D62D47B9FB57EA2809FBF4258553178FCBBC1B922F7E4B95CDC
3F000F1A5EF8A2AD1781CC7FD40E3EA499CA0E72DA9D07F058DCF139174F453B
B1F5FAD21131343980D51CDD352467B66382948EA7C1B26EB5E2BF1FF741DCA6
0AC8B94C2EB706C46803A4FD3514CD98213C303C1FF08AD5D9E9F35EF5F73100
90CE6E1CB5DB6A734D261F8E243768FAE47862463A91433AB3C22DF76A451BD1
B8AB721A61021AE169E7B4CD8CBC7AD01219167DE6864806D38AB8E7A5A9EB69
E466FC509AD2E731833EBA9D130DFA3DCC6CFD98290674A1453226096239F6BC
4BFA6A430CE3F66F74F49331E6019C8199F0C463FCD7F3BF0BCCC08E89F5F241
6B9E98B50A0C0EFCC9DCA0DCF785D0C8017F991A671DC35DC55295B6A4161FBB
8A52CD54B2B3AEF53B99FF205019EAF0494ABA77AFA32D60169077929CD08110
F486431DEA30F2A7FDEA6C1771C4C7347F7BDDB5DA89C53E923F0C09F7297B39
8A1913DE14FCB2AC996F9561199B311422C0B085636EEBFE318A302A56F15D49
79184A2EE101055C77EEA2DB51753AD54DE99B0BAC8340C19A6C9C12B285
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols8-Regular
%!PS-AdobeFont-1.0: LMMathSymbols8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathSymbols8-Regular known{/LMMathSymbols8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols8-Regular)readonly def
/FamilyName(LMMathSymbols8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathSymbols8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-30 -955 1185 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F035757560E05960E2C327020FEAE317
24C484AC0CD3C1AB9CF35516622A022D6CB83DEB8126DF04762C901617B35492
98158049D5C65DE86143B7F36D36233A115C36DF60D3C55816B2B0B341102AF0
90D7D4E00A7611262CCD366F870F0EE8175688261513076B608C7E160A9A79BD
2B66E2E2A89CBF6D1703854915ABEAFA09718FE338924B5AF1FBF1209786AEB0
0026C38A2C7E208E6C306BAAF037DFB0F3297EE1ABBA65247CF72D0F78A9BC24
038966CE124B94487282B69D6BC0B5E17441DA55415B5369E451E2B0D705FCAF
3AAC6DBEBB8AB0313C4C201F851DB96CA9EB49357C3C1AB73F0CA2110C994680
5AC8F0D760C03F71C92CEC2E1A3AB84813D389BEFE7E0C28FC76FCA70704BC4D
159EE8B490B95CB09DD01A4122A686AFB8B9C69381C8C303F9A3B695238C3BB4
CB44B3BBE50E2BAE63796BB51D945469BB75C69F7A758180B77CAAD2CFD5951A
23580A3D45083C8368543DD37AB49705B939804C12D4BDFA730845F7E42A6C9A
B3F0A376F44DC297393B85E8A18C45C99260BD499DE599CC0D76EBE4AA7D70AB
348FA87CA9A1000814C4FA99B4EBC35A0298AA29563B030707F3EAD9FFF7BFB8
3B347C4A00BFB392E79B79F413E67A73FBB006EBA896A65CB21BE940A0940640
34E08FF806A114ADD3FD42BB394F76CC77DD869C46DEEE20839C9A2FF73B840B
0ACF238D333719F5947DD4C39B8E3F070EEDDA1A39D526319828FA9F47F03D8A
245D8E215B37959566D26DD98185223E4FEF01676650EB4E26C0A425E6C23C50
4BA94BC88E08614769C017F6D4F14C52D7189D4AF8CDA367D8B04CA8D3F2307C
0A7A179419A80695912F456637F539123745CA8E696E250E0BA6B7C6277394E5
98A8799C29B6272613C152B0CAB05F3C7795791EC9AF2BDD416861A3D13FA858
BCB6ACF5BDE40E5DFBC1A171A7280E8FF4AC0D4C8A2199E9E2BAB5CB9131A76D
EAC166A7C449A549EA5111F1750CA2C6E1EC6F00CB6C62BA52D17FC66E06ACC9
1E6B858F9393AF9AA5E69F799E01D301B647DA57225C2920E3BCEE9D09CA5C60
F22B07F24A26DD8F4D6F9C78BFAA8D12A21531E713B80CD03A5FF4F3BBA2AD82
3BEF7DA8C97C30F1452006AA3B1A168483F6EDC4089ED02E567923AE6DBBCCA4
8C246A080448200C2A29C34AE6255BC79B73AE14B980A7C357681BB0962894CB
DA32FF2B70B21AF4D158E0F74652684A7150D0967F83E13EBBAB33588541AEEC
0DE8C53851845A44FFB46A93CEE3E8A0263882542F7F103D13C367EA8E1ABFAF
6486A9DBF6668550BE7858F5790BC87C66492C0FD34DB08EDF842E1AF58A09B0
85A9B7FA402029FE2439769D67DEBDC8AD8C861E90E5322951A2904FD702766B
36916DBA8F9C96141BBF4788FA435556B2B4E1B37DE4506ACC4224CFC00A8F83
33941A050B51B9508758F4EB2DC074D799F5116296B8822ADD743A043F9A6426
88D10767A9F99A072BD4C88CB579B34687BA4953B96DBA29F33211B12A0215F7
5F2F873E5074A7D593DAD0EDD97270FB9A87BE870321A49958B10E32850F0148
68E0A1D795937E61D4556BCDFB7F4DA63A884F9B4B07801D30B1357C3432D6D4
7B72B7D6040410C194EE5124ADFD7A40914BF569EA1F9CA8C8897E839D262395
5EDB3E97C591A3A5927DAC229EEE864B8C0F79ADBF88C0E6C41CC70D9010F07C
1CF9C05960E34FABB6C5DA4D789E39F35FE01F0B22BD9C63B3098457716D6B22
5EFCD0A960F3A2319252C7A0F73A4770E056209C14D721A714D713D5F2BFAB32
EBF815DDDE792B2556A87C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C071D06D71D60CEEC9FC68AAC0ADD1DD74B262
0156612EB4B21A3F4ABD34403540C124221FB9DA5EC6C7229DA9A1D033AB828E
9D80023B2C8E68FAF7A38C925E0587A1CCE432EBBBA598B201F5AD036BE7C8AD
B8C411BC79646781C4519B89DA648B919EB362176B83298EE2D8B405DC66D81E
C655DFFD1BB283F3C5DEF1495FF97C798C213036AD02BB07FD42EC5932E79727
ACF464295E75CFC635036CF27FFC42DC2919CC167CA4C2E673040B7909AA26E8
123B3D9F176F6510B9526E94D4E38E62F8B9B96E2D2D51BDA2FB7C6992B79CD8
3E40292315B0EFE711C8FCB37968B8AE1BCADE6BD8A3BA1009B34137B90D924F
B2784C9E13F0795427324E80C175BC99140171AA2F40784356690DDB982F55FE
EFFCF946C6DADBC6A907C7DC28850415D9AFC1C8A868801B990CE2D26AE40CB3
4EE0281A60063AA71E48DB8A35E05C2BEA1ED5BEC68717E95B7597AD7CACDA2A
6A4E8808BDF0AFFBA31BE1697149D7BACECF4481DC61CEAB7476A2E00CD8EFF1
37E476FE5A098E607E25ED29F4BF3409309145BD0530C8A76E85F59EB0890ECB
A12DE954F33220ECCE5E9CC4B52E97089790D08FFEEA7D143DCC7C07BB2694CA
6709EE19C11515E6E967043F9162C39D9BEB2767B7B31EA068C594A63173F7F1
67F3D6FE97087D19F73EEE205A47785EF3C453E6F77A08AE9F93F4060DD19EF6
6DA5E780DCCA30F180F8DFB0CEC4602AD1201C63D91450E7B5F44AEF32087A03
0D933A941134E74040E6E7E797E18AF57941DDF7DE2072ADACCD3BF8D4CFF06C
5B946E21D0F5A799CD011CFFE4CF0F571B4377AD4768FBEBDFCF6B49F09839B9
35B1F7AB20DBC872DEDA90B79F113F5A4BE581DB49C5EB8C9033B8050C143424
1EDB333D1DCB862DC543CE420CC26EDF9639E4256570975B25C6C1F06CFDB2FD
9035344017BAA39283C14E3AE66A14DAFFE2CD87485598645C39B92C18AAD014
7814BF27C8FA6DCA0BBA0FFA552B9FFDD54BDD8C7F84484031FFFC0AE8932A64
53D2632D9379F30231361D03BF91F74904C7106B6F8EB6ABBB29858F65E937CD
E31D67C847719779DE0B34CECE88A8F9A12D46B8FCA50DF4433B0B8AED6A63B9
E6512B667AC78A09A780813B1FF02AA967B12AAFAA0AF1B3DA27604A975C2DB6
FC1854457C67C54DC08DB989CA3267B2BE5B8178E6B7889A33771F86276E6DA4
F83033522871198AB3E954EDD88B5059BFBB42AFFC2738CA09B628CC646123FC
9C2BB8B9149CBADE7A7953FB4FBAEB6078B410935DF7D6D5064271899313C4E5
0DA12BF2F08521A17641A2F5541EC8419514939892C0E353FB1785CF9CB67C88
AF752C2A0DAB509A424DDB9649BD8A846E6BD3D374BEB6B9DBD5C10FF56E2000
AE4AA5B339C187F52630B52309834F266D778C720FA9BD9CBC1F322A39EFCAF5
85107BD5A5C188A6409352766D80E77B1270019E0EF57F31E9F13B9483F070F4
86122EE08A4870456161458B6C93A1602A5EE583461ED91A90CA5B743636AED8
1E5142CC0A7DC998CBCF84E39CE3B141286A5994C60855979B402FC1C092EA15
1A6F3762571629775247A6AC65DEFBCA10A51ED614E0C7FBC7335681207464AB
F8C4ED5B883E7A4D01199AFC3C88B0E2AB5FE014A84377451081CA0390DEBA75
7BEA45FA3171095052B839F7A2A9E41737F4A4CD704E8EAFC757116FE3012E01
AEBF584F6B34EB3F9C4B3893DF4E25B71CA17D427219E0E2F3F7ADB530841948
1FC1CD966965C72E9490C31153E2A0DAB73629A1DC0ED7C058AD150C4D5BE6CA
FCC7D71907232339F3FCD771914933CABF613F0F9FA3E206172B0B4ADD1D9744
00A8C2642147D4B652A8F1A7E5BD064E369FC591D4739533513C202E9DA91CDD
1581D1A58898DD6564B1710A88AEF94B888C52681BAEE1E3EFB4DBC694919D4F
41D01894C91D8E03F68DB550934E5D783537D2B57CEFE23ABACEC756F5D1EA5D
A74192035D2304EC4F9083716CA7906B80486BB5C79752270821CB12BE7ED0FB
9FEAA580CA187AA3C9475070809AF6881F745EC71298D454AD31AB998F5821B8
2070122634D5A247EE4D8672339B1D90113137D4FEAF3CF3A2456A8712556956
C5A48721B1B1E140ABFF7793081B2B092724FC0F129DE772236556BEEEBEBFB1
FAB1037FB0997B367483D2C8C0D44E6111CEE2EF443F84FAC7710AD0368D542E
8A629BBC3C6E2D85E984AA01B575B37DD1D9B0D453E3A73EE7A34FEFA5641BDD
67E694671B6250DAFA3D85E0A78E946C78E33A284D4F92B73D7AE87B13F108F2
C4611CD948F30F56B984E409650E9CDFFD63D996E25E5C0E0FFE02BBE2237537
8C945F31C26697A7ED159B529276995292581CB9B29A54F4F4B2D472C74909CC
47C1675DC6FB9A932C0552F8FBE17F4D8771BFC6109E6D709951694157B3CA9B
1F3952D101D6CE60D1A0A97C99EDB3FAD64BBD337BB747424BE88E67FEA44610
51A1F65159650D3A2FA882944E6E8DB113CE928969F6BE3E3B8BFB71302E87A4
5A22ED99B04853D66E5A22B56F79FEFE917A6F436B823B1A2FD914DDADEFB5C5
CA3A43E348D017CE2040752BF94A98902E608264DED8C3241F06469FE18C377E
448EDBB0823526BD66B40F0519F047195405629408224D070207499DF2F43E7D
52E442E3B6E9E3B08F88C9961E81373B96460077464C7DBE6C7C7887BEB3F685
B182706F5DB4C7C4BC2FB81A7D040EC5A04E5C5434D732318AE791EDC71A47F2
AB39A992EE304763BBA1AA81F9D74B24FA7EACEFBCAC72D673540922501841A4
F7EF18CA86AD20AD76325914FC0197DA6D7632947C4AB3AF2133D1A1E2719511
F62BEB9C879E76B74493C7D5EF38E01CC031CB4CE13C2EB6BA2695E1AB97260C
39A7CF8F690145893081D526990E92C1FB18CC4B968D70DFD13C6223FAC9AD31
2E1240ED981AECE8D13DC653D59255F868EF158EDD781E9D02889907B23F00D4
F6A0D9B74E591BADA348B09E22B1A783A8EF2AC87D34B6407522AB33411ECA4F
6C765C85ED1405A5F27B28A16751402AB278A8099E29940E719DE1E109E5BEFC
2A4098E77020110C37A90B5BDBE279918B0B31E08031DB686D518B4CBB8A4D0B
EBF6750A452A7F706EA676E3B3237FC5656B29CD5A3A04F82AC871B526CC28B3
A61D985EEB3610FCAA433B9C6D4683C512F0FDBF3EE6FF552D7BF0BBBBA37050
FCBE3F164189FDC8446ACDE8D0D4050278151B46E56AF826A0C2E9389C2B8BB8
E38579D281D5142944D3322E1C66D456E4C5DD727AA41FA5B369D5E10CD71832
A7DD40DE855B47289C449B6AD8D5F1D557102050EDA5F1641EAAFDDBC082E579
A06D8A3A323458808BAD0F4B8A2BF406DBAC4C5F555EC96E760C8245A1AD9F50
881DB475F892F868823CC55D4859C09148529FBA57A392127B68F5366491D1BB
097D8FF4A71966D42DD988F48C8A1F4DE0449E6AAE79500C42B4EFE4936D0D00
0FB339115493C16412F1D6DCE02BC7B485CC108C6321EBF1C609633933A576C6
B0758D49F3155D448D505F73A5206EC1C8886F5949790A7E4B850B6B8E31EC18
B7321E63AC75B6588774961F6B7D313B850AA4B368E48DAFAA5693CAA236E150
E02FB2831359FDB95792B2E6431DD24BFA8F2B51BC21E2E5AACC0CA211F50A13
075ABCF9F440CA468403D939B91520C652F1196EAF1BC975E26F8057F69CB972
E976F99070AD3FCD958C1EC54B3994EA142AA0615EF7BC00D85F75BF5F32B350
E2CF46BA0E8D0120BDB54910E5C27A27B59664E856EDDE290103A0D490FD76DD
09B152B3AD1C4754696B239D4B13935AC19769600943C7343A5E7A06C9115395
DC2F92EA95E5ECE5A08EDD16DF74B6297EC0220C91F8BB9AFE742FA96456E131
7D41CDCE88A8F9A12D46B8FCA50DF4433B0B8AED6A63BB5FFDFB8D48D04F9849
2972699B5667C0D2D206F4785DE20A854E1D4C655A690689B7B5A19F8162E5D8
454B7A1CE94AF723F47C6B168CB7269CC802B14545C8448B5C260C6AAED5FB23
2390D7239C22534FEE644AE96C5718EFFB9DF1AC47CB3022D3751E6B7123FB71
403E154150FA4A14EE2CDC8F0BD084CAB30272E8F065218BA88536F138B94AFA
D750F6EA9BB43271084CD876A14CEBEB86283BDB500BBC0F9E152C30059054EE
92951E4A202AB409F7D16443DE00ED69C1FA674BA3664F8BD00C08A27F475C00
E6AABE35B01B991AE910B7DC821CFD8A6B5C7F4B116E78065CB219C926D45163
EBF6E81EF0C38076871283D64FA5F2126CCA7E93636A7CCA2158B99A15CD405D
4AD290CD8F7AF8845CF78D4BE9C7F2E4DC00372530C64BBBB785117A8AEEC190
9F49C82BAD55AD174D38A74582CB367BB50ACF8FBB2C8A2EDB17FF267D0F21C3
5BE42CA518272C9F9FB2DF0780C957CF1B9734E9F49C0E6EBDB5D24ED5D673E2
6A25811D4BCA9D693EF8ABE784D2BE46DE1E57E1B738ADF6FD49E6A53BF48C6C
2A73026234D3719C72C2FB8B8274AB54A6853DC6784398A6B994BE424B6E9078
6C303D590747608AF3CDD6A51B5612DD5D49E1153A25EBEAC76FEC601CF4D10F
65DAE3EDBF9A163BEE244542BFD2849D498C239237ECDCB23458C7C3B9395C7F
900C2AC7BDEF8FB9D4574698BC8D4E374B34969A885A0A4AA26F19F8348EC621
89B42297868AD2C3E80D95C41FA4A5AF7A016D3C773E040312AA0240DE24C7F9
D662FC2E59673DEF563AECCABF724C09CEEB5DCA64FC6D24A091A75B5745DFEE
F5C1162900B5F1EF5A7102C27DB1918679E7E354A5DABF897D9C8EF5A14FA8DF
FA3A7B3D47542FFF5987268E60E7FD64B017EC6A8FDB4BA5AB5B5B58046899C9
C5993E7302C870678DEBE8FEF3F2438217BA5121CC668458620DB3D381D56770
19CDD612E5C0A267BE4F707ECE93B3E1E8BE65922315729FA5513AD13B562C5E
E145AB39905815D6C3E8B60AC5C1D4D7731E2A6B122C6F57790C42B0368AD7A4
99EE5F029AA6F8E302F4CD994EC08C00AC6A66C51254F71280CC722402E200EA
D4F6F489DCD61B81CDB85804A5EF00CDB09D9C2EE4F3D571285E319A78F90942
1C31359DDF81F38F6E8615BCD0E6CFFE077688C365888921E45608C868A0F6F9
D726CB2CD81B49A9F47C12FF76284D3B07E2C2E788036B4867F90D40C1E4FF74
60399F1F08F98A05A579D00D1ED5E8A86BE9DC1CEE3FCB03B9A0E4BBB81C849F
AB1A6089E9807455A5DD78B2EC3090E36EDF4D19FA6BBEF386127BBDB53D25E6
8448A975CD56BE0A93070F848850FB9B3B0285C7FADB28A3711C06273B79FBD2
A509FDF7AF81630306D67E0AAD0DAB78243E1B814F745234BA7CD57325B5A34C
C3F984018DC9653649786481788A6F58ADDB87DD0D883AF60455753850A63756
5EBCDE76329F5626E6328EBE3DB5770A4C3E21341C304F38845FE70E091803D9
D14037AC4AA8C4D17EBB62ACEFE5344982E0F489D72EF60183D8F2A79A3AA765
C18E0479B0255870CD61C8CF7AA8DE567D174EC90945404C5B928EAF3E8DDC1E
018442474EC6B0B42DF539EC1557722299347DCFF0347BA4273054B8062D3DF6
FF094944AE472D60DDF6CA62288E4E780F8614C7749C9406325C82715C866134
637DCCE4848D2B051B8E0EC7B88872E9AE68BB5DDC30F4A61119733F6F6DE0BF
4C6437A849A661B6A233B1C24238BB910C11D2A8024C89FB5DC745489AAC2570
4C61242B4B1983A5D0B134C8052495CBAA9D2E2E014641BD58F0EC389FACADA3
08A1723A5C2492BA0615B0222EDD152AD19C307118AC0086653521EA59D676CF
C36AB586FF1FD4C383E2785EAD36F41274FB0BFF9DFEADC612CA44A7392D8E79
1DDE1DE818BBF26CE3BCC2569F5CE6DC91D4F8B7800A05DECB300CD7A8C38D77
4C1DF436013901C9671F77F34A63F361C5579EC5E00C5A8E2FC97874F6459EFC
C1760E9C6C78E60CC0152340DA6F26C67B2E10B620750E2C44E5CB9DCE747E29
6F7E716E6BB12B699A2FCA90DFB3DD730D96D100DC5B1BBB1632D7015235F4D5
1C1C753EEFDD6ADCEB45DF4D00713744039C43B860B5A9C51AF0BEF11CC8E85B
067A402342896C9B3BAAA570C4900E12D720F2812F28626DE3BD3F3426B82718
259AD02CDB518BA4C4AD8F261CFEBF43857EC7A543ABB1E059247E276E206CB0
0BED125C8F78A665901F80068C9B0AED83074C6270B177BAA18F1975F43E9160
8B75D86D9F7C1E986C2DDA71CBF33FACEE675B943764AFE71B5A359C4A092916
3E8EF660794518DA4307AA5B38469000FBF31BAE9CE8703754A099D21B332D3C
A19A842755A79DDC1E281A8C34A969B80EDC946658B7579B5BCF07AC8B45C2A8
3664140E70CA62DCB3153CB4A8E46F12CC16254F52A26FE47FE41504D3E851A0
665AB60BC0CE5C72512D196F8D1BC0B3FC12DA2D13F4B9AEA2D017EE7E574B86
2576F5EA495F51E1B3A86090ECFDB57097EF73BFFD5E41E8AB6BF105F87986D4
95940A8B4A29E4DC974554DF975D026EA92FC09DBD65783663CAFE414B6F8C06
F00A26631D7FCC4527109F177093E7432F5FAA6CA14F1654ACCFEC8FFC127488
F604E972B695E9EF18F331A58BE4704E5130FB4984C3FE2474E6CF0935F90B79
7221D94774689E83E5406F5D9554C1284249C687A6CF5A6B4783F54267C48710
32ED406DE854CD5E243C0BE4656E35FA02FAF5101E1AE6B7CB286C9DB979D763
FEB468FC7AA2DDBE2E708D27D89164B12BD8BDF0418BEDF018EA67683158D1B7
73C6EF553EA897D5F2D53E75902E57D7C4E06D7DC83F1C557ECF5DE83748370B
00EE03A3ADB919976D4DBFF11B246AF9C2FE922A8A6F8CD47656ED2CBC816B17
3B01048BE9D1E4B54ABC0396D5203D088ED7A1FC7CC863AF414AC14AC2D75E5E
EDEB706CFB2AFE24EB580E55BD31B793E4065CE83795F047004ED88F5C38BDA8
7F5FA8880517429B9C4E5FE980448EDF3BD57758FD145E769D4E88BF43D19050
DA58F5EDC7B4AA76BD8CDAF0B8639BD5D2C7552AF5415B7F35B957F02B962930
D3D0C3AABCE7BF840A7A035F2CC57FC978684570CF6C8FDB960B9CC6E9435D65
77D1CFB71D362BAD7280AED8771C6EE2F7E2D86C5661CDBEBB354B84249E93B7
7A0E409B4D5E17600E1E43F5EA1F884939C0AE467119F1E155676D10A8A35955
BADB667DB10180DF404F43A166E2E533F1C050D35CE4AEE92C35EE391398EFCF
E19EDE2E31F837DF86F1800F59C89EF6401112AB73434A3938E1970D8EA3CD40
C7B8FB44205899626FBC269C25478E0A63F78F3460EDD4F64B4D2A5B3E660B64
D293F803C670E243F0B0EB1C548746C08C7F4FAC0D4A7FD8B7369AED2AE9A79C
74C0FF0E0B0C1AD3B59BEF79753FDA3E929B52F207382364B1C62AE8311C4337
297E030CC0CE93ADB4E2FEB60E28FF6D4AF0010D422AFC137F2254FFF6C2929F
CB76A235705EC088049C1F1B0E78FD2D357BBBFB0E12CD481F96252AB7402213
DF9BB4464515CCEA5FE4C0CF761E921D7D2992EB24625547D54E3F2C644ABABB
47914DF3ED2C719753BB1EED9C435F2D571BEBA4F76A0AD5DFDBA6EC952A4F37
948B63263FA4097587802F6C66C3BC6E9DF45A22A24877E4A4499697D46B779C
8609E85E4BCFE84319532B3AC9D62BD413CC127C8DAEBC28D7DE5CB57A30F23A
2859902409CD4FF43EF6A99E9FFA2DB4113C12AB9C616F074276C4840A546A73
0D24D8518117AD200014839545B1078F38D7284FBFC473C510CA28AB90147613
F0EBC94C3EA0001043705336F16E783FDADA674B361F951D5152C0011FE0BEAE
51286E4979DACD3F5A953BD9E918D5E46449525A4A597FF0F091B2B4794752D7
EE5D9B94524DF768ADA1377760AB1ACE2D780F5624CF53DE046A36EFB35B52F0
566623440D7F364C4030648BC39783FD7AE189510DB572D01093BC4C7EE0C09F
389FF828AA7585F9B7FAFA718DAF925AA837B8C0B647161E5C322CA820521400
5D234795C9DC1354D1C0E5ABC997C64F3C84D2C3B7581BC9566EB6D012B6B784
F740B8E0B360808C984DEC73EF57328A2347BC752EB0EFF7BE8B688A3622826E
C83CC42DCA4A26C504AB95C5232A86199FC1295D8BC52BBA9C5089A346CC5760
009233FDE0B38CD4EC1D07A9F817ADBD1AA6D303AAF94D5FA688675B55D40FA4
3C6D97741D9FE4C964FC6D24A091A75B5745DFEEF5C1162900B5F1EF59402CD5
E4D0C3953C9493D87F46CE4E9C7A543364A9B82B34154924F4739C650A8EF8D2
38C73BD6689A0657D8427446E44E2F5C77937234D1D6AFCA63944D3FE5126940
8ADA00FF11BFB205B9A42EC1F50B435E4D44E14E22056FEA071D0061F16D8879
6C4BA0C670D0E715ED9333A0FBBD15F19CBCE5F93259A6C4A8CAD50B9186BF14
62D3AE2AAEA8A45E9A29BBCF83E95F0C65B2D60169538EDFAAB935FE3468186E
CD90E2F15FDBB395191E6C4659910683768F80764D94FE8A746FD06C08F15F97
3A528084C73A3416B7D9498707C04E9115D411FD74AD771B5973E6D0A573A1FD
2E01CB1197990EDF8444CC83F1AF789DCE5C7F64567C9D80D1829D7FE5F45647
ED6B99C6D96B728840A77AAB12DF037473065B62E9F3775CAEDAD9508FA92283
6FAA01D50CBB9B12B543AF2A86A99F4D544B8974F01B52945FC6ABCF3ECD8410
335AE6CAAA4F740EFA8AE1742B115F4FA7FD8E330D0B86B191FF5B038A5D0C32
91053A42460468F6A1700953700663A85229385FB9BC76B5FD875ABAE3E6DAD7
9EE2B71FBAA76C2CF157574A30CF7D71980C9059C3D6B6A3204F03427D0C1ED0
63F935C93FEC0118A7769C3492300AC5C68153E7DC46AC75E4031836536A9FF8
F9855C80511A27D667AE834A96925698006601802F57A614BA454AEBAD5381A9
33E9E2EC6A78543582AED8FADA73537FF0C6D7FB2EAF256CEAEC65106F666E66
BF183E0F0E4775D00C05AE65EAF85FB57223FA553494EDAC82855AB977A49791
5342A184DA5589E192F08B7149CBB9903A5809202C698AB39B218ECC7BB9128F
40DFF15856E79E10EA85E741412DF41F4C59FEB8AEF11EC7D1484B17EDFD7F39
0EE3B12312F51B3512559F1D609D0ED4BAD7B1C1C003F982B905BD7D67725C83
EF7119C2C4ABACC0DFF903C17E5B0BC25F89AE84006216080ECAF450D8FF2A1C
A4BD4256B7E56091E388284DBD11F5425FEB05566B96D20438400E0E78630FD5
05A174BEB44068BDD70570D038B3D9F60F63119EC9FA765E6E318CA3DBEB209B
ACED0957B2A13CCC8B93FF7BC5FC7C7A37AE0523EEAF1FBD745CE175B921697F
9D9FF0803559FEA21109882857594189F167F40EED0DF7150DB40D2B141DCC1B
60EDED42C0DB0FF95359E700BE2DC30F248D1BEFA38DFC784CE855754BC80098
5A57640B2B6105B2D2C996F6D44657DAF5DF5891AF008F869D7AF5E4EF1989FD
377E9723C5A85CFE645109B1AA5FEDE99BBB3800D471BB00C657884722CE9678
6CC228DD6BDA9B4F88DC224D329F47D8E9A61F56E5B463649E058E104A8537D3
D81053D9DFBC564791CA6CAFD44529A22B1E1E1B4FEB64AB0950733055DCCC2B
78551535EE5DA52B7AF5030F8AE1482312B61697C4574658A3E865BBEDEF8E1B
CD305A5ACF3C44E769368D0593ED7C9E2AB4B0184BC89A05CD2D29851EA57424
D2CD1BC0281FE40CC2D3DD1B36FCCC46801180D05D76D548B4D41FEBAF2A1E1B
7DF8BD5B4735481E2E64CBDFFD53A6555556089ADAB4DAF9B826BC53D97B4166
C60752E5E4D9771C3B3FC8F2156659677CBF68EEB3D1A5D8A8D2559C85177C31
784217D6A61BCB560C5ADF83A337082F566E73C4C3C500CD798E325C588B5B71
AF3DBF6D30AE540AD4662F8457859B8DBA51655025FA11DFE00469468AD648DF
75630D5E29912CD7E6362E528E075BC01117E45F49AFB2D3E936B548CD78AA6A
6FCF0CFD5A62BD50BAEA04E96DC81F6F9F742A10CFFDABEB17316F9CEC899026
7B1BD97D4734CF37B2C1255D017F11F7E1F90542E9E515490079815C2000B856
C14AC12D7456FF92C2678CD0084F1DFA0EC2AE8B857358C6C1A928CEA7F0D5FF
99461F3A9DA8509E7EE6AB98B4BB88F672AFCA3A553C55AA3402337C6C9B077A
033B01F3B878B9E9FDE0356382226C92B9537DF8C4F37383902B4E1667123615
FF99555E34634B52F0B8B83EEF5CCA51B26403A6263FA4C55FEC2B062491590F
F01EF0F36E918D98CF7327686AF072D547A5AD7A1C457D4DE11410C601C40F65
5EA32589D03360B92ABD1BF4762108CC1B72CF4BE2B3EE78D4C5714622E75955
FF3E78C4575D810E7E05045030378BD2EF0242021D85C50EF4F0FA7E8DDAA7E0
9A5C8225E5EDAEB91BAF1279E7930E73FDE400C7E7A7EF0884DDEC35700215F6
0737ECDD6C87E2764C59C2EFFA770443E21DC3DFC0F2885961670BE2D2CE87F1
1B7F474BB9591EB9678EBB5A676561BF61FABAB8309AE123A6CE6F839C2708CB
5A55F4ED91FBA9AC00C0C25D34BBF10FD8A7676C7BDFE23406C55DD3FA8E6BD8
9DB799536EE19B0EC9C57B38834DF8ADB373A5B5BDB1D57F414F3AE5A0B573EF
AEEA5D8C588DE556745DA3E386BBD02546E44C6FEA7C1D4EAD89507E04EFB964
76A3B4A2511E20586E9E24C566824C8AE99CCF0EA0BC1407B202F3CD1B402168
35375E0B9E13B07B4D38BF176C177353670633F29EFAA268D83B462FC0BD10BB
BB8DB7B12BB1011EE8D6C0A77A499C6C2DD120123D8604D4CA0EC412240A4B47
06677B5EC78742FEFCE44BF6E8AE22EB1DFBE8CEAFA9ADCC20ADAAC3C0C63CFC
3B7ADA39C0AA97CA287AA3B1931DFAC0A37BDFF530845861D5E5C2EC7E59783C
A27D5C82DEDAC7AF97962EBECEDD21DEF42A0ACB73580FE360065E6267113421
BF6430B94091A2B42A2CC2C3BF2B7D3D23763B76BD8F81F317A7974C5A29C373
261FC3D6A8451E60C03FEB118AE510A5A4833C6878133CA085D2E443579A012D
18FD7A725B42CBFFA9B024C740B0ACC084C0DD92E3E329CFC4E2B36E704F5A2E
99A7CBCE637CE9D77ECC1C66D4720DDBEDC0E0857B057D019BB4C2132324B2A9
54DB76FFBE2AB51344990FFB38A6DBEC48FFE206A0FBA50CEBE2BE28FD8E6DE5
58224448274777692B818067213AD4983B07D42634F8840B6FD878D4698FFE1E
AAB2F0BAC298957E4172F101A12BC5F2734A2C358DB93D76EDF6D0CA24D36D57
8A8786980F7B2F5F384A126BC83CB7D22D504C13E3B3CEC8F2FA394863533DF6
169E672CE9991EB8C422B5C54257C66582997E82470623B462508AB5353B6428
ABB42BBE9C1F6C104A56F6F15D1687C92D7BF00C6F8129E347C6489FD4FC798A
DCBBE8656640B9FD8DD7D1F131D312C2CF747D35FB85DCE8356892C857A51A8D
59DE97F8A01E890DA5008479343B609157F082AE2BDE83E736F2993D8C048393
BD80B70A1B9F5F844D4988A574FB12CDDD4F1347213C93275718A7ECE52E4B35
84DDBD03B345F3ABD2897BC9C6E0948720726BDED2B572EAF23F87D1B4E33DCD
967D167E9BF822D0CB8E1EF3F81C1626E3123F65357D50494112084CE01F2CA3
AB00BAB6D6C7EC825EE6AF47BF5B6F6AD18F8118331C87CB83A65571AB482E2D
E257D768E496946556E5311B3C8D1E40676125C5C463F511124CA3AB6655F46F
7CFD366BF9B140E1940E13D7443EFCEED61617E55E5BCFCB4F3C90BFB9F256F3
160A370EBA3775F4297F0DAD9E14CF669C7B38CB2D16EE53FCC59444A3FDD923
9B18626BEF4DD08E57DD9280429B46221987A70CB53C5BEBCD5B2C139389EA1E
172679B2EB1444E570E4FB2E9CDF31D967A9782C3D1060E25FEFDA9A31D6E867
5EA9335CCD9327F84018CAC0A2ACCF03FBCF06FE08AEB149A58E488D596E212F
E0A67ADBC2A0CD63EA4F910768719B316042736A73C196D8618F85AB3F011E78
7205BE3178501911715F16FD79F34C2B0C99F08A14AC86DDA0E5E1DECC2A93B4
82ADF9BFA9BA653CA71C9BD82D057EDFB79CBB3AB0F969475F70DE15FF67FD9F
8598AD4F7784F086FC1153C84590672247F6EB7DE01E820CF9FF3BEDF7164D9A
F89DBBE3B49616C51E8265379ED8DE9A58777D57B95A15D3B8F74B1D3101578C
35ADD0A8D9D4DAD5542DE899339842E6524793E24B0D160100C2DB33B804AE5F
F3756A44F596F7FDB278CFE05F885E3AC77CD882285266E081EC6D193B6D602E
72BD1D95281E7B0971095ECE0EC7494D4247243DFA8385DBC5760B397F0EF9DE
EF7EE029A0C0B16FBD2D0C35AC8DDBA4E9FDA6D4CE4408C1EE66EF483DBA4330
35AB967248C166797ABD0873EBC07887EB84556F43AEDEA439FBF139A16A5534
2C0567C63CCCC7D4581D1D357E52311AF227B3E316B4289EB592EA5CC31283BB
51EC9FE6F2A748BDE8B927C96A7B6A6E5489C5662EF190E9502C097B3D9123E2
13615EACC95D32043C847D11D7DA737251FB47D0B21212E70A01A68BBA1FFC28
AA0B2660C443D24320003930CD82995B6CA72A3CC8C866B77F225EB04390858B
FF70300B0F425D9FE00B3E354A8F91DF44F0FA4452536993F03928FBF72C029E
FF203361CFCB767EBA8D659AF5C78794A5D4ECE06E210228390284F3C645085F
C552479B717261AC64BE8AD8FD28A9EF8EEB25F6A230DC6AB0708EA9072F69CC
6CFDEDC298DF2EC7706E9F77C8A04B529CC5FA2D3044E9909CD4A49E4600DBC7
FE9A727D18EA999ED767B6D299B81268F3A0B7F152A9EACD5E0E0D21CD6BE8E9
CD765385D8B5DE106435BCC52F1F278910A7453E1D5E4495E0ECC246A1A96A67
E7EDE8C1B81FA5A78EE7283509223056560C55438755D243C5F055EB9D6BC533
030B7B24D1CAF943CCF4A65FEA89CBD68DD7C16D019675621BB45566C1D73A81
43C8A24C4A470432BD989259DB9F6C02C826516CEFE76A20C4B77FF5006F9417
D29C701FBBB72A57757B2CBFC6F5D915C260859C43D16849F52816E963DF69E6
5809B7A1A57F9CC512BDC51EF2549329ADE9B5ED66F92F3918E329298D9F6293
E8614966D596681698EF9F5C3F9C1E9D28B71A246B043CE44E65F6FF48FDFD9E
7F97A02DBD8119C5CF0B4AA548F1F5EE79293E39D818910A1BC4CCD59FE2E917
BCC939A9173872146DBFB3CAD4DA410E69C542CAC64B65F6B829C08A4EAD88AB
78C203C6D210C162942911B3230B8D462CB20C910E977863B5BC5F2ADD55C74D
B7CA7E9EFAFE44BA7F7A772A1DE9564A9D3E07106E7C3EBF116741C894BF39A9
0453F01FE9A9C0B99A0C829B31A39E96DB3FB6450A6FA72B393C1329F91FF6E0
5E273B5DB89549315DD15AD26482EB823194818E6DE249207343C37BE9B926EE
DA3BF3D70B7EA564D92A65C4DED8966517660EFB9F77E72A4463CC061B079BA8
C8459393D8766BF4B26E479DA5A2F4C3D020E853171B0D1612A3DFA5264D6B64
371271F687804E60080A4C7FC4641AC84D9C0A610AA270C036838AC86A8C6A32
2C7FB4E132582BFB1566DDCCBD1F5DA09879D88540FA56F817D5C1B557C9C11D
2D1E7D8E9C5608F8D6639843D08FBCAFE02A4FABFE9E13B8BC0F4FA28FF4343B
283D1E9906259C74BE3535877F54B62158362A2FAE18AFACC74586D3DD54067F
7779D9DA069D78960F4869F16F458083B608409F1BC136BE8BE912F59CF929B8
2718259AD02CDB518BA4C4AD8F261CFEBF43800C3687793CA934F06A27C78C51
22CD9EC73E29A912F1956FBA6AC4B35FEAD22394C03A72D4AAC6C42C085ECCA2
83F22890699F277A3B4ECCBCE4AB764ABC44BA382E8F9A0553670CFCE11E6829
DCABA73D9CE75D74A63FE035DA6AE09073B38E8EC302C923C417F577823C0210
444C9EFC2B351212FCB66B4CE90406085978F8EAEEA93BFC81C0DE48C09B326F
64EFEBAE47B9BED3277F15D4F9690BC324B840252750485AD8A5BE240B63473C
5E2AE49AAE5B3839F3E07B66DE9047BCCE989895127AF92F2E6F7BBE20572943
FB64EF33B2776180606E79F42F69D23D83720FA9BD9CBC1F322A39EFCAF58510
7BD5A5C188A4F3E799A32B23859A4CDFB52C22ADB4DB30D313BD8481157DE1AB
55FEA2AA4FB28CD56DAE1865B46C21E0E0E89F92C164DFEC115BCDA359B58305
C56E941651E321CDA67159BB74CE9AA7E2465DF8BB191187D14A7C115822AAC1
C9EE282505EE165C67B85CFD9540F40E3918B0F36799E9556526F5E5F2205DD6
41EE39A4BD6C8EC20F3EDEC379F90BDE98CB15B4BA24624E146098A7CC2A6744
4D326A308657D62DC3F52A76832779BDFDFB3E488773EC7FA5F235AE1BA3C6F3
547FF24606651E5887FE8D860619C6F45FBB3B6B73E80D855F5EBFF6A5BCEC48
48CE05C8BDDBDDC8BAD0B87F3BA50D36D20926718FD3700DEC250462972EF06E
EB9BCD3B1076ABCC3DE786B58C489534C2490AF71BB6460BABFBADD0AFABEA8C
80E085B2BDD8ABD8ABFBA9D53C42A61026E5BDAF599739777399A670671F12FC
2A455157B1BF595EA3E14929085DBBCCEDB86605F30BCF8E570B4341C3751A10
FE6C3304E9A7D21CE731EA372572B28F41AEC501195D34460B4CB7D6A079D7BD
85B9A80845B563220566FEB8F341AACA788E3A182971A143737D515EC7EBDAB4
AF1ECBA1C6E90ED114821961FF7FB9CDC8E87628938D6D0D86F3813393C1B0F8
795A88AD6FBC2E709568E556CB4D1016889B947CBDBFA2AA2F95E47942252534
868BC0BDD3AC613B165583560A971E20D13D14FBDC71D6F64905DBB304B088FD
97B4BC957F62A653018E98A03B7268517394AEC07942847062262A67530B2F73
EEE1DE2A68B5B6105D8764CB02357D8145A1FCCBE19B1974E7D188BE0FB15BB4
6AAD04E02883BE3D2874FC615317B101D4DD8E99CEB6204BAA933445AEA45169
E6F0C558A7C76703D9959B4266FC6B1D8F2F796E97E492D77BAA5654806C9CAC
0D5C44A7F312298283B7BE5DC9E87714F3B802AD3E829A70F3E630D3712A8859
0E36B304030ADA0D2ACD2B57ABD9E5573D568776A96ACE6FCBDD69667868EF37
1BF4BF97B49DD9D0ACDC545F5E9508298692F1D7A25FB8A43CBCBF50D14F75CA
3925E9D2221524462A1F98761B4E749C5290AA347F0642DDA30F1997653E0DDA
51C90CB9815BE41305099CFC3E1E4DF8435E646688A6CAC6190A493572103C85
22892F912C82043AF80F61A293D8E4663948824B1F167FFB8DA6D0FC30521026
8A94F787E3E726E23CD3D59AEDFF832696F5CA0D4BD71FC54A1D783BF1258AF1
911F31464448C0709C1710DA050C922414669E32B9CDBBD1A4F1198D1C09F4F9
74B984F2CCE516A901673DE4B3F6F2B78F3EE8713C62E48F5C8F62344E371AF8
C17D5AAA5E3469EACB167C30F7D7763F20D741FD762A588BD02751783B75A1DB
76E63876B6FB9A2B8BC293A7C116E4411AAB9A60C2FDF1D3759ABCDA9DB4FFB4
CF7051863564D9EE4D3417DD8BA249945228E14A389F089207F671AA80D08B77
A40CB972E74299E2558DD70A36B6A8BA9D4BF36A724D7F414849B63D419F4B45
BB03148724B79E445853D02D69F06FC20D7DE3791B8FB54AB6996CB8826AF76C
F5FE7F2BAAADC3900F14F17E59A758BD75CDF6C8892DA1D9E5D3042D125734EB
53A8090EE56334A908924DC4B86318921169C7F112991FDA63181543D0E993EE
334C06B1A622591040A4D13176649B1A4C795BFDF16DF6E9B62353C3A97B9BC8
66CFBD491B08704C6DB6D9F424CFB1800057E4CD4218C88DAEE1BCCCA10DC61A
DAEA54F207742D31C0B69DDD41BA88727A8086962286D0CC1BB1EE4DD1AA03DF
C8ACC8BFD0FCCA75F4FC8D577A380B34888EFA8DCA131BC4999FC01E54A639DB
E0D7DB87DF0B96BC386A0DC2B658C25806C67763358A994E1927E1E7E81CDEC1
DBA0B63403DB209B0E863AED121E3736AA0E1ED55B70BC0079CC996AC611A934
830E2481F4C794D941A81A592501CB99EC2DA8DC9898E7D7052B6A746598904F
052A50EF84D1C46CFE09C77254D06D3E100E16295B17CF8CDBB25AF54BD452D1
FE2B0C171ED12EDBF622DBC6438DF6625367A51A814A040839172E3D856FDB91
167A89F2C736DE82F77A6D8F10A45FDA871DE066F5383FC4539D3C5601350E11
027DBFE4659DE91408807BD26DF0FBBEF346A224D073A11E3638F95D038D66E5
3CC9111E290624DC39FB79FEFAC07D2DA7DECDBAEAB256B88AE676FDC3CD9831
BE77B254972132E57A163B5355B0E26711658E3636933A60C554B80B5A7C816D
38FEF3E610CEE0821C68FB994E4EF6DCE7C566AF4918148480D802FAC4425713
97A62FF6727AC3BA11E892F304616D034B3F80AD2AD5D4E1DAE678029CC028DB
4B4E119164D6F9F6B7C3C24258D58F35232088B67BBE9656C74AF133C1C75873
1AA348AB2BD113D4C2F5C4ECEE0EED19E733A2A2B3C97F15CB4FEC940C45FCD7
F44ACD3EFD9932C19E128DB67D6F73FE591BDF942BCABB9681E18B6EE5C6B153
BA55F194E998B6EC925AC28831C654EB234ED126A95DBB4FA2D09EF80D1F2C50
7DF980D3DC0EE3F79FEEE1B30ED1EAA29FAA9DD9CB641E5BC06A2384A76EFFE1
487F472EAAAADDBC48486C5D96FF0A334E8F5667997DFA2EEA9B7EE86F7FF639
8C06F8F578B49F50F9D58FD4161F04235FEBAC54193DE67EF18181FF138F946A
8E18E1838F4BD242BC436914F8C55BBCB427552362C7E1301C609871641736D8
B9C714FA8870776EA3C4E8DC170CBF5F561E004C322217D2A01680D7EC23752E
647F5E9284AF035C5C9DB4F8EB9844FABE985F922CCD96E0CC6F5A17D0A887B5
BE606C0A21EFE6853F86A81F2294CD52B8B3CEAF5CEA7C3AE566DA6FC9118B7A
2B088D87B141453D3D3AD224EFD9AEF1FB4B72CB3030285F528CDD83794B1D8E
0D6BEFC5DCDD5D4EEFDD6ABE878DAD54981D7C999B88588E3BDEA834A3B0F645
92C48CA0F3B1DB49F96AF896F9B09E68528214503E95BA71194E435A0810307C
C13A1050AFDB5FD2070031BBBFEE53E415C1E1417E02C197B010E49F7B468D51
C05113E4DFD75D28328970333D68C7090E454AF9E45392F1B4CA74A7A89A3A2A
4B3708E7272F426F700148DD7894AB6048D55F04A4B42F39A4935E10F10BAABF
5FAAAA47A65D35EDAC51547EFE9C11BAEAB87E7827B8321C7FD25344A0A36FCE
EB4DEDF80BA158F65C546E9ABE7B6415B64E2A21E04E486126604BB3082C40A6
5639E91B97483486C428868DFE4356AB5F2F38D70FA75397E8127FD3D47DCF06
281811DA066F16583E31EDBAF6421FD5099C6A2A421B22C399AAD5D324BCC6F7
9069690BDE2D5DCAB19AF1EEBBF1786B432C43F3C7361171FF479FB4FDFFC814
7219F8BC56D7731B980EF3C793B89AD3612894309F1DD29EC2917528A1E4F90E
BE4A58DE01CD82B0B8D1C2699969029ADA6BBE4098BB47894402F0B11E12FE6F
8C7D459D41AAF3214DC47D57754E55CE6588CD0FDD9D151FAC24FC1467A7217C
1C887F89586F84CE132D460067CEF1AAB1132A7760C13A25D4F58FC0C20BED7A
E3AFC8DC88D38BE549181454004F18A348FDA4446E35C019B5DEAB90F1C88BB2
0B7662677D7CABA2D572D5EDEF408B689FAF78D1103036B695EDB12D5762D807
5F69A14582986510FAF7CC85EE25AF847626399CAA221DC09190CF963F70D6FB
253E24FF4AA72AD9117A726322FD0A2F50DA63265374CE25BBBF3E7B160A35E9
6685E39DE90AE39CDDC8ADD26CF9515090CBF63F37CA1E51253191C462F39C2E
6D1E17C5DD710E6DE3B94D853362CCB1538C5D0662C694FA028DF04128F86348
FB9A511FC9C5F2A4948ABF4FFE049B0DDE72B9F10BF392EEB7EB8AED2B53A6F2
E58A123D80514590F1A6F5EBDB837B5DF27E58C30BB0821342EB97D8A5451711
BCF10381381D3FDDBB3CB3324D30BF1893BE00AFD1CF67018D820E9C694AE14C
87D6F5F293B097783B27C733DDEF14A8F726993066F1D7BDA1CC7E62AC1BC317
2CD857F2F8CAA067EB6BACB1604BEE11CE454D7F620051B4131C34AA6A118181
DC716145F7BC7E8475220DCAC43AEF7C894AEB588BD00A58807893395E20C0F1
233B37DFFF06E80BDA2E2780E0925CBA7730842B50CBAB99A691D4BC90EBEBBB
AAEA63C90535AC90368B31AB3110CB4EB8D00DF6246BA012FE0D212D2C52F35D
FA76D8BD28B2DD16C22B540BD2E3DB1BC2F84FA09BD0F0F01A5C693C8659E5EC
E5F23D7167090DE590FABBA2C4A61C3CC62C791E25F5D42D773503A871E7003D
92A42252C0BB59671471F7A62DE9A66C35F09BA6F8E302F4CD994EC08C00AC6A
66C51254F712840B3B151CD82DDFA79D31F0B4A0485F51334BDF5CD5E85B5988
EF29BDF6223F82F41B3259A86D6541C9150BDB7276F5DA72A975945FBB6481FB
C4F25889CCCD84E337400451BAA073A1A81F8BCEA1B152FCAD7FAF84983CEE3B
6025680EB3A373793F0656C0B449E94C749BD813E5E7200FD4EF898C821C238E
F04DF7BD7343B7724669B692ED4BBF2B0C0CCADB597E641054899B9DF267A462
665996C162A7229546436378570253F9314AF146E6642996411987BA74CE27B2
C4557D4B04E7F771105122A7F43B8429BFC949FFD786A0AFE6EAE3F7751A3CE5
CF1EC4C6C2AFF25CDAD43BEC7AAED1F6BAD964197FDC6B98342DF4826F5D8503
1896D58E539449C89C4C0EAE0F92D49E447C4A3E100967B3BC7F3D19501005C1
DAF88B9DE0152320FE0AF6DB142F9D944983B19A5C42053282E1F9391D3D563D
72EDA0CB54435883A32775F148EEA9BF9AEF03C44AD20286FD9F694015EA9361
C2B4BAAC06004B091F3992F71A1B3D33AE7ACA07B528365AE5233ACEB38A5142
4F267E9713229F7B3ABA30559D9E4B6B06AAF2F4CDD8881540047B466EDDA861
0C578650E9B6EA14B973099C40B2123936DBF7D6E0C043CD6D918C8C6732089C
5878537663E0B0DD1698B9D1A2777ACAD657DF71450196C47EB3AAC7B89EEEB9
E2F9CFC6BCDFD9A438C10E66D9ADD60AA8F5B2BE8C21D7344CD8E8A6C73664AB
F75B5D88EEF54D2F40E408D52ABC831EDE8F5F1DDDA31D19D5741193D80A5D6A
6D2E1E26746A94A779EE401A85A7A83DE834E58BF6CEBE3F905291691FEFA90A
3DD11250F79CCE03F54E22E2B141D5417FC4E56B370A5320407A7883957E4A59
BB4D268C8E961A6E25E7A787826AB442B32C4FAFCE3DD2B1B8A93D032C08521C
CFFEE1C28C1EB6F7EA0F868E0B1E18FA0B629E8327A68EA20601AC9990720732
AA1A19BABCCDCD717140938D234BB2DE96AE09E96B095B4D29114FDD325E6CEF
2AE08263950FE6CFD73126C2C136176ECC1145CC3BC61DDA6C89E780F5F132D4
69741F1ADE900657709B4DAD35578DD3E41C3CCF972821E726BD4CBA7AE8BF83
E11DFBCBC20E2347715CC3E50112B4E095F2C33829E720848F8ABE694A82BAAA
4B6E4608F0FBFD2E57F103D8CDBC805E5E96565C2800203D4BA3DEA976ABA8E7
F01833ADE127505F8CF12DF9A2CBC512126729C503B45FB0D73CCF977E2D21A9
20B885BCF4574BE6FE1505687BC463D6F3A2B9511EBD13E6A5D5E64C41B6BD1F
16D657CDDA0DDE5F31C9B8DD5270A72725DB46EA6B672C3C04BCB42AC42236A8
1DA64411C9FAD822B546D0B3F60BA1D2D3AB9A24158569F13BCFEFBC700CF3DC
C7585F894578F82D9DBE70F640BEB821AD49E34383E63C474FB5CE992FDFFA64
2CEE775E9EF547255845970C5AB0DFC8CAA08AD31AA88BD8E49C55BC1B68C60B
75E2F3010CC15E80D2594ADA16D9CA01B23D71CD0AE618D84B06C1D9FE94D42E
D7326EC4D7384A9D9A09994282B995485CE83DD6F787F0D7A823A0FA5A183210
56A3D1E77881637BFECBFC91D1491C01787D333066F72244497E009ECF831625
433E8DAE79D43AAAED071D6E4C04F34E8130B1CD7EE96A49751CB6DD939C2501
5BAD1A15D094A9F8F63D836BFE7A2179F78B1398AB1FA8EEC626315A2B523F82
B09D8365A439E668F48EA462E9C8ADE45EFE2FE0D3B01D5D350745EDF5C6EE6F
804E789DDA71920AB4398224D50B111990D1F4436C860DA78F1A51C9B7C0121B
DB9CED994238C39531CDDC197EAC2414615A3D6F47C73B4C28293307F22EB28C
915A6423433A1800DBBD5E377D4DB74734FAD150363C9DFF5C37A1339AAAE7FC
40209C939D8516182CA5F0966CCBF971FEDE25E4AA9B1F83FE1FA0A1A4419AB5
92E0C0708320E8D6C7DC1F06B183E1ECDC55767C6EC7CABEF4DA15D534DEE9DD
AE102D9DB83DA67E048E8E71329B887B9AC6DDBB98C25FA5FAB98BC4727C5D3F
7F8D397F3BF7E5D505071FE306F46015D2F5DA135A342BA9F3E784C0A2A558D3
09342E0E7179C33B98C3D5E702B6E828143765EA98C3DFEA3E474F6287CAEC07
B5400D9C28610AA8D48B790EDB4BD5CF0864692DA4661E1008B05E8F31B235AC
A40C12BDD72980787CC91FBEA26EB30141D2358C0C3F47AFF734D51390E769C5
277EF63F693DCA492BCBB376A278F2D4AE601E817960FAF555E92B7762F9E45E
DD96CC722AE02F9564E06F016ED07D82340086FC36FAA3B8FADF3BA47E66E3B8
932028FC0D761567EED3DD7565C4419B7D05BCBA0D2CDC7C86140A50ABDAA895
1194774A8B20702D160C3450D2E92F24E107B0CC32FE842D8965DB60AB1F70F2
794B3C9663DD59A8385466AC97F5F8F4361DAA66686A89E3C4C6EE97745CF02D
7378466CDB231C7A899431DA79EF53728641BCD82F69BA310ABAF7157334BFB2
FCB5C9D08C619F7562E7E0FE022796E62FB435868B8E06FFADFC82AAFFEFA887
8F02E0B498DE9C1A5F110347B7B612146B5E468587B0FF0AA4C418F45F2D92CF
EA647A6508A8ED9C310458AE284B31CCA193CCEF339CE7D928D72A21FC9F48CC
931104741A6C9845338F0D171803EC04C9534EA4CFC7A242798CABEC88FE2276
2491796E95C793C00FF4EF23EFDBF7E27A57CE61292AAD6582B3A661F4D48AF9
18E79573F33879D310C2E50AD5550235270EA6787A4D63DC8B94AA8EF1F5AB6E
3DE702D15E3CC75C455193EF2F2DA549EB52152BB04BF5A3E95CECEA846B5E15
8A55B041CED2C31FD08731E0A3A099F8070976D75485DC4FACE84AF723F47C6B
168CB7269CC802B14545C8448B5B72D37BEBA7169F949B08254A985398CF9DE6
AF7875954A615D1FEA4CE01663E3BEC0954E1391127278913451DC6292B5571B
13D28E585CA2C81E20639F0DA069B55BD95475FDCB5F12391781D1555E66E0D6
7549FBF0833BDEA6D62384F56B64ED2E391F08E5C6D966478C522E18EDBB4B8A
C85C7E817DBABA0E78F36954E9922286067C23283BB5B470642E3F575F4CA3B9
DA9E2DC2EFF49CBA8724F5D5AF3CCA4A47F78B4368FC5B9567CA5876B77D9810
AE5BAE847C7D3D93177DBCAB9C0F48855D713099E41A15077A8CE5BD7B6F4912
D8BF877A487B252B5C8D1A2190B918F3ECA9ABB8AE7CAD0E7D4F2681134FDF04
D7AE7A9E51EAD2D9A4C9C6B49ECBA54DD1C476AEB5999FFE16B2BA912B155954
C03D97A494A568C67AECF19FE5C623830270E7AB53D1AD5876C07901A0715010
04D5BA50E4DFC31967328CA6364D5DB8DCD4482272C24A3C272F0964034C5D6F
1B058909F25BC43E76DA0DD6A257144E446DAA42FD34136C4017B3FA8DF19A3A
4323DD3024D15A3D7256D18948A1809D2DBA95373E39D2ABEFE984632EC4CE43
B13C27519FD67699D69DB12CA97F4317C91B925AE1F57117D2D4C8EE4901443A
ECD2BACD55B6E0617A76B6B93D28A18CF021042D11CCC1BC769ADAA0FEBBB11B
3D0DFA60D4F1FDCE6B39387CBE54C520F449F0E32E2C049A42A9F1E6A3512C08
54EAB18A0ECB0B84EA9BB710C91AFC97674F2843FB709E08E283462DDB18B946
8B120CCE1C66F5489890731D895BC4215406A875E28F1A0DDCB63267A9A7701D
D5EB7677649A26D94F03FE2EAE3AD612DAD9059A3D7F3BD63827E28F17D57CE8
F6031692AFE293731EE7455CCC4ED0ABEF6C73B6DAD436D0DDDCB08F6C6A2C17
5D46C6A13CD77DD706F2B0D60F852F38B47FB548D6C2649D1DE4424E50A3B144
B1BD83A04456667E53E56E87E4EF3ED431FE675266E68E67574DD1E299856BBB
6272E685C5F8A29F316954A20928917BC496D6AA2AA99F2FD91BC4957C7DC8AF
A0B4134C30EDC7F97908DDC6E7BB65CF8A58DE89A3C7DAC639B43E079AA71F5C
35E4F45762EBD6D3636B6CE871E08B1B5D45156D9582CA59F8A49846E440FBEE
5B5C6841B8611E8E62063B7A15243CDBEDE373D0E542B6761FA0C386F50D2C9F
C7F252AD669BB39A19492924A1B172190C1ED6C4E152F6AA936B59112A2A0953
70B053DE1CB56A574738360B1A6C03DB434D9AEC6AC60E63BCF0C6022BCB476A
CDDDC00930BE769752504D9980BC946DAB1F06080262C0D9BE2CFC49FB390CBE
8D4CFF08D0CD6BAED4DFD74B7FC3E50BB18E2BDC5212801CD801AFA27FE75879
BE4EF03B9AEBBEB3B51AA797687145CB72AD412A97C78A25C5717BF323F7167D
12F37209017D04A21AE1F6DF9F3AE99A6380CCDF76BA83E7EC6781315FBC3F8C
714DD0B43D864F549344B3D2D311C782B0D33B8A89398C20C67AB55EE7A2B744
B9BF4871200746A55830DAAB8957305817109C44A9F79C2751E13EF76818D609
5F624689BD1D5647A80038419AABAC1F233E8A6E3FC61DAC341FB68C0D3A056F
03D998770A0D22B1CA739C2F003885443D4B789F3B5981DFEDFED146296AA6AE
FABC869E1C46E86FE01EB1933E3D0E464E5C295447027981A89B6E813D9223A9
5FEC0D35641FEE00260B5009DCE8C6A406785CB1A1B94516D4BBF6F6B68F3B1F
7AAE84E2A16C2F5B0BE0C63F352919EE8FA91F78252EEF32321B399378863E3A
C6FD31927C8FBE090DFFAEFF60859A9E00082942A5C533BBC5342091744EB5AF
7CF0ED03D8897A56ACF76DE55758C98B755BFE0F87095662704EA195246FBFDA
B3ED718CC8AFFDE2BAAB56D5937DAAC0774EB6CC19D867ECB72ABC47C0CF0819
A3E16636E7B38273CC9509265F6B11B12B80D093764F2321E396514255295937
40768B842E6ED564E3DD0991CB9AB9A4078614E761A3BA3E78F64ECDDADF6897
5D97F94EA8A698A0C79EA6FFA0C2AEBFAC9216FB646FACC2ACCF7936399BD5D2
4571A74599921556BB8971E1FE2B681C391F7CE66CC1124A2929C398910657C3
5047F319DF546D864BA7286E2F32777BBD74CFF9C797041D0A982AB1C0D49994
B3FF3E39088B04BCF02926F77C1A39ADB297BD5D35DF2268FAFA2CB139762BA4
D2046C23DCF069221A28B39429E483E1862097BC700681207E93E45BC33ED922
2E772A7DA7F323F1A17FFB4DA0E728C6AD8DFF966E4EEBA48BC6C6763A9B8675
2AF24A305C366150DFACB4A332E33D44B69C89E3BED625BB7CE43E2711F05FAC
EF493B0E52326F80141BA943A9A264898304A491450FD1452BD0CDAFC0D51AB9
43797023065C805B19DBEBE4C9A81AC75D7E943CAF8038C03C57418377255201
AE91F48B7FC2A9E87576B9D9EADFA0D51077ACDE9DA732031E629831F5F32ACB
9624AEB7824D5B0AE928DA1E4073F2400FACAC94FF24BAC582AD3F7DD4F42C69
2F7438519AAAEEF3E3F5F16E7B0E575DAC7A0324909EF3EF2A4C728BC84A3B84
98D6ADB51AFE9B73054AE10CBC9D3A107876C1FAE0D5438C9B60E2E69C60E02F
E96EBBCB99AD04298D9213DB465513E42E548F64A50ED78AEC9D62E0F9CF61E8
562487CEEB754055F97A776B61B78597D2A7EF4C9B3E135DE0B87F7ACF01B405
A8733C6F083CD0FF0CCEED94ED5DFDFC1D6678376BA32ABBD39841AE090FAFC2
29BCFF4E1C37841C114A889F2AB95CBC4EE87640886D9557AC4F40A9B1DADFC6
C5A8F9857E1F4EC4E839E6026977E12A12D4A0B5F79DAA12A9565137074466CC
DBEF218D812864C48EF040CCF53D9B6D16417A93E7E8AF1747A8922659374076
8B842E6ED564E3DD0991CB9AB9A40786114B87597F21C39DB6A2CA7C80E5410B
FF7EA073A18FA5ADF86D26258A210A15C3EABF35EDE800133D57DCBE17CD2E4F
AE61EA1D3E2DA8EF502EF888B7009B1D9394E7D3FCE87B674B174DC6CF1ED0FA
43374E288DC93DA1A2EFC3DBC27F7E781713D5DE3E2EF43D7BBF9757FD5572BF
1ED40B452F92C69C918DB42E0CE8E26D554B08DC068BD89AB8A2F81D9A9D3BAA
712A0A56D9636B62813E15675BC753054E1A5ECE20913D3B458713583686ED98
ACA67E3E6F30AB83C9D7B714F88844A10F1BB7CF6F7EFD080EE983D239A2EEA5
C4BD054A6A9EA3698E3F716791ABDAE7850A668174CDABD0BD1FD8087DEDF5DE
863A2243AE066DDC7393F29B4D933306793C754111044E6E64FE049A8C5209FC
E908A5BAC001904C1FB4D0A37966E6822E57D5B88BB9D233B5E47EEF26714A4C
C8923A900F817E47FEB12D4C3841165CE7E2B5F9CD05544030F5C4105689B16D
D619A90441E2BC41E415CBEC45468CB0410E01EB5DFC9E470CBFCCFB150AE908
8E7695DF12553A559F4C9FD3DBA03EF6E49A632BF7DE5EC45B64A1F20F5D5F83
6BB3A857073B88476273D10DA44A7CD2DA19A87AF8088139D1E75C02DC8F656D
10BDD68040008068C072D368F48FAD6D6556644783FFE23953B99EBFA7ABA54C
09274CE1CD02D148724B2561AB1E54A672AC2EF28B736CFB9D939CA9DD44D88E
291969747968A767404B820061694C99C244A6C28AB016CF6063D0B8D2C5B93F
92D0309E79BF38C72A3F14BDF4E46B0E95C35B6057FC31E28ED9BDD171A3100D
4D69D8A56566C0FA3EAC58EF273E19D0573BAC967DB05685E1E2031A7EA3B7A9
71E27FE517DA54270BFCBA2FF5C2064628045617B0D434CE8627D3AA5AF2BC44
23F2FC4D1F287F3F28CF40C1414F5BDDF1F5BC54BCA3800F83AAEB8F3D60AE5B
120F163AAEA7BA2F411B4410B5C06F3B4E3A0B2CF777529685867B5CCD447ACB
8FAA2F5A7CE0F51CCA3DBB2DEDAB06735282832C13FDE34C570D7BE76A2E85B1
522869A94E5F7CE9C4D941EE032957BCC7B0AEA38C925E0587A1CCE19FD69403
5C5AF7538DE81B5B4A7A4AC5F69B87DF1F8642926271F2CFBB6FA6CD9F406A42
92DA919BF7DE78B5D27A4DEEEB76DAD21733DE55FA05C2A592D1E80050D73485
BC9F7E9767A9F5DE2E80DFB6AB433AB94FDAA268C988A7770B68D8E5D468CE2F
DA05C10B1139EA424EDAA15AF1ADE67D3AF7F5940E561FDF3EC104AB6EF99A33
417D89757BF11E0C4E8875110E2FA63B47CD66DC82658EF18D16C3588BBD6EFB
E783A69AEC785315E5B7C88C131CE93350914839FE96DE745DFA79F106BB7E60
303CD0D6F21E2D20E13788E5C6CFE951C45FC49196DD8C37EC751FA3BCF65F7C
1BDAFF8F1CB40CDD078B2B3129F77FECDE9370F84E207DC9BEC731AD6040FD9B
804FA1424B11F1B50E1A916BF519D9CB0181018FF1A73B7C1F137C73752435B0
4A2885E1BF5F7660FCBD590ABBA7581F0A5DBB400940D12507B823BA98875C00
2332D592429230B06FBEF11DC1F219E5F31DA8411BD601E70786FFE1C501D970
17393DC2A256F557DCBD0CBDDCFA83A5772EE31F27B753DEDB0BBB7D3F03768B
AF8691733BF4866A9ED4A1551A96E5C205A44CC4E279255DEB3D39C8E6DD457B
7C28A3A5C25871D190E4758A89DC70366AD98D5435AA72037A8909560E5E3387
8408EAA317D42BF6A57373FD674F6CDF12D2FDE4B981EB981AB0EB210E41CD5A
9AABE5F39E7D95DA9DE8FE516923D8CC810E306A5D528D8E391D056D55AD5797
D4267092C026DC41AFE6EFFB996469BF76C5EE35D36E883E3362E8151A38AD6F
A6AEA5575DB05D6BC44417E8CB8E2472EF2624C23DF65B8BE9A6386EE4BC3EF4
F26630E0B8D4856A1FEC830E707F9D09F5A26B783AFA95962E9438FC3B10239F
C8BE7800B60EB5114C5E507E856A931CCB05A58C30CF4B9105EFCC176839AAAA
92BE85FE2786437E6FA70BA42807334553B614037556D6E9C3326F8592F1A8E2
3E12340D6D9F50D6441D1DF4B16DC2295F06ABE7ACED96009E826E06FD5704A6
3924FAB720035945B624DCF01CED640204057F384BAE8BD94DC0BFDA6BA58119
FCA2570964C9054B96B14122606B568D2DAAAA8A072209EEDDC3986FFE25DE90
A988482D22A585867F2B8469A5DFC4AAE701C1A45309B0CEE215F5894EAE38B7
EDFAFB64C0891B14D99D26AE37DA9EC0E7293F5406315D691E49355A59CC5E5A
EF4999D475A3FE5832D62EEE9AEA92F8ADB58110334BA804882F2A971A09196E
E70772CCF4E8199570C607C1BDF1D7A6974371748BD7282EF65DF0659993DF1C
0DEB0E493703BDCFB578FDC44CA7487E3D39479CA4760457E179C38E39883D8E
66CB0FB03FCABD2C3FB502F6ADFA10FD5672B756BA24DB51A2A131B516923D5C
C746A423C5B6C34C538D56198355E8F20A2892462936DCABA13F62B5AA11E1DD
8A770D7E3CCB5524F6275E2E37512DFE85AA0303DB98DBC7FEA6FC0C4C86F21D
98814DA3AC497246FE74C8B42C6EA815E150DE0739F41348217152722E8B3B84
0ACF32FFBFD9E8DC6ED9FA9FF379C70C8E4D8231DB8872A35B8E19688E347FBF
04CCA274BAE26D8351DDDA8BA4F07DE0B3B9EBBCAEAB4BD5D6E6C11AF529366D
BDEBF20EE1847119E030DC477FEBDBF96773D2F86DAF0FBDA9D2E7F9AB662F5C
53E9451AFB91DC4E6728A1CA7BA4ACB868F9CC431C92B040DAE7276A6B357A89
2D84A875E7EED85012819DD2F7997D4DB8B9F65900ACECD700739F954AD5CFBF
3A4926EEDFCBF708EDDB1B5DEA54A92603EF47888C851EEDE36F156D06C17FCC
1069527F86804DA275D8C6F885EA281C56AFA10C4E38D9BEBB4900F2EE9B6018
2B4ED6E6B40ACA536228FCE80FD44B49B8059ACFE6DABCC6E1669CF61EC1B6AC
FBD39955BA1657BFB86EC8A8FA9D2EDEF5E4C13425FD0B0E5186F6949A70C40B
3E6AAB5B0440D664263E4499C14B7B552BDCEC37E745415462F2538DAF56C81E
546E58DACBBBB7F2564453044BC2FE71B2604DD131771909F986707330ECBB97
8C088F44633DD93001B32C6F39189A1A07946720C31C5D12522AF7CC17918555
71A9A9879DBB7FB52F25A5A5DFA45DB0FDF9B94F00BBA7EE9ECDDE8DD5AB6A65
10CF16E8CAA48D18DE6EEBC62DA781E14282982C1AD13479B6178D281CAA541F
D8FE1E630066630D8595A47913D246893E3D16828335124AF8AF8204F4A9F56A
F89398AD5BEAE92F354A9D2A5CD26D5EC44CAFED396F68A43C26BF138202E62D
84800E37C432BD7E0F9B25F3B832585776052FF4259FCEB7085798DB7197A915
2E517EF0F65FC96F998CBF98917D8E41560D466C8DE97C2E08CC01056475E95F
B467E2F3B935E2A16244F6181C5C535EC9B0C8DDE504E621B58876ADDAB617B9
C8FD80314C4793504E5B423E958D180E4B6DA4AE01E8944152D5208A6FA47C5B
CF0FF7D669D83CE5EF4734C71B8D11C5B09A515763B8125BBC10AD96C351FDF0
1378205427E18EA6548E679B9FBEFADD706F0AEDE4E56243E31E69A878908B2C
8BA2EC1F485A9047C45CE1B8F152E4C362DF1DEA51D69B0D5891A059EB678F42
2DFA1D0BAA68D4872655A2BD4FEFB0964188289A60A5F5A56830C6B1F8B98B29
8DE920E4F50C025342B392A52202405E1F5555BBB8783C7B9B848D05CB88527B
E24917AE3A50E93EE5E83B9818618B60591643B668537EFC7A3B2B093E38CFDD
C6BC2F16FA39BD5507C6726857A6493F6236411AE414DA6D927993325E05346C
49534462F5A278BBF7CDC15AC1C6890F75C0B73FE9404F9E815C56C6EC5E816D
F202565C916CC7F45D0E78BF2EC3E2DC7A45B7CB750A8F61A576DA156510C4BA
281B2926BEA5B33D6DBC52182FE042BAC9F13D51C894D53C876FFB53BA6EECC7
08330362F6AA259225AF0EF256FD84BBA6052318FF9D966F224AA72C22E879EE
DDA2EFA0A55F8F3087267A363FD0563484AC6B50E0360FEA310684E28DB3D3E2
5AB96063C37396581CE70C12A6A17B470658EFA24F8904979C6E2172945935E7
8690DB60112093EDB086D5EF104201B1BC62B946D56AF4DB0EB5C92C20304818
7E7C1A3BC95867F555A5FBD8B9F569275A07753B4CD364AD13512B3DEAB64AD5
92E9217224B3822431C4C7BFE393A174674084759802F35FD5D3D9675E23EBEE
34F8825C3BE0190C8497076FFB18E36D689408404AC13572BD09750A41CCD2D6
118FB2C819B9E70DAA4A761A8D0928527C86AC8A19129D94DA557AEFD03A30AF
BB2DEAA5240EC5810D3D7BF840F3F967ADB7C098134A0A046759B35A517F01C4
92A78F673CBF8D9313213B75740A9ED1CEA56C91
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4850EDCB990134F321F1FD6696F64BA101037918C9
F3EB2C616987CEAA46F6C052EB3FF6F2FB9A6F974915B82B6608CD85F75F0664
5644A5E3888713099F73E90FBC9681A6432D6944A68175A656D126AB96DEEC97
7DFB9A5ECCECE68B7C706A15EA93F5FA7800171D760667E1336DDDED349310D0
BB68B865F3E43C4275DFD82036752613F3FC722D561C0B5BA22C873A42C13AFF
73B7A9B8096208922179B7EDF55236F13203049ED2D3A304BEF0120285E9FBC3
921898A37465752B57535DF5054235CB5A713FDF779C161E40A8A8AD8074AABD
6A06EA11E40F1F4F4090C99D86095BE64A36FA8733362A8D4A2273879968020D
41EAA7F6C1A9B682B344B7DC94AAEDADFD1BD39385A57F9383AA235717AF84AF
BF5D808D32071618FA11E2F7907B9626CA16609BFEE67DB56CFE2E2B90BED39B
54D866320877A767FE000D8A3386EB1AEB2D99809C71C946EB77ED556CD01675
A5D45FC8BD04EAF80C756386291444CFC1D7F12BB4B1304696B2080A14F56ED1
959BD60C7F7F5BFAF8497205D4BD589967F17FBA10C2EF19C1679C5AACA4F9EE
B15E13977CA81B5026C7E1EF4FDDFF62E82B16CBE3D401AAFA4D973976EF232F
76C9D0C0793684D68FE95129C326682238CE9807B35B2C2C0C32F4122724C159
AA1C41DD94D0808809572A0A32125FA4D78B525B256291CA389F839797A13591
6197A48D453611484DA293AAA6B62F5ECBC9D32FD482C74A5387629E03895C5B
946117AA34217BC77B1E075A4BB99145EA55CFD1D12CB1D2E72636AE538232C1
3966FC6E07843E4FC7A8FB27BFB4FF67CD278CA322575D7590D77B4E03E63F7A
848E639AEA6DDEF55107E8C5B9DFFAA47CB3CB5A614B77D0112527C9AD97FDAE
5BC457971A70DB3421293E16959B64702BA858C1217A8B3B836A947462E0B59B
37C8CBC667F0052E653D33F067997638BDCAED6DF3A8F1793F71E79A58BEF6EC
47F700C376341D757B09A3E31F6ABE9EB9021C1A6E311CBAB6DBBC8AECB140BD
DCACE9B1E80979B7487BA2CB786018E20A5E0355AA33D6FCEF382799F62A9A8F
F8262E8DE16E9245C61CF3FFE09AACEF315932D79117A513F6863D275B80A249
01CC70FA943FF9A9F5E8D5716835F17CE3FCD6FC5EF10AC25471C19ED3B2D164
93293F09EA311F49295310B0C1AF942753C52402014764CE7026803F091EBA60
AD877E9208260AE6AF24100E2B365BF89C5B679378A7F6A67087C57B5519A988
04735147BE66CDFF2481FE35DBEE9CAC7E77D79BA760EF4C53A3C983853DE8C5
FD3F25925955F36A3BFF3454FF7B226C0F001FCBC5484DCFA46DD8D89C69C886
AA0247C5EE233C9D7DCFAAEA1E34B8938673AA6D760A80C38EFAE41268C528B8
5A14387C3E29D017EC16BE7E6918E11E7AAE31ACB6E85DE4B2B15B93B7BACB79
AC25F37A4E4D1B370E59C78DC9EB4AE83D1CB6E4DF546FBC914A6FF52591CCD3
C464AA14A393F61610D617E196C9252A013C9532C303C68553C91CE83431F239
BE883C519B643E9EAE5142F698F4B47ACE43BFE59E3AA4C8B47CA18016F95C6A
212208CDE1635F4E5271224CC19B6D47261CEBA3DB1E042443B665E915991D93
2209B3F4C86C9763861923B2F335DE040A8C24E73A0DC3FFAD5A6A9249A29AE0
C70F71EA41B0A4A505263D6A6C70BA63EB2814D31DDE792AAD7AEB4FA346EC85
0781604DBDF2EB65869969F265341938B2C7D6B979342D93A9F5A23A3CE8A015
130A0FB817DE38359C63DB215965E218E892C350FCADB5F66EB82D0813EF551E
F65992B2E24B4FC8353951C0A335B53F68A8F8286A94521BEE28D7319ABCDFA4
A21B5DE536B34845B32A34ED5CA1F3D3EE2B04DC4CBE12FC99DA94FB2648B842
54D4FB6729B1CB7E86DB55FF4216E2F57A08E04B44BB36F27129E5E93EDC061D
348F162C03BEDCDF0521B9F31D29543DE2AD436B75778C0489533F3FD5742FC8
AAAA8A72683C54B45F81F355D9D19496D0F80470D6B289B760B6851EA1A9D31C
01577A0026C7929C87160EE0D8EBC305A07052BD82AF003A0EEBF1D6FF38B526
E2EA0A91866201E08792F03323228B622E30142E47BC752EB0EFF7BE8B688A36
22826EC83CC42DCE8356DB43399E6A6918A887A64B2EEE98060E47C0F4276DEC
FDCA976E967EED2CE2C439693E2FD2F2C26823FBE781CE97DF06830FC498BDB0
73AD2CA5EC36B4892379B00A5C8564FC9A915C85B66EEE33EA460AF6141D60E3
76B4E430431F049992647E2B744E48AFD33CF5041056A43F90D0E6A47C2521C1
058E8C66894928964B332A89C5DA71AFBF455E5A68FDD4DF74A8F1572F8168DD
E778337122FBBD1485F73B4EEC2651C3465557A320A0932B65C1FF77F68B89E2
BE7D6D975EEC017C4CC66C88F5BF25B0D84AF0E70ED77B0B380397149845CE59
EEEF6DDDC9E7C6127A68489B4B19F3D15F6C72AB8DD43CA69CE0AE0177D2B999
3DB6EDD24B6A4FBFAF7245D800115B62C9BD6E97A52671CF3F69A78D19654F75
3822663BE5461EE982F36B0027977D6B3738BA7EBE8FFE3928E471DD9502DF1F
41F853B486CBF6A62EC2D4975CE0BAE9D76A833969FB573201280B149CA91AD5
F57D3A240F66B12B30C0B8C3C25DE1E16BDBF5FFF3CD111CA5FCCCDC96631D0A
2B46A37E422D648CF65D7C1392E322DAD8CD3CB42B3FA767FC185F653F299CF0
85F2C3AD7BDE7C44FD3DA32993CCB41A92B29BEB26E60B05B105EBEB7A7476D8
31D2C0383F39344255823DB7D1D12E2435634CF69890D14A1FF76CD20F731C4D
09ED15BFCB1DC5530257DEDE728A19496AAF9D8BBCFB2DDF39DA7261CD6B1DE1
94DB09EA1744A0B6E3A9A1704083D27D5690B18843ECD420763B9E7F42912756
39C6DE6964F3607C90166D11C291D467B35592E73C61A2DC1F13CD09369054DC
5695355C6FE73DCD523582A4973275B64B3D8058783639676B4F8B47476E4098
ED693455F82F098F49FF487626BD1A4D4B3B7961171D67F8F6B26EBA8AB37B5C
35D075C41218D0E9CAFBC8078A26AB4F29F821A015135CD43127434DAB18D387
013C388D3840182F35ECB411DD16BAB8CB1DC80EE2D09164F7CB2EDC0827D2F9
73A1460966368EA8F0D42E7A93BBD492847AE57C85675CF04BFD1410B56E616F
68C3927EA7267C0C4BBA87AA3EC7166170B80B7355E802532D38053D427DA3EC
5D297AB110438F9AA9CEDA887E63AD877E9208260AE6AF24100E2B365BF89C5B
679912C69C51E8D0541100E3DF71D501F4BFA0AE8260EA411984C107C8FD9285
F08FC3C879AE6D42023BE0E114B374F049F75FC09E974E64A63E36F76D0DCE3B
3E57F4A1C80AE684E56726F52F4A49A022808893BADF86ECD0EFEACC9F5B7E84
1DBC5A753D3803C89C438B0FB99CAF607B7B16433C977215E7F78D80C54177E7
D853C4EB05C108B4859A21AFADEEDBAB163F8C1C822C4DA3FB1A29EC3ACE79A8
C5A00293FCA8CAD6BD2A94098E88D45175D4D9A88D0F77DFD5C14FD6081321C7
AEE0F7914B79B9ED057E292AC7A96CEE551D96F4D85369D2B4167C0A622AFC28
80C6D6FCF36412F8EEC622F2783C9F1A0403E9A5D876942803F08147525ECF7E
0304D3BD24256912A2ED3C59B32CB4091040E21EA8F9253E6CB7433656B87E1B
0A17BA09B89DA54E89C36AC72560140421800FFBFCF4372B123AB0EAA5A28063
EA72DB6C8E32FA349461C1A8946B78E05C110976E5B4B81BD89C82D81AEC14F6
8511ECD14AC322A438BDBC4262A26D679ED4D87F89B2D3FF1A88AEC671EC30FB
4DDA9E1BD3A55C4D59BBFB7F5EFB232FCBE3C721D8D181B02711EE2C105FBB16
BAAF98F469068B96F7ADA96E4C628D450E7E1B4025089EDF05D020C458C7F3C0
A9E5F676EB11E606954B3A3613D4E1DE3727C04BAD9177A42914B371F4FECE62
5C47EC539B20F4FCFB72DD0EF45CC71FFA185F653F299CF0858E25008D1538FD
4D2748FD791113395323560E169AC68D884E15ACA3BA6934ACB18CFB0869D655
CC9E8B7B2A883E868B7D9AB5F1966D7364A38F999D57EA93937C58C1343F917C
4B77C3751BE6F455B48BB452D8EAB1CE63B736201B598CC9484A18CBF2788133
19FAAF6C66177F200389C0A6667DD18C92268958F56A3CDB6D7D866B6DECEFD6
F0A675F2A8ACE261620AA95755D6941EB85166FB6E723C0E0B8B5F6B4565ECB9
73DA53376E96B94176576F807AC241A8A79A363F9834B3B51D6F2E1265B5B05C
531CBCF02590E866E9DFD5B99028D0E71DB7D816A29191433F7D9CAEA7484F17
687D2F3900B9524B578BCF2CA6C2E6624714195463EDFAF7DF63DEBEBF603B63
1AB2F750D81E537B3FF2B21C4398EF3C4DAAA73D2E9E02B7C7F7C1477ED8B108
56C476FBFA10D11E87A61DFE3103AF0DAC08C4A82DF0EAFE9AD88A24905F7DB7
DC8097C0D9B0FB9650B81D6C955061B4CF384887BA2A9A504B2A0A92D4EF6EA9
60ADE0663431603335A8DD49D99E769BD7385458EA8BC86B3E8F0B8C9F796139
AF50631A0D4832346AEEB1988BA51832A8F28166A3DF8A725E6339ACD102D12B
4C0FCCAFE83B30690ED44E2A51E74C0DBF0DAD86CB36885B74D5CAF5BFA609EA
2FAC998F9E08DF927EF4B23C07EDE4EA5BEC2AA85224F7C29A671F032197BBC5
EEF8FDBC70A40B5551A06499BB39794CB9F4EDD4D1AF9D34E4295AF83BA1604D
89E7D7C3A2511C0DDEB5233387AE473351ABD014CD380CEF7BFBB68CDB7C90D1
C34B6BF4F19CFBB246A971A0935816DF89DDCA89B23C9B25E0470A880E6B7E2E
D47E8E182F3BC9D9E7EF4900C327E20248F7D1F709489567B329290C22246FD3
51549B2FE9F545F713BDE7A2897E69408B6925AC50729A5390AD5506F3E47F77
E7D5423DBE0776FA1387D7DF0DCCFBDA67F6A8A740628F8FC7B19054CF4917BC
54655EBA7CAAA852861A25CC981E526F1D803C93B2A2A07D4200535F51BE3379
AD85E97DEA7A05593012814617BCA0F49043B90BE671C8E7997167E57DEB055B
D5830ECF6D6772E5E77D6D2AF4447273969913AD25DD44676FBD2AECD4004E6A
3546718DC369D9C0F1A3DC5248567195DA50C4BDB1A8ABECF4637E52C0CE5330
16DDEEA851DE7E5567C549912D4A5AB957A6864A7656C8B578CD64BB9C55B200
F32B0763BB2B8842FA5714AFF9E5F519ADF4936D2D0C1BD6D2D64EE1C52A29C6
D3CEBD747AFF17A6AFF908C79C7F06A14D933DD82E32144FAC0F0E34F1D0ECA4
23C805F09220A9BF2F4841144E5B06E3583F5C997211E5081EB8307EDCC5357E
6ADF9AD8C35E6A43B6823C4E3D2E01A09CCFDE6A24BF40246A18A8D921257BE9
AC6BF7CB0799464311BCB49DE285E7CCA8EA2BBD321844409FC9537DA077CD8B
62AE6FE12DD1DC46B921D8BAF03715FC56E9BD6BF2CC880FBCDAE2DFCF164BB9
44C5F227B5BB9656B4E4DB32DF74EEB735CD1C98201F895AB94234C55AC6F42A
2A420EC9F149FD6A55F1A51A895E285885972113C678A08DD533DC0E8D85F9DA
FC5FD842F417265427E0F5E3318CD532395FD31FDC369BA91DBC1F1553A8769C
89B69FEAFAFA01CFE20B5876AAE7AF8BB5042264B6E88BA8C86C0D95192C772C
129F71427E98CC2ECABE772CF6B6F6F3383B80D637D761A7A992CF58188FB0A0
4FD6C30AD69475D7C8CEE1255CCB36DDAC9B974D3E6419A084C637858D49BA7B
27E4904BF8D855940AF0DF3BEEA121BB82DA620B2E22056DCEDF1081E83957FE
436005068444516D156D282BB7BDFC55B4522C394B3A544159893A41D33AE8B2
BDCC9705D1EC8848293ECD9599CAADB5A4AF32F03D13289DB062EFE9E62D5A3D
EC03D1F5A40154E8DA0E65975F32FEC44D28C440AFED971B846D770231C30451
308337E1B50D361D971B735BF61EC499EBFF292FF20F423A30C79C5CFA483AF9
9DC1251FA8EDFCF139A86A88DC3E1A94A0EE0C23525B292A271029E3285A34D3
0201E5F48DDC07E52E850772EB210276CDB3B1DCAA06E10F28A51822A85F5258
2848C432424122267304EC5799A02E0F53322EEE450F6DC39A4F03032CCA7A83
2255D2C3154FD5480E88E9BEEB2499BF34A46C864A443EBAC31D44C06BCC58D7
37F7D239EBE3EEE1A4F981B35F821F57267142DCC4079C915A4D01807FDC883E
15A2016CE4D853093DA735DB67694569E8A3115B94FFCF3B201FB213854CB511
75B088CCFBF6EEB46D7BC3B3B23956CA9AB504CB4FE1C4F7A53B8EC2FDC7614E
23F7D328DB309EDF140514463E4AF6F8203B584572BFE5E7A4BBE15B794DEBF2
D3BC8D252111E851D890730F3D2C910C2EAE8EF9A3D38D5B4C91E6F774AD9EBF
63D76877DCB7A0E54D0C2E929AEF3C80C7973FE752E04F5D0031F9A135E9C9F2
1A4888036E6DA17D2763E1E130164942DA5F704DE35D983FFFEBEF4AC76A7070
F1256E6DDD52B18DA4304B1B63AF73CEAE3FC2B4FEECC7F8F63FBAE0648833A8
A814E534CACE45C80493B3ABABB911186600AC62FEFFF4F7754C4B2E369CF06A
6E34DF084EBBB3DAF7B5D21F6CFD57C2312EB4348EAF26373E93142523E57CB6
1535E56121B537A578FF00A40E236B7BCA3A83192D97B128519E4CCF28ED8256
11AFDBFC032CCBB03DEEFD2562E27CE0FD0ED1F6F159B9BF0AB644AFC52B5A86
07607CF71D17E45F49AFB2D3E9CAE281B008BE656E4B2DB8C99A27569F361F1B
DD0190AEB798B8DE4AF9F7314B37ECBF5CBA46161B2251B235512E1EC659C980
69FB699E5EF78ECBEC88E5EBAE0BA8DB3BCB2AC0468EF00B3B29ACF32F3DDCB4
DF8B5AC385B0E9932908C23B5453E033BC060B2A22AFCE86CEDA16D910EF056A
685311FA540D2771073186E2284A9BCDE26A5D0B2058668CA6B44F43BD37E570
D6EB12BBBAE986D79303CA403B7808A50680F1872B0C648C191F49B0445E4D91
72E115DE31182F1FD33DCC71554DA8371698B3536CF6FC0B6005686097540C5C
81A8CF53AD64448E9130C01AB94B021BF1AE7F706A40F0BCD6C3905D07EEFCAC
D74368BDAA7C4EC0185B6DCCAA31E67DFDC33E9675CCD879D1FC8C8530B49F43
1DFC46EEAAD17F996564FFC6E338390622298E85646B5CED0623606D46F4B4E8
EEF169B785AB38BDD6405A4A307B9A074DA1502E50D1F0D9F8AC27CE15DD9CFA
A477132F847F0635A48C398882D84DB4F2536F1243FE03A6C51216B7294A6CBF
F1A9034F40380B74ECDFF71385693E6B75BFC0436205231264EAB0C83FBB9E3D
0CE34CB2B48DB39EAD4D6A8939194DB0FB0DE5D6276DED7E77A8B4E0B5182C1F
9F01C677EE3F751371ED01882F2A971A09196EE70772CCF4E8199570C607CBAE
86224B0BA4B135CC8709B34137EBE447A68F1A9E8E316EF3F6BE69C4438EDA31
E6CC1D4C8F3B8D30312048BD898F64D74606B0E9201EF0CA8F67CCB7CC009C8F
3DFBF4D301929BE09F85FBEE99D21B512779E121066B47881935DE574A9C204D
06CED78BECF34BFCF41D02C7E9085BB42D5A4BB5A14E1217960A56E41FB7F566
D32F10D365D2D92796D62FD8134707E2BEFF7F1B444111BCA4EEFB024E4521C7
55D34B49654CA7AC01EC0550084F40A113D2B84F2EEA849803EC5C4E36C41EE1
C42B5BE294504A3AB33413FB84F35B3C0016089A6C4D67EA0050A03FF09BBB48
4DDA6371DFFA6222F88F0886C7F8848E9263B7D237AB3A9CE8C36492E99AED33
256A1A6F3303F3536E2ED6F7FDF2FDF4017F942AEEF782D23DB4E418BC6A0E21
372E704ECF2C1A64E1CFAD9C2498FF02CF481DFEA19A42AFE6A23410FE321663
2AD737D670C54B5263D848C46C93BB88D09ED1C1FB39890F50ABFA7893AA3D93
9EA7116C24EF78A12FEF18EAB42529A129E0C70A8E0CCD25F54D07DD22B19109
B3E6972E6C807D7ABFF213DBEFBC524C6B50648A60367A6A4D08FD038BFD50A5
D7C19AE1DC90307A59EF912E6F92A414183F977187DD6ECE45785D28DE4EAD3A
F23E8EB270FF2FC011EB0C25AF7A54ACF32F737961660719E8594F3D869FAB0C
30EB93B61876C1DB3A6B32B70C9CC4B27DA28E97CCA8A8831B8097469638E4F5
075931668BF7B34D365388E8994432F5C784FBCB365F6F507132D58601333E80
69FA557DD87D25E8B61871140BE91C6A9BE6F76A81B4DFE79631499FB05BB370
022DF84D8614CA0EFE6FA7E1EE9F1557DA2C8538651EFAF5E3E7E33853470B30
FCFAC48E967E6607678AFFED7573A63E1F15030EA41B1E0FC2FCAE537199185A
5F528D50F97B7602BFAB0BA93007579732ED6C0226FD81A0F0E3854B2893F30D
23B08AC1459B0B3AC1DC117B6346DC6238477EB1F5370DD1D21345C1AFB2D07A
E71C14982196402619D48013077C61502182771202EFACD338EB698AEB078FDB
9E9B601FD898304C6EAEF3D6D9D91E52FFDD417F70C6497495901E69E4E11B9A
321D82736D103AF57ED0F5B6AE95A022F1C722FECF62C99793627429929156E2
36281118679A10464816AE987744E7183ECA0F2784611B128DDFD3B8061FEAB7
6A854095A2507701D972BAEC539741F8B99CECD2737CE8386586E9602B15D0B8
881E6F37D510D53C60AF3F61590411610DF38B1A64CDD91A97186391F351F6D1
4287110FC81B0A3B0D65464F19F48EE2DA48DD65322FBFBEAB1601B66133FCDE
CEBC47C3061DF4C70CEB5C3F6251F58BB34C37686286180F113767AE8A023276
1307B3E6EC87FC79FACF4D729D7E131335C212B30BA91220BFB289D604804C33
4921069ED4EB4830E5E1BE4EE7195B4650686C152125DA44D48E34BC385780B8
37367A712F7A57D0640738C6ABBEDA01189608264D061977417B0C7399B00587
D1D22ACAE72A9D41A40B324711EDEEF71A8C386513389D03D6893CD2B43CA2E0
6AF86228F0099D542E9DC4C04A5DB8D462224F084DC243B673C98D881306BAA4
7E8B54D72AC7474753A387E4FF6B9907F28808DC922FBD2E7ED0899B62EC9F83
0062209A942EDA2F5B354E5E08CE249E7634A0CE595241BCB90C35D10D35C605
AB94573D8BB4132249E279DDBEF7E3C048FC363D0CBC06499762588126DCB625
465AD2370DE571CD6B910687EACAE37685C35B4A02309F9972FC61005E7E5AD1
CD992A1AB06F6E9D8593FC3F87DEB0F663278B252DE788A0B966B6B8F1C98ECA
E216DC09694D2406245E84F4D47146CDB5CB5D2A623B7F1CA8D7E45983976ADB
A0F5A42385E23E7F317DE29B2B409995B5EB6A88A30FB007D57FEFC2BC985C4B
334F1D3E8E7A1D220FA70EA9CBF0B38D6DAA1169F3365963CBC3906971E3B38D
6F62D604675511A2F2E15CA30E973A68CA7A4061A48AB6671A33AE2AEAA6DCF0
A7A3669114BCBC5B20BB6045BFD5AA4BA26DC69F2A27DD6F11B7F5F9B82BCB01
902D82E4EB6BC1D263A3F7981EF7B7D5013B609FAC8FC19A58B641199652536B
C1176D3384CA36F6027A26FF421BFCE5DAB2D853767FE8A1AA8BFF2247D8C7EB
BE4E95D9CF6F8D4D204CC6D61EDBB0DD29782BF033D64E97DE753933AA83F37F
D4D440CD53C05CA0F32F7379616607191A25B634B0C7B55F467F12BB61B83B71
106E372B8A5B460CF1734233D37AD83B5E44D6E6F0757165328322752746417C
6C01728011A4E0F2D07A01A0C7B27C86A5A58A0F460D2DB3B66DC8BDB8552BA0
1AEE38E1205B077C2F2C646C57EE91DC3F7E9F8BE834F74A616E8415CF27C459
23F72118BF40FA8A4A7B8320210619F4FA4CB8003758487F1812D518A5849CB4
888A353080A6446C0D86A6F09F1D5014FD80FF43E63A8CFFC8027A7BF1DDD7D8
FAB59563AB1264CFD3F20F6F04E5FFEACBC97E5C730D1E2E9A6A644510454A0A
41DEBAE7BF7A16F17D74E77B540B37FA083F2C0EAEADC5EBE6D06FCE75413229
E6D56D9F0D1201705F7EC98157165ADC4C980F3499D747F95DFDAFBA55472422
463B60C4488B6AF86FB8667F2D14AE5753EC8D7DDD42500BDBE9DE23564AE6A5
E87058C69C054DCC89A787F82D8BDC15955C340C36307497E0CE91B6D1F1607E
DB09F9C68ED7AE613ED40825C75260C7BA8A5A0847661FEE0F6B879B0F4E788A
AFEB2E05BB7966CA5034B8EFD58FC08C1C1BB3C73D60E0D67A4323F17D9178D3
2482B903E093F21C612B1E2074B7116C3845EEA16B5282A7375B3C445C648E25
CD68051F08F732339935244CBF078BA4F1C73CF8879613E4D31F90D67EAC7EDB
89A1029F3C5B35A638BE725F0FE01EBAF6D306746432D7E170C47AE4059FE8AF
17B2C62D935FEAB0D68E11567ED38212B20AE4C51093DB28F7C996D5A69FE651
AB0637C908BFBE02F73371E117F0F7E213BA79517E5A6436BB6907872FC352A0
8A6091BF4B9D6AC543B626847B574F60E61F9AA7C3D3DD9EB64CA74A51274134
606E73A0D0A9ADE787347F455420B15B31C0EB8C910767C395ECB870DCD89031
AAF6F8AA6FA28A2B5FB9653BD398287E439A0E82C0FE86B7B126D8255F1A0F1B
D08158F94077D191F62DD609AE467D4856A8FE1E3057ED9B6CCA466A3EA918A1
EBB343D2914E385942BF82AF3E3DC997624DC06C800A6B00BA614400D0E077AA
6328584117A9BD68908F0B8E1B3751AD8B3F993452076B780AA2A76F0A3ED017
96438D68A11700BB348538AA9E7EA1A4EED27039C40D9E1187E50B08D9352E7E
4E5DDA08D38CF2E05A5712D191D61E6AA76148C0798ECEBC9EC234234A21E0DB
20718EAA7DB49757C85DE0838FB8478B1B94A3F1AF5D53AC484C564E66F040CB
1A2E88CBF064796261654AADFFC21A7372F695E46DDB637486F5A5AE16B8B27E
8909626114A5A590CEC785BBDD2D86B42FF91FCE7E06435BB2940232816F9F9B
EDFEE780E040423DDC5E3B4876FC8A9E07B69EF94BA1034C34F4D728E9E82013
1692793929CC3D4196A18DEE552380B3C65806969DDE440BC68EE43F280DFBD8
0BEC85B51D5111091F54823FDAAC9DDFDDFCC6DD14BD104D1F4F098CE983D357
981D2CA05063CBEC5B5FCFB1B9AAE7FA181E97431CDD0935FC9D12DBA2BEA04B
182A73ABE049F1F25FDED5170BF6156B7946465D1D51CE970A5C836D34EF4DEC
34F23A4282E1448187B3AA4BB906DF8F3A8C7100DDBAFA847E6CC4A1E70CC7CD
343C7E08D10DC8451E14281069DEFC52198F984DB16C7147B272EE3D79C4875E
249580B771CDADB22DBBC1715016AF3771C63A4CE668212EFB2D988624EADC18
A55422AA2744E5F07D174E63681C9719E498C62A7FF00B01DF3776F505F80009
F4D98FE9E8ACEDDB346F8E75941C1189A4B5EB3ACC3053926BF4350D36D28E2E
8B90CF14F0639A7476AA869930BBE3E8D221925BD4F7E68EE122777F28BC80EF
703CF30ABAE46318456D7D04BCCAD72BE7F89D1FA8FD334E62A6AAA8137C40E6
DE4FDB94B618898A7BCE7591566B1881971217CBD80EE42B4CF803672EF0AC1A
4F76C8B2A035BFA7760360E78355E66ED4FB2DB4DE853822C6DE0009E451C0BE
D09CEAC43CCDACF5628E10A111F78F8D10F85EB8607562D51AAD97AA7AA98DC6
CB5052261D71573581076879884316DBFBD6864F5F56DCBC56050C7418E90552
DF6EE0F27CACA985CA83885CB990B37E0E0DDA6646AB9194B46AC1DDD09A780E
3211EFB72BC5B2CF545D57AB4B9C40CCD94998FEF28E49E7BBA32CFA12942CEA
6EFBBCE12A898AB29CD9930C9E18593DD201B93D885973935C91CC6805F44E6E
4321BDBF12DCD48108E909E7D9AC7D0D832F331784C3DF7D7F7354C807C6BCAE
0E89082ED18574A7AD60251EEBE74E7A1D47BA78CAC708C675AA7545CAB8B40B
9345DAC334501EA44EBA4529207463D3E93301B5D346382E841BBF95A07528C8
343292E178983EAD84F75E713917FFCBD2BB09CEDA3CFAA35DB22ADE121026B4
27DE5009E59E3417FED153DBCA288DC767537CFC73FB51EAEAA592F499107FB9
2E22D07071D76B34DBB968F00484682B19C3799784C1394A7F95FA260EA13D49
E33691C1CF9D87F2628BB1CA12BF28EF0DA654779148D6988E9EE410C1781A4E
2DC6BB8CA4C96B19722BD65B595119A6C6BE1F33A0DB7564F01C4CD135F96CC5
9DA7920CAFEF414DA21E6354D056159F69ACC6681A6D7C5F76D1613C9D933255
633A6EE98B2CE3B0D8C1A90D72D46D431EEBBF0D8A9043A119EBA11ADD7501A2
AEE2F85AA441979C97BD38382FAE8F93AF77D94989AA693B5506993BD3C608DE
99FEE68796482566340746AE5C0A6C9F3C60CF9A0641CC2097EFFB9F6D14FC98
3E99D27F9136DFA41098851C4348C3109D0671951505993DFCEFAA29DC87000B
EB09B05DB3F8DEE176DD49221B4CF6C04902CA171AF11FAFD503506D77732DAE
D9B41D4795B74CF290799437AEC6875DC89259D8D7E28F6EBFAF8A510C59E39D
2B964EB7976BDB0BA9541C3D806BFA4FB77C5EBDDCD4871BC0B7A2F8AAF27E7E
115BE85D71C3003914643F8625FCD2A85F71763090740F78F242019C349B65C2
A13C4DF7B389AE0DC3AC28D2EE5F1F4A8C486D974A71CB83EBE7808CFC7D343A
7FDA08068966D47877D7DE7C0DF9F54D31E6E2A081E618F0BC2956BB1C3F1761
42CAF2E4FA87D613121F0796E257FDB8D61E033D083625FFCA81EBB17039FF93
8277AE848F2424871BB26E5F9963F5B4DC5277003D6F1D46A6DDD51B3C62188C
66D7D12CE3E92DB4308976ACBAF5037EC19191219B28B56B22AB4EF8CB8B98DC
0DFE65FB557F3590423411FE93B8D5FE968F73C9CA5E9E71CAAF5A17D5598D8E
8BB772EF73E44A281AB9E0E5D07400061A4A73F4A59CE1CA5EC9CD3B6E38C21C
1C78A8800AE691524E1C6FB25F41A15D8BBEC8702E6EAA1B1F13829E41C922DF
981188F09E377CC2D76004AA6E60F1173DD50937EEA219B78822A55E3E684338
D57BD4C4E854BCDECF5DFC2CD7D09ED923234FD2A519997EF0C7F3D7E4BD9787
7E18A14D48B578ADC22A94F28EE3718B9A9FAAF727F2D8286177EE27BAD040C6
676F4A4FE6721018EDDF233229D7D60AFC8B534992629C767069195FAEA379B9
222DDA32C67BE4C5F9AAA6971D5570BB47BAEB51200930F442D8ADEC45F642DD
8A886F2B689792475E20A46B230F55327E35FC4BACFAAF15F49E1BD06CFB69AB
1E13576BDC446872C97CBE03C44D9A9065B9A2FBA49B13802426474672A483FF
21A6D13DE815F47EFEBB1BFA166A088B8F232012896F122727523CB4DC1A7208
C46AEE9AE963718BAECBCD412C2BC6BC69C1370128E6EA1FBF971CCAE4F84C16
417C62E5891604845C80511A27D667AE834A96925698006601802F57A7C373CF
C416D861B0E313E9387668640FB271BA91799E634D760E262351B93B0E6FD807
A859AD9FCD5879179D1DE34991BBB734596379A991607836C6EA74BBC359EE64
A81F985CD3709694E5DAD604F15731A523D7CE1009C7B76CAC50A455543A5C9B
304E4E8D845502C1D77909787A0C6574F0D402ACED2B7D63523757F6AE29273E
EACD9526BA926E6A7AF094A1F9CCC08D01256B7CED1EDAE5A0FEACCFE55830A7
6C6B243487AE5A649D850B6E2505C2962F47DB109EA3EEDE1877A06CDD5DDDDB
891B3AD3D1EE45050BF63E41824B1622CB29A88C8843A60DC46832511ECB7C52
B7B6D47042B26B5C7B7D12DE631FE6C37C258400BCE4FCAF84CD0C31F145EDF5
AD4A686AD314A94FE2BA8B2BAD7C2F670BD9087F7531490409D028575601D947
7A7DAC80AF7C8244917DA635EEFA010F61D8E1B17039FF938277AE848F242487
1BB26E5F9963F226A807746F3D79D070C1F2D0A021D02B02DB6D0832558A39A4
3DDE5BB0252BEB0EF9D8235977B315C6B061EA83DE83EEF89232B34BD8D1A690
B61E603799AF425983D8A756B3A7D086CD86CDC90F418D86E8B704D37E19D657
21A6D8B54B46FA556FF6AD0427AC452AC1DC87A9CF7ED06FF056A9D38B3AEFB1
0D3CD2BA01D0E1E9DACA45F94EFC91D568C63F0DF5513121A20000B2D49835C3
4DE75CAF4932693BCE009A58008B1FBE69B19DECBD09D239CB562718A47A2340
E21AE1126208974CB5187A516614FFA086067DB7B8D79EB4957E93BA4DAE675B
F9E906EE156B849E4CB3A2B629547102F5FD754ADCB4B3957E1B8A795D720A30
B7DE482DFBD93486B13411F870A4523AE8E16F422AB07D8800C1DDCCFCE2067C
46264EEEB0AB0FBF2EDA1A8420EF654A1F39B6A93D8EFEA9A41172D1D82E14B0
037ADC38D7A95B1E0E292723E9740CEBBBBE4A72103663FE29397D8AD908F122
BD2367DE24BBAF6215F77F00081A0C911F1EE84F534F2C662A9898569E109DAB
60B870AD2E7DAC2D9DC0D690FE412DFDB2B9E42CCDC718968FC48745D928414B
E064B2D5CFF784282EF7462564CBD49D1820E68CCC9BC474E9751049301D6D60
0224EDE9B574517228E3E1C47BA1E70DA07C43942B964A6D5ABBACCE69775DA6
C662491BDC853394CF665F741994F2FD6C49F144628D093D32CFBD8A443277B8
89EF7EBCF73DC3496F6DE0DD41FE0C374CA21C1779685838150CF56953701A54
45C72B687A9B56DB8E3B0C01C6D753284B657F3686E07C885D506B788F353955
8236857EFCE58DA619324AFA8E7B0367291E21F58C53CA17934210C32A35B68C
F61A1FE3181BD5D0D976EBE8AE53D3AFDDBB926B54EF0C41B98D1782036D09BE
359831087184E41CE590F9C8EDED379905CA44AC98660F929FB67086BBF02A52
1D080237AAB4A2A51C71A9C80BB272BA01A17A8A9AE34FAE8003112774CBF511
67A88E47942D7C3F028AABAB38A59159D28EEEDD62EBAA36D35161B3EB6C4035
E27B1E2CD553871072D5949449FE10A4FAB74EC7001C7FA5C9A5623B07973FD4
B504ADAD9DBC56B76E85B7B6A5705502F55E4CCF716D5BEDEE1B58013125B46E
EBC992570D2C6951438E3A26D2429688CBA598533E602E3779EF7494E427C5F5
8F098F07CDCF8827EC04177712A79AED14FD6A58590CAEC41C9E906B0C0F8B43
A4F9D0210B5E066F26D7F9CD27A202F9EF009471002316940BFC8EFC2755E2E7
F9C81FE8C4F9F1F2AE3B9560C9DF5FE749A4AC8388A0264C6A7AF6071B2B9AD4
A7D4E71CF7ED04D067E1A06E5A4BE4DC4863C90CB52949603C0727A31C2B7C6F
4150C4774423E8C99C28166E5FC3BCE52C11064E7AC32607B6794509B9C2BB41
B76CA61E9C07B7228707A2D369E9DD9EDE9AC14E4FD09695BBDBD7994FDB3414
51D0A365FAFC66389761F5436DA107749746B5118C7B8DCC638666E9458B2AA4
16677F8CA940DA3730FF6602D1FBB7D9F48A6A8C33CD7CDBDCF53162554D7F55
E74FBCD82F69BA310ABAF7157334BFB2FCB5C9D08C637D34EF0B8CD10758E6FB
302FDB8719BDEBC7711FD4180FBAD3FF20536ABDFFA429B820A82AEE9A73D7DC
F77166491BDC853394CF665F741994F2FD6C49F144628D0938CA5B4B7668B9D7
1129FCD524AFF3FCA1C73129BA85E4E0CA65C90FF5931DADF03DA48AFB8561FC
2E7100823A1113CCEB7B316717EE859D7C2DA83F003A141954940647EC450690
9C1B4904CED6AFB3EA913918F7F9AB080B18CD87A1A38A0CCAB4AFFB3159A66A
113E066238B6C9A569761B7A9C7B95BD29B09B930B0D82F2C39F9BC669B211A1
9B2D697C75CE2B6171EA0D39805B15434A04232CBE3733502E1F59F53F8A8282
0CBA3C57AECF77F5883F2FC54ED39CEF3F9292DD0BCCC266E6895648A66470A4
EAD802B02FD1CB0AEF453014EC03F79919F839FED275EF9B49A0E3E2DF4FEAC5
51B910E8AB17977A1A7A3219E8AF71499D39CE0567AEA286091BEA9D6A443A5A
73E5A7AF1258A15ED5674C3AAAC4CAA8344432F60E709CFE4415E6E5FCA3C6AD
820A8ED4978E6E330DA55D3511E395C9D2F29BC2ECC2D462741B8B2FAA628ED0
6AB6A8B617AD1D9534E2BCC35DECEBCDDDC8539E0B0E5CE3F82C51E1A8827D7D
290DE369EA65E439250F6EE50ABD67833DA92E540FF7F10D19DB7B8C421BF2D9
3FF49F312EF7511BF3231D1F19599C1103239FDA525F52D837703FDCF60CA308
80CB573488658520530F436F249B0AE0A724EF014CEB137348871806301BEBE3
A5A5B0F3B3CA5B902D8A0649FAFF5183F6058AB1AB2D7ADC56B3209FBAA7DF01
AFE179256A07A1E6FAA06D51525CC1DE5CF6D3124407B7FBCD26BED57C6C0FD8
5C86DC11FB9EEC1B87ABCDA6A329FB5D07C5B458831922941F83085D461487E0
553DB11220CE764DE24EC8058F9068771D2C127AB25F504A85481A6E3243453D
811A505D0F6DF4D226F69331D7828D3C662478F969CA65E6280636BF69093F9B
BDDDC8853D5ABC897A402456452991834D1EAC85F6334221D50F3C41B70458D4
DA2F5DC9B874D4A271BEC821A5EE1092C3F15A2458209C7A40F7C048CDD0F4C6
83007C59DD71CB6621D13740E3D3FF50832664421989D9D5DADCDE34BA144698
34C6BF2DF01332CA9D0B096E4471F3DDD217D1CEA3413C7F4CEF1F811305FC18
4303A551D59C946E05361A8958F7F213A9677F3E3B8E35767A236CE373737ECA
5C2ECBD8107A7F3F97D5E061EEC9AC5168C77E353B6BE9E037E1771A1405CDE7
857F042CBEED7C7FE8ED8ED0E11BF1FC0245B5AA99AE92A99249E97DD3CDDFD5
FDF7B0F297D0F83F79A8138C611D8DE782EE0FCA33BA0C87A74A6C3E5A20D32A
264A61C45E5CC8D1FD411496BD6452159B6B0356F3A4C2F0EF233415B9A0210C
0EEB68F7D2782D45CD6F73A08D9DCCA1D435CADD9DA1BC724809993395E27D9C
4DCAEC204F20D10B78CE31D1A4B1A03E6596C709305FA4E78F44F29576EB055D
5841C6A9667A0B5F072E7235E9B1BA19B953CE9DE783BE36D415F2AC23F58C8E
F808B093595E631544CC051BAFED6CE19BB32DCD6C81723BB6B76B4C3CAEDD94
160460EE235DB6BA16DB022DFAB19CDBB561FC9DE080908BA95E6A23F83FB64D
F3D5A7F21974BE69B9DEE9458BF95C92681317F5F159FCAF120FD58E6BB79BAA
8E2D1EBB5F6D55DDD85FD687353B5885CCEB33DC81D35CF55FA8AF3132DE17E2
99D8A7841E775F3B6AA89DD3F6072BE3151D5B2858E25326C0944D5CD449CA98
9BF86F24F23F6F78CF43F5B7E7313B5274F487A92EB357B0495AF469F85CDC12
7B7A9A1593A3142DED58C5D952C0A9F4DF430042A34F5A3B2BBD67C2EEB4CA34
4658DC9E387E3E50CC870DA331FEB7A8B57EDD8189649036BEDB345F3C113114
9B68489CA5C9918E9CEF0FA05776A2278D9B037F69B74EE017F8456BF7298A86
D693DF113887DE86F346B7CEB1B7C7F1CB9D2441D6DA262DBA51FD5AEAEB5B03
BEE7E4F01BDED50B89BD3B679F61931842EEBF32C72A61070F39BFB8A2CF0C6D
8496348E62FBF9CBFE4629B979CE5B3482B2AEB09138AA435D5723765EDC9EA7
45830141B9BCE600F0EF9A78F1F8F1AC0A5CA501EAC3EFF381B223C18F8AE9D8
3E93BF9A910859488BF7E15104171DD2458EE4245572307B998ED396DF74A3D6
E73320DDEBBE6924DC4D1EA8B32261691204C125D35914399DFA29537A29064E
BB9634001D28DFB9B0B6FFBAA5B6B8D83D697E33C64CFD837400B6919BED7766
711B074A4FEAFB57E2694F6CC8DF321A03F39E9C4D96C006CD62028F93A020F4
12E8E2986CD3B9467B98DCFCF69ACDA7AA6D1B021DCEDD7574CB184C60B95B54
B86396DC012615EF91C8B211D91F53B8440676685AAE6CB1C9DECB039AD00EFC
C86832FA9BA57C0993B8D52A6546D691546DA6337200742FB65BAE285D806F32
73A4A2B6C888078364E236A7973C7B5548E265975B6F2BDB516B034A769D6D95
08901D88499FC6BAA061165604D47FCFAC23E23FF98E93ACC81C0C9D886F061B
7A33327C789C5F01809CD27A63BFC8D8DAC2209682E30DA633E4D79A05FEFD76
037EA8CFF36003F6CEF8D51DA46DB541D22A17BE74CBBD61EDFEDBC10E4D0934
C8FF314BF01CF881B78063E1055D4C56B14A055D9F688B1F48ACC83DCEFEC24A
27B4F8DACF8A1323C939809516CE789EBC1F118E31597ABC75AC6D8BEF6E255C
5BB3A6ABE442B7EC42CDECD2889DAB027947BCA7F4590CE9876F6ADA1505D157
14A32D1577FFF8155969A7E87B404531D7C3358BCAC082215A714748E8340A6C
14B0EBED231301B8ACA25CC852686B107EB67AA1D00F7E42C557BE96A8DC3141
BA9B97C03135631FFD25EB527DAC8DADE19D588689E266D55FE5819522F9AD74
843CD80EA768722DF324FEC5A8E14E5A17FF67644834DFD97F007D9B4B8B1E39
C378B50A2E0882EF028CB26361D35B0C05E68E1C0C20518533DA77B3495C3185
E91E9E4CC60A09BEA9A64E0D84BCA80055E57D34FDF54407BBC94AE5888A7A4F
D92860505B4F912847080F4DDA59AF3C2D7F0E8784846A929A536BA7DB1B0796
A54BDA0698E53CAFCCDDF48020F4CAA44AE4EA97312DEAA4A9DAC3B7DA08CC33
00E2548EDD4D2A731646D73868C91B2FA4A5D2AE4F771F351E44B5714A26927F
E96648B2975BCF79D78D79B25CB84F685474A547340B7C672848BAE6CE953BD1
60F967808EFCFA122BA74F6C9F61460CCF0989772FD2D0AD5262CF1E4B0B4BF2
70BB1B46B4888AAA0909BAB794A1AB52AE8A67818091C72D6156C2EBB3121717
BD04A660691878F8FCF81B325B2A63A8CF76A3AFCE2438DA23D0DBD694DA0B94
1C67B0EF2B98CD723C3263C5AEDF0663EF2BD1699A9D2E4AA8B8F874F520A53E
356068A14B143390DF2D2F60A5AB5C41F98CADFFF67DACAA844E3AD3B5161784
BC0240BFE07D8DB56B46DFCE28F17D3C30DE0163CBBCD60D9170B31B69DC22EF
B02D16EE65516DCBB398A3B2D0773E6DA19CD2F27816A9E869703F94EAC7041B
B08566DC1B0045D41EE2F48F13943C8B81DBFA5C3092E0E82F217A7ED7D61C8A
1CDF8A379C22193172B144366564E3F41F5028758E29D474E0D0CE6A768DD6AD
AAB2F248F1B2B7478297CFC07D2E7130A4E294FF9499FD9388892E555593C66F
D84DC63D9ED6F42E57B3E73B01C0D2563AFEEB8491C1406F8C759E1D8B85FBA7
73737E51A477DB4A2FE8DE77C76CD965AD699BB395E2B948707CE9A749B12695
B8243A723501DA199733D719E16A1E81BD425F02941BFBBAC3E6DCE57A660FFE
76B2B0F087D6458F2B1D9407CB5336010FFFDEB1907BEC8B1B5D45156D95823A
A09CB8947E86214DDA53C4E282FC19D92EB36890AE116B3A5FB0B6989440722C
550F17EA77CEBF7A0614B383D222194C2E162E4B5962B6FDC199D3014A897C98
5B5CEFCA3800771104480B6F2BEA147417EF760BA9700F0B0425454C3B6852D7
B16284E8158A4DFB66FEF3406CDBB07458BBD7FB89AF6BC07BEF4E2836B201E7
74592CC40562E869859D5BCC5C0B83DC56E6B235EBF3767BECF1C34F64ED1019
A07C61DA6E683693249E5F9BCA22D3C2F9E6DAFB2A45EE78D8C51C0EF42EF470
F84A550E53DBAC5CBBD0F9BB1D4F8C1F55E4C08E1EF52EFCEB5D8F9D727892BC
D69F128032887ED424D6AA6183939B113DF716830C267DF8BF148B27733533EB
D6CB14111299F2B892CE17CD740BC9A1BCC03C6E556B815BFA76652D06469FB5
D13A5E991CB1357877A9DB4338FB27A18C3E1F249672F6B78757F1DCA60D83F4
C6A05455403E90A40115635F5A01B017942A9F6920EEF863731D95F79C4CAB3B
B5FE194D781D1104B92B6E45A9FE8BE5E33913BC0777E087E6D1E4252BCF9A74
17C777B7904EA47C299C9BDEAC2F047543CE9FFE2BB2C3CA4BDEB85838D533F4
E0687CF54C3767E06C6C369EB81873DD63A1BF343CE9801F837C47C5F3D0C745
262B085F026820E406CC698FF88BEE3627047FF7A12044AE5A50ECA295EB5838
28FCA22D1EB01528F5EFE4F6CCED88222F469A3CA23F2B72B6DFC5A9D1705FCC
6C60C7EE132ADFDF44C28EC45CFB572D150442CE1FCECEA2ACB866D9AD7CC0EC
24E66B409E902C743B3754A3A2F73B375BE99A2F7451518F48211A04F42864A2
8D936042DD869338F8D6BEC3B63C5E9999C06B34A79E0D131D233D7BE0E3C276
E3A5117350E877FFF97EAE242EFCE7AA56EA5EFFF31273BD8C22F12467B61057
FC53C3BC05F912254E0340610A27244970757F3C25CFC3E853E2FEACDFA507C4
D6DAFE88B2B5507573D039C6EB48E1D6A8613F781383801936F5E8A1E4D3E727
3189DA87969D7A44632EB5FF29C9203B1D244684C6A8B43AC910E2D552E05538
0D3636AA51BF27D7B512E36DE3ED18FD6085854162EF1A775D6EDF6113A7278D
222397A629A20E4B213A3847C0ADCF2D25714D0E71A532AA72095886AFE6A6C0
5D49F3849C1D1FD6588439107F5E461535C333B5C0EDDCE8A5C8BD416D85C6EC
714AEAB6227878AB0014F84B1CF03B9F5CD25F178555C955611A154264053BE4
49B1873014D117A22EE53C0F9755FBED1F3B69CECAFE13C075719ED3BAFCB03E
05B9427E29E67BC611B4D340B02B855F8628D25D3233BC2BE6E39F4F99140CED
7FED72BDC8914233D302D488CBE2D4A8367D82EF814BD40E8E2FEA598F4D0A27
D4DE5AB3F4CD4DFEEF85CDDAFD94BD3D4748F6A61A481109B0BF221692604ECA
052EC4AF83AB157654C47833276EEFB7B7BBC3AC7AD3E98B437EB0FBE31BF3C4
B98A42BEA94B639FDE82F527D979F048EA38A0B6B777FBEC34B34014BF3DEE4D
0EBA5A16E4E6BFB7329F10537E054BE7D30C9B59B22F8A10A620E594C4C8242B
7737270164969547107E3601E8E892031359381FA4B6C81B3DFB9A81FAA6DFF8
B239874FFE2072A731070FFB5095F90EA1D631F5E9A8A8A658ECE9E355798371
62154C8B41CD194510EBD71D312DC93B8895DD6AE670C91B23D9DD51471D34F4
F9C01F5BEA113797112D9BAD993FF6FE629C7BD4BBB704C003E95BE5BD400291
2E39F235A2B017D57F14E6AA656D40826B51F5B459BA6193E63F954548927EE0
7048286354D836A5923D3E6DA00EC135112C892D97DA2F0E5BB13D266654AD11
DC0C113E6257DBF922779511BBA1B97D9EB91E88E17AF2940E84589ABCD893EC
B0B0EE9248060875DC2AA92368682A1BD653139E4FDA14B1DCC05D640E3507DE
6E62E4E0FE935E8E910D5E27373CCDA72402DFB9B35C8E557C3232D62176E87C
9CE253A193BFAD2575B7B23BF4B7817403F7C8EC8D25C8D12B6346BEC24FE598
80303D5EA5C83DC71AC3588BBD6EFBE783261C268A81A284D23C499557CA27D5
90DDAEF16525107B838705FFD848DED6097A9EFD22A3FECE4AB87E419E195019
97F7A9F33EC72663D1EB8DDF3A9E153442BA111BAB7448FD53D57EAB7F4194A8
300852DFE2F85FD8954C0B4A8233C156D6DF2830E4F2AC7BC9A0512C5598CD6A
8558B8C4845BF9251E3D33B86022C1527570CACB9292C18906F535A9E4438464
845B950140ADD971D94571113689C1751B5314366337D000007EF744EE23FEFA
98E0CB04227228E50DB20377A2B8B735C214614FC1FFF4420EEF9A1BED586784
8B4C8A5C28416877CBC3FBBB33E14A3B4611CFBE9DAFED6D3C05A123C32B4DED
743448D191D44AA6C3EA829373113FB4A14D714D521216CE4199661E27098A6A
3F7D7CC21B193435861F854608D14A15E6EC99084638B1329119575FED380E7A
28D66F459666B58ED8A4F262E3D16983FDAE39E8C580C44EC9A7A75F4BFD436D
AB7247513CACC1CB61153358E44F4754A5EF01D5BFB0418A0E4E57B13B956E26
191B12F8E56F011714F8E90B351B015320794A89E84C34F32B465E2014404B8A
5226AF78DE86A40ED5DB5E33336D8120189B00DE94D6D660AE16BA0EFB14BD3F
DC34A5D035F101596008AD45DA0227BBC82A4743139BAC834C2797220523B23A
ECEE7E261FC665164721A33745FB9068FA89834343D37A95F93C4E36474C780D
27470BA157DBA9F33690EEB0E7DF81E6913F164C3BE3EE5DC01A9FA9D3613E04
F4B21AFAB6EDA8EFAABCC1CDF4692D601ADE5D83133EF0A5D0FEFB9C0F6A3354
445EF09EBF4678CFABD1296709AD9277424FE0912D36CC908D5C87303365580D
7B230409F73A9A51FB60BE932755B5CC86CAF66C09CAC226F8BA6113218CA603
7392F9D23E3B785C1F380B091FB2294B503CD3A9640A1F86FEDB512208C1D91F
691B46FD11A7C4D178A3126D18B3A497CA632CE69E649844DAE3036F33D4C458
255418948339081E9CE55A4CE24913D906B794CCAF6E09442EE9FFA956FC2EC3
9CA7BF276DCEE33ED82209F2F14ACD7AF2E8B86B5CC31ED35D3E0A0FC05A6C34
D82888A61280C23395839D84D5BB6B9097571FF199FAD397D121935190DBA4D6
84992F3705E3A3BA564BD90D4EC8361D3DF5DB2A99FB469A6D2C8C70ADA8F76D
138406B7E36BD496CFA8C5094998BCD053706CB9C3D40A5F556BCE48ABE20B42
E0AE1CF52C8F163E8AAF6266C2FCE32B2ABA4EAC6EA3593C69E330C998F23A30
64AD95ABE5F007C6E39A262AEBEB9642605DA8420AF626818A481F7CB2DF361B
2AF9584979D7C7EED7D4C9E93AD52DC86D79AF6D871CB5D91E53EA6E5391466F
4F82A8AC1AB43CC59C3DE49AC5167BA3A52E68E407E1BDE117B5847F2E21D23B
9CF1F9986CE2B5DFB4118FCD40ADCD99267BC973005D71FA0987CACD7FDD2886
98194DD46C9738FFD10038502810426E0249F08C2C5000002DE9DE61B43A8595
CD5A864952411D06BFBF4CB5A7293D410598A22826EBB0B19C1AD3D1F5388ABB
91E9504F5CEF677649D2EC529972E1785475874912D4724F7C7F8091F58ED829
E0C8F70A401BD03C72734EC641C824F5DEE7D309017C0E5DF1A5AB11839556F5
8BBC7DB82F9536EEE0BE8F4AC7B35CF2D9F0F492A5AB8832496F7EA8624C034C
349973AC1227D16964F9AFCBFBD83E5D5DC3CA953BB415E7A13F826B680DCD92
7AF85F4769D318475C199F43CBA7D0315FDC38D2C7FC3F543170638D6685F0B5
357E597DBAF905C40E46D7F3B3FD6162477853C21DF0B3CC567E88DE5BC71CAF
C31D299E761934B2F80B7710A6DAAD97DA525F0805F7CB94488080A54C488FC9
BE47403C757EDB2D7F868A1157850F48A5E0F299DD9078866AC4AC771A7A9397
3D00FD1238EADD3C52B5C60864C398840328D3321F19AAECCE986C5A4AA8635D
76C82B334E191A8849D7F7EF8598E4A29AA39C043380B8C9F56B6F54DF006717
7A74EAF4A13530D72C4957ADD1D6EED92537F43B12651F4D6FF8A603AF6BCD22
354818845819B0B9CF836A8E6C45E66AD8F8E5D87DD90F0F15E0EA12DFA798F7
30A6B5EEDE3F6750F5F8F6F3C9C597D073ECF7B1FF1DD43FA046AEDA4454C850
B9DEFBEC9D615C616ED9D7C3AF31D37220EA5CA1986893C8988ACD08C02A35DD
1D820F61B6EFFFEF79BE45E8204DCCEB5EFD83A1D4BAC5DFE1E2C8DD7D2E82FF
DAE0DC0AEA4E821067927EC46753645F880BD138BCBADAA7032790EEA23D08AD
A7F66A3DC74D6126B8BC8E30EC6AC0840AD394B1655E53AB42EBE432AF9E6FD4
B29E31BF6ABDEEEF37ECDF980E5DF90C527DB1F059104CE5A55BD7A94D16C95B
CBB00E787DD1048132EF551BF81CA4CF983C0DA59A086E3A655693478A48FD88
B381955975F5BF4A09DEE8AE0850BA1EB1F51ADF85A2426D04287236B8EABF2D
703BE3823FC5083D81D54409A8CF21D52D10FF62D089B64E3FB858F411A8CD21
FDE92A439BAF65CCC0C809FB9FB3238C5353413026590DE52A9E7D1CCD0DD6CD
88380241B9CF50A4802316240B6A58FF5FFCC136D76CCCFC7792A18449B152D4
7772F7DAB6811B1027FDA86CF66E032F1B0D4946113946DBB37DA767BAE00782
7695119229863CCCDBE52AE39986568307954003001CC236BD3016C37C9A5242
6AECA422104BA2EC72F0C22C0236C3DCCCD0C800997CCE869A7F1B2D22E3BD0A
364F4AC9FE64C0836B09C6744176AFDDE4BECA5D5ADBA455ED9DA3119948D4B6
3E570C02E3ADECD6AE02E5474D3559A870FFA32820FB599D3BB8426318CF898C
73A47499F07B9621A76ABD9817298522165CCC13361A954ACE2E1CE0034A3EB6
2ACCC543AA4B221202A7948D6C689F1363C30EC211F9A5F0D5B1E3F86D668B64
E499E404C7DB577CFE5BFB1BE0C0AC60048637F41809CDCDF1C92EECD88D1E47
B33B77D76F8CBCB04B9B97D315680CF31200B31AE146E5363352A2D4AFAF5A39
0A2046171A5A0C0601758F6419B874DB8FDFB4C6A6E0D5F20649412C915951FB
8250EBAA125DA0A2E05B0173115F5D1A378F22B28F96DB42826B66600C702D8D
92F1B40612F33014226E2D5750AA1115AA1AEBBC0B8F11FCF383ED6D442E7D8B
58020A051F844D9FDFE14D64893669743B6BC2F7C99701486E6C78EAA927515A
B7FE3A531CA0F139AAD1C8740D1BE91AC15AD441666A5A6CB8D77232A1DA6EB8
EE294EC8FC91A6E9E1EBD74ABFC68839B0D9CA63AA8A5060039EAC3E77DCC160
C5A82A4DA9CA268AE75353B2E18654199CAF28B653ED98A5CFD16D5CF0FAA75C
D8D1B986B2EBAE55033A0D38023BDA6569691729EA004A3D96F0FBB300F40304
91874A0EBAAEAA48530546223D26B8A2BC93C1CDEB01D09EA0BDA80E955406B4
1FD7C0BCA755965732C0D54CE9F2F60D371104B04230B706B43D0108E5AD569D
F090E77BAE62868382DA715C3E5C968FA7D88916E879A232B79539667BC689CB
2B88D51DD900F951767AF33F88BA6963957F3DBE73F5B145725DFABA79257C64
96F5915596B31948B3D449E96B41E3376EE46E7E218A3868A1F35192B6A29EBC
2AAB1F105F553D82942B1302FD3BADDE29F623EF50C9B12A37D7EC7CAAB72BFB
900699E6CA7B672D208B1FD63B00297E29661DA6A7C2E6C5ACB12FB054A7F7E2
988C00C409F8CF5CAFA6ED87E41DD3EE3DED90C3B3F8A39F36447FD8AFA1DFE6
FA7EA168F4DDC5FA86CADAD2636F675A2F9DDAF3748E46B8D17CB74BDAA4BF82
5CA8D11BA3D1A55F556DA72CB1D41CAC66BF598EB34E4A640F0357940CB89748
FDA1FFBC9D63A1AE12D459508201FAC4B5358B26A0E3767096251F3A44CB2495
E73D2E3C32930DD823D0DC7657D4D04F433041B3E9D7450A1183D2C065D5FE43
A2505216D0BDA4BCFDFD8EF6448373DA6F9EE669A054D98A2512F90B83157F57
E05097726644B8070D31E6FC60F8C7961BA96362CA771E3DB9DFF84E1A481201
D19F2A70D8EDC02EA78526A80A3E2D132A2660BF89FE798B0A5928F7CE466BBD
DA8186563C7DAB10B9B31BC088A320DCB2073CEB54C50F3E6E2CA991A9A39F0F
2932CC6014BC40095A70E3535A76A7B6CB699093D3E4D1A8B6C56DFDE887E01F
CF6FDE7E553889BB39B59D60BC6A5FAE1F8F869D7AF5E4EF1989FD377E910A16
CB1BCE3F84FD75CB36F23CF79D2379D815834D80E4E45DA2F106246A0DBFFD96
BE0EE4E0AA4C2CE78CD3FA1EEC6EB13E937AF100E09F546755E3C2F43042B335
04F3EAE8E435C95D6AE8A5B942AC229850E9D6C505A278C8215B9F542D811476
F37D84B51D8C3E4B86EFCFF1C0E19F4369AD260BA7707F4ADF9D2843FC809A04
0B9287F0C71D93F7C2B323E8A00F88D50CB5BE5F12FBDBE6481D67434810D24D
65F81CB822DFD34841FCB3F5AB7E1798B23757A3613D6F9F8A78E8F130575910
EC324FD2DF976CFC21F029256FD334044701CF8C14B23128617137DD98E2016A
73BA0F9B7A1A8FF27DE36BD013A05DB49BCF9935AE98FE9DEBB4F2715D7A8C69
99CBDD6F951F62CA86E09140E8AAD10A0F807EFAD84A727C0830FB48F2E14A4D
135C98016B88DDC161F86E03D22C944CF66BEC5F340A9E8256EEC2D21A8441D3
E56705116B6ED2200D718E9F8F8CF316FE7C248CEC8AB77D2A541AEE4032BAAE
D07AE3E2993D7267CF6FF3D5FD8CD94704072FB7373FAA8A992AF2EE011844CA
91A31AB7A2A906A891187692144C02E84D49BA478469B48E00DF7655BCA3537F
71088F57D3965694C0DB35F7B2AF914829A262AE0E744AE5D6FC9EF3A6F2687C
6907AD24CE753CA735BBA76FCDFB2D70BE9474E8893C0439A85CB80A509AADE5
7FB2EE8F975DC63F9284F658F5DF074B46A48BB7D7B3EEDA7B21AB037B790AD3
CF1B4D26DF6727863968781EFF5C5FD3B0577D557236A4CB0E68275A356ED255
90C12E5362818DD4800EBEF9EA787C0148132F38D5DABBD8DD0F6F9FD27FDA3B
150A099993B56ADE3D1C0330CB9924F00FCF022C9B7266EED5DD79A85DE194C3
F43F0F8CF0EA656D3941C1ECD3F75C18CDFC907F1C8EE4B84E0C4355F2FD7E76
898C6FFC15BAFA0F37397279F2A7EA74CF776840DD148024FB210E217E085203
1A7D7F37613C4950D905D6AFB4390B62A3173B522240F0D3AB769F513DE5F6C2
250FBD151440F4C5CD454FC67C6D401E7A8949780E6AD8333F289DDC7A499304
DCD9A5B9FAA803CCD79481D91814C47A0A3BFAF7465542D6822F564D1E2E0FA6
F156C524E15C7E5DD0ED9B1C747BF81250C4EF405259CA8F307C33A5E78FB013
85A19CB549B6DA0E5F55FF917512429E9DA90EA6D4101D8F51A9260B4D745196
AAF73F063AC1B4B8BB9426E5EE16B5B00EDB7D6C76F14F86FF69735A40B72F56
3FF74AB96D945E03E6CD8654ACC273140FE845DB74852B056E227AAE8F5E4138
82C49F3059F7616FFCE96FD15277055A7BAA70E7116664774CBEC3361B769461
2010C23B8F853C3839DF470DD1004FF3F3D42FC229CE2A91FF4FE435C3E56A8E
B5794984BD8E1DBC60E48CCFD9E1AC3BDDF3FB69A81F2D36111C77E1EDCCD9DA
FD1F0008AC7E75F54402B816557B31413D45C0B5F7B1FF17874AA7CC620939F3
BA8AA5ABC542755CE1CDEFB73A9DE9BF792C13B4BCCD131AC7EF914A9E39B130
D84AB9618A4CA77BC722FA601A6123A48DB781E5FAC3FF84BB2D4E8D4CCE33E0
B1A39A42F8BDFD0D8EFD189B19204232F30EC774AB6AEB948CBA6F1699DEFE92
CECEC614B8199852C68127403E5156C9C207F4D297B2B50981FEAD35BC2E9C40
5FD9CF4104B501CCD1C9863257724621D9034FF565E94479907B8691DAFE52F5
4EC8DC47BBD4E12CD018D61E9BBBA55E94ACC3C415311BA6EDE00ABDCE8BDA33
BA195AA572D3FE1289FBB4C85DDF72F5F6B01E30B2D9FF5361E310ABCECED922
35FEA97B3733E769D69EFF1D162EEC40424671AD57660EB151AB934B75E8DFA4
1B8E5F1A55FF998D3475F81C2B3F12059DDFDDCA083F16623FE47686CB6A99D4
C551690D0D92DE92AB85F228DDAA17B41F60997B611C4676FE94913335C40697
E7C1B792C3529814C33457940DE8792A3F4BF13DABC8B2D08BF327CFF5AA1B9E
7DF72E1C0871DE2A50522FEE2EFB2D690B946F5FE87C73EE2060B157930BDF7E
B3739426B38816EFCD5B6E0E95558763CF8C164923D82797A31C3E4B34CC68F4
0F0C4D87AA96E6D2D214356F2F45DBAEB9560610E8BC8794666459C9032AA481
F30F9C2FB8C376B572CA8FA87EF9E4A7E1A63E9B1C2F419BF15EB4A58B2E9A37
E4366AEF8A188CA03B0BA5E34040ECE3D4B7211514C5020378033A2EFAC8C460
AA5F4E9AE54F81DAF3E56DDD2E1110B8BD1E328A19BCBD71949CC9E17957997F
FB4B641864AFC9CA584F8E2818357F0A58BECDB8CB67D51B606BDEF122150B5B
33EBD5A392B81D67CA8F76701D816C7714C86BD5C0316335453A4E7238C5FE7E
FCFFF578C1FD96F52B29C9260BEAD0CD51DC600078599FC850BF0029CB0DFE4E
5C5C106E30E1DC78D0EE11380C1AABCD5BC94B807B8CB3D398BA327772A08C08
5EFC9D04D7A7C85C82D45F082E3976B95DE6257AB6D8C7BC445E500C128AA2B1
0494823BE831209ACCDF159538F61E5FBAE613B8F5874447F68EBF491EC590EF
0B84890B801D30B1357C3432B7770D7D11F073886C2E4B6AF33B152937322474
DAD9B1049ABEBA0234454B737A86F58275686BBDE7C9B995BF1EE3842EF8D604
ACD61BDD07010911E6A7ACE3013095CD8503E7A9F5B516B2F3B0F0329AEC007D
7149B41BD4E05B76B2FD6708E813BB31D3EC36A7DB5F29AA1A2C43288B1149ED
209663FB4D510A8181C171816540E61E5A2E2947957AA9A6311A5FCE47837295
78878D2C9CC4DECF246DFCBBD6E39123DBF7A3D1A4667CC9A1D236D4D282C85E
CE5BC7455049B11243C5057E9B1B36E4D58EE18C632DC2AC68618845EFE5CECF
8328414FF28B6D895F17E5C822645CC8224AB74484BCD51B67E3FF36BC07E3CA
D986D3ECDA339561738E13F2DD286236367D3FD6206DF1B2B7701C20E811C6C1
294566363B820D857B334F26D55DD2E97AB66BE0F090C370F6596AF00C0F5C7D
6336E0E19CA338CCD852E3FF033A8B82FF19251B1D3735B67FF464CD57295728
AB35CC4A4628E76309EC9D0B81B08747404EED051DAB009E931C5332BABFACAC
D94FEE0260C992CBE0AB03B6EE15A94A0D11FDC4C5961B294E65FCD7D74CCB7F
57D009779DD94F6493B7763F86C15F4A6D47A8E326ED93853F0613ED051DCFDE
9F4ECD69FD3348BF39FCDAB2F8C2DF4A64E655BE7CD17406561646015079BA30
853A9B90DDDF7AF372B76FE598D19AC35D7DC7C43FB3E4038F50162676F6D777
C370DDADAED2C7DA44FCBDE44BC556835774B08B0438C3FC1F2D9E49253E3A39
A4A6484A7EED77116BD70AE51750A62BE6B1ABDB9E2F3765956855EA198E1B2D
C28E94E38A2A9504D47D4E0CE398AEA6C7C24CE1C6C08D077D340DD31B820E7D
29C87F58C953AA3EA5788239D1FD4176B9C310D775443684F3CD154BDE5CBF74
1CFA9D1CA3965AA17171B6D9CF751E73CAEF19B847D18A2274778BA876ACC828
6A07FCDF2FC69AF907D335DFA7ECAB2B83C4DD7DC1ED72D467C7C5F6A5AE0DFD
9716BD259435F9894C08E6AF42F220B87F2291446EEC4F189A1582475245F47C
5AE09BC2A6292CA3F217ED943C72D6417DFE4F67E284524D4D83D25F1F0845FE
D136DC8720857F57C8AD12C8885B48DF217C688490F6CEB331FA03DA5E7C9B6F
7D4D91566608B56A316F4E53BF077361DE9B028DBA92FE0ADD0FDD9EEEAA0A34
62BF0813C1D18440446A9D5E596727EE1596CAA06600F55DB88CEF35A4B85063
C5E1D19C3D69EC4B6AC687A6FFB981919CAAA657A128B721F8482FEF08751EB6
8167529E383ABF631384DDA3D79F6442BE76CE28AE3DC8D73A84AF77A1A9B7F8
FC803028A8165D453AEE422EFF10547CC2E44F566E8880D0D75E9E8FC7A7ED3D
99BC762576D38886EBFD84A70D9485036ADAB2E710CD843327B1F393C46104B4
D3F812786E12EFBED0FD3DB69D77002121BC33DB02B4B75DF4375B04406128DE
3BBE1BE68916E7170FD01D480622F5D6FAA5A619457A89BA0850D39360DC793D
9CCE79FC57E1B8A3E17D9A5B78263ABDB92A0D6C75977D56CCB510B915E6D6FA
FC8F138795BC17DEBC668F411C2C0B0340F42BAC73E033DE6E9C8E81AE5C0DA2
12DEFFA85E2C93AB0EB509D8A942BC692412BFB5783DB3C0068FCEC897D55D47
BB8648EB7510BE2E450D25C2230D767748EABB08651963AB6484A4A64D7FF1C9
476D3540344B0D523F609EE0773F559A2CC00945A1C0134494FB14D020A784B7
DEB066462F565ACA8F4F6DB3CDE8726DFAAA7A7EAAE035C1AAE00E1081879855
2FE4EB89220142D257F2C7F128FA63854AFD3AD930AF4979D68A5A6DC2AE4C62
7276365855F11CBBA6D747BFCF416DDCAE3798F900A467910D50BB0E97CCFFE2
322734D423A02212D0048E23B1DD05C889D021D5FC3A7279A431324522F5CCC8
98D707553AA9051D23F94E8351CF4AEABDA752C8DF3D1DA5ADF22DEF076D9AE6
2673AF0DC4FF34BD72FDC1E8AC44753CAFE384907789D0FCB3529D3316D1774C
21750D736597A6F1A915BDCB5691D52D6872D634667745178ADE570A7DDEFFEC
F00546B91277329224269BCE0B4BC164A08CD3A22D50DBE87FA2B9FD5C788393
21E3B2DA5B6697FC6F0C164C6C083DE97C76C16514FEC7F8AF666913C95B1391
390474D956A9A0270655811051028B571E39D1A96CC8808CA1AADD820F993EB7
ABA18FCB0937095FE4487254C55F38CD662779BF9273B7F448B79D76EF0ECDF6
D93AA6ECC2E63B34AC259F84ACE7D6104AD009271852AB28D4FAC6B2A4B0C95C
DBA6575225199CC9AD11D7A02811E66948515BAD14D0A91EF121B26F80DD9B0B
22002833A7CB76572FE440D7EDC6EBCD2AF0D56D5CB3D90AE8995D9D6BB7FD87
28CF47A183D6C68DD3D62F25E88429C0E33A888CF7A26CE3D3B5274739044883
A4CC6C9D85241D6C95FE31EF0F8DEB63E295E8826BF920C8FEAE3B25F7918B0C
9995C7949061F1368EF518F8704218434267B77CFBDE37F2B027D1A2D5A8BDE4
B6CCAC0046425BB5A57BA4F34B28B8D71E0211D42BA31ECA38EC02E372A1FD7B
DD577A273AFDC1A318F77A31D386225B3645AD3979D2F4AA17C624CAB35B8596
3C6DED22EF0A1EF90AF10E1D1EBE111BC6D134930242730DFD1065B507A3B343
C618E5D060218601080A9395F9FCF7B882B2D57B4AB80E8594BFFC04C7F2EF1F
1ADFBE5413CFBC88CAA304F10AA59C7F68FF91DB97DCDE55F701A6394220AE56
BA0FDFF1E76B74CEF2C452CA230A1EB007935F55C981B51F8E8451802D4821A8
2B8A241DD366C39A604534D3E9CA3F5AFD8F3024F3B662231E4F893C9180C823
B0A2C11C80CF098B6FF0BDF6453D33995F4E54BD50A0674571EBB8954C3A90EE
C264E6115950FC91D0DB78066F2041CB837A1F9DA29079555C100265D82C9C1F
D2BF6A8772173F73DE0BAB5682C76314FCC846528276A6B802AFDC91E9E78B48
04FAC07096E3504738C1988D0A93CC58C94BC93B8A0E1D60CDBE68ED52500870
05FCA1C89BC1452A6783098F3D2A068A7F375E5B0785125D4777602F732DCCDA
B71EB262B8A87DFD9E2D349DB6B829741201F3B326C485076B067DD514420B6D
CB8A2E191A87DE60991E5FA59DAA1B35E3925099133D81BDA1B5E1009359AB0B
98251F9119B42145E0BCFAFC8615892C4304680C0CE31BF0A5B651EA6D738E4C
113A1F02F4D53FD58986124720F86675342F73EBF77AD72CDF43B3F3D45C0E24
5793632A1F0526611190E892DF0571F66D90AA8EF1F5AB6E3DE7F1247493B0A6
A0B35F1B487608030987F028008EB296E7B26E96FCB7CA4318392AE6C3193843
562A1D24AD69B432C03FB857E80BB677C002F5B67650D9D434956C7787A841EA
51F2E58AF26122C2D5ECD87C49AA90065CD6999768E07E124378C3831944967B
1FD708F9EA78FB55C05E9D7F2D42FEC131372A2D75A4AB18ADF4ED2688529F88
FD0F4C22CB71BA294550D4E89C73DFD6CCBAF383B709A7E2C18CAE85CEC705A2
EB89D78BF99F0939F99625ED2D69D26949120671D3BF2E33A5B21DB7AF1E64D6
BC35412D388499D3895E2D1233EF3EEA340E6E55C23FC87416A3E3732A5B6A22
3D0ED3DA70E0F6D2463C491D72604D29188278264CA68391F902886E4EC2875F
DDD6DAB46516DF951064074A52C138FBD66924DA984A5DDD215780BA71E406B0
40A4FA4D6CC7AF653400B1998FC16CDD5E1BE48EF0930736250F6747BD1DDF0C
56D2BA3C6F3C3222A6031E68910DA373B32837B34FFDC5B57B9CF7826FEA7D38
726F2A1891340BF1DA9F49EDA513D4579C94198014188B2A4F223561773E85D3
20B44E41828CBF8FB35044A8339C52164A9042EF26E8DF207719B25596A888D7
5308596ED0574AD798ABE0A28C3F80B5A60A16374271929A127FC137B1BEA7F5
6642A5261ED6A9030A5E40CE0811225F1722A2EA4BD5D79CF87BF6B5DA64D151
64FEE55A96EFFB6C5555AFC759E491A9B56937CF8BA7841A58D7F3BBB9ABB1BD
18A3F032DFB948D077AC495C5D85F5543B19643E01FB89443353F1F032FF5D7F
7C97A02506798077A8B39E476E36E9127419F27469DD3BA6A1D826801558CAE3
4BE97FA35DCF80C1E509E8A7490CBAB75084B1C991A6E3BAB42C1B0A34361A1D
DB23585CB941530493A841EBE3CEA40FD502ACBB139DABD34575DD1D97765E4C
DF7F7B34824A7D11DCD5168A7A13539C7C8DDB7BB490525DDA45A60F07E67B8C
973BE6D74A24C6AF12C6699E4CDFE97DF65B0612857F360BA1F06AF09DE5CAFD
23D3E5AEB2C6694A816A7E158615829E59EE73573363006AE3777B96D940C773
591DF0BF885847AE5E7A34772BB0ABC0CFE8F420AD6206B9314B5E62D590F432
85500267959E141B27F619E8AD14FBCAE12BB3637B24236DAFE0AF91D63B4622
CF8D7EAED62367A97D15EF20362AF7068A8A899C6413FCC65C406B8A7DA92EB2
2F6DEC316C589869B277DFA6452E0BAA0519CB64DDE6282787A7F448D788E2CB
FB2BCDB360066803092C417170563C2F8E5DA9C45808FABE86E02DF376C4FB1C
0FDDA69516B3203E1AC4CFA982D1EC42F237D3D24CFF69DD34A0A93BE91F9745
A63AFEC3516B02EEC3D5C9EA8BADD035545E909493D4E492FC69C0A7367B657C
9EE762A04652AF6CDC7F00515DA3CC0A55E3AB079AF1D26C6926E9FB17ECA952
39E4A1E71C1FCA3507378EE830835951FA07A291D3C2241921FD9C2578A923A9
DE570D3135BB9C57835F33BDEBAC1DBA16F1B232D12177830C3B5B440DC33216
3F22D795CE4769806A2C0638332088B94E1347827D4CDC5BB5F224B290BF1EC2
900DF1D8545651EA776CA61D47010D307D6AFAC179F40F6471526D408712B811
368AB1A043BB8106043B89324A02F3B6EE97E027D20BF06B765C7FC272AD52F5
F6A2D81723F35B6E2C376C4994A3A4B904A4031C519E155A116C14F576AEF66E
86BB1B6381F6AE1E45DCC7E785EB0D360B9CD0D9B84426F42276EAEBD8B624A2
48F2B3FB6C05EC5C7F5431B781D42D10B9F9A675D86CEE8637366791756AB275
04F65741B1017E96CC19C777FFD98D851C9629B978FA10CE2AC0425C78399918
82AC62A3BA4DEA11570A9C92F5703261B09BF257495D702E4AEE3AAB63B382FD
D2568A537E7296E0EE3EE6FEE2C7CA608F7E4B1D4098F76AAC77BCB1D1804359
FAF6567304E9646515EB8FEF55DBF964A5C2AA9623B8674844C01B3CFDBEBA84
F509932A569E5057F8B0869316913D44CA8A4671BAB704272A86705D76B624DF
15FA0C223FEB058CDB5BE9F70669113065923D7A6457012D7D59BAE248F8C7B5
DF787DD65949AE1B082E3F5B20BF645BD2A7E6AA4B68F74AB56C301672A0BE31
E078D0A011258412B975D344E88443AFB83F96DECD5E0B32C5EA329CB3420023
5949FBC4FEEF7FD5281A016ADC60AC66694EDC070A1AD04BE136D9648BDE5AF9
F5E9E16FF072156903B461EBAC9695D204E56E1B3097B0468AEEBA08915943EE
4D659CC4496EAB8EF09A09CC7FBBC0008CF2A70C000FC01EFB94F8811BF4B3A4
BDD20B796CC7DE1FBF2AD98445A91D705ED3B8AF4EE6BC02215DC913192135D0
78CF4723E187DF3950EDFD6CEA20D0649071442B2916EBCE5F4B59CD0754657B
A98D993A858C73631B9EB0BA5D2020E1357CB786AA6415ECAAE9802FA36E4096
D06B36932CD84368E4086836F54284D6DB46BA9856A16B74D2B54D3357A5CC53
A8BAF39883AE261391BB667719D9F90D451242D3182078F31BB1DD166D07EDE6
454270BE0140F6365C3F5CC1170476B17BCDA45C640C583F16DA2070280E3DD0
21E6581E8F42C1DDCEDAC057CBEE9AF071D42F5E52E53E7033BE8E6147CDC8D6
C4B6D505F13E68ADA89F2E8AC300761CB99C9E9948B692DEB484A8B9100A31AD
1DF7CE7CEDF45D8D748ABC684B67355C6EB30D38D487488A571F1CF7A9B70090
6E583741122907F0A3DC00C10F078073E90FBC9684C7D544167D10ECA06B51C2
717D0E24495F4848CF874CA20EC6E9FA2169518A8C7571F01DC1B3DCD6D96566
3679FF1E138E5CCA5F060E63033D01C32F7D7DAB03D4109E7BEAC3931D798EB2
63C089CE1074CA85E830CF642D764D2F51B2393A7124C45174BF87EA1EC93990
84AAFF6ED04490B27C2986BCA7E5FD38817448E51F08BD1941170093508DF47D
10D4AE6EE166B1B181C1A8474E03AF8720CF5C255941555BBB30E1B1659B547E
43586D5FF1AB41B424AC335873F8D9B2CA0F42AE9B61BB3710853271C7C86379
34365D21D477CA24F82C9C1687382271E01C5CF828ACB0730F46F17A34B04C11
0AA8EB44BB857C0F15DA6C85DF863D186A011CE3665CB550EC9E62A4AD15091C
9B89611F1678E6FA2F0747FA56525237217644C211331156DC39DACA22420A2B
9ED27C588AC48315338714CA0EFE6FA7E1EE63D218B92FD4C8C69FC7C1AA8935
C6FCD4B1697443A99FAF3AC77F438BD7BCC6F26202C1EF510118A04275BB9D10
6AACC54D1CE78A7047AD0E843F19B70A1E36D8E39CD8043BF8DC51096B86BAC3
49DC7B454129E6DD0803880E1EFFEFC885746324E187EDBC8B5AF7C649CDD908
D2A09232034154E661202C87CE0B2A89794FD537D7AC87A594FF69F8EF942959
2B6EECA856CB690E4D9D6B4452C138A84B53712BD7B63C899C7A62922FC625AE
3CF4A4D2C34A38B9F346E5FBC0396A58CB1599834A73F6A7F1957BF95A52353B
FF9D3142AD4CBC728EB209FB5A0BF3C85656D645C92FFDC311F8B1D9394611D8
31971C4BA33E7462BAA375AA88288830A4FE2537CAA0B47C9CE050A46D17DA14
AA7485AB65E5FEB2374FF8AACD9F9E421646BE14E2BC91AAEC5B447EB1918679
E7E354A5A4F4F9D3A25D1D7BF822C968C83629A775659B37EC0B1D7D9B42C2EF
FE003C4B980A6F12BFD67A17FDD84405EA5F80FBD6F70D1B3C0341BE4AE7E022
4F7B52D630DD5B47F7A1DFA8638C02857BE41BD4E5114E0E1B2162F68371D3C4
FEA5ABADD038221F6885F5FD448E00D06C6F68488718BE003D4E37376881D7F0
757F838E388CEB977B0E69C90FF5931DADF03D02CFFE81D94913C0D23F817E0A
346363EDB17588D5C6A42DF24FB82C54971DB564F14CAD32A979D099E14169E8
FB10548593C75D6CBD6A8AFEE29A2478BADA06EDDF11533997A266E366C26A31
BA012140F370F84DE405D3CB75B3137074B884029508F6799522A015D41C58DC
4C01793D0ABF152A980D3FF4E8671DFE4AD767CF8FF1784916000DBBD5EAF946
AF73265487FD4ACAE05B6B4502D6E6D7DA70A573B3CC5E0E33E38C41C9FFC64D
12E9ADEBEBFD14401C8CCF44D91CF375A40C160A23EE42BEC35AA2732890F6F2
3B63D9BEC27F15D490A70F55BEE664862F1F24B451851583217A9FF5F409DE73
4F3265F58B126F00F5DAEA5FF016B8301694CC92454692CF4C35931C0BBCFE6E
580C54691132BE1A96F195B5EEB2668C4DC72D18B849C57937E9F40D1D8765C7
EFA5D160F9F2C7EC22FED5E51DB604245408973640DED7EF9974385118652EB3
7C7D1F2B9DC9A398EFAC0DA42AD5936B3CB7700CA02E8C41C2E0A360373E7BCA
A39C9B972CEB9B796D4206BA30EF39F3766B534B31BBA210F7D7C21F2FFDC112
185C679E596B825E85F9C36261A2F15B7657D476DA011913A4AF8ADAB52C53F1
032FBD246C6470B6658FF099EE65B7912F29D85953A2CA652C11E95873A02DFE
F7153AC4DFB4A18FEAFD904B4BE1CF44D5BE1F1A74784717C012C8DD3F19A46C
089C39D1DCEF23234BC3F98687153F4ADBD4A5109A420EDE38BE84203FD9C3C1
19EEA37546E11685FC252FF5B2D5F53D4AAAADD4704E85D73070D3C64E2C685D
0CDB5B06E3FBB65FECBDA4BB89EDFA47CC86723F76325A0F6A8F1EB372591529
1282165566569F8CC90D2DB347CBA96F27B6BA31E6541568421C293997AB3A34
814B70F8BAC1FB7FC9A61F6300DCFB927C0635E161F2C91065366D8DADA0A02E
126379A165479BE7827CFA3736FDDE575DA9D35BD371C86624B27853630DA61A
14162BEDD77790B31E312FE2FFD0CF3E5BEA1A6EDEFCD93F49AE7AB48ACB99C1
D09981874247ACB0E6B214BD0A904C0335831ECA6F72CA6E204284799D8DFA12
A11F62529180CC8BB2BF5C3DA3428D97488AE1E2E64444733A43F230A14926CE
D27764E148371D74FF0BD6CC58465D1A2D5AFB1FC99CFB25C2DA164EC2F64DD3
E2D245F37F773FB4F7E72AE010CA5C19FA0021FBF58FFB8F9082989D9F9019C5
BBE86C33ED08C64D1018B8069628BA42B3B960FDDB0D031A4F77B9B27AB44512
4637E42CB2801729EC19291B7CA6EABEFE6A0D4D81ADF54291E0CECE14F76A59
4D8095ECB294BEC347A3725EAAB8FBC1762697041AF1013FDC024FE9CF020675
E337D0FB2728641D2D1C69E17C3BB310D28E911708965FF5896017FF5485C6AF
7D4B0926B21EA5BC0FF130AF80822363CC5FBC7E3D9622EC219689C862535558
80E510F180C63CD098E6B5DA165D78B41176DE0273530FC412481B143AB73EB8
21ECCEA316CDE8A62D9959EBE5859181662ADDFF0A0EE9EDB30DB5D5D5941AA1
511E9DD6A2C8DE15686A6241E8992CDE135BD49E8AF78AADFB75DDA6A4F77570
0A2FD0752AF3EB99E98906B32DC56735EA82ABBA8C09DB5AB71AA7CC6245757F
A3EB87731D4221145B545C4C8CB1088AD7E72FCB260CFF8B6553398C9A5CE6AB
4B9007B75A27EB9C7505721F177773BAE5442ECE6D66B545D6876EF32F8D01BC
658E4B195A1E581487077B6ED6DF74106B43A1777CBA197122B7800E2BB57DF3
1DAABB7D56CD79F1A5CE303DA52277DBFF99DB48B96000DEB03C114AE7D78626
B4CAF97A61661A7BA4242C03BE3AB94447DAE2D5E2E3A3834E739994D81E2D8E
C1C0299092DDD6CD813C303163D76F577926B274924DF4A3055EBD6EFC0CDF28
EDAABA0A591E4CF4CBFA95D49D8BE144732D041ED49FF6EB9F64D0D09928ADDE
36E2DC66FAA4C836C2FC0925F8FEFC73ED69AE38F6C69C44432DA7791A12510E
98A62596E3F6116B58D1F96A9307BF3FAEF5DC28280569A921A53E6B1F09355A
82C45B96FC37AA282BC56160914266B1D247A39029BD723C0B9AFE1A51FE5EBE
9FCD2D132ECC7C1FC88DC88FFB06B3003E56555D4E6EC12E76EBBADC7F1793AC
2029E407E2FE60FF290B37F1E01AF5CE39CF706141C040F89ABD03C97D976012
80566D934D15A6FF700F3D0C9B912C135834A0FAC5BE9BC099F3BE20EDBDB7B9
950ABE0ACCEFBA3D29EA6171B19CF53E4A118365C3D3BB1B3BF6D2447DFBB920
74B1A09188847B218C0D401ADDBB935F0C03EDEFA8C38E19DFDFD9A612E01D03
587894EB35748249C0C8DD8A150C88A96E82886FB932771BCBA0F42544B52840
9B1A8EBDE369B1A295BE4F4415227D4C31840CF4E8ACECA02053C34283411724
A047193A242EA4B8119A31595FA4AFC80A234960E2B6EF638FE70B7EFF0B2CCF
0DD121C5B0B8383ACFEE3BCE149853C549E4617A922EA486827CE8C4C1853349
3C7E35C584BFE5F7EA74947F19C588E6BD86C9FEE59102F8AE6609C1C873C9EB
4BF5C35E76E0523F4C6A9A2FB0E1F5B0381C9E2EB92B44DA2FDDA174C3E0F92D
868CB006287B75FB7FC8F1A5A5200ED526FC85B5F9D92E90AAE21012183C46DC
D920001634458D428F34DA6B80C4D93F5AD380BDE91EAFDD1825CEB017B47C1D
40881B5A615030E3CE73AE7D33155E5E7FD8124C7FA5E0D30E4409134DC47874
3DD3EAEB8018455005B6CE17007F9A6501CC5DD6ACFB4C07A32BEA81F9C2737F
FE40627BA2E82DCD850B6CB32FD19D1320CC97909F856B7947BF9CCB78F9F8A3
4BC0677B0CED10DB290958BC979C619A00ED42FC0194AC6FC10413A373A9E071
09A462C5AB25483547B93B2432CD6F8AE5D0C8F780747FE057A3AD1FFF0D7287
558737472EA6EDAD86E9B86FADF29B92AD144813726548156F6198B163118747
01720EE5DC64D104505CF27CF5E3C05C1CF7058365CE3D0304E8E18BCB397F6D
D13561D36FB9DE2C565FBE5E5C459A3281B1836E49D8A947EA86E8FC7572A1AC
F31FC8E0EE430E75A0FB35CF1E266A72BDC1738A22E2E3481849366EE8516E40
CD5C1079112360DB9BF6DE06D1D87000FD08D5AC9A2BC1A21023C30040B409BB
26508A4A8DFBD917782C5056F731C4BE0DA296FB9BFE733B0B2890D204E55C3D
A7603488B21F7D3CE80266B5126E3C485FB5C485DD9826399B152034B7673B00
6B0AA6F3333C6D23B291895AB857F109CAA02294904B9C2AD4AAAD49541D3567
5BF3FEED302DA311F6B11FD3143B0B13580F32DAC250D3E7828F8EF01F282AFC
4C6EB1786D8B6A7CD0CEEE7BE8BD92A9311D058BF2FBC5F9ADB27871E711B7F0
E6D69F9B678E408FA2503BAF8009851C1FFE00769CB566F3692F120C1E9BD75A
F56BBD47547BBC2AEC6B8E55D34C57A046AB2DB0A734B29C0AF790A3D281E6E9
A05AF79027A05845EE064E41B6D408C724EA1FFCE001CD7A948064162DDA4B38
144C7DA3A2DA8EE9894898C9E7983E37FD2F20FCEAE13E9D88DAE93F274FE241
1C8DE1BD0B79B55ED966D1A396F3E3CF5C28C5AAAD870B287A5DD15C4CC5538F
73C1CFD354E44A22EDBF19AF71FD8A104803E18FB6CB61F22C48CB44740A86CF
FC182128E4BAEDC881116E9DA4510CE867D458E725D161B211C56CCBE1B40E66
60186C2D43ACEE7B078DF58FCD31C521284D985889677371EE9455AC74BC030B
55062848EF3C97EDC26CC8B0EC3CB44B8D950BBA90BC0DC5C5E5631FF6B18D5F
490A2A3BB50A37C17B0B183D929CF9BBE9C0BC77BBB5EF8198959434153C1588
9B1C03553A0AF029D4F3E8CEC132FC1DCDEC2C4DAFBF3BF8708F1CC40D500FEC
4BDB168DBA8E27EB31B84D0D8AF5A9DC42037BD235A5315E6FB698BEAC158252
B4D7656FE5F866AD3D6C70035DB02207ECC847805CEF8C112326DA491BB5CF8F
5DEFFEF56EE1153203217412A6E278C4C61BE3A9FDDCB482380BFD6C7D44A70E
DCFD44BB161014ABFD2F2833E121693E2181E6CA39AB81C63C238A3C74A5FAA1
0D82F322AC5682AA43ABEBAF3CEB06C6C66B93D5EFC935789D5B2F08C560915D
7CB60C2C01546C6BC0F07990AA93AC6DF24493665FF1D9BAB639F9B87A100186
AAED1871C35F6FC174F01EA5F6BDD6B292FAB448A108F376CB5A104067CF5A21
0D8E89CADC22CF22CAF4F6291CE1F36BF9B4394AF7EE7076395ED8EDD00112E1
322C368F122FAD2597DB0784BCB43B8AB4AABA1DEA7D024026C5722A7BF1FC03
259098192E2A4B336D6C1B7F3BA92F33416E679BEC2D99F63085D9CD48142DA1
A90696E847A45E8849B3E1FCDF8154D90E76E7D6A82461ABEF29153EDFD5AF24
66B5BE6B0EA935332E5F2294BF2535296B7E4150248092F79337136180FB84C5
A9C573C673AB065597C77C4C92EC61C53420997D569B3D946C5C5262161E8185
D6018A102C11D5D82B49B144A43B8D529AD2F623DE94B92F1ED167C3C1424031
05A7CA4DF2D303EA83F9B0EAAAEFEC0FB4F0781726B9D58734C7F6F9EC019FC5
A0E970C4DDC5ACE95A878698E54FDD0F4413F4D4CB91AA0A4676A073F1A16FCF
D4DDA3318129A70B43A7B8BB6958FCAAE52C2845F44DA8F8ECDDE3D0FB1C6F27
B676B57F2B44615B72C931B04381BCD7FDB7965169A7797C66E4EBE63F4205F4
BB9FD4DB454853FE2417FF5C8E2287154C160A44ABBC761D3AD439B68AC30656
EDF8286FBC464741CB408FD8FB44EFA61FF2A1F08D3B58DDA348F074A7B082B4
805EB97A9FC4D3908C314212696EDF471A9F8B3690B7035FC19E8230F3E7A83B
9BD93A093B262B432174285FC3541B7857DB1C374D478BEAFF68A927657F8E8D
B6AFB887A10AC373EDC6A8327A6260CD94E48AA8CA8C66082082F59CABA66582
EB82E9D12E01A1BF5987084FAB48F82F69AC69B0DDFC400CA56D7964D5F0C9F8
042B922E81A2AFBA2E2CFA98943C1A1831821D3B6E13B01388CB6EC95E6CF962
BF255DB2F5516C60AD745A08FE43BCB79EF2165E97F244A76E793328D585DB06
FE073646EA678B25A5D145B3655F3FECA91F28DCA1C65566BECB0313FC79AD1E
92FAEAA617B3D09B1B62C862AC029B2A39BD273B4913003DEAA01620E56A4E75
718AA931E5FA1320AFEF77F0C37301C5D71876105C010D69E77440F1E516F35B
4DB3DD55D05668C9C9FAEA4A4ABA93A20297A16E11ACCC3F168BF30D22FD92FC
100F6B48A2A08D030DC867ADACD57FEED910C44F70EE8B169062F31E49E67D54
2E7FC193BE5EE6529EEA148F199D7770ADD289E68323CE833340FB11F6CC9005
EB96E2A8E93B0758B1C4D67B45A929085EAFEA8314DF8EC0E8565D53E27ED68B
9C84A5F837D4DBE6E51DC698E74433A4F9F472165F9A968F0CE9AB05BFB96858
16DC51B89153C2D2349B6163CE98DF4C55867EFDC7153EDAD04ADB47214EE9B7
1EB3B016C99C16FB44CCF5DD2A92BA6C630D686D6A0D3FDF7575F9184259A390
292E158682DC0961E419CE3BFFC25625DA4BEC3CDD4974670A4074D8C6B38709
B08C81A7A6BF1449C65771D1DAB0C66649001EE0240D221F5E718CFAA1A687FF
9BFCB0365F002692685319A0FAB8D12D64BBC48A026916EEA21165B60645E92E
67031B18FCC2F86384FC19F8EDCFAC6ACDF3DDCBBB51A3046AC338138691A4A1
D77C30FB52A523A681964EE709667599D9AA2A0FDB27ED8E9A0367EFA8D9D3C8
70A1A7E340D50419BF1C5BD78DC94CC349DF0AE05C08C4D34924C9DEAC43AAB7
5D69058B46199FE44B5F912CBA1C84227A028A4184B033B21E12A562CDD875F4
018F9591FC3696D773EBDB8C6E4195AB286EF65CC5A21B05608E64B8BE2CEE7D
3B7361A2596E6BE1909F61D78F786013CA4A9CC9F00A52865DD376A6C02D7378
D748B8F839254BA9B59875240349D2A5C14DBFD50CFB70078C9CF8DD71950295
C7560930BABB2B199AA10BC63AAC3D425E0F5CFB3EFEBD7132B0465E916D9EFB
3666B9DE016A7F7F3FDF0C07D30FB6E1B4E94965D2E60883AE5D3C1289FE9F7B
DE020526D31CBBC47BB10BB121F0B979382F600318546F9F3ECA8C4EE6544EEE
1B5F3678AC47CF7F54BBFC6D10446DC6FDF6AC5D999461EE5E61BBDB28BFC08E
CF4956A2972377E8421F49DD205642BE31A7F2FEC649B40BC8EBE57DCDC25BA0
13342B3EE2CE5C7CEB5A877BC9F4C5C2DA974E4B65EB497C64CAC21502923ED5
1D33BD247A3142F20E83196D9557
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic12-Regular
%!PS-AdobeFont-1.0: LMMathItalic12-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 833 233 0
%%EndComments
FontDirectory/LMMathItalic12-Regular known{/LMMathItalic12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic12-Regular)readonly def
/FamilyName(LMMathItalic12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMMathItalic12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-31 -250 1026 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD11234369CB38BBC21C40020C4E57C
950DC4A5CD271B5530E91DBA55EA1A3BF584D9405556EF9C802B109FF1EB2B0F
C350D7F091E7B613B08574EDA3BF27099BC2EF0E503A4C4724614A73AA054756
A503BEB31E3FCD96F733D0C5815847DFBB66DE4968A9B389FC00C2146C4FF68E
076BA8B3847A3D8237D36A6BBDF0096290F1BCD02CC66B12E0070215D5D8306F
406DF7590940DE35CA0854D3609249AEA4EE9D3D377A7996C1CC2E940132A90C
F633C774985DCAE8E9353607B9059DD211265A0A346B1A062D80C64B5802A750
D9FEFA3C9920A3DE942C65BD08060AF33C91CFF62930F65F9A42F70B83B0E077
E169BF7F5D84F15D59F8A74BC2EE4A7F3ADE36F38C3A661F4CC9826BF73D7F02
D3CCC267927CAE22B5ED695D212FC3B669F9BE369B7A8D325C3FB9D552F175EC
29972562517E91E7B8D570612CC50B1A5CB6B94D030B0C60465EA21631F7A30B
44A47143D0C2F942B5D76384B8C3F2F197BB3646CBED3DEECB6513D3AD460F49
4BB874969A3663617EB537E75C1C1BF92749F9D147080EFF78ED285C315BAFA7
D78B7B4B8B7CFD1639EA303ACE986EDEEBA9350F92529C47EA7689779BD50CDB
D1B3A68B383B54B51F4FD77D6458F15AFDAB471DEA9909CAB29840091391F2EB
148588D02607411F2E802B9CDDFFEF1C1FFCC9EED0405371651ACF30808E8C57
682B734916EE806703B2ABA2F6910E0C75BCE10A94FDD1ED3E4FDA7857341427
CA0A4F7D30151BEB8E3D351E1E100A8A75959D11122C83A5C0C4C87214413B25
A6BFE44A42D446E9C4AC88F86B07C1097F9C5C5673B88582CEA8CD622F9B0C79
E463DF7F2F4C6640FF3852BEB520F7B23D8A22E7E601EF9CC6D0A2E6E82E6840
65B82C6A3A6692811E2B4F57723AA3A6E27076A2F63D6CE1FBA7ACD844E732FA
02797B386F2EDCE9FF9F84EEAD17B366D678E61C6176FEC09C94B74DFC090CCC
40AE9DA65E5DA02E7A7E8A840B45B752AF11A279BA06F821525DD0F477831176
84C80B29D318260FBC314986223F9EC4DB5B0EF2EF5D424C6DA581B49C709E1E
98149FEAAB15DFE7F94977C9F4AB20F3D8C391A5FDDFDF5B67E9BC3976D5E50B
846FD2CADD6E5C3689987A6BC19336039591AE9BF280352F53526F7E07CD703C
93CDF2B76B90F055096EAE10BF6794F563F2AD650671AB36C99BBD45E7A8CE34
CB792A606A7D9EFA0F25751BDCE7740D2BC14DF0A3538EC25105BD0CA2485783
361EBC52149C5B9660C0FCC847FD80F67BB3A1F3237F7522F4084B7BC486BAD3
557C8A5956F4ED1B59F70E3721742F99F8F271B2B1EC80832C40E532FC4AC9C4
88F12D88391D52AECE76F5BBB786C196CCCAF13DD4617C9DDD2D8036D8F84AA6
C643DB5351F70F30E7F138E98B6A105DBDFFEA47AA88871AAAC76AF9209DF031
4DD1B14C1B985F03669B546C110680DBC9E1DDE716C4A15A2B90C046EB10EF48
6F5D8C51A2191AD3FE7E564FE9C999FF965FAA19664D95CAEE87676AF117247F
7AE4DF221AE85D97F8301C219CCA40145C7D90E59A7DCD04C3EA77541646B456
990C9001FC2393E4C21929E7C2B58C22622304B9AA79E8EE2998140873CF6A51
8EE9DA54C462BE6B2D2265791F9370493195BF3FDCBFECA2250AA7F8147A7C3F
74FBCA0741064452FD4EF643BE9EC07D4823656C4370DA36FBF0A347AD170C74
7E158CA68BCA0A2C44CEBD35C2A5534F86357719C01907849DC917FFF78134C0
29DD473762C911AF08BA10D43CF099107F153E3FFC70BED6D04DB4820FDAC002
428D36BE32EBCAA12C5A7FE60456189008F10D3367C5A7285C9898C63CAB854E
80B0886B08A72B1D7674BB4B5E9C816B706FD5796FC302D71E0211D42BA31ECE
7B69E8089525CECD505DC35CB17B6D8F433F9402B0E7343F980BA1679515F00D
8A162CFD5E33681FDC96E160F8878D64D0B7F7B09CA3A480CB24681C6A11FA2C
28746BE164AFCBF8F5E8058815645D2180D8C19AE1F793CC26242D918F052AA2
F06CF2178D997C4BA8B03DB588B786A3D5D0C5AC2111AF2E744655499F9DC0D3
39749C04F2B67A84BA4D60EF36278C68315F9B647C87D44C3C0C757CA37AFCBC
A600D7FF2FD101409F30894D70491F2539DECEFDA0B566C156FBCAF9D5F43363
4FAF4502B84153B1F9E7BAF28C1A6B27CFE73425A804B4056AE560F15158724B
362E764A2BDA0F6C1B24426E302DDC4403A087EDDD3D9796B5F0B88BBDA0C53B
9E22272023D30D00C335E0FC619E99BC261EC2656833987B5EAA652A0537B9D6
5AD76C7136E183DB6D4E167BD831F8A9D781692F9DAF3C1E9ACE93B844446650
597F588537DC14048174E7190B114B695104B90E1A916BF519D9CB811F0BC3AF
E1AB6382F9916F073FA0D969EA7692DA01A5086CBE2371F0716A880C63F01134
5091BA05D01E1925341558BEDAFCD417D6A0AC5607C8B232C081E5213932B6BC
B5B894E06968F3DF459E9F74D7014FD7809681DCFC0C38DF2B0BCBD6B4A62363
CA08230605159D05A254233227814429B7789911DB7EEF6614BB8EDF2930865E
6D71E5E6A44DDE92FC6731216EA2C8900224CF10C0D676A5C7F4AC5BA06483DB
B3F62611EF483C971108EC7957AD673B6E2C6EAE31F4BF54270BF9D787FAB258
041ED03A811BB760B8F92D3C509DD8085DFA9A4D522BA4BD07AB2650DA84B223
7AC4C45AAC4B9A963ED713EC4D2380FF2EC543FADC7C75C6D7B65B1F37CE6417
8DECF67DBA7B8CA7DD5419F12E32DE3EC7A32FA64C723616BE99276F22EC410D
4E3E4BE05F44CB3935566932C53E07DCADA3C7162F21813639D933E4031424C4
2DFBE67A9EB33265364A1D3FBD8A14CBA138D29681093F4A12491696907D9831
3D793A6279690836C189FFFCC4AD6332F96DE8440B8B6C0AF93882B45A326E47
73E209DAE45FD399261DE3DDF5BF03C0578F9991F7D580A4FBBC6949B73E1D86
77F67375F4C17376CDD2A0E60578D7D076589503D36163F0A92E2E3A016E298D
C3CF40BB72B228E5E3B24C9C8E49712B10B6A85513BE2F576760169900259C62
5486544935BBDE3CA800106B6278FF30AFD46D2E9ED1106C59173FF91789155C
F27AFAD530E36BC0C32F17FBE820C708B5DF7142C97AAB3ACC27C632BFE3A840
8A0DAC929ACD6077423D4E36350F68736091D33F5E6D45B0888B08C6DD6FE3FF
369BD4135718DAE6343763332978F7FBE3BD32A11FE25FBD6ED3192E3170697C
28682AAEC43554C7A05663C662488A69C28DC5A039CD52CB00F22BCC69D1F40B
3AED1ABB424ADEF40E974F8300DC8BC998E40CBD15416270FBAB760847CC2426
7D84E0CBBBA3EF6520A685C988F338FAC8EF513128D27CFFCF988CAFA5B51B93
B7F383477600CD129CA8563C17DB4CBDFEC9C33C5C6A2B401A040658265ED5C8
AC14DC6DE3CC250B848314E57878E67F01FCD94B0E3143F68ED8B8F608F8FDBB
F449AD5CE703F972BDCB653F67D429F133C0A337455963AACE5D877732FBEB00
DF1C43C9796A799DB99A4CB309AFB66510DA3A7E9F64A483D03FBF4D557A5C46
2E81203BA315AE7129B95D3375BE8BCEBFD254C7548BC570D4D2D831C012C9B0
7262EB30F962CF868F4F3F8B09FDFFF108836359DAECEAF618C0E9C24964D4F0
9F48C13501C2E79DDB0DCFCC167651DA9D4D823FCB23543D5B9097BED359C0FD
A3D3D10782A1766B7C593C9131312F03796DEA2A61D669F15FFFC6D1885121E1
7E1F6A4EDCC8BD250B4390D14CDD001A7E56B54379AFE59CAA6D5BB898F66181
F4CDAE4F3362222800FD95CB556FCA79F73793256D5B50712A340C033315D62E
490ECA6980DF613D2BAD8FCEB147FF718F92DF277864AF5E373EE1803A57206F
58F550EC1B8AAFCFA2FB3BE1D964A3C1820FE3CE6C83383DE115083EAB0DE505
443ADE9470FC4DAE56A0E0496698E3733FB8BFCF9F7AE4F0640CA197FF7D0233
91A341A722EB8DC0CE52EDB4CE2AE9CBA2D01C31BE328DDA63F8A631C8712A60
DDAEEB2E86C175338A115055FAFCA0EFE58AF0525BE61E8EFA4A7DC8D6410FA4
21ADF0B7140B71F7F8C1AA48061B4DEEEE0802E3DAAE59DC20871B2C50F5B279
CA543147453A8075AE19C498C85B054FE1369DD1A26BCE48FFAA80240F2D95BF
F71135F52361BFF979B2AAC0A1B7A37969631ECB91B384F0A40A992A21636857
941F021EBF48A704B057340720D03D2997EEBF2AE03EF02F2BA54DDC37B552BC
67A4BF75EBE84DAA0CBA783D43B6E6A1290C7216333A4AD37B42D7BBD1B7695C
4BF8B7E652FECA1976CBF438E3F36AA1DD3AAEE994A17C09BEE2F79A43FB278D
CC6BC858A911294E3D1BBA2021C7A3C05D54A2478C6FE69EDAE593C12064FB57
E98EEC0800C740D2C444D1F8449BF132612D676FAD3AC09DF7C3157D1F9FC571
E8E951F46D231F3B6934422EF3A0FA6BEDD9F1DB615D62D5396A97044BC0C1FD
D9EADD7753DFD488D22497E51DDDE24C09D0F83F812FC70D298947A6948790B2
1B0F17881DA4D617A23032F0358AAA19CE9ED54D1D852D0CBD325B32D0B67A24
C2D10BF63BBC0FE50D3E9F66BF6E6E371910D8EC1154D8539AAD3F8809AB6EEB
0C530550F255F80C43EB8BACAD622EA7F6D7F3C3EDC4EED041260438DB78D73E
253A773BF37A81FF0B6D8D8A02E46D16B358D3C227008DA951A6B25CD0C2A3DF
DD6320EB689D5A9262D3528B47CD205017EE9906EB9DCD5FED7D4602F8BAD9FF
636526D031967AEF5E1D41A877F9D4705AEBA929642C07C734A2E21794411AA9
AAC1078FE2D6492CA283377488376ACBE9A5EF2C367D7D5C87B21054E45D7597
7882611E059892ABDF37CC352F1436B8C5C73AF139CDE6FA69B0FD8A708EFFEE
72C1C70821B7C1362E58EA4639F18B3F28D7E1B41B9C83168B8C61EBA2D7249F
572DF3BE21BD6308E024DEF9A22AADD3B95008509C0E1A7ADA0333CA9624F0E3
D147D030B730F1EB4D25B42901AE2488D11D547A711878B4B79F53959A2CE3F5
B2ED61102E61B4A92EA900F006B0B8FDDA3EC5BC6DA735570D91B09A3F95F96E
4E792C0DB401AEEBBF0BAEA5D9C54DBB34D39039BA13329B2DDDF569E259A415
104396178240C59F906C1DE8B9946A9A6BCD7EA1ABC7936975A9C7A19688624B
78F55D46EA5B89491812286C3835C41F07192BE981F96FFE59DE71A5AD8FCBF9
EBD85C3D3E8A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E752429B985F23EBA0C9875AD055D8B1F640D10DB8F40BBF062F476691
EDAA1D05C5591EEDC1B75251BFF8576F1C9CC5C0E521392A2F0D5F869F8AA462
B3883A673A976328E1F0DAA22B80CB7737DE2537E7B54F5E1643E30046E87CF3
8D9A45A973757BC16CC50504033125D2A68A1C97CA095C56B3D62783960780B3
1693596869FAF5692AA8FA6643FCD7F55E72948D2DC55AFC5016FB2C48AF9D85
192393C682B739EB43CAD8C3FD4053B2D53CF911352E2BA87A65F8949B0B7918
EA727DE4A08DE07B71365B8F31103159F65D30A7A318C1056BF638CD20BB56D8
6F22ED3EACC46F750F405FAF96268E80A409CD8AE0F36B68AA8C5FD2E0E871DB
D2628AEC086AAFC9F04CC93440E1A8B0ACC1DCADB778837360339A25C08E3B0C
E768240F0E8CE9FF939E4B1A6365664AAB69761B7A9C7B95BD29B09B930B0D82
F2C39F9BC0B94E56C48DCB22D8F0CA6C633BE68E5977EB3D88103E4230C6A08B
B4FB0CDEA7D44636102D47AB90B92FA42243943EB3E77E6CC38DEDBB2DB8BE77
78936B70FAE12EB1E2913B766CA2BAC3FA555CBADAF2CBF6B7A216FC93470554
2C841542BC1FDB26DBE389CED193E28A19CE9CBA64FCEB47C4D9C7891741E0A1
23FBBE971ED93F797C02EA830678317452481FB78DFEFDB25A3645AD3979D2F4
AA17C624CAB35B85963C6DED262AED5DE92278F31B2E573FD86696D98800443F
32CF695BC103A3ACA687FBB3F42AF9C89123C719005844588667C3DA28AFA523
BAEADF7BED1F3B5D595DF571540D0855FA377DFA6880F525878D6A3D1980C7D1
05554ACC5D07ACEA1E0D27664F6DFB6EFF878D0A68604565D0BF75FD8BE023FA
36D164B7BE25F9F811A466CE04C2CE5A774EE3288A245769B7ED30FCFA10230A
D6C9E809341BF5E55E58F3288F7298D62092922F07027352BC7C9612CFCB7018
B3394AF7EE7076395E67C3CF9B71BE069AE6C6C412F86A496E7C77173A0CDA0B
CC46683C239700CF259CF668B9F5C990DE3196B84BE792F51E17583FD4A83178
989638A37897AA769D74E0B3A299DD94B314F9BAFA7217AC70D8D9D02544A545
F6880EED34399A835514CCB97938F3E012AF4D68C140C6CE231015D93CEFC522
CF56EDA6F3147B3861904FBF8BEE6DB3D2E71479CD3A02BE03C555B0808D40B9
53D2EC56876076A116EE7E81836676237F88C519F8DBF39EC35FE41D78CF1665
E3FFD09C78FFF428AC27BCF0318D0849935822699E31F5115E7854A22F46951A
51F24526F7190B18B313DC58AA2EAF631A48ABE394668C6F1CE9AEADFB56116F
FB38C388F96143BA870537CC8B3E5F2DC39F9B930ECC63475BBB8C5F9A45218D
E05C4E6F250F6E544D6011F65EF4808D3D0158097CDB6E280AA402229A6B78E6
AC615258668BFD3469CD663592BF1214E5EF1C116C4DB47B805E2F60771168CF
79CF10DC2DA8F2BE94869AA570DF2AA5852113C51CFC85C1E41516CE412CB410
BD026231E22A9CD0F664D76D385CC1170476B17BCDA45C640C583F16DA207028
0C58570A966383AA9F7CE59375525369CA6A559BEF0E05F11CA9C72A278C045B
1D2572EC08DE1424D2420D550177794FB3DEBEBE9E4105AAD34FF119AB2483CC
A034A95AF0B24B801710B398D9E9A95138859A819011423AB5921DE8EAC56ADB
58FB18C27A41CE503CAF2E7EA6F673ED5F34F1C1D20B609A152EDECFA26872BC
3C8C802A1517D9C6FDA3474591F19D573EB051F551990D0331B2DEBFA31B5010
3F6332290E522C15C69352124E1051A715399BBD1A6D3704BCBBE1FFF89E56CF
9C3EF605898309C7C3D20DFBFD10DF5FA30F409A76AE8021045DC09C95C9AE4B
4EF735A5414D985F6F79100E7045B930267F0EEA9BE820E13291132AE91118E4
7B8432BD1AD7A9CD912F2BFF83A2C4705A26FCBB7F8E45CB2FD9AA2EA98E381A
01BA4C4E31747123F20A0A721766F9D9A6769FF80B400B1EDBFCAC63CE15283E
72EC447BADD5BD58B053A11BD770399E31FB3B3D856FBCF6235BAD1F0D38E26C
3518FE6411F2A5FD4809C085AC2D60FA311DC99B9100C1A59CEF4C877053161B
59682BF5F2D85F2DA7EA0FE603D477F6E80DEAE0F250811BCC646D8CE2956C78
B897A5000D73AD32BD99B92E6E63BF8D79777859EC0F7FAE47F5A0CA878106F5
5462D3027DEA15E36AACC0E7349C8E60D6F2439E2D50DCB9D96C6C20D11266F7
913970C783EF6D587F638339D1E89A4878ED27E515FED0D26FEEE69602B2BD58
D146C077FAC71FD55A5490C89142F2844CB7E6352B01A448D4BD7A06D8EC0F00
E69984EC55E0B487FDEBB3F7FC3F4093CC6E13B87084E461E23A4D6862F0EEA2
84DAEA8343FE913EA90B9ADC7D025C2B8EA3689D75AA38B5222166C447B82E75
52DE05711B3883394BA9D683C161A48059A0463B17F3DFE8A73B46E913B99D2A
38E7FCC667A5B810B665519E7E1450E00BB9D0279537763ACA5F131550E83404
04E208B9C0B0A118F40332BDBB431AA70981E77AA5E5E76F43E730D9D3D047D0
B3EC66EF1D37916398FB8CE955E12D8A89ADEB1AE1EDCF91BD788D8F261962B4
3870D5928D160218A297BBD3BEA22E12E9C4197D0F3835C0942AD6487F5C9B20
C9A597910685A9BEE4CBA868D352ADC10A564782DF3BD57758FD145E769D4E88
BF43D19050DA58FFD64EB7B1D37BA13752B6C966C7A1397D80160687245269D0
F27E87B2186D931D624120B81967E58ABF5DD66AE39640224A518BF378B5CD26
761D1ECD916FC625A90EE8A7E00080300F0A05D265549982D56614814E10FB25
DA53070C2BBB4411D9608F4FF0B2E171820C734BD20399504F034BFE4C20E7A3
1326783358CF8D4FA48C1AB81741FA70BC0E0A4BBD104C7E5AC05CE49C6375E8
9F0EAB2B56BBB89144CE810C78D8CA02BD7CE2AEF79E27A7CC1D6B68A5B9F504
BED3487D1424CA82B8CC60A0156706987C7D0DB913F1BBF8A7B9A275E3345BBA
213B3DF67C4111E9564B59B724BD65916BFEEFE9BF03AF9D84DD2AB94847F33A
3AB3757D2C8CB688D50EEA68DEAD0613A62C3000C037092ED0A93F8486FDD39C
FCD0E8A6224BFA03E8C6D73F4B8F480327701262285C527828E5E203F328AD95
5AB433987B229534C53061C3350047FB20E3887F514B5897FDF225685D18D679
9DC141B7F6830D6771F1A3CAE655CA173FA57D400530CA6FABDCCB4325478D0C
93AC7EAA9DF7605213DEAF94C7281D9AC68D884E15ACA3BA68034F897A2FFC1E
F76FA2A69CEE7F1E9543904F1773969F65553C3469FD85B2F2F89F0E547BFBFD
F62A3E47DAA4EAD6D47F0305CCDB297C320A48A3655FAFC810CEC6F6D68ADA4F
AB5DD7F61DB94072B0AB8F1ABF62A78E43E1578DEBD2D05109DEBBCEC64AC700
4C28C4F0A5E3A003423B9958C73D306B2B4A7C67A95F8B4E737992642BD3701D
39FFAD94524A7752560FE97B8E99A12AFCCC5044D989BCAEC863BD15CAB7CE63
0194962E4183C3838D9401260A743447DF953444B29D7CB004560D0685F73E87
72FDDAB87125F419F90D165EF1C2A06A9B7500C6AD185B4115777C6BF9C24D88
653589B431FB84E4DDB650C2F783594DE6123D3142FC5C99973AF211F2A2A05F
5A756073B85FEADA4823BC1467EF2FC0E98A2BB28E5933E2F6E50D3580C547C2
54FBBBDC95998DEF2EA825E3BB2AEEACC0F30841835121B7A7D7A973F2EF67F2
795E6DD8CF55B9823AB2B15ADC328CC3AC493DE8C2F022EBFA14A2976D8E3559
B5FEDADF4E23A07F6C0E1387DD54F5C8BD071C4E9A716737B6BA413F846A887B
D1B3B89EEF73565F3D0D2D1E40E4C2811D37C9029692DF8E94F6FE39474EE13A
EEE65EC0E77188C18435A2E7FFBA595F0C054E96CC44F56301F6CFD2A7A42C7C
33C1362D901AC2B0FB255262754024729BBB2824C33C2FB07B4AB0E5BC4EF204
E240345C69F37D577CA917AA50C3BC9004C8FC0A5A8E517D39211861EFE9920B
3939DD770974B1929E48E48EB82274BCFE2E9D5D484DC7068B77CD864557E702
E4EB0C301062DB793BF0C98D7468E7D2C9EC10C2B121966B68222EB067A7E3C6
F0549768364D1935345EF4D1D5F8C6AE3C09162E8A4FC6CD4741B38836CB599D
F98A2468DFC2198D16044BBA796678C9ED23D6194A5CE79410133D40E5604C95
80910F6742AC40A7CB3E08E73FA1E15DD6E1179C390BC240DA061C9D539B20F4
FCFB72DD0EF634FB4137D55F76088819802AC0ECDE469085BCC3A24122DFFA52
6840EF5367946F3DF67C10B47377A99EB96C13C332632CDCC750FE6081ABD0F6
4DC19BE13680CC29CF0EF52F885E21F4CDF14F8A5BE651118D4F2436599ACD41
A728EBA6AA858A62BA34015E2E2F851AF557C8CF9586F5A809952F25B26C6557
DD62C2B52388A1B7B84A5BDD57BA0C39ED94DCCA571CD82C6E0BBE3DE5134649
8CD7D6DAC8936854A0E9B5873E0C43A98002905B196F919D54550933FC4B7290
C8C71C097F48AB5C03B5D053459D7E0ED44D117E1C942F56B51E615267D9FFC1
91A694BEB12CBF4EB3DFDA6A81788A92B5AE75375C8E3BABA0D234C04500AA3E
2F28C4863E4C426DE4581143A54D0EAF501057E3A9FF7B3D1A0671ADF319AA50
F054379798BC3C38137A81D75D5BE7E359EA0012AA5588403126BDDF5FC2AF9A
36305E36C2A2DDC690256D2085B1D4CB4BB93B1E736992E995B8A4F38FF8E7B6
0DC1EC1B6C746B6AEEC9D5B0D1C9641E59CE041594E0396A0BE7DFE162363F66
C0DDD904FAF6AB01A82A5E230905B36A862A8E30DE59B50522C8AEFA5451F931
870F2A99727DEA6C228DEDA6C25A88C4897BB9BFCE16CDE9E5F075FE4516E1E9
02D53E24B71DD4F1CC13482C48FD1456BB3B6710C69F0ABD2C8E0CD7C3900863
69D35D3E5A083C3E86374A2EA8847CEAAD3690C5D7BF9EC7DEE3705643B5F064
C6A8ED4630A58A2C74FF212B0A35CAD73632F8EE978BC33C8CB05AC2BCFE82D3
29D3A95F82D98F5E335A3E0F3980CEA094E6903FF9BB24FF67FD9F8598AD4F75
1527050258CB8B3F35F8ECC07BBB7E68F4BCB0B429D4AA25A2EE0287CC9B31D5
DDCA74AEC3B0951BD68B348D9C3656853E002ABC509706C00E045DC552B2E5EA
058D326D17411EDED514F2420EB640B4AF9CB0844D53C5BF81667E78A1837931
98838A2416018B583A55803F83CDACC6647227DB9302337CD98D1FA385DA5005
A64EA3E34E0AE3F5B34DAE23DC67DFE7BFDA027A952ED903E7B54769B3C48544
FAE2FEE14143654B5371B4E2EBF9784F8835D49F4E72B78BB5DFEDDF9BA465BD
FA74F2FF3B6E50CEAD45ED2C0C24E1B13B03CBA0C37EC251BD452805722C04F1
9A3B3C950F5252385EA3E898611BA9C4C8A5E0A6AD4E40D06FDCD6EC46527591
BFB94442A0146D8F93A35D8AA216357D0F96B8C07983FFA8FEC41B589A018331
D25E5B0F594F5C418739003766FB193DD7B97DF0F9A11121F9383E9A4D7A4220
2DCE9AB3649C01936660D3CB62D4FB6261D9D30EB70B6B0E91590635EADD02BC
13F010CFFDA00810855BC4D8EFF39ABAA0D3138F5E51E6484AF6EECE850DFFC5
2F6B458208BEFDD79BD8C4C6E6394AE72B8A73A9D1D8F443AAE0A3F0C050249A
333A1F83E14DFB045589F3D6D1DEF71CD3173441F1C3E12B9F46F91C415D6C8D
7FD5678AE5C1B8ACC9DC66783428D06E458F96BD48CCF7CFA30A7E12255939EA
6CF81055E5330CC27A4CF7A4C462D94D7EE9B48626D5D425D0D6058151285328
89B5CD42F763105DCAF788648D74B078ED080E3573D61FA865EBB3E287937147
C9BE9926DAAAE76BD43CBF626B54567266EA2F4411EAF07AAB49611D7EBD8CBD
F1F5449C2169315824D0A6BB0AD8D5662A85EE619178100F6F37AFB159DC1265
4EF3FA2D2446A2E1F947B15B3081FED4A12C27B85CC6A3E545A312C95C6F2627
0159823B33BA57612F379BEDAE5DE173B15C5200882F03A1FE6FA61A1B3F4468
7041F37ADD6989E85FCA21B588ECBC54F126834654AD20853F11A6AB840852C6
9B0516458463E8C58580DA921CC84DCA9C4DE27B681970483A2A2E8BE06358E0
BBD553D9454EA8BE0A8587039B95A5A344F9EDCDECD6B5F6907657BCB470A304
2A3655D5DDFA9138E7C6E4B118CC665F4B861D3766A2414007C963C65C70BCBA
DAB10AE54A0DD44C28DC4763D04D61EDBD52292E6028414C7FCAEA0A7E62E4DF
D5645313CBAE9A863ADF8127F1FC35DB9CD34EBC684818AB259FFC315839277E
B107BBD3E6EB771574CC29C1415B4811FCBCC2EA6AD5BE04886842418EA1872B
C169F92A89067878C5ECA2BE88D881CC03929299117F82FE4F8D747109F2BC54
9621EA8FAEEAB5E745E5CAF9DD3087C4764D41F0F503DDF0F46C7CA67023CE05
2E3296ADB222FE2151E375731F47B6018CF32DB1F7AC0478F0A9D13C11D38542
D397B3D34B2D59D4B2A379AE1347C5A1FE39542C99525549B30ADA383485030A
EE93AFBABB827D996E563EC2DDAE9AE9D984422D428200823D674B1893F03384
89663E033545AFBF576377A48059E6DECA5D00BA874DF5039207DA39BA7C9692
6AA7769E7702305CEF74EC07C03AC9B7D8328977A2F5D9D63813A994A1F9E8FD
54E8D967080E1EA0527DFB9564EBAFB4292516657B11080A1EE01CF75C43A202
003126983D7E5049DB20BF5BB1E2D14E3985D2D448742631A0DD067F416CBD96
D8705D5108615DE881F53F51C9B0807122846CB7C7A03548AA0505F67A6EAB2D
85E1224B6CA124989F106D85DEA26E8593730FA3F6156B914FC6D2FAC6B2A4B0
C95CDBA6575225199CC9AD11D7A028153A308601BB35995950CB00A5EC95FC4A
76220272D548D05150B173C7EA7ED2705E70F62B7A1CFAFDEFA9CDDE6ED5B7A3
31AF7237DCDC2483E367DD892F6347E5FC21295B65E2A540432B97CD7F69F767
A67AF3BAE02C93A4D410EBB91EB3CB214F4F214DFD130D697972BB11E9F0FF45
52233B804496666ADAA0D84BBC6A705A9C77B52181F10FF86D3D7B07DD66C717
D9F02BA4C1F8B3B06D204AB5CC3944DEB241F1FD9A5FBEE5B1F2620B814FA2A2
2A70A7204D9E9FA8728D4BCAA70FB527B440C0CAEDC181359BC2D4AD8C286AE8
F24B4C1AC770D3C56ACF5456D1E1C30B2506930DFF22B41D6C75698D18ED153C
F2CC4A73C3F5D62536119B5F7E15A4207DEF9096D27D3D6EF2322CC7D54C426D
3E520704A5B0FD809F2C02709DE350D3E39C9D5C62A298B8BE48AAF79E7C22E2
D14BDE2BC816B49E850ACF32FFBFD9E8DC9D45873D43E2E654A41B44A22874D1
9630E3FE3A991D494458B14D051F8573328804790A03D98CFC032242FC6E2627
C754B79F4601DE1B6FC0D6DB7692A30B21BD669D367C6FF13C336537B67F2357
95800CA8EF1DF18B65A82A1D003242430EB6FF1DBE8C3D96F2BAFCE65EF058F9
C71DCA9348746900FE665375E9C805A494EFAE4CA9986794B83227FD4117B279
84A141A4B19E695AB476FEB72F3EFC3DF5F9C35B0D6BD335FECFA17526833025
71A60B1C9951D8A457A4F1CB344477D7A6516133299B927170DB0EA31A11EE76
34FD75CAEAA480F411AA4C4BCA1FB7AC7E65D5A5D8C5FCFDB41707B035520A5A
B0BF40C2A15E2F739D73D4931E3263E89A0CC83FB6A41EDEA073E552117442D8
02DF52CEE62D333C8680E45FBBDE9ED6E7F01E5BC22E802FCDB0BDF1E2A8A533
CB7D6E917D674EE5C046727F6A3F7C7EBE4EFE700BAEF06637586AF5185655D7
1592270DC46238DC0DC4515EA969F0A1407C8FEDAB69BA3EEE3097D5B123C627
7CCC673FAFA4504EEC448C29A8F93B36FA63BA313949DE5CD8790A1CFD6359EB
FA90EBE9B7BF54177F19A68ACFF812AD00A931626533380BECD9A77158110E3D
15561DD6C244D36FB6F2A10673088AA9391CAD3D4BAC7001265D89C2F898AF58
91402BE5A4F09743FD2234D37A9E63527CAEB1EB68F8C5389BC7B4DDB1BE711A
8FA47CD65AA53D6253DAB94B98B47A204F3F6E7362DF98165B69189829176033
2FF8D4A862142B7A895F9DB67F41582D0C817460440E9BE7D223D4E55C35805B
79260E90985DA5E5B2F43DE775602DE15585DD5741BF8FA5615C67DCE3740E00
9C06CE3A8306780B31793DC3588A170E5A20B20B7C7E7B74D4B52F2C03FE2C63
B1708B7866DD9E8FD9C6F90676BEF9C36E083C0034671A4E268BBADA4583A16C
3C57DB5F72093F76F9FE0B6D85C50D9B2C4875701BA03B7B042C7E63292ED9D9
954D71AF0B943E3C6B83B82EC62BBD305B6488B4B726AC41950EE2F482555BF7
40EFD19B8552B70046123162295E5C1B8D5B1F8E0AC21F2EA065FA879F533C36
4C054BBF7F35F0B627DDC5FE2AA948AE738E07D7CC041AE13DDC40D378D93B05
6E4D96B1E598D949CC0520E4BC324C436303E25F013D1F713C24FA7BFD9BC3F7
7A89F8EE67FC86A86A4DE5C59198F5124711CAE1F4208DDE790812C4251449DF
EC70677B8B3BDD77FCA2B98631869511DD652656AAE94C7E3F4E753906B3088D
008D7E2A999F4ADD8CB19C27CA6B1929BCF6F52BAD537EB57E6B7B0934D43B9A
24F5A9BDEA3D6D9690B071FF90E75A9BD114ECEAE9E2018FFE5B97E3F9B57EC4
71115E3B32A41A879A41C90FFD91A30625AE7C9E1E3501BB5D739AAFD4DC3147
EC63E3179574E6CCEE1FB1F6773117ED1243332FE1E3FC91864C8AEA7916A726
F924AFD84BE27CC51890A13715B7B5CCB828EB08D9A9538E1F48CCB869DC2181
26956CA9B66DC23FBDDBB5FC550068417C156478E76014DF9C546D9201261AA7
1B05F2E629B6BCC46BA91937FA1C7D5A6E4647A70CB32D9A9EA2796070A56B4C
6445370A3F1E0AE7F74F1BB33955864E470E9A2911FDA4C818B0A3812B714D90
25814369FE71C3906B189C2DFE3DFB24004666BA8435FE10EC622EBE16E77DFA
1ECA64BE4C153AC91451F122BDD5C724CB802334CB2B38ED365FC4E08FE4C042
56827F2B19FA865D6FB094DC02259344C0663016BCCED66A698E664B6E422EC3
0DF812D8CF9F07F4974D5CC9278E3D3982E45D21DE1CBD7460D2C4421C6507E4
DE22C24947C312EFBF84019CB8AAF309253549DE00B8A092ED646F3CBCF00FFE
1C981EB0122C3515BF2776B5B833FA120AE7A81C64AB2F20E7735CFD4B13C2A8
CBBE519A8F57C6687AB3639219910900DEF856C43D283247162C392D23E1F183
C1602259E6390F359CF18F039F3026354F553B1FE5366C26CD0F254CD8A11ED7
7D05FCB64F261AD82C4DF999CDB8524EA0501EAEC5D21617E9E56D6801FDCB62
45E566251AAFDD0A84155B62410DA5D9D10A21CA8B7001A24B5801BFF9879441
A81C2BAA74E95F79507D65838598D01F66D7743E3C1CB6D013DE4A201A150213
ABB82438AFFB084C8D099A75D89D6A89E962E01BCEE4B41F30351159C5FAB596
0A2E3E913CC7EF0A07843E37CFC27442EDB3DD9AE5B2B077C4245513CE965D1C
9B09EB62FFC06C3233AC20FADB3505BE2B8C29DB3630B72D102AD6B2DC9BE98B
8A5013F998D83349B69E4DE0A3A861D52D8CE2EDF98FA2196ECE13CB4F39641D
55BAC02180697B632E70F6162AC51A6AD727D9CA308F7CC9136C4A2697E6B205
B84A93E0E8625B0B20EE9956DD46B5F29987154433CDDF37C40FBE2DFD422C24
88533E687A6A893A3EF3E520891FC807DDC7F0A785383FD58807C44B06016EF5
E2670A911AE147CC5A975F2D227CA2099AF1EAB3652298154CACC3799A460355
1CD8693A9561AD2C3F9B967073ECAC4D16FD02C19C53EA68FDE62754AEB1E15C
555EFBA2673C30B5F05769588A51B7C7DEB9B2DA73C980DD021A3E7FB37914E7
F6865A5857BD7887CB412AFD0CD0D3B801F1D8C20804D0BD5A355BD413124FA9
5DCDFF496A3CE03FF9EE1C4293A042586C7D5DF306BD03A705FBB8CD4CF8552E
C4AD3377675F361966D3B408BCDF573B3399BCFCD4EEBBF072C05BB0528537ED
B6EC99C678D7B0BD195F64242395E6C807B7D00E12CC9CA7119808470C816ED0
40C9568CC2EFE4A607C3EB4A6C06AD5B42B5D23573EDF7798A4397FC6B28F7DF
B72F5895A6B90B644825822602693C071225D0A59742608FFD38593C0B0B62F1
8FF86AF9B2A5B3E2A8E7AD8930C9777AD0ADA879F80A06360EF0D88095025D7A
154E7FAA68EBE49A2E3A88820DBEBB45ED454DF0B009FEC9F8CA76F86848C234
80A51EC039AF5DA58C53421D968C241C486AEFA944578E2AA1237A2A3B90C01A
3A170BD2F9696162D5E63E7E88115812329ABCADAF9CEB29E09A792E33194C45
11D355D6505C4BA5C2B8C70A6D14DD9D06240C3A8202B516B85B1B6F95770B36
4CF19DEA920A1DED65833D91D80B3A2E74C601B6FA29471DC34814FC81A1E1A5
155BCC63FEB9B8699653B19211BCBB496DBD14540A1F3ED4A0D2D2289389868F
BB2765D46E6C083F24CFE6F8EA718DC0BEA9DF0505C07E64B2D4509D1270CDBE
FF01A02F73E4AADF530E5F627D5E2622D22B75FE01501A8E798077F3E8FFBEB8
4FF65D8ADDDC0995B117009E9EA4FDDAA722C42CE1633636307C390FEA9AC478
5AA1A2B368D882D47B079F4B1FE2A89AD72D1D1AD2BF8BC6B31E4ADD66037947
0F5503B71479FD9AC22E7818EF7BA8071981235D3BA315FF9A90DEC4F7AEDF1C
70BCB7143D09AD2B02537883C68E63FB3ABEE97DD7FFDB55C192759CA1522E84
352848F0D8B554898FE557F69574567035ACECBF269F28F1D239185EE1A37965
5DC7A53D88C875A3ECEC139011AB973D1FA615381847E0D9C2C341F89804D41A
92F9E9A685CFA82CF91854D0CF8296ACB49EA77AFFD22E1DF994BC1D8766A4FE
FD11336E9464742FB50998164536E80170B3D870EEB5E235C61E8556A2D58B28
35797C7E3595FB04365CD4B4A5FF216BD8534C4ED6F449EF054923BF1A75C78A
77CE2BB4368A7C8F48639FC3A0B47C30FA6F1C1F12A645A8906E524CAF38F561
3DDA0C40452B7BC1C6D3C02792CB44A20BD67496640EAF1962DE361235F9F332
6D57DB2F5A50B37FDA5DD408162D9718D28BF9E906D959137073313978F2D372
73ACDE838EF96D043E0EEC1B9D820CF93F5FC0BA1509B6140383A667BB1C52FF
A3450E4AD1664CA415168A8A8316FA5F8498FD5AFC79B778CC40F4F63FA2845A
561DE5CA7873DA692889A66771DA94EBB0ADB9C6FE53041FCF9EDA693A284FD6
5AE53BC897EC7BA6446656F2AB1DADF7DE287FA97D0495E28CB8E2FE2A4CC0B9
DE515A0CB8ABD916DFBBD382DA926E53CEE7C94E6B1552C08B4F2159846E8054
77C60F2A8D3C80999E98D913AB360E07631577453A37D1995144AC22383BAD0D
43058F54E21A844FBB70F3F5EFDA7CA047CE71B49325EFE87D508D372FDC1A4B
1DF7AEE1C8D59D6FC70C5628EA55B38F9827A13C22F6AAAA9794E65C71D45C15
83799C43F169DBD09E58F15005486CD1B3524B6AE0717B818974CE8177F865C7
E1301C609871641736D8B9C714FA8870776EA5A1E907980663D7D88B4AA2BC47
9768B32B9C059D3B5DC965FDF1AFE7EA35D1F3E05CA0A648A4A23396BF06D674
D6405964EBDB1F1997466EB09B29B743721932EED0F5C09AB0CCEC832D418F13
7198942E87D4BC7ADA4DCE9DCB8C23F82FA31232BF9D0CF9C597D22FF591A28B
78CB1AB60357631E8FCBF5BC6EAB714EBD60E1D3B1927E281E84815AF9CD5446
664C39CE8B2584E069121F35675C2DC80762960AA8CFEB282301A4E342028B14
9A4C7DB7712B70B2B343DA5EBB67D9941E9310F38C1F6ECCDE9B12E1EAF822DC
AA6C0C4142A552F0D97037FD695F90BC6CF8A268857C7C013561FCE2D5CC58CF
B186696DB409A46D35E749176999DB46FD10CC9126E08DA99B91A0F355844767
5AB6621AFD3E68C14C591584F1896B5F92BA9CB710BC75E0106F5F94BDCD5EC3
826DA19468F81C97FBC77AACC84E85075B2C3409B8138618E9DCE7FABEC62F1D
7E280371E1F963484EC4796E7CFA879014528A4C670895C7BCA510FE3F3DA02E
C5384C4E5058FECC5857B08807A874392E443C9867046F4B020955E1D3C7D8BA
213B168F4E160D094F96DD0947684B190468BFB7B82309B2B7D7775E395BA4BA
F7F82F0850D4EC408D5FDA45F5B593A0787ACF533199348D11730EFF7C25DD5A
CFE3837D33CFD614E6D82DF617F77EAB048E71B51B3BA5E5AE5C1D66866465AD
9DFD2D25D7026D8483CADDD891B5359DB78795CC31B01C879BB44632D8F9D819
6B6AD69FA7A95347F2DB16D3390FBDEFE059EC4B154FAC3E5482E13D79C4875E
249580B771CDADB22DBBC1715016AF327975577DDDEA8FB03F750A52C0702898
22BB0302847A9762C795AF54996144F5F186121F7B3854FE184DA1E5E702EDDD
DD7AE2A28CF1A20F7B73911F39D6E41D40260EB48D6D36EA6EC30EAAAAF1C7F0
54CCDD5814AD3DFF136AA0AF078126540BD2D435D0AD6CA9233144A053A6F42B
5E1A22FE803AFB2171FE5A3E58B2FB78175772421774A5062BB1CDB5AC5FEED5
FB69E2AACCC8CBB7019DE3FC4A6441F33A5597D72C82E4BD9A85E2004635A66F
DC65C9CEEE3E3153FCAB3050CA75A82E9483EC5B3846E84386E83F2E7BA8EAD7
1FC5CBC75AF2DBC9E30AD6CA97C3E9AACB6E1659234A264036C6017B46AF959F
7CFC09B43D790D3E80AE0EA0AEE1984C590DB7EE142C26231ACEFA37A93751BC
46076F01E2D91BA27FAF9AB7A1CB8591B01E61A2DD28EDA14B5FF1EDCABA2557
4158AF48FEAF21BC9EA91B74EC159DA81A275C732DACE2E77C4A0FACBAA77D55
12943C367DB9BE2A98DC8F23BC2361A68420CDAACDA7BF1E9DD09B987DDE9A64
E9BBAB13EC06AC7FE6D6832E5BEB7383E249556A7D03753BA53A79C7DEA5598A
42F97C89601CC59600CCE7329E8B02389610F07B1C7CE7AF4D7985886E4D9610
EDCFDFC77C8DBEE5E09260D1D60B17DA2A733EA88A189F82702007937BA9322E
1E5D976C33A4C1B9D5384F70ABC8F9F74EC964587A11EC057BAEA084D203E197
CD50146460DE396ACCE5C341D0FBEDCC43893291BDCEA2DBB162B85E7721EC48
73DB1D4D77D17EAA35BD7DEF5A54D050720CEB18C9EFA998EC8C4702F89F660A
D38ABB9AE811E6C73E3DFC6DF24CAC53C721060702EE12C6641799994DEBD48F
C048CCA212E9576E25EB201C38AA12BE61E2E6D4B23E99779A59D4C890589C7F
FC9F6EF171A9A4FA400DB65786B69742D7B7B612962A9DC4B8DD8DD875046529
67C678380E4DB4F935DCFD3C8933CBF9BF5DEEC32714C079DE77FE5A8773FAF9
ABED1306F7C5D34E2B7D5A9E4FF57538177922B29CC828ADD9B2582CF6C31787
00E56D15B6356587533F049824D9D5180E5434E8B574E6A7E1DD408056C98041
27073B22A80BE2CEE4C6DA82938A305C8076B8B991D943E58CB39C72ED57A336
A8EA563D7B55A3C7C9F84370CB2812E8DF9C6EF0F015C8184493FC6CD3E420A3
7CCC1DCFA6067B19044BD68048F44664D1AC54264E3F9B5EEAB01EA2E3783E06
B4B229FFB653DD37713A350F014FE8A785A3F66FFAB8D8C9E7E26E49BE5FE3F5
F464EE95F42A411D26C48562C814D59494554390A67DB06D9040AD0DB47314E9
395370152136FEB80F752991077BC2A4FFE2D0208EDA333AA5F4CAB0ABD7E1CB
79135F8EF988AE0EDF80660A26B4A346117DE5CEE30B35529BEE81FC98ADD446
40348F5C7C91A449496A33F2AA45499CEB8ADF3FEEB11F09918F66D3E5B19628
F781B0A4E62429623FA7AE4052DB2AB8C6E032F694E7568C182D22BF59913E02
6E132E8966C4D5790BAC88EA178A55D85CBA3E2BD761C0A535ECBEF75CED8626
AFA20246D7A72D656A3FF51D2DC26313FA7D4D05D8E9A9F4E75602724DB806D9
C695EDEC4479DD86672800ABC7ED728A75C62C71C6FDF28FA577B39003387F79
289C663EDF2205203E26680D97565FE4D1E216A9C768A454647DB379C20B709D
08BAAA7523628FE96F7F0362A7A748A63C6E86103A9EAFD25B0D6175D567B8BE
86A1AC1F7D05D239E54036C361A3E43BE637B70B9966664E12EF4707F6B105A6
68909226DE954C56B5DFBE90C804C68A75B2C92CB8EE5F2E7C51C52741BF812C
C89EAE94F1908928FA612A5501E954F32340FC82E3A2ED3AD8E3DDD108A573F2
D0387699196A1227CB2BF44CB5A1C8A138514DAA2B912641C9E971875E956600
DB7D9BC9E806B2B0538F96B289D030CFBD8A443277B889EF7EBCF73DC3496F6D
E0DD41F9061CD30D197800D063241B190836D5A9CA98BE49C14C01CE483ADA65
B6260F0EDFAE9F825D09A330FC50ACE28384B246BE4FA7493A92539FFE7664A8
A8D9BF3906B1074ED88F5C38BDA87F5FA8880517429B9C4E5FE986792090B824
5254972A9E4781FCBAA506BD9D7CE361FF57120A5364EF1F6F3A8F40FC28A8F8
0062CD6C9CA9EC789C58F3D4BCCF3638857C25C73B78F5C35FF0DD1AEFE30E2F
6043D8C28B243B40EFBC2B0CEA15584AE44B5A6DBDD8C7BC445E500C128AA2B1
0494823BE831209ACEBFBD790070B2C4CFBE1A6DB6472883C06E249B77658196
5C477B14256AEADF217F5E4092D1D03ACD2FADCF15D05C00B6673118F12D7665
C52DFB2BCF103AC9539C2941B01594306DFE612047BEFFD06259B256CD1A08F6
2F5F239ABDBB7EF226F862C9EC8392AB9CBD174CA5E3CA4ACFBB9C79BCEFD3DC
1140C48851B5C5456D4AA23E3C24C8D9B0860E6FC31462CE7D19968ED81AA3D7
E7FF51C119821EDC6BE3FD98C5EF08ADDDF69890FB2039F35C9CAF4518248C6E
80E617710006DC9620F12013C029B819D0BC5C1783618B011F86C9490704010E
E379908BC1D54A03FB878D974AD04A770977FBB2C31C4F8FF8BB1841F68E0AE3
487EDE0A148F2D79715A87199138664F3737ABA9267B104DE7D912C5BFCAE5E8
4C5F5B24AE8BC2C93E33983BE6202E89777695B9CDF0E3E671A8BB4EFAC7D819
18D057CABA61FA9B11ECA74AA6EA50796A9EC0170469E1129AF438705D08BC04
174D1CD50A27D94FB6F4A9C83F76ECD2882B91FCF7E694BBEA02488CBF10A00C
BEFED9DBE2E0970EF2443DBC653EAA60868049AFD7CE6B70D0A0C5489848C5FC
EE650ADC55C703E9AB03C4CFF2EE5CDA220987161A2E2BE7F4212FB8E2A9BA73
85800DD429C6AEFCBFE9447A13D00FA3D6E666B4AE09D68AF9A1CE382A39A8E1
778DAE833D64ADE41D9E8C6A1A033EA76D1FBCE0045C8F147537B7C2221103C6
6429990AEF02E1EDA87B8C246F89A0EB22D1C6FDB17142AF01E883282AD5D200
02B64F4968F175ED215CFC24750FB2A9A49E5BCD82B4DE1097FBA4DE7BD4F60E
2FE39295961728341167A07B6BA482AA6199B185491196BBDE5079C0BC5180C9
2F0640CE6A8AF3AE7EB181C2E4C11086C35C7D103AA5808BFE1822703371FA7C
A0471BA96CC4437E15655C54F2B88C06C928783AE7E32CC7F03BDC406BCD4935
8692A287F5074A8C01BA5518911789F7767BD1C20EE7E3FEE4E2BD0B1A1A036D
A5E99BEAB6BB88A9B0B50521DFBF5BC78580A7EF7997467C254D74D5092245BA
9E9D3EE03908AF2CFD2E4908981F51AC4E66A3F827C9C71B23ED0F8B4909C37C
EBACEEF20139F47992F66BC57B46AFFCEE0D0981CC5B34385DBFC58D0F424190
E402FAE2773FCD7047395A62EE865652E8DA2887448CBD05868702B2AB98C70F
57563792F7B26D59D925C8989B025F1A2EF75872EBD53FA9E393D97A5115E774
7CF3B64F47E299EBF77D7C28B455DB8FBE2CF40B23601D9EDEB8842FB6D814D9
F7ED96530CB5DC01F96B9A7BFB5379F653DD2CE3BF6DDA3C23374825AE365E42
7C44A2ADF20EFD61DB0AEA691FDB61A9E84B41CC5A6C2C5B449FE3DE1F4C5BEF
5A58984739FB59926B8ADF2323278ACDF3A5102748482AECBBA9ECE9EC2824E7
724F074089E44BD1F98A4696B0302723D12557224838F0451DA45EF20DBDED07
880040D8E0B74D97F548266F85823B86EC501438B70B64C71D7863F695F6719C
5DDC82D1D8A26637BA912369F9CBE771F77B7824E17C659C25475D762EE30ED1
A10239F08D62A2850E62F7E3230A55A70ACFEB2FDC52CE795419416826EAB7EE
E37BF9510A207C8508DDD0317780B06EF63A00701C70B7ACF83DBCFB12980956
BCE2AFF75C864A8B5D598FFB6F3F2CD6CEDCBECA38F7FA682C700B9C930DDF72
455BD533FE6D5A9240E81B26A764B1B3C0F62204C6F3669EDFD22D4EFA18B208
0A28A10E716BC11A202D74C86822AEBB6ACCA47BD4F7FC0FDED47074D4009613
7E8AB660F2F07E99A373BC8A8C2D7C33E2E68C306D181969BEBB6CBDB5AEEA18
56ED999E3B2C409E3CC0E3C7BC6F14D75D5D7FF23469D236006EB81FEAA7A10A
536F1FE3C7C77416A218B76E28F91A54F29EB0FE77777DBFFEF862CC94CE8723
6F54779636E4252662C6190E2073E499D3E23BB5ABC4B35C60F7D4A8B540E6AF
F36CCB7EF9E7401DE2AF1DC1CF0D1B434B0DD3A442F3F12054A0381A66ED3B09
90C8D6398803696B5286B6D5B4F0A017F4AD72D0C48CFA97ECFE98E658724E3C
606CFF1CC09EFD3845E3A23D3EA95C484B89E79EA18EF3130755A07F4B9214D2
424FAEF4EEC4E46071DE40AB0F76CC93B397FF2805CA864B6EEB9F9A05A79E76
89DED8D3DEA511720BCE8678A5A0230619741D49A9FA5413F98DBDD94038D484
A4B97ADE2766785B6939FB6BFEA123B3D67A8846D670A96AFC9D2171C14AD979
4B1B7B991A13042D1FAF26EE6F34301FED88C3DBF3591D70CAA3F054EB103368
16F1D864E14FAFF50A05F5E2F6885EA1441290B059362C0C99755863B206FD9A
678D0E6A6B3BAD32D20AEE06B5CF3E9D48BD0A92AFEAECBBE523836B5427039E
F7F0049067C11AD2FB031E5E6E4CBCF7019553DDCA0FDCE415A55C33155D201F
1DCC206C8945B45E14DD3C51EAADD3A0EC48E704215371A0F82B75D98E339632
995666F26FBB7D114AA9AC55A151904736A2BF5EF51C5C3F8184C748A1D29BAD
721211854463046528BCAD274A81260F67C80FA48931FFF4B710EE6C0A45EF31
54DBBFB4A1396CF17256770D94B42A4F73F6044B03A0CE6EA2F3E39A775A747A
939E00CE94DBDDC6FB478E8094741D969428635A0B3539EE4D2745EEEB35065E
F4019637316B858B420B88454A0E72D3C445326F3A70E4D84ECAB057956DF06C
E4FB7978AB5F04B686997AC1BC23D0840608D0AFD54A0FBCCEB688A79E564A03
87ED52236C43C290AA457FEAB157E8564BEEFBD55094B96495E416863CB6E924
D7A865C817F3F289BB8EE99529A9C252888EFE008BE5C4F7292CAD13420A57E2
0E9509E9CFE5CE98FFEC582BCF933E7E210EE181B5201DFDAD50D683F3B2AFC1
0F6D17E6C7870EAC877759F51082EE988F65F7E76ABE51F195471FFCC425FF1E
9C59FC0B7C0DFDB336E2A093680A8B04C983B526A6589F6A3177C7ADA1264E30
522A876E9664C6DB6F3255D30F45E2654F5DB08B75806DB2FA0CA7D85BA22840
2A4105812E6F16E365C8C1B5357B7E0BCFD06A072535619A9BB832C8594EA88A
9A54C803DD2DA3B797B709CC12398C23A8E9B69F1FEDD4CA7557AF2EE3FE204E
A6B52B38B3082B8958DB6C0C63AD00C3A0931689726368D383E6B58BC879DC73
4DED754FE99DED43C5EF4F1961068BF93C4327B11C6AD9295E805557DD22CEB8
95A97191E6AC639C5511CDD40F252E4634412464A472F1946644720A42580019
351B1213AEEA036E00E9840A87121C5F09EB0ED53947D80F29275D7C22936420
16E1261AAE22250826DC242BE5F79BB25920905437A689D4F16F745CE4DE454A
4D5F157BF500C136665E8A63279EDECE39539EB2D5EEB9B7AB53756337C1B2BE
39FFEFABBFC938D07FC7C5964210998850423CDA652B405FDF5EE5232359B727
67D29835CA9A91E1384F6C3F2E0C3805909036F18BDC32593D84A3A1AAF70266
8424A64C5D9149E8BFBD4D39557D0621698697FD0B40B476C1857F400A5B4080
7BF92C172F3B2EE8842572970A0CEB0F48F98DAF91F76959EB35BFA2B32C5BBB
09D7C65D7564168F2DC7C1685054FB6FCB5C4DB26E9464742FB509981157BCA1
A5A77CB2CF394F7EB0D9B1117596E6FFDF4E210A65A8BC2A1119161B0C97025B
02598E2A483A2A41376775913213A61C9C3BD9336AEB3CBE770DEF99EB9336AC
BA40C2A15E2F739D73D4931E3263E89A0CC83FB6A36EE1CF44EABB16381A96F7
46C290897C1655A21E3B5AAB18330AC55383F3242863BA9A3A61FE2BBAB1249F
D856AB4B57E2687652AC2CCF47C81593FEF67FCB1ED83EBA06D7ADD0A398E4DA
EB8F3AA072F6DAF3F7BEBDAFC42B7195669C44E403BC4F5DC8064F94CCA47B53
CE5A637EFDF0B9AF77BBAF6ED9513A2C16B89D3A206AAF7C9D25D99E43A6200E
F27A5C409A3F6AE1F1D3BE143CEC0C46F4BEFBE1E762668F8D8A3F36DCBB5352
490FACD6E9EF0C868500C2039FC62C37DB28EBBFF30F651543A11127279FF932
2B5AF9525DC1BE70A479FCCE5C34E4612C59F65933C0BF1E4431778717E69D83
976E6D3F69E2644A545934325CA6B073992C037DBC8E5E70EFFB70355603B49C
47622C98805B1AE2B1887FCD28930F4307126F417EA3BB40B9D9B6F6E5B94FFE
A8184E4E2EB5F609804B0A739ADDF5054E1E0CD2568FB7024BA7A605E3DE043E
037AFF17CC4D9A483E35F67085D5DB8E871086344E63BA94763732C076AF0A72
98252396987500166CF161DE771EEB495DAE0A3681F6951A607D660E8B4909C3
7CEBACEE7270EA076115E876426DE92560DDF6CA62288E4E780F8614C7749C94
06325C86B337B2148573DDB07F5E27A40BBE00964DB325318C0634F19FAE50A6
507512690D2D5104B3992AB11DFE899C32877CDD208A0891E10C66EF859ED8FA
E5A838868856AD95A41CE1D08FC6888560DEABE3AD2DC13EA5877B9FB10B6ECA
95A25FFF7C831241EA0DDF60A2D0A4952BA67AA8F32C0CD6FABE6DA102265B86
92AADFFE3F04F14EBEEC121BE15CA09D768FCF37C23BD5296FE7D914F678FEE0
AC88642F77D8C4203897CC93E01ECCCDEE948B805403A784DEE58D6829C3F912
1D3ED29E6FA338A2DEB93D950AB5C440C8E8B4CEF40C600E6F809EC4061E05DA
45BEFC4E5C4FDBF7C8EC97670DC1D81574FF891A4FEA530A5528C91BDAEC7D2E
8A399553A6F6BC28545CFEA76E700E51B0EF975A63F552382B8FED833C5A1C4D
50E36C467C7E4296CAB5E87028942E4D0F8325353F734DC15891C66A9546EC08
477EDFB930795F74AAF4C713ABB3BF00C64EBB620A43BCBA936014055D1043C9
0F80A59E5D6EE933B8C411E3FB5D00E2762420BB014AE960BBE61BA075F61B08
963A00E28D07BB33CA32553AA4E7035B442314721759233A1F164237C600FCEB
E11135730EA74E600D352E93E27D413302143558170B87F063E97C7B47B8086C
1070C0CF738E631B9EB0BA5D2020E3AC423348EDD6DF15BABA7623A13E93D93B
163D0804D929835A9CD11BC6D7C87ADA05A734DEE08CB62CF82CFDE06340DC78
6D901579C497C3EC6D98BCE6B0497E4A4BCDD0822113FEE439B8CC28144707E5
4840A7FCB36B6A4399E2EA6744FD405A10848366130B622F7095682CC1ED71F0
9D40C7F41D69D93C38C7399C90923C4464935A426CC6C161398FCC6EA74C0EE9
36A775F9D7141DA176676EB248765070AB6BA38BA94D56E1F72ADC714088C5FF
BF36EFD17193CCA702B53E72931156F1206449E8A4FC831B500FF4F671EF0CDD
1E6BF4EBF7F1BD48329F967BF100DE860CAA955C4952C7F4E58E25D25D699550
121ECA94D1953CFBEC849C19413E2A6511A59C9E81B24CEC67423F8C96339C89
528582CE7362E36BC9EAACD4857096C133B94993CD1EF96F27BA0BD5C1987196
ED98F58C5354662F1A96F1AB893AD21327F633AEC6A56DBB615B9E2164B4E1CF
E413EE79A289A56A4D402BB471F8A65B42200DA2E68F4C2E503E6013CFE18B3C
AA43FFC2FD88D3279767142D132F62ED828533D737F1098A92C807BEFC56E485
E0AA718B472DFD51A259C97C6CDC00CCB06D01827752B87A149AD3AB2F184B2F
5A89D395A1200BA92C52ADA4C1E27B02698E15DD2D7FBE4FF8231ED7F72E0D0C
44DD12758275F4B1E2BABB18B382101D82B659B5456FF5336B4DCF7DD9F2454A
C8B1FD966B7054A494CAA2F5DF657937457F74FBD16948BDF4D1793DC9769C08
EAFCAD056EF2A9AC6BEAF7406968298CD26E5B9EF345BFA3EC2911E2B96A0B40
A9A30F5872B6C996C44E712F82A71C040CC46914D29D559B29A09050F2086F0B
643A4E89E630F99516B2597A05BA988D5EE80181286B7FCE258DABAA1CD08127
A538F0FE8D79A2011DDE2CC5C2432BC832B65BEA5A7D0E8A5EF9C524144FFC39
B550C5F5D829E27D532FD3D3F43B64F427DDAA968B1C5D5F0BC58BC5263848A8
76F20D005A3ED2AB1D6BE585203FA25EC2BC1C165E61AE1DC2637F1976C466C0
FF432BA98DC887EF9A415D7682E9B5D4202F71E85BAF571F209B49115DC1269B
36BE65B2176C96E4EA4088D61AADB9EE0271E70191619CACDBE66CADA803A830
4323BFCB7AA2364A2E008A96399D6D748A109C0773E2B045EDAF78713A5D1806
73D945A461FEB50412131A26C60A6A5B1050ED6667D2D40EA48228E55E3F16D4
64B4FCA258AD32BD99B92E6E63BD10601EEA19CD36CFB0020B11D14C349293D3
04AA437F8ACE9F52FAF8206EF1D49AE052C9334EEBDFFC480B51561A1600DFD1
C0FC77D648C022452002468CCC1C17BB615702D43C389F949E33E9305A52DF57
ED2C5ABD953707619EAA012460F2AFEFB588BCE8A747281C8E39ED703F7B55B6
097E73553EED34DF8DA712C29D713805BD4B9621A6A1E57DFCE7C5DFEAEDFD98
057DDDE82F6F8EC7A6C9F63592C6DB794714FDACD66F22FBB82B03136F20D6BC
79EA3A1963B9CB7626EA49FCD3FA858FB445722AEF226697148556C9688DA79E
BD64DC49022EA53DEC2E532915413630C530810AAB8351886A8F785E1494E82B
9F460108CD935D973F713DED692FBC68966ACAA484F97735405666A3F683EAF6
6A0A030E67414E6FCD4CFBF2F0E9C860F40C9FD5CED0EE5779A55F4BD237DFDF
4FE132CBC88266D4DF462E1600EAACD0344837853FF3C7F95F9813F8EF3ABB6F
5A793A28C4DDB128BC9FF14C6ADB2D815D5566CEAB27BF071BCB87C8494565A8
97E11F1D01AAA3BAB49C883150776DB370B0E20DD4E7EB968A80A8CF7BBB5FEC
DE94D562C02AFA682C65C411D784E143285DB6A5B53755199A71DE94A6C86576
516A7D819A37332AA4BA88CB743F0CD5E653EC43C9FB59CA9B02DFE52034CBC6
5020637BA0693B7A97B4327C4DD2059B947FF4123B38CCAEFC8720EDCF85CF57
B52052DD2FD7D3D71FBC82CDCA7919B93B23143F9CB3EE1B97F933C3E4A28BE0
7939C0B1E3C921EFEF896D462F49A7F285B313A3F3CF91A4B4AC35A355F01E08
A73B877C269D8336EFC02CF615CD43DC892954A1BCFE5626C85480D44C7463A5
BE869CEB87DE10EF611B802E5B34CDD288B506F8D875174FD46DA36BEAC0FD96
967DB8D9B84742ECC28F30FFA4DE8961D97430E7787F19FB11E6969EE6EE82E5
4C9EFA7B12456FDFAC34A343406AD842E39B51F3EB00828A515E1EAA1C4C8998
CEFA23E5B0ED728AFF6D735A38D8AC9D2DA61A19BDF993C99EF7C10ADF366C3C
67CEBECCEC3EE3C80AD06E9520A7CFC8D311750290F0B8070E0109A5A4F0F519
9384C255B2E77FFAF820CDD7E94ADA5BDF9F8751D56EBC70A0CE297BDFDB0307
942F4BCD34D6F7EF1783F10BC4BCDA4509F467A831856A406AF9C4D3ACEFD454
2BF7DB0634F230FD4AFE36658DCD2FA3850BD41012613E6E2ADA8DC411B6A2D8
7B85F21F39F708CCDB8813888A023B8731F38AC5186F78CE942D14E6D6749543
BD58222BBB01ECAD3E012F90A709AC8970457EF9CD76E9EF75D86A4440BB5940
4C17B1179CB9B56DAF596E568059792D4F9ACD92ED5AF71796225E762FFE7733
C14EF7BC225CC3B3CE6F9DCEE6990F6E896292AA194439FDA50261269C754C5B
5A8E44324B00E03A1A9729274E6E6054490682D4A3C72EB33CB15758BBD97D5E
7DCE00D77BF65BAC9F8D7015016B864977B5D6AB61B0AFA1F1CED4F76711CE6B
9D74B4E576E29AAAD46A53D70E0F5F3E15F04BFFC99027842656E0736B228831
88517EB0289A0CC73EAA9A63691233D7154DD1BCB6A849FE08F03646E4B29CEE
44AD044794EA76C3EE29AAD5694F72C9E83B3CD562E5000B776EB207C03D4EC8
7B6A13EA643B653EDDAC4F848A6D2A640256C42C40E13EA9ED4396C6201C63D9
1450E7B5F4CA83F53C685BA06A197AE416154A035EAAD42871411D3A984C61DF
CB3C9C76BA52C36B6A2AB5F5A1E8AE5D55734D94B29CB01DCA60AAAB12741563
F4B2FCED642354AAE4CD5FBF2D317D76FBEBA106D02ACBF67124B5CF48327FBA
645C9485D04E301A710BF8A967FC6AFBBCE1A31F600A210FB875650229D67DB6
150896FCFE116FF057C8BBBE88F3C296DEDA3C8D2B790E0051639CE6C5F4D229
C768B8211F02E06712507707F24C4AAB3AC355DCDE12DE37C989F852431F3291
D144EB62C935D8634F4D2C5210DBB069FB3A75AD9DDB16CAE5F081DABC1BC919
9521DA6B0088D3393CAFA075D8DE48DBB4C433D792DE956211B201FCF5A15E93
4985340EDFD60F251241FA3599E5B9382C91D38DBB149048956E1DCB021B4CBC
BE057288CE9A2EEFD47261CBE2F070C213F442DB40F4642D12EA28AFB2195964
D2C4C9A9DE6FC6CC88E028540CBF56D28AAC1045D1546518AC12C2A9B62757C2
1934443BCB2493FBC0BA1F40ED0408C0D3BBC3108477DDA75A675C149D783A6C
6FBA8AED5822157604826A2397BA520E686CAE8E9320DEF5363899F97A9440EA
84DE8C3DF484971F00990B88E1931C59D868369978AC01789C3157D65B4FA526
2E699EAC33B082AE5EA01CB21BFE3C6A672FB03E87B7E4BF026DF3EB2D21729A
F6D05F99A00B2CBF4A5EFC3E91024B626BC63338BACD537C42A6278E0EBA7599
5396360B5ABBACCE69775DA6C72ADF84749C2E24811BCECEB52C86971FBD1B23
9CED097C309F9B921206B26FD9916AD62E6F50AEAB9BD006293D84DD1B804034
6F4B0B5F12C74183DAA9B007F610A441DD3C60EC74B663DD787CA0E33DC4F5FC
E79200159622E8F02E6A5542280D879EE7CF38B233065391C06B0EB1D8820985
872D92DF51F3F8FA688FA1B9F46973E4D0DB5024B0A05421302E4430D8AF7998
3D5172DDB33C8F791B16AEDF904C7D4395BF211547456696F8E130B8502A8FB3
642FC273354710741654704A4035AC85BC1A1F40DACE081033C2648F76C25514
5D67DF638E0A092E0DBB45723E3858702BD9524FEF8067C9C0ED73EA48ABD08A
D24A4F160CEEE87C7D28BC8126DEC206D6D366C439ABC002BBEF1F4B908BE4A0
B2BF5C21BBDB7E9280BDADBF18DFB3A8C9005F35B7A11A1FC2E9B709D1FE9402
8B7B9FA86A810DF797254971C4E99D61C1D71A4624664B4ED152BE411CC476E6
9977A2473B14166F63ABC2069EFE486C043D8F1D4508FAEA7979DF9E1754DAD4
821349A89041C1438B7BCFF667A106AA0D4AEE7D2F86D73365998F9B51486182
C79BB2BA59F310FFB44E98A69BAFD85FCFB15D3590C1222AE8354CED2EC0574C
A5624FF1B3BCF75FA72AE1A6FEF9D6D4C74776C9A7B06CB8429E2CEF1DE7F5E3
E45851778D1EFC4777B8EB306180A282406D3CCAF8E6A0AD7CEE81386F7D94BE
E97CBECB94B8F84153C71E7FE0C9A82579293B700F33CC2B2AD5A5DF9CD5C9FF
1C0EC289EB47B7E563FC96ED7171335B5B66EAEC393349A0C05FB7F6BE2722CD
4B32F37579DD4424120C25EDB33A84B7F7490003F8E55EE7E24E4F919BE1FA27
8AD38D40743CF176A9C55F64C88D672D11B839AC94252668AEA04F23329A968E
3863DF3D33AE3392E4D5B7DF63406467FC8E6A63DE565844A730721273DC1209
69CAAF54CD5F89FD89D153C58F0D66610EC96396686444F42CCF062A9508DB8C
7B18CCCAA1A9B1C83406A402F3A83FCE9918EE8E8D4BBDEF36BCE958B664F4B7
7C153EF24C817D33A96AD5D4759E5B655C43DA410396D179DA4C1E7F5C7BE4EF
F59D55B381ED872E7CCD2F5485DDE4B9D40F638A3A95DE5DDD14ADBE763784AD
B3B163252BEBF1BD3F2A2300B50392C923A5096ABFDC6922EA5CE7340AC948DA
E1C16B7E0F2202AD5FA323A37CCC1DCFA6067B19044BD68048F44664D1AC55D2
F307604C4F15E365A9E894AEEEA3338FBEA7771F129B731FA3BCF65F7C1BDAFF
8F1CB40CDD078B2B3129F59E9028F67F64AA534A2AF512C1F2BC5BEE9F218015
14B7D924F359BB33327123B24688B757F4AD4411072FF4EFECB7009DB20905E2
7D47F0624CC89AC82466ADF5E402D61541AC1F598A5843D1CAD6C5A53FB3BDB0
05D9CAE2316614ADF12E3A6BA5E1EEB4BDE83BE8C804239B26533A05BD4B9621
A6A1E57DFCE7C5DFEAEDFD98057DDDE3212100ADAE07838F53B0B7C64331A138
16323CE98D36B0914195874CFED7C0517136457774C464F3D84201096BDB1BCD
36CFB0020B11D1CCC9186C1571D506413CF09207AAA95D76089B8C6D8C31D70F
2F95395CDA08826C38C128921996E6DEFAD9D535F87566F942E441FB92A9AB96
3A78F909394959755615203AA2D0BF03593A7938B0FF4215D863A3BEA1286656
237EB31AAD54903AA169A838C6596B4EA83E477B00A3527AB68F7AD42DBDB72A
EE544B605750B5EC2519E31DB5206486974A9932700C0D7D36755706C2751B3F
A5FD95D948FCA840618B23172EE2D3E6538CD9B1E12B834A6D01EDC48180FDA8
FF3304518C35E555AB0A7D035EDD420216D6EF9402A1C008A67D4306DC49FEE8
892B6B741F5F52C469CA13B9A46BE405089B1FDD74AF92F539BB9FC28F62090D
2C702BF09F6342BBAE51711B30E4617B6C78392AA062A732BA4A46A4CC868607
1FF45FF4893CCF0238A7AEC1BCCBF010F2D786761D746D12221C807E31D74457
FC8D49C45934763DA7515D077626E8924538C045D54616347CBBB915B4185518
FAFAAF8A22C28319F79216C6D454A864898EE9F832A1EF8EACB1D8A253BDAC2D
A7BBE8EC827B9FA2A1C49905BE636289B8F3964C88A29A856CC209EC385D5B22
6FD714925AE1F57117D2D4C8EE4901443AECD2BACD55B53199975BD18850BB73
E507315CE88A7A4CEAA6CAF2FF73594791CA6CAFD44529A22B1E1E1B4FEB64AB
0950765C9C5CB7CE178C529CD741BCF3E19A3AD3094F5C09CE8CE5C82D606AB2
BCD7AB93A8795AA46773CFDEA403758BE344FB336DF35BD4B32289F7FE8C66A6
A82D7D7565DCD1665E8A0DB0EA0084F2453B89F74EECFA2471538565CC13ADC9
2551B57F617D13D190A8AC6287644374DCCA54110505BF29411E0A908DB4E1BC
AEF75C34B1C0A3ED7E90A8F857C2F54BA01FAAC221D701C67236E08C7EAF707E
911DD383BE2942320C8F54044AA6A13F05A35BA573CC358539026F0F27B249EB
F2C31AEA9D19FABD571A8560F3C8EE3A7AE59C665CD642F51EF1EBA346173955
0F924194E8BB270EAAA64FE96AC960F649C3503F0C3FDD6706C5B8623C587885
1829764ECD7CEEE9FFA5CED0BB91109C7DA885DD96133A5C61C2AC5627E78189
ECCF069A8017C6D9FFCC675A697FB4FD13B975DD0AB05A28E56DBA71B349EFA1
2039477209F9EDEBF8257AFBD120568797D0A56138DE40A92A7AE07866B1F040
B42849BB161F8C5058DA20F5AD9A90189F1ECB563D4909081BBEA2BE164FD761
EE98BDE3AA319D965595338AAC667E1A3CD1842FBCD943528AD31141D29E0706
7E06058C7008C0C95AEFBACC216C1DD8306DDF75AC1180D9B30ADCA9387FCAB2
6D2E772D4973C92CC976AF06D7CBB5667BC5737A681810F75F4AC739B5D1D032
2B08C610708617F736363D15A2B6CF41D4B25FA514BAB9F71497FB0B5F6FE0FB
86C51BA74214BEFA07008ABC73E686EE07A200DEBE36AF7BF35C54936D8CEE92
C413FF48201722EEDEE2741AB69B5B099FF5A7A809C94120A56D939C8205A8E7
97DC888B65AA93089A14DF8F5DA10E7729AEFF7D3CF49ADA55F1F20E70A1F40F
F9EE3A06766DB1C758A8D75A32116FC143C27FFA13C36CD64A49A5B1B43A8A1E
C6CE1449211854A1D5C0B6A39A2C17A52951CB78ABC080281C89A826B6D1E513
DE768C4F3361C02C2686DBC5251D2D384832D73E2C650D7230A870D65EBDF3F1
C347325AD116A8FA84C79E42C0848BCBE83FF24282BEFFBB763CCB7875982862
96A7FD8AA5517B2307EB3C44EC877FCE4E7BF9600DA49BD69E7E6736A1EBA7C8
0C46ABA39ED091B16ED320603129F6AB6AB0D9DECB5B4CD2F5F8C0F1B239C149
AC4C832859E0F9DF5BD677EE9BF4FE6CEF39006A2DBC4A0181CAB1822B77D922
2FE7CCE94227FF4DC0C683E5FE4C18CA96E889C36DAF2D9A65E1FCF4A6659231
0E2BADA50A28342A2B7093A3F7314F4F656E97438B5DE06BA3673DD434B01E89
016AEEE494880B8E01DEEFB257B2A5D6AE034EAC20E15E45B99E4E0638BCAF0B
FFD1FB2B5365A6CEBCE6C0A07F6160C1E165530E86449A885DA6C6856048C440
03AC34E0C6B4011D1FADA87E8CE3FC943AA32D2E5C8F1CA4E6EB621BD38C0D83
334374BE9F86DE803837E8C78EAA85868CB853A3863D766BCA5C1FD7DEBC1D2A
EF0F6565930ADF4CBF421EEFB33EEA80D855B606FA9B57080B8786052C598771
483D668221C3D21B072AA0B8373C97DDBFD7445AF098F00D0CA4B0D9C960AB1E
F0B82A4941404FB4F240059996842AF50BBED0BBE3BA0D089E11BD8BEC957381
D441FB764E1A05A4D64FD0AB74631A35230401234B358740B800143C19A69E25
FA0A54B7CE7474D1C01DACD98605A52BE3B4C5765C74848B9FA905722F3179E6
5999D00DD1F0E09303F8F6B66390125F792699F15AE7E181FE3ABC4B4C70E21F
3AD9A80DB07DC12DA4335EF6B9C7A662C7F18E42DE5D1BE5FCE925A4EFEF438B
82E8364B18077E8A2D556473D092A61C78C8CB1E67417FA33AA0688B49938616
1B4BD1FCD02748702398DF710A00EB56EA652E5BBA68FB0D443C27A5ADF9D24B
2EB524C6AABD7EFB03CF1B8F6668C8B55FBBEC2D19DDBEAE493FEDD3FBEE6667
EDA6AF0524CE3DF78F9D12E6298288601F1EC2134C63CC7C4BDF7750D8846C7E
44ABC9F2A6F66D76500DC159815C02D5473B4CBBC19134AB3C692C6647FAB361
2AF3AEDFDA07064682131D9E4CB3E69641D3795AB67934B16BD1AB63701D2E20
73FF500114962E610D7BE1ECB505FC2988F0025734649FE5449DD1BA7DE9ABEA
28C4E2496F8761C0638D5A177C3DBAB84A96C2D9BC543C24439BB8F9521BCD16
5C43CBA3F680A07649CB0BC7A85AC43F9D158B9CA2FC23E5DAD8AA90368B31AB
3110CB25D6A3C6CCA7B9E2DB36ECB6169EBAF065E1A670669957BA83B7A93D7A
9661DF32F2D4BD16E0C6211FB212DEEDAB353DAD46B7E80CECC378BD7ABAC95A
C08D0C7C6F449622CCA6D89A92C036531BAE623755FB69E8DCC3FDBC30EAF5F5
6DBF9FF3B37E71F1EA9B963122A1A7319AF304ABECAC33A8DEEA9AF1D9B7FD1A
9DCCBDB20A19D7D09EEAC0FA4843261A767CC97B3035C62C909755EB75BD8C8B
15B696B4D8A6BDAD2678A4D92F4ADBAE2F4440495058AC53367DA437DA9EC0E7
293F5406315D691E49355A59CC5E543D7985B142D255D9CF6EF11271FEA3EE1C
24530AD38AB25B0DE748D8715FB8582B4EE087B90ADAD7EDDAD3FBCE05372BF2
B9729D821A95E113828FC83BAAC642E71A40686784C38EF040CCF53D9B6D7BAC
4228401EA3D036F3BAFED241C6DC046D55B75EA797E0EC949C5E65CB77D4B05A
F3AA6DCDD0611E20E3049E16BAE92322AB847F88919FCAF407C96C3AA0B2F20F
09BD3139264C2580BDA66B52594D5820D99C7C2C98C0799EACB3023C95EFF98D
A779BC4F16A098CEB09C15F4F7E114B3D497135F9526FCE4D159A2DDA399CAE4
EA195DF9C0085C72A1261B1790AB9B05CACC91FBA92A0C51AE000C830EC4A6D3
663AFF2DE36A2249BFD2DF460161D3EA5C1E23598A55BDAD410D13310D332113
ACDC8BE5129A3B463DE9817CD17409AE305169544E48CDBD4BE66361F753D5CA
4682E15DB5F53ABA109799C10F25FA2E54560FD9CEC9514BD77A293EF8593996
C53735C1B0468104D0295D42707E41F4ED7522693164D8A8853C695C665F456A
97D66FCABEAAA6D87458CCF25F198AA55DBC4F8AFB21AD2040493803D47C96A2
745580EDC957AC4291730A86E302C5ADF247BCFFC4BFA4DFE3FD4AE99F5A8595
EA83FE105C9F8815EE6D17F25A1C8B7DA42FD174A42C50B1BE985823EA949742
5941EC3A8C8B68673C2D1A2560C2A1D7FB8DE91858D01C1A2C806C87B13FB864
90F54A7208B28C7DDA1FA6B8D4E5620CA5DB5603786A9F68F8FB6E99FEEC9528
2EAEB4A2D6E76D0D4946298381C2DA705BB5069F19A580755318BB1E2EFBFF40
67EBD927ECD3B5E0320C672715B6FCCE5549923A45928169754EFD6DAA3219E5
AF8DFD8B263DB061C5166C2B432B01750AD448731FB9B73D5994EF04A43779B8
D63BECEDCF4D80693CC680910285697C9DBF51F90CB40D65BF919B7FAC225581
E58CE7F78DDB940917756A2D719AE12C53BB3A29E016B7F259D4D3D6D1F0B067
37D3F368BFF332A750CAF8497E494C70B6520E59FA5987CEA4D8F5685C51A721
0CB2E626F2383C1CAB8F5D9079CC78A958BD373874792171A01D77C07385C9C2
7980E709E4D642D169A4543CC85F0CC42F01AD47430A287D7D0A9BB561FBBF41
4B399F45B188B00469201930BE3BAA9104DFEA7D363CC9F854AF7677CABB7247
FFED461F7A88F8971180CA1A0FDE68FC607364D550859170B4CA391D713F3A00
A36870A32C882177D42806D5DC56CAFD7BA86892B7BAB3BAB6049352EDE5612A
B895CEE0901707F717AB92EBE58A42B032C81CC0370D932C4A4120E219710676
6636F542497488077F5F527D08296ED66741FC89B8DEC03AA4910B9002F1E0A4
AA9EEED46E8871BD8FCABAABE7D709200F4F104535F0FDFF080176C321F77478
E1EA7C8D88CB5AAE193381665948141CA2FF95EC304694FEAA8215C8ACA26F23
E6F1E40C7FAFDE5C8CDBA5644BCEA126ED773A8D76848C07A5241121B9AA2161
85D4EFB2E11A6248C07CD22CDF0651128CE2956C78B8E542D4CBB4CEC8CE04E2
C0EE1D9E5DF11E8AE3E4D8D0B0B9A57FFD2AF29E515C087EDD0AA168B00F3C11
CE94B07C82E1DE1E43A4A52C625BE41A41B4E83E09AD7127BF672DA7C5F38BB4
DB0D01EB5DFC9E470CBFCCFB150AE9088E7695DF12540403F1E0A4AA9EEED46E
8871BD8FCABAABE7D709200F4F198793AD2B57A35AA33B5B047A5360273F9D31
AE422C487E80FDB79FB0CA9553B16FA5E8FF48CC39F01874740C89D06A0EB052
5FE1A4F80270D98AED645C23CDBE89ACACC875A9DCD0AD917242E8B3CC1983D4
F0302A61C41E33E7F6E75E29994EBA7BFA669EBE57C23DA2FB25FBFCA982EBF4
C3D113DF45488C62D0F2585855BBE79443A489F12B175E06D26A9BBE52E1F8AC
594D1FB97CC66F87A5FE280138023BDA6569691729EA004A3D96F0FBB300F401
A508F1B0626F3B6FCDE016EC757883083D7F28ED96633C97EAAD385BB85D7598
2F177C18BDC3634BCEBC021B8810A76B2B182FE2035F15CEACC47B532E2A0CD7
BD2DF20A68822A04965BDC89A31CDDA832A06CCA0A3916C8C8FFEBF34DE46C25
EC04EB599FADF1FB85E56461FA329F818359410E854CFBF08142EE7FE0DEFC6F
7406A4E23B2232A32E950DDB38150538211C84709AEE62E10D64939E3982F959
F3F94E95F7718FC482EBA468D3E38954279E5FBAA1987B47C02DA468E1B14054
46D985B9E75A108B79353D9CF772276AAE0A4B270E8385D9E3DCCAE2F30D96A9
C15CDCC17D90D3E1489973BED751C1233E6D4DF600BC13433D4FCA898BAA2CFA
D867906F9DEE56903E2328C8A85B721122FEF6C4B721ACC874FC2BCEF4935924
4D0D977F51A2583CC1F6D4C1D2E5EA316A091C458AD39667F2B4F61077B30ED8
92FE8D7940DE0F7D05AEC38EE039AFDF6E0A801C1C10780F7FF8981CB58461FC
DDB4714965E3B17A94744794F7E9056F784D6F6CA86D3591CD575F4DB294563D
C10550BDD4D62D3A415F7274E8E991A84795DA61B0E00C91D60564519C5524A8
3BBB0441D1ACFE4B66DA5235A26D3FB4136763E3861EF918B53E016834C4CDD4
98CD0369F3CC86A77DC5FC2D9AD27F8A67E78A456BD624439302113C4B84EABE
F6DB592943F362EB36B4CC9B35F52731B45F2F856646E9CB695D7C31EE4C4D06
827F25CD9598DABB64FCB8816811D8EE189E799A14BE3D8DCBD408A89A70E684
1F63488CA4C5FE0B0DAE30CCCC1E19DF7E2DFEDB8F10BE06FED538273CD29074
D82E8521BB57599BA20E77F7249C753F46700B475E00D41C17F9C9EFF3B323D3
DADF42D4314E240E1608583A43029F37E0604DE008D15FC407B6FF35E737DBBD
87C8E25E15C4F602D120FA3BDF5E36CFC585979EE37A2F623C81E17B3CCEE92C
80310F76CB845EB46BB2D2665E8A0DB0EA0084F2453B89F74EECFA24715384B5
D11FF7CEE32749C91435CB06331F25F4F0DEBA62912DC35BB71CE21A3E9C1D1A
B20BD6C6CAA328BF57F4F84062BE8AD8FD28A9EF8EEB25F6A230DC6AB0708EA9
0480D5076E3FA521B5941B4A74D09E1EC4F2201CA9FDAF3D46B5D481AAA4E046
4F52F36DC07ABAD3F725A7708C7A6ABA9A067DABC0B7529C9FF7C578B5B9A4E1
A8F60ABE2651BF27F03DCEF58B7EAD68370E4A0A6FDBB0B23D70924E2D36FEFA
77D26C34EDB9F2D1D494941B64CD9E3AAA6B4FDC1DA224656F15133D61C144DF
45E747C962AE6398F5B4DD2A2B49E3E433409D27604F3F841AE34A60D21372FA
85AE08E368090C563C046CE61B5581F23F115E9B49AE9F9D6D92EF617D16CCE3
C33595C2F2F772B9BA189990BC7A54CB9721D906B19CA3F1C51D8B70D386CEF7
0BAD9054EBA80472D3FF9889C7D5781064633EDC41FF0689E18855D22FA2B547
8D80FCBB49386EB93CB56A161C318A757B04DDBFE5FF8BF5257A549A4BA9866D
7620C3DF864820B86A6693CC2CB6FD995D95B1FED23A9544B7ECA5F729B45BE3
07232F92731C10C3330672C958477FDE48A067225C8E17CF1B43A482C44FE52E
57AF48D045432245147F456517EDB169E748EFD0EB462DA12B4E41C659CE4BDF
4907ADA234C6DE77DC4957B683947D50009DAB962B34C9800758D65160325837
F8FADACFD56BC5B7BEB54B3154F98DC9903276BA3F8AD278952CEC51009E863B
13F09F0538290332E9684C6E9B3ED5E27673FDA4F3E32D80CA5C31C59381BB9C
BAE9CD0987FAE1D22D07DA7A8F98AB3C25D174C3F95BC56EB11C65C6A8ED4630
A58A2C721B33B00E23D13AB2DB1F0E689716BF002F8ECC8F1599D9781D39D163
B0E3F00202802AF4206253C2D9A179652E32127A3C7B726EA6A44C37B48C25F9
A7D9EC050F757017DDE86DE00FC06260A77A1847F0A13CE43745164220E60C9D
802E47D5A4A38A97F0BE225C7B40BFE0515E704F2829AD026252C346CB31B2E9
ABBAD0D2186A09A878CE4621251A2E1689C0D9DB30324F35E3F41F7FCBEC699C
2392CC42083AD826C8204270CCE76467E3A1F8D5BAFDFD3DAC5A6BF1AE7201F6
E31EF557FDFA2A73486C829264B058D39F0CA5CF8FD85221D5F92139BDF11DEC
505B1920E5B089498CB0177E6DC6B89FD204E5235E57CC6849A365F9AD3859B6
65033E87DFAB3DCAAFFA291CFAACD7F664D76F914176B8626AE3FEB4F127D094
B167C7ECAD42D00304D4F8158F4177AEF0B44D466103BDAE0D6DF3697FF03DC8
CB9EDADC2F0A01F9BFDC190E29BA33396FC8598E56801F8070E2FF25C6754963
E1DDCD4A445A08ECB175BEA18A560B188B0AB3E7A64A4114153FEA7444C689CB
2917AD7ACADC778ED2784B3423154B7FC03D43F47C6F5672C28B3498FEDD429B
1B1B8550F2219E7EF9CC6498314E49BF0A476985495B8E94E473052F20C5E417
A6AFF6AD376AEE430D9DA4B82969DEBAC38EB82CF68A50A754785566779F2608
1CE1DCF8FCBF985B41005EA0771D946FD63DC8E3730E2148AD363D4043528377
7EFC51A37FCAB4AE827F193FB0719847EE80427203D42B5EA2E69755BE0A0255
ABDEB555EE5EA7AD4D7782A8387E49B8F47371262E7E4B05540EDA577F37E642
96DB70C7124AE3645646D62BE15BAEBD576BC2F24E6CD12944F86D178D41CA3B
FF447255A99CCE4EC0E8B418284452650AC9F77574624A37B48C6DAFB92FC1F2
1A4EC7894E2A0D7249942837524985AA22FC24BB92A180187245E9624CB60AEB
7A92E69D23E9FD278CD5F26788A7E5D8476DE8E2112289BC6C364AF28EF57723
60468066871591DE9DF8FA1E73A274E3990DF25D88067CCECFDBFE75F52D2032
CAC350B1FFFE0A6A33736CA5A0A7A75023BD9BFDD0C945FEE30CB34EE0281A60
063AA71E48DB8A35E05C2BEA18336BC3F3E3F3693001CD131D8C3330918BEBD9
6204FB87DA33C24A26C32A540E57220AD7ED50090ECB75DCE38F3D888B85E3A4
939C152ACE83809818D595F0902D8D115591F60E1486430C74C28271A98DD516
606C5DBC3A86EDC2E1F605F5D980FDEA5766B0696E5088257C95DBB994E1888E
DCDAE5A23B6BF34B50C7F36108352C201159121115079C80C962D5D7BB05276B
CC0D7BF78F14B0E819D6E4906AF5D75F5604649A562EF7ED02E1588EF549B088
9BA690305655BC02EDC17DE7F2984D788DCB3CB5D0A73CCC6B41191F3CB0ABA4
923EEF959BFDD97D63F9FD1B0C9CD7047CD36F52D70ED29F8CA83E60C79722DE
4CFDA09643E2C003A3F3E7DBD8C787BC2583F7CFD239A54A28BCF9B4E7440C28
CAFD01FDEF78BD5B80F9D71CBFCFF7CE58B0348BE7CFC56D0A09F542F3EE5DFB
1CA366166993A60472F6E9EB0B3AD046A46805E4EF9113B970F0D7557BD333B9
C711BC312DD3890F867542E70A39A4106BBDE8A50C31A0D4ADBDC5EBB3568B4D
D7BD55A25194727D5E6BA2A6D3208DADA9BEC15D38BBE1A55805AE9B1FE4523E
35F76D2422D40B37516B4640DF02828EA85898BACBF3CF9538D2F1A1E3A5460C
515E7A296D566F998E5030711C7DA4A346F8299E7AE0B303B1A0735D1C3F67D1
8E7EEFFC75C6A55487B565D5185E46DF458FC7A5E2768D210FA6E053B70C866F
DA9129DEF4FAE047EF40DAE260F7386837FE447CEA6BBAD9AFE97A125DF1B24B
71E2FB9A54D9A53AC2CCB4191E97160B441C5C3B71074CE04346A905320BDD74
8107231443506D18C38BA3552BC07C485334D74C7616FD9FA2606CC3C0CE9B58
E1EE6388C227159544DCF961A3D9BB062339DD254FDB098677C3AAB7B9D60C60
60927EC46753C5DCD1360804449BE5E63C58527D80798C7E721E811FB3079179
C1DDAA742E487BAE4D4700A54726D9B797E16F8188800660DF609CB7EBE273FC
8A1F9A6187C823F5330878398EC1D40AE22FA5A1ABE8D2A49C016333171EFB46
050FC0AB77D47C0CE077B55470D48F2FC6372FD93720B0D25F3A245C37868795
8F044A2D46A0B895F3873E37A48F5610D91239911E6F4E3A89016D3600DC93B6
2AAF29776F0C24698844B6DE04EAC41E27E9EB7815FFD45826E954B13EA01335
FE67538DC78069078C70C39350BF4A8B871F85CE814DED5CB00E8E855A5048FC
34E4190ADEDFFF74DC4FC7B77A0DE02070226D3AA70AD41A5F3A4427828A6CC6
FA5E86EF8E1F6F9F181D68DE48C7DF75C522ACAB9CB1FD4FE7FA919DAF1FF70F
079FEB9628B69403867D23DB7639A3CFB688C1610439A33E844B8E36205F69B2
7C7231082622BD4E3E50B189833BAAFA36B1567DA07529BA0B11B7A2C4019BD3
561D55C9E03EBB58DAC0A027AD686AC07CA66CB8168EA4AA7E3C90E2D1AB3CE6
458C987B708E04FBFA6F9870BEBFF196826A2F298A4A0D3C938AF2D3585073FE
A16607624AF78D1DB4C54FA85FF22A970A1C2207080A8BFB709B8421CC3D8D7C
AC8795D1F9CEA0EDC9B80EC514976A747B307A39122A3A8D231BF0EF737726E2
6ACDACB7EF058031819665D3C11C7DD226CFBA55A42820D16751C2849FC3F4EB
D2AA8DCF5C2DC63C6A0664475C3A9CB85AA3826DC176B64C51CCDEAE9F998533
145F340A6E7770D51AFE468134766447EB488A93DEE634E1D5E3EFA50D7A140A
3AF187C72B119B40F4D174618590A008D5D73B16B833097FA6532FBF4F3A3581
94B132E5D69D4B7A462A09D30F26B435D4A919EAE4050B0A1BC1B494350C210D
CBEF9D11982EA0E15B59430A8E3C62E5539D79026E09FE58BF5BA3D91D89058C
D04925317A8D8DDE345076E204177BB660E19A9997FF3489B0B67615479EB535
5B3D72EDA0CB5443583CAC803A076809D5767DEF32F0DF3BF7AD9309299E6DC9
10F4DD4657C898C940FDFE3F503590A22A103535800618071A084B390E29E4E0
6B1BF900618DFC271D9AA9B47772789C459B2F34686F9F376F5BC370B565D518
5E4B28D9E5BAD5B6494BEDC9B97DB017E71282E7BFAA7F5BC0956ED530FF1235
0EFC3783F3642E6E7A209CA9BE7C605D7967CD9D6AEF6E6680854F558673706C
F10571E7FE546DD9EBF6BE58EA621F6F8A63D0FCF313EA42DC7060AA15D8BAD4
C88A3A994DDF52537252F0609406806E4F83A0FD92A0CBAEF1AB8D1325FEDF74
70B373398A8C8D6DF75B14A46BCD718926AF17A5C564C26AF256965537F2E9BA
0C0DA138E9EF45E3CE89B109911F48C808843CAEE49A7DA8ECD985E393C4525C
AEDDF123BCD18929C959D1F6047AFE52887F8DB03D70F95C3630E84759A0E15F
093B48FF71E89625436E5E7C52D848C09B326F64EFEB0BC000EF8389C40757B0
743A47B5BBE477405C945C0ABCB6C42A4D00588C37D275BA77A14E222C76AD41
B6D9D85A8E4493DD30FF87A77AEEB7947AA431F438CE9AF1A1F3B05FD65493F7
49EC850EB1451F1D76BAFA9CA1468929A01B9E38E0ECA1328AFF526437C2116A
B1DE0E6D0BE709859D0F868BA09609A29F5E58EB63AB2045E5C95DF3E4979B05
CF0F8A3BAA8BF5B7E8BAFE4A33BF783F6629B3861D759C3A7F65E0D1D8FE5639
2710F34DA67104DACBF57F741CD2D79A22DE98B3EF67AEAD84CC8B785158FA79
2EA0DBA10F4C89BAEF477D99600509B02DC419200A3DC5D54F473D67AA4EC99D
360BB3F144A38329D9801A9CB6669EEC25217D7FEA8110F7C0298DBE10FE43D2
366F618430CD8C0C2EFA3B73C93F45F4A0470EC13AFB6E0AA72B8DCD6A74273F
5204CC10718C47AE2101092834D22A906F00445E3C3FCDB0C9B87618D46753C9
3B3370AEC22B344C68B451C68BA4AF5A248495EBAE826ED4827427804726AC07
4A5C3EE45B28AEFB5D771AA63578CC322FC9403115F79A72C364D0FC44D1EA80
E28798EFDD2C8512200D7144A19ABAF9C6B936D3991ECAB22C58A1678E0229CC
2191BEDB5685947D33CA88BBF0D65E8990B4A2888F96EF4B18F26F41ABB1E059
247E276E913D439C915F1B00F76168CB9C9C9EE5107968360AE8E9F5C769C3CC
F2F3A49E0F022F362DAEEE74FD1D16D282904556162ACF055B89C4E8F3D44EF8
2CA7D66B85F41D2F967AFBC940269F338D8B04A70D581AFCAB5C31A6C6D83AFF
E62856EBF91D31DAEEDDC22BABF2E68350A901684A92A750FCCEBADB539E9854
0D7022178AE1D4EE86778DD69EA901C0898672EFBD075202FB91D161ED3E8F73
4BF050E4F079DC6FC8936E38BCE680389EE630F9E5C739F4E340AA4CAFC5C297
0F6416C28268E8804F75E832E995AA2BE145DCC9DE3DD5EEF73FB1CAE1F05CCF
573C7469288AFE0817F9AB2AD42947B81548FAC075B0AC4EE8AD75A37C6CE671
9B7840D6F70165A8DB7B3E809A3BE911E01D32E280DFD2CC46023EEE36E14474
CCD22DAAAEDE4C476947012F6C784B2E7D37286221979D2BBEE5054F4B793515
97175C611F50D1E0BD7193AC6612EDDBDEECDBE056BC071E9840E591F319013D
9DF8A6E1C2ED09DF3B6AE8B55D7726C177BBEA354DBE463236304440040BFDF5
20757FC413DF75BE27F973AA31BE90115A17F62B95AE7A0579B3B90B6CFC3974
CE67E7B0B3618E10ECF1BC0FEDE0E69B807176BE7B18A7D0E406B654E47DA142
00128F53A17D8BB9B773AB17B7DB1F34123FF29B29CF1DEFD2E19872E0DC7923
349D748176A881B33381A8A9AB77EC3F7D9E24682C6BA86D7C297707E150DB78
3FCEBF2730D812FD614828DB03CD26A6E7155E0D732BF530FAC7F37FEAE3752F
86066F846AF5BC6163918B319E3CFC83D577208C8148D16339B87792FDA7258A
4A27126AACBC08FF841C05832658CEFC355BDFEC09B2D0236E4987AA4D548752
7D7BAADF92F83658DDDD2BAD5817B0C16254A69D1EBDDB7932EA983936A92026
B2246CA8860C5DE762FDBC9C4CB8E943F93A86088F59375D05AF6DBB55563D66
4D8DD1AB2E4334AD1A2F5605154463B570DD2FE4379565E2315D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000
(C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktional)
@start /Fa 203[993 1[993 50[{}2 1328.35 /wasy10 rf /Fb
242[1594 13[{ enclmmathsy ReEncodeFont }1 1594.02
/LMMathSymbols10-Regular rf /Fc 206[377 49[{ enclmrm ReEncodeFont }1
553.48 /LMRoman5-Regular rf /Fd 211[234 44[{ enclmec ReEncodeFont }1
664.176 /LMRoman6-Regular rf /Fe 255[640{ enclmmathsy ReEncodeFont }1
664.176 /LMMathSymbols6-Regular rf /Ff 140[435 11[448
452 3[403 39[261 32[540 25[{ enclmmathit ReEncodeFont }6
885.568 /LMMathItalic8-Regular rf /Fg 198[406 1[406 1[406
406 406 406 406 7[320 320 40[{ enclmrm ReEncodeFont }9
664.176 /LMRoman6-Regular rf /Fh 135[464 4[388 89[483
25[{ enclmmathit ReEncodeFont }3 664.176 /LMMathItalic6-Regular
rf /Fi 173[959 82[{}1 1328.35 /MSBM10 rf /Fj 135[497
17[288 60[366 366 40[{ enclmec ReEncodeFont }4 885.568
/LMRoman8-Regular rf /Fk 255[732{ enclmmathsy ReEncodeFont }1
885.568 /LMMathSymbols8-Regular rf /Fl 185[723 4[830
10[553 2[553 4[307 46[{ enclmec ReEncodeFont }5 1106.96
/LMRoman10-Regular rf /Fm 160[909 45[606 1[606 47[{
 enclmec ReEncodeFont }3 1212.12 /LMRoman10-Regular rf
/Fn 202[470 470 470 470 470 470 4[732 43[{ enclmrm ReEncodeFont }7
885.568 /LMRoman8-Regular rf /Fo 205[886 48[369 1033{
 enclmmathsy ReEncodeFont }3 1328.35 /LMMathSymbols10-Regular
rf /Fp 140[513 4[723 4[361 11[361 1[361 29[1012 1[361
1[650 650 2[650 650 650 650 650 650 6[506 506 40[{
 enclmrm ReEncodeFont }17 1328.35 /LMRoman12-Regular
rf /Fq 135[739 4[613 4[776 4[444 1[623 641 1[676 560
553 683 37[361 33[738 25[{ enclmmathit ReEncodeFont }12
1328.35 /LMMathItalic12-Regular rf /Fr 3[723 5[650 17[650
105[578 686 686 939 686 723 506 513 506 686 723 650 723
1084 361 686 397 361 723 650 397 578 723 578 723 650
6[795 2[1336 975 975 939 723 2[885 1012 2[813 1011 1[469
1[1021 849 885 993 939 921 975 1[614 4[361 650 650 650
650 650 650 650 650 650 2[361 434 361 2[506 506 6[361
3[723 1[759 27[{ enclmec ReEncodeFont }66 1328.35 /LMRoman12-Regular
rf /Fs 27[1046 105[956 3[1136 1196 837 849 879 1[1196
1076 1196 1793 1[1136 1[598 1196 1076 658 982 1196 956
1196 1046 6[1315 2[2223 1625 1[1497 1196 2[1470 1616
1682 2041 1293 1685 1[801 1682 1[1353 1412 1[1554 1530
1625 7[1076 1076 1076 1076 1076 1076 1076 1076 1076 1076
1076 598 717 45[{ enclmec ReEncodeFont }52 1912.83 /LMRoman12-Bold
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-2331 165 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a -2331
165 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a 1328 x Fs(F)-239
b(A)939 b(6.3)f(-)i(1)f(Wirkung)e(der)h(P)-60 b(arameter)940
b(einer)e(Sin)-60 b(usfunktion)935 b(-)-2331 4515 y(ZO)718
b(-)f(BIFIE)p 0 TeXcolorgray -741 7823 a Fr(1.)p 0 TeXcolorgray
651 w(Gegeb)36 b(en)433 b(ist)h(eine)f(Sin)-36 b(usfunktion)433
b(der)g(Art)g Fq(f)142 b Fp(\()p Fq(x)p Fp(\))369 b(=)g
Fq(a)295 b Fo(\001)g Fp(sin)6 b(\()p Fq(b)295 b Fo(\001)g
Fq(x)p Fp(\))p Fr(.)921 10368 y(Dab)36 b(ei)441 b(b)36
b(eein\035ussen)440 b(die)g(P)-36 b(arameter)441 b Fq(a)f
Fr(und)g Fq(b)g Fr(das)h(A)-36 b(ussehen)439 b(des)i(Graphen)e(v)-36
b(on)441 b Fq(f)582 b Fr(im)873 12360 y(V)-108 b(ergleic)-36
b(h)433 b(zum)h(Graphen)e(v)-36 b(on)434 b Fq(g)48 b
Fp(\()p Fq(x)p Fp(\))368 b(=)g(sin)7 b(\()p Fq(x)p Fp(\))p
Fr(.)921 14905 y(Ordne)294 b(den)g(P)-36 b(arameterw)g(erten)295
b(die)g(en)-36 b(tsprec)g(henden)293 b(A)-36 b(uswirkungen)295
b(auf)g(das)g(A)-36 b(ussehen)887 16897 y(v)g(on)434
b Fq(f)575 b Fr(im)434 b(V)-108 b(ergleic)-36 b(h)434
b(zu)f Fq(g)481 b Fr(zu!)p 0 TeXcolorgray 0 TeXcolorgray
2683 18605 4586 45 v 7268 18605 4523 45 v 2683 21864
45 3260 v 3391 20747 a Fq(a)369 b Fp(=)g(2)p 7224 21864
V 0.9 TeXcolorgray 7268 21864 4478 3260 v 0 TeXcolorgray
1 0 0 TeXcolorrgb 9011 20786 a Fr(D)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 11746 21864 45 3260
v 2683 21908 4586 45 v 7268 21908 4523 45 v 2683 25353
45 3445 v 3391 23950 a Fq(a)g Fp(=)5957 23427 y Fn(1)p
5957 23640 471 45 v 5957 24408 a(2)p 7224 25353 45 3445
v 0.9 TeXcolorgray 7268 25353 4478 3445 v 0 TeXcolorgray
1 0 0 TeXcolorrgb 9065 24090 a Fr(E)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 11746 25353 45 3445
v 2683 25397 4586 45 v 7268 25397 4523 45 v 2683 28656
45 3260 v 3391 27582 a Fq(b)g Fp(=)g(2)p 7224 28656 V
0.9 TeXcolorgray 7268 28656 4478 3260 v 0 TeXcolorgray
1 0 0 TeXcolorrgb 9038 27579 a Fr(C)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 11746 28656 45 3260
v 2683 28701 4586 45 v 7268 28701 4523 45 v 2683 32145
45 3445 v 3391 30742 a Fq(b)g Fp(=)5827 30219 y Fn(1)p
5827 30432 471 45 v 5827 31200 a(2)p 7224 32145 45 3445
v 0.9 TeXcolorgray 7268 32145 4478 3445 v 0 TeXcolorgray
1 0 0 TeXcolorrgb 8996 30882 a Fr(A)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 11746 32145 45 3445
v 2683 32190 4586 45 v 7268 32190 4523 45 v 0 TeXcolorgray
0 TeXcolorgray 12973 18605 4567 45 v 17540 18605 24476
45 v 12973 23660 45 5056 v 0.92 TeXcolorgray 13017 23660
4478 5056 v 0 TeXcolorgray 14745 21589 a(A)p 17495 23660
45 5056 v 18204 20465 a(Dehn)-36 b(ung)432 b(des)i(Graphen)e(der)h(F)
-108 b(unktion)433 b(en)-36 b(t-)18204 22456 y(lang)434
b(der)f(x-A)-36 b(c)g(hse)433 b(auf)h(das)g(Dopp)36 b(elte)p
41971 23660 V 12973 23704 4567 45 v 17540 23704 24476
45 v 12973 26963 45 3260 v 0.92 TeXcolorgray 13018 26963
4478 3260 v 0 TeXcolorgray 14796 25885 a(B)p 17495 26963
45 3260 v 18204 25756 a(Phasen)-36 b(v)g(ersc)g(hiebung)432
b(um)h(2)p 41971 26963 V 12973 27007 4567 45 v 17540
27007 24476 45 v 12973 30267 45 3260 v 0.92 TeXcolorgray
13018 30267 4478 3260 v 0 TeXcolorgray 14787 29188 a(C)p
17495 30267 45 3260 v 18204 29059 a(dopp)36 b(elte)433
b(F)-108 b(requenz)p 41971 30267 V 12973 30311 4567 45
v 17540 30311 24476 45 v 12973 35366 45 5056 v 0.92 TeXcolorgray
13017 35366 4478 5056 v 0 TeXcolorgray 14760 33296 a(D)p
17495 35366 45 5056 v 18204 32171 a(Strec)-36 b(kung)433
b(en)-36 b(tlang)433 b(der)g(y-A)-36 b(c)g(hse)433 b(auf)h(das)18204
34163 y(Dopp)36 b(elte)p 41971 35366 V 12973 35410 4567
45 v 17540 35410 24476 45 v 12973 38669 45 3260 v 0.92
TeXcolorgray 13018 38669 4478 3260 v 0 TeXcolorgray 14814
37591 a(E)p 17495 38669 45 3260 v 18204 37462 a(halb)g(e)433
b(Amplitude)p 41971 38669 V 12973 38714 4567 45 v 17540
38714 24476 45 v 12973 41973 45 3260 v 0.92 TeXcolorgray
13018 41973 4478 3260 v 0 TeXcolorgray 14832 40895 a(F)p
17495 41973 45 3260 v 18204 40766 a(V)-108 b(ersc)-36
b(hiebung)432 b(en)-36 b(tlang)433 b(der)g(y-A)-36 b(c)g(hse)434
b(um)f(-2)p 41971 41973 V 12973 42017 4567 45 v 17540
42017 24476 45 v 47992 7823 a Fm(___/1)p 1 0 0 TeXcolorrgb
48228 9815 a Fl(F)-123 b(A)369 b(6.3)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 48385 54804 45
v 0 TeXcolorgray 24746 81281 a Fr(1)p 0 TeXcolorgray
eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fs(F)-239 b(A)717 b(6.3)g(-)h(2)f(T)-179
b(rigonometrisc)-60 b(he)715 b(F)-179 b(unktion)715 b(-)j(O)-60
b(A)717 b(-)h(BIFIE)p 0 TeXcolorgray -741 4800 a Fr(2.)p
0 TeXcolorgray 651 w(Gegeb)36 b(en)433 b(ist)h(der)f(Graph)f(der)h(F)
-108 b(unktion)433 b Fq(f)142 b Fp(\()p Fq(x)p Fp(\))369
b(=)f(sin)6 b(\()p Fq(x)p Fp(\))p Fr(.)921 25854 y
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 432.59795 a add def
/d 0.0 a add neg def /h 163.20168 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 921
25854 a 24996 17317 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -56.90549 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 215.1083 0.0 -217.48964 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -199.1692 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 86.07458 0.0 -77.12709   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 44.69359 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 215.1083  0 -217.48964  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -217.48964
 215.1083  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-77.12709  def /maxTickline 86.07458  def /dT 5858050 abs 65536 div
viceversa { neg } if def /DT 3.141592653589793 abs viceversa { neg
} if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT
0 def } ifelse -2.0 0.0 /tickend exch def /tickstart exch def /Twidth
0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0  setgray
 } def /subTColor { 0.5  setgray  } def /MinValue { xStart } def /MaxValue
{ xEnd 3.0 2.  CLW mul add 1.4  mul viceversa { add epsilon sub }{
sub epsilon add } ifelse } def /logLines { false } def /LSstroke {
 0  setlinejoin 0  setlinecap stroke stroke} def /subLSstroke {  0
 setlinejoin 0  setlinecap stroke stroke} def 0 dT MaxValue 1 add {
/cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for subTwidth SLW subTColor subLSstroke grestore stroke
/dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT
add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick
minTickline STsize mul  moveto cntsubTick maxTickline STsize mul  lineto
} { cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick dsubT
add def } repeat subTwidth SLW subTColor subLSstroke grestore } if
showOrigin { gsave false { cntTick minTickline  moveto cntTick maxTickline
 lineto } { cntTick tickstart  moveto cntTick tickend  lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for /dsubT
0 def subTwidth SLW subTColor subLSstroke grestore } dsubT abs 0 gt
{ gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart  moveto cntTick tickend 
lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true def
} ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 86.07458
0.0 -77.12709   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 215.1083
0.0 -217.48964 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 86.07458  0 -77.12709  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -77.12709
 86.07458  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-217.48964  def /maxTickline 215.1083  def /dT 3729358 abs 65536 div
viceversa { neg } if def /DT 2. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 86.07458
0.0 -77.12709   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 215.1083
0.0 -217.48964 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 23751 11303 a
Fn(2)23019 23855 y Fk(\000)p Fn(2)24996 17317 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 24996
17317 a 24996 17317 a
tx@Dict begin  { 215.1083 86.07458 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 24996 17317 a 24996 17317 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 24996
17317 a 24653 17603 a Fr(x)24996 17317 y
tx@Dict begin  PutEnd  end
 24996 17317
a 24996 17317 a
tx@Dict begin  PutEnd  end
 24996 17317 a 24996 17317 a
tx@Dict begin  gsave STV CP T /ps@refangle -30.  def grestore  end
 24996 17317
a 24996 17317 a
tx@Dict begin  { 0.0 0.0 pop 215.1083 86.07458 exch pop } PutCoor PutBegin
 end
 24996 17317 a 24996 17317 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -30.  Uput UUput } PutCoor PutBegin
 end
 24996 17317
a 23948 17649 a Fr(f\(x\))24996 17317 y
tx@Dict begin  PutEnd  end
 24996 17317 a
24996 17317 a
tx@Dict begin  PutEnd  end
 24996 17317 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -7.643890198234905 def /x1 7.560199111086908
def /dx x1 x sub 199 div def /F@pstplot (SIN(x))  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end


@endspecial 24996 17317 a
tx@Dict begin  { 83.72667 -2.64442 } PutCoor PutBegin  end
 24996 17317 a 572 x Fq(\031)24996
17317 y
tx@Dict begin  PutEnd  end
 24996 17317 a 24996 17317 a
tx@Dict begin  { 179.85974 -3.74197 } PutCoor PutBegin  end
 24996 17317 a 836
x Fp(2)p Fq(\031)24996 17317 y
tx@Dict begin  PutEnd  end
 24996 17317 a 24996 17317
a
tx@Dict begin  { -89.3125 -4.47395 } PutCoor PutBegin  end
 24996 17317 a 775 x Fo(\000)p Fq(\031)24996 17317 y
tx@Dict begin  PutEnd  end

24996 17317 a 24996 17317 a
tx@Dict begin  { -176.90012 -3.37598 } PutCoor PutBegin  end
 24996 17317 a 836 x Fo(\000)p
Fp(2)p Fq(\031)24996 17317 y
tx@Dict begin  PutEnd  end
 24996 17317 a 1 0 0 TeXcolorrgb
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -7.643890198234905
def /x1 7.560199111086908 def /dx x1 x sub 199 div def /F@pstplot (2.0*SIN(x))
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinecap
[  2.0  2.0 ] 0 0 add  DashLine  grestore end
 
@endspecial 0 0 0 TeXcolorrgb
24996 17317 a
tx@Dict begin  { -203.06964 -7.96759 } PutCoor PutBegin  end
 24996 17317 a -222 x Fj(f\(x\))24996 17317
y
tx@Dict begin  PutEnd  end
 24996 17317 a 1 0 0 TeXcolorrgb 0 TeXcolorgray 48808
25854 a
currentpoint initclip moveto
 48808 25854 a 921 32384 a Fr(Zeic)-36 b(hne)387
b(in)h(die)g(gegeb)36 b(enen)388 b(Abbildung)f(den)g(Graphen)g(der)g(F)
-108 b(unktion)387 b Fq(g)48 b Fp(\()p Fq(x)p Fp(\))368
b(=)h(2)202 b Fo(\001)g Fp(sin)7 b(\()p Fq(x)p Fp(\))921
34376 y Fr(ein.)47992 4800 y Fm(___/1)p 1 0 0 TeXcolorrgb
48228 6792 a Fl(F)-123 b(A)369 b(6.3)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 36412 54804 45
v 0 TeXcolorgray 24746 81281 a Fr(2)p 0 TeXcolorgray
eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fs(F)-239 b(A)555 b(6.3)g(-)h(3)f(V)-179
b(ariation)554 b(einer)g(trigonometrisc)-60 b(hen)554
b(F)-179 b(unktion)552 b(-)k(O)-60 b(A)-2617 4515 y(-)718
b(BIFIE)p 0 TeXcolorgray -741 7823 a Fr(3.)p 0 TeXcolorgray
651 w(Gegeb)36 b(en)433 b(ist)h(der)f(Graph)f(der)h(F)-108
b(unktion)433 b Fq(f)142 b Fp(\()p Fq(x)p Fp(\))369 b(=)f(sin)6
b(\()p Fq(x)p Fp(\))p Fr(.)921 39800 y
 currentpoint currentpoint translate 1.60463 1.60463 scale neg exch
neg exch translate
 921 39800 a 921
39800 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 202.56255 a add def
/d 0.0 a add neg def /h 163.20168 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 921 39800 a 1730 31748 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -56.90549 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 195.25313 0.0 -7.30942 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 5 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 90.46562 0.0 -72.73605   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 44.69359 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 195.25313  0 -7.30942  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -7.30942
 195.25313  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-72.73605  def /maxTickline 90.46562  def /dT 5858050 abs 65536 div
viceversa { neg } if def /DT 3.141592653589793 abs viceversa { neg
} if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT
0 def } ifelse -2.0 0.0 /tickend exch def /tickstart exch def /Twidth
0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0  setgray
 } def /subTColor { 0.5  setgray  } def /MinValue { xStart } def /MaxValue
{ xEnd 3.0 2.  CLW mul add 1.4  mul viceversa { add epsilon sub }{
sub epsilon add } ifelse } def /logLines { false } def /LSstroke {
 0  setlinejoin 0  setlinecap stroke stroke} def /subLSstroke {  0
 setlinejoin 0  setlinecap stroke stroke} def 0 dT MaxValue 1 add {
/cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for subTwidth SLW subTColor subLSstroke grestore stroke
/dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT
add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick
minTickline STsize mul  moveto cntsubTick maxTickline STsize mul  lineto
} { cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick dsubT
add def } repeat subTwidth SLW subTColor subLSstroke grestore } if
showOrigin { gsave false { cntTick minTickline  moveto cntTick maxTickline
 lineto } { cntTick tickstart  moveto cntTick tickend  lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for /dsubT
0 def subTwidth SLW subTColor subLSstroke grestore } dsubT abs 0 gt
{ gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart  moveto cntTick tickend 
lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true def
} ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 90.46562
0.0 -72.73605   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 195.25313
0.0 -7.30942 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 90.46562  0 -72.73605  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -72.73605
 90.46562  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-7.30942  def /maxTickline 195.25313  def /dT 3729358 abs 65536 div
viceversa { neg } if def /DT 2. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 90.46562
0.0 -72.73605   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 195.25313
0.0 -7.30942 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 485 25734 a Fn(2)-247
38287 y Fk(\000)p Fn(2)1730 31748 y
tx@Dict begin  gsave STV CP T /ps@refangle 100.  def grestore  end
 1730 31748 a 1730
31748 a
tx@Dict begin  { 195.25313 90.46562 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 1730 31748 a 1730 31748 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 100.  Uput UUput } PutCoor
PutBegin  end
 1730 31748 a 1387 32034
a Fr(x)1730 31748 y
tx@Dict begin  PutEnd  end
 1730 31748 a 1730 31748 a
tx@Dict begin  PutEnd  end
 1730 31748
a 1730 31748 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 1730 31748 a 1730 31748 a
tx@Dict begin  { 0.0 0.0 pop 195.25313 90.46562 exch pop } PutCoor
PutBegin  end
 1730 31748 a
1730 31748 a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 1730 31748 a 1387 31905 a Fr(y)1730 31748
y
tx@Dict begin  PutEnd  end
 1730 31748 a 1730 31748 a
tx@Dict begin  PutEnd  end
 1730 31748 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -0.2569031409586207 def /x1 6.862369312477791
def /dx x1 x sub 199 div def /F@pstplot (SIN(x))  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 1730 31748 a
tx@Dict begin  { 83.71841 -2.64442 } PutCoor PutBegin  end
 1730 31748 a 572
x Fq(\031)1730 31748 y
tx@Dict begin  PutEnd  end
 1730 31748 a 1730 31748 a
tx@Dict begin  { 179.49854 -3.74197 } PutCoor PutBegin  end
 1730
31748 a 837 x Fp(2)p Fq(\031)1730 31748 y
tx@Dict begin  PutEnd  end
 1730 31748
a 1730 31748 a
tx@Dict begin  { -89.33508 4.47395 } PutCoor PutBegin  end
 1730 31748 a 775 x Fo(\000)p Fq(\031)1730
31748 y
tx@Dict begin  PutEnd  end
 1730 31748 a 1730 31748 a
tx@Dict begin  { -176.86235 3.37598 } PutCoor PutBegin  end
 1730 31748 a 837 x
Fo(\000)p Fp(2)p Fq(\031)1730 31748 y
tx@Dict begin  PutEnd  end
 1730 31748 a 1 0 0
TeXcolorrgb @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -0.2569031409586207
def /x1 6.862369312477791 def /dx x1 x sub 199 div def /F@pstplot (SIN(2.0*x))
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinecap
[  2.0  2.0 ] 0 0 add  DashLine  grestore end
 
@endspecial 0 0 0
TeXcolorrgb 1730 31748 a
tx@Dict begin  { 1.69319 15.08556 } PutCoor PutBegin  end
 1730 31748 a -221 x Fj(f\(x\))1730
31748 y
tx@Dict begin  PutEnd  end
 1730 31748 a 1 0 0 TeXcolorrgb 0 TeXcolorgray
23344 39800 a
currentpoint initclip moveto
 23344 39800 a 921 39800 a
 currentpoint currentpoint translate 1 1.60463 div 1 1.60463 div scale
neg exch neg exch translate
 921 39800 a 4537
x Fr(Zeic)-36 b(hne)520 b(in)h(die)g(gegeb)36 b(ene)522
b(Abbildung)e(den)g(Graphen)g(der)g(F)-108 b(unktion)520
b Fq(g)48 b Fp(\()p Fq(x)p Fp(\))518 b(=)f(sin)6 b(\(2)p
Fq(x)p Fp(\))921 46329 y Fr(ein!)47992 7823 y Fm(___/1)p
1 0 0 TeXcolorrgb 48228 9815 a Fl(F)-123 b(A)369 b(6.3)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
48365 54804 45 v 0 TeXcolorgray 24746 81281 a Fr(3)p
0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fs(F)-239 b(A)717 b(6.3)g(-)h(4)f(Negativ)-60
b(e)717 b(Sin)-60 b(usfunktion)713 b(-)718 b(O)-60 b(A)718
b(-)f(BIFIE)p 0 TeXcolorgray -741 4800 a Fr(4.)p 0 TeXcolorgray
651 w(Gegeb)36 b(en)433 b(ist)h(der)f(Graph)f(der)h(F)-108
b(unktion)433 b Fq(f)142 b Fp(\()p Fq(x)p Fp(\))369 b(=)f(sin)6
b(\()p Fq(x)p Fp(\))p Fr(.)921 21241 y
 currentpoint currentpoint translate 0.74464 0.74464 scale neg exch
neg exch translate
 921 21241 a 1355
21241 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 432.59795 a add def
/d 0.0 a add neg def /h 163.20168 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1355 21241 a 25430 12704 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -56.90549 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 215.1083 0.0 -217.48964 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -199.1692 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 86.07458 0.0 -77.12709   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 44.69359 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 215.1083  0 -217.48964  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -217.48964
 215.1083  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-77.12709  def /maxTickline 86.07458  def /dT 5858050 abs 65536 div
viceversa { neg } if def /DT 3.141592653589793 abs viceversa { neg
} if def /subTNo 2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT
0 def } ifelse -2.0 0.0 /tickend exch def /tickstart exch def /Twidth
0.4  def /subTwidth 0.2  def /STsize 0.75 def /TColor { 0  setgray
 } def /subTColor { 0.5  setgray  } def /MinValue { xStart } def /MaxValue
{ xEnd 3.0 2.  CLW mul add 1.4  mul viceversa { add epsilon sub }{
sub epsilon add } ifelse } def /logLines { false } def /LSstroke {
 0  setlinejoin 0  setlinecap stroke stroke} def /subLSstroke {  0
 setlinejoin 0  setlinecap stroke stroke} def 0 dT MaxValue 1 add {
/cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for subTwidth SLW subTColor subLSstroke grestore stroke
/dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT
add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick
minTickline STsize mul  moveto cntsubTick maxTickline STsize mul  lineto
} { cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick dsubT
add def } repeat subTwidth SLW subTColor subLSstroke grestore } if
showOrigin { gsave false { cntTick minTickline  moveto cntTick maxTickline
 lineto } { cntTick tickstart  moveto cntTick tickend  lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for /dsubT
0 def subTwidth SLW subTColor subLSstroke grestore } dsubT abs 0 gt
{ gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart  moveto cntTick tickend 
lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true def
} ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 86.07458
0.0 -77.12709   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 215.1083
0.0 -217.48964 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 86.07458  0 -77.12709  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -77.12709
 86.07458  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-217.48964  def /maxTickline 215.1083  def /dT 3729358 abs 65536 div
viceversa { neg } if def /DT 2. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 86.07458
0.0 -77.12709   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 215.1083
0.0 -217.48964 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 24185 6690 a Fn(2)23453
19242 y Fk(\000)p Fn(2)25430 12704 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 25430 12704 a 25430
12704 a
tx@Dict begin  { 215.1083 86.07458 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 25430 12704 a 25430 12704 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 25430 12704 a 25087
12990 a Fr(x)25430 12704 y
tx@Dict begin  PutEnd  end
 25430 12704 a 25430 12704
a
tx@Dict begin  PutEnd  end
 25430 12704 a 25430 12704 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 25430 12704 a 25430 12704
a
tx@Dict begin  { 0.0 0.0 pop 215.1083 86.07458 exch pop } PutCoor PutBegin
 end
 25430 12704 a 25430 12704 a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 25430 12704 a 25087 12861
a Fr(y)25430 12704 y
tx@Dict begin  PutEnd  end
 25430 12704 a 25430 12704 a
tx@Dict begin  PutEnd  end
 25430
12704 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -7.643890198234902 def /x1 7.560199111086908
def /dx x1 x sub 199 div def /F@pstplot (SIN(x))  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 25430
12704 a
tx@Dict begin  { 83.72667 -2.64442 } PutCoor PutBegin  end
 25430 12704 a 571 x Fq(\031)25430 12704 y
tx@Dict begin  PutEnd  end
 25430
12704 a 25430 12704 a
tx@Dict begin  { 179.85974 -3.74197 } PutCoor PutBegin  end
 25430 12704 a 836 x Fp(2)p Fq(\031)25430
12704 y
tx@Dict begin  PutEnd  end
 25430 12704 a 25430 12704 a
tx@Dict begin  { -89.3125 -4.47395 } PutCoor PutBegin  end
 25430 12704 a 774
x Fo(\000)p Fq(\031)25430 12704 y
tx@Dict begin  PutEnd  end
 25430 12704 a 25430
12704 a
tx@Dict begin  { -176.90012 -3.37598 } PutCoor PutBegin  end
 25430 12704 a 836 x Fo(\000)p Fp(2)p Fq(\031)25430
12704 y
tx@Dict begin  PutEnd  end
 25430 12704 a 1 0 0 TeXcolorrgb @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0.86274 0.07843 0.23529  setrgbcolor
 /ArrowA { moveto } def /ArrowB { } def /ArrowInside { } def    /x
-7.643890198234902 def /x1 7.560199111086908 def /dx x1 x sub 199 div
def /F@pstplot (-SIN(x))  tx@AlgToPs begin AlgToPs end cvx def /xy
{ x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit false def xy
moveto  199 1 sub { /x x dx add def xy  dup 1.e30 28.45274 mul gt {
moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse
 } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy  dup 1.e30
28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto }
{ L } ifelse } ifelse  } if  gsave 1.2 SLW 0.86274 0.07843 0.23529
 setrgbcolor  1. .setopacityalpha   0  setlinecap [  2.0  2.0 ] 0 0
add  DashLine  grestore end
 
@endspecial 0 0 0 TeXcolorrgb 25430 12704
a
tx@Dict begin  { -191.32011 -26.26373 } PutCoor PutBegin  end
 25430 12704 a -222 x Fj(f\(x\))25430 12704 y
tx@Dict begin  PutEnd  end
 25430
12704 a 1 0 0 TeXcolorrgb 0 TeXcolorgray 49241 21241
a
currentpoint initclip moveto
 49241 21241 a 921 21241 a
 currentpoint currentpoint translate 1 0.74464 div 1 0.74464 div scale
neg exch neg exch translate
 921 21241 a 4538 x Fr(Zeic)-36
b(hne)520 b(in)h(die)g(gegeb)36 b(ene)522 b(Abbildung)e(den)g(Graphen)g
(der)g(F)-108 b(unktion)520 b Fq(g)48 b Fp(\()p Fq(x)p
Fp(\))518 b(=)f(sin)6 b(\(2)p Fq(x)p Fp(\))921 27770
y Fr(ein!)47992 4800 y Fm(___/1)p 1 0 0 TeXcolorrgb 48228
6792 a Fl(F)-123 b(A)369 b(6.3)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 29807 54804 45 v 0 TeXcolorgray
24746 81281 a Fr(4)p 0 TeXcolorgray eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fs(F)-239 b(A)519 b(6.3)g(-)g(5)g(P)-60
b(arameter)520 b(Sin)-60 b(us)517 b(-)j(O)-60 b(A)519
b(-)h(BIFIE)f(-)h(K)-60 b(omp)60 b(etenzc)-60 b(hec)g(k)-2385
4515 y(2016)p 0 TeXcolorgray -741 7823 a Fr(5.)p 0 TeXcolorgray
651 w(Die)865 b(nac)-36 b(hstehende)862 b(Abbildung)h(zeigt)i(den)e
(Graphen)f(der)i(F)-108 b(unktion)863 b Fq(s)h Fr(mit)g(der)921
9815 y(Gleic)-36 b(h)g(ung)433 b Fq(s)p Fp(\()p Fq(x)p
Fp(\))368 b(=)h Fq(c)295 b Fo(\001)g Fq(sin)p Fp(\()p
Fq(d)f Fo(\001)i Fq(x)p Fp(\))433 b Fr(mit)h Fq(c;)221
b(d)369 b Fo(2)g Fi(R)25070 9333 y Fn(+)26291 9815 y
Fr(im)433 b(In)-36 b(terv)-72 b(all)435 b Fp([)8 b Fo(\000)p
Fp(2)p Fq(\031)48 b Fp(;)221 b(2)p Fq(\031)48 b Fp(])p
Fr(.)921 46134 y
 currentpoint currentpoint translate 1.50288 1.50288 scale neg exch
neg exch translate
 921 46134 a 1355 46134 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 266.42926 a add def
/d 0.0 a add neg def /h 202.3472 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1355 46134
a 16119 36424 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81097 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 284.52744 0.0 -284.52744 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -113.81097 0.0 T 12
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 142.26372 0.0 -142.26372   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 133.04704  0 -133.38222  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -133.38222
 133.04704  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-87.71352  def /maxTickline 114.63368  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1 abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 114.63368
0.0 -87.71352   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 133.04704
0.0 -133.38222 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 114.63368  0 -87.71352  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -87.71352
 114.63368  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-133.38222  def /maxTickline 133.04704  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 114.63368
0.0 -87.71352   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 133.04704
0.0 -133.38222 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 14874 33560 a
Fn(1)14874 30410 y(2)14874 27261 y(3)14142 39813 y Fk(\000)p
Fn(1)14142 42963 y Fk(\000)p Fn(2)14142 46112 y Fk(\000)p
Fn(3)19016 37627 y Fh(\031)p 19016 37790 507 45 v 19066
38337 a Fg(2)22133 37989 y Ff(\031)25112 37627 y Fg(3)p
Fh(\031)p 25112 37790 913 45 v 25365 38337 a Fg(2)28197
37989 y Fn(2)p Ff(\031)12397 37627 y Fe(\000)p Fh(\031)p
12397 37808 1147 45 v 12767 38355 a Fg(2)9168 38007 y
Fk(\000)p Ff(\031)5895 37627 y Fe(\000)p Fg(3)p Fh(\031)p
5895 37808 1552 45 v 6468 38355 a Fg(2)2634 38007 y Fk(\000)p
Fn(2)p Ff(\031)16119 36424 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 16119 36424 a 16119 36424
a
tx@Dict begin  { 133.04704 114.63368 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 16119 36424 a 16119 36424 a
tx@Dict begin  { 5.0 0.0 0.0 0.0 140.  Uput UUput } PutCoor PutBegin
 end
 16119 36424 a 16119 36424
a
tx@Dict begin  PutEnd  end
 16119 36424 a 16119 36424 a
tx@Dict begin  PutEnd  end
 16119 36424 a 16119 36424
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 16119 36424 a 16119 36424 a
tx@Dict begin  { 0.0 0.0 pop 133.04704 114.63368 exch pop } PutCoor
PutBegin  end
 16119 36424 a 16119 36424
a
tx@Dict begin  { 5.0 35.45888 4.5 1.5 -40.  Uput UUput } PutCoor PutBegin
 end
 16119 36424 a 14157 36590 a Fh(s)p Fg(\()p Fh(x)p Fg(\))p
Fd(,)276 b Fh(s)16547 36710 y Fc(1)16979 36590 y Fg(\()p
Fh(x)p Fg(\))16119 36424 y
tx@Dict begin  PutEnd  end
 16119 36424 a 16119 36424
a
tx@Dict begin  PutEnd  end
 16119 36424 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -10 def /x1 20 def /dx x1 x sub
199 div def /F@pstplot (SIN(0.5*x))  tx@AlgToPs begin AlgToPs end cvx
def /xy { x 18.11378 mul F@pstplot 28.45274 mul } def  /ps@Exit false
def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 28.45274 mul
gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
1 0 0 TeXcolorrgb @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -10 def /x1 20 def /dx x1 x sub
199 div def /F@pstplot (2*SIN(x))  tx@AlgToPs begin AlgToPs end cvx
def /xy { x 18.11378 mul F@pstplot 28.45274 mul } def  /ps@Exit false
def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 28.45274 mul
gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
0 0 0 TeXcolorrgb 16119 36424 a
tx@Dict begin  { -45.18982 -36.70168 } PutCoor PutBegin  end
 16119 36424 a Ff(s)16119
36424 y
tx@Dict begin  PutEnd  end
 16119 36424 a 1 0 0 TeXcolorrgb 16119 36424 a
tx@Dict begin  { -45.18982 -36.70168 } PutCoor PutBegin  end

16119 36424 a -123 x Ff(s)16554 36424 y Fg(1)16119 36424
y
tx@Dict begin  PutEnd  end
 16119 36424 a 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 30847 46134
a
currentpoint initclip moveto
 30847 46134 a 921 46134 a
 currentpoint currentpoint translate 1 1.50288 div 1 1.50288 div scale
neg exch neg exch translate
 921 46134 a 4537 x Fr(Erstelle)347
b(im)h(obigen)f(K)-36 b(o)36 b(ordinatensystem)348 b(eine)f(Skizze)g
(eines)h(m\366glic)-36 b(hen)347 b(F)-108 b(unktionsgra-)921
52663 y(phen)432 b(der)h(F)-108 b(unktion)433 b Fq(s)12499
52862 y Fn(1)13458 52663 y Fr(mit)h Fq(s)16456 52862
y Fn(1)16981 52663 y Fp(\()p Fq(x)p Fp(\))369 b(=)g(2)p
Fq(c)295 b Fo(\001)g Fq(sin)p Fp(\(2)p Fq(d)g Fo(\001)g
Fq(x)p Fp(\))434 b Fr(im)g(In)-36 b(terv)-72 b(all)434
b Fp([)8 b Fo(\000)p Fp(2)p Fq(\031)48 b Fp(;)221 b(2)p
Fq(\031)48 b Fp(])q Fr(.)47992 7823 y Fm(___/1)p 1 0 0
TeXcolorrgb 48228 9815 a Fl(F)-123 b(A)369 b(6.3)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 55031
54804 45 v 0 TeXcolorgray 24746 81281 a Fr(5)p 0 TeXcolorgray
eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1599 a Fs(F)-239 b(A)766 b(6.3)h(-)g(6)g(Sin)-60
b(usfunktion)762 b(-)767 b(O)-60 b(A)767 b(-)g(Matura)g(2014/15)f(-)h
(Haupt-)-2331 4622 y(termin)p 0 TeXcolorgray -741 7929
a Fr(6.)p 0 TeXcolorgray 651 w(Die)525 b(nac)-36 b(hstehende)523
b(Abbildung)g(zeigt)i(den)e(Graphen)g(einer)h(F)-108
b(unktion)524 b Fq(f)666 b Fr(mit)525 b Fq(f)142 b Fp(\()p
Fq(x)p Fp(\))523 b(=)921 9921 y Fq(a)295 b Fo(\001)g
Fp(sin)6 b(\()p Fq(b)295 b Fo(\001)h Fq(x)p Fp(\))433
b Fr(mit)h Fq(a;)221 b(b)369 b Fo(2)g Fi(R)p Fr(.)p 0
TeXcolorgray 0 TeXcolorgray 3170 32404 a
 currentpoint currentpoint translate 0.88403 0.88403 scale neg exch
neg exch translate
 3170 32404 a
3603 32404 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 409.7186 a add def
/d 0.0 a add neg def /h 204.86014 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 3603 32404 a 7383 21065 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -199.16925 T 15
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 853.58261 0.0 -853.58261 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -128.03738 0.0 T 15
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 284.52751 0.0 -284.52751   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 42.67912 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 375.57582  0 -144.07202  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -144.07202
 375.57582  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-175.42708  def /maxTickline 102.43007  def /dT 5594039 abs 65536 div
viceversa { neg } if def /DT 1 abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 85.35826  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 85.35826
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 102.43007
0.0 -175.42708   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 375.57582
0.0 -144.07202 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 102.43007  0 -175.42708  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -175.42708
 102.43007  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-144.07202  def /maxTickline 375.57582  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT .5 abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 56.9055  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 56.9055  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 102.43007
0.0 -175.42708   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 375.57582
0.0 -144.07202 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
5406 18201 a Fn(0)p Ff(:)p Fn(5)5406 15051 y(1)p Ff(:)p
Fn(0)5406 11901 y(1)p Ff(:)p Fn(5)4674 24454 y Fk(\000)p
Fn(0)p Ff(:)p Fn(5)4674 27603 y Fk(\000)p Fn(1)p Ff(:)p
Fn(0)4674 30753 y Fk(\000)p Fn(1)p Ff(:)p Fn(5)4674 33903
y Fk(\000)p Fn(2)p Ff(:)p Fn(0)4674 37052 y Fk(\000)p
Fn(2)p Ff(:)p Fn(5)4674 40202 y Fk(\000)p Fn(3)p Ff(:)p
Fn(0)16578 22268 y Fh(\031)p 16578 22431 507 45 v 16628
22977 a Fg(2)25994 22630 y Ff(\031)35273 22268 y Fg(3)p
Fh(\031)p 35273 22431 913 45 v 35526 22977 a Fg(2)44657
22630 y Fn(2)p Ff(\031)-2639 22264 y Fe(\000)p Fh(\031)p
-2639 22445 1147 45 v -2269 22991 a Fg(2)7383 21065 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end

7383 21065 a 7383 21065 a
tx@Dict begin  { 375.57582 102.43007 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 7383 21065 a 7383 21065 a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 7383
21065 a 7013 21351 a Fq(x)7383 21065 y
tx@Dict begin  PutEnd  end
 7383 21065 a 7383
21065 a
tx@Dict begin  PutEnd  end
 7383 21065 a 7383 21065 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 7383 21065 a 7383 21065
a
tx@Dict begin  { 0.0 0.0 pop 375.57582 102.43007 exch pop } PutCoor
PutBegin  end
 7383 21065 a 7383 21065 a
tx@Dict begin  { 5.0 22.88857 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 7383 21065 a 6116 21397 a
Fq(f)142 b Fp(\()p Fq(x)p Fp(\))7383 21065 y
tx@Dict begin  PutEnd  end
 7383 21065
a 7383 21065 a
tx@Dict begin  PutEnd  end
 7383 21065 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -10 def /x1 30 def /dx x1 x sub
399 div def /F@pstplot (0.5*SIN(x))  tx@AlgToPs begin AlgToPs end cvx
def /xy { x 18.11378 mul F@pstplot 56.9055 mul } def  /ps@Exit false
def xy moveto  399 1 sub { /x x dx add def xy  dup 1.e30 56.9055 mul
gt { moveto } { dup -1.e30 56.9055 mul lt { moveto } { L } ifelse }
ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy  dup
1.e30 56.9055 mul gt { moveto } { dup -1.e30 56.9055 mul lt { moveto
} { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial 7383 21065 a
tx@Dict begin  { -135.56953 -73.40337 } PutCoor PutBegin  end
 7383 21065 a -172 x Ff(f)7383
21065 y
tx@Dict begin  PutEnd  end
 7383 21065 a 48957 32404 a
currentpoint initclip moveto
 48957 32404 a 3170
32404 a
 currentpoint currentpoint translate 1 0.88403 div 1 0.88403 div scale
neg exch neg exch translate
 3170 32404 a 921 38380 a Fr(Gib)433 b(die)g(f\374r)h(den)f
(abgebildeten)g(Graphen)f(passenden)h(P)-36 b(arameterw)g(erte)433
b(v)-36 b(on)434 b Fq(f)576 b Fr(an.)921 42917 y Fq(a)369
b Fp(=)p 3353 42917 15749 34 v 921 47455 a Fq(b)g Fp(=)p
3224 47455 V 1 0 0 TeXcolorrgb 921 50000 a Fq(a)g Fp(=)f(0)p
Fq(;)p Fp(5)921 51992 y Fq(b)h Fp(=)g(3)921 56529 y Fr(o)36
b(der:)921 61066 y Fq(a)369 b Fp(=)f Fo(\000)p Fp(0)p
Fq(;)p Fp(5)921 63058 y Fq(b)h Fp(=)g Fo(\000)p Fp(3)921
67596 y Fr(L\366sungssc)-36 b(hhl\374ssel:)921 69588
y(Ein)534 b(Punkt)g(f\374r)h(eine)f(k)-36 b(orrekte)535
b(Angab)36 b(e)535 b(b)36 b(eider)534 b(P)-36 b(arameterw)g(erte.)535
b(T)-108 b(oleranzin)-36 b(terv)-72 b(all)921 71580 y(f\374r)748
b Fq(a)p Fr(:)g Fp([)8 b(0)p Fq(;)p Fp(48;)221 b(0)p
Fq(;)p Fp(52])752 b Fr(bzw.)e Fp([)8 b Fo(\000)p Fp(0)p
Fq(;)p Fp(52;)221 b Fo(\000)p Fp(0)p Fq(;)p Fp(48])752
b Fr(T)-108 b(oleranzin)-36 b(terv)-72 b(all)749 b(f\374r)e
Fq(b)p Fr(:)j Fp([)8 b(2)p Fq(;)p Fp(9;)221 b(3)p Fq(;)p
Fp(1])750 b Fr(bzw.)921 73571 y Fp([)8 b Fo(\000)p Fp(3)p
Fq(;)p Fp(1;)221 b Fo(\000)p Fp(2)p Fq(;)p Fp(9])p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 7929
a Fm(___/1)p 1 0 0 TeXcolorrgb 48228 9921 a Fl(F)-123
b(A)369 b(6.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 77379 54804 45 v 0 TeXcolorgray 24746
81281 a Fr(6)p 0 TeXcolorgray eop end
%%Page: 7 7
TeXDict begin 7 6 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1599 a Fs(F)-239 b(A)776 b(6.3)h(-)g(7)f(Sin)-60
b(usfunktion)773 b(-)k(ZO)g(-)g(Matura)f(2014/15)g(-)h(Neb)60
b(en-)-2331 4622 y(termin)717 b(1)p 0 TeXcolorgray -741
7929 a Fr(7.)p 0 TeXcolorgray 651 w(Gegeb)36 b(en)387
b(sind)h(die)g(Graphen)f(v)-36 b(on)388 b(vier)h(F)-108
b(unktionen)387 b(der)h(F)-108 b(orm)p Fq(f)142 b Fp(\()p
Fq(x)p Fp(\))368 b(=)h Fq(a)202 b Fo(\001)g Fp(sin)7
b(\()p Fq(b)202 b Fo(\001)g Fq(x)p Fp(\))388 b Fr(mit)921
9921 y Fq(a;)221 b(b)369 b Fo(2)g Fi(R)p Fr(.)921 14458
y(Ordne)432 b(jedem)i(Graphen)e(den)h(dazugeh\366rigen)h(F)-108
b(unktionsterm)432 b(\(aus)h(A)h(bis)f(F\))h(zu.)p 0
TeXcolorgray 0 TeXcolorgray 5246 16129 18896 45 v 24141
16129 4523 45 v 5246 30916 45 14788 v 5954 29971 a
 currentpoint currentpoint translate 0.57582 0.57582 scale neg exch
neg exch translate
 5954
29971 a 6388 29971 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 270.30106 a add def
/d 0.0 a add neg def /h 202.3472 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 6388 29971 a 14262 20262 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81097 T 20
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 284.52744 0.0 -284.52744 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 14.22636 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -56.90549 0.0 T 24
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 142.26372 0.0 -142.26372   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 14.22636 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 199.1692  0 -71.13185  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -71.13185
 199.1692  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-87.71352  def /maxTickline 114.63368  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1 abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 114.63368
0.0 -87.71352   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 199.1692
0.0 -71.13185 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 114.63368  0 -87.71352  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -87.71352
 114.63368  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-71.13185  def /maxTickline 199.1692  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 114.63368
0.0 -87.71352   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 199.1692
0.0 -71.13185 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
13017 17398 a Fn(1)13016 14248 y(2)13016 11098 y(3)12284
23651 y Fk(\000)p Fn(1)12284 26800 y Fk(\000)p Fn(2)12284
29950 y Fk(\000)p Fn(3)17158 21465 y Fh(\031)p 17158
21628 507 45 v 17208 22174 a Fg(3)20105 21465 y(2)p Fh(\031)p
20105 21628 913 45 v 20358 22174 a Fg(3)23424 21827 y
Ff(\031)26404 21465 y Fg(4)p Fh(\031)p 26404 21628 V
26657 22174 a Fg(3)29553 21465 y(5)p Fh(\031)p 29553
21628 V 29807 22174 a Fg(3)32638 21827 y Fn(2)p Ff(\031)10539
21465 y Fe(\000)p Fh(\031)p 10539 21646 1147 45 v 10909
22192 a Fg(3)7186 21465 y Fe(\000)p Fg(2)p Fh(\031)p
7186 21646 1552 45 v 7759 22192 a Fg(3)14262 20262 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end

14262 20262 a 14262 20262 a
tx@Dict begin  { 199.1692 114.63368 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 14262 20262 a 14262 20262
a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 14262 20262 a 13892 20548 a Fq(x)14262 20262 y
tx@Dict begin  PutEnd  end
 14262
20262 a 14262 20262 a
tx@Dict begin  PutEnd  end
 14262 20262 a 14262 20262 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 14262
20262 a 14262 20262 a
tx@Dict begin  { 0.0 0.0 pop 199.1692 114.63368 exch pop } PutCoor
PutBegin  end
 14262 20262 a 14262 20262 a
tx@Dict begin  { 5.0 26.35733 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 14262
20262 a 12803 20594 a Fq(f)13444 20793 y Fn(1)13970 20594
y Fp(\()p Fq(x)p Fp(\))14262 20262 y
tx@Dict begin  PutEnd  end
 14262 20262 a 14262
20262 a
tx@Dict begin  PutEnd  end
 14262 20262 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -10 def /x1 20 def /dx x1 x sub
599 div def /F@pstplot (2*SIN(2*x))  tx@AlgToPs begin AlgToPs end cvx
def /xy { x 18.11378 mul F@pstplot 28.45274 mul } def  /ps@Exit false
def xy moveto  599 1 sub { /x x dx add def xy  dup 1.e30 28.45274 mul
gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
14262 20262 a
tx@Dict begin  { 85.35823 42.67911 } PutCoor PutBegin  end
 14262 20262 a -172 x Ff(f)14714 20213 y
Fg(1)14262 20262 y
tx@Dict begin  PutEnd  end
 14262 20262 a 36309 29971 a
currentpoint initclip moveto
 36309
29971 a 5954 29971 a
 currentpoint currentpoint translate 1 0.57582 div 1 0.57582 div scale
neg exch neg exch translate
 5954 29971 a 24097 30916 45 14788
v 0.9 TeXcolorgray 24141 30916 4478 14788 v 0 TeXcolorgray
1 0 0 TeXcolorrgb 25956 23980 a Fr(F)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 28619 30916 45 14788
v 5246 30960 18896 45 v 24141 30960 4523 45 v 5246 45748
45 14788 v 5954 44803 a
 currentpoint currentpoint translate 0.57582 0.57582 scale neg exch
neg exch translate
 5954 44803 a 6388 44803 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 270.30106 a add def
/d 0.0 a add neg def /h 202.3472 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 6388
44803 a 14262 35094 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81097 T 20
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 284.52744 0.0 -284.52744 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 14.22636 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -56.90549 0.0 T 24
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 142.26372 0.0 -142.26372   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 14.22636 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 199.1692  0 -71.13185  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -71.13185
 199.1692  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-87.71352  def /maxTickline 114.63368  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1 abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 114.63368
0.0 -87.71352   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 199.1692
0.0 -71.13185 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 114.63368  0 -87.71352  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -87.71352
 114.63368  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-71.13185  def /maxTickline 199.1692  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 114.63368
0.0 -87.71352   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 199.1692
0.0 -71.13185 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 13017 32229 a
Fn(1)13016 29080 y(2)13016 25930 y(3)12284 38482 y Fk(\000)p
Fn(1)12284 41632 y Fk(\000)p Fn(2)12284 44782 y Fk(\000)p
Fn(3)17158 36297 y Fh(\031)p 17158 36460 507 45 v 17208
37006 a Fg(3)20105 36297 y(2)p Fh(\031)p 20105 36460
913 45 v 20358 37006 a Fg(3)23424 36659 y Ff(\031)26404
36297 y Fg(4)p Fh(\031)p 26404 36460 V 26657 37006 a
Fg(3)29553 36297 y(5)p Fh(\031)p 29553 36460 V 29807
37006 a Fg(3)32638 36659 y Fn(2)p Ff(\031)10539 36297
y Fe(\000)p Fh(\031)p 10539 36478 1147 45 v 10909 37024
a Fg(3)7186 36297 y Fe(\000)p Fg(2)p Fh(\031)p 7186 36478
1552 45 v 7759 37024 a Fg(3)14262 35094 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 14262 35094
a 14262 35094 a
tx@Dict begin  { 199.1692 114.63368 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 14262 35094 a 14262 35094 a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 14262 35094
a 13892 35380 a Fq(x)14262 35094 y
tx@Dict begin  PutEnd  end
 14262 35094 a 14262
35094 a
tx@Dict begin  PutEnd  end
 14262 35094 a 14262 35094 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 14262 35094 a 14262
35094 a
tx@Dict begin  { 0.0 0.0 pop 199.1692 114.63368 exch pop } PutCoor
PutBegin  end
 14262 35094 a 14262 35094 a
tx@Dict begin  { 5.0 26.35733 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 14262 35094 a 12803
35426 a Fq(f)13444 35625 y Fn(2)13970 35426 y Fp(\()p
Fq(x)p Fp(\))14262 35094 y
tx@Dict begin  PutEnd  end
 14262 35094 a 14262 35094
a
tx@Dict begin  PutEnd  end
 14262 35094 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -10 def /x1 20 def /dx x1 x sub
599 div def /F@pstplot (SIN(1/3*x))  tx@AlgToPs begin AlgToPs end cvx
def /xy { x 18.11378 mul F@pstplot 28.45274 mul } def  /ps@Exit false
def xy moveto  599 1 sub { /x x dx add def xy  dup 1.e30 28.45274 mul
gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
14262 35094 a
tx@Dict begin  { 85.35823 31.29819 } PutCoor PutBegin  end
 14262 35094 a -172 x Ff(f)14714 35045 y
Fg(2)14262 35094 y
tx@Dict begin  PutEnd  end
 14262 35094 a 36309 44803 a
currentpoint initclip moveto
 36309
44803 a 5954 44803 a
 currentpoint currentpoint translate 1 0.57582 div 1 0.57582 div scale
neg exch neg exch translate
 5954 44803 a 24097 45748 45 14788
v 0.9 TeXcolorgray 24141 45748 4478 14788 v 0 TeXcolorgray
1 0 0 TeXcolorrgb 25911 38812 a Fr(C)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 28619 45748 45 14788
v 5246 45792 18896 45 v 24141 45792 4523 45 v 5246 60580
45 14788 v 5954 59635 a
 currentpoint currentpoint translate 0.57582 0.57582 scale neg exch
neg exch translate
 5954 59635 a 6388 59635 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 270.30106 a add def
/d 0.0 a add neg def /h 202.3472 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 6388
59635 a 14262 49926 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81097 T 20
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 284.52744 0.0 -284.52744 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 14.22636 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -56.90549 0.0 T 24
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 142.26372 0.0 -142.26372   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 14.22636 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 199.1692  0 -71.13185  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -71.13185
 199.1692  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-87.71352  def /maxTickline 114.63368  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1 abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 114.63368
0.0 -87.71352   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 199.1692
0.0 -71.13185 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 114.63368  0 -87.71352  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -87.71352
 114.63368  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-71.13185  def /maxTickline 199.1692  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 114.63368
0.0 -87.71352   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 199.1692
0.0 -71.13185 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 13017 47061 a
Fn(1)13016 43912 y(2)13016 40762 y(3)12284 53314 y Fk(\000)p
Fn(1)12284 56464 y Fk(\000)p Fn(2)12284 59614 y Fk(\000)p
Fn(3)17158 51128 y Fh(\031)p 17158 51291 507 45 v 17208
51838 a Fg(3)20105 51128 y(2)p Fh(\031)p 20105 51291
913 45 v 20358 51838 a Fg(3)23424 51490 y Ff(\031)26404
51128 y Fg(4)p Fh(\031)p 26404 51291 V 26657 51838 a
Fg(3)29553 51128 y(5)p Fh(\031)p 29553 51291 V 29807
51838 a Fg(3)32638 51490 y Fn(2)p Ff(\031)10539 51128
y Fe(\000)p Fh(\031)p 10539 51309 1147 45 v 10909 51856
a Fg(3)7186 51128 y Fe(\000)p Fg(2)p Fh(\031)p 7186 51309
1552 45 v 7759 51856 a Fg(3)14262 49926 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 14262 49926
a 14262 49926 a
tx@Dict begin  { 199.1692 114.63368 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 14262 49926 a 14262 49926 a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 14262 49926
a 13892 50211 a Fq(x)14262 49926 y
tx@Dict begin  PutEnd  end
 14262 49926 a 14262
49926 a
tx@Dict begin  PutEnd  end
 14262 49926 a 14262 49926 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 14262 49926 a 14262
49926 a
tx@Dict begin  { 0.0 0.0 pop 199.1692 114.63368 exch pop } PutCoor
PutBegin  end
 14262 49926 a 14262 49926 a
tx@Dict begin  { 5.0 26.35733 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 14262 49926 a 12803
50258 a Fq(f)13444 50457 y Fn(3)13970 50258 y Fp(\()p
Fq(x)p Fp(\))14262 49926 y
tx@Dict begin  PutEnd  end
 14262 49926 a 14262 49926
a
tx@Dict begin  PutEnd  end
 14262 49926 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -10 def /x1 20 def /dx x1 x sub
599 div def /F@pstplot (2*SIN(2/3*x))  tx@AlgToPs begin AlgToPs end
cvx def /xy { x 18.11378 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  599 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
14262 49926 a
tx@Dict begin  { 73.9773 42.67911 } PutCoor PutBegin  end
 14262 49926 a -172 x Ff(f)14714 49877 y
Fg(3)14262 49926 y
tx@Dict begin  PutEnd  end
 14262 49926 a 36309 59635 a
currentpoint initclip moveto
 36309
59635 a 5954 59635 a
 currentpoint currentpoint translate 1 0.57582 div 1 0.57582 div scale
neg exch neg exch translate
 5954 59635 a 24097 60580 45 14788
v 0.9 TeXcolorgray 24141 60580 4478 14788 v 0 TeXcolorgray
1 0 0 TeXcolorrgb 25920 53644 a Fr(B)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 28619 60580 45 14788
v 5246 60624 18896 45 v 24141 60624 4523 45 v 5246 75412
45 14788 v 5954 74467 a
 currentpoint currentpoint translate 0.57582 0.57582 scale neg exch
neg exch translate
 5954 74467 a 6388 74467 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 270.30106 a add def
/d 0.0 a add neg def /h 202.3472 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 6388
74467 a 14262 64757 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81097 T 20
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 284.52744 0.0 -284.52744 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 14.22636 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -56.90549 0.0 T 24
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 142.26372 0.0 -142.26372   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 14.22636 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 199.1692  0 -71.13185  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -71.13185
 199.1692  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-87.71352  def /maxTickline 114.63368  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1 abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 114.63368
0.0 -87.71352   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 199.1692
0.0 -71.13185 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 114.63368  0 -87.71352  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -87.71352
 114.63368  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-71.13185  def /maxTickline 199.1692  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 114.63368
0.0 -87.71352   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 199.1692
0.0 -71.13185 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 13017 61893 a
Fn(1)13016 58744 y(2)13016 55594 y(3)12284 68146 y Fk(\000)p
Fn(1)12284 71296 y Fk(\000)p Fn(2)12284 74445 y Fk(\000)p
Fn(3)17158 65960 y Fh(\031)p 17158 66123 507 45 v 17208
66670 a Fg(3)20105 65960 y(2)p Fh(\031)p 20105 66123
913 45 v 20358 66670 a Fg(3)23424 66322 y Ff(\031)26404
65960 y Fg(4)p Fh(\031)p 26404 66123 V 26657 66670 a
Fg(3)29553 65960 y(5)p Fh(\031)p 29553 66123 V 29807
66670 a Fg(3)32638 66322 y Fn(2)p Ff(\031)10539 65960
y Fe(\000)p Fh(\031)p 10539 66141 1147 45 v 10909 66688
a Fg(3)7186 65960 y Fe(\000)p Fg(2)p Fh(\031)p 7186 66141
1552 45 v 7759 66688 a Fg(3)14262 64757 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 14262 64757
a 14262 64757 a
tx@Dict begin  { 199.1692 114.63368 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 14262 64757 a 14262 64757 a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 14262 64757
a 13892 65043 a Fq(x)14262 64757 y
tx@Dict begin  PutEnd  end
 14262 64757 a 14262
64757 a
tx@Dict begin  PutEnd  end
 14262 64757 a 14262 64757 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 14262 64757 a 14262
64757 a
tx@Dict begin  { 0.0 0.0 pop 199.1692 114.63368 exch pop } PutCoor
PutBegin  end
 14262 64757 a 14262 64757 a
tx@Dict begin  { 5.0 26.35733 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 14262 64757 a 12803
65089 a Fq(f)13444 65288 y Fn(4)13970 65089 y Fp(\()p
Fq(x)p Fp(\))14262 64757 y
tx@Dict begin  PutEnd  end
 14262 64757 a 14262 64757
a
tx@Dict begin  PutEnd  end
 14262 64757 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -10 def /x1 20 def /dx x1 x sub
599 div def /F@pstplot (2*SIN(4/3*x))  tx@AlgToPs begin AlgToPs end
cvx def /xy { x 18.11378 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  599 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
14262 64757 a
tx@Dict begin  { 85.35823 42.67911 } PutCoor PutBegin  end
 14262 64757 a -172 x Ff(f)14714 64708 y
Fg(4)14262 64757 y
tx@Dict begin  PutEnd  end
 14262 64757 a 36309 74467 a
currentpoint initclip moveto
 36309
74467 a 5954 74467 a
 currentpoint currentpoint translate 1 0.57582 div 1 0.57582 div scale
neg exch neg exch translate
 5954 74467 a 24097 75412 45 14788
v 0.9 TeXcolorgray 24141 75412 4478 14788 v 0 TeXcolorgray
1 0 0 TeXcolorrgb 25884 68476 a Fr(D)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 28619 75412 45 14788
v 5246 75456 18896 45 v 24141 75456 4523 45 v 0 TeXcolorgray
0 TeXcolorgray 33950 16239 4567 45 v 38516 16239 7999
45 v 33950 19572 45 3334 v 0.92 TeXcolorgray 33994 19572
4478 3334 v 0 TeXcolorgray 35721 18420 a(A)p 38472 19572
45 3334 v 39180 18295 a Fp(sin)7 b(\()p Fq(x)p Fp(\))p
46470 19572 V 33950 19617 4567 45 v 38516 19617 7999
45 v 33950 22950 45 3334 v 0.92 TeXcolorgray 33994 22950
4478 3334 v 0 TeXcolorgray 35772 21798 a Fr(B)p 38472
22950 45 3334 v 39180 21673 a Fp(1)p Fq(;)p Fp(5)296
b Fo(\001)g Fp(sin)6 b(\()p Fq(x)p Fp(\))p 46470 22950
V 33950 22994 4567 45 v 38516 22994 7999 45 v 33950 26327
45 3334 v 0.92 TeXcolorgray 33994 26327 4478 3334 v 0
TeXcolorgray 35763 25175 a Fr(C)p 38472 26327 45 3334
v 39180 25050 a Fp(sin)h(\(0)p Fq(;)p Fp(5)p Fq(x)p Fp(\))p
46470 26327 V 33950 26371 4567 45 v 38516 26371 7999
45 v 33950 29704 45 3334 v 0.92 TeXcolorgray 33994 29704
4478 3334 v 0 TeXcolorgray 35736 28552 a Fr(D)p 38472
29704 45 3334 v 39180 28427 a Fp(1)p Fq(;)p Fp(5)296
b Fo(\001)g Fp(sin)6 b(\(2)p Fq(x)p Fp(\))p 46470 29704
V 33950 29748 4567 45 v 38516 29748 7999 45 v 33950 33081
45 3334 v 0.92 TeXcolorgray 33994 33081 4478 3334 v 0
TeXcolorgray 35790 31930 a Fr(E)p 38472 33081 45 3334
v 39180 31805 a Fp(2)296 b Fo(\001)f Fp(sin)6 b(\(0)p
Fq(;)p Fp(5)p Fq(x)p Fp(\))p 46470 33081 V 33950 33126
4567 45 v 38516 33126 7999 45 v 33950 36459 45 3334 v
0.92 TeXcolorgray 33994 36459 4478 3334 v 0 TeXcolorgray
35808 35307 a Fr(F)p 38472 36459 45 3334 v 39180 35182
a Fp(2)296 b Fo(\001)f Fp(sin)6 b(\(3)p Fq(x)p Fp(\))p
46470 36459 V 33950 36503 4567 45 v 38516 36503 7999
45 v 47992 7929 a Fm(___/1)p 1 0 0 TeXcolorrgb 48228
9921 a Fl(F)-123 b(A)369 b(6.3)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 24746 81281
a Fr(7)p 0 TeXcolorgray eop end
%%Page: 8 8
TeXDict begin 8 7 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 54804 45 v -2331 6921 a Fs(F)-239
b(A)702 b(6.3)g(-)h(8)g(Sin)-60 b(usfunktion)698 b(-)703
b(L)-179 b(T)701 b(-)i(Matura)f(2013/14)g(Hauptter-)-2331
9944 y(min)p 0 TeXcolorgray -741 13251 a Fr(8.)p 0 TeXcolorgray
651 w(Im)614 b(un)-36 b(tenstehenden)611 b(Diagramm)616
b(sind)e(die)g(Graphen)e(zw)-36 b(eier)615 b(F)-108 b(unktionen)613
b Fq(f)756 b Fr(und)613 b Fq(g)921 15243 y Fr(dargestellt.)921
31913 y
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 394.78188 a add def
/d 0.0 a add neg def /h 142.2637 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 921 31913 a 11551 24039 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81097 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.4  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 426.79123 0.0 -426.79123 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.4  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -341.43298 0.0 T 30
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.4  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 142.26372 0.0 -142.26372   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.4  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 42.67912 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 298.75386  0 -426.79123  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -426.79123
 298.75386  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-71.13185  def /maxTickline 71.13185  def /dT 2797019 abs 65536 div
viceversa { neg } if def /DT 1 abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 42.67912  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 42.67912
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 71.13185
0.0 -71.13185   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 298.75386
0.0 -426.79123 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 71.13185  0 -71.13185  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -71.13185
 71.13185  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-426.79123  def /maxTickline 298.75386  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 71.13185
0.0 -71.13185   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 298.75386
0.0 -426.79123 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 10306 21175 a
Fn(1)10306 18025 y(2)9574 27428 y Fk(\000)p Fn(1)9574
30578 y Fk(\000)p Fn(2)16022 25242 y Fh(\031)p 16022
25405 507 45 v 16072 25952 a Fg(2)20714 25604 y Ff(\031)25268
25242 y Fg(3)p Fh(\031)p 25268 25405 913 45 v 25521 25952
a Fg(2)29927 25604 y Fn(2)p Ff(\031)34717 25242 y Fg(5)p
Fh(\031)p 34717 25405 V 34970 25952 a Fg(2)39376 25604
y Fn(3)p Ff(\031)6253 25242 y Fe(\000)p Fh(\031)p 6253
25423 1147 45 v 6624 25970 a Fg(2)1450 25622 y Fk(\000)p
Ff(\031)-3398 25242 y Fe(\000)p Fg(3)p Fh(\031)p -3398
25423 1552 45 v -2825 25970 a Fg(2)-8234 25622 y Fk(\000)p
Fn(2)p Ff(\031)-12847 25242 y Fe(\000)p Fg(5)p Fh(\031)p
-12847 25423 V -12274 25970 a Fg(2)-17683 25622 y Fk(\000)p
Fn(3)p Ff(\031)-22296 25242 y Fe(\000)p Fg(7)p Fh(\031)p
-22296 25423 V -21723 25970 a Fg(2)-27132 25622 y Fk(\000)p
Fn(4)p Ff(\031)-31745 25242 y Fe(\000)p Fg(9)p Fh(\031)p
-31745 25423 V -31172 25970 a Fg(2)-36580 25622 y Fk(\000)p
Fn(5)p Ff(\031)11551 24039 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 11551 24039 a 11551 24039
a
tx@Dict begin  { 298.75386 71.13185 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 11551 24039 a 11551 24039 a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 11551 24039 a 11181 24325
a Fq(x)11551 24039 y
tx@Dict begin  PutEnd  end
 11551 24039 a 11551 24039 a
tx@Dict begin  PutEnd  end
 11551
24039 a 11551 24039 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 11551 24039 a 11551 24039 a
tx@Dict begin  { 0.0 0.0 pop 298.75386 71.13185 exch pop } PutCoor
PutBegin  end
 11551
24039 a 11551 24039 a
tx@Dict begin  { 5.0 50.02498 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 11551 24039 a 8782 24371 a Fq(f)142
b Fp(\()p Fq(x)p Fp(\))p Fq(;)221 b(g)48 b Fp(\()p Fq(x)p
Fp(\))11551 24039 y
tx@Dict begin  PutEnd  end
 11551 24039 a 11551 24039 a
tx@Dict begin  PutEnd  end
 11551
24039 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -10 def /x1 20 def /dx x1 x sub
199 div def /F@pstplot (SIN(x*2))  tx@AlgToPs begin AlgToPs end cvx
def /xy { x 18.11378 mul F@pstplot 28.45274 mul } def  /ps@Exit false
def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 28.45274 mul
gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray  1.
.setopacityalpha   0  setlinecap [  5.0  3.0  0.0  0.0 ] 0 0 add  DashLine
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -10 def /x1 20 def /dx x1 x sub
199 div def /F@pstplot (2*SIN(x/1.5))  tx@AlgToPs begin AlgToPs end
cvx def /xy { x 18.11378 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 11551 24039 a
tx@Dict begin  { -67.78474 -54.06003 } PutCoor PutBegin  end
 11551 24039 a
-172 x Ff(g)11551 24039 y
tx@Dict begin  PutEnd  end
 11551 24039 a 11551 24039 a
tx@Dict begin  { -42.67912 34.1432 } PutCoor PutBegin  end

11551 24039 a -172 x Ff(f)11551 24039 y
tx@Dict begin  PutEnd  end
 11551 24039 a
44622 31913 a
currentpoint initclip moveto
 44622 31913 a 921 36451 a Fr(Die)442 b(F)-108
b(unktion)441 b Fq(f)584 b Fr(hat)442 b(die)f(F)-108
b(unktionsgleic)-36 b(h)g(ung)441 b Fq(f)142 b Fp(\()p
Fq(x)p Fp(\))383 b(=)f Fq(a)301 b Fo(\001)g Fq(sin)p
Fp(\()p Fq(b)f Fo(\001)h Fq(x)p Fp(\))441 b Fr(mit)h(den)f(reellen)921
38443 y(P)-36 b(arametern)448 b Fq(a)g Fr(und)f Fq(b)p
Fr(.)h(W)-108 b(enn)447 b(diese)i(P)-36 b(arameter)448
b(in)g(en)-36 b(tsprec)g(hender)445 b(W)-108 b(eise)449
b(v)-36 b(er\344ndert)874 40434 y(w)g(erden,)433 b(erh\344lt)h(man)f
(die)h(F)-108 b(unktion)433 b Fq(g)48 b Fr(.)855 42980
y(Wie)428 b(m)-36 b(\374ssen)426 b(die)i(P)-36 b(arameter)427
b Fq(a)h Fr(und)e Fq(b)i Fr(v)-36 b(er\344ndert)426 b(w)-36
b(erden,)428 b(um)f(aus)g Fq(f)570 b Fr(die)427 b(F)-108
b(unktion)427 b Fq(g)921 44972 y Fr(zu)433 b(erhalten?)921
47517 y(Erg\344nze)358 b(die)h(T)-108 b(extl\374c)-36
b(k)g(en)358 b(im)g(folgenden)h(Satz)f(durc)-36 b(h)357
b(Ankreuzen)g(der)h(jew)-36 b(eils)360 b(ric)-36 b(h)g(tigen)921
49509 y(Satzteile)434 b(so,)g(dass)g(eine)f(mathematisc)-36
b(h)434 b(k)-36 b(orrekte)434 b(A)-36 b(ussage)434 b(en)-36
b(tsteh)g(t!)921 52999 y(Um)381 b(den)f(Graphen)f(v)-36
b(on)381 b Fq(g)429 b Fr(zu)380 b(erhalten,)h(m)-36 b(uss)380
b Fq(a)p 26030 52999 3150 45 v 29651 52951 a Fr(1)29179
52999 y Fb(\015)p 30773 52999 V 3531 w Fr(und)f Fq(b)p
38003 52999 V 41625 52951 a Fr(2)41153 52999 y Fb(\015)p
42747 52999 V 921 54991 a Fr(.)p 0 TeXcolorgray 0 TeXcolorgray
6466 56364 14694 45 v 6466 59448 45 3085 v 13488 58145
a(1)13016 58193 y Fb(\015)p 21115 59448 V 6466 59492
14694 45 v 6466 62751 45 3260 v 7175 61548 a Fr(v)-36
b(erdopp)36 b(elt)433 b(w)-36 b(erden)p 18750 62751 V
19459 61454 a Fa(2)p 21115 62751 V 6466 62796 14694 45
v 6466 66055 45 3260 v 7175 64852 a Fr(halbiert)433 b(w)-36
b(erden)p 18750 66055 V 1 0 0 TeXcolorrgb 19459 64757
a Fa(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
21115 66055 V 6466 66099 14694 45 v 6466 69358 45 3260
v 7175 68155 a Fr(gleic)g(h)434 b(bleib)36 b(en)p 18750
69358 V 19459 68061 a Fa(2)p 21115 69358 V 6466 69403
14694 45 v 0 TeXcolorgray 0 TeXcolorgray 30427 56364
14260 45 v 30427 59448 45 3085 v 37231 58145 a Fr(2)36760
58193 y Fb(\015)p 44642 59448 V 30427 59492 14260 45
v 30427 62751 45 3260 v 31135 61548 a Fr(v)-36 b(erdopp)36
b(elt)433 b(w)-36 b(erden)p 42277 62751 V 1 0 0 TeXcolorrgb
42985 61454 a Fa(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 44642 62751 V 30427 62796 14260 45 v 30427
66055 45 3260 v 31135 64852 a Fr(halbiert)434 b(w)-36
b(erden)p 42277 66055 V 42985 64757 a Fa(2)p 44642 66055
V 30427 66099 14260 45 v 30427 69358 45 3260 v 31135
68155 a Fr(gleic)g(h)434 b(bleib)36 b(en)p 42277 69358
V 42985 68061 a Fa(2)p 44642 69358 V 30427 69403 14260
45 v 47992 13251 a Fm(___/1)p 1 0 0 TeXcolorrgb 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 73431
54804 45 v 0 TeXcolorgray 24746 81281 a Fr(8)p 0 TeXcolorgray
eop end
%%Page: 9 9
TeXDict begin 9 8 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1599 a Fs(F)-239 b(A)717 b(6.3)g(-)h(9)f(P)-60
b(erio)60 b(dizit\344t)716 b(-)i(MC)g(-)f(Matura)g(NT)h(1)f(16/17)p
0 TeXcolorgray -741 4907 a Fr(9.)p 0 TeXcolorgray 651
w(Gegeb)36 b(en)342 b(ist)h(eine)g(reelle)h(F)-108 b(unktion)342
b Fq(f)485 b Fr(mit)343 b(der)f(F)-108 b(unktionsgleic)-36
b(h)g(ung)342 b Fq(f)142 b Fp(\()p Fq(x)p Fp(\))369 b(=)g(3)110
b Fo(\001)g Fp(sin)7 b(\()p Fq(b)110 b Fo(\001)g Fq(x)p
Fp(\))921 6899 y Fr(mit)434 b Fq(b)369 b Fo(2)f Fi(R)p
Fr(.)921 9444 y(Einer)398 b(der)f(nac)-36 b(hstehend)396
b(angegeb)36 b(enen)398 b(W)-108 b(erte)398 b(gibt)g(die)g
(\(kleinste\))g(P)-36 b(erio)36 b(denl\344nge)399 b(der)921
11436 y(F)-108 b(unktion)433 b Fq(f)575 b Fr(an.)434
b(Kreuze)f(den)g(zutre\033enden)f(W)-108 b(ert)433 b(an!)p
20647 12403 5091 45 v 20647 15889 45 3486 v 21522 13963
a Ff(b)p 21488 14176 471 45 v 21488 14944 a Fn(2)p 23328
15889 45 3486 v 25693 15889 V 20647 15933 5091 45 v 20647
18745 45 2813 v 21355 17800 a Fq(b)p 23328 18745 V 25693
18745 V 20647 18789 5091 45 v 20647 22275 45 3486 v 21522
20349 a Ff(b)p 21488 20562 471 45 v 21488 21330 a Fn(3)p
23328 22275 45 3486 v 25693 22275 V 20647 22319 5091
45 v 20647 25572 45 3253 v 21488 23646 a Ff(\031)p 21488
23859 573 45 v 21573 24627 a(b)p 23328 25572 45 3253
v 25693 25572 V 20647 25616 5091 45 v 20647 29057 45
3442 v 21488 27131 a Fn(2)p Ff(\031)p 21488 27344 1043
45 v 21808 28112 a(b)p 23328 29057 45 3442 v 1 0 0 TeXcolorrgb
24036 27669 a Fa(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 25693 29057 V 20647 29102 5091 45 v 20647
32354 45 3253 v 21488 30428 a Ff(\031)p 21488 30641 573
45 v 21539 31409 a Fn(3)p 23328 32354 45 3253 v 25693
32354 V 20647 32398 5091 45 v 47992 4907 a Fm(___/1)p
1 0 0 TeXcolorrgb 48228 6899 a Fl(F)-123 b(A)369 b(6.3)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
36426 54804 45 v 0 TeXcolorgray 24746 81281 a Fr(9)p
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

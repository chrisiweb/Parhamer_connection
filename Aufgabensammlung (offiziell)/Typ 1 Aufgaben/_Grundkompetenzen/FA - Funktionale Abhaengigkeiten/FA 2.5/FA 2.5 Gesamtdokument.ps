%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 2.5/FA 2.5 Gesamtdokument.dvi
%%CreationDate: Fri Nov 10 08:43:52 2017
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: LMRoman12-Bold LMRoman12-Regular LMMathItalic12-Regular
%%+ LMMathSymbols10-Regular wasy10 TeX-feymr10 LMRoman10-Regular
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ "C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 2.5/FA 2.5 Gesamtdokument.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2017.11.10:0943
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C071D06D71D60CEEC9FC68AAC0ADD1DD74B262
0156612EB4B21A3F4ABD34403540C124221FB9DA5EC6C7229DA9A1D033AB828E
9D80023B2C8E68FAF7A38C925E0587A1CCE432EBBBA598B201F5AD036BE7C8AD
B8C411BC79646781C4519B89DA648B919EB362176B83298EE2D8B405DC66D81E
C655DFFD1BB283F3C5DEF1495FF97C798C213036AD02BB07FD42EC5932E79727
ACF464295E75CFC635036CF27FFC42DC2919CC167CA4C2E673040B7909AA26E8
123B3D9F176F6510B9526E94D4E38E62F8B9B96E2D2D51BDA2FB7C6992B79CD8
3E40292315B0EFE711C8FCB37968B8AE1BCADE6BD8A3BA1009B34137B90D924F
B2784C9E13F0795427324E80C175BC99140171AA2F40784356690DDB982F55FE
EFFCF946C6DADBC6A907C7DC28850415D9AFC1C8A868801B990CE2D26AE40CB3
4EE0281A60063AA71E48DB8A35E05C2BEA1ED5BEC68717E95B7597AD7CACDA2A
6A4E8808BDF0AFFBA31BE1697149D7BACECF4481DC61CEAB7476A2E00CD8EFF1
37E476FE5A098E607E25ED29F4BF3409309145BD0530C8A76E85F59EB0890ECB
A12DE954F33220ECCE5E9CC4B52E97089790D08FFEEA7D143DCC7C07BB2694CA
6709EE19C11515E6E967043F9162C39D9BEB2767B7B31EA068C594A63173F7F1
67F3D6FE97087D19F73EEE205A47785EF3C453E6F77A08AE9F93F4060DD19EF6
6DA5E780DCCA30F180F8DFB0CEC4602AD1201C63D91450E7B5F44AEF32087A03
0D933A941134E74040E6E7E797E18AF57941DDF7DE2072ADACCD3BF8D4CFF06C
5B946E21D0F5A799CD011CFFE4CF0F571B4377AD4768FBEBDFCF6B49F09839B9
35B1F7AB20DBC872DEDA90B79F113F5A4BE581DB49C5EB8C9033B8050C143424
1EDB333D1DCB862DC543CE420CC26EDF9639E4256570975B25C6C1F06CFDB2FD
9035344017BAA39283C14E3AE66A14DAFFE2CD87485598645C39B92C18AAD014
7814BF27C8FA6DCA0BBA0FFA552B9FFDD54BDD8C7F84484031FFFC0AE8932A64
53D2632D9379F30231361D03BF91F74904C7106B6F8EB6ABBB29858F65E937CD
E31D67C847719779DE0B34CECE88A8F9A12D46B8FCA50DF4433B0B8AED6A63B9
E6512B667AC78A09A780813B1FF02AA967B12AAFAA0AF1B3DA27604A975C2DB6
FC1854457C67C54DC08DB989CA3267B2BE5B8178E6B7889A33771F86276E6DA4
F83033522871198AB3E954EDD88B5059BFBB42AFFC2738CA09B628CC646123FC
9C2BB8B9149CBADE7A7953FB4FBAEB6078B410935DF7D6D5064271899313C4E5
0DA12BF2F08521A17641A2F5541EC8419514939892C0E353FB1785CF9CB67C88
AF752C2A0DAB509A424DDB9649BD8A846E6BD3D374BEB6B9DBD5C10FF56E2000
AE4AA5B339C187F52630B52309834F266D778C720FA9BD9CBC1F322A39EFCAF5
85107BD5A5C188A6409352766D80E77B1270019E0EF57F31E9F13B9483F070F4
86122EE08A4870456161458B6C93A1602A5EE583461ED91A90CA5B743636AED8
1E5142CC0A7DC998CBCF84E39CE3B141286A5994C60855979B402FC1C092EA15
1A6F3762571629775247A6AC65DEFBCA10A51ED614E0C7FBC7335681207464AB
F8C4ED5B883E7A4D01199AFC3C88B0E2AB5FE014A84377451081CA0390DEBA75
7BEA45FA3171095052B839F7A2A9E41737F4A4CD704E8EAFC757116FE3012E01
AEBF584F6B34EB3F9C4B3893DF4E25B71CA17D427219E0E2F3F7ADB530841948
1FC1CD966965C72E9490C31153E2A0DAB73629A1DC0ED7C058AD150C4D5BE6CA
FCC7D71907232339F3FCD771914933CABF613F0F9FA3E206172B0B4ADD1D9744
00A8C2642147D4B652A8F1A7E5BD064E369FC591D4739533513C202E9DA91CDD
1581D1A58898DD6564B1710A88AEF94B888C52681BAEE1E3EFB4DBC694919D4F
41D01894C91D8E03F68DB550934E5D783537D2B57CEFE23ABACEC756F5D1EA5D
A74192035D2304EC4F9083716CA7906B80486BB5C79752270821CB12BE7ED0FB
9FEAA580CA187AA3C9475070809AF6881F745EC71298D454AD31AB998F5821B8
2070122634D5A247EE4D8672339B1D90113137D4FEAF3CF3A2456A8712556956
C5A48721B1B1E140ABFF7793081B2B092724FC0F129DE772236556BEEEBEBFB1
FAB1037FB0997B367483D2C8C0D44E6111CEE2EF443F84FAC7710AD0368D542E
8A629BBC3C6E2D85E984AA01B575B37DD1D9B0D453E3A73EE7A34FEFA5641BDD
67E694671B6250DAFA3D85E0A78E946C78E33A284D4F92B73D7AE87B13F108F2
C4611CD948F30F56B984E409650E9CDFFD63D996E25E5C0E0FFE02BBE2237537
8C945F31C26697A7ED159B529276995292581CB9B29A54F4F4B2D472C74909CC
47C1675DC6FB9A932C0552F8FBE17F4D8771BFC6109E6D709951694157B3CA9B
1F3952D101D6CE60D1A0A97C99EDB3FAD64BBD337BB747424BE88E67FEA44610
51A1F65159650D3A2FA882944E6E8DB113CE928969F6BE3E3B8BFB71302E87A4
5A22ED99B04853D66E5A22B56F79FEFE917A6F436B823B1A2FD914DDADEFB5C5
CA3A43E348D017CE2040752BF94A98902E608264DED8C3241F06469FE18C377E
448EDBB0823526BD66B40F0519F047195405629408224D070207499DF2F43E7D
52E442E3B6E9E3B08F88C9961E81373B96460077464C7DBE6C7C7887BEB3F685
B182706F5DB4C7C4BC2FB81A7D040EC5A04E5C5434D732318AE791EDC71A47F2
AB39A992EE304763BBA1AA81F9D74B24FA7EACEFBCAC72D673540922501841A4
F7EF18CA86AD20AD76325914FC0197DA6D7632947C4AB3AF2133D1A1E2719511
F62BEB9C879E76B74493C7D5EF38E01CC031CB4CE13C2EB6BA2695E1AB97260C
39A7CF8F690145893081D526990E92C1FB18CC4B968D70DFD13C6223FAC9AD31
2E1240ED981AECE8D13DC653D59255F868EF158EDD781E9D02889907B23F00D4
F6A0D9B74E591BADA348B09E22B1A783A8EF2AC87D34B6407522AB33411ECA4F
6C765C85ED1405A5F27B28A16751402AB278A8099E29940E719DE1E109E5BEFC
2A4098E77020110C37A90B5BDBE279918B0B31E08031DB686D518B4CBB8A4D0B
EBF6750A452A7F706EA676E3B3237FC5656B29CD5A3A04F82AC871B526CC28B3
A61D985EEB3610FCAA433B9C6D4683C512F0FDBF3EE6FF552D7BF0BBBBA37050
FCBE3F164189FDC8446ACDE8D0D4050278151B46E56AF826A0C2E9389C2B8BB8
E38579D281D5142944D3322E1C66D456E4C5DD727AA41FA5B369D5E10CD71832
A7DD40DE855B47289C449B6AD8D5F1D557102050EDA5F1641EAAFDDBC082E579
A06D8A3A323458808BAD0F4B8A2BF406DBAC4C5F555EC96E760C8245A1AD9F50
881DB475F892F868823CC55D4859C09148529FBA57A392127B68F5366491D1BB
097D8FF4A71966D42DD988F48C8A1F4DE0449E6AAE79500C42B4EFE4936D0D00
0FB339115493C54BA1B0981AFE60C32AE5AEA6F1BA42EEAD2C89312DA8D4EA9E
4728E8FE799616C7F79EFAC5C4F5BCA65317E45DEAF86873DBD525C29DA1F2D3
3041FFA2445CA658CFAAED3C30CECE4F2514A132C95F5CBCA3A139F60B929FB8
72EB89B9E71EA6161CE4DC61D1F0FDB69AC593886BB0459536ED20609422AA71
AB51589A018331D25E5B0F5E48FB91D15C10357563DFE608A3CD20A80D08E270
1A520E35CC383CE5CD307D419B5EB603FC44D6869D4A1731673EB4D084BB1534
7693FC31907FD6094EC7065BED405AEAFCB4783DAEC99BC7A3A82EB333E78317
ACD72DAA3215E2C2823903980506A9F523F673BA8CF49FF629186E5AE8335042
BBEBC8DCF193CA3D40E5337359272C890DE990FA8A632DA2E3BC27F9476CB699
295F324F6901C647D65547A0EC71D4169ECC5A9AF15C361F4CA0CB8ABF336E7D
8DAE03CB25E6664A35015FC9684B7899AB6E46C2AC119FEE2CCBFAE53B96143D
E8C23DBCA777AC4E842F3A5247CD38F0C8DFC61D9996A8FBF914209AE12FA680
17DD0820EFEB02CDE5BF84E5F1E8C8572A5A86D808FF1497362CC036695A3B1B
CCFCEDA9577FB496F376710C86A02109B864FE34566E17B4A1A09F9BA10DED06
0F5AE4AD3C94DEA662B7342EFDC90B3BCAB589A88641B4C53C0D65940F2D3916
FE46C254C25AFF36E0A79983B5D27B079F4B1FE2A89AD72D1D1AD2BF8BC6B31E
4ADFC2A90B9A7B70258F993C87F2C75BD72B5278CF84E2A883DCF21F61FC2EE6
DF51A16B4969B5619E2B15FEDB0F7B5D8690F5323C48054E47E3F61DD358C698
35A31914818EF301DB98A91C6F34AA573BDF47829A0BD0C1FF5D6BAC2210992E
8C115F926BB8BDD04004EDACB8E3A599A56D93AF6603E7BE95D2B9E8B9F50EFE
02A94198A795EA3AA8F36F17AEA7B3CF3B80E235C0C70C895EDF6B031ED3CC1A
7DD250065F3ECA5C4583845A6E0F89C9EDC2F8737A0C119FC35E435A69079A46
C84B3CF54BAAB62AC19D25E46C51D541D23F9D2633D0ADDAF128E4E336E41C0A
F1E31DC3AD15631556A6C760A49679FEF8377A04BD2709C556F99D6D0A7E6D0F
72BA8FBA57162992D855DC8EE82E1FD21984D255DAAB15D2530F5004F063AD76
EE2FA09287295C79AB17E0EF4C7AFB5ECDAA96392891C296D28D5263EE631BE2
0CC1F6D56A03DFB8DF16CC64DC2A4BA25C78CB3BED5E7AD9383F870121370795
8220C6EF8004033A4C316ABB86A95F8FBDEF27B9FC1AD3259CE2A9E4027A59D6
FA0607168B4145A22A5CDCA376CF8F657942D643E7118C6FB8485C3B49DF8D5C
B26E31B287804D9E5DBE8300564D6210CE95546E90A839440D5347EFC3DB1019
7E7C1F9FA4153F56D8354C28DF9541B60056F95693A5DC3207DBCBD73B067552
BD50DC53426FA7629E8518074632F6BB0639E2AA1DBBF34708FDB80ADF685477
F1D1B294824781CD883EABB77A8D8A93CE85F961413148C812BD4323EB029D02
1211373CD1ACCDACF821F97F498371BAEDB7B887A8C6479AECBDAD3753FE1D35
BAD23DA4DC7FC3B4C147A3CA6B939B4B19E81AB223EBCA7E622D460701760E74
95135D6EE1215286E75E64E9F4333B259C51DB04F83FB8A8CFF5EA08B850563A
283BFD9FEAA5AA98B091AECE8681999D7C8CE7081C63CC2F99FBF847E30932EC
89D7AE31C15276590ABC46672EEF02B2AE8F89259944B1272B1259D760D7B237
396F4F3D80745A2E1EE8BB1E2717DDAB52753B36705655AF3B0E97AB1E6E22EE
5A58C7B3B5A46A860FA2AF035F558B5970DE1368D2F20663BC22AEBB8393C4BA
41857657A780F301DB98A91C6F34AA573BDF47829A0BD0C1FF5D6E3E3E23764E
9A5DBE640CA98585DA2A4AF9DE5A50460EE4626641060E55159270B4794F9C09
45FEAC295D142BA5CAD6BD84A5074B5832023E809B80408BB9B61C2AB51D8CEC
6E67F64B36C58C36A88F60969A764BC3650C9F608A3D911E2C01E031D302E806
1FD13C0751886DE01BC4780E971D3952648BE3ACB42BEC6D5B5DA0CAF19F96ED
F6BE77ADAD22FF83BD861FCD07E1302D6A3AC106A2E43A7E81959D74397B05AA
139C11D8E49A593F43BFE84E32554E529BFFDCE98C901A79E3E0354517C3D95C
E9C02C72E8CDDA3C6402606AD16969621B7B86948DED33D8870DE90DBCD8AB39
72CEF5BC502DB98B9C81A16F71982B56E3D30B195E00D83250BCB311128B7FEF
549C4E2A1FB5DA9475D34528238FB664FACB2DF3175DD6744B6F80332CA317C7
C7F1E95469943D8FA54558F298E38B7C47A25EFDB18D279D752527A0A701EBA7
3263002176824B16E5192FE1E7C6EF0989162AA88D31807317CEF7334C32EA38
CBF518502AC8917F8C0C4DDE1AA36C332BB853DF3C8BD16760A91B02D5E8D679
C227DA8E3207E226A8165D453AEE422EFF10547CC2E44F566E8880D7BF75598B
33B68992E7A2F38FC0102D37B14D7743D97690DE073F312A8B3CC3ECC121A487
2C7A2E643F42D81DC81DB094A39F0AC8535F07BA31C71CA5D158A149F9312B73
E4D32170A9DF0ED814B56FA36CDCE4CA26E456B7F80E01E965F2ADFE1F47E8AF
B7E2430FF5C29D2907B641B4829531FB2A32A4C0367F3CDAADB9A370228BDD72
D36A310B38B163A986ED841B89F943386A45621E129B313186B14136429634E4
766722F56E044B37BC6D86BD2B25404BBDE5111A09F2F70FA32542FF1E83E1FA
20A5DA57D8B97288C1771381D3DAF5B148F098CEE2A1576FA4E08BCFDD164C8A
2DDB6E607138E02333C892AC77F693FF450B0BDBA1789FBF48822B33BFC5FAD7
3A5F027F88EDDC45179F7225B6871B570EBE05C9D95D8F947BD0742B90BF5407
FBDD9646E0166601B3481A982BEE3ECAE668C682BA7058FF2B516EE6A1F62AD7
88D7A56D82E27037A9D4634A52602A4A406CEC3E6B836FA313F76E5D3BB8FDB7
30DA86C9CA2049211DFC67FEF43680759C5753F9AF573A9C560C53F4EC10F01B
24BD3061707FE66ECD490C249247B1EC843A51C18F15B98E16EE5DFB6E5EC238
5A2B60667E25B40CE5F8CFB9AF2BCA1DAD558C1F217EF746F550BF0657B5DC66
0728C942A87295109A90C9155DF0BE682193E60B2B5FED8BF8541250B992E39A
E2E7E3C936A06A609F48029307D8249FEAAB72F6E1CC2C7A3875079EFB568ABD
139F70C1EA8869611D9D4D5ADFC1463D664FAF1E15D2819ACC236CE307310AA5
0B8B1F887BF840312068D7236450B39F6F363E3AB6F8FC5A8BDDBA070CA8F456
2F321D000ADC343E2B1931854355DD892B5A163785EC96245A45B4ED6B5BF9F0
750DC175E04BED0223734E5A7F68B96A1184091D122ABB1E3895721160D7C2D3
174873F55307E929B392CE3475109E22CA5A270A188A7649D8D1437039443AA9
46A7630D1877A6697C2FD31E9717FE5EC1A550EF9E2FDEB0F43558C7981EB189
B81F8D1BA098074266404D32CBE9E1B8220BDC4409274CE1CD02D148724B2561
AB1E54A672AC2EF7F6BD91147CE9E15E1B72BD078B9B595DC4936FCC0467525E
BA8965CF383F4F4AE6DA98D1611D05E59ED9BE06C7BA2AC655DCDFC20968F5BD
12B078701E01F539C74A0B5D6AC9CB4E4BC1D7C2248A8F6E5A7695FE9B0A14BE
253B4345768F4A78E26D7BF1AC08BDBB8351C7F5C1C66C9F9BEDFEE780E04042
3DDC5E3B4876FC8A9E07B69FA56A32CEBA6D7B35526797A8C94EA0723B306240
918211E0EEF0934AD0C63700B4526A98631477A19FE5E168BC242740D8C45888
D4A0CF8AE610E7017E11E78CF5E7141AB9009DC1FB985090CA164DF0AAE5DF99
7D62692FFCF574292909EE79FE294598B8493F9991DE93CAFECF7231EA8FB209
39EFAC81F69FEC9D92AEF953CD07A639CB7F9A7CD9CC027EE23F3B3BC61A40EA
57044322C232BE97AA1DCF6B0E4DCB2DE2BDBF0495BD0ED7DD0EA7E72267A508
FBD0C338ECAB53C74DC4E883803F2FB7FB3A3A802092EE50089F30F3C4ADE4D3
07305271D998208A83D58F3BC00D46513F0358C43A22C413D9A6BA6B3E100EA8
03E2F0198DA96155E68E8F6CDE3F99D19B44295188865207E8C79FE8C1E98BAC
BDDB68AF7CCF8E9071B691DE0DCDBD7CBBF0BF03BE50426089EC7071143F5177
610D4C2683129C912ACDB47AECE3F9786E47398891C3990700F3123E5BB8ACC1
07D8B722419A9C1F8EBE330D7A360FBCB6540E7EB3B2ED0460F81AB38B9240BA
E845D47A0BD6760B31870D69C4C15EEA09E1831354F7C4A16212A067BDF0ED84
C9A5735368A09CE46A5C17CCAC557BB69FD42494D5D2B9C1ED812F3CCEEC1BC0
79E837DCF4EB4E495547C25D2893E35E24435F55A2D66CE9FDEC1A5F81FA219E
49C2F4D2C8EC80D9E187F9E15825F57826DDB17A35CF2E4C380E50E1797F8558
26EAB926A051DDBBD93F907D31D6709284C86F0542486710BCF518C1B5D1E6CF
23E0D97980F20EFD24A6644AA26EBAF342B36AEFAAAC0AB3727E59F1642789A1
765F02944B8E689BF03404F5426F7148BB8FA709AF1344271173529372AF6DA3
83511770EAC39ED55DADB32778CAE943CE6E928C9521FE45A04F184800733B13
440F514AF796BCDD85974E0AEC9A164C369C237DD28FC4BE2843036E872B2A03
163F0CAD1BCD5F7FBC20299D5C6FC1EDDFCE777B796FAD72EEA5713D78F437DA
E50160FAC28C1C21FCF83DE1B5516CB04C7CABC1D37D26ECC85EC180EB8EED1A
6E85129293842B429B1AFB33D68BC88143F92B5D64DA3F8DBFB0D329C7450A21
E4F97C8FF528ADC2F97F87C592935C07955C1F1B0F125261DA0D2F7312CE5B3F
3A1DF65DD60AA679945BCA6A71E4329DB73E7F29098787D96D89D74796C6908A
EFCAFC2C9DDFDD855116AFD66EA16F96AA4B9F040771F86CE98994E113749F20
47C28A0906100EF57663A483AA7375C850A31668037014979D53F051CBE5D246
FC0CAC7850013FB3F1B075D4754A82A584DF54EDC7C8DB59B77CB7A8592B7CFA
7D097BB4BF8EECC6634A8112ED925C55E4B0DF0E5BEE4B29E5DA8177D46930E3
E90AEA7B324350D5926BF3AAB7CF462B8C46CCC43F2AAB8ABEDEF76AD7F14CB4
16CC957E016A4C72A6A2FC3DA24AF084E7544D8A76154942ACCED03A7785D88F
EE716F2A7D77A990393CA5CBCA996BE2E5186292AE634456B428623FD1E62155
5BBCA26C986ACA69714EE280FFCC692113CC15C94DDD294049748B473FD5F4AE
9C321F8D3A7609539BB1E313BACC161E4DFD3BBD84E1216F1446F95F7E0B679C
0D5FE02E0CF9AA45628844A54275C0E5894655E7B06095437FEF27B81EB14663
E3073EA68F60F1D5B1A01C9D57853580E6F180343DA29EB6D4908FC8959EC547
4049A693CBEBA4E07CB9B5D8DE5E0B1C2257A8DC4E816B78B9EE734118C99128
2B1240D3E464E928369FA93FB926139676774399E370879B537E40FD383EFEF0
2E3CF25222317FA36FFFFDC8DEB8DE95405EC7DE4C780BB7B6AD8195784DE96B
ECF95B625F9BE81E96E51EC9602D4654DEB38E8E94225D8F864E791EA66CE3A7
B80CCCA6788AEF25264822AB4D94FD51449F12FDD58B76CFA594F3223C22C504
5B028700C8710E6F425220C975AF0249835F399A5539D63AF043C136465C5C6E
DD6AC0425D8F374CC51FCB15600FF7A49A4104BC29A0D7D3B555652AD4E14D41
04669F132B4584E73C21F2C83078F5D96EDC72B7B9B4BCC12F4209B1951AF23F
F685C14584FF171362B3551FF7356C84CF0F2434A53A3873E1326AEFC575FAEE
1B5EC42CDDC027C7AAC514A42B45A190590663C03DB348ABE792DB5E7DB73311
A007ACCC65F1BE0CBB445E9DC99DE3BF32B95CA40F19FE0EEEAD46783F79B52E
24284B8FB0941BF71DE5A8C04AC209B2BC1057E1B23131263F844B18EA91B956
02F465D1AD4EB85656E66D39C6D94C1DFC732A196B89AF8000D828F0B96CD1B5
C4C56944521E76439B5DCA7732A29F37A08A140F8C0036E35125E11CFB8F1E39
7508BCB97A2A87578E15D147311B7C07C17737878305488298DEF3FCFB79A08C
1884C223247C65FA99AC139A69ACDE989B3FD5A2D5C0A6D3663AFF2DE36A2249
BFD2DF460161D3EA5C1B998A83F2F595DEA5468CAAC2B78E5A1993F2B6373BD0
E80C86A751E25B22ED67B8950124818EB258558D55DEB25473A60B53D4B46DC4
CE9B9FF1A7480F80EC4A178CF4CE94A7EEF8762859353E43AF38D0D4E667A801
66DE5FBCEE3580C618C1814F112E445F32C0970817BC4050803AAE8411778D4F
0A4E88A0C372EA9D124E3E174D7A6E4AC41A6D48DEE36C9F7327962802952738
032819124D3640CA3A1C4A1EA19A4B5C54680A95BACD1D974C8BD85FCC3E5A5B
A3ECEE5920BBAFFF7CBB603DE772DED3D1A91AF4D9F034FC4E903FC910C2DD83
A9EBCDDF1610B2DBCE8D49A89DE2733B985650ED4AF7BA55E5268D7DC50499FB
10A0A8A89270ACDBB7167F1EABCEDD9532036DC8B0E3082C0CA07D5E9A31F28B
335C772B3FB6E71E7B85050753F3D80F49365D5006829FED63CB9571B219B383
0B4C3BC3B926DD8420D84FF4FD6D3263FB9E97AEFFFE3C5FCBD9790B301E9CE6
2B783B68773C3A3673AF8F575ECDFA99FD6AC36D436B89F0FFF57ADC4D7D461E
CBA91D8497F341825ABD849980EBBAF61719BC50DFACBBC2E6F6CA74B31EF41D
3CE547C09DFD50B9BEA18D947C78041EE981FF38A306FE6BA6A35630A7D636C1
FCDB936D8F9829E91C20F24FCFF3B8645ECC3AD0C5EA2C6E6490285C3230F195
AE7E6F4D20CAB9F8DC6E18CFAF1B031677089C11F12C5F8A59DAB86CE7477658
A608CB758F249771AE119EF37404C17535023E73FD32A1EF0C6595575A788842
2B0051C282B4B49CAE5BEF89C4830CF8E3071B1378999867C5F0970BAAFB320F
87FC5D14039580BE01C8B223F173BD86C842D1C9ED10B006C9498D723A6E6E4B
3D1F7A62C216ABFEF928F1E2BCE051279788C2BF2C5A059989302773F0C3AF78
609DFD6173CB81DBA26D9F0E44A8E0BE7578B7A682581FDD7668540F756B0FA2
90D7710104D3FB7D11D7DA737251FB47D0B21212E70DAF86A6F2EF86E2824686
D085BBED345F7E6EB57D050B66ABF0B89AE754BF7F8203F0C857CFAE8A868BC6
58413CBAE52F30E55B902ACC35DE87E70DE8EDFE7D803CBB126441812F2FE368
F51654EF115AF46CFBC3800C3ABB4326F97319F3EC1C7389F3C9A5D9E476DA32
5EF015908A6A5B958CF632FAC74FB900E04B0B13B26BFA8A80D7D9C61E853272
B9CFC744A71B4001F9CA02A6E5FE2C44486145F773517B790FFB540FC1AB69BA
768310F537D16FB73F6F857EF419616A0D2E3D646143431C318824FC38A41EA7
745C4CCA4E75E460FBBB1875E59CD940B468FC2DA90F69D361C31826743EB62C
444271924C89E11E79BB215541E3A478F0933EB129EAE44484E084BDDE7F825A
F68920F678B5C4584A1EAB39443FB4126192FE52BAE06F64F51F736877EF6935
ECA18A5F86EDFFDAB7E4DC0F173A13F0CA0B415712169FDB95DA44EBE94ED148
050EA8B17C7BED0D9F20225C3C204A716744D3D19D536F23631F2C05A884542E
408BFDE756C91AB084E55076BD130A5C4DC3BE1FDAFD9348548BA85064FEA8D1
5C17D8D796896A9318D430B2342B9D3806FAF0FD8C3F73BBD5F1FAD85D58F4F2
0D8814C3C4F34403C404C616BA3D47233BE72E4B676F7A211F72225DB3DB146B
DB01C7EF6BB5C62F58C1E729F224EC05FB4EC009EF48E7E56CA7AD3C50F55A04
1447594422EEFFACCE6AF7CC9768F720AF8E10B97F7BE3A270405594D3E06C17
B47719E2678D952E7AE2B08EF5ADC765E59DC22D831094E3986C1F01D42BFBF8
A7CFA315D2A1B0FA5117C21FB2DE99DD2C1D04C2BF832196D27869EE01D169FC
58F743CD16C8F0A7582D5FAADE6BE18603642142C01F7924228A89E0645EA557
455F1027A249EEAD5580BB3D24651664E84B70EF18FF2BFF7603BA3CF4C6B4C9
5926DF2099D19B442950D8AB6B10F2CB000A0D128B232D9A9E24006A4FCB9FDF
2D13FFDD939E001AAF11F61EE5D6A4303ED46CEB347FF787F3B3D95ED3FBB8E5
63C2CC64E2DA3631AB809AE5E76F88B4B726AC41950EE2F482555BF740EFD19B
85536774CBD1C137BF68BAE02943FAEF0D36E3CF03D2E7C4D82D9E93B77A0E40
9B4D5E17600E1E43F5EA1F88493812847848165C1548740C594BBB157B9A4291
7B94466C45736CFAA9723223CBAF554ECBE4972F8B408FFD530B29D86D466F2D
1A2E8D3BBFE5B60766FC706C4DF71BA27A4F68E496316C1FCC57968F790C5E79
48B72C4AEBA609671339A0AEA21D2A485E14007D8E4377D75506A96D9F8DAEAA
879FF07E6137447A43961425A18051A0C0C3881682FBA1FB7D44FCB548EE2EF5
6D3E57F221A0D2242740AD2C6B1DB8C539FB20F08257D40F890FC7E35E82992D
202FA0F4243D324A5983198F2A73CDBD54D8633E08ED08F27E984ADFC4099E16
10A8F1ACBC0DFE56DEF2E75CF68920F678B5C4584A1EAB39443FB4126192FE52
B6ACD7EB3AF8B955FD3EBD100CF8869DC7CCA5CF8B0C5A42A669A86933F8B05B
9236B04C3C0C757CA37AFCBD555E2F519849EECC61B4FFA86ABF086446AA18D7
1F37044992D6FE3237635C58967037C7008FF67D6ED281B9794EC7BF14B5D93B
49BB30825F972433A4B91739103EEFC3B4A83F47864D1624747054CC3E674581
B8E889665FA7F7D2F96BB74F5E3F01C4FD8DDC8DEB238A2554A642DE34565067
23A8F726BE1BF3BFF155EBCFBCE24CBF9C4BF174AB871C254B8E7CD77058113B
702B2C13F3430EBAAEB86F6B295849968F489FC8D7ABE2A5C860D9ECB8BDB44B
7EE36B8356A8740617776F18D167F6AD72DCF39081BF38FF9C114D75E7B894D5
074110BF19A25FB469353337AE55F39C5E29D5D432170FBCB19B4C29CE1C9256
73A60B53D4B46DC4CE9B9FF1A7480F80EC4A178CFD0E70EBFC7E2B72320948A9
C1DE54F4AC61F328BC0529FB4747AB61EB86AFC45B70EB42F8CDA0BAB89ACDC9
A880F301DB98A91C6F34AA573BDF47829A0BD0C1FF5FCDEFBEA026619E1EBB71
D61651F11B54FCE233A82D98E15B31AF98893672C3DEF7A733E839622CCF9361
5936A1F0545734DFD39315573A9888A0522A1F918A31C571CA10F662FC0A6B5C
4998421450718AADC5D397035AB899A16CA36601AA0C8052945A3865D41F6872
019CDDD33DDAE45BBB76C8EC67F7132885ED7689F4D0D4F5A7B7D63407279BF5
7D4634F96E28C1F94FC02C79B3E9EAA99EF2DF8EF298786806E9159B3578C98A
E81C073AD4F231647869550C5C73D8A9AE183F083F4068CD684517F642CECEF5
820C6FC3A77F5F55D30C021BD7151232F1B7CF51FF6660A4443CF494BC17A9C6
44FCC9C73820477D3324A450DFC5A23E03EBEAA640CF23D89D1C2F0FFAB141E3
B9F5FDC218C305A5CF3A81942435388ADD4BDCA01A2A600DD87A29F1884E7C4B
715935E2B9D435CB9B04EDE8E06CE9466B313B6255925F7C908937E3BF94DB37
B53A8FF110BB19E18B570DC8E76669D1D95412A61ECE9F3112EFFC2E3FE1428B
2DAA1853FEE27EF30CB0A494BA68716A5D86A42D4AC9B54C9D41E0DCB52E6475
55DC24FEBA1A6971678EA3492A1641851FF8280D2C1BDD3B727C90D83A01C80C
7E195EEDF6CA42F8B32E1766E711FBEE9BDF168EAB3B30CD4F93304E9E0DB55D
D4D84976976A531DC6F43B3E523AA8313C2A4ED52022C5D8E515B1C00F1BDC65
72F468AFA03E9E5100E258F1F9695B0058487B5426761F4D258EAAC34ECAD9AC
58CA06A6C90641725DFABA79257C6496F5915596B31948B3D449E96A9A344C6D
A654AA4124D577D774A217D4897A261017117AEB0E8C8D9AC87926FEC30CE2BA
0C6CCCA12416589FC533154FD33D8E79B4C628C92AF3A011B67DDB6DCD3D5BDE
74E4345EDB25665463433953096C7C0CC05409C9B1B2B808156B223C138CE7E8
AF1736B1BACD469FC37CF091FF8A4427B00164D21F816708436200C6EFF66114
A3F8BF6138BF547EF45B3D8111AE4E0CBFCF1D5B4E0BEB298B81071A62AE7E78
56ABEC91B8CD1DC24AC1E0C34104FF77CDEE3F0D6C30D4059BC9F9DD82CC123F
00F897A1BCC1CDF4692D601ADE5D83133EF0A5D0FEFB9C0EB9176AA65EE3A129
8A8BB5A1E6ED5C525EAA1D903FB4454D07BE4DABA9BC0A35CC617B9E8BB69476
EF2221C470C6DE35DE090F1E6616D745D03C080D30E00F6F43487B15D457CD21
4D05982AE778AEA1330D4DDD264FD3CB9F221FB4599FE5AF10E3513D141C31DD
7109BCA7E9DB45CE19BEE7F28684F2C4E0FC0D4D59A75FE8DFEEC83EE121F03C
B596517EF1FC465570CE0EE6B820385CA367A8284DFC9F1A12A9E6EE68B39465
9A11BFC0ED3E34B67A5ED2C3154FD5480E88E9BEEB2499BF34A46C864A41AE39
961731D322161500E15ADA373D503552C0B76FC3C1CF42CFC3F4C56D472FCFB5
C942F5517FAD1909D38932713638669FD69CF96073C3BB41E21267B2924E293B
DBA71EA4BB8B2A51EC364937FAFA1514D7A7E2FC165E3601882C720C27834570
C10BF892F79B30340EAD8530826BC5955C8503A6BCEE71DC4F50B5B3B4962E06
D9866AA67CD7BBF2244E10185F6D79C4D91D269C6E4A2F66670D01EE2009B8B1
BB2CBC48AC2F425E8150E0A2C212D9275FC498CC9E2C9F57EF881D478600C807
DDC7F0A1D0D8D463346259844571401A131E488A004961B9D77496C0A0C11451
CCEEEE8D687DFEF89A24B00F079E154440FCF2413D29D7315B04929385712AE1
4BA10E2702CAC526593508297A962130FF121C9621988B5909B8DAA7B13EED89
742286B3620DC94A514FCDCB1CE84BAD1779D94C9B4238067509B89C71E9B881
551E150BAE5EAA9920EBC6D70148E8DD6A47962A2FCC9DCD6848CF3FC5DB4E6C
FEEB32602DA2B5FA880C537F60E1394571392C3AB231BA09476C504EF844C1AC
FD30E3C6ABDAABB083F360A7FF5053D505D1698DB2175A63130FCDF172B81136
4183EE54F083421685CE1D1A785AA70597CBD2D2F8808CFCD3060095F7271512
8053E9B14A055D9F688B1F48A2DB4713B15C80A2764EBBD622778943218112CD
853458D8DCFE0B5F87FB1A9C5363DF6ADEEEA9082B1AB14D189C06B5D21D7E2D
DE51A0EADDBBF0BCE98AE75735D8D8135E0753961BB2255BE5E98ACF4BB25A38
30CDCF5ED01AAD97AA7AA98DC6CB5052261D715735810768798F23A21AB7A2A9
06A891187692144C02E84D49BA4784688941FDFD9E7F97A02DBD8119C5CF0B4A
A548F1F5EE792C48D99AB786A3D5D0C5AC216EA68F8F7D3A5BD929EA924D833B
A22D2A9012287D8BA8C4CB4307A1188ACC0DB7DA045C9E582DF0DC455AD6DD65
F47D33F454316DDF33BE4BF722D8207FD68296B4ABB049ECEC181FEE5B3DDB98
969A0D6C120A6621BD68991FD5593F3197223C9E5E06922C91F5C99F9CC06418
549D42176DEA4E100EA61C8048B6413766DDE50E614E2022AFC909284A4D43B5
CCF136D6DF2322FBF59875757C3637C45159BF0E1C358D8CDC3952A5684CAA59
C47C33F7B3E17AB8FE9F86181B23F111FB284F2B272BA1D75FBFD124F2BFC328
DB055CA8ABA2125F364237560ECA59253BA1D99F332378689E939EFCA683A83C
9AD337F4726906EB3D588F93D21723E655BCDFAF6D1B30C9499E1D9BDAD32E10
DA7F6F6B7522BA73EC097E978C1A3277A9E33B6810E923D71617BDB18BB720CB
E08D7F586D9484EFF2E090F2B7B83498F4D84D520D7684646F54CEC76AC98678
B54E6E3A10388B3AE294B3EE43660E70D22D1F9F4F865B7E3D72C20C80671023
90DF6D9D25468C1E44FA0E0EADDC2F494179761C106C684EC5E7511AECA5B6C1
7D57EBCE1572CBFFD4D7CB24653006874B7FCD22DAE8A539CD906C75020C1C17
7F628F8FC7B19054CF4917BC54655EBA7CAAA85783F40E85979BE5B243819BC3
EAE9E2425C10CA412987EC49D8A696A7DC3322D57784BFA903DC5A829DB662C2
16B676DC8BF3605D078CD0364E3DABB886B3CFFA939C2D6437E6FC9CE04E7AEA
2C7E4A824F8054FE402799ED402F8B86C23DF95F6CEA4642F2409E506EDBFE9A
A184974FA35FC77F7364BB75AE2083C7C66E6C13CF17915BE49975B0394B8BD9
364298FEED3B9CB12EFD2936C1B39A7E85E67FC314037C7E13F3D146873CB848
F7B16C9D22BB89CC650B5F64E2C61EBD43DACB4DB6017F17589F9A830ADC6A87
A8ECF7BC89E2A66A0139EDB6BC868259526D63C1587C09CFB052316D4D96E574
40D0CC6DB888F476DFD4500F7D6E49783E9FC958D3954BB4737612ECE7461B0F
A00E3C4B798386E997BB6A8F931D012BC2CF39B98D52BA5FCB423C7FDB8A3F88
03C0342BE9A2B0185656225C2920E3BCEE9D09CA5C60F22B07F24A26DD82C13B
901BF499128ED228A0548CD9FCD5194B302D289E9BF52A984DA973A1690BC030
E6B9994F0DB9A2BCFB820CE177FC488E0908556D21F5AA813B81FFF08BD037A9
1AF669317FF0AA61E1DFCE95DFCA2DADA7BFEA7C740D35C075AFF4CA62754B46
5E1238245E283972604E3D586979262F0FC065D56EB983207F1478ABCD112D3A
CD5F8749D4EDBC5DCF39D8E6BB078AA738FB22CAB1E57CB6870163EA909F25CA
31C33A6A466CB9B777366802EF25F12883D91F721ABD116A40698F26610853E7
FD07547F78C26311866856D9CE093F651CCB5D86A162EB802053D062CDFD3ACD
21F2431580556CCDCCF71D363EB5DBCB6B8E560E9C740446C3D311F71C48ADE5
2E53620833497ECEF488A11DF9E9251C0554FA532AE3CF6B4CC49297C361D721
4CE3CF8764FDEFC9ED5DF5588991BE92E4F67073A75348EEE15DFFDA2503C447
72003487DAAB5D9A5C6DCDF7F981B9F838C1352A05CEF380FE489886299D95F7
78ECA92D58BFDC557BFA114FBEBCF9B8DA5DE015B4A5F17E1A3FAC930A2C3C2B
EBA86CD8754FBF01CDFA2AF9E48CFDB00A1F9F478384EC4CFE5347BCAE3BFFAF
952C80AE99A46FE5E911B5391C8D67CDD3187B1C219ECF06112A853D45909298
E74BF76A741DB0628FA575A15C61F74AB56C301672A0BE31E078D0A011258412
B977B6701E42CF50466C0470B236BCB74B3C640C7DE47E8E70D2AB8488A7787C
D10ABB9A367CBA8CED2BADB20B5545F35421B6DE423A1EF22B2D0A83C48263F8
87FD33B355612DE3DA6F20B5957F6F748928F9156100AF21730CB04A46A4DFAA
157D2569CF91936714A6AEE5697501FA1B5B2A091350294B1A1AE1533EAAC17E
F92DC3567F629C6C028579B8E643B13A8C83AE0A66FA49704D42BDD9BCA2DAE7
7864042EF587A6D6C04DCE664BF83492D16098A964FFE70979C4696B5B05C07D
62E428A3895B80C3119FDF37152EB582AC94ED5B10EAFC22C750752A6B891CA2
AF315B8E1DEF18FEA368F63489F8963D45A7BAEC93DB1F14FF6AC2C483CDC83C
4A31FBA4EA515DB7EB2C8D407F457962C3723BF6E61E3C3E10DE25AE1908F867
2758570A24B86F46D7EBF24DC37681F484DC7088B6E7B1F113BF6CBA03C00D2B
B80CB291F8E334678484A169ECD811831536E2F66A2B9F9683381C56776D27F9
5AA36C2FD5E5514CA68BB67B6D0DAD8CC299A8CB22ACF60EEBE771122518F8DE
E14A3BB7EA013687ED3699AC741303A4F58D99A90B43CB8C1547939EF2F31348
D48E48DE0895325B92D4A4D63EC9131ADB2503521B69B90ECD4C2BB7224E8FC3
5C43DE0D5A4F0514FF307F5ED154EE1E3AE568702079C5036C5C41344CC7081E
8B778B0AAFA99654D0F1BCE51275AA635695BD883B2F6B22C897D1302ECEB47E
EBBD07669E815625BCD3E38E09D1CFA5C82221100BB685C2140498296402770D
C7262C71EEBF9EE911B32E357A9FAF092F7C3D4B36042FEFA70953AB89F48200
54EBB0D8A2E015FB9A9070A5B29F6B69940F415DCE68EEDCF7E1E1A36E82BCB1
0E5E51B131A7CE8E5020518389691C1EA942403339023DBC4A50793CC443112B
ECF3C52D61F311C2EE3444CC6154FCFFAACE818BFCD031062049D5A06F34DE23
35626096EA26D57B94A928E1F09E543C02BAA1E989E1BDDA6F5B1252670E3523
8A3D870A1F0321B90C4DCB60A818EE4D33034070935EC99DC708559F8D4DFEF8
1A9B1FA762109D5886BF9CE95E98DFBE6BFE61D8947254747CF9848901DD6006
62AA1242A493F00F44CD3A74129B0234BEEFB556B3D8DA07F98984334705C655
69101693F0D22636A00F432618538762FC8336BFB4D379696E73B84B015B308E
FB52EB7278A0DDB6BEE58EBE61914102AD4E5AC0DEF18BEF1136AFB878168B8B
045489489D680E10D295F544E3FCF67EA5E71C1A6589A066E3C09DEF8C946669
EF2C286DAB56E327AEABBFC6867B4BAB0208DB3C5DD474D8829CFB026CD53EBD
14D0E86241AB753C32214F6A8B3B924B6F0B443E7BE8D19252843B5D9A3073EF
CA93AB9C60B4696B15B1A0D49C9B2F9CF07D450B0C05DC94EA274219DDCE0C4B
B93BE4158BD4F84D580E64A869F7889E0FA038EB917797D692C993A030F91D13
9E6D3A0D9FFE091708D07B39E9AA44186B40ACB33269EBAB277426976AC3EE44
A0B9C4A91212648C1ECB4A2F3D56CDE16B6609FFC2D4B0BBCB39E9E73ABE757B
81CD6E2C6956477B17B1D1024AD43C1EB0325C16BFFB59E4616B447EFA22C8AD
FF3328BB39EA279076DC8AFFE1D92099E1AE77B2AEAFD75B82A2A9463279CFFD
CB820EB0DD10EA298634FAF2A230634A369986740FF81ECD6153D837C0983422
60C249D413750FA4B723142BB074DCC9B55E3A49B384006CDA79B9B90EA073F4
3ABA5F319D31A2E23ADE6D0B92044B9AC916BF9A6BDAA24DE24D6CD65831B8E5
0C195D06CBD0ACF89FABF737E42204D7CA411E72AA4240AC0159B2BEE2F21ECD
8FA6935F9367B7EE0E503AE7505C3FADA8CE2FA229D61C1DA78B0DBF62A24D47
AE5385477AEF78E4054D332ECD422011A3968D9FCAC28875B34AB84014ECFB20
C5604C70DC9E98857AA358B5F754BC1808797BC1E661EAD3B9310B9F706A8642
CD6EBCB1ED62EB04BCF325EEDB5A9E09F469071BB0F203F5D8ACB7A816012583
61B4583654F891D0E725E80010DDCCE8009580EF63115ED77167F4136DE68EB8
EEAF35EC68871606D4EF19FE7D9A4A08F4BA36665A80C7DA15AA557C55E72735
664CF1752C33E6FDC967E75503D554FA90FE87FF6A55439612805B4180127D39
4BF0B241179F8CEDA90AFAE008585C22D9DC361A0FFF2CC6C99969ADFAB57808
4798D956DBE9B37E12F0638352EAE8A9C56346AACFAD40459F4F9DC93AFD9020
BD28B685E2E5D38C7AEF7CB6D89E3B9F101A5A71706506E71315B27AA869B9E2
AEF564F4DC9C2C483F0D2B4266B025DF0C80782B325A0B3CF63323B51048F325
F95AB5F5B11C33DADCA31A2CD474FB4376ED082C0CA07D5E9A31F28B335C772B
3FB6E71E7B83AE7827BC12E2F6B422FDF15DE326F58C22DBBB9B75A88281CE91
51EF2A4AFE4FA32112954C5B86EF7AE3D01251EDCCB420B5C9593B11A499EB2A
59858783B57BCE2E8DC183BC31CDFC0DFB5D8C14F78D70E6B9048F394009EF3A
7359B9BC53654E4EA1BC3974206D4EF92EC1E601B60C652116A3472CE2059E67
5557E53A7F82EE005221FCD6C5144A85A9C6F9FD6818A4915EAF14592EFEDEE8
9A42A8A74C8B1939A6DA38FCF89EA2BCFC54BB19612DDAA810B682BDA4338A2C
02B3423A0D61F6BBDA5BA84E32601B07293724911F271963907268939A7077AB
632AFA91AC3B5951B557D62C7728D6E3F13BE05939C2A6FEFB54270C0A460B1A
60291840DE9F00613A8BF1EB189EA3198623E2807AD0625ABB835D6262BA0EC9
DCCF5ED1E51A7BDF2238AB4D4080BD7A221A701417E4B05BE3A7A634A3AF9098
84B02E1A92EF3C0364A498186F24D1D7F5607F5C0F40697E3C26E75123AEAE8D
EFA794C79E34B8A905150CDFD8CD3732FE16DE3909DA113261FBD64985545A41
071FAD8EDD01651746F55BAE6D20F11DD2C8438C13AAF1AD1906A8487D16E595
7857BBF821DB8E4116388E7C2CA43C281567835CF037ACE47977ECE696F5545E
F380958DB049BFF3E0257C0292C8A10A9685832CE9CEEB9F0E180D18E9C1B129
81937937B0E438FD64DCD3BCB5CB9131A76DEAC1E627061581E58C7E6E1AD9A3
1BDCEDD8741D0DDF4B50D88E61C8B69B0A58F9C9A9980BA9EF48BC87BB400731
2B4C8F6662DBA8750C164F5D576268275BA0F94135AFB0C35ABB66C7744D4478
0D6F300ED416C5B52DCDDC5AC3E9ED931F56CDC90C677070565126AD56CB4E65
D9B9B7F1BBAD99AAAD749454CDC40CBD7F0339D4128C54E4543B617FA7942D47
411ADA0246E296E2D20F02C44D6A7D43B6C814E2F47D48B84F12297AF2D26727
9A477BC0A83DAACD2FB45F5ADA40B0A35C687AEBD47B97E2543553F1ECB1E684
00C6706D29DF0BCA1B5C649CF209DAFD9E0FB8418D0C93AC7EAA9DF793A62FC3
E0C50F55A84A78AB2B83EF282429D430CE35AA150D692C3EA405779EBEA74A61
785C42D2C746A98194782D9A504B2A0A92D33FEC9D5949D482127CA20F8DD56C
8A500C6E34DE1ABBC735CCD2C4E4103FEB184076F816ABF37783C71E3282271E
7C8D6163DD185B9F341733DD7D909095F94F916FB94C0EDC6802C21B5561DBC1
B19BFA4431E2C56478971CD1441C2957D3FFA255A16DCC32BB7BB54CE2DC59D7
676B5AB120CA7FAFF1EA78D0D6FD12743F6BC297629A4F3455AFF970CDCEE36E
FAAD437595AEFEE8F2884ED4B99E4A6E1D3A4BD9F0B7E0B28447E741364E315E
7A1B23A1BF716407E9F63873237D152347D3AA2C575D1C0CF4606859CE690C15
F43EEED6AA77BD1AF52AB3DA276F632EFFBE254FC47E726FFAAE2C2A15063C65
B5636B62112E3A5247CD38F0C8DFC61D9996A8FBF914209AE128DC314D141F7D
EE6553BA479B6B5969C0D267A71A2DD62E092626A434FDAA2229EEC078C2116A
4D36295BE3F438D6A7C73EECCEC90B036F773A35572FE436EFCFCB56ECADD7EA
C66D120A3911D284DCAE2018F883AA804CCBBFB91897E7F8734C7573B0B32868
06EC59743E29682A4E2FB2FE7C11602CB8D4C3AFAF72544CD891E6D1911BB38F
55B7605AB38637ED07E35BF8FA4A27354C1D5E7AE14832250C17C02A844CD9F4
2A31F6710DB8CE763A3870C38F8E2A06C327B57108030856E5E8BD7F439982F4
62B44ACD79560771B58BD38E2D621DD4DFFB6670BDB920B8721A0FB87BBE7530
ED3C037A517E7F4D92C7AB784932877B819434E200FFF0DD0E0604021508FD51
080757995DAA6D0E2DB7A9939B29958A10424AA8ADEDFF577D885BF10131BC89
69A7E52BFC97C3C1CC59ED40A975EFDB94D205818CD5AC4E30E92D0294839099
39354ABD8E97189F1ECB563D4909081BBEA2BE164FD761EE98BDE7EDA160FF15
2DADAD834A43DD5CB510F4E2813868F4D78FBBDB361BAC20A85E1E9B8163B234
40457B8863141CA8BEBDC37B3AFBB141634F0D84EB6821FC9B0C4B5071B1FA07
C6576B9697457E6FF9E0F1EB6964C2FBF179818DEF4E72D2F2EBAE7A00ECC0E1
A922D6DED5C4F0A0846A47721CA641EF5203F3FFC1C5D67EE73F5B8935EFBFBA
9A82A7C1BB8209A249087BFCF44024E31AB358F92A7F7539145E1191730E2CF1
B8B86DAF7D7032AA640FA567FFCC739143D56714D28650F11AB8528DDC7BB77E
71850857DC14178B61206A62F645EB9ACC9FE97D51ECE8C22EF9384AF0562C85
694CFBDDBFDBCB94A0D0218F33F2D774D00F1B54515F06E60CB81420DE1D91BA
212A69DB2CAF2834CBF79C38818226FE2A652AC7CAE0A87C00766826CFB01F22
A944EF21FAA6C12D3BAC92E531CBFC79C5700C01A3F0B7FA898E8BB044B83549
541DE2277B1AD90C2E6ADCEB16B34EE0E57E0CD0B4B58826FFCE958C7D36058B
06F3AABB121CA1540BA17F0A43DF8A4D29679157F082AE2BDE83E736F2993D8C
048393BD80B203B16A36ECA3A2B2AD548B7E6BC11F3404DFB91962B2389ED4AF
92BA5D627FA697E110BC240CD8069D8039DE08D0F858CE686804C3F119899F5B
B3DC8DE39690B59808130D8D0F224B875C05157CD351DC708D082D9A9FC80599
A8342333B1C402C5557E376495A1AF897DC7D31CEEF2DBCB2D43BE46A6C48C36
FA0865423AB9F2CFB10AE15729158018D91CA8EF5D527207AB1709E1A3FA4C1D
179C8EBED46020CAC298DAE701CEF14BFF0410C077533233D54CEDD5F0628C95
961A01AD0EC4977851FF7A79BF2CF1E59D922BA5E4D5BA20DBDDBB8359030780
CCEC3F20327790BC6548427F7E1247C8419214AB037971D10D7DE1C40444E589
1308703A1A557D6AEC33EBC7046F305A17FB9397AC08625C202E9BB2A81577A0
BA6A227BFFB8E07695968FCB1C0AC1B004ABF61B57863F0A872C98C09622969F
5488761BF2229D98546B4D60320FA0F0D17C86AA9032575B2891FE7BB08E2B6E
F58B741F645C37EFD3D5B4171074B0B21AE18BE393984499418AFFE576C3FD7B
8E466D657A804EEF1619902225A0732B430F73EF94BDCD8A5E225D29D4532B04
2E06EF181E6DA2ED6DB370C2F9C77266204AF42102A97BC03FB86E4321DA4654
A964659C86241FE188A2B151D9D4FBA51E499C43C4A0AF916D59437C10F28C43
761EDC0E66A5E026E1A9D1AD3DD5D71B748F6814D308FDD1F2E214177FB453CE
BEED3C0725FB5461B64AC3151558CFAD6E6AD8769DB6C8921DFAC0A37BDFF530
845861D5E5C2EC7E59783CA7684D2E9107BF28D8FA0786B28FAFD19C449E201F
291657EDFF15CFDE8CACD53D969020B1B90028C373D3448A3C310A55E4B99D27
A83093738B60E3F89F806F12DC71615F875BC46F1E7A5199DAE7BC7EEB4C5C45
1EDAB35E17F83D0A62701D18826FEC47F867C4FC966D23A12CD507276B67B055
2D00C4D3114908981F51AC4E66A3F824B6E12694DEB838C8B360EBFFB8D45798
018A310214E8886912A911BCBE921B6481C78754B67CD39A57B621289A1B063F
32C69E40D0F63977B44DC57D2D73A7B25D906A47C1AE05E9A2A4432B7BB69C46
7659C2247A0B25272EB84B8AC85C7E817DBABA0E78F36954E9922286067DD39A
4C01FD5FE881F9994498B9CA251192A91D5EE10C07E17A5CEC917631CC377558
E376564CD974075C1670BFE9FE8117BB1D0B81B6B95AF00DB190817A74BFFE3F
3E6AB081015A048EA8A5BD31E2FD4A3C65E04F45CFA084E703772A7BA6764A30
4F98143B209C374E832ABFBF03AAEB334EDEE61F171B62E7EF2085C8D7EC43C5
3CFD25712D4CF64802A82227ED89B7E927DE87A8D4ABF3AC1D4A2D01D9786E29
0974F9FA28767EB61279E07A0B48184A437D4916BE724208D4B4DF01E60FBF63
F44F1E2ABCAC1C928E011C74099DB70E9A4E99B1B92A311A553CB287761B69D2
B21893CC6AED960159774FFFC79D1737F71C381E4D26F24F0DF0D44204E2524B
171BB8159D69CA824B117CD99334626049A9AD892D4D31764965A5DA4ADCAD6C
3F8A80A011F4D7127CA67B6A9665C86478BCEA52B0C480AA4A7B456EED703C27
AECEDCFF8B783BF8E7838601709849377A17A996F6CAE997608D0A185A98FCAA
DF807C859CD6AE76596420C87D291D12CFD87FD807BDBE8E13952104D6EE0726
B4A298F819F4B0E89D91E2735C4D26714D3D3D8C7C311322F4B3113BDD389BE1
217FAC6ABF3636ED201011F687AA6A1FA145DD11A3C3B0BC1BF93B1F0A90C03F
AF28E738D0C557EC92E52583758D1D5AE4904590697E8612476C7782BF11CACD
C257F15121A5265A4B316901E61D0B6A13CBC0EB38FA2FACEEEF8DC018E388F3
C9F683C1D32DBFBCD3D646C01B27E723536914D2D3F4BAB062831E02CF5BB04B
E70869A8BF306700778714A8D7AA7699529CECBBAEF48295E5FDDC127244ECE3
A3762DFF4EC57C0138AE5277D57C4B53EA2F8C915BD95CB67D9E25F9C4C27688
B2FFF11B3C5419C1D2AF7F8A14A61F8D65CD6998E813BAF9B67722CD6E4153DA
1EFE6296246F26ABC2AECA993FD69A810A540B1A42B6D057F6EC11DC7BD2F474
72592808C6A1852CE89A2FA7CAE9AC02990882F3E81B9090CF23C214185DF77B
2944603F47BEFFD06259B256CD1A08F62CCC148B8A82FE0584ABB18035737DBD
A92F6F61640C74AA4A730E278828CBF869D7E5E8AC6296D5821F1DFC98C1A3BB
BF3C3B3194AABFEA61341C59B612180E4E1C70090D5C31014F7CE5B394E5C468
943C93A222AD65F8064A8F420A8C664C6F732F6D1E62401C3DAB3E3D1F7E6221
188218E072C7DCBEBD4A57F54C4D5DC893C92249FB1CB8C3EC2E951DE42DD440
3975B207A05DBFAE8CCFEFBDDB4EB630D529610944338E20680DC1F1C80CBB6E
EE4DA32C1045FD7E0F586CBF2D967E468B2E8E763415D05591F5241B4557418A
1528BAE9EFA0140545252B0FC94BF0F2137F05F524A46A9757D94335F9AA9F42
C1330D4BBCFBA99B7EFE1571BB537FC01D4EC43AD1B8F73F3C70A2DAE6040C15
0F8FCEE87A7483F92277B32B4863B8E4E02206E93022A0609D842ACA6AA03E96
F8C117951BDF30182971A143737D515EC7EBDAB4AF1ECBA1C6E90D2CB592BA1A
84845B61318A6BEABA06D2F8C0210A261BCB5F7E6DFC059ED1B7F70513D93F77
59CDB6B3F043A91F4A7B256530D4492AE7E4E3CBA90F50E8BAF9435EB93AC0A2
43FA85FC190E9A88B6C8B3BFEC85B8FA4718EA5EEDDE9C5A1F80D025B7A76595
ADF5337F8F93BB3B8E0B9BDC870ABBEA04BBABAA8BE01DB2E526AC429EE5BDD4
7A77ADBCF0EEE058EC5BEC0EEC08C56D322EE6880C1967867F79996954F36C5C
090B0A18F81586A94C068446DCC815CA35B7EFF8A256212E9EC4897DD4F12C79
12FD3C94AEE4FB12D9EB4B069E3C6460A7A1DFDFC053A83297BF954050C48466
C4352C79BFA265F992C7BAD1C8A6045A1774C2CD4D57CDD31B28A52A90545B8A
2B4827BA43A63E203F6E03A90ED01EDD1A46782159CD556302D5D14985545A41
071FAD8EDD01651746F55BAE6D20F06B1CD51E5460CFA0338DF1F5726862FAF9
15051533471D2527E0B32C249A45664F725B8465BDC62636823158A3595F3E25
1647F3EFF443E8CFD42368663888593BE9064A1AF90C7A388469A4AFE99F2BE5
CCE86EF8B6EFE2149B8D2AA2DF53F6E853C7037FBB63DB74A5D79874B30F80D6
FB660D65C6BBE76370F0389AB1DC905D2BEB7CD957F95714D15C261A3AEB187B
A1DC2BA013A2DD2153CE4D6CBBBCA4367803AEC14367C0AE98F43E185C1A8172
5F0C32300D5004DB1BD238141F6E74CC0B13B522BF97C5F755919054DC900685
CE73A8D5738C2BC3A5CAAB84DDCCEB9BB7623FF9BE5D7D99B31E627EDABFD4E3
0D5E8A43C98684CA1AC7ABCCE6CF63DE924E16D4177B3F0FB0B6338D8CF73088
1326E27BC33436A35995B50C4D91F52849605E11C8A3D3EFFAC71AF878CA4FCA
F4E57537E0AAD3973FD703CA127A8B5037C6005C87CDC11863DCECAF5A7A1EB6
8C7AAFD6A174B76EC9B4E80F6AAB476FB79CBEBD3391734CDCA6773634155264
287B2BE4D8630779F4CF492E674B2237E61AADA9E11209807CEA508D8C155787
439EF62CE27FB2A049346C8F1199E124C9259328F1D239185EE1A379655DC7A5
3D88C875A3ECE8DF83EE6A858EFFA9D7B7F99764E3718CF5AAD7E22767B3C693
4C4287B17F5613AF6A0821CF81AA3BD93F1BE4CB85ECE0F571B108C0E17D4C5C
38FAD743973C6C9193A77F0987ACE9F2A8EC2DB98F85783C01623FD3612C789A
B8AA14D7E4EA34B5C7A8E7CB19D8F9ADB4ADEAAC85FB9569657AC718C065A32E
F7CA8A1FF5880FC66196E76DE4116B684BA5B21D162765BF1FDA0BC109AB896D
E7BD10D6AD5984693F8721BE6B48E82184EDC509992BB5EDA97A9996AF4B0A1E
4A219C2559BDAF6F4C56D862C6A332FD99AE1170DBDA9AC3B3B72801E011B0E9
D84CD4E1D479981672F5D7278419D03E92B51E62CE40C25D7B9DA7ABDE837B55
1650E889285442AAB9A29D15BB66552ED4929B90EEFB3B1EF3AACA3FCEE17C78
35239CD827F9A88C7DF0449F81590719B9A9284E841009D3C81A01DA6601A3C4
BC74CE6EE6409F66D517503270F802BA81AC408758FEB44D814C92864D76CA7D
E4DABDBB839179EDB098E7CDA3D88B9B026AB9A677D0A13C4AE52D0011F14087
597F21C39DB6A2CA7C80E5410BFF7EA073A18048BEC6FD3E0945857ADD4428BB
CE969610A7732C5F359BDAD07C9A198489AA1D0FA3717BF3CD52E7FC86C8F5F6
E053641BD62DDB9C5117227E44F8CC4B092D9A527940AEE0DB5B83CAAAC0C03C
3F55166FC377E829EB5FFFADD1C816801ADBE116E0E90E6199B6C6B3594E3B70
0F66D216BB65D88A7AAD93961976DE90E40187EA775CCD4F370CABA65F94FF12
D08902EE64F57042FB05705AA92CFC8BE6BCB7150550D4DDEBEC22A3ECA17655
D3DB634F8FB534CD778C28637476374F3EF5D7E61A400BDCD15EADBEDE387552
3CDFFF0F344B6499B844379760DFA626612E7199553D3194EACC2E154CDCCAAB
3B05CCB2CB624861704F5A2E99A7CBCE686079D36E3071F631A523CDEF3329DA
1D2427F462E1BAF3E4C0C52E4C859121606C72C3B9DFF296390DF42837878FCD
DCAEADEDEAE8FD8460B5BB21912F2881FA513A2C7F18B1B44DBB0703BEFEDB36
81A2B609063302129F6B78DEFD5442EBD1557B0BBDE17EDC97C7C86CEDB9896B
A67FB715F0C8D4F478D007CE9EE3809379FAD31892F027493A637E055EFB1650
93E904545A26E9C5B2E795A5634DBDA5AFF5B06734DFD7E18BFAE98A1C243F36
81F4D0E6CEA274C554B884C3BD0416A6805C6D9831ABEDAA38A48DD25CA2B8A0
F318B7334DFAAE85F18EA65089C4AC7E5E21F91A0181155AAE4A63F71D9E321A
C37670A34C8D3BC19ADEA42AE0AB3741CE1DEF5B751D3B44C179A3D9809CCFB1
80F8017A84BA6BFC1BA5940ECA307F7300C11E494882452EDB6FE1780BBA9BA0
5B63D75B8F758456DF3A066B5ECE33BA7514F45F9F618D77B66A18459ACCF686
45A68F72285FB2A586B7F622D5A2C8DECC08F04441BE2105B861FAC6C3D38F32
F29B1DB2FA3169112A5BD3BB0208A83E16FD4236560DA1C968928FCD6ABA9F19
8A053D9F362D8D251390471FBD381152783F096181EB3BC5D10BCAD79538BF75
3AADBD6ED7BE07C017742DDE517DDCD66E0A7FECAB76E8F772650F2F536D0BDA
6FC57B2F0CBD35C95A1C147437C1AE23EB9CBE993DEB6C3FC235888D9E3D24C7
DC65F407F99A68AD7AAE8D5A951A05A5DAB4C473CC5665A315BF1B163C9BB372
A29A8594E120FF8B0AB25D953DAEBE2006856F96C88934C1E80CE25DAD0B3425
02A60C0CFEF57A93F60E383D21DB0D204854AA899ECE4676D80F8AAA5305D162
D03F2BA004DA541162672A62617B5C7D69D73B3D107D4E9FFC5D5B79B7190C1F
0C4DA4A69D35761E26626ADE85A212CAAD639BC4A5B134D08DAF80F9403CAE2E
FBAEFD9CD40BCB32D2B7C11EF06056690527A4EBD1F1355C3BD6C42AC9AAA9D4
6DF7133E8CDB0682EC53FD322AF0C980403A644884D32EC1130C4E43A7FCC0FF
CB223701D90520007D607CA2BD6EDA120F1EABAF82C0383256CB3670023B3857
458FB78C6ECB6460A281A80F502523BC022927BD30ED8E2F79999D0D5FB2D1F1
0866FB55664AA7D6B952B55B81368A8E087D65343CA790BAF08FF13A5A6B6425
75DC74CDEFD3E5D7C8FE54C9A6EC3722200E42295D312B8A7EF6E8F024A22179
4B75C8B06B4A4BD034E3F24618E657FA9EECBF40F78F9F90BE865F80AF8E942C
033B50180832F10589F0FF9F1D002A4194A89B0BE1A6FDF20867C965580344FD
EDCDF9C6305341772A2A0E6F96C15C4D94D24D75A5C6E24391EC255E271D0FC7
B8074A8B93EBB01C8184C83B7A28E66BEA64F6072D7C4E74632D231E334490A4
C168D2B6742820A38B7DE79A37D30A27D24D3B78F8F31A5A922D5223BBBF2490
202E91642A122E21B15AD68CAD7284CF66EF2F61918A08BCB29C4DCCB93B4A01
33D40F4BBBA35573620A2E105880A087F54B0DB592FE6C9CA48E2B7484D25C5D
5BA1DB2F0531FC3A63A2F79D66BD5FC18821E0B0A5F28A25B6E803CBD812657B
D6D7B916AD8B4CDFCB20795D3CD68BE3AF0F3D54F6E0E8664538E38E9D33ACDB
D417FB9B8A0D889B12632E76C1755D82791BAB5BAF14605D68EC3D711457BEF1
FD7FBB2D6B522C4D287BF3AC834D9BC1FA32F703615390FEEFE9852831A47956
00DD228EAFF47BD685BB81AE7053596C698160684095E83F64C9BD1169B71A0D
27DAD19CE89C2E1F6F7DFD9466372B64B42057AC02A201DCC57A7C1F8D88BBB0
79B479426AEC7CCAC4AFCD8E9B9CC0B23E37F7B8318BC73D4EAF7CCFF6026D80
474C75B9A4BEB397A4CD79B78925A26F65B8FC21FEC40FAF5EE9A2C021C2CCD7
FDE5822FDEE5098FA9AC450FFDEAFF4A66DCCA05B4C5A1AEBED96CD54F0555EF
5A53AF1693D077F89B4A7D70CE39A146978516202981DB85BB9B82D69AA1D690
9585C6206EB2542469ECEE4E91D55EA29940282EDFA514351EE0893C86B81DC7
B1A6D09D63613EE02D87601131FF6E34C2364B7262FBE65988A198D84083A7AB
40DFFB62FDA85247332D251123CDD8B49EB3DD7A2193C44B91B552DB894A28F0
970A965692F4DF897F431C21212F698DECBE0DBFAA2905995D38EBFFD2CD037B
26BBDC64D104505946EAAB86199035BEF9C1CFC4C0F4C7A421734301012B06BE
A8F3F58E202E85B88C9A58CBA4A7618222D12C4DAE11F701223AADC5D58E4730
72865E4E96F81272ADDF96C14F3CE0B2B745ECF6699D1C8B420BE27F1EE04092
AC219F01D93032296196F464DEDAEE3265F9E18433F3D28E7D051BFDA5452AA9
CA782A0CD1BEB91F5C09D7B77C26F1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: TeX-feymr10
%!PS-AdobeFont-1.0: TeX-feymr10 001.001
%%Title: TeX-feymr10
%%CreationDate: Sat Jan 5 18:49:54 2002
%%Creator: Thomas Schröder
%%DocumentSuppliedResources: font TeX-feymr10
% converted after April 2001
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /TeX-feymr10 def
/FontBBox [-178 -195 823 877 ]readonly def
/PaintType 0 def
/FontInfo 12 dict dup begin
/version (001.001) readonly def
/Notice (converted after April 2001) readonly def
/FullName (TeX feymr10 Regular) readonly def
/FamilyName (TeX feymr10) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/em 1000 def
/ascent 800 def
/descent 200 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 101 /e put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3166449D69AB0542CB99558019EE
97CFE9FA87FAC14B55E860B5663A3D528CD3784FC9647A2EB72CF1AF4E31964A
3073722CB69FA5370CC5D9CDBF105662CA6188C1B3BFA7658F71EA5765A0D152
E60FD5E1DE3B99CE70C03D8CB4F775B5B17CE9573F5046E61444C0DAFD894CFE
E17604820BBE5A8FA11A10565933C0A8320DC5D116C780706E315C54E72426DD
AF1E6786D883AD182ED327CBB03C39C1A2602471C39296B7681215EC4F0E0E0B
264FBAD453DD3B112065828DC04E265255F9FB51F5EEC233C6A752ECA0246E0A
A2BA69049BBF94E6C8F510D29A7735AE4D122DCCA7B22929270D51C3F1E68174
E38AC54D6418690C765264C7897AD12A84B2C5269A6BFBABF05C20A37C94D927
81FD24D7817897529ACEDD9B062949D02FB9B0E1B2D0BF765675BA16EBFC1C7C
DC437BEE4D9FAC437C6B9E5B0C00111499A90E1BD29C52263829FFEF1946619B
1C81623A436D2FBD670D126855C400F38CE0C88122C60EA0D331AA9636B27218
0CC9B0EDE940FFB5EBCF83EDB330F8E83C7166452669E04F2E95A7718ADBDA8F
F99C2DC815F7ED17655111692621430D077DE661F297A8B6A33FECC10B3892A2
4F8E139F3E446CC7D7F5D64E4DBEFDAD72AECAE4D64289A3E2BE0212CF4A91BF
04F60B14E7522795440054CCBC40C49886656B6918198778A498EDBE40AF4536
7F96E77E40A9D65B1D5447D2596B382447AB5549A11BD5B765F9133E1C5C3071
32075009D2AC8147BC53B4C07B14D548E0F914E600CBF320E1639435733D7563
0053CC74AE3E7F5B9741E8CCB3DAFC411B5F846FC583B7771A7088B1C9B9613B
86FBCA1EE9E8263406C1894EE246BE87CDCAD2BA7ACB7030E45B0866062055D9
EBF7F562FAB6190196A7B8AA1B61F407B2BE0F537129E27376C8DDC7C6416358
384B2A676AB3228144586258F2B82A5BD9AE9E5442462DA626088BAB0C29E8A8
0EC75BF6E5E897761B5D095E2A8EDBF2CA742F3BF155B4DF28110FB8B7FB9A6E
9229F9D0B47376BE7AE5CE6A6AD32F50B62023CB32E8E0CBCDE2110AD8251854
5F8934CDC91E522248E019A6DCA06A0C2D005D541C6ADFF72812F474050C709A
5ED08B5F83DA1FD76037AFF77515188E13073B30F9A49A970613659071E0A130
5A4DD21C42ADFC1DF8CEE802CFAB2A75B7460E9F46DAA8CE31D5F287D3163B98
5966C073653074E89114B1B8A097A43E58DC5E49AC1F70F04A922FF9955F9FA7
20A6FCB10A2670BB3F44D959FC897BA487147A0FFDDFD368EB1A41F4CCCB619B
A362730B373EAC754EF5CE2692576DE100E10402670F41FD38F11A1BB43B7F42
B4BD7BB5F4322C4A9D04BBE445358F4B59B1A5C85FAE03B06C950485E5B304E8
BDA4BB926C21E17B3EC2D4DBC9353CFB90DBC6976B566C310DC801A28907CED3
2126B72E26578DF77022D969D09E111BC1C489E88E7B0315E926B0376B085BB5
3CEAF925AEF208D454C49A6B239924FA18001BD1A7D3EA4E7904830A6A948A79
F50CA56EA772D92627A8380A37F3C30845647AB612D5F6B5CB916996A0EE6697
BC62B6266F4314BAAD796EF51EB965F7C30C001F16442E0CB7A6984B78AEFC46
7D6938EFB347E3287600228311BA24326714E77F1932B80334F933C2926274FA
21BAAD0605BBC9A01BDAD6D5ABB885A4E651B8DFAB60487319C1C386CE6A17CF
CE6F1E639526FE52759F1C88A2B52EED4B93C0AEFE101EEEE8C108F389F9D1E3
205904304DCD3F06198594F313F1BFF10CE7F410ABFE3BD5F47CC3D7DB91E197
AE2EFFB9015482D6C79EE33D31EBC91E7797ADADAB7F682F72DFB7B0B0B6AE27
CDA9C0538E1246167FDF86008881E9F917291B498DFD93885C05A1AC6F3A7C11
57128C3D6CA767C80C7AD866074879C24CC063341E85B910ABD13E4BBC7A48B1
53E24D05C43CAC6F3337ED734614EA91EBA620346F23693C7FAA9F488FEEF7DB
E525E547787CCBE1B9824B1CF0B92007A8884194388AE40560BE9D79CD4DE9CB
96359F98E85F2A49F75B7B66C6444DB0ADF62964CF1A47855F8C4688F95EE5A4
50C96A072FB8069A59B20CD2FC703F2F90D3AD1BAA56A93E3D2E2F33C6E2A7AD
258451B1411DD8DBF07CA0246640732F5ABE58B44AC29D9EACBB671334A141D5
FF7CB44C5D629EF4C3E479B76B6A11B47AE63003DE140FB162E88854291E52CD
218D3E70E007E24FEDE321E5814C501169EE40269A4130721A95CB23F48C32AE
DD7B0B4F6320A76DA8A605679B0863982D6B3D4903CD8184B2B829CE9FCBF77D
6CC854455B66AA88CA78910178F748BAD7A4F32521BA7CACB879CFC719BFE2BC
13CF49FDAEE217C53CE31DAB6FDCF81ECAA2E72A2CF15BD84D275BE55251F82D
C8A19F36545C0BDA65AE10E063F5E05A8DB056F7A41D4DB694C98E4246E3B38E
230D155F7ED10F13F00679BCDF5604F46E28FD15B81B55471B8262F8A2F72AF4
E5387E41E401274B350EEFA6C4F03A1E6E4A6B16E528088EA3C7E0299E38DF46
D345559937225879790AF29198B2FDEFE6FC99C66C69959F3FF98F67C07CE90D
F2993F8732E88A77355D4A186BBC8C299C85DB3CFE829BF9F22AA8D3BD63F0D9
CAC57A7CBE25193B289D8A9A614DA9202F69ABA8FFB96F4281592634A7FC4A21
456B69BF77848502657B7B934003418D2BC937720E67D4890E00A199636842D3
DB74B2F004A6E3F3EA6972D62C62E5D4F096AEB2F194E77B656822D9CFF41D2A
7C14F16D7F07E90306AC87B528175244B92D6C10024132A3A1FC2FE78F688904
3568D0BD312C635BF2C024B53B5624F8B17BEEEB424E619CBE804E24E6EE1BE7
3F159A72AB7ACE1C0347278BC542E4525E503DAB0127B4DB6D8538634CC60BB6
7851F14F0753BA3838ABD61E83ECC39C427E62AD4293F672F8E7C2A49B534F60
E877F23EF5EE0E849AEC5F5E12463F6F05D059854D701CE420D546867EE7E6C8
7CD2553F33682A0BF985671C6433700CA8FFB638E7C7BAE78BDFEFAD10DC5846
AFF08F08956041F2912B4D70FD34495C96D3F9B091293B9C738CF5C9563277EC
3C6863C4A69B09E4DDD525D77FD06C322DAE13FCD48A4EA7B1B6C8F0256FC16A
3B47A4BF0DA1C49EF53974B4BF01C9BF194CE7EEC2C3AFA9E4CECD8C4029CC6F
377E4269806EB0FB78AA812F1513C2CEFB8F50CD18615EBAC10976BD12CBC1CE
8CCAD0333D455C3ED1518FD7F80539AE63A5045D34B982ABB471ED8EB18B50D3
1A150C82182B6C31CC9B161A87361A6D96B63CF0D97A286090DA8CB72991B175
EF3D690C64D9CB5EDDFF5B00B7C179825A1794CA054B6F7A8CAF03DFD7E62F10
CE5BB34BB02E50AA4DD4FD704F147DE3DCEBD3B1DEBAF3483E01CA3076EB19A5
FA2A8815CD360568A9A05176CF4111CB27C54BC8B4B991853982BB7307283D8B
93E5A2D6DF853B6E17BEF7C06A182456EB73D4A1B77FD58A853B07B04ACE12EE
D04046A4E977A39963B144EAB63C7D27F2EE65F677B9892C999BC81B3BBDA70B
E7FFF8E673275F9B84D39E641BA990B9AD160BB73CC391B6C36A7C1D68438243
1606D2298D58EA3879D2CAE2D285011E229372F7FA98F55556F0C4007621168A
A3C1F9A9DE81DA70AB287ABC70C4BAE94321D94FAD2DC3754CA39F689C8221E1
6E7E57EA41F552EF612080D82122D5733CC48978F6BC62E40728DCB3134F4536
C33E222D0E79486EBF9A506F92CCE773BBDF3A764B3793E96393DB8EF1FF0FA1
F3801274B7B982FC53258A752D43261486A2A94B321D90C9393EECE5B3CBFAAB
D0BBA6E49ED462B20AFB384AC2D3E290BC8FE7805D5C0B0D37F04586BDC8C812
686C653A47B40A803819C86FB0C8EF10AA1344350972910363FC0E3DB49A5D75
BDBED15C823E1E870E2F0EFB93A856F3A63E28CB7ECBF17E444B271FD92157C5
8727745CE16AA9376735A8B02F2CB426BB91CCC365CEE49AE5C9938B08DB12B1
EEE55B954D3694FA0AEC0836883D86F6EA4E10ACAFB7CE5D16F858F6DFF1246F
B2135837B67DFE58003AF012885480947A19B0F90980366EC245AE6D8D33FD30
E080775680F701952B697FC8FC07A014B78DEC48017E46AD78EF6EE80BF81760
B2ADCBB63D91D25DCFC77F2B8867BC0092BD9DF8EDD0F7DEDF2458F1F938D05D
DD4C3A7D4B3008EE86F787EACD7C687B6BB09D362E814AFBC75209C457A19F37
C9780469DCD173C5E5BB7C88F4A8FF1E664AD95E1F5D005B4F15416A320366E4
41E5CE5C8A53B64D290AC210490EF404D08C7C93531FF8CFB841AFF5A0E5A8DE
1E25EB0D03018A76C701E737D941569CE252FF92E3C0A05798F47B75B501B03C
D92B56739CF0D76A13E06283CB4F55177E3D6B28C265954DE0EC80A4CDFD91AC
A2FEE87917A4C63BCBDB24928F99D4836A62D3793411FFAA4CC7B12C934350E8
0C241E5C83E1BF8BCE56FFB67F9C7970CD00D64E7CF92F0A9CB5E672852960AE
8959AE74D4DE18D69B095F9F83C2D98F5D6D14B13E76E4686B85A3B606479B6D
F3B52D950EBCFE01639F6B0D9C205C947D60F2F0540D0E8B1B78AF3C5376F94E
D5769B92FC21082A872ADC4BE261FE71F0EA2422B17EF9C0338F63F4D4BA4AC9
D6C76169A46B500885E2CFB8671C053163F186C242F539453A72E3CD4F416A30
6C7A154B28FD021A13A11C78D113E65FAE2A6602D55510502603AD648CA7C698
E61A5B8F3689308EF934594FC5EFFDB86BED8324C690350CB92005EA3EBBB9CF
83EF65EA37BB27D684B89F18AB93968DBB6D0BD835EDDBF6F9425AE707A9E732
7418E39DC60A6EB89299E14D62AEA38D7E1ED70829196DB28D4906BF73574AB4
5DCF1FD068BE2B5B597021EC43C0396D5F172A723556BD8937D6800A6CAA33F6
A061415D49DA0ECE5C1959D9AA8513D8E616BEF8C9411F93E9FBCB6D2637AEDB
B0E719D54E5840E6F71109A5BFB26839255C305080216C0FD2477BA7613C8198
8EB16ECFFBB6D745422204786A17705DABE8FC123005E476FECEBE1C3E240E66
9EC0C64922C42D88A87D2D9766DB3E6273110B2F9281D80F004D184E9484EF54
222058917A0DFF5AEDC9213979C8716488573FC308948F839BFADCA37353F9F9
C7FC6FF049F4DD9DBD476228E880E779C7122C3823385F85F86DA752C3E01A8F
8A103A854A8545E4109BE8AD304A60B54F124EF2A6AD3E5E7EBA6AE533E22954
261017699960A1E27D714C2E2D370FB1449ED84B4169EC1057AC8AE70B3962A8
2A16D2F5EC8818734A52C2211FFFB785AC27000B218464AAD820DCAAB31DBD3C
2F0ABE99FB90E8A188E9E95E3320B650E814FA72E425FC6D0B5E245330843CC3
DB6AB767C90E8EDD41E12FA1973E681A7180A3917CACA630FB0BB7A62FAAF292
EE1F836E10730B4797B72E335F6C291A3BFD7F71EE335C3A6233735DB2A379D7
4D1CC655A657023C0B72C819D778F70D9654BDF7C3DD44B733468029F6DBC37E
1D00A80D8D9E7DB37593FE4C2AF5E00949062085BDB51E9448A41DB88FC7401F
725593E1E2281E1F880F829778EEE4197E71F8E59420EAE7964C98BDA67D7224
51A7781696EE91A0E6138EEA37EEA66A29A778841BAED8A196FA2C9DC4DE9BD6
4915CDF114F441422F0FE6F6DFC899C05D171FC0E370C9D27025B9407AFBA04C
19CBF35CBA1E6328BEB3DC8BF3F27EADDDB063543BBE32195A9AB39C791A053B
9D6B918B1E101C98DA8A4EB26FB47BCACE2863C768381DF68C4C8033BB3BBEF5
E93514207A5AA561F78B3F9C70C691B40F4ED7449650276BAF866B77FC16D797
B91398B1797FC8A8CB148D5C234F59A7E4E6F661431598B68DBA780DC8B34A19
AF4EA912CB694B86D5C7672E57EC16F21F87944F7585ACC0847A31E2777D0068
69A9C658B4729A5A2DB08E093EDFF069067F02F93C4495F9F171AB52A1A5BF64
C71D97FA60A71E3E705E51531028D02B1AD3E8E032AC8E599DE4DA19227401AC
F79915BC3230D5D90FA77C29DB133FB7B4ED7B0D7BDD3B018BAB38126626BE19
57BA72362A12E23AB2C4F2C20CE67ADBB39FCC59111A7A0A61ABB82CE1711D0C
193F0D086B49494669F901CA6013B32E0160B72239DB3C2E229535BEF14DD08C
A8E603EF0B6A5D6FD9CE8EB6DEA304E959E394802B82E7C4BC31E75E1CF077A0
6F520EC408B4237E2C5D41DB0B4395D891BCFD008BDE2F5936C9B7D3D7F7F9D9
06FD7B552B784F7814AE16D8351899FC23B6772BB69B5BFB57D118FFFF07511E
8C6E994823E198A79376EF3E24C11B6FA1F6DEA71942741038EB332490625EED
2F92A7EAA26C64B36C180E45C35457FEEF8039855872511C30AE0BD536024FEF
2E0F40D53EB1845EF5EA9E10FD5C63E01D074E58590F0C8112BC26F1969F9C24
6A4027E715AA573228315FBE916274AE6D17F25A21DD9629263D6D83E1C5E6F0
D0A42464C558BDB4FDBF9201F57C808EDE384E12A8235EC30E90CCA8AA3C36CC
C09C6A6D74F9A30B50CF7D4ADDBFC902F6A006AACD90582B29ABAC673E1C6D67
3A70B27EEDD61AD0C422B387CE691F8ED807C137C5841779A540211331282F9C
2997E5A81A6BE710AEC12B347D9238B584F24C63DD4A34D620644424F315D15C
C710ED000B0D28DDB19A4D99AC1E0E5589B7A6F7B2C86F2F7FA4CB217F201436
991656F10224C5AA8341E6658ACFBCD76E73AFAB6E5B0FC14CB8AA60A1E845E7
5AAE0C73DD9F872EE3D28075C27156BB8D803A64E4126866360A54D16EFA11DB
13E7E52C0693982399545875D6ACAEA88BA0A3474783CCEF9A4B65EE64958091
8951AC0C438C2B0413761A253A43579B0B640FDD1497DE8C21A0856E475510E5
142E3842906AA80914CDE9402E4B37D2A6E53BD127D2D3AD5149AEB5ECD8CE0F
A7609D35FB71A5E542B436D5C7D71A4CB29EE71D11E0C2769C4FE6E728D24E56
A0169D3676D3B731B35E37C70B8015A53A9C15AF4F78D0FBDCE03FDD2C3D52C7
5D852346EA02BAE2FD29487245DE75FBAB597E741336005E4A549429A51271D6
5CBCFF634640DB0D056DD5EC6D5A7DB00E37F666CA703105ECCDBC670A47CDB7
48FE6D422825339A8CA5AAB0B1235F8D8BD2F5D6A3515FEFD32540521E20DA01
A0141AA1F8B223BC02156AE4E096FED912A6C33DF4E150052091700123102EAC
E6AE38599BA0A0CB94E1099475C28A540D3EBC4EEB382E906F6B4A1CE6940F16
77D474945B0DFDB54731F85B138577CCA34AD3BF8B7677378DCCF3999EEC8E5B
5BE10FE19D636B006E7D7290A3DDAE1DCFD312C2726B08676AC7B03A9E5BF580
BBD88C779EF23B655F9BBBC31F4D54BCD94E4D1FB85ED55AC4475DE0DF309494
49CF2BC0A9C60D7DE24DA0C0AB8F50953F4DCE4B2FF8E60DFF1EA75F4BAD4B11
3C735758AE622B81CEB5A8F845B2547C6A43812D4ECF9C9E042425176A20004C
2C4A815A38E237DA4ACD903D32B7F9844B2E42AA7F5A5008C4CFBB51F2A20C24
C4EA6D69F6CC5E79CC490EBDB8A9D4AF6103A6CE3906449DCD35B922EFBDE023
3D5ADD67F4F5BCF49D61F67FB313A8E2F92D29A0B15C6792D299B9510A5DFA30
56DF9000191FA35C2999FDD7132B3EB5E95020B032C8EE2BB4543DAAEA0DEC97
3133A99719D7ADBB2678384749B7E1ED994548266CF51E5DA1E7D78283F24197
0EB74E258585FACA9CC47BAFA7AE9E116FC4A042404FDEFC6D20C8510CDE6796
BF13356BC9A3EDF5DF353F6CB8D21EDF5EB9B50AD6BE2804F23B1727C373DC13
E4B7B7F5F1A0333C4BA7842F4E9F3D067DA11B64EC3D1EA2AFD82DAF0087AD2E
0876AFC12C5777A2743F938C01847747CC7525DE041402CBAA4C45F273A75DE8
528FD3BC80427F9E3AA1EAB57E9E2F625484D388DBA06AA511B556E660B7C58C
232E6191D34214218E9C35838F7532579EF7430063A099A176DA59B024B2CE56
FAD58E3E9AB280F49EFE8B13EB67D91B6BF3BBA8BD16CB5EE0B3FB9BEF37503A
F4114D06702D250FD78E921D8ABD0BA3647C711CB3FF3CB1EAB2DD7137A9CA46
4E545382727CD0F1D75102D7BEB5737B3D3009136C2DD9950F1DEC8859F21328
330224F695949BFE58241CABC4D378ED409FBA824D76C2EB94A55575E0B44B99
5F05EC9CCDC503CEA55FA4032192CEB9D7160B024084A468FCE4AB2F876A1B22
2FCE1702E00029F29A50C636A6C59226685F2B7F885CE26FF2D2836BD9C03367
13420C1A8BCFCB324EA9D26744B77B4BD9099611FC2209A53321B737E518950C
751B2F929CFD04EC824A2439E9BE1C56A3A02420C2B86C24BB936C7752DFE88B
A682B788BF0113BC92352E873AFFFC279F2F3ED949F3ECEED537F134E3C8A2C0
13BE80DE36288A86E93DB390E241AC83B926EAE86FFDF45E037CC3794DDFF403
DC64962FAF85B9714D399C221E36A633C0BB26EE127EDE93B54A6C34C1B1F322
7503847E9CA4622FF6CEB1E9828DABB65D66D658349E0404BD3E7871E3952C91
81DA87EC0F40B008BBE4253D7E8E7EF16C916674FCC41131B68BA2A9FDB59917
8206CB366282C90FC91B59C8A0FBBB26408CD0110EA1587A07E4FB09130E5B0B
852C429A88461C2C51F924B919B8C4F98BA8BF058EACE6ED42C208AAC866A1CC
DB9FBF4227F1CCD9FFAF49713AE4B85EC34FFD123CC49EA507D36DD69F0072CF
B01CCFDD0BDEB72A427A0485F0FEC84B315C854A341951CD338D8B4E7A77E3B7
41ADBA8C621DE2AEB91E65A0D3E1BDEBD508A0CB08F4C4E57D8481592C817520
4B6BCB5196CBA074
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: wasy10
%!PS-AdobeFont-1.0: wasy10 001.000
%%CreationDate: Sun Mar 22 11:13:35 1998
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.002) readonly def
/Copyright (Metafont original (c) 1992 Ronald Waldi, Metafont curve conversion by Metafog (c) 1995 Richard Kinch.) readonly def
/Notice (Copyright 1998 Taco Hoekwater) readonly def
/FullName (wasy10) readonly def
/FamilyName (wasy10) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /wasy10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 52 /XBox put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox {-23 -1667 1720 881} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB02CB1AAE
36F1D7B67C605A37687A9C3F7067F07673039D1E3E1F5D9B09E6A389A55EBF12
06E72531469F768EDBC4DCCA572BD608C4BA8F7EC3E5BC61C6D949C94A843E69
0622F0AAEBF5CB25A2395DFF6342106C198751CF0B33691FC18800254AC54C04
02494A0E3670008E8BA57A3CD823BF47494F2EF9244421A8A0AED84D153D7201
BB12EE9478DF00CA573F64C2474817FF401EE94BACCA8AFC16E776665C3E1E31
89AEEC906A2B9F8974BEA7160C33F0AE7FB04B2666A5B16659D6DF66A688D80A
B531D9F866F21F15D55C6FE75A8787091359698E434EF9C129EED0427EB96787
B3F25C530E3664725C63D4C5DFF9D05CD13619FC41A001275A78C58F85FC7C4A
911CC31CB426231473202A698E5715B032D2206BB361EFCBFE3E32BC0C8D9BC1
353AAEC62EE632FC8FFFDCF6E7D928F562F689406CA00C11C7EAA723B62FFD2F
5F6343AF494085662CE2CE880B04F5589396EAAA8823DBCDE56D868B9E66BB8F
10EA91AF37D76A1BF27E69C2A2ED1D8B25434C0F205313ECB8A6E039093FFB32
983346BEC569B175529DAAD1FFEC1A9302918FC947C390A86C061AE0F6522D79
2D4FE06AE4FABA59F225D7ECE2EECD4BA1359DB18F8957F551C5D6F037F18545
CC6D03EB2DCCCFA294492ED72A737588457E5B18FA4CA0F6D6D8963CA35DFEDF
31A684FC0388D416D7BF6CD9837AD8692F284F24B80CF9F24DB10DAD0C4198BC
2D2A52D9F75CF6C52C7AE0D8D4598DB750E9CC97D0FD31EE8C598A2FF3745694
29DA808141AF4D8F8AA36D7DDCC3457D5E082B2BDF7EE060296721D44B092E70
3607B2335488925E41B22D659C8F0FFEE19A7C19547A147DB851262E47E9C4FB
0A8364BCBC1C77E29A1183EF185EF35B9A5B13170730ED52D5C52CCB460E7D37
F4F37F772794BEA0DA201C99C52F8AC2E4CE7FF33F6ACB796E55BA2372E3B035
52C4F57AB5C0BF828DC7E5A8F8F00ACE0120B99667816FAF5D736BCEBF7D45A5
79C9B5EAA32C9B672D764D2F51B2393ADC71A36AC0D5CA76F3F571D50CB4C1D7
CA77149B8F0C98198919DC43890A7D49B0A6C7268E399C6C68B6ACC0D1E9F5B2
931BAF9EEEA6ED985835323E85D72C6A607A99212BA2DDD24D57809EDE36890C
F8121121306593CBADA65AD9EDED7740C9A2F402E3908B54CB4AED249AE575AF
E64C76BA802490ABB489275E5A3F2B926955B0D961A0B9B3AE205C074AA695C8
68FC2F6997531FC328B8FC65BB06C17B212C8C06D5127A14D7989D24912D1CA2
1FF37457E65829B6E1C65A09C1A101047DF20ABCD57E067A7298091C88C4B587
84409C67D00F7D95FFA0D125FB938B5762D912E1C0E116AA0593B1231FDF3BB1
498BA3D20DF13C7EC6D40091B789C9FB7CC872BB73E6B9D4ED8A555CA31581CA
0F057B10C7A8CE1D7CDD4FE2D5332FC533158B8CE6CD3E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE5020D74C7714FF08F5AE00F69DBED351708B1C760171CE5
5D0FE3BC5F6769FB19C7951CD5DCA774B841330A2C8CF59CF458230A1642F956
21D23843C4332F05F5AF14E70EF052F02F7E3F51D6E7D68A4FED8D2C4A733AA3
8973CF4CDF768C31E35C395C3BF67A79F8B1AC292F38AB2EF22A87A8ADBE2C55
747D7AF3101C5F1A2A1BF6C0E245AC583FE784CD69B918457FC63ACB5FA24E41
CAE39AA9386736476F5C0BD3D01ACFCABB35BD346B884B97EB5F467C93A2FC7F
82A0B3682C1D7B0CAE0165D6FE43CBD8FA5C85EDCD122FAC36F59FDA7CC4EFE6
1F9F8E88832737186037F9E5AB161B8A2090F5569529861FAEFDC91E823E0A0E
A92E7F1118BCF413BD355CD844D0F88C47B267EAFA1585B4ABAAAB9BF885D233
DE4656E4CCC1AC1A5762BE48F5FA88A0020AF17A438014B5902A55EE220152C9
0348CF590A07761415D2F53A866C95D4A6848E2BB7970D176670F90765843635
9C2461BEA57F9CC512BDC51EF25496B2C2253AE85AB38889B26761BA509C7F63
8C6CBC4BBDEA74FD3B43A178C86F9A97423815F5FA2C09BA590B8371D5B7758A
43F98F4DC4792308CDFE2779CA6F20ACEF23FD8FC11F483C0CDAFE837D984A76
1286C4DC5088F5DC4B8D59F781ED48736CDB2D0B9B51340F6218CDD622544552
9BAB6B88481D111091C2CAE5E19903BE5F2C90E79E2469EFE314329B4653D49A
0C4443075770A91CF9303D9A09D90460D4094163FF9D5B9B8328B7D716708A5B
C5AC3BAB6258E19FA15BABC01C842507B425F413F5CD32933AF5DF44D51787BA
9027C34FFCF0EAE1840E691E7082F8BB15A4E9B2BEFACF92CB46E229D1C0201E
E1258C35478E5DDA1B9710CBFA65D1C788E29BEA16B3FD2201250686F02CFBFA
121208FB74F6FBEB770091BFE8FCE0D7FDD0B632A343B6E38A279C2993F343F4
8465CE9DC9E8C156E559FB50C47152D1F35FCEBC5FFF400BFCC336001F8F863B
26115CF5F0CD1789FE566B01F668423A7E374D082D8E0C1181013A82551989F9
0DA6EF9FF06FCCDC760F21283DA5D165F10CC2B8F46D9CEBA0C03EC78BD0FA36

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4A2DE9AEA203B209385B88D9E708FA615ADAD672C6
BE223D5855C0F6753649EFC00A7683A9EBCDDF1610B2D942987DAF090BF54FD4
E7304082BF34EBA0169EC3F6190879D5D8DE05CB5C6CE7C2212251BFE8824A87
3A277D0CE8C588611AF4987F7203DDCE93170428CB54EFDA16BCA73256C1FF85
2C85996873C9487906AB70DAF5E4FF2EBB5C7489358365EE072EB45FE7328E73
5D241828F39C98E813E0B142027DA0842BB3BB3A4EA8DE8EB34BB81AE7BA9B29
193A289A9EA7EC158512A268417204F047097E042BB52BDA0AA3ED16B4315244
E3BB451A99B211EEA2F1CD0A5709AC8CFC3EBA9A0C45B48925B43CD4417517CF
6F42243C234413756CA68A0F125A0E7C1CA1F6166685C3FDC27532C931AC8B86
E81FB0223686025707E5A69C6BF3D0C6660E636D6AD25B03A44355855B2712D6
F84E63A541739B3F161891F0FEF72180DA1546675AE16824DD84B6CA375598B6
C439A2E90E30B7AF6043F860D5D548B166C25921D8DDAD3398299D23D94203ED
FEB2A8899B078698314F08981397316AEEDFAF486F58FEF25284B5B5618A6762
967822C2B91D421D3C8CF5D76D071D3748C32BF1C779E9131603E8C0EDE2D696
E60DFEE5F15D5EA092DCC4D49B16373FD58807C44B06016EF5E2670A911AE147
CC5A9756F870A1716B4DC3D868BDE539079576E5CDFFAC34E165C063768ED394
770CF07675657587CB8A56596847362B00E9728B7CF7F5E85673E4B8C4F424D5
94F93A6861828F6251F206B9131C951D1ED4364A9CCE5383C0DD92E3E329CFC4
E2B36E704F5A2E99A7CBCE624FD99A6A452BDA7CE29D9E0AF72F0AAB66DFBB8C
8ADD16BB65D88A7AAD93961976DE90E40187EA775CC79FCB6654FCFD2269F2EA
7951C85F49D40AE4D7D193541D0631D347B191536A6557B5B8C874FA44E71539
3E6B62F58F9D3B055E3CA3FC5F586E8D1B006E523AF961E9C9893E8D65DAF13D
26C24BC276BC5F72AC1343EE49D70ECA4F25F58B6C3937F7A3D8165EDF4C74CB
B662283EA3FB859F2B46DF97AE05915E791F1CE849154C53C441EF100B3D3F74
36A5F496503A3E108CBCD7AB1104D13535023D5E0F563059F9959F021413C8DC
613D035D69EDB4DCAF6F52EBA08FFC62384622982E88BFC0C20B422D4B14971C
6890397008D96737F48EEB999FCC8F26AC74EE09527348E31E31545F0FBAE081
3944C8BDCF6E32FA15B53C70BD06F06681193AF93A55066E8345D531472249C8
FDCE5D2CF3A342C8C3E0EC7846ACBEEE09B1C6048724F4AD47323294281412E0
33B051DE4B5B54076F7EE652220C5CD20A575A917C9E7F9EB8C5D400FAC3275D
E7A1CB64B5D1B5FA98029D7BCAC785BBDD2D86B42FF91FCE7E06435BB2940232
8654C6213212E127B968C9D09176613CDBBF70DD3492B82A746A18621FCEA034
C5478EDDA7C1280A05B1E32B4537274E5102564EE586F97C1FDE8E7BCE01645E
6997373B2BD37B09BD7BE26B975CFB5F1762444C53CB604A45763B67768AC526
1DF9C7E081A7F60049B0EF4E1912DEA25281CE4DDC8BE953FF658A1117CD4434
A122D6BC79EA3A1963B94B9903CD874CF329240A0A080B93847EF4A6D9FE1590
71334AFCEF5F9F56BE7AF8FEFDD9A275F88659D2ECB70F44FD2643BC95F886D6
9F8E5C9750C4C9E76545696CAC80421363FD81AB15094F74295A600EE8A42977
8B0570F27487933DBBAA82C5904BD2170921D4B2CB846E609078D5527C1141A7
903C924ABA53A4B5C7C390F436CB4C096165F9F845E184CC0594188DC4771B89
04EEEBCC20BB62DEAA105FCD48375C11A3207B5A381FF8E1C1643FAB51C16D1E
2C79A7488B9C54BECCF570BB1321CB3136656AA6256F36CB1B93A8AE9E43D2BF
759505E1F5F3759E08318611701B27F723F3786A03BA8515285CD7FB6640DEBD
ACC45D477D8788EFC79A0297F6D18FED9656B074B08F2CD31FC681245C724A8E
754BDA7CF80902AAFD2B6018DD0680B43A5AE7900B43027D002C318363FF20B5
A0762A4A9A546A212DB60D5242FD1C2D25BCA2B4E479414E699B812685A5890D
C3FD97D8C2434A8886D583181CFE693F96F674A02769B1E1F51667A11F7CD5CF
8FD053E67223B64D740B7B5746E193B5F15C9CAF3AF3BF89D94C253CDCE59227
2EFE43323DFF913D8D5F9B31D94A995E77D369B625ED15E573C039463C85D6D8
0D2E3F6E3D9B0F29434DB3C314312748E0A60E83AFECFC0279ECFDE314BC8E0B
6C0895146C40ECE0760D71E25054717CCAAF6D21D4382290691DBA3D105FFA49
D59C844204CC485B2C61FD26C033019C4ADC916AA6F4753081FA1D94EA99EC33
7B400379BB84FED0BA2E719DD6558D875B609A4EE8EA87A10FB585990593F20A
35C876029EB65E328BC84527AC2D1E06F8F45B9A4E0A50A5974B4E84FAA55133
861783867EAAF8138F4275ADEA0A3E4C5F2162ECC430C5BFD22467E3B7B7EAEC
D9E3E13E5A06C67184BBCFE30B3C2DFDB8B6B023CE7CE84BF2C517B5295BB70D
0AE365DDE57674C4C849CC0D1B54E47D44B807D264B8FFF9E4D785C1BB721B91
E3B18B10A96E8ABB5CFD28CA18CD9013B79779DA096E1F56D87595343D1C24BC
1455EEF8582ADCE366A721AEC716AD2358AE18DD2EF7767E50C44C91D9277A7A
CB3C766C747C1997953D2DE0551410FE5FCC36944911C50C1FB0C41FE10B6AA7
C7B13A244C3D76660C2C850DC2F7EBF48033C4DF64BF191F4D7FE5616B55B114
7525E3147648B24544D4D0D280C358EA9F015D31C4AE041FAB38A00EEA61310B
34AE2E68859E771835EA607E168019FF408B3C783D0712BCA10A436108F0D6B8
7BFF46E7E197D8541D72B9EA99D6F56F1BE23D9AD3885E2CF29FC8866B0F82F1
56C86BAB9E9909EE52CFD9DDA56E43B43EE27728E64F94911E78F99023106688
8CC3CA21D9B855B941930D94B358A511C38C5E844F53F8CFC95AF3BF1C79D435
EAA779066ABD2F6E793C31EB06B9D8CFCC2599AC3E2FE2CC2B57993BF9D3E087
8EA796DEDD4A99CC2F0BD0358E73D500D9A5CF19043C66B6476C28FC1B1B3E5F
EF3A3B94CD552E29288AB0A8AE7D78EFF8A0D27FEF34B60223FC6170F5DD66C1
4CC479605CED53147A5A50D0C160A05FE5C50204E88AE3CB8DE317F7C1449E4F
6C8AE7D67AEE9BE9CD45E6148768A3574A9C02A9899C1C811CFAA2CAE8D21CE0
B3C7A896AAF70F701C136745EEDD97DB15A2E8C7A1B1751A3B3B51168F5CA038
ED1736F9A8F6E6A5BF0FF3FBB3CDE8FDD95D713983A4105B168D570BF0A78073
09D46506E3FF0A58950D3098D7FE2935E62D3DCCC84A5E803390CA8D6FB9CA66
59576952B1E82B00A0ABEC3BE6CEE22FF978FDD7D6A0169B6A38F6E8D6AFF7F7
890DB0431FD4355629B7207682CE9D3EFAF442F2AF2286B1D506BB44EB10982D
93A8B6B7EF00633EECA9F1AAB5EB6BBB58BE17E974BCC9573A1EFA5BA322E04D
C13B0F69AE9CFE9B875E8F942D6612D04D884BFC5ED60AF6B2767143748C7922
0754D8E438192209F66ADE84232027AC430072138756E9F6D23EF60AF9131A1E
73E0DC6575021FE4ED71E56E5191B65FD609DA87EC245ACA71106229B206E64A
5B76FCCDF6A6A155F451AA39165591ACB05A205779277D5695EC8ECB99A96D6F
E3793AE72EB3D5FAD68FA212A5A82376003C4BD53477FC1821C7E3630875D508
C65FBBFE118595C0B230144E5805C3362F459B92E5EDE4967AAF8B092F03A7F6
F958B74F4C184A7E64C964559851F1D60201E5F48DDC07E52E850772EB210276
CDB3B1DCACF9C77B2D7410BD44BAB276A22A7F706EA676E3B3237E1D1398AB67
3990B72A07FDFE72BBE4599C77061CE78BA4FB4FB40DA5AA4ECA921A7A951746
2647319E38C8A5EBF27F07974301E2E93B7D04293BB99598B1764D055E4E5336
34D211F02335827615B8921F38FDB6F24412DD989125E9F871159B2F3CDA6641
2F30316F01EF6896596E5651CFA842724A03304CAF2BCF74B6000C68485587C3
D8E85B76FBB100B302473B848066EF8693A210A84D8FF92461874BFA16F2E459
77B41B9BD11BD43C1BBF5FC086F5E6D6AE79502200B62FD553359826DD190383
7AE05761B5334EC768BCE50245846BF8CBCC06AA8534B8A549D330F4D1172353
85BD95900BEC62087738C87987C4699AEF0EFA2BD2FB90366A4CD61AC689E325
BCE4D467724EE3F7751A3CE5CF1EC0F73FA9BAF76DBFB5783DB3C0F6D60E34BE
594B65D769B1CA320380F01E5A27AC93A9620F24DFFCD9F2CCD28F4AE3E81492
22A29A3A4117DDEEF5925608991F068274C9979D55D77119128D5486A2B3890E
1DBD28018ABA71F4806747F55153715473FA5E181828A4C12A71DAE2B1AAAC97
2597685BF59ABBF4DD5E3AA444423F9A4FF38D0F7935C146E8728C97F121DE22
257D3E0CEEA4F6218392AB6D6B6E5E4BA62B93B21B999853F22A141C4B6215D3
39179A26BFF2B9A9941A38AC4AD655768AB4F5AA13F0A2A71CBE958C506B436A
B5DD42F2FBD4C85A55FD13FAA89F3F3B1F0B82BE2145A47D4119D363B0A8ACC3
266CC638D2C3C32B415E966CACC421D9E0D61AD145AF058EA55E58F59C374DC6
AD4AA8B125F40114881D1A9BFD027E1B0B5AC9076C21D22C18A1C53D4AEA7E5B
C80F59532C46091584E9CF7759EF3E2FBBC0EE740CD6B8EB91026982512AD842
06EC1ED85DD0A6F34D79C333C6970E92C1FB18CC4B968D70DFD13C6223FAC9AD
3126813784C865EA7D6BEB2766F720A79FD93A95D2DBF5092832FCB52B3FD1BE
94E17E5C4E5596023376213B7029E6C578F523977DA0369541D750E3D3DA894F
23329A968E3863DBE5221B22ADA57600D753A9E426992ED6BC8BEFEEAD4FDEC8
E5DD8BF0420343CD71129BB02C719BC5709E95316A5AFF67E1BDD3F5A6455087
145759F387B2E8551B418DD3831EDB4F97F8D526EB046230DE50FDC07151723D
4427F4F6DCE5DE21E630125AE0BA4A0DAD7338C5CE428022FD130B1014952307
812F53AC4D93D6E6823E197EEEF07D85E9D984422D428200823D674B1893F033
848A11287E75B0A8C76AA6C998C9AD482CED7C243C9688323010BF427E51D901
EE474FC82EAF8FDCC119B80A5EC7C70E425C59964A706B659EBD6AD38ADBA424
7D40287BBA2C12D625B22C7264C26191867553D12CA559E3D6271E463D1E060B
20BC8498014FC6AF9154768BA86963E94D7B528785F331E02AA401E30A909608
E8C4C56CA2ED94A8B41C3B8C70FBC5D462FB486614A7B50251D861E4BFED4729
42E287483E4CF87E1719621E73D1924CA503D27875F55315AD3CCA107D2129DF
2865142FE8D1300E2A34A0A8E68CFFA780DFEC1B2DE27EBAD1BAAB063D48C2BE
530F1F6510D8F19ACD02E04943BA7EC7F18E90B5CFA08E184B027F08FB8C4E85
D8F183D2C20E7518C87A3F4EFBC7C446AD7AD4B729CC8A83FE931F3FAA1BF233
ACC1269066FD7220DF1315C0679C0906D77AB2144E81014DCF87A1F6518873BB
51A83E52C3780BB51DAE95945D7FF1D47DE4897284B2FFF95A8A508A19C3281F
49B4689175B1BA401B7C66DE659436405B1F8692E1E8CBCACDF6472686B200B2
3FCE6AC13FAE056EA1B304C5FA750DE8EC0BDCC168B924C861433B8BBEF91142
2ABDEBF64568682CC210D4205272A9AC765A0BBD8CEA4AD8DA1B8E7B416DFA72
7907DE4A92D008A8F4C76C5D597CF8B5689B92A07F8462E3027B1A5A6E010156
745C6FAA1071C1967FE85F6072058BE81ADADF5A3B4F927CABF282C15057A685
0C70147753E076B73687915D05705F38761D54EDCA7FE32B90D3209091D8931B
C21C6F969288B1CAB00D5DE4570C8DB66373ECF7838754B1355618B8706E3335
EA5EA1DB1FAD71C69F5C5C9D103BC2051857423F670D815BC8AB200BFF20B297
7882BF479DCAE546EF65538A1A00B9B346B62199A1AAA40D8B35AC2F519FA7AE
05BAFEDE49FFA847654F564E1AEA4D2EC2DF16622A2681A7134FD48A8C8480D9
137F359E6287C5369650A0642D90A62939188C01706215B1223128DFF2F1BECF
DC5A6087F7AAE1EB3E34869AD5A9FEE87CB3C125AE6CC4F54F0F2C57D77005F1
94AC881C702966F7A9078467440654E87A5C5ECE5B893BB3031FACEE72701ACD
225D6B6A7478607CA2BD6EDA120F1EABAF82C0383256CB36700B69B6D2CB8DB1
1D5DC82583BFEC2642310F2FE0596A730DF653CD2601C5A7C39DE7FC5A89FB86
8D379093C7694D0F1EFB412C14EBB08548C09B8594FA27E14DDF8875E61FBF45
4F661EDD60013B3B39C8764F187D2DAEA219FC53AA14148A7D8647495976316C
481FA61C4793AE5D75F9D1AD8EADCFEE7E92903EF855EF32135A2BA8568F31A1
0AD01DE0E97C139A757CA11233A368C666168D45B8D27B59565B69AF827C831C
4D5256069855635B43A7FCBFCD73E96041F75B585C4770C89899376CBE4C3D95
D4AFB522477917FA2366D421F3AA230DBAC8CA9B123F8F534C15749CF95DF560
437F222918FACD5EFE0336AF81B7A5C79AA9274C5AC5E149720C270310261430
AD895A17559AD3C2B1B4EBFCB46978D4B765625E515256D288122961C954FC3E
AFC1CC3074DC379FB308A4217BBD280FAA44856C5F6CA4CDD616DD17877C2623
6AF4EF03BFFA9ADCA22BFE3ED063AC5E77FD4E22229E2434971D7CD4882F5525
8CB0A9DD55CF0DC6C8146C4D3BD977288F90CF4F43A855888F6626311ED9BBD9
393247D4354949333AA8B1F74559B6E245417E07AD0F5A5D7AB94E4C153F2640
AFF189B6A5A538E8A54843E51D0C7138D32D57A4E5BF8050CD70D140B498BA43
063AF09EF4F8378BAA0E7564D9A0984A8553BE234EBEC0692797103CBDEDCD86
C7C85290AE81BB3381FFFC6801FC793F24F175B4395881CCBECCF3DB788DABE3
03F21C10B6F8E9D1D9C9580B3E2E706B5F98F2FF91CEC66A50A9349FB3B1C2A6
95930A198323674B3723329DA39C7D667A4C093048E3F1C940CFD57D693704BD
F21BFFB63A8B9F41583F75A2D1339A463CA5EFDDB8ED8DC1747380E0BF357209
D6A4F4EE88E660247A9827CE95E6DCA24FE75E77E289B172AF9BFBFEAFEDC2E2
AACC748915856FE50D44AB9A5A509572532F67916F65AE8C1043C10B03EE5936
8220EB2EC579BA747C2E3B33FC4EDEAAD832E8EED1497B856555EFD21CA3556D
93B36EEBFB43FA3E6139FEA85F4B53BAE60491D57702688E977D3EC92D101B34
2516D149E31ADCF4F94BF545126B5C93C07277B514C7361CBA2C2D9543C11889
B58EB0A7FC07C2E6FB4A973A4C79EB315AED5CE3785DD783BFE656597F5FE12E
4796D1747B58D17313B32AAD53A4E3DE7C36EFBF9DC5D83AB2C543CC844A757B
EDCD02333EE413955F0DD137D42B65BD9AD563ADC7E1A2C370C988BAE715381B
F247D955C5D6C8C269359114E9D71C3A318478CA9A030ADD671B749B3E72662E
3939C506EC79913ADF87B75E8CDE74E37C9AB7F35D50296B0B418AE33719B3EB
FF84387DC0AE4856109095A7780A665FC3DB32F9DBA3B60F32108AE4AF6442C6
388024212A31723FA2ABA3935446DCC68233C7BDB6D32D871618F2058137624C
2A35DE6926053D8C843998C3C0A0E56DCC537897395A8BE52B960F67D6D533EC
A263D30C85CD8FFA99700B879B2580B2EA1F1F89CF5B195A9F164AA3649D18A3
F1B0E7A983AF06FCF09E37E9D83826C7818048068497E11F232CACF2867E6F46
2C044BC20DA885EDCD480045C85D8723CA7D2A6B00CCA24AC55E90EC48E4ACC1
5855ADFF57C2FA041DBF351FD9F074C98C6D159862B0A8DF810D0FF6FF28AB27
D2F132BF72F1BE104309CFC797D5DF904F3C5C0D1D4B4F510F70351551583A0E
4944DEEBD5E5BE6AE2FE2C9B92279B960EA3D630838F6E0089FE97E6BEDCFB27
4DF368878AFC67753AF2865FF57A91C130B9E695AB10A9E7D237479C11AFFB4E
0DB4C05C4DBE4EA1D6ED0451C01DCC92B8A4010A5FB94633C8EA93414140DAF7
FDF2FDF4017F94D9D89F1B6F249BCAAC5BF31BEAFBC59BF0404A36DB4A079CF9
2AFED25998FA67CA04B798D11587B9747BC0EB49023DFC9947DE3D2582DB329D
FA26A2CCE2DB8A256480528D81018CB12244C6B0390FD73D279B2D44EEDC1464
D939B5846D2BAFB7D3B510233057BAB2FFC553ECFAB8D7AE2603F966E7A6ADF8
0D431A990664A3932E06BB39225FA37F4A05F6A5962CB9AE8BA6D06AAD39479E
FEF051D62CAC60AEAE6E28F70CEF2009A727371A87A4B415DDC6DCF8B5BAB7C6
22F974A3DD9E3889E69858953261D63A41A2ABE8CD10F8A0C01604EB6ED0743F
50823FE3D6A8480D4BEF7B1B5BCD96790460BE1C2EFE74B9CD084C6407121AF4
D158E0F746526BD1C95EFF6089BE6CE558BCEAB2589FE115233A5E44C1977BCD
C0F42AB3879F9B0A4A6A66A2270372FCFF69A5BEF17C521728BAD2E5A926867D
E93E13CA254FFDA8B38ABAD05F87B9D8982EBA496C82416E28E047871B2B0806
0E2CC989BA3E13B958C0DF5AAF91F50D9A681AB9B5ACF682DDE991AC8B025497
852E03BC071DAA289A84D7DC1ACABDF29591D77ACE1D4FE00E935D285833EE88
7D6C7BF995035406C64054DED8BC381236C47E4363E130791A3E891A8271EECC
4DB35810B23AEF6DB433EAA207A6E98111D319AFF427C2FCD1B346DD76961F43
957C53FE85F8C56A14109EC81E903522047C2CD466CF24ADCABB5A17DE7FC301
C201A9B3E65AA5E0D230265CE32F25AAF41A24D9B74A0FE9BAF8DF5F77D27542
FE442E4D216027C63FE9DA78EBF6575AB221C113F8E414A159336BC38AB11EC6
790DA9A6B6B3B8B66822C8E94A306A83DABD285F4BA6FD649BE24C9024E5A134
8DC7B8AC63A95FF3756A44F596F7FDB278CFE05F885E3AC77CD9BC41F34FF074
D3C2790A24CAC71A4186F17220066A6BB4B83E750342AC615286E4AC04B289D3
EDBE86B8052EC9F0D4C7CCD9314923F532E28EDC1F4EC3D0E698D820350E54BE
16393EDE9646B2D979488D756578B11218BE225E157E7B53ABA05461DA40B675
F081053377364DEFB7F094B0625CED53147A5A50D041EB50F8A9124AC9988E93
A78EC7A59C4290838FD6D9C174D5443843F1A6D6B0457671907E4739469EFE56
75C0FE6A19FEC02697503EC0E7889E1BAB998D3EE2C0BAA7AB94A0807026C3BD
F61DA3D62384F56B64ED2E391F08E5C6D966478C522E1C227FABE5749B762D30
A924AC413F5208F59CCF307F6C40834D6D18C1AE70D7F50490A4FC1AC4A25038
A17FA0849A8937517DFE1339E4C6CE0DEB62D1DAAD58CF3E9C7A0356226A6746
2E3B609E0C07072F3F3E6FC8ACD527A565D5BBF8FBEBF27B617F9877876BF683
7DEB39CC7DC3F2C5593A7FBE0018B685A34C3C85CEDAABD9BCE6C2DE1AD51927
6398707B066DA22EB77764E530DE619BC722BD8A200214FD0114F3DEC8AD4933
F29A3A9D4F041F0A364FC37E8EE4EF7F2450F67A96D44A2CC71B3B327F6B50C8
AC6E9BC0C1E5143A5DCA16BBC20A5316F9F40FA1375E4AF324E6C818F612F8B4
655058AF93C2AE5D9C46B2AB0EE6EF76418EDA7CC6B8795043E5FB6F899C3A65
B13EDBCDA51187777E14F63F0C62F40BC85D30FFDD241E7B7CA87D55C524317D
EBDAC19C8635B0769DBBCC80908D8A747395BE885E484B64A8BB08918B940AAA
4AFFDD33C013CBF06EDF7DF34EAFE36D3104DADE5D30F16A4008C2E2C56EA5C8
F822C591411144CE72E06B401EE6144F9AE5827A5B89299EC09650AEAD8210F7
AC185B7133B77E5C3240A1A721C9922E1F5BB66C669965C39F969D4810AA52A1
F23C34E4D3AA860226603D6AD584EE1DB67C1F349D3BEFAAB89187A28EF131E4
29251F2CF3324E609FCB048910F3D70211659CDBCE05F0733AF9693993F166C3
3ADE345C6AB91921B93E22698328AB963DFCFC3CE13E54945B0A6BCB5633B1D5
80346D913BACD84656E1CF2600212964DB2ED1CF81F3E927856884C3C5FDC59F
9C2C2C9C3FC2897183D705A37702223D1466A3438B8939DAAC4A2EC5C445911C
FDB94AECC50946E35FB1112FCEBC963155762A1019FE6A9467DB7E5464F6C880
0B8397B5A160648F764407E576569F1014CFCA5DC87CD2048C6E2D1B0AC6224C
FC85FA9DC019E9DD68465CC0ECDF2025B6D8D15EBFFC56730890DF9F1E348E52
C52AB385EA99E840668A9E377BD84164A97731F59B60E4EAA3A1AA6D836515D2
68F04284CEC62E2037FE714E57C8F6AA9362E8A8C69E14731135956DDDCBDFF1
95AA2C80E04CF5E36852CB2C4A9C64EF7FBCCADCC972CC9557ADE417810A48AA
AD3EAE66BBEE79E19BFD16FF65C25A312852770DAB7D39E1217619DADD5A529D
D10D83DA625EF5CC0FC9F75FB7A90677C02630C6B4D1E11FFC7193127782371D
3D4884B50E1295C517FC56B86F7666BB8045A2D75631964EA9A34813F7315679
AB2543EEB255B43E04EF1076D4422E27F4227102CF7D568230E8D61B1D07F602
34951FF68AC24D6ADFE3D9C2D6FE543D333529F06FDFCA1636023C3B45D99837
E560B85396E739BBAD71C9160C4F97910CDEFE67643E4CBC6A2FB16A9FFF1E1D
161DAB4FB2DE5CB498576500ADBDD6E6F0EE3204CD30889F575471AA6CF5F9D2
7AAEAD9CEFBB38735C86F0B6262FA6B9121BC44C5A8E284E4873BF22A1FCB01B
4C39C37DE56BA2662E21344E73C74148C1EE1F5B99A02E0F53322EEE450F6DC3
9A4F03032CCA7A81499F8AFE92AA7EB62E988B0D3CE71048399787217BCEAA92
5A654B57FD48914E72FC476A3D4019D08C25E59A2FBB81B4BB62B6863A4CFAE3
7F715EDF3EA5A33679FEB70E685D86F7A7BB423D1A7C21531E2C5151279BFF19
240CB3DAB9948677AF0CBFD70CD2844F5601EF69F81D10D555042E6EE60A5177
B4BF4DCD77A878EB7722F2C9B8D99400E33CD9D09310E77F4A81ABEF8E876DAE
CDAFAC6601D04E84C65AF8E73FD3EBCFAC71BD5CAD1B04BDE78C745B3D99FA2E
D03C4764B438BFC2453C885BBF468280290893C0B359EA0DFDAF09E423761E70
ACF40ABA7B2FB91D6BF932A853CFD684DBF7F19487E8C2B17A53D9B192BB9B82
D69AA1D690954DD77B0CC9B824007A7F1B0532CDB7BC5DD0E9B0DA3088D62C10
DA3AD6350EB9F4F768A3688AC93D924B3D3CF5002F91C3255FD92C02669B9991
905DA0323EC2D622350AEAA20BA78BC29D88A398530BA73A637F4671122F21CC
9CD151557CD0E2122AD01F4119E6587FBB3C5D950A578830C4D8725C47D143D3
00311BBDA22F6E793C31EB065AF61D74406A28F4CF72056AABAB474EEBD3B4BA
2A82AE75813B0EED37BBC077BA859B9D7D602DBC21281BB32B984DFC3BEC0A57
52A5DCF73E7D2B75228E70132D2969FC2B4A13B3B4891F94E4829E3B4E99FDD2
019DFECB8DD1549B730374F5251C04E601C27E854D53B85FE9419365090D58BB
4E0B099DA528E5BB6426A755DD95DD29DE835260C8569B437B93FE55D79C9542
43E49E2C4A7FE4D15D0E8C5B0F468202F91976A5D9C8BDB55141551B05C5591E
EDC1B75251BFF8576F1C9CC5C0E5213D70C45EE75D50C20457E6802E084BAF39
10FA14A5545EC67AEEA43D61A73E72A9B12E19EB6F94A50C01C3739405ACF225
9E1A12F791CF64CF7BD79623962FB0309E69993044EA46E23778024A3CBA9DC4
90FD77F0F3AA902E2ACAADD8939BE7366D1E3226749B9E23E4C2AE4B9E990877
E565A2B8163CBA42B126909DEF1519A72244F9630A3371DF955001433FE00D93
528FEC9ACD00389398C67D00FD880E519D305B0313F71DCAE5B69DF9551D56E6
DC01A8E04B88C9EEEB2DB80D4D07B52CE914D9DADF80E4B5DDFCD4F291E0BB1A
9D79E829E1B64DE91C306B87EE02FD38A70551FF9C8A68CEEEC3E24A8A8D78F1
B9CA789D5B2267C747BAFD5934D95FBD2640BFF7E94C4C26086D63C1E6062E25
A581FADBE7C902B039575F3C31D04C12EF73AD5B6DC764101CD4CBC3FC2A4F10
10CC1DE4412FDCEAB5FDB9516E8F04567E70E8F2AC629B39946B361F257C3253
CC3D952AE94F30C00D2361123B8530369C418270E1C017E33650E24F353E423A
9254DC034E6A536D82BAFFE585B2474643F58C3BBB894CA3DA52D54D2801B76E
BD1D860A54D8E656ECEA88768396EFEC282B6CBC0C8E138E7BD40AF3779FC463
70B7EFCBB468011BB517A39182F77754CFF68E1DAD714EF0EE4F9F1687F25F3A
AC4A5C3CC6895C0717E2271C6A3F722B2F6C2CC9A0F569317FF0AA61E1DFCE95
DFCA2DADA7BFEA7C740B51657F59658779E1F56C5D8A1589528DBE0C561289A5
316BC57EB28F3AE398CCFCD35FCF5AE53F2661518DABF5240EFDA6808BB06DC1
4D79B44B1D65CF8C2EB97FD684819D8D903ACE520E5C7CE18C5849E359D46893
86FD2D55CE0F492497BACB4DB51595758AFDC9C644CC5BF23186FB6F1B63AF69
A845515B38D7DD41EF767759375C4AED1FF192AF561E7AFB4C6710520C895701
EC10BF0539294C548E3C0112562503832AB107A179CB30F3FDE68EE70188B8C8
2CC9A471A5504E98DDF4DB835C0C0896B3CCDCED6A289C01AB88876D626C0DDF
493F875241C5651AC2AF7825D029C3F827820774927E00960631338EF2C03C02
3951C59F3E09157F87CA9762F00A7EE3605118D8AF2D5EDA062C703A602B8232
5F6EE7D2BE04AC7E8FB52D001879C9C3C8061837C2A1394831E059A7CA7E1EA5
B8A37DCC221CE80014F807A53945E21FB4794956F8CC08E514026A46682D801A
AE769BE7F49BD6526B9CC3AA7842D60CB4A26A706440E79F43310E4B9C2EDEB3
CABF412452A1F976B7A481011C7FD0CFD23B1E1537EC02760D88D628814DA7F9
A3B711FE5F7E13D6E20F68B130E28C8107A98B612A4BC3C2E8B2504E0CA6E7B6
5FEFB6FCFB8C141457531E7E800C56BA3B85B8984CD86C93C6A40F8B8EC1202C
05C19AEE115A46C49A663A888F8A0E3C2290691DBA3D105FFA49D59C844204CC
485B2C653F0C731A0FCE134A886C645E9E28195FB50BC27AF8E121EE16B67143
20149241AAD44B2749661CDE6521332B8090911D746C4C8EBC0A4E6AC3CF08AC
86548A8FD6D6DB981AEBF22F7CC829A95B90E4D2AE72DE0693356B57723C60EF
18E5C7FE2EFE91C42900EBFFFFBB7464003CFE31CD37FB970F7B11087373B6D4
3BC6E86AA0D5F88199C0EFDD7812846B9DA0C07F947D7524D37DC63A400DF20C
417B18667B975BF873F4BEA9022072655ECB439AC461AA27FB7279FA09966098
754F32657FB3C5AB5CA79380627BA182659028839789B8E47A6158140C2CDB1D
EEEC6A4DE67E5CB086BF1993ABB48C4D725FCB8452DD3B2CD76D2A60F888B151
4F7C668D8E781B16E78E2D2267610FCAC8282CA19A33F4F18794570C0036D413
CD46A26B150BECFCAB9AC7528E3792B8C87BF92E6A39E5CA4EA8666407756E9A
8493C6DC65A7C3623AF761979566A05F5941D6326BFD00F8E2C46B4C975ACACB
7A8A5A20464A29F8BA7E405259E681AF12CAE9CE1679120CC4D33543DFC4B11F
89A33FAA0EBEC92FEB04C3A6A0FE09F861710EED87D94F45B85F3948863924D5
F3355F74426E72393039EBD068D131C7F302A2F9FB65ECCCAD46169272ED6D2C
FE3CE783D1708C7B09F9A92B658455FB81B5868C9297D1C902409E2D391E2FD8
F764C2C694137ADB9AF6548AB5AB1461702C16DB6B9FC7A6BC09A67527F8AD7B
2E71E4B4F1A2AD2F2CBBD1A04CAD375F74F86A8770ABAF67D919685FEB7556FC
DC9D79CC6D60881693C1A07A7F8AABAED6EEBA8BA073EE6DC6406131859F5979
66BC4372AB83D8D5B8ABAF9B0F4357C55E650295BF384EA49A8232DDA29F1C35
F212F6C202612840EC82155A5AE507640256C42C40E13EA83B67035FE4CA3A87
DADFAB3665957769CCA3FD911D09A1D21C1542320E3F8C7C00ED5B17DE359DA1
87810E26AB4A1EB02F38BDE00115A21706BC3AE8F29C792E455A9BFC7FDDAC9B
B599A95E1F1CFD654ADAF5DE725EBF12B0BCFA06455E229C987A128F53C951E0
B6FC5784C063646137E6FC9CE04E7AEA2C7E4A824F8054FE402799ED4BC95B4B
7668B9D71129FCD524AFF3FCA1C73129BA85E0A87842D60CB4A26A706440E79F
43310E4B9C2EDEB4F2595F82E9D4AC9B5424312755C4B74383FD094BBB2175D5
79CE950FE60DF0A794FC19FD095BA2CA9F4E9AD9A7F48C398B5B6A6A2EE27DFA
1F3F613094594116E0EB95B2C2253AE85AB38889B26761BA509C7F638C6CBC4E
C79E972EC5B389955A931A37C06AD33548F4F4AC188253C01126C61C85E2C725
823EE5D260608D70D7DD605DA1158B380A42D3AB886A9197C0079E12D9A79FE6
FD1A5420BB86A7B1E2DDDCB2BC12801C4A8ECD0B107CB61F2C77FC7F462C08C8
815468D59BDA8F0A1A0372C6F8396AC5D155984F2C2E5939F7FBD5EFBA078A33
0AA3D47856FA551EBBE8B2E16CCC5EFD174057C781DFD270EE430C675F98C8E1
BB7887E2F0C3E532A39D8AB5FAFCA8AE26A8D8CF343D8A73BF2B8DA03BA98D8A
95E7D14DA399540135A0A09DDE121A580DC892423613708F967186E71E9065A7
6F64D7D5EB49B35CBA7981059C65967C51EFA4AE1D1009AFC847156F96D9CD38
A764D0EA70E5E9B0C9F8251FBE08FB8C4BD04036C06AA4752B076F4D900B776E
2DB496C9CCDDD789D38C643B17E3100DD9DE9BB21600E10F28A51822A85F5258
2848C4324241222673015B8653A83C906F22B71C52C912A550242A393A1BBEF2
BFF8F822994D21D9B4EAEAF81C3AE8C464A89F33E4D207A59E5BCD82B4DE1097
FBA4DE7BD4F60E2FE39295961487FF5EF9428B6B265A63F45B5C9B3AD2350058
593F11D1F54BEAB6227878AB001472B32BD540B24672F73D25FB4663FFAADF91
6E228A077CB3F8ABE7FCF57A38E066ACBC9454276CB5C7A58634004856035D47
22B7EA40EDDAE4C8399FE46B305D0E415D7D8ADB913B07B991B03FC783EC9AC7
A95C0832ED8BBE9CCEDF4D8D0EC8AB2AB23D244FDBEDE098610F35EA114FA9EA
ABB8C4E8075D423F40FDA9AF3EFBDC504BF7FCC17CA69283ED3F0C0341FEDDAA
7255D53B115D445AE684F1B4B8DD91CB69558534CCE31AE7E157D0B060877F93
2F798C2F7EC4992C1B5044C152197BEB399437F35ED40AF38923A5E9452652D2
1216EB3326C34D2A0E4E8CF8E5D55DC081E8B58F2F29E19F7D715AD567F556BF
4C89B86970DFB390317A8F1B0971C84FBB39F5FB23526B3498CD1BB0F246FCF1
A109CCD37C2993F63B6A23D412CC5750D4CEE445EBC7F8251ECD7BB67468D0B7
F04517A1A309FC756406669E34C6A08668808E0C31A589D077713670F8226438
6ED3307C69F7B4EB8C14B2A4EE6C75B51CAFB0A95A5445B5800D0BE0378909AE
C60F544C38598761B4583654F891D0E725E80010DDCCE8009580EEBBB0AB0A2F
50FD97666B5D8929A96E6D27DD8B231EE20B3B435AD8B5690C5BCA6D17B9E51F
0E0BF50829783F59517E6F40B4A6BEE3B6989C474D1843A471576D48963FDA59
AE27AF9349B223DEBDB510F36CFA5A1647F7FE4E827083CB5367D9FC51A77E27
45DB8BA22B1E79D2E13F96997BDAE4EF14F9E60E487517C8ECCA81ED1DCF62A1
651F08E02E3209022918E3011E2CF876AD6F2CAAF48461CFA8B2F15ED477673A
FDE287E72E5E9C0AC03130B290CB9DCF4060DB7F42F339AB93A7432453B6534A
BC31548CAD41225BB627A6D60FF613EF2279B10F44600BF2F96B065333BDD91B
A70E841159A94AAFF32725891089C5EFFEDB6CD1223424E0E7060C740031A6C5
D93F21410BC69E85694E66800A32031EF7E9658ACF66A5A8DD66C1A179E20AE6
8B70F4A42C04FF8F2D02B5785D767D4CBA14F5645BAC866EF6355A87787B3915
4505E6D31D6FCEFBE3905EE4D047F83B5654436E45FEB042F213D0C608878BED
85CABCA7750028733B43DF7E1976DD8F74B92C0A2CFB7C30C6846D00DA11AE77
0CC2ED21C19BC39F8267DC256607FD90ADDF149731756044BD459623DA45BD60
B4BFF2C7E594C5E9BE1BD08EFD522808C5959E5E734F30E19C52DCA1380CB09C
899FFE97F4C4594FD3258C8FE960B4D1B1099536ED10A1405C50BA8E02641A35
AC1E6BECA3B6BD01370F94D64631D163D94C8FEB3A2B2DBF0CBFB80898A03DBA
A96353E2940879F4D37180330FE0DC12263292724EC78675E450699FD2B47BE9
8FFECCE7AE347B1B63042EDDC8E4F796DCFDA8D08B083CDBA600D07D25A0CAFB
8D4FAB8B1E6EA539F9870A38E91D74595CA27CF2E0AFAD89E77DD3908263A314
91B2A55DEAA28CE1A3DA2CAEE325208CBFD5BE15AC95FDC12E0CC851D645B567
DE081A7A9EAD3F92C2F47456C636987F2ED8197169E0A1F7BB316913112DBCBF
32AE67D6CF78C056A3D83BE1DA7E14D478001D23895AF7FA5F4B4ECE1EBE8457
FF3FF9610FAD1CDEAB5F63FD0062C7735054CE2499F46AA9DB913C359C3F44D0
B366272BAA510687F3BD46038781DBB50E538C24CD309D08A5C345B599DE1BF2
4F6E22D75D653EA683D0C14C6791B1C337B9929E7C965DB0554F27CE8D7DEF0E
0394DF910DD9D25DACB9329F371A0EE947271A686E2DB6C64BBCE065EEAB1D88
6066BF8758C0DDBB0991688A9987DEFDE2113A04FA931097FE72EA6BA0C45DC2
C3E27DEC00B6B3E97803700E50900DF4199DB691E25149CB9F9BA9D2B54EFD60
51DBA3BC271F000CD7C7928DAE276555270F95F059B9724F1036302A18A254D3
8852856E1543A166B457A65C183FB2AD5CFB286FCD7A632F4731E176513CF2C0
E19E039D13AC68E43861C52B028EA34A49B5DE9C6EB7F1C1DAC69EA9BE31B02D
D2C373B347B1B25FF643584539C34A9E8D306C0A74B4D789480DEC86054E39BB
301283869D267C965B3A568832D61392ECCF75F4D7217CA2F92D500ED16C0966
8A3905D711F08049BB4CD3B84955064C2D965870A6853CFA4BCB289DF7827290
F095DA482A48E46648382CCDFFEDE240D483420C8089E81DFB3BE95FA560368D
0593ED7C9E2AB4B0184BC89A05CD2D298519B469228AA4D3A4F1F9AE8EC65B71
02FFFB6A38B0837953F06FC7BFF3BDFBAE195A9DEA8FB819336130268ED52386
76A05A59CFE0CEEE4FB3EED062B521280A5B2E9787EE8F339CF12A900C34AC8F
81B4EA4BE93919058BA5E86E618555989A91E08046E181D2AC599B9A536A7A17
A5FFD6FF58F8001A371C697793DC694BA29721F1F45723C75A1A4F64FAC29526
0662E8A8F95F922F3AE43184BFC8CA8FAB19E90AFCF255DD01D56C3A7ABD1B05
88FA3A3567EDBD92A16ABDA878A351E7B4A1EAD6BE5559A7443FC381E73EBBDB
C4214C2E5C984730433832EE5A339EB2D7D0E76B8F361CC45653889D13621F82
C7B93A1DFE6318061BA0C11FC8D294E3DC1AE4861F36DA366465980D65865875
ABD2D981101C1B53623D4780359092026B97963471551B137470EA6F1F17E5B1
DE8603AEDB8F38BEC44572A7668AAE3CA2BA0E29549100BD0BFD18D76A71FE7C
CBB92DC92A248E3A2798B71290356DD7F6BFEEA4B132C0FBFD140F9B87917B6F
165CE047CDB621AFB300E8E56243E31E69A8781036D46DAE8DB4F9D93E179D87
1D136302AD9FB72610F1DE7769E3F7FF5A334880F22F48BBA4BE2A2C9A0E713C
02BBB587771774BED09928A4AEFB0BEED82D39484F1BB0CBB7CC407C962E1827
79D2796511855B7A855BC35B38DF3DE0D89C6625C7EBE0A9FD18A1281A776E48
BF2F6CF83F47784713930D9CA83ED5800D3815C8DCEF229871630EFE79C7968D
99CCB21E27F1F1695BA3746E8F4EE3FBA4A58D2B919E497D000EB4A30F2751B0
CA22AB56F3ED3A33FDAA08C57EF9E0F3DEDC2849A40BB8EABAD061EABB87A833
95CEB2402E32DEF4DCB62DF23C0D90F33ADFA4D8EB30CEBBFA93D2D5ECA2805B
DD81B248DC4E0507BA23959FA3E2260E0BF7CA0B74449ECD34DB1F1FEFB74D12
669FE11C131B76580BC4A776DDFB4BA5922B321D3EFEF78A74E1B572BC723CEF
84ADFBC61B1192E4E833A174DCE9216511171E9D4695E9A267DC891C8E1B8731
391FE152DDDEFE2A49C3D3A8F6D39FA7B0EC877519B5031CE116C300D240BC55
8BCAECD1EFDD7DB34F38DCC7BD9A1E34098EEB19AB49FD30B85B79322B6B6B98
1D1C96174B3F42499A2EEAAE3C42B6CCFE6193030413CCF45FADC4C63CD5E1A4
A3144EBE2D1627D670976DDD9E561B64BEFE443720A753E5AD5007CF76E7D4AE
D20EB63AEEF38F8BDB6AEC7B66210078A0443AB405847430C138E5806B3CA350
21D2F6BEF9A0D8626B830A357F32DEBE2F5CEDD56FD132FC9354FE61CDA13CEC
F2355935040FAC37141F7BEF7E58F7B020F43E487D47C9849D74C89F5D38D639
C22F88B276E5A74C1AE74E145C50B74A264E3BE559CE032DA040AE6A3CBCB4F7
17A562D59E09F591BC332FD6DE7D6CEEDD6024DD0C95AA04DA57D74A45167779
8CAFE93965F128307F4526C04F9B48C49AF5AB603D5A1EDA71E17D1C3BEE58ED
7F1BAA15CE597C8D4EE93B17A6FFE6D88BC53AF723A2E254AF68D2E78A70F50A
64574C888613015BD13FFE2EA81370DCFEA642301B1EA97FBCBEC7B18D4B6DA7
E01BD17EA3C77D92FC02BC0AF6931EDC75BF3A4B75C00EED07FDB1FBF66D0C4D
01EFF6B2B387E9F2315D432DAEC0578560925084F713D93AC8F085653117EAE4
40894E606C57779358E37E45D335A604C99C52E0C2C6FCF35EE4FB5A85A1BC17
0B7A2D3B20F2F0CCEDB8A34A9CB79ACC1590E268783ADAEBF9C745991FE09223
F710E74E04F6020DEEC8F28443581C3799293D261F4C9B12E4AFC2076257A180
0C33967AD2D4596B1A44A8E412FE09AE51AAC529EDF6A0BA7413059A58FA556E
F33277BC1406F90367E180A14170F7AC637F3015F91615A858C16C850FD9B938
3AB4333598622C54048CE90E7D45B4ABDC580BF2019E226E84D0850FC5CE6C8A
075A85DD4FFDDCB75C4D62B6E1D64720D4CAD81512E720819BDDA93641C1883B
2283BBD3766B183DECA292D5E19E7CB8317645C098060EAEFC580A369199B893
26A852DBB62FD7C69C4942DD68FE80499BFEE66125FB92F957DDE7A1EC73BE78
ADF6C4EB9642605DA8420AF7DA4BCEDF664BA6DB13755321233449C37F2DA97E
67DDB4DBAA73DE35FC12D3BDAF7171A4DBE2BA5C0584E45746BEFF41235B526E
59326A4B0FBCB7630FDD3459C2B8AA9A243C98EDA7A514A3F61AE13095D64419
2A6B4F5EF8AA281792E9F18F215AA5AF4E66CA4F35AAF0F3B5C8FF5E9B36CAE7
DD76B3919F3B90587299591C01C3C66B1BF7AF133FBF91A78C2F91E0EF033944
386F7651B18EC04D2B8F47B41BBC4815E33196056BC687F886C067FC70DE0B05
B1115F741990E4213E26F95CCCE957E156D3C45DCAA30802AEEB11C502A62E75
BDBBEA9C68DFB8B8458A9D3691D9222931AB2BB03839D83E1DB2C1BFAA73E44E
B2A4844A11BAD3C838FD7F9E50A5B3E37ED24D9BF04CD242CF1EFA15448E7C7A
0CB6A6C2F88211A19C54EAF19F43EA9A0BA0DB57F46D50CF818BAE6C8990B4E3
EE469BCB07BF3085BFA87F183CC0CA3266E99BEAA1313E4A271AD388529BC0F7
87B9E558AAC41DE97CA0AD2B6C499866AC07959B5C718947ED68381DF68930BD
CC8F67701204263E971278EC573514392567A82A2BAF5C430B1A60291840DE9F
809FCF3531FEBB48E1DD9EE4E141307E76C13ED37655816E5DA7AFF8145444A0
79E2971AFCB0E7F0FB33F4C1AB8EC31785A65E22F30976C6C32B26D8A9E0B409
43D122DB889A9289D7399B654E4F862052AC0F6CF95CEBA54C7204ADFA84D373
EB6C2E6DE7EA924E291D49CB877623491ED7FF437AB3A8FF680B41CFA12814BE
58017FF0DA67C49B88397303FDC44023AE5E00DA972C5988471EFB7C4217DB54
611CA297840873961DD95CB0724DC53F6D78388251FFE0BF0C77B8A48183E35B
42DC8BDBBFB34C41B4E9D1A41B68AAFC0A4F749614381B117005F11823547F82
4B0C844A22044164B57EC6F80DEB350BD59B673D5F728D42C695EEC827A13ADD
7514EC6613CE0E97E80C8E8C50E19EB342118B943762347A2A258C0AC9FF1805
B567E19727DECA8CFB98526DCC4F9E890C18E864157E7224B6BACB68331BEA21
F6485E98F73594239E8C7B497130D7F277C8DF60971A857EA1354A66BC043244
30F3045DB28FE1B93FD117F9E2E121025F124C2E9D1B2100AC9805030BBF68B4
A6711E8BA922F9A26740015951395B0BA6754A85551EEC11F701060363FF40DD
ADE236F55E094A533F98425CF773A0F308DBC17514ADB6CA23D49B2424A5F6BA
F1588BCE485A83A20B8BA923049847881947ECEBAE94FA366C4D482154A218A1
53D6C363E8AE443837A2E527E30D59B7DC213DA7A83A65CAD1907E71ACD4C416
EE3502C5058803E8222119AF4294032AB52B71B9C83D9AB5699590939F43F309
9BE61CBE2B2F6FBCCBB2BE1B705BCE1995E102AD21FEA373C300252B0FBBD232
67E07579A580622E48963511BD0C4B454043ED977CDF4E50C83464262A235E84
E89E0A16BF638A412067DB4157267EADEC476416789B4AB8E0938939592E7237
5D6709C27121D0D20CAB7F9BB1F59EDE8BC47BA53963DF15C1494B9207209F90
365EE7503440B2490F457FFC2A29EE4D53016D336E3EE2150856F2B29D009DFD
DBF03E92CB213E8D5760A0315EF59D1B19CEFCF89BDFCE2464D64364D149062B
5BB10DAE3331C3E3C1B56AB328435C9964D7A3C30B1B2AE3EB3CFC4B3FEA9AEF
F4F24846434A03FC3C738895B64E1ED91186552B87816732D5FECE4C7B582A0F
AD4AC225EA9DDB4D6BD57DEB093154C79177B579FBB96BFB730C2122CFA93272
E7308EEFBCE828693A119A53FA4EA4B94740A4E56C52E95B71C4B9F6D7F78871
4377DBBDD3AED5AFFCF2926F79943EF2D46DDA07601DFA75DDFFC079D02952ED
135AF7A39AF43CE597EF2EC393830868AD9EE37A6EFB7D53E24DE218FE4FB425
19FF31EF46A40CBA2E102369AEE67AE31FF6C967ABF95E36C5436452C20C275B
1ED6176CFF1C9B17E88E3BA138F9185ECC8B4432266F91600E02223692EA4612
38FFF855A95BBDAEF679177325A26F367BAD6CC06279077389A26E7EF7030CB4
3C182222FDD6382ABDC14DAEA66002AAC1DDB131A2410F8CED6B15FC06D303CE
EF0D9E89E6660D609C17A3E2095F15E9ACF3D00297CC6C8EBFEA08384809CF65
2F1E602E7F23F0ACBC97C6834B365C39F4F5C39DC16DF38ED4E2751C526F3269
2DD1F7BCB905A78FDFD2C31E91F4374CD9C16DF5742BAE933D86EF556883CEC7
50C615EDCBCCDF38DD4A96ABAD2CF549FFE58BFDFF5FD8954C0B4A8233C15518
106932087FF4370D1C25711478FD4AC8E03BE4A6C7889082384D4F1488C39AAE
612BE6A75FA46A1892885DE2A23F20B7C00DB44D0100B12F5528C491BE34E40E
5A8FD71FAC9F7F5DAD726EAA9F3B4D8BFC53D66A52A2FFDE3CA3A0475E257F37
6138CF38ED100790763669EA6D43EFF55F38E42E50C82AEEA335B5BDE4484A26
1DABEABF52ABEE0CA1C4BB048CCE713A6EA9BAB700F0CBFA678E5F2AAAE054A9
0E1ECD0067AE0565588E1C1EF1D23084B5072E3FF431D72EFC1CC171A179CC24
94007EF4AFC21BB05AB582C53A413CE75765012475DC981AD4E895A5B0B1653B
E085E3424357862DF9D6556034D828EE823D4082C8879A7B6FA2998063BB37A8
4596130968AFB5284A27B875B0433C8AFC6457ABE3015A141357A366C252D98A
47BCDC59C848DFF41CF5A5751D9214D4F81B7825C04490B27954C605C0416406
8CA9DD7AABCDDE7B4DACA4418CED3EA6D2516D20F3F15E4CC7F909E79A60174E
E7E2E04B4A0B14D9A6F44932C611C436C7123CE476AB1532414904B48F65D962
4146C7938A12308AC5EA50D346708BDB0AC78818D8470735CA84594FD02197BA
2767B3BB3E696A279B05BB05B9042CE78D5408A04407DEFAEFA54F8AF6C9F482
EB6FB66EB9EAD3BBE1BF7C1FA760B7BC63A10593377ACE47CB873785FA3784B0
32EB6C02406528FE9910EB4B40F86B92F457F69A41355195B9D19C79616350BB
0029744C713DCA723597A9FC62F116941558BD0FE5328B2FE66175A99BF011F6
74D961E065D0DDFF606C3D99447A8B6708E7052BE02711DA1997964C1C1958C6
10FD2353553818467122CDDC5362EAC37AEE76EBC42E2865C20AFDCD2E32FC0D
EBE69DDDBFDBCB94A0D0218CA92BD782633B9D1051C94D2C55C117F8DA1FCD90
13BA20057533D40EB0EB6973E8BA5BB736538520EC2DEDB4CFB6D879CD892B5D
E377790862AE43DC0A002B5DA556DFE6DD46F4CC5E32FD9EBD81B371EFCA9A78
4E940151F7A048F7E91AD7B8FB9E1F5F66FD5E0F34F53BB27AFE8A4769F6DCEF
28DFAFC8D498C78D6DC39A70888BA725D4943434CCAF7061EE8BF523D5911FEA
B4B351FC50EDE8D18A56D8A70386B64579036F45347C08B54EF0D06661ECB6C6
26F26826B308E53963C6D81B7662165B233E5482AF8D3507EBAF302A5A407176
485A47FE1722E659683915B81841FE96A44B378363B26ACC7D150D1E54531D9D
07D13EEC052F9CD7828712EFCD6D93ED55205D6AF5A8410A54FC2AC18E16E29C
2B47F3381EF256C0F1A4490EE2F1C8DE42D7A3F2887781951039E754F9244B75
D100AE2ACD0449CA64325D4C661E5B322565999C4058594971367F9A2C0B0A40
942F667EE59A0C78856AD34ADAF2289D2A96FB87355A4FB9015BD088A9C20F6A
6BF27BA2880665EB1FDE5DA80BEB6B5E6F6006DFE999E95C1DA00D07F8BF5112
4D286E04C5E4AF642A7BE20500304964A8ED0957B2A13CCC8B93FF7BC5FC7C7A
37AE0523E9BA36BC4A337FF0AA61E1DFCE955F2EEAEF322BCBA29CB9A33EDD4B
57DAAA1AAC63CB418E180A3B72F97E828BF3400068CB9214F6B2B0872F810775
4291930AF549DA9CDCA26FF6CB67B3BFC38024E1FA2AA842A48BF450BECEAC5F
908FC8123E653D43BE4C4CCC091922D164DDA813762B780529E8CD584A8D0060
9CA34737B05659A0462A1AC46DC73A142E2C586C6CFB4609000C6EAE3BAB2E97
4966E25C8C92272252682802A9A5CA12F28B86DF8A536510C34C185D00763BB4
918F23A17633798C09D9877209127AE1251A7C19DE1E5ADADF2A680D97649B53
1827F6A27FC91200176ED1F02EC3DF2CE86DDB34598B8CAED5B6DA81A6C816C7
47524A4435840E0B5691E885DF900D13D50F3FA8594F6133DD5C5F8F5AF589D7
E094DA3786555D0C046A427ADF16C3768A9E199346B2D3460E650FE5767B20B5
6DA1BEAD82E394EBDC3D33C8B63F94DA672C9D042051FB5E063F27874A3C56E6
9CFFC1DF788E0A5F7324DDEB5737ACD900B1DCCB43151AC74059F3693874EF6A
06CC7AA0D1BF4C38F72352C82E59592A3632AEB2641F611F8F58651427252518
A721417258890A0DC408D3A3077DC99FAAB3C0201D5EAF8D402B8B80EFAA85F9
627498CBD67ABDE015CB2D7E286705F0751F9A6B4962EC51C9B22D9B72E83ABB
B9B6E83A478F2D9DB1F9B65E818E39285BCDB6D0874A038D315A6C5413A63220
59418405898378DA2EF4FD28670D9BC6050F4E44A358D3A42FE5BAD25D14790D
532A0AC48D14AD7DF1242A3DD4D778FE0EDE088506155957D7D773D65B777C1F
4509E9DB8BD217E407E93A969F813709104117E31855855865BCFE3D51D11929
E44C07D03436CB49F934EAD47B45692A4D6F22E6321DA20C3D092BE8CEC412D7
448B318C42108300FB5B457F222918FACD5EFEF326E367B7ECF5DFE2488E2322
674E87389F47DEDDA4A10A19A39F3FDD17DDE33F0599DE59935F1EF3357A3E56
336BC75371241ED515E799B196B3B498B3AB131DAFC156437BBEFA62DCB7E063
E5359A69CD68985E43EBC5C062A8DEEE49513DE1CCF2C5CB43CA38B6FA33E39F
B3E774FE80D5704208382313C7492FEB4701E7EC16AFF65A67CF1D783EC7B15B
4330A37FC9C1BF23CE45EBD0A9933445AEA45169E6F0C558A7C76703D9959B42
67AFE2DDBA728A7EB38EC991B37120DB5930DB5CBBA6E59395644CB6F9CBD3D6
037A8683539060782AFAC5638D0F39367847CA1EA003CAAC24CE765032708B5E
11CEE8823E64AFE71B5A359C4A0929163E8EF660794518DA443394A4A1A08266
ECB80F3956DF84FA5B7F11E4344ABEE033C48DA77D8E4506AF80B17E085FFAD4
1D82BB09604A55D80A07AC8FA0E2025DC3B6DAAB3D70C008EE6306A7A01E302F
5F06B6283101B91FDE111DF2819CA09AEA0A423EC6A1346CAB9727B90C5B9334
90FFDFCE1635AFA1E86B584D6FF70DCB47E36A4A2E672F86E37F5B4BE0135AB2
8BCA5D63E1F3B65E79B96936FAB99B1428BDF66FFC0D419508D28368D77C3D74
397492928324FE2647C4AC2955B7719019C977EC66869BDB49B0B41504242E9A
5E28527E36E301C4F2F5A518F7EED0D8FA64792B40AAED1287E8AADA2868B5E1
1EB99A44AF756E32E5C129BFF10F485B8221483C2AD47B0ACA1CA618922F97CB
79720246673BF3BC51B6185221DE66692C15B48475B23985846B15647ED6F765
EE39E783623C68FE5EF475DBBEB205EC6A898F6F7E3E0D97E46E70E3522C4647
CB22CEB29C19EF05607106B7D93853CCB27CF224A55943BF3E32EBF9B46AB748
C391D04634D353504C46BF1462F31E5BA335A20867EE32BCEBFA102AB877D3C3
9510022BE7C2F276BEF4F269EE8E96D587FB25F0F52BA057443EC42BF4E14A57
AFF7B9A1E820720EC4993EC419CC471B55FD84560AA8B3C1A17F2212E2ECCAC8
159518783357F86D30B64BC0185B6DCCAA31E67DFDC33E9675CCD879D1FC8BDF
332BEC52B478206ED9F8FAF6B0A70F46877976C12FF1FA37C9AE0B707390C2CB
C0C271B9B304F156053EA3DEB5A5A9D78DAC108CA1FF9400A3DE2CCD2A72104C
FC4B027AEBDF4D358E8B8DDC32EA97D946684BE3D4CB56F5BFE18F31DA283792
DCC9B9CB6B3CFE7B03150E8AB9F36F21D2701D8169AC79BE86BE40495782E18A
DB8E94A01A71C1752FD2A7D6BC309B32AA37A0A91F6EA85C135F60246DC79A6F
0A0CB71F9DBF02E5B4F408E28EC7EAC069795D4199477AC91A838D5B3B455A40
C1EA17DDD632B9D6E1AF469700695B6BF1B259E36C71FD33CD22FA7701F8C856
878800CB1EECA4A9775F8C77E6CB71AD1D4058A821F1A1CE382A39A8E1778DAE
833D64ADE41D9E8C6A1B3A3086E0EDDEAB2AFA3ABE148250A2E6691C6868C0EE
CE99CA501739264032E9AA6CA3834F75CD709F40BD4DC7DFC06E2053249C0659
466123C64A4922496D357B6650406A9E45D8173012B6F47A079AD96B1BD56860
5D7AC77B468F3D51877DC43D4DB9E7421E9C0E58789C0364CD9A3D4326730695
B087480F5531EB3191C4BAF4825F0BDC13BC1CE8BA67D0B660E9289A4285EAAF
493594567BA982276105D6F7EFFAF597F2ACAD751E7A068F30983D216A120B5D
D42A8633DD3A57EF383061459D4FE39F21E9A7257D4E6BAB483295B781EFF879
DE0185A66CD9916403176768A3E1B4ACF7B977B04020976A66774516464C6FBD
414BA53A72CA6FE435A2B184752DACE1A3E8298420C5F3030AF203AEC7DAA100
BE728339DAFF4BEEBF60DF697A45D03E94252982E23C16B9089EF86145514986
14A17C57C1AC67C4DD40A1CB23AA3E051103B3974B9AEB5F16B01E0506C8EC10
161B77BC35FFF5641E3A087A0EBC9653F1AF9690102DE366BDBF007C713A7D96
87EFB4149F1C44A659B318A1F6DFBE0C02B78E9D05CD846EBD47D78A8300D459
1D19CE476848430A7AF4ED88AEEFA0BC5CC6CDDC7469D4F45442188E5DAA84F1
A8A0BBCB341DE6C7F8F811E92095B6CAF41EE0D9EB4DDA7008A7C6C2F0920651
AB446DE4B78A4031A2271F032039F412F71DBCF5EE596AD5B76327160997AB1E
6E22EE5A58C7B3B5A46A860FA2AF035F5262A29D3332B13D2D991742FAB22D66
F51581C9885CAF09B38F7577B514C7361CBA2CAD63DB76728C31B3352F0D5781
28CCBCD41BE10E91F0043E24640A767F2497924FB8D3F2BD829F18A73BA4F6BD
A48AEF16E1AB71D7C93DC1CD91515816F305001A0B464FC379602573F4AB0970
E6856D6433253D3165DC740B8FF333791EA89B91705B07CEEF52B4AB5A787684
95F4A0B56EE8FD852899BDE18C25F8CAF3D67B0C1CEE2B4815FADC64B543BFCC
12812E4C2580BDA66B52594D5820D99C7C2C98C0799EACB745AC78D8E176B50D
B98341C87E83553829A2F2A337FE01C658E9B4E3698573DCC0A9B989EE9AD558
0F435804FBC388041D4CB487AB9B8BA5A1346AD720461831226DE9EE12982202
8061F5D74809458F5319E19372F8A8F5DFE7CEA77826A5D0246C058EE82C2813
504CA1EC0B3F467B33A9A1DEFB734620343C768AFEFF5E808B3F760DB00C4DF1
F7A259E0754EC3BC07ADABCA84E043EF7C2EE7F2A4AA9EF432736C252F6D84F6
1FEF1A5C7C895EA1EDA6A750662B898F6531A6A2D5CF358A8F64CD0CA264AA04
76CD88D97E2B329E1343198552E8F43E9AB9006DBEBC9017B3819B989811E61C
B899B45393ED57DA1B2B4E28DB63CBB8F0CD54B5299C1B60283D9AD8FFF2F706
150410B430B63CE6CDFE50A16CA281E94CF64E71F6017DDD85B0F8AD2FDFA0AF
BD10D720E2A9DAADB6B31FDB14998CB38811B6B27EAE55215CE7DF7E3A513B6F
F711209BB5A2C829C7B1A5C914C35048E98F7F13672A77D0AE3458B1ECDF8016
AA850D7BF8D2DC529AA6BBF79910583873EFC5268948C46063DE74AB46A38E06
6F7685D386A2AAE4F2CD8A48412C228E3A802A80DC4DEEF08E926B6E70B12125
3D78E5AE16AAFE4B1EE4C5239DEFCE5C7B5CDD36EBEC35D90E6345B12F46BF3C
7B837B8318DE7C223C704B2759BCB427205FD7F4C3D173E93990B2B4866841DF
01AAB608D7C0D6BB31A72F3AF003D28415BE077393D77C96B6024A57B5AE20CA
4FBFA9857F97CF417B218758F11D20AAF8BBA20544B82ACA9872D71C242EB5EC
C0C02BF1073000C305E2DEC1D5FF68111706AE1A00F651B774B7A2A55CD20A57
5A917C9E7D20FF97E415393E6B62F58F9DC86556254A8A71F70C88A3C48C5D55
11637ABD5A6967E6955C93C66BC7B81483D9614D4C40C28200AB08EFE4DDECE0
B6B949EE8A9E1191C972915A64F26CA1C70CFA8F10AF0867C9A8036DB4F50EE6
35A4C8F7A3B6866F93CA641F3F2CC93EDE5E94259ADF92A39FAA53198AFEDB04
6404E51D612FACFA130D6EF52F14202317FC40F6C9E49FEBC2B0D196C67119C6
A702B7E6453B1672D45B719225BD4AB0E541C6EF28B1A347A6DE47C5FF27622A
D08A33AE6C255C3A549B0ECC3CBAADD93DE6987111C9C304CB555D6628A6EE53
59F386443D3D689570B64E63F8B6FFFBBC97BDB1AFF9BB7E741AECD409DBEBF0
C963B6EBFD26E60281A67C24FD84B2DF0D8F6D359A8E08ED6C935E18E5F53719
B72CC6D8AF8E10F6EE8905075A969772C5DCF838AA2F53A1FAEBF9171774C0AC
C8DDEE567BC8A4EEDDDDCFD2BD85125DB894AA7B5E405C1DF8784C701CED64E1
3DC34C71A1BA8AB5CA71420D7865C67A05466658FA04D8CD8266E1D5923E1D84
7D2795BF35FD0AE7A41E0400C3AFC76DA48A8FC99EBDA38E539D9345F4B58F6B
8E3E370C11DCA0BBEB9B986154E767F4DD7373D2E090CE356984C42533543924
78A32E11CECAEAFB7D4C6127C4A26EAC47FB430F2C57D77005F194AC881C7029
66F7A9078467440150AAE37543607554F1F1B427784EFB366CBFF1CD7CD1A0E1
DDE9F61151CE723849A7CC38EEA99EBF582793ED49B56756063AA9C08A7FED18
639A5D47F06C4607B4533DE436BBCA98570E8C4F475EFECA7F27799B549F752D
1E003D47C1960A223B94F37F2B4E2166C080BA84A84C9BC4094080BCC86A7A77
2E21ED913BC038BE15009F761908162BC7CD6FB5FB177B18575332ED8ADD6B6B
61E0BB0EE537065AA8D1F764B7CEC8CF6D19962FBBA782F558D0EDD67F350C9C
4105F867E2AA3F10C3D703AD011E2BE03963ACD7E7868CAAB40439057DEC66A8
0EA7EEDD91E690018CFD3599BB2DAC5937EA3DC4396FF6946EAAEDF229020C94
6F0F8E03A35BD7756E30AEEAD8CC05C552782512386457BC43BBC3A2F425DFE4
BC324C436303E25F013D1F713C24FA7BFD9F1BF9B59F4353D9020ADF5271790B
BBB6BA3D4E22B146039467F3B6901294A6FA251F64B7353A6EBFF04C43B44F39
93B7DBC13E8E66984826F1301300FE37C74CE40E65CEF73F7AF7760C0B265E69
09E20B20511F3CB9B8B8E7E3E4C5F57C3DDEE508CC6B9FF3166F79F056F0FBE4
4D8820F9E44DD978C64A3E01EE69A8B81575E93D123597254F8B2F27656BDA1D
BADAA3DF3C2ED5E06E57F00EA2154EC4CCDDB24A4E0FD024D14D98AF03F701AF
FE78CA58F8D65ED94FAA8674646F56AF5697D3224DBEB1ECAEE519E812008F29
6B41CBDAC3A4FBE58E4A0A7139B77AA48FE941370ECF2179C428025E953E7A0F
3E555EE8D97E6C4F26EA6014230F2D4B667A6F9B14F06F7413F24B2DCAA7C124
795BC4DB0067907A28EB5E9D624CCF34F43878F7D76E5B0744A7C12C1F974E42
BCB59410B6D2E1E31E85314E9031A616EB21241B17BEA5162F72788CA25FE51D
0895FF828168673B934697FDA78BAAF9706D032B3D57069E1A86F4D253748160
F7B50ADE7D40F429F96D0DCE41EEC1EA29EA44F732797472C2F082CB4CFAAEB7
BDD167573E5F212D9126E24F6CA5597BEAFE42535A8C88F9F1937BFB87FC8AF1
5EABAF309A2EE1202FA5224BA737E4701BCD65D5196780D9DF76B48ECF79D7F7
1586F57643F117BCB7A4ADCC3050B433473316A738118F7EE734890C67B2C911
2FA9872B905F25BD3D4181C84DF302A38848E2BE10E5F8D6F93059C56A223A97
F38D5A47FCDE5D3B8C644FB31DB953FA06A563644E59B5BF520CE3F20E34AF76
A51E49D3987DE5A6D98BACA13BCDBD12ADF11C5FEC5DD89072F6A6708A2EE664
643888AC42C07FE0438464845B950140ADD971D94571113689C17518C00F3748
5EF58E37EEF30EAB487B6E7AB230EBC988C62834A18C531EBE04D392E4419967
E0D5695B8E2F53EEA421148D0ACADA4E7EAE558069849FD51D8ED3E30000E9BD
3A00B6103D5F03C92D885953DF6CD1C03F7CAFF9132D0D6BB87B2186B6ABDD86
F04C4B5B37F3CC150D13B113338D0846106385A46770FE5AF066F6B87A2BE3E2
1C1373129711D3BA7C52C08E87AF023C833F2E36C295852B1098006F532E9227
C04A548A84E8652AE73A8A9F17FF6986E143A620190406409E997AD5336173B7
433004E8F157E1CC86E8B493367C1B2F29BD889AEAD3B9F0DAEC604C1F5A6755
645E46D07015BA4B738A79F717B2182D6F2B4D318F402D28F2E84D2EE6447437
BF27C61D987552FAA97813EE20376D20927C4E0DC4DFD58A4E7668ED60549231
88627F7C9D623037D39A84724B933EF47A3885068FCA8396A30A2E76058489FF
AD8BB0431632AD04A6AFCE6D4D96E57440D0CC6DB88B07C04ED41D6F8B8CA628
0509CD27903207BFB7954A2C0992300B47BD67CC8C0C1792CEF900D2AB0171C4
832AD5FAB647BD0B993D5A426CCAA11CD55B67739B2771C85D972E30019D6E64
5EA2B73CCF0BC0BF2E27A0174B3860ABDF6C1724878BFF7A7084B0859FD5C0D0
E719A41C35D26D426B269537BD1E24DF0D018CF19B1E97754343B115596B4249
77CF88172D2583B7883436956E4FC7FA0C1A63D184C4139B0111BF88E55C4E52
F038F5EB123C3CB3031986758CB5E40FAD2BD0AD2BB97E61709FD87A5AEF8838
AA6A1F75055A1FADD2331006D3585CFF317F9B50E26AE0001971999137EEDE38
29DA236DB5056BCA70A7E3B757A8130BF3BC078B17590D62EBDD4698E1DEA814
D34AD1C22BF3D7E222146343ADA94B5CCEB47E03B0CDD5AE2CFCAF3A71CDF39C
8F273C4B86DFC413FF5A9A63A5B0424D878FD37158B94CF3B5A065C72A1740E7
38E2B4DC829905CDD01E943D7DF1FFFD43F95FB85A0214F2716102CA0D574927
EBA663A5DB48584942F6654AD3E6972B7B1FB47160B1068E5FD1CF76B4637761
021E6D056777D2BC8E2FB2A8A79B5A871AE31912E0318C96CD8E915D11A05CE1
D75675E1D6C94B21DDBDF43359C5FF9DBBA30692B5E9EF2A38A1735E99F05918
D36D2560DB826DFBA53B7D44E35975420F3D1A1DE6A3DC8F7A013FF5864C01D0
8AA572C5372440B40FE2F0786E979497CF2A3361B379302099E87817B6035763
1E8FCBF5BC6EAB714EBD60E1D3B1927B8B1A4AB7C1A7BE4066E1E941A608D1AB
EE882F8B8E79C65258994E4A6F5A35058E489C108B343768673F7BC914C002B9
68C161371032BE4902C3A263A8A834C2D01BF981CE2752541E8973A0C0D334BC
8EFF9A1D158918CFD19E62606A517C1D8C06CB146DBCDE67B2D52CF54D7C0923
C5D496ECFD6D06B9A5AFC8C8C46BCFF335C364E32F0BAD986F7F453D4A5CF4E6
1D3044AC9A853EE1CBD9B27F02F2A59D8C0728318E9BC398D1E31C6CFD99A35B
3E8F0F4E1CA3334B896527CC6D41C71E83A0133EF11EC96F5DC63BBA68171A2B
45B7BF2A2F0F089E0EB4AC4DDF979FEC18797F0BC9BD2E49BBF1AA29F3CFB26F
B764425EAD86E4A3D0F951A935C93B0E3B19315B78C75A8B3B67741B5CF20D2B
0D3FDD0591B2B86B7640FEE3F74B76495AA9C0A31E6DD91B8073983483B8E9F2
3E06272DC39C1C6A7F0ED10AC47CD69052DEA26DA128415644DB8868DB059DB5
B47DACE807262DE36F9D980470FBB364CF9CFD044294F3A962028A5F05E033D0
5AEE34891F056F06C1EE01801415D6A6557ED09C2D3370F247F772C8099CDDB5
F3D586B9B5A9D9CD9D7AC9759F8F1EC068A99627ADD833BCC4FC1E1CA352F141
B90621C17047A200CB5F0CE9E260FDF3B1AFCEDBDBD9C2F46DF281DBE43CD8F4
59770323F9A29B49C2FF1894F73302CDEB4C4A1E09D4671353EAEB628E09FF7F
84DFAD12EBC8EFD087BAFFC6C93AF8FE338E70387B4F1BA211990A7001BE9E20
CB160B6BC81ED4696D66169BDC648AAC4A65F327D58731A241E11468BBA16BA3
494A4E80FF10AF773C3597C357ABD25D6B8DCB78E81FB5B8D5C70216F5D2130B
EEB425D3760296EE13DF23B383E39712D024ED17E320FC6896E2F408B840D4FB
9786E782B22828CBFECD40404DBD9689044B71F710D0D5A3B77A6480E9737265
65FB2FD643A7B82B3CD8138BEFBAAC4411B52393579F4971D2AF486F58FEF252
8435C6426D508A4A9ABC9B5CCDF5BB8890D80566C9B85EECACFFBCE575E8787E
78C55E8D3825FA54222D3F56DD91A409F5C00077A7B5F0C62E0D34EE76FE6EB0
B3A2CF8CAF784224CCE088FC754D3E928A2B24D0AE624CB648EF0A2E816D6C1C
3C83FC0F155BCE0EB7A1C0A3AA55193D46F2AA6C0449E981DED1819CAA09BA1C
64BCD8DE52B3A03B9CBDC6C8D64A1EAE795563C4CD9E7DA760447414FF4CCA4D
AB06CBFE577AB49D78602657410BE86AA2F5832E0D2619B8C1EC0024EF9121CC
E324DBD533DB22E63F810E6A3000E8960E71B73E9003276E22FA46D9D7F0C3FC
E759760BCF5D515227825142180E0794C6219042BF77D2A0B847B4E2CC001470
6B7619A3FFAA4907ECB18CF636D381D39E07E0422F9270BCA9821869759B6426
56D955CB3BE18EB9DD5A0058667DEB43C9C7EF38D99A9D84EC93099F2F0B79B6
F0FE3BA5E17C3669F5168EDCD3F3DF78CADF2A81B8BFAD881223220B4F404272
3C95CCA984DC3DBF43A8EF7F122A635F3870495CF8D62B3AC4143696628549E1
223F5F5964D8FEE1845A86F9BDDB2548C636228369CC02DE9C5B6A9ED253D993
C5C6E67459D92ACE61C3F7540FA825DE6E0B910F0CAF88E6309CB00AA35EFF27
0EF22D0376B41C806A9ED583DBC692208CFB1D4EB66512DBD85CA66FEEB46399
5EF7066EF0AFB220FE19A49EB329E4D0744DC2F3EF68DE59428D533DB0EDA647
9BEEF52A12B3A0DFAE6BB7424A76B49084DAA4E59970562C15B1C4C682AF7623
02005B0400CB5F7CB4982A8306ADA1DD611045BD9EBEC8F177A8022199D0A7D1
3EC01FB7DAE0C84509C5E1537974E0CAF7DAEC080E933815A5B9D713E5184646
740BD790BF10405E80AF3C1B82D01A235C940ADDDBFCAF37BA2500213239F12D
C7E00B67C672ACDACBEDA775E1D468BB6EDE702D60DEA3E876774B01C99060EE
05DFF3E8A2D06FEF8A8810791D8613AE66B90C88D7C77FB1097C6B36D6495916
FD69B176E7FD7B96218D3B32A636FB671E4EDD08ACB06E6C5B432D17D98032FA
ECB356174BFDE732B68F61B19CB6C0D61EACCFD8ED344C0A20BDBF4582011DB2
42B4884161186079D1AAA3E5878CF3795A0514FB67759ACC4C6FBF1E3B70E08A
C5F6D8FE4194FEB6C80B02CB53E12CE148077DAD0740AEB4AFAF1AC8FC2CC872
3542D52151B2F874A2E43BA383534F982D43F3953E7F8BCA35605815E0FFF7BB
B3A05C4EF9EBC6E20CCC7DE431F9CD3A1B4F8868FE15EDCF653C300F52896E50
79721BAF2348D62292CD5E24555EBA8965CF383F4F4AE6DA98D1611D05E59ED9
BE03BF7FCD5CDE798B725558C8B741341F24E8C339F17484B7CE381E09AB94F1
A9224922B4A5C23593F8765E8127C89B0E9D7A0546E34F8BF633F656FE32F1FF
45323264865A059D8D3F20870038B6EA3C5E41A3E6E6EAE70E665AA718CEDF9A
16487327DC3CAC470BC33A673DDC442CE5EE4997F7CBB7FFC71FC82F8D173315
A44103BDF541356F9CEC8990267B1BD97D4734CF37B2C1255D017F15C8622AB0
2914381B3FB7E42E84E911F42989B4F0745A5AD306D8B993AE041991BE32E8EF
84B47D0835BB5715353EBF1E559E4CA11DA4EEEFC3CD2FE26B4F8C6A74D672CC
9A666CE7AFC350199F02B2D716816980DC2F6C80CEC4A92E0E260EF22D0376B4
1C806A9ED583DBC692208CFB1D4EB3DFE367C67869537D67C3B3C490D237C4FD
809E09C4864A64BE66F36E11BBA8F589159EC5A477985FFC96CEBB0EE594B165
2CE8453D18F719C00263D5D734481D36BEB3B4E4EE45019BA6FF7DF40D9FE581
08584C65DACF1CBF24644F92E34598BDF81AA6149CCC4D106318603731155403
CBC28E3394A8764C9E32EF857C8E216F3B2D75141B38A08B965CF91208817235
CECB0A51F6AAD0A5B01C337D31063CC91205A98E76F2C8F744E1B79C18F4ED3D
97017A3068DE48D61031BD32279AB9810D4E7A3EB215C17570F9292BB9EF8D2F
C1121054E973862BFDABFAB60376DE3D272A003EC198DCDF49410976BA86BF45
182CD5488E3D7FED38442A68778686E7CA0C313E15FE05C63C25AD85F5B31596
B484700D72CE5B23F5EE9BB3508EB12237E4776F89AE39711B96F7131CD6931D
8AF54191792FEEAC189975042A9C413C838DBAE11B315A3B6B5FC1351BEDA814
BC1D6A10EAC63EA4B4E55BAA92BE152FE8233BBA588A6BE988058F4C5A79047A
F8C75EEF3919EB6C563A3105B609971C26FFB4F1F8F1850FFDFE8EECB76E4172
C52F8135C42FBAC82F0954D1DDBC6BB155D5E27FAF49C6867267C252C268B1EF
BB235ED4EF25B05FD6E7A7B453C06F79C16D9A93D491899E8ED48FC42430DE0B
840E52A7BD6CAB0D2057265945CA84DC81F8A4875CF57D9276D25B1F67A77456
00439E945FD8812FD308AE12C07907FC344161A50B8340925B3D7EF84F9CA987
2299F33589ED8940FF69B61DD4BEE4A1F5AEBFCA81856991C4A5075A1908F934
CF91EC9C9F70C6616C83FA8C5DE2CB9914B37C92057BB9733324694FD82DFF58
B3F228AF7EAB7C9C463D233FF0A92FF72E9764B1EE818BF3F1E951E528BF1337
6CECF1847B3ADF5CD62C5C41EDBA2E86684DCB02A4A1FE0F429E6D30F2A7B587
E1BB37E1205D345B488FC6A1D9766D45E99C88D5A52C863DC5D51835C9B76DCA
2AE3686F7D5F5CED1E0D118D4C21D27CEEC901E14551CD5325401876E9A65D1F
7C341105B044E7AA687FF51CE6C23EB9A24229B997FA40128B7C5DB490F738CD
0EDD7DCFFC8C74F62EF4C39AF40320790F6350ADDB51D854A3EA44AA6FE89EFF
6E50EEECBD12FE93784C44E5AD2074D64283AD3980449AF568DEA3D12EAEE9A9
A4DCB35B6E639BE1DE0A935958A386342E698CF8B8AB73FD26F4147DF69E3519
D4236FC473CE71039E360D857ABCA1CD8164538475B2930622D8EE08F0F934F6
8D0C55A870AC4EF7B40D7ECFBFC599EFBD122E0A0F59DCECA088699BBDC9D3FE
095227A76CCFAE1EE59874659373B860CE660E5B17A10562DE4D8AAC6484D208
589786F18A8EAE8278D5FD6AECF2DCA7D9A52C6E0A9F1FAD28138DEB2228D5D1
1909A98AF806357C6C9CDA1C6E439239EE9DF3DEB1BB92729CB11FE5E2494D01
88B0D1015E8B0B0BC452F5AF3642E50F2B5405790E9D014CCD2B8DA1D7613AA7
C519BCE1F2D25EF2D8A5F35C36F019AA1EE42CD85F59AE9641BA5F848628C32B
8E016D13770F66A056C839CF4EF5D9F31FC125F258267ACB17D29E2A2352C268
484F701DBA62A09FC5222C8B74F310588680DC78F2C0893130482EAB5AA24095
48C3FA69AF4E3123E9D4761076A098A46A43FC4939C88DE466814CCCF298DD56
86F76D6B6839712EC41C5BFF971FDDD106C3AF8FCDC2271BBBAFC8CEC6112E39
74081DAC1B464708BEB6FDEC9842B691B955917375F614C8AB35539BF99480B9
693C7A4C96204A513E63663463584CA597F12501E27C191581D69F086B189451
49F4FBAAB3921E1193A47BEA5E07A881548DE7C6B974B766DED26CF91376BF3D
9BC41DE19C8DF9C154048CCC43DE1C448B584C1C13AF60CC33B1901ADEF0F980
172611DA906FA781565BF9CAD2E8E8DFDBFCE30CF2B940E8F8011A3BE40FD98E
38FAEB768B478B0521FAF99A6891AF7F9A63F9335344ADEFE3960D6BCA231A2C
836F1F10968540EA9BC600E0A254732111414A739D707409ED72D998A7A87772
AD0A0286935C6CED92CD3A03BA7C86F2A05D1E6E12E6EBA5E83ADE1AA492B820
EFA34754C44550B909DDEAC33C5725CEEEC6FC26F36ED9865C534FF5CA922E6C
AA524B1410989C26DDA15799CB96317F1F10B34A3171108D03E74B3E059F0125
D5D3A20DFFD784700CD89DF65E268B3EFCB24957B869DF06AF56B365D49A8AEE
325C724F0882240F8919BC0B8BB82853FC055B7C6DBD10CAC9A566730540C064
BC8708BFEB1F53E98206C133955BA714A4C7A62784632F528556F344ED757341
BB427E0266AA37B80477DB2CBA675A62291DDF398540041B1029EEEDF8770492
1CCFA1C172001F52E432292B5EE248BC3D8C6B334B1EE7B082ADAE38974D5FC5
7C741E2EC163AFE80AB01113B62CC9EFA5CFF257A91FC494114A6A56BA110EF1
308AD59CDCBB5B1D3F8E78A95AC6450A6EA03F60DC44AECB049B263D30D3D9C6
2D4634D909804B30CD1DF6C852A2130F5E79D4446FD955E4D14DC1638C886E05
B138557F78126F363400759404494857CA9A4E1994673953035220EC79296028
52C06CF85A2365836F10D8D67BCA40B667DA1F348C254FE7FBCBD0C3786D3ED8
C68A40B39C929CD59F8D4EE57835BA40073EEDDB000CEC977B5E9F655D9A8512
30CF817ADEB02CD67AB3838FDA900BED5131C43DEFCD8848019B432EDE6B8B74
E99AB77E1888C2106465BC195B6D170D80B73E17A834F0093CF928C7989826F0
1B1CE3809E242F6EC9E3574DFA3442D8C98B1294E45FBDA6D8B94663FEE275D0
4723A22BFAA5F973E3F4E5F1A14E1F04EEE80532F14647412CB28F29CBE6EA95
223C9E6F9DCFC0E79C0D6E7BFF069F64F4DF4A987EE6F487F411D0D6CEE2C444
841015FFBB3DB4AB5B638B4CA921C1AAFC0E67F09DDAF2127DCE2EC1FE3C5136
C9C0C771EF0421C2B63FEBA8E6B759AD235A35DE334988AD0100962B6327687A
7F71008F3221ADBAC0D6B05C8C570A8FE744C12A2F25075841E862A2FC62F187
9D13FB7EF346AADD28EF97496363753851CB3588E22989265298E59558FAF166
BBCD16C4A12932149809A1EB520F0B55B5AF9FFC5A7AD529229C3C662CB72FD4
9D9976FC23C3ED4738E8697E0D3F179D5CF38CE3AD2DCDDB0DA3256AE63B06B6
C049D0D754B2EEC0DA1DEFB869C5BB80849B85FC65A1394DE403883339EFF8FC
14A9F4412B60020907C55CAACE29E59B4FB64FE6E131C67F55E414218EE32790
4E50DCA843AA863071070E650DBF3F571EBEAE3264462C5F5F4E152B49DB1003
3953723558747BA29197440B9F502076AC9F563D96E2AA8B93A0C58BD05D7584
514010FC280EAB2918E5BE20DB0B3EFC822C6B45C78F89B7258C2EBEFB4CEA4A
07D85229BBB2BB2FA339F9A59222C2DC875EB9C2529DBEBD7C032018494C414A
F67AA0B44BB38F7430D121705EA45EBEAAFA90C43235F641A5CEB3C64024BF54
5A1AABB909CF1D58BB12DD8A2DDE8439918DA7765AC18DC809B8B70F2A154BD8
C024312CA55295598C005A476220C1A90EFFA0F5BB4F2CF412120AE38E670551
4752C9CC8AEC25A1CF65F59C0489027773D990F822ADF281E1A0566E8E1611E1
057A95A04FCED1ADEFB0CD11DB9A4A19FE6EE08CBC7A68EFA1BAB3C2A1DB67E5
EB71B096429F61E7C0D88DDB2A20810EE4A99A9F68B4392E20CD9439C1BC6A22
3FA704BEA3521ABEBA0C9E764D90442CB5D2753470F4EB2F0285ACD265508186
13735A6767BDA4CD544A1BA78BD686BE6EA4C4038CAF74028E0FE723AFCA795D
C189F5886D439F7554671D3EE49BE1554236906AEEF16B05E04B0531A3F19A3B
E3A873F80C5C68D69C1D05A43A72533A616BA95637F33339BDD73FFDEB790D96
90980D577DF22473C89EDB55FEF448F85964A02864246A0871D7F5A7DBE09D8C
434AB18C6CBDB982D61DDD12464BFB998B0BEFB5D2A4B4CC4E0EBD9A076A54CB
9A0A7EF647E6286D3A920B900331D4A3743A20ACA7D2CA9D3EEE1329C6218191
01AC47425BE4F5386012D611B4E4EFE9CDAC8ECE79C39ABC15C2D36E4B0AE9F4
B2368FC82E078A7D8644B3914355A4AE868F5A723B652E51C6E7E24332732649
901FD8A4AEFF700ED956B922A6533A9A9E60230E67845946D0819389FDDE7C6D
AE799679CA99EA4C817D657659F9359FD278621F7F54DD5407F17A3C756F4EAB
8B8DA0D7E86C7E766C9F2841845CB62FDF92DCF9BBFEEC86F6D4B516282D851F
763918C64C670E5815A99B6839FA8395EC84AFFCC543137CC9B96C5B34E24BFC
3010BD8DDC0FD587E3A21BE664C350897CDA353EE04BC2E4E79D4F3AAE44C040
ECEB41323F20F417A032E7E4534C105BE28346F4C49F9A46E4FBF9E38D58D7FD
DD6714170B21D5694F340558ACE6B355343C0093DF4CFA5029F471914F538A61
C47FD1858F66D8A2CF591A4BB9A5326C658960A45F15D535C6DB79FE868DA4A7
6FF5FB2229C7F2B8749B7292A633DC5D5A36F5C286F5D2D9832ED5FA7E7BE5FC
2CD793BC5C8BF18E6F303B20675F8DDF0546F7EE237102D0819467487AD598E9
926228DEBC6D107AE31979AAB3422D0A862DEABAD44ECC1714D93D94166922EF
BCAE5C4A8F882BBD3058056BC52DF2F248A0DCB5F0D0D4AAD5CF5DD9039DFAE9
0751B04F533E2EF9CDAC2B958E245047ACC4DEF23DF9F096AEA91738B3456932
6E1DD979B54BF385EDA85D81CC6238B9A3A456667D187736FD8C7315070DC3EA
21C86751F218A2DB9DE139C86018ED85837E5511ACD270ACF3E79ECD4BC0E75B
6FBD93576D76FA3627CB07A00B8FA112D8C02D5A5588068EF89FEE7106B45751
0EF1140FA7B716B47314F49EFDAF44EFD7020381FFF0D0928D5D452351A73EEF
F2A382F8137BFE42014E2DE047DAB64EBA1EEF9D1D88F4FE423ABD1F2040EF16
EE3067021DC58CEB05D0762436D299D432AA6B27D3250A3D03212A741C87FD1A
579B33C05471C19ED3B2D1643F987253EE3F3548DF67E0AA931D1A8A39F93790
6E49A8F242F55BF4C5AB9B0328D91D2E59B863E3403ED610AD4D7A1CC4D1E0CD
90C7C7AD80F4AB43E499E9EE81BF7555509CD57489F071AF37CBBDEEC1265D5F
AAD1E9D12F1DCB92DF491CC7ED05E04BFC94E7FA7D4518CEC739519DFAAC7952
D02C5FD145DA174E8AA96C0A445E915126A5CA4A84E5C2A36F4AA2D03F8A30D5
DE974709AFCEB071962A88E8B99632A0CD31F85C35968BCD86BEBCC7127D446E
223D94374444B3E6DBB960CFBE6D45F6460751C04ADD2B18AC8A5BB661949641
4E08819504B2678E4DE5DC5F0D53BF0AB57A17600467AD50985708C35121E6E6
7CBD641E78E002F3E0A989E31C3E98DD64A58DBCA4D5BCE189DA8CEA49832DD7
8B65F4B691659E4B23DB779C68B730D2DCDB51D55395820696F3EDD1D95DB5CB
5DAE77C6E6F0844D8EC33B860EA049EB7A7A45C107D9C2E7104632B13F210B3F
B09367CE9432A5E46760F88CAADAC61099603D40000EAB549E89BBB15FF7C945
D601481B2AF1C02B1EAD1E73CAFDDFBA600A6C0AFF41D152A0504EECBD246793
A873BC38D5A24DB6F5977D1D2471B5C4ECD14E7BB37AEA9B34467D3CC804651A
F75E5DC2EE5CD4FC85586062E040BB46F3B8FEA041B7578CCC2C68CD8A16FA48
4994FE9002A37B88F5B8B5D9AC02A49866ECCC110518908092FAADE24820577E
63C9E67C1968BD3762BD3EB8686D4BDA89FE9E96F3D277531955A8439A6CF35D
0555650ACBFAF7592D500B9C5BD70FB8191A2862292A4E35E4984AA18AC5492F
E94A6ABF00CBE3A0028B00B0BF23BEDF838BC6DAA7F1FE10CDF6C01620EC1152
0F73FA2F7CBB8ACEB7D9FBFAFDDDC3E32466F9F8E4ECEEBA8932CBD0A50253A6
971EADE854491B2BBBE4C6BF4689E4A980A46CFA4F9BF74AD44633DA2F269055
C9C6219DD5DD2B4C2EA43D8C76370C879432D81239B04672FC19E0B11AA4CE97
20223E4057AC0A80B93514C69509A00BD80C0A810E567DBF90FCE8DC9E63FA6A
96B0C0743913E7185ABC449DA8A09A699A1D226B740FDDB287F79C51BF71C2E1
B8CDCD371A49CA51E54BFBFC1C90674ECC6BF098CB88082F3DDEF6558D0A6748
D52CEA1B093A0035EB4CDD68FE82C85B1304C015EE1B257DE83DAB905380123C
743AD5095AAA52CB5CD411091BCB13C29C272477F72E989516C5744785F2E902
0F40C8C17C8E35FCB3D53B7926498593783878C00FD92585D1BD76BFE579210C
016646C52AA0BE4EFDD03D06832A2E2FA0CE285B6B006B2B0BB02091F256D2B7
C4ADCA9539A204DBF7824469F0C23B4767A810EBDC5652B555D498E5246B5ED9
2CE3157D1AF93978ED630D01A3D012610AA66F5FE6120C28B65469322A3585CC
F22E1D558964FD220CD70AF44BB38FBF826DC07C6528A5EE181564EEC4D52373
F4BC7D2EF66D1779ACF8D319C12911724981B1769581880318EFE299EE7B5675
23AF068F656B76DC1F67497488937130DC4F5D31A81269E99A044E2B5B654119
347A77041B65EAC37BEC4C564A997E0221DED40AB2F4F0C1D79D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic12-Regular
%!PS-AdobeFont-1.0: LMMathItalic12-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 833 233 0
%%EndComments
FontDirectory/LMMathItalic12-Regular known{/LMMathItalic12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic12-Regular)readonly def
/FamilyName(LMMathItalic12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMMathItalic12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-31 -250 1026 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD11234369CB38BBC21C40020C4E57C
950DC4A5CD271B5530E91DBA55EA1A3BF584D9405556EF9C802B109FF1EB2B0F
C350D7F091E7B613B08574EDA3BF27099BC2EF0E503A4C4724614A73AA054756
A503BEB31E3FCD96F733D0C5815847DFBB66DE4968A9B389FC00C2146C4FF68E
076BA8B3847A3D8237D36A6BBDF0096290F1BCD02CC66B12E0070215D5D8306F
406DF7590940DE35CA0854D3609249AEA4EE9D3D377A7996C1CC2E940132A90C
F633C774985DCAE8E9353607B9059DD211265A0A346B1A062D80C64B5802A750
D9FEFA3C9920A3DE942C65BD08060AF33C91CFF62930F65F9A42F70B83B0E077
E169BF7F5D84F15D59F8A74BC2EE4A7F3ADE36F38C3A661F4CC9826BF73D7F02
D3CCC267927CAE22B5ED695D212FC3B669F9BE369B7A8D325C3FB9D552F175EC
29972562517E91E7B8D570612CC50B1A5CB6B94D030B0C60465EA21631F7A30B
44A47143D0C2F942B5D76384B8C3F2F197BB3646CBED3DEECB6513D3AD460F49
4BB874969A3663617EB537E75C1C1BF92749F9D147080EFF78ED285C315BAFA7
D78B7B4B8B7CFD1639EA303ACE986EDEEBA9350F92529C47EA7689779BD50CDB
D1B3A68B383B54B51F4FD77D6458F15AFDAB471DEA9909CAB29840091391F2EB
148588D02607411F2E802B9CDDFFEF1C1FFCC9EED0405371651ACF30808E8C57
682B734916EE806703B2ABA2F6910E0C75BCE10A94FDD1ED3E4FDA7857341427
CA0A4F7D30151BEB8E3D351E1E100A8A75959D11122C83A5C0C4C87214413B25
A6BFE44A42D446E9C4ADBFECA756A185E977BFF8C37BE1840CF90BED14A3164D
A8B20DFD9728E6BAC7EF9A114A217DEE75884EF4B9C60C040E8FEFB94BDCA9B0
43F8F6EFC1F52768B6086C41EBDACF46445AEEC02EFF10D4FE13601C3FB16EBB
96A0A60B69DE009F15549E0A5D45A0357FA8A5AC12E289CF2D907A6EC2FF53F9
8821703295813331DA7761B1A0D1337F0779776AFE85BE8A59526694A0F4EB05
67316863FA73E29895CBABEF51AFE1EB024F24F6FB79332C017A9411BF924DE0
E40A24B0E1B797094DD456CE9AD3AB8669A69121B16C33CD949DC6E4C61EB730
176DA74C7DC0D0D0A18384F44D6DFB8677161B8174BE74D7309B15320537D3C6
8392988141F31EE4BED3833D341B2ED787102912117E89C1762D1D58C522E991
CF63E027CDC6072975BBA855964ECF98B21C50DDD5F5BDCF9DF9A815A47BDB3D
FD957F7E5F58E9F0233288E360BA518797DF10D86BE9888BC2427FF8F9282B5D
2B115E8947123C8464BC5F4243F63B1C1767A866F1F9B4B27B64CB3D44108486
E457FC565E44F8F0808F26A82E25AD6B4176B3BE5DE5567ABD3D9951F55183CA
0B9098477F133CEE733F92503255CB46F8BFDF529A8153C8A96379C955E1252D
5ECC5686326957B6CDF4492CEC50E13EA4209CCE5A26CAC268C6BB20D3A2886B
C987FA400BEBDB42372B16C50A933DED7D5350B3CFC502EC6A1AE2E5BD633F32
2EFA680547B1A0C5F65832BB36B7D1004C0ED17083673CC00C8D3DD2466AE78D
D26E0EC1C981E7FD9DB189ABFCCB2CEFA37D76A87BCAFF4F25F6F651E6D754F7
78234392CC428BAB2FC5E1ADC07470D2EEB0AD4AA0173B83910C4656BC172C22
CE92396CC2FCBD09F82ECF0791B30A3E2D1190A35B6C0CEFB3EF24F132C0048A
09C3F9EB93E80AA4D05FF0A0DF36F0B908102D84FB0328F7C09787FFE341F467
95F2BFA2674374ACA7B8A069424DABA50B232A82D34FA6FA9A9D339D66BFBBE1
21EFA1BF589CA9C69BD0BB60D0048850EBE85BB07231D0115DB282E2358AE73A
31349CAAFEEB0DD8B306E7A790DC54C2FB1F6353EBDDC027D3925BD32D89219A
74614FF495BCFCD4EEBBF072C0C022B3C52A7CB6AD1DA3DD562E57AEC88AD3BF
FC74D8F9D6D58E94449554BB3E57263D00E5637BA267BB709808AA865478898C
64529661B3C02C1A29F4281D565836EAE57F680490FEA4A2FF34692B1E9877D7
15480B2CBC1181E6A95B05E92905173A13F0CA0B415712169FDB95DA44EBE94E
D149CBA18F596C2A638DFA3A2A0E4088072A3C9E36431CEC06A142EDD811F917
3B6F3856B750E9B4FC3640ED958B599E56F5A68B64CE1FDE50330566EC837014
DD9A8D0076A367207EFF44AD860D7D78FB9895501C901F76971600F58844753C
A3830240BE19375F366EDEA784F707C68D5A7477E6E69CE1AB20CD836CA8228F
29E7E73B4973C19E7216AFECFC3D053AEFDC912E2624AE5DA5139E8DBFBE5651
C40BC952CC6BA483D87991106E5329970163B48C9196263D1FF754CEE3FF1A87
CB85B726766306DCD59C135551BA866DB65261FCF389C045962083FD32081235
D609C4B7F06478EF36726B41AE73AD7C8B600661D1474C05B58C37FDE80F8763
E374AAEB6D37113001A3D8803603A089E41F6CC5142A5030BE27B3122585BB15
3484AE1678A7BD7FDAFBDC14248D51963EABBEDF15FD1FC956A4BFF118DB6C6F
AD74DE766E96D8AAF911E0783A8EEB122FCE286BCFA8B089D94AC240CFFB2B0B
183DC21A1E0ECBB0A159F28BC289F4CF45EA2F3C6463D0EEE6CAB510B1D9B4F2
7AAC3379D9324B8270F605639795B7C610CD7AD61B45E81C6CB952256DE593F1
AB90B5EBBC38CBD59F89B165FA4CAD6B2A36567471B63B7BF181CD8E5A8E5CD8
00FA6D3A6CA58AA436B73913F888A7D9068CFC4AF8AC97D76981C1B3B4C040D8
2CD379F7C93D6A79D686B51F645009071CBD685FBD807514B70F3998903A5E8B
41778436D5F78D83DB67796B3E3BAEF24D463337987C845682DF2C5C8A7B6B1A
0E09F2B5A0BD86EB5A4483F56692ADD53DCDA5948C1784ED64E19040A527AD51
128375AD945FE39A8A767F3E343CBFDE45F53019C89DD237D474FECECFA91CC6
0FB57337479E122E72407942A3EEE8ABE0E20782F89C565FE09EAE6EAD45E816
D17557E93FBA60C6C78597CF7AC6D9F08C086CCE22FAE194E080AE61301EC495
C45F4380DD598230ADC4D12A98C36F48F95EE5C3874EC9F64897562C2C8BA68F
E51F2930B1F9C869834B9049CBE61B54F3DA0A09C4D861C99963944AF38786B3
9431DE6BBE110C327909994C7422C22987A891F337FA10688E8F0BC7DED2B942
4268A23B19D6A232230FD46FB05E00D4C9C3A360F388407323A41E5D1A6AA40B
33929BE1FCF5D662F8A3FAE8E652FF9A2C24D781EAEFEFB6AA804556205FA311
853F9F7BDD0FC86A6DEEDAF9F9A8D4170144298F515D30DD7B99F73FAB629CF5
76526D33771CD51B208E4FCC6E168B39D3860AAEEE4F55DAD370D99987F72F6F
F7F07101E73145C4B31624E9FE7A81541DED7A88C8F3E22BD805A35349A5834F
8BFA5E3BC0F87D0B01DFB009FB8D31F71FE9DCB08AE567B904F2C32765FCE241
AA5E60EF07FC0EB1A4B08A860433485D5C19D1BFE4663452FBE61738F99547CA
83DE18201EC1B9AEFB15C54A037C0E639DCCC06790FF7802A8B3066BFDE4F5D2
47FC6C020F5F5039E96339F56AD93515D79BF758D7E0E6D793001465A9F4B726
CB9E22C3D7538DD9CA37F8EB0A450F3ADD9075146CA3EAFCC5B062E7B3D763EC
7B9E4BF75CFF05A0AC22B32145C28ADF3A9D5B316913FD2C59E27E9074D9699B
9ACE7706C6693E8BE9D9085C880621FC2946BBE6EAB330F292F9901AE09BB676
3D7B1603A3860CD81614C8B3B6BFFD566AEF76D842621DE771B3FFD092BBE5E9
05BAFD5256129783F8E9EAD2DED0BA72112495985331A2F078B40BCE7C30C8B7
933466807EE6D7942AE73CED1BCF25B80B78AB464D1C0064F61E72979D857BE1
5E97FF6B10803D0E86AB4E115A0F01D6EF9A7FB9D71469CAA6632A138509B040
3A034962D1E9E8EDA75F72A504BFA0E4FB0D1383C50BB3E6C375DD55AF598853
206CAE8E894407C41BFDBD124A15358BBC9A297F8BC9748A98F11CB8B72D39A8
4D0740CE55F5EB10241E264591529C0AC00989C2BD54B0B8294DB10667636E76
671C8D3BF729632D5EB0DD5FF7D72685632B1A8324C0916AE48FDCB4529F6F36
F2C82A5331B9290AC349006703209FDE4949F72F065EE41BAC4521FCE65D345B
0C6C128054265E27D688125A2FA0695DDFDFEAEF5988F3DB9ED39EF436CBA30F
8E1DF96EC4892448534D6A56E41D5C2AADFD4E4DA52377B283B684E571C22D28
2E9874A4F6417F5F0D394ACA2A584A5B69EE3152306783A15535B3FFEFA11B67
95873E0996A2258DD7D647B65592855FB0EFD694458795AD7238124D5B33C501
C489A78E9186EE32A901CF8EBA8E37356718B6FA5BFB62B9AC2499DA4CE8C6B7
5FFE452F27796D651A857C11D98B03FADF9CD84AC1CF815CF7DA8D3EB5E16C71
025C07A60266FB60BA81A072A6E35849E147680A458C62EDCC9C46F4BC78095E
7E4E246A216AC55EF0A23A7BB7F067FD483D3A56F8B2865421514D07317AA0DA
8285EC03F88292560AE79AC6500D08BC15C6D483111033017261BBE333A7DE63
91C5053E6F0C4BE15CDCADFED1C15C28E3A8CA8D6E6B638767210AF91AD59147
4E8966DE62FF908E4ADBB2BFCED5853322DFD7FE2590FA7A036C2D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E752429B985F23EBA0C9875AD055D8B1F640D10DB8F40BBF062F476691
EDAA1D05C5591EEDC1B75251BFF8576F1C9CC5C0E521392A2F0D5F869F8AA462
B3883A673A976328E1F0DAA22B80CB7737DE2537E7B54F5E1643E30046E87CF3
8D9A45A973757BC16CC50504033125D2A68A1C97CA095C56B3D62783960780B3
1693596869FAF5692AA8FA6643FCD7F55E72948D2DC55AFC5016FB2C48AF9D85
192393C682B739EB43CAD8C3FD4053B2D53CF911352E2BA87A65F8949B0B7918
EA727DE4A08DE07B71365B8F31103159F65D30A7A318C1056BF638CD20BB56D8
6F22ED3EACC46F750F405FAF96268E80A409CD8AE0F36B68AA8C5FD2E0E871DB
D2628AEC086AAFC9F04CC93440E1A8B0ACC1DCADB778837360339A25C08E3B0C
E768240F0E8CE9FF939E4B1A6365664AAB69761B7A9C7B95BD29B09B930B0D82
F2C39F9BC0B94E56C48DCB22D8F0CA6C633BE68E5977EB3D88103E4230C6A08B
B4FB0CDEA7D44636102D47AB90B92FA42243943EB3E77E6CC38DEDBB2DB8BE77
78936B70FAE12EB1E2913B766CA2BAC3FA555CBADAF2CBF6B7A216FC93470554
2C841542BC1FDB26DBE389CED193E28A19CE9CBA64FCEB47C4D9C7891741E0A1
23FBBE971ED93F797C02EA830678317452481FB78DFEFDB25A3645AD3979D2F4
AA17C624CAB35B85963C6DED262AED5DE92278F31B2E573FD86696D98800443F
32CF695BC660D7704664695A83680221C6397E36FED57827D0CEC45CCE9134E1
20F85C107CE5E670014BCD3D09417B18667B975BF873F4BEA9022072655ECB43
9ACF13725A79EF90AD4FB0073FF142CFAF4290F2BEFCDF56CE9AD3AB8669A691
21B16C33CD949DC6E4C614B2D1A0ED127FEDDC4387DDB2E10EF3FA3985EDC86B
243368F8CA936A6B93DE729493EDC6FFEE039CDB833C0CA3B0223A63BA100BB2
B4714AB955DA07C374F097906ACD908F1A8355BD40273AB986F80E6021E31427
AEF512224950615DA2039D4EB3B18C87BC21D80345EDB06493E9849967F12E63
19295F104EFA71C12917DFE9B08B5473DD51A322ADB72FBD8794B3F51A1EA076
A789F59B3D595DD347079EA1554A4608FE9440AAC9F04CC93440E1A8B0ACC1DC
ADB778837360339F16EBBF5AC7571B0778C0E9D25358DA06B20DDF35F40C2314
035F52C165A49120D5332A136461B27E1D641B91CA52CB6583FA4C6F64BD28EC
6F839F95D74E2FACD9500D776DBF675838C2E27A9A1C75D9786FB52F7B15A017
61AF688C996E2561756B8F923AE34B82BCFDE515AAA95D76089B8C6D8CBF4863
3095FC397712BF000B4F2852F1C52ED15534409086E06FD6BC39007057B13EBC
E5D8E8EB108C21F7A32F8D0DE181A612268EF75CF1AA6A436B3DF24E7DC6ADB9
39B89E2924D0A92FCDC2AEE877BDC9CC108A18629F0D64BA727A5BC21B42B5F4
1E8F864AC5FCD0977D31EFCD46CFD2F60DFBD4B1B7E0041EF68AB5AF9B946FF9
36607E3512ECF70AC43BB1D4751F57512749F002E1148BF99DA5CA7EDBB00B60
E26CAD17086C48CEA3FF695D5E829EE6473F0C657F7655A674B43152DEC8B2E9
36E490A4D367D68214B348BA51DF871A83CECEDDA1F3DA646B38272829C49B77
DA56D8C3459AEF9356949ED2BC8CA8085F829B9F9E0B4E360140E2EF8AE58083
EC6DA4E70BE9D053F69949A8E464ED478A8E037FB132781E4D3BA60B95605DA5
5C67C5F6EF7AE2049EA3D2EEE67F2FFC49FDB8B4BF1A5B55899A71BFFBC96D20
CF2025F12147C5C8D5E39937B03356D453D819AB0EECCFE7DA6DEB238A87FDC4
1A647D79A3E56C4B5AB6B245E707523349225E6B8EB758ECEDE8173B87B4AA14
71C5FA50EF20ECB3E3080FC6D8B395542D5E464EAD1953BF60A81E14EE323080
F4DBF77A197944E1DCF0738600BFFAE3E467BEA9BBE6258A20D9E32E17451282
4E1ED5C40D3C40923DA150C493699F0E68263CC98B61749221081D1C75F39CBF
B348CC853CECFF1489C53CEBE1A6915BA90065A1A95764E697057F013763621B
17F36B310B47B715FAAF668FB7F142A6C7682F1CA89CECD0A14CE3BFFCCAF634
AE7A1DD365AB9D3569F5A96C3FD32EB201189D07FC46F41CD2FB9B1BBE515CE2
23213D98659912424520237D41AD0A00728D89D92DEEF30B110E58570A966383
AA9F7CE59375525369CA6A559BEF0CA0B802D43F883E1C794B9D3EE9AF8A5CD1
0A347EC4A862A6F0B3867EDE0A050EF258A7F49F5081F1FE098F53AC01525217
1C713B12582F6D29ADDB80A225B11738EB3D1BA708653BEC6F7AC682EFC32633
1F40C5E8FF16D3AB8647D6542B4C6CD77F4469A676906BA6AC776BDA43E4B128
3ADC30DB82832166A9202C67C70817F41B505FA0B5F906C537EFCDEE4C69AFFE
F891072A4BF938AF76A97EDD40B7F6F9D15E91CCF9B8B2DD85257EB6A2C747CF
7113878FC1B094729613788FD31ADEFC852D2E598734CDCCCFD8C05DDC3040E3
87C62F0DBAA9DC2F6628F61497ADF417AABEAD37062A126B997B7696988A9F2B
3AC897A10789DA53D2DF6BC8441AA916C8F02240634E21A4E79A7C8F9062C2AB
821ABC614DA8C5DE3657D1A80350032D19862612D6C80422A4362A89E46F7DC9
1B557A4C8683B5295596D591703D3A1C188354695617AF56DDA1FBC56DBE898C
9AF2FF244463C0DA21C717E348E0BE63120324C3F420649F82D4160A07270010
141602C3A6572740D06F3AE476ADAE3DE5D771C66E86F97387D4AE97D6E59A55
4057B9862A120162EE8B3F4E8DA71604E6933F27729A2C7FD9A30D9E8FFA9D0A
9D090B86A2B91B89AE3479CA9B27527C68B896EDB1FAE22EE3B71C15A10C1971
0517916D0CF980211650F7FD1D657C3164611037449E390AE607F3790491D6FB
BD58617B4FAA8341C4DFBAB734E78912D306347C0DCDEBBF156308BED3E724B1
5646DD2FDEA523D863CBD4EE16455CEA2C0BEC9873A424C98F8E905C9CF80FC7
24E5A519BBD1CFD777EFC9548086229ADAC4953EEEF78155D1AAAF6A197A1B14
F0A5EAAB461B7B4C814D7591163219389B0F4E74CAF6C646E9169D885AF04A62
7278E243314F53B604C87763D8BBACAE4B22606DF4F87EC63BD74CE9504531A6
AF606FEDA8338FEBD91498B806ADEAF525CA1977417B0C7399B006B15704D390
8A4CE41B89961BBB8CB8F66913A9AF650EBB1B131913D29467B7517D809FC549
0B8B4529805E0E448D4568D96F6FF9CD9E58D823E58184669CDAFF2CC298AFE3
98A610ECCC716F622A9652257CA414AFBF1CFC2AE1E6AF5D19D7ACEA02800973
AE1F7D563C43EC5901417F40FEB12D4C3841165C93E441288916FA8622E56DBB
5C5C335F34E93B2EE95EFEBA3F61D35AE7A0CCBE266A5CA609525EA685DF1D3A
FF4BF6EE7D367C652B12B08286D947413E48F70CFA41C190D9CF234520FFE9F9
8963FC566AE808AE20CAAE74590B3DD20E56344AE5BF50A969796BF3E807C04A
3B0CBDA9FF1FCA427B0CCACAE3F78F40E9A45653BBAF2A5DCA560DB5BC07645F
9A00BD4D219AD9426EB21FDF7EF88482CF7D3056AFC17907788ECFD84AC599CF
9C38E918B17E14F876C34FCD483BF1AAD3FAB74C2B69537837A2B70DC0908B60
2471C6FDF28FA577B39003387F79289C663EDF22003A3B3A68A6510AD6BD87E9
BD0F7E93A67159F5E757638511CCDE33AA193D61A35EBA7F7E101843E35DFDF3
E38B88D834A1E8AB45FFE334532FFF6EE351252820E23D09D6DF44958A1F7695
ECE82296DF0D272C713BA3B611AE1EC74744F93ADF8FE08B4C8BDE976D18C8F6
69EFAAA30BAC0A2EB45FE7328E735DB9740967E6887D1A3A4A4C11434821D827
6281725274B6BFE346621348DF584F6BB7D73551EE33D0A209D06CC69BBFD937
8D8E8982FE2AAC51B1FD1555E9FA2EF2D3B10BFCA7428A5429DBD8A0F7103F99
0EA69614E77056645CA9F64D31CB9E4779A061895D64DC9B20DDE785FAAAFA45
4886152A34F1675373F838D16963658629D86E44060C1D4CB37236ABA9205AA9
7B4133E585A76BDFDB94FA42FBD891A9881C25AE365EA7A44553C0A02F477E61
69355E7DB1F5C148751D33F7C872EA5EA529F6DE126C11432D8C083822D9EB38
20144C7EADD2B7564578EE778AB577C5B9F793E309EA2AF7D1E5EC95BA6DDBA3
93DBFA8C3C93DF38C9B6E45FDA05D04DE260D94722956833588CADED96CB1F61
9BC67D712BF7CEC27CE0B7ED8D31A29D7F2D888EAB1A4A96CFBDEFF4DE11AB02
2E33B2765DF15FC2A8556927746C9DC827B1E08975F998B4C43E15A84E7DEAB0
3197B8926F0E4B4693B8DB4AA1EDD6D94926CCC3097F4C547E35CDF1465C249C
AB870818FA5CC7B9DE5158AFF179902CD32D6AEC688F02A7365B66797DE1EA02
2AFC6EC3F3E3F3693001CD131D8C3330918BEBD96204FD6813434F729F7934CB
A23B5A181AA5B60EDCF5B16D2019688A31140D83CAE2BA50264B1E097ED39AA1
BCFDDED8BB2F2E8840F8D2AEC81319FFECEFF0B5C6F445770D02B624609820A4
CC22072E177D99A35B3E8F0F4E1CA594D36EA7DC05D42B1D6A2AC0C7AE3925BB
9317209E33BBE600C72037F7B8FD8B789AEFE644F929E005007E36937C1A8F30
C66C22BA495F96F4ECD23EDFF11182E78EA1B32DD7F31B8E86D61A549F0DAEE5
90CFDE3C61BAA6F3C070169EF056EA05AD5FEE80D736244D75CE65F20FD1C5FB
2F3A34AD00EA828769273159D4123E00A6BBC4C65B0BDEA130BBB2D58FAC4849
227F231BEFED36BDC9D749836BE55BACB3C737A5C73C170B6563DA6A0785D44B
401D44508D578234BDC461D8F78E6D002A0798629A1A902F1379B44188897585
385A9BAFD4A97D15ADCC05511D4FAF36CD27DA3CB90906BCB38BC106679FADF3
E2C18E87729C68C40FD16885A589F40C7BA7F5378DC00DE7254DC9D6D1F5B1E6
64150412C417F577823C021041388D403C373E5CDD5962599AE3BA0D086EE6BE
16833770AD2E68FB6A91CF63FFD32B56C4B9985F1D7F03B117D56E15750DED0B
87A8D3282C72C634347874775B6F29EE2FCBE464DE04A5F35FF4360739DCFA18
1DD539CB02B3FEA19C7196EE55648E642184BDF993C99EF7C10ADBFF341E3E0A
8F7BF8682C988BBBC3B51057CEDB138278EF9F657EDF80015B7B0B8DC4BC5B98
497A634F74977E6CD6DA0E313DCCA9C945BB5AD34E9EA6DF61C4B220920839F5
5E4C087C214A769803A35AB216AA17A73AC219CF2559CA67136E0FA50680F187
2B0C648C191F49B0445E4D9172E1168B879EE311F92B0CA6010AEDF8390C346F
2C10D7B10227FD9652670F92510ACA7AFD71D2B3E874456992AB8058E06BD62C
6909B9FA2B48549448241EE25E1B5D821AF4124AB18510916FB1C6590D4B8350
7C352E4D83A16CA787B5CC1AF7279DE37F1A0A5A6FDFD913164AD228F6D5FD1D
079A1068F257FB2784CC8F66632695B5C8D550CCF798094C479D4AACD3F8F6AA
8017D950A70713AE1BDCD725EA62AC3112B58FAB45A60654591AC4B1484259F6
DB31F62CD736AD7AE654A7A2D892EA471590989ED53F8A5A9729C9CCAF37A490
46BDAD9C3E2AADFD3CCF5E9A5E5CB0B0C52C0C1F2D7CB0657B96102855395489
94854212C9219CAA6CFAD7C384AF04E48B2FDF050E3FEA523D44F2B2E2DD94C9
33D90CAA8DF74D54DDF7FBD46D78D457CD1912F93210F9830B6D2ED8AC2ABC21
3F81757FCDCA8EC6F0E9EA338B27247A3BD358D6931EEA4A860E1A17079A59DE
B9C7A4C251A3A231F0FEE5F90D5AA9E862E30E05197AA0700E5F9DA24A61785C
42D2C746A98194782D9A504B2A0A92D4E4B03E750342AC615286E4AC04B289D3
EDBE86B8052D096682A51D243612B70B601D2DE189B29EE33528A11EF039E9CA
E8D6A897962EBECEDD21DEF42A0ACB73580D02830F45B5B14743D409366D9B06
578A1C23B48A90E2E976E29AAAD46A53D70E0F5F3E15F04BFFC99027842210CD
F6C7C7E6111B92133CC1490D70C0E83B6D78E418CB036FF0ABAA9271C886886F
29CF39B45B12328C9EDEBBC875AF0249835F399A5539D63AF043C136465C5C6D
2E9AEA7C74A64966DD2F49858BC351519FC213A1475EDB1EBDDA669AFF1099E3
D76D55067C591328E391BA09DC435911464BA2D6CD239CAA9B28146CC516ACD8
09E58F5D0A04D6A74092A710A9A82AF7E4210EEE6AC5E5FDD302BE3CA4554FAE
A417E42BABE0C8DFA45ADE77FA6873A17DAB38EA66E305A8046E2428CAFCE7E6
EB689A0B19DEF54E6E96E97520EE266E21EE88740E10DE65574A9ADCE20F2789
CC4AB83076A9D1FD2F06EE047F1A39231D754DEA41D89148984027FBBBDD1088
42FBFA0CDAFB4D52304A74E667C1C278B677DE3E822E02D8B0CDE828F7F883F3
29C433B95DC6920785A326592D07637DC90DDB5E4B3CE2A37EBB06700474F4A4
F93E85707759EA2DC2C80518B7AF4FC2F56904C2849F7F05BD9E5029B6C79F90
6D6F2508D429C62585777EB9E6E9DFCA889F03CE72AE0F5DCBB866F3148AE22A
C1F787677CDC3C2F1C78D5EDFB2146ECB52DA43DAB8B9ED874697339B1BE26C3
423DD2E3D3B333444BEAF07554BCE0AD72E176552EED6B7A002E221E3878624A
015FE75322A710B0E857532B461E93B3630A4587FF778F661590642D1B53CB86
D761BE8D49D8203A174028CBB2A2717C97FF0F700841CB18C1B1DBBA73A64A42
1683D25AD6436A70B0C1C43A41956D47DC64E1A25B4FA057A5AAA357AAA3DD0D
863BC8A00909E4BD687C783B27501C603CD989F14A2A0A5680747876A8B53417
3F947839FB3654757E4DFDCE1FC10240FBDE65CF0A519FB5A109CA9D14EB30F6
F4C1B85C7C54133BD769267586592927BB429D9534039326416647B9E0D2FDC0
057DB44F8D19FFC86749D98797B1FAF91562A706E6276B0604E67DD53571A541
FDEF7988A9990DCEDF46645C55EE47DE4AA52ABD988594A7EC882C3255651452
DBBE2B0F22F0DE8EF8B927DC6C54ECF3801E5C267A52DA5AFB17F821D067FF0B
60A68E26EC70B39B8881EFAC058F26CA737FA1492D6F08906900399BC707F7B6
48246A038C8749AFDEAD63E7EE5E9B4B46A152BF638DC2DC7BE923FF89D32454
D66F1BB52E8328A8A659986F3B7984591894F22CC5E7935406AF5ECBD14577B7
C2FECE91DC8978EFCE821DAA18EA89441E890CE5EF1EED2985EC52C26E5B8E62
CCBD5043F65CD42FE47F91FBB7C0F560C3477C6632BEFE3B11787F8E621902C6
4E72635E4E341C068360C704174F145E7AA8413E3A653F17CE3D33638C065EF0
56061AFDA9FBBAB54EE46C97533DE11EEE3B9FE2203DC6C75B20BFF2DF83040B
F71A9A9B369976055E2BD80245F249EFE2CDDA972B35EDC8A6EB58E6FC06BD69
57EC65834BA023598D3449EAADC717918F453F3824D61FFBB85FDC05B3830E6C
6A01AF6C1A517F86D2C6190AFE9B31BC892A29333B4E4A19BC80F638158DDC1B
6DDD5CFAA56386D2214FF95E0AD32A8EDB9588B369B19355EFD0EDD9F850A3D3
D3090901719F072158DF40AA7C78D128AF38AD35D9F3F60410E4FE9A0508AB7A
D97D6A747C3B3FD3EF1245623EEA6B165B1476641279723F476C0235F3CD2DC0
7CEC2D9B04AB97510C130D8B0F9E0F9119FAC6A3957492F4B0056987A9C83010
84AE87065001A8E03F79D063A13BD15E1346BBE8940C2F9BE4BDDA2E4322C052
8512203326358C95735248E06086D041BFFB9514E5B8248FB18A192A26EBA06E
F157958C1BC00554409AD56FE7124F06FC91FA10B7E5B883E4F75848D05281A6
BF6F27DA2C0FD5DC56866CAF43002692041C4FF422F0A0D4B69BDA5F6825733B
48FADB06F9C8BEB8E15BFAC16AB586FF1FD4C383E2785EAD36F41274FB0BFF9E
A0555A049DB0DC27EFB27E091728626DDDAB2F32540981C07C6DFD923746F2B2
A633B2D20EE427566772F45B13E528B1A347A6DE47C5FF27622AD08A33AE6C25
5C3E9542B2DB490C29FF12165AE2B197B7E3A33037F0AC986B43D290CD8F7AF8
845CF78D4BE9C7F2E4DC00372533684FF87B91E7273975069C907199D36165A2
82C7C6E90EBC300605B9B8E5F686536D2C586421D462D8286E22051193BF524C
A5AF7D1406F8A10CE2D1A392ECE3E3A0B0BC9FE882315994E7704F256531E5C8
2CAECA85AD7000CFA3775A2941761F9BEFC4C4F3F399B9DE9AC0FC2812CFF9A6
20A10483B09CA310083CC6AF9DC18885692597265BB2957D602180678D9CEE63
97F787B06C71940FD558E9F6D23EF60AF9131A1E73E0DC6575021FE4ED729101
3E12D61B75EBF89FD2010C13D41324F365EDBEE47F2D12D7A68B20551C36E556
EE217DEE75884EF4B9C56B0C916F06395BB9C8ECAE542B030A5E40CE0811225A
29A5EFF68077131EC3E95A693F7FA901E8967A14F6F01DD0A0ADDFF4C3ECD7CC
083D70252227836371FF838449256648FD74B1077724560AA6AFDB6EC9401084
DE83639FD6156674568119F59090D32FB97B7B14455E226A7D76256754C40290
FC6BD7E6D48C69F042F7A5179B5E442A0A5ED2A5165A9A2EBC4A7516246D99C1
8A0A61F65D3C86B14136429634E4766722F56E044B37BC6D86BED766E53D4A9D
07B0BB2B3DAC473287A4E1483595B28CAAE13065BC69C6BA042714A62AF85D2C
E6329165A37B297405C2E449112DC5C3C2C8FD7D537F9884A1B726C427F0C912
C7917C71E98D9B780EBAC186DE2E1CF84842DFB776DC7ED250F98A9D54B9F2AF
8132B8E428CCFDA19FFE39B66B4DDCE39F3E590823590CD7C75BBE8B58EEF49B
2AC43C5CF7C56DB4A483D8B3BDD7E51DE045AD5F207BA3D148F1C3DE9C354D1A
CFA95F85F8A50D86A04CE928F6A7F445457958809B4D4B4EF3F1653DF094D14F
4872A439CDB4D8C2D75E95601049B03FFA5CCEF851A362BA1D1BDD9773C45B76
5B54341165453F069139883BBDE13DF3AE05BEC1771EDDB9B003555AAC640535
44B3B19D36FF290B4BD1B807749BBF6077BB13252359F2535FA1D1A508FB5023
D07D392FDDDE2AC435E6934783E30F224E6CD4E1AFA9E60E7D5DF243A1F8E6CC
036D3FAB60D3E81A470BDDC46AA93CB8B89B768BA882276116F95A17A9025C1F
E808C6FB887E79634231F5B48F7577B514C7361CBA2CAD63DB76728C31B3352B
3CD5822007395A5D78C698C7366C1C453FD7CC6E94C471BCCAB15E072F4D80E6
FA1492BDE59F46CA026F44D7462AF5BE856FDB43B2510144D171D013D490A0EE
6A8EBD5D5AD7808EFA961ACF185DC1E322EE3406C35EF72F69F56986E143A620
190406409E997AD5336173B7433455A6478461D1319CF4B7FFAA33E67189A63D
FEBB88CF0A62EC8CAB1C44FF9287F2F4E623565955106A2FFAFD13D16FC839C0
5297F8AB66A0093B23CD49DC998B0E437F25765CEE1518EA3F8F5C9B1CA965B7
8641B435C5712A18D114360B4D3ED785EC763635391ADC754BC44144CA49B8D5
001F149AEAA171EC1B4F0FA82A500CD0611A52702254FFF6C2929FCB76A23570
5EC088049C1F1B0E7556B45AB3094DA04EC769BD54CC6CB0B2D3B223622FE8E4
258C6BDC84ABC8F4782175CBEE2A278AA17E0E79685995E2DC852C945EF7A9E4
774D50DFF8486F20890332071C3280F571B7450D4B83467B15C17D2D0C33C824
A507CB2FB6E384BA8BAECF5E31AD1327A7AA5795019FCA5BA02FD3A12856CB4C
0D07CFA272D42BE6DCF11C448EABAC1E6A7DFDD8349A051337F69B8C5422B1DC
82FF76904B24129BDEE930A2DC64393E13A341F0BBF146F4F08236E03BB3326E
18E7CCBBF4D8EE4C10D079E09DD0A803251DC175E7ACB31F8CD59C851ADEA52E
64DE64132CC1F25A0DB6F5B88954B6A146A320A0932B65C1FF7776FC2AD3CC84
96259C1EAE1CD8FAE438A579EBA81C0456BF0297BBD91F79D3C27A50E3489755
5E41856D173CED91E77A8626A29B22DE349413E7449FD300F6111A501180C56D
F1515BE3D4ECB568F3F6BE69C4438EDA31E6CC1D4C8F3B8D303120496A6C592C
D31FABB9681E6521877550339CCF16751CBB1449E166A88EF1032E139530F126
E04969167E33E7B5DA8E59BE1398E815141B932ADEC46CABB6D498BC122808BE
5A7DE111B268EB02E852A17B101AC4D7EF91B7D771E836DBD3B89455CA9BFE2F
E8ED26203A2B353C3C9D2CB48CABC0B24669D2C8E2B612C261A160E6B246FC91
4C048799EDC4FE24714CBA543F2AB15CA3AD0E78C5B45EA1D87EBE42566A2987
9B74C2373223236E809ABE93F6EC1E9C14B91C2F1A8D34B1DDDF6531B6B4968A
465ABF70C7FF825827FE2A6C008801304DCA2BBA8F01DFC6839AE6BF5E56B2FA
EE303A56DCBE13825F41740DC018A18CC91CFFB79D7910F03973685DD97F036B
D60D4E35ABB17125B8324EC8C93B7A9900A0BE176BE30B16AC9714FB78B3A2F9
7270CF2AA8ECAFC79BBBDB66CE1C1A43646CDA214B1AD5EB1B5B430AF25A20A0
B636FFEE11DFAA55FD58BE2A16804A4997ADFEE6E00F84F822BF82893982A3E0
9B6A96E35D642A2FD3CA5AE9A9D9B585F9D059F7A88D839EADD20F9A89374408
5F176E43E1878F8986E9632B1319AF7120EC53549A80FA0B8B14AD07A9989EE2
F43CB223DCAA3F7B016E18B0C7B457A7055B3CCB950C458DCE016F1773387D9D
4D851DA35FBF5CA18BAA701E05091A434A3A19CAC124561650FCC4B0F0FE41F0
7832E7FFCC75FE1811BD701298F763AA466B7843770EAC487156FED518164901
F83DF3BAA6A0ED3E1145BF12818C3ECA60623AF6D9E93D1D93EC8C8C2E8D9D06
EADA0EE4856DD6F5B16CA72F10CA6258254297216425EE0F7F4ACF66BB4C006E
141302BBCAE765F2778C34894E1D6046A57A98904F052A50EF84D1C46CFE09C7
7254D06B4651D27ED0EE3EE4E3041C7222EB6AA1B50E2607945895AECD1A2FF5
BAFF93EB96F0A79F34E2BE615A70822B0ECF947527D857FD477BA50486F6864C
B7AB263AD0394EF1A70A31D55BBFDA0D8B20CACB9241F5F460C5467FE0556D94
39800B20C7E958E434402D7B35FC32C14EF450FAB286FAC18078C9EFE517926F
CBB34E12E947B5177761FB0900929A29FC28C508A73216BA87955AD8BFADE653
C62369484B1011EA7C2B87226EE6A4C6526AE5D8EC18DA63302657F3B8E1D923
1EB1EFB3402C2A4583C60AA8F532B99D116357AF029CBD77D99A1656CDB76C97
8C17FEFE5493FBEA5FB1D26743416B6D20BA817AB49BBABCA879453320DCE8ED
E7ED1918294062582DFB8EB09315C8EA1D6D890713607A2C117C07604B899D04
65B0E347D1BD888D966E97636661BA71EB2229A1B1EED0B1A609268B6A21389C
CFDC5FC3AF1E9DE106E3CC7AF6A897D2EBFA43E63A8CFFC8027AFBBF5CF2C8BF
DCDE2A9ABCF67087834CB6BA824EAFF494AB782067526084160819144E711499
8398FEB89FDF2C8B0716B03CBE21890FAC5AC5CEA6B3ED3261CF7652215E55CA
D75EB726F41C91E48F873407D8ECC2D0DB427E8E9D7FCC7FE4A0402722C4F2BD
8471A03D56FE7C722619CD8B47106750B3A44AC55083CF3D5E1221BA2D0ABEFD
2BCEBB3ED6E58636EF1C73E44218A69F41A55F3C8296D12EADD820721F4B4B6B
637070DA6B60528565F061978FF3C3ED33A6A8806192D7BE7B3FAF26B96747A8
E7DC923BA8EF6C9792828B0DF41F60C1D342C94322EE4191CAB860ECCFB206BA
7A0533554DB6054321A98DD7FE25DDEB0B6743902EF00E663BBA2AA0C064D278
1D90569A2444285CD25977A23159B78BEB3E44B78C50316C61B6FE484CE582EB
7FB679A5DD2AB665537FEBACD5BC7C774D53CC63B57F7C9DBE6A4DDD168E7881
7B72CDDF15B11F1F4383D669A54DA881DAEDB801F01459540E1BBAE501159187
5477759751E3BF342CA6B772E8A981047FBA5F4107A2A386202658A1FBCC751A
7D639E32C569B568F112736EC85AE930F8E7B019C7207B0558CBEFB9CF25E8D9
7B854F2A2925AC7F8E22776519ABCB28AB7779FACA1B96831C17BD9DC286E60D
A00C3252D62921B8D2A59944E5FA8B3C8F4CB76593DFA98800C31CEA9AF82AE2
AA5CA952A079E1E637D3601006F8ECC930DEECC72781066085C13AF52E320B1A
BFFD23F038EEB1ECEEE23A6D8D4E99C49CAB1B397E1A9588EA033D08B6531EE7
9BBDB311C102F70F1D2FEF6183CE3B98E051AD8907FEB5565164E2568377D3C1
2EE1F54777A5362A2A8AA3CA9FE09145B37CE1EB1D12A8FCB01B4C39C37DE56B
A2662E21344E73C74148C1EE1619335196C4F551770C28070FC7FC7A33F62D3F
E4A2EC1E9F5E037739E141A74174327A43117E7EDA98DD0489DDA88B0282F50F
D1EB2568CC35D8A54FFA0388348DA8997EF784B325D6173595FB81007E5F5103
551007B0278B475FC25BAA32CBA1B871CB766FC6160B5FCCA007344EACCBAE58
4E51CC1432C5F44E74E3693663C3C1676337580FCF14B26666E8F75B6BC6389E
7A85FDEBC0D1A246BA832436D1EC34DAE7D9BF5033533583821D40C1DD0EF66B
F48E8925C655C7B21A81B9FB4493377D6B978300AB4C9198C3A063CB70AF955F
FB9078E60049489B42745A48BE728AAB48D8D37D238A935D5742BE83214CACC8
15F95D06470E7CD2B15183F5B3507D7032AA640AB2FA2FB0900BAEB2AA27813C
1EC2319A6B3AA2D5AAEAC5D103A9F5E0CE1DD74F1C6081D61317763D0C226C1A
5D5528330B2FEA765B68E59E5DA2FE5DF61D3D56C1B08F9114D9530E8A6887BD
14D5580C88C5871E9038CC6429148FFBFE042B95362C5B790AFDEFFD04B04AB3
469D57950304DAE34AD74C4F6EE4D88F814913C32C56CEE61C8FC91FB8489CDE
E8BC223C4281DDCA5F7DA80BD5C7DB6571CBF0AF8D53B79FF544A0C6F98C72AB
9F84F3C5CE2DB791DB1A56767B0A22F335A7A5AD395D681A059F024A9CA5643F
D07D8F6E37275108F7168F45BFB5024A23A7D26976D77A35534B6390EDC2DCCD
FC038A7C57FA61746CFB9D939CA9DD44D88E291969747968A76740487AD73518
1C68B2BBBBFF91738A9FCBFE2EEDCFB12B2A964B5F51A30DCB0AF7C988AB25F1
2A87D1E1512FF71A89C55A51F4D95AA1618380D5DD66986E77AC8BDFCADD9A8B
744712F5F7235A497AC316B10038C608B4DDD70D1D6FA5DDD1563695C781B030
587A121D65A970206C1F372AFA530EDC774B5CF4BB6A1F73F9FA72DABD6F0BE6
D9FA3B82895FAFC35A80F855645E134C36B2FCCCD0B3CF2D6AD2765B2D3E2804
A6BACEA3B04BBA7E193069496D23574EFD751A6B7C9AFE6196B3E2024B31F85C
CFDE4654D4FB6729B1CB7E86DB55FF4216E2F57A08E04B456383278676A8577B
52FE7EF7BDA438AA6C69E4568C4E6108B46F002A6EEECA27573AB03CB34BBA03
9100AC64C41896EF46E19E446B8C3075E3829C39B4AC1F182582608807C2E3E0
745ECDCE77D328B1D96A0CACA7DC1614D7263BE6FA1B3C3155C4C2C9D9B6784C
80119CB77D9B0B14BA95900DB4A14F7638DDEB6EBA2F8228603C991A8186638C
252F0C80EBC0102F211ABE7CD4F94ECCFA74D880330DB825457E99D0B5FE9818
710792B362255D1C456777C070216FCDA30F5723F772B1764D9E2C9CD6BF18B6
2CF8B8A7D71C1B106C8104BC8DB6AA0E3A664DFFF761BA8423CB111552301916
EC174222485E973BAE15F1662DB4498C0EDAA9F293E7264A221A21C15AE0743B
89E8043B7BC1D982E7CAA79328DE04F0F7A33D4CD50CF7EBF515B0167E8FC730
6842AA09412CE50BBCA640F6E6CDB19CDA8EC4D2120A75F8FBE6B0D64D790962
33696A3F9BCD00049F7B93C11BE0AE28B2F7489FB39310D923EF545CF34C15E3
37E74DD4026EA56FA92178834CCFEF839CA9240E0BF42374C33F5DD39F1E0CB0
30996BC46E9AA34C23DFB4B4B1296C99AAE1A0B717368F9CF2EEAE26EC7B27B4
29929742FA4FE73B31D9075B4D37B78392736AC20A57DED246BF8AE7CD9DAE43
8A5E3A74345D02FF19FDC4AD5B38CE04E4C555757F69C669C5EC4030AF6BC2CF
29F74199D60E0EDEC2BF9E3D71D369639D1FB02D82E40AF2A7BEE252F72C3DB3
6D003C3677E61342C20C0DF4AEC960EE3BCDED36FEC31EAABE44B4E65AC73BA4
86820E071214352072B64F57198BE7F11898B3E3286BAA8B00CA7BAAAA548D35
CF0F04AFD65A7E44E10347F25751F65D0DCFE08F837083F21026CF303DB053CE
5BC0D3A270530780EEA08AEC4786551B7514AFDF162A3C26BB87283D668AE7CF
FE59F18F5A18743210743F00CC46577EE64AA9725A015C1E0CA2644D426C007E
56846465AE4E133DC1A8FCCF41B71CF582343250BA9534513764D2D8F3A71464
A4FDA8F96C2E130157F5D625228985089B6CECE72D7992DC7BC4F5D001F82EBF
BE58CFD8BD9EF16744A6F2D97BFD4E208EB2BFECD6B74C353101313469443B17
6D766529787C698BAEEAF7AAD1263C9CD1F04F0E2EBBEC84C9D839CF9231D4DE
942B7951DF193524704C61242B4B1983A5D0B134C8052495CBAA9D2B9E8332FA
ECB356174BFDE732B68F61B19CB6C0D61EAF53F6C91D33E6F388E1C1C7839B30
9F0421354ED4AF854150AC97AB16CFFA3F66FAFBD0B269C85A2743EA914B8473
78572EC9BA14A0944E37480AD3FF9C10590C07082B081CADB630138C9B03ED2F
4592D3D38E10A40C93CB76DFAFFF0D1623C49F3A52C4EDA18B7B6BE5C494D3BF
1A8A32F8672E0E0600DEB38A0C2618A58148687C5C917444A99EA3280D9F3320
A3FAFBE5AC5CA9E7D404FD4DA5F55CB9568AA9C68C085E87B32EDCAFFCED2FA9
A16198E62CD5BCEEF0235965AEDBF2AAB6D34F4564D288AEFA5D9158AA483FBF
2D06CDD4D82A6B974664DB6555775D1C728DC24D8C2C25B06AE091DB97DCDE55
F701A63B21922C483F0D2B4266B025DF0C80782B325A0B3CF6327D436F1B9248
9BC74B93B7D7BED04206674BCC38AA81885557A5FBA9F331A24401AD23B81C7C
475FDCA1F2E7B8341376C47B399F2136B6E9A563BB6CF6EE049BC37E71551351
4C2B1A3249E83C9B3BB09C5FE38C7AC82B45187AF80A06360EF0D88095025D7A
154E7FAA68EBE49DBD1D1D6D06E838F7245B1347921D8D93659EC8BF5397E77D
1729711369CEDDA424A9E19BED13D137DFE3F01A3E95448917C5B7C048617243
9C132B32E829D10EA96E9110C0528917E8327FB8B6B10274907C8E9A28945C75
A2475162294547525ACA6C964A1E08423D9BDA918220ED02C2C27956D4647D2D
624D9688C49F9C1C2FBC2086358AD56A77CCFC0E17F59396E5016B8018BBCF48
96017B08CE192B694582DBC021CFE1217CF272748BB9CD7007BB023B8982C1D8
E1F97E4787BB31E0D5EBA5C714737006EC344D217432E9C76E6B590845648531
D696EE446E5E98FB3EB79FB2082A98312322579423DD55BB1379B465052193B3
9981240F1DEFFE0DB47E9F0131F902352918244E0C1AE41BE63D5B88A26DA17E
970D312BC85B225F9F0100EB969617EED5FA87B1BBE5E5A4746A6348CE631A69
123B4D3CDC533555EFE97595C9E9618841D3AAA74CC86F063547C020780F44DA
865D57DC28C51D6634212ED83D0A9F7D51E08CF73F7B8F214D36CCC762DA0B11
6F46A1051D1E7388DBFB71D19D57F32A387396D91CADA9FABCB6BEB4345E70A4
DBD6C5BC6F23D4575E2971F355C21312DA808311D07D8983EDC4A8A193C31A43
8AD167AD6C39AA2FE5CCA6028CB3A7EA6CE3D687DE8A6A3C971A03327FEC53F1
F43913282D7DD47F174569F2F4629141CF756FAC27DACC81D3B0B0BBDEC6CE9F
6967E3623006F57A08D8D6D7F4C72073F273A21CA748F9AC90ED7B624CD4E5EB
652F778F794216517B1749F4A7307A9D6FEC4A4E1B2715FABF886533DDF457F6
C7889C6A62C66DEEBFA6612C862BCBE3DDAB3D108C3666C35F1A7BD385C22440
B2C1D9B13D53DF6D55FB77E94A23213FF7F98DC1D0757A3CB4426186A76E7A3C
050CAF234814ACBFE365BFE79D410A979CF199E93AD85BA38A54D1AEE28DDCDB
027D7DE3F776AD7C026BB34EE28EF813D6B49B88C9589D496CB186BD0DDE036B
4D815D5B34FAE176BE52E23B5734139380D335191FE0D79A2C83528DFE3F438F
F0E862A2F29F7780C15451EBF292BDEA8C0518A94DFD65EB4755B9DA5113D005
A1B66901FCCBC69829663359171CE6FA5F494187F4A88955FBC699FC847F8912
A78ABC4FFAFF19D9C32DF6E47156B90F86F29D8E6B61FCB55FFCF6D786BB5D82
0909D152BCF57B2D4797587CE21513506831BC384ED685CF5415F8FC2806E77D
9D24DD5A819E2FDB2BD5F1C05266EA352B10470363D9776C59C09AB5B03C67AD
8D3C07C9678F5AD7B7A367358484C60967CE4AD0621E6F8418082343F53A9015
0CE47771A4FE922CEC2D20CE4BF5F558F9EBEDE599215DC20154E98D213AA8E0
FCF00A36DD6F972459582E2DBA0BD2DE9640385930369F4993C6A41C84EB8C66
1706FC324440C5153D72B41953605C79AD88E7A914FBEEC22C4C36D9B553A272
64D6AC158960351E5D5EDB75157757C631B8DCAA62AD4F4F461EEF05295961E0
58B890E89667CB5CFAE217225D260C1146D800555DA92B69AD7A4E131F077C17
F8BE7630611A3132A2B62B87586B7EE6E0A77B226A77F49626B1F30ECC4CFA15
F5EB06701EEC94420B37F43C9DB37D8B6A3638F4C5511792BBF319D0B37FD1B6
8E2FA3524FFB48FCF5A44423445C63D8D0BADB16B2828606C553F9ACFA221EC3
F9CC4E076390DC2F5F31E5052705873D4CD623013B5D484883DC13B3A9438D33
4AEA179AB0C28F899689B8B32B66211A0C6097B9C492AD35BBD475401E85F569
56C40E690C010FDC321597C3F7226BE97A300BFD303CE49F395884FDAF2CD409
4BC21C4445F7E428C5D2E520B2F61689B2D9604E1073844ECFA5315911BE8F39
2763733462DC6CDFB7D0D112813DD1D270D5456DD52043ADC089C9F1CC96E65C
434140D74DDFA29EF38C14A7D31F074565A14EB60996DBFF10ACBDA9EADBAD6D
7267995C72ACC0658E69A52A6E2ADD85558056EFDE8757BD40D52FE71FB41792
6EE7E625729E924266ABB0F5AF2002DD17FB09401108241412306938A90AC035
3C714458518BD7849F093D3B4C83C5902BD3CEC3F7DB1333A4EB3C05B28980AA
04D5FE4736E2C8D13AEA4AD9599669F4EACA96CB516D417B869F69A4B11C985E
EA0521867422FD82022BEBE54D643F7C2E425BCE0EC7494D4247243DFA8385DB
C5760B397F0EFF8EC083B3BA4339968E9597EEC16144700ADE725EBF1360A45B
3FF61C5C663B53887859EE1A6743BADE9309A4A0175A4007DCC1ACB79739227B
0AC59369CAF49162853ED46EA65B0C82EFC57F42E20CC880EB0682B9BB414A2A
DEE0811240CB327A5DD44AB6944920047DB7EF79BA460E7587802F6C66C3BC6E
9DF45A22A24877E4A44991AA04F961F6E6BED4A1655EDC31C235D20B206326C7
E0BEEEA0DE65AE6D1C2CC323880D1B2E0EA015221EBEF0627A534BD65EDDA5B4
66A2B687F0998FC59BE4B93F4388EC6590041213A93E5F02E55EF5FA8FE1A69E
FAD555E9AEDAD333B9A3F946BABA234F843C462EEB36B759534995DB85EA5606
F4589DF1F51DBCA063A02F0B52EB7667C6D1A19CC202128E50FB4D7B9F3B4209
5341E04FFF1233A2C24222684309EDAF2C7CCF0DB627261DD82D155134754478
9AA13990DDE2CD0F5FED118D777392AF823128AEC94FFDBCACE9A15F3CEA8F53
69761740324C4C07C1536F74519EA1554A4608FE944157AE0C2B9B54BF614C6F
A1F2C4ADA97D6DAF731A816D727B17DD8CA07834F502CBEC6CCFD2529633645C
1B226C3201E00095A41555C46BE71E771A08AEC89FB2B957A423CF056C1CCCDD
3C421E62303D60B9AD7547DC39426552507B4EC2A44A092AFA1F06E778FDEEAB
B7DD6618994EBE1A9993E664E8CACD7388E35F0D97A62A3FD6958DF86149539F
D3DAB0DD2D07F4B95CA0B01B5D19DB479D1D680FFB5EC0D12C6ECB60F72D16E6
767728770D5B4C77D25AE31C4A75BD8C7EB02722DA8D89430D138B55BCB1BA6E
F9ACBAAA54A7A9E5DEF03CDB67F2274D4FE6721018EDDF233229D7D60AFC8B53
4992629A83BEAC60AB7F8019D9C7CE4B8BDFBAE69307301C2ECF2CDC727804DB
7396934E724F616B672BD092DCC56A26DF1BB0952408D5051FAB8C578E0ED532
A99EB95412EBE5E4183F4BBB5E7D38EA83166314C1E79FE90A9055003BD0208C
BBBD76524B4084D5DBE1934628528987ED9B857F5F377C51A8FF392A822244F5
550DDDE2FA03948E887DD994731C0513A20ED79233548C37269B71E48E053342
9202DCB7D6E5072511EA5EE12897B25691DEE761FA2BA6AC0D66A5B90CAF2EAC
EEC8CD965F1F340A8D3BD24F4183B3956BDBDE2B4241C613FD0F345B3C97E446
4F7B029528A61AD3B7DB9F1AEDDFAF930932D7FD00B6CFA39E6203AFAACB29E2
5E8A8C0404125B8CFB3BC59B11924256754A63332B26ED64F921CB9A2AE9A09F
759E23B589B9101149D5633A991F20A257B3305A81F76940463E2D044358AE66
8956A9BC0120CD61B56115A4207DEF9096D27D3D698BC457F3D5586DB8783F06
030B0E5C758F7A279110DB749B67F3B6901294A6FA251F64B7353A6EBFF04C43
B7D5D1EC0970893C2A3E8826B5A2A73699C9BB55FC4579E52955D03A721FA317
72F99053C2102D4B5BD0EC09FB8BCEBBDE3BEDDF7B014F435412027B269AAF95
A01B38714D5C3E9BFE64463666D0789677B1CBCDDD023E8304E6919CB7442583
6C07BA0F9EC0F0D9CF9FA44D719DB6D3EB2210E49DFA23CFBF21F58471CBB276
BC6B345079EEC827BC49C7DBD28DDB3E1E8CFE7AFF1961031A81A012D0104698
BA30854D6D0E382BCEF28087F4E387C70D495388068F4741728D4C92A8EE3207
86C536C7CBB691860B26161029D105F12824CAA749DC98F1880BAFED29A5A35A
CA78AB5A380DD8718DE14351EBA5A9BC77AB4E4D29D400D9F6C5A17C3506E146
9E5D0087CED3DA9536E8E3F43FC7476E29B41AD042190D574C0686B6BB978164
069639E9C64005AA046FD112425C75C83252901D637F1EF7C2EC2BD897A9C592
876AEC2365A9F7DEC878AB6BD0C05679923E379653D14F67F1E29E8C2533C0DD
D6BCBC1E3AF3E81CB3D9C0EE7635132D1A7559C97A9804F71F33DF065A661C58
976B89B9EC4BACFB4EE3207884A85E22643682D938AB70D416CD39E8562FD546
F1E50BFD407382F58E9C1E574F41ED7A5668110C3DF3982180C7369F4A6CBB81
514A6D62077C6AB5DA1BA6DB4720611FE042A6605343A6E0D3422F7A5337FE33
748E6F703F79D3AB7597D16FF228A02713FA35C25D003D78E10FF158E2B471AC
6F4550994FB633536B6D99D45556E3F468CBAE6939D00ECB29D835E487C20BB5
3D87CEF1C564E90FEA605DC6AEC57C5521C1BDE10CA63833AB245AF597E12107
9CB24E96B591A9C56A8F5D0D171D6DA760D8F054AD425924F7C945C33381B85E
80EB482FB48BEAD2A9E6B10AE587291E71F236F25842C934D0C6737F81FDED43
E479DB06DFB40B8F6B21BAD54F27F38D68C9DFD4BA5BE8ED3B3DC02C24682A07
D87E6D6EEEB3E0B000F04FB364F133445F9C953DA60BC92D30C7486438C4EB17
7F09F3D36798AACE7AFDB7F938BFBA975B9A7D105C8F1CA21BB7D877F496080B
C04A7D53DD89B94B2F587B4F6763CB123806EE0E568C2784CCF33B758499D752
2B5CE537DF8352F46117A3D13DCCE128401BAB4E33222A22ABB177C6607F014E
53380696CBFADB12AA96D16B81820AB7E8B18C7B8C47C1ECEEF1FF4E9E9E4CE3
4660A7362FC4604868EF6688C2EBA0AE4DC02BAD57735F6AB3DAB74B0D5244F9
0FDF0D46A50C22E1B4DD958B7A51EE9F7CAD50914D67F51B41170B1C2910E7D8
9B00C75DFC028504290618A4AD4964BAFF0D71E8F3983B031C03D0DFEE920899
3B7603C32ABA8C4A8DCBE0D0E6218801EAFB019F326E85A8CC963E2783C3BFA3
9629DD1DC75B726E9D4F8694D3A4EAB1BF45839EE4C311EF9941A1871225866E
12E2B87190DE90AD5C98F8F36DB986C6C618AA75E527C04ED4016B8B50527B21
76F487FBF625F17BDA24AC5310B950DED8E8F48DA46665EFF54355123DD3C1D5
3D905BB4899C7A4940859F05FBBC892C5C55F2D98ED013E2AC402744A8D14964
EAEFDE7DC76E3E1CCA3F8402BD3A8787DBF26FD8DC5A9BDE20A548B5F5A95DA6
177B5705B0B71B1F7009E1F185BBE3F649201A28CCD9BB44B5AFDE3E017D471B
D6AA7A8A2C88D236B12CE03694D78B26EADB953ED292A0692B3D3053D49F8FB8
E645FF409271B4A7783CF8B6B1182E8B94C368387DF69BF006376F4D1FCB6A46
398E2A426F9A855489CB7D20901A2C08AEDF995FF4A5A6C79A59FA9A8D4D20AC
E68D3F7A2249515795EEE086BA8EC22BF69C7F3C7B3494AFA64060849A4B1ACF
EA93279CFC923235AC5840C78923B02B8B5BB6375F6BEC6A31E23DB5D9918477
B1F937867E52D8B40AD8302FA952CC2FEE4BF4C353C76432FC276153D61D4527
56F66269030501AF4C6808A9156B827DBB7D26CF71FD6EC695AEADE716D411E8
C61155F959C15E6EC14CC8E4733788DA212EB112537AAC2F5BB0BC9DC33B6CDC
033CE8F30585DFF6A26A5CED53E0EB42B4BA1A423FB723392E3F9D872F3D3221
8A36813CC4DA7F46810AB8F74AA464E1019469098EA2EB484D0FF08E196EFC5F
2CE715B765EEB782AB751C40846188611E976891A2BDFC66EE858D35E2109DFD
EDB2321F0A36B1B1C0E935AC84696C5AC192C44C5A12CC39C6913536094753AA
5FE332F659D0D19E49BDF99F7C891290A2643009F7C21A10C45E2BD3C3439BAC
4B1D582F4723F2143CD07E0E6958254B6D96C9E5490F37FCA7120F8F3A8E4213
4F1B6B0C248D56F247AA6F43BB6D3466701360B64A0E68B3E4ACEFD98F22E80F
8C9BF15E3A6EA4ED4A4D375B2D42DBD1B70D7A5E03B4F0C30C8CB0AFA895CCC6
5D57668EF3864D2CC46E07875F797F6ACD83D472CAAE764842F3B4E65999F261
955E429EB70194240BEB2B017C9C4F9E43D85CD32C949F3D91E641CEADEC709B
67C6EADAD9672DA050118E236AF7279D2F097B59ECB9ED4D16EFFBCCFF0CF648
981BB0F88C0E3B13C77907FC344161A50B22D67F4575D447A18641326DEEAEEC
81170F40C2ADF359D8B6002BA1B01A8F03F44765B68DE81582F0FA4728B81578
FC2EB39C989C6AA1DDC481C68FD4C026A95D677617CAEE4CA4B282C8E5FF51BD
C8C2DB390FA2BF1C1B653BE9ACA74DD371CBF95C1A74096C801AF3D07AD30F99
31A19C1C8ED2620759BE8E2CEC51997227CDFA49FFD913B25952FB9F925B1223
EAE6D9D24F9CDD9F80028D37C9CB4067A28D41E87DEF88D95B8A5DAC624EFFE6
B1E94F1DB5B3628E247CFF242586EAF130825F3AFE76608695CFE97AB3C6AFC8
F1D7C3962C8E06573D4825BD189574153F8FE0E4EFDBAC911C63D440643408B2
CDC390814A5A709EFC5F6A2DFD392693E0788C7BCBAA88C69C4F7957B2792CC4
A9DBBEA67294566B0F712355FC03500CE824747D6C885000F9D8C35A004696DB
A1856DC303241DA48D648DC0238F0A2AB3DA276CDCE9CE3281F9A9A50CBAF55D
E1A18DB06A29B819615C4FB4CC3A3A5AD57EAD62A642F7BC52D0064D626BA549
F290A897AEC52D74BB6747FB9CD5A633DF53752834D4F0760D8A5B203546F396
723B047EC58146C835CE2E38A1E1C2E237091723377A30F50EE2D9C8C41FCF68
53886629E9CF217F7B9B18573B6CBD958A80FA14221F9ACB99322D89E1EC21A9
429823F083D8DD40C333ED47C5AF3959B9C5D456345D3EF4E343604CC9B5C2E8
5261C502145926E7231C3D0ACE7755A750EDD67622BC5CA310A4BCD9C814493C
6D26742E16DC57FFF25B29C3CD32B8153A3821BD24037CA7A96E3C66FB6A93CD
041D9A34FC7AC95C2F50A4280C835E316588A64A0B14D9A6F44932C5647CFAF1
B1BE5B9FD0D277D5AFB48E827DD0B979E7FF61A21F9E4B2A07ED6A2570E21CE7
5B3DEFE1A57A0DC9FD7455631B667A6E45E7BEC208C3B4A68B34E3E1AE0AE8C4
3973875938BE310D0033D4C73CD6C95A76CD17A1AE7895F34355123DD3C1D53D
E852BD53B3D96D090EAC34EF6B71A0E91D39A856F11BE21F316D94ECBCAD9BD0
AD62C96E44060C1D4CB37236209050865DB7C42DF622B4D5118C8C0DB701D2AC
177534FE19FC87E7E26F3A55611483AD94729DE9FEDEFD6748EABD96D9FEC550
51D0E0398B3D9062B80F9C42F94B4B17A5661AD726E0285B5DEE39A4AF0C452E
B77B9EB60B387646BD4E1BA49451DB040311D6D7AF302BBADF69799B489FDA94
B1A7CEBB5F28C5CF44CC68D8BACFEF57A40DA8E0AD1751EBCAC95B7C0F0BF797
44EA95363F54A5B19FD37F05114B69D9EB2C285965F4DCF207F6BE5A1C3C4AEB
59E26EB680228DBE62EDD18DAC476DE8F8ECDB944577917AD5B3F56D75393A66
5BC35F1E515F6BA570464F63E2ABAF1418E47B8432BD1AD7A9CD912F2BFF83A2
C4705A26F850B812003A12AD74A679146DFC5A0C04A5516CDE541CE81ADBC193
2A19D7626D40181F4294834F9EADBB54DD4DA20B8E94F3FD4956EB251989F8EC
CC6ACA25E675665AD15D95F8053F8B9BBD2DB74105301D0952E950AD3A9DD11B
C6D7C87ADA05574A8F92300CF029D8A385F0270E027AAD4E98234C148A155A47
04FA74AF8E391AC2884D238D6201D37D31BCED986A27128A23A453E1972D3847
BAAA59D968307E61E7F10415C343B2299841FCCA9FE9E870FCD8A66B201C4272
E51B7B20B08B033BD6797AA3FCD2F33FE8DD916BE88A1866D48068435175B399
1B13A1A410B6E14C014E1DA800226FFC3593DDF95057F1A668F7137A0C348F45
0B13EF02D74B00F99324A6BE305080E8FC9A14ED4D7FD2F08CEF3916FBED018F
284F746EBCFA56734DDC425136AB0EC68287586D722EE5B99CCC94A4CDB6B799
6277C97EB092E8B67D1F151A43428460AC283786C06ABC64D42CEB3EC71227CF
34433DE4E8302E6097BA78969A36098500DA2D88D6FD07A5732B6FC911A815A4
E3171C73AA4BFC5FF6F0C3EF0B66A09EDCBEB5AFAF57286E78D8BB50F22611BE
FD2EA53EF4B726A49A568E3F27DF88EED64E45DD9874A61523D231916991D283
E750DAAA3BB7DB64305F9531FEC9937F2FC60EB38D8E791A736B17F106124CBF
B5A51D0DD80A5A0DAEB599DD5D3940C3BA0147BAA468AF87D5E34258E4749222
4F81BBDFCCB046BC9A6FC0F2F1D3A5B80600ECAF928A648C060DF99984F2BE40
DC44E21C27D5FE8A6DE4CEC6967E6F066F7E02555FC2F3A58C14D193A3BC7B6E
C6494B866D791A1F2A194B765AB8D650213B8AA85CB1D2DDB49D6922BCF5C989
EE9BF6C320F8BE86D064CCB035818DB3F5180738501879609AC050E7001000B2
C6848457D632AF0F1DCFFB6CE39F189D99F221F2160539A2A7A5A9E6FA0D8EB2
C071AB9D8749A095671A46A4D8C410705B100FF1033BE0138C83F4954E3E9F45
8653B6CA43CE1F9164BB0FE39FBE5384560921CBE040A2AEFCBE4AC82DAFEEF8
6EB672AE5A5E89C0361768A3432BA668F5301555CB7F97E4D8AC704AD99AB786
A3D5D0C5AC216EA68F8F7D3A5BD929E83DF4ADB5308419481FC1CD966965C72E
9490C31153E1FD685197A556E05CC460DA5FF8BAA066043F44D1AF3635CB9C82
A50E6C6440387049A0C359218F5268C9A28C38B2BC7CD495156D56EC5DA36213
685C51D23EE8A56E3B8FE731618008FAB0329BDB6A9B16827C78A32769CB9DAD
E0B090E027A882FE55FA0DB3E4B4FB6D34DA16AFF8A906A01B06F04210495AB3
8C1EFC9433FF2BC39BFC509A787980ACA80122B1ECFAFBBF92BF858CCC73EF9D
38F50CE015314CFE9BC293CFEAD3E55F65BF280EC97B0F16F6B88A82F3433A0D
6F1609D293B2C2905AEFAB507701D972BAEC539741F8B99CECD2737CE838614D
42637BA1D16BB08F5F997A8523C412BD8A0B47FE1064420BAC9916AF83CC0415
7BF6492F8A7791BA5B1FEDDCB5F0E126F26BB682FE26B34CE15E0AD3762D59AF
BE3DC9137D86BC31AAD89CC7F08DBFC1D5A6F0EDD6189F96260D9A3E911B5115
C55F586AA561DA16FEFCFFA30F0EC6AB5337231D97B904599A94EE2CB58F33D1
62309503C2244A5E0601F1A8E23E12340D6D91226CFA2B432F29B522FD421A10
185A9F60E43610FC33499DCF201E3A4AFDB7509A19756865981D6C109D9D4E25
73E95FA4A2E671C13C58C020FA6D0918EF4BA6A2CD2D4DFC68C024CDCF73CA68
3C501B56B6F6F1597F9F2EE76A45196C0D4AD5F63E9FE5FBD48008633BCACB1F
F8C44C2C072AA8F55A6C5E200BE986F7799B794A1AF577A1598D611F41652E00
0EFE625D8A1A6EB9857190F94D1D3984016886C9F13EC903E8829875FAF2B50A
51B1A4E64F58210DECF59C716CCB290E8C95F160D512DB34598B8CAED5B6DA81
A6C816C747518670A4427891F216DCA5A69E11B079D9AF78A4C998A748768FE7
ADDEE2A72866497FBBF49B8FDA5FF5956B7633A93ECF59AA38B2FEEB448B4CA0
C8726ADC87E473C690BE7E6882D804A6EEA79B7034C1128484ADB7FA41251F57
42F9FD69A927D3CAB630A9A2D3227FF0ADAE13A76D18F1FBB3826AACF4489BE8
0CB7BF3C1C1ECC1076038B657B69063847180B6DCA83EB97A55FFB23788271A6
73B5E6E3B114C105A187E4ADE0186B8ACBDD4537C9865EEEBDEA30676BFB6373
5B05E00627C382DC0724F8DE961575677B2D73DA5A3447A44F0AD8379E7F4317
100C26F5196B4097497EEB38F020E38D51F65DF4EB0148F58684E8DDD4641B79
CE028D562AE3191290BA5F59BE94B118F6FC73B6C0B279D81891883CCDCA0FD8
808BFE15A1C12D0B23A95AD7CA9B8C5973B68EE51330440DBE02AEC0C21B34A9
6971ED85DEB619B6C6288698B4ED6526945052207E6F6DEBB2E8B989FB7CA00A
CD890470ADE257C98DE52FCAE577C7EF0A72CB1F4170BFFA487348B020287771
F728FDDCE8BB0876873C49ADF8152818A5616D6736EE24E135047D1D412E289B
BF35B80F92DD0D426E47C210AA27A3700E11D47169D9703C24A911062FDE67AC
72CE873D9107FE0A031605CF6872260A0C808B13E719E08383B6A269D928DD94
CE748AC1F0E99EB86896D106C4D7F6CB65990B7D718F6A16F933DDDC891E99DD
5FD08A9ED3E42F346F6CD76FEB460B4D6C03B7C24DE5F974FF5054D30C094FC5
4976CCF63D786E7A1D49B04A98AC8B3F4A263F48263C27AF5E0D027B46F86C3B
B65BCE5A20E3EA1943289AF158BA7B1D8AD996C6E882CCDC5ECE088B3ACA4E03
A3CF8C5DFF4132151E1300915CB75F7E6F40B4A6BEE3B6989C474D1843A47157
6D4894549E697B0FF2A4DD9AD740E8CE533A0528C013A3BF8550A33617A13D09
8832C58EBB4F54F943DA2FF24F2285B3F4A22D017A5A32FCFB655CC893A8ABF5
E1A2260C98499A7A62DF68C3DE2065A772019C474B051429933450F7EBBABF4A
F412DA745900221C7BAC6DB4025057683A60D3A0A4E3A06E957827E12CCB7E5C
9FA77E5B1FBAB522FF45C34242219B17A66E22F4118D14B1C32C973294B0AEEA
E9CF1701F6DF625DB40083C9FDB651061985AEA67F13C35538CE86CD9BB2321C
5698B48F381A17E7FEA2260659E5AB473675F8DBD91972A0A607EB12F346C9F2
F469BE383F47BB8E249300A4E2A66056BB18F8C1E71462FDB1B825834687536E
08910D311804686C70EF9C7A20EFECDF6B1C287FA48581CF4FB723E2238AB55E
E86C264733E42B64F1DE8F7B82C69932AD15D4937467352FE9B8B0934B26B5B7
CB2091CAF0CDBFFB6D3AABCE86C6EDC2578E1DE2F7F467A41ED7A40F6F47FF20
438FF0E862A1CD0F8CB6EBFCB46978D4B765E893333ED8D8C2504C39160E7ABE
5C9E7302EBE72B7927487B8A16E97D364916EE0005DCBA60B400B92DF30A2BC7
B06C5679A64DB5E4576208C65A376E555E91177C25C29D6E749326DE674F556A
CEEA19D0BDE898CF328861C3CB4423FD2C0C1AFC7A3CD0908FC150E294DA02F9
F2E16A7F56AC96325FB8E71C23F946CA1DDCFD1D6EBC4A7A206550FADDC77D46
00AB12E343A4E98C4010495AC37EF0FF52EEF5F7D71B813AA3169B38137F0265
2875CEBF7F77DD6677D820B4A9552E5A9883982B360214C51F7B2776DC8DF7A1
B80ECB886EA2700075588C874F55FCD688FD32B813295711C525C291A38365BB
7E8C416D86499F49F2AFD7A0B06B3F26FD8C3D075A1CF750ACCD72489207D9C8
1DD862768EAB5DC914097B59ECB9ED4D16EFFBCCFF0CF648981BB0F88EE20412
0E72412526349C5B4D3FE5690BF4E925AB2CB9A319ED5B682696A02EA21A9C6F
C7C1CF767FB3E937DAE74A8E120B61C9B1CFBE3C57C6A60222A5C6ADF8C6FEB6
3DE72DAA04EFE50FAEAA8C7B9291E8CC8AAC6E4AEE0394B8C4E12D9F9E97E5DB
AA2871665E9B2C0C88320D01B0B50BCF16EF9825F6B20090E4D6280C5283754E
BADAB0E94DCD2FB69D65D8D970C3C755E6F464E23802952DBC2AC0A72F776075
4D8ECEA3C7FEFE145241D31F6765142F7E5345477E3021DC03F77F4B989484AF
AEB5F1262807ABEC466F56A4614EDDE2692640D9E0B5425E6AB6C0F2A716488E
C2CA310B0DBA63C1A1D3241D90E8850AB5144766498457EB73E1115548B2DF3E
BD6FB671801FEFAEE7B9707A9E7EE38D8E3541034FC0A22F0358D49FB42CE476
2AC786600CF0EFE07D4A0CF91F7087EE721F64CA0E33B511878F1E0C805586FE
65AA30EF505F246F21D3AD1E663AF5FA6F4C6B58E6AE60C1718D18D9E787C067
8445D5396B1780AB8BA8146BB6828557FEA53BE7E8DB50F6271D2EC1BC2678CD
E2E29E9562C3B10A749A1436FEB540D4536ECA77341301986811B7C76940F64E
FF4AFBB38CBD4815E33196056BC687F886C067FC70DE0B05B1133839B9FBF408
3B75C000F0A56FFE04BAEE21591AEE710DF145B8CC39EADC00F42AAD7BDCE1D8
0995284AE9279D8CD00DC33064E82B283AA46D876F0DD9AE8C10E2827FA9A645
2B05A9E0A4D4AC85DCAD1DCD36CB4D628852314B0BC3D452F04DB9174688EA12
CD8F00B8CF4ACD384E902DAEA7DF82C1709D96CD3D475CB31F758C0B8E4162AB
F227D57119A0D31F9156AF4D76E60EC29311F262A230C085CDDB6DE033212209
872667423B22D9891D718E1BD82B3A36DA8CB5E590F9BBDE89001BB2008E75C0
0DEE1E9D4875A753BEC3BF97265F7C2DB58B320496C6213ADCB1B2C50DF592E1
62946C2D2E315385D694C6734E8802A97DB27A57CBA90C8A608A5E9972DE3BDD
86015BEC62A18E7080137F0B54892446EB7FDE7F92D9F8B4CE14C2B2A1C538C8
85519815287BB419BD974BF795D871B9E42C2E9B60BE3D172E2F03F5649A6566
3454A8FAACC1807A1B93035C07283661D1CDFBC34C588C960D438F235599848A
4C95D7EB3F7FDB5E41BB1C0A46FEF16EBB0A93FFB2C31E48ADB3D9C7183B8EC1
92360878D62CF47126804115C3734157442A161BD5A9818A95AFBD19A4965650
89DEA18A90251F8BE10CC00A480EB1FB57CB36234A3AACC86C0D95192C772C12
9F71427E98CC2ECABE772A169EC77FE5AF2F8A4F93075F35E31F0F60669F73F9
08BD40BCC5D29F88AEE951C2452D22AA967D32C3F37A926EC97EEFD06CA3E4D0
D6CC2B904C38F4106AE01E2CF5C194290291AFE066E7C1E80836BCFD070333F5
48C652A5B07D721EB915CED3C04DB1C89FA98F85CB28D645735877995245856B
5B5C2678EEC2F7DA99F121101005CB3B2F02BC63C24867F6AC4A0725EC7BEAB8
54D53BA686CF408E6FE27BB4D8A29EA131D482990C1BA1321D96C67D425503C2
EA798760A5EE257EB6E96214A956E911E3FE2921D32022B8FC8E2725C7D0F83C
B160C170298EE8B676A2E276F59B441E24B78E74D3A8F33529550DFEE90C05C1
4DA0D12037D3DA0A59281716B79A09D0DA43B3B6D093109037249EDE4DCE4030
B74A6A9D33DFDC62868861B6EA02DA05D223700B79EB9736572AE1B2B9A234F3
94EB619D4FD9EFEF43C4933C4120B0DDBDD4CC852F53207B4C082D3C99D30646
37FB542C99FBAB0A2CEBE51FCFA337A7D3714416756677B251543BAC7EEA7929
0016F6CE1A8332A77F78B569AB46E09B91E225D0AED56107BD6F4565A426421A
B1F43F6D3FB39A32B3DD2B06D394E6C71B572542E0ACBEBFF0A99C9203D6893C
D2B43CA2E06AF86228F0099D542E9DC1BD77618DA8FCC16348F20358F4183719
B34248238B46EFC4381F8AA02414C2FF62583D166455F7821A44C27F4DC5550E
9C21BC719C0DCE89FBB23B25B8BD6276ADAB75A8AA1ACE9E4426114DD8215799
01B8563C2F66397A359E11CFF2D60F8105103B2E4D023F312FB8069A59AA82D5
62998E6BD54F3CD5A91EF2EF703BCEE9E7745FA000960DEA864CB4353C49A547
118A742017422B71F1FD9928DCEF3510F60AA52F893F9E2465A9534EC55B6A17
6E81DEFE2EA52010419A7B096CF32CDB86D66629A9910ED310AB98D922C36441
0F36D3C2D229D803EC618F436414A43D83124006B220B251F55DC25D9AA6EC05
4E9A2FF7E178057674A4F94F41C61809B72D0A48EC241A2D9512C5B8E5487DC2
55D76461BCA90389032FE6682EB5B373643142F5804346C1264135E15756B43D
90E252FBBFABD3F1B93134816B1E636A2327F6240BFF595E24EA91D56A117413
6F0A04A5CEB915B8E21F640745A0AB601E24176F8E9257CB36EC875339EB25DA
DAA0E1A671EF9388164923D82797A31C3E4B34CC68F40F0C4D87AA979D919D55
89C52B018E46EBE636B6214175D6C3850D907DD93A66DD545E42A1186979609C
D62EF3C72F91FE557ED9ECD20D18649F1C1EB7535779A5BAB5D82B422345F65E
69D4A92801AF9E1B1675357FAD583F6C69AAC18F392B0E14D7404A8AFE19078D
46A0CF549D7D5A0B3520D233BF27AB56E2BB7FD13F58D6CBECE222088CB8D409
E71D399C26312F07F715DB714296D4C21C869A35A58844DCDBF72C2D5D45EA9C
A8AA09836B1A7BEF2573C6AE4538F0370FD355FA08C74EF4D93062276C57C4B3
09FA76BC36AFF327B243142F16F24F46ED7BC57BBE98B10E50962FCC70ABF78F
05A4CE0421600A3954F3348275F9FE454C48DCAB351D706BE20D28E69F8D94D1
3C94B73D51B2DC54F6D489DE8FAB7FBAA76314839BC131CAC53594E24E332486
D7A62C55BF85F34D685152B0982852EEA9312B0F6BA329AC1B2AF757930D8528
0F62DD2CC43669051E68F23D6FCF2C0FC3086256E972A7E5CE4B4EF716B85203
6590FF03666D56E1779556B90E0847ACE3622D7EC0773CB6FDDE7C469F933849
F7A01B3E390023FF60676035686EE47C1AFFBFE1A1076B2259FD01BDE8915301
5D8F601E80CFDAC6BADDF15DB827BEA2ADA33BD8E5F5F88A87186DE1B496C40B
1ED59CE02F8E85316B945086E44D10E742BFA4FF26891A6B27CFE73425A8BED3
81C1BE6804F7C1BEABF2AF35CFFF48F826B47C87552715DF3D74A8E6FBF37FB9
1BA3F738EC0C9FC235B669900414EA4A825E7EDF032185898BFF8BDA276C5B77
C9D89FBAFF87F4CDB794AA78AFBB5DC8948DA571C523EB710C2450AB228CFB2C
A0DFD5649085E7A6476A2E8FE0394F393E530139BE17DBD0248E5B6DA15D01FD
D65707BE50162E7402E08AE950901A5DBFE05EE2EBD68CEEA9B8D6EBBE583102
10823CA6885646925F5DB2AB8BE9D48E98D22E439842F3053FA1F23649EB633B
446E0E61E87AB716E2AD7BCAE61E9038D3E69325F0983132D2DD703A7D4B7DC3
718367C5E3D9000D1444C7E1A248BD66C01738198705D031C5573416D381577A
D3DF46DEB092D7E893CB9F5C4FB6ED719C09172780885B33F0029D84B8072D0F
5F746C7E8D53F2EC8DA89AA3F92359E43730CC67E8A92F6EA4AF308A45A4939A
C41D88531152B874E3B142C97E6A6E5C1EDB20622297EE0DF5774C2A1D2BEAA1
F84F86A9C188CA5F15B83BFAF2A53276BCE207EE1BE1937545018E11EA2A96CA
4D5017A4999B9643A75C2420E26957EDC716F00B003B623C6987281E62C774E5
24491247069AB8E5ADA4F9EC1E430E7633A284C77EF432256FCB3EA78A9E16F4
883A479FECFBC2BE2DC3E39A84CB9DA4C7FB495CF3676074DD29D4340D122408
2C33A26DC8682147360CED307709C1A4173AF5B65A804E850242736F62B3E3FD
5E4A559CA24F29AC6A58BAC2682C431D084EC3CF8F89A73DAAFEADCD1917B7C9
E1DF69F67624A5D33ED1BB6C788EC4DC50C4A2249FE4068D529E9C8C3F606E54
34F82104CC0C8A1E6AA5A5599703A8F22870FD8894F23CBD507627DA6453FFA5
80CB7C7EEB655F6DEC182A51A5B7AFC46C6B720342399F46A27F8E97B7E0B69D
372BA3EB9614ED535DCBD3326E9585373D6D2EC297D4E9780FD641FB2A75EC3C
5E14C66BA7856A44E3AE30B294448B28E903BC95A7B9C0AC8B0C2DEF08A6B185
F2CA01640EBEDFDA6C2F2133C10EBBA458BAD0F8F52D8789F32305A7EBC47A61
50DB4598BCDE50B8C9EA8A39ABE4294FE1AE822E6ECAF23A81B724A6D86D0B5E
6825980CAB56D4A853F00D0A2511ACE17588F0976EFA1E41F1128A8DEC899026
7B1BD97D47DE08CE4E4B616DB48C17E2CB53F54C4D81C9E9C0C24CAA83ED398C
700948FADE7ABAA593EC883C770EBCCA6A60E645A8E37F5E8203BE083AED7DEB
53D6FC1FC9CA256EE3FB416D8D4DD073446D3AD606E0F05C9D8749CE1B4B9235
4392A07A758C0046645EFC2540D826962930D3D0C3AABC5D0245D0109479D3B0
7FB71D689104A83D0653103C363537E82970FC0EC03205E8F45E7660689292E0
6F075CD18C63EABA1E2E19E4B22242E5CF3FB397348C0743D0F2344A4FC05426
9283A92E03D318BE69D3D10E36FE2CBF48C20DCB99FD2B10C7B15E17D00A81E7
5F6C27A0823851F67219DC0BD8CCDE5DCBF926CBA1D5205DF7C30315EE0CDA25
62B70DAC2A775DD60292815B1AA22D14AB6A59F4757550B7FBCD3887FE7FC4AA
B63663D90BE41601338FE4DEE8EB965A2A33E83BE2674945EFF7DD65689DEA65
67D041F95626ABEFA046EA57D16EBDF85873C234829AF155120E30A9155553F3
C5CC8D3DB6C01B2D63652E1E158EF696C90A4A47527C6C9714C50454B814B5F8
1381BEADB4DD812C8987D660E9603A33BDB975D10B7C78F03ABEBB1912F0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000
(C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktional)
@start /Fa 185[723 4[830 11[553 2[553 3[307 46[{ enclmec ReEncodeFont }
5 1106.96 /LMRoman10-Regular rf /Fb 160[909 45[606 1[606
47[{ enclmec ReEncodeFont }3 1212.12 /LMRoman10-Regular
rf /Fc 154[966 101[{}1 1328.35 /TeX-feymr10 rf /Fd 203[993
52[{}1 1328.35 /wasy10 rf /Fe 254[369 1033{ enclmmathsy ReEncodeFont }2
1328.35 /LMMathSymbols10-Regular rf /Ff 194[1012 7[650
650 650 650 650 650 4[1012 1[506 506 2[1084 37[{ enclmrm ReEncodeFont }
11 1328.35 /LMRoman12-Regular rf /Fg 135[739 3[470 6[1138
1[676 2[749 1[641 1[676 13[758 24[650 1[361 59[{
 enclmmathit ReEncodeFont }10 1328.35 /LMMathItalic12-Regular
rf /Fh 650 2[723 5[650 17[650 105[578 2[939 686 723 506
513 506 1[723 650 723 1084 361 686 397 361 723 650 397
578 723 578 723 650 6[795 2[1336 2[939 723 957 1012 3[1192
813 1011 1[469 1[1021 849 885 993 2[975 1[614 12[650
650 1[650 361 434 361 2[506 506 6[361 3[723 723 759 27[{
 enclmec ReEncodeFont }55 1328.35 /LMRoman12-Regular
rf /Fi 138[1196 837 849 879 2[1076 1196 1793 598 1136
1[598 1[1076 1[982 1196 2[1046 9[2223 7[1616 1[2041 3[801
2[1353 1412 1[1554 1530 1625 11[1076 2[1076 1076 2[598
717 45[{ enclmec ReEncodeFont }28 1912.83 /LMRoman12-Bold
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-2331 165 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a -2331
165 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a 1328 x Fi(F)-239
b(A)722 b(2.5)f(-)i(1)f(Mo)60 b(dellierung)719 b(mittels)i(linearer)g
(F)-179 b(unktionen)719 b(-)j(MC)-2617 4515 y(-)c(BIFIE)p
0 TeXcolorgray -741 7823 a Fh(1.)p 0 TeXcolorgray 651
w(Reale)443 b(Sac)-36 b(h)g(v)g(erhalte)441 b(k)-36 b(\366nnen)442
b(durc)-36 b(h)441 b(eine)h(lineare)g(F)-108 b(unktion)441
b Fg(f)142 b Ff(\()p Fg(x)p Ff(\))383 b(=)g Fg(k)346
b Fe(\001)301 b Fg(x)g Ff(+)f Fg(d)442 b Fh(mathe-)921
9815 y(matisc)-36 b(h)433 b(mo)36 b(delliert)435 b(w)-36
b(erden.)921 12360 y(In)570 b(w)-36 b(elc)g(hem)570 b(Sac)-36
b(h)g(v)g(erhalt)569 b(ist)h(eine)g(Mo)36 b(dellierung)570
b(mittels)g(einer)g(linearen)g(F)-108 b(unktion)921 14352
y(sinn)-36 b(v)g(oll)434 b(m\366glic)-36 b(h?)435 b(Kreuze)e(die)h(b)36
b(eiden)433 b(zutre\033enden)e(Sac)-36 b(h)g(v)g(erhalte)433
b(an!)p 1062 15319 44260 45 v 1062 20447 45 5129 v 1770
17179 a(der)377 b(zur\374c)-36 b(kgelegte)378 b(W)-108
b(eg)377 b(in)g(Abh\344ngigk)-36 b(eit)378 b(v)-36 b(on)377
b(der)g(Zeit)g(b)36 b(ei)377 b(einer)g(gleic)-36 b(h)g(blei-)1770
19170 y(b)36 b(enden)433 b(Gesc)-36 b(h)g(windigk)g(eit)433
b(v)-36 b(on)434 b Ff(30)221 b Fg(k)45 b(m=h)p 42912
20447 V 1 0 0 TeXcolorrgb 43621 18215 a Fd(4)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45277 20447
V 1062 20492 44260 45 v 1062 27355 45 6864 v 1770 22352
a Fh(die)499 b(Ein)-36 b(w)g(ohnerzahl)497 b(einer)h(Stadt)f(in)h
(Abh\344ngigk)-36 b(eit)499 b(v)-36 b(on)499 b(der)e(Zeit,)h(w)-36
b(enn)498 b(die)1770 24344 y(Anzahl)319 b(der)g(Ein)-36
b(w)g(ohner/innen)318 b(in)h(einem)g(b)36 b(estimm)-36
b(ten)318 b(Zeitraum)h(j\344hrlic)-36 b(h)319 b(um)1770
26336 y Ff(3)221 b(\045)435 b Fh(w)-36 b(\344c)g(hst)p
42912 27355 V 45277 27355 V 1062 27399 44260 45 v 1062
30462 45 3064 v 1770 29259 a(Der)393 b(Fl\344c)-36 b(heninhalt)393
b(eines)g(Quadrates)f(in)g(Abh\344ngigk)-36 b(eit)394
b(v)-36 b(on)393 b(der)f(Seitenl\344nge)p 42912 30462
V 45277 30462 V 1062 30506 44260 45 v 1062 37376 45 6870
v 1770 32448 a(Die)291 b(Stromk)-36 b(osten)289 b(in)h(Abh\344ngigk)-36
b(eit)290 b(v)-36 b(on)290 b(der)g(v)-36 b(erbrauc)g(h)g(ten)288
b(Energie)i(\(in)f(k)-108 b(Wh\))1770 34440 y(b)36 b(ei)384
b(einer)g(monatlic)-36 b(hen)383 b(Grundgeb\374hr)e(v)-36
b(on)384 b Fc(e)g Ff(12)g Fh(und)f(K)-36 b(osten)383
b(v)-36 b(on)384 b Fc(e)g Ff(0)p Fg(;)p Ff(4)g Fh(pro)1770
36431 y(k)-108 b(Wh)p 42912 37376 V 1 0 0 TeXcolorrgb
43621 34273 a Fd(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 45277 37376 V 1062 37421 44260 45 v 1062
42476 45 5056 v 1770 39281 a Fh(die)302 b(F)-108 b(ahrzeit)302
b(in)g(Abh\344ngigk)-36 b(eit)302 b(v)-36 b(on)302 b(der)g(Gesc)-36
b(h)g(windigk)g(eit)302 b(f\374r)g(eine)f(b)36 b(estimm)-36
b(te)1770 41272 y(En)g(tfern)g(ung)p 42912 42476 V 45277
42476 V 1062 42520 44260 45 v 47992 7823 a Fb(___/1)p
1 0 0 TeXcolorrgb 48228 9815 a Fa(F)-123 b(A)369 b(2.5)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
46548 54804 45 v -2331 51849 a Fi(F)-239 b(A)717 b(2.5)g(-)h(2)f(W)-179
b(assertank)715 b(-)j(O)-60 b(A)718 b(-)f(BIFIE)p 0 TeXcolorgray
-741 55157 a Fh(2.)p 0 TeXcolorgray 651 w(In)433 b(einem)h(W)-108
b(assertank)434 b(b)36 b(e\034nden)432 b(sic)-36 b(h)433
b Ff(2)221 b(500)436 b Fh(Liter)d(W)-108 b(asser.)921
57702 y(Zum)503 b(Zeitpunkt)f Fg(t)488 b Ff(=)f(0)504
b Fh(wird)f(der)g(Ablasshahn)g(ge\366\033net)g(und)f(es)i(\035ie\377en)
f(pro)g(Min)-36 b(ute)888 59694 y Ff(35)435 b Fh(Liter)e(W)-108
b(asser)434 b(aus)f(dem)g(T)-108 b(ank.)921 62240 y(Gib)432
b(eine)h(F)-108 b(unktionsgleic)-36 b(h)g(ung)432 b(an,)h(die)g(das)f
(W)-108 b(asserv)-36 b(olumen)433 b Fg(V)722 b Fh(\(in)433
b(Litern\))f(im)h(T)-108 b(ank)921 64231 y(in)433 b(Abh\344ngigk)-36
b(eit)435 b(v)-36 b(on)434 b(der)f(Zeit)g Fg(t)g Fh(\(in)h(Min)-36
b(uten\))432 b(b)36 b(esc)-36 b(hreibt!)p 1 0 0 TeXcolorrgb
921 68769 a Fg(V)289 b Ff(\()p Fg(t)p Ff(\))369 b(=)f(2)221
b(500)297 b Fe(\000)e Ff(35)p Fg(t)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 55157 a Fb(___/1)p
1 0 0 TeXcolorrgb 48228 57149 a Fa(F)-123 b(A)369 b(2.5)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
72576 V 0 TeXcolorgray 24746 81281 a Fh(1)p 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
